public class org.apache.commons.compress.archivers.dump.DumpArchiveInputStream extends org.apache.commons.compress.archivers.ArchiveInputStream
{
    private org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary;
    private org.apache.commons.compress.archivers.dump.DumpArchiveEntry active;
    private boolean isClosed;
    private boolean hasHitEOF;
    private long entrySize;
    private long entryOffset;
    private int readIdx;
    private final byte[] readBuf;
    private byte[] blockBuffer;
    private int recordOffset;
    private long filepos;
    protected org.apache.commons.compress.archivers.dump.TapeInputStream raw;
    private final java.util.Map names;
    private final java.util.Map pending;
    private java.util.Queue queue;
    private final org.apache.commons.compress.archivers.zip.ZipEncoding encoding;

    public void <init>(java.io.InputStream) throws org.apache.commons.compress.archivers.ArchiveException
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: void <init>(java.io.InputStream,java.lang.String)>(r1, null);

        return;
    }

    public void <init>(java.io.InputStream, java.lang.String) throws org.apache.commons.compress.archivers.ArchiveException
    {
        byte[] $r1, $r9, $r15;
        java.util.PriorityQueue $r19;
        java.util.HashMap $r2, $r3;
        java.lang.Integer $r18;
        java.util.Map $r17;
        int $i0;
        java.lang.String r6, $r24;
        boolean $z0, $z1;
        org.apache.commons.compress.archivers.dump.Dirent $r16;
        org.apache.commons.compress.archivers.ArchiveException $r23;
        java.io.IOException $r22;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r7, $r11;
        org.apache.commons.compress.archivers.dump.DumpArchiveSummary $r10, $r12, $r14;
        org.apache.commons.compress.archivers.dump.TapeInputStream $r4, $r8, $r13;
        org.apache.commons.compress.archivers.dump.UnrecognizedFormatException $r21;
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream r0;
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream$1 $r20;
        java.io.InputStream r5;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        r5 := @parameter0: java.io.InputStream;

        r6 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.commons.compress.archivers.ArchiveInputStream: void <init>()>();

        $r1 = newarray (byte)[1024];

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] readBuf> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Map names> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Map pending> = $r3;

        $r4 = new org.apache.commons.compress.archivers.dump.TapeInputStream;

        specialinvoke $r4.<org.apache.commons.compress.archivers.dump.TapeInputStream: void <init>(java.io.InputStream)>(r5);

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw> = $r4;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: boolean hasHitEOF> = 0;

        $r7 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding getZipEncoding(java.lang.String)>(r6);

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding encoding> = $r7;

     label1:
        $r8 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $r9 = virtualinvoke $r8.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] readRecord()>();

        $z0 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: boolean verify(byte[])>($r9);

        if $z0 != 0 goto label2;

        $r21 = new org.apache.commons.compress.archivers.dump.UnrecognizedFormatException;

        specialinvoke $r21.<org.apache.commons.compress.archivers.dump.UnrecognizedFormatException: void <init>()>();

        throw $r21;

     label2:
        $r10 = new org.apache.commons.compress.archivers.dump.DumpArchiveSummary;

        $r11 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding encoding>;

        specialinvoke $r10.<org.apache.commons.compress.archivers.dump.DumpArchiveSummary: void <init>(byte[],org.apache.commons.compress.archivers.zip.ZipEncoding)>($r9, $r11);

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary> = $r10;

        $r13 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $r12 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary>;

        $i0 = virtualinvoke $r12.<org.apache.commons.compress.archivers.dump.DumpArchiveSummary: int getNTRec()>();

        $r14 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary>;

        $z1 = virtualinvoke $r14.<org.apache.commons.compress.archivers.dump.DumpArchiveSummary: boolean isCompressed()>();

        virtualinvoke $r13.<org.apache.commons.compress.archivers.dump.TapeInputStream: void resetBlockSize(int,boolean)>($i0, $z1);

        $r15 = newarray (byte)[4096];

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] blockBuffer> = $r15;

        specialinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: void readCLRI()>();

        specialinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: void readBITS()>();

     label3:
        goto label5;

     label4:
        $r22 := @caughtexception;

        $r23 = new org.apache.commons.compress.archivers.ArchiveException;

        $r24 = virtualinvoke $r22.<java.io.IOException: java.lang.String getMessage()>();

        specialinvoke $r23.<org.apache.commons.compress.archivers.ArchiveException: void <init>(java.lang.String,java.lang.Exception)>($r24, $r22);

        throw $r23;

     label5:
        $r16 = new org.apache.commons.compress.archivers.dump.Dirent;

        specialinvoke $r16.<org.apache.commons.compress.archivers.dump.Dirent: void <init>(int,int,int,java.lang.String)>(2, 2, 4, ".");

        $r17 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Map names>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r16);

        $r19 = new java.util.PriorityQueue;

        $r20 = new org.apache.commons.compress.archivers.dump.DumpArchiveInputStream$1;

        specialinvoke $r20.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream$1: void <init>(org.apache.commons.compress.archivers.dump.DumpArchiveInputStream)>(r0);

        specialinvoke $r19.<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>(10, $r20);

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Queue queue> = $r19;

        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    public int getCount()
    {
        int $i1;
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream r0;
        long $l0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        $l0 = virtualinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long getBytesRead()>();

        $i1 = (int) $l0;

        return $i1;
    }

    public long getBytesRead()
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream r0;
        long $l0;
        org.apache.commons.compress.archivers.dump.TapeInputStream $r1;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $l0 = virtualinvoke $r1.<org.apache.commons.compress.archivers.dump.TapeInputStream: long getBytesRead()>();

        return $l0;
    }

    public org.apache.commons.compress.archivers.dump.DumpArchiveSummary getSummary()
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream r0;
        org.apache.commons.compress.archivers.dump.DumpArchiveSummary $r1;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveSummary summary>;

        return $r1;
    }

    private void readCLRI() throws java.io.IOException
    {
        byte[] $r2;
        long $l2, $l3;
        org.apache.commons.compress.archivers.dump.InvalidFormatException $r11, $r12;
        byte $b4;
        int $i0, $i1, $i5;
        boolean $z0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry $r3, $r4, $r7, $r9;
        java.io.EOFException $r10;
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE $r5, $r6;
        org.apache.commons.compress.archivers.dump.TapeInputStream $r1, $r8;
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $r2 = virtualinvoke $r1.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] readRecord()>();

        $z0 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: boolean verify(byte[])>($r2);

        if $z0 != 0 goto label1;

        $r12 = new org.apache.commons.compress.archivers.dump.InvalidFormatException;

        specialinvoke $r12.<org.apache.commons.compress.archivers.dump.InvalidFormatException: void <init>()>();

        throw $r12;

     label1:
        $r3 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry parse(byte[])>($r2);

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active> = $r3;

        $r5 = <org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE CLRI>;

        $r4 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $r6 = virtualinvoke $r4.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE getHeaderType()>();

        if $r5 == $r6 goto label2;

        $r11 = new org.apache.commons.compress.archivers.dump.InvalidFormatException;

        specialinvoke $r11.<org.apache.commons.compress.archivers.dump.InvalidFormatException: void <init>()>();

        throw $r11;

     label2:
        $r8 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $r7 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $i0 = virtualinvoke $r7.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getHeaderCount()>();

        $i1 = 1024 * $i0;

        $l2 = (long) $i1;

        $l3 = virtualinvoke $r8.<org.apache.commons.compress.archivers.dump.TapeInputStream: long skip(long)>($l2);

        $b4 = $l3 cmp -1L;

        if $b4 != 0 goto label3;

        $r10 = new java.io.EOFException;

        specialinvoke $r10.<java.io.EOFException: void <init>()>();

        throw $r10;

     label3:
        $r9 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $i5 = virtualinvoke $r9.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getHeaderCount()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int readIdx> = $i5;

        return;
    }

    private void readBITS() throws java.io.IOException
    {
        byte[] $r2;
        long $l2, $l3;
        org.apache.commons.compress.archivers.dump.InvalidFormatException $r11, $r12;
        byte $b4;
        int $i0, $i1, $i5;
        boolean $z0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry $r3, $r4, $r7, $r9;
        java.io.EOFException $r10;
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE $r5, $r6;
        org.apache.commons.compress.archivers.dump.TapeInputStream $r1, $r8;
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $r2 = virtualinvoke $r1.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] readRecord()>();

        $z0 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: boolean verify(byte[])>($r2);

        if $z0 != 0 goto label1;

        $r12 = new org.apache.commons.compress.archivers.dump.InvalidFormatException;

        specialinvoke $r12.<org.apache.commons.compress.archivers.dump.InvalidFormatException: void <init>()>();

        throw $r12;

     label1:
        $r3 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry parse(byte[])>($r2);

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active> = $r3;

        $r5 = <org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE BITS>;

        $r4 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $r6 = virtualinvoke $r4.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE getHeaderType()>();

        if $r5 == $r6 goto label2;

        $r11 = new org.apache.commons.compress.archivers.dump.InvalidFormatException;

        specialinvoke $r11.<org.apache.commons.compress.archivers.dump.InvalidFormatException: void <init>()>();

        throw $r11;

     label2:
        $r8 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $r7 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $i0 = virtualinvoke $r7.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getHeaderCount()>();

        $i1 = 1024 * $i0;

        $l2 = (long) $i1;

        $l3 = virtualinvoke $r8.<org.apache.commons.compress.archivers.dump.TapeInputStream: long skip(long)>($l2);

        $b4 = $l3 cmp -1L;

        if $b4 != 0 goto label3;

        $r10 = new java.io.EOFException;

        specialinvoke $r10.<java.io.EOFException: void <init>()>();

        throw $r10;

     label3:
        $r9 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $i5 = virtualinvoke $r9.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getHeaderCount()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int readIdx> = $i5;

        return;
    }

    public org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextDumpEntry() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream r0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry $r1;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()>();

        return $r1;
    }

    public org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry() throws java.io.IOException
    {
        byte[] $r9, $r18, $r27;
        java.lang.Integer $r3;
        byte $b12, $b17;
        java.util.Map $r2;
        long $l1, $l2, $l3, $l10, $l11, $l13, $l16;
        org.apache.commons.compress.archivers.dump.InvalidFormatException $r29, $r31;
        java.lang.String $r6, $r19, r39;
        org.apache.commons.compress.archivers.dump.Dirent $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry $r10, $r11, $r14, $r17, $r20, $r21, $r22, $r24, $r28, $r32, $r37, r38, $r40;
        java.io.EOFException $r30, $r34;
        org.apache.commons.compress.archivers.dump.TapeInputStream $r7, $r8, $r23, $r25, $r26, $r33;
        java.util.Queue $r1, $r35;
        int $i0, $i4, $i5, $i6, $i7, $i8, $i9, $i14, $i15, $i18, $i19;
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE $r12, $r13, $r15, $r16;
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream r0;
        java.lang.Object $r4, $r36;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        r38 = null;

        r39 = null;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Queue queue>;

        $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        if $z0 != 0 goto label01;

        $r35 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Queue queue>;

        $r36 = interfaceinvoke $r35.<java.util.Queue: java.lang.Object remove()>();

        $r37 = (org.apache.commons.compress.archivers.dump.DumpArchiveEntry) $r36;

        return $r37;

     label01:
        if r38 != null goto label13;

        $z1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: boolean hasHitEOF>;

        if $z1 == 0 goto label02;

        return null;

     label02:
        $i18 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int readIdx>;

        $r40 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $i19 = virtualinvoke $r40.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getHeaderCount()>();

        if $i18 >= $i19 goto label03;

        $r32 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $i14 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int readIdx>;

        $i15 = $i14 + 1;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int readIdx> = $i15;

        $z5 = virtualinvoke $r32.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: boolean isSparseRecord(int)>($i14);

        if $z5 != 0 goto label02;

        $r33 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $l16 = virtualinvoke $r33.<org.apache.commons.compress.archivers.dump.TapeInputStream: long skip(long)>(1024L);

        $b17 = $l16 cmp -1L;

        if $b17 != 0 goto label02;

        $r34 = new java.io.EOFException;

        specialinvoke $r34.<java.io.EOFException: void <init>()>();

        throw $r34;

     label03:
        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int readIdx> = 0;

        $r7 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $l2 = virtualinvoke $r7.<org.apache.commons.compress.archivers.dump.TapeInputStream: long getBytesRead()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long filepos> = $l2;

        $r8 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $r9 = virtualinvoke $r8.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] readRecord()>();

        $z2 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: boolean verify(byte[])>($r9);

        if $z2 != 0 goto label04;

        $r31 = new org.apache.commons.compress.archivers.dump.InvalidFormatException;

        specialinvoke $r31.<org.apache.commons.compress.archivers.dump.InvalidFormatException: void <init>()>();

        throw $r31;

     label04:
        $r10 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry parse(byte[])>($r9);

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active> = $r10;

     label05:
        $r12 = <org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE ADDR>;

        $r11 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $r13 = virtualinvoke $r11.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE getHeaderType()>();

        if $r12 != $r13 goto label08;

        $r23 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $r22 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $i6 = virtualinvoke $r22.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getHeaderCount()>();

        $r24 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $i7 = virtualinvoke $r24.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getHeaderHoles()>();

        $i8 = $i6 - $i7;

        $i9 = 1024 * $i8;

        $l10 = (long) $i9;

        $l11 = virtualinvoke $r23.<org.apache.commons.compress.archivers.dump.TapeInputStream: long skip(long)>($l10);

        $b12 = $l11 cmp -1L;

        if $b12 != 0 goto label06;

        $r30 = new java.io.EOFException;

        specialinvoke $r30.<java.io.EOFException: void <init>()>();

        throw $r30;

     label06:
        $r25 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $l13 = virtualinvoke $r25.<org.apache.commons.compress.archivers.dump.TapeInputStream: long getBytesRead()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long filepos> = $l13;

        $r26 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $r27 = virtualinvoke $r26.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] readRecord()>();

        $z4 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: boolean verify(byte[])>($r27);

        if $z4 != 0 goto label07;

        $r29 = new org.apache.commons.compress.archivers.dump.InvalidFormatException;

        specialinvoke $r29.<org.apache.commons.compress.archivers.dump.InvalidFormatException: void <init>()>();

        throw $r29;

     label07:
        $r28 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry parse(byte[])>($r27);

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active> = $r28;

        goto label05;

     label08:
        $r15 = <org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE END>;

        $r14 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $r16 = virtualinvoke $r14.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE getHeaderType()>();

        if $r15 != $r16 goto label09;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: boolean hasHitEOF> = 1;

        return null;

     label09:
        r38 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $z3 = virtualinvoke r38.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: boolean isDirectory()>();

        if $z3 == 0 goto label10;

        $r20 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        specialinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: void readDirectoryEntry(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)>($r20);

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long entryOffset> = 0L;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long entrySize> = 0L;

        $r21 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $i5 = virtualinvoke $r21.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getHeaderCount()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int readIdx> = $i5;

        goto label11;

     label10:
        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long entryOffset> = 0L;

        $r17 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $l3 = virtualinvoke $r17.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long getEntrySize()>();

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long entrySize> = $l3;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int readIdx> = 0;

     label11:
        $r18 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] readBuf>;

        $i4 = lengthof $r18;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int recordOffset> = $i4;

        $r19 = specialinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.lang.String getPath(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)>(r38);

        r39 = $r19;

        if $r19 != null goto label12;

        r38 = null;

     label12:
        goto label01;

     label13:
        virtualinvoke r38.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setName(java.lang.String)>(r39);

        $r2 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Map names>;

        $i0 = virtualinvoke r38.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getIno()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (org.apache.commons.compress.archivers.dump.Dirent) $r4;

        $r6 = virtualinvoke $r5.<org.apache.commons.compress.archivers.dump.Dirent: java.lang.String getName()>();

        virtualinvoke r38.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setSimpleName(java.lang.String)>($r6);

        $l1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long filepos>;

        virtualinvoke r38.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setOffset(long)>($l1);

        return r38;
    }

    private void readDirectoryEntry(org.apache.commons.compress.archivers.dump.DumpArchiveEntry) throws java.io.IOException
    {
        byte[] $r3, $r6, $r8, $r9, $r10, $r11, $r12, $r44, $r53;
        java.lang.Integer $r2, $r19, $r27, $r48;
        byte $b5, b10, $b12;
        java.util.Map $r1, $r18, $r20, $r26, $r36, $r47;
        java.util.Set $r21;
        long $l3, $l4, l17;
        org.apache.commons.compress.archivers.dump.InvalidFormatException $r58;
        java.lang.String $r14, $r15, $r16, $r31, $r40;
        org.apache.commons.compress.archivers.dump.Dirent $r39, $r57;
        java.util.Map$Entry r54;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7, z8;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r13;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry $r30, $r33, $r35, r52, r55;
        java.io.EOFException $r56;
        org.apache.commons.compress.archivers.dump.TapeInputStream $r4, $r5, $r49;
        java.util.Queue $r23, $r41;
        int $i0, $i1, $i2, $i6, $i7, $i8, $i9, $i11, $i13, $i14, $i15, $i16, $i18, $i19, $i20, i21, $i22, $i23, $i24;
        java.util.Iterator $r22, $r24;
        org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE $r45, $r46, $r50, $r51;
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream r0;
        java.lang.Object $r25, $r28, $r29, $r32, $r34, $r37, $r38, $r42;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        r52 := @parameter0: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        l17 = virtualinvoke r52.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: long getEntrySize()>();

        z6 = 1;

        z8 = 1;

        z7 = 1;

     label01:
        if z8 != 0 goto label02;

        $r50 = <org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE ADDR>;

        $r51 = virtualinvoke r52.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE getHeaderType()>();

        if $r50 != $r51 goto label16;

     label02:
        if z7 != 0 goto label03;

        $r49 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        virtualinvoke $r49.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] readRecord()>();

     label03:
        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Map names>;

        $i0 = virtualinvoke r52.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getIno()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 != 0 goto label04;

        $r45 = <org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE INODE>;

        $r46 = virtualinvoke r52.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveConstants$SEGMENT_TYPE getHeaderType()>();

        if $r45 != $r46 goto label04;

        $r47 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Map pending>;

        $i16 = virtualinvoke r52.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getIno()>();

        $r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i16);

        interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, r52);

     label04:
        $i18 = virtualinvoke r52.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getHeaderCount()>();

        $i19 = 1024 * $i18;

        $r53 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] blockBuffer>;

        $i20 = lengthof $r53;

        if $i20 >= $i19 goto label05;

        $r44 = newarray (byte)[$i19];

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] blockBuffer> = $r44;

     label05:
        $r4 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $r3 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] blockBuffer>;

        $i1 = virtualinvoke $r4.<org.apache.commons.compress.archivers.dump.TapeInputStream: int read(byte[],int,int)>($r3, 0, $i19);

        if $i1 == $i19 goto label06;

        $r56 = new java.io.EOFException;

        specialinvoke $r56.<java.io.EOFException: void <init>()>();

        throw $r56;

     label06:
        i21 = 0;

     label07:
        $i2 = $i19 - 8;

        if i21 >= $i2 goto label14;

        $l4 = (long) i21;

        $l3 = l17 - 8L;

        $b5 = $l4 cmp $l3;

        $i22 = (int) $b5;

        if $i22 >= 0 goto label14;

        $r8 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] blockBuffer>;

        $i6 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>($r8, i21);

        $r9 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] blockBuffer>;

        $i7 = i21 + 4;

        $i8 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert16(byte[],int)>($r9, $i7);

        $r10 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] blockBuffer>;

        $i9 = i21 + 6;

        b10 = $r10[$i9];

        $r13 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipEncoding encoding>;

        $r12 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] blockBuffer>;

        $i13 = i21 + 8;

        $r11 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] blockBuffer>;

        $i11 = i21 + 7;

        $b12 = $r11[$i11];

        $i23 = (int) $b12;

        $r14 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: java.lang.String decode(org.apache.commons.compress.archivers.zip.ZipEncoding,byte[],int,int)>($r13, $r12, $i13, $i23);

        $r15 = ".";

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z2 != 0 goto label13;

        $r16 = "..";

        $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z3 == 0 goto label08;

        goto label13;

     label08:
        $r57 = new org.apache.commons.compress.archivers.dump.Dirent;

        $i14 = virtualinvoke r52.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getIno()>();

        $i24 = (int) b10;

        specialinvoke $r57.<org.apache.commons.compress.archivers.dump.Dirent: void <init>(int,int,int,java.lang.String)>($i6, $i14, $i24, $r14);

        $r18 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Map names>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r57);

        $r20 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Map pending>;

        $r21 = interfaceinvoke $r20.<java.util.Map: java.util.Set entrySet()>();

        $r22 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z4 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        $r28 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r54 = (java.util.Map$Entry) $r28;

        $r29 = interfaceinvoke r54.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r30 = (org.apache.commons.compress.archivers.dump.DumpArchiveEntry) $r29;

        $r31 = specialinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.lang.String getPath(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)>($r30);

        if $r31 == null goto label10;

        $r32 = interfaceinvoke r54.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r33 = (org.apache.commons.compress.archivers.dump.DumpArchiveEntry) $r32;

        virtualinvoke $r33.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setName(java.lang.String)>($r31);

        $r34 = interfaceinvoke r54.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r35 = (org.apache.commons.compress.archivers.dump.DumpArchiveEntry) $r34;

        $r36 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Map names>;

        $r37 = interfaceinvoke r54.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r38 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>($r37);

        $r39 = (org.apache.commons.compress.archivers.dump.Dirent) $r38;

        $r40 = virtualinvoke $r39.<org.apache.commons.compress.archivers.dump.Dirent: java.lang.String getName()>();

        virtualinvoke $r35.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: void setSimpleName(java.lang.String)>($r40);

        $r41 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Queue queue>;

        $r42 = interfaceinvoke r54.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke $r41.<java.util.Queue: boolean add(java.lang.Object)>($r42);

     label10:
        goto label09;

     label11:
        $r23 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Queue queue>;

        $r24 = interfaceinvoke $r23.<java.util.Queue: java.util.Iterator iterator()>();

     label12:
        $z5 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label13;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r55 = (org.apache.commons.compress.archivers.dump.DumpArchiveEntry) $r25;

        $r26 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Map pending>;

        $i15 = virtualinvoke r55.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getIno()>();

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i15);

        interfaceinvoke $r26.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r27);

        goto label12;

     label13:
        i21 = i21 + $i8;

        goto label07;

     label14:
        $r5 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $r6 = virtualinvoke $r5.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] peek()>();

        $z1 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: boolean verify(byte[])>($r6);

        if $z1 != 0 goto label15;

        $r58 = new org.apache.commons.compress.archivers.dump.InvalidFormatException;

        specialinvoke $r58.<org.apache.commons.compress.archivers.dump.InvalidFormatException: void <init>()>();

        throw $r58;

     label15:
        r52 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry parse(byte[])>($r6);

        z6 = 0;

        z8 = 0;

        z7 = 0;

        l17 = l17 - 1024L;

        goto label01;

     label16:
        return;
    }

    private java.lang.String getPath(org.apache.commons.compress.archivers.dump.DumpArchiveEntry)
    {
        java.lang.Integer $r4, $r6, $r16;
        java.util.Stack $r0;
        java.util.Map $r3, $r5, $r15;
        int $i0, $i1, $i2, i3;
        java.lang.String $r8, $r11, $r12, $r14;
        boolean $z0, $z1, $z2;
        org.apache.commons.compress.archivers.dump.Dirent r17;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry r1;
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream r2;
        java.lang.Object $r7, $r10, $r13;
        java.lang.StringBuilder $r9;

        r2 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        r1 := @parameter0: org.apache.commons.compress.archivers.dump.DumpArchiveEntry;

        $r0 = new java.util.Stack;

        specialinvoke $r0.<java.util.Stack: void <init>()>();

        i3 = virtualinvoke r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getIno()>();

     label1:
        $r3 = r2.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Map names>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        virtualinvoke $r0.<java.util.Stack: void clear()>();

        goto label4;

     label2:
        $r5 = r2.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Map names>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r17 = (org.apache.commons.compress.archivers.dump.Dirent) $r7;

        $r8 = virtualinvoke r17.<org.apache.commons.compress.archivers.dump.Dirent: java.lang.String getName()>();

        virtualinvoke $r0.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r8);

        $i0 = virtualinvoke r17.<org.apache.commons.compress.archivers.dump.Dirent: int getIno()>();

        $i1 = virtualinvoke r17.<org.apache.commons.compress.archivers.dump.Dirent: int getParentIno()>();

        if $i0 != $i1 goto label3;

        goto label4;

     label3:
        i3 = virtualinvoke r17.<org.apache.commons.compress.archivers.dump.Dirent: int getParentIno()>();

        goto label1;

     label4:
        $z1 = virtualinvoke $r0.<java.util.Stack: boolean isEmpty()>();

        if $z1 == 0 goto label5;

        $r15 = r2.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: java.util.Map pending>;

        $i2 = virtualinvoke r1.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: int getIno()>();

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r1);

        return null;

     label5:
        $r9 = new java.lang.StringBuilder;

        $r10 = virtualinvoke $r0.<java.util.Stack: java.lang.Object pop()>();

        $r11 = (java.lang.String) $r10;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11);

     label6:
        $z2 = virtualinvoke $r0.<java.util.Stack: boolean isEmpty()>();

        if $z2 != 0 goto label7;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r13 = virtualinvoke $r0.<java.util.Stack: java.lang.Object pop()>();

        $r14 = (java.lang.String) $r13;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        goto label6;

     label7:
        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] $r2, $r3, $r5, $r6, $r7, $r9, $r12, r15, $r16, $r17;
        java.lang.IllegalStateException $r19;
        byte $b2, $b7;
        boolean $z0, $z1, $z2, $z3;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry $r1, $r4, $r13;
        java.io.EOFException $r21;
        org.apache.commons.compress.archivers.dump.TapeInputStream $r8, $r11;
        long $l0, $l1, $l3, $l4, $l5, $l6, $l8, $l9, $l10, $l28, $l29, $l30;
        org.apache.commons.compress.archivers.dump.InvalidFormatException $r20;
        int $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i31, i32, i33, $i34, $i35, $i37, $i38;
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream r0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        r15 := @parameter0: byte[];

        i31 := @parameter1: int;

        i32 := @parameter2: int;

        i33 = 0;

        $z0 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: boolean hasHitEOF>;

        if $z0 != 0 goto label01;

        $z1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: boolean isClosed>;

        if $z1 != 0 goto label01;

        $l1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long entryOffset>;

        $l0 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long entrySize>;

        $b2 = $l1 cmp $l0;

        $i35 = (int) $b2;

        if $i35 < 0 goto label02;

     label01:
        $i37 = (int) -1;

        return $i37;

     label02:
        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        if $r1 != null goto label03;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No current dump entry");

        throw $r19;

     label03:
        $l4 = (long) i32;

        $l3 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long entryOffset>;

        $l6 = $l4 + $l3;

        $l5 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long entrySize>;

        $b7 = $l6 cmp $l5;

        $i38 = (int) $b7;

        if $i38 <= 0 goto label04;

        $l29 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long entrySize>;

        $l28 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long entryOffset>;

        $l30 = $l29 - $l28;

        i32 = (int) $l30;

     label04:
        if i32 <= 0 goto label14;

        $r2 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] readBuf>;

        $i12 = lengthof $r2;

        $i11 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int recordOffset>;

        $i13 = $i12 - $i11;

        if i32 <= $i13 goto label05;

        $r17 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] readBuf>;

        $i27 = lengthof $r17;

        $i26 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int recordOffset>;

        $i34 = $i27 - $i26;

        goto label06;

     label05:
        $i34 = i32;

     label06:
        $i14 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int recordOffset>;

        $i16 = $i14 + $i34;

        $r3 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] readBuf>;

        $i15 = lengthof $r3;

        if $i16 > $i15 goto label07;

        $r16 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] readBuf>;

        $i23 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int recordOffset>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r16, $i23, r15, i31, $i34);

        i33 = i33 + $i34;

        $i24 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int recordOffset>;

        $i25 = $i24 + $i34;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int recordOffset> = $i25;

        i32 = i32 - $i34;

        i31 = i31 + $i34;

     label07:
        if i32 <= 0 goto label13;

        $i17 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int readIdx>;

        if $i17 < 512 goto label09;

        $r11 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $r12 = virtualinvoke $r11.<org.apache.commons.compress.archivers.dump.TapeInputStream: byte[] readRecord()>();

        $z3 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: boolean verify(byte[])>($r12);

        if $z3 != 0 goto label08;

        $r20 = new org.apache.commons.compress.archivers.dump.InvalidFormatException;

        specialinvoke $r20.<org.apache.commons.compress.archivers.dump.InvalidFormatException: void <init>()>();

        throw $r20;

     label08:
        $r13 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveEntry: org.apache.commons.compress.archivers.dump.DumpArchiveEntry parse(byte[])>($r12);

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active> = $r13;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int readIdx> = 0;

     label09:
        $r4 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry active>;

        $i18 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int readIdx>;

        $i19 = $i18 + 1;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int readIdx> = $i19;

        $z2 = virtualinvoke $r4.<org.apache.commons.compress.archivers.dump.DumpArchiveEntry: boolean isSparseRecord(int)>($i18);

        if $z2 != 0 goto label11;

        $r8 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        $r7 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] readBuf>;

        $r6 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] readBuf>;

        $i20 = lengthof $r6;

        $i21 = virtualinvoke $r8.<org.apache.commons.compress.archivers.dump.TapeInputStream: int read(byte[],int,int)>($r7, 0, $i20);

        $r9 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] readBuf>;

        $i22 = lengthof $r9;

        if $i21 == $i22 goto label10;

        $r21 = new java.io.EOFException;

        specialinvoke $r21.<java.io.EOFException: void <init>()>();

        throw $r21;

     label10:
        goto label12;

     label11:
        $r5 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: byte[] readBuf>;

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r5, 0);

     label12:
        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: int recordOffset> = 0;

     label13:
        goto label04;

     label14:
        $l9 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long entryOffset>;

        $l8 = (long) i33;

        $l10 = $l9 + $l8;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: long entryOffset> = $l10;

        return i33;
    }

    public void close() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream r0;
        org.apache.commons.compress.archivers.dump.TapeInputStream $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        $z0 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: boolean isClosed>;

        if $z0 != 0 goto label1;

        r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: boolean isClosed> = 1;

        $r1 = r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.TapeInputStream raw>;

        virtualinvoke $r1.<org.apache.commons.compress.archivers.dump.TapeInputStream: void close()>();

     label1:
        return;
    }

    public static boolean matches(byte[], int)
    {
        byte[] r0;
        int i0, $i1, $i3;
        boolean $z0, $z1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        if i0 >= 32 goto label1;

        return 0;

     label1:
        if i0 < 1024 goto label2;

        $z0 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: boolean verify(byte[])>(r0);

        return $z0;

     label2:
        $i1 = staticinvoke <org.apache.commons.compress.archivers.dump.DumpArchiveUtil: int convert32(byte[],int)>(r0, 24);

        $i3 = (int) 60012;

        if $i3 != $i1 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public volatile org.apache.commons.compress.archivers.ArchiveEntry getNextEntry() throws java.io.IOException
    {
        org.apache.commons.compress.archivers.dump.DumpArchiveInputStream r0;
        org.apache.commons.compress.archivers.dump.DumpArchiveEntry $r1;

        r0 := @this: org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.dump.DumpArchiveInputStream: org.apache.commons.compress.archivers.dump.DumpArchiveEntry getNextEntry()>();

        return $r1;
    }
}
