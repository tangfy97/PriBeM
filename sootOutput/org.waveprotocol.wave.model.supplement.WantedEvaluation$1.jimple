final class org.waveprotocol.wave.model.supplement.WantedEvaluation$1 extends java.lang.Object implements java.util.Comparator
{

    void <init>()
    {
        org.waveprotocol.wave.model.supplement.WantedEvaluation$1 r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WantedEvaluation$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(org.waveprotocol.wave.model.supplement.WantedEvaluation, org.waveprotocol.wave.model.supplement.WantedEvaluation)
    {
        org.waveprotocol.wave.model.supplement.WantedEvaluation r0, r1;
        long $l0, $l4, $l5, $l6;
        org.waveprotocol.wave.model.supplement.WantedEvaluation$1 r2;
        int $i1, $i2, $i3, i7;
        double $d0, $d1, $d2, $d3;

        r2 := @this: org.waveprotocol.wave.model.supplement.WantedEvaluation$1;

        r0 := @parameter0: org.waveprotocol.wave.model.supplement.WantedEvaluation;

        r1 := @parameter1: org.waveprotocol.wave.model.supplement.WantedEvaluation;

        $d0 = interfaceinvoke r0.<org.waveprotocol.wave.model.supplement.WantedEvaluation: double getCertainty()>();

        $d1 = interfaceinvoke r1.<org.waveprotocol.wave.model.supplement.WantedEvaluation: double getCertainty()>();

        $d2 = $d0 - $d1;

        $d3 = staticinvoke <java.lang.Math: double signum(double)>($d2);

        $l0 = staticinvoke <java.lang.Math: long round(double)>($d3);

        $i1 = staticinvoke <java.lang.Long: int signum(long)>($l0);

        i7 = $i1;

        if $i1 != 0 goto label1;

        $l4 = interfaceinvoke r0.<org.waveprotocol.wave.model.supplement.WantedEvaluation: long getTimestamp()>();

        $l5 = interfaceinvoke r1.<org.waveprotocol.wave.model.supplement.WantedEvaluation: long getTimestamp()>();

        $l6 = $l4 - $l5;

        i7 = staticinvoke <java.lang.Long: int signum(long)>($l6);

     label1:
        if i7 != 0 goto label2;

        $i2 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i3 = virtualinvoke r1.<java.lang.Object: int hashCode()>();

        i7 = $i2 - $i3;

     label2:
        return i7;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        org.waveprotocol.wave.model.supplement.WantedEvaluation $r3, $r4;
        int $i0;
        java.lang.Object r1, r2;
        org.waveprotocol.wave.model.supplement.WantedEvaluation$1 r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.WantedEvaluation$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.waveprotocol.wave.model.supplement.WantedEvaluation) r1;

        $r3 = (org.waveprotocol.wave.model.supplement.WantedEvaluation) r2;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.supplement.WantedEvaluation$1: int compare(org.waveprotocol.wave.model.supplement.WantedEvaluation,org.waveprotocol.wave.model.supplement.WantedEvaluation)>($r4, $r3);

        return $i0;
    }
}
