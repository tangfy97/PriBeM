public abstract class org.apache.lucene.analysis.BaseCharFilter extends org.apache.lucene.analysis.CharFilter
{
    private int[] offsets;
    private int[] diffs;
    private int size;

    public void <init>(org.apache.lucene.analysis.CharStream)
    {
        org.apache.lucene.analysis.CharStream r1;
        org.apache.lucene.analysis.BaseCharFilter r0;

        r0 := @this: org.apache.lucene.analysis.BaseCharFilter;

        r1 := @parameter0: org.apache.lucene.analysis.CharStream;

        specialinvoke r0.<org.apache.lucene.analysis.CharFilter: void <init>(org.apache.lucene.analysis.CharStream)>(r1);

        r0.<org.apache.lucene.analysis.BaseCharFilter: int size> = 0;

        return;
    }

    protected int correct(int)
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        org.apache.lucene.analysis.BaseCharFilter r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, $i19, $i21;

        r0 := @this: org.apache.lucene.analysis.BaseCharFilter;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] offsets>;

        if $r1 == null goto label01;

        $r2 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] offsets>;

        $i1 = $r2[0];

        if i0 >= $i1 goto label02;

     label01:
        return i0;

     label02:
        $i2 = r0.<org.apache.lucene.analysis.BaseCharFilter: int size>;

        i16 = $i2 - 1;

        $r3 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] offsets>;

        $i3 = $r3[i16];

        if i0 < $i3 goto label03;

        $r10 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] diffs>;

        $i14 = $r10[i16];

        $i15 = i0 + $i14;

        return $i15;

     label03:
        i17 = 0;

        $i21 = (int) -1;

        i18 = $i21;

     label04:
        if i16 < i17 goto label07;

        $i9 = i17 + i16;

        i18 = $i9 >>> 1;

        $r7 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] offsets>;

        $i10 = $r7[i18];

        if i0 >= $i10 goto label05;

        i16 = i18 - 1;

        goto label04;

     label05:
        $r8 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] offsets>;

        $i11 = $r8[i18];

        if i0 <= $i11 goto label06;

        i17 = i18 + 1;

        goto label04;

     label06:
        $r9 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] diffs>;

        $i12 = $r9[i18];

        $i13 = i0 + $i12;

        return $i13;

     label07:
        $r4 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] offsets>;

        $i4 = $r4[i18];

        if i0 >= $i4 goto label10;

        if i18 != 0 goto label08;

        $i19 = i0;

        goto label09;

     label08:
        $r6 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] diffs>;

        $i7 = i18 - 1;

        $i8 = $r6[$i7];

        $i19 = i0 + $i8;

     label09:
        return $i19;

     label10:
        $r5 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] diffs>;

        $i5 = $r5[i18];

        $i6 = i0 + $i5;

        return $i6;
    }

    protected int getLastCumulativeDiff()
    {
        int[] $r1, $r2;
        int $i0, $i1, $i2;
        org.apache.lucene.analysis.BaseCharFilter r0;

        r0 := @this: org.apache.lucene.analysis.BaseCharFilter;

        $r1 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] offsets>;

        if $r1 != null goto label1;

        $i2 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] diffs>;

        $i0 = r0.<org.apache.lucene.analysis.BaseCharFilter: int size>;

        $i1 = $i0 - 1;

        $i2 = $r2[$i1];

     label2:
        return $i2;
    }

    protected void addOffCorrectMap(int, int)
    {
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        int $i0, $i1, i2, i3, $i4, $i5, $i6;
        org.apache.lucene.analysis.BaseCharFilter r0;

        r0 := @this: org.apache.lucene.analysis.BaseCharFilter;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        $r1 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] offsets>;

        if $r1 != null goto label1;

        $r7 = newarray (int)[64];

        r0.<org.apache.lucene.analysis.BaseCharFilter: int[] offsets> = $r7;

        $r8 = newarray (int)[64];

        r0.<org.apache.lucene.analysis.BaseCharFilter: int[] diffs> = $r8;

        goto label2;

     label1:
        $i1 = r0.<org.apache.lucene.analysis.BaseCharFilter: int size>;

        $r2 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] offsets>;

        $i0 = lengthof $r2;

        if $i1 != $i0 goto label2;

        $r3 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] offsets>;

        $r4 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[])>($r3);

        r0.<org.apache.lucene.analysis.BaseCharFilter: int[] offsets> = $r4;

        $r5 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] diffs>;

        $r6 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[])>($r5);

        r0.<org.apache.lucene.analysis.BaseCharFilter: int[] diffs> = $r6;

     label2:
        $r9 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] offsets>;

        $i4 = r0.<org.apache.lucene.analysis.BaseCharFilter: int size>;

        $r9[$i4] = i2;

        $r10 = r0.<org.apache.lucene.analysis.BaseCharFilter: int[] diffs>;

        $i5 = r0.<org.apache.lucene.analysis.BaseCharFilter: int size>;

        $i6 = $i5 + 1;

        r0.<org.apache.lucene.analysis.BaseCharFilter: int size> = $i6;

        $r10[$i5] = i3;

        return;
    }
}
