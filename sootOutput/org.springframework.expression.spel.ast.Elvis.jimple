public class org.springframework.expression.spel.ast.Elvis extends org.springframework.expression.spel.ast.SpelNodeImpl
{

    public transient void <init>(int, org.springframework.expression.spel.ast.SpelNodeImpl[])
    {
        int i0;
        org.springframework.expression.spel.ast.Elvis r0;
        org.springframework.expression.spel.ast.SpelNodeImpl[] r1;

        r0 := @this: org.springframework.expression.spel.ast.Elvis;

        i0 := @parameter0: int;

        r1 := @parameter1: org.springframework.expression.spel.ast.SpelNodeImpl[];

        specialinvoke r0.<org.springframework.expression.spel.ast.SpelNodeImpl: void <init>(int,org.springframework.expression.spel.ast.SpelNodeImpl[])>(i0, r1);

        return;
    }

    public org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState) throws org.springframework.expression.EvaluationException
    {
        org.springframework.expression.spel.ast.SpelNodeImpl[] $r1, $r6;
        int $i0;
        org.springframework.expression.spel.ast.Elvis r0;
        org.springframework.expression.spel.ExpressionState r2;
        java.lang.Object $r5, $r9, $r10;
        java.lang.String $r11;
        org.springframework.expression.TypedValue $r4, $r8;
        org.springframework.expression.spel.ast.SpelNodeImpl $r3, $r7;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.ast.Elvis;

        r2 := @parameter0: org.springframework.expression.spel.ExpressionState;

        $r1 = r0.<org.springframework.expression.spel.ast.Elvis: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r3 = $r1[0];

        $r4 = virtualinvoke $r3.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        $r5 = virtualinvoke $r4.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        if $r5 == null goto label2;

        $r9 = virtualinvoke $r4.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $z0 = $r9 instanceof java.lang.String;

        if $z0 == 0 goto label1;

        $r10 = virtualinvoke $r4.<org.springframework.expression.TypedValue: java.lang.Object getValue()>();

        $r11 = (java.lang.String) $r10;

        $i0 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

     label1:
        return $r4;

     label2:
        $r6 = r0.<org.springframework.expression.spel.ast.Elvis: org.springframework.expression.spel.ast.SpelNodeImpl[] children>;

        $r7 = $r6[1];

        $r8 = virtualinvoke $r7.<org.springframework.expression.spel.ast.SpelNodeImpl: org.springframework.expression.TypedValue getValueInternal(org.springframework.expression.spel.ExpressionState)>(r2);

        return $r8;
    }

    public java.lang.String toStringAST()
    {
        org.springframework.expression.spel.ast.Elvis r1;
        java.lang.StringBuilder $r0, $r4, $r5, $r8;
        java.lang.String $r3, $r7, $r9;
        org.springframework.expression.spel.SpelNode $r2, $r6;

        r1 := @this: org.springframework.expression.spel.ast.Elvis;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<org.springframework.expression.spel.ast.Elvis: org.springframework.expression.spel.SpelNode getChild(int)>(0);

        $r3 = interfaceinvoke $r2.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ?: ");

        $r6 = virtualinvoke r1.<org.springframework.expression.spel.ast.Elvis: org.springframework.expression.spel.SpelNode getChild(int)>(1);

        $r7 = interfaceinvoke $r6.<org.springframework.expression.spel.SpelNode: java.lang.String toStringAST()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
