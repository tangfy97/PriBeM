class com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator extends java.lang.Object implements com.mycila.inject.internal.cglib.proxy.CallbackGenerator
{
    public static final com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator INSTANCE;
    static final java.lang.String EMPTY_ARGS_NAME;
    static final java.lang.String FIND_PROXY_NAME;
    static final java.lang.Class[] FIND_PROXY_TYPES;
    private static final com.mycila.inject.internal.asm.Type ABSTRACT_METHOD_ERROR;
    private static final com.mycila.inject.internal.asm.Type METHOD;
    private static final com.mycila.inject.internal.asm.Type REFLECT_UTILS;
    private static final com.mycila.inject.internal.asm.Type METHOD_PROXY;
    private static final com.mycila.inject.internal.asm.Type METHOD_INTERCEPTOR;
    private static final com.mycila.inject.internal.cglib.core.Signature GET_DECLARED_METHODS;
    private static final com.mycila.inject.internal.cglib.core.Signature GET_DECLARING_CLASS;
    private static final com.mycila.inject.internal.cglib.core.Signature FIND_METHODS;
    private static final com.mycila.inject.internal.cglib.core.Signature MAKE_PROXY;
    private static final com.mycila.inject.internal.cglib.core.Signature INTERCEPT;
    private static final com.mycila.inject.internal.cglib.core.Signature FIND_PROXY;
    private static final com.mycila.inject.internal.cglib.core.Signature TO_STRING;
    private static final com.mycila.inject.internal.cglib.core.Transformer METHOD_TO_CLASS;
    private static final com.mycila.inject.internal.cglib.core.Signature CSTRUCT_SIGNATURE;
    static java.lang.Class class$net$sf$cglib$core$Signature;

    void <init>()
    {
        com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator r0;

        r0 := @this: com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private java.lang.String getMethodField(com.mycila.inject.internal.cglib.core.Signature)
    {
        com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator r6;
        java.lang.StringBuffer $r0, $r3, $r4;
        com.mycila.inject.internal.cglib.core.Signature r1;
        java.lang.String $r2, $r5;

        r6 := @this: com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.Signature;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$Method");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    private java.lang.String getMethodProxyField(com.mycila.inject.internal.cglib.core.Signature)
    {
        com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator r6;
        java.lang.StringBuffer $r0, $r3, $r4;
        com.mycila.inject.internal.cglib.core.Signature r1;
        java.lang.String $r2, $r5;

        r6 := @this: com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.Signature;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$Proxy");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    public void generate(com.mycila.inject.internal.cglib.core.ClassEmitter, com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context, java.util.List)
    {
        com.mycila.inject.internal.asm.Type $r13, $r14, $r15, $r22, $r23;
        java.util.HashMap $r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r17, $r18;
        com.mycila.inject.internal.cglib.core.MethodInfo r6;
        com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context r8;
        int $i0, $i1;
        java.lang.String $r10, $r11, $r12;
        com.mycila.inject.internal.asm.Type[] $r16, $r20;
        boolean $z0;
        com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator r3;
        java.util.Iterator $r2;
        com.mycila.inject.internal.cglib.core.Signature $r7, $r9, $r21;
        com.mycila.inject.internal.cglib.core.ClassEmitter r4;
        java.util.List r1;
        com.mycila.inject.internal.asm.Label $r19;
        java.lang.Object $r5;

        r3 := @this: com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator;

        r4 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r8 := @parameter1: com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context;

        r1 := @parameter2: java.util.List;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.mycila.inject.internal.cglib.core.MethodInfo) $r5;

        $r7 = virtualinvoke r6.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r9 = interfaceinvoke r8.<com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context: com.mycila.inject.internal.cglib.core.Signature getImplSignature(com.mycila.inject.internal.cglib.core.MethodInfo)>(r6);

        $r10 = specialinvoke r3.<com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: java.lang.String getMethodField(com.mycila.inject.internal.cglib.core.Signature)>($r9);

        $r11 = specialinvoke r3.<com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: java.lang.String getMethodProxyField(com.mycila.inject.internal.cglib.core.Signature)>($r9);

        $r12 = virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r11);

        $r13 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type METHOD>;

        virtualinvoke r4.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(26, $r10, $r13, null);

        $r14 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type METHOD_PROXY>;

        virtualinvoke r4.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(26, $r11, $r14, null);

        $r15 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT_ARRAY>;

        virtualinvoke r4.<com.mycila.inject.internal.cglib.core.ClassEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(26, "CGLIB$emptyArgs", $r15, null);

        $r16 = virtualinvoke r6.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.asm.Type[] getExceptionTypes()>();

        $r17 = virtualinvoke r4.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(16, $r9, $r16);

        staticinvoke <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: void superHelper(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.cglib.core.MethodInfo,com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context)>($r17, r6, r8);

        virtualinvoke $r17.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r17.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        $r18 = interfaceinvoke r8.<com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context: com.mycila.inject.internal.cglib.core.CodeEmitter beginMethod(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.cglib.core.MethodInfo)>(r4, r6);

        $r19 = virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.asm.Label make_label()>();

        $i0 = interfaceinvoke r8.<com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context: int getIndex(com.mycila.inject.internal.cglib.core.MethodInfo)>(r6);

        interfaceinvoke r8.<com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context: void emitCallback(com.mycila.inject.internal.cglib.core.CodeEmitter,int)>($r18, $i0);

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void ifnull(com.mycila.inject.internal.asm.Label)>($r19);

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>($r10);

        $r20 = virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type[] getArgumentTypes()>();

        $i1 = lengthof $r20;

        if $i1 != 0 goto label2;

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>("CGLIB$emptyArgs");

        goto label3;

     label2:
        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void create_arg_array()>();

     label3:
        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>($r11);

        $r22 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type METHOD_INTERCEPTOR>;

        $r21 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Signature INTERCEPT>;

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_interface(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r22, $r21);

        $r23 = virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.Signature: com.mycila.inject.internal.asm.Type getReturnType()>();

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void unbox_or_zero(com.mycila.inject.internal.asm.Type)>($r23);

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void mark(com.mycila.inject.internal.asm.Label)>($r19);

        staticinvoke <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: void superHelper(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.cglib.core.MethodInfo,com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context)>($r18, r6, r8);

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r18.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        goto label1;

     label4:
        virtualinvoke r3.<com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: void generateFindProxy(com.mycila.inject.internal.cglib.core.ClassEmitter,java.util.Map)>(r4, $r0);

        return;
    }

    private static void superHelper(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.cglib.core.MethodInfo, com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context)
    {
        com.mycila.inject.internal.asm.Type $r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter r1;
        com.mycila.inject.internal.cglib.core.MethodInfo r0;
        com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context r2;
        java.lang.StringBuffer $r3, $r6, $r7;
        int $i0;
        java.lang.String $r5, $r8;
        boolean $z0;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r0 := @parameter1: com.mycila.inject.internal.cglib.core.MethodInfo;

        r2 := @parameter2: com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.MethodInfo: int getModifiers()>();

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isAbstract(int)>($i0);

        if $z0 == 0 goto label1;

        $r4 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type ABSTRACT_METHOD_ERROR>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.MethodInfo: java.lang.String toString()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is abstract");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void throw_exception(com.mycila.inject.internal.asm.Type,java.lang.String)>($r4, $r8);

        goto label2;

     label1:
        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_args()>();

        interfaceinvoke r2.<com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context: void emitInvoke(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.cglib.core.MethodInfo)>(r1, r0);

     label2:
        return;
    }

    public void generateStatic(com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context, java.util.List) throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context r20;
        java.util.Map $r5;
        boolean $z0;
        com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator r23;
        java.util.Set $r6;
        java.util.List r3, r11;
        com.mycila.inject.internal.asm.Type $r12, $r13, $r15, $r17, $r22, $r29;
        com.mycila.inject.internal.cglib.core.CodeEmitter r0;
        com.mycila.inject.internal.cglib.core.MethodInfo r35, r36;
        com.mycila.inject.internal.cglib.core.Local $r1, $r2;
        com.mycila.inject.internal.cglib.core.Transformer $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.String $r24, $r25, $r26, $r27, $r30, $r33, $r34;
        com.mycila.inject.internal.cglib.core.ClassInfo r9;
        java.util.Iterator $r7;
        com.mycila.inject.internal.cglib.core.Signature $r14, $r16, $r19, $r21, $r28, $r32;
        java.lang.Object $r8, $r10, $r18, $r31;

        r23 := @this: com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r20 := @parameter1: com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context;

        r3 := @parameter2: java.util.List;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(0);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void 'newarray'()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>("CGLIB$emptyArgs");

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Local make_local()>();

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: com.mycila.inject.internal.cglib.core.Local make_local()>();

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void load_class_this(com.mycila.inject.internal.cglib.core.CodeEmitter)>(r0);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.cglib.core.Local)>($r1);

        $r4 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Transformer METHOD_TO_CLASS>;

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.core.CollectionUtils: java.util.Map bucket(java.util.Collection,com.mycila.inject.internal.cglib.core.Transformer)>(r3, $r4);

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.mycila.inject.internal.cglib.core.ClassInfo) $r8;

        $r10 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        r11 = (java.util.List) $r10;

        $i0 = interfaceinvoke r11.<java.util.List: int size()>();

        $i1 = 2 * $i0;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>($i1);

        $r12 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r12);

        i7 = 0;

     label2:
        $i2 = interfaceinvoke r11.<java.util.List: int size()>();

        if i7 >= $i2 goto label3;

        $r31 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(i7);

        r35 = (com.mycila.inject.internal.cglib.core.MethodInfo) $r31;

        $r32 = virtualinvoke r35.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        $i4 = 2 * i7;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>($i4);

        $r33 = virtualinvoke $r32.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r33);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aastore()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        $i5 = 2 * i7;

        $i6 = $i5 + 1;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>($i6);

        $r34 = virtualinvoke $r32.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getDescriptor()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r34);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aastore()>();

        i7 = i7 + 1;

        goto label2;

     label3:
        $r13 = virtualinvoke r9.<com.mycila.inject.internal.cglib.core.ClassInfo: com.mycila.inject.internal.asm.Type getType()>();

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void load_class(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type)>(r0, $r13);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.cglib.core.Local)>($r2);

        $r15 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS>;

        $r14 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Signature GET_DECLARED_METHODS>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r15, $r14);

        $r17 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type REFLECT_UTILS>;

        $r16 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Signature FIND_METHODS>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r17, $r16);

        i8 = 0;

     label4:
        $i3 = interfaceinvoke r11.<java.util.List: int size()>();

        if i8 >= $i3 goto label5;

        $r18 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(i8);

        r36 = (com.mycila.inject.internal.cglib.core.MethodInfo) $r18;

        $r19 = virtualinvoke r36.<com.mycila.inject.internal.cglib.core.MethodInfo: com.mycila.inject.internal.cglib.core.Signature getSignature()>();

        $r21 = interfaceinvoke r20.<com.mycila.inject.internal.cglib.proxy.CallbackGenerator$Context: com.mycila.inject.internal.cglib.core.Signature getImplSignature(com.mycila.inject.internal.cglib.core.MethodInfo)>(r36);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(i8);

        $r22 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type METHOD>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void array_load(com.mycila.inject.internal.asm.Type)>($r22);

        $r24 = specialinvoke r23.<com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: java.lang.String getMethodField(com.mycila.inject.internal.cglib.core.Signature)>($r21);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>($r24);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r2);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_local(com.mycila.inject.internal.cglib.core.Local)>($r1);

        $r25 = virtualinvoke $r19.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getDescriptor()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r25);

        $r26 = virtualinvoke $r19.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r26);

        $r27 = virtualinvoke $r21.<com.mycila.inject.internal.cglib.core.Signature: java.lang.String getName()>();

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(java.lang.String)>($r27);

        $r29 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type METHOD_PROXY>;

        $r28 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Signature MAKE_PROXY>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_static(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r29, $r28);

        $r30 = specialinvoke r23.<com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: java.lang.String getMethodProxyField(com.mycila.inject.internal.cglib.core.Signature)>($r21);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>($r30);

        i8 = i8 + 1;

        goto label4;

     label5:
        virtualinvoke r0.<com.mycila.inject.internal.cglib.core.CodeEmitter: void pop()>();

        goto label1;

     label6:
        return;
    }

    public void generateFindProxy(com.mycila.inject.internal.cglib.core.ClassEmitter, java.util.Map)
    {
        com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator r6;
        java.lang.Object[] $r10;
        com.mycila.inject.internal.cglib.core.Signature $r1, $r3;
        com.mycila.inject.internal.asm.Type $r4;
        java.util.Set $r8;
        java.lang.String[] $r9, $r11, $r12;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator$2 $r5;
        com.mycila.inject.internal.cglib.core.ClassEmitter r0;
        java.util.Map r7;

        r6 := @this: com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator;

        r0 := @parameter0: com.mycila.inject.internal.cglib.core.ClassEmitter;

        r7 := @parameter1: java.util.Map;

        $r1 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Signature FIND_PROXY>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(9, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r4 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r3 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Signature TO_STRING>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_virtual(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r4, $r3);

        $r5 = new com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator$2;

        specialinvoke $r5.<com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator$2: void <init>(com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator,com.mycila.inject.internal.cglib.core.CodeEmitter,java.util.Map)>(r6, $r2, r7);

        $r8 = interfaceinvoke r7.<java.util.Map: java.util.Set keySet()>();

        $r9 = newarray (java.lang.String)[0];

        $r10 = interfaceinvoke $r8.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (java.lang.String[]) $r10;

        $r12 = (java.lang.String[]) $r11;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void string_switch(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.String[],int,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback)>($r2, $r12, 1, $r5);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator$1 $r31;
        com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator $r0;
        com.mycila.inject.internal.asm.Type $r3, $r4, $r5, $r6, $r7, $r13, $r14, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24, $r25, $r28, $r29;
        com.mycila.inject.internal.asm.Type[] $r12, $r20, $r27;
        com.mycila.inject.internal.cglib.core.Signature $r8, $r9, $r10, $r11, $r19, $r26, $r30, $r32;
        java.lang.Class[] $r1;
        java.lang.Class $r2, $r33;

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: java.lang.String FIND_PROXY_NAME> = "CGLIB$findMethodProxy";

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: java.lang.String EMPTY_ARGS_NAME> = "CGLIB$emptyArgs";

        $r0 = new com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator;

        specialinvoke $r0.<com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: void <init>()>();

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator INSTANCE> = $r0;

        $r1 = newarray (java.lang.Class)[1];

        $r2 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: java.lang.Class class$net$sf$cglib$core$Signature>;

        if $r2 != null goto label1;

        $r33 = staticinvoke <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: java.lang.Class class$(java.lang.String)>("com.mycila.inject.internal.cglib.core.Signature");

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: java.lang.Class class$net$sf$cglib$core$Signature> = $r33;

        goto label2;

     label1:
        $r33 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: java.lang.Class class$net$sf$cglib$core$Signature>;

     label2:
        $r1[0] = $r33;

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: java.lang.Class[] FIND_PROXY_TYPES> = $r1;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("AbstractMethodError");

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type ABSTRACT_METHOD_ERROR> = $r3;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("java.lang.reflect.Method");

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type METHOD> = $r4;

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.core.ReflectUtils");

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type REFLECT_UTILS> = $r5;

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.proxy.MethodProxy");

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type METHOD_PROXY> = $r6;

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.proxy.MethodInterceptor");

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type METHOD_INTERCEPTOR> = $r7;

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("java.lang.reflect.Method[] getDeclaredMethods()");

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Signature GET_DECLARED_METHODS> = $r8;

        $r9 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("Class getDeclaringClass()");

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Signature GET_DECLARING_CLASS> = $r9;

        $r10 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("java.lang.reflect.Method[] findMethods(String[], java.lang.reflect.Method[])");

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Signature FIND_METHODS> = $r10;

        $r11 = new com.mycila.inject.internal.cglib.core.Signature;

        $r18 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type METHOD_PROXY>;

        $r12 = newarray (com.mycila.inject.internal.asm.Type)[5];

        $r13 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS>;

        $r12[0] = $r13;

        $r14 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS>;

        $r12[1] = $r14;

        $r15 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING>;

        $r12[2] = $r15;

        $r16 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING>;

        $r12[3] = $r16;

        $r17 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING>;

        $r12[4] = $r17;

        specialinvoke $r11.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("create", $r18, $r12);

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Signature MAKE_PROXY> = $r11;

        $r19 = new com.mycila.inject.internal.cglib.core.Signature;

        $r25 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r20 = newarray (com.mycila.inject.internal.asm.Type)[4];

        $r21 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r20[0] = $r21;

        $r22 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type METHOD>;

        $r20[1] = $r22;

        $r23 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT_ARRAY>;

        $r20[2] = $r23;

        $r24 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type METHOD_PROXY>;

        $r20[3] = $r24;

        specialinvoke $r19.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("intercept", $r25, $r20);

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Signature INTERCEPT> = $r19;

        $r26 = new com.mycila.inject.internal.cglib.core.Signature;

        $r29 = <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.asm.Type METHOD_PROXY>;

        $r27 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r28 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_SIGNATURE>;

        $r27[0] = $r28;

        specialinvoke $r26.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("CGLIB$findMethodProxy", $r29, $r27);

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Signature FIND_PROXY> = $r26;

        $r30 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("String toString()");

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Signature TO_STRING> = $r30;

        $r31 = new com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator$1;

        specialinvoke $r31.<com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator$1: void <init>()>();

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Transformer METHOD_TO_CLASS> = $r31;

        $r32 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseConstructor(java.lang.String)>("String, String");

        <com.mycila.inject.internal.cglib.proxy.MethodInterceptorGenerator: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_SIGNATURE> = $r32;

        return;
    }
}
