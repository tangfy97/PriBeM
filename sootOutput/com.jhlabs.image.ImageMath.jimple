public class com.jhlabs.image.ImageMath extends java.lang.Object
{
    public static final float PI;
    public static final float HALF_PI;
    public static final float QUARTER_PI;
    public static final float TWO_PI;
    private static final float m00;
    private static final float m01;
    private static final float m02;
    private static final float m03;
    private static final float m10;
    private static final float m11;
    private static final float m12;
    private static final float m13;
    private static final float m20;
    private static final float m21;
    private static final float m22;
    private static final float m23;
    private static final float m30;
    private static final float m31;
    private static final float m32;
    private static final float m33;

    public void <init>()
    {
        com.jhlabs.image.ImageMath r0;

        r0 := @this: com.jhlabs.image.ImageMath;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static float bias(float, float)
    {
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $f2 = 1.0F / f1;

        $f4 = $f2 - 2.0F;

        $f3 = 1.0F - f0;

        $f5 = $f4 * $f3;

        $f6 = $f5 + 1.0F;

        $f7 = f0 / $f6;

        return $f7;
    }

    public static float gain(float, float)
    {
        byte $b0;
        int $i1;
        float f0, $f1, f2, $f3, $f4, $f5, f6, $f7, $f8, $f9, $f10, $f11;
        double $d0;

        f2 := @parameter0: float;

        f0 := @parameter1: float;

        $f1 = 1.0F / f0;

        $f5 = $f1 - 2.0F;

        $f3 = 2.0F * f2;

        $f4 = 1.0F - $f3;

        f6 = $f5 * $f4;

        $d0 = (double) f2;

        $b0 = $d0 cmpg 0.5;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $f10 = f6 + 1.0F;

        $f11 = f2 / $f10;

        return $f11;

     label1:
        $f8 = f6 - f2;

        $f7 = f6 - 1.0F;

        $f9 = $f8 / $f7;

        return $f9;
    }

    public static float step(float, float)
    {
        byte $b0;
        int $i1;
        float f0, f1, $f2;

        f1 := @parameter0: float;

        f0 := @parameter1: float;

        $b0 = f0 cmpg f1;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $f2 = 0.0F;

        goto label2;

     label1:
        $f2 = 1.0F;

     label2:
        return $f2;
    }

    public static float pulse(float, float, float)
    {
        byte $b0, $b1;
        int $i2, $i3;
        float f0, f1, f2, $f3;

        f1 := @parameter0: float;

        f2 := @parameter1: float;

        f0 := @parameter2: float;

        $b0 = f0 cmpg f1;

        $i2 = (int) $b0;

        if $i2 < 0 goto label1;

        $b1 = f0 cmpl f2;

        $i3 = (int) $b1;

        if $i3 < 0 goto label2;

     label1:
        $f3 = 0.0F;

        goto label3;

     label2:
        $f3 = 1.0F;

     label3:
        return $f3;
    }

    public static float smoothPulse(float, float, float, float, float)
    {
        byte $b0, $b1, $b2, $b3;
        int $i4, $i5, $i6, $i7;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, f17, f18, f19;

        f0 := @parameter0: float;

        f2 := @parameter1: float;

        f9 := @parameter2: float;

        f1 := @parameter3: float;

        f17 := @parameter4: float;

        $b0 = f17 cmpg f0;

        $i4 = (int) $b0;

        if $i4 < 0 goto label1;

        $b1 = f17 cmpl f1;

        $i5 = (int) $b1;

        if $i5 < 0 goto label2;

     label1:
        return 0.0F;

     label2:
        $b2 = f17 cmpl f2;

        $i6 = (int) $b2;

        if $i6 < 0 goto label4;

        $b3 = f17 cmpg f9;

        $i7 = (int) $b3;

        if $i7 >= 0 goto label3;

        return 1.0F;

     label3:
        $f11 = f17 - f9;

        $f10 = f1 - f9;

        f18 = $f11 / $f10;

        $f14 = f18 * f18;

        $f12 = 2.0F * f18;

        $f13 = 3.0F - $f12;

        $f15 = $f14 * $f13;

        $f16 = 1.0F - $f15;

        return $f16;

     label4:
        $f4 = f17 - f0;

        $f3 = f2 - f0;

        f19 = $f4 / $f3;

        $f7 = f19 * f19;

        $f5 = 2.0F * f19;

        $f6 = 3.0F - $f5;

        $f8 = $f7 * $f6;

        return $f8;
    }

    public static float smoothStep(float, float, float)
    {
        byte $b0, $b1;
        int $i2, $i3;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, f8, f9;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f8 := @parameter2: float;

        $b0 = f8 cmpg f0;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label1;

        return 0.0F;

     label1:
        $b1 = f8 cmpl f1;

        $i3 = (int) $b1;

        if $i3 < 0 goto label2;

        return 1.0F;

     label2:
        $f3 = f8 - f0;

        $f2 = f1 - f0;

        f9 = $f3 / $f2;

        $f6 = f9 * f9;

        $f4 = 2.0F * f9;

        $f5 = 3.0F - $f4;

        $f7 = $f6 * $f5;

        return $f7;
    }

    public static float circleUp(float)
    {
        float $f0, $f1, $f2, f3, f4;
        double $d0, $d1;

        f3 := @parameter0: float;

        f4 = 1.0F - f3;

        $f0 = f4 * f4;

        $f1 = 1.0F - $f0;

        $d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f2 = (float) $d1;

        return $f2;
    }

    public static float circleDown(float)
    {
        float f0, $f1, $f2, $f3, $f4;
        double $d0, $d1;

        f0 := @parameter0: float;

        $f1 = f0 * f0;

        $f2 = 1.0F - $f1;

        $d0 = (double) $f2;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f3 = (float) $d1;

        $f4 = 1.0F - $f3;

        return $f4;
    }

    public static float clamp(float, float, float)
    {
        byte $b0, $b1;
        int $i2, $i3;
        float f0, f1, f2, $f3;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $b0 = f0 cmpg f1;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label1;

        $f3 = f1;

        goto label3;

     label1:
        $b1 = f0 cmpl f2;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label2;

        $f3 = f2;

        goto label3;

     label2:
        $f3 = f0;

     label3:
        return $f3;
    }

    public static int clamp(int, int, int)
    {
        int i0, i1, i2, $i3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        if i0 >= i1 goto label1;

        $i3 = i1;

        goto label3;

     label1:
        if i0 <= i2 goto label2;

        $i3 = i2;

        goto label3;

     label2:
        $i3 = i0;

     label3:
        return $i3;
    }

    public static double mod(double, double)
    {
        byte $b1;
        int i0, $i2;
        double d0, $d1, $d2, $d3, $d4, d5, d6;

        d5 := @parameter0: double;

        d0 := @parameter1: double;

        $d1 = d5 / d0;

        i0 = (int) $d1;

        $d2 = (double) i0;

        $d3 = $d2 * d0;

        d6 = d5 - $d3;

        $b1 = d6 cmpg 0.0;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label1;

        $d4 = d6 + d0;

        return $d4;

     label1:
        return d6;
    }

    public static float mod(float, float)
    {
        byte $b1;
        int i0, $i2;
        float f0, $f1, $f2, $f3, $f4, f5, f6;

        f5 := @parameter0: float;

        f0 := @parameter1: float;

        $f1 = f5 / f0;

        i0 = (int) $f1;

        $f2 = (float) i0;

        $f3 = $f2 * f0;

        f6 = f5 - $f3;

        $b1 = f6 cmpg 0.0F;

        $i2 = (int) $b1;

        if $i2 >= 0 goto label1;

        $f4 = f6 + f0;

        return $f4;

     label1:
        return f6;
    }

    public static int mod(int, int)
    {
        int i0, i1, $i2, $i3, i4, i5;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        i1 = i4 / i0;

        $i2 = i1 * i0;

        i5 = i4 - $i2;

        if i5 >= 0 goto label1;

        $i3 = i5 + i0;

        return $i3;

     label1:
        return i5;
    }

    public static float triangle(float)
    {
        byte $b0;
        int $i1;
        float f0, $f1, $f2, $f3;
        double $d0;

        f0 := @parameter0: float;

        $f1 = staticinvoke <com.jhlabs.image.ImageMath: float mod(float,float)>(f0, 1.0F);

        $d0 = (double) $f1;

        $b0 = $d0 cmpg 0.5;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $f3 = $f1;

        goto label2;

     label1:
        $f3 = 1.0F - $f1;

     label2:
        $f2 = 2.0F * $f3;

        return $f2;
    }

    public static float lerp(float, float, float)
    {
        float f0, f1, f2, $f3, $f4, $f5;

        f1 := @parameter0: float;

        f0 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = f2 - f0;

        $f4 = f1 * $f3;

        $f5 = f0 + $f4;

        return $f5;
    }

    public static int lerp(float, int, int)
    {
        int i0, i1, $i2, $i3;
        float f0, $f1, $f2, $f3, $f4;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $f3 = (float) i0;

        $i2 = i1 - i0;

        $f1 = (float) $i2;

        $f2 = f0 * $f1;

        $f4 = $f3 + $f2;

        $i3 = (int) $f4;

        return $i3;
    }

    public static int mixColors(float, int, int)
    {
        int i0, $i1, $i2, $i3, i4, $i5, i6, $i7, i8, $i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24, i25;
        float f0;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        $i1 = i0 >> 24;

        i22 = $i1 & 255;

        $i2 = i0 >> 16;

        i23 = $i2 & 255;

        $i3 = i0 >> 8;

        i24 = $i3 & 255;

        i25 = i0 & 255;

        $i5 = i4 >> 24;

        i6 = $i5 & 255;

        $i7 = i4 >> 16;

        i8 = $i7 & 255;

        $i9 = i4 >> 8;

        i10 = $i9 & 255;

        i11 = i4 & 255;

        $i12 = staticinvoke <com.jhlabs.image.ImageMath: int lerp(float,int,int)>(f0, i22, i6);

        $i13 = staticinvoke <com.jhlabs.image.ImageMath: int lerp(float,int,int)>(f0, i23, i8);

        $i14 = staticinvoke <com.jhlabs.image.ImageMath: int lerp(float,int,int)>(f0, i24, i10);

        $i15 = staticinvoke <com.jhlabs.image.ImageMath: int lerp(float,int,int)>(f0, i25, i11);

        $i17 = $i12 << 24;

        $i16 = $i13 << 16;

        $i19 = $i17 | $i16;

        $i18 = $i14 << 8;

        $i20 = $i19 | $i18;

        $i21 = $i20 | $i15;

        return $i21;
    }

    public static int bilinearInterpolate(float, float, int, int, int, int)
    {
        float f0, f1, f2, f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, f48, f49, f50, f51, f52, f53, f54, f55;
        int i0, $i1, i2, $i3, i4, $i5, i6, i7, i8, $i9, i10, $i11, i12, $i13, i14, i15, i16, $i17, i18, $i19, i20, $i21, i22, i23, i24, $i25, i26, $i27, i28, $i29, i30, i31, i32, i33, i34, i35, $i36, $i37, $i38, $i39, $i40, $i41;

        f0 := @parameter0: float;

        f2 := @parameter1: float;

        i0 := @parameter2: int;

        i8 := @parameter3: int;

        i16 := @parameter4: int;

        i24 := @parameter5: int;

        $i1 = i0 >> 24;

        i2 = $i1 & 255;

        $i3 = i0 >> 16;

        i4 = $i3 & 255;

        $i5 = i0 >> 8;

        i6 = $i5 & 255;

        i7 = i0 & 255;

        $i9 = i8 >> 24;

        i10 = $i9 & 255;

        $i11 = i8 >> 16;

        i12 = $i11 & 255;

        $i13 = i8 >> 8;

        i14 = $i13 & 255;

        i15 = i8 & 255;

        $i17 = i16 >> 24;

        i18 = $i17 & 255;

        $i19 = i16 >> 16;

        i20 = $i19 & 255;

        $i21 = i16 >> 8;

        i22 = $i21 & 255;

        i23 = i16 & 255;

        $i25 = i24 >> 24;

        i26 = $i25 & 255;

        $i27 = i24 >> 16;

        i28 = $i27 & 255;

        $i29 = i24 >> 8;

        i30 = $i29 & 255;

        i31 = i24 & 255;

        f1 = 1.0F - f0;

        f3 = 1.0F - f2;

        $f4 = (float) i2;

        $f7 = f1 * $f4;

        $f5 = (float) i10;

        $f6 = f0 * $f5;

        f48 = $f7 + $f6;

        $f8 = (float) i18;

        $f11 = f1 * $f8;

        $f9 = (float) i26;

        $f10 = f0 * $f9;

        f49 = $f11 + $f10;

        $f13 = f3 * f48;

        $f12 = f2 * f49;

        $f14 = $f13 + $f12;

        i32 = (int) $f14;

        $f15 = (float) i4;

        $f18 = f1 * $f15;

        $f16 = (float) i12;

        $f17 = f0 * $f16;

        f50 = $f18 + $f17;

        $f19 = (float) i20;

        $f22 = f1 * $f19;

        $f20 = (float) i28;

        $f21 = f0 * $f20;

        f51 = $f22 + $f21;

        $f24 = f3 * f50;

        $f23 = f2 * f51;

        $f25 = $f24 + $f23;

        i33 = (int) $f25;

        $f26 = (float) i6;

        $f29 = f1 * $f26;

        $f27 = (float) i14;

        $f28 = f0 * $f27;

        f52 = $f29 + $f28;

        $f30 = (float) i22;

        $f33 = f1 * $f30;

        $f31 = (float) i30;

        $f32 = f0 * $f31;

        f53 = $f33 + $f32;

        $f35 = f3 * f52;

        $f34 = f2 * f53;

        $f36 = $f35 + $f34;

        i34 = (int) $f36;

        $f37 = (float) i7;

        $f40 = f1 * $f37;

        $f38 = (float) i15;

        $f39 = f0 * $f38;

        f54 = $f40 + $f39;

        $f41 = (float) i23;

        $f44 = f1 * $f41;

        $f42 = (float) i31;

        $f43 = f0 * $f42;

        f55 = $f44 + $f43;

        $f46 = f3 * f54;

        $f45 = f2 * f55;

        $f47 = $f46 + $f45;

        i35 = (int) $f47;

        $i37 = i32 << 24;

        $i36 = i33 << 16;

        $i39 = $i37 | $i36;

        $i38 = i34 << 8;

        $i40 = $i39 | $i38;

        $i41 = $i40 | i35;

        return $i41;
    }

    public static int brightnessNTSC(int)
    {
        int i0, $i1, i2, $i3, i4, i5, $i6;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        i0 := @parameter0: int;

        $i1 = i0 >> 16;

        i2 = $i1 & 255;

        $i3 = i0 >> 8;

        i4 = $i3 & 255;

        i5 = i0 & 255;

        $f0 = (float) i2;

        $f3 = $f0 * 0.299F;

        $f1 = (float) i4;

        $f2 = $f1 * 0.587F;

        $f6 = $f3 + $f2;

        $f4 = (float) i5;

        $f5 = $f4 * 0.114F;

        $f7 = $f6 + $f5;

        $i6 = (int) $f7;

        return $i6;
    }

    public static float spline(float, int, float[])
    {
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, f42, f43;
        float[] r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        java.lang.IllegalArgumentException $r1;

        f42 := @parameter0: float;

        i0 := @parameter1: int;

        r0 := @parameter2: float[];

        i1 = i0 - 3;

        if i1 >= 1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Too few knots in spline");

        throw $r1;

     label1:
        $f0 = staticinvoke <com.jhlabs.image.ImageMath: float clamp(float,float,float)>(f42, 0.0F, 1.0F);

        $f1 = (float) i1;

        f43 = $f0 * $f1;

        i6 = (int) f43;

        $i2 = i0 - 4;

        if i6 <= $i2 goto label2;

        i6 = i0 - 4;

     label2:
        $f2 = (float) i6;

        $f33 = f43 - $f2;

        $f34 = r0[i6];

        $i3 = i6 + 1;

        $f35 = r0[$i3];

        $i4 = i6 + 2;

        $f36 = r0[$i4];

        $i5 = i6 + 3;

        $f37 = r0[$i5];

        $f4 = -0.5F * $f34;

        $f3 = 1.5F * $f35;

        $f6 = $f4 + $f3;

        $f5 = -1.5F * $f36;

        $f8 = $f6 + $f5;

        $f7 = 0.5F * $f37;

        $f38 = $f8 + $f7;

        $f10 = 1.0F * $f34;

        $f9 = -2.5F * $f35;

        $f12 = $f10 + $f9;

        $f11 = 2.0F * $f36;

        $f14 = $f12 + $f11;

        $f13 = -0.5F * $f37;

        $f39 = $f14 + $f13;

        $f16 = -0.5F * $f34;

        $f15 = 0.0F * $f35;

        $f18 = $f16 + $f15;

        $f17 = 0.5F * $f36;

        $f20 = $f18 + $f17;

        $f19 = 0.0F * $f37;

        $f40 = $f20 + $f19;

        $f22 = 0.0F * $f34;

        $f21 = 1.0F * $f35;

        $f24 = $f22 + $f21;

        $f23 = 0.0F * $f36;

        $f26 = $f24 + $f23;

        $f25 = 0.0F * $f37;

        $f41 = $f26 + $f25;

        $f27 = $f38 * $f33;

        $f28 = $f27 + $f39;

        $f29 = $f28 * $f33;

        $f30 = $f29 + $f40;

        $f31 = $f30 * $f33;

        $f32 = $f31 + $f41;

        return $f32;
    }

    public static float spline(float, int, int[], int[])
    {
        byte $b17;
        int[] r0, r1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, f43;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i18, i19, $i20, $i22;
        java.lang.IllegalArgumentException $r3;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        r0 := @parameter2: int[];

        r1 := @parameter3: int[];

        i1 = i0 - 3;

        if i1 >= 1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Too few knots in spline");

        throw $r3;

     label1:
        i18 = 0;

     label2:
        if i18 >= i1 goto label4;

        $i15 = i18 + 1;

        $i16 = r0[$i15];

        $f42 = (float) $i16;

        $b17 = $f42 cmpl f0;

        $i20 = (int) $b17;

        if $i20 <= 0 goto label3;

        goto label4;

     label3:
        i18 = i18 + 1;

        goto label2;

     label4:
        $i2 = i0 - 3;

        if i18 <= $i2 goto label5;

        i18 = i0 - 3;

     label5:
        $i3 = r0[i18];

        $f1 = (float) $i3;

        $f3 = f0 - $f1;

        $i4 = i18 + 1;

        $i6 = r0[$i4];

        $i5 = r0[i18];

        $i7 = $i6 - $i5;

        $f2 = (float) $i7;

        f43 = $f3 / $f2;

        $i22 = (int) -1;

        i19 = i18 + $i22;

        if i19 >= 0 goto label6;

        i19 = 0;

        f43 = 0.0F;

     label6:
        $i8 = r1[i19];

        $f34 = (float) $i8;

        $i9 = i19 + 1;

        $i10 = r1[$i9];

        $f35 = (float) $i10;

        $i11 = i19 + 2;

        $i12 = r1[$i11];

        $f36 = (float) $i12;

        $i13 = i19 + 3;

        $i14 = r1[$i13];

        $f37 = (float) $i14;

        $f5 = -0.5F * $f34;

        $f4 = 1.5F * $f35;

        $f7 = $f5 + $f4;

        $f6 = -1.5F * $f36;

        $f9 = $f7 + $f6;

        $f8 = 0.5F * $f37;

        $f38 = $f9 + $f8;

        $f11 = 1.0F * $f34;

        $f10 = -2.5F * $f35;

        $f13 = $f11 + $f10;

        $f12 = 2.0F * $f36;

        $f15 = $f13 + $f12;

        $f14 = -0.5F * $f37;

        $f39 = $f15 + $f14;

        $f17 = -0.5F * $f34;

        $f16 = 0.0F * $f35;

        $f19 = $f17 + $f16;

        $f18 = 0.5F * $f36;

        $f21 = $f19 + $f18;

        $f20 = 0.0F * $f37;

        $f40 = $f21 + $f20;

        $f23 = 0.0F * $f34;

        $f22 = 1.0F * $f35;

        $f25 = $f23 + $f22;

        $f24 = 0.0F * $f36;

        $f27 = $f25 + $f24;

        $f26 = 0.0F * $f37;

        $f41 = $f27 + $f26;

        $f28 = $f38 * f43;

        $f29 = $f28 + $f39;

        $f30 = $f29 * f43;

        $f31 = $f30 + $f40;

        $f32 = $f31 * f43;

        $f33 = $f32 + $f41;

        return $f33;
    }

    public static int colorSpline(float, int, int[])
    {
        int[] r0;
        float $f0, $f1, $f2, f3, f4, f5, f6, $f7, $f8, $f9, $f10, $f11, $f12, f13, $f14, $f15, $f16, $f17, $f18, $f19, f20, $f21, $f22, $f23, $f24, $f25, $f26, f27, $f28, $f29, $f30, $f31, $f32, $f33, f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, f42, f43;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, i22, $i23;
        java.lang.IllegalArgumentException $r1;

        f42 := @parameter0: float;

        i0 := @parameter1: int;

        r0 := @parameter2: int[];

        i1 = i0 - 3;

        if i1 >= 1 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Too few knots in spline");

        throw $r1;

     label1:
        $f0 = staticinvoke <com.jhlabs.image.ImageMath: float clamp(float,float,float)>(f42, 0.0F, 1.0F);

        $f1 = (float) i1;

        f43 = $f0 * $f1;

        i19 = (int) f43;

        $i2 = i0 - 4;

        if i19 <= $i2 goto label2;

        i19 = i0 - 4;

     label2:
        $f2 = (float) i19;

        $f41 = f43 - $f2;

        i20 = 0;

        i21 = 0;

     label3:
        if i21 >= 4 goto label6;

        i3 = i21 * 8;

        $i4 = r0[i19];

        $i5 = $i4 >> i3;

        $i6 = $i5 & 255;

        f3 = (float) $i6;

        $i7 = i19 + 1;

        $i8 = r0[$i7];

        $i9 = $i8 >> i3;

        $i10 = $i9 & 255;

        f4 = (float) $i10;

        $i11 = i19 + 2;

        $i12 = r0[$i11];

        $i13 = $i12 >> i3;

        $i14 = $i13 & 255;

        f5 = (float) $i14;

        $i15 = i19 + 3;

        $i16 = r0[$i15];

        $i17 = $i16 >> i3;

        $i18 = $i17 & 255;

        f6 = (float) $i18;

        $f8 = -0.5F * f3;

        $f7 = 1.5F * f4;

        $f10 = $f8 + $f7;

        $f9 = -1.5F * f5;

        $f12 = $f10 + $f9;

        $f11 = 0.5F * f6;

        f13 = $f12 + $f11;

        $f15 = 1.0F * f3;

        $f14 = -2.5F * f4;

        $f17 = $f15 + $f14;

        $f16 = 2.0F * f5;

        $f19 = $f17 + $f16;

        $f18 = -0.5F * f6;

        f20 = $f19 + $f18;

        $f22 = -0.5F * f3;

        $f21 = 0.0F * f4;

        $f24 = $f22 + $f21;

        $f23 = 0.5F * f5;

        $f26 = $f24 + $f23;

        $f25 = 0.0F * f6;

        f27 = $f26 + $f25;

        $f29 = 0.0F * f3;

        $f28 = 1.0F * f4;

        $f31 = $f29 + $f28;

        $f30 = 0.0F * f5;

        $f33 = $f31 + $f30;

        $f32 = 0.0F * f6;

        f34 = $f33 + $f32;

        $f35 = f13 * $f41;

        $f36 = $f35 + f20;

        $f37 = $f36 * $f41;

        $f38 = $f37 + f27;

        $f39 = $f38 * $f41;

        $f40 = $f39 + f34;

        i22 = (int) $f40;

        if i22 >= 0 goto label4;

        i22 = 0;

        goto label5;

     label4:
        if i22 <= 255 goto label5;

        i22 = 255;

     label5:
        $i23 = i22 << i3;

        i20 = i20 | $i23;

        i21 = i21 + 1;

        goto label3;

     label6:
        return i20;
    }

    public static int colorSpline(int, int, int[], int[])
    {
        int[] r0, r1;
        float $f0, $f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, $f13, $f14, $f15, $f16, $f17, $f18, f19, $f20, $f21, $f22, $f23, $f24, $f25, f26, $f27, $f28, $f29, $f30, $f31, $f32, f33, $f34, $f35, $f36, $f37, $f38, $f39, f40;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i31, i32, $i33, $i35;
        java.lang.IllegalArgumentException $r3;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        r0 := @parameter2: int[];

        r1 := @parameter3: int[];

        i1 = i0 - 3;

        if i1 >= 1 goto label01;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Too few knots in spline");

        throw $r3;

     label01:
        i28 = 0;

     label02:
        if i28 >= i1 goto label04;

        $i26 = i28 + 1;

        $i27 = r0[$i26];

        if $i27 <= i3 goto label03;

        goto label04;

     label03:
        i28 = i28 + 1;

        goto label02;

     label04:
        $i2 = i0 - 3;

        if i28 <= $i2 goto label05;

        i28 = i0 - 3;

     label05:
        $i4 = r0[i28];

        $i5 = i3 - $i4;

        $f1 = (float) $i5;

        $i6 = i28 + 1;

        $i8 = r0[$i6];

        $i7 = r0[i28];

        $i9 = $i8 - $i7;

        $f0 = (float) $i9;

        f40 = $f1 / $f0;

        $i35 = (int) -1;

        i29 = i28 + $i35;

        if i29 >= 0 goto label06;

        i29 = 0;

        f40 = 0.0F;

     label06:
        i30 = 0;

        i31 = 0;

     label07:
        if i31 >= 4 goto label10;

        i10 = i31 * 8;

        $i11 = r1[i29];

        $i12 = $i11 >> i10;

        $i13 = $i12 & 255;

        f2 = (float) $i13;

        $i14 = i29 + 1;

        $i15 = r1[$i14];

        $i16 = $i15 >> i10;

        $i17 = $i16 & 255;

        f3 = (float) $i17;

        $i18 = i29 + 2;

        $i19 = r1[$i18];

        $i20 = $i19 >> i10;

        $i21 = $i20 & 255;

        f4 = (float) $i21;

        $i22 = i29 + 3;

        $i23 = r1[$i22];

        $i24 = $i23 >> i10;

        $i25 = $i24 & 255;

        f5 = (float) $i25;

        $f7 = -0.5F * f2;

        $f6 = 1.5F * f3;

        $f9 = $f7 + $f6;

        $f8 = -1.5F * f4;

        $f11 = $f9 + $f8;

        $f10 = 0.5F * f5;

        f12 = $f11 + $f10;

        $f14 = 1.0F * f2;

        $f13 = -2.5F * f3;

        $f16 = $f14 + $f13;

        $f15 = 2.0F * f4;

        $f18 = $f16 + $f15;

        $f17 = -0.5F * f5;

        f19 = $f18 + $f17;

        $f21 = -0.5F * f2;

        $f20 = 0.0F * f3;

        $f23 = $f21 + $f20;

        $f22 = 0.5F * f4;

        $f25 = $f23 + $f22;

        $f24 = 0.0F * f5;

        f26 = $f25 + $f24;

        $f28 = 0.0F * f2;

        $f27 = 1.0F * f3;

        $f30 = $f28 + $f27;

        $f29 = 0.0F * f4;

        $f32 = $f30 + $f29;

        $f31 = 0.0F * f5;

        f33 = $f32 + $f31;

        $f34 = f12 * f40;

        $f35 = $f34 + f19;

        $f36 = $f35 * f40;

        $f37 = $f36 + f26;

        $f38 = $f37 * f40;

        $f39 = $f38 + f33;

        i32 = (int) $f39;

        if i32 >= 0 goto label08;

        i32 = 0;

        goto label09;

     label08:
        if i32 <= 255 goto label09;

        i32 = 255;

     label09:
        $i33 = i32 << i10;

        i30 = i30 | $i33;

        i31 = i31 + 1;

        goto label07;

     label10:
        return i30;
    }

    public static void resample(int[], int[], int, int, int, float[])
    {
        byte $b12, $b28;
        float[] r1, r3;
        int[] r0, r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, f7, $f8, $f9, $f10, $f11, $f12, f13, $f14, $f15, $f16, $f17, $f18, f19, $f20, $f21, $f22, $f23, $f24, f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, f55, f56, f57, f58, f59, f60, f61, f62, f63, f64, f65;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, $i46, $i47;

        r0 := @parameter0: int[];

        r2 := @parameter1: int[];

        i2 := @parameter2: int;

        i0 := @parameter3: int;

        i8 := @parameter4: int;

        r3 := @parameter5: float[];

        i30 = i0;

        i1 = lengthof r0;

        $i3 = i2 + 2;

        r1 = newarray (float)[$i3];

        i31 = 0;

        i32 = 0;

     label1:
        if i32 >= i2 goto label4;

     label2:
        $i27 = i31 + 1;

        $f45 = r3[$i27];

        $f44 = (float) i32;

        $b28 = $f45 cmpg $f44;

        $i46 = (int) $b28;

        if $i46 >= 0 goto label3;

        i31 = i31 + 1;

        goto label2;

     label3:
        $f53 = (float) i31;

        $f47 = (float) i32;

        $f46 = r3[i31];

        $f51 = $f47 - $f46;

        $i29 = i31 + 1;

        $f49 = r3[$i29];

        $f48 = r3[i31];

        $f50 = $f49 - $f48;

        $f52 = $f51 / $f50;

        $f54 = $f53 + $f52;

        r1[i32] = $f54;

        i32 = i32 + 1;

        goto label1;

     label4:
        $f0 = (float) i2;

        r1[i2] = $f0;

        $i4 = i2 + 1;

        $f1 = (float) i2;

        r1[$i4] = $f1;

        f55 = 1.0F;

        f56 = r1[1];

        f57 = f56;

        f58 = 0.0F;

        f59 = 0.0F;

        f60 = 0.0F;

        f61 = 0.0F;

        i33 = r0[i0];

        $i5 = i33 >> 24;

        i34 = $i5 & 255;

        $i6 = i33 >> 16;

        i35 = $i6 & 255;

        $i7 = i33 >> 8;

        i36 = $i7 & 255;

        i37 = i33 & 255;

        i38 = i0 + i8;

        i39 = r0[i38];

        $i9 = i39 >> 24;

        i40 = $i9 & 255;

        $i10 = i39 >> 16;

        i41 = $i10 & 255;

        $i11 = i39 >> 8;

        i42 = $i11 & 255;

        i43 = i39 & 255;

        i44 = i38 + i8;

        i45 = 1;

     label5:
        if i45 > i2 goto label9;

        $f2 = (float) i34;

        $f6 = f55 * $f2;

        $f4 = 1.0F - f55;

        $f3 = (float) i40;

        $f5 = $f4 * $f3;

        f7 = $f6 + $f5;

        $f8 = (float) i35;

        $f12 = f55 * $f8;

        $f10 = 1.0F - f55;

        $f9 = (float) i41;

        $f11 = $f10 * $f9;

        f13 = $f12 + $f11;

        $f14 = (float) i36;

        $f18 = f55 * $f14;

        $f16 = 1.0F - f55;

        $f15 = (float) i42;

        $f17 = $f16 * $f15;

        f19 = $f18 + $f17;

        $f20 = (float) i37;

        $f24 = f55 * $f20;

        $f22 = 1.0F - f55;

        $f21 = (float) i43;

        $f23 = $f22 * $f21;

        f25 = $f24 + $f23;

        $b12 = f55 cmpg f56;

        $i47 = (int) $b12;

        if $i47 >= 0 goto label7;

        $f40 = f7 * f55;

        f61 = f61 + $f40;

        $f41 = f13 * f55;

        f60 = f60 + $f41;

        $f42 = f19 * f55;

        f59 = f59 + $f42;

        $f43 = f25 * f55;

        f58 = f58 + $f43;

        f56 = f56 - f55;

        f55 = 1.0F;

        i34 = i40;

        i35 = i41;

        i36 = i42;

        i37 = i43;

        if i44 >= i1 goto label6;

        i39 = r0[i44];

     label6:
        $i24 = i39 >> 24;

        i40 = $i24 & 255;

        $i25 = i39 >> 16;

        i41 = $i25 & 255;

        $i26 = i39 >> 8;

        i42 = $i26 & 255;

        i43 = i39 & 255;

        i44 = i44 + i8;

        goto label8;

     label7:
        $f26 = f7 * f56;

        f62 = f61 + $f26;

        $f27 = f13 * f56;

        f63 = f60 + $f27;

        $f28 = f19 * f56;

        f64 = f59 + $f28;

        $f29 = f25 * f56;

        f65 = f58 + $f29;

        $f30 = f62 / f57;

        $f31 = staticinvoke <java.lang.Math: float min(float,float)>($f30, 255.0F);

        $i13 = (int) $f31;

        $i14 = $i13 << 24;

        $f32 = f63 / f57;

        $f33 = staticinvoke <java.lang.Math: float min(float,float)>($f32, 255.0F);

        $i15 = (int) $f33;

        $i16 = $i15 << 16;

        $i17 = $i14 | $i16;

        $f34 = f64 / f57;

        $f35 = staticinvoke <java.lang.Math: float min(float,float)>($f34, 255.0F);

        $i18 = (int) $f35;

        $i19 = $i18 << 8;

        $i20 = $i17 | $i19;

        $f36 = f65 / f57;

        $f37 = staticinvoke <java.lang.Math: float min(float,float)>($f36, 255.0F);

        $i21 = (int) $f37;

        $i22 = $i20 | $i21;

        r2[i30] = $i22;

        i30 = i30 + i8;

        f58 = 0.0F;

        f59 = 0.0F;

        f60 = 0.0F;

        f61 = 0.0F;

        f55 = f55 - f56;

        $i23 = i45 + 1;

        $f39 = r1[$i23];

        $f38 = r1[i45];

        f56 = $f39 - $f38;

        f57 = f56;

        i45 = i45 + 1;

     label8:
        goto label5;

     label9:
        return;
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.ImageMath: float m33> = 0.0F;

        <com.jhlabs.image.ImageMath: float m32> = 0.0F;

        <com.jhlabs.image.ImageMath: float m31> = 1.0F;

        <com.jhlabs.image.ImageMath: float m30> = 0.0F;

        <com.jhlabs.image.ImageMath: float m23> = 0.0F;

        <com.jhlabs.image.ImageMath: float m22> = 0.5F;

        <com.jhlabs.image.ImageMath: float m21> = 0.0F;

        <com.jhlabs.image.ImageMath: float m20> = -0.5F;

        <com.jhlabs.image.ImageMath: float m13> = -0.5F;

        <com.jhlabs.image.ImageMath: float m12> = 2.0F;

        <com.jhlabs.image.ImageMath: float m11> = -2.5F;

        <com.jhlabs.image.ImageMath: float m10> = 1.0F;

        <com.jhlabs.image.ImageMath: float m03> = 0.5F;

        <com.jhlabs.image.ImageMath: float m02> = -1.5F;

        <com.jhlabs.image.ImageMath: float m01> = 1.5F;

        <com.jhlabs.image.ImageMath: float m00> = -0.5F;

        <com.jhlabs.image.ImageMath: float TWO_PI> = 6.2831855F;

        <com.jhlabs.image.ImageMath: float QUARTER_PI> = 0.7853982F;

        <com.jhlabs.image.ImageMath: float HALF_PI> = 1.5707964F;

        <com.jhlabs.image.ImageMath: float PI> = 3.1415927F;

        return;
    }
}
