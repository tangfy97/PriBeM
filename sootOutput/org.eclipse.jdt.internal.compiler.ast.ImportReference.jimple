public class org.eclipse.jdt.internal.compiler.ast.ImportReference extends org.eclipse.jdt.internal.compiler.ast.ASTNode
{
    public char[][] tokens;
    public long[] sourcePositions;
    public int declarationEnd;
    public int declarationSourceStart;
    public int declarationSourceEnd;
    public int modifiers;
    public org.eclipse.jdt.internal.compiler.ast.Annotation[] annotations;

    public void <init>(char[][], long[], boolean, int)
    {
        org.eclipse.jdt.internal.compiler.ast.ImportReference r0;
        long $l2, $l3, $l5, $l6;
        char[][] r1;
        long[] r2;
        int $i0, $i1, $i4, $i7, i8, $i9, $i10;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ImportReference;

        r1 := @parameter0: char[][];

        r2 := @parameter1: long[];

        z0 := @parameter2: boolean;

        i8 := @parameter3: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.ASTNode: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] tokens> = r1;

        r0.<org.eclipse.jdt.internal.compiler.ast.ImportReference: long[] sourcePositions> = r2;

        if z0 == 0 goto label1;

        $i9 = r0.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int bits>;

        $i10 = $i9 | 131072;

        r0.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int bits> = $i10;

     label1:
        $i0 = lengthof r2;

        $i1 = $i0 - 1;

        $l2 = r2[$i1];

        $l3 = $l2 & -1L;

        $i4 = (int) $l3;

        r0.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceEnd> = $i4;

        $l5 = r2[0];

        $l6 = $l5 >>> 32;

        $i7 = (int) $l6;

        r0.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int sourceStart> = $i7;

        r0.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int modifiers> = i8;

        return;
    }

    public boolean isStatic()
    {
        int $i0, $i1;
        org.eclipse.jdt.internal.compiler.ast.ImportReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ImportReference;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int modifiers>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public char[][] getImportName()
    {
        org.eclipse.jdt.internal.compiler.ast.ImportReference r0;
        char[][] $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ImportReference;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] tokens>;

        return $r1;
    }

    public java.lang.StringBuffer print(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.ImportReference r0;
        java.lang.StringBuffer r1, $r2;
        int i0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ImportReference;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        $r2 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.ImportReference: java.lang.StringBuffer print(int,java.lang.StringBuffer,boolean)>(i0, r1, 1);

        return $r2;
    }

    public java.lang.StringBuffer print(int, java.lang.StringBuffer, boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.ImportReference r0;
        char[][] $r2, $r4;
        java.lang.StringBuffer r1;
        int $i0, $i1, i2, i3, $i4;
        char[] $r3;
        boolean z0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ImportReference;

        i2 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        z0 := @parameter2: boolean;

        i3 = 0;

        goto label3;

     label1:
        if i3 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

     label2:
        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] tokens>;

        $r3 = $r2[i3];

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r3);

        i3 = i3 + 1;

     label3:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.ImportReference: char[][] tokens>;

        $i4 = lengthof $r4;

        if i3 < $i4 goto label1;

        if z0 == 0 goto label4;

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.ImportReference: int bits>;

        $i1 = $i0 & 131072;

        if $i1 == 0 goto label4;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".*");

     label4:
        return r1;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope r2;
        org.eclipse.jdt.internal.compiler.ast.ImportReference r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ImportReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.ImportReference,org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.ImportReference,org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope)>(r1, r2);

        return;
    }
}
