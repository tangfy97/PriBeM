public class org.bouncycastle.crypto.signers.DSASigner extends java.lang.Object implements org.bouncycastle.crypto.DSA
{
    org.bouncycastle.crypto.params.DSAKeyParameters key;
    java.security.SecureRandom random;

    public void <init>()
    {
        org.bouncycastle.crypto.signers.DSASigner r0;

        r0 := @this: org.bouncycastle.crypto.signers.DSASigner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.signers.DSASigner r0;
        org.bouncycastle.crypto.params.DSAPublicKeyParameters $r2;
        org.bouncycastle.crypto.params.DSAPrivateKeyParameters $r4, $r8;
        java.security.SecureRandom $r3, $r6;
        org.bouncycastle.crypto.params.ParametersWithRandom r5;
        boolean z0, $z1;
        org.bouncycastle.crypto.CipherParameters r1, $r7;

        r0 := @this: org.bouncycastle.crypto.signers.DSASigner;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        if z0 == 0 goto label2;

        $z1 = r1 instanceof org.bouncycastle.crypto.params.ParametersWithRandom;

        if $z1 == 0 goto label1;

        r5 = (org.bouncycastle.crypto.params.ParametersWithRandom) r1;

        $r6 = virtualinvoke r5.<org.bouncycastle.crypto.params.ParametersWithRandom: java.security.SecureRandom getRandom()>();

        r0.<org.bouncycastle.crypto.signers.DSASigner: java.security.SecureRandom random> = $r6;

        $r7 = virtualinvoke r5.<org.bouncycastle.crypto.params.ParametersWithRandom: org.bouncycastle.crypto.CipherParameters getParameters()>();

        $r8 = (org.bouncycastle.crypto.params.DSAPrivateKeyParameters) $r7;

        r0.<org.bouncycastle.crypto.signers.DSASigner: org.bouncycastle.crypto.params.DSAKeyParameters key> = $r8;

        goto label3;

     label1:
        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<org.bouncycastle.crypto.signers.DSASigner: java.security.SecureRandom random> = $r3;

        $r4 = (org.bouncycastle.crypto.params.DSAPrivateKeyParameters) r1;

        r0.<org.bouncycastle.crypto.signers.DSASigner: org.bouncycastle.crypto.params.DSAKeyParameters key> = $r4;

        goto label3;

     label2:
        $r2 = (org.bouncycastle.crypto.params.DSAPublicKeyParameters) r1;

        r0.<org.bouncycastle.crypto.signers.DSASigner: org.bouncycastle.crypto.params.DSAKeyParameters key> = $r2;

     label3:
        return;
    }

    public java.math.BigInteger[] generateSignature(byte[])
    {
        byte[] r4;
        org.bouncycastle.crypto.params.DSAPrivateKeyParameters $r18;
        java.security.SecureRandom $r8;
        int $i0, $i1;
        java.math.BigInteger $r3, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r19, $r20, $r21, $r22, $r23, $r24;
        org.bouncycastle.crypto.signers.DSASigner r0;
        org.bouncycastle.crypto.params.DSAParameters $r2;
        java.math.BigInteger[] r25;
        org.bouncycastle.crypto.params.DSAKeyParameters $r1, $r17;

        r0 := @this: org.bouncycastle.crypto.signers.DSASigner;

        r4 := @parameter0: byte[];

        $r1 = r0.<org.bouncycastle.crypto.signers.DSASigner: org.bouncycastle.crypto.params.DSAKeyParameters key>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.params.DSAKeyParameters: org.bouncycastle.crypto.params.DSAParameters getParameters()>();

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r5 = specialinvoke r0.<org.bouncycastle.crypto.signers.DSASigner: java.math.BigInteger calculateE(java.math.BigInteger,byte[])>($r3, r4);

        $r6 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int bitLength()>();

     label1:
        $r7 = new java.math.BigInteger;

        $r8 = r0.<org.bouncycastle.crypto.signers.DSASigner: java.security.SecureRandom random>;

        specialinvoke $r7.<java.math.BigInteger: void <init>(int,java.util.Random)>($i0, $r8);

        $r9 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $i1 = virtualinvoke $r7.<java.math.BigInteger: int compareTo(java.math.BigInteger)>($r9);

        if $i1 >= 0 goto label1;

        $r10 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getG()>();

        $r11 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getP()>();

        $r12 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r7, $r11);

        $r13 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r14 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r13);

        $r15 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r16 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r15);

        $r17 = r0.<org.bouncycastle.crypto.signers.DSASigner: org.bouncycastle.crypto.params.DSAKeyParameters key>;

        $r18 = (org.bouncycastle.crypto.params.DSAPrivateKeyParameters) $r17;

        $r19 = virtualinvoke $r18.<org.bouncycastle.crypto.params.DSAPrivateKeyParameters: java.math.BigInteger getX()>();

        $r20 = virtualinvoke $r19.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r14);

        $r21 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r20);

        $r22 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r21);

        $r23 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r24 = virtualinvoke $r22.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r23);

        r25 = newarray (java.math.BigInteger)[2];

        r25[0] = $r14;

        r25[1] = $r24;

        return r25;
    }

    public boolean verifySignature(byte[], java.math.BigInteger, java.math.BigInteger)
    {
        byte[] r4;
        java.math.BigInteger $r3, $r5, $r6, r7, $r8, r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31;
        boolean $z0;
        org.bouncycastle.crypto.params.DSAPublicKeyParameters $r23;
        int $i0, $i1, $i2, $i3;
        org.bouncycastle.crypto.signers.DSASigner r0;
        org.bouncycastle.crypto.params.DSAParameters $r2;
        org.bouncycastle.crypto.params.DSAKeyParameters $r1, $r22;

        r0 := @this: org.bouncycastle.crypto.signers.DSASigner;

        r4 := @parameter0: byte[];

        r7 := @parameter1: java.math.BigInteger;

        r9 := @parameter2: java.math.BigInteger;

        $r1 = r0.<org.bouncycastle.crypto.signers.DSASigner: org.bouncycastle.crypto.params.DSAKeyParameters key>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.params.DSAKeyParameters: org.bouncycastle.crypto.params.DSAParameters getParameters()>();

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r5 = specialinvoke r0.<org.bouncycastle.crypto.signers.DSASigner: java.math.BigInteger calculateE(java.math.BigInteger,byte[])>($r3, r4);

        $r6 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(0L);

        $i0 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r7);

        if $i0 >= 0 goto label1;

        $r8 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $i1 = virtualinvoke $r8.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r7);

        if $i1 > 0 goto label2;

     label1:
        return 0;

     label2:
        $i2 = virtualinvoke $r6.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r9);

        if $i2 >= 0 goto label3;

        $r10 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $i3 = virtualinvoke $r10.<java.math.BigInteger: int compareTo(java.math.BigInteger)>(r9);

        if $i3 > 0 goto label4;

     label3:
        return 0;

     label4:
        $r11 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r12 = virtualinvoke r9.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>($r11);

        $r13 = virtualinvoke $r5.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r12);

        $r14 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r15 = virtualinvoke $r13.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r14);

        $r16 = virtualinvoke r7.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r12);

        $r17 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r18 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r17);

        $r19 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getG()>();

        $r20 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getP()>();

        $r21 = virtualinvoke $r19.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r15, $r20);

        $r22 = r0.<org.bouncycastle.crypto.signers.DSASigner: org.bouncycastle.crypto.params.DSAKeyParameters key>;

        $r23 = (org.bouncycastle.crypto.params.DSAPublicKeyParameters) $r22;

        $r24 = virtualinvoke $r23.<org.bouncycastle.crypto.params.DSAPublicKeyParameters: java.math.BigInteger getY()>();

        $r25 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getP()>();

        $r26 = virtualinvoke $r24.<java.math.BigInteger: java.math.BigInteger modPow(java.math.BigInteger,java.math.BigInteger)>($r18, $r25);

        $r27 = virtualinvoke $r21.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r26);

        $r28 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getP()>();

        $r29 = virtualinvoke $r27.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r28);

        $r30 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DSAParameters: java.math.BigInteger getQ()>();

        $r31 = virtualinvoke $r29.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r30);

        $z0 = virtualinvoke $r31.<java.math.BigInteger: boolean equals(java.lang.Object)>(r7);

        return $z0;
    }

    private java.math.BigInteger calculateE(java.math.BigInteger, byte[])
    {
        byte[] r1, r2;
        org.bouncycastle.crypto.signers.DSASigner r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.math.BigInteger r0, $r3, $r4;

        r5 := @this: org.bouncycastle.crypto.signers.DSASigner;

        r0 := @parameter0: java.math.BigInteger;

        r1 := @parameter1: byte[];

        $i0 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i1 = lengthof r1;

        $i2 = $i1 * 8;

        if $i0 < $i2 goto label1;

        $r4 = new java.math.BigInteger;

        specialinvoke $r4.<java.math.BigInteger: void <init>(int,byte[])>(1, r1);

        return $r4;

     label1:
        $i3 = virtualinvoke r0.<java.math.BigInteger: int bitLength()>();

        $i4 = $i3 / 8;

        r2 = newarray (byte)[$i4];

        $i5 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, $i5);

        $r3 = new java.math.BigInteger;

        specialinvoke $r3.<java.math.BigInteger: void <init>(int,byte[])>(1, r2);

        return $r3;
    }
}
