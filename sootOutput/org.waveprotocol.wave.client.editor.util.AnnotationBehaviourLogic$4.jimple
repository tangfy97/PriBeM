class org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4 extends java.lang.Object implements org.waveprotocol.wave.model.util.ReadableStringMap$ProcV
{
    final org.waveprotocol.wave.model.util.StringMap val$rightValues;
    final org.waveprotocol.wave.model.util.StringSet val$keysToCheck;
    final org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0;

    void <init>(org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic, org.waveprotocol.wave.model.util.StringMap, org.waveprotocol.wave.model.util.StringSet)
    {
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic r1;
        org.waveprotocol.wave.model.util.StringSet r3;
        org.waveprotocol.wave.model.util.StringMap r2;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic;

        r2 := @parameter1: org.waveprotocol.wave.model.util.StringMap;

        r3 := @parameter2: org.waveprotocol.wave.model.util.StringSet;

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic this$0> = r1;

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4: org.waveprotocol.wave.model.util.StringMap val$rightValues> = r2;

        r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4: org.waveprotocol.wave.model.util.StringSet val$keysToCheck> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void apply(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringSet $r4;
        java.lang.String r0, r2;
        org.waveprotocol.wave.model.util.StringMap $r3;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4 r1;

        r1 := @this: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $r3 = r1.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4: org.waveprotocol.wave.model.util.StringMap val$rightValues>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>(r2, r0);

        $r4 = r1.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4: org.waveprotocol.wave.model.util.StringSet val$keysToCheck>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.util.StringSet: void add(java.lang.String)>(r2);

     label1:
        return;
    }

    public volatile void apply(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1, $r3;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = (java.lang.String) r2;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic$4: void apply(java.lang.String,java.lang.String)>(r1, $r3);

        return;
    }
}
