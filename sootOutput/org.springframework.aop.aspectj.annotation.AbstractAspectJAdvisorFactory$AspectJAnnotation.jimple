public class org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation extends java.lang.Object
{
    private static final java.lang.String[] EXPRESSION_PROPERTIES;
    private static java.util.Map annotationTypes;
    private final java.lang.'annotation'.Annotation 'annotation';
    private final org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType annotationType;
    private final java.lang.String pointcutExpression;
    private final java.lang.String argumentNames;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.HashMap $r1;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType $r2, $r4, $r6, $r8, $r10, $r12;
        java.util.Map $r3, $r5, $r7, $r9, $r11, $r13;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "value";

        $r0[1] = "pointcut";

        <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.lang.String[] EXPRESSION_PROPERTIES> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.util.Map annotationTypes> = $r1;

        $r3 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.util.Map annotationTypes>;

        $r2 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType AtPointcut>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/aspectj/lang/annotation/Pointcut;", $r2);

        $r5 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.util.Map annotationTypes>;

        $r4 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType AtAfter>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/aspectj/lang/annotation/After;", $r4);

        $r7 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.util.Map annotationTypes>;

        $r6 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType AtAfterReturning>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/aspectj/lang/annotation/AfterReturning;", $r6);

        $r9 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.util.Map annotationTypes>;

        $r8 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType AtAfterThrowing>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/aspectj/lang/annotation/AfterThrowing;", $r8);

        $r11 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.util.Map annotationTypes>;

        $r10 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType AtAround>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/aspectj/lang/annotation/Around;", $r10);

        $r13 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.util.Map annotationTypes>;

        $r12 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType AtBefore>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Lorg/aspectj/lang/annotation/Before;", $r12);

        return;
    }

    public void <init>(java.lang.'annotation'.Annotation)
    {
        java.lang.Object[] $r7;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType $r2;
        java.lang.String $r3, $r9, $r15;
        java.lang.reflect.Method $r6;
        java.lang.Class[] $r5;
        java.lang.IllegalArgumentException $r11;
        java.lang.Exception $r10;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation r0;
        java.lang.'annotation'.Annotation r1;
        java.lang.Class $r4;
        java.lang.Object $r8;
        java.lang.StringBuilder $r12, $r13, $r14;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation;

        r1 := @parameter0: java.lang.'annotation'.Annotation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.lang.'annotation'.Annotation 'annotation'> = r1;

        $r2 = specialinvoke r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType determineAnnotationType(java.lang.'annotation'.Annotation)>(r1);

        r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType annotationType> = $r2;

     label1:
        $r3 = specialinvoke r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.lang.String resolveExpression(java.lang.'annotation'.Annotation)>(r1);

        r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.lang.String pointcutExpression> = $r3;

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = newarray (java.lang.Class)[0];

        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("argNames", $r5);

        $r7 = newarray (java.lang.Object)[0];

        $r8 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r7);

        $r9 = (java.lang.String) $r8;

        r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.lang.String argumentNames> = $r9;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot be an AspectJ annotation");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r15, $r10);

        throw $r11;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType determineAnnotationType(java.lang.'annotation'.Annotation)
    {
        java.lang.IllegalStateException $r9;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType $r8;
        java.util.Map $r0, $r6;
        java.lang.String $r11, $r13;
        boolean $z0, $z1;
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation r14;
        java.lang.'annotation'.Annotation r5;
        java.lang.Object $r3, $r7;
        java.lang.Class r4;
        java.lang.StringBuilder $r10, $r12;

        r14 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation;

        r5 := @parameter0: java.lang.'annotation'.Annotation;

        $r0 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.util.Map annotationTypes>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Class) $r3;

        $z1 = virtualinvoke r4.<java.lang.Class: boolean isInstance(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        $r6 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.util.Map annotationTypes>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r8 = (org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType) $r7;

        return $r8;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalStateException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown annotation type: ");

        $r11 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r9;
    }

    private java.lang.String resolveExpression(java.lang.'annotation'.Annotation) throws java.lang.Exception
    {
        java.lang.Object[] $r5;
        java.lang.NoSuchMethodException $r8;
        java.lang.Class[] $r4;
        java.lang.String[] $r0;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation r9;
        int i0, i1;
        java.lang.'annotation'.Annotation r2;
        java.lang.Class $r3;
        java.lang.Object $r6;
        java.lang.String r1, r7, r10;
        java.lang.reflect.Method r11;
        boolean $z0;

        r9 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation;

        r2 := @parameter0: java.lang.'annotation'.Annotation;

        r10 = null;

        $r0 = <org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.lang.String[] EXPRESSION_PROPERTIES>;

        i0 = lengthof $r0;

        i1 = 0;

        goto label7;

     label1:
        r1 = $r0[i1];

     label2:
        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = newarray (java.lang.Class)[0];

        r11 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r1, $r4);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

        r11 = null;

     label5:
        if r11 == null goto label6;

        $r5 = newarray (java.lang.Object)[0];

        $r6 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r5);

        r7 = (java.lang.String) $r6;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r7);

        if $z0 == 0 goto label6;

        r10 = r7;

     label6:
        i1 = i1 + 1;

     label7:
        if i1 < i0 goto label1;

        return r10;

        catch java.lang.NoSuchMethodException from label2 to label3 with label4;
    }

    public org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType getAnnotationType()
    {
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType $r1;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation r0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation;

        $r1 = r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotationType annotationType>;

        return $r1;
    }

    public java.lang.'annotation'.Annotation getAnnotation()
    {
        java.lang.'annotation'.Annotation $r1;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation r0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation;

        $r1 = r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.lang.'annotation'.Annotation 'annotation'>;

        return $r1;
    }

    public java.lang.String getPointcutExpression()
    {
        java.lang.String $r1;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation r0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation;

        $r1 = r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.lang.String pointcutExpression>;

        return $r1;
    }

    public java.lang.String getArgumentNames()
    {
        java.lang.String $r1;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation r0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation;

        $r1 = r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.lang.String argumentNames>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.lang.'annotation'.Annotation $r1;
        java.lang.String $r2;
        org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation r0;

        r0 := @this: org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation;

        $r1 = r0.<org.springframework.aop.aspectj.'annotation'.AbstractAspectJAdvisorFactory$AspectJAnnotation: java.lang.'annotation'.Annotation 'annotation'>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
