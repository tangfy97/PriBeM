class org.apache.tika.fork.ForkClient extends java.lang.Object
{
    private final java.util.List resources;
    private final java.lang.ClassLoader loader;
    private final java.io.File jar;
    private final java.lang.Process process;
    private final java.io.DataOutputStream output;
    private final java.io.DataInputStream input;
    private final java.io.InputStream error;

    public void <init>(java.lang.ClassLoader, java.lang.Object, java.lang.String) throws java.io.IOException, org.apache.tika.exception.TikaException
    {
        java.lang.Throwable $r24;
        java.io.DataInputStream $r16;
        org.apache.tika.fork.ForkClient r0;
        java.lang.String[] $r5, $r8;
        java.util.ArrayList $r1, $r6;
        java.io.DataOutputStream $r13;
        java.lang.ProcessBuilder $r4;
        java.lang.String r7, $r11;
        java.io.OutputStream $r15;
        java.lang.Process $r12, $r14, $r17, $r19;
        java.io.File $r3, $r10;
        java.util.List $r9, $r21, $r23;
        java.lang.Object r22;
        java.lang.ClassLoader r2;
        java.io.InputStream $r18, $r20;

        r0 := @this: org.apache.tika.fork.ForkClient;

        r2 := @parameter0: java.lang.ClassLoader;

        r22 := @parameter1: java.lang.Object;

        r7 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.tika.fork.ForkClient: java.util.List resources> = $r1;

     label1:
        r0.<org.apache.tika.fork.ForkClient: java.lang.ClassLoader loader> = r2;

        $r3 = staticinvoke <org.apache.tika.fork.ForkClient: java.io.File createBootstrapJar()>();

        r0.<org.apache.tika.fork.ForkClient: java.io.File jar> = $r3;

        $r4 = new java.lang.ProcessBuilder;

        $r5 = newarray (java.lang.String)[0];

        specialinvoke $r4.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>($r5);

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r8 = virtualinvoke r7.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        $r9 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8);

        interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>($r9);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>("-jar");

        $r10 = r0.<org.apache.tika.fork.ForkClient: java.io.File jar>;

        $r11 = virtualinvoke $r10.<java.io.File: java.lang.String getPath()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r11);

        virtualinvoke $r4.<java.lang.ProcessBuilder: java.lang.ProcessBuilder command(java.util.List)>($r6);

        $r12 = virtualinvoke $r4.<java.lang.ProcessBuilder: java.lang.Process start()>();

        r0.<org.apache.tika.fork.ForkClient: java.lang.Process process> = $r12;

        $r13 = new java.io.DataOutputStream;

        $r14 = r0.<org.apache.tika.fork.ForkClient: java.lang.Process process>;

        $r15 = virtualinvoke $r14.<java.lang.Process: java.io.OutputStream getOutputStream()>();

        specialinvoke $r13.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r15);

        r0.<org.apache.tika.fork.ForkClient: java.io.DataOutputStream output> = $r13;

        $r16 = new java.io.DataInputStream;

        $r17 = r0.<org.apache.tika.fork.ForkClient: java.lang.Process process>;

        $r18 = virtualinvoke $r17.<java.lang.Process: java.io.InputStream getInputStream()>();

        specialinvoke $r16.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r18);

        r0.<org.apache.tika.fork.ForkClient: java.io.DataInputStream input> = $r16;

        $r19 = r0.<org.apache.tika.fork.ForkClient: java.lang.Process process>;

        $r20 = virtualinvoke $r19.<java.lang.Process: java.io.InputStream getErrorStream()>();

        r0.<org.apache.tika.fork.ForkClient: java.io.InputStream error> = $r20;

        specialinvoke r0.<org.apache.tika.fork.ForkClient: void waitForStartBeacon()>();

        $r21 = r0.<org.apache.tika.fork.ForkClient: java.util.List resources>;

        specialinvoke r0.<org.apache.tika.fork.ForkClient: void sendObject(java.lang.Object,java.util.List)>(r2, $r21);

        $r23 = r0.<org.apache.tika.fork.ForkClient: java.util.List resources>;

        specialinvoke r0.<org.apache.tika.fork.ForkClient: void sendObject(java.lang.Object,java.util.List)>(r22, $r23);

     label2:
        if 1 != 0 goto label6;

        virtualinvoke r0.<org.apache.tika.fork.ForkClient: void close()>();

        goto label6;

     label3:
        $r24 := @caughtexception;

     label4:
        if 0 != 0 goto label5;

        virtualinvoke r0.<org.apache.tika.fork.ForkClient: void close()>();

     label5:
        throw $r24;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void waitForStartBeacon() throws java.io.IOException
    {
        java.io.DataInputStream $r1;
        byte $b1;
        org.apache.tika.fork.ForkClient r0;
        int $i0, $i2;

        r0 := @this: org.apache.tika.fork.ForkClient;

     label1:
        specialinvoke r0.<org.apache.tika.fork.ForkClient: void consumeErrorStream()>();

        $r1 = r0.<org.apache.tika.fork.ForkClient: java.io.DataInputStream input>;

        $i0 = virtualinvoke $r1.<java.io.DataInputStream: int read()>();

        $b1 = (byte) $i0;

        $i2 = (int) $b1;

        if $i2 != 4 goto label2;

        specialinvoke r0.<org.apache.tika.fork.ForkClient: void consumeErrorStream()>();

        return;

     label2:
        goto label1;
    }

    public synchronized boolean ping()
    {
        java.io.DataInputStream $r3;
        java.io.DataOutputStream $r1, $r2;
        org.apache.tika.fork.ForkClient r0;
        int $i0;
        java.io.IOException $r4;

        r0 := @this: org.apache.tika.fork.ForkClient;

     label1:
        $r1 = r0.<org.apache.tika.fork.ForkClient: java.io.DataOutputStream output>;

        virtualinvoke $r1.<java.io.DataOutputStream: void writeByte(int)>(2);

        $r2 = r0.<org.apache.tika.fork.ForkClient: java.io.DataOutputStream output>;

        virtualinvoke $r2.<java.io.DataOutputStream: void flush()>();

        specialinvoke r0.<org.apache.tika.fork.ForkClient: void consumeErrorStream()>();

        $r3 = r0.<org.apache.tika.fork.ForkClient: java.io.DataInputStream input>;

        $i0 = virtualinvoke $r3.<java.io.DataInputStream: int read()>();

        if $i0 != 2 goto label3;

        specialinvoke r0.<org.apache.tika.fork.ForkClient: void consumeErrorStream()>();

     label2:
        return 1;

     label3:
        return 0;

     label4:
        $r4 := @caughtexception;

        return 0;

        catch java.io.IOException from label1 to label2 with label4;
    }

    public synchronized transient java.lang.Throwable call(java.lang.String, java.lang.Object[]) throws java.io.IOException, org.apache.tika.exception.TikaException
    {
        java.lang.Throwable $r7;
        java.lang.Object[] r6;
        org.apache.tika.fork.ForkClient r1;
        java.util.ArrayList $r0;
        java.util.List $r2;
        java.io.DataOutputStream $r3, $r5;
        int $i0, i1;
        java.lang.Object $r8;
        java.lang.String r4;

        r1 := @this: org.apache.tika.fork.ForkClient;

        r4 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.Object[];

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.apache.tika.fork.ForkClient: java.util.List resources>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r3 = r1.<org.apache.tika.fork.ForkClient: java.io.DataOutputStream output>;

        virtualinvoke $r3.<java.io.DataOutputStream: void writeByte(int)>(1);

        $r5 = r1.<org.apache.tika.fork.ForkClient: java.io.DataOutputStream output>;

        virtualinvoke $r5.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r4);

        i1 = 0;

     label1:
        $i0 = lengthof r6;

        if i1 >= $i0 goto label2;

        $r8 = r6[i1];

        specialinvoke r1.<org.apache.tika.fork.ForkClient: void sendObject(java.lang.Object,java.util.List)>($r8, $r0);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r7 = specialinvoke r1.<org.apache.tika.fork.ForkClient: java.lang.Throwable waitForResponse(java.util.List)>($r0);

        return $r7;
    }

    private void sendObject(java.lang.Object, java.util.List) throws java.io.IOException, org.apache.tika.exception.TikaException
    {
        org.apache.tika.fork.ForkClient r1;
        org.apache.tika.fork.ContentHandlerResource $r5;
        java.io.DataOutputStream $r21;
        org.apache.tika.exception.TikaException $r12;
        org.apache.tika.fork.ClassLoaderResource $r2;
        int $i0;
        org.xml.sax.ContentHandler $r6;
        java.lang.String $r16, $r19;
        boolean $z0, $z1, $z2;
        org.apache.tika.fork.InputStreamProxy $r10;
        org.apache.tika.fork.ContentHandlerProxy $r7;
        java.io.NotSerializableException $r11;
        org.apache.tika.fork.InputStreamResource $r8;
        org.apache.tika.fork.ClassLoaderProxy $r4;
        java.util.List r0;
        java.lang.StringBuilder $r13, $r14, $r17, $r18;
        java.lang.Class $r15;
        java.lang.Object r20;
        java.lang.ClassLoader $r3;
        java.io.InputStream $r9;

        r1 := @this: org.apache.tika.fork.ForkClient;

        r20 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $z0 = r20 instanceof java.io.InputStream;

        if $z0 == 0 goto label1;

        $r8 = new org.apache.tika.fork.InputStreamResource;

        $r9 = (java.io.InputStream) r20;

        specialinvoke $r8.<org.apache.tika.fork.InputStreamResource: void <init>(java.io.InputStream)>($r9);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        $r10 = new org.apache.tika.fork.InputStreamProxy;

        specialinvoke $r10.<org.apache.tika.fork.InputStreamProxy: void <init>(int)>($i0);

        r20 = $r10;

        goto label3;

     label1:
        $z1 = r20 instanceof org.xml.sax.ContentHandler;

        if $z1 == 0 goto label2;

        $r5 = new org.apache.tika.fork.ContentHandlerResource;

        $r6 = (org.xml.sax.ContentHandler) r20;

        specialinvoke $r5.<org.apache.tika.fork.ContentHandlerResource: void <init>(org.xml.sax.ContentHandler)>($r6);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r5);

        $r7 = new org.apache.tika.fork.ContentHandlerProxy;

        specialinvoke $r7.<org.apache.tika.fork.ContentHandlerProxy: void <init>(int)>($i0);

        r20 = $r7;

        goto label3;

     label2:
        $z2 = r20 instanceof java.lang.ClassLoader;

        if $z2 == 0 goto label3;

        $r2 = new org.apache.tika.fork.ClassLoaderResource;

        $r3 = (java.lang.ClassLoader) r20;

        specialinvoke $r2.<org.apache.tika.fork.ClassLoaderResource: void <init>(java.lang.ClassLoader)>($r3);

        interfaceinvoke r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r4 = new org.apache.tika.fork.ClassLoaderProxy;

        specialinvoke $r4.<org.apache.tika.fork.ClassLoaderProxy: void <init>(int)>($i0);

        r20 = $r4;

     label3:
        $r21 = r1.<org.apache.tika.fork.ForkClient: java.io.DataOutputStream output>;

        staticinvoke <org.apache.tika.fork.ForkObjectInputStream: void sendObject(java.lang.Object,java.io.DataOutputStream)>(r20, $r21);

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        $r12 = new org.apache.tika.exception.TikaException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to serialize ");

        $r15 = virtualinvoke r20.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getSimpleName()>();

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to pass to the Forked Parser");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<org.apache.tika.exception.TikaException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r11);

        throw $r12;

     label6:
        specialinvoke r1.<org.apache.tika.fork.ForkClient: java.lang.Throwable waitForResponse(java.util.List)>(r0);

        return;

        catch java.io.NotSerializableException from label3 to label4 with label5;
    }

    public synchronized void close()
    {
        java.io.DataInputStream $r2, $r9;
        java.lang.Process $r4, $r7;
        org.apache.tika.fork.ForkClient r0;
        java.io.IOException $r11;
        java.io.File $r5, $r6;
        java.io.DataOutputStream $r1, $r10;
        java.io.InputStream $r3, $r8;

        r0 := @this: org.apache.tika.fork.ForkClient;

     label1:
        $r1 = r0.<org.apache.tika.fork.ForkClient: java.io.DataOutputStream output>;

        if $r1 == null goto label2;

        $r10 = r0.<org.apache.tika.fork.ForkClient: java.io.DataOutputStream output>;

        virtualinvoke $r10.<java.io.DataOutputStream: void close()>();

     label2:
        $r2 = r0.<org.apache.tika.fork.ForkClient: java.io.DataInputStream input>;

        if $r2 == null goto label3;

        $r9 = r0.<org.apache.tika.fork.ForkClient: java.io.DataInputStream input>;

        virtualinvoke $r9.<java.io.DataInputStream: void close()>();

     label3:
        $r3 = r0.<org.apache.tika.fork.ForkClient: java.io.InputStream error>;

        if $r3 == null goto label4;

        $r8 = r0.<org.apache.tika.fork.ForkClient: java.io.InputStream error>;

        virtualinvoke $r8.<java.io.InputStream: void close()>();

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

     label6:
        $r4 = r0.<org.apache.tika.fork.ForkClient: java.lang.Process process>;

        if $r4 == null goto label7;

        $r7 = r0.<org.apache.tika.fork.ForkClient: java.lang.Process process>;

        virtualinvoke $r7.<java.lang.Process: void destroy()>();

     label7:
        $r5 = r0.<org.apache.tika.fork.ForkClient: java.io.File jar>;

        if $r5 == null goto label8;

        $r6 = r0.<org.apache.tika.fork.ForkClient: java.io.File jar>;

        virtualinvoke $r6.<java.io.File: boolean delete()>();

     label8:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }

    private java.lang.Throwable waitForResponse(java.util.List) throws java.io.IOException
    {
        java.lang.Throwable $r6;
        java.io.DataInputStream $r2, $r4, $r8, $r11;
        org.apache.tika.fork.ForkClient r0;
        java.io.DataOutputStream $r1, $r10;
        byte $b1;
        int $i0, $i2, $i4, $i5, $i7;
        org.apache.tika.io.IOExceptionWithCause $r17;
        org.apache.tika.fork.ForkResource r15;
        java.io.IOException $r16;
        java.util.List r7;
        java.lang.Object $r5, $r9;
        java.lang.ClassNotFoundException $r13;
        java.lang.ClassLoader $r3;

        r0 := @this: org.apache.tika.fork.ForkClient;

        r7 := @parameter0: java.util.List;

        $r1 = r0.<org.apache.tika.fork.ForkClient: java.io.DataOutputStream output>;

        virtualinvoke $r1.<java.io.DataOutputStream: void flush()>();

     label1:
        specialinvoke r0.<org.apache.tika.fork.ForkClient: void consumeErrorStream()>();

        $r2 = r0.<org.apache.tika.fork.ForkClient: java.io.DataInputStream input>;

        $i0 = virtualinvoke $r2.<java.io.DataInputStream: int read()>();

        $i4 = (int) -1;

        if $i0 != $i4 goto label2;

        specialinvoke r0.<org.apache.tika.fork.ForkClient: void consumeErrorStream()>();

        $r16 = new java.io.IOException;

        specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>("Lost connection to a forked server process");

        throw $r16;

     label2:
        if $i0 != 3 goto label3;

        $r8 = r0.<org.apache.tika.fork.ForkClient: java.io.DataInputStream input>;

        $i2 = virtualinvoke $r8.<java.io.DataInputStream: int readUnsignedByte()>();

        $r9 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>($i2);

        r15 = (org.apache.tika.fork.ForkResource) $r9;

        $r11 = r0.<org.apache.tika.fork.ForkClient: java.io.DataInputStream input>;

        $r10 = r0.<org.apache.tika.fork.ForkClient: java.io.DataOutputStream output>;

        interfaceinvoke r15.<org.apache.tika.fork.ForkResource: java.lang.Throwable process(java.io.DataInputStream,java.io.DataOutputStream)>($r11, $r10);

        goto label8;

     label3:
        $b1 = (byte) $i0;

        $i5 = (int) $b1;

        $i7 = (int) -1;

        if $i5 != $i7 goto label7;

     label4:
        $r4 = r0.<org.apache.tika.fork.ForkClient: java.io.DataInputStream input>;

        $r3 = r0.<org.apache.tika.fork.ForkClient: java.lang.ClassLoader loader>;

        $r5 = staticinvoke <org.apache.tika.fork.ForkObjectInputStream: java.lang.Object readObject(java.io.DataInputStream,java.lang.ClassLoader)>($r4, $r3);

        $r6 = (java.lang.Throwable) $r5;

     label5:
        return $r6;

     label6:
        $r13 := @caughtexception;

        $r17 = new org.apache.tika.io.IOExceptionWithCause;

        specialinvoke $r17.<org.apache.tika.io.IOExceptionWithCause: void <init>(java.lang.String,java.lang.Throwable)>("Unable to deserialize an exception", $r13);

        throw $r17;

     label7:
        return null;

     label8:
        goto label1;

        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
    }

    private void consumeErrorStream() throws java.io.IOException
    {
        java.io.PrintStream $r4;
        byte[] r2;
        org.apache.tika.fork.ForkClient r0;
        int $i0, $i1;
        java.io.InputStream $r1, $r3;

        r0 := @this: org.apache.tika.fork.ForkClient;

     label1:
        $r1 = r0.<org.apache.tika.fork.ForkClient: java.io.InputStream error>;

        $i0 = virtualinvoke $r1.<java.io.InputStream: int available()>();

        if $i0 <= 0 goto label3;

        r2 = newarray (byte)[$i0];

        $r3 = r0.<org.apache.tika.fork.ForkClient: java.io.InputStream error>;

        $i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[])>(r2);

        if $i1 <= 0 goto label2;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r4.<java.io.PrintStream: void write(byte[],int,int)>(r2, 0, $i1);

     label2:
        goto label1;

     label3:
        return;
    }

    private static java.io.File createBootstrapJar() throws java.io.IOException
    {
        java.lang.Throwable $r1;
        java.io.File $r0;

        $r0 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("apache-tika-fork-", ".jar");

     label1:
        staticinvoke <org.apache.tika.fork.ForkClient: void fillBootstrapJar(java.io.File)>($r0);

     label2:
        if 1 != 0 goto label6;

        virtualinvoke $r0.<java.io.File: boolean delete()>();

        goto label6;

     label3:
        $r1 := @caughtexception;

     label4:
        if 0 != 0 goto label5;

        virtualinvoke $r0.<java.io.File: boolean delete()>();

     label5:
        throw $r1;

     label6:
        return $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static void fillBootstrapJar(java.io.File) throws java.io.IOException
    {
        java.lang.Throwable $r24, $r25;
        byte[] $r11;
        java.util.jar.JarEntry $r23;
        int i0, i1;
        java.lang.String $r6, $r9, $r17, $r18, $r21;
        java.util.jar.JarOutputStream $r0;
        java.util.zip.ZipEntry $r10;
        java.io.FileOutputStream $r1;
        java.lang.Class[] $r12;
        java.io.File r2;
        java.lang.StringBuilder $r3, $r4, $r7, $r8, $r16, $r19, $r20;
        java.lang.Class $r5, $r13, r15;
        java.lang.ClassLoader $r14;
        java.io.InputStream $r22;

        r2 := @parameter0: java.io.File;

        $r0 = new java.util.jar.JarOutputStream;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        specialinvoke $r0.<java.util.jar.JarOutputStream: void <init>(java.io.OutputStream)>($r1);

     label01:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Main-Class: ");

        $r5 = class "Lorg/apache/tika/fork/ForkServer;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.util.zip.ZipEntry;

        specialinvoke $r10.<java.util.zip.ZipEntry: void <init>(java.lang.String)>("META-INF/MANIFEST.MF");

        virtualinvoke $r0.<java.util.jar.JarOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r10);

        $r11 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r0.<java.util.jar.JarOutputStream: void write(byte[])>($r11);

        $r12 = newarray (java.lang.Class)[8];

        $r12[0] = class "Lorg/apache/tika/fork/ForkServer;";

        $r12[1] = class "Lorg/apache/tika/fork/ForkObjectInputStream;";

        $r12[2] = class "Lorg/apache/tika/fork/ForkProxy;";

        $r12[3] = class "Lorg/apache/tika/fork/ClassLoaderProxy;";

        $r12[4] = class "Lorg/apache/tika/fork/MemoryURLConnection;";

        $r12[5] = class "Lorg/apache/tika/fork/MemoryURLStreamHandler;";

        $r12[6] = class "Lorg/apache/tika/fork/MemoryURLStreamHandlerFactory;";

        $r12[7] = class "Lorg/apache/tika/fork/MemoryURLStreamRecord;";

        $r13 = class "Lorg/apache/tika/fork/ForkServer;";

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        i0 = lengthof $r12;

        i1 = 0;

     label02:
        if i1 >= i0 goto label08;

        r15 = $r12[i1];

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke r15.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = virtualinvoke $r14.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r21);

     label03:
        $r23 = new java.util.jar.JarEntry;

        specialinvoke $r23.<java.util.jar.JarEntry: void <init>(java.lang.String)>($r21);

        virtualinvoke $r0.<java.util.jar.JarOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r23);

        staticinvoke <org.apache.tika.io.IOUtils: int copy(java.io.InputStream,java.io.OutputStream)>($r22, $r0);

     label04:
        virtualinvoke $r22.<java.io.InputStream: void close()>();

        goto label07;

     label05:
        $r25 := @caughtexception;

     label06:
        virtualinvoke $r22.<java.io.InputStream: void close()>();

        throw $r25;

     label07:
        i1 = i1 + 1;

        goto label02;

     label08:
        virtualinvoke $r0.<java.util.jar.JarOutputStream: void close()>();

        goto label11;

     label09:
        $r24 := @caughtexception;

     label10:
        virtualinvoke $r0.<java.util.jar.JarOutputStream: void close()>();

        throw $r24;

     label11:
        return;

        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label01 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }
}
