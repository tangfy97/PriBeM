public class org.dom4j.io.DOMWriter extends java.lang.Object
{
    private static boolean loggedWarning;
    private static final java.lang.String[] DEFAULT_DOM_DOCUMENT_CLASSES;
    private java.lang.Class domDocumentClass;
    private org.dom4j.tree.NamespaceStack namespaceStack;
    static java.lang.Class class$org$dom4j$io$DOMWriter;

    public void <init>()
    {
        org.dom4j.io.DOMWriter r0;
        org.dom4j.tree.NamespaceStack $r1;

        r0 := @this: org.dom4j.io.DOMWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.dom4j.tree.NamespaceStack;

        specialinvoke $r1.<org.dom4j.tree.NamespaceStack: void <init>()>();

        r0.<org.dom4j.io.DOMWriter: org.dom4j.tree.NamespaceStack namespaceStack> = $r1;

        return;
    }

    public void <init>(java.lang.Class)
    {
        org.dom4j.io.DOMWriter r0;
        org.dom4j.tree.NamespaceStack $r1;
        java.lang.Class r2;

        r0 := @this: org.dom4j.io.DOMWriter;

        r2 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.dom4j.tree.NamespaceStack;

        specialinvoke $r1.<org.dom4j.tree.NamespaceStack: void <init>()>();

        r0.<org.dom4j.io.DOMWriter: org.dom4j.tree.NamespaceStack namespaceStack> = $r1;

        r0.<org.dom4j.io.DOMWriter: java.lang.Class domDocumentClass> = r2;

        return;
    }

    public java.lang.Class getDomDocumentClass() throws org.dom4j.DocumentException
    {
        java.lang.String[] $r1, $r2;
        java.lang.Exception $r6;
        org.dom4j.io.DOMWriter r0;
        int i0, i1;
        java.lang.Class $r3, $r5, r7, $r9;
        java.lang.ClassLoader $r4;
        java.lang.String r8;

        r0 := @this: org.dom4j.io.DOMWriter;

        r7 = r0.<org.dom4j.io.DOMWriter: java.lang.Class domDocumentClass>;

        if r7 != null goto label9;

        $r1 = <org.dom4j.io.DOMWriter: java.lang.String[] DEFAULT_DOM_DOCUMENT_CLASSES>;

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label9;

     label2:
        $r2 = <org.dom4j.io.DOMWriter: java.lang.String[] DEFAULT_DOM_DOCUMENT_CLASSES>;

        r8 = $r2[i1];

        $r3 = <org.dom4j.io.DOMWriter: java.lang.Class class$org$dom4j$io$DOMWriter>;

        if $r3 != null goto label3;

        $r9 = staticinvoke <org.dom4j.io.DOMWriter: java.lang.Class class$(java.lang.String)>("org.dom4j.io.DOMWriter");

        <org.dom4j.io.DOMWriter: java.lang.Class class$org$dom4j$io$DOMWriter> = $r9;

        goto label4;

     label3:
        $r9 = <org.dom4j.io.DOMWriter: java.lang.Class class$org$dom4j$io$DOMWriter>;

     label4:
        $r4 = virtualinvoke $r9.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r8, 1, $r4);

        r7 = $r5;

        if $r5 == null goto label6;

     label5:
        goto label9;

     label6:
        goto label8;

     label7:
        $r6 := @caughtexception;

     label8:
        i1 = i1 + 1;

        goto label1;

     label9:
        return r7;

        catch java.lang.Exception from label2 to label5 with label7;
    }

    public void setDomDocumentClass(java.lang.Class)
    {
        org.dom4j.io.DOMWriter r0;
        java.lang.Class r1;

        r0 := @this: org.dom4j.io.DOMWriter;

        r1 := @parameter0: java.lang.Class;

        r0.<org.dom4j.io.DOMWriter: java.lang.Class domDocumentClass> = r1;

        return;
    }

    public void setDomDocumentClassName(java.lang.String) throws org.dom4j.DocumentException
    {
        java.lang.Exception $r5;
        org.dom4j.DocumentException $r6;
        java.lang.StringBuffer $r7, $r8, $r9;
        org.dom4j.io.DOMWriter r0;
        java.lang.Class $r2, $r4, $r11;
        java.lang.String r1, $r10;
        java.lang.ClassLoader $r3;

        r0 := @this: org.dom4j.io.DOMWriter;

        r1 := @parameter0: java.lang.String;

     label1:
        $r2 = <org.dom4j.io.DOMWriter: java.lang.Class class$org$dom4j$io$DOMWriter>;

        if $r2 != null goto label2;

        $r11 = staticinvoke <org.dom4j.io.DOMWriter: java.lang.Class class$(java.lang.String)>("org.dom4j.io.DOMWriter");

        <org.dom4j.io.DOMWriter: java.lang.Class class$org$dom4j$io$DOMWriter> = $r11;

        goto label3;

     label2:
        $r11 = <org.dom4j.io.DOMWriter: java.lang.Class class$org$dom4j$io$DOMWriter>;

     label3:
        $r3 = virtualinvoke $r11.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 1, $r3);

        r0.<org.dom4j.io.DOMWriter: java.lang.Class domDocumentClass> = $r4;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        $r6 = new org.dom4j.DocumentException;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not load the DOM Document class: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r6.<org.dom4j.DocumentException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r5);

        throw $r6;

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public org.w3c.dom.Document write(org.dom4j.Document) throws org.dom4j.DocumentException
    {
        org.dom4j.tree.NamespaceStack $r4;
        org.dom4j.Document r0;
        java.util.List $r3;
        org.w3c.dom.Document $r2, $r5;
        org.dom4j.io.DOMWriter r1;
        boolean $z0;

        r1 := @this: org.dom4j.io.DOMWriter;

        r0 := @parameter0: org.dom4j.Document;

        $z0 = r0 instanceof org.w3c.dom.Document;

        if $z0 == 0 goto label1;

        $r5 = (org.w3c.dom.Document) r0;

        return $r5;

     label1:
        virtualinvoke r1.<org.dom4j.io.DOMWriter: void resetNamespaceStack()>();

        $r2 = virtualinvoke r1.<org.dom4j.io.DOMWriter: org.w3c.dom.Document createDomDocument(org.dom4j.Document)>(r0);

        $r3 = interfaceinvoke r0.<org.dom4j.Document: java.util.List content()>();

        virtualinvoke r1.<org.dom4j.io.DOMWriter: void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,java.util.List)>($r2, $r2, $r3);

        $r4 = r1.<org.dom4j.io.DOMWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r4.<org.dom4j.tree.NamespaceStack: void clear()>();

        return $r2;
    }

    public org.w3c.dom.Document write(org.dom4j.Document, org.w3c.dom.DOMImplementation) throws org.dom4j.DocumentException
    {
        org.dom4j.Document r0;
        org.dom4j.tree.NamespaceStack $r5;
        java.util.List $r4;
        org.w3c.dom.Document $r3, $r6;
        org.dom4j.io.DOMWriter r1;
        org.w3c.dom.DOMImplementation r2;
        boolean $z0;

        r1 := @this: org.dom4j.io.DOMWriter;

        r0 := @parameter0: org.dom4j.Document;

        r2 := @parameter1: org.w3c.dom.DOMImplementation;

        $z0 = r0 instanceof org.w3c.dom.Document;

        if $z0 == 0 goto label1;

        $r6 = (org.w3c.dom.Document) r0;

        return $r6;

     label1:
        virtualinvoke r1.<org.dom4j.io.DOMWriter: void resetNamespaceStack()>();

        $r3 = virtualinvoke r1.<org.dom4j.io.DOMWriter: org.w3c.dom.Document createDomDocument(org.dom4j.Document,org.w3c.dom.DOMImplementation)>(r0, r2);

        $r4 = interfaceinvoke r0.<org.dom4j.Document: java.util.List content()>();

        virtualinvoke r1.<org.dom4j.io.DOMWriter: void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,java.util.List)>($r3, $r3, $r4);

        $r5 = r1.<org.dom4j.io.DOMWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r5.<org.dom4j.tree.NamespaceStack: void clear()>();

        return $r3;
    }

    protected void appendDOMTree(org.w3c.dom.Document, org.w3c.dom.Node, java.util.List)
    {
        org.dom4j.Entity $r6;
        org.w3c.dom.Document r3;
        org.dom4j.CDATA $r8;
        org.w3c.dom.Node r4;
        org.dom4j.Comment $r7;
        int $i0, i1;
        java.lang.String $r10, $r11;
        org.dom4j.ProcessingInstruction $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.dom4j.Text r9;
        java.util.List r0;
        org.dom4j.io.DOMWriter r2;
        java.lang.Object $r1;
        org.dom4j.Element $r12;

        r2 := @this: org.dom4j.io.DOMWriter;

        r3 := @parameter0: org.w3c.dom.Document;

        r4 := @parameter1: org.w3c.dom.Node;

        r0 := @parameter2: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label9;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $z0 = $r1 instanceof org.dom4j.Element;

        if $z0 == 0 goto label2;

        $r12 = (org.dom4j.Element) $r1;

        virtualinvoke r2.<org.dom4j.io.DOMWriter: void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,org.dom4j.Element)>(r3, r4, $r12);

        goto label8;

     label2:
        $z1 = $r1 instanceof java.lang.String;

        if $z1 == 0 goto label3;

        $r11 = (java.lang.String) $r1;

        virtualinvoke r2.<org.dom4j.io.DOMWriter: void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,java.lang.String)>(r3, r4, $r11);

        goto label8;

     label3:
        $z2 = $r1 instanceof org.dom4j.Text;

        if $z2 == 0 goto label4;

        r9 = (org.dom4j.Text) $r1;

        $r10 = interfaceinvoke r9.<org.dom4j.Text: java.lang.String getText()>();

        virtualinvoke r2.<org.dom4j.io.DOMWriter: void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,java.lang.String)>(r3, r4, $r10);

        goto label8;

     label4:
        $z3 = $r1 instanceof org.dom4j.CDATA;

        if $z3 == 0 goto label5;

        $r8 = (org.dom4j.CDATA) $r1;

        virtualinvoke r2.<org.dom4j.io.DOMWriter: void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,org.dom4j.CDATA)>(r3, r4, $r8);

        goto label8;

     label5:
        $z4 = $r1 instanceof org.dom4j.Comment;

        if $z4 == 0 goto label6;

        $r7 = (org.dom4j.Comment) $r1;

        virtualinvoke r2.<org.dom4j.io.DOMWriter: void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,org.dom4j.Comment)>(r3, r4, $r7);

        goto label8;

     label6:
        $z5 = $r1 instanceof org.dom4j.Entity;

        if $z5 == 0 goto label7;

        $r6 = (org.dom4j.Entity) $r1;

        virtualinvoke r2.<org.dom4j.io.DOMWriter: void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,org.dom4j.Entity)>(r3, r4, $r6);

        goto label8;

     label7:
        $z6 = $r1 instanceof org.dom4j.ProcessingInstruction;

        if $z6 == 0 goto label8;

        $r5 = (org.dom4j.ProcessingInstruction) $r1;

        virtualinvoke r2.<org.dom4j.io.DOMWriter: void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,org.dom4j.ProcessingInstruction)>(r3, r4, $r5);

     label8:
        i1 = i1 + 1;

        goto label1;

     label9:
        return;
    }

    protected void appendDOMTree(org.w3c.dom.Document, org.w3c.dom.Node, org.dom4j.Element)
    {
        org.dom4j.tree.NamespaceStack $r6, $r11, $r12, $r18, $r19;
        org.w3c.dom.Document r3;
        org.w3c.dom.Node r10;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.lang.String $r1, $r2, $r14, $r15, $r16;
        boolean $z0, $z1;
        org.dom4j.Namespace $r7, r20;
        java.util.List $r8, $r9;
        org.w3c.dom.Element $r4;
        org.dom4j.io.DOMWriter r5;
        org.dom4j.Element r0;
        java.lang.Object $r17;
        org.dom4j.Attribute $r13;

        r5 := @this: org.dom4j.io.DOMWriter;

        r3 := @parameter0: org.w3c.dom.Document;

        r10 := @parameter1: org.w3c.dom.Node;

        r0 := @parameter2: org.dom4j.Element;

        $r1 = interfaceinvoke r0.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        $r2 = interfaceinvoke r0.<org.dom4j.Element: java.lang.String getQualifiedName()>();

        $r4 = interfaceinvoke r3.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>($r1, $r2);

        $r6 = r5.<org.dom4j.io.DOMWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $i0 = virtualinvoke $r6.<org.dom4j.tree.NamespaceStack: int size()>();

        $r7 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Namespace getNamespace()>();

        $z0 = virtualinvoke r5.<org.dom4j.io.DOMWriter: boolean isNamespaceDeclaration(org.dom4j.Namespace)>($r7);

        if $z0 == 0 goto label1;

        $r19 = r5.<org.dom4j.io.DOMWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r19.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r7);

        virtualinvoke r5.<org.dom4j.io.DOMWriter: void writeNamespace(org.w3c.dom.Element,org.dom4j.Namespace)>($r4, $r7);

     label1:
        $r8 = interfaceinvoke r0.<org.dom4j.Element: java.util.List declaredNamespaces()>();

        i4 = 0;

        $i1 = interfaceinvoke $r8.<java.util.List: int size()>();

     label2:
        if i4 >= $i1 goto label4;

        $r17 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i4);

        r20 = (org.dom4j.Namespace) $r17;

        $z1 = virtualinvoke r5.<org.dom4j.io.DOMWriter: boolean isNamespaceDeclaration(org.dom4j.Namespace)>(r20);

        if $z1 == 0 goto label3;

        $r18 = r5.<org.dom4j.io.DOMWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r18.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>(r20);

        virtualinvoke r5.<org.dom4j.io.DOMWriter: void writeNamespace(org.w3c.dom.Element,org.dom4j.Namespace)>($r4, r20);

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        i5 = 0;

        $i2 = interfaceinvoke r0.<org.dom4j.Element: int attributeCount()>();

     label5:
        if i5 >= $i2 goto label6;

        $r13 = interfaceinvoke r0.<org.dom4j.Element: org.dom4j.Attribute attribute(int)>(i5);

        $r14 = interfaceinvoke $r13.<org.dom4j.Attribute: java.lang.String getNamespaceURI()>();

        $r15 = interfaceinvoke $r13.<org.dom4j.Attribute: java.lang.String getQualifiedName()>();

        $r16 = interfaceinvoke $r13.<org.dom4j.Attribute: java.lang.String getValue()>();

        interfaceinvoke $r4.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>($r14, $r15, $r16);

        i5 = i5 + 1;

        goto label5;

     label6:
        $r9 = interfaceinvoke r0.<org.dom4j.Element: java.util.List content()>();

        virtualinvoke r5.<org.dom4j.io.DOMWriter: void appendDOMTree(org.w3c.dom.Document,org.w3c.dom.Node,java.util.List)>(r3, $r4, $r9);

        interfaceinvoke r10.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r4);

     label7:
        $r11 = r5.<org.dom4j.io.DOMWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $i3 = virtualinvoke $r11.<org.dom4j.tree.NamespaceStack: int size()>();

        if $i3 <= $i0 goto label8;

        $r12 = r5.<org.dom4j.io.DOMWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r12.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace pop()>();

        goto label7;

     label8:
        return;
    }

    protected void appendDOMTree(org.w3c.dom.Document, org.w3c.dom.Node, org.dom4j.CDATA)
    {
        org.w3c.dom.Document r0;
        org.dom4j.CDATA r1;
        org.w3c.dom.Node r4;
        org.w3c.dom.CDATASection $r3;
        org.dom4j.io.DOMWriter r5;
        java.lang.String $r2;

        r5 := @this: org.dom4j.io.DOMWriter;

        r0 := @parameter0: org.w3c.dom.Document;

        r4 := @parameter1: org.w3c.dom.Node;

        r1 := @parameter2: org.dom4j.CDATA;

        $r2 = interfaceinvoke r1.<org.dom4j.CDATA: java.lang.String getText()>();

        $r3 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.CDATASection createCDATASection(java.lang.String)>($r2);

        interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r3);

        return;
    }

    protected void appendDOMTree(org.w3c.dom.Document, org.w3c.dom.Node, org.dom4j.Comment)
    {
        org.w3c.dom.Document r0;
        org.dom4j.Comment r1;
        org.w3c.dom.Node r4;
        org.dom4j.io.DOMWriter r5;
        java.lang.String $r2;
        org.w3c.dom.Comment $r3;

        r5 := @this: org.dom4j.io.DOMWriter;

        r0 := @parameter0: org.w3c.dom.Document;

        r4 := @parameter1: org.w3c.dom.Node;

        r1 := @parameter2: org.dom4j.Comment;

        $r2 = interfaceinvoke r1.<org.dom4j.Comment: java.lang.String getText()>();

        $r3 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.Comment createComment(java.lang.String)>($r2);

        interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r3);

        return;
    }

    protected void appendDOMTree(org.w3c.dom.Document, org.w3c.dom.Node, java.lang.String)
    {
        org.w3c.dom.Text $r2;
        org.w3c.dom.Document r0;
        org.w3c.dom.Node r3;
        org.dom4j.io.DOMWriter r4;
        java.lang.String r1;

        r4 := @this: org.dom4j.io.DOMWriter;

        r0 := @parameter0: org.w3c.dom.Document;

        r3 := @parameter1: org.w3c.dom.Node;

        r1 := @parameter2: java.lang.String;

        $r2 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>(r1);

        interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r2);

        return;
    }

    protected void appendDOMTree(org.w3c.dom.Document, org.w3c.dom.Node, org.dom4j.Entity)
    {
        org.dom4j.Entity r1;
        org.w3c.dom.EntityReference $r3;
        org.w3c.dom.Document r0;
        org.w3c.dom.Node r4;
        org.dom4j.io.DOMWriter r5;
        java.lang.String $r2;

        r5 := @this: org.dom4j.io.DOMWriter;

        r0 := @parameter0: org.w3c.dom.Document;

        r4 := @parameter1: org.w3c.dom.Node;

        r1 := @parameter2: org.dom4j.Entity;

        $r2 = interfaceinvoke r1.<org.dom4j.Entity: java.lang.String getName()>();

        $r3 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.EntityReference createEntityReference(java.lang.String)>($r2);

        interfaceinvoke r4.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r3);

        return;
    }

    protected void appendDOMTree(org.w3c.dom.Document, org.w3c.dom.Node, org.dom4j.ProcessingInstruction)
    {
        org.w3c.dom.ProcessingInstruction $r4;
        org.w3c.dom.Document r0;
        org.w3c.dom.Node r5;
        org.dom4j.io.DOMWriter r6;
        java.lang.String $r2, $r3;
        org.dom4j.ProcessingInstruction r1;

        r6 := @this: org.dom4j.io.DOMWriter;

        r0 := @parameter0: org.w3c.dom.Document;

        r5 := @parameter1: org.w3c.dom.Node;

        r1 := @parameter2: org.dom4j.ProcessingInstruction;

        $r2 = interfaceinvoke r1.<org.dom4j.ProcessingInstruction: java.lang.String getTarget()>();

        $r3 = interfaceinvoke r1.<org.dom4j.ProcessingInstruction: java.lang.String getText()>();

        $r4 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>($r2, $r3);

        interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r4);

        return;
    }

    protected void writeNamespace(org.w3c.dom.Element, org.dom4j.Namespace)
    {
        org.w3c.dom.Element r3;
        org.dom4j.Namespace r1;
        org.dom4j.io.DOMWriter r0;
        java.lang.String $r2, $r4;

        r0 := @this: org.dom4j.io.DOMWriter;

        r3 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: org.dom4j.Namespace;

        $r2 = virtualinvoke r0.<org.dom4j.io.DOMWriter: java.lang.String attributeNameForNamespace(org.dom4j.Namespace)>(r1);

        $r4 = virtualinvoke r1.<org.dom4j.Namespace: java.lang.String getURI()>();

        interfaceinvoke r3.<org.w3c.dom.Element: void setAttribute(java.lang.String,java.lang.String)>($r2, $r4);

        return;
    }

    protected java.lang.String attributeNameForNamespace(org.dom4j.Namespace)
    {
        org.dom4j.Namespace r0;
        java.lang.StringBuffer $r2, $r3, $r4, $r5;
        int $i0;
        org.dom4j.io.DOMWriter r7;
        java.lang.String $r1, $r6;

        r7 := @this: org.dom4j.io.DOMWriter;

        r0 := @parameter0: org.dom4j.Namespace;

        $r1 = virtualinvoke r0.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("xmlns");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;

     label1:
        return "xmlns";
    }

    protected org.w3c.dom.Document createDomDocument(org.dom4j.Document) throws org.dom4j.DocumentException
    {
        org.dom4j.Document r22;
        org.dom4j.DocumentException $r8, $r15;
        org.w3c.dom.Document $r2, r23;
        java.lang.StringBuffer $r9, $r10, $r12, $r16, $r17, $r20;
        java.lang.String $r11, $r13, $r19, $r21;
        java.lang.Exception $r7, $r14;
        org.dom4j.io.DOMWriter r0;
        java.lang.Class $r1, $r3, $r5, $r18;
        java.lang.Object $r4, $r6;

        r0 := @this: org.dom4j.io.DOMWriter;

        r22 := @parameter0: org.dom4j.Document;

        $r1 = r0.<org.dom4j.io.DOMWriter: java.lang.Class domDocumentClass>;

        if $r1 == null goto label4;

     label1:
        $r5 = r0.<org.dom4j.io.DOMWriter: java.lang.Class domDocumentClass>;

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Object newInstance()>();

        r23 = (org.w3c.dom.Document) $r6;

     label2:
        goto label8;

     label3:
        $r14 := @caughtexception;

        $r15 = new org.dom4j.DocumentException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not instantiate an instance of DOM Document with class: ");

        $r18 = r0.<org.dom4j.io.DOMWriter: java.lang.Class domDocumentClass>;

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<org.dom4j.DocumentException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r14);

        throw $r15;

     label4:
        $r2 = virtualinvoke r0.<org.dom4j.io.DOMWriter: org.w3c.dom.Document createDomDocumentViaJAXP()>();

        r23 = $r2;

        if $r2 != null goto label8;

        $r3 = virtualinvoke r0.<org.dom4j.io.DOMWriter: java.lang.Class getDomDocumentClass()>();

     label5:
        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object newInstance()>();

        r23 = (org.w3c.dom.Document) $r4;

     label6:
        goto label8;

     label7:
        $r7 := @caughtexception;

        $r8 = new org.dom4j.DocumentException;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not instantiate an instance of DOM Document with class: ");

        $r11 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r8.<org.dom4j.DocumentException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r7);

        throw $r8;

     label8:
        return r23;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    protected org.w3c.dom.Document createDomDocumentViaJAXP() throws org.dom4j.DocumentException
    {
        java.lang.Throwable $r1;
        java.io.PrintStream $r2, $r3, $r5;
        org.w3c.dom.Document $r0;
        java.lang.StringBuffer $r4, $r6, $r7;
        org.dom4j.io.DOMWriter r9;
        java.lang.String $r8;
        boolean $z0, $z1;

        r9 := @this: org.dom4j.io.DOMWriter;

     label1:
        $r0 = staticinvoke <org.dom4j.io.JAXPHelper: org.w3c.dom.Document createDocument(boolean,boolean)>(0, 1);

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        $z0 = <org.dom4j.io.DOMWriter: boolean loggedWarning>;

        if $z0 != 0 goto label5;

        <org.dom4j.io.DOMWriter: boolean loggedWarning> = 1;

        $z1 = staticinvoke <org.dom4j.io.SAXHelper: boolean isVerboseErrorReporting()>();

        if $z1 == 0 goto label4;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Warning: Caught exception attempting to use JAXP to create a W3C DOM document");

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Warning: Exception was: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8);

        virtualinvoke $r1.<java.lang.Throwable: void printStackTrace()>();

        goto label5;

     label4:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Warning: Error occurred using JAXP to create a DOM document.");

     label5:
        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected org.w3c.dom.Document createDomDocument(org.dom4j.Document, org.w3c.dom.DOMImplementation) throws org.dom4j.DocumentException
    {
        org.dom4j.Document r3;
        org.w3c.dom.Document $r1;
        org.dom4j.io.DOMWriter r2;
        org.w3c.dom.DOMImplementation r0;

        r2 := @this: org.dom4j.io.DOMWriter;

        r3 := @parameter0: org.dom4j.Document;

        r0 := @parameter1: org.w3c.dom.DOMImplementation;

        $r1 = interfaceinvoke r0.<org.w3c.dom.DOMImplementation: org.w3c.dom.Document createDocument(java.lang.String,java.lang.String,org.w3c.dom.DocumentType)>(null, null, null);

        return $r1;
    }

    protected boolean isNamespaceDeclaration(org.dom4j.Namespace)
    {
        org.dom4j.Namespace r0, $r1, $r2;
        org.dom4j.tree.NamespaceStack $r5;
        int $i0;
        org.dom4j.io.DOMWriter r4;
        java.lang.String $r3;
        boolean $z0;

        r4 := @this: org.dom4j.io.DOMWriter;

        r0 := @parameter0: org.dom4j.Namespace;

        if r0 == null goto label1;

        $r1 = <org.dom4j.Namespace: org.dom4j.Namespace NO_NAMESPACE>;

        if r0 == $r1 goto label1;

        $r2 = <org.dom4j.Namespace: org.dom4j.Namespace XML_NAMESPACE>;

        if r0 == $r2 goto label1;

        $r3 = virtualinvoke r0.<org.dom4j.Namespace: java.lang.String getURI()>();

        if $r3 == null goto label1;

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r5 = r4.<org.dom4j.io.DOMWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $z0 = virtualinvoke $r5.<org.dom4j.tree.NamespaceStack: boolean contains(org.dom4j.Namespace)>(r0);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected void resetNamespaceStack()
    {
        org.dom4j.tree.NamespaceStack $r1, $r3;
        org.dom4j.Namespace $r2;
        org.dom4j.io.DOMWriter r0;

        r0 := @this: org.dom4j.io.DOMWriter;

        $r1 = r0.<org.dom4j.io.DOMWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r1.<org.dom4j.tree.NamespaceStack: void clear()>();

        $r3 = r0.<org.dom4j.io.DOMWriter: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r2 = <org.dom4j.Namespace: org.dom4j.Namespace XML_NAMESPACE>;

        virtualinvoke $r3.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r2);

        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <org.dom4j.io.DOMWriter: boolean loggedWarning> = 0;

        $r0 = newarray (java.lang.String)[7];

        $r0[0] = "org.apache.xerces.dom.DocumentImpl";

        $r0[1] = "gnu.xml.dom.DomDocument";

        $r0[2] = "org.apache.crimson.tree.XmlDocument";

        $r0[3] = "com.sun.xml.tree.XmlDocument";

        $r0[4] = "oracle.xml.parser.v2.XMLDocument";

        $r0[5] = "oracle.xml.parser.XMLDocument";

        $r0[6] = "org.dom4j.dom.DOMDocument";

        <org.dom4j.io.DOMWriter: java.lang.String[] DEFAULT_DOM_DOCUMENT_CLASSES> = $r0;

        return;
    }
}
