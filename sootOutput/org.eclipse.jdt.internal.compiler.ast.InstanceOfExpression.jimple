public class org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression extends org.eclipse.jdt.internal.compiler.ast.OperatorExpression
{
    public org.eclipse.jdt.internal.compiler.ast.Expression expression;
    public org.eclipse.jdt.internal.compiler.ast.TypeReference type;

    public void <init>(org.eclipse.jdt.internal.compiler.ast.Expression, org.eclipse.jdt.internal.compiler.ast.TypeReference)
    {
        org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference r2;
        org.eclipse.jdt.internal.compiler.ast.Expression r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.ast.TypeReference;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.OperatorExpression: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression> = r1;

        r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type> = r2;

        $i0 = r2.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits>;

        $i1 = $i0 | 1073741824;

        r2.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int bits> = $i1;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: int bits>;

        $i3 = $i2 | 1984;

        r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: int bits> = $i3;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: int sourceStart> = $i4;

        $i5 = r2.<org.eclipse.jdt.internal.compiler.ast.TypeReference: int sourceEnd>;

        r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: int sourceEnd> = $i5;

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r3;
        org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression r0;
        org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding $r2;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo $r6, $r11, $r13, $r14, $r15, r16;
        long $l0, $l1;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r5, $r9, $r10;
        byte $b2;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r4;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r8;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r7, $r12;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r4 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r16 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r2 = virtualinvoke $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding localVariableBinding()>();

        if $r2 == null goto label1;

        $r8 = $r2.<org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding type>;

        $l0 = $r8.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: long tagBits>;

        $l1 = $l0 & 2L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke r4.<org.eclipse.jdt.internal.compiler.flow.FlowContext: void recordUsingNullReference(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding,org.eclipse.jdt.internal.compiler.ast.Expression,int,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r3, $r2, $r9, 1025, r16);

        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r11 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r3, r4, r16);

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        $r13 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo copy()>();

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: void markAsComparedEqualToNonNull(org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding)>($r2);

        $r14 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo copy()>();

        $r15 = staticinvoke <org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.FlowInfo conditional(org.eclipse.jdt.internal.compiler.flow.FlowInfo,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>($r13, $r14);

        return $r15;

     label1:
        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r3, r4, r16);

        $r7 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        return $r7;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression r1;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r4;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        int i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r5;
        boolean z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z0 := @parameter2: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r0, 1);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r5 = $r4.<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void instance_of(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r5);

        if z0 == 0 goto label1;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i2);

        goto label2;

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void pop()>();

     label2:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i1);

        return;
    }

    public java.lang.StringBuffer printExpressionNoParenthesis(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r2;
        org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression r0;
        java.lang.StringBuffer r1, $r3, $r5;
        int i0;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r4;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(i0, r1);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" instanceof ");

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.TypeReference: java.lang.StringBuffer print(int,java.lang.StringBuffer)>(0, r1);

        return $r5;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r8, $r9;
        org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression r0;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r7, $r10;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r5;
        org.eclipse.jdt.internal.compiler.impl.Constant $r1;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r4, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r1 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r1;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r4 = virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r2);

        $r5 = r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        $r6 = virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.ast.TypeReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope,boolean)>(r2, 1);

        if $r4 == null goto label1;

        if $r6 != null goto label2;

     label1:
        return null;

     label2:
        $z0 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isReifiable()>();

        if $z0 != 0 goto label3;

        $r9 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void illegalInstanceOfGenericType(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ASTNode)>($r6, r0);

        goto label6;

     label3:
        $r7 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding NULL>;

        if $r4 == $r7 goto label4;

        $z2 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isBaseType()>();

        if $z2 != 0 goto label5;

     label4:
        $z1 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: boolean checkCastTypesCompatibility(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.Expression)>(r2, $r6, $r4, null);

        if $z1 != 0 goto label6;

     label5:
        $r8 = virtualinvoke r2.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void notCompatibleTypesError(org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r0, $r4, $r6);

     label6:
        $r10 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding BOOLEAN>;

        r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r10;

        return $r10;
    }

    public void tagAsUnnecessaryCast(org.eclipse.jdt.internal.compiler.lookup.Scope, org.eclipse.jdt.internal.compiler.lookup.TypeBinding)
    {
        org.eclipse.jdt.internal.compiler.lookup.Scope r4;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r5;
        org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression r0;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r3, r6;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r2;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression;

        r4 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.Scope;

        r6 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.TypeBinding;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r3 = $r1.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $r2 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding NULL>;

        if $r3 == $r2 goto label1;

        $r5 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.lookup.Scope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r5.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void unnecessaryInstanceof(org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r0, r6);

     label1:
        return;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3;
        org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression r1;
        org.eclipse.jdt.internal.compiler.ast.TypeReference $r4;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression: org.eclipse.jdt.internal.compiler.ast.TypeReference type>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.TypeReference: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.InstanceOfExpression,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
