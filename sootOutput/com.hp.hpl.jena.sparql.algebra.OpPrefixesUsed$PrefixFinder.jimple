class com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder extends com.hp.hpl.jena.sparql.algebra.OpVisitorBase
{
    java.util.Map pmap;
    com.hp.hpl.jena.shared.PrefixMapping usedPMap;

    public void <init>(com.hp.hpl.jena.shared.PrefixMapping, java.util.Map)
    {
        com.hp.hpl.jena.shared.PrefixMapping r2;
        com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder r0;
        java.util.Map r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder;

        r2 := @parameter0: com.hp.hpl.jena.shared.PrefixMapping;

        r1 := @parameter1: java.util.Map;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitorBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder: java.util.Map pmap> = r1;

        r0.<com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder: com.hp.hpl.jena.shared.PrefixMapping usedPMap> = r2;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpGraph)
    {
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1;
        com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder: void node(com.hp.hpl.jena.graph.Node)>($r2);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r3;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r1;
        com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder: void node(com.hp.hpl.jena.graph.Node)>($r2);

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder: void visit(com.hp.hpl.jena.sparql.core.BasicPattern)>($r3);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r2;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r0;
        com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder r1;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder: void visit(com.hp.hpl.jena.sparql.core.BasicPattern)>($r2);

        return;
    }

    private void visit(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        java.util.Iterator $r1;
        com.hp.hpl.jena.sparql.core.BasicPattern r0;
        com.hp.hpl.jena.graph.Node $r5, $r6, $r7;
        com.hp.hpl.jena.graph.Triple r3;
        com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder r4;
        java.lang.Object $r2;
        boolean $z0;

        r4 := @this: com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.hp.hpl.jena.graph.Triple) $r2;

        $r5 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        specialinvoke r4.<com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder: void node(com.hp.hpl.jena.graph.Node)>($r5);

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        specialinvoke r4.<com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder: void node(com.hp.hpl.jena.graph.Node)>($r6);

        $r7 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        specialinvoke r4.<com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder: void node(com.hp.hpl.jena.graph.Node)>($r7);

        goto label1;

     label2:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpFilter)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r1;
        com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        return;
    }

    private void node(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        java.util.Map $r5;
        java.lang.String $r1, $r4, r11, r13;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r9;
        java.util.Iterator $r7;
        java.util.Set $r6;
        com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder r2;
        java.lang.Object $r8, $r10, $r12;
        com.hp.hpl.jena.shared.PrefixMapping $r3, $r14;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder: com.hp.hpl.jena.shared.PrefixMapping usedPMap>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.shared.PrefixMapping: java.lang.String shortForm(java.lang.String)>($r1);

        if $r4 == $r1 goto label2;

        return;

     label2:
        $r5 = r2.<com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder: java.util.Map pmap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r10 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        r11 = (java.lang.String) $r10;

        $r12 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        r13 = (java.lang.String) $r12;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>(r13);

        if $z2 == 0 goto label4;

        $r14 = r2.<com.hp.hpl.jena.sparql.algebra.OpPrefixesUsed$PrefixFinder: com.hp.hpl.jena.shared.PrefixMapping usedPMap>;

        interfaceinvoke $r14.<com.hp.hpl.jena.shared.PrefixMapping: com.hp.hpl.jena.shared.PrefixMapping setNsPrefix(java.lang.String,java.lang.String)>(r11, r13);

        return;

     label4:
        goto label3;

     label5:
        return;
    }
}
