final class org.joda.time.tz.DateTimeZoneBuilder$DSTZone extends org.joda.time.DateTimeZone
{
    private static final long serialVersionUID;
    final int iStandardOffset;
    final org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence;
    final org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence;

    static org.joda.time.tz.DateTimeZoneBuilder$DSTZone readFrom(java.io.DataInput, java.lang.String) throws java.io.IOException
    {
        java.io.DataInput r2;
        int $i1;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r3, $r4;
        long $l0;
        java.lang.String r1;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone $r0;

        r2 := @parameter0: java.io.DataInput;

        r1 := @parameter1: java.lang.String;

        $r0 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        $l0 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: long readMillis(java.io.DataInput)>(r2);

        $i1 = (int) $l0;

        $r3 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>(r2);

        $r4 = staticinvoke <org.joda.time.tz.DateTimeZoneBuilder$Recurrence: org.joda.time.tz.DateTimeZoneBuilder$Recurrence readFrom(java.io.DataInput)>(r2);

        specialinvoke $r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>(r1, $i1, $r3, $r4);

        return $r0;
    }

    void <init>(java.lang.String, int, org.joda.time.tz.DateTimeZoneBuilder$Recurrence, org.joda.time.tz.DateTimeZoneBuilder$Recurrence)
    {
        int i0;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence r2, r3;
        java.lang.String r1;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.joda.time.tz.DateTimeZoneBuilder$Recurrence;

        r3 := @parameter3: org.joda.time.tz.DateTimeZoneBuilder$Recurrence;

        specialinvoke r0.<org.joda.time.DateTimeZone: void <init>(java.lang.String)>(r1);

        r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset> = i0;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence> = r2;

        r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence> = r3;

        return;
    }

    public java.lang.String getNameKey(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1;
        long l0;
        java.lang.String $r2;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        l0 := @parameter0: long;

        $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>(l0);

        $r2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: java.lang.String getNameKey()>();

        return $r2;
    }

    public int getOffset(long)
    {
        int $i1, $i2, $i3;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r1;
        long l0;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        l0 := @parameter0: long;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $r1 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)>(l0);

        $i2 = virtualinvoke $r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        $i3 = $i1 + $i2;

        return $i3;
    }

    public int getStandardOffset(long)
    {
        int $i0;
        long l1;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        l1 := @parameter0: long;

        $i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        return $i0;
    }

    public boolean isFixed()
    {
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        return 0;
    }

    public long nextTransition(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence r1, r2;
        long l1, $l3, l7, $l9, l10, $l13;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;
        byte $b4, $b5, $b6, $b11, $b12;
        int i0, $i2, $i8, $i14, $i15, $i16, $i17, $i18;
        java.lang.ArithmeticException $r3, $r5;
        java.lang.IllegalArgumentException $r4, $r6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        l1 := @parameter0: long;

        i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

     label01:
        $i2 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        $l3 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l1, i0, $i2);

        l7 = $l3;

        $b4 = l1 cmp 0L;

        $i14 = (int) $b4;

        if $i14 <= 0 goto label02;

        $b6 = $l3 cmp 0L;

        $i15 = (int) $b6;

        if $i15 >= 0 goto label02;

        l7 = l1;

     label02:
        goto label05;

     label03:
        $r6 := @caughtexception;

        l7 = l1;

        goto label05;

     label04:
        $r5 := @caughtexception;

        l7 = l1;

     label05:
        $i8 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        $l9 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l1, i0, $i8);

        l10 = $l9;

        $b11 = l1 cmp 0L;

        $i16 = (int) $b11;

        if $i16 <= 0 goto label06;

        $b5 = $l9 cmp 0L;

        $i17 = (int) $b5;

        if $i17 >= 0 goto label06;

        l10 = l1;

     label06:
        goto label09;

     label07:
        $r4 := @caughtexception;

        l10 = l1;

        goto label09;

     label08:
        $r3 := @caughtexception;

        l10 = l1;

     label09:
        $b12 = l7 cmp l10;

        $i18 = (int) $b12;

        if $i18 <= 0 goto label10;

        $l13 = l10;

        goto label11;

     label10:
        $l13 = l7;

     label11:
        return $l13;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.ArithmeticException from label01 to label02 with label04;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.ArithmeticException from label05 to label06 with label08;
    }

    public long previousTransition(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence r1, r2;
        long $l2, $l4, l7, l8, l9, $l11, l12, $l15;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;
        byte $b3, $b5, $b6, $b13, $b14;
        int i0, $i1, $i10, $i16, $i17, $i18, $i19, $i20;
        java.lang.ArithmeticException $r3, $r5;
        java.lang.IllegalArgumentException $r4, $r6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        l7 := @parameter0: long;

        l8 = l7 + 1L;

        i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

     label01:
        $i1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        $l2 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>(l8, i0, $i1);

        l9 = $l2;

        $b3 = l8 cmp 0L;

        $i16 = (int) $b3;

        if $i16 >= 0 goto label02;

        $b6 = $l2 cmp 0L;

        $i17 = (int) $b6;

        if $i17 <= 0 goto label02;

        l9 = l8;

     label02:
        goto label05;

     label03:
        $r6 := @caughtexception;

        l9 = l8;

        goto label05;

     label04:
        $r5 := @caughtexception;

        l9 = l8;

     label05:
        $i10 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        $l11 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long previous(long,int,int)>(l8, i0, $i10);

        l12 = $l11;

        $b13 = l8 cmp 0L;

        $i18 = (int) $b13;

        if $i18 >= 0 goto label06;

        $b5 = $l11 cmp 0L;

        $i19 = (int) $b5;

        if $i19 <= 0 goto label06;

        l12 = l8;

     label06:
        goto label09;

     label07:
        $r4 := @caughtexception;

        l12 = l8;

        goto label09;

     label08:
        $r3 := @caughtexception;

        l12 = l8;

     label09:
        $b14 = l9 cmp l12;

        $i20 = (int) $b14;

        if $i20 <= 0 goto label10;

        $l15 = l9;

        goto label11;

     label10:
        $l15 = l12;

     label11:
        $l4 = $l15 - 1L;

        return $l4;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.ArithmeticException from label01 to label02 with label04;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.ArithmeticException from label05 to label06 with label08;
    }

    public boolean equals(java.lang.Object)
    {
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r5, $r6, $r7, $r8;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0, r2;
        int $i0, $i1;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object r1;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        if $z0 == 0 goto label4;

        r2 = (org.joda.time.tz.DateTimeZoneBuilder$DSTZone) r1;

        $r3 = virtualinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>();

        $r4 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: java.lang.String getID()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label2;

        $i1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $i0 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        if $i1 != $i0 goto label2;

        $r6 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $r5 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        $z2 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        $r7 = r2.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        $z3 = virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;

     label4:
        return 0;
    }

    public void writeTo(java.io.DataOutput) throws java.io.IOException
    {
        java.io.DataOutput r0;
        int $i0;
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence $r2, $r3;
        long $l1;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r1;

        r1 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        r0 := @parameter0: java.io.DataOutput;

        $i0 = r1.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        $l1 = (long) $i0;

        staticinvoke <org.joda.time.tz.DateTimeZoneBuilder: void writeMillis(java.io.DataOutput,long)>(r0, $l1);

        $r2 = r1.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        virtualinvoke $r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>(r0);

        $r3 = r1.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

        virtualinvoke $r3.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: void writeTo(java.io.DataOutput)>(r0);

        return;
    }

    private org.joda.time.tz.DateTimeZoneBuilder$Recurrence findMatchingRecurrence(long)
    {
        org.joda.time.tz.DateTimeZoneBuilder$Recurrence r1, r2, $r7;
        long l1, l3, l5;
        org.joda.time.tz.DateTimeZoneBuilder$DSTZone r0;
        byte $b6;
        int i0, $i2, $i4, $i7;
        java.lang.ArithmeticException $r3, $r5;
        java.lang.IllegalArgumentException $r4, $r6;

        r0 := @this: org.joda.time.tz.DateTimeZoneBuilder$DSTZone;

        l1 := @parameter0: long;

        i0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: int iStandardOffset>;

        r1 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iStartRecurrence>;

        r2 = r0.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iEndRecurrence>;

     label01:
        $i2 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        l3 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l1, i0, $i2);

     label02:
        goto label05;

     label03:
        $r6 := @caughtexception;

        l3 = l1;

        goto label05;

     label04:
        $r5 := @caughtexception;

        l3 = l1;

     label05:
        $i4 = virtualinvoke r1.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: int getSaveMillis()>();

        l5 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: long next(long,int,int)>(l1, i0, $i4);

     label06:
        goto label09;

     label07:
        $r4 := @caughtexception;

        l5 = l1;

        goto label09;

     label08:
        $r3 := @caughtexception;

        l5 = l1;

     label09:
        $b6 = l3 cmp l5;

        $i7 = (int) $b6;

        if $i7 <= 0 goto label10;

        $r7 = r1;

        goto label11;

     label10:
        $r7 = r2;

     label11:
        return $r7;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.ArithmeticException from label01 to label02 with label04;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.ArithmeticException from label05 to label06 with label08;
    }

    public static void <clinit>()
    {
        <org.joda.time.tz.DateTimeZoneBuilder$DSTZone: long serialVersionUID> = 6941492635554961361L;

        return;
    }
}
