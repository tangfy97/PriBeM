public class org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl extends org.aspectj.internal.lang.reflect.PerClauseImpl implements org.aspectj.lang.reflect.TypePatternBasedPerClause
{
    private org.aspectj.lang.reflect.TypePattern typePattern;

    public void <init>(org.aspectj.lang.reflect.PerClauseKind, java.lang.String)
    {
        org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl r0;
        org.aspectj.lang.reflect.PerClauseKind r1;
        org.aspectj.internal.lang.reflect.TypePatternImpl $r2;
        java.lang.String r3;

        r0 := @this: org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl;

        r1 := @parameter0: org.aspectj.lang.reflect.PerClauseKind;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<org.aspectj.internal.lang.reflect.PerClauseImpl: void <init>(org.aspectj.lang.reflect.PerClauseKind)>(r1);

        $r2 = new org.aspectj.internal.lang.reflect.TypePatternImpl;

        specialinvoke $r2.<org.aspectj.internal.lang.reflect.TypePatternImpl: void <init>(java.lang.String)>(r3);

        r0.<org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl: org.aspectj.lang.reflect.TypePattern typePattern> = $r2;

        return;
    }

    public org.aspectj.lang.reflect.TypePattern getTypePattern()
    {
        org.aspectj.lang.reflect.TypePattern $r1;
        org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl r0;

        r0 := @this: org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl;

        $r1 = r0.<org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl: org.aspectj.lang.reflect.TypePattern typePattern>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.aspectj.lang.reflect.TypePattern $r3;
        org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl r2;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.String $r4, $r7;

        r2 := @this: org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pertypewithin(");

        $r3 = r2.<org.aspectj.internal.lang.reflect.TypePatternBasedPerClauseImpl: org.aspectj.lang.reflect.TypePattern typePattern>;

        $r4 = interfaceinvoke $r3.<org.aspectj.lang.reflect.TypePattern: java.lang.String asString()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
