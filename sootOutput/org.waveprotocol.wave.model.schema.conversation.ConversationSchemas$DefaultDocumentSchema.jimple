public class org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema extends org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints
{

    public void <init>()
    {
        java.lang.String r84, r85;
        org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema r0;
        java.lang.String[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83;
        int i0, i1, i2, i3;

        r0 := @this: org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema;

        specialinvoke r0.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: void <init>()>();

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "head";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>(null, $r1);

        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "timestamp";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("head", $r2);

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "lmt";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("timestamp", $r3);

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "t";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("lmt", $r4);

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "body";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>(null, $r5);

        specialinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void lineContainer(java.lang.String)>("body");

        $r6 = newarray (java.lang.String)[5];

        $r6[0] = "h1";

        $r6[1] = "h2";

        $r6[2] = "h3";

        $r6[3] = "h4";

        $r6[4] = "li";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrWithValues(java.lang.String,java.lang.String,java.lang.String[])>("line", "t", $r6);

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "decimal";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrWithValues(java.lang.String,java.lang.String,java.lang.String[])>("line", "listyle", $r7);

        $r8 = newarray (java.lang.String)[4];

        $r8[0] = "l";

        $r8[1] = "r";

        $r8[2] = "c";

        $r8[3] = "j";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrWithValues(java.lang.String,java.lang.String,java.lang.String[])>("line", "a", $r8);

        $r9 = newarray (java.lang.String)[2];

        $r9[0] = "l";

        $r9[1] = "r";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrWithValues(java.lang.String,java.lang.String,java.lang.String[])>("line", "d", $r9);

        $r10 = newarray (java.lang.String)[0];

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrWithValues(java.lang.String,java.lang.String,java.lang.String[])>("line", "i", $r10);

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = "caption";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("image", $r11);

        $r12 = newarray (java.lang.String)[0];

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrWithValues(java.lang.String,java.lang.String,java.lang.String[])>("image", "attachment", $r12);

        $r13 = newarray (java.lang.String)[1];

        $r13[0] = "full";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrWithValues(java.lang.String,java.lang.String,java.lang.String[])>("image", "style", $r13);

        $r14 = newarray (java.lang.String)[1];

        $r14[0] = "gadget";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("image", $r14);

        specialinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void oneLiner(java.lang.String)>("caption");

        $r15 = newarray (java.lang.String)[1];

        $r15[0] = "reply";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("caption", $r15);

        specialinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void oneLiner(java.lang.String)>("label");

        specialinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void oneLiner(java.lang.String)>("input");

        $r16 = newarray (java.lang.String)[1];

        $r16[0] = "id";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("reply", $r16);

        specialinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void containsFormElements(java.lang.String)>("body");

        specialinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void lineContainer(java.lang.String)>("textarea");

        $r17 = newarray (java.lang.String)[1];

        $r17[0] = "name";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("button", $r17);

        $r18 = newarray (java.lang.String)[2];

        $r18[0] = "caption";

        $r18[1] = "events";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("button", $r18);

        $r19 = newarray (java.lang.String)[1];

        $r19[0] = "click";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("events", $r19);

        $r20 = newarray (java.lang.String)[2];

        $r20[0] = "time";

        $r20[1] = "clicker";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("click", $r20);

        $r21 = newarray (java.lang.String)[3];

        $r21[0] = "name";

        $r21[1] = "submit";

        $r21[2] = "value";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("check", $r21);

        $r22 = newarray (java.lang.String)[3];

        $r22[0] = "name";

        $r22[1] = "submit";

        $r22[2] = "value";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("radiogroup", $r22);

        $r23 = newarray (java.lang.String)[3];

        $r23[0] = "name";

        $r23[1] = "submit";

        $r23[2] = "value";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("password", $r23);

        $r24 = newarray (java.lang.String)[3];

        $r24[0] = "name";

        $r24[1] = "submit";

        $r24[2] = "value";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("textarea", $r24);

        $r25 = newarray (java.lang.String)[2];

        $r25[0] = "name";

        $r25[1] = "submit";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("input", $r25);

        $r26 = newarray (java.lang.String)[2];

        $r26[0] = "name";

        $r26[1] = "group";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("radio", $r26);

        $r27 = newarray (java.lang.String)[2];

        $r27[0] = "time";

        $r27[1] = "clicker";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("click", $r27);

        $r28 = newarray (java.lang.String)[1];

        $r28[0] = "for";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("label", $r28);

        $r29 = newarray (java.lang.String)[5];

        $r29[0] = "title";

        $r29[1] = "thumbnail";

        $r29[2] = "category";

        $r29[3] = "state";

        $r29[4] = "pref";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("gadget", $r29);

        $r30 = newarray (java.lang.String)[11];

        $r30[0] = "url";

        $r30[1] = "title";

        $r30[2] = "prefs";

        $r30[3] = "state";

        $r30[4] = "author";

        $r30[5] = "height";

        $r30[6] = "width";

        $r30[7] = "id";

        $r30[8] = "extension";

        $r30[9] = "ifr";

        $r30[10] = "snippet";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("gadget", $r30);

        $r31 = newarray (java.lang.String)[3];

        $r31[0] = "category";

        $r31[1] = "state";

        $r31[2] = "pref";

        i0 = lengthof $r31;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r84 = $r31[i1];

        $r83 = newarray (java.lang.String)[1];

        $r83[0] = "name";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>(r84, $r83);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r32 = newarray (java.lang.String)[4];

        $r32[0] = "title";

        $r32[1] = "thumbnail";

        $r32[2] = "state";

        $r32[3] = "pref";

        i2 = lengthof $r32;

        i3 = 0;

     label3:
        if i3 >= i2 goto label4;

        r85 = $r32[i3];

        $r82 = newarray (java.lang.String)[1];

        $r82[0] = "value";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>(r85, $r82);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r33 = newarray (java.lang.String)[2];

        $r33[0] = "profile-field";

        $r33[1] = "gadget";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("profile", $r33);

        $r34 = newarray (java.lang.String)[2];

        $r34[0] = "name";

        $r34[1] = "user-set";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("profile-field", $r34);

        $r35 = newarray (java.lang.String)[1];

        $r35[0] = "avatar-url";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("profile", $r35);

        $r36 = newarray (java.lang.String)[1];

        $r36[0] = "profile-field";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void containsBlipText(java.lang.String[])>($r36);

        $r37 = newarray (java.lang.String)[2];

        $r37[0] = "result";

        $r37[1] = "customsearch";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("mediasearch", $r37);

        $r38 = newarray (java.lang.String)[6];

        $r38[0] = "page";

        $r38[1] = "corpora";

        $r38[2] = "query";

        $r38[3] = "selected";

        $r38[4] = "pending";

        $r38[5] = "lang";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("mediasearch", $r38);

        $r39 = newarray (java.lang.String)[11];

        $r39[0] = "thumbnail";

        $r39[1] = "thumbwidth";

        $r39[2] = "thumbheight";

        $r39[3] = "content";

        $r39[4] = "url";

        $r39[5] = "dispurl";

        $r39[6] = "title";

        $r39[7] = "snippet";

        $r39[8] = "num";

        $r39[9] = "type";

        $r39[10] = "disphtml";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("result", $r39);

        $r40 = newarray (java.lang.String)[6];

        $r40[0] = "name";

        $r40[1] = "icon";

        $r40[2] = "shortname";

        $r40[3] = "resultrows";

        $r40[4] = "resultcols";

        $r40[5] = "addmethod";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("customsearch", $r40);

        $r41 = newarray (java.lang.String)[1];

        $r41[0] = "trustreq";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("body", $r41);

        $r42 = newarray (java.lang.String)[1];

        $r42[0] = "trustreq";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void containsBlipText(java.lang.String[])>($r42);

        $r43 = newarray (java.lang.String)[1];

        $r43[0] = "trwave";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("trustreq", $r43);

        $r44 = newarray (java.lang.String)[3];

        $r44[0] = "from";

        $r44[1] = "numberOfWaves";

        $r44[2] = "userAction";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("trustreq", $r44);

        $r45 = newarray (java.lang.String)[2];

        $r45[0] = "messageCount";

        $r45[1] = "lastModified";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("trwave", $r45);

        $r46 = newarray (java.lang.String)[1];

        $r46[0] = "trwave";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void containsBlipText(java.lang.String[])>($r46);

        $r47 = newarray (java.lang.String)[1];

        $r47[0] = "blacklist";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("body", $r47);

        $r48 = newarray (java.lang.String)[2];

        $r48[0] = "address";

        $r48[1] = "contacts";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("blacklist", $r48);

        $r49 = newarray (java.lang.String)[1];

        $r49[0] = "invitation";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("body", $r49);

        $r50 = newarray (java.lang.String)[3];

        $r50[0] = "remaining";

        $r50[1] = "title";

        $r50[2] = "invitedString";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("invitation", $r50);

        $r51 = newarray (java.lang.String)[1];

        $r51[0] = "invited";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("invitation", $r51);

        $r52 = newarray (java.lang.String)[1];

        $r52[0] = "address";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("invited", $r52);

        $r53 = newarray (java.lang.String)[1];

        $r53[0] = "tex";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrWithValues(java.lang.String,java.lang.String,java.lang.String[])>("eqn", "format", $r53);

        $r54 = newarray (java.lang.String)[1];

        $r54[0] = "eqn";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void containsBlipText(java.lang.String[])>($r54);

        $r55 = newarray (java.lang.String)[1];

        $r55[0] = "settings";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("body", $r55);

        $r56 = newarray (java.lang.String)[1];

        $r56[0] = "name";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("settings", $r56);

        $r57 = newarray (java.lang.String)[4];

        $r57[0] = "bool-setting";

        $r57[1] = "radio-setting";

        $r57[2] = "text-setting";

        $r57[3] = "listbox-setting";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("settings", $r57);

        $r58 = newarray (java.lang.String)[3];

        $r58[0] = "id";

        $r58[1] = "live-value";

        $r58[2] = "saved-value";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("bool-setting", $r58);

        $r59 = newarray (java.lang.String)[3];

        $r59[0] = "id";

        $r59[1] = "live-value";

        $r59[2] = "saved-value";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("radio-setting", $r59);

        $r60 = newarray (java.lang.String)[3];

        $r60[0] = "id";

        $r60[1] = "live-value";

        $r60[2] = "saved-value";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("listbox-setting", $r60);

        $r61 = newarray (java.lang.String)[2];

        $r61[0] = "id";

        $r61[1] = "saved-value";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("text-setting", $r61);

        specialinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void oneLiner(java.lang.String)>("text-setting");

        $r62 = newarray (java.lang.String)[1];

        $r62[0] = "html";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("body", $r62);

        $r63 = newarray (java.lang.String)[1];

        $r63[0] = "data";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("html", $r63);

        $r64 = newarray (java.lang.String)[1];

        $r64[0] = "data";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void containsBlipText(java.lang.String[])>($r64);

        $r65 = newarray (java.lang.String)[1];

        $r65[0] = "experimental";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("body", $r65);

        $r66 = newarray (java.lang.String)[1];

        $r66[0] = "url";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("experimental", $r66);

        $r67 = newarray (java.lang.String)[2];

        $r67[0] = "namevaluepair";

        $r67[1] = "part";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("experimental", $r67);

        $r68 = newarray (java.lang.String)[1];

        $r68[0] = "id";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("part", $r68);

        specialinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void lineContainer(java.lang.String)>("part");

        specialinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void containsFormElements(java.lang.String)>("part");

        $r69 = newarray (java.lang.String)[1];

        $r69[0] = "name";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("namevaluepair", $r69);

        $r70 = newarray (java.lang.String)[1];

        $r70[0] = "value";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("namevaluepair", $r70);

        $r71 = newarray (java.lang.String)[1];

        $r71[0] = "translation";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("body", $r71);

        $r72 = newarray (java.lang.String)[1];

        $r72[0] = "stanza";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("translation", $r72);

        specialinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void lineContainer(java.lang.String)>("stanza");

        $r73 = newarray (java.lang.String)[2];

        $r73[0] = "lang";

        $r73[1] = "users";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("stanza", $r73);

        $r74 = newarray (java.lang.String)[1];

        $r74[0] = "extension_installer";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("body", $r74);

        $r75 = newarray (java.lang.String)[3];

        $r75[0] = "manifest";

        $r75[1] = "img";

        $r75[2] = "installed";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("extension_installer", $r75);

        $r76 = newarray (java.lang.String)[1];

        $r76[0] = "ext-settings";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("body", $r76);

        $r77 = newarray (java.lang.String)[2];

        $r77[0] = "manifest";

        $r77[1] = "enabled";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("ext-settings", $r77);

        $r78 = newarray (java.lang.String)[1];

        $r78[0] = "gadget-settings";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("body", $r78);

        $r79 = newarray (java.lang.String)[2];

        $r79[0] = "url";

        $r79[1] = "prefs";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("gadget-settings", $r79);

        $r80 = newarray (java.lang.String)[4];

        $r80[0] = "alt";

        $r80[1] = "height";

        $r80[2] = "width";

        $r80[3] = "src";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addAttrs(java.lang.String,java.lang.String[])>("img", $r80);

        $r81 = newarray (java.lang.String)[1];

        $r81[0] = "quote";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>("body", $r81);

        specialinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void lineContainer(java.lang.String)>("quote");

        return;
    }

    private void lineContainer(java.lang.String)
    {
        java.util.List $r4;
        java.lang.String[] $r2, $r3;
        java.lang.String r1;
        org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema r0;

        r0 := @this: org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.String)[9];

        $r2[0] = "line";

        $r2[1] = "image";

        $r2[2] = "gadget";

        $r2[3] = "eqn";

        $r2[4] = "experimental";

        $r2[5] = "mediasearch";

        $r2[6] = "img";

        $r2[7] = "reply";

        $r2[8] = "profile";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>(r1, $r2);

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void containsBlipText(java.lang.String[])>($r3);

        $r4 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("line");

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addRequiredInitial(java.lang.String,java.util.List)>(r1, $r4);

        return;
    }

    private void oneLiner(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.String r2;
        org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema r0;

        r0 := @this: org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void containsBlipText(java.lang.String[])>($r1);

        return;
    }

    private void containsFormElements(java.lang.String)
    {
        java.lang.String[] $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema r0;

        r0 := @this: org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema;

        r1 := @parameter0: java.lang.String;

        $r2 = newarray (java.lang.String)[8];

        $r2[0] = "button";

        $r2[1] = "check";

        $r2[2] = "input";

        $r2[3] = "label";

        $r2[4] = "password";

        $r2[5] = "radiogroup";

        $r2[6] = "radio";

        $r2[7] = "textarea";

        virtualinvoke r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema: void addChildren(java.lang.String,java.lang.String[])>(r1, $r2);

        return;
    }

    public boolean permitsAttribute(java.lang.String, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema r5;
        java.lang.String r0, $r1, $r2, $r3, $r4, r6, r7, $r8, $r9, $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;

        r5 := @this: org.waveprotocol.wave.model.schema.conversation.ConversationSchemas$DefaultDocumentSchema;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        $r1 = "line";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        $r12 = "i";

        $z12 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z12 == 0 goto label1;

        $z13 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaUtils: boolean isPositiveInteger(java.lang.String)>(r7);

        return $z13;

     label1:
        $r2 = "img";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        $r10 = "width";

        $z9 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z9 != 0 goto label2;

        $r11 = "height";

        $z11 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z11 == 0 goto label3;

     label2:
        $z10 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaUtils: boolean isValidInteger(java.lang.String,int)>(r7, 0);

        return $z10;

     label3:
        $r3 = "lmt";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label4;

        $r9 = "t";

        $z7 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z7 == 0 goto label4;

        $z8 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaUtils: boolean isNonNegativeInteger(java.lang.String)>(r7);

        return $z8;

     label4:
        $r4 = "invitation";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label5;

        $r8 = "remaining";

        $z5 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z5 == 0 goto label5;

        $z6 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaUtils: boolean isNonNegativeInteger(java.lang.String)>(r7);

        return $z6;

     label5:
        $z4 = specialinvoke r5.<org.waveprotocol.wave.model.schema.AbstractXmlSchemaConstraints: boolean permitsAttribute(java.lang.String,java.lang.String,java.lang.String)>(r0, r6, r7);

        return $z4;
    }
}
