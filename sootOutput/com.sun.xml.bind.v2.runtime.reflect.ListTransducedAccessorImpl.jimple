public final class com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl extends com.sun.xml.bind.v2.runtime.reflect.DefaultTransducedAccessor
{
    private final com.sun.xml.bind.v2.runtime.Transducer xducer;
    private final com.sun.xml.bind.v2.runtime.reflect.Lister lister;
    private final com.sun.xml.bind.v2.runtime.reflect.Accessor acc;

    public void <init>(com.sun.xml.bind.v2.runtime.Transducer, com.sun.xml.bind.v2.runtime.reflect.Accessor, com.sun.xml.bind.v2.runtime.reflect.Lister)
    {
        com.sun.xml.bind.v2.runtime.reflect.Accessor r3;
        com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl r0;
        com.sun.xml.bind.v2.runtime.reflect.Lister r2;
        com.sun.xml.bind.v2.runtime.Transducer r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.Transducer;

        r3 := @parameter1: com.sun.xml.bind.v2.runtime.reflect.Accessor;

        r2 := @parameter2: com.sun.xml.bind.v2.runtime.reflect.Lister;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.DefaultTransducedAccessor: void <init>()>();

        r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.Transducer xducer> = r1;

        r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Lister lister> = r2;

        r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor acc> = r3;

        return;
    }

    public boolean useNamespace()
    {
        com.sun.xml.bind.v2.runtime.Transducer $r1;
        com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.Transducer xducer>;

        $z0 = interfaceinvoke $r1.<com.sun.xml.bind.v2.runtime.Transducer: boolean useNamespace()>();

        return $z0;
    }

    public void declareNamespace(java.lang.Object, com.sun.xml.bind.v2.runtime.XMLSerializer) throws com.sun.xml.bind.api.AccessorException, org.xml.sax.SAXException
    {
        com.sun.xml.bind.v2.runtime.reflect.Lister $r5;
        com.sun.xml.bind.v2.runtime.reflect.ListIterator $r6;
        javax.xml.bind.JAXBException $r9;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r2;
        com.sun.xml.bind.v2.runtime.XMLSerializer r4;
        com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl r0;
        java.lang.Object r1, $r3, $r7;
        com.sun.xml.bind.v2.runtime.Transducer $r8;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl;

        r1 := @parameter0: java.lang.Object;

        r4 := @parameter1: com.sun.xml.bind.v2.runtime.XMLSerializer;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor acc>;

        $r3 = virtualinvoke $r2.<com.sun.xml.bind.v2.runtime.reflect.Accessor: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label5;

        $r5 = r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Lister lister>;

        $r6 = virtualinvoke $r5.<com.sun.xml.bind.v2.runtime.reflect.Lister: com.sun.xml.bind.v2.runtime.reflect.ListIterator iterator(java.lang.Object,com.sun.xml.bind.v2.runtime.XMLSerializer)>($r3, r4);

     label1:
        $z0 = interfaceinvoke $r6.<com.sun.xml.bind.v2.runtime.reflect.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

     label2:
        $r7 = interfaceinvoke $r6.<com.sun.xml.bind.v2.runtime.reflect.ListIterator: java.lang.Object next()>();

        if $r7 == null goto label3;

        $r8 = r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.Transducer xducer>;

        interfaceinvoke $r8.<com.sun.xml.bind.v2.runtime.Transducer: void declareNamespace(java.lang.Object,com.sun.xml.bind.v2.runtime.XMLSerializer)>($r7, r4);

     label3:
        goto label1;

     label4:
        $r9 := @caughtexception;

        virtualinvoke r4.<com.sun.xml.bind.v2.runtime.XMLSerializer: void reportError(java.lang.String,java.lang.Throwable)>(null, $r9);

        goto label1;

     label5:
        return;

        catch javax.xml.bind.JAXBException from label2 to label3 with label4;
    }

    public java.lang.String print(java.lang.Object) throws com.sun.xml.bind.api.AccessorException, org.xml.sax.SAXException
    {
        java.lang.CharSequence $r11;
        com.sun.xml.bind.v2.runtime.reflect.Lister $r6;
        com.sun.xml.bind.v2.runtime.reflect.ListIterator $r7;
        javax.xml.bind.JAXBException $r12;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r2;
        com.sun.xml.bind.v2.runtime.XMLSerializer $r5;
        com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl r0;
        int $i0;
        java.lang.Object r1, $r3, $r9;
        java.lang.StringBuilder $r4;
        java.lang.String $r8;
        com.sun.xml.bind.v2.runtime.Transducer $r10;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor acc>;

        $r3 = virtualinvoke $r2.<com.sun.xml.bind.v2.runtime.reflect.Accessor: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = staticinvoke <com.sun.xml.bind.v2.runtime.XMLSerializer: com.sun.xml.bind.v2.runtime.XMLSerializer getInstance()>();

        $r6 = r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Lister lister>;

        $r7 = virtualinvoke $r6.<com.sun.xml.bind.v2.runtime.reflect.Lister: com.sun.xml.bind.v2.runtime.reflect.ListIterator iterator(java.lang.Object,com.sun.xml.bind.v2.runtime.XMLSerializer)>($r3, $r5);

     label2:
        $z0 = interfaceinvoke $r7.<com.sun.xml.bind.v2.runtime.reflect.ListIterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

     label3:
        $r9 = interfaceinvoke $r7.<com.sun.xml.bind.v2.runtime.reflect.ListIterator: java.lang.Object next()>();

        if $r9 == null goto label5;

        $i0 = virtualinvoke $r4.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label4;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label4:
        $r10 = r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.Transducer xducer>;

        $r11 = interfaceinvoke $r10.<com.sun.xml.bind.v2.runtime.Transducer: java.lang.CharSequence print(java.lang.Object)>($r9);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r11);

     label5:
        goto label2;

     label6:
        $r12 := @caughtexception;

        virtualinvoke $r5.<com.sun.xml.bind.v2.runtime.XMLSerializer: void reportError(java.lang.String,java.lang.Throwable)>(null, $r12);

        goto label2;

     label7:
        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

        catch javax.xml.bind.JAXBException from label3 to label5 with label6;
    }

    private void processValue(java.lang.Object, java.lang.CharSequence) throws com.sun.xml.bind.api.AccessorException, org.xml.sax.SAXException
    {
        int $i0, i3, i4;
        boolean $z0, $z1, $z2;
        java.lang.CharSequence r5, $r6;
        com.sun.xml.bind.v2.runtime.reflect.Lister $r3, $r8, $r10;
        char $c1, $c2;
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r2, $r7;
        com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl r0;
        java.lang.Object r1, $r4, $r11;
        com.sun.xml.bind.v2.runtime.Transducer $r9;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.CharSequence;

        $r3 = r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Lister lister>;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor acc>;

        $r4 = virtualinvoke $r3.<com.sun.xml.bind.v2.runtime.reflect.Lister: java.lang.Object startPacking(java.lang.Object,com.sun.xml.bind.v2.runtime.reflect.Accessor)>(r1, $r2);

        i3 = 0;

        $i0 = interfaceinvoke r5.<java.lang.CharSequence: int length()>();

     label1:
        i4 = i3;

     label2:
        if i4 >= $i0 goto label3;

        $c2 = interfaceinvoke r5.<java.lang.CharSequence: char charAt(int)>(i4);

        $z2 = staticinvoke <com.sun.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpace(char)>($c2);

        if $z2 != 0 goto label3;

        i4 = i4 + 1;

        goto label2;

     label3:
        $r6 = interfaceinvoke r5.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i3, i4);

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label4;

        $r10 = r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Lister lister>;

        $r9 = r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.Transducer xducer>;

        $r11 = interfaceinvoke $r9.<com.sun.xml.bind.v2.runtime.Transducer: java.lang.Object parse(java.lang.CharSequence)>($r6);

        virtualinvoke $r10.<com.sun.xml.bind.v2.runtime.reflect.Lister: void addToPack(java.lang.Object,java.lang.Object)>($r4, $r11);

     label4:
        if i4 != $i0 goto label5;

        goto label8;

     label5:
        if i4 >= $i0 goto label6;

        $c1 = interfaceinvoke r5.<java.lang.CharSequence: char charAt(int)>(i4);

        $z1 = staticinvoke <com.sun.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpace(char)>($c1);

        if $z1 == 0 goto label6;

        i4 = i4 + 1;

        goto label5;

     label6:
        if i4 != $i0 goto label7;

        goto label8;

     label7:
        i3 = i4;

        goto label1;

     label8:
        $r8 = r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Lister lister>;

        $r7 = r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor acc>;

        virtualinvoke $r8.<com.sun.xml.bind.v2.runtime.reflect.Lister: void endPacking(java.lang.Object,java.lang.Object,com.sun.xml.bind.v2.runtime.reflect.Accessor)>($r4, r1, $r7);

        return;
    }

    public void parse(java.lang.Object, java.lang.CharSequence) throws com.sun.xml.bind.api.AccessorException, org.xml.sax.SAXException
    {
        java.lang.Object r1;
        java.lang.CharSequence r2;
        com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.CharSequence;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: void processValue(java.lang.Object,java.lang.CharSequence)>(r1, r2);

        return;
    }

    public boolean hasValue(java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r2;
        com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl r0;
        java.lang.Object r1, $r3;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: com.sun.xml.bind.v2.runtime.reflect.Accessor acc>;

        $r3 = virtualinvoke $r2.<com.sun.xml.bind.v2.runtime.reflect.Accessor: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public volatile java.lang.CharSequence print(java.lang.Object) throws com.sun.xml.bind.api.AccessorException, org.xml.sax.SAXException
    {
        java.lang.Object r1;
        java.lang.String $r2;
        com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.ListTransducedAccessorImpl: java.lang.String print(java.lang.Object)>(r1);

        return $r2;
    }
}
