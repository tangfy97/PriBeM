public class com.jidesoft.swing.StyledLabelBuilder extends java.lang.Object
{
    private java.lang.StringBuffer buffer;
    private java.util.List ranges;
    private int start;
    private java.util.Map styles;
    private static int[] colorShorthandTable;
    private static java.util.Map colorNamesMap;

    public void <init>()
    {
        java.lang.StringBuffer $r1;
        com.jidesoft.swing.StyledLabelBuilder r0;
        java.util.HashMap $r3;
        java.util.ArrayList $r2;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        r0.<com.jidesoft.swing.StyledLabelBuilder: java.lang.StringBuffer buffer> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.List ranges> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.Map styles> = $r3;

        r0.<com.jidesoft.swing.StyledLabelBuilder: int start> = 0;

        return;
    }

    public void clear()
    {
        java.util.List $r3;
        java.lang.StringBuffer $r1, $r2;
        int $i0;
        com.jidesoft.swing.StyledLabelBuilder r0;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        $r2 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.lang.StringBuffer buffer>;

        $r1 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.lang.StringBuffer buffer>;

        $i0 = virtualinvoke $r1.<java.lang.StringBuffer: int length()>();

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>(0, $i0);

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.List ranges>;

        interfaceinvoke $r3.<java.util.List: void clear()>();

        r0.<com.jidesoft.swing.StyledLabelBuilder: int start> = 0;

        return;
    }

    public com.jidesoft.swing.StyledLabelBuilder register(java.lang.String, java.awt.Color)
    {
        java.awt.Color r3;
        java.util.Map $r4;
        com.jidesoft.swing.StyleRange $r2;
        com.jidesoft.swing.StyledLabelBuilder r0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.awt.Color;

        $r4 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.Map styles>;

        $r2 = new com.jidesoft.swing.StyleRange;

        specialinvoke $r2.<com.jidesoft.swing.StyleRange: void <init>(java.awt.Color)>(r3);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public com.jidesoft.swing.StyledLabelBuilder register(java.lang.String, int)
    {
        java.util.Map $r3;
        com.jidesoft.swing.StyleRange $r2;
        int i0;
        com.jidesoft.swing.StyledLabelBuilder r0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.Map styles>;

        $r2 = new com.jidesoft.swing.StyleRange;

        specialinvoke $r2.<com.jidesoft.swing.StyleRange: void <init>(int)>(i0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public com.jidesoft.swing.StyledLabelBuilder register(java.lang.String, int, java.awt.Color)
    {
        java.awt.Color r3;
        java.util.Map $r4;
        com.jidesoft.swing.StyleRange $r2;
        int i0;
        com.jidesoft.swing.StyledLabelBuilder r0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r3 := @parameter2: java.awt.Color;

        $r4 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.Map styles>;

        $r2 = new com.jidesoft.swing.StyleRange;

        specialinvoke $r2.<com.jidesoft.swing.StyleRange: void <init>(int,java.awt.Color)>(i0, r3);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public com.jidesoft.swing.StyledLabelBuilder register(java.lang.String, int, java.awt.Color, int)
    {
        java.awt.Color r4;
        java.util.Map $r3;
        com.jidesoft.swing.StyleRange $r2;
        int $i0, $i1, i2, i3;
        com.jidesoft.swing.StyledLabelBuilder r0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r4 := @parameter2: java.awt.Color;

        i3 := @parameter3: int;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.Map styles>;

        $r2 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r2.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,java.awt.Color,int)>($i0, $i1, i2, r4, i3);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public com.jidesoft.swing.StyledLabelBuilder register(java.lang.String, int, java.awt.Color, int, java.awt.Color)
    {
        java.awt.Color r4, r5;
        java.util.Map $r3;
        com.jidesoft.swing.StyleRange $r2;
        int $i0, $i1, i2, i3;
        com.jidesoft.swing.StyledLabelBuilder r0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r4 := @parameter2: java.awt.Color;

        i3 := @parameter3: int;

        r5 := @parameter4: java.awt.Color;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.Map styles>;

        $r2 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r2.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,java.awt.Color,int,java.awt.Color)>($i0, $i1, i2, r4, i3, r5);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public com.jidesoft.swing.StyledLabelBuilder register(java.lang.String, int, java.awt.Color, int, java.awt.Color, java.awt.Stroke)
    {
        java.awt.Color r4, r5;
        java.awt.Stroke r6;
        java.util.Map $r3;
        com.jidesoft.swing.StyleRange $r2;
        int $i0, $i1, i2, i3;
        com.jidesoft.swing.StyledLabelBuilder r0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r4 := @parameter2: java.awt.Color;

        i3 := @parameter3: int;

        r5 := @parameter4: java.awt.Color;

        r6 := @parameter5: java.awt.Stroke;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.Map styles>;

        $r2 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r2.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,java.awt.Color,int,java.awt.Color,java.awt.Stroke)>($i0, $i1, i2, r4, i3, r5, r6);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public com.jidesoft.swing.StyledLabelBuilder register(java.lang.String, int, java.awt.Color, int, java.awt.Color, java.awt.Stroke, float)
    {
        java.awt.Color r4, r5;
        java.awt.Stroke r6;
        java.util.Map $r3;
        com.jidesoft.swing.StyleRange $r2;
        int $i0, $i1, i2, i3;
        com.jidesoft.swing.StyledLabelBuilder r0;
        float f0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r4 := @parameter2: java.awt.Color;

        i3 := @parameter3: int;

        r5 := @parameter4: java.awt.Color;

        r6 := @parameter5: java.awt.Stroke;

        f0 := @parameter6: float;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.Map styles>;

        $r2 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r2.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,java.awt.Color,int,java.awt.Color,java.awt.Stroke,float)>($i0, $i1, i2, r4, i3, r5, r6, f0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public com.jidesoft.swing.StyledLabelBuilder register(java.lang.String, int, int)
    {
        java.util.Map $r3;
        com.jidesoft.swing.StyleRange $r2;
        int $i0, $i1, i2, i3;
        com.jidesoft.swing.StyledLabelBuilder r0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.Map styles>;

        $r2 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r2.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,int)>($i0, $i1, i2, i3);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public com.jidesoft.swing.StyledLabelBuilder register(java.lang.String, int, int, float)
    {
        java.util.Map $r3;
        com.jidesoft.swing.StyleRange $r2;
        int $i0, $i1, i2, i3;
        com.jidesoft.swing.StyledLabelBuilder r0;
        float f0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r1 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        f0 := @parameter3: float;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.Map styles>;

        $r2 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r2.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,int,float)>($i0, $i1, i2, i3, f0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2);

        return r0;
    }

    public com.jidesoft.swing.StyledLabelBuilder register(java.lang.String, java.lang.String)
    {
        java.awt.Color $r6, $r7, $r8;
        java.util.Map $r9;
        com.jidesoft.swing.StyleRange $r5;
        int $i0, $i1;
        char[] $r1;
        com.jidesoft.swing.StyledLabelBuilder r2;
        java.lang.String r0, r4;
        com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult $r3;

        r2 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>();

        $r3 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult parseStyleAnnotation(char[],int,com.jidesoft.swing.StyledLabelBuilder)>($r1, 0, r2);

        $r9 = r2.<com.jidesoft.swing.StyledLabelBuilder: java.util.Map styles>;

        $r5 = new com.jidesoft.swing.StyleRange;

        $i1 = $r3.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int fontStyle>;

        $r8 = $r3.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color fontColor>;

        $r7 = $r3.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color backgroundColor>;

        $i0 = $r3.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle>;

        $r6 = $r3.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color lineColor>;

        specialinvoke $r5.<com.jidesoft.swing.StyleRange: void <init>(int,java.awt.Color,java.awt.Color,int,java.awt.Color)>($i1, $r8, $r7, $i0, $r6);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r5);

        return r2;
    }

    public com.jidesoft.swing.StyledLabelBuilder add(java.lang.String)
    {
        java.lang.StringBuffer $r2;
        int $i0, $i1, $i2;
        com.jidesoft.swing.StyledLabelBuilder r0;
        java.lang.String r1;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.lang.StringBuffer buffer>;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        r0.<com.jidesoft.swing.StyledLabelBuilder: int start> = $i2;

        return r0;
    }

    public com.jidesoft.swing.StyledLabelBuilder add(java.lang.String, java.awt.Color)
    {
        java.awt.Color r4;
        java.util.List $r3;
        com.jidesoft.swing.StyleRange $r1;
        int $i0, $i1;
        com.jidesoft.swing.StyledLabelBuilder r0, $r5;
        java.lang.String r2;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.awt.Color;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.List ranges>;

        $r1 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        specialinvoke $r1.<com.jidesoft.swing.StyleRange: void <init>(int,int,java.awt.Color)>($i0, $i1, r4);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r5 = virtualinvoke r0.<com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder add(java.lang.String)>(r2);

        return $r5;
    }

    public com.jidesoft.swing.StyledLabelBuilder add(java.lang.String, int)
    {
        java.util.List $r3;
        com.jidesoft.swing.StyleRange $r1;
        int $i0, $i1, i2;
        com.jidesoft.swing.StyledLabelBuilder r0, $r4;
        java.lang.String r2;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r2 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.List ranges>;

        $r1 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        specialinvoke $r1.<com.jidesoft.swing.StyleRange: void <init>(int,int,int)>($i0, $i1, i2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r4 = virtualinvoke r0.<com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder add(java.lang.String)>(r2);

        return $r4;
    }

    public com.jidesoft.swing.StyledLabelBuilder add(java.lang.String, int, java.awt.Color)
    {
        java.awt.Color r4;
        java.util.List $r3;
        com.jidesoft.swing.StyleRange $r1;
        int $i0, $i1, i2;
        com.jidesoft.swing.StyledLabelBuilder r0, $r5;
        java.lang.String r2;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r2 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r4 := @parameter2: java.awt.Color;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.List ranges>;

        $r1 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        specialinvoke $r1.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,java.awt.Color)>($i0, $i1, i2, r4);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r5 = virtualinvoke r0.<com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder add(java.lang.String)>(r2);

        return $r5;
    }

    public com.jidesoft.swing.StyledLabelBuilder add(java.lang.String, int, java.awt.Color, int)
    {
        java.awt.Color r4;
        java.util.List $r3;
        com.jidesoft.swing.StyleRange $r1;
        int $i0, $i1, i2, i3;
        com.jidesoft.swing.StyledLabelBuilder r0, $r5;
        java.lang.String r2;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r2 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r4 := @parameter2: java.awt.Color;

        i3 := @parameter3: int;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.List ranges>;

        $r1 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        specialinvoke $r1.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,java.awt.Color,int)>($i0, $i1, i2, r4, i3);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r5 = virtualinvoke r0.<com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder add(java.lang.String)>(r2);

        return $r5;
    }

    public com.jidesoft.swing.StyledLabelBuilder add(java.lang.String, int, java.awt.Color, int, java.awt.Color)
    {
        java.awt.Color r4, r5;
        java.util.List $r3;
        com.jidesoft.swing.StyleRange $r1;
        int $i0, $i1, i2, i3;
        com.jidesoft.swing.StyledLabelBuilder r0, $r6;
        java.lang.String r2;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r2 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r4 := @parameter2: java.awt.Color;

        i3 := @parameter3: int;

        r5 := @parameter4: java.awt.Color;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.List ranges>;

        $r1 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        specialinvoke $r1.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,java.awt.Color,int,java.awt.Color)>($i0, $i1, i2, r4, i3, r5);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r6 = virtualinvoke r0.<com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder add(java.lang.String)>(r2);

        return $r6;
    }

    public com.jidesoft.swing.StyledLabelBuilder add(java.lang.String, int, java.awt.Color, java.awt.Color, int, java.awt.Color)
    {
        java.awt.Color r4, r5, r6;
        java.util.List $r3;
        com.jidesoft.swing.StyleRange $r1;
        int $i0, $i1, i2, i3;
        com.jidesoft.swing.StyledLabelBuilder r0, $r7;
        java.lang.String r2;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r2 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r4 := @parameter2: java.awt.Color;

        r5 := @parameter3: java.awt.Color;

        i3 := @parameter4: int;

        r6 := @parameter5: java.awt.Color;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.List ranges>;

        $r1 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        specialinvoke $r1.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,java.awt.Color,java.awt.Color,int,java.awt.Color)>($i0, $i1, i2, r4, r5, i3, r6);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r7 = virtualinvoke r0.<com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder add(java.lang.String)>(r2);

        return $r7;
    }

    public com.jidesoft.swing.StyledLabelBuilder add(java.lang.String, int, java.awt.Color, java.awt.Color, int, java.awt.Color, java.awt.Stroke)
    {
        java.awt.Color r4, r5, r6;
        java.awt.Stroke r7;
        java.util.List $r3;
        com.jidesoft.swing.StyleRange $r1;
        int $i0, $i1, i2, i3;
        com.jidesoft.swing.StyledLabelBuilder r0, $r8;
        java.lang.String r2;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r2 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r4 := @parameter2: java.awt.Color;

        r5 := @parameter3: java.awt.Color;

        i3 := @parameter4: int;

        r6 := @parameter5: java.awt.Color;

        r7 := @parameter6: java.awt.Stroke;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.List ranges>;

        $r1 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        specialinvoke $r1.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,java.awt.Color,java.awt.Color,int,java.awt.Color,java.awt.Stroke)>($i0, $i1, i2, r4, r5, i3, r6, r7);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r8 = virtualinvoke r0.<com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder add(java.lang.String)>(r2);

        return $r8;
    }

    public com.jidesoft.swing.StyledLabelBuilder add(java.lang.String, int, java.awt.Color, int, java.awt.Color, java.awt.Stroke, float)
    {
        java.awt.Color r4, r5;
        java.awt.Stroke r6;
        java.util.List $r3;
        com.jidesoft.swing.StyleRange $r1;
        int $i0, $i1, i2, i3;
        com.jidesoft.swing.StyledLabelBuilder r0, $r7;
        float f0;
        java.lang.String r2;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r2 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r4 := @parameter2: java.awt.Color;

        i3 := @parameter3: int;

        r5 := @parameter4: java.awt.Color;

        r6 := @parameter5: java.awt.Stroke;

        f0 := @parameter6: float;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.List ranges>;

        $r1 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        specialinvoke $r1.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,java.awt.Color,int,java.awt.Color,java.awt.Stroke,float)>($i0, $i1, i2, r4, i3, r5, r6, f0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r7 = virtualinvoke r0.<com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder add(java.lang.String)>(r2);

        return $r7;
    }

    public com.jidesoft.swing.StyledLabelBuilder add(java.lang.String, java.lang.String)
    {
        java.awt.Color $r6, $r7, $r12, $r13, $r14;
        java.util.Map $r2;
        int $i0, $i1, $i2, $i3;
        com.jidesoft.swing.StyledLabelBuilder r0, $r9, $r15;
        java.lang.String r1, r5;
        com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult $r11;
        java.awt.Stroke $r8;
        com.jidesoft.swing.StyleRange r4;
        float $f0;
        char[] $r10;
        java.lang.Object $r3;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.Map styles>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (com.jidesoft.swing.StyleRange) $r3;

        if r4 != null goto label1;

        $r10 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $r11 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult parseStyleAnnotation(char[],int,com.jidesoft.swing.StyledLabelBuilder)>($r10, 0, r0);

        $i3 = $r11.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int fontStyle>;

        $r14 = $r11.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color fontColor>;

        $r13 = $r11.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color backgroundColor>;

        $i2 = $r11.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle>;

        $r12 = $r11.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color lineColor>;

        $r15 = virtualinvoke r0.<com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder add(java.lang.String,int,java.awt.Color,java.awt.Color,int,java.awt.Color)>(r5, $i3, $r14, $r13, $i2, $r12);

        return $r15;

     label1:
        $i0 = virtualinvoke r4.<com.jidesoft.swing.StyleRange: int getFontStyle()>();

        $r6 = virtualinvoke r4.<com.jidesoft.swing.StyleRange: java.awt.Color getFontColor()>();

        $i1 = virtualinvoke r4.<com.jidesoft.swing.StyleRange: int getAdditionalStyle()>();

        $r7 = virtualinvoke r4.<com.jidesoft.swing.StyleRange: java.awt.Color getLineColor()>();

        $r8 = virtualinvoke r4.<com.jidesoft.swing.StyleRange: java.awt.Stroke getLineStroke()>();

        $f0 = virtualinvoke r4.<com.jidesoft.swing.StyleRange: float getFontShrinkRatio()>();

        $r9 = virtualinvoke r0.<com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder add(java.lang.String,int,java.awt.Color,int,java.awt.Color,java.awt.Stroke,float)>(r5, $i0, $r6, $i1, $r7, $r8, $f0);

        return $r9;
    }

    public com.jidesoft.swing.StyledLabelBuilder add(java.lang.String, int, int)
    {
        java.util.List $r3;
        com.jidesoft.swing.StyleRange $r1;
        int $i0, $i1, i2, i3;
        com.jidesoft.swing.StyledLabelBuilder r0, $r4;
        java.lang.String r2;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r2 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.List ranges>;

        $r1 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        specialinvoke $r1.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,int)>($i0, $i1, i2, i3);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r4 = virtualinvoke r0.<com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder add(java.lang.String)>(r2);

        return $r4;
    }

    public com.jidesoft.swing.StyledLabelBuilder add(java.lang.String, int, int, float)
    {
        java.util.List $r3;
        com.jidesoft.swing.StyleRange $r1;
        int $i0, $i1, i2, i3;
        com.jidesoft.swing.StyledLabelBuilder r0, $r4;
        float f0;
        java.lang.String r2;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r2 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        f0 := @parameter3: float;

        $r3 = r0.<com.jidesoft.swing.StyledLabelBuilder: java.util.List ranges>;

        $r1 = new com.jidesoft.swing.StyleRange;

        $i0 = r0.<com.jidesoft.swing.StyledLabelBuilder: int start>;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        specialinvoke $r1.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,int,float)>($i0, $i1, i2, i3, f0);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        $r4 = virtualinvoke r0.<com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder add(java.lang.String)>(r2);

        return $r4;
    }

    public com.jidesoft.swing.StyledLabel configure(com.jidesoft.swing.StyledLabel, java.lang.String)
    {
        com.jidesoft.swing.StyledLabelBuilder r2;
        java.lang.String r1;
        com.jidesoft.swing.StyledLabel r0;

        r2 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r0 := @parameter0: com.jidesoft.swing.StyledLabel;

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.jidesoft.swing.StyledLabelBuilder: void setStyledText(com.jidesoft.swing.StyledLabel,java.lang.String,com.jidesoft.swing.StyledLabelBuilder)>(r0, r1, r2);

        return r0;
    }

    public com.jidesoft.swing.StyledLabel configure(com.jidesoft.swing.StyledLabel)
    {
        java.util.List $r4, $r5;
        java.lang.StringBuffer $r2;
        int $i0, i1;
        com.jidesoft.swing.StyleRange $r7;
        com.jidesoft.swing.StyledLabelBuilder r1;
        java.lang.Object $r6;
        java.lang.String $r3;
        com.jidesoft.swing.StyledLabel r0;

        r1 := @this: com.jidesoft.swing.StyledLabelBuilder;

        r0 := @parameter0: com.jidesoft.swing.StyledLabel;

        $r2 = r1.<com.jidesoft.swing.StyledLabelBuilder: java.lang.StringBuffer buffer>;

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<com.jidesoft.swing.StyledLabel: void setText(java.lang.String)>($r3);

        $r4 = r1.<com.jidesoft.swing.StyledLabelBuilder: java.util.List ranges>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r5 = r1.<com.jidesoft.swing.StyledLabelBuilder: java.util.List ranges>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (com.jidesoft.swing.StyleRange) $r6;

        virtualinvoke r0.<com.jidesoft.swing.StyledLabel: void addStyleRange(com.jidesoft.swing.StyleRange)>($r7);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r0;
    }

    public com.jidesoft.swing.StyledLabel createLabel()
    {
        com.jidesoft.swing.StyledLabelBuilder r0;
        com.jidesoft.swing.StyledLabel $r1, $r2;

        r0 := @this: com.jidesoft.swing.StyledLabelBuilder;

        $r1 = new com.jidesoft.swing.StyledLabel;

        specialinvoke $r1.<com.jidesoft.swing.StyledLabel: void <init>()>();

        $r2 = virtualinvoke r0.<com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabel configure(com.jidesoft.swing.StyledLabel)>($r1);

        return $r2;
    }

    public static com.jidesoft.swing.StyledLabel createStyledLabel(java.lang.String)
    {
        java.lang.String r1;
        com.jidesoft.swing.StyledLabel $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new com.jidesoft.swing.StyledLabel;

        specialinvoke $r0.<com.jidesoft.swing.StyledLabel: void <init>()>();

        staticinvoke <com.jidesoft.swing.StyledLabelBuilder: void setStyledText(com.jidesoft.swing.StyledLabel,java.lang.String)>($r0, r1);

        return $r0;
    }

    public static void setStyledText(com.jidesoft.swing.StyledLabel, java.lang.String)
    {
        char[] $r2;
        java.lang.String r1;
        com.jidesoft.swing.StyledLabel r0;

        r0 := @parameter0: com.jidesoft.swing.StyledLabel;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        staticinvoke <com.jidesoft.swing.StyledLabelBuilder: void setStyledText(com.jidesoft.swing.StyledLabel,char[])>(r0, $r2);

        return;
    }

    private static void setStyledText(com.jidesoft.swing.StyledLabel, java.lang.String, com.jidesoft.swing.StyledLabelBuilder)
    {
        char[] $r2;
        com.jidesoft.swing.StyledLabelBuilder r3;
        java.lang.String r1;
        com.jidesoft.swing.StyledLabel r0;

        r0 := @parameter0: com.jidesoft.swing.StyledLabel;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: com.jidesoft.swing.StyledLabelBuilder;

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        staticinvoke <com.jidesoft.swing.StyledLabelBuilder: void setStyledText(com.jidesoft.swing.StyledLabel,char[],com.jidesoft.swing.StyledLabelBuilder)>(r0, $r2, r3);

        return;
    }

    public static void setStyledText(com.jidesoft.swing.StyledLabel, char[])
    {
        char[] r1;
        com.jidesoft.swing.StyledLabel r0;

        r0 := @parameter0: com.jidesoft.swing.StyledLabel;

        r1 := @parameter1: char[];

        staticinvoke <com.jidesoft.swing.StyledLabelBuilder: void setStyledText(com.jidesoft.swing.StyledLabel,char[],com.jidesoft.swing.StyledLabelBuilder)>(r0, r1, null);

        return;
    }

    private static void setStyledText(com.jidesoft.swing.StyledLabel, char[], com.jidesoft.swing.StyledLabelBuilder)
    {
        java.awt.Color $r10, $r11, $r12;
        com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult $r5;
        boolean $z0, z1;
        com.jidesoft.swing.StyleRange $r14;
        java.lang.StringBuffer $r13;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i14, i15, i16, i17, $i18, $i20, $i21;
        com.jidesoft.swing.StyledLabelBuilder r4;
        java.lang.String $r3, $r6, $r7, $r9;
        char $c2, $c10, $c11, $c12, $c13;
        char[] r1;
        com.jidesoft.swing.StyledLabel r2;

        r2 := @parameter0: com.jidesoft.swing.StyledLabel;

        r1 := @parameter1: char[];

        r4 := @parameter2: com.jidesoft.swing.StyledLabelBuilder;

        $r13 = new java.lang.StringBuffer;

        $i0 = lengthof r1;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>(int)>($i0);

        z1 = 0;

        virtualinvoke r2.<com.jidesoft.swing.StyledLabel: void clearStyleRanges()>();

        virtualinvoke r2.<com.jidesoft.swing.StyledLabel: void setLineWrap(boolean)>(0);

        i15 = lengthof r1;

        $i1 = lengthof r1;

        i16 = $i1 - 1;

     label01:
        if i16 < 0 goto label03;

        $c13 = r1[i16];

        $i18 = (int) $c13;

        if $i18 != 64 goto label02;

        $i14 = i16 + 1;

        $z0 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: boolean isGlobalConfiguration(com.jidesoft.swing.StyledLabel,char[],int)>(r2, r1, $i14);

        if $z0 == 0 goto label03;

        i15 = i16;

        goto label03;

     label02:
        $i20 = (int) -1;

        i16 = i16 + $i20;

        goto label01;

     label03:
        i17 = 0;

     label04:
        if i17 >= i15 goto label12;

        if z1 == 0 goto label05;

        $c12 = r1[i17];

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c12);

        z1 = 0;

        goto label11;

     label05:
        $c2 = r1[i17];

        $i21 = (int) $c2;

        lookupswitch($i21)
        {
            case 92: goto label09;
            case 123: goto label06;
            default: goto label10;
        };

     label06:
        $i3 = i17 + 1;

        $r5 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult parseStylePart(char[],int,com.jidesoft.swing.StyledLabelBuilder)>(r1, $i3, r4);

        if $r5 != null goto label07;

        $c10 = r1[i17];

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c10);

        goto label11;

     label07:
        $i4 = virtualinvoke $r13.<java.lang.StringBuffer: int length()>();

        $r6 = $r5.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.lang.String text>;

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r7 = $r5.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.lang.String text>;

        $i5 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i5 <= 0 goto label08;

        $r14 = new com.jidesoft.swing.StyleRange;

        $r9 = $r5.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.lang.String text>;

        $i7 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i9 = $r5.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int fontStyle>;

        $r12 = $r5.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color fontColor>;

        $r11 = $r5.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color backgroundColor>;

        $i8 = $r5.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle>;

        $r10 = $r5.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color lineColor>;

        specialinvoke $r14.<com.jidesoft.swing.StyleRange: void <init>(int,int,int,java.awt.Color,java.awt.Color,int,java.awt.Color)>($i4, $i7, $i9, $r12, $r11, $i8, $r10);

        virtualinvoke r2.<com.jidesoft.swing.StyledLabel: void addStyleRange(com.jidesoft.swing.StyleRange)>($r14);

     label08:
        $i6 = $r5.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int endOffset>;

        i17 = staticinvoke <java.lang.Math: int max(int,int)>(i17, $i6);

        goto label11;

     label09:
        z1 = 1;

        goto label11;

     label10:
        $c11 = r1[i17];

        virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c11);

     label11:
        i17 = i17 + 1;

        goto label04;

     label12:
        $r3 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<com.jidesoft.swing.StyledLabel: void setText(java.lang.String)>($r3);

        return;
    }

    private static boolean isGlobalConfiguration(com.jidesoft.swing.StyledLabel, char[], int)
    {
        java.lang.Integer $r15, $r19, $r25, $r32;
        java.lang.String $r0, $r3, r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r26, $r27, $r28, $r29, $r30, $r31, $r33, $r34;
        java.lang.NumberFormatException $r35, $r36, $r37, $r38;
        char[] r1;
        com.jidesoft.swing.StyledLabel r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String[] $r2, $r6;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, $i20, $i21, $i22, $i23;

        r4 := @parameter0: com.jidesoft.swing.StyledLabel;

        r1 := @parameter1: char[];

        i0 := @parameter2: int;

        $r0 = new java.lang.String;

        $i1 = lengthof r1;

        $i2 = $i1 - i0;

        specialinvoke $r0.<java.lang.String: void <init>(char[],int,int)>(r1, i0, $i2);

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i3 = lengthof $r2;

        if $i3 <= 0 goto label01;

        $r3 = $r2[0];

        if $r3 != null goto label02;

     label01:
        return 0;

     label02:
        i15 = 1;

        i16 = 0;

        i17 = 0;

        i18 = 0;

        i4 = lengthof $r2;

        i19 = 0;

     label03:
        if i19 >= i4 goto label34;

        r5 = $r2[i19];

        $r6 = virtualinvoke r5.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i5 = lengthof $r6;

        if $i5 <= 0 goto label04;

        $r7 = $r6[0];

        if $r7 != null goto label05;

     label04:
        return 0;

     label05:
        $r8 = $r6[0];

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        $r11 = "rows";

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label06;

        $r26 = "row";

        $z1 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z1 != 0 goto label06;

        $r27 = "r";

        $z2 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label26;

     label06:
        $i20 = lengthof $r6;

        if $i20 > 4 goto label07;

        $i6 = lengthof $r6;

        if $i6 >= 1 goto label08;

     label07:
        return 0;

     label08:
        $i7 = lengthof $r6;

        if $i7 < 2 goto label12;

        $r22 = $r6[1];

        $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String trim()>();

        $i13 = virtualinvoke $r23.<java.lang.String: int length()>();

        if $i13 <= 0 goto label12;

     label09:
        $r24 = $r6[1];

        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r24);

        i15 = virtualinvoke $r25.<java.lang.Integer: int intValue()>();

     label10:
        goto label12;

     label11:
        $r38 := @caughtexception;

        return 0;

     label12:
        $i21 = lengthof $r6;

        if $i21 < 3 goto label20;

        $r16 = $r6[2];

        $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String trim()>();

        $i10 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i10 <= 0 goto label20;

     label13:
        $r18 = $r6[2];

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r18);

        $i11 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        i17 = $i11;

     label14:
        goto label16;

     label15:
        $r37 := @caughtexception;

        return 0;

     label16:
        if $i11 > i15 goto label17;

        if $i11 >= 0 goto label20;

     label17:
        $r20 = $r6[1];

        $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String trim()>();

        $i12 = virtualinvoke $r21.<java.lang.String: int length()>();

        if $i12 <= 0 goto label18;

        i17 = 0;

        goto label20;

     label18:
        if $i11 <= i15 goto label19;

        i15 = $i11;

        goto label20;

     label19:
        i17 = 0;

     label20:
        $i22 = lengthof $r6;

        if $i22 < 4 goto label33;

        $r12 = $r6[3];

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String trim()>();

        $i8 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i8 <= 0 goto label33;

     label21:
        $r14 = $r6[3];

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r14);

        $i9 = virtualinvoke $r15.<java.lang.Integer: int intValue()>();

        i16 = $i9;

     label22:
        goto label24;

     label23:
        $r36 := @caughtexception;

        return 0;

     label24:
        if $i9 < i15 goto label25;

        if $i9 >= 0 goto label33;

     label25:
        i16 = 0;

        goto label33;

     label26:
        $r28 = "w";

        $z3 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z3 != 0 goto label27;

        $r33 = "width";

        $z4 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z4 != 0 goto label27;

        $r34 = "preferredwidth";

        $z5 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z5 == 0 goto label32;

     label27:
        $i23 = lengthof $r6;

        if $i23 == 2 goto label28;

        return 0;

     label28:
        $r29 = $r6[1];

        $r30 = virtualinvoke $r29.<java.lang.String: java.lang.String trim()>();

        $i14 = virtualinvoke $r30.<java.lang.String: int length()>();

        if $i14 <= 0 goto label33;

     label29:
        $r31 = $r6[1];

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r31);

        i18 = virtualinvoke $r32.<java.lang.Integer: int intValue()>();

     label30:
        goto label33;

     label31:
        $r35 := @caughtexception;

        return 0;

     label32:
        return 0;

     label33:
        i19 = i19 + 1;

        goto label03;

     label34:
        virtualinvoke r4.<com.jidesoft.swing.StyledLabel: void setLineWrap(boolean)>(1);

        virtualinvoke r4.<com.jidesoft.swing.StyledLabel: void setRows(int)>(i15);

        virtualinvoke r4.<com.jidesoft.swing.StyledLabel: void setMaxRows(int)>(i16);

        virtualinvoke r4.<com.jidesoft.swing.StyledLabel: void setMinRows(int)>(i17);

        virtualinvoke r4.<com.jidesoft.swing.StyledLabel: void setPreferredWidth(int)>(i18);

        if i15 != 1 goto label35;

        if i16 != 1 goto label35;

        if i17 != 1 goto label35;

        virtualinvoke r4.<com.jidesoft.swing.StyledLabel: void setLineWrap(boolean)>(0);

     label35:
        return 1;

        catch java.lang.NumberFormatException from label09 to label10 with label11;
        catch java.lang.NumberFormatException from label13 to label14 with label15;
        catch java.lang.NumberFormatException from label21 to label22 with label23;
        catch java.lang.NumberFormatException from label29 to label30 with label31;
    }

    public static java.lang.String parseToVoidStyledTextConfusion(java.lang.String)
    {
        java.lang.String r0, $r1, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\", "\\\\\\\\");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\{", "\\\\{");

        return $r2;
    }

    private static com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult parseStylePart(char[], int, com.jidesoft.swing.StyledLabelBuilder)
    {
        int i0, $i1, $i2, $i3, $i4;
        char[] r1;
        com.jidesoft.swing.StyledLabelBuilder r3;
        java.lang.String $r2;
        com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult $r0, $r4;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        r3 := @parameter2: com.jidesoft.swing.StyledLabelBuilder;

        $r0 = new com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult;

        specialinvoke $r0.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: void <init>(com.jidesoft.swing.StyledLabelBuilder$1)>(null);

        $i1 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: int findNext(char[],char,int)>(r1, 58, i0);

        $i2 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: int findMatchingBracket(char[],int)>(r1, i0);

        if $i1 < 0 goto label1;

        if $i1 <= $i2 goto label2;

     label1:
        return null;

     label2:
        $i3 = $i1 - 1;

        $r2 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: java.lang.String createTrimmedString(char[],int,int)>(r1, i0, $i3);

        $r0.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.lang.String text> = $r2;

        $i4 = $i1 + 1;

        $r4 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult parseStyleAnnotation(char[],int,com.jidesoft.swing.StyledLabelBuilder,com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult)>(r1, $i4, r3, $r0);

        return $r4;
    }

    private static int findMatchingBracket(char[], int)
    {
        char c4;
        int $i0, $i1, $i2, i3, i5, i6, i7, $i9, $i11, $i12, $i13, $i15, $i17;
        char[] r0;

        r0 := @parameter0: char[];

        i5 := @parameter1: int;

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $i9 = (int) -1;

        return $i9;

     label1:
        $i1 = lengthof r0;

        if i5 < $i1 goto label2;

        $i11 = (int) -1;

        return $i11;

     label2:
        i6 = 1;

        $i2 = lengthof r0;

        i3 = $i2 - i5;

        i7 = 0;

     label3:
        if i7 >= i3 goto label6;

        c4 = r0[i5];

        $i12 = (int) c4;

        if $i12 != 123 goto label4;

        i6 = i6 + 1;

        goto label5;

     label4:
        $i13 = (int) c4;

        if $i13 != 125 goto label5;

        $i15 = (int) -1;

        i6 = i6 + $i15;

        if i6 != 0 goto label5;

        return i5;

     label5:
        i7 = i7 + 1;

        i5 = i5 + 1;

        goto label3;

     label6:
        $i17 = (int) -1;

        return $i17;
    }

    private static com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult parseStyleAnnotation(char[], int, com.jidesoft.swing.StyledLabelBuilder)
    {
        int i0;
        char[] r1;
        com.jidesoft.swing.StyledLabelBuilder r2;
        com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult $r0, $r3;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        r2 := @parameter2: com.jidesoft.swing.StyledLabelBuilder;

        $r0 = new com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult;

        specialinvoke $r0.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: void <init>(com.jidesoft.swing.StyledLabelBuilder$1)>(null);

        $r3 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult parseStyleAnnotation(char[],int,com.jidesoft.swing.StyledLabelBuilder,com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult)>(r1, i0, r2, $r0);

        return $r3;
    }

    private static com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult parseStyleAnnotation(char[], int, com.jidesoft.swing.StyledLabelBuilder, com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult)
    {
        java.awt.Color $r8, $r9, $r10, $r12, $r13, $r14;
        java.util.Map $r5, $r6;
        com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult r2;
        com.jidesoft.swing.StyleRange r18;
        java.lang.String $r3, $r11, $r15, r16, r17;
        char[] $r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, z23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i25, $i26, $i27, $i28, $i29, $i30, $i32, $i33, i35, i36, i37, $i38, $i41, $i42, $i44, $i46, $i47, $i48, $i49, $i50;
        com.jidesoft.swing.StyledLabelBuilder r4;
        char $c23, $c24, $c31, $c34, $c39;
        java.lang.Object $r7;

        r1 := @parameter0: char[];

        i35 := @parameter1: int;

        r4 := @parameter2: com.jidesoft.swing.StyledLabelBuilder;

        r2 := @parameter3: com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult;

        i36 = i35;

        $r0 = newarray (char)[2];

        $r0[0] = 44;

        $r0[1] = 125;

        z23 = 0;

     label01:
        $i0 = lengthof r1;

        if i36 >= $i0 goto label36;

        if z23 != 0 goto label36;

        $i2 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: int findNextOf(char[],char[],int)>(r1, $r0, i36);

        i37 = $i2;

        $i41 = (int) -1;

        if $i2 == $i41 goto label02;

        $c34 = r1[$i2];

        $i42 = (int) $c34;

        if $i42 != 125 goto label03;

     label02:
        z23 = 1;

     label03:
        $i33 = i36;

        $i44 = (int) -1;

        if $i2 != $i44 goto label04;

        $i32 = lengthof r1;

        $i38 = $i32 - 1;

        goto label05;

     label04:
        $i38 = $i2 - 1;

     label05:
        $r3 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: java.lang.String createTrimmedString(char[],int,int)>(r1, $i33, $i38);

        r16 = $r3;

        $i3 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(58);

        $i46 = (int) -1;

        if $i3 == $i46 goto label11;

        $i21 = $i3 + 1;

        $r11 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i21);

        r17 = $r11;

        $i22 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i22 <= 1 goto label10;

        $c23 = virtualinvoke $r11.<java.lang.String: char charAt(int)>(0);

        $i47 = (int) $c23;

        if $i47 != 40 goto label07;

        $i25 = i36 + $i3;

        $i26 = $i25 + 1;

        $i27 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: int findNext(char[],char,int)>(r1, 41, $i26);

        $i28 = $i27 + 1;

        $r15 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: java.lang.String createTrimmedString(char[],int,int)>(r1, i36, $i28);

        r16 = $r15;

        $i29 = $i3 + 1;

        r17 = virtualinvoke $r15.<java.lang.String: java.lang.String substring(int)>($i29);

        $i30 = $i27 + 1;

        $c31 = r1[$i30];

        $i48 = (int) $c31;

        if $i48 != 125 goto label06;

        z23 = 1;

     label06:
        i37 = $i27 + 1;

     label07:
        $c39 = virtualinvoke r16.<java.lang.String: char charAt(int)>(0);

        $i49 = (int) $c39;

        if $i49 != 102 goto label08;

        $r14 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: java.awt.Color toColor(java.lang.String)>(r17);

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color fontColor> = $r14;

        goto label10;

     label08:
        $c24 = virtualinvoke r16.<java.lang.String: char charAt(int)>(0);

        $i50 = (int) $c24;

        if $i50 != 98 goto label09;

        $r13 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: java.awt.Color toColor(java.lang.String)>(r17);

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color backgroundColor> = $r13;

        goto label10;

     label09:
        $r12 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: java.awt.Color toColor(java.lang.String)>(r17);

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color lineColor> = $r12;

     label10:
        goto label35;

     label11:
        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("plain");

        if $z0 != 0 goto label12;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("p");

        if $z1 == 0 goto label13;

     label12:
        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int fontStyle> = 0;

        goto label35;

     label13:
        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("bold");

        if $z2 != 0 goto label14;

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("b");

        if $z3 == 0 goto label15;

     label14:
        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int fontStyle> = 1;

        goto label35;

     label15:
        $z4 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("italic");

        if $z4 != 0 goto label16;

        $z5 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("i");

        if $z5 == 0 goto label17;

     label16:
        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int fontStyle> = 2;

        goto label35;

     label17:
        $z6 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("bolditalic");

        if $z6 != 0 goto label18;

        $z7 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("bi");

        if $z7 == 0 goto label19;

     label18:
        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int fontStyle> = 3;

        goto label35;

     label19:
        $z8 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("strike");

        if $z8 != 0 goto label20;

        $z9 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("s");

        if $z9 == 0 goto label21;

     label20:
        $i4 = r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle>;

        $i5 = $i4 | 1;

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle> = $i5;

        goto label35;

     label21:
        $z10 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("doublestrike");

        if $z10 != 0 goto label22;

        $z11 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("ds");

        if $z11 == 0 goto label23;

     label22:
        $i6 = r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle>;

        $i7 = $i6 | 2;

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle> = $i7;

        goto label35;

     label23:
        $z12 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("waved");

        if $z12 != 0 goto label24;

        $z13 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("w");

        if $z13 == 0 goto label25;

     label24:
        $i8 = r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle>;

        $i9 = $i8 | 4;

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle> = $i9;

        goto label35;

     label25:
        $z14 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("underlined");

        if $z14 != 0 goto label26;

        $z15 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("u");

        if $z15 == 0 goto label27;

     label26:
        $i10 = r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle>;

        $i11 = $i10 | 8;

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle> = $i11;

        goto label35;

     label27:
        $z16 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("dotted");

        if $z16 != 0 goto label28;

        $z17 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("d");

        if $z17 == 0 goto label29;

     label28:
        $i12 = r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle>;

        $i13 = $i12 | 16;

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle> = $i13;

        goto label35;

     label29:
        $z18 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("superscript");

        if $z18 != 0 goto label30;

        $z19 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("sp");

        if $z19 == 0 goto label31;

     label30:
        $i14 = r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle>;

        $i15 = $i14 | 32;

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle> = $i15;

        goto label35;

     label31:
        $z20 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("subscript");

        if $z20 != 0 goto label32;

        $z21 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("sb");

        if $z21 == 0 goto label33;

     label32:
        $i16 = r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle>;

        $i17 = $i16 | 64;

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle> = $i17;

        goto label35;

     label33:
        if r4 == null goto label34;

        $r5 = r4.<com.jidesoft.swing.StyledLabelBuilder: java.util.Map styles>;

        $z22 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z22 == 0 goto label34;

        $r6 = r4.<com.jidesoft.swing.StyledLabelBuilder: java.util.Map styles>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r18 = (com.jidesoft.swing.StyleRange) $r7;

        $i19 = virtualinvoke r18.<com.jidesoft.swing.StyleRange: int getFontStyle()>();

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int fontStyle> = $i19;

        $r8 = virtualinvoke r18.<com.jidesoft.swing.StyleRange: java.awt.Color getFontColor()>();

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color fontColor> = $r8;

        $r9 = virtualinvoke r18.<com.jidesoft.swing.StyleRange: java.awt.Color getBackgroundColor()>();

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color backgroundColor> = $r9;

        $i20 = virtualinvoke r18.<com.jidesoft.swing.StyleRange: int getAdditionalStyle()>();

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int additionalStyle> = $i20;

        $r10 = virtualinvoke r18.<com.jidesoft.swing.StyleRange: java.awt.Color getLineColor()>();

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: java.awt.Color lineColor> = $r10;

        goto label35;

     label34:
        $i18 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i18 <= 0 goto label35;

     label35:
        i36 = i37 + 1;

        goto label01;

     label36:
        $i1 = i36 - 1;

        r2.<com.jidesoft.swing.StyledLabelBuilder$ParsedStyleResult: int endOffset> = $i1;

        return r2;
    }

    private static java.awt.Color toColor(java.lang.String)
    {
        java.awt.Color $r9, $r10, $r11, $r12, $r13;
        java.util.Map $r7;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i15, $i17, $i18;
        java.lang.String r0, $r2, $r5;
        char $c0, $c12, $c14, $c16;
        java.lang.Object $r8;

        r0 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i18 = (int) $c0;

        lookupswitch($i18)
        {
            case 35: goto label2;
            case 40: goto label1;
            case 48: goto label4;
            default: goto label5;
        };

     label1:
        $i2 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: int nextColorInt(java.lang.String,int)>(r0, 1);

        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(44);

        $i4 = $i3 + 1;

        $i5 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: int nextColorInt(java.lang.String,int)>(r0, $i4);

        $i6 = $i3 + 1;

        $i7 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(44, $i6);

        $i8 = $i7 + 1;

        $i9 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: int nextColorInt(java.lang.String,int)>(r0, $i8);

        $r10 = new java.awt.Color;

        specialinvoke $r10.<java.awt.Color: void <init>(int,int,int)>($i2, $i5, $i9);

        return $r10;

     label2:
        $i10 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i10 != 4 goto label3;

        $r11 = new java.awt.Color;

        $c12 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

        $i13 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: int getShorthandValue(char)>($c12);

        $c14 = virtualinvoke r0.<java.lang.String: char charAt(int)>(2);

        $i15 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: int getShorthandValue(char)>($c14);

        $c16 = virtualinvoke r0.<java.lang.String: char charAt(int)>(3);

        $i17 = staticinvoke <com.jidesoft.swing.StyledLabelBuilder: int getShorthandValue(char)>($c16);

        specialinvoke $r11.<java.awt.Color: void <init>(int,int,int)>($i13, $i15, $i17);

        return $r11;

     label3:
        $r12 = new java.awt.Color;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(1);

        $i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r5, 16);

        specialinvoke $r12.<java.awt.Color: void <init>(int)>($i11);

        return $r12;

     label4:
        $r13 = new java.awt.Color;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(2);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r2, 16);

        specialinvoke $r13.<java.awt.Color: void <init>(int)>($i1);

        return $r13;

     label5:
        $r7 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r9 = (java.awt.Color) $r8;

        return $r9;
    }

    private static int nextColorInt(java.lang.String, int)
    {
        char $c1, $c2;
        int $i0, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i0 goto label3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        $i7 = (int) $c2;

        if 48 > $i7 goto label2;

        $i8 = (int) $c2;

        if $i8 > 57 goto label2;

        goto label3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        i4 = i3;

     label4:
        $i5 = i3 + 3;

        if i4 >= $i5 goto label6;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $i9 = (int) $c1;

        if $i9 < 48 goto label6;

        $i10 = (int) $c1;

        if 57 >= $i10 goto label5;

        goto label6;

     label5:
        i4 = i4 + 1;

        goto label4;

     label6:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, i4);

        $i6 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        return $i6;
    }

    private static int getShorthandValue(char)
    {
        char $c0, c6;
        int[] $r0, $r1;
        int $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9, $i10;

        c6 := @parameter0: char;

        $c0 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c6);

        $i7 = (int) $c0;

        if 65 > $i7 goto label1;

        $i8 = (int) $c0;

        if $i8 > 70 goto label1;

        $r1 = <com.jidesoft.swing.StyledLabelBuilder: int[] colorShorthandTable>;

        $i9 = (int) $c0;

        $i3 = $i9 - 65;

        $i4 = $i3 + 10;

        $i5 = $r1[$i4];

        return $i5;

     label1:
        $r0 = <com.jidesoft.swing.StyledLabelBuilder: int[] colorShorthandTable>;

        $i10 = (int) $c0;

        $i1 = $i10 - 48;

        $i2 = $r0[$i1];

        return $i2;
    }

    public static java.util.Map getColorNamesMap()
    {
        java.util.Map $r0;

        $r0 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        return $r0;
    }

    private static java.lang.String createTrimmedString(char[], int, int)
    {
        java.lang.StringBuffer $r3;
        int $i1, $i2, i7, i8, i10, $i11, $i12, $i13, $i14, $i16, $i17;
        java.lang.String $r2;
        boolean z0, z1, z2;
        char $c0, $c3, $c4, $c5, $c6, $c9;
        char[] r0;

        r0 := @parameter0: char[];

        i7 := @parameter1: int;

        i8 := @parameter2: int;

     label01:
        $c0 = r0[i7];

        $i11 = (int) $c0;

        if $i11 == 32 goto label02;

        $c6 = r0[i7];

        $i12 = (int) $c6;

        if $i12 != 9 goto label03;

     label02:
        $i1 = lengthof r0;

        if i7 >= $i1 goto label03;

        i7 = i7 + 1;

        goto label01;

     label03:
        $c9 = r0[i8];

        $i13 = (int) $c9;

        if $i13 == 32 goto label04;

        $c5 = r0[i8];

        $i14 = (int) $c5;

        if $i14 != 9 goto label05;

     label04:
        if i7 >= i8 goto label05;

        $i16 = (int) -1;

        i8 = i8 + $i16;

        goto label03;

     label05:
        if i8 < i7 goto label10;

        $r3 = new java.lang.StringBuffer;

        $i2 = i8 - i7;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>(int)>($i2);

        z0 = 0;

        z2 = 0;

        z1 = 0;

        i10 = i7;

     label06:
        if i10 > i8 goto label09;

        $c3 = r0[i10];

        $i17 = (int) $c3;

        if $i17 != 92 goto label07;

        if z1 != 0 goto label07;

        z0 = 1;

        z2 = 1;

        z1 = 1;

        goto label08;

     label07:
        $c4 = r0[i10];

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        if z2 == 0 goto label08;

        z0 = 0;

        z2 = 0;

        z1 = 0;

     label08:
        i10 = i10 + 1;

        goto label06;

     label09:
        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;

     label10:
        return "";
    }

    private static int findNextOf(char[], char[], int)
    {
        char $c2, c4, $c5;
        int i0, $i1, i3, i6, i7, $i8, $i9, $i10, $i12;
        char[] r0, r1;
        boolean z0;

        r0 := @parameter0: char[];

        r1 := @parameter1: char[];

        i0 := @parameter2: int;

        z0 = 0;

        i6 = i0;

     label1:
        $i1 = lengthof r0;

        if i6 >= $i1 goto label7;

        if z0 == 0 goto label2;

        z0 = 0;

        goto label6;

     label2:
        $c2 = r0[i6];

        $i8 = (int) $c2;

        if $i8 != 92 goto label3;

        z0 = 1;

        goto label6;

     label3:
        i3 = lengthof r1;

        i7 = 0;

     label4:
        if i7 >= i3 goto label6;

        c4 = r1[i7];

        $c5 = r0[i6];

        $i9 = (int) $c5;

        $i10 = (int) c4;

        if $i9 != $i10 goto label5;

        return i6;

     label5:
        i7 = i7 + 1;

        goto label4;

     label6:
        i6 = i6 + 1;

        goto label1;

     label7:
        $i12 = (int) -1;

        return $i12;
    }

    private static int findNext(char[], char, int)
    {
        char $c2, c3, $c4;
        int i0, $i1, i5, $i6, $i7, $i8, $i10;
        char[] r0;
        boolean z0;

        r0 := @parameter0: char[];

        c3 := @parameter1: char;

        i0 := @parameter2: int;

        z0 = 0;

        i5 = i0;

     label1:
        $i1 = lengthof r0;

        if i5 >= $i1 goto label5;

        if z0 == 0 goto label2;

        z0 = 0;

        goto label4;

     label2:
        $c2 = r0[i5];

        $i6 = (int) $c2;

        if $i6 != 92 goto label3;

        z0 = 1;

        goto label4;

     label3:
        $c4 = r0[i5];

        $i7 = (int) $c4;

        $i8 = (int) c3;

        if $i7 != $i8 goto label4;

        return i5;

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        $i10 = (int) -1;

        return $i10;
    }

    static void <clinit>()
    {
        java.awt.Color $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41;
        int[] $r0;
        java.util.Map $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27;
        int $i1, $i3;
        java.util.TreeMap $r28;

        $r0 = newarray (int)[16];

        $r0[0] = 0;

        $r0[1] = 17;

        $r0[2] = 34;

        $r0[3] = 51;

        $r0[4] = 68;

        $r0[5] = 85;

        $r0[6] = 102;

        $r0[7] = 119;

        $r0[8] = 136;

        $r0[9] = 153;

        $r0[10] = 170;

        $r0[11] = 187;

        $r0[12] = 204;

        $r0[13] = 221;

        $r0[14] = 238;

        $r0[15] = 255;

        <com.jidesoft.swing.StyledLabelBuilder: int[] colorShorthandTable> = $r0;

        $r28 = new java.util.TreeMap;

        specialinvoke $r28.<java.util.TreeMap: void <init>()>();

        <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap> = $r28;

        $r3 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        $r29 = new java.awt.Color;

        specialinvoke $r29.<java.awt.Color: void <init>(int)>(16777215);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("white", $r29);

        $r5 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        $r30 = new java.awt.Color;

        specialinvoke $r30.<java.awt.Color: void <init>(int)>(12632256);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("lightGray", $r30);

        $r7 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        $r31 = new java.awt.Color;

        specialinvoke $r31.<java.awt.Color: void <init>(int)>(8421504);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("gray", $r31);

        $r9 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        $r32 = new java.awt.Color;

        specialinvoke $r32.<java.awt.Color: void <init>(int)>(4210752);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("darkGray", $r32);

        $r11 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        $r33 = new java.awt.Color;

        specialinvoke $r33.<java.awt.Color: void <init>(int)>(0);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("black", $r33);

        $r13 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        $r34 = new java.awt.Color;

        specialinvoke $r34.<java.awt.Color: void <init>(int)>(16711680);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("red", $r34);

        $r15 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        $r35 = new java.awt.Color;

        specialinvoke $r35.<java.awt.Color: void <init>(int)>(16756655);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("pink", $r35);

        $r17 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        $r36 = new java.awt.Color;

        specialinvoke $r36.<java.awt.Color: void <init>(int)>(16762880);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("orange", $r36);

        $r19 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        $r37 = new java.awt.Color;

        specialinvoke $r37.<java.awt.Color: void <init>(int)>(16776960);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("yellow", $r37);

        $r21 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        $r38 = new java.awt.Color;

        $i1 = (int) 65280;

        specialinvoke $r38.<java.awt.Color: void <init>(int)>($i1);

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("green", $r38);

        $r23 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        $r39 = new java.awt.Color;

        specialinvoke $r39.<java.awt.Color: void <init>(int)>(16711935);

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("magenta", $r39);

        $r25 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        $r40 = new java.awt.Color;

        $i3 = (int) 65535;

        specialinvoke $r40.<java.awt.Color: void <init>(int)>($i3);

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("cyan", $r40);

        $r27 = <com.jidesoft.swing.StyledLabelBuilder: java.util.Map colorNamesMap>;

        $r41 = new java.awt.Color;

        specialinvoke $r41.<java.awt.Color: void <init>(int)>(255);

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("blue", $r41);

        return;
    }
}
