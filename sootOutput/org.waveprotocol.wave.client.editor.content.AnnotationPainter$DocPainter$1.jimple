class org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$1 extends java.lang.Object implements org.waveprotocol.wave.client.scheduler.Scheduler$IncrementalTask
{
    final org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter this$0;

    void <init>(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter)
    {
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter r1;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$1 r0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$1;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter;

        r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$1: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean execute()
    {
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter $r1;
        org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$1 r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$1;

        $r1 = r0.<org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter$1: org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter this$0>;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter: boolean access$000(org.waveprotocol.wave.client.editor.content.AnnotationPainter$DocPainter,int)>($r1, 80);

        return $z0;
    }
}
