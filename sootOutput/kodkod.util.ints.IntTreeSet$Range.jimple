final class kodkod.util.ints.IntTreeSet$Range extends kodkod.util.ints.IntTree$Node implements java.lang.Cloneable
{
    private int min;

    void <init>(int, int)
    {
        kodkod.util.ints.IntTreeSet$Range r0;
        int i0, i1;

        r0 := @this: kodkod.util.ints.IntTreeSet$Range;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        specialinvoke r0.<kodkod.util.ints.IntTree$Node: void <init>(int)>(i0);

        r0.<kodkod.util.ints.IntTreeSet$Range: int min> = i1;

        return;
    }

    protected kodkod.util.ints.IntTreeSet$Range clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.IntTreeSet$Range r0, $r2;
        kodkod.util.ints.IntTree$Node $r1;

        r0 := @this: kodkod.util.ints.IntTreeSet$Range;

        $r1 = specialinvoke r0.<kodkod.util.ints.IntTree$Node: kodkod.util.ints.IntTree$Node clone()>();

        $r2 = (kodkod.util.ints.IntTreeSet$Range) $r1;

        return $r2;
    }

    protected volatile kodkod.util.ints.IntTree$Node clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.IntTreeSet$Range r0, $r1;
        kodkod.util.ints.IntTree$Node $r2;

        r0 := @this: kodkod.util.ints.IntTreeSet$Range;

        $r1 = virtualinvoke r0.<kodkod.util.ints.IntTreeSet$Range: kodkod.util.ints.IntTreeSet$Range clone()>();

        $r2 = (kodkod.util.ints.IntTree$Node) $r1;

        return $r2;
    }

    static int access$1(kodkod.util.ints.IntTreeSet$Range)
    {
        kodkod.util.ints.IntTreeSet$Range r0;
        int $i0;

        r0 := @parameter0: kodkod.util.ints.IntTreeSet$Range;

        $i0 = r0.<kodkod.util.ints.IntTreeSet$Range: int min>;

        return $i0;
    }

    static void access$2(kodkod.util.ints.IntTreeSet$Range, int)
    {
        kodkod.util.ints.IntTreeSet$Range r0;
        int i0;

        r0 := @parameter0: kodkod.util.ints.IntTreeSet$Range;

        i0 := @parameter1: int;

        r0.<kodkod.util.ints.IntTreeSet$Range: int min> = i0;

        return;
    }
}
