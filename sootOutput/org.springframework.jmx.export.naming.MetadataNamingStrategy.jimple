public class org.springframework.jmx.export.naming.MetadataNamingStrategy extends java.lang.Object implements org.springframework.jmx.export.naming.ObjectNamingStrategy, org.springframework.beans.factory.InitializingBean
{
    private org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource;
    private java.lang.String defaultDomain;

    public void <init>()
    {
        org.springframework.jmx.export.naming.MetadataNamingStrategy r0;

        r0 := @this: org.springframework.jmx.export.naming.MetadataNamingStrategy;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.springframework.jmx.export.metadata.JmxAttributeSource)
    {
        org.springframework.jmx.export.metadata.JmxAttributeSource r1;
        org.springframework.jmx.export.naming.MetadataNamingStrategy r0;

        r0 := @this: org.springframework.jmx.export.naming.MetadataNamingStrategy;

        r1 := @parameter0: org.springframework.jmx.export.metadata.JmxAttributeSource;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "JmxAttributeSource must not be null");

        r0.<org.springframework.jmx.export.naming.MetadataNamingStrategy: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource> = r1;

        return;
    }

    public void setAttributeSource(org.springframework.jmx.export.metadata.JmxAttributeSource)
    {
        org.springframework.jmx.export.metadata.JmxAttributeSource r0;
        org.springframework.jmx.export.naming.MetadataNamingStrategy r1;

        r1 := @this: org.springframework.jmx.export.naming.MetadataNamingStrategy;

        r0 := @parameter0: org.springframework.jmx.export.metadata.JmxAttributeSource;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "JmxAttributeSource must not be null");

        r1.<org.springframework.jmx.export.naming.MetadataNamingStrategy: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource> = r0;

        return;
    }

    public void setDefaultDomain(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.jmx.export.naming.MetadataNamingStrategy r0;

        r0 := @this: org.springframework.jmx.export.naming.MetadataNamingStrategy;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.jmx.export.naming.MetadataNamingStrategy: java.lang.String defaultDomain> = r1;

        return;
    }

    public void afterPropertiesSet()
    {
        org.springframework.jmx.export.metadata.JmxAttributeSource $r1;
        java.lang.IllegalArgumentException $r2;
        org.springframework.jmx.export.naming.MetadataNamingStrategy r0;

        r0 := @this: org.springframework.jmx.export.naming.MetadataNamingStrategy;

        $r1 = r0.<org.springframework.jmx.export.naming.MetadataNamingStrategy: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'attributeSource\' is required");

        throw $r2;

     label1:
        return;
    }

    public javax.management.ObjectName getObjectName(java.lang.Object, java.lang.String) throws javax.management.MalformedObjectNameException
    {
        org.springframework.jmx.export.metadata.ManagedResource $r4;
        org.springframework.jmx.export.naming.MetadataNamingStrategy r2;
        java.lang.String r5, $r7, $r8, $r12, r14;
        java.util.Hashtable $r11;
        boolean $z0;
        javax.management.ObjectName $r6, $r9, $r13;
        javax.management.MalformedObjectNameException $r10;
        org.springframework.jmx.export.metadata.JmxAttributeSource $r3;
        java.lang.Object r0;
        java.lang.Class $r1;

        r2 := @this: org.springframework.jmx.export.naming.MetadataNamingStrategy;

        r0 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.springframework.aop.support.AopUtils: java.lang.Class getTargetClass(java.lang.Object)>(r0);

        $r3 = r2.<org.springframework.jmx.export.naming.MetadataNamingStrategy: org.springframework.jmx.export.metadata.JmxAttributeSource attributeSource>;

        $r4 = interfaceinvoke $r3.<org.springframework.jmx.export.metadata.JmxAttributeSource: org.springframework.jmx.export.metadata.ManagedResource getManagedResource(java.lang.Class)>($r1);

        if $r4 == null goto label1;

        $r7 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: java.lang.String getObjectName()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r7);

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke $r4.<org.springframework.jmx.export.metadata.ManagedResource: java.lang.String getObjectName()>();

        $r9 = staticinvoke <org.springframework.jmx.support.ObjectNameManager: javax.management.ObjectName getInstance(java.lang.String)>($r8);

        return $r9;

     label1:
        $r6 = staticinvoke <org.springframework.jmx.support.ObjectNameManager: javax.management.ObjectName getInstance(java.lang.String)>(r5);

     label2:
        return $r6;

     label3:
        $r10 := @caughtexception;

        r14 = r2.<org.springframework.jmx.export.naming.MetadataNamingStrategy: java.lang.String defaultDomain>;

        if r14 != null goto label4;

        r14 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getPackageName(java.lang.Class)>($r1);

     label4:
        $r11 = new java.util.Hashtable;

        specialinvoke $r11.<java.util.Hashtable: void <init>()>();

        $r12 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>($r1);

        virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("type", $r12);

        virtualinvoke $r11.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("name", r5);

        $r13 = staticinvoke <org.springframework.jmx.support.ObjectNameManager: javax.management.ObjectName getInstance(java.lang.String,java.util.Hashtable)>(r14, $r11);

        return $r13;

        catch javax.management.MalformedObjectNameException from label1 to label2 with label3;
    }
}
