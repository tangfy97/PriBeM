public class ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider extends ucar.nc2.iosp.AbstractIOServiceProvider
{
    private static org.slf4j.Logger logger;
    private static final int MISSING_INT;
    private static final float MISSING_FLOAT;
    private ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan;
    private double radarRadius;
    private ucar.nc2.Variable v0;
    private ucar.nc2.Variable v1;
    private ucar.nc2.units.DateFormatter formatter;

    public void <init>()
    {
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r0;
        ucar.nc2.units.DateFormatter $r1;

        r0 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        specialinvoke r0.<ucar.nc2.iosp.AbstractIOServiceProvider: void <init>()>();

        $r1 = new ucar.nc2.units.DateFormatter;

        specialinvoke $r1.<ucar.nc2.units.DateFormatter: void <init>()>();

        r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.units.DateFormatter formatter> = $r1;

        return;
    }

    public boolean isValidFile(ucar.unidata.io.RandomAccessFile) throws java.io.IOException
    {
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r3;
        byte[] r4;
        ucar.unidata.io.RandomAccessFile r0;
        java.io.IOException $r2;
        java.lang.String $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r3 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        r0 := @parameter0: ucar.unidata.io.RandomAccessFile;

     label1:
        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: void seek(long)>(0L);

        r4 = newarray (byte)[8];

        virtualinvoke r0.<ucar.unidata.io.RandomAccessFile: int read(byte[])>(r4);

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(byte[])>(r4);

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("ARCHIVE2");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("AR2V0001");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("AR2V0003");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("AR2V0004");

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("AR2V0002");

        if $z4 != 0 goto label2;

        $z5 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("AR2V0006");

        if $z5 == 0 goto label3;

     label2:
        $z6 = 1;

        goto label4;

     label3:
        $z6 = 0;

     label4:
        return $z6;

     label5:
        $r2 := @caughtexception;

        return 0;

        catch java.io.IOException from label1 to label4 with label5;
    }

    public void open(ucar.unidata.io.RandomAccessFile, ucar.nc2.NetcdfFile, ucar.nc2.util.CancelTask) throws java.io.IOException
    {
        java.lang.Integer $r58;
        byte $b5;
        ucar.nc2.constants.FeatureType $r19;
        ucar.nc2.Attribute $r14, $r15, $r18, $r24, $r26, $r28, $r32, $r33, $r34, $r51, $r52, $r53, $r56, $r59, $r61, $r64, $r67, $r70, $r73, $r76, $r79, $r83, $r86;
        java.lang.StringBuilder $r35, $r36, $r39, $r40, $r44, $r45, $r49;
        java.util.Date $r23, $r30, $r42, $r47;
        ucar.nc2.units.DateFormatter $r12;
        int $i0, $i1, $i2, $i3, $i4;
        ucar.nc2.Variable $r94, $r114, $r115, $r116, $r117;
        java.lang.Object $r97, $r98, $r112, $r113;
        ucar.nc2.util.CancelTask r3;
        java.lang.Double $r60, $r69, $r72, $r75, $r78, $r81, $r85, $r88;
        java.lang.String $r17, $r20, $r25, $r27, $r31, $r38, $r43, $r48, $r50, $r55, $r63, $r66, $r126;
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r0;
        java.lang.IllegalStateException $r120;
        ucar.unidata.io.RandomAccessFile r2;
        ucar.nc2.iosp.nexrad2.Level2Record $r100, r122;
        boolean $z0, $z1;
        ucar.nc2.iosp.nexrad2.Level2VolumeScan $r1, $r4, $r5, $r6, $r8, $r10, $r16, $r21, $r22, $r29, $r37, $r41, $r46, $r54, $r57, $r62, $r65, $r68, $r71, $r74, $r77, $r80, $r82, $r84, $r87, $r89, $r91, $r92, $r95, $r101, $r102, $r103, $r104, $r106, $r108, $r110, $r118, $r119, $r123, $r125;
        java.util.List $r7, $r9, $r11, $r90, $r93, $r96, $r99, $r105, $r107, $r109, $r111, r121, $r124;
        ucar.nc2.NetcdfFile r13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22;

        r0 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        r2 := @parameter0: ucar.unidata.io.RandomAccessFile;

        r13 := @parameter1: ucar.nc2.NetcdfFile;

        r3 := @parameter2: ucar.nc2.util.CancelTask;

        staticinvoke <ucar.nc2.iosp.nexrad2.NexradStationDB: void init()>();

        $r1 = new ucar.nc2.iosp.nexrad2.Level2VolumeScan;

        specialinvoke $r1.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: void <init>(ucar.unidata.io.RandomAccessFile,ucar.nc2.util.CancelTask)>(r2, r3);

        r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan> = $r1;

        $r4 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $z0 = virtualinvoke $r4.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: boolean hasDifferentDopplarResolutions()>();

        if $z0 == 0 goto label01;

        $r120 = new java.lang.IllegalStateException;

        specialinvoke $r120.<java.lang.IllegalStateException: void <init>(java.lang.String)>("volScan.hasDifferentDopplarResolutions");

        throw $r120;

     label01:
        $r5 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $z1 = virtualinvoke $r5.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: boolean hasHighResolutions(int)>(0);

        if $z1 == 0 goto label05;

        $r104 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r105 = virtualinvoke $r104.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getHighResReflectivityGroups()>();

        if $r105 == null goto label02;

        $r119 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        virtualinvoke r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: void makeVariable2(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,java.lang.String,ucar.nc2.iosp.nexrad2.Level2VolumeScan)>(r13, 5, "Reflectivity", "Reflectivity", "R", $r119);

     label02:
        $r106 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r107 = virtualinvoke $r106.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getHighResVelocityGroups()>();

        if $r107 == null goto label03;

        $r118 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        virtualinvoke r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: void makeVariable2(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,java.lang.String,ucar.nc2.iosp.nexrad2.Level2VolumeScan)>(r13, 6, "RadialVelocity", "Radial Velocity", "V", $r118);

     label03:
        $r108 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r109 = virtualinvoke $r108.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getHighResSpectrumGroups()>();

        if $r109 == null goto label05;

        $r110 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r111 = virtualinvoke $r110.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getHighResSpectrumGroups()>();

        $r112 = interfaceinvoke $r111.<java.util.List: java.lang.Object get(int)>(0);

        r121 = (java.util.List) $r112;

        $r113 = interfaceinvoke r121.<java.util.List: java.lang.Object get(int)>(0);

        r122 = (ucar.nc2.iosp.nexrad2.Level2Record) $r113;

        $r114 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.Variable v1>;

        if $r114 == null goto label04;

        $r117 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.Variable v1>;

        specialinvoke r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: void makeVariableNoCoords(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,ucar.nc2.Variable,ucar.nc2.iosp.nexrad2.Level2Record)>(r13, 7, "SpectrumWidth_HI", "Radial Spectrum_HI", $r117, r122);

     label04:
        $r115 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.Variable v0>;

        if $r115 == null goto label05;

        $r116 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.Variable v0>;

        specialinvoke r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: void makeVariableNoCoords(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,ucar.nc2.Variable,ucar.nc2.iosp.nexrad2.Level2Record)>(r13, 7, "SpectrumWidth", "Radial Spectrum", $r116, r122);

     label05:
        $r123 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r124 = virtualinvoke $r123.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getHighResDiffReflectGroups()>();

        if $r124 == null goto label06;

        $r103 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        virtualinvoke r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: void makeVariable2(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,java.lang.String,ucar.nc2.iosp.nexrad2.Level2VolumeScan)>(r13, 8, "DifferentialReflectivity", "Differential Reflectivity", "D", $r103);

     label06:
        $r6 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r7 = virtualinvoke $r6.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getHighResCoeffocientGroups()>();

        if $r7 == null goto label07;

        $r102 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        virtualinvoke r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: void makeVariable2(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,java.lang.String,ucar.nc2.iosp.nexrad2.Level2VolumeScan)>(r13, 10, "CorrelationCoefficient", "Correlation Coefficient", "C", $r102);

     label07:
        $r8 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r9 = virtualinvoke $r8.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getHighResDiffPhaseGroups()>();

        if $r9 == null goto label08;

        $r101 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        virtualinvoke r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: void makeVariable2(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,java.lang.String,ucar.nc2.iosp.nexrad2.Level2VolumeScan)>(r13, 9, "DifferentialPhase", "Differential Phase", "P", $r101);

     label08:
        $r10 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r11 = virtualinvoke $r10.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getReflectivityGroups()>();

        if $r11 == null goto label11;

        $r89 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r90 = virtualinvoke $r89.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getReflectivityGroups()>();

        virtualinvoke r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.Variable makeVariable(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,java.lang.String,java.util.List,int)>(r13, 1, "Reflectivity", "Reflectivity", "R", $r90, 0);

        $r91 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $i4 = virtualinvoke $r91.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: int getDopplarResolution()>();

        if $i4 != 2 goto label09;

        $b5 = 2;

        goto label10;

     label09:
        $b5 = 4;

     label10:
        $r92 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r93 = virtualinvoke $r92.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getVelocityGroups()>();

        $r94 = virtualinvoke r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.Variable makeVariable(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,java.lang.String,java.util.List,int)>(r13, $b5, "RadialVelocity", "Radial Velocity", "V", $r93, 0);

        $r95 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r96 = virtualinvoke $r95.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getVelocityGroups()>();

        $r97 = interfaceinvoke $r96.<java.util.List: java.lang.Object get(int)>(0);

        $r99 = (java.util.List) $r97;

        $r98 = interfaceinvoke $r99.<java.util.List: java.lang.Object get(int)>(0);

        $r100 = (ucar.nc2.iosp.nexrad2.Level2Record) $r98;

        specialinvoke r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: void makeVariableNoCoords(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,ucar.nc2.Variable,ucar.nc2.iosp.nexrad2.Level2Record)>(r13, 3, "SpectrumWidth", "Spectrum Width", $r94, $r100);

     label11:
        $r125 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r126 = virtualinvoke $r125.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.lang.String getStationId()>();

        if $r126 == null goto label12;

        $r61 = new ucar.nc2.Attribute;

        $r62 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r63 = virtualinvoke $r62.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.lang.String getStationId()>();

        specialinvoke $r61.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("Station", $r63);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r61);

        $r64 = new ucar.nc2.Attribute;

        $r65 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r66 = virtualinvoke $r65.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.lang.String getStationName()>();

        specialinvoke $r64.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("StationName", $r66);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r64);

        $r67 = new ucar.nc2.Attribute;

        $r68 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $d0 = virtualinvoke $r68.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: double getStationLatitude()>();

        $r69 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        specialinvoke $r67.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("StationLatitude", $r69);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r67);

        $r70 = new ucar.nc2.Attribute;

        $r71 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $d1 = virtualinvoke $r71.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: double getStationLongitude()>();

        $r72 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        specialinvoke $r70.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("StationLongitude", $r72);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r70);

        $r73 = new ucar.nc2.Attribute;

        $r74 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $d2 = virtualinvoke $r74.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: double getStationElevation()>();

        $r75 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        specialinvoke $r73.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("StationElevationInMeters", $r75);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r73);

        $d3 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: double radarRadius>;

        $d4 = staticinvoke <ucar.unidata.geoloc.Earth: double getRadius()>();

        $d5 = $d3 / $d4;

        $d6 = staticinvoke <java.lang.Math: double toDegrees(double)>($d5);

        $r76 = new ucar.nc2.Attribute;

        $r77 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $d7 = virtualinvoke $r77.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: double getStationLatitude()>();

        $d8 = $d7 - $d6;

        $r78 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d8);

        specialinvoke $r76.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("geospatial_lat_min", $r78);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r76);

        $r79 = new ucar.nc2.Attribute;

        $r80 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $d9 = virtualinvoke $r80.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: double getStationLatitude()>();

        $d10 = $d9 + $d6;

        $r81 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d10);

        specialinvoke $r79.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("geospatial_lat_max", $r81);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r79);

        $r82 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $d11 = virtualinvoke $r82.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: double getStationLatitude()>();

        $d12 = staticinvoke <java.lang.Math: double toRadians(double)>($d11);

        $d13 = staticinvoke <java.lang.Math: double cos(double)>($d12);

        $d14 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: double radarRadius>;

        $d15 = $d14 / $d13;

        $d16 = staticinvoke <ucar.unidata.geoloc.Earth: double getRadius()>();

        $d17 = $d15 / $d16;

        $d18 = staticinvoke <java.lang.Math: double toDegrees(double)>($d17);

        $r83 = new ucar.nc2.Attribute;

        $r84 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $d19 = virtualinvoke $r84.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: double getStationLongitude()>();

        $d20 = $d19 - $d18;

        $r85 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d20);

        specialinvoke $r83.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("geospatial_lon_min", $r85);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r83);

        $r86 = new ucar.nc2.Attribute;

        $r87 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $d21 = virtualinvoke $r87.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: double getStationLongitude()>();

        $d22 = $d21 + $d18;

        $r88 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d22);

        specialinvoke $r86.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("geospatial_lon_max", $r88);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r86);

     label12:
        $r12 = new ucar.nc2.units.DateFormatter;

        specialinvoke $r12.<ucar.nc2.units.DateFormatter: void <init>()>();

        $r14 = new ucar.nc2.Attribute;

        specialinvoke $r14.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("Conventions", "_Coordinates");

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r14);

        $r15 = new ucar.nc2.Attribute;

        $r16 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r17 = virtualinvoke $r16.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.lang.String getDataFormat()>();

        specialinvoke $r15.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("format", $r17);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r15);

        $r18 = new ucar.nc2.Attribute;

        $r19 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        $r20 = virtualinvoke $r19.<ucar.nc2.constants.FeatureType: java.lang.String toString()>();

        specialinvoke $r18.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("cdm_data_type", $r20);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r18);

        $r21 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $i0 = virtualinvoke $r21.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: int getTitleJulianDays()>();

        $r22 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $i1 = virtualinvoke $r22.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: int getTitleMsecs()>();

        $r23 = staticinvoke <ucar.nc2.iosp.nexrad2.Level2Record: java.util.Date getDate(int,int)>($i0, $i1);

        $r24 = new ucar.nc2.Attribute;

        $r25 = virtualinvoke $r12.<ucar.nc2.units.DateFormatter: java.lang.String toDateOnlyString(java.util.Date)>($r23);

        specialinvoke $r24.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("base_date", $r25);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r24);

        $r26 = new ucar.nc2.Attribute;

        $r27 = virtualinvoke $r12.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r23);

        specialinvoke $r26.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("time_coverage_start", $r27);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r26);

        $r28 = new ucar.nc2.Attribute;

        $r29 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r30 = virtualinvoke $r29.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.Date getEndDate()>();

        $r31 = virtualinvoke $r12.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r30);

        specialinvoke $r28.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("time_coverage_end", $r31);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r28);

        $r32 = new ucar.nc2.Attribute;

        specialinvoke $r32.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("history", "Direct read of Nexrad Level 2 file into NetCDF-Java 2.2 API");

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r32);

        $r33 = new ucar.nc2.Attribute;

        specialinvoke $r33.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("DataType", "Radial");

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r33);

        $r34 = new ucar.nc2.Attribute;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nexrad Level 2 Station ");

        $r37 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r38 = virtualinvoke $r37.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.lang.String getStationId()>();

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r41 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r42 = virtualinvoke $r41.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.Date getStartDate()>();

        $r43 = virtualinvoke $r12.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r42);

        $r44 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r46 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r47 = virtualinvoke $r46.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.Date getEndDate()>();

        $r48 = virtualinvoke $r12.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r47);

        $r49 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("Title", $r50);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r34);

        $r51 = new ucar.nc2.Attribute;

        specialinvoke $r51.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("Summary", "Weather Surveillance Radar-1988 Doppler (WSR-88D) Level II data are the three meteorological base data quantities: reflectivity, mean radial velocity, and spectrum width.");

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r51);

        $r52 = new ucar.nc2.Attribute;

        specialinvoke $r52.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("keywords", "WSR-88D; NEXRAD; Radar Level II; reflectivity; mean radial velocity; spectrum width");

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r52);

        $r53 = new ucar.nc2.Attribute;

        $r54 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $i2 = virtualinvoke $r54.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: int getVCP()>();

        $r55 = staticinvoke <ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String getVolumeCoveragePatternName(int)>($i2);

        specialinvoke $r53.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("VolumeCoveragePatternName", $r55);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r53);

        $r56 = new ucar.nc2.Attribute;

        $r57 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $i3 = virtualinvoke $r57.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: int getVCP()>();

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        specialinvoke $r56.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("VolumeCoveragePattern", $r58);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r56);

        $r59 = new ucar.nc2.Attribute;

        $r60 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(1.5);

        specialinvoke $r59.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("HorizonatalBeamWidthInDegrees", $r60);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: ucar.nc2.Attribute addAttribute(ucar.nc2.Group,ucar.nc2.Attribute)>(null, $r59);

        virtualinvoke r13.<ucar.nc2.NetcdfFile: void finish()>();

        return;
    }

    public void makeVariable2(ucar.nc2.NetcdfFile, int, java.lang.String, java.lang.String, java.lang.String, ucar.nc2.iosp.nexrad2.Level2VolumeScan) throws java.io.IOException
    {
        java.lang.IllegalStateException $r25;
        ucar.nc2.iosp.nexrad2.Level2Record r24;
        boolean $z0, $z1, $z2, $z3, $z4;
        ucar.nc2.iosp.nexrad2.Level2VolumeScan r30;
        java.util.List r22, r31;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13, $r14, $r16, $r17, $r18, $r26, $r27, $r28;
        ucar.nc2.NetcdfFile r4;
        java.util.ArrayList $r1, $r2;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, i9;
        ucar.nc2.Variable $r7, $r20;
        java.lang.String r0, r5, r6, $r11, $r15, $r19, $r29;
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r3;
        java.lang.Object $r21, $r23;

        r3 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        r4 := @parameter0: ucar.nc2.NetcdfFile;

        i3 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        r5 := @parameter3: java.lang.String;

        r6 := @parameter4: java.lang.String;

        r30 := @parameter5: ucar.nc2.iosp.nexrad2.Level2VolumeScan;

        r31 = null;

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("Reflectivity");

        if $z0 == 0 goto label01;

        r31 = virtualinvoke r30.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getHighResReflectivityGroups()>();

        goto label05;

     label01:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("RadialVelocity");

        if $z1 == 0 goto label02;

        r31 = virtualinvoke r30.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getHighResVelocityGroups()>();

        goto label05;

     label02:
        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("DifferentialReflectivity");

        if $z2 == 0 goto label03;

        r31 = virtualinvoke r30.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getHighResDiffReflectGroups()>();

        goto label05;

     label03:
        $z3 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("CorrelationCoefficient");

        if $z3 == 0 goto label04;

        r31 = virtualinvoke r30.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getHighResCoeffocientGroups()>();

        goto label05;

     label04:
        $z4 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("DifferentialPhase");

        if $z4 == 0 goto label05;

        r31 = virtualinvoke r30.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: java.util.List getHighResDiffPhaseGroups()>();

     label05:
        $i8 = interfaceinvoke r31.<java.util.List: int size()>();

        if $i8 != 0 goto label06;

        $r25 = new java.lang.IllegalStateException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No data for ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r29);

        throw $r25;

     label06:
        $r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke r31.<java.util.List: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = new java.util.ArrayList;

        $i1 = interfaceinvoke r31.<java.util.List: int size()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1);

        i9 = 0;

     label07:
        if i9 >= $i8 goto label13;

        $r21 = interfaceinvoke r31.<java.util.List: java.lang.Object get(int)>(i9);

        r22 = (java.util.List) $r21;

        $r23 = interfaceinvoke r22.<java.util.List: java.lang.Object get(int)>(0);

        r24 = (ucar.nc2.iosp.nexrad2.Level2Record) $r23;

        $i5 = interfaceinvoke r22.<java.util.List: int size()>();

        if $i5 < 720 goto label08;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r22);

        goto label12;

     label08:
        if $i5 > 360 goto label09;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r22);

        goto label12;

     label09:
        $i6 = virtualinvoke r24.<ucar.nc2.iosp.nexrad2.Level2Record: int getGateCount(int)>(5);

        if $i6 > 500 goto label10;

        $i7 = virtualinvoke r24.<ucar.nc2.iosp.nexrad2.Level2Record: int getGateCount(int)>(6);

        if $i7 <= 1000 goto label11;

     label10:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r22);

        goto label12;

     label11:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r22);

     label12:
        i9 = i9 + 1;

        goto label07;

     label13:
        if $r1 == null goto label14;

        $i4 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i4 <= 0 goto label14;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_HI");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_HI");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_HI");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20 = virtualinvoke r3.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.Variable makeVariable(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,java.lang.String,java.util.List,int)>(r4, i3, $r11, $r15, $r19, $r1, 1);

        r3.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.Variable v1> = $r20;

     label14:
        if $r2 == null goto label15;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i2 <= 0 goto label15;

        $r7 = virtualinvoke r3.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.Variable makeVariable(ucar.nc2.NetcdfFile,int,java.lang.String,java.lang.String,java.lang.String,java.util.List,int)>(r4, i3, r0, r5, r6, $r2, 0);

        r3.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.Variable v0> = $r7;

     label15:
        return;
    }

    public int getMaxRadials(java.util.List)
    {
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r3;
        java.util.ArrayList r2;
        java.util.List r0;
        int $i0, $i1, i2, i3;
        java.lang.Object $r1;

        r3 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        r0 := @parameter0: java.util.List;

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i0 goto label2;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        r2 = (java.util.ArrayList) $r1;

        $i1 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i2, $i1);

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    public ucar.nc2.Variable makeVariable(ucar.nc2.NetcdfFile, int, java.lang.String, java.lang.String, java.lang.String, java.util.List, int) throws java.io.IOException
    {
        byte[] $r145;
        java.lang.Integer $r65;
        ucar.nc2.Attribute $r164, $r165, $r166, $r167, $r168, $r169, $r170, $r171, $r172, $r177, $r178, $r179, $r180, $r183, $r184, $r185, $r186, $r189, $r190, $r191, $r192, $r195, $r196, $r197, $r200, $r203, $r205;
        java.lang.StringBuilder $r6, $r8, $r11, $r12, $r15, $r16, $r48, $r49, $r57, $r60, $r70, $r71, $r83, $r84, $r96, $r97, $r109, $r110, $r117, $r118, $r125, $r126, $r127, $r128, $r129, $r130, $r131, $r148, $r149, $r150, $r152, $r154, $r156, $r157, $r158, $r174, $r176, $r181, $r187, $r193, $r198, $r201, $r204;
        short $s5, $s15, $s17;
        ucar.ma2.Array $r35, $r102;
        java.util.Date $r55;
        int[] $r34;
        java.lang.Short $r45, $r142;
        ucar.ma2.DataType $r27, $r32, $r52, $r74, $r87, $r100, $r101, $r113, $r121, $r144;
        ucar.nc2.units.DateFormatter $r58;
        int $i0, i1, $i2, i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i16, i18, $i19, $i21, $i22;
        ucar.nc2.Variable $r163, $r175, $r182, $r188, $r194, $r199, $r202;
        ucar.nc2.iosp.nexrad2.Level2Record[][] $r143;
        java.lang.Object $r1, $r3, $r136, $r139;
        java.lang.Class $r33;
        java.lang.Float $r40, $r42, $r78, $r91;
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider$Vgroup $r206;
        ucar.nc2.constants.AxisType $r67, $r80, $r93, $r106;
        java.util.ArrayList $r162, $r173;
        java.lang.String r7, $r9, $r13, $r17, r26, $r29, r31, $r50, $r59, $r61, $r68, $r72, $r81, $r85, $r94, $r98, $r107, $r111, $r114, $r119, $r122, $r132, $r151, $r153;
        ucar.nc2.iosp.nexrad2.Level2Record[] r135;
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r21;
        ucar.nc2.Dimension $r159, $r160, $r161;
        java.lang.IllegalStateException $r155;
        ucar.nc2.iosp.nexrad2.Level2Record r4, r140;
        java.lang.Byte $r38;
        boolean $z0;
        ucar.nc2.iosp.nexrad2.Level2VolumeScan $r22, $r53, $r54;
        java.util.List r0, r2, r137;
        float $f0, $f1;
        ucar.nc2.NetcdfFile r23;
        double $d0, $d1, $d2;
        java.util.Iterator $r138;

        r21 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        r23 := @parameter0: ucar.nc2.NetcdfFile;

        i1 := @parameter1: int;

        r26 := @parameter2: java.lang.String;

        r31 := @parameter3: java.lang.String;

        r7 := @parameter4: java.lang.String;

        r0 := @parameter5: java.util.List;

        i3 := @parameter6: int;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r155 = new java.lang.IllegalStateException;

        $r154 = new java.lang.StringBuilder;

        specialinvoke $r154.<java.lang.StringBuilder: void <init>()>();

        $r148 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No data for ");

        $r149 = virtualinvoke $r148.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r150 = virtualinvoke $r149.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" file= ");

        $r151 = virtualinvoke r23.<ucar.nc2.NetcdfFile: java.lang.String getLocation()>();

        $r152 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r151);

        $r153 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r155.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r153);

        throw $r155;

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (java.util.List) $r1;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        r4 = (ucar.nc2.iosp.nexrad2.Level2Record) $r3;

        $i2 = virtualinvoke r4.<ucar.nc2.iosp.nexrad2.Level2Record: int getGateCount(int)>(i1);

        $r156 = new java.lang.StringBuilder;

        specialinvoke $r156.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r156.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("scan");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r157 = new java.lang.StringBuilder;

        specialinvoke $r157.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r157.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gate");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r158 = new java.lang.StringBuilder;

        specialinvoke $r158.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r158.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("radial");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r159 = new ucar.nc2.Dimension;

        specialinvoke $r159.<ucar.nc2.Dimension: void <init>(java.lang.String,int)>($r9, $i0);

        $r160 = new ucar.nc2.Dimension;

        specialinvoke $r160.<ucar.nc2.Dimension: void <init>(java.lang.String,int)>($r13, $i2);

        $r161 = new ucar.nc2.Dimension;

        $r22 = r21.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $i4 = virtualinvoke $r22.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: int getMaxRadials(int)>(i3);

        specialinvoke $r161.<ucar.nc2.Dimension: void <init>(java.lang.String,int,boolean)>($r17, $i4, 1);

        virtualinvoke r23.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension addDimension(ucar.nc2.Group,ucar.nc2.Dimension)>(null, $r159);

        virtualinvoke r23.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension addDimension(ucar.nc2.Group,ucar.nc2.Dimension)>(null, $r160);

        virtualinvoke r23.<ucar.nc2.NetcdfFile: ucar.nc2.Dimension addDimension(ucar.nc2.Group,ucar.nc2.Dimension)>(null, $r161);

        $r162 = new java.util.ArrayList;

        specialinvoke $r162.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r162.<java.util.List: boolean add(java.lang.Object)>($r159);

        interfaceinvoke $r162.<java.util.List: boolean add(java.lang.Object)>($r161);

        interfaceinvoke $r162.<java.util.List: boolean add(java.lang.Object)>($r160);

        $r163 = new ucar.nc2.Variable;

        specialinvoke $r163.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r23, null, null, r26);

        if i1 != 9 goto label2;

        $r144 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        virtualinvoke $r163.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r144);

        goto label3;

     label2:
        $r27 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        virtualinvoke $r163.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r27);

     label3:
        virtualinvoke $r163.<ucar.nc2.Variable: void setDimensions(java.util.List)>($r162);

        virtualinvoke r23.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r163);

        $r164 = new ucar.nc2.Attribute;

        $r29 = staticinvoke <ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String getDatatypeUnits(int)>(i1);

        specialinvoke $r164.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", $r29);

        virtualinvoke $r163.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r164);

        $r165 = new ucar.nc2.Attribute;

        specialinvoke $r165.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", r31);

        virtualinvoke $r163.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r165);

        $r145 = newarray (byte)[2];

        $r145[0] = 1;

        $r145[1] = 0;

        $r32 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        $r33 = virtualinvoke $r32.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r34 = newarray (int)[1];

        $r34[0] = 2;

        $r35 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r33, $r34, $r145);

        $r166 = new ucar.nc2.Attribute;

        specialinvoke $r166.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.ma2.Array)>("missing_value", $r35);

        virtualinvoke $r163.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r166);

        $r167 = new ucar.nc2.Attribute;

        $r38 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(0);

        specialinvoke $r167.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("signal_below_threshold", $r38);

        virtualinvoke $r163.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r167);

        $r168 = new ucar.nc2.Attribute;

        $f0 = virtualinvoke r4.<ucar.nc2.iosp.nexrad2.Level2Record: float getDatatypeScaleFactor(int)>(i1);

        $r40 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        specialinvoke $r168.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("scale_factor", $r40);

        virtualinvoke $r163.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r168);

        $r169 = new ucar.nc2.Attribute;

        $f1 = virtualinvoke r4.<ucar.nc2.iosp.nexrad2.Level2Record: float getDatatypeAddOffset(int)>(i1);

        $r42 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        specialinvoke $r169.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("add_offset", $r42);

        virtualinvoke $r163.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r169);

        $r170 = new ucar.nc2.Attribute;

        specialinvoke $r170.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_Unsigned", "true");

        virtualinvoke $r163.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r170);

        if i3 != 1 goto label4;

        $r171 = new ucar.nc2.Attribute;

        $s17 = virtualinvoke r4.<ucar.nc2.iosp.nexrad2.Level2Record: short getDatatypeSNRThreshhold(int)>(i1);

        $r142 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s17);

        specialinvoke $r171.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("SNR_threshold", $r142);

        virtualinvoke $r163.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r171);

     label4:
        $r172 = new ucar.nc2.Attribute;

        $s5 = virtualinvoke r4.<ucar.nc2.iosp.nexrad2.Level2Record: short getDatatypeRangeFoldingThreshhold(int)>(i1);

        $r45 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s5);

        specialinvoke $r172.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("range_folding_threshold", $r45);

        virtualinvoke $r163.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r172);

        $r173 = new java.util.ArrayList;

        specialinvoke $r173.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r173.<java.util.List: boolean add(java.lang.Object)>($r159);

        interfaceinvoke $r173.<java.util.List: boolean add(java.lang.Object)>($r161);

        $r174 = new java.lang.StringBuilder;

        specialinvoke $r174.<java.lang.StringBuilder: void <init>()>();

        $r48 = virtualinvoke $r174.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("time");

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        $r175 = new ucar.nc2.Variable;

        specialinvoke $r175.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r23, null, null, $r50);

        $r52 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        virtualinvoke $r175.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r52);

        virtualinvoke $r175.<ucar.nc2.Variable: void setDimensions(java.util.List)>($r173);

        virtualinvoke r23.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r175);

        $r53 = r21.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $i6 = virtualinvoke $r53.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: int getTitleJulianDays()>();

        $r54 = r21.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $i7 = virtualinvoke $r54.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: int getTitleMsecs()>();

        $r55 = staticinvoke <ucar.nc2.iosp.nexrad2.Level2Record: java.util.Date getDate(int,int)>($i6, $i7);

        $r176 = new java.lang.StringBuilder;

        specialinvoke $r176.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r176.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("msecs since ");

        $r58 = r21.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.units.DateFormatter formatter>;

        $r59 = virtualinvoke $r58.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r55);

        $r60 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        $r177 = new ucar.nc2.Attribute;

        specialinvoke $r177.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "time since base date");

        virtualinvoke $r175.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r177);

        $r178 = new ucar.nc2.Attribute;

        specialinvoke $r178.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", $r61);

        virtualinvoke $r175.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r178);

        $r179 = new ucar.nc2.Attribute;

        $i21 = (int) -9999;

        $r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i21);

        specialinvoke $r179.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("missing_value", $r65);

        virtualinvoke $r175.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r179);

        $r180 = new ucar.nc2.Attribute;

        $r67 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        $r68 = virtualinvoke $r67.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r180.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r68);

        virtualinvoke $r175.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r180);

        $r181 = new java.lang.StringBuilder;

        specialinvoke $r181.<java.lang.StringBuilder: void <init>()>();

        $r70 = virtualinvoke $r181.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("elevation");

        $r71 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        $r182 = new ucar.nc2.Variable;

        specialinvoke $r182.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r23, null, null, $r72);

        $r74 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        virtualinvoke $r182.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r74);

        virtualinvoke $r182.<ucar.nc2.Variable: void setDimensions(java.util.List)>($r173);

        virtualinvoke r23.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r182);

        $r183 = new ucar.nc2.Attribute;

        specialinvoke $r183.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "degrees");

        virtualinvoke $r182.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r183);

        $r184 = new ucar.nc2.Attribute;

        specialinvoke $r184.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "elevation angle in degres: 0 = parallel to pedestal base, 90 = perpendicular");

        virtualinvoke $r182.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r184);

        $r185 = new ucar.nc2.Attribute;

        $r78 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(#NaNF);

        specialinvoke $r185.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("missing_value", $r78);

        virtualinvoke $r182.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r185);

        $r186 = new ucar.nc2.Attribute;

        $r80 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType RadialElevation>;

        $r81 = virtualinvoke $r80.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r186.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r81);

        virtualinvoke $r182.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r186);

        $r187 = new java.lang.StringBuilder;

        specialinvoke $r187.<java.lang.StringBuilder: void <init>()>();

        $r83 = virtualinvoke $r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("azimuth");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        $r188 = new ucar.nc2.Variable;

        specialinvoke $r188.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r23, null, null, $r85);

        $r87 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        virtualinvoke $r188.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r87);

        virtualinvoke $r188.<ucar.nc2.Variable: void setDimensions(java.util.List)>($r173);

        virtualinvoke r23.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r188);

        $r189 = new ucar.nc2.Attribute;

        specialinvoke $r189.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "degrees");

        virtualinvoke $r188.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r189);

        $r190 = new ucar.nc2.Attribute;

        specialinvoke $r190.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "azimuth angle in degrees: 0 = true north, 90 = east");

        virtualinvoke $r188.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r190);

        $r191 = new ucar.nc2.Attribute;

        $r91 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(#NaNF);

        specialinvoke $r191.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("missing_value", $r91);

        virtualinvoke $r188.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r191);

        $r192 = new ucar.nc2.Attribute;

        $r93 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType RadialAzimuth>;

        $r94 = virtualinvoke $r93.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r192.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r94);

        virtualinvoke $r188.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r192);

        $r193 = new java.lang.StringBuilder;

        specialinvoke $r193.<java.lang.StringBuilder: void <init>()>();

        $r96 = virtualinvoke $r193.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("distance");

        $r97 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

        $r194 = new ucar.nc2.Variable;

        specialinvoke $r194.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r23, null, null, $r98);

        $r100 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        virtualinvoke $r194.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r100);

        virtualinvoke $r194.<ucar.nc2.Variable: void setDimensions(java.lang.String)>($r13);

        $r101 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        $i8 = virtualinvoke r4.<ucar.nc2.iosp.nexrad2.Level2Record: int getGateStart(int)>(i1);

        $d0 = (double) $i8;

        $i9 = virtualinvoke r4.<ucar.nc2.iosp.nexrad2.Level2Record: int getGateSize(int)>(i1);

        $d1 = (double) $i9;

        $r102 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array makeArray(ucar.ma2.DataType,int,double,double)>($r101, $i2, $d0, $d1);

        virtualinvoke $r194.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r102, 0);

        virtualinvoke r23.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r194);

        $i10 = virtualinvoke r4.<ucar.nc2.iosp.nexrad2.Level2Record: int getGateStart(int)>(i1);

        $i11 = virtualinvoke r4.<ucar.nc2.iosp.nexrad2.Level2Record: int getGateSize(int)>(i1);

        $i12 = $i2 * $i11;

        $i13 = $i10 + $i12;

        $d2 = (double) $i13;

        r21.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: double radarRadius> = $d2;

        $r195 = new ucar.nc2.Attribute;

        specialinvoke $r195.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", "m");

        virtualinvoke $r194.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r195);

        $r196 = new ucar.nc2.Attribute;

        specialinvoke $r196.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "radial distance to start of gate");

        virtualinvoke $r194.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r196);

        $r197 = new ucar.nc2.Attribute;

        $r106 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType RadialDistance>;

        $r107 = virtualinvoke $r106.<ucar.nc2.constants.AxisType: java.lang.String toString()>();

        specialinvoke $r197.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxisType", $r107);

        virtualinvoke $r194.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r197);

        $r198 = new java.lang.StringBuilder;

        specialinvoke $r198.<java.lang.StringBuilder: void <init>()>();

        $r109 = virtualinvoke $r198.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("numRadials");

        $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r111 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.String toString()>();

        $r199 = new ucar.nc2.Variable;

        specialinvoke $r199.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r23, null, null, $r111);

        $r113 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        virtualinvoke $r199.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r113);

        $r114 = virtualinvoke $r159.<ucar.nc2.Dimension: java.lang.String getName()>();

        virtualinvoke $r199.<ucar.nc2.Variable: void setDimensions(java.lang.String)>($r114);

        $r200 = new ucar.nc2.Attribute;

        specialinvoke $r200.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "number of valid radials in this scan");

        virtualinvoke $r199.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r200);

        virtualinvoke r23.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r199);

        $r201 = new java.lang.StringBuilder;

        specialinvoke $r201.<java.lang.StringBuilder: void <init>()>();

        $r117 = virtualinvoke $r201.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("numGates");

        $r118 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.String toString()>();

        $r202 = new ucar.nc2.Variable;

        specialinvoke $r202.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r23, null, null, $r119);

        $r121 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        virtualinvoke $r202.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r121);

        $r122 = virtualinvoke $r159.<ucar.nc2.Dimension: java.lang.String getName()>();

        virtualinvoke $r202.<ucar.nc2.Variable: void setDimensions(java.lang.String)>($r122);

        $r203 = new ucar.nc2.Attribute;

        specialinvoke $r203.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", "number of valid gates in this scan");

        virtualinvoke $r202.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r203);

        virtualinvoke r23.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r202);

        specialinvoke r21.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: void makeCoordinateDataWithMissing(int,ucar.nc2.Variable,ucar.nc2.Variable,ucar.nc2.Variable,ucar.nc2.Variable,ucar.nc2.Variable,java.util.List)>(i1, $r175, $r182, $r188, $r199, $r202, r0);

        $r204 = new java.lang.StringBuilder;

        specialinvoke $r204.<java.lang.StringBuilder: void <init>()>();

        $r125 = virtualinvoke $r204.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r126 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        $r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r85);

        $r130 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r131 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r98);

        $r132 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.String toString()>();

        $r205 = new ucar.nc2.Attribute;

        specialinvoke $r205.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_CoordinateAxes", $r132);

        virtualinvoke $r163.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r205);

        $i14 = virtualinvoke $r161.<ucar.nc2.Dimension: int getLength()>();

        $r143 = newmultiarray (ucar.nc2.iosp.nexrad2.Level2Record)[$i0][$i14];

        i18 = 0;

     label5:
        $i19 = interfaceinvoke r0.<java.util.List: int size()>();

        if i18 >= $i19 goto label8;

        r135 = $r143[i18];

        $r136 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i18);

        r137 = (java.util.List) $r136;

        $r138 = interfaceinvoke r137.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z0 = interfaceinvoke $r138.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r139 = interfaceinvoke $r138.<java.util.Iterator: java.lang.Object next()>();

        r140 = (ucar.nc2.iosp.nexrad2.Level2Record) $r139;

        $s15 = r140.<ucar.nc2.iosp.nexrad2.Level2Record: short radial_num>;

        $i22 = (int) $s15;

        i16 = $i22 - 1;

        r135[i16] = r140;

        goto label6;

     label7:
        i18 = i18 + 1;

        goto label5;

     label8:
        $r206 = new ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider$Vgroup;

        specialinvoke $r206.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider$Vgroup: void <init>(ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider,int,ucar.nc2.iosp.nexrad2.Level2Record[][])>(r21, i1, $r143);

        virtualinvoke $r163.<ucar.nc2.Variable: void setSPobject(java.lang.Object)>($r206);

        return $r163;
    }

    private void makeVariableNoCoords(ucar.nc2.NetcdfFile, int, java.lang.String, java.lang.String, ucar.nc2.Variable, ucar.nc2.iosp.nexrad2.Level2Record)
    {
        byte[] r10;
        java.lang.Float $r20, $r22;
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider$Vgroup $r29, $r34;
        int[] $r13;
        ucar.nc2.iosp.nexrad2.Level2Record r19;
        java.lang.Short $r25, $r33;
        java.lang.Byte $r17;
        ucar.ma2.DataType $r3, $r11;
        java.util.List $r5;
        ucar.nc2.Attribute $r6, $r8, $r15, $r16, $r18, $r21, $r23, $r24, $r26, $r27, $r32;
        float $f0, $f1;
        ucar.nc2.NetcdfFile r1;
        short $s1, $s2;
        int i0;
        ucar.nc2.Variable $r0, r4;
        java.lang.String r2, $r7, r9;
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r30;
        ucar.ma2.Array $r14;
        ucar.nc2.iosp.nexrad2.Level2Record[][] $r31;
        java.lang.Class $r12;
        java.lang.Object $r28;

        r30 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        r1 := @parameter0: ucar.nc2.NetcdfFile;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r9 := @parameter3: java.lang.String;

        r4 := @parameter4: ucar.nc2.Variable;

        r19 := @parameter5: ucar.nc2.iosp.nexrad2.Level2Record;

        $r0 = new ucar.nc2.Variable;

        specialinvoke $r0.<ucar.nc2.Variable: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,ucar.nc2.Structure,java.lang.String)>(r1, null, null, r2);

        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        virtualinvoke $r0.<ucar.nc2.Variable: void setDataType(ucar.ma2.DataType)>($r3);

        $r5 = virtualinvoke r4.<ucar.nc2.Variable: java.util.List getDimensions()>();

        virtualinvoke $r0.<ucar.nc2.Variable: void setDimensions(java.util.List)>($r5);

        virtualinvoke r1.<ucar.nc2.NetcdfFile: ucar.nc2.Variable addVariable(ucar.nc2.Group,ucar.nc2.Variable)>(null, $r0);

        $r6 = new ucar.nc2.Attribute;

        $r7 = staticinvoke <ucar.nc2.iosp.nexrad2.Level2Record: java.lang.String getDatatypeUnits(int)>(i0);

        specialinvoke $r6.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", $r7);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r6);

        $r8 = new ucar.nc2.Attribute;

        specialinvoke $r8.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("long_name", r9);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r8);

        r10 = newarray (byte)[2];

        r10[0] = 1;

        r10[1] = 0;

        $r11 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        $r12 = virtualinvoke $r11.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r13 = newarray (int)[1];

        $r13[0] = 2;

        $r14 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r12, $r13, r10);

        virtualinvoke r4.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("scale_factor");

        virtualinvoke r4.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("add_offset");

        $r15 = new ucar.nc2.Attribute;

        specialinvoke $r15.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.ma2.Array)>("missing_value", $r14);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r15);

        $r16 = new ucar.nc2.Attribute;

        $r17 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(0);

        specialinvoke $r16.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("signal_below_threshold", $r17);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r16);

        $r18 = new ucar.nc2.Attribute;

        $f0 = virtualinvoke r19.<ucar.nc2.iosp.nexrad2.Level2Record: float getDatatypeScaleFactor(int)>(i0);

        $r20 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        specialinvoke $r18.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("scale_factor", $r20);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r18);

        $r21 = new ucar.nc2.Attribute;

        $f1 = virtualinvoke r19.<ucar.nc2.iosp.nexrad2.Level2Record: float getDatatypeAddOffset(int)>(i0);

        $r22 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1);

        specialinvoke $r21.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("add_offset", $r22);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r21);

        $r23 = new ucar.nc2.Attribute;

        specialinvoke $r23.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("_Unsigned", "true");

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r23);

        if i0 != 7 goto label1;

        $r32 = new ucar.nc2.Attribute;

        $s2 = virtualinvoke r19.<ucar.nc2.iosp.nexrad2.Level2Record: short getDatatypeSNRThreshhold(int)>(i0);

        $r33 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s2);

        specialinvoke $r32.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("SNR_threshold", $r33);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r32);

     label1:
        $r24 = new ucar.nc2.Attribute;

        $s1 = virtualinvoke r19.<ucar.nc2.iosp.nexrad2.Level2Record: short getDatatypeRangeFoldingThreshhold(int)>(i0);

        $r25 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s1);

        specialinvoke $r24.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.Number)>("range_folding_threshold", $r25);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r24);

        $r26 = virtualinvoke r4.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("_CoordinateAxes");

        $r27 = new ucar.nc2.Attribute;

        specialinvoke $r27.<ucar.nc2.Attribute: void <init>(java.lang.String,ucar.nc2.Attribute)>("_CoordinateAxes", $r26);

        virtualinvoke $r0.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r27);

        $r28 = virtualinvoke r4.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        $r34 = (ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider$Vgroup) $r28;

        $r29 = new ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider$Vgroup;

        $r31 = $r34.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider$Vgroup: ucar.nc2.iosp.nexrad2.Level2Record[][] map>;

        specialinvoke $r29.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider$Vgroup: void <init>(ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider,int,ucar.nc2.iosp.nexrad2.Level2Record[][])>(r30, i0, $r31);

        virtualinvoke $r0.<ucar.nc2.Variable: void setSPobject(java.lang.Object)>($r29);

        return;
    }

    private void makeCoordinateData(int, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, java.util.List)
    {
        int[] $r3, $r9, $r15, $r21, $r27;
        ucar.nc2.iosp.nexrad2.Level2Record r36, r42;
        ucar.nc2.iosp.nexrad2.Level2VolumeScan $r32;
        ucar.ma2.DataType $r1, $r7, $r13, $r19, $r25;
        java.util.List r30, r34;
        float $f0, $f1;
        java.lang.StringBuilder $r39, $r40, $r43;
        int $i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, $i13;
        ucar.nc2.Variable r0, r6, r12, r18, r24;
        java.lang.String $r41;
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r31;
        org.slf4j.Logger $r38;
        ucar.ma2.IndexIterator $r5, $r11, $r17, $r23, $r29;
        ucar.ma2.Array $r4, $r10, $r16, $r22, $r28;
        java.lang.Class $r2, $r8, $r14, $r20, $r26;
        java.lang.Object $r33, $r35;

        r31 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        i3 := @parameter0: int;

        r0 := @parameter1: ucar.nc2.Variable;

        r6 := @parameter2: ucar.nc2.Variable;

        r12 := @parameter3: ucar.nc2.Variable;

        r18 := @parameter4: ucar.nc2.Variable;

        r24 := @parameter5: ucar.nc2.Variable;

        r30 := @parameter6: java.util.List;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r2 = virtualinvoke $r1.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        $r4 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r2, $r3);

        $r5 = virtualinvoke $r4.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r7 = virtualinvoke r6.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke $r7.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r9 = virtualinvoke r6.<ucar.nc2.Variable: int[] getShape()>();

        $r10 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r8, $r9);

        $r11 = virtualinvoke $r10.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r13 = virtualinvoke r12.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r14 = virtualinvoke $r13.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r15 = virtualinvoke r12.<ucar.nc2.Variable: int[] getShape()>();

        $r16 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r14, $r15);

        $r17 = virtualinvoke $r16.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r19 = virtualinvoke r18.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r20 = virtualinvoke $r19.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r21 = virtualinvoke r18.<ucar.nc2.Variable: int[] getShape()>();

        $r22 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r20, $r21);

        $r23 = virtualinvoke $r22.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r25 = virtualinvoke r24.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r26 = virtualinvoke $r25.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r27 = virtualinvoke r24.<ucar.nc2.Variable: int[] getShape()>();

        $r28 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r26, $r27);

        $r29 = virtualinvoke $r28.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        i8 = -2147483648;

        $i0 = interfaceinvoke r30.<java.util.List: int size()>();

        $r32 = r31.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $i1 = virtualinvoke $r32.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: int getMaxRadials(int)>(0);

        i9 = 0;

     label1:
        if i9 >= $i0 goto label9;

        $r33 = interfaceinvoke r30.<java.util.List: java.lang.Object get(int)>(i9);

        r34 = (java.util.List) $r33;

        $i2 = interfaceinvoke r34.<java.util.List: int size()>();

        r42 = null;

        i10 = 0;

     label2:
        if i10 >= $i2 goto label5;

        $r35 = interfaceinvoke r34.<java.util.List: java.lang.Object get(int)>(i10);

        r36 = (ucar.nc2.iosp.nexrad2.Level2Record) $r35;

        if r42 != null goto label3;

        r42 = r36;

     label3:
        $i5 = r36.<ucar.nc2.iosp.nexrad2.Level2Record: int data_msecs>;

        interfaceinvoke $r5.<ucar.ma2.IndexIterator: void setIntNext(int)>($i5);

        $f0 = virtualinvoke r36.<ucar.nc2.iosp.nexrad2.Level2Record: float getElevation()>();

        interfaceinvoke $r11.<ucar.ma2.IndexIterator: void setFloatNext(float)>($f0);

        $f1 = virtualinvoke r36.<ucar.nc2.iosp.nexrad2.Level2Record: float getAzimuth()>();

        interfaceinvoke $r17.<ucar.ma2.IndexIterator: void setFloatNext(float)>($f1);

        $i6 = r36.<ucar.nc2.iosp.nexrad2.Level2Record: int data_msecs>;

        if $i6 >= i8 goto label4;

        $r38 = <ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: org.slf4j.Logger logger>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("makeCoordinateData time out of order ");

        $i7 = r36.<ucar.nc2.iosp.nexrad2.Level2Record: int data_msecs>;

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r38.<org.slf4j.Logger: void warn(java.lang.String)>($r41);

     label4:
        i8 = r36.<ucar.nc2.iosp.nexrad2.Level2Record: int data_msecs>;

        i10 = i10 + 1;

        goto label2;

     label5:
        i11 = $i2;

     label6:
        if i11 >= $i1 goto label7;

        $i13 = (int) -9999;

        interfaceinvoke $r5.<ucar.ma2.IndexIterator: void setIntNext(int)>($i13);

        interfaceinvoke $r11.<ucar.ma2.IndexIterator: void setFloatNext(float)>(#NaNF);

        interfaceinvoke $r17.<ucar.ma2.IndexIterator: void setFloatNext(float)>(#NaNF);

        i11 = i11 + 1;

        goto label6;

     label7:
        interfaceinvoke $r23.<ucar.ma2.IndexIterator: void setIntNext(int)>($i2);

        if r42 == null goto label8;

        $i4 = virtualinvoke r42.<ucar.nc2.iosp.nexrad2.Level2Record: int getGateCount(int)>(i3);

        interfaceinvoke $r29.<ucar.ma2.IndexIterator: void setIntNext(int)>($i4);

     label8:
        i9 = i9 + 1;

        goto label1;

     label9:
        virtualinvoke r0.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r4, 0);

        virtualinvoke r6.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r10, 0);

        virtualinvoke r12.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r16, 0);

        virtualinvoke r18.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r22, 0);

        virtualinvoke r24.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r28, 0);

        return;
    }

    private void makeCoordinateDataWithMissing(int, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, ucar.nc2.Variable, java.util.List)
    {
        java.lang.StringBuilder $r43, $r44, $r48;
        short $s4;
        java.lang.String $r45;
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r46;
        ucar.ma2.Array $r4, $r10, $r16, $r22, $r28;
        ucar.ma2.Index $r5, $r11, $r17, $r38, $r39, $r40;
        int[] $r3, $r9, $r15, $r21, $r27;
        ucar.nc2.iosp.nexrad2.Level2Record r37, r47;
        boolean $z0, $z1, $z2;
        ucar.ma2.DataType $r1, $r7, $r13, $r19, $r25;
        java.util.List r33, r35;
        float $f0, $f1;
        int $i0, $i1, i2, $i3, $i5, $i6, $i7, $i8, i9, i10, i11, $i13, $i14;
        ucar.nc2.Variable r0, r6, r12, r18, r24;
        org.slf4j.Logger $r42;
        ucar.ma2.IndexIterator $r23, $r29, $r30, $r31, $r32;
        java.lang.Class $r2, $r8, $r14, $r20, $r26;
        java.lang.Object $r34, $r36;

        r46 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        i2 := @parameter0: int;

        r0 := @parameter1: ucar.nc2.Variable;

        r6 := @parameter2: ucar.nc2.Variable;

        r12 := @parameter3: ucar.nc2.Variable;

        r18 := @parameter4: ucar.nc2.Variable;

        r24 := @parameter5: ucar.nc2.Variable;

        r33 := @parameter6: java.util.List;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r2 = virtualinvoke $r1.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r3 = virtualinvoke r0.<ucar.nc2.Variable: int[] getShape()>();

        $r4 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r2, $r3);

        $r5 = virtualinvoke $r4.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $r7 = virtualinvoke r6.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke $r7.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r9 = virtualinvoke r6.<ucar.nc2.Variable: int[] getShape()>();

        $r10 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r8, $r9);

        $r11 = virtualinvoke $r10.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $r13 = virtualinvoke r12.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r14 = virtualinvoke $r13.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r15 = virtualinvoke r12.<ucar.nc2.Variable: int[] getShape()>();

        $r16 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r14, $r15);

        $r17 = virtualinvoke $r16.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $r19 = virtualinvoke r18.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r20 = virtualinvoke $r19.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r21 = virtualinvoke r18.<ucar.nc2.Variable: int[] getShape()>();

        $r22 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r20, $r21);

        $r23 = virtualinvoke $r22.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r25 = virtualinvoke r24.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r26 = virtualinvoke $r25.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r27 = virtualinvoke r24.<ucar.nc2.Variable: int[] getShape()>();

        $r28 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r26, $r27);

        $r29 = virtualinvoke $r28.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        $r30 = virtualinvoke $r4.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label01:
        $z0 = interfaceinvoke $r30.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $i13 = (int) -9999;

        interfaceinvoke $r30.<ucar.ma2.IndexIterator: void setIntNext(int)>($i13);

        goto label01;

     label02:
        $r31 = virtualinvoke $r10.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label03:
        $z1 = interfaceinvoke $r31.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z1 == 0 goto label04;

        interfaceinvoke $r31.<ucar.ma2.IndexIterator: void setFloatNext(float)>(#NaNF);

        goto label03;

     label04:
        $r32 = virtualinvoke $r16.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label05:
        $z2 = interfaceinvoke $r32.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z2 == 0 goto label06;

        interfaceinvoke $r32.<ucar.ma2.IndexIterator: void setFloatNext(float)>(#NaNF);

        goto label05;

     label06:
        i9 = -2147483648;

        $i0 = interfaceinvoke r33.<java.util.List: int size()>();

        i10 = 0;

     label07:
        if i10 >= $i0 goto label13;

        $r34 = interfaceinvoke r33.<java.util.List: java.lang.Object get(int)>(i10);

        r35 = (java.util.List) $r34;

        $i1 = interfaceinvoke r35.<java.util.List: int size()>();

        r47 = null;

        i11 = 0;

     label08:
        if i11 >= $i1 goto label11;

        $r36 = interfaceinvoke r35.<java.util.List: java.lang.Object get(int)>(i11);

        r37 = (ucar.nc2.iosp.nexrad2.Level2Record) $r36;

        if r47 != null goto label09;

        r47 = r37;

     label09:
        $s4 = r37.<ucar.nc2.iosp.nexrad2.Level2Record: short radial_num>;

        $i14 = (int) $s4;

        $i8 = $i14 - 1;

        $r38 = virtualinvoke $r5.<ucar.ma2.Index: ucar.ma2.Index set(int,int)>(i10, $i8);

        $i5 = r37.<ucar.nc2.iosp.nexrad2.Level2Record: int data_msecs>;

        virtualinvoke $r4.<ucar.ma2.Array: void setInt(ucar.ma2.Index,int)>($r38, $i5);

        $r39 = virtualinvoke $r11.<ucar.ma2.Index: ucar.ma2.Index set(int,int)>(i10, $i8);

        $f0 = virtualinvoke r37.<ucar.nc2.iosp.nexrad2.Level2Record: float getElevation()>();

        virtualinvoke $r10.<ucar.ma2.Array: void setFloat(ucar.ma2.Index,float)>($r39, $f0);

        $r40 = virtualinvoke $r17.<ucar.ma2.Index: ucar.ma2.Index set(int,int)>(i10, $i8);

        $f1 = virtualinvoke r37.<ucar.nc2.iosp.nexrad2.Level2Record: float getAzimuth()>();

        virtualinvoke $r16.<ucar.ma2.Array: void setFloat(ucar.ma2.Index,float)>($r40, $f1);

        $i6 = r37.<ucar.nc2.iosp.nexrad2.Level2Record: int data_msecs>;

        if $i6 >= i9 goto label10;

        $r42 = <ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: org.slf4j.Logger logger>;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("makeCoordinateData time out of order ");

        $i7 = r37.<ucar.nc2.iosp.nexrad2.Level2Record: int data_msecs>;

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r42.<org.slf4j.Logger: void warn(java.lang.String)>($r45);

     label10:
        i9 = r37.<ucar.nc2.iosp.nexrad2.Level2Record: int data_msecs>;

        i11 = i11 + 1;

        goto label08;

     label11:
        interfaceinvoke $r23.<ucar.ma2.IndexIterator: void setIntNext(int)>($i1);

        if r47 == null goto label12;

        $i3 = virtualinvoke r47.<ucar.nc2.iosp.nexrad2.Level2Record: int getGateCount(int)>(i2);

        interfaceinvoke $r29.<ucar.ma2.IndexIterator: void setIntNext(int)>($i3);

     label12:
        i10 = i10 + 1;

        goto label07;

     label13:
        virtualinvoke r0.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r4, 0);

        virtualinvoke r6.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r10, 0);

        virtualinvoke r12.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r16, 0);

        virtualinvoke r18.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r22, 0);

        virtualinvoke r24.<ucar.nc2.Variable: void setCachedData(ucar.ma2.Array,boolean)>($r28, 0);

        return;
    }

    public ucar.ma2.Array readData(ucar.nc2.Variable, ucar.ma2.Section) throws java.io.IOException, ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Section r3;
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider$Vgroup r2;
        int[] $r9;
        int $i0, $i1, $i2, i3;
        ucar.nc2.Variable r0;
        ucar.nc2.iosp.nexrad2.Level2Record[] r13;
        ucar.ma2.Range $r4, $r5, $r6;
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r14;
        ucar.ma2.IndexIterator $r11;
        ucar.ma2.DataType $r7;
        ucar.ma2.Array $r10;
        ucar.nc2.iosp.nexrad2.Level2Record[][] $r12;
        java.lang.Object $r1;
        java.lang.Class $r8;

        r14 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        r0 := @parameter0: ucar.nc2.Variable;

        r3 := @parameter1: ucar.ma2.Section;

        $r1 = virtualinvoke r0.<ucar.nc2.Variable: java.lang.Object getSPobject()>();

        r2 = (ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider$Vgroup) $r1;

        $r4 = virtualinvoke r3.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(0);

        $r5 = virtualinvoke r3.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(1);

        $r6 = virtualinvoke r3.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(2);

        $r7 = virtualinvoke r0.<ucar.nc2.Variable: ucar.ma2.DataType getDataType()>();

        $r8 = virtualinvoke $r7.<ucar.ma2.DataType: java.lang.Class getPrimitiveClassType()>();

        $r9 = virtualinvoke r3.<ucar.ma2.Section: int[] getShape()>();

        $r10 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[])>($r8, $r9);

        $r11 = virtualinvoke $r10.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        i3 = virtualinvoke $r4.<ucar.ma2.Range: int first()>();

     label1:
        $i0 = virtualinvoke $r4.<ucar.ma2.Range: int last()>();

        if i3 > $i0 goto label2;

        $r12 = r2.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider$Vgroup: ucar.nc2.iosp.nexrad2.Level2Record[][] map>;

        r13 = $r12[i3];

        $i1 = r2.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider$Vgroup: int datatype>;

        specialinvoke r14.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: void readOneScan(ucar.nc2.iosp.nexrad2.Level2Record[],ucar.ma2.Range,ucar.ma2.Range,int,ucar.ma2.IndexIterator)>(r13, $r5, $r6, $i1, $r11);

        $i2 = virtualinvoke $r4.<ucar.ma2.Range: int stride()>();

        i3 = i3 + $i2;

        goto label1;

     label2:
        return $r10;
    }

    private void readOneScan(ucar.nc2.iosp.nexrad2.Level2Record[], ucar.ma2.Range, ucar.ma2.Range, int, ucar.ma2.IndexIterator) throws java.io.IOException
    {
        ucar.nc2.iosp.nexrad2.Level2Record[] r1;
        ucar.ma2.Range r0, r4;
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r3;
        ucar.ma2.IndexIterator r5;
        ucar.nc2.iosp.nexrad2.Level2Record r2;
        int $i0, i1, $i2, i3;

        r3 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        r1 := @parameter0: ucar.nc2.iosp.nexrad2.Level2Record[];

        r0 := @parameter1: ucar.ma2.Range;

        r4 := @parameter2: ucar.ma2.Range;

        i1 := @parameter3: int;

        r5 := @parameter4: ucar.ma2.IndexIterator;

        i3 = virtualinvoke r0.<ucar.ma2.Range: int first()>();

     label1:
        $i0 = virtualinvoke r0.<ucar.ma2.Range: int last()>();

        if i3 > $i0 goto label2;

        r2 = r1[i3];

        specialinvoke r3.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: void readOneRadial(ucar.nc2.iosp.nexrad2.Level2Record,int,ucar.ma2.Range,ucar.ma2.IndexIterator)>(r2, i1, r4, r5);

        $i2 = virtualinvoke r0.<ucar.ma2.Range: int stride()>();

        i3 = i3 + $i2;

        goto label1;

     label2:
        return;
    }

    private void readOneRadial(ucar.nc2.iosp.nexrad2.Level2Record, int, ucar.ma2.Range, ucar.ma2.IndexIterator) throws java.io.IOException
    {
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r1;
        ucar.nc2.iosp.nexrad2.Level2VolumeScan $r2;
        ucar.ma2.Range r3;
        ucar.unidata.io.RandomAccessFile $r5;
        ucar.ma2.IndexIterator r4;
        ucar.nc2.iosp.nexrad2.Level2Record r0;
        int i0, $i1, $i2, i3;

        r1 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        r0 := @parameter0: ucar.nc2.iosp.nexrad2.Level2Record;

        i0 := @parameter1: int;

        r3 := @parameter2: ucar.ma2.Range;

        r4 := @parameter3: ucar.ma2.IndexIterator;

        if r0 != null goto label3;

        i3 = virtualinvoke r3.<ucar.ma2.Range: int first()>();

     label1:
        $i1 = virtualinvoke r3.<ucar.ma2.Range: int last()>();

        if i3 > $i1 goto label2;

        interfaceinvoke r4.<ucar.ma2.IndexIterator: void setByteNext(byte)>(1);

        $i2 = virtualinvoke r3.<ucar.ma2.Range: int stride()>();

        i3 = i3 + $i2;

        goto label1;

     label2:
        return;

     label3:
        $r2 = r1.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r5 = $r2.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: ucar.unidata.io.RandomAccessFile raf>;

        virtualinvoke r0.<ucar.nc2.iosp.nexrad2.Level2Record: void readData(ucar.unidata.io.RandomAccessFile,int,ucar.ma2.Range,ucar.ma2.IndexIterator)>($r5, i0, r3, r4);

        return;
    }

    public void close() throws java.io.IOException
    {
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r0;
        ucar.nc2.iosp.nexrad2.Level2VolumeScan $r1;
        ucar.unidata.io.RandomAccessFile $r2;

        r0 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        $r1 = r0.<ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: ucar.nc2.iosp.nexrad2.Level2VolumeScan volScan>;

        $r2 = $r1.<ucar.nc2.iosp.nexrad2.Level2VolumeScan: ucar.unidata.io.RandomAccessFile raf>;

        virtualinvoke $r2.<ucar.unidata.io.RandomAccessFile: void close()>();

        return;
    }

    public java.lang.String getFileTypeId()
    {
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r0;

        r0 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        return "NEXRAD-2";
    }

    public java.lang.String getFileTypeDescription()
    {
        ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider r0;

        r0 := @this: ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider;

        return "NEXRAD Level-II Base Data";
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: float MISSING_FLOAT> = #NaNF;

        <ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: int MISSING_INT> = -9999;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/iosp/nexrad2/Nexrad2IOServiceProvider;");

        <ucar.nc2.iosp.nexrad2.Nexrad2IOServiceProvider: org.slf4j.Logger logger> = $r0;

        return;
    }
}
