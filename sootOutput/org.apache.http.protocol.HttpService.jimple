public class org.apache.http.protocol.HttpService extends java.lang.Object
{
    private volatile org.apache.http.params.HttpParams params;
    private volatile org.apache.http.protocol.HttpProcessor processor;
    private volatile org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver;
    private volatile org.apache.http.ConnectionReuseStrategy connStrategy;
    private volatile org.apache.http.HttpResponseFactory responseFactory;
    private volatile org.apache.http.protocol.HttpExpectationVerifier expectationVerifier;

    public void <init>(org.apache.http.protocol.HttpProcessor, org.apache.http.ConnectionReuseStrategy, org.apache.http.HttpResponseFactory, org.apache.http.protocol.HttpRequestHandlerResolver, org.apache.http.protocol.HttpExpectationVerifier, org.apache.http.params.HttpParams)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.protocol.HttpExpectationVerifier r6;
        org.apache.http.protocol.HttpProcessor r1;
        org.apache.http.protocol.HttpRequestHandlerResolver r5;
        java.lang.IllegalArgumentException $r7, $r8, $r9, $r10;
        org.apache.http.HttpResponseFactory r3;
        org.apache.http.ConnectionReuseStrategy r2;
        org.apache.http.params.HttpParams r4;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.protocol.HttpProcessor;

        r2 := @parameter1: org.apache.http.ConnectionReuseStrategy;

        r3 := @parameter2: org.apache.http.HttpResponseFactory;

        r5 := @parameter3: org.apache.http.protocol.HttpRequestHandlerResolver;

        r6 := @parameter4: org.apache.http.protocol.HttpExpectationVerifier;

        r4 := @parameter5: org.apache.http.params.HttpParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.ConnectionReuseStrategy connStrategy> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier> = null;

        if r1 != null goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP processor may not be null");

        throw $r10;

     label1:
        if r2 != null goto label2;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection reuse strategy may not be null");

        throw $r9;

     label2:
        if r3 != null goto label3;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Response factory may not be null");

        throw $r8;

     label3:
        if r4 != null goto label4;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r7;

     label4:
        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor> = r1;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.ConnectionReuseStrategy connStrategy> = r2;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory> = r3;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver> = r5;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier> = r6;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params> = r4;

        return;
    }

    public void <init>(org.apache.http.protocol.HttpProcessor, org.apache.http.ConnectionReuseStrategy, org.apache.http.HttpResponseFactory, org.apache.http.protocol.HttpRequestHandlerResolver, org.apache.http.params.HttpParams)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.ConnectionReuseStrategy r2;
        org.apache.http.params.HttpParams r5;
        org.apache.http.protocol.HttpProcessor r1;
        org.apache.http.protocol.HttpRequestHandlerResolver r4;
        org.apache.http.HttpResponseFactory r3;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.protocol.HttpProcessor;

        r2 := @parameter1: org.apache.http.ConnectionReuseStrategy;

        r3 := @parameter2: org.apache.http.HttpResponseFactory;

        r4 := @parameter3: org.apache.http.protocol.HttpRequestHandlerResolver;

        r5 := @parameter4: org.apache.http.params.HttpParams;

        specialinvoke r0.<org.apache.http.protocol.HttpService: void <init>(org.apache.http.protocol.HttpProcessor,org.apache.http.ConnectionReuseStrategy,org.apache.http.HttpResponseFactory,org.apache.http.protocol.HttpRequestHandlerResolver,org.apache.http.protocol.HttpExpectationVerifier,org.apache.http.params.HttpParams)>(r1, r2, r3, r4, null, r5);

        return;
    }

    public void <init>(org.apache.http.protocol.HttpProcessor, org.apache.http.ConnectionReuseStrategy, org.apache.http.HttpResponseFactory)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.ConnectionReuseStrategy r2;
        org.apache.http.protocol.HttpProcessor r1;
        org.apache.http.HttpResponseFactory r3;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.protocol.HttpProcessor;

        r2 := @parameter1: org.apache.http.ConnectionReuseStrategy;

        r3 := @parameter2: org.apache.http.HttpResponseFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.ConnectionReuseStrategy connStrategy> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory> = null;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier> = null;

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void setHttpProcessor(org.apache.http.protocol.HttpProcessor)>(r1);

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy)>(r2);

        virtualinvoke r0.<org.apache.http.protocol.HttpService: void setResponseFactory(org.apache.http.HttpResponseFactory)>(r3);

        return;
    }

    public void setHttpProcessor(org.apache.http.protocol.HttpProcessor)
    {
        org.apache.http.protocol.HttpProcessor r0;
        org.apache.http.protocol.HttpService r1;
        java.lang.IllegalArgumentException $r2;

        r1 := @this: org.apache.http.protocol.HttpService;

        r0 := @parameter0: org.apache.http.protocol.HttpProcessor;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP processor may not be null");

        throw $r2;

     label1:
        r1.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor> = r0;

        return;
    }

    public void setConnReuseStrategy(org.apache.http.ConnectionReuseStrategy)
    {
        org.apache.http.protocol.HttpService r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.http.ConnectionReuseStrategy r0;

        r1 := @this: org.apache.http.protocol.HttpService;

        r0 := @parameter0: org.apache.http.ConnectionReuseStrategy;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Connection reuse strategy may not be null");

        throw $r2;

     label1:
        r1.<org.apache.http.protocol.HttpService: org.apache.http.ConnectionReuseStrategy connStrategy> = r0;

        return;
    }

    public void setResponseFactory(org.apache.http.HttpResponseFactory)
    {
        org.apache.http.protocol.HttpService r1;
        java.lang.IllegalArgumentException $r2;
        org.apache.http.HttpResponseFactory r0;

        r1 := @this: org.apache.http.protocol.HttpService;

        r0 := @parameter0: org.apache.http.HttpResponseFactory;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Response factory may not be null");

        throw $r2;

     label1:
        r1.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory> = r0;

        return;
    }

    public void setParams(org.apache.http.params.HttpParams)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.params.HttpParams r1;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.params.HttpParams;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params> = r1;

        return;
    }

    public void setHandlerResolver(org.apache.http.protocol.HttpRequestHandlerResolver)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.protocol.HttpRequestHandlerResolver r1;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.protocol.HttpRequestHandlerResolver;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver> = r1;

        return;
    }

    public void setExpectationVerifier(org.apache.http.protocol.HttpExpectationVerifier)
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.protocol.HttpExpectationVerifier r1;

        r0 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.protocol.HttpExpectationVerifier;

        r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier> = r1;

        return;
    }

    public org.apache.http.params.HttpParams getParams()
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.params.HttpParams $r1;

        r0 := @this: org.apache.http.protocol.HttpService;

        $r1 = r0.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        return $r1;
    }

    public void handleRequest(org.apache.http.HttpServerConnection, org.apache.http.protocol.HttpContext) throws java.io.IOException, org.apache.http.HttpException
    {
        org.apache.http.protocol.HttpExpectationVerifier $r26, $r28;
        org.apache.http.StatusLine $r44;
        org.apache.http.params.DefaultedHttpParams $r3, $r14, $r23, $r33, $r40;
        boolean $z0, $z1, $z2, $z3;
        org.apache.http.HttpEntity $r10;
        org.apache.http.HttpRequest $r2;
        org.apache.http.HttpException $r29, $r36;
        org.apache.http.HttpVersion $r11, $r20, $r30, $r37;
        org.apache.http.HttpServerConnection r1;
        org.apache.http.protocol.HttpService r5;
        int $i0;
        org.apache.http.HttpEntityEnclosingRequest $r9, $r18, $r19, $r27;
        org.apache.http.protocol.HttpProcessor $r7, $r17;
        org.apache.http.HttpResponseFactory $r12, $r21, $r31, $r38;
        org.apache.http.protocol.HttpContext r0;
        org.apache.http.ConnectionReuseStrategy $r8;
        org.apache.http.params.HttpParams $r4, $r6, $r15, $r16, $r24, $r25, $r34, $r35, $r41, $r42;
        org.apache.http.HttpResponse $r13, $r22, $r32, $r39, r43;

        r5 := @this: org.apache.http.protocol.HttpService;

        r1 := @parameter0: org.apache.http.HttpServerConnection;

        r0 := @parameter1: org.apache.http.protocol.HttpContext;

        interfaceinvoke r0.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.connection", r1);

        r43 = null;

     label01:
        $r2 = interfaceinvoke r1.<org.apache.http.HttpServerConnection: org.apache.http.HttpRequest receiveRequestHeader()>();

        $r3 = new org.apache.http.params.DefaultedHttpParams;

        $r4 = interfaceinvoke $r2.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $r6 = r5.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r3.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r4, $r6);

        interfaceinvoke $r2.<org.apache.http.HttpRequest: void setParams(org.apache.http.params.HttpParams)>($r3);

        $z0 = $r2 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z0 == 0 goto label07;

        $r18 = (org.apache.http.HttpEntityEnclosingRequest) $r2;

        $z3 = interfaceinvoke $r18.<org.apache.http.HttpEntityEnclosingRequest: boolean expectContinue()>();

        if $z3 == 0 goto label06;

        $r21 = r5.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        $r20 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

        $r22 = interfaceinvoke $r21.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>($r20, 100, r0);

        r43 = $r22;

        $r23 = new org.apache.http.params.DefaultedHttpParams;

        $r24 = interfaceinvoke $r22.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r25 = r5.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r23.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r24, $r25);

        interfaceinvoke $r22.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>($r23);

        $r26 = r5.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier>;

        if $r26 == null goto label05;

     label02:
        $r28 = r5.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpExpectationVerifier expectationVerifier>;

        interfaceinvoke $r28.<org.apache.http.protocol.HttpExpectationVerifier: void verify(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r2, $r22, r0);

     label03:
        goto label05;

     label04:
        $r36 := @caughtexception;

        $r38 = r5.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        $r37 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $r39 = interfaceinvoke $r38.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>($r37, 500, r0);

        r43 = $r39;

        $r40 = new org.apache.http.params.DefaultedHttpParams;

        $r41 = interfaceinvoke $r39.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r42 = r5.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r40.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r41, $r42);

        interfaceinvoke $r39.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>($r40);

        virtualinvoke r5.<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)>($r36, $r39);

     label05:
        $r44 = interfaceinvoke r43.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>();

        $i0 = interfaceinvoke $r44.<org.apache.http.StatusLine: int getStatusCode()>();

        if $i0 >= 200 goto label07;

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)>(r43);

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void flush()>();

        r43 = null;

        $r27 = (org.apache.http.HttpEntityEnclosingRequest) $r2;

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>($r27);

        goto label07;

     label06:
        $r19 = (org.apache.http.HttpEntityEnclosingRequest) $r2;

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void receiveRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>($r19);

     label07:
        interfaceinvoke r0.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.request", $r2);

        if r43 != null goto label08;

        $r12 = r5.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        $r11 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_1>;

        $r13 = interfaceinvoke $r12.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>($r11, 200, r0);

        r43 = $r13;

        $r14 = new org.apache.http.params.DefaultedHttpParams;

        $r15 = interfaceinvoke $r13.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r16 = r5.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r14.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r15, $r16);

        interfaceinvoke $r13.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>($r14);

        $r17 = r5.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor>;

        interfaceinvoke $r17.<org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>($r2, r0);

        virtualinvoke r5.<org.apache.http.protocol.HttpService: void doService(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>($r2, $r13, r0);

     label08:
        $z1 = $r2 instanceof org.apache.http.HttpEntityEnclosingRequest;

        if $z1 == 0 goto label09;

        $r9 = (org.apache.http.HttpEntityEnclosingRequest) $r2;

        $r10 = interfaceinvoke $r9.<org.apache.http.HttpEntityEnclosingRequest: org.apache.http.HttpEntity getEntity()>();

        staticinvoke <org.apache.http.util.EntityUtils: void consume(org.apache.http.HttpEntity)>($r10);

     label09:
        goto label11;

     label10:
        $r29 := @caughtexception;

        $r31 = r5.<org.apache.http.protocol.HttpService: org.apache.http.HttpResponseFactory responseFactory>;

        $r30 = <org.apache.http.HttpVersion: org.apache.http.HttpVersion HTTP_1_0>;

        $r32 = interfaceinvoke $r31.<org.apache.http.HttpResponseFactory: org.apache.http.HttpResponse newHttpResponse(org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>($r30, 500, r0);

        r43 = $r32;

        $r33 = new org.apache.http.params.DefaultedHttpParams;

        $r34 = interfaceinvoke $r32.<org.apache.http.HttpResponse: org.apache.http.params.HttpParams getParams()>();

        $r35 = r5.<org.apache.http.protocol.HttpService: org.apache.http.params.HttpParams params>;

        specialinvoke $r33.<org.apache.http.params.DefaultedHttpParams: void <init>(org.apache.http.params.HttpParams,org.apache.http.params.HttpParams)>($r34, $r35);

        interfaceinvoke $r32.<org.apache.http.HttpResponse: void setParams(org.apache.http.params.HttpParams)>($r33);

        virtualinvoke r5.<org.apache.http.protocol.HttpService: void handleException(org.apache.http.HttpException,org.apache.http.HttpResponse)>($r29, $r32);

     label11:
        interfaceinvoke r0.<org.apache.http.protocol.HttpContext: void setAttribute(java.lang.String,java.lang.Object)>("http.response", r43);

        $r7 = r5.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpProcessor processor>;

        interfaceinvoke $r7.<org.apache.http.protocol.HttpProcessor: void process(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r43, r0);

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void sendResponseHeader(org.apache.http.HttpResponse)>(r43);

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void sendResponseEntity(org.apache.http.HttpResponse)>(r43);

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void flush()>();

        $r8 = r5.<org.apache.http.protocol.HttpService: org.apache.http.ConnectionReuseStrategy connStrategy>;

        $z2 = interfaceinvoke $r8.<org.apache.http.ConnectionReuseStrategy: boolean keepAlive(org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r43, r0);

        if $z2 != 0 goto label12;

        interfaceinvoke r1.<org.apache.http.HttpServerConnection: void close()>();

     label12:
        return;

        catch org.apache.http.HttpException from label02 to label03 with label04;
        catch org.apache.http.HttpException from label01 to label09 with label10;
    }

    protected void handleException(org.apache.http.HttpException, org.apache.http.HttpResponse)
    {
        byte[] $r2;
        org.apache.http.protocol.HttpService r4;
        org.apache.http.entity.ByteArrayEntity $r3;
        org.apache.http.HttpException r0;
        org.apache.http.HttpResponse r1;
        java.lang.String $r5, r6;
        boolean $z0, $z1, $z2;

        r4 := @this: org.apache.http.protocol.HttpService;

        r0 := @parameter0: org.apache.http.HttpException;

        r1 := @parameter1: org.apache.http.HttpResponse;

        $z0 = r0 instanceof org.apache.http.MethodNotSupportedException;

        if $z0 == 0 goto label1;

        interfaceinvoke r1.<org.apache.http.HttpResponse: void setStatusCode(int)>(501);

        goto label4;

     label1:
        $z1 = r0 instanceof org.apache.http.UnsupportedHttpVersionException;

        if $z1 == 0 goto label2;

        interfaceinvoke r1.<org.apache.http.HttpResponse: void setStatusCode(int)>(505);

        goto label4;

     label2:
        $z2 = r0 instanceof org.apache.http.ProtocolException;

        if $z2 == 0 goto label3;

        interfaceinvoke r1.<org.apache.http.HttpResponse: void setStatusCode(int)>(400);

        goto label4;

     label3:
        interfaceinvoke r1.<org.apache.http.HttpResponse: void setStatusCode(int)>(500);

     label4:
        $r5 = virtualinvoke r0.<org.apache.http.HttpException: java.lang.String getMessage()>();

        r6 = $r5;

        if $r5 != null goto label5;

        r6 = virtualinvoke r0.<org.apache.http.HttpException: java.lang.String toString()>();

     label5:
        $r2 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>(r6);

        $r3 = new org.apache.http.entity.ByteArrayEntity;

        specialinvoke $r3.<org.apache.http.entity.ByteArrayEntity: void <init>(byte[])>($r2);

        virtualinvoke $r3.<org.apache.http.entity.ByteArrayEntity: void setContentType(java.lang.String)>("text/plain; charset=US-ASCII");

        interfaceinvoke r1.<org.apache.http.HttpResponse: void setEntity(org.apache.http.HttpEntity)>($r3);

        return;
    }

    protected void doService(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext) throws org.apache.http.HttpException, java.io.IOException
    {
        org.apache.http.protocol.HttpService r0;
        org.apache.http.protocol.HttpRequestHandlerResolver $r1, $r7;
        org.apache.http.HttpRequest r3;
        org.apache.http.protocol.HttpRequestHandler r8;
        org.apache.http.RequestLine $r5;
        org.apache.http.protocol.HttpContext r4;
        org.apache.http.HttpResponse r2;
        java.lang.String $r6;

        r0 := @this: org.apache.http.protocol.HttpService;

        r3 := @parameter0: org.apache.http.HttpRequest;

        r2 := @parameter1: org.apache.http.HttpResponse;

        r4 := @parameter2: org.apache.http.protocol.HttpContext;

        r8 = null;

        $r1 = r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver>;

        if $r1 == null goto label1;

        $r5 = interfaceinvoke r3.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>();

        $r6 = interfaceinvoke $r5.<org.apache.http.RequestLine: java.lang.String getUri()>();

        $r7 = r0.<org.apache.http.protocol.HttpService: org.apache.http.protocol.HttpRequestHandlerResolver handlerResolver>;

        r8 = interfaceinvoke $r7.<org.apache.http.protocol.HttpRequestHandlerResolver: org.apache.http.protocol.HttpRequestHandler lookup(java.lang.String)>($r6);

     label1:
        if r8 == null goto label2;

        interfaceinvoke r8.<org.apache.http.protocol.HttpRequestHandler: void handle(org.apache.http.HttpRequest,org.apache.http.HttpResponse,org.apache.http.protocol.HttpContext)>(r3, r2, r4);

        goto label3;

     label2:
        interfaceinvoke r2.<org.apache.http.HttpResponse: void setStatusCode(int)>(501);

     label3:
        return;
    }
}
