class ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep extends java.lang.Object implements ucar.nc2.dt.RadialDatasetSweep$Sweep
{
    double meanElevation;
    double meanAzimuth;
    int sweepno;
    int nrays;
    int ngates;
    ucar.nc2.Variable sweepVar;
    final ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1;

    void <init>(ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable, ucar.nc2.Variable, int, int, int)
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable r1;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        int i0, i1, i2;
        ucar.nc2.Variable r2;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        r1 := @parameter0: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable;

        r2 := @parameter1: ucar.nc2.Variable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: double meanElevation> = #NaN;

        r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: double meanAzimuth> = #NaN;

        r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: int sweepno> = i0;

        r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: int nrays> = i1;

        r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: int ngates> = i2;

        r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.Variable sweepVar> = r2;

        return;
    }

    public ucar.nc2.Variable getsweepVar()
    {
        ucar.nc2.Variable $r1;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        $r1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.Variable sweepVar>;

        return $r1;
    }

    public float[] readData() throws java.io.IOException
    {
        float[] $r12, $r13;
        byte $b2, $b3;
        int[] $r2, r4;
        int $i0, i1, $i4, i5, i6, i7;
        ucar.nc2.dt.radial.Netcdf2Dataset $r6;
        ucar.nc2.Variable $r1, $r3, $r7;
        java.lang.String $r16;
        boolean $z0;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        ucar.ma2.IndexIterator $r9;
        java.io.IOException $r15;
        ucar.ma2.Array $r8;
        ucar.ma2.InvalidRangeException $r14;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable $r5;
        float $f0;
        java.lang.Class $r10;
        java.lang.Object $r11;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        $r1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.Variable sweepVar>;

        $r2 = virtualinvoke $r1.<ucar.nc2.Variable: int[] getShape()>();

        $r3 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.Variable sweepVar>;

        $i0 = virtualinvoke $r3.<ucar.nc2.Variable: int getRank()>();

        r4 = newarray (int)[$i0];

        $r5 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1>;

        $r6 = $r5.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable: ucar.nc2.dt.radial.Netcdf2Dataset this$0>;

        $z0 = staticinvoke <ucar.nc2.dt.radial.Netcdf2Dataset: boolean access$100(ucar.nc2.dt.radial.Netcdf2Dataset)>($r6);

        if $z0 == 0 goto label01;

        $i4 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: int sweepno>;

        r4[0] = $i4;

        r4[1] = 0;

        $r2[0] = 1;

     label01:
        $r7 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.Variable sweepVar>;

        $r8 = virtualinvoke $r7.<ucar.nc2.Variable: ucar.ma2.Array read(int[],int[])>(r4, $r2);

     label02:
        goto label04;

     label03:
        $r14 := @caughtexception;

        $r15 = new java.io.IOException;

        $r16 = virtualinvoke $r14.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label04:
        i5 = $r2[0];

        i1 = $r2[1];

        $r9 = virtualinvoke $r8.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        i6 = 0;

     label05:
        if i6 >= i5 goto label10;

        i7 = 0;

     label06:
        if i7 >= i1 goto label09;

        $f0 = interfaceinvoke $r9.<ucar.ma2.IndexIterator: float getFloatNext()>();

        $b2 = $f0 cmpl -32768.0F;

        if $b2 == 0 goto label07;

        $b3 = $f0 cmpl -99900.0F;

        if $b3 != 0 goto label08;

     label07:
        interfaceinvoke $r9.<ucar.ma2.IndexIterator: void setFloatCurrent(float)>(#NaNF);

     label08:
        i7 = i7 + 1;

        goto label06;

     label09:
        i6 = i6 + 1;

        goto label05;

     label10:
        $r10 = <java.lang.Float: java.lang.Class TYPE>;

        $r11 = virtualinvoke $r8.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r10);

        $r12 = (float[]) $r11;

        $r13 = (float[]) $r12;

        return $r13;

        catch ucar.ma2.InvalidRangeException from label01 to label02 with label03;
    }

    public float[] readData(int) throws java.io.IOException
    {
        float[] $r12, $r13;
        byte $b2, $b3;
        int[] $r2, r4;
        int $i0, i1, $i4, i5, i6;
        ucar.nc2.dt.radial.Netcdf2Dataset $r6;
        ucar.nc2.Variable $r1, $r3, $r7;
        java.lang.String $r16;
        boolean $z0;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        ucar.ma2.IndexIterator $r9;
        java.io.IOException $r15;
        ucar.ma2.Array $r8;
        ucar.ma2.InvalidRangeException $r14;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable $r5;
        float $f0;
        java.lang.Class $r10;
        java.lang.Object $r11;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        i1 := @parameter0: int;

        $r1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.Variable sweepVar>;

        $r2 = virtualinvoke $r1.<ucar.nc2.Variable: int[] getShape()>();

        $r3 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.Variable sweepVar>;

        $i0 = virtualinvoke $r3.<ucar.nc2.Variable: int getRank()>();

        r4 = newarray (int)[$i0];

        $r5 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1>;

        $r6 = $r5.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable: ucar.nc2.dt.radial.Netcdf2Dataset this$0>;

        $z0 = staticinvoke <ucar.nc2.dt.radial.Netcdf2Dataset: boolean access$100(ucar.nc2.dt.radial.Netcdf2Dataset)>($r6);

        if $z0 == 0 goto label1;

        $i4 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: int sweepno>;

        r4[0] = $i4;

        r4[1] = i1;

        $r2[0] = 1;

        $r2[1] = 1;

        goto label2;

     label1:
        $r2[0] = 1;

        r4[0] = i1;

     label2:
        $r7 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.Variable sweepVar>;

        $r8 = virtualinvoke $r7.<ucar.nc2.Variable: ucar.ma2.Array read(int[],int[])>(r4, $r2);

     label3:
        goto label5;

     label4:
        $r14 := @caughtexception;

        $r15 = new java.io.IOException;

        $r16 = virtualinvoke $r14.<ucar.ma2.InvalidRangeException: java.lang.String getMessage()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r15;

     label5:
        i5 = $r2[1];

        $r9 = virtualinvoke $r8.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

        i6 = 0;

     label6:
        if i6 >= i5 goto label9;

        $f0 = interfaceinvoke $r9.<ucar.ma2.IndexIterator: float getFloatNext()>();

        $b2 = $f0 cmpl -32768.0F;

        if $b2 == 0 goto label7;

        $b3 = $f0 cmpl -99900.0F;

        if $b3 != 0 goto label8;

     label7:
        interfaceinvoke $r9.<ucar.ma2.IndexIterator: void setFloatCurrent(float)>(#NaNF);

     label8:
        i6 = i6 + 1;

        goto label6;

     label9:
        $r10 = <java.lang.Float: java.lang.Class TYPE>;

        $r11 = virtualinvoke $r8.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r10);

        $r12 = (float[]) $r11;

        $r13 = (float[]) $r12;

        return $r13;

        catch ucar.ma2.InvalidRangeException from label2 to label3 with label4;
    }

    private void setMeanElevation()
    {
        float[] $r15, r16;
        int $i0;
        ucar.nc2.dt.radial.Netcdf2Dataset $r2, $r4, $r9;
        ucar.nc2.Variable $r11;
        java.lang.Number $r7;
        boolean $z0;
        double $d0, $d1;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        java.io.IOException $r17;
        ucar.ma2.Array $r12;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable $r1, $r3, $r8;
        ucar.nc2.Attribute $r6;
        float $f0;
        java.lang.Class $r13;
        java.lang.Object $r14;
        ucar.nc2.dataset.NetcdfDataset $r5, $r10;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        $r1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1>;

        $r2 = $r1.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable: ucar.nc2.dt.radial.Netcdf2Dataset this$0>;

        $z0 = staticinvoke <ucar.nc2.dt.radial.Netcdf2Dataset: boolean access$100(ucar.nc2.dt.radial.Netcdf2Dataset)>($r2);

        if $z0 == 0 goto label4;

     label1:
        $r8 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1>;

        $r9 = $r8.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable: ucar.nc2.dt.radial.Netcdf2Dataset this$0>;

        $r10 = staticinvoke <ucar.nc2.dt.radial.Netcdf2Dataset: ucar.nc2.dataset.NetcdfDataset access$200(ucar.nc2.dt.radial.Netcdf2Dataset)>($r9);

        $r11 = virtualinvoke $r10.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("sweep");

        $r12 = virtualinvoke $r11.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r13 = <java.lang.Float: java.lang.Class TYPE>;

        $r14 = virtualinvoke $r12.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r13);

        $r15 = (float[]) $r14;

        r16 = (float[]) $r15;

        $i0 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: int sweepno>;

        $f0 = r16[$i0];

        $d1 = (double) $f0;

        r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: double meanElevation> = $d1;

     label2:
        goto label5;

     label3:
        $r17 := @caughtexception;

        virtualinvoke $r17.<java.io.IOException: void printStackTrace()>();

        r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: double meanElevation> = 0.0;

        goto label5;

     label4:
        $r3 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1>;

        $r4 = $r3.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable: ucar.nc2.dt.radial.Netcdf2Dataset this$0>;

        $r5 = staticinvoke <ucar.nc2.dt.radial.Netcdf2Dataset: ucar.nc2.dataset.NetcdfDataset access$200(ucar.nc2.dt.radial.Netcdf2Dataset)>($r4);

        $r6 = virtualinvoke $r5.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttribute(java.lang.String)>("Elevation");

        $r7 = virtualinvoke $r6.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $d0 = virtualinvoke $r7.<java.lang.Number: double doubleValue()>();

        r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: double meanElevation> = $d0;

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public float getMeanElevation()
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        float $f0;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        $d0 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: double meanElevation>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: void setMeanElevation()>();

     label1:
        $d1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: double meanElevation>;

        $f0 = (float) $d1;

        return $f0;
    }

    public double meanDouble(ucar.ma2.Array)
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r2;
        ucar.ma2.IndexIterator $r1;
        ucar.ma2.Array r0;
        int i0;
        boolean $z0, $z1;
        double $d0, $d1, $d2, d3;

        r2 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        r0 := @parameter0: ucar.ma2.Array;

        d3 = 0.0;

        i0 = 0;

        $r1 = virtualinvoke r0.<ucar.ma2.Array: ucar.ma2.IndexIterator getIndexIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $d2 = interfaceinvoke $r1.<ucar.ma2.IndexIterator: double getDoubleNext()>();

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        if $z1 != 0 goto label2;

        d3 = d3 + $d2;

        i0 = i0 + 1;

     label2:
        goto label1;

     label3:
        $d0 = (double) i0;

        $d1 = d3 / $d0;

        return $d1;
    }

    public int getGateNumber()
    {
        int $i0;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        $i0 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: int ngates>;

        return $i0;
    }

    public int getRadialNumber()
    {
        int $i0;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        $i0 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: int nrays>;

        return $i0;
    }

    public ucar.nc2.dt.RadialDatasetSweep$Type getType()
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        return null;
    }

    public ucar.unidata.geoloc.EarthLocation getOrigin(int)
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable $r1;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        ucar.unidata.geoloc.EarthLocation $r3;
        int i0;
        ucar.nc2.dt.radial.Netcdf2Dataset $r2;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1>;

        $r2 = $r1.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable: ucar.nc2.dt.radial.Netcdf2Dataset this$0>;

        $r3 = $r2.<ucar.nc2.dt.radial.Netcdf2Dataset: ucar.unidata.geoloc.EarthLocation origin>;

        return $r3;
    }

    public java.util.Date getStartingTime()
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable $r1;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        java.util.Date $r3;
        ucar.nc2.dt.radial.Netcdf2Dataset $r2;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        $r1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1>;

        $r2 = $r1.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable: ucar.nc2.dt.radial.Netcdf2Dataset this$0>;

        $r3 = staticinvoke <ucar.nc2.dt.radial.Netcdf2Dataset: java.util.Date access$300(ucar.nc2.dt.radial.Netcdf2Dataset)>($r2);

        return $r3;
    }

    public java.util.Date getEndingTime()
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable $r1;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        java.util.Date $r3;
        ucar.nc2.dt.radial.Netcdf2Dataset $r2;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        $r1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1>;

        $r2 = $r1.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable: ucar.nc2.dt.radial.Netcdf2Dataset this$0>;

        $r3 = staticinvoke <ucar.nc2.dt.radial.Netcdf2Dataset: java.util.Date access$400(ucar.nc2.dt.radial.Netcdf2Dataset)>($r2);

        return $r3;
    }

    public int getSweepIndex()
    {
        int $i0;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        $i0 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: int sweepno>;

        return $i0;
    }

    private void setMeanAzimuth()
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: double meanAzimuth> = 0.0;

        return;
    }

    public float getMeanAzimuth()
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        float $f0;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        $d0 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: double meanAzimuth>;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: void setMeanAzimuth()>();

     label1:
        $d1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: double meanAzimuth>;

        $f0 = (float) $d1;

        return $f0;
    }

    public boolean isConic()
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        return 1;
    }

    public float getElevation(int) throws java.io.IOException
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        int i0;
        float $f0;
        double $d0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        i0 := @parameter0: int;

        $d0 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: double meanElevation>;

        $f0 = (float) $d0;

        return $f0;
    }

    public float[] getElevation() throws java.io.IOException
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        int $i0, $i1, i2;
        float $f0;
        float[] r1;
        double $d0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        $i0 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: int nrays>;

        r1 = newarray (float)[$i0];

        i2 = 0;

     label1:
        $i1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: int nrays>;

        if i2 >= $i1 goto label2;

        $d0 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: double meanElevation>;

        $f0 = (float) $d0;

        r1[i2] = $f0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r1;
    }

    public float[] getAzimuth() throws java.io.IOException
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        float[] $r7, $r8;
        java.io.IOException $r9;
        ucar.ma2.Array r10;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable $r1;
        ucar.nc2.dt.radial.Netcdf2Dataset $r2;
        ucar.nc2.Variable $r4;
        java.lang.Class $r5;
        java.lang.Object $r6;
        ucar.nc2.dataset.NetcdfDataset $r3;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        r10 = null;

     label1:
        $r1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1>;

        $r2 = $r1.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable: ucar.nc2.dt.radial.Netcdf2Dataset this$0>;

        $r3 = staticinvoke <ucar.nc2.dt.radial.Netcdf2Dataset: ucar.nc2.dataset.NetcdfDataset access$200(ucar.nc2.dt.radial.Netcdf2Dataset)>($r2);

        $r4 = virtualinvoke $r3.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("Azimuth");

        r10 = virtualinvoke $r4.<ucar.nc2.Variable: ucar.ma2.Array read()>();

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        virtualinvoke $r9.<java.io.IOException: void printStackTrace()>();

        r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: double meanElevation> = 0.0;

     label4:
        $r5 = <java.lang.Float: java.lang.Class TYPE>;

        $r6 = virtualinvoke r10.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r5);

        $r7 = (float[]) $r6;

        $r8 = (float[]) $r7;

        return $r8;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public float getAzimuth(int) throws java.io.IOException
    {
        int[] r8, $r9;
        int i0, $i1, $i2;
        ucar.nc2.dt.radial.Netcdf2Dataset $r2, $r7;
        ucar.nc2.Variable $r4;
        boolean $z0;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        java.io.IOException $r11;
        ucar.ma2.Array $r5, r12;
        ucar.ma2.InvalidRangeException $r10;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable $r1, $r6;
        ucar.ma2.Index $r13, $r14;
        float $f0;
        ucar.nc2.dataset.NetcdfDataset $r3;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        i0 := @parameter0: int;

        r12 = null;

        if null != null goto label6;

     label1:
        $r1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1>;

        $r2 = $r1.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable: ucar.nc2.dt.radial.Netcdf2Dataset this$0>;

        $r3 = staticinvoke <ucar.nc2.dt.radial.Netcdf2Dataset: ucar.nc2.dataset.NetcdfDataset access$200(ucar.nc2.dt.radial.Netcdf2Dataset)>($r2);

        $r4 = virtualinvoke $r3.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("Azimuth");

        $r5 = virtualinvoke $r4.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r6 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1>;

        $r7 = $r6.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable: ucar.nc2.dt.radial.Netcdf2Dataset this$0>;

        $z0 = staticinvoke <ucar.nc2.dt.radial.Netcdf2Dataset: boolean access$100(ucar.nc2.dt.radial.Netcdf2Dataset)>($r7);

        if $z0 == 0 goto label2;

        r8 = newarray (int)[2];

        $i1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: int sweepno>;

        r8[0] = $i1;

        r8[1] = 0;

        $r9 = newarray (int)[2];

        $r9[0] = 1;

        $i2 = virtualinvoke r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: int getRadialNumber()>();

        $r9[1] = $i2;

        r12 = virtualinvoke $r5.<ucar.ma2.Array: ucar.ma2.Array section(int[],int[])>(r8, $r9);

        goto label3;

     label2:
        r12 = $r5;

     label3:
        goto label6;

     label4:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.io.IOException: void printStackTrace()>();

        goto label6;

     label5:
        $r10 := @caughtexception;

        virtualinvoke $r10.<ucar.ma2.InvalidRangeException: void printStackTrace()>();

     label6:
        $r13 = virtualinvoke r12.<ucar.ma2.Array: ucar.ma2.Index getIndex()>();

        $r14 = virtualinvoke $r13.<ucar.ma2.Index: ucar.ma2.Index set(int)>(i0);

        $f0 = virtualinvoke r12.<ucar.ma2.Array: float getFloat(ucar.ma2.Index)>($r14);

        return $f0;

        catch java.io.IOException from label1 to label3 with label4;
        catch ucar.ma2.InvalidRangeException from label1 to label3 with label5;
    }

    public float getRadialDistance(int) throws java.io.IOException
    {
        float[] $r8, r9;
        int i0;
        ucar.nc2.dt.radial.Netcdf2Dataset $r2;
        ucar.nc2.Variable $r4;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        ucar.ma2.Array $r5;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable $r1;
        float $f0, $f1, $f2, $f3, f4;
        java.lang.Class $r6;
        java.lang.Object $r7;
        ucar.nc2.dataset.NetcdfDataset $r3;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        i0 := @parameter0: int;

        $f0 = virtualinvoke r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: float getRangeToFirstGate()>();

        $r1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1>;

        $r2 = $r1.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable: ucar.nc2.dt.radial.Netcdf2Dataset this$0>;

        $r3 = staticinvoke <ucar.nc2.dt.radial.Netcdf2Dataset: ucar.nc2.dataset.NetcdfDataset access$200(ucar.nc2.dt.radial.Netcdf2Dataset)>($r2);

        $r4 = virtualinvoke $r3.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Variable findVariable(java.lang.String)>("GateWidth");

        $r5 = virtualinvoke $r4.<ucar.nc2.Variable: ucar.ma2.Array read()>();

        $r6 = <java.lang.Float: java.lang.Class TYPE>;

        $r7 = virtualinvoke $r5.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r6);

        $r8 = (float[]) $r7;

        r9 = (float[]) $r8;

        $f2 = (float) i0;

        $f1 = r9[0];

        $f3 = $f2 * $f1;

        f4 = $f0 + $f3;

        return f4;
    }

    public float getTime(int) throws java.io.IOException
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable $r1;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        java.util.Date $r3;
        int i1;
        ucar.nc2.dt.radial.Netcdf2Dataset $r2;
        float $f0;
        long $l0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        i1 := @parameter0: int;

        $r1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1>;

        $r2 = $r1.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable: ucar.nc2.dt.radial.Netcdf2Dataset this$0>;

        $r3 = staticinvoke <ucar.nc2.dt.radial.Netcdf2Dataset: java.util.Date access$500(ucar.nc2.dt.radial.Netcdf2Dataset)>($r2);

        $l0 = virtualinvoke $r3.<java.util.Date: long getTime()>();

        $f0 = (float) $l0;

        return $f0;
    }

    public float getBeamWidth()
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        return 0.95F;
    }

    public float getNyquistFrequency()
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        return 0.0F;
    }

    public float getRangeToFirstGate()
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable $r1;
        ucar.nc2.Attribute $r4;
        ucar.nc2.dt.radial.Netcdf2Dataset $r2;
        float $f0;
        java.lang.Number $r5;
        ucar.nc2.dataset.NetcdfDataset $r3;
        double $d0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        $r1 = r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable this$1>;

        $r2 = $r1.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable: ucar.nc2.dt.radial.Netcdf2Dataset this$0>;

        $r3 = staticinvoke <ucar.nc2.dt.radial.Netcdf2Dataset: ucar.nc2.dataset.NetcdfDataset access$200(ucar.nc2.dt.radial.Netcdf2Dataset)>($r2);

        $r4 = virtualinvoke $r3.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Attribute findGlobalAttributeIgnoreCase(java.lang.String)>("RangeToFirstGate");

        $r5 = virtualinvoke $r4.<ucar.nc2.Attribute: java.lang.Number getNumericValue()>();

        $d0 = virtualinvoke $r5.<java.lang.Number: double doubleValue()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public float getGateSize()
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;
        float $f0, $f1, $f2;
        java.io.IOException $r1;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

     label1:
        $f0 = virtualinvoke r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: float getRadialDistance(int)>(1);

        $f1 = virtualinvoke r0.<ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep: float getRadialDistance(int)>(0);

        $f2 = $f0 - $f1;

     label2:
        return $f2;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.io.IOException: void printStackTrace()>();

        return 0.0F;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean isGateSizeConstant()
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        return 1;
    }

    public void clearSweepMemory()
    {
        ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep r0;

        r0 := @this: ucar.nc2.dt.radial.Netcdf2Dataset$Netcdf2Variable$Netcdf2Sweep;

        return;
    }
}
