public abstract class org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam extends java.lang.Object implements org.apache.batik.ext.awt.image.codec.util.ImageEncodeParam
{
    public static final int INTENT_PERCEPTUAL;
    public static final int INTENT_RELATIVE;
    public static final int INTENT_SATURATION;
    public static final int INTENT_ABSOLUTE;
    public static final int PNG_FILTER_NONE;
    public static final int PNG_FILTER_SUB;
    public static final int PNG_FILTER_UP;
    public static final int PNG_FILTER_AVERAGE;
    public static final int PNG_FILTER_PAETH;
    protected int bitDepth;
    protected boolean bitDepthSet;
    private boolean useInterlacing;
    private float[] chromaticity;
    private boolean chromaticitySet;
    private float gamma;
    private boolean gammaSet;
    private int[] paletteHistogram;
    private boolean paletteHistogramSet;
    private byte[] ICCProfileData;
    private boolean ICCProfileDataSet;
    private int[] physicalDimension;
    private boolean physicalDimensionSet;
    private org.apache.batik.ext.awt.image.codec.png.PNGSuggestedPaletteEntry[] suggestedPalette;
    private boolean suggestedPaletteSet;
    private int[] significantBits;
    private boolean significantBitsSet;
    private int SRGBIntent;
    private boolean SRGBIntentSet;
    private java.lang.String[] text;
    private boolean textSet;
    private java.util.Date modificationTime;
    private boolean modificationTimeSet;
    boolean transparencySet;
    private java.lang.String[] zText;
    private boolean zTextSet;
    java.util.List chunkType;
    java.util.List chunkData;

    public void <init>()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean bitDepthSet> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean useInterlacing> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: float[] chromaticity> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean chromaticitySet> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean gammaSet> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] paletteHistogram> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean paletteHistogramSet> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: byte[] ICCProfileData> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean ICCProfileDataSet> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] physicalDimension> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean physicalDimensionSet> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: org.apache.batik.ext.awt.image.codec.png.PNGSuggestedPaletteEntry[] suggestedPalette> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean suggestedPaletteSet> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] significantBits> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean significantBitsSet> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean SRGBIntentSet> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.lang.String[] text> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean textSet> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean modificationTimeSet> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean transparencySet> = 0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.lang.String[] zText> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean zTextSet> = 0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.List chunkType> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.List chunkData> = $r2;

        return;
    }

    public static org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam getDefaultEncodeParam(java.awt.image.RenderedImage)
    {
        java.awt.image.RenderedImage r0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB $r4;
        java.awt.image.SampleModel $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray $r3;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette $r5;
        java.awt.image.ColorModel $r1;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.awt.image.RenderedImage;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $z0 = $r1 instanceof java.awt.image.IndexColorModel;

        if $z0 == 0 goto label1;

        $r5 = new org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette;

        specialinvoke $r5.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Palette: void <init>()>();

        return $r5;

     label1:
        $r2 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r2.<java.awt.image.SampleModel: int getNumBands()>();

        if $i0 == 1 goto label2;

        if $i0 != 2 goto label3;

     label2:
        $r3 = new org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray;

        specialinvoke $r3.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$Gray: void <init>()>();

        return $r3;

     label3:
        $r4 = new org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB;

        specialinvoke $r4.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam$RGB: void <init>()>();

        return $r4;
    }

    public abstract void setBitDepth(int);

    public int getBitDepth()
    {
        java.lang.IllegalStateException $r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        int $i0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean bitDepthSet>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam11");

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        $i0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int bitDepth>;

        return $i0;
    }

    public void unsetBitDepth()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean bitDepthSet> = 0;

        return;
    }

    public void setInterlacing(boolean)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        z0 := @parameter0: boolean;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean useInterlacing> = z0;

        return;
    }

    public boolean getInterlacing()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean useInterlacing>;

        return $z0;
    }

    public void unsetBackground()
    {
        java.lang.RuntimeException $r0;
        java.lang.String $r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r2;

        r2 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $r0 = new java.lang.RuntimeException;

        $r1 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam23");

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r0;
    }

    public boolean isBackgroundSet()
    {
        java.lang.RuntimeException $r0;
        java.lang.String $r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r2;

        r2 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $r0 = new java.lang.RuntimeException;

        $r1 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam24");

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r1);

        throw $r0;
    }

    public void setChromaticity(float[])
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r1;
        int $i0;
        float[] r0, $r3;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0 := @parameter0: float[];

        $i0 = lengthof r0;

        if $i0 == 8 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (float[]) $r2;

        r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: float[] chromaticity> = $r3;

        r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean chromaticitySet> = 1;

        return;
    }

    public void setChromaticity(float, float, float, float, float, float, float, float)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r1;
        float[] r0;
        float f0, f1, f2, f3, f4, f5, f6, f7;

        r1 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        f6 := @parameter6: float;

        f7 := @parameter7: float;

        r0 = newarray (float)[8];

        r0[0] = f0;

        r0[1] = f1;

        r0[2] = f2;

        r0[3] = f3;

        r0[4] = f4;

        r0[5] = f5;

        r0[6] = f6;

        r0[7] = f7;

        virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setChromaticity(float[])>(r0);

        return;
    }

    public float[] getChromaticity()
    {
        java.lang.IllegalStateException $r4;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        float[] $r1, $r3;
        java.lang.Object $r2;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean chromaticitySet>;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam12");

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: float[] chromaticity>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (float[]) $r2;

        return $r3;
    }

    public void unsetChromaticity()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: float[] chromaticity> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean chromaticitySet> = 0;

        return;
    }

    public boolean isChromaticitySet()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean chromaticitySet>;

        return $z0;
    }

    public void setGamma(float)
    {
        float f0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        f0 := @parameter0: float;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: float gamma> = f0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean gammaSet> = 1;

        return;
    }

    public float getGamma()
    {
        java.lang.IllegalStateException $r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        float $f0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean gammaSet>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam13");

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        $f0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: float gamma>;

        return $f0;
    }

    public void unsetGamma()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean gammaSet> = 0;

        return;
    }

    public boolean isGammaSet()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean gammaSet>;

        return $z0;
    }

    public void setPaletteHistogram(int[])
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        int[] r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r1 := @parameter0: int[];

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] paletteHistogram> = $r3;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean paletteHistogramSet> = 1;

        return;
    }

    public int[] getPaletteHistogram()
    {
        java.lang.IllegalStateException $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        int[] $r1;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean paletteHistogramSet>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam14");

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] paletteHistogram>;

        return $r1;
    }

    public void unsetPaletteHistogram()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] paletteHistogram> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean paletteHistogramSet> = 0;

        return;
    }

    public boolean isPaletteHistogramSet()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean paletteHistogramSet>;

        return $z0;
    }

    public void setICCProfileData(byte[])
    {
        byte[] r1, $r3;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r1 := @parameter0: byte[];

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: byte[] ICCProfileData> = $r3;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean ICCProfileDataSet> = 1;

        return;
    }

    public byte[] getICCProfileData()
    {
        byte[] $r1, $r3;
        java.lang.IllegalStateException $r4;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        java.lang.Object $r2;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean ICCProfileDataSet>;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam15");

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: byte[] ICCProfileData>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (byte[]) $r2;

        return $r3;
    }

    public void unsetICCProfileData()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: byte[] ICCProfileData> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean ICCProfileDataSet> = 0;

        return;
    }

    public boolean isICCProfileDataSet()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean ICCProfileDataSet>;

        return $z0;
    }

    public void setPhysicalDimension(int[])
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        int[] r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r1 := @parameter0: int[];

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] physicalDimension> = $r3;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean physicalDimensionSet> = 1;

        return;
    }

    public void setPhysicalDimension(int, int, int)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r1;
        int[] r0;
        int i0, i1, i2;

        r1 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r0 = newarray (int)[3];

        r0[0] = i0;

        r0[1] = i1;

        r0[2] = i2;

        virtualinvoke r1.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: void setPhysicalDimension(int[])>(r0);

        return;
    }

    public int[] getPhysicalDimension()
    {
        java.lang.IllegalStateException $r4;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        int[] $r1, $r3;
        java.lang.Object $r2;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean physicalDimensionSet>;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam16");

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] physicalDimension>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        return $r3;
    }

    public void unsetPhysicalDimension()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] physicalDimension> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean physicalDimensionSet> = 0;

        return;
    }

    public boolean isPhysicalDimensionSet()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean physicalDimensionSet>;

        return $z0;
    }

    public void setSuggestedPalette(org.apache.batik.ext.awt.image.codec.png.PNGSuggestedPaletteEntry[])
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGSuggestedPaletteEntry[] r1, $r3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r1 := @parameter0: org.apache.batik.ext.awt.image.codec.png.PNGSuggestedPaletteEntry[];

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.batik.ext.awt.image.codec.png.PNGSuggestedPaletteEntry[]) $r2;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: org.apache.batik.ext.awt.image.codec.png.PNGSuggestedPaletteEntry[] suggestedPalette> = $r3;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean suggestedPaletteSet> = 1;

        return;
    }

    public org.apache.batik.ext.awt.image.codec.png.PNGSuggestedPaletteEntry[] getSuggestedPalette()
    {
        java.lang.IllegalStateException $r4;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGSuggestedPaletteEntry[] $r1, $r3;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean suggestedPaletteSet>;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam17");

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: org.apache.batik.ext.awt.image.codec.png.PNGSuggestedPaletteEntry[] suggestedPalette>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (org.apache.batik.ext.awt.image.codec.png.PNGSuggestedPaletteEntry[]) $r2;

        return $r3;
    }

    public void unsetSuggestedPalette()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: org.apache.batik.ext.awt.image.codec.png.PNGSuggestedPaletteEntry[] suggestedPalette> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean suggestedPaletteSet> = 0;

        return;
    }

    public boolean isSuggestedPaletteSet()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean suggestedPaletteSet>;

        return $z0;
    }

    public void setSignificantBits(int[])
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        int[] r1, $r3;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r1 := @parameter0: int[];

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] significantBits> = $r3;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean significantBitsSet> = 1;

        return;
    }

    public int[] getSignificantBits()
    {
        java.lang.IllegalStateException $r4;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        int[] $r1, $r3;
        java.lang.Object $r2;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean significantBitsSet>;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalStateException;

        $r5 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam18");

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] significantBits>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        return $r3;
    }

    public void unsetSignificantBits()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int[] significantBits> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean significantBitsSet> = 0;

        return;
    }

    public boolean isSignificantBitsSet()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean significantBitsSet>;

        return $z0;
    }

    public void setSRGBIntent(int)
    {
        int i0;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        i0 := @parameter0: int;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int SRGBIntent> = i0;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean SRGBIntentSet> = 1;

        return;
    }

    public int getSRGBIntent()
    {
        java.lang.IllegalStateException $r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        int $i0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean SRGBIntentSet>;

        if $z0 != 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        $r2 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam19");

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label1:
        $i0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int SRGBIntent>;

        return $i0;
    }

    public void unsetSRGBIntent()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean SRGBIntentSet> = 0;

        return;
    }

    public boolean isSRGBIntentSet()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean SRGBIntentSet>;

        return $z0;
    }

    public void setText(java.lang.String[])
    {
        java.lang.String[] r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r1 := @parameter0: java.lang.String[];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.lang.String[] text> = r1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean textSet> = 1;

        return;
    }

    public java.lang.String[] getText()
    {
        java.lang.IllegalStateException $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        java.lang.String[] $r1;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean textSet>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam20");

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.lang.String[] text>;

        return $r1;
    }

    public void unsetText()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.lang.String[] text> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean textSet> = 0;

        return;
    }

    public boolean isTextSet()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean textSet>;

        return $z0;
    }

    public void setModificationTime(java.util.Date)
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        java.util.Date r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r1 := @parameter0: java.util.Date;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.Date modificationTime> = r1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean modificationTimeSet> = 1;

        return;
    }

    public java.util.Date getModificationTime()
    {
        java.lang.IllegalStateException $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        java.util.Date $r1;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean modificationTimeSet>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam21");

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.Date modificationTime>;

        return $r1;
    }

    public void unsetModificationTime()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.Date modificationTime> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean modificationTimeSet> = 0;

        return;
    }

    public boolean isModificationTimeSet()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean modificationTimeSet>;

        return $z0;
    }

    public void unsetTransparency()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean transparencySet> = 0;

        return;
    }

    public boolean isTransparencySet()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean transparencySet>;

        return $z0;
    }

    public void setCompressedText(java.lang.String[])
    {
        java.lang.String[] r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r1 := @parameter0: java.lang.String[];

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.lang.String[] zText> = r1;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean zTextSet> = 1;

        return;
    }

    public java.lang.String[] getCompressedText()
    {
        java.lang.IllegalStateException $r2;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        java.lang.String[] $r1;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean zTextSet>;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        $r3 = staticinvoke <org.apache.batik.ext.awt.image.codec.util.PropertyUtil: java.lang.String getString(java.lang.String)>("PNGEncodeParam22");

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label1:
        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.lang.String[] zText>;

        return $r1;
    }

    public void unsetCompressedText()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.lang.String[] zText> = null;

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean zTextSet> = 0;

        return;
    }

    public boolean isCompressedTextSet()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $z0 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: boolean zTextSet>;

        return $z0;
    }

    public synchronized void addPrivateChunk(java.lang.String, byte[])
    {
        byte[] r3;
        java.util.List $r2, $r4;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        java.lang.Object $r5;
        java.lang.String r1;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: byte[];

        $r2 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.List chunkType>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r4 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.List chunkData>;

        $r5 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5);

        return;
    }

    public synchronized int getNumPrivateChunks()
    {
        int $i0;
        java.util.List $r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.List chunkType>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public synchronized java.lang.String getPrivateChunkType(int)
    {
        java.util.List $r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.List chunkType>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public synchronized byte[] getPrivateChunkData(int)
    {
        byte[] $r3;
        java.util.List $r1;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        int i0;
        java.lang.Object $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.List chunkData>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (byte[]) $r2;

        return $r3;
    }

    public synchronized void removeUnsafeToCopyPrivateChunks()
    {
        byte[] $r4;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r2;
        char $c1;
        java.util.ArrayList $r5, $r6;
        int $i0, i2, $i3, $i4;
        java.lang.String $r3;

        r2 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $i0 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int getNumPrivateChunks()>();

        i2 = 0;

        goto label3;

     label1:
        $r3 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.lang.String getPrivateChunkType(int)>(i2);

        $c1 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(3);

        $i3 = (int) $c1;

        if $i3 < 97 goto label2;

        $i4 = (int) $c1;

        if $i4 > 122 goto label2;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r4 = virtualinvoke r2.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: byte[] getPrivateChunkData(int)>(i2);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r4);

     label2:
        i2 = i2 + 1;

     label3:
        if i2 < $i0 goto label1;

        r2.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.List chunkType> = $r5;

        r2.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.List chunkData> = $r6;

        return;
    }

    public synchronized void removeAllPrivateChunks()
    {
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.List chunkType> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: java.util.List chunkData> = $r2;

        return;
    }

    private static final int abs(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $i1 = neg i0;

        goto label2;

     label1:
        $i1 = i0;

     label2:
        return $i1;
    }

    public static final int paethPredictor(int, int, int)
    {
        int i0, i1, i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $i3 = i0 + i1;

        i4 = $i3 - i2;

        $i5 = i4 - i0;

        $i6 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int abs(int)>($i5);

        $i7 = i4 - i1;

        $i8 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int abs(int)>($i7);

        $i9 = i4 - i2;

        $i10 = staticinvoke <org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int abs(int)>($i9);

        if $i6 > $i8 goto label1;

        if $i6 > $i10 goto label1;

        return i0;

     label1:
        if $i8 > $i10 goto label2;

        return i1;

     label2:
        return i2;
    }

    public int filterRow(byte[], byte[], byte[][], int, int)
    {
        byte[] r1, r2, $r4, $r5, $r6, $r7, $r9;
        byte $b2, $b5, $b7, $b10, $b14, $b17, $b22, $b44;
        byte[][] r3;
        short s3, s6, s8, s11, $s50, $s51, $s52, $s53;
        org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam r8;
        int[] $r0;
        int i0, i1, $i4, $i9, $i12, $i13, $i15, $i16, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33, i34, $i35, $i36, $i37, i38, i39, i40, i41, i42, i43, $i45, $i46, i47, i48, i49, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91;

        r8 := @this: org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        r3 := @parameter2: byte[][];

        i1 := @parameter3: int;

        i0 := @parameter4: int;

        $r0 = newarray (int)[5];

        $r0[0] = 0;

        $r0[1] = 0;

        $r0[2] = 0;

        $r0[3] = 0;

        $r0[4] = 0;

        i33 = i0;

        goto label23;

     label01:
        $b2 = r1[i33];

        $s50 = (short) $b2;

        s3 = $s50 & 255;

        $i4 = i33 - i0;

        $b5 = r1[$i4];

        $s51 = (short) $b5;

        s6 = $s51 & 255;

        $b7 = r2[i33];

        $s52 = (short) $b7;

        s8 = $s52 & 255;

        $i9 = i33 - i0;

        $b10 = r2[$i9];

        $s53 = (short) $b10;

        s11 = $s53 & 255;

        $i12 = $r0[0];

        $i54 = (int) s3;

        $i13 = $i12 + $i54;

        $r0[0] = $i13;

        $i55 = (int) s3;

        $i56 = (int) s6;

        i34 = $i55 - $i56;

        $r4 = r3[1];

        $b14 = (byte) i34;

        $r4[i33] = $b14;

        $i15 = $r0[1];

        if i34 <= 0 goto label02;

        $i35 = i34;

        goto label03;

     label02:
        $i35 = neg i34;

     label03:
        $i16 = $i15 + $i35;

        $r0[1] = $i16;

        $i57 = (int) s3;

        $i58 = (int) s8;

        $i31 = $i57 - $i58;

        $r5 = r3[2];

        $b17 = (byte) $i31;

        $r5[i33] = $b17;

        $i18 = $r0[2];

        if $i31 < 0 goto label04;

        $i36 = $i31;

        goto label05;

     label04:
        $i36 = neg $i31;

     label05:
        $i19 = $i18 + $i36;

        $r0[2] = $i19;

        $i59 = (int) s6;

        $i60 = (int) s8;

        $i20 = $i59 + $i60;

        $i21 = $i20 >> 1;

        $i61 = (int) s3;

        $i30 = $i61 - $i21;

        $r6 = r3[3];

        $b22 = (byte) $i30;

        $r6[i33] = $b22;

        $i23 = $r0[3];

        if $i30 < 0 goto label06;

        $i37 = $i30;

        goto label07;

     label06:
        $i37 = neg $i30;

     label07:
        $i24 = $i23 + $i37;

        $r0[3] = $i24;

        $i62 = (int) s8;

        $i63 = (int) s11;

        $i28 = $i62 - $i63;

        $i64 = (int) s6;

        $i65 = (int) s11;

        $i29 = $i64 - $i65;

        if $i28 >= 0 goto label13;

        if $i29 >= 0 goto label09;

        if $i28 < $i29 goto label08;

        $i66 = (int) s3;

        $i67 = (int) s6;

        i38 = $i66 - $i67;

        goto label20;

     label08:
        $i68 = (int) s3;

        $i69 = (int) s8;

        i38 = $i68 - $i69;

        goto label20;

     label09:
        i39 = $i28 + $i29;

        i40 = neg $i28;

        if i40 > $i29 goto label11;

        if i40 > i39 goto label10;

        $i70 = (int) s3;

        $i71 = (int) s6;

        i38 = $i70 - $i71;

        goto label20;

     label10:
        $i72 = (int) s3;

        $i73 = (int) s11;

        i38 = $i72 - $i73;

        goto label20;

     label11:
        $i27 = neg i39;

        if $i29 > $i27 goto label12;

        $i74 = (int) s3;

        $i75 = (int) s8;

        i38 = $i74 - $i75;

        goto label20;

     label12:
        $i76 = (int) s3;

        $i77 = (int) s11;

        i38 = $i76 - $i77;

        goto label20;

     label13:
        if $i29 >= 0 goto label18;

        i41 = neg $i29;

        if $i28 > i41 goto label16;

        i42 = i41 - $i28;

        if $i28 > i42 goto label14;

        $i78 = (int) s3;

        $i79 = (int) s6;

        i38 = $i78 - $i79;

        goto label20;

     label14:
        if i41 != i42 goto label15;

        $i80 = (int) s3;

        $i81 = (int) s8;

        i38 = $i80 - $i81;

        goto label20;

     label15:
        $i82 = (int) s3;

        $i83 = (int) s11;

        i38 = $i82 - $i83;

        goto label20;

     label16:
        i43 = $i28 - i41;

        if i41 > i43 goto label17;

        $i84 = (int) s3;

        $i85 = (int) s8;

        i38 = $i84 - $i85;

        goto label20;

     label17:
        $i86 = (int) s3;

        $i87 = (int) s11;

        i38 = $i86 - $i87;

        goto label20;

     label18:
        if $i28 > $i29 goto label19;

        $i88 = (int) s3;

        $i89 = (int) s6;

        i38 = $i88 - $i89;

        goto label20;

     label19:
        $i90 = (int) s3;

        $i91 = (int) s8;

        i38 = $i90 - $i91;

     label20:
        $r9 = r3[4];

        $b44 = (byte) i38;

        $r9[i33] = $b44;

        $i25 = $r0[4];

        if i38 < 0 goto label21;

        $i45 = i38;

        goto label22;

     label21:
        $i45 = neg i38;

     label22:
        $i26 = $i25 + $i45;

        $r0[4] = $i26;

        i33 = i33 + 1;

     label23:
        $i46 = i1 + i0;

        if i33 < $i46 goto label01;

        i47 = 0;

        i48 = $r0[0];

        i49 = 1;

        goto label26;

     label24:
        $i32 = $r0[i49];

        if $i32 >= i48 goto label25;

        i48 = $r0[i49];

        i47 = i49;

     label25:
        i49 = i49 + 1;

     label26:
        if i49 < 5 goto label24;

        if i47 != 0 goto label27;

        $r7 = r3[0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i0, $r7, i0, i1);

     label27:
        return i47;
    }

    public static void <clinit>()
    {
        <org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int PNG_FILTER_PAETH> = 4;

        <org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int PNG_FILTER_AVERAGE> = 3;

        <org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int PNG_FILTER_UP> = 2;

        <org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int PNG_FILTER_SUB> = 1;

        <org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int PNG_FILTER_NONE> = 0;

        <org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int INTENT_ABSOLUTE> = 3;

        <org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int INTENT_SATURATION> = 2;

        <org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int INTENT_RELATIVE> = 1;

        <org.apache.batik.ext.awt.image.codec.png.PNGEncodeParam: int INTENT_PERCEPTUAL> = 0;

        return;
    }
}
