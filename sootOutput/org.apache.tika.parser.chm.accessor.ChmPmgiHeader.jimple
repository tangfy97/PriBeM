public class org.apache.tika.parser.chm.accessor.ChmPmgiHeader extends java.lang.Object implements org.apache.tika.parser.chm.accessor.ChmAccessor
{
    private static final long serialVersionUID;
    private byte[] signature;
    private long free_space;
    private int dataRemained;
    private int currentPlace;

    public void <init>()
    {
        org.apache.tika.parser.chm.accessor.ChmPmgiHeader r0;
        byte[] $r2;
        java.lang.String $r1;
        java.lang.AssertionError $r4;
        java.io.UnsupportedEncodingException $r3;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: int currentPlace> = 0;

     label1:
        $r1 = "PMGI";

        $r2 = virtualinvoke $r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        r0.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: byte[] signature> = $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("UTF-8 not supported.");

        throw $r4;

     label4:
        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private int getDataRemained()
    {
        org.apache.tika.parser.chm.accessor.ChmPmgiHeader r0;
        int $i0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: int dataRemained>;

        return $i0;
    }

    private void setDataRemained(int)
    {
        org.apache.tika.parser.chm.accessor.ChmPmgiHeader r0;
        int i0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: int dataRemained> = i0;

        return;
    }

    private int getCurrentPlace()
    {
        org.apache.tika.parser.chm.accessor.ChmPmgiHeader r0;
        int $i0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        $i0 = r0.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: int currentPlace>;

        return $i0;
    }

    private void setCurrentPlace(int)
    {
        org.apache.tika.parser.chm.accessor.ChmPmgiHeader r0;
        int i0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        i0 := @parameter0: int;

        r0.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: int currentPlace> = i0;

        return;
    }

    private void unmarshalCharArray(byte[], org.apache.tika.parser.chm.accessor.ChmPmgiHeader, int) throws org.apache.tika.parser.chm.exception.ChmParsingException
    {
        byte[] r0, $r4, $r5;
        java.lang.AssertionError $r7;
        org.apache.tika.parser.chm.accessor.ChmPmgiHeader r1, r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r3;
        java.io.UnsupportedEncodingException $r6;

        r2 := @this: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        i0 := @parameter2: int;

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertByteArrayNotNull(byte[])>(r0);

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertChmAccessorNotNull(org.apache.tika.parser.chm.accessor.ChmAccessor)>(r1);

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertPositiveInt(int)>(i0);

        $i1 = lengthof r0;

        specialinvoke r2.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: void setDataRemained(int)>($i1);

     label1:
        $r3 = "PMGI";

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $i2 = staticinvoke <org.apache.tika.parser.chm.core.ChmCommons: int indexOf(byte[],byte[])>(r0, $r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("UTF-8 not supported.");

        throw $r7;

     label4:
        if $i2 < 0 goto label5;

        $r5 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: byte[] getSignature()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, $i2, $r5, 0, i0);

     label5:
        $i3 = specialinvoke r2.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: int getCurrentPlace()>();

        $i4 = $i3 + i0;

        specialinvoke r2.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: void setCurrentPlace(int)>($i4);

        $i5 = specialinvoke r2.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: int getDataRemained()>();

        $i6 = $i5 - i0;

        specialinvoke r2.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: void setDataRemained(int)>($i6);

        return;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private long unmarshalUInt32(byte[], long) throws org.apache.tika.parser.chm.exception.ChmParsingException
    {
        byte[] r0;
        long l22, l23;
        org.apache.tika.parser.chm.exception.ChmParsingException $r3;
        byte $b2, $b5, $b10, $b15;
        int $i0, $i1, $i3, $i4, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i21, $i24, $i25, $i26, $i27;
        org.apache.tika.parser.chm.accessor.ChmPmgiHeader r1;

        r1 := @this: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        r0 := @parameter0: byte[];

        l22 := @parameter1: long;

        staticinvoke <org.apache.tika.parser.chm.assertion.ChmAssert: void assertByteArrayNotNull(byte[])>(r0);

        $i0 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: int getDataRemained()>();

        if 4 <= $i0 goto label1;

        $r3 = new org.apache.tika.parser.chm.exception.ChmParsingException;

        specialinvoke $r3.<org.apache.tika.parser.chm.exception.ChmParsingException: void <init>(java.lang.String)>("4 > dataLenght");

        throw $r3;

     label1:
        $i1 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: int getCurrentPlace()>();

        $b2 = r0[$i1];

        $i3 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: int getCurrentPlace()>();

        $i4 = $i3 + 1;

        $b5 = r0[$i4];

        $i24 = (int) $b5;

        $i6 = $i24 << 8;

        $i25 = (int) $b2;

        $i7 = $i25 | $i6;

        $i8 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: int getCurrentPlace()>();

        $i9 = $i8 + 2;

        $b10 = r0[$i9];

        $i26 = (int) $b10;

        $i11 = $i26 << 16;

        $i12 = $i7 | $i11;

        $i13 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: int getCurrentPlace()>();

        $i14 = $i13 + 3;

        $b15 = r0[$i14];

        $i27 = (int) $b15;

        $i16 = $i27 << 24;

        $i17 = $i12 | $i16;

        l23 = (long) $i17;

        $i18 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: int getDataRemained()>();

        $i19 = $i18 - 4;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: void setDataRemained(int)>($i19);

        $i20 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: int getCurrentPlace()>();

        $i21 = $i20 + 4;

        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: void setCurrentPlace(int)>($i21);

        return l23;
    }

    public byte[] getSignature()
    {
        org.apache.tika.parser.chm.accessor.ChmPmgiHeader r0;
        byte[] $r1;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        $r1 = r0.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: byte[] signature>;

        return $r1;
    }

    protected void setSignature(byte[])
    {
        org.apache.tika.parser.chm.accessor.ChmPmgiHeader r0;
        byte[] r1;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        r1 := @parameter0: byte[];

        r0.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: byte[] signature> = r1;

        return;
    }

    public long getFreeSpace()
    {
        org.apache.tika.parser.chm.accessor.ChmPmgiHeader r0;
        long $l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        $l0 = r0.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: long free_space>;

        return $l0;
    }

    protected void setFreeSpace(long)
    {
        org.apache.tika.parser.chm.accessor.ChmPmgiHeader r0;
        long l0;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        l0 := @parameter0: long;

        r0.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: long free_space> = l0;

        return;
    }

    public java.lang.String toString()
    {
        byte[] $r5;
        long $l0;
        java.lang.AssertionError $r17;
        java.lang.String $r3, $r8, $r12, $r14, $r15;
        org.apache.tika.parser.chm.accessor.ChmPmgiHeader r4;
        java.lang.StringBuilder $r0, $r1, $r2, $r6, $r7, $r9, $r10, $r11, $r13;
        java.io.UnsupportedEncodingException $r16;

        r4 := @this: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("signature:=");

        $r3 = new java.lang.String;

        $r5 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: byte[] getSignature()>();

        specialinvoke $r3.<java.lang.String: void <init>(byte[],java.lang.String)>($r5, "UTF-8");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label2:
        goto label4;

     label3:
        $r16 := @caughtexception;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>(java.lang.Object)>("UTF-8 not supported.");

        throw $r17;

     label4:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("free space:=");

        $l0 = virtualinvoke r4.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: long getFreeSpace()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r12 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r15 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public void parse(byte[], org.apache.tika.parser.chm.accessor.ChmPmgiHeader) throws org.apache.tika.exception.TikaException
    {
        byte[] r0, $r2, $r4;
        long $l1, $l2;
        java.lang.AssertionError $r8;
        org.apache.tika.parser.chm.accessor.ChmPmgiHeader r1, r9;
        org.apache.tika.exception.TikaException $r5, $r6;
        int $i0;
        java.lang.String $r3;
        java.io.UnsupportedEncodingException $r7;
        boolean $z0;

        r9 := @this: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        r0 := @parameter0: byte[];

        r1 := @parameter1: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        $i0 = lengthof r0;

        if $i0 >= 8 goto label1;

        $r6 = new org.apache.tika.exception.TikaException;

        specialinvoke $r6.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("we only know how to deal with a 0x8 byte structures");

        throw $r6;

     label1:
        specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: void unmarshalCharArray(byte[],org.apache.tika.parser.chm.accessor.ChmPmgiHeader,int)>(r0, r1, 4);

        $l1 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: long getFreeSpace()>();

        $l2 = specialinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: long unmarshalUInt32(byte[],long)>(r0, $l1);

        virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: void setFreeSpace(long)>($l2);

     label2:
        $r2 = virtualinvoke r1.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: byte[] getSignature()>();

        $r3 = "PMGI";

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r2, $r4);

        if $z0 != 0 goto label3;

        $r5 = new org.apache.tika.exception.TikaException;

        specialinvoke $r5.<org.apache.tika.exception.TikaException: void <init>(java.lang.String)>("it does not seem to be valid a PMGI signature, check ChmItsp index_root if it was -1, means no PMGI, use PMGL insted");

        throw $r5;

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>("UTF-8 not supported.");

        throw $r8;

     label5:
        return;

        catch java.io.UnsupportedEncodingException from label2 to label3 with label4;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        return;
    }

    public volatile void parse(byte[], java.lang.Object) throws org.apache.tika.exception.TikaException
    {
        org.apache.tika.parser.chm.accessor.ChmPmgiHeader r0, $r3;
        byte[] r1;
        java.lang.Object r2;

        r0 := @this: org.apache.tika.parser.chm.accessor.ChmPmgiHeader;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.Object;

        $r3 = (org.apache.tika.parser.chm.accessor.ChmPmgiHeader) r2;

        virtualinvoke r0.<org.apache.tika.parser.chm.accessor.ChmPmgiHeader: void parse(byte[],org.apache.tika.parser.chm.accessor.ChmPmgiHeader)>(r1, $r3);

        return;
    }

    public static void <clinit>()
    {
        <org.apache.tika.parser.chm.accessor.ChmPmgiHeader: long serialVersionUID> = -2092282339894303701L;

        return;
    }
}
