public class org.apache.batik.dom.traversal.DOMNodeIterator extends java.lang.Object implements org.w3c.dom.traversal.NodeIterator
{
    protected static final short INITIAL;
    protected static final short INVALID;
    protected static final short FORWARD;
    protected static final short BACKWARD;
    protected org.apache.batik.dom.AbstractDocument document;
    protected org.w3c.dom.Node root;
    protected int whatToShow;
    protected org.w3c.dom.traversal.NodeFilter filter;
    protected boolean expandEntityReferences;
    protected short state;
    protected org.w3c.dom.Node referenceNode;

    public void <init>(org.apache.batik.dom.AbstractDocument, org.w3c.dom.Node, int, org.w3c.dom.traversal.NodeFilter, boolean)
    {
        org.apache.batik.dom.traversal.DOMNodeIterator r0;
        org.w3c.dom.Node r2, $r4;
        int i0;
        org.apache.batik.dom.AbstractDocument r1;
        org.w3c.dom.traversal.NodeFilter r3;
        boolean z0;

        r0 := @this: org.apache.batik.dom.traversal.DOMNodeIterator;

        r1 := @parameter0: org.apache.batik.dom.AbstractDocument;

        r2 := @parameter1: org.w3c.dom.Node;

        i0 := @parameter2: int;

        r3 := @parameter3: org.w3c.dom.traversal.NodeFilter;

        z0 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.apache.batik.dom.AbstractDocument document> = r1;

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node root> = r2;

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: int whatToShow> = i0;

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.traversal.NodeFilter filter> = r3;

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: boolean expandEntityReferences> = z0;

        $r4 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node root>;

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode> = $r4;

        return;
    }

    public org.w3c.dom.Node getRoot()
    {
        org.apache.batik.dom.traversal.DOMNodeIterator r0;
        org.w3c.dom.Node $r1;

        r0 := @this: org.apache.batik.dom.traversal.DOMNodeIterator;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node root>;

        return $r1;
    }

    public int getWhatToShow()
    {
        int $i0;
        org.apache.batik.dom.traversal.DOMNodeIterator r0;

        r0 := @this: org.apache.batik.dom.traversal.DOMNodeIterator;

        $i0 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: int whatToShow>;

        return $i0;
    }

    public org.w3c.dom.traversal.NodeFilter getFilter()
    {
        org.w3c.dom.traversal.NodeFilter $r1;
        org.apache.batik.dom.traversal.DOMNodeIterator r0;

        r0 := @this: org.apache.batik.dom.traversal.DOMNodeIterator;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.traversal.NodeFilter filter>;

        return $r1;
    }

    public boolean getExpandEntityReferences()
    {
        org.apache.batik.dom.traversal.DOMNodeIterator r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.traversal.DOMNodeIterator;

        $z0 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: boolean expandEntityReferences>;

        return $z0;
    }

    public org.w3c.dom.Node nextNode()
    {
        org.apache.batik.dom.traversal.DOMNodeIterator r0;
        short $s0, $s2, $s6;
        org.w3c.dom.DOMException $r2;
        org.w3c.dom.Node $r3, $r4, $r6, $r7, $r9;
        int $i1, $i3, $i4, $i5, $i7, $i8;
        org.apache.batik.dom.AbstractDocument $r1;
        org.w3c.dom.traversal.NodeFilter $r5, $r8;

        r0 := @this: org.apache.batik.dom.traversal.DOMNodeIterator;

        $s0 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: short state>;

        $i7 = (int) $s0;

        tableswitch($i7)
        {
            case 0: goto label2;
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label2;
            default: goto label3;
        };

     label1:
        $r1 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.apache.batik.dom.AbstractDocument document>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(11, "detached.iterator", null);

        throw $r2;

     label2:
        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: short state> = 2;

        $r3 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        return $r3;

     label3:
        goto label4;

     label4:
        virtualinvoke r0.<org.apache.batik.dom.traversal.DOMNodeIterator: void unfilteredNextNode()>();

        $r9 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        if $r9 != null goto label5;

        return null;

     label5:
        $i1 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: int whatToShow>;

        $r4 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        $s2 = interfaceinvoke $r4.<org.w3c.dom.Node: short getNodeType()>();

        $i8 = (int) $s2;

        $i3 = $i8 - 1;

        $i4 = 1 << $i3;

        $i5 = $i1 & $i4;

        if $i5 == 0 goto label4;

        $r5 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.traversal.NodeFilter filter>;

        if $r5 == null goto label6;

        $r8 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.traversal.NodeFilter filter>;

        $r7 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        $s6 = interfaceinvoke $r8.<org.w3c.dom.traversal.NodeFilter: short acceptNode(org.w3c.dom.Node)>($r7);

        if $s6 != 1 goto label4;

     label6:
        $r6 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        return $r6;
    }

    public org.w3c.dom.Node previousNode()
    {
        org.apache.batik.dom.traversal.DOMNodeIterator r0;
        short $s0, $s2, $s6;
        org.w3c.dom.DOMException $r2;
        org.w3c.dom.Node $r3, $r4, $r6, $r7, $r9, $r10;
        int $i1, $i3, $i4, $i5, $i7, $i8;
        org.apache.batik.dom.AbstractDocument $r1;
        org.w3c.dom.traversal.NodeFilter $r5, $r8;

        r0 := @this: org.apache.batik.dom.traversal.DOMNodeIterator;

        $s0 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: short state>;

        $i7 = (int) $s0;

        tableswitch($i7)
        {
            case 0: goto label2;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label3;
        };

     label1:
        $r1 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.apache.batik.dom.AbstractDocument document>;

        $r2 = virtualinvoke $r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(11, "detached.iterator", null);

        throw $r2;

     label2:
        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: short state> = 3;

        $r3 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        return $r3;

     label3:
        goto label4;

     label4:
        virtualinvoke r0.<org.apache.batik.dom.traversal.DOMNodeIterator: void unfilteredPreviousNode()>();

        $r10 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        if $r10 != null goto label5;

        $r9 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        return $r9;

     label5:
        $i1 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: int whatToShow>;

        $r4 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        $s2 = interfaceinvoke $r4.<org.w3c.dom.Node: short getNodeType()>();

        $i8 = (int) $s2;

        $i3 = $i8 - 1;

        $i4 = 1 << $i3;

        $i5 = $i1 & $i4;

        if $i5 == 0 goto label4;

        $r5 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.traversal.NodeFilter filter>;

        if $r5 == null goto label6;

        $r8 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.traversal.NodeFilter filter>;

        $r7 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        $s6 = interfaceinvoke $r8.<org.w3c.dom.traversal.NodeFilter: short acceptNode(org.w3c.dom.Node)>($r7);

        if $s6 != 1 goto label4;

     label6:
        $r6 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        return $r6;
    }

    public void detach()
    {
        org.apache.batik.dom.AbstractDocument $r1;
        org.apache.batik.dom.traversal.DOMNodeIterator r0;

        r0 := @this: org.apache.batik.dom.traversal.DOMNodeIterator;

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: short state> = 1;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.apache.batik.dom.AbstractDocument document>;

        virtualinvoke $r1.<org.apache.batik.dom.AbstractDocument: void detachNodeIterator(org.w3c.dom.traversal.NodeIterator)>(r0);

        return;
    }

    public void nodeToBeRemoved(org.w3c.dom.Node)
    {
        org.apache.batik.dom.traversal.DOMNodeIterator r0;
        short $s0, $s1, $s2, $s3;
        org.w3c.dom.Node $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, r10, r11, r12, r13, $r14;
        int $i4, $i5, $i6;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.dom.traversal.DOMNodeIterator;

        r10 := @parameter0: org.w3c.dom.Node;

        $s0 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: short state>;

        if $s0 != 1 goto label01;

        return;

     label01:
        r11 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        goto label04;

     label02:
        if r11 != r10 goto label03;

        goto label05;

     label03:
        r11 = interfaceinvoke r11.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label04:
        if r11 == null goto label05;

        $r9 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node root>;

        if r11 != $r9 goto label02;

     label05:
        if r11 == null goto label06;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node root>;

        if r11 != $r1 goto label07;

     label06:
        return;

     label07:
        $s1 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: short state>;

        $i4 = (int) $s1;

        if $i4 != 3 goto label14;

        $s3 = interfaceinvoke r11.<org.w3c.dom.Node: short getNodeType()>();

        $i5 = (int) $s3;

        if $i5 != 5 goto label08;

        $z1 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: boolean expandEntityReferences>;

        if $z1 == 0 goto label09;

     label08:
        $r4 = interfaceinvoke r11.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if $r4 == null goto label09;

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode> = $r4;

        return;

     label09:
        $r5 = interfaceinvoke r11.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if $r5 == null goto label10;

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode> = $r5;

        return;

     label10:
        r12 = r11;

        goto label12;

     label11:
        $r8 = interfaceinvoke $r6.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if $r8 == null goto label12;

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode> = $r8;

        return;

     label12:
        $r6 = interfaceinvoke r12.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r12 = $r6;

        if $r6 == null goto label13;

        $r7 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node root>;

        if $r6 != $r7 goto label11;

     label13:
        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode> = null;

        goto label19;

     label14:
        $r2 = interfaceinvoke r11.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        r13 = $r2;

        if $r2 != null goto label15;

        $r3 = interfaceinvoke r11.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode> = $r3;

        return;

     label15:
        $s2 = interfaceinvoke $r2.<org.w3c.dom.Node: short getNodeType()>();

        $i6 = (int) $s2;

        if $i6 != 5 goto label17;

        $z0 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: boolean expandEntityReferences>;

        if $z0 == 0 goto label18;

        goto label17;

     label16:
        r13 = $r14;

     label17:
        $r14 = interfaceinvoke r13.<org.w3c.dom.Node: org.w3c.dom.Node getLastChild()>();

        if $r14 != null goto label16;

     label18:
        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode> = r13;

     label19:
        return;
    }

    protected void unfilteredNextNode()
    {
        org.apache.batik.dom.traversal.DOMNodeIterator r0;
        short $s0;
        org.w3c.dom.Node $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, r10;
        int $i1;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.traversal.DOMNodeIterator;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        $s0 = interfaceinvoke $r2.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        if $i1 != 5 goto label2;

        $z0 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: boolean expandEntityReferences>;

        if $z0 == 0 goto label3;

     label2:
        $r3 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if $r4 == null goto label3;

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode> = $r4;

        return;

     label3:
        $r5 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if $r6 == null goto label4;

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode> = $r6;

        return;

     label4:
        r10 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        goto label6;

     label5:
        $r9 = interfaceinvoke $r7.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        if $r9 == null goto label6;

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode> = $r9;

        return;

     label6:
        $r7 = interfaceinvoke r10.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r10 = $r7;

        if $r7 == null goto label7;

        $r8 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node root>;

        if $r7 != $r8 goto label5;

     label7:
        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode> = null;

        return;
    }

    protected void unfilteredPreviousNode()
    {
        org.apache.batik.dom.traversal.DOMNodeIterator r0;
        short $s0;
        org.w3c.dom.Node $r1, $r2, $r3, $r4, $r5, $r6, $r7, r8, $r9;
        int $i1;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.traversal.DOMNodeIterator;

        $r1 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        $r2 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node root>;

        if $r3 != $r2 goto label2;

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode> = null;

        return;

     label2:
        $r4 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

        r8 = $r5;

        if $r5 != null goto label3;

        $r6 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode>;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode> = $r7;

        return;

     label3:
        $s0 = interfaceinvoke $r5.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        if $i1 != 5 goto label5;

        $z0 = r0.<org.apache.batik.dom.traversal.DOMNodeIterator: boolean expandEntityReferences>;

        if $z0 == 0 goto label6;

        goto label5;

     label4:
        r8 = $r9;

     label5:
        $r9 = interfaceinvoke r8.<org.w3c.dom.Node: org.w3c.dom.Node getLastChild()>();

        if $r9 != null goto label4;

     label6:
        r0.<org.apache.batik.dom.traversal.DOMNodeIterator: org.w3c.dom.Node referenceNode> = r8;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.batik.dom.traversal.DOMNodeIterator: short BACKWARD> = 3;

        <org.apache.batik.dom.traversal.DOMNodeIterator: short FORWARD> = 2;

        <org.apache.batik.dom.traversal.DOMNodeIterator: short INVALID> = 1;

        <org.apache.batik.dom.traversal.DOMNodeIterator: short INITIAL> = 0;

        return;
    }
}
