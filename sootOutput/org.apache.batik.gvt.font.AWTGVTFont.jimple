public class org.apache.batik.gvt.font.AWTGVTFont extends java.lang.Object implements org.apache.batik.gvt.font.GVTFont
{
    protected java.awt.Font awtFont;
    protected float size;
    protected float scale;
    public static final float FONT_SIZE;
    static java.util.Map fontCache;

    public void <init>(java.awt.Font)
    {
        java.awt.Font r1, $r2, $r3, $r4;
        org.apache.batik.gvt.font.AWTGVTFont r0;
        float $f0, $f1, $f2, $f3;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r1 := @parameter0: java.awt.Font;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $f0 = virtualinvoke r1.<java.awt.Font: float getSize2D()>();

        r0.<org.apache.batik.gvt.font.AWTGVTFont: float size> = $f0;

        $r2 = virtualinvoke r1.<java.awt.Font: java.awt.Font deriveFont(float)>(48.0F);

        r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont> = $r2;

        $f1 = r0.<org.apache.batik.gvt.font.AWTGVTFont: float size>;

        $r3 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $f2 = virtualinvoke $r3.<java.awt.Font: float getSize2D()>();

        $f3 = $f1 / $f2;

        r0.<org.apache.batik.gvt.font.AWTGVTFont: float scale> = $f3;

        $r4 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        staticinvoke <org.apache.batik.gvt.font.AWTGVTFont: void initializeFontCache(java.awt.Font)>($r4);

        return;
    }

    public void <init>(java.awt.Font, float)
    {
        java.awt.Font r1, $r2, $r3, $r4;
        org.apache.batik.gvt.font.AWTGVTFont r0;
        float $f0, f1, $f2, $f3, $f4, $f5;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r1 := @parameter0: java.awt.Font;

        f1 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $f0 = virtualinvoke r1.<java.awt.Font: float getSize2D()>();

        $f2 = $f0 * f1;

        r0.<org.apache.batik.gvt.font.AWTGVTFont: float size> = $f2;

        $r2 = virtualinvoke r1.<java.awt.Font: java.awt.Font deriveFont(float)>(48.0F);

        r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont> = $r2;

        $f3 = r0.<org.apache.batik.gvt.font.AWTGVTFont: float size>;

        $r3 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $f4 = virtualinvoke $r3.<java.awt.Font: float getSize2D()>();

        $f5 = $f3 / $f4;

        r0.<org.apache.batik.gvt.font.AWTGVTFont: float scale> = $f5;

        $r4 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        staticinvoke <org.apache.batik.gvt.font.AWTGVTFont: void initializeFontCache(java.awt.Font)>($r4);

        return;
    }

    public void <init>(java.util.Map)
    {
        java.lang.Float r4, $r9;
        java.awt.font.TextAttribute $r2, $r10;
        java.util.Map r1;
        org.apache.batik.gvt.font.AWTGVTFont r0;
        java.awt.Font $r5, $r6, $r7, $r8, $r11;
        float $f0, $f1, $f2, $f3, $f4;
        java.lang.Object $r3;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SIZE>;

        $r3 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.lang.Float) $r3;

        if r4 == null goto label1;

        $f4 = virtualinvoke r4.<java.lang.Float: float floatValue()>();

        r0.<org.apache.batik.gvt.font.AWTGVTFont: float size> = $f4;

        $r10 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SIZE>;

        $r9 = new java.lang.Float;

        specialinvoke $r9.<java.lang.Float: void <init>(float)>(48.0F);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

        $r11 = new java.awt.Font;

        specialinvoke $r11.<java.awt.Font: void <init>(java.util.Map)>(r1);

        r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont> = $r11;

        goto label2;

     label1:
        $r5 = new java.awt.Font;

        specialinvoke $r5.<java.awt.Font: void <init>(java.util.Map)>(r1);

        r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont> = $r5;

        $r6 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $f0 = virtualinvoke $r6.<java.awt.Font: float getSize2D()>();

        r0.<org.apache.batik.gvt.font.AWTGVTFont: float size> = $f0;

     label2:
        $f1 = r0.<org.apache.batik.gvt.font.AWTGVTFont: float size>;

        $r7 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $f2 = virtualinvoke $r7.<java.awt.Font: float getSize2D()>();

        $f3 = $f1 / $f2;

        r0.<org.apache.batik.gvt.font.AWTGVTFont: float scale> = $f3;

        $r8 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        staticinvoke <org.apache.batik.gvt.font.AWTGVTFont: void initializeFontCache(java.awt.Font)>($r8);

        return;
    }

    public void <init>(java.lang.String, int, int)
    {
        java.awt.Font $r1, $r3, $r4;
        int i0, i1;
        org.apache.batik.gvt.font.AWTGVTFont r0;
        float $f0, $f1, $f2, $f3;
        java.lang.String r2;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.awt.Font;

        specialinvoke $r1.<java.awt.Font: void <init>(java.lang.String,int,int)>(r2, i0, 48);

        r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont> = $r1;

        $f0 = (float) i1;

        r0.<org.apache.batik.gvt.font.AWTGVTFont: float size> = $f0;

        $f1 = (float) i1;

        $r3 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $f2 = virtualinvoke $r3.<java.awt.Font: float getSize2D()>();

        $f3 = $f1 / $f2;

        r0.<org.apache.batik.gvt.font.AWTGVTFont: float scale> = $f3;

        $r4 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        staticinvoke <org.apache.batik.gvt.font.AWTGVTFont: void initializeFontCache(java.awt.Font)>($r4);

        return;
    }

    public boolean canDisplay(char)
    {
        java.awt.Font $r1;
        org.apache.batik.gvt.font.AWTGVTFont r0;
        char c0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        c0 := @parameter0: char;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $z0 = virtualinvoke $r1.<java.awt.Font: boolean canDisplay(char)>(c0);

        return $z0;
    }

    public int canDisplayUpTo(char[], int, int)
    {
        java.awt.Font $r2;
        int i0, i1, $i2;
        org.apache.batik.gvt.font.AWTGVTFont r0;
        char[] r1;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $i2 = virtualinvoke $r2.<java.awt.Font: int canDisplayUpTo(char[],int,int)>(r1, i0, i1);

        return $i2;
    }

    public int canDisplayUpTo(java.text.CharacterIterator, int, int)
    {
        java.text.CharacterIterator r1;
        java.awt.Font $r2;
        int i0, i1, $i2;
        org.apache.batik.gvt.font.AWTGVTFont r0;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r1 := @parameter0: java.text.CharacterIterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $i2 = virtualinvoke $r2.<java.awt.Font: int canDisplayUpTo(java.text.CharacterIterator,int,int)>(r1, i0, i1);

        return $i2;
    }

    public int canDisplayUpTo(java.lang.String)
    {
        java.awt.Font $r2;
        int $i0;
        org.apache.batik.gvt.font.AWTGVTFont r0;
        java.lang.String r1;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $i0 = virtualinvoke $r2.<java.awt.Font: int canDisplayUpTo(java.lang.String)>(r1);

        return $i0;
    }

    public org.apache.batik.gvt.font.GVTGlyphVector createGlyphVector(java.awt.font.FontRenderContext, char[])
    {
        java.awt.Font $r5;
        org.apache.batik.gvt.font.AWTGVTGlyphVector $r7;
        java.awt.font.GlyphVector $r6;
        java.text.StringCharacterIterator $r0;
        java.awt.font.FontRenderContext r4;
        char[] r2;
        org.apache.batik.gvt.font.AWTGVTFont r3;
        float $f0;
        java.lang.String $r1;

        r3 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r4 := @parameter0: java.awt.font.FontRenderContext;

        r2 := @parameter1: char[];

        $r0 = new java.text.StringCharacterIterator;

        $r1 = new java.lang.String;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>(r2);

        specialinvoke $r0.<java.text.StringCharacterIterator: void <init>(java.lang.String)>($r1);

        $r5 = r3.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $r6 = virtualinvoke $r5.<java.awt.Font: java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,char[])>(r4, r2);

        $r7 = new org.apache.batik.gvt.font.AWTGVTGlyphVector;

        $f0 = r3.<org.apache.batik.gvt.font.AWTGVTFont: float scale>;

        specialinvoke $r7.<org.apache.batik.gvt.font.AWTGVTGlyphVector: void <init>(java.awt.font.GlyphVector,org.apache.batik.gvt.font.AWTGVTFont,float,java.text.CharacterIterator)>($r6, r3, $f0, $r0);

        return $r7;
    }

    public org.apache.batik.gvt.font.GVTGlyphVector createGlyphVector(java.awt.font.FontRenderContext, java.text.CharacterIterator)
    {
        java.text.CharacterIterator r0;
        java.awt.Font $r3;
        org.apache.batik.gvt.font.AWTGVTGlyphVector $r5;
        java.awt.font.GlyphVector $r4;
        java.awt.font.FontRenderContext r2;
        java.text.AttributedCharacterIterator r8;
        org.apache.batik.gvt.font.GVTGlyphVector $r7;
        org.apache.batik.gvt.font.AWTGVTFont r1;
        float $f0;
        java.lang.String $r6;
        boolean $z0, $z1;

        r1 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r2 := @parameter0: java.awt.font.FontRenderContext;

        r0 := @parameter1: java.text.CharacterIterator;

        $z0 = r0 instanceof java.text.AttributedCharacterIterator;

        if $z0 == 0 goto label1;

        r8 = (java.text.AttributedCharacterIterator) r0;

        $z1 = staticinvoke <org.apache.batik.gvt.text.ArabicTextHandler: boolean containsArabic(java.text.AttributedCharacterIterator)>(r8);

        if $z1 == 0 goto label1;

        $r6 = staticinvoke <org.apache.batik.gvt.text.ArabicTextHandler: java.lang.String createSubstituteString(java.text.AttributedCharacterIterator)>(r8);

        $r7 = virtualinvoke r1.<org.apache.batik.gvt.font.AWTGVTFont: org.apache.batik.gvt.font.GVTGlyphVector createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)>(r2, $r6);

        return $r7;

     label1:
        $r3 = r1.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $r4 = virtualinvoke $r3.<java.awt.Font: java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,java.text.CharacterIterator)>(r2, r0);

        $r5 = new org.apache.batik.gvt.font.AWTGVTGlyphVector;

        $f0 = r1.<org.apache.batik.gvt.font.AWTGVTFont: float scale>;

        specialinvoke $r5.<org.apache.batik.gvt.font.AWTGVTGlyphVector: void <init>(java.awt.font.GlyphVector,org.apache.batik.gvt.font.AWTGVTFont,float,java.text.CharacterIterator)>($r4, r1, $f0, r0);

        return $r5;
    }

    public org.apache.batik.gvt.font.GVTGlyphVector createGlyphVector(java.awt.font.FontRenderContext, int[], java.text.CharacterIterator)
    {
        java.text.CharacterIterator r6;
        org.apache.batik.gvt.font.AWTGVTGlyphVector $r0;
        java.awt.Font $r4;
        java.awt.font.GlyphVector $r5;
        java.awt.font.FontRenderContext r2;
        int[] r3;
        org.apache.batik.gvt.font.AWTGVTFont r1;
        float $f0;

        r1 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r2 := @parameter0: java.awt.font.FontRenderContext;

        r3 := @parameter1: int[];

        r6 := @parameter2: java.text.CharacterIterator;

        $r0 = new org.apache.batik.gvt.font.AWTGVTGlyphVector;

        $r4 = r1.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $r5 = virtualinvoke $r4.<java.awt.Font: java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,int[])>(r2, r3);

        $f0 = r1.<org.apache.batik.gvt.font.AWTGVTFont: float scale>;

        specialinvoke $r0.<org.apache.batik.gvt.font.AWTGVTGlyphVector: void <init>(java.awt.font.GlyphVector,org.apache.batik.gvt.font.AWTGVTFont,float,java.text.CharacterIterator)>($r5, r1, $f0, r6);

        return $r0;
    }

    public org.apache.batik.gvt.font.GVTGlyphVector createGlyphVector(java.awt.font.FontRenderContext, java.lang.String)
    {
        org.apache.batik.gvt.font.AWTGVTGlyphVector $r2;
        java.awt.Font $r5;
        java.awt.font.GlyphVector $r6;
        java.text.StringCharacterIterator $r0;
        java.awt.font.FontRenderContext r4;
        org.apache.batik.gvt.font.AWTGVTFont r3;
        float $f0;
        java.lang.String r1;

        r3 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r4 := @parameter0: java.awt.font.FontRenderContext;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.text.StringCharacterIterator;

        specialinvoke $r0.<java.text.StringCharacterIterator: void <init>(java.lang.String)>(r1);

        $r2 = new org.apache.batik.gvt.font.AWTGVTGlyphVector;

        $r5 = r3.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $r6 = virtualinvoke $r5.<java.awt.Font: java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)>(r4, r1);

        $f0 = r3.<org.apache.batik.gvt.font.AWTGVTFont: float scale>;

        specialinvoke $r2.<org.apache.batik.gvt.font.AWTGVTGlyphVector: void <init>(java.awt.font.GlyphVector,org.apache.batik.gvt.font.AWTGVTFont,float,java.text.CharacterIterator)>($r6, r3, $f0, $r0);

        return $r2;
    }

    public org.apache.batik.gvt.font.GVTFont deriveFont(float)
    {
        java.awt.Font $r2;
        org.apache.batik.gvt.font.AWTGVTFont $r0, r1;
        float f0, $f1, $f2;

        r1 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        f0 := @parameter0: float;

        $r0 = new org.apache.batik.gvt.font.AWTGVTFont;

        $r2 = r1.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $f1 = r1.<org.apache.batik.gvt.font.AWTGVTFont: float size>;

        $f2 = f0 / $f1;

        specialinvoke $r0.<org.apache.batik.gvt.font.AWTGVTFont: void <init>(java.awt.Font,float)>($r2, $f2);

        return $r0;
    }

    public java.lang.String getFamilyName()
    {
        org.apache.batik.gvt.font.AWTGVTFont r0;
        java.lang.String $r2;
        java.awt.Font $r1;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $r2 = virtualinvoke $r1.<java.awt.Font: java.lang.String getFamily()>();

        return $r2;
    }

    public org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(char[], int, int, java.awt.font.FontRenderContext)
    {
        java.awt.font.LineMetrics $r5;
        java.awt.Font $r4;
        java.awt.font.FontRenderContext r3;
        int i0, i1;
        org.apache.batik.gvt.font.AWTGVTFont r1;
        char[] r2;
        float $f0;
        org.apache.batik.gvt.font.GVTLineMetrics $r0;

        r1 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r2 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: java.awt.font.FontRenderContext;

        $r0 = new org.apache.batik.gvt.font.GVTLineMetrics;

        $r4 = r1.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $r5 = virtualinvoke $r4.<java.awt.Font: java.awt.font.LineMetrics getLineMetrics(char[],int,int,java.awt.font.FontRenderContext)>(r2, i0, i1, r3);

        $f0 = r1.<org.apache.batik.gvt.font.AWTGVTFont: float scale>;

        specialinvoke $r0.<org.apache.batik.gvt.font.GVTLineMetrics: void <init>(java.awt.font.LineMetrics,float)>($r5, $f0);

        return $r0;
    }

    public org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(java.text.CharacterIterator, int, int, java.awt.font.FontRenderContext)
    {
        java.awt.font.LineMetrics $r5;
        java.text.CharacterIterator r2;
        java.awt.Font $r4;
        java.awt.font.FontRenderContext r3;
        int i0, i1;
        org.apache.batik.gvt.font.AWTGVTFont r1;
        float $f0;
        org.apache.batik.gvt.font.GVTLineMetrics $r0;

        r1 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r2 := @parameter0: java.text.CharacterIterator;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: java.awt.font.FontRenderContext;

        $r0 = new org.apache.batik.gvt.font.GVTLineMetrics;

        $r4 = r1.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $r5 = virtualinvoke $r4.<java.awt.Font: java.awt.font.LineMetrics getLineMetrics(java.text.CharacterIterator,int,int,java.awt.font.FontRenderContext)>(r2, i0, i1, r3);

        $f0 = r1.<org.apache.batik.gvt.font.AWTGVTFont: float scale>;

        specialinvoke $r0.<org.apache.batik.gvt.font.GVTLineMetrics: void <init>(java.awt.font.LineMetrics,float)>($r5, $f0);

        return $r0;
    }

    public org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(java.lang.String, java.awt.font.FontRenderContext)
    {
        java.awt.font.LineMetrics $r5;
        java.awt.font.FontRenderContext r3;
        java.awt.Font $r4;
        org.apache.batik.gvt.font.AWTGVTFont r1;
        float $f0;
        java.lang.String r2;
        org.apache.batik.gvt.font.GVTLineMetrics $r0;

        r1 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.awt.font.FontRenderContext;

        $r0 = new org.apache.batik.gvt.font.GVTLineMetrics;

        $r4 = r1.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $r5 = virtualinvoke $r4.<java.awt.Font: java.awt.font.LineMetrics getLineMetrics(java.lang.String,java.awt.font.FontRenderContext)>(r2, r3);

        $f0 = r1.<org.apache.batik.gvt.font.AWTGVTFont: float scale>;

        specialinvoke $r0.<org.apache.batik.gvt.font.GVTLineMetrics: void <init>(java.awt.font.LineMetrics,float)>($r5, $f0);

        return $r0;
    }

    public org.apache.batik.gvt.font.GVTLineMetrics getLineMetrics(java.lang.String, int, int, java.awt.font.FontRenderContext)
    {
        java.awt.font.LineMetrics $r5;
        java.awt.Font $r4;
        java.awt.font.FontRenderContext r3;
        int i0, i1;
        org.apache.batik.gvt.font.AWTGVTFont r1;
        float $f0;
        java.lang.String r2;
        org.apache.batik.gvt.font.GVTLineMetrics $r0;

        r1 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: java.awt.font.FontRenderContext;

        $r0 = new org.apache.batik.gvt.font.GVTLineMetrics;

        $r4 = r1.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $r5 = virtualinvoke $r4.<java.awt.Font: java.awt.font.LineMetrics getLineMetrics(java.lang.String,int,int,java.awt.font.FontRenderContext)>(r2, i0, i1, r3);

        $f0 = r1.<org.apache.batik.gvt.font.AWTGVTFont: float scale>;

        specialinvoke $r0.<org.apache.batik.gvt.font.GVTLineMetrics: void <init>(java.awt.font.LineMetrics,float)>($r5, $f0);

        return $r0;
    }

    public float getSize()
    {
        org.apache.batik.gvt.font.AWTGVTFont r0;
        float $f0;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        $f0 = r0.<org.apache.batik.gvt.font.AWTGVTFont: float size>;

        return $f0;
    }

    public float getHKern(int, int)
    {
        int i0, i1;
        org.apache.batik.gvt.font.AWTGVTFont r0;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return 0.0F;
    }

    public float getVKern(int, int)
    {
        int i0, i1;
        org.apache.batik.gvt.font.AWTGVTFont r0;

        r0 := @this: org.apache.batik.gvt.font.AWTGVTFont;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return 0.0F;
    }

    public static org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value getGlyphGeometry(org.apache.batik.gvt.font.AWTGVTFont, char, java.awt.font.GlyphVector, int, java.awt.geom.Point2D)
    {
        java.awt.geom.Point2D r11;
        java.awt.geom.Rectangle2D $r9;
        java.util.Map $r2;
        int i1;
        org.apache.batik.gvt.font.AWTGVTFont r0;
        java.awt.font.GlyphMetrics $r8;
        boolean $z0;
        double $d0, $d1, $d2, $d3;
        java.awt.Shape $r7, r14;
        java.awt.Font $r1;
        org.apache.batik.gvt.font.AWTGlyphGeometryCache r4;
        char c0;
        java.awt.font.GlyphVector r6;
        java.awt.geom.AffineTransform $r12;
        java.lang.Object $r3;
        org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value $r5, $r10, r13;

        r0 := @parameter0: org.apache.batik.gvt.font.AWTGVTFont;

        c0 := @parameter1: char;

        r6 := @parameter2: java.awt.font.GlyphVector;

        i1 := @parameter3: int;

        r11 := @parameter4: java.awt.geom.Point2D;

        $r2 = <org.apache.batik.gvt.font.AWTGVTFont: java.util.Map fontCache>;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r4 = (org.apache.batik.gvt.font.AWTGlyphGeometryCache) $r3;

        $r5 = virtualinvoke r4.<org.apache.batik.gvt.font.AWTGlyphGeometryCache: org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value get(char)>(c0);

        r13 = $r5;

        if $r5 != null goto label2;

        $r7 = virtualinvoke r6.<java.awt.font.GlyphVector: java.awt.Shape getGlyphOutline(int)>(i1);

        r14 = $r7;

        $r8 = virtualinvoke r6.<java.awt.font.GlyphVector: java.awt.font.GlyphMetrics getGlyphMetrics(int)>(i1);

        $r9 = virtualinvoke $r8.<java.awt.font.GlyphMetrics: java.awt.geom.Rectangle2D getBounds2D()>();

        $z0 = staticinvoke <org.apache.batik.gvt.font.AWTGVTGlyphVector: boolean outlinesPositioned()>();

        if $z0 == 0 goto label1;

        $d0 = virtualinvoke r11.<java.awt.geom.Point2D: double getX()>();

        $d1 = neg $d0;

        $d2 = virtualinvoke r11.<java.awt.geom.Point2D: double getY()>();

        $d3 = neg $d2;

        $r12 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d1, $d3);

        r14 = virtualinvoke $r12.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r7);

     label1:
        $r10 = new org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value;

        specialinvoke $r10.<org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value: void <init>(java.awt.Shape,java.awt.geom.Rectangle2D)>(r14, $r9);

        r13 = $r10;

        virtualinvoke r4.<org.apache.batik.gvt.font.AWTGlyphGeometryCache: org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value put(char,org.apache.batik.gvt.font.AWTGlyphGeometryCache$Value)>(c0, $r10);

     label2:
        return r13;
    }

    static void initializeFontCache(java.awt.Font)
    {
        java.awt.Font r0;
        org.apache.batik.gvt.font.AWTGlyphGeometryCache $r2;
        java.util.Map $r1, $r3;
        boolean $z0;

        r0 := @parameter0: java.awt.Font;

        $r1 = <org.apache.batik.gvt.font.AWTGVTFont: java.util.Map fontCache>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r3 = <org.apache.batik.gvt.font.AWTGVTFont: java.util.Map fontCache>;

        $r2 = new org.apache.batik.gvt.font.AWTGlyphGeometryCache;

        specialinvoke $r2.<org.apache.batik.gvt.font.AWTGlyphGeometryCache: void <init>()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r2);

     label1:
        return;
    }

    static void putAWTGVTFont(org.apache.batik.gvt.font.AWTGVTFont)
    {
        org.apache.batik.gvt.font.AWTGVTFont r0;
        java.awt.Font $r1;
        java.util.Map $r2;

        r0 := @parameter0: org.apache.batik.gvt.font.AWTGVTFont;

        $r2 = <org.apache.batik.gvt.font.AWTGVTFont: java.util.Map fontCache>;

        $r1 = r0.<org.apache.batik.gvt.font.AWTGVTFont: java.awt.Font awtFont>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, r0);

        return;
    }

    static org.apache.batik.gvt.font.AWTGVTFont getAWTGVTFont(java.awt.Font)
    {
        java.awt.Font r0;
        java.util.Map $r1;
        org.apache.batik.gvt.font.AWTGVTFont $r3;
        java.lang.Object $r2;

        r0 := @parameter0: java.awt.Font;

        $r1 = <org.apache.batik.gvt.font.AWTGVTFont: java.util.Map fontCache>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (org.apache.batik.gvt.font.AWTGVTFont) $r2;

        return $r3;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        <org.apache.batik.gvt.font.AWTGVTFont: float FONT_SIZE> = 48.0F;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(11);

        <org.apache.batik.gvt.font.AWTGVTFont: java.util.Map fontCache> = $r0;

        return;
    }
}
