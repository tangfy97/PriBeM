public abstract class org.codehaus.jackson.map.ser.std.BeanSerializerBase extends org.codehaus.jackson.map.ser.std.SerializerBase implements org.codehaus.jackson.map.ResolvableSerializer, org.codehaus.jackson.schema.SchemaAware
{
    protected static final org.codehaus.jackson.map.ser.BeanPropertyWriter[] NO_PROPS;
    protected final org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props;
    protected final org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps;
    protected final org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter;
    protected final java.lang.Object _propertyFilterId;

    protected void <init>(org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.ser.BeanPropertyWriter[], org.codehaus.jackson.map.ser.BeanPropertyWriter[], org.codehaus.jackson.map.ser.AnyGetterWriter, java.lang.Object)
    {
        org.codehaus.jackson.map.ser.AnyGetterWriter r4;
        org.codehaus.jackson.type.JavaType r1;
        java.lang.Object r5;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] r2, r3;
        org.codehaus.jackson.map.ser.std.BeanSerializerBase r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.BeanSerializerBase;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        r2 := @parameter1: org.codehaus.jackson.map.ser.BeanPropertyWriter[];

        r3 := @parameter2: org.codehaus.jackson.map.ser.BeanPropertyWriter[];

        r4 := @parameter3: org.codehaus.jackson.map.ser.AnyGetterWriter;

        r5 := @parameter4: java.lang.Object;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: void <init>(org.codehaus.jackson.type.JavaType)>(r1);

        r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props> = r2;

        r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps> = r3;

        r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter> = r4;

        r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: java.lang.Object _propertyFilterId> = r5;

        return;
    }

    public void <init>(java.lang.Class, org.codehaus.jackson.map.ser.BeanPropertyWriter[], org.codehaus.jackson.map.ser.BeanPropertyWriter[], org.codehaus.jackson.map.ser.AnyGetterWriter, java.lang.Object)
    {
        org.codehaus.jackson.map.ser.AnyGetterWriter r4;
        java.lang.Class r1;
        java.lang.Object r5;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] r2, r3;
        org.codehaus.jackson.map.ser.std.BeanSerializerBase r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.BeanSerializerBase;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.codehaus.jackson.map.ser.BeanPropertyWriter[];

        r3 := @parameter2: org.codehaus.jackson.map.ser.BeanPropertyWriter[];

        r4 := @parameter3: org.codehaus.jackson.map.ser.AnyGetterWriter;

        r5 := @parameter4: java.lang.Object;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: void <init>(java.lang.Class)>(r1);

        r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props> = r2;

        r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps> = r3;

        r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter> = r4;

        r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: java.lang.Object _propertyFilterId> = r5;

        return;
    }

    protected void <init>(org.codehaus.jackson.map.ser.std.BeanSerializerBase)
    {
        org.codehaus.jackson.map.ser.AnyGetterWriter $r3;
        java.lang.Object $r2;
        java.lang.Class $r6;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r4, $r5;
        org.codehaus.jackson.map.ser.std.BeanSerializerBase r0, r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.BeanSerializerBase;

        r1 := @parameter0: org.codehaus.jackson.map.ser.std.BeanSerializerBase;

        $r6 = r1.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: java.lang.Class _handledType>;

        $r5 = r1.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

        $r4 = r1.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        $r3 = r1.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter>;

        $r2 = r1.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: java.lang.Object _propertyFilterId>;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: void <init>(java.lang.Class,org.codehaus.jackson.map.ser.BeanPropertyWriter[],org.codehaus.jackson.map.ser.BeanPropertyWriter[],org.codehaus.jackson.map.ser.AnyGetterWriter,java.lang.Object)>($r6, $r5, $r4, $r3, $r2);

        return;
    }

    public abstract void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.TypeSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.SerializerProvider r5;
        java.lang.Object r1, $r4;
        org.codehaus.jackson.map.ser.std.BeanSerializerBase r3;

        r3 := @this: org.codehaus.jackson.map.ser.std.BeanSerializerBase;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r5 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r0 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypePrefixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        $r4 = r3.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: java.lang.Object _propertyFilterId>;

        if $r4 == null goto label1;

        virtualinvoke r3.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: void serializeFieldsFiltered(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, r2, r5);

        goto label2;

     label1:
        virtualinvoke r3.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: void serializeFields(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, r2, r5);

     label2:
        virtualinvoke r0.<org.codehaus.jackson.map.TypeSerializer: void writeTypeSuffixForObject(java.lang.Object,org.codehaus.jackson.JsonGenerator)>(r1, r2);

        return;
    }

    protected void serializeFields(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        java.lang.StackOverflowError $r8;
        org.codehaus.jackson.map.JsonMappingException$Reference $r11;
        org.codehaus.jackson.map.SerializerProvider r5;
        org.codehaus.jackson.map.JsonMappingException $r9;
        org.codehaus.jackson.JsonGenerator r4;
        int $i0, $i1, i2, $i3;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r10, $r13, r15;
        java.lang.String $r16, $r17;
        org.codehaus.jackson.map.ser.std.BeanSerializerBase r0;
        org.codehaus.jackson.map.ser.AnyGetterWriter $r2, $r6;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r1, r14;
        java.lang.Exception $r12;
        java.lang.Object r3;
        java.lang.Class $r7;

        r0 := @this: org.codehaus.jackson.map.ser.std.BeanSerializerBase;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r5 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        if $r1 == null goto label01;

        $r7 = virtualinvoke r5.<org.codehaus.jackson.map.SerializerProvider: java.lang.Class getSerializationView()>();

        if $r7 == null goto label01;

        r14 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        goto label02;

     label01:
        r14 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

     label02:
        i2 = 0;

     label03:
        $i3 = lengthof r14;

     label04:
        if i2 >= $i3 goto label06;

        r15 = r14[i2];

        if r15 == null goto label05;

        virtualinvoke r15.<org.codehaus.jackson.map.ser.BeanPropertyWriter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r3, r4, r5);

     label05:
        i2 = i2 + 1;

        goto label04;

     label06:
        $r2 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter>;

        if $r2 == null goto label07;

        $r6 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter>;

        virtualinvoke $r6.<org.codehaus.jackson.map.ser.AnyGetterWriter: void getAndSerialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r3, r4, r5);

     label07:
        goto label14;

     label08:
        $r12 := @caughtexception;

        $i1 = lengthof r14;

        if i2 != $i1 goto label09;

        $r16 = "[anySetter]";

        goto label10;

     label09:
        $r13 = r14[i2];

        $r16 = virtualinvoke $r13.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String getName()>();

     label10:
        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>(r5, $r12, r3, $r16);

        goto label14;

     label11:
        $r8 := @caughtexception;

        $r9 = new org.codehaus.jackson.map.JsonMappingException;

        specialinvoke $r9.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String,java.lang.Throwable)>("Infinite recursion (StackOverflowError)", $r8);

        $i0 = lengthof r14;

        if i2 != $i0 goto label12;

        $r17 = "[anySetter]";

        goto label13;

     label12:
        $r10 = r14[i2];

        $r17 = virtualinvoke $r10.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String getName()>();

     label13:
        $r11 = new org.codehaus.jackson.map.JsonMappingException$Reference;

        specialinvoke $r11.<org.codehaus.jackson.map.JsonMappingException$Reference: void <init>(java.lang.Object,java.lang.String)>(r3, $r17);

        virtualinvoke $r9.<org.codehaus.jackson.map.JsonMappingException: void prependPath(org.codehaus.jackson.map.JsonMappingException$Reference)>($r11);

        throw $r9;

     label14:
        return;

        catch java.lang.Exception from label03 to label07 with label08;
        catch java.lang.StackOverflowError from label03 to label07 with label11;
    }

    protected void serializeFieldsFiltered(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        java.lang.StackOverflowError $r8;
        org.codehaus.jackson.map.JsonMappingException$Reference $r11;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.map.JsonMappingException $r9;
        org.codehaus.jackson.map.ser.BeanPropertyFilter $r15;
        org.codehaus.jackson.JsonGenerator r5;
        int $i0, $i1, i2, i3;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r10, $r13, r16;
        java.lang.String $r17, $r18;
        org.codehaus.jackson.map.ser.std.BeanSerializerBase r0;
        org.codehaus.jackson.map.ser.AnyGetterWriter $r3, $r6;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r1, r14;
        java.lang.Exception $r12;
        java.lang.Object r4;
        java.lang.Class $r7;

        r0 := @this: org.codehaus.jackson.map.ser.std.BeanSerializerBase;

        r4 := @parameter0: java.lang.Object;

        r5 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        if $r1 == null goto label01;

        $r7 = virtualinvoke r2.<org.codehaus.jackson.map.SerializerProvider: java.lang.Class getSerializationView()>();

        if $r7 == null goto label01;

        r14 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        goto label02;

     label01:
        r14 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

     label02:
        $r15 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyFilter findFilter(org.codehaus.jackson.map.SerializerProvider)>(r2);

        if $r15 != null goto label03;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: void serializeFields(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r4, r5, r2);

        return;

     label03:
        i2 = 0;

     label04:
        i3 = lengthof r14;

     label05:
        if i2 >= i3 goto label07;

        r16 = r14[i2];

        if r16 == null goto label06;

        interfaceinvoke $r15.<org.codehaus.jackson.map.ser.BeanPropertyFilter: void serializeAsField(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.ser.BeanPropertyWriter)>(r4, r5, r2, r16);

     label06:
        i2 = i2 + 1;

        goto label05;

     label07:
        $r3 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter>;

        if $r3 == null goto label08;

        $r6 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter>;

        virtualinvoke $r6.<org.codehaus.jackson.map.ser.AnyGetterWriter: void getAndSerialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r4, r5, r2);

     label08:
        goto label15;

     label09:
        $r12 := @caughtexception;

        $i1 = lengthof r14;

        if i2 != $i1 goto label10;

        $r17 = "[anySetter]";

        goto label11;

     label10:
        $r13 = r14[i2];

        $r17 = virtualinvoke $r13.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String getName()>();

     label11:
        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: void wrapAndThrow(org.codehaus.jackson.map.SerializerProvider,java.lang.Throwable,java.lang.Object,java.lang.String)>(r2, $r12, r4, $r17);

        goto label15;

     label12:
        $r8 := @caughtexception;

        $r9 = new org.codehaus.jackson.map.JsonMappingException;

        specialinvoke $r9.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String,java.lang.Throwable)>("Infinite recursion (StackOverflowError)", $r8);

        $i0 = lengthof r14;

        if i2 != $i0 goto label13;

        $r18 = "[anySetter]";

        goto label14;

     label13:
        $r10 = r14[i2];

        $r18 = virtualinvoke $r10.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String getName()>();

     label14:
        $r11 = new org.codehaus.jackson.map.JsonMappingException$Reference;

        specialinvoke $r11.<org.codehaus.jackson.map.JsonMappingException$Reference: void <init>(java.lang.Object,java.lang.String)>(r4, $r18);

        virtualinvoke $r9.<org.codehaus.jackson.map.JsonMappingException: void prependPath(org.codehaus.jackson.map.JsonMappingException$Reference)>($r11);

        throw $r9;

     label15:
        return;

        catch java.lang.Exception from label04 to label08 with label09;
        catch java.lang.StackOverflowError from label04 to label08 with label12;
    }

    protected org.codehaus.jackson.map.ser.BeanPropertyFilter findFilter(org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.map.ser.FilterProvider $r3;
        org.codehaus.jackson.map.ser.BeanPropertyFilter $r4;
        org.codehaus.jackson.map.JsonMappingException $r5;
        java.lang.Object r1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;
        org.codehaus.jackson.map.ser.std.BeanSerializerBase r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.BeanSerializerBase;

        r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r1 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: java.lang.Object _propertyFilterId>;

        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.ser.FilterProvider getFilterProvider()>();

        if $r3 != null goto label1;

        $r5 = new org.codehaus.jackson.map.JsonMappingException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not resolve BeanPropertyFilter with id \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'; no FilterProvider configured");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label1:
        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.ser.FilterProvider: org.codehaus.jackson.map.ser.BeanPropertyFilter findFilter(java.lang.Object)>(r1);

        return $r4;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.SerializerProvider r10;
        org.codehaus.jackson.JsonNode $r17;
        org.codehaus.jackson.schema.SchemaAware $r11;
        int $i0, i1;
        org.codehaus.jackson.map.ser.BeanPropertyWriter r5;
        org.codehaus.jackson.type.JavaType $r6;
        java.lang.String $r9;
        org.codehaus.jackson.map.ser.std.BeanSerializerBase r0;
        org.codehaus.jackson.node.ObjectNode $r1, $r2;
        boolean $z0;
        org.codehaus.jackson.map.JsonSerializer $r8, r15;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r3, $r4;
        java.lang.reflect.Type r7, r13, $r14;
        java.lang.Class $r12, r16;

        r0 := @this: org.codehaus.jackson.map.ser.std.BeanSerializerBase;

        r10 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r13 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("object", 1);

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.node.ObjectNode objectNode()>();

        i1 = 0;

     label1:
        $r3 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

        $i0 = lengthof $r3;

        if i1 >= $i0 goto label8;

        $r4 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

        r5 = $r4[i1];

        $r6 = virtualinvoke r5.<org.codehaus.jackson.map.ser.BeanPropertyWriter: org.codehaus.jackson.type.JavaType getSerializationType()>();

        if $r6 != null goto label2;

        $r14 = virtualinvoke r5.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.reflect.Type getGenericPropertyType()>();

        goto label3;

     label2:
        $r14 = virtualinvoke $r6.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

     label3:
        r7 = $r14;

        $r8 = virtualinvoke r5.<org.codehaus.jackson.map.ser.BeanPropertyWriter: org.codehaus.jackson.map.JsonSerializer getSerializer()>();

        r15 = $r8;

        if $r8 != null goto label5;

        $r12 = virtualinvoke r5.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.Class getRawSerializationType()>();

        r16 = $r12;

        if $r12 != null goto label4;

        r16 = virtualinvoke r5.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.Class getPropertyType()>();

     label4:
        r15 = virtualinvoke r10.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>(r16, r5);

     label5:
        $z0 = r15 instanceof org.codehaus.jackson.schema.SchemaAware;

        if $z0 == 0 goto label6;

        $r11 = (org.codehaus.jackson.schema.SchemaAware) r15;

        $r17 = interfaceinvoke $r11.<org.codehaus.jackson.schema.SchemaAware: org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider,java.lang.reflect.Type)>(r10, r7);

        goto label7;

     label6:
        $r17 = staticinvoke <org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.JsonNode getDefaultSchemaNode()>();

     label7:
        $r9 = virtualinvoke r5.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.String getName()>();

        virtualinvoke $r2.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>($r9, $r17);

        i1 = i1 + 1;

        goto label1;

     label8:
        virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("properties", $r2);

        return $r1;
    }

    public void resolve(org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.ser.std.ContainerSerializerBase $r15;
        org.codehaus.jackson.map.SerializerProvider r5;
        org.codehaus.jackson.map.TypeSerializer r21;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.jackson.map.ser.AnyGetterWriter $r4, $r6;
        org.codehaus.jackson.map.JsonSerializer $r9, r20;
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r1, $r2, $r3, $r7, $r10, $r11, $r23;
        java.lang.reflect.Type $r16;
        int i0, $i1, $i2, $i3, i4;
        org.codehaus.jackson.type.JavaType $r8, $r13, $r17, r19;
        org.codehaus.jackson.map.ser.BeanPropertyWriter $r12, r18, $r22, r24;
        org.codehaus.jackson.map.ser.std.BeanSerializerBase r0;
        java.lang.Object $r14;

        r0 := @this: org.codehaus.jackson.map.ser.std.BeanSerializerBase;

        r5 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $r1 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        if $r1 != null goto label01;

        $i3 = 0;

        goto label02;

     label01:
        $r2 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        $i3 = lengthof $r2;

     label02:
        i0 = $i3;

        i4 = 0;

        $r3 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

        $i2 = lengthof $r3;

     label03:
        if i4 >= $i2 goto label09;

        $r7 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

        r18 = $r7[i4];

        $z0 = virtualinvoke r18.<org.codehaus.jackson.map.ser.BeanPropertyWriter: boolean hasSerializer()>();

        if $z0 == 0 goto label04;

        goto label08;

     label04:
        $r8 = virtualinvoke r18.<org.codehaus.jackson.map.ser.BeanPropertyWriter: org.codehaus.jackson.type.JavaType getSerializationType()>();

        r19 = $r8;

        if $r8 != null goto label06;

        $r16 = virtualinvoke r18.<org.codehaus.jackson.map.ser.BeanPropertyWriter: java.lang.reflect.Type getGenericPropertyType()>();

        $r17 = virtualinvoke r5.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>($r16);

        r19 = $r17;

        $z3 = virtualinvoke $r17.<org.codehaus.jackson.type.JavaType: boolean isFinal()>();

        if $z3 != 0 goto label06;

        $z4 = virtualinvoke $r17.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z4 != 0 goto label05;

        $i1 = virtualinvoke $r17.<org.codehaus.jackson.type.JavaType: int containedTypeCount()>();

        if $i1 <= 0 goto label08;

     label05:
        virtualinvoke r18.<org.codehaus.jackson.map.ser.BeanPropertyWriter: void setNonTrivialBaseType(org.codehaus.jackson.type.JavaType)>($r17);

        goto label08;

     label06:
        $r9 = virtualinvoke r5.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r19, r18);

        r20 = $r9;

        $z1 = virtualinvoke r19.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z1 == 0 goto label07;

        $r13 = virtualinvoke r19.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r14 = virtualinvoke $r13.<org.codehaus.jackson.type.JavaType: java.lang.Object getTypeHandler()>();

        r21 = (org.codehaus.jackson.map.TypeSerializer) $r14;

        if r21 == null goto label07;

        $z2 = $r9 instanceof org.codehaus.jackson.map.ser.std.ContainerSerializerBase;

        if $z2 == 0 goto label07;

        $r15 = (org.codehaus.jackson.map.ser.std.ContainerSerializerBase) $r9;

        r20 = virtualinvoke $r15.<org.codehaus.jackson.map.ser.std.ContainerSerializerBase: org.codehaus.jackson.map.ser.std.ContainerSerializerBase withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)>(r21);

     label07:
        $r22 = virtualinvoke r18.<org.codehaus.jackson.map.ser.BeanPropertyWriter: org.codehaus.jackson.map.ser.BeanPropertyWriter withSerializer(org.codehaus.jackson.map.JsonSerializer)>(r20);

        $r23 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _props>;

        $r23[i4] = $r22;

        if i4 >= i0 goto label08;

        $r10 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        r24 = $r10[i4];

        if r24 == null goto label08;

        $r11 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] _filteredProps>;

        $r12 = virtualinvoke r24.<org.codehaus.jackson.map.ser.BeanPropertyWriter: org.codehaus.jackson.map.ser.BeanPropertyWriter withSerializer(org.codehaus.jackson.map.JsonSerializer)>(r20);

        $r11[i4] = $r12;

     label08:
        i4 = i4 + 1;

        goto label03;

     label09:
        $r4 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter>;

        if $r4 == null goto label10;

        $r6 = r0.<org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.AnyGetterWriter _anyGetterWriter>;

        virtualinvoke $r6.<org.codehaus.jackson.map.ser.AnyGetterWriter: void resolve(org.codehaus.jackson.map.SerializerProvider)>(r5);

     label10:
        return;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.BeanPropertyWriter[] $r0;

        $r0 = newarray (org.codehaus.jackson.map.ser.BeanPropertyWriter)[0];

        <org.codehaus.jackson.map.ser.std.BeanSerializerBase: org.codehaus.jackson.map.ser.BeanPropertyWriter[] NO_PROPS> = $r0;

        return;
    }
}
