public class org.apache.jena.iri.impl.Specification extends org.apache.jena.iri.impl.IRIExamples
{
    public static final java.util.Map iris;
    public static final java.util.Map schemes;
    private static final java.util.Map other;
    public static final java.util.Map all;
    private final java.lang.String uri;
    private final java.lang.String name;
    private final java.lang.String title;
    private final java.lang.String section;
    private final java.lang.String rfc;
    private final boolean isScheme;
    private final boolean isIri;
    protected long[] violations;
    private int required;
    private int prohibited;

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String[], java.lang.String[])
    {
        java.lang.String[] r1, r2;
        long[] $r3;
        org.apache.jena.iri.impl.Specification r0;
        java.util.Map $r8, $r12, $r13, $r19, $r20;
        java.lang.String r4, r5, r7, r9, r10, r11, $r18, $r21;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r6, $r14;
        java.lang.StringBuilder $r15, $r16, $r17;

        r0 := @this: org.apache.jena.iri.impl.Specification;

        r7 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r9 := @parameter3: java.lang.String;

        r11 := @parameter4: java.lang.String;

        r10 := @parameter5: java.lang.String;

        r1 := @parameter6: java.lang.String[];

        r2 := @parameter7: java.lang.String[];

        specialinvoke r0.<org.apache.jena.iri.impl.IRIExamples: void <init>(java.lang.String[],java.lang.String[])>(r1, r2);

        $r3 = newarray (long)[5];

        r0.<org.apache.jena.iri.impl.Specification: long[] violations> = $r3;

        r0.<org.apache.jena.iri.impl.Specification: java.lang.String rfc> = r4;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("iri");

        if $z0 == 0 goto label1;

        r0.<org.apache.jena.iri.impl.Specification: boolean isScheme> = 0;

        r0.<org.apache.jena.iri.impl.Specification: boolean isIri> = 1;

        $r20 = <org.apache.jena.iri.impl.Specification: java.util.Map iris>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r0);

        goto label4;

     label1:
        $z1 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("scheme");

        if $z1 == 0 goto label2;

        r0.<org.apache.jena.iri.impl.Specification: boolean isScheme> = 1;

        r0.<org.apache.jena.iri.impl.Specification: boolean isIri> = 0;

        $r19 = <org.apache.jena.iri.impl.Specification: java.util.Map schemes>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r0);

        goto label4;

     label2:
        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("other");

        if $z2 == 0 goto label3;

        r0.<org.apache.jena.iri.impl.Specification: boolean isScheme> = 0;

        r0.<org.apache.jena.iri.impl.Specification: boolean isIri> = 0;

        $r8 = <org.apache.jena.iri.impl.Specification: java.util.Map other>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r0);

        goto label4;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("type must be \'iri\', \'other\' or \'scheme\'");

        throw $r6;

     label4:
        r0.<org.apache.jena.iri.impl.Specification: java.lang.String uri> = r9;

        r0.<org.apache.jena.iri.impl.Specification: java.lang.String name> = r7;

        $z4 = virtualinvoke r10.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z4 == 0 goto label5;

        $r21 = null;

        goto label6;

     label5:
        $r21 = r10;

     label6:
        r0.<org.apache.jena.iri.impl.Specification: java.lang.String section> = $r21;

        r0.<org.apache.jena.iri.impl.Specification: java.lang.String title> = r11;

        $r12 = <org.apache.jena.iri.impl.Specification: java.util.Map all>;

        $z3 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>(r7);

        if $z3 == 0 goto label7;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("two specifications named: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r14;

     label7:
        $r13 = <org.apache.jena.iri.impl.Specification: java.util.Map all>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r0);

        return;
    }

    public static org.apache.jena.iri.impl.Specification get(java.lang.String)
    {
        java.lang.IllegalArgumentException $r4;
        org.apache.jena.iri.impl.Specification r3;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String r0, $r8;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.jena.iri.impl.Specification: java.util.Map all>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (org.apache.jena.iri.impl.Specification) $r2;

        if r3 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown spec: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        return r3;
    }

    public java.lang.String getUri()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.Specification r0;

        r0 := @this: org.apache.jena.iri.impl.Specification;

        $r1 = r0.<org.apache.jena.iri.impl.Specification: java.lang.String uri>;

        return $r1;
    }

    public void add(org.apache.jena.iri.impl.ViolationCodeInfo$InSpec, org.apache.jena.iri.impl.ViolationCodeInfo)
    {
        org.apache.jena.iri.impl.ViolationCodeInfo$InSpec r3;
        org.apache.jena.iri.impl.ViolationCodeInfo r0;
        long l1, $l5, $l6;
        long[] $r2;
        org.apache.jena.iri.impl.Specification r1;
        int $i0, $i2, $i3, $i4, i7;

        r1 := @this: org.apache.jena.iri.impl.Specification;

        r3 := @parameter0: org.apache.jena.iri.impl.ViolationCodeInfo$InSpec;

        r0 := @parameter1: org.apache.jena.iri.impl.ViolationCodeInfo;

        $i0 = virtualinvoke r0.<org.apache.jena.iri.impl.ViolationCodeInfo: int getCode()>();

        l1 = 1L << $i0;

        $i2 = virtualinvoke r0.<org.apache.jena.iri.impl.ViolationCodeInfo: int getForce()>();

        i7 = 0;

     label1:
        if i7 >= 5 goto label3;

        $i3 = 1 << i7;

        $i4 = $i2 & $i3;

        if $i4 == 0 goto label2;

        $r2 = r1.<org.apache.jena.iri.impl.Specification: long[] violations>;

        $l5 = $r2[i7];

        $l6 = $l5 | l1;

        $r2[i7] = $l6;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        return;
    }

    public long getErrors(int)
    {
        long[] $r1;
        org.apache.jena.iri.impl.Specification r0;
        int i0;
        long $l1;

        r0 := @this: org.apache.jena.iri.impl.Specification;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.jena.iri.impl.Specification: long[] violations>;

        $l1 = $r1[i0];

        return $l1;
    }

    public java.lang.String name()
    {
        java.lang.String $r1;
        org.apache.jena.iri.impl.Specification r0;

        r0 := @this: org.apache.jena.iri.impl.Specification;

        $r1 = r0.<org.apache.jena.iri.impl.Specification: java.lang.String name>;

        return $r1;
    }

    public void addDefinition(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.IllegalStateException $r0;
        org.apache.jena.iri.impl.Specification r1;
        java.lang.String r2, r3, r4;

        r1 := @this: org.apache.jena.iri.impl.Specification;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("addDefinition() applies to SchemeSpecification, not Specification");

        throw $r0;
    }

    public void setDNS(boolean)
    {
        java.lang.IllegalStateException $r0;
        org.apache.jena.iri.impl.Specification r1;
        boolean z0;

        r1 := @this: org.apache.jena.iri.impl.Specification;

        z0 := @parameter0: boolean;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setDNS() applies to SchemeSpecification, not Specification");

        throw $r0;
    }

    public void port(int)
    {
        int i0;
        java.lang.IllegalStateException $r0;
        org.apache.jena.iri.impl.Specification r1;

        r1 := @this: org.apache.jena.iri.impl.Specification;

        i0 := @parameter0: int;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("port() applies to SchemeSpecification, not Specification");

        throw $r0;
    }

    public void prohibit(int)
    {
        org.apache.jena.iri.impl.Specification r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.jena.iri.impl.Specification;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.jena.iri.impl.Specification: int prohibited>;

        $i1 = 1 << i0;

        $i3 = $i2 | $i1;

        r0.<org.apache.jena.iri.impl.Specification: int prohibited> = $i3;

        return;
    }

    public void require(int)
    {
        org.apache.jena.iri.impl.Specification r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: org.apache.jena.iri.impl.Specification;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.jena.iri.impl.Specification: int required>;

        $i1 = 1 << i0;

        $i3 = $i2 | $i1;

        r0.<org.apache.jena.iri.impl.Specification: int required> = $i3;

        return;
    }

    public void setPattern(int, java.lang.String)
    {
        java.lang.IllegalStateException $r0;
        org.apache.jena.iri.impl.Specification r1;
        int i0;
        java.lang.String r2;

        r1 := @this: org.apache.jena.iri.impl.Specification;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setPattern() applies to SchemeSpecification, not Specification");

        throw $r0;
    }

    public void setReserved(int, java.lang.String)
    {
        java.lang.IllegalStateException $r0;
        org.apache.jena.iri.impl.Specification r1;
        int i0;
        java.lang.String r2;

        r1 := @this: org.apache.jena.iri.impl.Specification;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("setReserved() applies to SchemeSpecification, not Specification");

        throw $r0;
    }

    public int getProhibited()
    {
        int $i0;
        org.apache.jena.iri.impl.Specification r0;

        r0 := @this: org.apache.jena.iri.impl.Specification;

        $i0 = r0.<org.apache.jena.iri.impl.Specification: int prohibited>;

        return $i0;
    }

    public int getRequired()
    {
        int $i0;
        org.apache.jena.iri.impl.Specification r0;

        r0 := @this: org.apache.jena.iri.impl.Specification;

        $i0 = r0.<org.apache.jena.iri.impl.Specification: int required>;

        return $i0;
    }

    public boolean isIRISpec()
    {
        org.apache.jena.iri.impl.Specification r0;
        boolean $z0;

        r0 := @this: org.apache.jena.iri.impl.Specification;

        $z0 = r0.<org.apache.jena.iri.impl.Specification: boolean isIri>;

        return $z0;
    }

    public boolean isSchemeSpec()
    {
        org.apache.jena.iri.impl.Specification r0;
        boolean $z0;

        r0 := @this: org.apache.jena.iri.impl.Specification;

        $z0 = r0.<org.apache.jena.iri.impl.Specification: boolean isScheme>;

        return $z0;
    }

    public boolean applies(java.lang.String)
    {
        java.lang.String r1;
        org.apache.jena.iri.impl.Specification r0;

        r0 := @this: org.apache.jena.iri.impl.Specification;

        r1 := @parameter0: java.lang.String;

        return 1;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0, $r1, $r2, $r3;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.jena.iri.impl.Specification: java.util.Map iris> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <org.apache.jena.iri.impl.Specification: java.util.Map schemes> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.apache.jena.iri.impl.Specification: java.util.Map other> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <org.apache.jena.iri.impl.Specification: java.util.Map all> = $r3;

        return;
    }
}
