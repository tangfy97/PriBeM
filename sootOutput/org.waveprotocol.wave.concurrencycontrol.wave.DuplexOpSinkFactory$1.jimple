final class org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1 extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory
{

    void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1 r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSink create(org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink, org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink r3;
        org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink r2;
        org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1 $r0;
        org.waveprotocol.wave.model.id.WaveletId r4;
        org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1 r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1;

        r4 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink;

        r3 := @parameter2: org.waveprotocol.wave.model.operation.SilentOperationSink;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1$1: void <init>(org.waveprotocol.wave.concurrencycontrol.wave.DuplexOpSinkFactory$1,org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink,org.waveprotocol.wave.model.operation.SilentOperationSink)>(r1, r2, r3);

        return $r0;
    }
}
