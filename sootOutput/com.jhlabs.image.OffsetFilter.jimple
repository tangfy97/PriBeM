public class com.jhlabs.image.OffsetFilter extends com.jhlabs.image.TransformFilter implements java.io.Serializable
{
    private int width;
    private int height;
    private int xOffset;
    private int yOffset;
    private boolean wrap;

    public void <init>()
    {
        com.jhlabs.image.OffsetFilter r0;

        r0 := @this: com.jhlabs.image.OffsetFilter;

        specialinvoke r0.<com.jhlabs.image.OffsetFilter: void <init>(int,int,boolean)>(0, 0, 1);

        return;
    }

    public void <init>(int, int, boolean)
    {
        com.jhlabs.image.OffsetFilter r0;
        int i0, i1;
        boolean z0;

        r0 := @this: com.jhlabs.image.OffsetFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.jhlabs.image.TransformFilter: void <init>()>();

        r0.<com.jhlabs.image.OffsetFilter: int xOffset> = i0;

        r0.<com.jhlabs.image.OffsetFilter: int yOffset> = i1;

        r0.<com.jhlabs.image.OffsetFilter: boolean wrap> = z0;

        virtualinvoke r0.<com.jhlabs.image.TransformFilter: void setEdgeAction(int)>(0);

        return;
    }

    public void setXOffset(int)
    {
        int i0;
        com.jhlabs.image.OffsetFilter r0;

        r0 := @this: com.jhlabs.image.OffsetFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.OffsetFilter: int xOffset> = i0;

        return;
    }

    public int getXOffset()
    {
        int $i0;
        com.jhlabs.image.OffsetFilter r0;

        r0 := @this: com.jhlabs.image.OffsetFilter;

        $i0 = r0.<com.jhlabs.image.OffsetFilter: int xOffset>;

        return $i0;
    }

    public void setYOffset(int)
    {
        int i0;
        com.jhlabs.image.OffsetFilter r0;

        r0 := @this: com.jhlabs.image.OffsetFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.OffsetFilter: int yOffset> = i0;

        return;
    }

    public int getYOffset()
    {
        int $i0;
        com.jhlabs.image.OffsetFilter r0;

        r0 := @this: com.jhlabs.image.OffsetFilter;

        $i0 = r0.<com.jhlabs.image.OffsetFilter: int yOffset>;

        return $i0;
    }

    public void setWrap(boolean)
    {
        com.jhlabs.image.OffsetFilter r0;
        boolean z0;

        r0 := @this: com.jhlabs.image.OffsetFilter;

        z0 := @parameter0: boolean;

        r0.<com.jhlabs.image.OffsetFilter: boolean wrap> = z0;

        return;
    }

    public boolean getWrap()
    {
        com.jhlabs.image.OffsetFilter r0;
        boolean $z0;

        r0 := @this: com.jhlabs.image.OffsetFilter;

        $z0 = r0.<com.jhlabs.image.OffsetFilter: boolean wrap>;

        return $z0;
    }

    protected void transformInverse(int, int, float[])
    {
        com.jhlabs.image.OffsetFilter r0;
        float[] r1;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        boolean $z0;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.jhlabs.image.OffsetFilter;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        r1 := @parameter2: float[];

        $z0 = r0.<com.jhlabs.image.OffsetFilter: boolean wrap>;

        if $z0 == 0 goto label1;

        $i6 = r0.<com.jhlabs.image.OffsetFilter: int width>;

        $i8 = i0 + $i6;

        $i7 = r0.<com.jhlabs.image.OffsetFilter: int xOffset>;

        $i10 = $i8 - $i7;

        $i9 = r0.<com.jhlabs.image.OffsetFilter: int width>;

        $i11 = $i10 % $i9;

        $f2 = (float) $i11;

        r1[0] = $f2;

        $i12 = r0.<com.jhlabs.image.OffsetFilter: int height>;

        $i14 = i3 + $i12;

        $i13 = r0.<com.jhlabs.image.OffsetFilter: int yOffset>;

        $i16 = $i14 - $i13;

        $i15 = r0.<com.jhlabs.image.OffsetFilter: int height>;

        $i17 = $i16 % $i15;

        $f3 = (float) $i17;

        r1[1] = $f3;

        goto label2;

     label1:
        $i1 = r0.<com.jhlabs.image.OffsetFilter: int xOffset>;

        $i2 = i0 - $i1;

        $f0 = (float) $i2;

        r1[0] = $f0;

        $i4 = r0.<com.jhlabs.image.OffsetFilter: int yOffset>;

        $i5 = i3 - $i4;

        $f1 = (float) $i5;

        r1[1] = $f1;

     label2:
        return;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        com.jhlabs.image.OffsetFilter r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        boolean $z0;
        java.awt.image.BufferedImage r1, r2, $r3;

        r0 := @this: com.jhlabs.image.OffsetFilter;

        r1 := @parameter0: java.awt.image.BufferedImage;

        r2 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        r0.<com.jhlabs.image.OffsetFilter: int width> = $i0;

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        r0.<com.jhlabs.image.OffsetFilter: int height> = $i1;

        $z0 = r0.<com.jhlabs.image.OffsetFilter: boolean wrap>;

        if $z0 == 0 goto label4;

     label1:
        $i2 = r0.<com.jhlabs.image.OffsetFilter: int xOffset>;

        if $i2 >= 0 goto label2;

        $i14 = r0.<com.jhlabs.image.OffsetFilter: int xOffset>;

        $i13 = r0.<com.jhlabs.image.OffsetFilter: int width>;

        $i15 = $i14 + $i13;

        r0.<com.jhlabs.image.OffsetFilter: int xOffset> = $i15;

        goto label1;

     label2:
        $i3 = r0.<com.jhlabs.image.OffsetFilter: int yOffset>;

        if $i3 >= 0 goto label3;

        $i11 = r0.<com.jhlabs.image.OffsetFilter: int yOffset>;

        $i10 = r0.<com.jhlabs.image.OffsetFilter: int height>;

        $i12 = $i11 + $i10;

        r0.<com.jhlabs.image.OffsetFilter: int yOffset> = $i12;

        goto label2;

     label3:
        $i5 = r0.<com.jhlabs.image.OffsetFilter: int xOffset>;

        $i4 = r0.<com.jhlabs.image.OffsetFilter: int width>;

        $i6 = $i5 % $i4;

        r0.<com.jhlabs.image.OffsetFilter: int xOffset> = $i6;

        $i8 = r0.<com.jhlabs.image.OffsetFilter: int yOffset>;

        $i7 = r0.<com.jhlabs.image.OffsetFilter: int height>;

        $i9 = $i8 % $i7;

        r0.<com.jhlabs.image.OffsetFilter: int yOffset> = $i9;

     label4:
        $r3 = specialinvoke r0.<com.jhlabs.image.TransformFilter: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(r1, r2);

        return $r3;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.OffsetFilter r0;

        r0 := @this: com.jhlabs.image.OffsetFilter;

        return "Distort/Offset...";
    }
}
