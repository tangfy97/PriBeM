public abstract class org.apache.lucene.queries.function.valuesource.MultiFloatFunction extends org.apache.lucene.queries.function.ValueSource
{
    protected final org.apache.lucene.queries.function.ValueSource[] sources;

    public void <init>(org.apache.lucene.queries.function.ValueSource[])
    {
        org.apache.lucene.queries.function.valuesource.MultiFloatFunction r0;
        org.apache.lucene.queries.function.ValueSource[] r1;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiFloatFunction;

        r1 := @parameter0: org.apache.lucene.queries.function.ValueSource[];

        specialinvoke r0.<org.apache.lucene.queries.function.ValueSource: void <init>()>();

        r0.<org.apache.lucene.queries.function.valuesource.MultiFloatFunction: org.apache.lucene.queries.function.ValueSource[] sources> = r1;

        return;
    }

    protected abstract java.lang.String name();

    protected abstract float func(int, org.apache.lucene.queries.function.FunctionValues[]);

    public java.lang.String description()
    {
        org.apache.lucene.queries.function.valuesource.MultiFloatFunction r1;
        org.apache.lucene.queries.function.ValueSource[] r4;
        org.apache.lucene.queries.function.ValueSource r6;
        int i0, i1;
        java.lang.StringBuilder $r0, $r3;
        java.lang.String $r2, $r5;
        boolean z0;

        r1 := @this: org.apache.lucene.queries.function.valuesource.MultiFloatFunction;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.queries.function.valuesource.MultiFloatFunction: java.lang.String name()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        z0 = 1;

        r4 = r1.<org.apache.lucene.queries.function.valuesource.MultiFloatFunction: org.apache.lucene.queries.function.ValueSource[] sources>;

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r6 = r4[i1];

        if z0 == 0 goto label2;

        z0 = 0;

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        i1 = i1 + 1;

        goto label1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map, org.apache.lucene.index.AtomicReaderContext) throws java.io.IOException
    {
        org.apache.lucene.queries.function.valuesource.MultiFloatFunction r0;
        org.apache.lucene.queries.function.FunctionValues[] r2;
        org.apache.lucene.queries.function.valuesource.MultiFloatFunction$1 $r4;
        org.apache.lucene.queries.function.ValueSource[] $r1, $r3, $r5;
        org.apache.lucene.queries.function.ValueSource $r8;
        java.util.Map r6;
        int $i0, $i1, i2;
        org.apache.lucene.queries.function.FunctionValues $r9;
        org.apache.lucene.index.AtomicReaderContext r7;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiFloatFunction;

        r6 := @parameter0: java.util.Map;

        r7 := @parameter1: org.apache.lucene.index.AtomicReaderContext;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.MultiFloatFunction: org.apache.lucene.queries.function.ValueSource[] sources>;

        $i0 = lengthof $r1;

        r2 = newarray (org.apache.lucene.queries.function.FunctionValues)[$i0];

        i2 = 0;

     label1:
        $r3 = r0.<org.apache.lucene.queries.function.valuesource.MultiFloatFunction: org.apache.lucene.queries.function.ValueSource[] sources>;

        $i1 = lengthof $r3;

        if i2 >= $i1 goto label2;

        $r5 = r0.<org.apache.lucene.queries.function.valuesource.MultiFloatFunction: org.apache.lucene.queries.function.ValueSource[] sources>;

        $r8 = $r5[i2];

        $r9 = virtualinvoke $r8.<org.apache.lucene.queries.function.ValueSource: org.apache.lucene.queries.function.FunctionValues getValues(java.util.Map,org.apache.lucene.index.AtomicReaderContext)>(r6, r7);

        r2[i2] = $r9;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = new org.apache.lucene.queries.function.valuesource.MultiFloatFunction$1;

        specialinvoke $r4.<org.apache.lucene.queries.function.valuesource.MultiFloatFunction$1: void <init>(org.apache.lucene.queries.function.valuesource.MultiFloatFunction,org.apache.lucene.queries.function.ValueSource,org.apache.lucene.queries.function.FunctionValues[])>(r0, r0, r2);

        return $r4;
    }

    public void createWeight(java.util.Map, org.apache.lucene.search.IndexSearcher) throws java.io.IOException
    {
        org.apache.lucene.queries.function.ValueSource r2;
        org.apache.lucene.queries.function.valuesource.MultiFloatFunction r0;
        org.apache.lucene.queries.function.ValueSource[] r1;
        java.util.Map r3;
        int i0, i1;
        org.apache.lucene.search.IndexSearcher r4;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiFloatFunction;

        r3 := @parameter0: java.util.Map;

        r4 := @parameter1: org.apache.lucene.search.IndexSearcher;

        r1 = r0.<org.apache.lucene.queries.function.valuesource.MultiFloatFunction: org.apache.lucene.queries.function.ValueSource[] sources>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        virtualinvoke r2.<org.apache.lucene.queries.function.ValueSource: void createWeight(java.util.Map,org.apache.lucene.search.IndexSearcher)>(r3, r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public int hashCode()
    {
        org.apache.lucene.queries.function.valuesource.MultiFloatFunction r0;
        org.apache.lucene.queries.function.ValueSource[] $r1;
        int $i0, $i1, $i2;
        java.lang.String $r2;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiFloatFunction;

        $r1 = r0.<org.apache.lucene.queries.function.valuesource.MultiFloatFunction: org.apache.lucene.queries.function.ValueSource[] sources>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r1);

        $r2 = virtualinvoke r0.<org.apache.lucene.queries.function.valuesource.MultiFloatFunction: java.lang.String name()>();

        $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.queries.function.valuesource.MultiFloatFunction r0, r4;
        org.apache.lucene.queries.function.ValueSource[] $r7, $r8;
        java.lang.Class $r1, $r3;
        java.lang.Object r2;
        java.lang.String $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.queries.function.valuesource.MultiFloatFunction;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        if $r1 == $r3 goto label1;

        return 0;

     label1:
        r4 = (org.apache.lucene.queries.function.valuesource.MultiFloatFunction) r2;

        $r5 = virtualinvoke r0.<org.apache.lucene.queries.function.valuesource.MultiFloatFunction: java.lang.String name()>();

        $r6 = virtualinvoke r4.<org.apache.lucene.queries.function.valuesource.MultiFloatFunction: java.lang.String name()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r8 = r0.<org.apache.lucene.queries.function.valuesource.MultiFloatFunction: org.apache.lucene.queries.function.ValueSource[] sources>;

        $r7 = r4.<org.apache.lucene.queries.function.valuesource.MultiFloatFunction: org.apache.lucene.queries.function.ValueSource[] sources>;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r8, $r7);

        if $z1 == 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }
}
