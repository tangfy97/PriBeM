public class org.apache.batik.anim.timing.InstanceTime extends java.lang.Object implements java.lang.Comparable
{
    protected float time;
    protected org.apache.batik.anim.timing.TimingSpecifier creator;
    protected boolean clearOnReset;

    public void <init>(org.apache.batik.anim.timing.TimingSpecifier, float, boolean)
    {
        org.apache.batik.anim.timing.InstanceTime r0;
        float f0;
        org.apache.batik.anim.timing.TimingSpecifier r1;
        boolean z0;

        r0 := @this: org.apache.batik.anim.timing.InstanceTime;

        r1 := @parameter0: org.apache.batik.anim.timing.TimingSpecifier;

        f0 := @parameter1: float;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.anim.timing.InstanceTime: org.apache.batik.anim.timing.TimingSpecifier creator> = r1;

        r0.<org.apache.batik.anim.timing.InstanceTime: float time> = f0;

        r0.<org.apache.batik.anim.timing.InstanceTime: boolean clearOnReset> = z0;

        return;
    }

    public boolean getClearOnReset()
    {
        org.apache.batik.anim.timing.InstanceTime r0;
        boolean $z0;

        r0 := @this: org.apache.batik.anim.timing.InstanceTime;

        $z0 = r0.<org.apache.batik.anim.timing.InstanceTime: boolean clearOnReset>;

        return $z0;
    }

    public float getTime()
    {
        float $f0;
        org.apache.batik.anim.timing.InstanceTime r0;

        r0 := @this: org.apache.batik.anim.timing.InstanceTime;

        $f0 = r0.<org.apache.batik.anim.timing.InstanceTime: float time>;

        return $f0;
    }

    float dependentUpdate(float)
    {
        org.apache.batik.anim.timing.InstanceTime r0;
        float f0, $f1, $f2;
        org.apache.batik.anim.timing.TimingSpecifier $r1, $r2;

        r0 := @this: org.apache.batik.anim.timing.InstanceTime;

        f0 := @parameter0: float;

        r0.<org.apache.batik.anim.timing.InstanceTime: float time> = f0;

        $r1 = r0.<org.apache.batik.anim.timing.InstanceTime: org.apache.batik.anim.timing.TimingSpecifier creator>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.anim.timing.InstanceTime: org.apache.batik.anim.timing.TimingSpecifier creator>;

        $f1 = r0.<org.apache.batik.anim.timing.InstanceTime: float time>;

        $f2 = virtualinvoke $r2.<org.apache.batik.anim.timing.TimingSpecifier: float handleTimebaseUpdate(org.apache.batik.anim.timing.InstanceTime,float)>(r0, $f1);

        return $f2;

     label1:
        return #InfinityF;
    }

    public java.lang.String toString()
    {
        float $f0;
        java.lang.String $r1;
        org.apache.batik.anim.timing.InstanceTime r0;

        r0 := @this: org.apache.batik.anim.timing.InstanceTime;

        $f0 = r0.<org.apache.batik.anim.timing.InstanceTime: float time>;

        $r1 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0);

        return $r1;
    }

    public int compareTo(java.lang.Object)
    {
        org.apache.batik.anim.timing.InstanceTime r1, r2;
        byte $b0, $b1;
        int $i2, $i4;
        float $f0, $f1, $f2, $f3;
        java.lang.Object r0;

        r2 := @this: org.apache.batik.anim.timing.InstanceTime;

        r0 := @parameter0: java.lang.Object;

        r1 = (org.apache.batik.anim.timing.InstanceTime) r0;

        $f1 = r2.<org.apache.batik.anim.timing.InstanceTime: float time>;

        $f0 = r1.<org.apache.batik.anim.timing.InstanceTime: float time>;

        $b0 = $f1 cmpl $f0;

        if $b0 != 0 goto label1;

        return 0;

     label1:
        $f3 = r2.<org.apache.batik.anim.timing.InstanceTime: float time>;

        $f2 = r1.<org.apache.batik.anim.timing.InstanceTime: float time>;

        $b1 = $f3 cmpl $f2;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label2;

        return 1;

     label2:
        $i4 = (int) -1;

        return $i4;
    }
}
