class org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer extends org.apache.lucene.codecs.DocValuesProducer
{
    static final byte[] NORMS_HEADER;
    static final java.lang.String NORMS_EXTENSION;
    static final java.lang.String SEPARATE_NORMS_EXTENSION;
    final java.util.Map norms;
    final java.util.Set openFiles;
    org.apache.lucene.store.IndexInput singleNormStream;
    final int maxdoc;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfo, org.apache.lucene.index.FieldInfos, org.apache.lucene.store.IOContext) throws java.io.IOException
    {
        byte[] $r7, $r29;
        org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues $r39;
        byte $b3, $b10;
        java.util.Map $r40;
        org.apache.lucene.index.FieldInfos r8;
        org.apache.lucene.store.IOContext r25;
        org.apache.lucene.index.SegmentInfo r4;
        java.util.Set $r3, $r10, $r27, $r34, $r36;
        java.lang.StringBuilder $r15, $r16, $r18, $r19, $r20;
        java.lang.Throwable $r35;
        long $l2, $l4, $l7, $l9, l13, l14, $l16;
        java.lang.AssertionError $r13;
        java.lang.String r6, $r23, $r28, $r41, $r42;
        org.apache.lucene.store.IndexInput $r11, $r12, $r14, $r17, $r26, $r31, $r32, $r33, r38;
        org.apache.lucene.index.FieldInfo r22;
        org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer r0;
        org.apache.lucene.store.Directory r5, r24, $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.IdentityHashMap $r2;
        java.util.HashMap $r1;
        int $i0, $i1, $i5, $i6, $i8, $i11, $i12, $i15;
        java.util.Iterator $r9;
        java.lang.Object $r21;
        java.util.Comparator $r30;

        r0 := @this: org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer;

        r24 := @parameter0: org.apache.lucene.store.Directory;

        r4 := @parameter1: org.apache.lucene.index.SegmentInfo;

        r8 := @parameter2: org.apache.lucene.index.FieldInfos;

        r25 := @parameter3: org.apache.lucene.store.IOContext;

        specialinvoke r0.<org.apache.lucene.codecs.DocValuesProducer: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.util.Map norms> = $r1;

        $r2 = new java.util.IdentityHashMap;

        specialinvoke $r2.<java.util.IdentityHashMap: void <init>()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r2);

        r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.util.Set openFiles> = $r3;

        r5 = r4.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        $i0 = virtualinvoke r4.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: int maxdoc> = $i0;

        r6 = r4.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

     label01:
        $r7 = <org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: byte[] NORMS_HEADER>;

        $i1 = lengthof $r7;

        l13 = (long) $i1;

        $r9 = virtualinvoke r8.<org.apache.lucene.index.FieldInfos: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r21 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.apache.lucene.index.FieldInfo) $r21;

        $z2 = virtualinvoke r22.<org.apache.lucene.index.FieldInfo: boolean hasNorms()>();

        if $z2 == 0 goto label12;

        $i5 = r22.<org.apache.lucene.index.FieldInfo: int number>;

        $r23 = staticinvoke <org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.lang.String getNormFilename(org.apache.lucene.index.SegmentInfo,int)>(r4, $i5);

        $i6 = r22.<org.apache.lucene.index.FieldInfo: int number>;

        $z3 = staticinvoke <org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: boolean hasSeparateNorms(org.apache.lucene.index.SegmentInfo,int)>(r4, $i6);

        if $z3 == 0 goto label03;

        $r37 = r5;

        goto label04;

     label03:
        $r37 = r24;

     label04:
        $z4 = staticinvoke <org.apache.lucene.index.IndexFileNames: boolean matchesExtension(java.lang.String,java.lang.String)>($r23, "nrm");

        if $z4 == 0 goto label06;

        l14 = l13;

        $r31 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: org.apache.lucene.store.IndexInput singleNormStream>;

        if $r31 != null goto label05;

        $r32 = virtualinvoke $r37.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String,org.apache.lucene.store.IOContext)>($r23, r25);

        r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: org.apache.lucene.store.IndexInput singleNormStream> = $r32;

        $r34 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.util.Set openFiles>;

        $r33 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: org.apache.lucene.store.IndexInput singleNormStream>;

        interfaceinvoke $r34.<java.util.Set: boolean add(java.lang.Object)>($r33);

     label05:
        r38 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: org.apache.lucene.store.IndexInput singleNormStream>;

        goto label11;

     label06:
        $r26 = virtualinvoke $r37.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String,org.apache.lucene.store.IOContext)>($r23, r25);

        r38 = $r26;

        $r27 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.util.Set openFiles>;

        interfaceinvoke $r27.<java.util.Set: boolean add(java.lang.Object)>($r26);

        $r28 = virtualinvoke r4.<org.apache.lucene.index.SegmentInfo: java.lang.String getVersion()>();

        if $r28 == null goto label07;

        $r30 = staticinvoke <org.apache.lucene.util.StringHelper: java.util.Comparator getVersionComparator()>();

        $i12 = interfaceinvoke $r30.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r28, "3.2");

        if $i12 >= 0 goto label08;

     label07:
        $l7 = virtualinvoke $r26.<org.apache.lucene.store.IndexInput: long length()>();

        $i8 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: int maxdoc>;

        $l9 = (long) $i8;

        $b10 = $l7 cmp $l9;

        if $b10 != 0 goto label08;

        $z5 = 1;

        goto label09;

     label08:
        $z5 = 0;

     label09:
        if $z5 == 0 goto label10;

        l14 = 0L;

        goto label11;

     label10:
        $r29 = <org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: byte[] NORMS_HEADER>;

        $i11 = lengthof $r29;

        l14 = (long) $i11;

     label11:
        $r39 = new org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues;

        specialinvoke $r39.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues: void <init>(org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer,org.apache.lucene.store.IndexInput,long)>(r0, r38, l14);

        $r40 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.util.Map norms>;

        $r41 = r22.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        interfaceinvoke $r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r41, $r39);

        $i15 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: int maxdoc>;

        $l16 = (long) $i15;

        l13 = l13 + $l16;

     label12:
        goto label02;

     label13:
        $z1 = <org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: boolean $assertionsDisabled>;

        if $z1 != 0 goto label16;

        $r11 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: org.apache.lucene.store.IndexInput singleNormStream>;

        if $r11 == null goto label16;

        $r12 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: org.apache.lucene.store.IndexInput singleNormStream>;

        $l2 = virtualinvoke $r12.<org.apache.lucene.store.IndexInput: long length()>();

        $b3 = l13 cmp $l2;

        if $b3 == 0 goto label16;

        $r13 = new java.lang.AssertionError;

        $r14 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: org.apache.lucene.store.IndexInput singleNormStream>;

        if $r14 == null goto label14;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len: ");

        $r17 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: org.apache.lucene.store.IndexInput singleNormStream>;

        $l4 = virtualinvoke $r17.<org.apache.lucene.store.IndexInput: long length()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expected: ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l13);

        $r42 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label15;

     label14:
        $r42 = "null";

     label15:
        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>($r42);

        throw $r13;

     label16:
        if 1 != 0 goto label20;

        $r10 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.util.Set openFiles>;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Iterable)>($r10);

        goto label20;

     label17:
        $r35 := @caughtexception;

     label18:
        if 0 != 0 goto label19;

        $r36 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.util.Set openFiles>;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Iterable)>($r36);

     label19:
        throw $r35;

     label20:
        return;

        catch java.lang.Throwable from label01 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public void close() throws java.io.IOException
    {
        org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer r0;
        java.lang.Throwable $r4;
        java.util.Map $r2, $r5;
        java.util.Set $r1, $r3, $r6;

        r0 := @this: org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer;

     label1:
        $r1 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.util.Set openFiles>;

        staticinvoke <org.apache.lucene.util.IOUtils: void close(java.lang.Iterable)>($r1);

     label2:
        $r2 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.util.Map norms>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.util.Set openFiles>;

        interfaceinvoke $r3.<java.util.Set: void clear()>();

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        $r5 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.util.Map norms>;

        interfaceinvoke $r5.<java.util.Map: void clear()>();

        $r6 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.util.Set openFiles>;

        interfaceinvoke $r6.<java.util.Set: void clear()>();

        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private static java.lang.String getNormFilename(org.apache.lucene.index.SegmentInfo, int)
    {
        long $l1;
        int i0;
        java.lang.String $r1, $r2, $r4, $r7, $r8, $r10, $r13, $r14;
        boolean $z0;
        org.apache.lucene.index.SegmentInfo r0;
        java.lang.StringBuilder $r3, $r5, $r6, $r9, $r11, $r12;

        r0 := @parameter0: org.apache.lucene.index.SegmentInfo;

        i0 := @parameter1: int;

        $z0 = staticinvoke <org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: boolean hasSeparateNorms(org.apache.lucene.index.SegmentInfo,int)>(r0, i0);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = <org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat: java.lang.String NORMGEN_PREFIX>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfo: java.lang.String getAttribute(java.lang.String)>($r7);

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r8);

        $r10 = r0.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String fileNameFromGeneration(java.lang.String,java.lang.String,long)>($r10, $r13, $l1);

        return $r14;

     label1:
        $r1 = r0.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r2 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r1, "", "nrm");

        return $r2;
    }

    private static boolean hasSeparateNorms(org.apache.lucene.index.SegmentInfo, int)
    {
        org.apache.lucene.index.SegmentInfo r0;
        long $l1;
        java.lang.AssertionError $r7;
        byte $b2;
        int i0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5, $r6;
        boolean $z0;

        r0 := @parameter0: org.apache.lucene.index.SegmentInfo;

        i0 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = <org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoFormat: java.lang.String NORMGEN_PREFIX>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfo: java.lang.String getAttribute(java.lang.String)>($r5);

        if $r6 != null goto label1;

        return 0;

     label1:
        $z0 = <org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r6);

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label2;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label2:
        return 1;
    }

    public org.apache.lucene.index.NumericDocValues getNumeric(org.apache.lucene.index.FieldInfo) throws java.io.IOException
    {
        org.apache.lucene.index.NumericDocValues $r6;
        java.lang.AssertionError $r7;
        org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer r0;
        org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues r5;
        java.util.Map $r3;
        org.apache.lucene.index.FieldInfo r1;
        java.lang.Object $r4;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        $r3 = r0.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.util.Map norms>;

        $r2 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues) $r4;

        $z0 = <org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r5 != null goto label1;

        $r7 = new java.lang.AssertionError;

        specialinvoke $r7.<java.lang.AssertionError: void <init>()>();

        throw $r7;

     label1:
        $r6 = virtualinvoke r5.<org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer$NormsDocValues: org.apache.lucene.index.NumericDocValues getInstance()>();

        return $r6;
    }

    public org.apache.lucene.index.BinaryDocValues getBinary(org.apache.lucene.index.FieldInfo) throws java.io.IOException
    {
        org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer r1;
        org.apache.lucene.index.FieldInfo r2;
        java.lang.AssertionError $r0;

        r1 := @this: org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer;

        r2 := @parameter0: org.apache.lucene.index.FieldInfo;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;
    }

    public org.apache.lucene.index.SortedDocValues getSorted(org.apache.lucene.index.FieldInfo) throws java.io.IOException
    {
        org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer r1;
        org.apache.lucene.index.FieldInfo r2;
        java.lang.AssertionError $r0;

        r1 := @this: org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer;

        r2 := @parameter0: org.apache.lucene.index.FieldInfo;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;
    }

    public org.apache.lucene.index.SortedSetDocValues getSortedSet(org.apache.lucene.index.FieldInfo) throws java.io.IOException
    {
        org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer r1;
        org.apache.lucene.index.FieldInfo r2;
        java.lang.AssertionError $r0;

        r1 := @this: org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer;

        r2 := @parameter0: org.apache.lucene.index.FieldInfo;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>()>();

        throw $r0;
    }

    static void <clinit>()
    {
        byte[] $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.lang.String SEPARATE_NORMS_EXTENSION> = "s";

        <org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: java.lang.String NORMS_EXTENSION> = "nrm";

        $r0 = class "Lorg/apache/lucene/codecs/lucene3x/Lucene3xNormsProducer;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (byte)[4];

        $r1[0] = 78;

        $r1[1] = 82;

        $r1[2] = 77;

        $r1[3] = -1;

        <org.apache.lucene.codecs.lucene3x.Lucene3xNormsProducer: byte[] NORMS_HEADER> = $r1;

        return;
    }
}
