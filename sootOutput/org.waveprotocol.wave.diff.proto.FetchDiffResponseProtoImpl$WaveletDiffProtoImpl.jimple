public final class org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl extends java.lang.Object implements org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff, org.waveprotocol.wave.communication.gson.GsonSerializable, org.waveprotocol.wave.communication.proto.ProtoWrapper
{
    private org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto;
    private org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder protoBuilder;

    public void <init>()
    {
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder $r1;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder protoBuilder> = $r1;

        return;
    }

    public void <init>(org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff)
    {
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff r2;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder $r1;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder protoBuilder> = $r1;

        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto> = r2;

        return;
    }

    public void <init>(org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff)
    {
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder $r1;
        org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff r2;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder protoBuilder> = $r1;

        virtualinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void copyFrom(org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff)>(r2);

        return;
    }

    public org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff getPB()
    {
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff $r1;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto>;

        return $r1;
    }

    public void setPB(org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff)
    {
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff r1;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        r1 := @parameter0: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff;

        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto> = r1;

        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder protoBuilder> = null;

        return;
    }

    public void copyFrom(org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff)
    {
        org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl $r3;
        org.waveprotocol.wave.diff.WaveletDiffSnapshot $r4;
        org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff r1;
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        r1 := @parameter0: org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff: java.lang.String getWaveletId()>();

        virtualinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void setWaveletId(java.lang.String)>($r2);

        $z0 = interfaceinvoke r1.<org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff: boolean hasSnapshot()>();

        if $z0 == 0 goto label1;

        $r3 = new org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl;

        $r4 = interfaceinvoke r1.<org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff: org.waveprotocol.wave.diff.WaveletDiffSnapshot getSnapshot()>();

        specialinvoke $r3.<org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl: void <init>(org.waveprotocol.wave.diff.WaveletDiffSnapshot)>($r4);

        virtualinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void setSnapshot(org.waveprotocol.wave.diff.WaveletDiffSnapshot)>($r3);

        goto label2;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void clearSnapshot()>();

     label2:
        return;
    }

    public java.lang.String getWaveletId()
    {
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff $r1;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff: java.lang.String getWaveletId()>();

        return $r2;
    }

    public void setWaveletId(java.lang.String)
    {
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        java.lang.String r1;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder $r2;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder protoBuilder>;

        virtualinvoke $r2.<org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder setWaveletId(java.lang.String)>(r1);

        return;
    }

    public boolean hasSnapshot()
    {
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff: boolean hasSnapshot()>();

        return $z0;
    }

    public void clearSnapshot()
    {
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder $r1;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder clearSnapshot()>();

        return;
    }

    public org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl getSnapshot()
    {
        org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl $r1;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff $r2;
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$WaveletDiffSnapshot $r3;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void switchToProto()>();

        $r1 = new org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl;

        $r2 = r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff: org.waveprotocol.wave.diff.Diff$WaveletDiffSnapshot getSnapshot()>();

        specialinvoke $r1.<org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl: void <init>(org.waveprotocol.wave.diff.Diff$WaveletDiffSnapshot)>($r3);

        return $r1;
    }

    public void setSnapshot(org.waveprotocol.wave.diff.WaveletDiffSnapshot)
    {
        org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl $r4;
        org.waveprotocol.wave.diff.WaveletDiffSnapshot r2;
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder $r1, $r3;
        org.waveprotocol.wave.diff.Diff$WaveletDiffSnapshot $r5;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.diff.WaveletDiffSnapshot;

        specialinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder clearSnapshot()>();

        $r3 = r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder protoBuilder>;

        $r4 = specialinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl getOrCreateWaveletDiffSnapshotProtoImpl(org.waveprotocol.wave.diff.WaveletDiffSnapshot)>(r2);

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl: org.waveprotocol.wave.diff.Diff$WaveletDiffSnapshot getPB()>();

        virtualinvoke $r3.<org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder setSnapshot(org.waveprotocol.wave.diff.Diff$WaveletDiffSnapshot)>($r5);

        return;
    }

    private org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl getOrCreateWaveletDiffSnapshotProtoImpl(org.waveprotocol.wave.diff.WaveletDiffSnapshot)
    {
        org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl $r1, $r2;
        org.waveprotocol.wave.diff.WaveletDiffSnapshot r0;
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r3;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.diff.WaveletDiffSnapshot;

        $z0 = r0 instanceof org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl;

        if $z0 == 0 goto label1;

        $r2 = (org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl) r0;

        return $r2;

     label1:
        $r1 = new org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl;

        specialinvoke $r1.<org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl: void <init>()>();

        virtualinvoke $r1.<org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl: void copyFrom(org.waveprotocol.wave.diff.WaveletDiffSnapshot)>(r0);

        return $r1;
    }

    private void switchToProto()
    {
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff $r1, $r3;
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder $r2;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto>;

        if $r1 != null goto label1;

        $r2 = r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder protoBuilder>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff build()>();

        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto> = $r3;

        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder protoBuilder> = null;

     label1:
        return;
    }

    private void switchToProtoBuilder()
    {
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff $r2, $r3;
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder $r1, $r4;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        $r1 = r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder protoBuilder>;

        if $r1 != null goto label3;

        $r2 = r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto>;

        if $r2 != null goto label1;

        $r4 = staticinvoke <org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder newBuilder()>();

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto>;

        $r4 = staticinvoke <org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder newBuilder(org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff)>($r3);

     label2:
        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder protoBuilder> = $r4;

        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto> = null;

     label3:
        return;
    }

    private void invalidateAll()
    {
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder $r1;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff$Builder protoBuilder> = $r1;

        return;
    }

    public com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData, com.google.gson.Gson)
    {
        com.google.gson.JsonObject $r0;
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r2;
        org.waveprotocol.wave.communication.json.RawStringData r5;
        org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl $r4;
        com.google.gson.JsonElement $r7;
        com.google.gson.Gson r6;
        com.google.gson.JsonPrimitive $r1;
        java.lang.String $r3;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        r5 := @parameter0: org.waveprotocol.wave.communication.json.RawStringData;

        r6 := @parameter1: com.google.gson.Gson;

        $r0 = new com.google.gson.JsonObject;

        specialinvoke $r0.<com.google.gson.JsonObject: void <init>()>();

        $r1 = new com.google.gson.JsonPrimitive;

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: java.lang.String getWaveletId()>();

        specialinvoke $r1.<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>($r3);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("1", $r1);

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: boolean hasSnapshot()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl getSnapshot()>();

        $r7 = interfaceinvoke $r4.<org.waveprotocol.wave.communication.gson.GsonSerializable: com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData,com.google.gson.Gson)>(r5, r6);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("2", $r7);

     label1:
        return $r0;
    }

    public void fromGson(com.google.gson.JsonElement, com.google.gson.Gson, org.waveprotocol.wave.communication.json.RawStringData) throws org.waveprotocol.wave.communication.gson.GsonException
    {
        com.google.gson.JsonObject $r1;
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r2;
        org.waveprotocol.wave.communication.json.RawStringData r6;
        com.google.gson.JsonElement r0, $r3, $r7;
        org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl $r4;
        com.google.gson.Gson r5;
        java.lang.String $r8;
        boolean $z0, $z1, $z2;

        r2 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        r0 := @parameter0: com.google.gson.JsonElement;

        r5 := @parameter1: com.google.gson.Gson;

        r6 := @parameter2: org.waveprotocol.wave.communication.json.RawStringData;

        $r1 = virtualinvoke r0.<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>();

        specialinvoke r2.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void invalidateAll()>();

        $z0 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("1");

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("1");

        $r8 = virtualinvoke $r7.<com.google.gson.JsonElement: java.lang.String getAsString()>();

        virtualinvoke r2.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void setWaveletId(java.lang.String)>($r8);

     label1:
        $z1 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("2");

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("2");

        $z2 = virtualinvoke $r3.<com.google.gson.JsonElement: boolean isJsonNull()>();

        if $z2 != 0 goto label2;

        $r4 = new org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl;

        specialinvoke $r4.<org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl: void <init>()>();

        staticinvoke <org.waveprotocol.wave.communication.gson.GsonUtil: void extractJsonObject(org.waveprotocol.wave.communication.gson.GsonSerializable,com.google.gson.JsonElement,com.google.gson.Gson,org.waveprotocol.wave.communication.json.RawStringData)>($r4, $r3, r5, r6);

        virtualinvoke r2.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void setSnapshot(org.waveprotocol.wave.diff.WaveletDiffSnapshot)>($r4);

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff $r2, $r4;
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0, $r3;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff getPB()>();

        $r3 = (org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl) r1;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff getPB()>();

        $z1 = virtualinvoke $r2.<org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label2:
        return 0;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff $r2;
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r1 instanceof org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff;

        if $z1 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff) r1;

        $z2 = staticinvoke <org.waveprotocol.wave.diff.FetchDiffResponseUtil$WaveletDiffUtil: boolean isEqual(org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff,org.waveprotocol.wave.diff.FetchDiffResponse$WaveletDiff)>(r0, $r2);

        return $z2;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff $r1;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff getPB()>();

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff $r1;
        java.lang.String $r2;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff getPB()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff: java.lang.String toString()>();

        return $r2;
    }

    public volatile org.waveprotocol.wave.diff.WaveletDiffSnapshot getSnapshot()
    {
        org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl $r1;
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.proto.WaveletDiffSnapshotProtoImpl getSnapshot()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite getPB()
    {
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff $r1;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff getPB()>();

        return $r1;
    }

    public volatile void setPB(com.google.protobuf.MessageLite)
    {
        org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl r0;
        com.google.protobuf.MessageLite r1;
        org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff $r2;

        r0 := @this: org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl;

        r1 := @parameter0: com.google.protobuf.MessageLite;

        $r2 = (org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff) r1;

        virtualinvoke r0.<org.waveprotocol.wave.diff.proto.FetchDiffResponseProtoImpl$WaveletDiffProtoImpl: void setPB(org.waveprotocol.wave.diff.Diff$FetchDiffResponse$WaveletDiff)>($r2);

        return;
    }
}
