public class org.apache.lucene.index.UpgradeIndexMergePolicy extends org.apache.lucene.index.MergePolicy
{
    protected final org.apache.lucene.index.MergePolicy base;

    public void <init>(org.apache.lucene.index.MergePolicy)
    {
        org.apache.lucene.index.UpgradeIndexMergePolicy r0;
        org.apache.lucene.index.MergePolicy r1;

        r0 := @this: org.apache.lucene.index.UpgradeIndexMergePolicy;

        r1 := @parameter0: org.apache.lucene.index.MergePolicy;

        specialinvoke r0.<org.apache.lucene.index.MergePolicy: void <init>()>();

        r0.<org.apache.lucene.index.UpgradeIndexMergePolicy: org.apache.lucene.index.MergePolicy base> = r1;

        return;
    }

    protected boolean shouldUpgradeSegment(org.apache.lucene.index.SegmentInfoPerCommit)
    {
        org.apache.lucene.index.SegmentInfo $r1;
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        java.lang.String $r2, $r3;
        org.apache.lucene.index.UpgradeIndexMergePolicy r4;
        boolean $z0, $z1;

        r4 := @this: org.apache.lucene.index.UpgradeIndexMergePolicy;

        r0 := @parameter0: org.apache.lucene.index.SegmentInfoPerCommit;

        $r2 = <org.apache.lucene.util.Constants: java.lang.String LUCENE_MAIN_VERSION>;

        $r1 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r3 = virtualinvoke $r1.<org.apache.lucene.index.SegmentInfo: java.lang.String getVersion()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public void setIndexWriter(org.apache.lucene.index.IndexWriter)
    {
        org.apache.lucene.index.IndexWriter r1;
        org.apache.lucene.index.UpgradeIndexMergePolicy r0;
        org.apache.lucene.index.MergePolicy $r2;

        r0 := @this: org.apache.lucene.index.UpgradeIndexMergePolicy;

        r1 := @parameter0: org.apache.lucene.index.IndexWriter;

        specialinvoke r0.<org.apache.lucene.index.MergePolicy: void setIndexWriter(org.apache.lucene.index.IndexWriter)>(r1);

        $r2 = r0.<org.apache.lucene.index.UpgradeIndexMergePolicy: org.apache.lucene.index.MergePolicy base>;

        virtualinvoke $r2.<org.apache.lucene.index.MergePolicy: void setIndexWriter(org.apache.lucene.index.IndexWriter)>(r1);

        return;
    }

    public org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.MergePolicy$MergeTrigger, org.apache.lucene.index.SegmentInfos) throws java.io.IOException
    {
        org.apache.lucene.index.MergePolicy$MergeTrigger r4;
        org.apache.lucene.index.MergePolicy$MergeSpecification $r3;
        org.apache.lucene.index.MergePolicy $r2;
        org.apache.lucene.index.UpgradeIndexMergePolicy r0;
        org.apache.lucene.index.SegmentInfos r1;

        r0 := @this: org.apache.lucene.index.UpgradeIndexMergePolicy;

        r4 := @parameter0: org.apache.lucene.index.MergePolicy$MergeTrigger;

        r1 := @parameter1: org.apache.lucene.index.SegmentInfos;

        $r2 = r0.<org.apache.lucene.index.UpgradeIndexMergePolicy: org.apache.lucene.index.MergePolicy base>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.MergePolicy: org.apache.lucene.index.MergePolicy$MergeSpecification findMerges(org.apache.lucene.index.MergePolicy$MergeTrigger,org.apache.lucene.index.SegmentInfos)>(null, r1);

        return $r3;
    }

    public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos, int, java.util.Map) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit r11, r33;
        org.apache.lucene.index.MergePolicy $r4, $r14;
        java.util.Map r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Set $r24;
        org.apache.lucene.index.SegmentInfos r1;
        java.util.List $r21, $r25;
        java.lang.StringBuilder $r12, $r13, $r17, $r18, $r19, $r26, $r27, $r28;
        org.apache.lucene.index.UpgradeIndexMergePolicy r3;
        java.util.HashMap $r0;
        java.util.ArrayList $r6;
        int i0;
        java.lang.Boolean r34;
        java.lang.String $r16, $r20, $r29;
        java.util.Iterator $r2, $r7, $r22;
        org.apache.lucene.index.MergePolicy$MergeSpecification $r5, $r9, r35;
        org.apache.lucene.index.MergePolicy$OneMerge $r8, r36;
        java.lang.Object $r10, $r23, $r30, $r32;
        java.lang.Class $r15;

        r3 := @this: org.apache.lucene.index.UpgradeIndexMergePolicy;

        r1 := @parameter0: org.apache.lucene.index.SegmentInfos;

        i0 := @parameter1: int;

        r31 := @parameter2: java.util.Map;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfos: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r30 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r33 = (org.apache.lucene.index.SegmentInfoPerCommit) $r30;

        $r32 = interfaceinvoke r31.<java.util.Map: java.lang.Object get(java.lang.Object)>(r33);

        r34 = (java.lang.Boolean) $r32;

        if r34 == null goto label02;

        $z7 = virtualinvoke r3.<org.apache.lucene.index.UpgradeIndexMergePolicy: boolean shouldUpgradeSegment(org.apache.lucene.index.SegmentInfoPerCommit)>(r33);

        if $z7 == 0 goto label02;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r33, r34);

     label02:
        goto label01;

     label03:
        $z1 = specialinvoke r3.<org.apache.lucene.index.UpgradeIndexMergePolicy: boolean verbose()>();

        if $z1 == 0 goto label04;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findForcedMerges: segmentsToUpgrade=");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<org.apache.lucene.index.UpgradeIndexMergePolicy: void message(java.lang.String)>($r29);

     label04:
        $z2 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>();

        if $z2 == 0 goto label05;

        return null;

     label05:
        $r4 = r3.<org.apache.lucene.index.UpgradeIndexMergePolicy: org.apache.lucene.index.MergePolicy base>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.MergePolicy: org.apache.lucene.index.MergePolicy$MergeSpecification findForcedMerges(org.apache.lucene.index.SegmentInfos,int,java.util.Map)>(r1, i0, $r0);

        r35 = $r5;

        if $r5 == null goto label07;

        $r21 = $r5.<org.apache.lucene.index.MergePolicy$MergeSpecification: java.util.List merges>;

        $r22 = interfaceinvoke $r21.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z6 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label07;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r36 = (org.apache.lucene.index.MergePolicy$OneMerge) $r23;

        $r24 = interfaceinvoke $r0.<java.util.Map: java.util.Set keySet()>();

        $r25 = r36.<org.apache.lucene.index.MergePolicy$OneMerge: java.util.List segments>;

        interfaceinvoke $r24.<java.util.Set: boolean removeAll(java.util.Collection)>($r25);

        goto label06;

     label07:
        $z3 = interfaceinvoke $r0.<java.util.Map: boolean isEmpty()>();

        if $z3 != 0 goto label13;

        $z4 = specialinvoke r3.<org.apache.lucene.index.UpgradeIndexMergePolicy: boolean verbose()>();

        if $z4 == 0 goto label08;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("findForcedMerges: ");

        $r14 = r3.<org.apache.lucene.index.UpgradeIndexMergePolicy: org.apache.lucene.index.MergePolicy base>;

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getSimpleName()>();

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not want to merge all old segments, merge remaining ones into new segment: ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r3.<org.apache.lucene.index.UpgradeIndexMergePolicy: void message(java.lang.String)>($r20);

     label08:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = virtualinvoke r1.<org.apache.lucene.index.SegmentInfos: java.util.Iterator iterator()>();

     label09:
        $z8 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label11;

        $r10 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.lucene.index.SegmentInfoPerCommit) $r10;

        $z5 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r11);

        if $z5 == 0 goto label10;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r11);

     label10:
        goto label09;

     label11:
        if $r5 != null goto label12;

        $r9 = new org.apache.lucene.index.MergePolicy$MergeSpecification;

        specialinvoke $r9.<org.apache.lucene.index.MergePolicy$MergeSpecification: void <init>()>();

        r35 = $r9;

     label12:
        $r8 = new org.apache.lucene.index.MergePolicy$OneMerge;

        specialinvoke $r8.<org.apache.lucene.index.MergePolicy$OneMerge: void <init>(java.util.List)>($r6);

        virtualinvoke r35.<org.apache.lucene.index.MergePolicy$MergeSpecification: void add(org.apache.lucene.index.MergePolicy$OneMerge)>($r8);

     label13:
        return r35;
    }

    public org.apache.lucene.index.MergePolicy$MergeSpecification findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos) throws java.io.IOException
    {
        org.apache.lucene.index.MergePolicy$MergeSpecification $r3;
        org.apache.lucene.index.MergePolicy $r2;
        org.apache.lucene.index.UpgradeIndexMergePolicy r0;
        org.apache.lucene.index.SegmentInfos r1;

        r0 := @this: org.apache.lucene.index.UpgradeIndexMergePolicy;

        r1 := @parameter0: org.apache.lucene.index.SegmentInfos;

        $r2 = r0.<org.apache.lucene.index.UpgradeIndexMergePolicy: org.apache.lucene.index.MergePolicy base>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.MergePolicy: org.apache.lucene.index.MergePolicy$MergeSpecification findForcedDeletesMerges(org.apache.lucene.index.SegmentInfos)>(r1);

        return $r3;
    }

    public boolean useCompoundFile(org.apache.lucene.index.SegmentInfos, org.apache.lucene.index.SegmentInfoPerCommit) throws java.io.IOException
    {
        org.apache.lucene.index.MergePolicy $r3;
        org.apache.lucene.index.SegmentInfoPerCommit r2;
        org.apache.lucene.index.UpgradeIndexMergePolicy r0;
        org.apache.lucene.index.SegmentInfos r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.UpgradeIndexMergePolicy;

        r1 := @parameter0: org.apache.lucene.index.SegmentInfos;

        r2 := @parameter1: org.apache.lucene.index.SegmentInfoPerCommit;

        $r3 = r0.<org.apache.lucene.index.UpgradeIndexMergePolicy: org.apache.lucene.index.MergePolicy base>;

        $z0 = virtualinvoke $r3.<org.apache.lucene.index.MergePolicy: boolean useCompoundFile(org.apache.lucene.index.SegmentInfos,org.apache.lucene.index.SegmentInfoPerCommit)>(r1, r2);

        return $z0;
    }

    public void close()
    {
        org.apache.lucene.index.UpgradeIndexMergePolicy r0;
        org.apache.lucene.index.MergePolicy $r1;

        r0 := @this: org.apache.lucene.index.UpgradeIndexMergePolicy;

        $r1 = r0.<org.apache.lucene.index.UpgradeIndexMergePolicy: org.apache.lucene.index.MergePolicy base>;

        virtualinvoke $r1.<org.apache.lucene.index.MergePolicy: void close()>();

        return;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.index.MergePolicy $r7;
        java.lang.StringBuilder $r0, $r1, $r5, $r6, $r8, $r9;
        java.lang.Class $r3;
        org.apache.lucene.index.UpgradeIndexMergePolicy r2;
        java.lang.String $r4, $r10;

        r2 := @this: org.apache.lucene.index.UpgradeIndexMergePolicy;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->");

        $r7 = r2.<org.apache.lucene.index.UpgradeIndexMergePolicy: org.apache.lucene.index.MergePolicy base>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    private boolean verbose()
    {
        org.apache.lucene.index.IndexWriter r3;
        org.apache.lucene.util.SetOnce $r1;
        org.apache.lucene.util.InfoStream $r4;
        java.lang.Object $r2;
        org.apache.lucene.index.UpgradeIndexMergePolicy r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.UpgradeIndexMergePolicy;

        $r1 = r0.<org.apache.lucene.index.UpgradeIndexMergePolicy: org.apache.lucene.util.SetOnce writer>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        r3 = (org.apache.lucene.index.IndexWriter) $r2;

        if r3 == null goto label1;

        $r4 = r3.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        $z0 = virtualinvoke $r4.<org.apache.lucene.util.InfoStream: boolean isEnabled(java.lang.String)>("UPGMP");

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private void message(java.lang.String)
    {
        org.apache.lucene.index.IndexWriter $r3;
        org.apache.lucene.util.SetOnce $r1;
        org.apache.lucene.util.InfoStream $r5;
        java.lang.Object $r2;
        org.apache.lucene.index.UpgradeIndexMergePolicy r0;
        java.lang.String r4;

        r0 := @this: org.apache.lucene.index.UpgradeIndexMergePolicy;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.lucene.index.UpgradeIndexMergePolicy: org.apache.lucene.util.SetOnce writer>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.util.SetOnce: java.lang.Object get()>();

        $r3 = (org.apache.lucene.index.IndexWriter) $r2;

        $r5 = $r3.<org.apache.lucene.index.IndexWriter: org.apache.lucene.util.InfoStream infoStream>;

        virtualinvoke $r5.<org.apache.lucene.util.InfoStream: void message(java.lang.String,java.lang.String)>("UPGMP", r4);

        return;
    }
}
