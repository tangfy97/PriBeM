public class com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer extends com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer
{
    private static final java.lang.String FIELD_NAMES;
    private static final java.lang.String FIELD_TYPES;
    private static final com.mycila.inject.internal.asm.Type FIELD_PROVIDER;
    private static final com.mycila.inject.internal.asm.Type ILLEGAL_ARGUMENT_EXCEPTION;
    private static final com.mycila.inject.internal.cglib.core.Signature PROVIDER_GET;
    private static final com.mycila.inject.internal.cglib.core.Signature PROVIDER_SET;
    private static final com.mycila.inject.internal.cglib.core.Signature PROVIDER_SET_BY_INDEX;
    private static final com.mycila.inject.internal.cglib.core.Signature PROVIDER_GET_BY_INDEX;
    private static final com.mycila.inject.internal.cglib.core.Signature PROVIDER_GET_TYPES;
    private static final com.mycila.inject.internal.cglib.core.Signature PROVIDER_GET_NAMES;
    private int access;
    private java.util.Map fields;

    public void <init>()
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: void <init>()>();

        return;
    }

    public void begin_class(int, int, java.lang.String, com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.asm.Type[], java.lang.String)
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r0;
        com.mycila.inject.internal.asm.Type r3, $r5;
        java.util.HashMap $r1;
        int i0, i1;
        java.lang.String r2, r4;
        com.mycila.inject.internal.asm.Type[] r6;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: com.mycila.inject.internal.asm.Type;

        r6 := @parameter4: com.mycila.inject.internal.asm.Type[];

        r4 := @parameter5: java.lang.String;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isAbstract(int)>(i0);

        if $z0 != 0 goto label1;

        $r5 = <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.asm.Type FIELD_PROVIDER>;

        r6 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type[] add(com.mycila.inject.internal.asm.Type[],com.mycila.inject.internal.asm.Type)>(r6, $r5);

     label1:
        r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: int access> = i0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: java.util.Map fields> = $r1;

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(i1, i0, r2, r3, r6, r4);

        return;
    }

    public void declare_field(int, java.lang.String, com.mycila.inject.internal.asm.Type, java.lang.Object)
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r0;
        java.util.Map $r4;
        int i0;
        com.mycila.inject.internal.asm.Type r2;
        java.lang.Object r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: com.mycila.inject.internal.asm.Type;

        r3 := @parameter3: java.lang.Object;

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(i0, r1, r2, r3);

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isStatic(int)>(i0);

        if $z0 != 0 goto label1;

        $r4 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: java.util.Map fields>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

     label1:
        return;
    }

    public void end_class()
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r0;
        int $i0;
        com.mycila.inject.internal.cglib.core.CodeGenerationException $r2;
        java.lang.RuntimeException $r3;
        java.lang.Exception $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        $i0 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: int access>;

        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: boolean isInterface(int)>($i0);

        if $z0 != 0 goto label5;

     label1:
        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: void generate()>();

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        throw $r3;

     label4:
        $r1 := @caughtexception;

        $r2 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r1);

        throw $r2;

     label5:
        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: void end_class()>();

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label4;
    }

    private void generate() throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r0;
        java.lang.Object[] $r5;
        java.util.Set $r2;
        com.mycila.inject.internal.asm.Type $r9, $r10;
        java.lang.String[] $r4, $r6, r7;
        int[] r8;
        java.util.Map $r1, $r3;
        int $i0, $i1, $i2, i3;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        $r1 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: java.util.Map fields>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: java.util.Map fields>;

        $i0 = interfaceinvoke $r3.<java.util.Map: int size()>();

        $r4 = newarray (java.lang.String)[$i0];

        $r5 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        r7 = (java.lang.String[]) $r6;

        $i1 = lengthof r7;

        r8 = newarray (int)[$i1];

        i3 = 0;

     label1:
        $i2 = lengthof r8;

        if i3 >= $i2 goto label2;

        r8[i3] = i3;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r9 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_ARRAY>;

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(26, "CGLIB$FIELD_NAMES", $r9, null);

        $r10 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS_ARRAY>;

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(26, "CGLIB$FIELD_TYPES", $r10, null);

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: void initFieldProvider(java.lang.String[])>(r7);

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: void getNames()>();

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: void getTypes()>();

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: void getField(java.lang.String[])>(r7);

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: void setField(java.lang.String[])>(r7);

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: void setByIndex(java.lang.String[],int[])>(r7, r8);

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: void getByIndex(java.lang.String[],int[])>(r7, r8);

        return;
    }

    private void initFieldProvider(java.lang.String[])
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r0;
        com.mycila.inject.internal.asm.Type $r3, $r4, $r5, $r6, $r7, r11;
        java.lang.String[] r2;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r1;
        java.util.Map $r9;
        int $i0, $i1, i2;
        java.lang.Object $r10;
        java.lang.String $r8;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        r2 := @parameter0: java.lang.String[];

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.CodeEmitter getStaticHook()>();

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void push_object(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.Object)>($r1, r2);

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.asm.Type getClassType()>();

        $r4 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_ARRAY>;

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putstatic(com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>($r3, "CGLIB$FIELD_NAMES", $r4);

        $i0 = lengthof r2;

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>($i0);

        $r5 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS>;

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r5);

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        i2 = 0;

     label1:
        $i1 = lengthof r2;

        if i2 >= $i1 goto label2;

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>(i2);

        $r9 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: java.util.Map fields>;

        $r8 = r2[i2];

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r11 = (com.mycila.inject.internal.asm.Type) $r10;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void load_class(com.mycila.inject.internal.cglib.core.CodeEmitter,com.mycila.inject.internal.asm.Type)>($r1, r11);

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aastore()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        $r6 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.asm.Type getClassType()>();

        $r7 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS_ARRAY>;

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putstatic(com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>($r6, "CGLIB$FIELD_TYPES", $r7);

        return;
    }

    private void getNames()
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r0;
        com.mycila.inject.internal.cglib.core.Signature $r1;
        com.mycila.inject.internal.asm.Type $r3, $r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        $r1 = <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.Signature PROVIDER_GET_NAMES>;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.asm.Type getClassType()>();

        $r4 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING_ARRAY>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getstatic(com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>($r3, "CGLIB$FIELD_NAMES", $r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void getTypes()
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r0;
        com.mycila.inject.internal.cglib.core.Signature $r1;
        com.mycila.inject.internal.asm.Type $r3, $r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        $r1 = <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.Signature PROVIDER_GET_TYPES>;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.asm.Type getClassType()>();

        $r4 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_CLASS_ARRAY>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getstatic(com.mycila.inject.internal.asm.Type,java.lang.String,com.mycila.inject.internal.asm.Type)>($r3, "CGLIB$FIELD_TYPES", $r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void setByIndex(java.lang.String[], int[]) throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r0;
        int[] r3;
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1 $r4;
        com.mycila.inject.internal.cglib.core.Signature $r1;
        java.lang.String[] r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        r5 := @parameter0: java.lang.String[];

        r3 := @parameter1: int[];

        $r1 = <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.Signature PROVIDER_SET_BY_INDEX>;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(1);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r4 = new com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1;

        specialinvoke $r4.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$1: void <init>(com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer,java.lang.String[],com.mycila.inject.internal.cglib.core.CodeEmitter)>(r0, r5, $r2);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void process_switch(int[],com.mycila.inject.internal.cglib.core.ProcessSwitchCallback)>(r3, $r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void getByIndex(java.lang.String[], int[]) throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r0;
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$2 $r4;
        int[] r3;
        com.mycila.inject.internal.cglib.core.Signature $r1;
        java.lang.String[] r5;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        r5 := @parameter0: java.lang.String[];

        r3 := @parameter1: int[];

        $r1 = <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.Signature PROVIDER_GET_BY_INDEX>;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.cglib.transform.ClassEmitterTransformer: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r4 = new com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$2;

        specialinvoke $r4.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$2: void <init>(com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer,java.lang.String[],com.mycila.inject.internal.cglib.core.CodeEmitter)>(r0, r5, $r2);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void process_switch(int[],com.mycila.inject.internal.cglib.core.ProcessSwitchCallback)>(r3, $r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void getField(java.lang.String[]) throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r0;
        com.mycila.inject.internal.cglib.core.Signature $r1;
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3 $r4;
        java.lang.String[] r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        r3 := @parameter0: java.lang.String[];

        $r1 = <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.Signature PROVIDER_GET>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r4 = new com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3;

        specialinvoke $r4.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$3: void <init>(com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer,com.mycila.inject.internal.cglib.core.CodeEmitter)>(r0, $r2);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void string_switch(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.String[],int,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback)>($r2, r3, 1, $r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void setField(java.lang.String[]) throws java.lang.Exception
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r0;
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$4 $r4;
        com.mycila.inject.internal.cglib.core.Signature $r1;
        java.lang.String[] r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;

        r0 := @this: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        r3 := @parameter0: java.lang.String[];

        $r1 = <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.Signature PROVIDER_SET>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(1);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r4 = new com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$4;

        specialinvoke $r4.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer$4: void <init>(com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer,com.mycila.inject.internal.cglib.core.CodeEmitter)>(r0, $r2);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void string_switch(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.String[],int,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback)>($r2, r3, 1, $r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    static java.util.Map access$000(com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer)
    {
        com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer r0;
        java.util.Map $r1;

        r0 := @parameter0: com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer;

        $r1 = r0.<com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: java.util.Map fields>;

        return $r1;
    }

    static com.mycila.inject.internal.asm.Type access$100()
    {
        com.mycila.inject.internal.asm.Type $r0;

        $r0 = <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.asm.Type ILLEGAL_ARGUMENT_EXCEPTION>;

        return $r0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.Signature $r2, $r3, $r4, $r5, $r6, $r7;
        com.mycila.inject.internal.asm.Type $r0, $r1;

        <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: java.lang.String FIELD_TYPES> = "CGLIB$FIELD_TYPES";

        <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: java.lang.String FIELD_NAMES> = "CGLIB$FIELD_NAMES";

        $r0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.transform.impl.FieldProvider");

        <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.asm.Type FIELD_PROVIDER> = $r0;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("IllegalArgumentException");

        <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.asm.Type ILLEGAL_ARGUMENT_EXCEPTION> = $r1;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("Object getField(String)");

        <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.Signature PROVIDER_GET> = $r2;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("void setField(String, Object)");

        <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.Signature PROVIDER_SET> = $r3;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("void setField(int, Object)");

        <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.Signature PROVIDER_SET_BY_INDEX> = $r4;

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("Object getField(int)");

        <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.Signature PROVIDER_GET_BY_INDEX> = $r5;

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("Class[] getFieldTypes()");

        <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.Signature PROVIDER_GET_TYPES> = $r6;

        $r7 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("String[] getFieldNames()");

        <com.mycila.inject.internal.cglib.transform.impl.FieldProviderTransformer: com.mycila.inject.internal.cglib.core.Signature PROVIDER_GET_NAMES> = $r7;

        return;
    }
}
