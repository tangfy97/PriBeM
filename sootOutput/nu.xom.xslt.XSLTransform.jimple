public final class nu.xom.xslt.XSLTransform extends java.lang.Object
{
    private javax.xml.transform.Templates templates;
    private nu.xom.NodeFactory factory;
    private java.util.Map parameters;
    private static javax.xml.transform.ErrorListener errorsAreFatal;

    private void <init>(javax.xml.transform.Source) throws nu.xom.xslt.XSLException
    {
        javax.xml.transform.Templates $r5;
        javax.xml.transform.TransformerConfigurationException $r6;
        java.util.HashMap $r1;
        javax.xml.transform.Source r4;
        javax.xml.transform.ErrorListener $r3;
        nu.xom.xslt.XSLException $r7, $r9;
        nu.xom.xslt.XSLTransform r0;
        javax.xml.transform.TransformerFactoryConfigurationError $r8;
        javax.xml.transform.TransformerFactory $r2;

        r0 := @this: nu.xom.xslt.XSLTransform;

        r4 := @parameter0: javax.xml.transform.Source;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<nu.xom.xslt.XSLTransform: java.util.Map parameters> = $r1;

     label1:
        $r2 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

        $r3 = <nu.xom.xslt.XSLTransform: javax.xml.transform.ErrorListener errorsAreFatal>;

        virtualinvoke $r2.<javax.xml.transform.TransformerFactory: void setErrorListener(javax.xml.transform.ErrorListener)>($r3);

        $r5 = virtualinvoke $r2.<javax.xml.transform.TransformerFactory: javax.xml.transform.Templates newTemplates(javax.xml.transform.Source)>(r4);

        r0.<nu.xom.xslt.XSLTransform: javax.xml.transform.Templates templates> = $r5;

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        $r9 = new nu.xom.xslt.XSLException;

        specialinvoke $r9.<nu.xom.xslt.XSLException: void <init>(java.lang.String,java.lang.Throwable)>("Could not locate a TrAX TransformerFactory", $r8);

        throw $r9;

     label4:
        $r6 := @caughtexception;

        $r7 = new nu.xom.xslt.XSLException;

        specialinvoke $r7.<nu.xom.xslt.XSLException: void <init>(java.lang.String,java.lang.Throwable)>("Syntax error in stylesheet", $r6);

        throw $r7;

     label5:
        return;

        catch javax.xml.transform.TransformerFactoryConfigurationError from label1 to label2 with label3;
        catch javax.xml.transform.TransformerConfigurationException from label1 to label2 with label4;
    }

    public void <init>(nu.xom.Document) throws nu.xom.xslt.XSLException
    {
        nu.xom.xslt.XSLTransform r0;
        nu.xom.NodeFactory $r2;
        nu.xom.Document r1;

        r0 := @this: nu.xom.xslt.XSLTransform;

        r1 := @parameter0: nu.xom.Document;

        $r2 = new nu.xom.NodeFactory;

        specialinvoke $r2.<nu.xom.NodeFactory: void <init>()>();

        specialinvoke r0.<nu.xom.xslt.XSLTransform: void <init>(nu.xom.Document,nu.xom.NodeFactory)>(r1, $r2);

        return;
    }

    public void <init>(nu.xom.Document, nu.xom.NodeFactory) throws nu.xom.xslt.XSLException
    {
        nu.xom.xslt.XSLTransform r0;
        nu.xom.NodeFactory r3, $r4;
        nu.xom.xslt.XOMSource $r1;
        nu.xom.Document r2;

        r0 := @this: nu.xom.xslt.XSLTransform;

        r2 := @parameter0: nu.xom.Document;

        r3 := @parameter1: nu.xom.NodeFactory;

        $r1 = new nu.xom.xslt.XOMSource;

        specialinvoke $r1.<nu.xom.xslt.XOMSource: void <init>(nu.xom.Document)>(r2);

        specialinvoke r0.<nu.xom.xslt.XSLTransform: void <init>(javax.xml.transform.Source)>($r1);

        if r3 != null goto label1;

        $r4 = new nu.xom.NodeFactory;

        specialinvoke $r4.<nu.xom.NodeFactory: void <init>()>();

        r0.<nu.xom.xslt.XSLTransform: nu.xom.NodeFactory factory> = $r4;

        goto label2;

     label1:
        r0.<nu.xom.xslt.XSLTransform: nu.xom.NodeFactory factory> = r3;

     label2:
        return;
    }

    public nu.xom.Nodes transform(nu.xom.Document) throws nu.xom.xslt.XSLException
    {
        nu.xom.xslt.XSLTransform r0;
        nu.xom.xslt.XOMSource $r1;
        nu.xom.Nodes $r3;
        nu.xom.Document r2;

        r0 := @this: nu.xom.xslt.XSLTransform;

        r2 := @parameter0: nu.xom.Document;

        $r1 = new nu.xom.xslt.XOMSource;

        specialinvoke $r1.<nu.xom.xslt.XOMSource: void <init>(nu.xom.Document)>(r2);

        $r3 = specialinvoke r0.<nu.xom.xslt.XSLTransform: nu.xom.Nodes transform(javax.xml.transform.Source)>($r1);

        return $r3;
    }

    public void setParameter(java.lang.String, java.lang.Object)
    {
        nu.xom.xslt.XSLTransform r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: nu.xom.xslt.XSLTransform;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<nu.xom.xslt.XSLTransform: void setParameter(java.lang.String,java.lang.String,java.lang.Object)>(r1, null, r2);

        return;
    }

    public void setParameter(java.lang.String, java.lang.String, java.lang.Object)
    {
        nu.xom.xslt.XSLTransform r1;
        java.lang.StringBuffer $r5, $r6, $r7, $r8, $r9;
        java.lang.Object r3;
        java.lang.String r0, r2, $r4, $r10;
        boolean $z0;

        r1 := @this: nu.xom.xslt.XSLTransform;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object;

        if r0 == null goto label1;

        $r4 = "";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

     label1:
        specialinvoke r1.<nu.xom.xslt.XSLTransform: void _setParameter(java.lang.String,java.lang.Object)>(r2, r3);

        goto label3;

     label2:
        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("{");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("}");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r1.<nu.xom.xslt.XSLTransform: void _setParameter(java.lang.String,java.lang.Object)>($r10, r3);

     label3:
        return;
    }

    private void _setParameter(java.lang.String, java.lang.Object)
    {
        nu.xom.xslt.XSLTransform r1;
        java.util.Map $r3, $r4;
        java.lang.Object r0;
        java.lang.String r2;

        r1 := @this: nu.xom.xslt.XSLTransform;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r4 = r1.<nu.xom.xslt.XSLTransform: java.util.Map parameters>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        goto label2;

     label1:
        $r3 = r1.<nu.xom.xslt.XSLTransform: java.util.Map parameters>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r0);

     label2:
        return;
    }

    public nu.xom.Nodes transform(nu.xom.Nodes) throws nu.xom.xslt.XSLException
    {
        nu.xom.xslt.XSLTransform r2;
        int $i0;
        nu.xom.Nodes r0, $r3, $r4;
        nu.xom.xslt.XOMSource $r1;

        r2 := @this: nu.xom.xslt.XSLTransform;

        r0 := @parameter0: nu.xom.Nodes;

        $i0 = virtualinvoke r0.<nu.xom.Nodes: int size()>();

        if $i0 != 0 goto label1;

        $r4 = new nu.xom.Nodes;

        specialinvoke $r4.<nu.xom.Nodes: void <init>()>();

        return $r4;

     label1:
        $r1 = new nu.xom.xslt.XOMSource;

        specialinvoke $r1.<nu.xom.xslt.XOMSource: void <init>(nu.xom.Nodes)>(r0);

        $r3 = specialinvoke r2.<nu.xom.xslt.XSLTransform: nu.xom.Nodes transform(javax.xml.transform.Source)>($r1);

        return $r3;
    }

    private nu.xom.Nodes transform(javax.xml.transform.Source) throws nu.xom.xslt.XSLException
    {
        java.lang.Throwable $r15, r19;
        javax.xml.transform.Transformer $r4;
        javax.xml.transform.Templates $r3;
        javax.xml.transform.TransformerException r20;
        nu.xom.xslt.XOMResult $r0;
        javax.xml.transform.Source r9;
        javax.xml.transform.ErrorListener $r5;
        java.util.Map $r6, $r12;
        nu.xom.Nodes $r10;
        java.lang.String r18, $r22;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r8;
        java.util.Set $r7;
        nu.xom.xslt.XSLException $r21;
        java.lang.Exception $r14, $r17;
        nu.xom.xslt.XSLTransform r1;
        org.xml.sax.SAXParseException $r16;
        nu.xom.NodeFactory $r2;
        java.lang.Object $r11, $r13;

        r1 := @this: nu.xom.xslt.XSLTransform;

        r9 := @parameter0: javax.xml.transform.Source;

     label1:
        $r0 = new nu.xom.xslt.XOMResult;

        $r2 = r1.<nu.xom.xslt.XSLTransform: nu.xom.NodeFactory factory>;

        specialinvoke $r0.<nu.xom.xslt.XOMResult: void <init>(nu.xom.NodeFactory)>($r2);

        $r3 = r1.<nu.xom.xslt.XSLTransform: javax.xml.transform.Templates templates>;

        $r4 = interfaceinvoke $r3.<javax.xml.transform.Templates: javax.xml.transform.Transformer newTransformer()>();

        virtualinvoke $r4.<javax.xml.transform.Transformer: void setOutputProperty(java.lang.String,java.lang.String)>("method", "xml");

        $r5 = <nu.xom.xslt.XSLTransform: javax.xml.transform.ErrorListener errorsAreFatal>;

        virtualinvoke $r4.<javax.xml.transform.Transformer: void setErrorListener(javax.xml.transform.ErrorListener)>($r5);

        $r6 = r1.<nu.xom.xslt.XSLTransform: java.util.Map parameters>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>();

        $r8 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r11 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.lang.String) $r11;

        $r12 = r1.<nu.xom.xslt.XSLTransform: java.util.Map parameters>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r18);

        virtualinvoke $r4.<javax.xml.transform.Transformer: void setParameter(java.lang.String,java.lang.Object)>(r18, $r13);

        goto label2;

     label3:
        virtualinvoke $r4.<javax.xml.transform.Transformer: void transform(javax.xml.transform.Source,javax.xml.transform.Result)>(r9, $r0);

        $r10 = virtualinvoke $r0.<nu.xom.xslt.XOMResult: nu.xom.Nodes getResult()>();

     label4:
        return $r10;

     label5:
        $r14 := @caughtexception;

        r19 = $r14;

        $z1 = $r14 instanceof javax.xml.transform.TransformerException;

        if $z1 == 0 goto label6;

        r20 = (javax.xml.transform.TransformerException) $r14;

        $r15 = virtualinvoke r20.<javax.xml.transform.TransformerException: java.lang.Throwable getException()>();

        if $r15 == null goto label6;

        r19 = $r15;

        $z2 = $r15 instanceof org.xml.sax.SAXParseException;

        if $z2 == 0 goto label6;

        $r16 = (org.xml.sax.SAXParseException) $r15;

        $r17 = virtualinvoke $r16.<org.xml.sax.SAXParseException: java.lang.Exception getException()>();

        if $r17 == null goto label6;

        r19 = $r17;

     label6:
        $r21 = new nu.xom.xslt.XSLException;

        $r22 = virtualinvoke $r14.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r21.<nu.xom.xslt.XSLException: void <init>(java.lang.String,java.lang.Throwable)>($r22, r19);

        throw $r21;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    public static nu.xom.Document toDocument(nu.xom.Nodes)
    {
        nu.xom.Element r7;
        nu.xom.Node $r2, $r3, $r5, $r6;
        int $i0, $i1, i2, i3, i4, i5;
        nu.xom.XMLException $r4;
        nu.xom.Nodes r0;
        nu.xom.Document $r1;
        boolean $z0;

        r0 := @parameter0: nu.xom.Nodes;

        r7 = null;

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<nu.xom.Nodes: int size()>();

        if i3 >= $i0 goto label3;

        $r5 = virtualinvoke r0.<nu.xom.Nodes: nu.xom.Node get(int)>(i3);

        $z0 = $r5 instanceof nu.xom.Element;

        if $z0 == 0 goto label2;

        i2 = i3;

        $r6 = virtualinvoke r0.<nu.xom.Nodes: nu.xom.Node get(int)>(i3);

        r7 = (nu.xom.Element) $r6;

        goto label3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        if r7 != null goto label4;

        $r4 = new nu.xom.XMLException;

        specialinvoke $r4.<nu.xom.XMLException: void <init>(java.lang.String)>("No root element");

        throw $r4;

     label4:
        $r1 = new nu.xom.Document;

        specialinvoke $r1.<nu.xom.Document: void <init>(nu.xom.Element)>(r7);

        i4 = 0;

     label5:
        if i4 >= i2 goto label6;

        $r3 = virtualinvoke r0.<nu.xom.Nodes: nu.xom.Node get(int)>(i4);

        virtualinvoke $r1.<nu.xom.Document: void insertChild(nu.xom.Node,int)>($r3, i4);

        i4 = i4 + 1;

        goto label5;

     label6:
        i5 = i2 + 1;

     label7:
        $i1 = virtualinvoke r0.<nu.xom.Nodes: int size()>();

        if i5 >= $i1 goto label8;

        $r2 = virtualinvoke r0.<nu.xom.Nodes: nu.xom.Node get(int)>(i5);

        virtualinvoke $r1.<nu.xom.Document: void appendChild(nu.xom.Node)>($r2);

        i5 = i5 + 1;

        goto label7;

     label8:
        return $r1;
    }

    public java.lang.String toString()
    {
        javax.xml.transform.Templates $r7;
        nu.xom.xslt.XSLTransform r2;
        java.lang.StringBuffer $r0, $r1, $r5, $r6, $r8, $r9;
        java.lang.Class $r3;
        java.lang.String $r4, $r10;

        r2 := @this: nu.xom.xslt.XSLTransform;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r7 = r2.<nu.xom.xslt.XSLTransform: javax.xml.transform.Templates templates>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r10;
    }

    static void <clinit>()
    {
        nu.xom.xslt.XSLTransform$FatalListener $r0;

        $r0 = new nu.xom.xslt.XSLTransform$FatalListener;

        specialinvoke $r0.<nu.xom.xslt.XSLTransform$FatalListener: void <init>(nu.xom.xslt.XSLTransform$1)>(null);

        <nu.xom.xslt.XSLTransform: javax.xml.transform.ErrorListener errorsAreFatal> = $r0;

        return;
    }
}
