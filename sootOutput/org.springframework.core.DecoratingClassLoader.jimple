public abstract class org.springframework.core.DecoratingClassLoader extends java.lang.ClassLoader
{
    private final java.util.Set excludedPackages;
    private final java.util.Set excludedClasses;
    private final java.lang.Object exclusionMonitor;

    public void <init>()
    {
        java.util.HashSet $r1, $r2;
        org.springframework.core.DecoratingClassLoader r0;
        java.lang.Object $r3;

        r0 := @this: org.springframework.core.DecoratingClassLoader;

        specialinvoke r0.<java.lang.ClassLoader: void <init>()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r0.<org.springframework.core.DecoratingClassLoader: java.util.Set excludedPackages> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.springframework.core.DecoratingClassLoader: java.util.Set excludedClasses> = $r2;

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.DecoratingClassLoader: java.lang.Object exclusionMonitor> = $r3;

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        java.util.HashSet $r2, $r3;
        org.springframework.core.DecoratingClassLoader r0;
        java.lang.Object $r4;
        java.lang.ClassLoader r1;

        r0 := @this: org.springframework.core.DecoratingClassLoader;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>(r1);

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<org.springframework.core.DecoratingClassLoader: java.util.Set excludedPackages> = $r2;

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<org.springframework.core.DecoratingClassLoader: java.util.Set excludedClasses> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<org.springframework.core.DecoratingClassLoader: java.lang.Object exclusionMonitor> = $r4;

        return;
    }

    public void excludePackage(java.lang.String)
    {
        java.lang.Throwable $r4;
        org.springframework.core.DecoratingClassLoader r1;
        java.util.Set $r3;
        java.lang.Object $r2;
        java.lang.String r0;

        r1 := @this: org.springframework.core.DecoratingClassLoader;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Package name must not be null");

        $r2 = r1.<org.springframework.core.DecoratingClassLoader: java.lang.Object exclusionMonitor>;

        entermonitor $r2;

     label1:
        $r3 = r1.<org.springframework.core.DecoratingClassLoader: java.util.Set excludedPackages>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r0);

        exitmonitor $r2;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void excludeClass(java.lang.String)
    {
        java.lang.Throwable $r4;
        org.springframework.core.DecoratingClassLoader r1;
        java.util.Set $r3;
        java.lang.Object $r2;
        java.lang.String r0;

        r1 := @this: org.springframework.core.DecoratingClassLoader;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class name must not be null");

        $r2 = r1.<org.springframework.core.DecoratingClassLoader: java.lang.Object exclusionMonitor>;

        entermonitor $r2;

     label1:
        $r3 = r1.<org.springframework.core.DecoratingClassLoader: java.util.Set excludedClasses>;

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r0);

        exitmonitor $r2;

     label2:
        goto label5;

     label3:
        $r4 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected boolean isExcluded(java.lang.String)
    {
        java.lang.Throwable $r8;
        java.util.Iterator $r5;
        org.springframework.core.DecoratingClassLoader r0;
        java.util.Set $r3, $r4;
        java.lang.Object $r1, $r6;
        java.lang.String r2, r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.core.DecoratingClassLoader;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.core.DecoratingClassLoader: java.lang.Object exclusionMonitor>;

        entermonitor $r1;

     label01:
        $r3 = r0.<org.springframework.core.DecoratingClassLoader: java.util.Set excludedClasses>;

        $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z0 == 0 goto label03;

        exitmonitor $r1;

     label02:
        return 1;

     label03:
        $r4 = r0.<org.springframework.core.DecoratingClassLoader: java.util.Set excludedPackages>;

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label06;

     label04:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $z2 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>(r7);

        if $z2 == 0 goto label06;

        exitmonitor $r1;

     label05:
        return 1;

     label06:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label04;

        exitmonitor $r1;

     label07:
        goto label10;

     label08:
        $r8 := @caughtexception;

        exitmonitor $r1;

     label09:
        throw $r8;

     label10:
        return 0;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }
}
