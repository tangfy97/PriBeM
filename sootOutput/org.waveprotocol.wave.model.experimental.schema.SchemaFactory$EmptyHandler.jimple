final class org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler extends org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler
{
    private final org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler previousTop;

    void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler)
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler;

        r1 := @parameter0: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler: void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1)>(null);

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler previousTop> = r1;

        return;
    }

    final org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler pushHandler(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r0;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler r6;
        org.waveprotocol.wave.model.document.operation.Attributes r7;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;

        r6 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler;

        r3 := @parameter0: java.lang.String;

        r7 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r0 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized element type: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler popHandler()
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler $r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler;

        $r1 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler previousTop>;

        return $r1;
    }
}
