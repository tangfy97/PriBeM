public abstract class com.sun.xml.bind.api.JAXBRIContext extends javax.xml.bind.JAXBContext
{
    public static final java.lang.String DEFAULT_NAMESPACE_REMAP;
    public static final java.lang.String TYPE_REFERENCES;
    public static final java.lang.String CANONICALIZATION_SUPPORT;
    public static final java.lang.String TREAT_EVERYTHING_NILLABLE;
    public static final java.lang.String ANNOTATION_READER;
    public static final java.lang.String ENABLE_XOP;
    public static final java.lang.String SUBCLASS_REPLACEMENTS;
    public static final java.lang.String XMLACCESSORFACTORY_SUPPORT;
    public static final java.lang.String RETAIN_REFERENCE_TO_INFO;
    public static final java.lang.String SUPRESS_ACCESSOR_WARNINGS;
    public static final java.lang.String IMPROVED_XSI_TYPE_HANDLING;
    public static final java.lang.String DISABLE_XML_SECURITY;

    protected void <init>()
    {
        com.sun.xml.bind.api.JAXBRIContext r0;

        r0 := @this: com.sun.xml.bind.api.JAXBRIContext;

        specialinvoke r0.<javax.xml.bind.JAXBContext: void <init>()>();

        return;
    }

    public static com.sun.xml.bind.api.JAXBRIContext newInstance(java.lang.Class[], java.util.Collection, java.util.Map, java.lang.String, boolean, com.sun.xml.bind.v2.model.'annotation'.RuntimeAnnotationReader) throws javax.xml.bind.JAXBException
    {
        com.sun.xml.bind.v2.model.'annotation'.RuntimeAnnotationReader r4;
        java.util.Collection r1;
        java.util.Map r2;
        java.lang.Class[] r0;
        java.lang.String r3;
        boolean z0;
        com.sun.xml.bind.api.JAXBRIContext $r5;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.util.Collection;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        r4 := @parameter5: com.sun.xml.bind.v2.model.'annotation'.RuntimeAnnotationReader;

        $r5 = staticinvoke <com.sun.xml.bind.api.JAXBRIContext: com.sun.xml.bind.api.JAXBRIContext newInstance(java.lang.Class[],java.util.Collection,java.util.Map,java.lang.String,boolean,com.sun.xml.bind.v2.model.'annotation'.RuntimeAnnotationReader,boolean,boolean,boolean,boolean)>(r0, r1, r2, r3, z0, r4, 0, 0, 0, 0);

        return $r5;
    }

    public static com.sun.xml.bind.api.JAXBRIContext newInstance(java.lang.Class[], java.util.Collection, java.util.Map, java.lang.String, boolean, com.sun.xml.bind.v2.model.'annotation'.RuntimeAnnotationReader, boolean, boolean, boolean, boolean) throws javax.xml.bind.JAXBException
    {
        java.util.HashMap $r0;
        com.sun.xml.bind.v2.model.'annotation'.RuntimeAnnotationReader r4;
        java.util.Map r2;
        java.lang.Boolean $r5, $r6, $r7, $r8, $r9;
        java.lang.String r3, $r13;
        javax.xml.bind.JAXBContext $r11;
        boolean z0, z1, z2, z3, z4;
        com.sun.xml.bind.api.JAXBRIContext $r12;
        java.util.Collection r1;
        java.lang.Class[] r10;

        r10 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.util.Collection;

        r2 := @parameter2: java.util.Map;

        r3 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        r4 := @parameter5: com.sun.xml.bind.v2.model.'annotation'.RuntimeAnnotationReader;

        z1 := @parameter6: boolean;

        z2 := @parameter7: boolean;

        z3 := @parameter8: boolean;

        z4 := @parameter9: boolean;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        if r1 == null goto label1;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("com.sun.xml.bind.typeReferences", r1);

     label1:
        if r2 == null goto label2;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("com.sun.xml.bind.subclassReplacements", r2);

     label2:
        if r3 == null goto label3;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("com.sun.xml.bind.defaultNamespaceRemap", r3);

     label3:
        if r4 == null goto label4;

        $r13 = <com.sun.xml.bind.api.JAXBRIContext: java.lang.String ANNOTATION_READER>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r4);

     label4:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("com.sun.xml.bind.c14n", $r5);

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("com.sun.xml.bind.XmlAccessorFactory", $r6);

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z2);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("com.sun.xml.bind.treatEverythingNillable", $r7);

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z3);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("retainReferenceToInfo", $r8);

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z4);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("supressAccessorWarnings", $r9);

        $r11 = staticinvoke <com.sun.xml.bind.v2.ContextFactory: javax.xml.bind.JAXBContext createContext(java.lang.Class[],java.util.Map)>(r10, $r0);

        $r12 = (com.sun.xml.bind.api.JAXBRIContext) $r11;

        return $r12;
    }

    public static com.sun.xml.bind.api.JAXBRIContext newInstance(java.lang.Class[], java.util.Collection, java.lang.String, boolean) throws javax.xml.bind.JAXBException
    {
        java.util.Collection r1;
        java.util.Map $r2;
        java.lang.Class[] r0;
        java.lang.String r3;
        boolean z0;
        com.sun.xml.bind.api.JAXBRIContext $r4;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.util.Collection;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r2 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        $r4 = staticinvoke <com.sun.xml.bind.api.JAXBRIContext: com.sun.xml.bind.api.JAXBRIContext newInstance(java.lang.Class[],java.util.Collection,java.util.Map,java.lang.String,boolean,com.sun.xml.bind.v2.model.'annotation'.RuntimeAnnotationReader)>(r0, r1, $r2, r3, z0, null);

        return $r4;
    }

    public abstract boolean hasSwaRef();

    public abstract javax.xml.namespace.QName getElementName(java.lang.Object) throws javax.xml.bind.JAXBException;

    public abstract javax.xml.namespace.QName getElementName(java.lang.Class) throws javax.xml.bind.JAXBException;

    public abstract com.sun.xml.bind.api.Bridge createBridge(com.sun.xml.bind.api.TypeReference);

    public abstract com.sun.xml.bind.api.BridgeContext createBridgeContext();

    public abstract com.sun.xml.bind.api.RawAccessor getElementPropertyAccessor(java.lang.Class, java.lang.String, java.lang.String) throws javax.xml.bind.JAXBException;

    public abstract java.util.List getKnownNamespaceURIs();

    public abstract void generateSchema(javax.xml.bind.SchemaOutputResolver) throws java.io.IOException;

    public abstract javax.xml.namespace.QName getTypeName(com.sun.xml.bind.api.TypeReference);

    public abstract java.lang.String getBuildId();

    public abstract void generateEpisode(javax.xml.transform.Result);

    public abstract com.sun.xml.bind.v2.model.runtime.RuntimeTypeInfoSet getRuntimeTypeInfoSet();

    public static java.lang.String mangleNameToVariableName(java.lang.String)
    {
        com.sun.xml.bind.api.impl.NameConverter $r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.sun.xml.bind.api.impl.NameConverter: com.sun.xml.bind.api.impl.NameConverter standard>;

        $r2 = interfaceinvoke $r1.<com.sun.xml.bind.api.impl.NameConverter: java.lang.String toVariableName(java.lang.String)>(r0);

        return $r2;
    }

    public static java.lang.String mangleNameToClassName(java.lang.String)
    {
        com.sun.xml.bind.api.impl.NameConverter $r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.sun.xml.bind.api.impl.NameConverter: com.sun.xml.bind.api.impl.NameConverter standard>;

        $r2 = interfaceinvoke $r1.<com.sun.xml.bind.api.impl.NameConverter: java.lang.String toClassName(java.lang.String)>(r0);

        return $r2;
    }

    public static java.lang.String mangleNameToPropertyName(java.lang.String)
    {
        com.sun.xml.bind.api.impl.NameConverter $r1;
        java.lang.String r0, $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.sun.xml.bind.api.impl.NameConverter: com.sun.xml.bind.api.impl.NameConverter standard>;

        $r2 = interfaceinvoke $r1.<com.sun.xml.bind.api.impl.NameConverter: java.lang.String toPropertyName(java.lang.String)>(r0);

        return $r2;
    }

    public static java.lang.reflect.Type getBaseType(java.lang.reflect.Type, java.lang.Class)
    {
        java.lang.reflect.Type r0, $r3;
        java.lang.Class r1;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator $r2;

        r0 := @parameter0: java.lang.reflect.Type;

        r1 := @parameter1: java.lang.Class;

        $r2 = <com.sun.xml.bind.v2.model.nav.Navigator: com.sun.xml.bind.v2.model.nav.ReflectionNavigator REFLECTION>;

        $r3 = virtualinvoke $r2.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Type getBaseClass(java.lang.reflect.Type,java.lang.Class)>(r0, r1);

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.sun.xml.bind.api.JAXBRIContext: java.lang.String DISABLE_XML_SECURITY> = "com.sun.xml.bind.disableXmlSecurity";

        <com.sun.xml.bind.api.JAXBRIContext: java.lang.String IMPROVED_XSI_TYPE_HANDLING> = "com.sun.xml.bind.improvedXsiTypeHandling";

        <com.sun.xml.bind.api.JAXBRIContext: java.lang.String SUPRESS_ACCESSOR_WARNINGS> = "supressAccessorWarnings";

        <com.sun.xml.bind.api.JAXBRIContext: java.lang.String RETAIN_REFERENCE_TO_INFO> = "retainReferenceToInfo";

        <com.sun.xml.bind.api.JAXBRIContext: java.lang.String XMLACCESSORFACTORY_SUPPORT> = "com.sun.xml.bind.XmlAccessorFactory";

        <com.sun.xml.bind.api.JAXBRIContext: java.lang.String SUBCLASS_REPLACEMENTS> = "com.sun.xml.bind.subclassReplacements";

        <com.sun.xml.bind.api.JAXBRIContext: java.lang.String ENABLE_XOP> = "com.sun.xml.bind.XOP";

        <com.sun.xml.bind.api.JAXBRIContext: java.lang.String TREAT_EVERYTHING_NILLABLE> = "com.sun.xml.bind.treatEverythingNillable";

        <com.sun.xml.bind.api.JAXBRIContext: java.lang.String CANONICALIZATION_SUPPORT> = "com.sun.xml.bind.c14n";

        <com.sun.xml.bind.api.JAXBRIContext: java.lang.String TYPE_REFERENCES> = "com.sun.xml.bind.typeReferences";

        <com.sun.xml.bind.api.JAXBRIContext: java.lang.String DEFAULT_NAMESPACE_REMAP> = "com.sun.xml.bind.defaultNamespaceRemap";

        $r0 = class "Lcom/sun/xml/bind/v2/model/annotation/RuntimeAnnotationReader;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        <com.sun.xml.bind.api.JAXBRIContext: java.lang.String ANNOTATION_READER> = $r1;

        return;
    }
}
