class com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl extends java.lang.Object implements com.mycila.inject.internal.guava.collect.MapDifference$ValueDifference
{
    private final java.lang.Object left;
    private final java.lang.Object right;

    static com.mycila.inject.internal.guava.collect.MapDifference$ValueDifference create(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2;
        com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl $r0;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl: void <init>(java.lang.Object,java.lang.Object)>(r1, r2);

        return $r0;
    }

    private void <init>(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r1, r2;
        com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl: java.lang.Object left> = r1;

        r0.<com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl: java.lang.Object right> = r2;

        return;
    }

    public java.lang.Object leftValue()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl: java.lang.Object left>;

        return $r1;
    }

    public java.lang.Object rightValue()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl: java.lang.Object right>;

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.MapDifference$ValueDifference r1;
        com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl r2;
        java.lang.Object r0, $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.MapDifference$ValueDifference;

        if $z0 == 0 goto label3;

        r1 = (com.mycila.inject.internal.guava.collect.MapDifference$ValueDifference) r0;

        $r3 = r2.<com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl: java.lang.Object left>;

        $r4 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.MapDifference$ValueDifference: java.lang.Object leftValue()>();

        $z1 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z1 == 0 goto label1;

        $r5 = r2.<com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl: java.lang.Object right>;

        $r6 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.MapDifference$ValueDifference: java.lang.Object rightValue()>();

        $z2 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }

    public int hashCode()
    {
        java.lang.Object[] $r0;
        com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl r1;
        int $i0;
        java.lang.Object $r2, $r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl;

        $r0 = newarray (java.lang.Object)[2];

        $r2 = r1.<com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl: java.lang.Object left>;

        $r0[0] = $r2;

        $r3 = r1.<com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl: java.lang.Object right>;

        $r0[1] = $r3;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: int hashCode(java.lang.Object[])>($r0);

        return $i0;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r7, $r8;
        java.lang.Object $r3, $r6;
        java.lang.String $r9;

        r2 := @this: com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r3 = r2.<com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl: java.lang.Object left>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r6 = r2.<com.mycila.inject.internal.guava.collect.Maps$ValueDifferenceImpl: java.lang.Object right>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
