public class groovyjarjarantlr.LLkAnalyzer extends java.lang.Object implements groovyjarjarantlr.LLkGrammarAnalyzer
{
    public boolean DEBUG_ANALYZER;
    private groovyjarjarantlr.AlternativeBlock currentBlock;
    protected groovyjarjarantlr.Tool tool;
    protected groovyjarjarantlr.Grammar grammar;
    protected boolean lexicalAnalysis;
    groovyjarjarantlr.CharFormatter charFormatter;

    public void <init>(groovyjarjarantlr.Tool)
    {
        groovyjarjarantlr.LLkAnalyzer r0;
        groovyjarjarantlr.JavaCharFormatter $r1;
        groovyjarjarantlr.Tool r2;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        r2 := @parameter0: groovyjarjarantlr.Tool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER> = 0;

        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Tool tool> = null;

        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar> = null;

        r0.<groovyjarjarantlr.LLkAnalyzer: boolean lexicalAnalysis> = 0;

        $r1 = new groovyjarjarantlr.JavaCharFormatter;

        specialinvoke $r1.<groovyjarjarantlr.JavaCharFormatter: void <init>()>();

        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.CharFormatter charFormatter> = $r1;

        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Tool tool> = r2;

        return;
    }

    protected boolean altUsesWildcardDefault(groovyjarjarantlr.Alternative)
    {
        groovyjarjarantlr.Alternative r0;
        groovyjarjarantlr.GrammarAtom $r4;
        groovyjarjarantlr.LLkAnalyzer r5;
        groovyjarjarantlr.TreeElement $r3;
        groovyjarjarantlr.AlternativeElement r1, $r2;
        boolean $z0, $z1, $z2, $z3;

        r5 := @this: groovyjarjarantlr.LLkAnalyzer;

        r0 := @parameter0: groovyjarjarantlr.Alternative;

        r1 = r0.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $z0 = r1 instanceof groovyjarjarantlr.TreeElement;

        if $z0 == 0 goto label1;

        $r3 = (groovyjarjarantlr.TreeElement) r1;

        $r4 = $r3.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $z3 = $r4 instanceof groovyjarjarantlr.WildcardElement;

        if $z3 == 0 goto label1;

        return 1;

     label1:
        $z1 = r1 instanceof groovyjarjarantlr.WildcardElement;

        if $z1 == 0 goto label2;

        $r2 = r1.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.AlternativeElement next>;

        $z2 = $r2 instanceof groovyjarjarantlr.BlockEndElement;

        if $z2 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean deterministic(groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.SynPredBlock $r15;
        java.lang.StringBuffer $r23, $r25, $r26, $r27, $r29, $r31, $r32, $r33, $r36, $r38, $r39, $r40, $r43, $r45, $r47, $r51, $r53, $r55, $r59, $r61, $r63, $r64, $r65, $r67, $r69, $r71, $r72, $r73, $r74, $r86, $r88, $r89, $r90;
        groovyjarjarantlr.ToolErrorHandler $r95;
        groovyjarjarantlr.Grammar $r8, $r35, $r48, $r56, $r66, $r83, $r96, $r97;
        groovyjarjarantlr.CharFormatter $r49, $r57;
        groovyjarjarantlr.AlternativeElement $r17, $r18, $r19, $r20, $r21, $r22, r93;
        groovyjarjarantlr.LLkAnalyzer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, $i16;
        java.io.PrintStream $r24, $r30, $r37, $r46, $r54, $r62, $r70, $r87;
        groovyjarjarantlr.Lookahead $r9, $r10, $r11, $r12, $r41, $r81;
        groovyjarjarantlr.Lookahead[] $r76, $r80;
        groovyjarjarantlr.collections.impl.Vector $r2;
        groovyjarjarantlr.Tool $r84, $r94;
        java.lang.String $r16, $r28, $r34, $r42, $r44, $r50, $r52, $r58, $r60, $r68, $r75, $r85, $r91;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, z22, z23, $z24, $z25, z26, z27;
        groovyjarjarantlr.Alternative $r13, $r14, $r77, $r79, $r82;
        groovyjarjarantlr.AlternativeBlock r1, $r3, $r4, $r5, $r6, $r7, $r78, $r92;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        r1 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label01;

        $r87 = <java.lang.System: java.io.PrintStream out>;

        $r86 = new java.lang.StringBuffer;

        specialinvoke $r86.<java.lang.StringBuffer: void <init>()>();

        $r88 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("deterministic(");

        $r89 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r90 = virtualinvoke $r89.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r91 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r87.<java.io.PrintStream: void println(java.lang.String)>($r91);

     label01:
        z22 = 1;

        $r2 = r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i0 = virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        $r92 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock> = r1;

        $z1 = r1.<groovyjarjarantlr.AlternativeBlock: boolean greedy>;

        if $z1 != 0 goto label02;

        $z20 = r1 instanceof groovyjarjarantlr.OneOrMoreBlock;

        if $z20 != 0 goto label02;

        $z21 = r1 instanceof groovyjarjarantlr.ZeroOrMoreBlock;

        if $z21 != 0 goto label02;

        $r84 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Tool tool>;

        $r83 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r85 = virtualinvoke $r83.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i11 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        $i12 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: int getColumn()>();

        virtualinvoke $r84.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Being nongreedy only makes sense for (...)+ and (...)*", $r85, $i11, $i12);

     label02:
        if $i0 != 1 goto label03;

        $r77 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        r93 = $r77.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $r78 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $r78.<groovyjarjarantlr.AlternativeBlock: int alti> = 0;

        $r79 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        $r80 = $r79.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r81 = virtualinvoke r93.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>(1);

        $r80[1] = $r81;

        $r82 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(0);

        $r82.<groovyjarjarantlr.Alternative: int lookaheadDepth> = 1;

        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock> = $r92;

        return 1;

     label03:
        i13 = 0;

     label04:
        $i1 = $i0 - 1;

        if i13 >= $i1 goto label24;

        $r3 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $r3.<groovyjarjarantlr.AlternativeBlock: int alti> = i13;

        $r4 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $r4.<groovyjarjarantlr.AlternativeBlock: int analysisAlt> = i13;

        $r5 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $i2 = i13 + 1;

        $r5.<groovyjarjarantlr.AlternativeBlock: int altj> = $i2;

        i14 = i13 + 1;

     label05:
        if i14 >= $i0 goto label23;

        $r6 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $r6.<groovyjarjarantlr.AlternativeBlock: int altj> = i14;

        $z2 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z2 == 0 goto label06;

        $r70 = <java.lang.System: java.io.PrintStream out>;

        $r69 = new java.lang.StringBuffer;

        specialinvoke $r69.<java.lang.StringBuffer: void <init>()>();

        $r71 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("comparing ");

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i13);

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" against alt ");

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i14);

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r70.<java.io.PrintStream: void println(java.lang.String)>($r75);

     label06:
        $r7 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $r7.<groovyjarjarantlr.AlternativeBlock: int analysisAlt> = i14;

        i15 = 1;

        $r8 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $i3 = $r8.<groovyjarjarantlr.Grammar: int maxk>;

        $i4 = $i3 + 1;

        $r76 = newarray (groovyjarjarantlr.Lookahead)[$i4];

     label07:
        z23 = 0;

        z27 = 0;

        z26 = 0;

        $z24 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z24 == 0 goto label08;

        $r62 = <java.lang.System: java.io.PrintStream out>;

        $r61 = new java.lang.StringBuffer;

        specialinvoke $r61.<java.lang.StringBuffer: void <init>()>();

        $r63 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("checking depth ");

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i15);

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<=");

        $r66 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $i10 = $r66.<groovyjarjarantlr.Grammar: int maxk>;

        $r67 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i10);

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r62.<java.io.PrintStream: void println(java.lang.String)>($r68);

     label08:
        $r9 = specialinvoke r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Lookahead getAltLookahead(groovyjarjarantlr.AlternativeBlock,int,int)>(r1, i13, i15);

        $r10 = specialinvoke r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Lookahead getAltLookahead(groovyjarjarantlr.AlternativeBlock,int,int)>(r1, i14, i15);

        $z3 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z3 == 0 goto label09;

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r53 = new java.lang.StringBuffer;

        specialinvoke $r53.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("p is ");

        $r57 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.CharFormatter charFormatter>;

        $r56 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r58 = virtualinvoke $r9.<groovyjarjarantlr.Lookahead: java.lang.String toString(java.lang.String,groovyjarjarantlr.CharFormatter,groovyjarjarantlr.Grammar)>(",", $r57, $r56);

        $r59 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r60);

     label09:
        $z4 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z4 == 0 goto label10;

        $r46 = <java.lang.System: java.io.PrintStream out>;

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("q is ");

        $r49 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.CharFormatter charFormatter>;

        $r48 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r50 = virtualinvoke $r10.<groovyjarjarantlr.Lookahead: java.lang.String toString(java.lang.String,groovyjarjarantlr.CharFormatter,groovyjarjarantlr.Grammar)>(",", $r49, $r48);

        $r51 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r46.<java.io.PrintStream: void println(java.lang.String)>($r52);

     label10:
        $r11 = virtualinvoke $r9.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.Lookahead intersection(groovyjarjarantlr.Lookahead)>($r10);

        $r76[i15] = $r11;

        $z5 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z5 == 0 goto label11;

        $r37 = <java.lang.System: java.io.PrintStream out>;

        $r36 = new java.lang.StringBuffer;

        specialinvoke $r36.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("intersection at depth ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i15);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is ");

        $r41 = $r76[i15];

        $r42 = virtualinvoke $r41.<groovyjarjarantlr.Lookahead: java.lang.String toString()>();

        $r43 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.String)>($r44);

     label11:
        $r12 = $r76[i15];

        $z6 = virtualinvoke $r12.<groovyjarjarantlr.Lookahead: boolean nil()>();

        if $z6 != 0 goto label12;

        z23 = 1;

        z27 = 1;

        z26 = 1;

        i15 = i15 + 1;

     label12:
        if z26 == 0 goto label13;

        $r35 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $i9 = $r35.<groovyjarjarantlr.Grammar: int maxk>;

        if i15 <= $i9 goto label07;

     label13:
        $r13 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i13);

        $r14 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i14);

        if z27 == 0 goto label21;

        z22 = 0;

        $r13.<groovyjarjarantlr.Alternative: int lookaheadDepth> = 2147483647;

        $r14.<groovyjarjarantlr.Alternative: int lookaheadDepth> = 2147483647;

        $r15 = $r13.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r15 == null goto label14;

        $z19 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z19 == 0 goto label22;

        $r30 = <java.lang.System: java.io.PrintStream out>;

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("alt ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i13);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has a syn pred");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r30.<java.io.PrintStream: void println(java.lang.String)>($r34);

        goto label22;

     label14:
        $r16 = $r13.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r16 == null goto label15;

        $z18 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z18 == 0 goto label22;

        $r24 = <java.lang.System: java.io.PrintStream out>;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("alt ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i13);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has a sem pred");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r28);

        goto label22;

     label15:
        $z7 = virtualinvoke r0.<groovyjarjarantlr.LLkAnalyzer: boolean altUsesWildcardDefault(groovyjarjarantlr.Alternative)>($r14);

        if $z7 == 0 goto label16;

        goto label22;

     label16:
        $z8 = r1.<groovyjarjarantlr.AlternativeBlock: boolean warnWhenFollowAmbig>;

        if $z8 != 0 goto label17;

        $r21 = $r13.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $z16 = $r21 instanceof groovyjarjarantlr.BlockEndElement;

        if $z16 != 0 goto label22;

        $r22 = $r14.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $z17 = $r22 instanceof groovyjarjarantlr.BlockEndElement;

        if $z17 == 0 goto label17;

        goto label22;

     label17:
        $z9 = r1.<groovyjarjarantlr.AlternativeBlock: boolean generateAmbigWarnings>;

        if $z9 != 0 goto label18;

        goto label22;

     label18:
        $z10 = r1.<groovyjarjarantlr.AlternativeBlock: boolean greedySet>;

        if $z10 == 0 goto label20;

        $z11 = r1.<groovyjarjarantlr.AlternativeBlock: boolean greedy>;

        if $z11 == 0 goto label20;

        $r17 = $r13.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $z12 = $r17 instanceof groovyjarjarantlr.BlockEndElement;

        if $z12 == 0 goto label19;

        $r20 = $r14.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $z15 = $r20 instanceof groovyjarjarantlr.BlockEndElement;

        if $z15 == 0 goto label22;

     label19:
        $r18 = $r14.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $z13 = $r18 instanceof groovyjarjarantlr.BlockEndElement;

        if $z13 == 0 goto label20;

        $r19 = $r13.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $z14 = $r19 instanceof groovyjarjarantlr.BlockEndElement;

        if $z14 != 0 goto label20;

        goto label22;

     label20:
        $r94 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Tool tool>;

        $r95 = $r94.<groovyjarjarantlr.Tool: groovyjarjarantlr.ToolErrorHandler errorHandler>;

        $r96 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $z25 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean lexicalAnalysis>;

        $r97 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $i16 = $r97.<groovyjarjarantlr.Grammar: int maxk>;

        interfaceinvoke $r95.<groovyjarjarantlr.ToolErrorHandler: void warnAltAmbiguity(groovyjarjarantlr.Grammar,groovyjarjarantlr.AlternativeBlock,boolean,int,groovyjarjarantlr.Lookahead[],int,int)>($r96, r1, $z25, $i16, $r76, i13, i14);

        goto label22;

     label21:
        $i5 = $r13.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>($i5, i15);

        $r13.<groovyjarjarantlr.Alternative: int lookaheadDepth> = $i6;

        $i7 = $r14.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i7, i15);

        $r14.<groovyjarjarantlr.Alternative: int lookaheadDepth> = $i8;

     label22:
        i14 = i14 + 1;

        goto label05;

     label23:
        i13 = i13 + 1;

        goto label04;

     label24:
        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock> = $r92;

        return z22;
    }

    public boolean deterministic(groovyjarjarantlr.OneOrMoreBlock)
    {
        java.io.PrintStream $r3;
        groovyjarjarantlr.AlternativeBlock $r8;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        groovyjarjarantlr.LLkAnalyzer r0;
        java.lang.String $r7;
        groovyjarjarantlr.OneOrMoreBlock r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        r1 := @parameter0: groovyjarjarantlr.OneOrMoreBlock;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("deterministic(...)+(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $r8 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock> = r1;

        $z1 = virtualinvoke r0.<groovyjarjarantlr.LLkAnalyzer: boolean deterministic(groovyjarjarantlr.AlternativeBlock)>(r1);

        $z2 = virtualinvoke r0.<groovyjarjarantlr.LLkAnalyzer: boolean deterministicImpliedPath(groovyjarjarantlr.BlockWithImpliedExitPath)>(r1);

        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock> = $r8;

        if $z2 == 0 goto label2;

        if $z1 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public boolean deterministic(groovyjarjarantlr.ZeroOrMoreBlock)
    {
        java.io.PrintStream $r3;
        groovyjarjarantlr.AlternativeBlock $r8;
        groovyjarjarantlr.ZeroOrMoreBlock r1;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        groovyjarjarantlr.LLkAnalyzer r0;
        java.lang.String $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        r1 := @parameter0: groovyjarjarantlr.ZeroOrMoreBlock;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("deterministic(...)*(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label1:
        $r8 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock> = r1;

        $z1 = virtualinvoke r0.<groovyjarjarantlr.LLkAnalyzer: boolean deterministic(groovyjarjarantlr.AlternativeBlock)>(r1);

        $z2 = virtualinvoke r0.<groovyjarjarantlr.LLkAnalyzer: boolean deterministicImpliedPath(groovyjarjarantlr.BlockWithImpliedExitPath)>(r1);

        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock> = $r8;

        if $z2 == 0 goto label2;

        if $z1 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public boolean deterministicImpliedPath(groovyjarjarantlr.BlockWithImpliedExitPath)
    {
        groovyjarjarantlr.Lookahead[] $r9, $r22, $r66;
        groovyjarjarantlr.collections.impl.Vector $r1;
        groovyjarjarantlr.Tool $r16, $r25, $r64;
        java.lang.StringBuffer $r33, $r34, $r35, $r37, $r41, $r45, $r49, $r53, $r57, $r58, $r59, $r61, $r68, $r69, $r70, $r71;
        java.lang.String $r26, $r38, $r44, $r46, $r52, $r54, $r62, $r65;
        groovyjarjarantlr.ToolErrorHandler $r19;
        groovyjarjarantlr.Grammar $r6, $r17, $r18, $r21, $r24, $r30, $r42, $r50, $r60, $r63;
        groovyjarjarantlr.CharFormatter $r43, $r51;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, z17, $z18, $z19, z20, z21;
        groovyjarjarantlr.Alternative $r4, $r15;
        groovyjarjarantlr.AlternativeElement $r5, $r7, $r20, $r28;
        groovyjarjarantlr.AlternativeBlock $r3, $r10, $r14;
        java.lang.String[] $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, $i19;
        groovyjarjarantlr.LLkAnalyzer r2;
        java.io.PrintStream $r27, $r29, $r32, $r40, $r48, $r56, $r67;
        groovyjarjarantlr.Lookahead $r8, $r11, $r12, $r13, $r36;
        groovyjarjarantlr.BlockWithImpliedExitPath r0;

        r2 := @this: groovyjarjarantlr.LLkAnalyzer;

        r0 := @parameter0: groovyjarjarantlr.BlockWithImpliedExitPath;

        z16 = 1;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.BlockWithImpliedExitPath: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        $i0 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        $r3 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $i19 = (int) -1;

        $r3.<groovyjarjarantlr.AlternativeBlock: int altj> = $i19;

        $z0 = r2.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label01;

        $r67 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r67.<java.io.PrintStream: void println(java.lang.String)>("deterministicImpliedPath");

     label01:
        i16 = 0;

     label02:
        if i16 >= $i0 goto label18;

        $r4 = virtualinvoke r0.<groovyjarjarantlr.BlockWithImpliedExitPath: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i16);

        $r5 = $r4.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $z1 = $r5 instanceof groovyjarjarantlr.BlockEndElement;

        if $z1 == 0 goto label03;

        $r64 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Tool tool>;

        $r63 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r65 = virtualinvoke $r63.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i14 = virtualinvoke r0.<groovyjarjarantlr.BlockWithImpliedExitPath: int getLine()>();

        $i15 = virtualinvoke r0.<groovyjarjarantlr.BlockWithImpliedExitPath: int getColumn()>();

        virtualinvoke $r64.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("empty alternative makes no sense in (...)* or (...)+", $r65, $i14, $i15);

     label03:
        i17 = 1;

        $r6 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $i1 = $r6.<groovyjarjarantlr.Grammar: int maxk>;

        $i2 = $i1 + 1;

        $r66 = newarray (groovyjarjarantlr.Lookahead)[$i2];

     label04:
        z17 = 0;

        z21 = 0;

        z20 = 0;

        $z18 = r2.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z18 == 0 goto label05;

        $r56 = <java.lang.System: java.io.PrintStream out>;

        $r68 = new java.lang.StringBuffer;

        specialinvoke $r68.<java.lang.StringBuffer: void <init>()>();

        $r57 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("checking depth ");

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i17);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<=");

        $r60 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $i13 = $r60.<groovyjarjarantlr.Grammar: int maxk>;

        $r61 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i13);

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r56.<java.io.PrintStream: void println(java.lang.String)>($r62);

     label05:
        $r7 = r0.<groovyjarjarantlr.BlockWithImpliedExitPath: groovyjarjarantlr.AlternativeElement next>;

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>(i17);

        $r9 = r0.<groovyjarjarantlr.BlockWithImpliedExitPath: groovyjarjarantlr.Lookahead[] exitCache>;

        $r9[i17] = $r8;

        $r10 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $r10.<groovyjarjarantlr.AlternativeBlock: int alti> = i16;

        $r11 = specialinvoke r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Lookahead getAltLookahead(groovyjarjarantlr.AlternativeBlock,int,int)>(r0, i16, i17);

        $z2 = r2.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z2 == 0 goto label06;

        $r48 = <java.lang.System: java.io.PrintStream out>;

        $r69 = new java.lang.StringBuffer;

        specialinvoke $r69.<java.lang.StringBuffer: void <init>()>();

        $r49 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("follow is ");

        $r51 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.CharFormatter charFormatter>;

        $r50 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r52 = virtualinvoke $r8.<groovyjarjarantlr.Lookahead: java.lang.String toString(java.lang.String,groovyjarjarantlr.CharFormatter,groovyjarjarantlr.Grammar)>(",", $r51, $r50);

        $r53 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r52);

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r48.<java.io.PrintStream: void println(java.lang.String)>($r54);

     label06:
        $z3 = r2.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z3 == 0 goto label07;

        $r40 = <java.lang.System: java.io.PrintStream out>;

        $r70 = new java.lang.StringBuffer;

        specialinvoke $r70.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("p is ");

        $r43 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.CharFormatter charFormatter>;

        $r42 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r44 = virtualinvoke $r11.<groovyjarjarantlr.Lookahead: java.lang.String toString(java.lang.String,groovyjarjarantlr.CharFormatter,groovyjarjarantlr.Grammar)>(",", $r43, $r42);

        $r45 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>($r46);

     label07:
        $r12 = virtualinvoke $r8.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.Lookahead intersection(groovyjarjarantlr.Lookahead)>($r11);

        $r66[i17] = $r12;

        $z4 = r2.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z4 == 0 goto label08;

        $r32 = <java.lang.System: java.io.PrintStream out>;

        $r71 = new java.lang.StringBuffer;

        specialinvoke $r71.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("intersection at depth ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i17);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is ");

        $r36 = $r66[i17];

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r32.<java.io.PrintStream: void println(java.lang.String)>($r38);

     label08:
        $r13 = $r66[i17];

        $z5 = virtualinvoke $r13.<groovyjarjarantlr.Lookahead: boolean nil()>();

        if $z5 != 0 goto label09;

        z17 = 1;

        z21 = 1;

        z20 = 1;

        i17 = i17 + 1;

     label09:
        if z20 == 0 goto label10;

        $r30 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $i12 = $r30.<groovyjarjarantlr.Grammar: int maxk>;

        if i17 <= $i12 goto label04;

     label10:
        if z21 == 0 goto label16;

        z16 = 0;

        $r4.<groovyjarjarantlr.Alternative: int lookaheadDepth> = 2147483647;

        r0.<groovyjarjarantlr.BlockWithImpliedExitPath: int exitLookaheadDepth> = 2147483647;

        $r14 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $i7 = $r14.<groovyjarjarantlr.AlternativeBlock: int alti>;

        $r15 = virtualinvoke r0.<groovyjarjarantlr.BlockWithImpliedExitPath: groovyjarjarantlr.Alternative getAlternativeAt(int)>($i7);

        $z6 = r0.<groovyjarjarantlr.BlockWithImpliedExitPath: boolean warnWhenFollowAmbig>;

        if $z6 != 0 goto label11;

        goto label17;

     label11:
        $z7 = r0.<groovyjarjarantlr.BlockWithImpliedExitPath: boolean generateAmbigWarnings>;

        if $z7 != 0 goto label12;

        goto label17;

     label12:
        $z8 = r0.<groovyjarjarantlr.BlockWithImpliedExitPath: boolean greedy>;

        if $z8 != 1 goto label13;

        $z13 = r0.<groovyjarjarantlr.BlockWithImpliedExitPath: boolean greedySet>;

        if $z13 == 0 goto label13;

        $r28 = $r15.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $z14 = $r28 instanceof groovyjarjarantlr.BlockEndElement;

        if $z14 != 0 goto label13;

        $z15 = r2.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z15 == 0 goto label17;

        $r29 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>("greedy loop");

        goto label17;

     label13:
        $z19 = r0.<groovyjarjarantlr.BlockWithImpliedExitPath: boolean greedy>;

        if $z19 != 0 goto label15;

        $r20 = $r15.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $z10 = $r20 instanceof groovyjarjarantlr.BlockEndElement;

        if $z10 != 0 goto label15;

        $z11 = r2.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z11 == 0 goto label14;

        $r27 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r27.<java.io.PrintStream: void println(java.lang.String)>("nongreedy loop");

     label14:
        $r22 = r0.<groovyjarjarantlr.BlockWithImpliedExitPath: groovyjarjarantlr.Lookahead[] exitCache>;

        $r21 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $i9 = $r21.<groovyjarjarantlr.Grammar: int maxk>;

        $z12 = staticinvoke <groovyjarjarantlr.LLkAnalyzer: boolean lookaheadEquivForApproxAndFullAnalysis(groovyjarjarantlr.Lookahead[],int)>($r22, $i9);

        if $z12 != 0 goto label17;

        $r25 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Tool tool>;

        $r23 = newarray (java.lang.String)[3];

        $r23[0] = "nongreedy block may exit incorrectly due";

        $r23[1] = "\tto limitations of linear approximate lookahead (first k-1 sets";

        $r23[2] = "\tin lookahead not singleton).";

        $r24 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r26 = virtualinvoke $r24.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i10 = virtualinvoke r0.<groovyjarjarantlr.BlockWithImpliedExitPath: int getLine()>();

        $i11 = virtualinvoke r0.<groovyjarjarantlr.BlockWithImpliedExitPath: int getColumn()>();

        virtualinvoke $r25.<groovyjarjarantlr.Tool: void warning(java.lang.String[],java.lang.String,int,int)>($r23, $r26, $i10, $i11);

        goto label17;

     label15:
        $r16 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Tool tool>;

        $r19 = $r16.<groovyjarjarantlr.Tool: groovyjarjarantlr.ToolErrorHandler errorHandler>;

        $r18 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $z9 = r2.<groovyjarjarantlr.LLkAnalyzer: boolean lexicalAnalysis>;

        $r17 = r2.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $i8 = $r17.<groovyjarjarantlr.Grammar: int maxk>;

        interfaceinvoke $r19.<groovyjarjarantlr.ToolErrorHandler: void warnAltExitAmbiguity(groovyjarjarantlr.Grammar,groovyjarjarantlr.BlockWithImpliedExitPath,boolean,int,groovyjarjarantlr.Lookahead[],int)>($r18, r0, $z9, $i8, $r66, i16);

        goto label17;

     label16:
        $i3 = $r4.<groovyjarjarantlr.Alternative: int lookaheadDepth>;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, i17);

        $r4.<groovyjarjarantlr.Alternative: int lookaheadDepth> = $i4;

        $i5 = r0.<groovyjarjarantlr.BlockWithImpliedExitPath: int exitLookaheadDepth>;

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>($i5, i17);

        r0.<groovyjarjarantlr.BlockWithImpliedExitPath: int exitLookaheadDepth> = $i6;

     label17:
        i16 = i16 + 1;

        goto label02;

     label18:
        return z16;
    }

    public groovyjarjarantlr.Lookahead FOLLOW(int, groovyjarjarantlr.RuleEndElement)
    {
        java.lang.StringBuffer $r16, $r18, $r19, $r20, $r21, $r22, $r26, $r37, $r39, $r40, $r41, $r43, $r46, $r48, $r49, $r50, $r52, $r54, $r56, $r57, $r58, $r61, $r87, $r89, $r90, $r91, $r92, $r93, $r99, $r107, $r109, $r110, $r111, $r112, $r113, $r119, $r120, $r124, $r125, $r131, $r141, $r143, $r144, $r145, $r146, $r147, $r153, $r156, $r158, $r159, $r161, $r163, $r164, $r165, $r166, $r167;
        boolean[] $r4, $r7, $r11;
        groovyjarjarantlr.RuleEndElement r0, r172;
        groovyjarjarantlr.Grammar $r9, $r23, $r29, $r30, $r69, $r95, $r115, $r127, $r149;
        groovyjarjarantlr.CharFormatter $r24, $r96, $r116, $r128, $r150;
        groovyjarjarantlr.AlternativeElement $r34, $r59;
        groovyjarjarantlr.LLkAnalyzer r3;
        int i0, $i1, i2;
        java.io.PrintStream $r17, $r38, $r47, $r55, $r88, $r108, $r142, $r157, $r162;
        groovyjarjarantlr.Lookahead $r6, $r8, $r15, $r35, $r64, $r67, $r73, $r75, $r77, $r79, $r82, $r84, $r86, $r97, $r103, $r104, $r106, $r117, $r129, $r134, $r136, $r138, $r140, $r151, $r155;
        java.lang.Object $r14, $r85, $r135, $r139;
        groovyjarjarantlr.Lookahead[] $r5, $r13, $r63, $r66, $r72, $r74, $r78, $r80, $r83, $r94, $r101, $r102, $r105, $r114, $r126, $r133, $r137, $r148;
        groovyjarjarantlr.RuleBlock r2, $r71, $r122;
        groovyjarjarantlr.GrammarSymbol $r10, $r70;
        java.lang.String $r25, $r27, $r28, $r36, $r42, $r44, $r45, $r51, $r53, $r60, $r62, $r65, $r68, $r76, $r81, $r98, $r100, $r118, $r123, $r130, $r132, $r152, $r154, $r160, $r168, $r169, r170;
        groovyjarjarantlr.RuleSymbol r171, r173;
        groovyjarjarantlr.RuleRefElement $r33;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        groovyjarjarantlr.collections.impl.BitSet $r12, $r31, $r32;
        groovyjarjarantlr.AlternativeBlock $r1, $r121;

        r3 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r0 := @parameter1: groovyjarjarantlr.RuleEndElement;

        $r1 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.AlternativeBlock block>;

        r2 = (groovyjarjarantlr.RuleBlock) $r1;

        $z0 = r3.<groovyjarjarantlr.LLkAnalyzer: boolean lexicalAnalysis>;

        if $z0 == 0 goto label01;

        $r169 = virtualinvoke r2.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        r170 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>($r169);

        goto label02;

     label01:
        r170 = virtualinvoke r2.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

     label02:
        $z1 = r3.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z1 == 0 goto label03;

        $r162 = <java.lang.System: java.io.PrintStream out>;

        $r161 = new java.lang.StringBuffer;

        specialinvoke $r161.<java.lang.StringBuffer: void <init>()>();

        $r163 = virtualinvoke $r161.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FOLLOW(");

        $r164 = virtualinvoke $r163.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r165 = virtualinvoke $r164.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r166 = virtualinvoke $r165.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r170);

        $r167 = virtualinvoke $r166.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r168 = virtualinvoke $r167.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r162.<java.io.PrintStream: void println(java.lang.String)>($r168);

     label03:
        $r4 = r0.<groovyjarjarantlr.RuleEndElement: boolean[] lock>;

        $z2 = $r4[i0];

        if $z2 == 0 goto label05;

        $z12 = r3.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z12 == 0 goto label04;

        $r157 = <java.lang.System: java.io.PrintStream out>;

        $r156 = new java.lang.StringBuffer;

        specialinvoke $r156.<java.lang.StringBuffer: void <init>()>();

        $r158 = virtualinvoke $r156.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FOLLOW cycle to ");

        $r159 = virtualinvoke $r158.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r170);

        $r160 = virtualinvoke $r159.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r157.<java.io.PrintStream: void println(java.lang.String)>($r160);

     label04:
        $r155 = new groovyjarjarantlr.Lookahead;

        specialinvoke $r155.<groovyjarjarantlr.Lookahead: void <init>(java.lang.String)>(r170);

        return $r155;

     label05:
        $r5 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r6 = $r5[i0];

        if $r6 == null goto label13;

        $z9 = r3.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z9 == 0 goto label06;

        $r142 = <java.lang.System: java.io.PrintStream out>;

        $r141 = new java.lang.StringBuffer;

        specialinvoke $r141.<java.lang.StringBuffer: void <init>()>();

        $r143 = virtualinvoke $r141.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("cache entry FOLLOW(");

        $r144 = virtualinvoke $r143.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r145 = virtualinvoke $r144.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") for ");

        $r146 = virtualinvoke $r145.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r170);

        $r147 = virtualinvoke $r146.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r148 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r151 = $r148[i0];

        $r150 = r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.CharFormatter charFormatter>;

        $r149 = r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r152 = virtualinvoke $r151.<groovyjarjarantlr.Lookahead: java.lang.String toString(java.lang.String,groovyjarjarantlr.CharFormatter,groovyjarjarantlr.Grammar)>(",", $r150, $r149);

        $r153 = virtualinvoke $r147.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r152);

        $r154 = virtualinvoke $r153.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r142.<java.io.PrintStream: void println(java.lang.String)>($r154);

     label06:
        $r63 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r64 = $r63[i0];

        $r65 = $r64.<groovyjarjarantlr.Lookahead: java.lang.String cycle>;

        if $r65 != null goto label07;

        $r137 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r138 = $r137[i0];

        $r139 = virtualinvoke $r138.<groovyjarjarantlr.Lookahead: java.lang.Object clone()>();

        $r140 = (groovyjarjarantlr.Lookahead) $r139;

        return $r140;

     label07:
        $r69 = r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r66 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r67 = $r66[i0];

        $r68 = $r67.<groovyjarjarantlr.Lookahead: java.lang.String cycle>;

        $r70 = virtualinvoke $r69.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r68);

        r171 = (groovyjarjarantlr.RuleSymbol) $r70;

        $r71 = virtualinvoke r171.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock getBlock()>();

        r172 = $r71.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.RuleEndElement endNode>;

        $r72 = r172.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r73 = $r72[i0];

        if $r73 != null goto label08;

        $r133 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r134 = $r133[i0];

        $r135 = virtualinvoke $r134.<groovyjarjarantlr.Lookahead: java.lang.Object clone()>();

        $r136 = (groovyjarjarantlr.Lookahead) $r135;

        return $r136;

     label08:
        $z10 = r3.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z10 == 0 goto label09;

        $r108 = <java.lang.System: java.io.PrintStream out>;

        $r107 = new java.lang.StringBuffer;

        specialinvoke $r107.<java.lang.StringBuffer: void <init>()>();

        $r109 = virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("combining FOLLOW(");

        $r110 = virtualinvoke $r109.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r111 = virtualinvoke $r110.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") for ");

        $r112 = virtualinvoke $r111.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r170);

        $r113 = virtualinvoke $r112.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": from ");

        $r114 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r117 = $r114[i0];

        $r116 = r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.CharFormatter charFormatter>;

        $r115 = r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r118 = virtualinvoke $r117.<groovyjarjarantlr.Lookahead: java.lang.String toString(java.lang.String,groovyjarjarantlr.CharFormatter,groovyjarjarantlr.Grammar)>(",", $r116, $r115);

        $r119 = virtualinvoke $r113.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r118);

        $r120 = virtualinvoke $r119.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with FOLLOW for ");

        $r121 = r172.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.AlternativeBlock block>;

        $r122 = (groovyjarjarantlr.RuleBlock) $r121;

        $r123 = virtualinvoke $r122.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r124 = virtualinvoke $r120.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r123);

        $r125 = virtualinvoke $r124.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r126 = r172.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r129 = $r126[i0];

        $r128 = r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.CharFormatter charFormatter>;

        $r127 = r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r130 = virtualinvoke $r129.<groovyjarjarantlr.Lookahead: java.lang.String toString(java.lang.String,groovyjarjarantlr.CharFormatter,groovyjarjarantlr.Grammar)>(",", $r128, $r127);

        $r131 = virtualinvoke $r125.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r130);

        $r132 = virtualinvoke $r131.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r108.<java.io.PrintStream: void println(java.lang.String)>($r132);

     label09:
        $r74 = r172.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r75 = $r74[i0];

        $r76 = $r75.<groovyjarjarantlr.Lookahead: java.lang.String cycle>;

        if $r76 != null goto label10;

        $r101 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r104 = $r101[i0];

        $r102 = r172.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r103 = $r102[i0];

        virtualinvoke $r104.<groovyjarjarantlr.Lookahead: void combineWith(groovyjarjarantlr.Lookahead)>($r103);

        $r105 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r106 = $r105[i0];

        $r106.<groovyjarjarantlr.Lookahead: java.lang.String cycle> = null;

        goto label11;

     label10:
        $r77 = virtualinvoke r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Lookahead FOLLOW(int,groovyjarjarantlr.RuleEndElement)>(i0, r172);

        $r78 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r79 = $r78[i0];

        virtualinvoke $r79.<groovyjarjarantlr.Lookahead: void combineWith(groovyjarjarantlr.Lookahead)>($r77);

        $r80 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r82 = $r80[i0];

        $r81 = $r77.<groovyjarjarantlr.Lookahead: java.lang.String cycle>;

        $r82.<groovyjarjarantlr.Lookahead: java.lang.String cycle> = $r81;

     label11:
        $z11 = r3.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z11 == 0 goto label12;

        $r88 = <java.lang.System: java.io.PrintStream out>;

        $r87 = new java.lang.StringBuffer;

        specialinvoke $r87.<java.lang.StringBuffer: void <init>()>();

        $r89 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("saving FOLLOW(");

        $r90 = virtualinvoke $r89.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r91 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") for ");

        $r92 = virtualinvoke $r91.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r170);

        $r93 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": from ");

        $r94 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r97 = $r94[i0];

        $r96 = r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.CharFormatter charFormatter>;

        $r95 = r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r98 = virtualinvoke $r97.<groovyjarjarantlr.Lookahead: java.lang.String toString(java.lang.String,groovyjarjarantlr.CharFormatter,groovyjarjarantlr.Grammar)>(",", $r96, $r95);

        $r99 = virtualinvoke $r93.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r98);

        $r100 = virtualinvoke $r99.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r88.<java.io.PrintStream: void println(java.lang.String)>($r100);

     label12:
        $r83 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r84 = $r83[i0];

        $r85 = virtualinvoke $r84.<groovyjarjarantlr.Lookahead: java.lang.Object clone()>();

        $r86 = (groovyjarjarantlr.Lookahead) $r85;

        return $r86;

     label13:
        $r7 = r0.<groovyjarjarantlr.RuleEndElement: boolean[] lock>;

        $r7[i0] = 1;

        $r8 = new groovyjarjarantlr.Lookahead;

        specialinvoke $r8.<groovyjarjarantlr.Lookahead: void <init>()>();

        $r9 = r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>(r170);

        r173 = (groovyjarjarantlr.RuleSymbol) $r10;

        i2 = 0;

     label14:
        $i1 = virtualinvoke r173.<groovyjarjarantlr.RuleSymbol: int numReferences()>();

        if i2 >= $i1 goto label19;

        $r33 = virtualinvoke r173.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleRefElement getReference(int)>(i2);

        $z6 = r3.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z6 == 0 goto label15;

        $r55 = <java.lang.System: java.io.PrintStream out>;

        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r56 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("next[");

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r170);

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] is ");

        $r59 = $r33.<groovyjarjarantlr.RuleRefElement: groovyjarjarantlr.AlternativeElement next>;

        $r60 = virtualinvoke $r59.<groovyjarjarantlr.AlternativeElement: java.lang.String toString()>();

        $r61 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r60);

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r55.<java.io.PrintStream: void println(java.lang.String)>($r62);

     label15:
        $r34 = $r33.<groovyjarjarantlr.RuleRefElement: groovyjarjarantlr.AlternativeElement next>;

        $r35 = virtualinvoke $r34.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>(i0);

        $z7 = r3.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z7 == 0 goto label16;

        $r47 = <java.lang.System: java.io.PrintStream out>;

        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r48 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FIRST of next[");

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r170);

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] ptr is ");

        $r51 = virtualinvoke $r35.<groovyjarjarantlr.Lookahead: java.lang.String toString()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r47.<java.io.PrintStream: void println(java.lang.String)>($r53);

     label16:
        $r36 = $r35.<groovyjarjarantlr.Lookahead: java.lang.String cycle>;

        if $r36 == null goto label17;

        $r45 = $r35.<groovyjarjarantlr.Lookahead: java.lang.String cycle>;

        $z8 = virtualinvoke $r45.<java.lang.String: boolean equals(java.lang.Object)>(r170);

        if $z8 == 0 goto label17;

        $r35.<groovyjarjarantlr.Lookahead: java.lang.String cycle> = null;

     label17:
        virtualinvoke $r8.<groovyjarjarantlr.Lookahead: void combineWith(groovyjarjarantlr.Lookahead)>($r35);

        $z13 = r3.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z13 == 0 goto label18;

        $r38 = <java.lang.System: java.io.PrintStream out>;

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("combined FOLLOW[");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r170);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] is ");

        $r42 = virtualinvoke $r8.<groovyjarjarantlr.Lookahead: java.lang.String toString()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>($r44);

     label18:
        i2 = i2 + 1;

        goto label14;

     label19:
        $r11 = r0.<groovyjarjarantlr.RuleEndElement: boolean[] lock>;

        $r11[i0] = 0;

        $r12 = $r8.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $z3 = virtualinvoke $r12.<groovyjarjarantlr.collections.impl.BitSet: boolean nil()>();

        if $z3 == 0 goto label22;

        $r28 = $r8.<groovyjarjarantlr.Lookahead: java.lang.String cycle>;

        if $r28 != null goto label22;

        $r29 = r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r29 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z4 == 0 goto label20;

        $r32 = $r8.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        virtualinvoke $r32.<groovyjarjarantlr.collections.impl.BitSet: void add(int)>(3);

        goto label22;

     label20:
        $r30 = r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $z5 = $r30 instanceof groovyjarjarantlr.LexerGrammar;

        if $z5 == 0 goto label21;

        virtualinvoke $r8.<groovyjarjarantlr.Lookahead: void setEpsilon()>();

        goto label22;

     label21:
        $r31 = $r8.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        virtualinvoke $r31.<groovyjarjarantlr.collections.impl.BitSet: void add(int)>(1);

     label22:
        $z14 = r3.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z14 == 0 goto label23;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("saving FOLLOW(");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") for ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r170);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r24 = r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.CharFormatter charFormatter>;

        $r23 = r3.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r25 = virtualinvoke $r8.<groovyjarjarantlr.Lookahead: java.lang.String toString(java.lang.String,groovyjarjarantlr.CharFormatter,groovyjarjarantlr.Grammar)>(",", $r24, $r23);

        $r26 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r27);

     label23:
        $r13 = r0.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.Lookahead[] cache>;

        $r14 = virtualinvoke $r8.<groovyjarjarantlr.Lookahead: java.lang.Object clone()>();

        $r15 = (groovyjarjarantlr.Lookahead) $r14;

        $r13[i0] = $r15;

        return $r8;
    }

    private groovyjarjarantlr.Lookahead getAltLookahead(groovyjarjarantlr.AlternativeBlock, int, int)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.Lookahead[] $r3, $r5, $r7;
        groovyjarjarantlr.Alternative $r1;
        groovyjarjarantlr.Lookahead $r4, $r6, r9;
        int i0, i1;
        groovyjarjarantlr.LLkAnalyzer r8;
        groovyjarjarantlr.AlternativeElement r2;

        r8 := @this: groovyjarjarantlr.LLkAnalyzer;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i0);

        r2 = $r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $r3 = $r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r4 = $r3[i1];

        if $r4 != null goto label1;

        $r6 = virtualinvoke r2.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>(i1);

        r9 = $r6;

        $r7 = $r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        $r7[i1] = $r6;

        goto label2;

     label1:
        $r5 = $r1.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Lookahead[] cache>;

        r9 = $r5[i1];

     label2:
        return r9;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.ActionElement)
    {
        java.io.PrintStream $r5;
        groovyjarjarantlr.Lookahead $r3;
        java.lang.StringBuffer $r4, $r6, $r7, $r8, $r9, $r10;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0;
        groovyjarjarantlr.ActionElement r1;
        java.lang.String $r11;
        boolean $z0;
        groovyjarjarantlr.AlternativeElement $r2;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.ActionElement;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lookAction(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label1:
        $r2 = r1.<groovyjarjarantlr.ActionElement: groovyjarjarantlr.AlternativeElement next>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>(i0);

        return $r3;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.Grammar $r3, $r6;
        int[] $r11;
        groovyjarjarantlr.TokenManager $r4;
        groovyjarjarantlr.collections.impl.Vector $r39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        groovyjarjarantlr.collections.impl.BitSet $r5, $r8, $r10, r41;
        groovyjarjarantlr.Alternative $r13;
        groovyjarjarantlr.AlternativeElement $r14, $r15, $r29;
        groovyjarjarantlr.LexerGrammar $r7;
        groovyjarjarantlr.AlternativeBlock r1, $r12, $r38;
        java.lang.StringBuffer $r16, $r18, $r19, $r20, $r22, $r24, $r25, $r26, $r27, $r30, $r32, $r33, $r34, $r35, $r36;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0, $i1, $i2, $i3, i4, $i5, i6;
        java.lang.String $r21, $r28, $r37;
        java.io.PrintStream $r17, $r23, $r31;
        groovyjarjarantlr.Lookahead $r2, $r40;
        java.lang.Object $r9;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.AlternativeBlock;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r31 = <java.lang.System: java.io.PrintStream out>;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lookAltBlk(");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>($r37);

     label1:
        $r38 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock> = r1;

        $r2 = new groovyjarjarantlr.Lookahead;

        specialinvoke $r2.<groovyjarjarantlr.Lookahead: void <init>()>();

        i4 = 0;

     label2:
        $r39 = r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i5 = virtualinvoke $r39.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i4 >= $i5 goto label5;

        $z5 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z5 == 0 goto label3;

        $r23 = <java.lang.System: java.io.PrintStream out>;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("alt ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i4);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" of ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r28);

     label3:
        $r12 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $r12.<groovyjarjarantlr.AlternativeBlock: int analysisAlt> = i4;

        $r13 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i4);

        $r29 = $r13.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $z6 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z6 == 0 goto label4;

        $r15 = $r13.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $r14 = $r13.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement tail>;

        if $r15 != $r14 goto label4;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("alt ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i4);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is empty");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r21);

     label4:
        $r40 = virtualinvoke $r29.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>(i0);

        virtualinvoke $r2.<groovyjarjarantlr.Lookahead: void combineWith(groovyjarjarantlr.Lookahead)>($r40);

        i4 = i4 + 1;

        goto label2;

     label5:
        if i0 != 1 goto label9;

        $z1 = r1.<groovyjarjarantlr.AlternativeBlock: boolean not>;

        if $z1 == 0 goto label9;

        $z2 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean lexicalAnalysis>;

        $z3 = virtualinvoke r0.<groovyjarjarantlr.LLkAnalyzer: boolean subruleCanBeInverted(groovyjarjarantlr.AlternativeBlock,boolean)>(r1, $z2);

        if $z3 == 0 goto label9;

        $z4 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean lexicalAnalysis>;

        if $z4 == 0 goto label8;

        $r6 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r7 = (groovyjarjarantlr.LexerGrammar) $r6;

        $r8 = $r7.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.collections.impl.BitSet charVocabulary>;

        $r9 = virtualinvoke $r8.<groovyjarjarantlr.collections.impl.BitSet: java.lang.Object clone()>();

        r41 = (groovyjarjarantlr.collections.impl.BitSet) $r9;

        $r10 = $r2.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $r11 = virtualinvoke $r10.<groovyjarjarantlr.collections.impl.BitSet: int[] toArray()>();

        i6 = 0;

     label6:
        $i2 = lengthof $r11;

        if i6 >= $i2 goto label7;

        $i3 = $r11[i6];

        virtualinvoke r41.<groovyjarjarantlr.collections.impl.BitSet: void remove(int)>($i3);

        i6 = i6 + 1;

        goto label6;

     label7:
        $r2.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset> = r41;

        goto label9;

     label8:
        $r5 = $r2.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $r3 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i1 = interfaceinvoke $r4.<groovyjarjarantlr.TokenManager: int maxTokenType()>();

        virtualinvoke $r5.<groovyjarjarantlr.collections.impl.BitSet: void notInPlace(int,int)>(4, $i1);

     label9:
        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock> = $r38;

        return $r2;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.BlockEndElement)
    {
        groovyjarjarantlr.BlockEndElement r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        groovyjarjarantlr.AlternativeElement $r10;
        groovyjarjarantlr.AlternativeBlock $r3, $r5, $r7, $r8, $r9, $r13, $r21;
        java.lang.StringBuffer $r16, $r18, $r19, $r20, $r22, $r23, $r25;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0;
        java.lang.String $r26;
        java.io.PrintStream $r17;
        boolean[] $r2, $r4, $r6, $r24;
        groovyjarjarantlr.Lookahead $r11, $r12, $r14, $r15, r27;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.BlockEndElement;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lookBlockEnd(");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r21 = r1.<groovyjarjarantlr.BlockEndElement: groovyjarjarantlr.AlternativeBlock block>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("); lock is ");

        $r24 = r1.<groovyjarjarantlr.BlockEndElement: boolean[] lock>;

        $z6 = $r24[i0];

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z6);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r26);

     label1:
        $r2 = r1.<groovyjarjarantlr.BlockEndElement: boolean[] lock>;

        $z1 = $r2[i0];

        if $z1 == 0 goto label2;

        $r15 = new groovyjarjarantlr.Lookahead;

        specialinvoke $r15.<groovyjarjarantlr.Lookahead: void <init>()>();

        return $r15;

     label2:
        $r3 = r1.<groovyjarjarantlr.BlockEndElement: groovyjarjarantlr.AlternativeBlock block>;

        $z2 = $r3 instanceof groovyjarjarantlr.ZeroOrMoreBlock;

        if $z2 != 0 goto label3;

        $r13 = r1.<groovyjarjarantlr.BlockEndElement: groovyjarjarantlr.AlternativeBlock block>;

        $z5 = $r13 instanceof groovyjarjarantlr.OneOrMoreBlock;

        if $z5 == 0 goto label4;

     label3:
        $r4 = r1.<groovyjarjarantlr.BlockEndElement: boolean[] lock>;

        $r4[i0] = 1;

        $r5 = r1.<groovyjarjarantlr.BlockEndElement: groovyjarjarantlr.AlternativeBlock block>;

        r27 = virtualinvoke r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.AlternativeBlock)>(i0, $r5);

        $r6 = r1.<groovyjarjarantlr.BlockEndElement: boolean[] lock>;

        $r6[i0] = 0;

        goto label5;

     label4:
        $r14 = new groovyjarjarantlr.Lookahead;

        specialinvoke $r14.<groovyjarjarantlr.Lookahead: void <init>()>();

        r27 = $r14;

     label5:
        $r7 = r1.<groovyjarjarantlr.BlockEndElement: groovyjarjarantlr.AlternativeBlock block>;

        $z3 = $r7 instanceof groovyjarjarantlr.TreeElement;

        if $z3 == 0 goto label6;

        $r12 = staticinvoke <groovyjarjarantlr.Lookahead: groovyjarjarantlr.Lookahead of(int)>(3);

        virtualinvoke r27.<groovyjarjarantlr.Lookahead: void combineWith(groovyjarjarantlr.Lookahead)>($r12);

        goto label8;

     label6:
        $r8 = r1.<groovyjarjarantlr.BlockEndElement: groovyjarjarantlr.AlternativeBlock block>;

        $z4 = $r8 instanceof groovyjarjarantlr.SynPredBlock;

        if $z4 == 0 goto label7;

        virtualinvoke r27.<groovyjarjarantlr.Lookahead: void setEpsilon()>();

        goto label8;

     label7:
        $r9 = r1.<groovyjarjarantlr.BlockEndElement: groovyjarjarantlr.AlternativeBlock block>;

        $r10 = $r9.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.AlternativeElement next>;

        $r11 = virtualinvoke $r10.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>(i0);

        virtualinvoke r27.<groovyjarjarantlr.Lookahead: void combineWith(groovyjarjarantlr.Lookahead)>($r11);

     label8:
        return r27;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.CharLiteralElement)
    {
        groovyjarjarantlr.Grammar $r5;
        boolean $z0, $z1, $z2, $z3, $z4;
        groovyjarjarantlr.collections.impl.BitSet $r7, r9;
        groovyjarjarantlr.AlternativeElement $r23;
        groovyjarjarantlr.LexerGrammar $r6;
        groovyjarjarantlr.CharLiteralElement r2;
        groovyjarjarantlr.Tool $r1;
        java.lang.StringBuffer $r11, $r13, $r15, $r17, $r19, $r21, $r25, $r27, $r28, $r29, $r30, $r31;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r14, $r16, $r20, $r22, $r32;
        java.io.PrintStream $r12, $r18, $r26;
        groovyjarjarantlr.Lookahead $r3, $r4, $r10, $r24;
        java.lang.Object $r8;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r2 := @parameter1: groovyjarjarantlr.CharLiteralElement;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r26 = <java.lang.System: java.io.PrintStream out>;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lookCharLiteral(");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>($r32);

     label1:
        if i0 <= 1 goto label2;

        $r23 = r2.<groovyjarjarantlr.CharLiteralElement: groovyjarjarantlr.AlternativeElement next>;

        $i4 = i0 - 1;

        $r24 = virtualinvoke $r23.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>($i4);

        return $r24;

     label2:
        $z1 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean lexicalAnalysis>;

        if $z1 == 0 goto label6;

        $z2 = r2.<groovyjarjarantlr.CharLiteralElement: boolean not>;

        if $z2 == 0 goto label5;

        $r5 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r6 = (groovyjarjarantlr.LexerGrammar) $r5;

        $r7 = $r6.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.collections.impl.BitSet charVocabulary>;

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.collections.impl.BitSet: java.lang.Object clone()>();

        r9 = (groovyjarjarantlr.collections.impl.BitSet) $r8;

        $z3 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z3 == 0 goto label3;

        $r18 = <java.lang.System: java.io.PrintStream out>;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("charVocab is ");

        $r20 = virtualinvoke r9.<groovyjarjarantlr.collections.impl.BitSet: java.lang.String toString()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>($r22);

     label3:
        specialinvoke r0.<groovyjarjarantlr.LLkAnalyzer: void removeCompetingPredictionSets(groovyjarjarantlr.collections.impl.BitSet,groovyjarjarantlr.AlternativeElement)>(r9, r2);

        $z4 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z4 == 0 goto label4;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("charVocab after removal of prior alt lookahead ");

        $r14 = virtualinvoke r9.<groovyjarjarantlr.collections.impl.BitSet: java.lang.String toString()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label4:
        $i3 = virtualinvoke r2.<groovyjarjarantlr.CharLiteralElement: int getType()>();

        virtualinvoke r9.<groovyjarjarantlr.collections.impl.BitSet: void clear(int)>($i3);

        $r10 = new groovyjarjarantlr.Lookahead;

        specialinvoke $r10.<groovyjarjarantlr.Lookahead: void <init>(groovyjarjarantlr.collections.impl.BitSet)>(r9);

        return $r10;

     label5:
        $i2 = virtualinvoke r2.<groovyjarjarantlr.CharLiteralElement: int getType()>();

        $r4 = staticinvoke <groovyjarjarantlr.Lookahead: groovyjarjarantlr.Lookahead of(int)>($i2);

        return $r4;

     label6:
        $r1 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Tool tool>;

        virtualinvoke $r1.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("Character literal reference found in parser");

        $i1 = virtualinvoke r2.<groovyjarjarantlr.CharLiteralElement: int getType()>();

        $r3 = staticinvoke <groovyjarjarantlr.Lookahead: groovyjarjarantlr.Lookahead of(int)>($i1);

        return $r3;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.CharRangeElement)
    {
        groovyjarjarantlr.CharRangeElement r1;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r12, $r14;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0, $i4, i5, $i6, $i7, $i8;
        java.lang.String $r13;
        boolean $z0;
        java.io.PrintStream $r7;
        char $c1, $c2, $c3;
        groovyjarjarantlr.collections.impl.BitSet $r2;
        groovyjarjarantlr.Lookahead $r5, $r15;
        groovyjarjarantlr.AlternativeElement $r4;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.CharRangeElement;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lookCharRange(");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label1:
        if i0 <= 1 goto label2;

        $r4 = r1.<groovyjarjarantlr.CharRangeElement: groovyjarjarantlr.AlternativeElement next>;

        $i4 = i0 - 1;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>($i4);

        return $r5;

     label2:
        $c1 = r1.<groovyjarjarantlr.CharRangeElement: char begin>;

        $i6 = (int) $c1;

        $r2 = staticinvoke <groovyjarjarantlr.collections.impl.BitSet: groovyjarjarantlr.collections.impl.BitSet of(int)>($i6);

        $c2 = r1.<groovyjarjarantlr.CharRangeElement: char begin>;

        $i7 = (int) $c2;

        i5 = $i7 + 1;

     label3:
        $c3 = r1.<groovyjarjarantlr.CharRangeElement: char end>;

        $i8 = (int) $c3;

        if i5 > $i8 goto label4;

        virtualinvoke $r2.<groovyjarjarantlr.collections.impl.BitSet: void add(int)>(i5);

        i5 = i5 + 1;

        goto label3;

     label4:
        $r15 = new groovyjarjarantlr.Lookahead;

        specialinvoke $r15.<groovyjarjarantlr.Lookahead: void <init>(groovyjarjarantlr.collections.impl.BitSet)>($r2);

        return $r15;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.GrammarAtom)
    {
        groovyjarjarantlr.Grammar $r3;
        groovyjarjarantlr.Tool $r9;
        java.lang.StringBuffer $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r19;
        groovyjarjarantlr.TokenManager $r4;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r11;
        groovyjarjarantlr.collections.impl.BitSet $r5, $r6;
        groovyjarjarantlr.GrammarAtom r1;
        groovyjarjarantlr.Lookahead $r2, $r8;
        groovyjarjarantlr.AlternativeElement $r7;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.GrammarAtom;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("look(");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $i4 = virtualinvoke r1.<groovyjarjarantlr.GrammarAtom: int getType()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("])");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r19);

     label1:
        $z1 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean lexicalAnalysis>;

        if $z1 == 0 goto label2;

        $r9 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Tool tool>;

        virtualinvoke $r9.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("token reference found in lexer");

     label2:
        if i0 <= 1 goto label3;

        $r7 = r1.<groovyjarjarantlr.GrammarAtom: groovyjarjarantlr.AlternativeElement next>;

        $i3 = i0 - 1;

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>($i3);

        return $r8;

     label3:
        $i1 = virtualinvoke r1.<groovyjarjarantlr.GrammarAtom: int getType()>();

        $r2 = staticinvoke <groovyjarjarantlr.Lookahead: groovyjarjarantlr.Lookahead of(int)>($i1);

        $z2 = r1.<groovyjarjarantlr.GrammarAtom: boolean not>;

        if $z2 == 0 goto label4;

        $r3 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i2 = interfaceinvoke $r4.<groovyjarjarantlr.TokenManager: int maxTokenType()>();

        $r5 = $r2.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        virtualinvoke $r5.<groovyjarjarantlr.collections.impl.BitSet: void notInPlace(int,int)>(4, $i2);

        $r6 = $r2.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        specialinvoke r0.<groovyjarjarantlr.LLkAnalyzer: void removeCompetingPredictionSets(groovyjarjarantlr.collections.impl.BitSet,groovyjarjarantlr.AlternativeElement)>($r6, r1);

     label4:
        return $r2;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.OneOrMoreBlock)
    {
        java.io.PrintStream $r4;
        groovyjarjarantlr.Lookahead $r2;
        java.lang.StringBuffer $r3, $r5, $r6, $r7, $r8, $r9;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0;
        java.lang.String $r10;
        groovyjarjarantlr.OneOrMoreBlock r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.OneOrMoreBlock;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("look+");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label1:
        $r2 = virtualinvoke r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.AlternativeBlock)>(i0, r1);

        return $r2;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.RuleBlock)
    {
        java.io.PrintStream $r4;
        groovyjarjarantlr.RuleBlock r1;
        groovyjarjarantlr.Lookahead $r2;
        java.lang.StringBuffer $r3, $r5, $r6, $r7, $r8, $r9;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0;
        java.lang.String $r10;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.RuleBlock;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lookRuleBlk(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label1:
        $r2 = virtualinvoke r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.AlternativeBlock)>(i0, r1);

        return $r2;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.RuleEndElement)
    {
        java.lang.StringBuffer $r5, $r7, $r8, $r9, $r10, $r11, $r13;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0;
        java.lang.String $r14;
        boolean $z0, $z1, $z2, $z3;
        java.io.PrintStream $r6;
        boolean[] $r12;
        groovyjarjarantlr.collections.impl.BitSet $r4;
        groovyjarjarantlr.RuleEndElement r1;
        groovyjarjarantlr.Lookahead $r2, $r3;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.RuleEndElement;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lookRuleBlockEnd(");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("); noFOLLOW=");

        $z2 = r1.<groovyjarjarantlr.RuleEndElement: boolean noFOLLOW>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; lock is ");

        $r12 = r1.<groovyjarjarantlr.RuleEndElement: boolean[] lock>;

        $z3 = $r12[i0];

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label1:
        $z1 = r1.<groovyjarjarantlr.RuleEndElement: boolean noFOLLOW>;

        if $z1 == 0 goto label2;

        $r3 = new groovyjarjarantlr.Lookahead;

        specialinvoke $r3.<groovyjarjarantlr.Lookahead: void <init>()>();

        virtualinvoke $r3.<groovyjarjarantlr.Lookahead: void setEpsilon()>();

        $r4 = staticinvoke <groovyjarjarantlr.collections.impl.BitSet: groovyjarjarantlr.collections.impl.BitSet of(int)>(i0);

        $r3.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet epsilonDepth> = $r4;

        return $r3;

     label2:
        $r2 = virtualinvoke r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Lookahead FOLLOW(int,groovyjarjarantlr.RuleEndElement)>(i0, r1);

        return $r2;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.RuleRefElement)
    {
        groovyjarjarantlr.RuleBlock $r14;
        groovyjarjarantlr.GrammarSymbol $r4;
        groovyjarjarantlr.Tool $r6, $r33;
        java.lang.StringBuffer $r5, $r7, $r9, $r23, $r25, $r27, $r28, $r30, $r32, $r34, $r36, $r37, $r39, $r43, $r45, $r47, $r49, $r51, $r52, $r53, $r54, $r55;
        java.lang.String $r2, $r8, $r10, $r12, $r16, $r18, $r26, $r31, $r35, $r38, $r40, $r42, $r46, $r48, $r56;
        groovyjarjarantlr.RuleSymbol $r57;
        groovyjarjarantlr.RuleEndElement r15;
        groovyjarjarantlr.Grammar $r3, $r11, $r41;
        int[] $r20;
        groovyjarjarantlr.RuleRefElement r1;
        boolean $z0, $z1, z2, $z3, $z4, $z5;
        groovyjarjarantlr.collections.impl.BitSet $r19, $r29;
        groovyjarjarantlr.AlternativeElement $r21;
        groovyjarjarantlr.LLkAnalyzer r0;
        int $i0, $i1, i2, $i3, $i4, i5, $i6, $i7, i8, $i9;
        java.io.PrintStream $r24, $r44, $r50;
        groovyjarjarantlr.Lookahead $r13, $r17, $r22;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i2 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.RuleRefElement;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r50 = <java.lang.System: java.io.PrintStream out>;

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lookRuleRef(");

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r50.<java.io.PrintStream: void println(java.lang.String)>($r56);

     label1:
        $r3 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r2 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r2);

        $r57 = (groovyjarjarantlr.RuleSymbol) $r4;

        if $r57 == null goto label2;

        $z1 = $r57.<groovyjarjarantlr.RuleSymbol: boolean defined>;

        if $z1 != 0 goto label3;

     label2:
        $r6 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Tool tool>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("no definition of rule ");

        $r8 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        $r11 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r12 = virtualinvoke $r11.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i1 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r6.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r10, $r12, $i0, $i1);

        $r13 = new groovyjarjarantlr.Lookahead;

        specialinvoke $r13.<groovyjarjarantlr.Lookahead: void <init>()>();

        return $r13;

     label3:
        $r14 = virtualinvoke $r57.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock getBlock()>();

        r15 = $r14.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.RuleEndElement endNode>;

        z2 = r15.<groovyjarjarantlr.RuleEndElement: boolean noFOLLOW>;

        r15.<groovyjarjarantlr.RuleEndElement: boolean noFOLLOW> = 1;

        $r16 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r17 = virtualinvoke r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Lookahead look(int,java.lang.String)>(i2, $r16);

        $z3 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z3 == 0 goto label4;

        $r44 = <java.lang.System: java.io.PrintStream out>;

        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("back from rule ref to ");

        $r46 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r44.<java.io.PrintStream: void println(java.lang.String)>($r48);

     label4:
        r15.<groovyjarjarantlr.RuleEndElement: boolean noFOLLOW> = z2;

        $r18 = $r17.<groovyjarjarantlr.Lookahead: java.lang.String cycle>;

        if $r18 == null goto label5;

        $r33 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Tool tool>;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("infinite recursion to rule ");

        $r35 = $r17.<groovyjarjarantlr.Lookahead: java.lang.String cycle>;

        $r36 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" from rule ");

        $r38 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String enclosingRuleName>;

        $r39 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        $r41 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r42 = virtualinvoke $r41.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i6 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getLine()>();

        $i7 = virtualinvoke r1.<groovyjarjarantlr.RuleRefElement: int getColumn()>();

        virtualinvoke $r33.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r40, $r42, $i6, $i7);

     label5:
        $z4 = virtualinvoke $r17.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z4 == 0 goto label8;

        $z5 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z5 == 0 goto label6;

        $r24 = <java.lang.System: java.io.PrintStream out>;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("rule ref to ");

        $r26 = r1.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" has eps, depth: ");

        $r29 = $r17.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet epsilonDepth>;

        $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>($r31);

     label6:
        virtualinvoke $r17.<groovyjarjarantlr.Lookahead: void resetEpsilon()>();

        $r19 = $r17.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet epsilonDepth>;

        $r20 = virtualinvoke $r19.<groovyjarjarantlr.collections.impl.BitSet: int[] toArray()>();

        $r17.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet epsilonDepth> = null;

        i8 = 0;

     label7:
        $i9 = lengthof $r20;

        if i8 >= $i9 goto label8;

        $i3 = $r20[i8];

        $i4 = i2 - $i3;

        i5 = i2 - $i4;

        $r21 = r1.<groovyjarjarantlr.RuleRefElement: groovyjarjarantlr.AlternativeElement next>;

        $r22 = virtualinvoke $r21.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>(i5);

        virtualinvoke $r17.<groovyjarjarantlr.Lookahead: void combineWith(groovyjarjarantlr.Lookahead)>($r22);

        i8 = i8 + 1;

        goto label7;

     label8:
        return $r17;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.StringLiteralElement)
    {
        groovyjarjarantlr.Grammar $r3;
        groovyjarjarantlr.TokenManager $r4;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.collections.impl.BitSet $r5;
        groovyjarjarantlr.StringLiteralElement r1;
        groovyjarjarantlr.AlternativeElement $r6, $r12;
        java.lang.StringBuffer $r16, $r17, $r18, $r19, $r20, $r22;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, $i9;
        java.lang.String $r8, $r9, $r11, $r21;
        java.io.PrintStream $r15;
        char $c6;
        groovyjarjarantlr.Lookahead $r2, $r7, $r10, $r13;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.StringLiteralElement;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lookStringLiteral(");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r21);

     label1:
        $z1 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean lexicalAnalysis>;

        if $z1 == 0 goto label3;

        $r8 = r1.<groovyjarjarantlr.StringLiteralElement: java.lang.String processedAtomText>;

        $i4 = virtualinvoke $r8.<java.lang.String: int length()>();

        if i0 <= $i4 goto label2;

        $r12 = r1.<groovyjarjarantlr.StringLiteralElement: groovyjarjarantlr.AlternativeElement next>;

        $r11 = r1.<groovyjarjarantlr.StringLiteralElement: java.lang.String processedAtomText>;

        $i7 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i8 = i0 - $i7;

        $r13 = virtualinvoke $r12.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>($i8);

        return $r13;

     label2:
        $r9 = r1.<groovyjarjarantlr.StringLiteralElement: java.lang.String processedAtomText>;

        $i5 = i0 - 1;

        $c6 = virtualinvoke $r9.<java.lang.String: char charAt(int)>($i5);

        $i9 = (int) $c6;

        $r10 = staticinvoke <groovyjarjarantlr.Lookahead: groovyjarjarantlr.Lookahead of(int)>($i9);

        return $r10;

     label3:
        if i0 <= 1 goto label4;

        $r6 = r1.<groovyjarjarantlr.StringLiteralElement: groovyjarjarantlr.AlternativeElement next>;

        $i3 = i0 - 1;

        $r7 = virtualinvoke $r6.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>($i3);

        return $r7;

     label4:
        $i1 = virtualinvoke r1.<groovyjarjarantlr.StringLiteralElement: int getType()>();

        $r2 = staticinvoke <groovyjarjarantlr.Lookahead: groovyjarjarantlr.Lookahead of(int)>($i1);

        $z2 = r1.<groovyjarjarantlr.StringLiteralElement: boolean not>;

        if $z2 == 0 goto label5;

        $r3 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r4 = $r3.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i2 = interfaceinvoke $r4.<groovyjarjarantlr.TokenManager: int maxTokenType()>();

        $r5 = $r2.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        virtualinvoke $r5.<groovyjarjarantlr.collections.impl.BitSet: void notInPlace(int,int)>(4, $i2);

     label5:
        return $r2;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.SynPredBlock)
    {
        java.io.PrintStream $r5;
        groovyjarjarantlr.Lookahead $r3;
        java.lang.StringBuffer $r4, $r6, $r7, $r8, $r9, $r10;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0;
        java.lang.String $r11;
        groovyjarjarantlr.SynPredBlock r1;
        boolean $z0;
        groovyjarjarantlr.AlternativeElement $r2;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.SynPredBlock;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("look=>(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r11);

     label1:
        $r2 = r1.<groovyjarjarantlr.SynPredBlock: groovyjarjarantlr.AlternativeElement next>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>(i0);

        return $r3;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.TokenRangeElement)
    {
        groovyjarjarantlr.TokenRangeElement r1;
        java.lang.StringBuffer $r6, $r8, $r9, $r10, $r11, $r12;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r13;
        boolean $z0;
        java.io.PrintStream $r7;
        groovyjarjarantlr.collections.impl.BitSet $r2;
        groovyjarjarantlr.Lookahead $r3, $r5;
        groovyjarjarantlr.AlternativeElement $r4;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.TokenRangeElement;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lookTokenRange(");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label1:
        if i0 <= 1 goto label2;

        $r4 = r1.<groovyjarjarantlr.TokenRangeElement: groovyjarjarantlr.AlternativeElement next>;

        $i4 = i0 - 1;

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>($i4);

        return $r5;

     label2:
        $i1 = r1.<groovyjarjarantlr.TokenRangeElement: int begin>;

        $r2 = staticinvoke <groovyjarjarantlr.collections.impl.BitSet: groovyjarjarantlr.collections.impl.BitSet of(int)>($i1);

        $i2 = r1.<groovyjarjarantlr.TokenRangeElement: int begin>;

        i5 = $i2 + 1;

     label3:
        $i3 = r1.<groovyjarjarantlr.TokenRangeElement: int end>;

        if i5 > $i3 goto label4;

        virtualinvoke $r2.<groovyjarjarantlr.collections.impl.BitSet: void add(int)>(i5);

        i5 = i5 + 1;

        goto label3;

     label4:
        $r3 = new groovyjarjarantlr.Lookahead;

        specialinvoke $r3.<groovyjarjarantlr.Lookahead: void <init>(groovyjarjarantlr.collections.impl.BitSet)>($r2);

        return $r3;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.TreeElement)
    {
        groovyjarjarantlr.Grammar $r6;
        groovyjarjarantlr.TokenManager $r7;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.collections.impl.BitSet $r8;
        groovyjarjarantlr.AlternativeElement $r10;
        java.lang.StringBuffer $r12, $r14, $r15, $r16, $r18, $r19, $r21, $r22;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0, $i1, $i2, $i3, $i4;
        groovyjarjarantlr.TreeElement r1;
        java.lang.String $r23;
        java.io.PrintStream $r13;
        groovyjarjarantlr.GrammarAtom $r2, $r3, $r5, $r9, $r17, $r20;
        groovyjarjarantlr.Lookahead $r4, $r11, r24;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.TreeElement;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("look(");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r17 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[");

        $r20 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $i4 = virtualinvoke $r20.<groovyjarjarantlr.GrammarAtom: int getType()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("])");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r23);

     label1:
        if i0 <= 1 goto label2;

        $r10 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.AlternativeElement next>;

        $i3 = i0 - 1;

        $r11 = virtualinvoke $r10.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>($i3);

        return $r11;

     label2:
        $r2 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $z1 = $r2 instanceof groovyjarjarantlr.WildcardElement;

        if $z1 == 0 goto label3;

        $r9 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        r24 = virtualinvoke $r9.<groovyjarjarantlr.GrammarAtom: groovyjarjarantlr.Lookahead look(int)>(1);

        goto label4;

     label3:
        $r3 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $i1 = virtualinvoke $r3.<groovyjarjarantlr.GrammarAtom: int getType()>();

        $r4 = staticinvoke <groovyjarjarantlr.Lookahead: groovyjarjarantlr.Lookahead of(int)>($i1);

        r24 = $r4;

        $r5 = r1.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        $z2 = $r5.<groovyjarjarantlr.GrammarAtom: boolean not>;

        if $z2 == 0 goto label4;

        $r6 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r7 = $r6.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i2 = interfaceinvoke $r7.<groovyjarjarantlr.TokenManager: int maxTokenType()>();

        $r8 = $r4.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        virtualinvoke $r8.<groovyjarjarantlr.collections.impl.BitSet: void notInPlace(int,int)>(4, $i2);

     label4:
        return r24;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.WildcardElement)
    {
        groovyjarjarantlr.Grammar $r2, $r14;
        groovyjarjarantlr.TokenManager $r3;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.collections.impl.BitSet $r1, $r16, r28;
        groovyjarjarantlr.AlternativeElement $r18;
        groovyjarjarantlr.LexerGrammar $r15;
        groovyjarjarantlr.WildcardElement r9;
        java.lang.StringBuffer $r4, $r6, $r7, $r8, $r10, $r11, $r12, $r20, $r22, $r23, $r24, $r25, $r26;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0, $i1, $i2;
        java.lang.String $r13, $r27;
        java.io.PrintStream $r5, $r21;
        groovyjarjarantlr.Lookahead $r19, $r29;
        java.lang.Object $r17;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r9 := @parameter1: groovyjarjarantlr.WildcardElement;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r21 = <java.lang.System: java.io.PrintStream out>;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("look(");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r9);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r27);

     label1:
        if i0 <= 1 goto label2;

        $r18 = r9.<groovyjarjarantlr.WildcardElement: groovyjarjarantlr.AlternativeElement next>;

        $i2 = i0 - 1;

        $r19 = virtualinvoke $r18.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>($i2);

        return $r19;

     label2:
        $z1 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean lexicalAnalysis>;

        if $z1 == 0 goto label3;

        $r14 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r15 = (groovyjarjarantlr.LexerGrammar) $r14;

        $r16 = $r15.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.collections.impl.BitSet charVocabulary>;

        $r17 = virtualinvoke $r16.<groovyjarjarantlr.collections.impl.BitSet: java.lang.Object clone()>();

        r28 = (groovyjarjarantlr.collections.impl.BitSet) $r17;

        goto label4;

     label3:
        $r1 = new groovyjarjarantlr.collections.impl.BitSet;

        specialinvoke $r1.<groovyjarjarantlr.collections.impl.BitSet: void <init>(int)>(1);

        r28 = $r1;

        $r2 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r3 = $r2.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $i1 = interfaceinvoke $r3.<groovyjarjarantlr.TokenManager: int maxTokenType()>();

        virtualinvoke $r1.<groovyjarjarantlr.collections.impl.BitSet: void notInPlace(int,int)>(4, $i1);

        $z2 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z2 == 0 goto label4;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("look(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") after not: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label4:
        $r29 = new groovyjarjarantlr.Lookahead;

        specialinvoke $r29.<groovyjarjarantlr.Lookahead: void <init>(groovyjarjarantlr.collections.impl.BitSet)>(r28);

        return $r29;
    }

    public groovyjarjarantlr.Lookahead look(int, groovyjarjarantlr.ZeroOrMoreBlock)
    {
        java.io.PrintStream $r6;
        groovyjarjarantlr.ZeroOrMoreBlock r1;
        groovyjarjarantlr.Lookahead $r2, $r4;
        java.lang.StringBuffer $r5, $r7, $r8, $r9, $r10, $r11;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0;
        java.lang.String $r12;
        boolean $z0;
        groovyjarjarantlr.AlternativeElement $r3;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: groovyjarjarantlr.ZeroOrMoreBlock;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("look*(");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label1:
        $r2 = virtualinvoke r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.AlternativeBlock)>(i0, r1);

        $r3 = r1.<groovyjarjarantlr.ZeroOrMoreBlock: groovyjarjarantlr.AlternativeElement next>;

        $r4 = virtualinvoke $r3.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>(i0);

        virtualinvoke $r2.<groovyjarjarantlr.Lookahead: void combineWith(groovyjarjarantlr.Lookahead)>($r4);

        return $r2;
    }

    public groovyjarjarantlr.Lookahead look(int, java.lang.String)
    {
        groovyjarjarantlr.Lookahead[] $r6, $r11, $r21, $r28, $r39;
        groovyjarjarantlr.RuleBlock $r4;
        groovyjarjarantlr.GrammarSymbol $r3;
        java.lang.StringBuffer $r14, $r16, $r17, $r18, $r19, $r20, $r26, $r32, $r34, $r35, $r36, $r37, $r38, $r44, $r47, $r49, $r51, $r53, $r55, $r56, $r57, $r58, $r59;
        java.lang.String r1, $r25, $r27, $r43, $r45, $r50, $r52, $r60;
        boolean[] $r5, $r8, $r10;
        groovyjarjarantlr.RuleSymbol $r61;
        groovyjarjarantlr.Grammar $r2, $r22, $r40;
        groovyjarjarantlr.CharFormatter $r23, $r41;
        boolean $z0, $z1, $z2, $z3, $z4;
        groovyjarjarantlr.LLkAnalyzer r0;
        int i0;
        java.io.PrintStream $r15, $r33, $r48, $r54;
        groovyjarjarantlr.Lookahead $r7, $r9, $r13, $r24, $r29, $r31, $r42, $r46;
        java.lang.Object $r12, $r30;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $z0 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z0 == 0 goto label1;

        $r54 = <java.lang.System: java.io.PrintStream out>;

        $r53 = new java.lang.StringBuffer;

        specialinvoke $r53.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lookRuleName(");

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>($r60);

     label1:
        $r2 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>(r1);

        $r61 = (groovyjarjarantlr.RuleSymbol) $r3;

        $r4 = virtualinvoke $r61.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock getBlock()>();

        $r5 = $r4.<groovyjarjarantlr.RuleBlock: boolean[] lock>;

        $z1 = $r5[i0];

        if $z1 == 0 goto label3;

        $z4 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z4 == 0 goto label2;

        $r48 = <java.lang.System: java.io.PrintStream out>;

        $r47 = new java.lang.StringBuffer;

        specialinvoke $r47.<java.lang.StringBuffer: void <init>()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("infinite recursion to rule ");

        $r50 = virtualinvoke $r4.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r48.<java.io.PrintStream: void println(java.lang.String)>($r52);

     label2:
        $r46 = new groovyjarjarantlr.Lookahead;

        specialinvoke $r46.<groovyjarjarantlr.Lookahead: void <init>(java.lang.String)>(r1);

        return $r46;

     label3:
        $r6 = $r4.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Lookahead[] cache>;

        $r7 = $r6[i0];

        if $r7 == null goto label5;

        $z3 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z3 == 0 goto label4;

        $r33 = <java.lang.System: java.io.PrintStream out>;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("found depth ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" result in FIRST ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cache: ");

        $r39 = $r4.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Lookahead[] cache>;

        $r42 = $r39[i0];

        $r41 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.CharFormatter charFormatter>;

        $r40 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r43 = virtualinvoke $r42.<groovyjarjarantlr.Lookahead: java.lang.String toString(java.lang.String,groovyjarjarantlr.CharFormatter,groovyjarjarantlr.Grammar)>(",", $r41, $r40);

        $r44 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r45);

     label4:
        $r28 = $r4.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Lookahead[] cache>;

        $r29 = $r28[i0];

        $r30 = virtualinvoke $r29.<groovyjarjarantlr.Lookahead: java.lang.Object clone()>();

        $r31 = (groovyjarjarantlr.Lookahead) $r30;

        return $r31;

     label5:
        $r8 = $r4.<groovyjarjarantlr.RuleBlock: boolean[] lock>;

        $r8[i0] = 1;

        $r9 = virtualinvoke r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Lookahead look(int,groovyjarjarantlr.RuleBlock)>(i0, $r4);

        $r10 = $r4.<groovyjarjarantlr.RuleBlock: boolean[] lock>;

        $r10[i0] = 0;

        $r11 = $r4.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Lookahead[] cache>;

        $r12 = virtualinvoke $r9.<groovyjarjarantlr.Lookahead: java.lang.Object clone()>();

        $r13 = (groovyjarjarantlr.Lookahead) $r12;

        $r11[i0] = $r13;

        $z2 = r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER>;

        if $z2 == 0 goto label6;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("saving depth ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" result in FIRST ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" cache: ");

        $r21 = $r4.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.Lookahead[] cache>;

        $r24 = $r21[i0];

        $r23 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.CharFormatter charFormatter>;

        $r22 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $r25 = virtualinvoke $r24.<groovyjarjarantlr.Lookahead: java.lang.String toString(java.lang.String,groovyjarjarantlr.CharFormatter,groovyjarjarantlr.Grammar)>(",", $r23, $r22);

        $r26 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r27);

     label6:
        return $r9;
    }

    public static boolean lookaheadEquivForApproxAndFullAnalysis(groovyjarjarantlr.Lookahead[], int)
    {
        groovyjarjarantlr.Lookahead $r1;
        groovyjarjarantlr.Lookahead[] r0;
        int i0, $i1, $i2, i3;
        groovyjarjarantlr.collections.impl.BitSet r2;

        r0 := @parameter0: groovyjarjarantlr.Lookahead[];

        i0 := @parameter1: int;

        i3 = 1;

     label1:
        $i1 = i0 - 1;

        if i3 > $i1 goto label3;

        $r1 = r0[i3];

        r2 = $r1.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $i2 = virtualinvoke r2.<groovyjarjarantlr.collections.impl.BitSet: int degree()>();

        if $i2 <= 1 goto label2;

        return 0;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }

    private void removeCompetingPredictionSets(groovyjarjarantlr.collections.impl.BitSet, groovyjarjarantlr.AlternativeElement)
    {
        groovyjarjarantlr.AlternativeBlock $r1, $r2, $r6, $r14;
        groovyjarjarantlr.LLkAnalyzer r0;
        int $i0, i1, $i2;
        groovyjarjarantlr.TreeElement $r12;
        boolean $z0;
        groovyjarjarantlr.collections.impl.BitSet r9, $r11;
        groovyjarjarantlr.Alternative $r3, $r7;
        groovyjarjarantlr.GrammarAtom $r13;
        groovyjarjarantlr.Lookahead $r10;
        groovyjarjarantlr.AlternativeElement r4, r5, r8;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        r9 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        r5 := @parameter1: groovyjarjarantlr.AlternativeElement;

        $r2 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $r1 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $i0 = $r1.<groovyjarjarantlr.AlternativeBlock: int analysisAlt>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>($i0);

        r4 = $r3.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $z0 = r4 instanceof groovyjarjarantlr.TreeElement;

        if $z0 == 0 goto label1;

        $r12 = (groovyjarjarantlr.TreeElement) r4;

        $r13 = $r12.<groovyjarjarantlr.TreeElement: groovyjarjarantlr.GrammarAtom root>;

        if $r13 == r5 goto label2;

        return;

     label1:
        if r5 == r4 goto label2;

        return;

     label2:
        i1 = 0;

     label3:
        $r14 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $i2 = $r14.<groovyjarjarantlr.AlternativeBlock: int analysisAlt>;

        if i1 >= $i2 goto label4;

        $r6 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $r7 = virtualinvoke $r6.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i1);

        r8 = $r7.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $r10 = virtualinvoke r8.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>(1);

        $r11 = $r10.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        virtualinvoke r9.<groovyjarjarantlr.collections.impl.BitSet: void subtractInPlace(groovyjarjarantlr.collections.impl.BitSet)>($r11);

        i1 = i1 + 1;

        goto label3;

     label4:
        return;
    }

    private void removeCompetingPredictionSetsFromWildcard(groovyjarjarantlr.Lookahead[], groovyjarjarantlr.AlternativeElement, int)
    {
        groovyjarjarantlr.AlternativeBlock $r1, $r2;
        groovyjarjarantlr.Lookahead[] r5;
        groovyjarjarantlr.collections.impl.BitSet $r7, $r9;
        groovyjarjarantlr.Alternative $r3;
        groovyjarjarantlr.Lookahead $r6, $r8;
        int i0, $i1, i2, i3;
        groovyjarjarantlr.LLkAnalyzer r0;
        groovyjarjarantlr.AlternativeElement r4, r10;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        r5 := @parameter0: groovyjarjarantlr.Lookahead[];

        r10 := @parameter1: groovyjarjarantlr.AlternativeElement;

        i0 := @parameter2: int;

        i2 = 1;

     label1:
        if i2 > i0 goto label4;

        i3 = 0;

     label2:
        $r1 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $i1 = $r1.<groovyjarjarantlr.AlternativeBlock: int analysisAlt>;

        if i3 >= $i1 goto label3;

        $r2 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock>;

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i3);

        r4 = $r3.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $r6 = r5[i2];

        $r7 = $r6.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $r8 = virtualinvoke r4.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.Lookahead look(int)>(i2);

        $r9 = $r8.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        virtualinvoke $r7.<groovyjarjarantlr.collections.impl.BitSet: void subtractInPlace(groovyjarjarantlr.collections.impl.BitSet)>($r9);

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    private void reset()
    {
        groovyjarjarantlr.LLkAnalyzer r0;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar> = null;

        r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER> = 0;

        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.AlternativeBlock currentBlock> = null;

        r0.<groovyjarjarantlr.LLkAnalyzer: boolean lexicalAnalysis> = 0;

        return;
    }

    public void setGrammar(groovyjarjarantlr.Grammar)
    {
        groovyjarjarantlr.LLkAnalyzer r0;
        groovyjarjarantlr.Grammar $r1, r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: groovyjarjarantlr.LLkAnalyzer;

        r2 := @parameter0: groovyjarjarantlr.Grammar;

        $r1 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        if $r1 == null goto label1;

        specialinvoke r0.<groovyjarjarantlr.LLkAnalyzer: void reset()>();

     label1:
        r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar> = r2;

        $r3 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r3 instanceof groovyjarjarantlr.LexerGrammar;

        r0.<groovyjarjarantlr.LLkAnalyzer: boolean lexicalAnalysis> = $z0;

        $r4 = r0.<groovyjarjarantlr.LLkAnalyzer: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r4.<groovyjarjarantlr.Grammar: boolean analyzerDebug>;

        r0.<groovyjarjarantlr.LLkAnalyzer: boolean DEBUG_ANALYZER> = $z1;

        return;
    }

    public boolean subruleCanBeInverted(groovyjarjarantlr.AlternativeBlock, boolean)
    {
        groovyjarjarantlr.AlternativeBlock r0;
        groovyjarjarantlr.ExceptionSpec $r6;
        int $i0, $i1, $i2, i3;
        groovyjarjarantlr.LLkAnalyzer r8;
        java.lang.String $r5;
        groovyjarjarantlr.collections.impl.Vector $r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9;
        groovyjarjarantlr.Alternative $r3;
        groovyjarjarantlr.SynPredBlock $r4;
        groovyjarjarantlr.AlternativeElement r7, $r9;

        r8 := @this: groovyjarjarantlr.LLkAnalyzer;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        z8 := @parameter1: boolean;

        $z0 = r0 instanceof groovyjarjarantlr.ZeroOrMoreBlock;

        if $z0 != 0 goto label01;

        $z1 = r0 instanceof groovyjarjarantlr.OneOrMoreBlock;

        if $z1 != 0 goto label01;

        $z2 = r0 instanceof groovyjarjarantlr.SynPredBlock;

        if $z2 == 0 goto label02;

     label01:
        return 0;

     label02:
        $r1 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i0 = virtualinvoke $r1.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i0 != 0 goto label03;

        return 0;

     label03:
        i3 = 0;

     label04:
        $r2 = r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector alternatives>;

        $i1 = virtualinvoke $r2.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i3 >= $i1 goto label10;

        $r3 = virtualinvoke r0.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i3);

        $r4 = $r3.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred>;

        if $r4 != null goto label05;

        $r5 = $r3.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r5 != null goto label05;

        $r6 = $r3.<groovyjarjarantlr.Alternative: groovyjarjarantlr.ExceptionSpec exceptionSpec>;

        if $r6 == null goto label06;

     label05:
        return 0;

     label06:
        r7 = $r3.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        $z3 = r7 instanceof groovyjarjarantlr.CharLiteralElement;

        if $z3 != 0 goto label07;

        $z4 = r7 instanceof groovyjarjarantlr.TokenRefElement;

        if $z4 != 0 goto label07;

        $z5 = r7 instanceof groovyjarjarantlr.CharRangeElement;

        if $z5 != 0 goto label07;

        $z6 = r7 instanceof groovyjarjarantlr.TokenRangeElement;

        if $z6 != 0 goto label07;

        $z7 = r7 instanceof groovyjarjarantlr.StringLiteralElement;

        if $z7 == 0 goto label08;

        if z8 != 0 goto label08;

     label07:
        $r9 = r7.<groovyjarjarantlr.AlternativeElement: groovyjarjarantlr.AlternativeElement next>;

        $z9 = $r9 instanceof groovyjarjarantlr.BlockEndElement;

        if $z9 == 0 goto label08;

        $i2 = virtualinvoke r7.<groovyjarjarantlr.AlternativeElement: int getAutoGenType()>();

        if $i2 == 1 goto label09;

     label08:
        return 0;

     label09:
        i3 = i3 + 1;

        goto label04;

     label10:
        return 1;
    }
}
