public class org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem extends org.apache.batik.dom.svg.AbstractSVGTransform implements org.apache.batik.dom.svg.SVGItem
{
    protected boolean xOnly;
    protected boolean angleOnly;
    protected org.apache.batik.dom.svg.AbstractSVGList parent;
    protected java.lang.String itemStringValue;
    private final org.apache.batik.dom.svg.AbstractSVGTransformList this$0;

    protected void <init>(org.apache.batik.dom.svg.AbstractSVGTransformList)
    {
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;
        org.apache.batik.dom.svg.AbstractSVGTransformList r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        r1 := @parameter0: org.apache.batik.dom.svg.AbstractSVGTransformList;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransform: void <init>()>();

        r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: org.apache.batik.dom.svg.AbstractSVGTransformList this$0> = r1;

        return;
    }

    protected void <init>(org.apache.batik.dom.svg.AbstractSVGTransformList, org.w3c.dom.svg.SVGTransform)
    {
        org.w3c.dom.svg.SVGTransform r2;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;
        org.apache.batik.dom.svg.AbstractSVGTransformList r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        r1 := @parameter0: org.apache.batik.dom.svg.AbstractSVGTransformList;

        r2 := @parameter1: org.w3c.dom.svg.SVGTransform;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransform: void <init>()>();

        r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: org.apache.batik.dom.svg.AbstractSVGTransformList this$0> = r1;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void assign(org.w3c.dom.svg.SVGTransform)>(r2);

        return;
    }

    protected void resetAttribute()
    {
        org.apache.batik.dom.svg.AbstractSVGList $r1, $r2;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: org.apache.batik.dom.svg.AbstractSVGList parent>;

        if $r1 == null goto label1;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: java.lang.String itemStringValue> = null;

        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: org.apache.batik.dom.svg.AbstractSVGList parent>;

        virtualinvoke $r2.<org.apache.batik.dom.svg.AbstractSVGList: void itemChanged()>();

     label1:
        return;
    }

    public void setParent(org.apache.batik.dom.svg.AbstractSVGList)
    {
        org.apache.batik.dom.svg.AbstractSVGList r1;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        r1 := @parameter0: org.apache.batik.dom.svg.AbstractSVGList;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: org.apache.batik.dom.svg.AbstractSVGList parent> = r1;

        return;
    }

    public org.apache.batik.dom.svg.AbstractSVGList getParent()
    {
        org.apache.batik.dom.svg.AbstractSVGList $r1;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: org.apache.batik.dom.svg.AbstractSVGList parent>;

        return $r1;
    }

    public java.lang.String getValueAsString()
    {
        java.lang.String $r1, $r2, $r3;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        $r1 = r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: java.lang.String itemStringValue>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: java.lang.String getStringValue()>();

        r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: java.lang.String itemStringValue> = $r3;

     label1:
        $r2 = r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: java.lang.String itemStringValue>;

        return $r2;
    }

    public void assign(org.w3c.dom.svg.SVGTransform)
    {
        org.w3c.dom.svg.SVGTransform r1;
        short $s0, $s1;
        byte $b2, $b3;
        int $i4;
        boolean $z0;
        org.w3c.dom.svg.SVGMatrix $r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14;
        org.apache.batik.dom.svg.AbstractSVGTransform r3;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        r1 := @parameter0: org.w3c.dom.svg.SVGTransform;

        $s0 = interfaceinvoke r1.<org.w3c.dom.svg.SVGTransform: short getType()>();

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: short type> = $s0;

        $r2 = interfaceinvoke r1.<org.w3c.dom.svg.SVGTransform: org.w3c.dom.svg.SVGMatrix getMatrix()>();

        $s1 = r0.<org.apache.batik.dom.svg.AbstractSVGTransform: short type>;

        $i4 = (int) $s1;

        tableswitch($i4)
        {
            case 1: goto label8;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label3;
            case 5: goto label6;
            case 6: goto label7;
            default: goto label9;
        };

     label1:
        $f13 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        $f14 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGMatrix: float getF()>();

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void setTranslate(float,float)>($f13, $f14);

        goto label9;

     label2:
        $f11 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        $f12 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGMatrix: float getD()>();

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void setScale(float,float)>($f11, $f12);

        goto label9;

     label3:
        $f2 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        $b2 = $f2 cmpl 0.0F;

        if $b2 != 0 goto label4;

        $f10 = interfaceinvoke r1.<org.w3c.dom.svg.SVGTransform: float getAngle()>();

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void rotate(float)>($f10);

        goto label9;

     label4:
        r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: boolean angleOnly> = 0;

        $f3 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        $b3 = $f3 cmpl 1.0F;

        if $b3 != 0 goto label5;

        $f7 = interfaceinvoke r1.<org.w3c.dom.svg.SVGTransform: float getAngle()>();

        $f8 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        $f9 = interfaceinvoke $r2.<org.w3c.dom.svg.SVGMatrix: float getF()>();

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void setRotate(float,float,float)>($f7, $f8, $f9);

        goto label9;

     label5:
        $z0 = r1 instanceof org.apache.batik.dom.svg.AbstractSVGTransform;

        if $z0 == 0 goto label9;

        r3 = (org.apache.batik.dom.svg.AbstractSVGTransform) r1;

        $f4 = virtualinvoke r3.<org.apache.batik.dom.svg.AbstractSVGTransform: float getAngle()>();

        $f5 = virtualinvoke r3.<org.apache.batik.dom.svg.AbstractSVGTransform: float getX()>();

        $f6 = virtualinvoke r3.<org.apache.batik.dom.svg.AbstractSVGTransform: float getY()>();

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void setRotate(float,float,float)>($f4, $f5, $f6);

        goto label9;

     label6:
        $f1 = interfaceinvoke r1.<org.w3c.dom.svg.SVGTransform: float getAngle()>();

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void setSkewX(float)>($f1);

        goto label9;

     label7:
        $f0 = interfaceinvoke r1.<org.w3c.dom.svg.SVGTransform: float getAngle()>();

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void setSkewY(float)>($f0);

        goto label9;

     label8:
        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void setMatrix(org.w3c.dom.svg.SVGMatrix)>($r2);

     label9:
        return;
    }

    protected void translate(float)
    {
        float f0;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        f0 := @parameter0: float;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: boolean xOnly> = 1;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void setTranslate(float,float)>(f0, 0.0F);

        return;
    }

    protected void rotate(float)
    {
        float f0;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        f0 := @parameter0: float;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: boolean angleOnly> = 1;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void setRotate(float,float,float)>(f0, 0.0F, 0.0F);

        return;
    }

    protected void scale(float)
    {
        float f0;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        f0 := @parameter0: float;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: boolean xOnly> = 1;

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void setScale(float,float)>(f0, f0);

        return;
    }

    protected void matrix(float, float, float, float, float, float)
    {
        java.awt.geom.AffineTransform $r2;
        org.apache.batik.dom.svg.SVGOMMatrix $r1;
        float f0, f1, f2, f3, f4, f5;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        f3 := @parameter3: float;

        f4 := @parameter4: float;

        f5 := @parameter5: float;

        $r1 = new org.apache.batik.dom.svg.SVGOMMatrix;

        $r2 = new java.awt.geom.AffineTransform;

        specialinvoke $r2.<java.awt.geom.AffineTransform: void <init>(float,float,float,float,float,float)>(f0, f1, f2, f3, f4, f5);

        specialinvoke $r1.<org.apache.batik.dom.svg.SVGOMMatrix: void <init>(java.awt.geom.AffineTransform)>($r2);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void setMatrix(org.w3c.dom.svg.SVGMatrix)>($r1);

        return;
    }

    public void setMatrix(org.w3c.dom.svg.SVGMatrix)
    {
        org.w3c.dom.svg.SVGMatrix r1;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        r1 := @parameter0: org.w3c.dom.svg.SVGMatrix;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransform: void setMatrix(org.w3c.dom.svg.SVGMatrix)>(r1);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void resetAttribute()>();

        return;
    }

    public void setTranslate(float, float)
    {
        float f0, f1;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransform: void setTranslate(float,float)>(f0, f1);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void resetAttribute()>();

        return;
    }

    public void setScale(float, float)
    {
        float f0, f1;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransform: void setScale(float,float)>(f0, f1);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void resetAttribute()>();

        return;
    }

    public void setRotate(float, float, float)
    {
        float f0, f1, f2;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransform: void setRotate(float,float,float)>(f0, f1, f2);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void resetAttribute()>();

        return;
    }

    public void setSkewX(float)
    {
        float f0;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        f0 := @parameter0: float;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransform: void setSkewX(float)>(f0);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void resetAttribute()>();

        return;
    }

    public void setSkewY(float)
    {
        float f0;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        f0 := @parameter0: float;

        specialinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransform: void setSkewY(float)>(f0);

        virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: void resetAttribute()>();

        return;
    }

    protected org.w3c.dom.svg.SVGMatrix createMatrix()
    {
        org.apache.batik.dom.svg.AbstractSVGTransformList$1 $r0;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r1;

        r1 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        $r0 = new org.apache.batik.dom.svg.AbstractSVGTransformList$1;

        specialinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGTransformList$1: void <init>(org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem)>(r1);

        return $r0;
    }

    protected java.lang.String getStringValue()
    {
        double[] r6;
        short $s0;
        java.lang.StringBuffer $r9;
        int i1, $i2;
        java.lang.String $r8;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3, $d4;
        java.awt.geom.AffineTransform $r2, $r3, $r4, $r5, $r7;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9;
        org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem r1;

        r1 := @this: org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $s0 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: short type>;

        $i2 = (int) $s0;

        tableswitch($i2)
        {
            case 1: goto label09;
            case 2: goto label01;
            case 3: goto label05;
            case 4: goto label03;
            case 5: goto label07;
            case 6: goto label08;
            default: goto label13;
        };

     label01:
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("translate(");

        $r4 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform>;

        $d2 = virtualinvoke $r4.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $f7 = (float) $d2;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f7);

        $z2 = r1.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: boolean xOnly>;

        if $z2 != 0 goto label02;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r5 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform>;

        $d3 = virtualinvoke $r5.<java.awt.geom.AffineTransform: double getTranslateY()>();

        $f8 = (float) $d3;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f8);

     label02:
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        goto label13;

     label03:
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("rotate(");

        $f2 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: float angle>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f2);

        $z0 = r1.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: boolean angleOnly>;

        if $z0 != 0 goto label04;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $f3 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: float x>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f3);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $f4 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: float y>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f4);

     label04:
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        goto label13;

     label05:
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("scale(");

        $r2 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform>;

        $d0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleX()>();

        $f5 = (float) $d0;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f5);

        $z1 = r1.<org.apache.batik.dom.svg.AbstractSVGTransformList$SVGTransformItem: boolean xOnly>;

        if $z1 != 0 goto label06;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r3 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform>;

        $d1 = virtualinvoke $r3.<java.awt.geom.AffineTransform: double getScaleY()>();

        $f6 = (float) $d1;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f6);

     label06:
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        goto label13;

     label07:
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("skewX(");

        $f1 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: float angle>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f1);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        goto label13;

     label08:
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("skewY(");

        $f0 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: float angle>;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f0);

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

        goto label13;

     label09:
        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("matrix(");

        r6 = newarray (double)[6];

        $r7 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform>;

        virtualinvoke $r7.<java.awt.geom.AffineTransform: void getMatrix(double[])>(r6);

        i1 = 0;

        goto label12;

     label10:
        if i1 == 0 goto label11;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

     label11:
        $d4 = r6[i1];

        $f9 = (float) $d4;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f9);

        i1 = i1 + 1;

     label12:
        if i1 < 6 goto label10;

        virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

     label13:
        $r8 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r8;
    }
}
