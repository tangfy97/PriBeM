public class org.xmpp.packet.StreamError extends java.lang.Object
{
    private static final java.lang.String ERROR_NAMESPACE;
    private static org.dom4j.DocumentFactory docFactory;
    private org.dom4j.Element element;

    public void <init>(org.xmpp.packet.StreamError$Condition)
    {
        org.xmpp.packet.StreamError r0;
        org.dom4j.QName $r3;
        org.dom4j.Element $r4;
        org.xmpp.packet.StreamError$Condition r5;
        org.dom4j.DocumentFactory $r1, $r2;

        r0 := @this: org.xmpp.packet.StreamError;

        r5 := @parameter0: org.xmpp.packet.StreamError$Condition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.xmpp.packet.StreamError: org.dom4j.DocumentFactory docFactory>;

        $r1 = <org.xmpp.packet.StreamError: org.dom4j.DocumentFactory docFactory>;

        $r3 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String,java.lang.String)>("error", "stream", "http://etherx.jabber.org/streams");

        $r4 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>($r3);

        r0.<org.xmpp.packet.StreamError: org.dom4j.Element element> = $r4;

        virtualinvoke r0.<org.xmpp.packet.StreamError: void setCondition(org.xmpp.packet.StreamError$Condition)>(r5);

        return;
    }

    public void <init>(org.xmpp.packet.StreamError$Condition, java.lang.String)
    {
        org.xmpp.packet.StreamError r0;
        org.dom4j.QName $r3;
        org.dom4j.Element $r4;
        java.lang.String r6;
        org.xmpp.packet.StreamError$Condition r5;
        org.dom4j.DocumentFactory $r1, $r2;

        r0 := @this: org.xmpp.packet.StreamError;

        r5 := @parameter0: org.xmpp.packet.StreamError$Condition;

        r6 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.xmpp.packet.StreamError: org.dom4j.DocumentFactory docFactory>;

        $r1 = <org.xmpp.packet.StreamError: org.dom4j.DocumentFactory docFactory>;

        $r3 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String,java.lang.String)>("error", "stream", "http://etherx.jabber.org/streams");

        $r4 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>($r3);

        r0.<org.xmpp.packet.StreamError: org.dom4j.Element element> = $r4;

        virtualinvoke r0.<org.xmpp.packet.StreamError: void setCondition(org.xmpp.packet.StreamError$Condition)>(r5);

        virtualinvoke r0.<org.xmpp.packet.StreamError: void setText(java.lang.String,java.lang.String)>(r6, null);

        return;
    }

    public void <init>(org.xmpp.packet.StreamError$Condition, java.lang.String, java.lang.String)
    {
        org.xmpp.packet.StreamError$Condition r5;
        org.dom4j.DocumentFactory $r1, $r2;
        org.xmpp.packet.StreamError r0;
        org.dom4j.QName $r3;
        org.dom4j.Element $r4;
        java.lang.String r6, r7;

        r0 := @this: org.xmpp.packet.StreamError;

        r5 := @parameter0: org.xmpp.packet.StreamError$Condition;

        r6 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <org.xmpp.packet.StreamError: org.dom4j.DocumentFactory docFactory>;

        $r1 = <org.xmpp.packet.StreamError: org.dom4j.DocumentFactory docFactory>;

        $r3 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.QName createQName(java.lang.String,java.lang.String,java.lang.String)>("error", "stream", "http://etherx.jabber.org/streams");

        $r4 = virtualinvoke $r2.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(org.dom4j.QName)>($r3);

        r0.<org.xmpp.packet.StreamError: org.dom4j.Element element> = $r4;

        virtualinvoke r0.<org.xmpp.packet.StreamError: void setCondition(org.xmpp.packet.StreamError$Condition)>(r5);

        virtualinvoke r0.<org.xmpp.packet.StreamError: void setText(java.lang.String,java.lang.String)>(r6, r7);

        return;
    }

    public void <init>(org.dom4j.Element)
    {
        org.xmpp.packet.StreamError r0;
        org.dom4j.Element r1;

        r0 := @this: org.xmpp.packet.StreamError;

        r1 := @parameter0: org.dom4j.Element;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.xmpp.packet.StreamError: org.dom4j.Element element> = r1;

        return;
    }

    public org.xmpp.packet.StreamError$Condition getCondition()
    {
        java.util.Iterator $r2;
        org.xmpp.packet.StreamError$Condition $r8;
        org.xmpp.packet.StreamError r0;
        org.dom4j.Element $r1, r4;
        java.lang.Object $r3;
        java.lang.String $r5, $r6, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: org.xmpp.packet.StreamError;

        $r1 = r0.<org.xmpp.packet.StreamError: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.util.Iterator elementIterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.dom4j.Element) $r3;

        $r5 = interfaceinvoke r4.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("urn:ietf:params:xml:ns:xmpp-streams");

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke r4.<org.dom4j.Element: java.lang.String getName()>();

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("text");

        if $z2 != 0 goto label2;

        $r7 = interfaceinvoke r4.<org.dom4j.Element: java.lang.String getName()>();

        $r8 = staticinvoke <org.xmpp.packet.StreamError$Condition: org.xmpp.packet.StreamError$Condition fromXMPP(java.lang.String)>($r7);

        return $r8;

     label2:
        goto label1;

     label3:
        return null;
    }

    public void setCondition(org.xmpp.packet.StreamError$Condition)
    {
        java.lang.NullPointerException $r13;
        org.dom4j.DocumentFactory $r4;
        java.lang.String $r5, $r11, $r12;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3;
        org.xmpp.packet.StreamError$Condition r0;
        org.xmpp.packet.StreamError r1;
        org.dom4j.Element $r2, $r6, $r7, $r8, r10, r14;
        java.lang.Object $r9;

        r1 := @this: org.xmpp.packet.StreamError;

        r0 := @parameter0: org.xmpp.packet.StreamError$Condition;

        if r0 != null goto label1;

        $r13 = new java.lang.NullPointerException;

        specialinvoke $r13.<java.lang.NullPointerException: void <init>(java.lang.String)>("Condition cannot be null");

        throw $r13;

     label1:
        r14 = null;

        $r2 = r1.<org.xmpp.packet.StreamError: org.dom4j.Element element>;

        $r3 = interfaceinvoke $r2.<org.dom4j.Element: java.util.Iterator elementIterator()>();

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.dom4j.Element) $r9;

        $r11 = interfaceinvoke r10.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("urn:ietf:params:xml:ns:xmpp-streams");

        if $z1 == 0 goto label3;

        $r12 = interfaceinvoke r10.<org.dom4j.Element: java.lang.String getName()>();

        $z2 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("text");

        if $z2 != 0 goto label3;

        r14 = r10;

     label3:
        goto label2;

     label4:
        if r14 == null goto label5;

        $r8 = r1.<org.xmpp.packet.StreamError: org.dom4j.Element element>;

        interfaceinvoke $r8.<org.dom4j.Element: boolean remove(org.dom4j.Element)>(r14);

     label5:
        $r4 = <org.xmpp.packet.StreamError: org.dom4j.DocumentFactory docFactory>;

        $r5 = virtualinvoke r0.<org.xmpp.packet.StreamError$Condition: java.lang.String toXMPP()>();

        $r6 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(java.lang.String,java.lang.String)>($r5, "urn:ietf:params:xml:ns:xmpp-streams");

        $r7 = r1.<org.xmpp.packet.StreamError: org.dom4j.Element element>;

        interfaceinvoke $r7.<org.dom4j.Element: void add(org.dom4j.Element)>($r6);

        return;
    }

    public java.lang.String getText()
    {
        org.xmpp.packet.StreamError r0;
        org.dom4j.Element $r1;
        java.lang.String $r2;

        r0 := @this: org.xmpp.packet.StreamError;

        $r1 = r0.<org.xmpp.packet.StreamError: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String elementText(java.lang.String)>("text");

        return $r2;
    }

    public void setText(java.lang.String)
    {
        org.xmpp.packet.StreamError r0;
        java.lang.String r1;

        r0 := @this: org.xmpp.packet.StreamError;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.xmpp.packet.StreamError: void setText(java.lang.String,java.lang.String)>(r1, null);

        return;
    }

    public void setText(java.lang.String, java.lang.String)
    {
        org.dom4j.DocumentFactory $r4;
        org.xmpp.packet.StreamError r0;
        org.dom4j.Element $r1, $r2, $r5, $r7, $r9, r10;
        org.dom4j.QName $r8;
        java.lang.String r3, r6;

        r0 := @this: org.xmpp.packet.StreamError;

        r3 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r1 = r0.<org.xmpp.packet.StreamError: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("text");

        r10 = $r2;

        if r3 != null goto label2;

        if $r2 == null goto label1;

        $r9 = r0.<org.xmpp.packet.StreamError: org.dom4j.Element element>;

        interfaceinvoke $r9.<org.dom4j.Element: boolean remove(org.dom4j.Element)>($r2);

     label1:
        return;

     label2:
        if $r2 != null goto label4;

        $r4 = <org.xmpp.packet.StreamError: org.dom4j.DocumentFactory docFactory>;

        $r5 = virtualinvoke $r4.<org.dom4j.DocumentFactory: org.dom4j.Element createElement(java.lang.String,java.lang.String)>("text", "urn:ietf:params:xml:ns:xmpp-streams");

        r10 = $r5;

        if r6 == null goto label3;

        $r8 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,java.lang.String,java.lang.String)>("lang", "xml", "http://www.w3.org/XML/1998/namespace");

        interfaceinvoke $r5.<org.dom4j.Element: org.dom4j.Element addAttribute(org.dom4j.QName,java.lang.String)>($r8, r6);

     label3:
        $r7 = r0.<org.xmpp.packet.StreamError: org.dom4j.Element element>;

        interfaceinvoke $r7.<org.dom4j.Element: void add(org.dom4j.Element)>($r5);

     label4:
        interfaceinvoke r10.<org.dom4j.Element: void setText(java.lang.String)>(r3);

        return;
    }

    public java.lang.String getTextLanguage()
    {
        org.xmpp.packet.StreamError r0;
        org.dom4j.Element $r1, $r2;
        org.dom4j.QName $r3;
        java.lang.String $r4;

        r0 := @this: org.xmpp.packet.StreamError;

        $r1 = r0.<org.xmpp.packet.StreamError: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element element(java.lang.String)>("text");

        if $r2 == null goto label1;

        $r3 = staticinvoke <org.dom4j.QName: org.dom4j.QName get(java.lang.String,java.lang.String,java.lang.String)>("lang", "xml", "http://www.w3.org/XML/1998/namespace");

        $r4 = interfaceinvoke $r2.<org.dom4j.Element: java.lang.String attributeValue(org.dom4j.QName)>($r3);

        return $r4;

     label1:
        return null;
    }

    public org.dom4j.Element getElement()
    {
        org.xmpp.packet.StreamError r0;
        org.dom4j.Element $r1;

        r0 := @this: org.xmpp.packet.StreamError;

        $r1 = r0.<org.xmpp.packet.StreamError: org.dom4j.Element element>;

        return $r1;
    }

    public java.lang.String toXML()
    {
        org.xmpp.packet.StreamError r0;
        org.dom4j.Element $r1;
        java.lang.String $r2;

        r0 := @this: org.xmpp.packet.StreamError;

        $r1 = r0.<org.xmpp.packet.StreamError: org.dom4j.Element element>;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String asXML()>();

        return $r2;
    }

    public java.lang.String toString()
    {
        org.xmpp.packet.StreamError r3;
        java.io.StringWriter $r0;
        org.dom4j.io.XMLWriter $r1;
        org.dom4j.io.OutputFormat $r2;
        org.dom4j.Element $r4;
        java.lang.String $r5;
        java.lang.Exception $r6;

        r3 := @this: org.xmpp.packet.StreamError;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

        $r1 = new org.dom4j.io.XMLWriter;

        $r2 = staticinvoke <org.dom4j.io.OutputFormat: org.dom4j.io.OutputFormat createPrettyPrint()>();

        specialinvoke $r1.<org.dom4j.io.XMLWriter: void <init>(java.io.Writer,org.dom4j.io.OutputFormat)>($r0, $r2);

     label1:
        $r4 = r3.<org.xmpp.packet.StreamError: org.dom4j.Element element>;

        virtualinvoke $r1.<org.dom4j.io.XMLWriter: void write(org.dom4j.Element)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        $r5 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r5;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.dom4j.DocumentFactory $r0;

        <org.xmpp.packet.StreamError: java.lang.String ERROR_NAMESPACE> = "urn:ietf:params:xml:ns:xmpp-streams";

        $r0 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        <org.xmpp.packet.StreamError: org.dom4j.DocumentFactory docFactory> = $r0;

        return;
    }
}
