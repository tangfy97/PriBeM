public class org.apache.xalan.templates.ElemExtensionDecl extends org.apache.xalan.templates.ElemTemplateElement
{
    private java.lang.String m_prefix;
    private org.apache.xml.utils.StringVector m_functions;
    private org.apache.xml.utils.StringVector m_elements;

    public void <init>()
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xml.utils.StringVector $r1;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void <init>()>();

        r0.<org.apache.xalan.templates.ElemExtensionDecl: java.lang.String m_prefix> = null;

        $r1 = new org.apache.xml.utils.StringVector;

        specialinvoke $r1.<org.apache.xml.utils.StringVector: void <init>()>();

        r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions> = $r1;

        r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements> = null;

        return;
    }

    public void setPrefix(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xalan.templates.ElemExtensionDecl r0;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xalan.templates.ElemExtensionDecl: java.lang.String m_prefix> = r1;

        return;
    }

    public java.lang.String getPrefix()
    {
        java.lang.String $r1;
        org.apache.xalan.templates.ElemExtensionDecl r0;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        $r1 = r0.<org.apache.xalan.templates.ElemExtensionDecl: java.lang.String m_prefix>;

        return $r1;
    }

    public void setFunctions(org.apache.xml.utils.StringVector)
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xml.utils.StringVector r1;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        r1 := @parameter0: org.apache.xml.utils.StringVector;

        r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions> = r1;

        return;
    }

    public org.apache.xml.utils.StringVector getFunctions()
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xml.utils.StringVector $r1;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        $r1 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions>;

        return $r1;
    }

    public java.lang.String getFunction(int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        int i0;
        java.lang.String $r3;
        java.lang.ArrayIndexOutOfBoundsException $r4;
        org.apache.xml.utils.StringVector $r1, $r2;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions>;

        if null != $r1 goto label1;

        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions>;

        $r3 = virtualinvoke $r2.<org.apache.xml.utils.StringVector: java.lang.String elementAt(int)>(i0);

        return $r3;
    }

    public int getFunctionCount()
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        int $i0;
        org.apache.xml.utils.StringVector $r1, $r2;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        $r1 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions>;

        $i0 = virtualinvoke $r2.<org.apache.xml.utils.StringVector: int size()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public void setElements(org.apache.xml.utils.StringVector)
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xml.utils.StringVector r1;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        r1 := @parameter0: org.apache.xml.utils.StringVector;

        r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements> = r1;

        return;
    }

    public org.apache.xml.utils.StringVector getElements()
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xml.utils.StringVector $r1;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        $r1 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements>;

        return $r1;
    }

    public java.lang.String getElement(int) throws java.lang.ArrayIndexOutOfBoundsException
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        int i0;
        java.lang.String $r3;
        java.lang.ArrayIndexOutOfBoundsException $r4;
        org.apache.xml.utils.StringVector $r1, $r2;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements>;

        if null != $r1 goto label1;

        $r4 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements>;

        $r3 = virtualinvoke $r2.<org.apache.xml.utils.StringVector: java.lang.String elementAt(int)>(i0);

        return $r3;
    }

    public int getElementCount()
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        int $i0;
        org.apache.xml.utils.StringVector $r1, $r2;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        $r1 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements>;

        $i0 = virtualinvoke $r2.<org.apache.xml.utils.StringVector: int size()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public int getXSLToken()
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        return 85;
    }

    public void compose(org.apache.xalan.templates.StylesheetRoot) throws javax.xml.transform.TransformerException
    {
        java.util.Vector $r9, $r15;
        org.apache.xml.utils.StringVector $r11, $r12;
        boolean $z0, $z1;
        org.apache.xalan.templates.ElemTemplateElement $r4, r25;
        org.apache.xalan.templates.ElemExtensionDecl r0;
        java.lang.Object[] $r10, $r17, $r20;
        org.apache.xalan.extensions.ExtensionNamespaceSupport r28, $r32;
        javax.xml.transform.TransformerException $r29, $r31;
        org.apache.xalan.extensions.ExtensionNamespacesManager $r8;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8;
        java.lang.String $r2, $r3, $r7, $r13, $r18, $r21, r22, r23, r24, $r30;
        org.apache.xalan.templates.ElemTextLiteral r27;
        org.apache.xalan.templates.StylesheetRoot r1;
        org.apache.xalan.templates.ElemExtensionScript r26;
        char[] $r5;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        specialinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: void compose(org.apache.xalan.templates.StylesheetRoot)>(r1);

        $r2 = virtualinvoke r0.<org.apache.xalan.templates.ElemExtensionDecl: java.lang.String getPrefix()>();

        $r3 = virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: java.lang.String getNamespaceForPrefix(java.lang.String)>($r2);

        r22 = null;

        r23 = null;

        r24 = null;

        if null != $r3 goto label01;

        $r29 = new javax.xml.transform.TransformerException;

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = $r2;

        $r21 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_NO_NAMESPACE_DECL", $r20);

        specialinvoke $r29.<javax.xml.transform.TransformerException: void <init>(java.lang.String)>($r21);

        throw $r29;

     label01:
        r25 = virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getFirstChildElem()>();

        goto label04;

     label02:
        $i0 = virtualinvoke r25.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        if 86 != $i0 goto label03;

        r26 = (org.apache.xalan.templates.ElemExtensionScript) r25;

        r22 = virtualinvoke r26.<org.apache.xalan.templates.ElemExtensionScript: java.lang.String getLang()>();

        r23 = virtualinvoke r26.<org.apache.xalan.templates.ElemExtensionScript: java.lang.String getSrc()>();

        $r4 = virtualinvoke r26.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getFirstChildElem()>();

        if null == $r4 goto label03;

        $i1 = virtualinvoke $r4.<org.apache.xalan.templates.ElemTemplateElement: int getXSLToken()>();

        if 78 != $i1 goto label03;

        r27 = (org.apache.xalan.templates.ElemTextLiteral) $r4;

        $r5 = virtualinvoke r27.<org.apache.xalan.templates.ElemTextLiteral: char[] getChars()>();

        $r30 = new java.lang.String;

        specialinvoke $r30.<java.lang.String: void <init>(char[])>($r5);

        r24 = $r30;

        $r7 = virtualinvoke $r30.<java.lang.String: java.lang.String trim()>();

        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i2 != 0 goto label03;

        r24 = null;

     label03:
        r25 = virtualinvoke r25.<org.apache.xalan.templates.ElemTemplateElement: org.apache.xalan.templates.ElemTemplateElement getNextSiblingElem()>();

     label04:
        if r25 != null goto label02;

        if null != r22 goto label05;

        r22 = "javaclass";

     label05:
        $z0 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>("javaclass");

        if $z0 == 0 goto label06;

        if r24 == null goto label06;

        $r31 = new javax.xml.transform.TransformerException;

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r24;

        $r18 = staticinvoke <org.apache.xalan.res.XSLMessages: java.lang.String createMessage(java.lang.String,java.lang.Object[])>("ER_ELEM_CONTENT_NOT_ALLOWED", $r17);

        specialinvoke $r31.<javax.xml.transform.TransformerException: void <init>(java.lang.String)>($r18);

        throw $r31;

     label06:
        r28 = null;

        $r8 = virtualinvoke r1.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager getExtensionNamespacesManager()>();

        $r9 = virtualinvoke $r8.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector getExtensions()>();

        $i3 = virtualinvoke $r8.<org.apache.xalan.extensions.ExtensionNamespacesManager: int namespaceIndex(java.lang.String,java.util.Vector)>($r3, $r9);

        $i6 = (int) -1;

        if $i3 != $i6 goto label09;

        $z1 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>("javaclass");

        if $z1 == 0 goto label08;

        if null != r23 goto label07;

        r28 = virtualinvoke $r8.<org.apache.xalan.extensions.ExtensionNamespacesManager: org.apache.xalan.extensions.ExtensionNamespaceSupport defineJavaNamespace(java.lang.String)>($r3);

        goto label09;

     label07:
        $r15 = virtualinvoke $r8.<org.apache.xalan.extensions.ExtensionNamespacesManager: java.util.Vector getExtensions()>();

        $i4 = virtualinvoke $r8.<org.apache.xalan.extensions.ExtensionNamespacesManager: int namespaceIndex(java.lang.String,java.util.Vector)>(r23, $r15);

        $i8 = (int) -1;

        if $i4 != $i8 goto label09;

        r28 = virtualinvoke $r8.<org.apache.xalan.extensions.ExtensionNamespacesManager: org.apache.xalan.extensions.ExtensionNamespaceSupport defineJavaNamespace(java.lang.String,java.lang.String)>($r3, r23);

        goto label09;

     label08:
        $r10 = newarray (java.lang.Object)[7];

        $r10[0] = $r3;

        $r11 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_elements>;

        $r10[1] = $r11;

        $r12 = r0.<org.apache.xalan.templates.ElemExtensionDecl: org.apache.xml.utils.StringVector m_functions>;

        $r10[2] = $r12;

        $r10[3] = r22;

        $r10[4] = r23;

        $r10[5] = r24;

        $r13 = virtualinvoke r0.<org.apache.xalan.templates.ElemTemplateElement: java.lang.String getSystemId()>();

        $r10[6] = $r13;

        $r32 = new org.apache.xalan.extensions.ExtensionNamespaceSupport;

        specialinvoke $r32.<org.apache.xalan.extensions.ExtensionNamespaceSupport: void <init>(java.lang.String,java.lang.String,java.lang.Object[])>($r3, "org.apache.xalan.extensions.ExtensionHandlerGeneral", $r10);

        r28 = $r32;

     label09:
        if r28 == null goto label10;

        virtualinvoke $r8.<org.apache.xalan.extensions.ExtensionNamespacesManager: void registerExtension(org.apache.xalan.extensions.ExtensionNamespaceSupport)>(r28);

     label10:
        return;
    }

    public void runtimeInit(org.apache.xalan.transformer.TransformerImpl) throws javax.xml.transform.TransformerException
    {
        org.apache.xalan.templates.ElemExtensionDecl r0;
        org.apache.xalan.transformer.TransformerImpl r1;

        r0 := @this: org.apache.xalan.templates.ElemExtensionDecl;

        r1 := @parameter0: org.apache.xalan.transformer.TransformerImpl;

        return;
    }
}
