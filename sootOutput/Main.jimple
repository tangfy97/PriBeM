public class Main extends java.lang.Object
{

    public void <init>()
    {
        Main r0;

        r0 := @this: Main;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static FormulaStruct formula0()
    {
        kodkod.ast.Formula $r6;
        FormulaStruct $r13;
        kodkod.ast.Expression $r4, $r5;
        java.util.HashSet $r2;
        kodkod.instance.Bounds $r7;
        kodkod.instance.Universe $r3;
        kodkod.ast.Relation $r0, $r1;
        kodkod.instance.TupleFactory $r8;
        kodkod.instance.TupleSet $r9, $r10, $r11, $r12;

        $r0 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>("R1");

        $r1 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>("R2");

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("element0");

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>("element1");

        $r3 = new kodkod.instance.Universe;

        specialinvoke $r3.<kodkod.instance.Universe: void <init>(java.util.Collection)>($r2);

        $r4 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r5 = virtualinvoke $r0.<kodkod.ast.Relation: kodkod.ast.Expression union(kodkod.ast.Expression)>($r1);

        $r6 = virtualinvoke $r4.<kodkod.ast.Expression: kodkod.ast.Formula in(kodkod.ast.Expression)>($r5);

        $r7 = new kodkod.instance.Bounds;

        specialinvoke $r7.<kodkod.instance.Bounds: void <init>(kodkod.instance.Universe)>($r3);

        $r8 = virtualinvoke $r3.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $r9 = virtualinvoke $r8.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(1);

        $r10 = virtualinvoke $r8.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet allOf(int)>(1);

        virtualinvoke $r7.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r0, $r9, $r10);

        $r11 = virtualinvoke $r8.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(1);

        $r12 = virtualinvoke $r8.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet allOf(int)>(1);

        virtualinvoke $r7.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r1, $r11, $r12);

        $r13 = new FormulaStruct;

        specialinvoke $r13.<FormulaStruct: void <init>(kodkod.ast.Formula,kodkod.instance.Bounds)>($r6, $r7);

        return $r13;
    }

    private static FormulaStruct formula1()
    {
        FormulaStruct $r22;
        java.util.HashSet $r4;
        kodkod.instance.Bounds $r14;
        kodkod.instance.Universe $r5;
        kodkod.instance.TupleFactory $r15;
        kodkod.instance.TupleSet $r16, $r17, $r18, $r19, $r20, $r21;
        kodkod.ast.Formula $r6, $r7, $r8, $r9, $r10, $r13;
        kodkod.ast.Expression $r11;
        kodkod.ast.Decl $r12;
        kodkod.ast.Variable $r0;
        kodkod.ast.Relation $r1, $r2, $r3;

        $r0 = staticinvoke <kodkod.ast.Variable: kodkod.ast.Variable unary(java.lang.String)>("x");

        $r1 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>("R1");

        $r2 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>("R2");

        $r3 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>("R3");

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>("element0");

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>("element1");

        $r5 = new kodkod.instance.Universe;

        specialinvoke $r5.<kodkod.instance.Universe: void <init>(java.util.Collection)>($r4);

        $r6 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Formula in(kodkod.ast.Expression)>($r1);

        $r7 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Formula in(kodkod.ast.Expression)>($r2);

        $r8 = virtualinvoke $r6.<kodkod.ast.Formula: kodkod.ast.Formula or(kodkod.ast.Formula)>($r7);

        $r9 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Formula in(kodkod.ast.Expression)>($r3);

        $r10 = virtualinvoke $r8.<kodkod.ast.Formula: kodkod.ast.Formula and(kodkod.ast.Formula)>($r9);

        $r11 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r12 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r11);

        $r13 = virtualinvoke $r10.<kodkod.ast.Formula: kodkod.ast.Formula forSome(kodkod.ast.Decls)>($r12);

        $r14 = new kodkod.instance.Bounds;

        specialinvoke $r14.<kodkod.instance.Bounds: void <init>(kodkod.instance.Universe)>($r5);

        $r15 = virtualinvoke $r5.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $r16 = virtualinvoke $r15.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(1);

        $r17 = virtualinvoke $r15.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet allOf(int)>(1);

        virtualinvoke $r14.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r1, $r16, $r17);

        $r18 = virtualinvoke $r15.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(1);

        $r19 = virtualinvoke $r15.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet allOf(int)>(1);

        virtualinvoke $r14.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r2, $r18, $r19);

        $r20 = virtualinvoke $r15.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(1);

        $r21 = virtualinvoke $r15.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet allOf(int)>(1);

        virtualinvoke $r14.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r3, $r20, $r21);

        $r22 = new FormulaStruct;

        specialinvoke $r22.<FormulaStruct: void <init>(kodkod.ast.Formula,kodkod.instance.Bounds)>($r13, $r14);

        return $r22;
    }

    private static FormulaStruct formula2(int)
    {
        FormulaStruct $r23;
        java.util.HashSet $r4;
        kodkod.instance.Bounds $r7;
        int i0, i1;
        kodkod.instance.Universe $r5;
        java.lang.String $r10;
        kodkod.instance.TupleFactory $r6;
        kodkod.instance.TupleSet $r12, $r13;
        kodkod.ast.Formula $r14, $r15, $r16, $r19, $r22, r24;
        kodkod.ast.Expression $r2, $r3, $r17, $r20;
        kodkod.ast.Decl $r18, $r21;
        kodkod.ast.Variable $r0, $r1;
        java.lang.StringBuilder $r8, $r9;
        kodkod.ast.Relation $r11;

        i0 := @parameter0: int;

        $r0 = staticinvoke <kodkod.ast.Variable: kodkod.ast.Variable unary(java.lang.String)>("x");

        $r1 = staticinvoke <kodkod.ast.Variable: kodkod.ast.Variable unary(java.lang.String)>("y");

        $r2 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Expression product(kodkod.ast.Expression)>($r1);

        $r3 = virtualinvoke $r1.<kodkod.ast.Variable: kodkod.ast.Expression product(kodkod.ast.Expression)>($r0);

        r24 = null;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>("element0");

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>("element1");

        $r5 = new kodkod.instance.Universe;

        specialinvoke $r5.<kodkod.instance.Universe: void <init>(java.util.Collection)>($r4);

        $r6 = virtualinvoke $r5.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $r7 = new kodkod.instance.Bounds;

        specialinvoke $r7.<kodkod.instance.Bounds: void <init>(kodkod.instance.Universe)>($r5);

        i1 = 0;

        goto label4;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("R");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation binary(java.lang.String)>($r10);

        $r12 = virtualinvoke $r6.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(2);

        $r13 = virtualinvoke $r6.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet allOf(int)>(2);

        virtualinvoke $r7.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r11, $r12, $r13);

        $r14 = virtualinvoke $r2.<kodkod.ast.Expression: kodkod.ast.Formula in(kodkod.ast.Expression)>($r11);

        $r15 = virtualinvoke $r3.<kodkod.ast.Expression: kodkod.ast.Formula in(kodkod.ast.Expression)>($r11);

        $r16 = virtualinvoke $r14.<kodkod.ast.Formula: kodkod.ast.Formula and(kodkod.ast.Formula)>($r15);

        if r24 != null goto label2;

        r24 = $r16;

        goto label3;

     label2:
        r24 = virtualinvoke r24.<kodkod.ast.Formula: kodkod.ast.Formula or(kodkod.ast.Formula)>($r16);

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label1;

        $r17 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r18 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r17);

        $r19 = virtualinvoke r24.<kodkod.ast.Formula: kodkod.ast.Formula forSome(kodkod.ast.Decls)>($r18);

        $r20 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r21 = virtualinvoke $r1.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r20);

        $r22 = virtualinvoke $r19.<kodkod.ast.Formula: kodkod.ast.Formula forSome(kodkod.ast.Decls)>($r21);

        $r23 = new FormulaStruct;

        specialinvoke $r23.<FormulaStruct: void <init>(kodkod.ast.Formula,kodkod.instance.Bounds)>($r22, $r7);

        return $r23;
    }

    private static FormulaStruct formula3(int)
    {
        FormulaStruct $r33;
        kodkod.instance.Bounds $r3;
        kodkod.ast.Expression $r25, $r30;
        kodkod.ast.Decl $r27, $r32;
        kodkod.ast.Variable $r9, $r13, $r18, $r21, $r26, $r31;
        java.lang.StringBuilder $r6, $r7, $r10, $r11;
        kodkod.ast.Relation $r14;
        java.util.ArrayList $r4, $r5;
        java.util.HashSet $r0;
        int i0, $i1, i2, i3, $i4, i5, $i6, $i7, i8, i9, $i10, $i11, $i12, i13, $i14, i15;
        kodkod.instance.Universe $r1;
        java.lang.String $r8, $r12;
        kodkod.instance.TupleFactory $r2;
        kodkod.instance.TupleSet $r15, $r16;
        kodkod.ast.Formula $r19, $r22, $r23, $r28, r34, r35, $r36, $r37;
        java.lang.Object $r17, $r20, $r24, $r29;

        i0 := @parameter0: int;

        r34 = null;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("element0");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("element1");

        $r1 = new kodkod.instance.Universe;

        specialinvoke $r1.<kodkod.instance.Universe: void <init>(java.util.Collection)>($r0);

        $r2 = virtualinvoke $r1.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $r3 = new kodkod.instance.Bounds;

        specialinvoke $r3.<kodkod.instance.Bounds: void <init>(kodkod.instance.Universe)>($r1);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i8 = 0;

        goto label02;

     label01:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("x");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <kodkod.ast.Variable: kodkod.ast.Variable unary(java.lang.String)>($r8);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("y");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <kodkod.ast.Variable: kodkod.ast.Variable unary(java.lang.String)>($r12);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r13);

        i8 = i8 + 1;

     label02:
        if i8 < i0 goto label01;

        $r14 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>("R");

        $r15 = virtualinvoke $r2.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(1);

        $r16 = virtualinvoke $r2.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet allOf(int)>(1);

        virtualinvoke $r3.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r14, $r15, $r16);

        i9 = 0;

        goto label17;

     label03:
        if i9 >= i0 goto label04;

        $i10 = 0;

        goto label05;

     label04:
        $i1 = i9 - i0;

        $i10 = $i1 + 1;

     label05:
        i2 = $i10;

        if i9 >= i0 goto label06;

        $i11 = i9;

        goto label07;

     label06:
        $i11 = i0 - 1;

     label07:
        i3 = $i11;

        if i9 >= i0 goto label08;

        $i12 = 0;

        goto label09;

     label08:
        $i4 = i9 - i0;

        $i12 = $i4 + 1;

     label09:
        i5 = $i12;

        r35 = null;

        i13 = i2;

        goto label13;

     label10:
        $r17 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        $r18 = (kodkod.ast.Variable) $r17;

        $r19 = virtualinvoke $r18.<kodkod.ast.Variable: kodkod.ast.Formula in(kodkod.ast.Expression)>($r14);

        $i6 = i3 - i13;

        $i7 = $i6 + i5;

        $r20 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i7);

        $r21 = (kodkod.ast.Variable) $r20;

        $r22 = virtualinvoke $r21.<kodkod.ast.Variable: kodkod.ast.Formula in(kodkod.ast.Expression)>($r14);

        $r23 = virtualinvoke $r19.<kodkod.ast.Formula: kodkod.ast.Formula and(kodkod.ast.Formula)>($r22);

        if r35 != null goto label11;

        $r36 = $r23;

        goto label12;

     label11:
        $r36 = virtualinvoke r35.<kodkod.ast.Formula: kodkod.ast.Formula or(kodkod.ast.Formula)>($r23);

     label12:
        r35 = $r36;

        i13 = i13 + 1;

     label13:
        if i13 <= i3 goto label10;

        if r35 == null goto label16;

        if r34 != null goto label14;

        $r37 = r35;

        goto label15;

     label14:
        $r37 = virtualinvoke r34.<kodkod.ast.Formula: kodkod.ast.Formula and(kodkod.ast.Formula)>(r35);

     label15:
        r34 = $r37;

     label16:
        i9 = i9 + 1;

     label17:
        $i14 = i0 * 2;

        if i9 < $i14 goto label03;

        i15 = 0;

        goto label19;

     label18:
        $r24 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i15);

        $r26 = (kodkod.ast.Variable) $r24;

        $r25 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r27 = virtualinvoke $r26.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r25);

        $r28 = virtualinvoke r34.<kodkod.ast.Formula: kodkod.ast.Formula forSome(kodkod.ast.Decls)>($r27);

        $r29 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i15);

        $r31 = (kodkod.ast.Variable) $r29;

        $r30 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r32 = virtualinvoke $r31.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r30);

        r34 = virtualinvoke $r28.<kodkod.ast.Formula: kodkod.ast.Formula forSome(kodkod.ast.Decls)>($r32);

        i15 = i15 + 1;

     label19:
        if i15 < i0 goto label18;

        $r33 = new FormulaStruct;

        specialinvoke $r33.<FormulaStruct: void <init>(kodkod.ast.Formula,kodkod.instance.Bounds)>(r34, $r3);

        return $r33;
    }

    private static FormulaStruct formula4(int)
    {
        FormulaStruct $r28;
        kodkod.instance.Bounds $r3;
        kodkod.ast.Expression $r6, $r20, $r22, $r25;
        kodkod.ast.Decl $r23, $r26;
        kodkod.ast.Variable $r4, $r5;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        kodkod.ast.Relation $r14;
        java.util.ArrayList $r7, $r8, $r18;
        java.util.HashSet $r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i8, i9, $i10, i11, $i12, i13, i14, $i15;
        kodkod.instance.Universe $r1;
        java.lang.String $r13;
        kodkod.instance.TupleFactory $r2;
        kodkod.instance.TupleSet $r15, $r16;
        kodkod.ast.Formula $r21, $r24, $r27, r29, r30, $r31, $r32;
        java.lang.Object $r17, $r19;

        i0 := @parameter0: int;

        r29 = null;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("element0");

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>("element1");

        $r1 = new kodkod.instance.Universe;

        specialinvoke $r1.<kodkod.instance.Universe: void <init>(java.util.Collection)>($r0);

        $r2 = virtualinvoke $r1.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $r3 = new kodkod.instance.Bounds;

        specialinvoke $r3.<kodkod.instance.Bounds: void <init>(kodkod.instance.Universe)>($r1);

        $r4 = staticinvoke <kodkod.ast.Variable: kodkod.ast.Variable unary(java.lang.String)>("x");

        $r5 = staticinvoke <kodkod.ast.Variable: kodkod.ast.Variable unary(java.lang.String)>("y");

        $r6 = virtualinvoke $r4.<kodkod.ast.Variable: kodkod.ast.Expression product(kodkod.ast.Expression)>($r5);

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        i5 = 0;

        goto label04;

     label01:
        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        i6 = 0;

        goto label03;

     label02:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("R");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation binary(java.lang.String)>($r13);

        virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r14);

        $r15 = virtualinvoke $r2.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(2);

        $r16 = virtualinvoke $r2.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet allOf(int)>(2);

        virtualinvoke $r3.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r14, $r15, $r16);

        i6 = i6 + 1;

     label03:
        if i6 < i0 goto label02;

        i5 = i5 + 1;

     label04:
        if i5 < i0 goto label01;

        i7 = 0;

        goto label19;

     label05:
        if i7 >= i0 goto label06;

        $i8 = 0;

        goto label07;

     label06:
        $i1 = i7 - i0;

        $i8 = $i1 + 1;

     label07:
        i9 = $i8;

        if i7 >= i0 goto label08;

        $i10 = i7;

        goto label09;

     label08:
        $i10 = i0 - 1;

     label09:
        i11 = $i10;

        if i7 >= i0 goto label10;

        $i12 = 0;

        goto label11;

     label10:
        $i2 = i7 - i0;

        $i12 = $i2 + 1;

     label11:
        i13 = $i12;

        r30 = null;

        i14 = i9;

        goto label15;

     label12:
        $r17 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i14);

        $r18 = (java.util.ArrayList) $r17;

        $i3 = i11 - i14;

        $i4 = $i3 + i13;

        $r19 = virtualinvoke $r18.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        $r20 = (kodkod.ast.Expression) $r19;

        $r21 = virtualinvoke $r6.<kodkod.ast.Expression: kodkod.ast.Formula in(kodkod.ast.Expression)>($r20);

        if r30 != null goto label13;

        $r31 = $r21;

        goto label14;

     label13:
        $r31 = virtualinvoke r30.<kodkod.ast.Formula: kodkod.ast.Formula or(kodkod.ast.Formula)>($r21);

     label14:
        r30 = $r31;

        i14 = i14 + 1;

     label15:
        if i14 <= i11 goto label12;

        if r30 == null goto label18;

        if r29 != null goto label16;

        $r32 = r30;

        goto label17;

     label16:
        $r32 = virtualinvoke r29.<kodkod.ast.Formula: kodkod.ast.Formula and(kodkod.ast.Formula)>(r30);

     label17:
        r29 = $r32;

     label18:
        i7 = i7 + 1;

     label19:
        $i15 = i0 * 2;

        if i7 < $i15 goto label05;

        $r22 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r23 = virtualinvoke $r4.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r22);

        $r24 = virtualinvoke r29.<kodkod.ast.Formula: kodkod.ast.Formula forSome(kodkod.ast.Decls)>($r23);

        $r25 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r26 = virtualinvoke $r5.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r25);

        $r27 = virtualinvoke $r24.<kodkod.ast.Formula: kodkod.ast.Formula forSome(kodkod.ast.Decls)>($r26);

        $r28 = new FormulaStruct;

        specialinvoke $r28.<FormulaStruct: void <init>(kodkod.ast.Formula,kodkod.instance.Bounds)>($r27, $r3);

        return $r28;
    }

    private static FormulaStruct formula5()
    {
        FormulaStruct $r53;
        kodkod.instance.Bounds $r45;
        kodkod.ast.Expression $r5, $r6, $r7, $r8, $r16, $r19, $r27, $r30, $r33, $r38, $r41;
        kodkod.ast.Decl $r17, $r20, $r28, $r31, $r34, $r39, $r42;
        kodkod.ast.Variable $r0, $r1, $r2, $r3, $r4;
        kodkod.ast.Relation $r9, $r10;
        java.util.HashSet $r11;
        kodkod.instance.Universe $r12;
        kodkod.instance.TupleFactory $r46;
        kodkod.instance.TupleSet $r49, $r50, $r51, $r52;
        kodkod.instance.Tuple $r47, $r48;
        kodkod.ast.Formula $r13, $r14, $r15, $r18, $r21, $r22, $r23, $r24, $r25, $r26, $r29, $r32, $r35, $r36, $r37, $r40, $r43, $r44;

        $r0 = staticinvoke <kodkod.ast.Variable: kodkod.ast.Variable unary(java.lang.String)>("x");

        $r1 = staticinvoke <kodkod.ast.Variable: kodkod.ast.Variable unary(java.lang.String)>("y");

        $r2 = staticinvoke <kodkod.ast.Variable: kodkod.ast.Variable unary(java.lang.String)>("z");

        $r3 = staticinvoke <kodkod.ast.Variable: kodkod.ast.Variable unary(java.lang.String)>("x1");

        $r4 = staticinvoke <kodkod.ast.Variable: kodkod.ast.Variable unary(java.lang.String)>("x2");

        $r5 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Expression product(kodkod.ast.Expression)>($r1);

        $r6 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Expression product(kodkod.ast.Expression)>($r2);

        $r7 = virtualinvoke $r2.<kodkod.ast.Variable: kodkod.ast.Expression product(kodkod.ast.Expression)>($r1);

        $r8 = virtualinvoke $r3.<kodkod.ast.Variable: kodkod.ast.Expression product(kodkod.ast.Expression)>($r4);

        $r9 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation binary(java.lang.String)>("R");

        $r10 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation binary(java.lang.String)>("R+");

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>("a");

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>("b");

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>("c");

        interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>("d");

        $r12 = new kodkod.instance.Universe;

        specialinvoke $r12.<kodkod.instance.Universe: void <init>(java.util.Collection)>($r11);

        $r13 = virtualinvoke $r5.<kodkod.ast.Expression: kodkod.ast.Formula in(kodkod.ast.Expression)>($r9);

        $r14 = virtualinvoke $r5.<kodkod.ast.Expression: kodkod.ast.Formula in(kodkod.ast.Expression)>($r10);

        $r15 = virtualinvoke $r13.<kodkod.ast.Formula: kodkod.ast.Formula implies(kodkod.ast.Formula)>($r14);

        $r16 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r17 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r16);

        $r18 = virtualinvoke $r15.<kodkod.ast.Formula: kodkod.ast.Formula forAll(kodkod.ast.Decls)>($r17);

        $r19 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r20 = virtualinvoke $r1.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r19);

        $r21 = virtualinvoke $r18.<kodkod.ast.Formula: kodkod.ast.Formula forAll(kodkod.ast.Decls)>($r20);

        $r22 = virtualinvoke $r6.<kodkod.ast.Expression: kodkod.ast.Formula in(kodkod.ast.Expression)>($r9);

        $r23 = virtualinvoke $r7.<kodkod.ast.Expression: kodkod.ast.Formula in(kodkod.ast.Expression)>($r10);

        $r24 = virtualinvoke $r22.<kodkod.ast.Formula: kodkod.ast.Formula and(kodkod.ast.Formula)>($r23);

        $r25 = virtualinvoke $r5.<kodkod.ast.Expression: kodkod.ast.Formula in(kodkod.ast.Expression)>($r10);

        $r26 = virtualinvoke $r24.<kodkod.ast.Formula: kodkod.ast.Formula implies(kodkod.ast.Formula)>($r25);

        $r27 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r28 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r27);

        $r29 = virtualinvoke $r26.<kodkod.ast.Formula: kodkod.ast.Formula forAll(kodkod.ast.Decls)>($r28);

        $r30 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r31 = virtualinvoke $r1.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r30);

        $r32 = virtualinvoke $r29.<kodkod.ast.Formula: kodkod.ast.Formula forAll(kodkod.ast.Decls)>($r31);

        $r33 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r34 = virtualinvoke $r2.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r33);

        $r35 = virtualinvoke $r32.<kodkod.ast.Formula: kodkod.ast.Formula forAll(kodkod.ast.Decls)>($r34);

        $r36 = virtualinvoke $r21.<kodkod.ast.Formula: kodkod.ast.Formula and(kodkod.ast.Formula)>($r35);

        $r37 = virtualinvoke $r8.<kodkod.ast.Expression: kodkod.ast.Formula in(kodkod.ast.Expression)>($r9);

        $r38 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r39 = virtualinvoke $r3.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r38);

        $r40 = virtualinvoke $r37.<kodkod.ast.Formula: kodkod.ast.Formula forSome(kodkod.ast.Decls)>($r39);

        $r41 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r42 = virtualinvoke $r4.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r41);

        $r43 = virtualinvoke $r40.<kodkod.ast.Formula: kodkod.ast.Formula forSome(kodkod.ast.Decls)>($r42);

        $r44 = virtualinvoke $r36.<kodkod.ast.Formula: kodkod.ast.Formula and(kodkod.ast.Formula)>($r43);

        $r45 = new kodkod.instance.Bounds;

        specialinvoke $r45.<kodkod.instance.Bounds: void <init>(kodkod.instance.Universe)>($r12);

        $r46 = virtualinvoke $r12.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $r47 = virtualinvoke $r46.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(int,int)>(2, 1);

        $r48 = virtualinvoke $r46.<kodkod.instance.TupleFactory: kodkod.instance.Tuple tuple(int,int)>(2, 4);

        $r49 = virtualinvoke $r46.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet range(kodkod.instance.Tuple,kodkod.instance.Tuple)>($r47, $r48);

        $r50 = virtualinvoke $r46.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet allOf(int)>(2);

        virtualinvoke $r45.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r9, $r49, $r50);

        $r51 = virtualinvoke $r46.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(2);

        $r52 = virtualinvoke $r46.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet allOf(int)>(2);

        virtualinvoke $r45.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r10, $r51, $r52);

        $r53 = new FormulaStruct;

        specialinvoke $r53.<FormulaStruct: void <init>(kodkod.ast.Formula,kodkod.instance.Bounds)>($r44, $r45);

        return $r53;
    }

    private static FormulaStruct exampleFormula(java.lang.String)
    {
        FormulaStruct $r33;
        java.lang.Integer $r17;
        kodkod.instance.Bounds $r7;
        boolean z0, $z1;
        kodkod.ast.Expression $r19, $r23, $r26, $r29, $r30;
        kodkod.ast.Decl $r31;
        kodkod.ast.Variable $r0;
        java.lang.StringBuilder $r9, $r10;
        kodkod.ast.Relation $r12;
        ExampleLoader $r1;
        java.util.ArrayList $r3, $r4, r35;
        java.util.HashSet $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, $i9, $i10, $i11;
        java.lang.String r2, $r11;
        kodkod.instance.Universe $r6;
        kodkod.instance.TupleFactory $r8;
        kodkod.instance.TupleSet $r13, $r14;
        kodkod.ast.Formula $r20, $r21, $r24, $r27, $r32, r34, r36;
        java.lang.Object $r15, $r16, $r18, $r22, $r25, $r28;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <kodkod.ast.Variable: kodkod.ast.Variable unary(java.lang.String)>("x");

        $r1 = new ExampleLoader;

        specialinvoke $r1.<ExampleLoader: void <init>(java.lang.String)>(r2);

        $r3 = virtualinvoke $r1.<ExampleLoader: java.util.ArrayList getContent()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>("element0");

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>("element1");

        $r6 = new kodkod.instance.Universe;

        specialinvoke $r6.<kodkod.instance.Universe: void <init>(java.util.Collection)>($r5);

        $r7 = new kodkod.instance.Bounds;

        specialinvoke $r7.<kodkod.instance.Bounds: void <init>(kodkod.instance.Universe)>($r6);

        $r8 = virtualinvoke $r6.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        r34 = null;

        i6 = 1;

        goto label02;

     label01:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("R");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = staticinvoke <kodkod.ast.Relation: kodkod.ast.Relation unary(java.lang.String)>($r11);

        $r13 = virtualinvoke $r8.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>(1);

        $r14 = virtualinvoke $r8.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet allOf(int)>(1);

        virtualinvoke $r7.<kodkod.instance.Bounds: void bound(kodkod.ast.Relation,kodkod.instance.TupleSet,kodkod.instance.TupleSet)>($r12, $r13, $r14);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

        i6 = i6 + 1;

     label02:
        $i0 = virtualinvoke $r1.<ExampleLoader: int getNumOfVars()>();

        if i6 <= $i0 goto label01;

        i7 = 0;

        goto label16;

     label03:
        $r15 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i7);

        r35 = (java.util.ArrayList) $r15;

        r36 = null;

        i8 = 0;

        goto label13;

     label04:
        $r16 = virtualinvoke r35.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        $r17 = (java.lang.Integer) $r16;

        $i1 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

        if $i1 >= 0 goto label05;

        $z1 = 1;

        goto label06;

     label05:
        $z1 = 0;

     label06:
        z0 = $z1;

        if $i1 <= 0 goto label07;

        $i9 = $i1;

        goto label08;

     label07:
        $i9 = neg $i1;

     label08:
        if z0 != 0 goto label10;

        if r36 != null goto label09;

        $i5 = $i9 - 1;

        $r28 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        $r29 = (kodkod.ast.Expression) $r28;

        r36 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Formula in(kodkod.ast.Expression)>($r29);

        goto label12;

     label09:
        $i4 = $i9 - 1;

        $r25 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        $r26 = (kodkod.ast.Expression) $r25;

        $r27 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Formula in(kodkod.ast.Expression)>($r26);

        r36 = virtualinvoke r36.<kodkod.ast.Formula: kodkod.ast.Formula or(kodkod.ast.Formula)>($r27);

        goto label12;

     label10:
        if r36 != null goto label11;

        $i3 = $i9 - 1;

        $r22 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r23 = (kodkod.ast.Expression) $r22;

        $r24 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Formula in(kodkod.ast.Expression)>($r23);

        r36 = virtualinvoke $r24.<kodkod.ast.Formula: kodkod.ast.Formula not()>();

        goto label12;

     label11:
        $i2 = $i9 - 1;

        $r18 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        $r19 = (kodkod.ast.Expression) $r18;

        $r20 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Formula in(kodkod.ast.Expression)>($r19);

        $r21 = virtualinvoke $r20.<kodkod.ast.Formula: kodkod.ast.Formula not()>();

        r36 = virtualinvoke r36.<kodkod.ast.Formula: kodkod.ast.Formula or(kodkod.ast.Formula)>($r21);

     label12:
        i8 = i8 + 1;

     label13:
        $i10 = virtualinvoke r35.<java.util.ArrayList: int size()>();

        if i8 < $i10 goto label04;

        if r34 != null goto label14;

        r34 = r36;

        goto label15;

     label14:
        r34 = virtualinvoke r34.<kodkod.ast.Formula: kodkod.ast.Formula and(kodkod.ast.Formula)>(r36);

     label15:
        i7 = i7 + 1;

     label16:
        $i11 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if i7 < $i11 goto label03;

        $r30 = <kodkod.ast.Expression: kodkod.ast.Expression UNIV>;

        $r31 = virtualinvoke $r0.<kodkod.ast.Variable: kodkod.ast.Decl oneOf(kodkod.ast.Expression)>($r30);

        $r32 = virtualinvoke r34.<kodkod.ast.Formula: kodkod.ast.Formula forSome(kodkod.ast.Decls)>($r31);

        $r33 = new FormulaStruct;

        specialinvoke $r33.<FormulaStruct: void <init>(kodkod.ast.Formula,kodkod.instance.Bounds)>($r32, $r7);

        return $r33;
    }

    private static void formulaMode(org.kohsuke.args4j.opts.IntOption, org.kohsuke.args4j.opts.BooleanOption, org.kohsuke.args4j.opts.IntOption) throws org.sat4j.specs.TimeoutException, org.sat4j.specs.ContradictionException
    {
        FormulaStruct r112;
        java.util.Map $r10, $r20, $r41, $r47, $r59;
        java.lang.StringBuilder $r7, $r11, $r13, $r15, $r39, $r42, $r44, $r48, $r56, $r60, $r62, $r64, $r67, $r71, $r73, $r77, $r81, $r85, $r87, $r91, $r93, $r97, $r99, $r103, $r126, $r127;
        long $l1, $l2, $l3, $l4, $l5, $l6, $l10;
        org.kohsuke.args4j.opts.IntOption r0, r107;
        kodkod.instance.Tuple $r36;
        kodkod.ast.Formula $r50, $r69, $r113;
        minsolver.MinSolver$MinSolutionIterator r123;
        org.kohsuke.args4j.opts.BooleanOption r17;
        kodkod.ast.Relation r24;
        kodkod.instance.Instance $r9, $r19, $r28, $r46, $r58;
        minsolver.ExplorationException $r109;
        int $i0, $i7, $i8, $i9, $i11, $i12, $i13, i14;
        kodkod.instance.TupleFactory $r33;
        minsolver.MinSolution$Outcome $r3, $r4, $r5, $r6, $r52, $r53, $r54, $r55;
        kodkod.instance.TupleSet r26, $r37;
        java.io.PrintStream $r8, $r14, $r18, $r38, $r40, $r45, $r57, $r63, $r66, $r68, $r74, $r79, $r80, $r82, $r88, $r94, $r100, $r105, $r106, $r108, $r110, $r125;
        minsolver.MinSolver $r116;
        minsolver.MyReporter $r115;
        java.lang.Object $r1, $r23, $r25, $r34, $r51;
        java.util.Set $r21;
        minsolver.MinSolution r2, r124;
        kodkod.engine.config.Options $r117, $r118, $r120, $r121;
        minsolver.MinSATSolverFactory $r119;
        java.lang.String $r12, $r16, $r43, $r49, $r61, $r65, $r70, $r72, $r76, $r78, $r84, $r86, $r90, $r92, $r96, $r98, $r102, $r104, $r111, $r128;
        minsolver.MinStatistics $r83, $r89, $r95, $r101;
        kodkod.instance.Bounds $r29, $r31, $r75, $r114;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        kodkod.instance.Universe $r30, $r32;
        java.util.Iterator $r22, $r27, $r122;
        kodkod.instance.Tuple[] $r35;

        r0 := @parameter0: org.kohsuke.args4j.opts.IntOption;

        r17 := @parameter1: org.kohsuke.args4j.opts.BooleanOption;

        r107 := @parameter2: org.kohsuke.args4j.opts.IntOption;

        $z0 = r0.<org.kohsuke.args4j.opts.IntOption: boolean isSet>;

        if $z0 != 0 goto label01;

        $r108 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r108.<java.io.PrintStream: void println(java.lang.String)>("No formula specified.");

        staticinvoke <java.lang.System: void exit(int)>(0);

     label01:
        r112 = null;

        $i0 = r0.<org.kohsuke.args4j.opts.IntOption: int value>;

        tableswitch($i0)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            default: goto label08;
        };

     label02:
        r112 = staticinvoke <Main: FormulaStruct formula0()>();

        goto label08;

     label03:
        r112 = staticinvoke <Main: FormulaStruct formula1()>();

        goto label08;

     label04:
        $i13 = r107.<org.kohsuke.args4j.opts.IntOption: int value>;

        r112 = staticinvoke <Main: FormulaStruct formula2(int)>($i13);

        goto label08;

     label05:
        $i12 = r107.<org.kohsuke.args4j.opts.IntOption: int value>;

        r112 = staticinvoke <Main: FormulaStruct formula3(int)>($i12);

        goto label08;

     label06:
        $i11 = r107.<org.kohsuke.args4j.opts.IntOption: int value>;

        r112 = staticinvoke <Main: FormulaStruct formula4(int)>($i11);

        goto label08;

     label07:
        r112 = staticinvoke <Main: FormulaStruct formula5()>();

     label08:
        $r113 = virtualinvoke r112.<FormulaStruct: kodkod.ast.Formula getFmla()>();

        $r114 = virtualinvoke r112.<FormulaStruct: kodkod.instance.Bounds getBounds()>();

        $r115 = new minsolver.MyReporter;

        specialinvoke $r115.<minsolver.MyReporter: void <init>()>();

        $r116 = new minsolver.MinSolver;

        specialinvoke $r116.<minsolver.MinSolver: void <init>()>();

        $r117 = virtualinvoke $r116.<minsolver.MinSolver: kodkod.engine.config.Options options()>();

        virtualinvoke $r117.<kodkod.engine.config.Options: void setFlatten(boolean)>(1);

        $r118 = virtualinvoke $r116.<minsolver.MinSolver: kodkod.engine.config.Options options()>();

        virtualinvoke $r118.<kodkod.engine.config.Options: void setSymmetryBreaking(int)>(0);

        $r119 = new minsolver.MinSATSolverFactory;

        specialinvoke $r119.<minsolver.MinSATSolverFactory: void <init>(minsolver.MyReporter)>($r115);

        $r120 = virtualinvoke $r116.<minsolver.MinSolver: kodkod.engine.config.Options options()>();

        virtualinvoke $r120.<kodkod.engine.config.Options: void setSolver(kodkod.engine.satlab.SATFactory)>($r119);

        $r121 = virtualinvoke $r116.<minsolver.MinSolver: kodkod.engine.config.Options options()>();

        virtualinvoke $r121.<kodkod.engine.config.Options: void setReporter(kodkod.engine.config.Reporter)>($r115);

        $r122 = virtualinvoke $r116.<minsolver.MinSolver: java.util.Iterator solveAll(kodkod.ast.Formula,kodkod.instance.Bounds)>($r113, $r114);

        i14 = 0;

        goto label23;

     label09:
        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r1 = interfaceinvoke $r122.<java.util.Iterator: java.lang.Object next()>();

        r2 = (minsolver.MinSolution) $r1;

        $r3 = <minsolver.MinSolution$Outcome: minsolver.MinSolution$Outcome UNSATISFIABLE>;

        $r4 = virtualinvoke r2.<minsolver.MinSolution: minsolver.MinSolution$Outcome outcome()>();

        $z1 = virtualinvoke $r3.<minsolver.MinSolution$Outcome: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label24;

        $r5 = <minsolver.MinSolution$Outcome: minsolver.MinSolution$Outcome TRIVIALLY_UNSATISFIABLE>;

        $r6 = virtualinvoke r2.<minsolver.MinSolution: minsolver.MinSolution$Outcome outcome()>();

        $z2 = virtualinvoke $r5.<minsolver.MinSolution$Outcome: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label10;

        goto label24;

     label10:
        if i14 != 0 goto label11;

        $r66 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r66.<java.io.PrintStream: void println(java.lang.String)>("========================================================");

        $r68 = <java.lang.System: java.io.PrintStream out>;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>(java.lang.String)>("FORMULA: ");

        $r69 = virtualinvoke r112.<FormulaStruct: kodkod.ast.Formula getFmla()>();

        $r70 = virtualinvoke $r69.<kodkod.ast.Formula: java.lang.String toString()>();

        $r71 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r70);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r68.<java.io.PrintStream: void println(java.lang.String)>($r72);

        $r74 = <java.lang.System: java.io.PrintStream out>;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bounds: ");

        $r75 = virtualinvoke r112.<FormulaStruct: kodkod.instance.Bounds getBounds()>();

        $r76 = virtualinvoke $r75.<kodkod.instance.Bounds: java.lang.String toString()>();

        $r77 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        $r78 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r74.<java.io.PrintStream: void println(java.lang.String)>($r78);

        $r79 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r79.<java.io.PrintStream: void println(java.lang.String)>("-------------------------------------------------------\n");

        $r80 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r80.<java.io.PrintStream: void println(java.lang.String)>("STATISTICS: ");

        $r82 = <java.lang.System: java.io.PrintStream out>;

        $r81 = new java.lang.StringBuilder;

        $r83 = virtualinvoke r2.<minsolver.MinSolution: minsolver.MinStatistics stats()>();

        $i7 = virtualinvoke $r83.<minsolver.MinStatistics: int clauses()>();

        $r84 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i7);

        specialinvoke $r81.<java.lang.StringBuilder: void <init>(java.lang.String)>($r84);

        $r85 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" clauses.");

        $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r82.<java.io.PrintStream: void println(java.lang.String)>($r86);

        $r88 = <java.lang.System: java.io.PrintStream out>;

        $r87 = new java.lang.StringBuilder;

        $r89 = virtualinvoke r2.<minsolver.MinSolution: minsolver.MinStatistics stats()>();

        $i8 = virtualinvoke $r89.<minsolver.MinStatistics: int primaryVariables()>();

        $r90 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i8);

        specialinvoke $r87.<java.lang.StringBuilder: void <init>(java.lang.String)>($r90);

        $r91 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" primary variables.");

        $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r88.<java.io.PrintStream: void println(java.lang.String)>($r92);

        $r94 = <java.lang.System: java.io.PrintStream out>;

        $r93 = new java.lang.StringBuilder;

        $r95 = virtualinvoke r2.<minsolver.MinSolution: minsolver.MinStatistics stats()>();

        $i9 = virtualinvoke $r95.<minsolver.MinStatistics: int variables()>();

        $r96 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i9);

        specialinvoke $r93.<java.lang.StringBuilder: void <init>(java.lang.String)>($r96);

        $r97 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" total variables.");

        $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r94.<java.io.PrintStream: void println(java.lang.String)>($r98);

        $r100 = <java.lang.System: java.io.PrintStream out>;

        $r99 = new java.lang.StringBuilder;

        $r101 = virtualinvoke r2.<minsolver.MinSolution: minsolver.MinStatistics stats()>();

        $l10 = virtualinvoke $r101.<minsolver.MinStatistics: long translationTime()>();

        $r102 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l10);

        specialinvoke $r99.<java.lang.StringBuilder: void <init>(java.lang.String)>($r102);

        $r103 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" translation time.");

        $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r100.<java.io.PrintStream: void println(java.lang.String)>($r104);

        $r105 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r105.<java.io.PrintStream: void println(java.lang.String)>("========================================================\n");

        $r106 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r106.<java.io.PrintStream: void println(java.lang.String)>("MODELS:");

     label11:
        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Minimal model: ");

        $r9 = virtualinvoke r2.<minsolver.MinSolution: kodkod.instance.Instance instance()>();

        $r10 = virtualinvoke $r9.<kodkod.instance.Instance: java.util.Map relationTuples()>();

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Time to produce+print minimal model or UNSAT (ms): ");

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = $l2 - $l1;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r16);

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z3 = virtualinvoke r17.<org.kohsuke.args4j.opts.BooleanOption: boolean isOn()>();

        if $z3 == 0 goto label22;

        $r19 = virtualinvoke $r116.<minsolver.MinSolver: kodkod.instance.Instance getLifters(java.util.Iterator)>($r122);

        $r20 = virtualinvoke $r19.<kodkod.instance.Instance: java.util.Map relationTuples()>();

        $r21 = interfaceinvoke $r20.<java.util.Map: java.util.Set keySet()>();

        $r22 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

        goto label21;

     label12:
        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r24 = (kodkod.ast.Relation) $r23;

        $r25 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>(r24);

        r26 = (kodkod.instance.TupleSet) $r25;

        $r27 = virtualinvoke r26.<kodkod.instance.TupleSet: java.util.Iterator iterator()>();

        goto label20;

     label13:
        $r28 = new kodkod.instance.Instance;

        $r29 = r112.<FormulaStruct: kodkod.instance.Bounds bounds>;

        $r30 = virtualinvoke $r29.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        specialinvoke $r28.<kodkod.instance.Instance: void <init>(kodkod.instance.Universe)>($r30);

        $r31 = r112.<FormulaStruct: kodkod.instance.Bounds bounds>;

        $r32 = virtualinvoke $r31.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $r33 = virtualinvoke $r32.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        $r34 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        $r36 = (kodkod.instance.Tuple) $r34;

        $r35 = newarray (kodkod.instance.Tuple)[0];

        $r37 = virtualinvoke $r33.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet setOf(kodkod.instance.Tuple,kodkod.instance.Tuple[])>($r36, $r35);

        virtualinvoke $r28.<kodkod.instance.Instance: void add(kodkod.ast.Relation,kodkod.instance.TupleSet)>(r24, $r37);

        $r38 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>("-------------------------------------------------------");

        $r40 = <java.lang.System: java.io.PrintStream out>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>("Consistent Fact:   ");

        $r41 = virtualinvoke $r28.<kodkod.instance.Instance: java.util.Map relationTuples()>();

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>($r43);

        $r45 = <java.lang.System: java.io.PrintStream out>;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>(java.lang.String)>("Model:    ");

        $r46 = virtualinvoke r2.<minsolver.MinSolution: kodkod.instance.Instance instance()>();

        $r47 = virtualinvoke $r46.<kodkod.instance.Instance: java.util.Map relationTuples()>();

        $r48 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r45.<java.io.PrintStream: void println(java.lang.String)>($r49);

        r123 = null;

     label14:
        $r50 = r112.<FormulaStruct: kodkod.ast.Formula fmla>;

        r123 = virtualinvoke $r116.<minsolver.MinSolver: minsolver.MinSolver$MinSolutionIterator lift(kodkod.ast.Formula,java.util.Iterator,kodkod.instance.Instance)>($r50, $r122, $r28);

     label15:
        goto label19;

     label16:
        $r109 := @caughtexception;

        $r110 = <java.lang.System: java.io.PrintStream err>;

        $r111 = virtualinvoke $r109.<minsolver.ExplorationException: java.lang.String getMessage()>();

        virtualinvoke $r110.<java.io.PrintStream: void println(java.lang.String)>($r111);

        staticinvoke <java.lang.System: void exit(int)>(0);

        goto label19;

     label17:
        $r51 = interfaceinvoke r123.<java.util.Iterator: java.lang.Object next()>();

        r124 = (minsolver.MinSolution) $r51;

        $r52 = <minsolver.MinSolution$Outcome: minsolver.MinSolution$Outcome UNSATISFIABLE>;

        $r53 = virtualinvoke r124.<minsolver.MinSolution: minsolver.MinSolution$Outcome outcome()>();

        $z5 = virtualinvoke $r52.<minsolver.MinSolution$Outcome: boolean equals(java.lang.Object)>($r53);

        if $z5 != 0 goto label20;

        $r54 = <minsolver.MinSolution$Outcome: minsolver.MinSolution$Outcome TRIVIALLY_UNSATISFIABLE>;

        $r55 = virtualinvoke r124.<minsolver.MinSolution: minsolver.MinSolution$Outcome outcome()>();

        $z6 = virtualinvoke $r54.<minsolver.MinSolution$Outcome: boolean equals(java.lang.Object)>($r55);

        if $z6 == 0 goto label18;

        goto label20;

     label18:
        $r57 = <java.lang.System: java.io.PrintStream out>;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>(java.lang.String)>("Lifted model:  ");

        $r58 = virtualinvoke r124.<minsolver.MinSolution: kodkod.instance.Instance instance()>();

        $r59 = virtualinvoke $r58.<kodkod.instance.Instance: java.util.Map relationTuples()>();

        $r60 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r57.<java.io.PrintStream: void println(java.lang.String)>($r61);

     label19:
        $z7 = interfaceinvoke r123.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label17;

     label20:
        $z8 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z8 != 0 goto label13;

     label21:
        $z4 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label12;

        $r63 = <java.lang.System: java.io.PrintStream out>;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>(java.lang.String)>("Time to produce+print augmentations (ms): ");

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l6 = $l5 - $l4;

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r63.<java.io.PrintStream: void println(java.lang.String)>($r65);

     label22:
        $r18 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("========================================================\n");

        i14 = i14 + 1;

     label23:
        $z9 = interfaceinvoke $r122.<java.util.Iterator: boolean hasNext()>();

        if $z9 != 0 goto label09;

     label24:
        $r125 = <java.lang.System: java.io.PrintStream out>;

        $r126 = new java.lang.StringBuilder;

        specialinvoke $r126.<java.lang.StringBuilder: void <init>(java.lang.String)>("Total minimal models seen: ");

        $r127 = virtualinvoke $r126.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        $r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r125.<java.io.PrintStream: void println(java.lang.String)>($r128);

        return;

        catch minsolver.ExplorationException from label14 to label15 with label16;
    }

    private static void exampleModeFile(org.kohsuke.args4j.opts.FileOption, org.kohsuke.args4j.opts.FileOption, org.kohsuke.args4j.opts.IntOption)
    {
        org.kohsuke.args4j.opts.IntOption r2;
        int $i0, i1;
        java.lang.String $r4, $r8, $r9, $r11, $r13, $r17, $r18, $r19, r24;
        boolean $z0;
        org.kohsuke.args4j.opts.FileOption r0, r5;
        java.io.PrintStream $r23;
        java.io.File $r1, $r3, $r6, $r7, $r15, $r16, $r22;
        java.lang.StringBuilder $r10, $r12, $r14, $r20, $r21;

        r0 := @parameter0: org.kohsuke.args4j.opts.FileOption;

        r5 := @parameter1: org.kohsuke.args4j.opts.FileOption;

        r2 := @parameter2: org.kohsuke.args4j.opts.IntOption;

        $r1 = r0.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        if $r1 != null goto label1;

        $r23 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>("No SATLib example file has been provided.");

        staticinvoke <java.lang.System: void exit(int)>(0);

     label1:
        i1 = 0;

        $z0 = r2.<org.kohsuke.args4j.opts.IntOption: boolean isSet>;

        if $z0 == 0 goto label2;

        i1 = r2.<org.kohsuke.args4j.opts.IntOption: int value>;

     label2:
        $r3 = r0.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $r6 = r5.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        if $r6 == null goto label3;

        $r22 = r5.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        r24 = virtualinvoke $r22.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label4;

     label3:
        $r7 = r0.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        $r8 = virtualinvoke $r7.<java.io.File: java.lang.String getName()>();

        $i0 = virtualinvoke $r8.<java.lang.String: int lastIndexOf(int)>(46);

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r10 = new java.lang.StringBuilder;

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9);

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r11);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dat");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = new java.lang.StringBuilder;

        $r15 = r0.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        $r16 = virtualinvoke $r15.<java.io.File: java.io.File getParentFile()>();

        $r17 = virtualinvoke $r16.<java.io.File: java.lang.String getAbsolutePath()>();

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17);

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r18);

        $r19 = <java.io.File: java.lang.String separator>;

        $r20 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        staticinvoke <Main: OutputData exampleModeHelper(java.lang.String,java.lang.String,int,OutputData)>($r4, r24, i1, null);

        return;
    }

    private static void exampleModeDirectory(org.kohsuke.args4j.opts.FileOption, org.kohsuke.args4j.opts.FileOption, org.kohsuke.args4j.opts.IntOption, org.kohsuke.args4j.opts.FileOption)
    {
        org.kohsuke.args4j.opts.FileOption r0, r2, r7;
        java.lang.Exception $r56;
        java.lang.StringBuilder $r14, $r16, $r18, $r22, $r23, $r27, $r30, $r31, $r38, $r40, $r42, $r43, $r45, $r46, $r48, $r49, $r57, $r60;
        org.kohsuke.args4j.opts.IntOption r4;
        java.lang.String $r12, $r13, $r15, $r17, $r21, $r24, $r26, $r28, $r29, $r32, $r39, $r50, $r59, $r61, r62;
        java.io.BufferedWriter $r37;
        java.io.File $r1, $r3, $r5, $r6, $r8, $r9, $r11, $r20, $r25, $r34, $r36, $r52, $r53;
        int[] $r41, $r44, $r47;
        boolean $z0, $z1;
        OutputData $r51, r63;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11;
        java.io.PrintStream $r19, $r33, $r54, $r55, $r58;
        java.io.FileWriter $r35;
        java.io.File[] $r10;

        r0 := @parameter0: org.kohsuke.args4j.opts.FileOption;

        r2 := @parameter1: org.kohsuke.args4j.opts.FileOption;

        r4 := @parameter2: org.kohsuke.args4j.opts.IntOption;

        r7 := @parameter3: org.kohsuke.args4j.opts.FileOption;

        $r1 = r0.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        if $r1 != null goto label01;

        $r55 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r55.<java.io.PrintStream: void println(java.lang.String)>("No SATLib example file has been provided.");

        staticinvoke <java.lang.System: void exit(int)>(0);

     label01:
        $r3 = r2.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        if $r3 == null goto label02;

        $r53 = r2.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        $z0 = virtualinvoke $r53.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label02;

        $r54 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r54.<java.io.PrintStream: void println(java.lang.String)>("The output has to be a path to a directory.");

        staticinvoke <java.lang.System: void exit(int)>(0);

     label02:
        i9 = 0;

        $z1 = r4.<org.kohsuke.args4j.opts.IntOption: boolean isSet>;

        if $z1 == 0 goto label03;

        i9 = r4.<org.kohsuke.args4j.opts.IntOption: int value>;

     label03:
        $r5 = r2.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        if $r5 == null goto label04;

        $r52 = r2.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        r62 = virtualinvoke $r52.<java.io.File: java.lang.String getAbsolutePath()>();

        goto label05;

     label04:
        $r6 = r0.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        r62 = virtualinvoke $r6.<java.io.File: java.lang.String getAbsolutePath()>();

     label05:
        r63 = null;

        $r8 = r7.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        if $r8 == null goto label06;

        $r51 = new OutputData;

        specialinvoke $r51.<OutputData: void <init>(int)>(i9);

        r63 = $r51;

     label06:
        $r9 = r0.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        $r10 = virtualinvoke $r9.<java.io.File: java.io.File[] listFiles()>();

        i10 = 0;

        goto label08;

     label07:
        $r11 = $r10[i10];

        $r12 = virtualinvoke $r11.<java.io.File: java.lang.String getName()>();

        $i1 = virtualinvoke $r12.<java.lang.String: int lastIndexOf(int)>(46);

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r14 = new java.lang.StringBuilder;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r13);

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dat");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Processing ");

        $r20 = $r10[i10];

        $r21 = virtualinvoke $r20.<java.io.File: java.lang.String getName()>();

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void print(java.lang.String)>($r24);

        $r25 = $r10[i10];

        $r26 = virtualinvoke $r25.<java.io.File: java.lang.String getAbsolutePath()>();

        $r27 = new java.lang.StringBuilder;

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r62);

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>($r28);

        $r29 = <java.io.File: java.lang.String separator>;

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <Main: OutputData exampleModeHelper(java.lang.String,java.lang.String,int,OutputData)>($r26, $r32, i9, r63);

        $r33 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>("done!");

        i10 = i10 + 1;

     label08:
        $i0 = lengthof $r10;

        if i10 < $i0 goto label07;

        $r34 = r7.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        if $r34 == null goto label14;

     label09:
        $r35 = new java.io.FileWriter;

        $r36 = r7.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        specialinvoke $r35.<java.io.FileWriter: void <init>(java.io.File)>($r36);

        $r37 = new java.io.BufferedWriter;

        specialinvoke $r37.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r35);

        virtualinvoke $r37.<java.io.BufferedWriter: void write(java.lang.String)>("iteration random minimal loops\n");

        i11 = 1;

        goto label11;

     label10:
        $r38 = new java.lang.StringBuilder;

        $r39 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i11);

        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>($r39);

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r41 = r63.<OutputData: int[] randomTime>;

        $i3 = i11 - 1;

        $i4 = $r41[$i3];

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r44 = r63.<OutputData: int[] minimalTime>;

        $i5 = i11 - 1;

        $i6 = $r44[$i5];

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r47 = r63.<OutputData: int[] iterations>;

        $i7 = i11 - 1;

        $i8 = $r47[$i7];

        $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r37.<java.io.BufferedWriter: void write(java.lang.String)>($r50);

        i11 = i11 + 1;

     label11:
        $i2 = r63.<OutputData: int size>;

        if i11 <= $i2 goto label10;

        virtualinvoke $r37.<java.io.BufferedWriter: void close()>();

     label12:
        goto label14;

     label13:
        $r56 := @caughtexception;

        $r58 = <java.lang.System: java.io.PrintStream err>;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error: ");

        $r59 = virtualinvoke $r56.<java.lang.Exception: java.lang.String getMessage()>();

        $r60 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r58.<java.io.PrintStream: void println(java.lang.String)>($r61);

     label14:
        return;

        catch java.lang.Exception from label09 to label12 with label13;
    }

    private static OutputData exampleModeHelper(java.lang.String, java.lang.String, int, OutputData)
    {
        FormulaStruct $r1;
        java.lang.Integer $r21, $r49;
        java.lang.Long $r19, $r23, $r43, $r46;
        minsolver.MinSolution$MinimizationHistory $r20;
        java.lang.Exception $r50;
        minsolver.MinSolution r56;
        java.lang.StringBuilder $r27, $r29, $r31, $r32, $r34, $r35, $r37, $r38, $r51, $r54;
        kodkod.engine.config.Options $r6, $r7, $r9, $r11, $r12, $r13;
        minsolver.MinSATSolverFactory $r8;
        long $l0, $l1, $l2, $l6, $l7, $l8, $l17, $l18, $l19, $l24, $l25, $l26;
        java.util.ArrayList $r14, $r15, $r16;
        java.lang.String r0, r25, $r28, $r39, $r53, $r55;
        java.io.BufferedWriter $r26;
        kodkod.ast.Formula $r2;
        kodkod.instance.Bounds $r3;
        int[] $r41, $r44, $r47;
        boolean $z0, $z1;
        OutputData r40;
        int $i3, i4, $i5, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i20, $i21, $i22, $i23, $i27, $i28, $i29, $i30, $i31, $i32, i33, $i34;
        java.io.PrintStream $r52;
        java.util.Iterator $r17, $r22;
        java.io.FileWriter $r24;
        minsolver.MinSolver $r5;
        minsolver.MyReporter $r4;
        kodkod.engine.Solver $r10;
        java.lang.Object $r18, $r30, $r33, $r36, $r42, $r45, $r48;

        r0 := @parameter0: java.lang.String;

        r25 := @parameter1: java.lang.String;

        i4 := @parameter2: int;

        r40 := @parameter3: OutputData;

        $r1 = staticinvoke <Main: FormulaStruct exampleFormula(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<FormulaStruct: kodkod.ast.Formula getFmla()>();

        $r3 = virtualinvoke $r1.<FormulaStruct: kodkod.instance.Bounds getBounds()>();

        $r4 = new minsolver.MyReporter;

        specialinvoke $r4.<minsolver.MyReporter: void <init>()>();

        $r5 = new minsolver.MinSolver;

        specialinvoke $r5.<minsolver.MinSolver: void <init>()>();

        $r6 = virtualinvoke $r5.<minsolver.MinSolver: kodkod.engine.config.Options options()>();

        virtualinvoke $r6.<kodkod.engine.config.Options: void setFlatten(boolean)>(1);

        $r7 = virtualinvoke $r5.<minsolver.MinSolver: kodkod.engine.config.Options options()>();

        virtualinvoke $r7.<kodkod.engine.config.Options: void setSymmetryBreaking(int)>(0);

        $r8 = new minsolver.MinSATSolverFactory;

        specialinvoke $r8.<minsolver.MinSATSolverFactory: void <init>(minsolver.MyReporter)>($r4);

        $r9 = virtualinvoke $r5.<minsolver.MinSolver: kodkod.engine.config.Options options()>();

        virtualinvoke $r9.<kodkod.engine.config.Options: void setSolver(kodkod.engine.satlab.SATFactory)>($r8);

        $r10 = new kodkod.engine.Solver;

        specialinvoke $r10.<kodkod.engine.Solver: void <init>()>();

        $r11 = virtualinvoke $r10.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        virtualinvoke $r11.<kodkod.engine.config.Options: void setFlatten(boolean)>(1);

        $r12 = virtualinvoke $r10.<kodkod.engine.Solver: kodkod.engine.config.Options options()>();

        virtualinvoke $r12.<kodkod.engine.config.Options: void setSymmetryBreaking(int)>(0);

        $r13 = virtualinvoke $r5.<minsolver.MinSolver: kodkod.engine.config.Options options()>();

        virtualinvoke $r13.<kodkod.engine.config.Options: void setReporter(kodkod.engine.config.Reporter)>($r4);

        $r14 = new java.util.ArrayList;

        specialinvoke $r14.<java.util.ArrayList: void <init>()>();

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        $r16 = new java.util.ArrayList;

        specialinvoke $r16.<java.util.ArrayList: void <init>()>();

        $r17 = virtualinvoke $r5.<minsolver.MinSolver: java.util.Iterator solveAll(kodkod.ast.Formula,kodkod.instance.Bounds)>($r2, $r3);

        goto label02;

     label01:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r18 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r56 = (minsolver.MinSolution) $r18;

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l1 - $l0;

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke $r15.<java.util.ArrayList: boolean add(java.lang.Object)>($r19);

        $r20 = r56.<minsolver.MinSolution: minsolver.MinSolution$MinimizationHistory minimizationHistory>;

        $i3 = $r20.<minsolver.MinSolution$MinimizationHistory: int SATSolverInvocations>;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r16.<java.util.ArrayList: boolean add(java.lang.Object)>($r21);

        if i4 == 0 goto label02;

        $i5 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        if $i5 != i4 goto label02;

        goto label03;

     label02:
        $z1 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label01;

     label03:
        $r22 = virtualinvoke $r10.<kodkod.engine.Solver: java.util.Iterator solveAll(kodkod.ast.Formula,kodkod.instance.Bounds)>($r2, $r3);

        goto label05;

     label04:
        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l8 = $l7 - $l6;

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l8);

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>($r23);

        $i9 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        $i10 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        if $i9 != $i10 goto label05;

        goto label06;

     label05:
        $z0 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label04;

     label06:
        $r24 = new java.io.FileWriter;

        specialinvoke $r24.<java.io.FileWriter: void <init>(java.lang.String)>(r25);

        $r26 = new java.io.BufferedWriter;

        specialinvoke $r26.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r24);

        virtualinvoke $r26.<java.io.BufferedWriter: void write(java.lang.String)>("iteration random minimal loops\n");

        i33 = 1;

        goto label09;

     label07:
        $r27 = new java.lang.StringBuilder;

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i33);

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>($r28);

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i11 = i33 - 1;

        $r30 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>($i11);

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i12 = i33 - 1;

        $r33 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>($i12);

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $i13 = i33 - 1;

        $r36 = virtualinvoke $r16.<java.util.ArrayList: java.lang.Object get(int)>($i13);

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r26.<java.io.BufferedWriter: void write(java.lang.String)>($r39);

        if r40 == null goto label08;

        $r41 = r40.<OutputData: int[] minimalTime>;

        $i14 = i33 - 1;

        $i15 = $r41[$i14];

        $l17 = (long) $i15;

        $i16 = i33 - 1;

        $r42 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>($i16);

        $r43 = (java.lang.Long) $r42;

        $l18 = virtualinvoke $r43.<java.lang.Long: long longValue()>();

        $l19 = $l17 + $l18;

        $i20 = (int) $l19;

        $r41[$i14] = $i20;

        $r44 = r40.<OutputData: int[] randomTime>;

        $i21 = i33 - 1;

        $i22 = $r44[$i21];

        $l24 = (long) $i22;

        $i23 = i33 - 1;

        $r45 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>($i23);

        $r46 = (java.lang.Long) $r45;

        $l25 = virtualinvoke $r46.<java.lang.Long: long longValue()>();

        $l26 = $l24 + $l25;

        $i27 = (int) $l26;

        $r44[$i21] = $i27;

        $r47 = r40.<OutputData: int[] iterations>;

        $i28 = i33 - 1;

        $i30 = $r47[$i28];

        $i29 = i33 - 1;

        $r48 = virtualinvoke $r16.<java.util.ArrayList: java.lang.Object get(int)>($i29);

        $r49 = (java.lang.Integer) $r48;

        $i31 = virtualinvoke $r49.<java.lang.Integer: int intValue()>();

        $i32 = $i30 + $i31;

        $r47[$i28] = $i32;

     label08:
        i33 = i33 + 1;

     label09:
        $i34 = virtualinvoke $r15.<java.util.ArrayList: int size()>();

        if i33 <= $i34 goto label07;

        virtualinvoke $r26.<java.io.BufferedWriter: void close()>();

     label10:
        goto label12;

     label11:
        $r50 := @caughtexception;

        $r52 = <java.lang.System: java.io.PrintStream err>;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error: ");

        $r53 = virtualinvoke $r50.<java.lang.Exception: java.lang.String getMessage()>();

        $r54 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r52.<java.io.PrintStream: void println(java.lang.String)>($r55);

     label12:
        return r40;

        catch java.lang.Exception from label06 to label10 with label11;
    }

    public static void main(java.lang.String[]) throws kodkod.engine.fol2sat.TrivialFormulaException, org.sat4j.specs.ContradictionException, org.sat4j.specs.TimeoutException
    {
        java.lang.String[] r9;
        org.kohsuke.args4j.opts.IntOption $r0, $r2, $r6;
        org.kohsuke.args4j.opts.StringOption $r3;
        java.lang.String $r10, $r14;
        boolean $z0, $z1;
        org.kohsuke.args4j.opts.FileOption $r4, $r5, $r7;
        java.io.PrintStream $r13;
        org.kohsuke.args4j.CmdLineParser $r8;
        java.io.File $r11;
        org.kohsuke.args4j.CmdLineException $r12;
        org.kohsuke.args4j.opts.BooleanOption $r1;

        r9 := @parameter0: java.lang.String[];

        $r0 = new org.kohsuke.args4j.opts.IntOption;

        specialinvoke $r0.<org.kohsuke.args4j.opts.IntOption: void <init>(java.lang.String)>("-f");

        $r1 = new org.kohsuke.args4j.opts.BooleanOption;

        specialinvoke $r1.<org.kohsuke.args4j.opts.BooleanOption: void <init>(java.lang.String)>("-a");

        $r2 = new org.kohsuke.args4j.opts.IntOption;

        specialinvoke $r2.<org.kohsuke.args4j.opts.IntOption: void <init>(java.lang.String,int)>("-l", 10);

        $r3 = new org.kohsuke.args4j.opts.StringOption;

        specialinvoke $r3.<org.kohsuke.args4j.opts.StringOption: void <init>(java.lang.String,java.lang.String)>("-m", "formula");

        $r4 = new org.kohsuke.args4j.opts.FileOption;

        specialinvoke $r4.<org.kohsuke.args4j.opts.FileOption: void <init>(java.lang.String)>("-i");

        $r5 = new org.kohsuke.args4j.opts.FileOption;

        specialinvoke $r5.<org.kohsuke.args4j.opts.FileOption: void <init>(java.lang.String)>("-o");

        $r6 = new org.kohsuke.args4j.opts.IntOption;

        specialinvoke $r6.<org.kohsuke.args4j.opts.IntOption: void <init>(java.lang.String,int)>("-n", 10);

        $r7 = new org.kohsuke.args4j.opts.FileOption;

        specialinvoke $r7.<org.kohsuke.args4j.opts.FileOption: void <init>(java.lang.String)>("-s");

        $r8 = new org.kohsuke.args4j.CmdLineParser;

        specialinvoke $r8.<org.kohsuke.args4j.CmdLineParser: void <init>()>();

        virtualinvoke $r8.<org.kohsuke.args4j.CmdLineParser: org.kohsuke.args4j.CmdLineOption addOption(org.kohsuke.args4j.CmdLineOption)>($r3);

        virtualinvoke $r8.<org.kohsuke.args4j.CmdLineParser: org.kohsuke.args4j.CmdLineOption addOption(org.kohsuke.args4j.CmdLineOption)>($r0);

        virtualinvoke $r8.<org.kohsuke.args4j.CmdLineParser: org.kohsuke.args4j.CmdLineOption addOption(org.kohsuke.args4j.CmdLineOption)>($r1);

        virtualinvoke $r8.<org.kohsuke.args4j.CmdLineParser: org.kohsuke.args4j.CmdLineOption addOption(org.kohsuke.args4j.CmdLineOption)>($r2);

        virtualinvoke $r8.<org.kohsuke.args4j.CmdLineParser: org.kohsuke.args4j.CmdLineOption addOption(org.kohsuke.args4j.CmdLineOption)>($r4);

        virtualinvoke $r8.<org.kohsuke.args4j.CmdLineParser: org.kohsuke.args4j.CmdLineOption addOption(org.kohsuke.args4j.CmdLineOption)>($r5);

        virtualinvoke $r8.<org.kohsuke.args4j.CmdLineParser: org.kohsuke.args4j.CmdLineOption addOption(org.kohsuke.args4j.CmdLineOption)>($r6);

        virtualinvoke $r8.<org.kohsuke.args4j.CmdLineParser: org.kohsuke.args4j.CmdLineOption addOption(org.kohsuke.args4j.CmdLineOption)>($r7);

     label1:
        virtualinvoke $r8.<org.kohsuke.args4j.CmdLineParser: void parse(java.lang.String[])>(r9);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

        $r13 = <java.lang.System: java.io.PrintStream err>;

        $r14 = virtualinvoke $r12.<org.kohsuke.args4j.CmdLineException: java.lang.String getMessage()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r14);

     label4:
        $r10 = $r3.<org.kohsuke.args4j.opts.StringOption: java.lang.String value>;

        $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("formula");

        if $z0 == 0 goto label5;

        staticinvoke <Main: void formulaMode(org.kohsuke.args4j.opts.IntOption,org.kohsuke.args4j.opts.BooleanOption,org.kohsuke.args4j.opts.IntOption)>($r0, $r1, $r2);

        goto label7;

     label5:
        $r11 = $r4.<org.kohsuke.args4j.opts.FileOption: java.io.File value>;

        $z1 = virtualinvoke $r11.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label6;

        staticinvoke <Main: void exampleModeDirectory(org.kohsuke.args4j.opts.FileOption,org.kohsuke.args4j.opts.FileOption,org.kohsuke.args4j.opts.IntOption,org.kohsuke.args4j.opts.FileOption)>($r4, $r5, $r6, $r7);

        goto label7;

     label6:
        staticinvoke <Main: void exampleModeFile(org.kohsuke.args4j.opts.FileOption,org.kohsuke.args4j.opts.FileOption,org.kohsuke.args4j.opts.IntOption)>($r4, $r5, $r6);

     label7:
        return;

        catch org.kohsuke.args4j.CmdLineException from label1 to label2 with label3;
    }
}
