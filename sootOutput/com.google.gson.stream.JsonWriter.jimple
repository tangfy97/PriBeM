public final class com.google.gson.stream.JsonWriter extends java.lang.Object implements java.io.Closeable
{
    private final java.io.Writer out;
    private final java.util.List stack;
    private java.lang.String indent;
    private java.lang.String separator;
    private boolean lenient;
    private boolean htmlSafe;

    public void <init>(java.io.Writer)
    {
        com.google.gson.stream.JsonScope $r2;
        java.util.List $r3;
        java.io.Writer r4;
        com.google.gson.stream.JsonWriter r0;
        java.lang.NullPointerException $r5;
        java.util.ArrayList $r1;

        r0 := @this: com.google.gson.stream.JsonWriter;

        r4 := @parameter0: java.io.Writer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.google.gson.stream.JsonWriter: java.util.List stack> = $r1;

        $r3 = r0.<com.google.gson.stream.JsonWriter: java.util.List stack>;

        $r2 = <com.google.gson.stream.JsonScope: com.google.gson.stream.JsonScope EMPTY_DOCUMENT>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        r0.<com.google.gson.stream.JsonWriter: java.lang.String separator> = ":";

        if r4 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("out == null");

        throw $r5;

     label1:
        r0.<com.google.gson.stream.JsonWriter: java.io.Writer out> = r4;

        return;
    }

    public void setIndent(java.lang.String)
    {
        int $i0;
        java.lang.String r0;
        com.google.gson.stream.JsonWriter r1;

        r1 := @this: com.google.gson.stream.JsonWriter;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r1.<com.google.gson.stream.JsonWriter: java.lang.String indent> = null;

        r1.<com.google.gson.stream.JsonWriter: java.lang.String separator> = ":";

        goto label2;

     label1:
        r1.<com.google.gson.stream.JsonWriter: java.lang.String indent> = r0;

        r1.<com.google.gson.stream.JsonWriter: java.lang.String separator> = ": ";

     label2:
        return;
    }

    public void setLenient(boolean)
    {
        com.google.gson.stream.JsonWriter r0;
        boolean z0;

        r0 := @this: com.google.gson.stream.JsonWriter;

        z0 := @parameter0: boolean;

        r0.<com.google.gson.stream.JsonWriter: boolean lenient> = z0;

        return;
    }

    public boolean isLenient()
    {
        com.google.gson.stream.JsonWriter r0;
        boolean $z0;

        r0 := @this: com.google.gson.stream.JsonWriter;

        $z0 = r0.<com.google.gson.stream.JsonWriter: boolean lenient>;

        return $z0;
    }

    public void setHtmlSafe(boolean)
    {
        com.google.gson.stream.JsonWriter r0;
        boolean z0;

        r0 := @this: com.google.gson.stream.JsonWriter;

        z0 := @parameter0: boolean;

        r0.<com.google.gson.stream.JsonWriter: boolean htmlSafe> = z0;

        return;
    }

    public boolean isHtmlSafe()
    {
        com.google.gson.stream.JsonWriter r0;
        boolean $z0;

        r0 := @this: com.google.gson.stream.JsonWriter;

        $z0 = r0.<com.google.gson.stream.JsonWriter: boolean htmlSafe>;

        return $z0;
    }

    public com.google.gson.stream.JsonWriter beginArray() throws java.io.IOException
    {
        com.google.gson.stream.JsonScope $r1;
        com.google.gson.stream.JsonWriter r0, $r2;

        r0 := @this: com.google.gson.stream.JsonWriter;

        $r1 = <com.google.gson.stream.JsonScope: com.google.gson.stream.JsonScope EMPTY_ARRAY>;

        $r2 = specialinvoke r0.<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>($r1, "[");

        return $r2;
    }

    public com.google.gson.stream.JsonWriter endArray() throws java.io.IOException
    {
        com.google.gson.stream.JsonScope $r1, $r2;
        com.google.gson.stream.JsonWriter r0, $r3;

        r0 := @this: com.google.gson.stream.JsonWriter;

        $r2 = <com.google.gson.stream.JsonScope: com.google.gson.stream.JsonScope EMPTY_ARRAY>;

        $r1 = <com.google.gson.stream.JsonScope: com.google.gson.stream.JsonScope NONEMPTY_ARRAY>;

        $r3 = specialinvoke r0.<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>($r2, $r1, "]");

        return $r3;
    }

    public com.google.gson.stream.JsonWriter beginObject() throws java.io.IOException
    {
        com.google.gson.stream.JsonScope $r1;
        com.google.gson.stream.JsonWriter r0, $r2;

        r0 := @this: com.google.gson.stream.JsonWriter;

        $r1 = <com.google.gson.stream.JsonScope: com.google.gson.stream.JsonScope EMPTY_OBJECT>;

        $r2 = specialinvoke r0.<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope,java.lang.String)>($r1, "{");

        return $r2;
    }

    public com.google.gson.stream.JsonWriter endObject() throws java.io.IOException
    {
        com.google.gson.stream.JsonScope $r1, $r2;
        com.google.gson.stream.JsonWriter r0, $r3;

        r0 := @this: com.google.gson.stream.JsonWriter;

        $r2 = <com.google.gson.stream.JsonScope: com.google.gson.stream.JsonScope EMPTY_OBJECT>;

        $r1 = <com.google.gson.stream.JsonScope: com.google.gson.stream.JsonScope NONEMPTY_OBJECT>;

        $r3 = specialinvoke r0.<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope,com.google.gson.stream.JsonScope,java.lang.String)>($r2, $r1, "}");

        return $r3;
    }

    private com.google.gson.stream.JsonWriter open(com.google.gson.stream.JsonScope, java.lang.String) throws java.io.IOException
    {
        com.google.gson.stream.JsonScope r1;
        java.util.List $r2;
        java.io.Writer $r4;
        java.lang.String r3;
        com.google.gson.stream.JsonWriter r0;

        r0 := @this: com.google.gson.stream.JsonWriter;

        r1 := @parameter0: com.google.gson.stream.JsonScope;

        r3 := @parameter1: java.lang.String;

        specialinvoke r0.<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>(1);

        $r2 = r0.<com.google.gson.stream.JsonWriter: java.util.List stack>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $r4 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r4.<java.io.Writer: void write(java.lang.String)>(r3);

        return r0;
    }

    private com.google.gson.stream.JsonWriter close(com.google.gson.stream.JsonScope, com.google.gson.stream.JsonScope, java.lang.String) throws java.io.IOException
    {
        java.lang.IllegalStateException $r8;
        int $i0, $i1;
        java.lang.String r5, $r13;
        com.google.gson.stream.JsonWriter r0;
        com.google.gson.stream.JsonScope $r1, r2, r7;
        java.util.List $r3, $r4, $r11;
        java.io.Writer $r6;
        java.lang.StringBuilder $r9, $r10, $r12;

        r0 := @this: com.google.gson.stream.JsonWriter;

        r7 := @parameter0: com.google.gson.stream.JsonScope;

        r2 := @parameter1: com.google.gson.stream.JsonScope;

        r5 := @parameter2: java.lang.String;

        $r1 = specialinvoke r0.<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>();

        if $r1 == r2 goto label1;

        if $r1 == r7 goto label1;

        $r8 = new java.lang.IllegalStateException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nesting problem: ");

        $r11 = r0.<com.google.gson.stream.JsonWriter: java.util.List stack>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label1:
        $r4 = r0.<com.google.gson.stream.JsonWriter: java.util.List stack>;

        $r3 = r0.<com.google.gson.stream.JsonWriter: java.util.List stack>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>($i1);

        if $r1 != r2 goto label2;

        specialinvoke r0.<com.google.gson.stream.JsonWriter: void newline()>();

     label2:
        $r6 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>(r5);

        return r0;
    }

    private com.google.gson.stream.JsonScope peek()
    {
        com.google.gson.stream.JsonScope $r4;
        java.util.List $r1, $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        com.google.gson.stream.JsonWriter r0;

        r0 := @this: com.google.gson.stream.JsonWriter;

        $r2 = r0.<com.google.gson.stream.JsonWriter: java.util.List stack>;

        $r1 = r0.<com.google.gson.stream.JsonWriter: java.util.List stack>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i1);

        $r4 = (com.google.gson.stream.JsonScope) $r3;

        return $r4;
    }

    private void replaceTop(com.google.gson.stream.JsonScope)
    {
        com.google.gson.stream.JsonScope r3;
        java.util.List $r1, $r2;
        int $i0, $i1;
        com.google.gson.stream.JsonWriter r0;

        r0 := @this: com.google.gson.stream.JsonWriter;

        r3 := @parameter0: com.google.gson.stream.JsonScope;

        $r2 = r0.<com.google.gson.stream.JsonWriter: java.util.List stack>;

        $r1 = r0.<com.google.gson.stream.JsonWriter: java.util.List stack>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i1, r3);

        return;
    }

    public com.google.gson.stream.JsonWriter name(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        com.google.gson.stream.JsonWriter r1;
        java.lang.NullPointerException $r2;

        r1 := @this: com.google.gson.stream.JsonWriter;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("name == null");

        throw $r2;

     label1:
        specialinvoke r1.<com.google.gson.stream.JsonWriter: void beforeName()>();

        specialinvoke r1.<com.google.gson.stream.JsonWriter: void string(java.lang.String)>(r0);

        return r1;
    }

    public com.google.gson.stream.JsonWriter value(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        com.google.gson.stream.JsonWriter r1, $r2;

        r1 := @this: com.google.gson.stream.JsonWriter;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r2 = virtualinvoke r1.<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>();

        return $r2;

     label1:
        specialinvoke r1.<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>(0);

        specialinvoke r1.<com.google.gson.stream.JsonWriter: void string(java.lang.String)>(r0);

        return r1;
    }

    public com.google.gson.stream.JsonWriter nullValue() throws java.io.IOException
    {
        java.io.Writer $r1;
        com.google.gson.stream.JsonWriter r0;

        r0 := @this: com.google.gson.stream.JsonWriter;

        specialinvoke r0.<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>(0);

        $r1 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("null");

        return r0;
    }

    public com.google.gson.stream.JsonWriter value(boolean) throws java.io.IOException
    {
        java.io.Writer $r1;
        java.lang.String $r2;
        com.google.gson.stream.JsonWriter r0;
        boolean z0;

        r0 := @this: com.google.gson.stream.JsonWriter;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>(0);

        $r1 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        if z0 == 0 goto label1;

        $r2 = "true";

        goto label2;

     label1:
        $r2 = "false";

     label2:
        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        return r0;
    }

    public com.google.gson.stream.JsonWriter value(double) throws java.io.IOException
    {
        java.lang.IllegalArgumentException $r0;
        java.io.Writer $r6;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4, $r7;
        com.google.gson.stream.JsonWriter r5;
        double d0;
        boolean $z0, $z1;

        r5 := @this: com.google.gson.stream.JsonWriter;

        d0 := @parameter0: double;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Numeric values must be finite, but was ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        specialinvoke r5.<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>(0);

        $r6 = r5.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        $r7 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        virtualinvoke $r6.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r7);

        return r5;
    }

    public com.google.gson.stream.JsonWriter value(long) throws java.io.IOException
    {
        java.io.Writer $r1;
        long l0;
        java.lang.String $r2;
        com.google.gson.stream.JsonWriter r0;

        r0 := @this: com.google.gson.stream.JsonWriter;

        l0 := @parameter0: long;

        specialinvoke r0.<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>(0);

        $r1 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>($r2);

        return r0;
    }

    public com.google.gson.stream.JsonWriter value(java.lang.Number) throws java.io.IOException
    {
        java.lang.IllegalArgumentException $r5;
        java.io.Writer $r3;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r1, $r9;
        java.lang.Number r0;
        com.google.gson.stream.JsonWriter r2, $r4;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: com.google.gson.stream.JsonWriter;

        r0 := @parameter0: java.lang.Number;

        if r0 != null goto label1;

        $r4 = virtualinvoke r2.<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()>();

        return $r4;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $z0 = r2.<com.google.gson.stream.JsonWriter: boolean lenient>;

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("-Infinity");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("Infinity");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("NaN");

        if $z3 == 0 goto label3;

     label2:
        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Numeric values must be finite, but was ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label3:
        specialinvoke r2.<com.google.gson.stream.JsonWriter: void beforeValue(boolean)>(0);

        $r3 = r2.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r3.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r1);

        return r2;
    }

    public void flush() throws java.io.IOException
    {
        java.io.Writer $r1;
        com.google.gson.stream.JsonWriter r0;

        r0 := @this: com.google.gson.stream.JsonWriter;

        $r1 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r1.<java.io.Writer: void flush()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        com.google.gson.stream.JsonScope $r2, $r3;
        java.io.Writer $r1;
        java.io.IOException $r4;
        com.google.gson.stream.JsonWriter r0;

        r0 := @this: com.google.gson.stream.JsonWriter;

        $r1 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r1.<java.io.Writer: void close()>();

        $r2 = specialinvoke r0.<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>();

        $r3 = <com.google.gson.stream.JsonScope: com.google.gson.stream.JsonScope NONEMPTY_DOCUMENT>;

        if $r2 == $r3 goto label1;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Incomplete document");

        throw $r4;

     label1:
        return;
    }

    private void string(java.lang.String) throws java.io.IOException
    {
        java.lang.Integer $r7, $r19;
        boolean $z0;
        java.io.Writer $r1, $r3, $r4, $r6, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r18;
        java.lang.Object[] $r5, $r17;
        int $i0, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String r2, $r8, $r20;
        com.google.gson.stream.JsonWriter r0;
        char $c1;

        r0 := @this: com.google.gson.stream.JsonWriter;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r1.<java.io.Writer: void write(java.lang.String)>("\"");

        i2 = 0;

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

     label01:
        if i2 >= $i0 goto label13;

        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i2);

        $i3 = (int) $c1;

        lookupswitch($i3)
        {
            case 8: goto label04;
            case 9: goto label03;
            case 10: goto label05;
            case 12: goto label07;
            case 13: goto label06;
            case 34: goto label02;
            case 38: goto label08;
            case 39: goto label08;
            case 60: goto label08;
            case 61: goto label08;
            case 62: goto label08;
            case 92: goto label02;
            default: goto label10;
        };

     label02:
        $r9 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r9.<java.io.Writer: void write(int)>(92);

        $r10 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        $i4 = (int) $c1;

        virtualinvoke $r10.<java.io.Writer: void write(int)>($i4);

        goto label12;

     label03:
        $r14 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r14.<java.io.Writer: void write(java.lang.String)>("\\t");

        goto label12;

     label04:
        $r15 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r15.<java.io.Writer: void write(java.lang.String)>("\\b");

        goto label12;

     label05:
        $r13 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r13.<java.io.Writer: void write(java.lang.String)>("\\n");

        goto label12;

     label06:
        $r11 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r11.<java.io.Writer: void write(java.lang.String)>("\\r");

        goto label12;

     label07:
        $r12 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r12.<java.io.Writer: void write(java.lang.String)>("\\f");

        goto label12;

     label08:
        $z0 = r0.<com.google.gson.stream.JsonWriter: boolean htmlSafe>;

        if $z0 == 0 goto label09;

        $r6 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        $r5 = newarray (java.lang.Object)[1];

        $i5 = (int) $c1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r5[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\\u%04x", $r5);

        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>($r8);

        goto label12;

     label09:
        $r4 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        $i6 = (int) $c1;

        virtualinvoke $r4.<java.io.Writer: void write(int)>($i6);

        goto label12;

     label10:
        $i7 = (int) $c1;

        if $i7 > 31 goto label11;

        $r18 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        $r17 = newarray (java.lang.Object)[1];

        $i8 = (int) $c1;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r17[0] = $r19;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\\u%04x", $r17);

        virtualinvoke $r18.<java.io.Writer: void write(java.lang.String)>($r20);

        goto label12;

     label11:
        $r16 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        $i9 = (int) $c1;

        virtualinvoke $r16.<java.io.Writer: void write(int)>($i9);

     label12:
        i2 = i2 + 1;

        goto label01;

     label13:
        $r3 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>("\"");

        return;
    }

    private void newline() throws java.io.IOException
    {
        java.util.List $r3;
        java.io.Writer $r2, $r5;
        int $i0, i1;
        java.lang.String $r1, $r4;
        com.google.gson.stream.JsonWriter r0;

        r0 := @this: com.google.gson.stream.JsonWriter;

        $r1 = r0.<com.google.gson.stream.JsonWriter: java.lang.String indent>;

        if $r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>("\n");

        i1 = 1;

     label2:
        $r3 = r0.<com.google.gson.stream.JsonWriter: java.util.List stack>;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r5 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        $r4 = r0.<com.google.gson.stream.JsonWriter: java.lang.String indent>;

        virtualinvoke $r5.<java.io.Writer: void write(java.lang.String)>($r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private void beforeName() throws java.io.IOException
    {
        com.google.gson.stream.JsonScope $r1, $r2, $r3, $r4;
        java.lang.IllegalStateException $r5;
        java.util.List $r8;
        java.io.Writer $r11;
        java.lang.StringBuilder $r6, $r7, $r9;
        java.lang.String $r10;
        com.google.gson.stream.JsonWriter r0;

        r0 := @this: com.google.gson.stream.JsonWriter;

        $r1 = specialinvoke r0.<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>();

        $r2 = <com.google.gson.stream.JsonScope: com.google.gson.stream.JsonScope NONEMPTY_OBJECT>;

        if $r1 != $r2 goto label1;

        $r11 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r11.<java.io.Writer: void write(int)>(44);

        goto label2;

     label1:
        $r3 = <com.google.gson.stream.JsonScope: com.google.gson.stream.JsonScope EMPTY_OBJECT>;

        if $r1 == $r3 goto label2;

        $r5 = new java.lang.IllegalStateException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nesting problem: ");

        $r8 = r0.<com.google.gson.stream.JsonWriter: java.util.List stack>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label2:
        specialinvoke r0.<com.google.gson.stream.JsonWriter: void newline()>();

        $r4 = <com.google.gson.stream.JsonScope: com.google.gson.stream.JsonScope DANGLING_NAME>;

        specialinvoke r0.<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>($r4);

        return;
    }

    private void beforeValue(boolean) throws java.io.IOException
    {
        java.lang.IllegalStateException $r3, $r10, $r11;
        int[] $r1;
        int $i0, $i1;
        java.lang.String $r4, $r16;
        com.google.gson.stream.JsonWriter r0;
        boolean $z0, z1;
        com.google.gson.stream.JsonScope $r2, $r6, $r8, $r9;
        java.util.List $r14;
        java.io.Writer $r5, $r7;
        java.lang.StringBuilder $r12, $r13, $r15;

        r0 := @this: com.google.gson.stream.JsonWriter;

        z1 := @parameter0: boolean;

        $r1 = <com.google.gson.stream.JsonWriter$1: int[] $SwitchMap$com$google$gson$stream$JsonScope>;

        $r2 = specialinvoke r0.<com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonScope peek()>();

        $i0 = virtualinvoke $r2.<com.google.gson.stream.JsonScope: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            default: goto label7;
        };

     label1:
        $z0 = r0.<com.google.gson.stream.JsonWriter: boolean lenient>;

        if $z0 != 0 goto label2;

        if z1 != 0 goto label2;

        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("JSON must start with an array or an object.");

        throw $r10;

     label2:
        $r9 = <com.google.gson.stream.JsonScope: com.google.gson.stream.JsonScope NONEMPTY_DOCUMENT>;

        specialinvoke r0.<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>($r9);

        goto label8;

     label3:
        $r8 = <com.google.gson.stream.JsonScope: com.google.gson.stream.JsonScope NONEMPTY_ARRAY>;

        specialinvoke r0.<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>($r8);

        specialinvoke r0.<com.google.gson.stream.JsonWriter: void newline()>();

        goto label8;

     label4:
        $r7 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        virtualinvoke $r7.<java.io.Writer: java.io.Writer append(char)>(44);

        specialinvoke r0.<com.google.gson.stream.JsonWriter: void newline()>();

        goto label8;

     label5:
        $r5 = r0.<com.google.gson.stream.JsonWriter: java.io.Writer out>;

        $r4 = r0.<com.google.gson.stream.JsonWriter: java.lang.String separator>;

        virtualinvoke $r5.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r4);

        $r6 = <com.google.gson.stream.JsonScope: com.google.gson.stream.JsonScope NONEMPTY_OBJECT>;

        specialinvoke r0.<com.google.gson.stream.JsonWriter: void replaceTop(com.google.gson.stream.JsonScope)>($r6);

        goto label8;

     label6:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("JSON must have only one top-level value.");

        throw $r3;

     label7:
        $r11 = new java.lang.IllegalStateException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Nesting problem: ");

        $r14 = r0.<com.google.gson.stream.JsonWriter: java.util.List stack>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r16);

        throw $r11;

     label8:
        return;
    }
}
