public abstract class org.apache.batik.ext.awt.image.rendered.AbstractRed extends java.lang.Object implements org.apache.batik.ext.awt.image.rendered.CachableRed
{
    protected java.awt.Rectangle bounds;
    protected java.util.Vector srcs;
    protected java.util.Map props;
    protected java.awt.image.SampleModel sm;
    protected java.awt.image.ColorModel cm;
    protected int tileGridXOff;
    protected int tileGridYOff;
    protected int tileWidth;
    protected int tileHeight;
    protected int minTileX;
    protected int minTileY;
    protected int numXTiles;
    protected int numYTiles;

    protected void <init>()
    {
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    protected void <init>(java.awt.Rectangle, java.util.Map)
    {
        java.awt.Rectangle r1;
        java.util.Map r2;
        int $i0, $i1;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        r1 := @parameter0: java.awt.Rectangle;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = r1.<java.awt.Rectangle: int x>;

        $i0 = r1.<java.awt.Rectangle: int y>;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(null, r1, null, null, $i1, $i0, r2);

        return;
    }

    protected void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, java.util.Map)
    {
        java.awt.Rectangle $r2;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        java.awt.image.SampleModel $r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel $r3;
        java.util.Map r5;
        int $i0, $i1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r5 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = interfaceinvoke r1.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r3 = interfaceinvoke r1.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r4 = interfaceinvoke r1.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i1 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, $r2, $r3, $r4, $i0, $i1, r5);

        return;
    }

    protected void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.Rectangle, java.util.Map)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        java.awt.image.SampleModel $r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel $r3;
        java.util.Map r5;
        int $i0, $i1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r2 := @parameter1: java.awt.Rectangle;

        r5 := @parameter2: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = interfaceinvoke r1.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r4 = interfaceinvoke r1.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i1 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, r2, $r3, $r4, $i0, $i1, r5);

        return;
    }

    protected void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.Rectangle, java.awt.image.ColorModel, java.awt.image.SampleModel, java.util.Map)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        java.awt.image.SampleModel r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel r3;
        java.util.Map r5;
        int $i0, $i1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.awt.image.ColorModel;

        r4 := @parameter3: java.awt.image.SampleModel;

        r5 := @parameter4: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $i0 = 0;

        goto label2;

     label1:
        $i0 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

     label2:
        if r1 != null goto label3;

        $i1 = 0;

        goto label4;

     label3:
        $i1 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

     label4:
        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, r2, r3, r4, $i0, $i1, r5);

        return;
    }

    protected void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.Rectangle, java.awt.image.ColorModel, java.awt.image.SampleModel, int, int, java.util.Map)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        java.awt.image.SampleModel r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel r3;
        java.util.Map r5;
        int i0, i1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.awt.image.ColorModel;

        r4 := @parameter3: java.awt.image.SampleModel;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        r5 := @parameter6: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, r2, r3, r4, i0, i1, r5);

        return;
    }

    protected void init(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.Rectangle, java.awt.image.ColorModel, java.awt.image.SampleModel, int, int, java.util.Map)
    {
        java.awt.Rectangle r9;
        java.util.HashMap $r12;
        java.awt.color.ColorSpace $r5;
        java.awt.image.SampleModel r11;
        java.util.Vector $r1, $r8;
        int[] $r6;
        java.util.Map r3, $r7;
        int i0, i1, $i2, $i3;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        java.awt.image.ComponentColorModel $r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r2;
        java.awt.image.ColorModel r10;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        r2 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r9 := @parameter1: java.awt.Rectangle;

        r10 := @parameter2: java.awt.image.ColorModel;

        r11 := @parameter3: java.awt.image.SampleModel;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        r3 := @parameter6: java.util.Map;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>(int)>(1);

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector srcs> = $r1;

        if r2 == null goto label3;

        $r8 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector srcs>;

        virtualinvoke $r8.<java.util.Vector: boolean add(java.lang.Object)>(r2);

        if r9 != null goto label1;

        r9 = interfaceinvoke r2.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

     label1:
        if r10 != null goto label2;

        r10 = interfaceinvoke r2.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

     label2:
        if r11 != null goto label3;

        r11 = interfaceinvoke r2.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

     label3:
        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds> = r9;

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff> = i0;

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff> = i1;

        $r12 = new java.util.HashMap;

        specialinvoke $r12.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Map props> = $r12;

        if r3 == null goto label4;

        $r7 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Map props>;

        interfaceinvoke $r7.<java.util.Map: void putAll(java.util.Map)>(r3);

     label4:
        if r10 != null goto label5;

        $r4 = new java.awt.image.ComponentColorModel;

        $r5 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r6 = newarray (int)[1];

        $r6[0] = 8;

        specialinvoke $r4.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r5, $r6, 0, 0, 1, 0);

        r10 = $r4;

     label5:
        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.ColorModel cm> = r10;

        if r11 != null goto label6;

        $i3 = r9.<java.awt.Rectangle: int width>;

        $i2 = r9.<java.awt.Rectangle: int height>;

        r11 = virtualinvoke r10.<java.awt.image.ColorModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>($i3, $i2);

     label6:
        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel sm> = r11;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void updateTileGridInfo()>();

        return;
    }

    protected void <init>(java.util.List, java.awt.Rectangle, java.util.Map)
    {
        java.awt.Rectangle r2;
        java.util.List r1;
        java.util.Map r3;
        int $i0, $i1;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = r2.<java.awt.Rectangle: int x>;

        $i0 = r2.<java.awt.Rectangle: int y>;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, r2, null, null, $i1, $i0, r3);

        return;
    }

    protected void <init>(java.util.List, java.awt.Rectangle, java.awt.image.ColorModel, java.awt.image.SampleModel, java.util.Map)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        java.awt.image.SampleModel r4;
        java.util.List r1;
        java.awt.image.ColorModel r3;
        java.util.Map r5;
        int $i0, $i1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.awt.image.ColorModel;

        r4 := @parameter3: java.awt.image.SampleModel;

        r5 := @parameter4: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = r2.<java.awt.Rectangle: int x>;

        $i0 = r2.<java.awt.Rectangle: int y>;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, r2, r3, r4, $i1, $i0, r5);

        return;
    }

    protected void <init>(java.util.List, java.awt.Rectangle, java.awt.image.ColorModel, java.awt.image.SampleModel, int, int, java.util.Map)
    {
        java.awt.Rectangle r2;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        java.awt.image.SampleModel r4;
        java.util.List r1;
        java.awt.image.ColorModel r3;
        java.util.Map r5;
        int i0, i1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.awt.Rectangle;

        r3 := @parameter2: java.awt.image.ColorModel;

        r4 := @parameter3: java.awt.image.SampleModel;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        r5 := @parameter6: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r1, r2, r3, r4, i0, i1, r5);

        return;
    }

    protected void init(java.util.List, java.awt.Rectangle, java.awt.image.ColorModel, java.awt.image.SampleModel, int, int, java.util.Map)
    {
        java.awt.Rectangle r11;
        java.util.HashMap $r14;
        java.awt.color.ColorSpace $r5;
        java.awt.image.SampleModel r13;
        java.util.Vector $r1, $r10;
        int[] $r6;
        java.util.Map r3, $r7;
        int $i0, i1, i2, $i3, $i4;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        java.awt.image.ComponentColorModel $r4;
        java.util.List r2;
        org.apache.batik.ext.awt.image.rendered.CachableRed r9;
        java.awt.image.ColorModel r12;
        java.lang.Object $r8;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        r2 := @parameter0: java.util.List;

        r11 := @parameter1: java.awt.Rectangle;

        r12 := @parameter2: java.awt.image.ColorModel;

        r13 := @parameter3: java.awt.image.SampleModel;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r3 := @parameter6: java.util.Map;

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector srcs> = $r1;

        if r2 == null goto label1;

        $r10 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector srcs>;

        virtualinvoke $r10.<java.util.Vector: boolean addAll(java.util.Collection)>(r2);

     label1:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if $i0 == 0 goto label4;

        $r8 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0);

        r9 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r8;

        if r11 != null goto label2;

        r11 = interfaceinvoke r9.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

     label2:
        if r12 != null goto label3;

        r12 = interfaceinvoke r9.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

     label3:
        if r13 != null goto label4;

        r13 = interfaceinvoke r9.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

     label4:
        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds> = r11;

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff> = i1;

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff> = i2;

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Map props> = $r14;

        if r3 == null goto label5;

        $r7 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Map props>;

        interfaceinvoke $r7.<java.util.Map: void putAll(java.util.Map)>(r3);

     label5:
        if r12 != null goto label6;

        $r4 = new java.awt.image.ComponentColorModel;

        $r5 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1003);

        $r6 = newarray (int)[1];

        $r6[0] = 8;

        specialinvoke $r4.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r5, $r6, 0, 0, 1, 0);

        r12 = $r4;

     label6:
        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.ColorModel cm> = r12;

        if r13 != null goto label7;

        $i4 = r11.<java.awt.Rectangle: int width>;

        $i3 = r11.<java.awt.Rectangle: int height>;

        r13 = virtualinvoke r12.<java.awt.image.ColorModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>($i4, $i3);

     label7:
        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel sm> = r13;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void updateTileGridInfo()>();

        return;
    }

    protected void updateTileGridInfo()
    {
        java.awt.Rectangle $r3, $r4, $r5, $r6, $r7, $r8;
        java.awt.image.SampleModel $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i18, $i19, $i20, $i21;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel sm>;

        $i0 = virtualinvoke $r1.<java.awt.image.SampleModel: int getWidth()>();

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth> = $i0;

        $r2 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel sm>;

        $i1 = virtualinvoke $r2.<java.awt.image.SampleModel: int getHeight()>();

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight> = $i1;

        $r3 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i2 = $r3.<java.awt.Rectangle: int x>;

        $i3 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getXTile(int)>($i2);

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX> = $i3;

        $r4 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i4 = $r4.<java.awt.Rectangle: int y>;

        $i5 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getYTile(int)>($i4);

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY> = $i5;

        $r5 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i7 = $r5.<java.awt.Rectangle: int x>;

        $r6 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i6 = $r6.<java.awt.Rectangle: int width>;

        $i8 = $i7 + $i6;

        i9 = $i8 - 1;

        $i10 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getXTile(int)>(i9);

        $i11 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

        $i12 = $i10 - $i11;

        $i13 = $i12 + 1;

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numXTiles> = $i13;

        $r7 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i15 = $r7.<java.awt.Rectangle: int y>;

        $r8 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i14 = $r8.<java.awt.Rectangle: int height>;

        $i16 = $i15 + $i14;

        i17 = $i16 - 1;

        $i18 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getYTile(int)>(i17);

        $i19 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

        $i20 = $i18 - $i19;

        $i21 = $i20 + 1;

        r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numYTiles> = $i21;

        return;
    }

    public java.awt.Rectangle getBounds()
    {
        java.awt.Rectangle $r0;
        int $i0, $i1, $i2, $i3;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r1;

        r1 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $r0 = new java.awt.Rectangle;

        $i0 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinX()>();

        $i1 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getMinY()>();

        $i2 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getWidth()>();

        $i3 = virtualinvoke r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getHeight()>();

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $r0;
    }

    public java.util.Vector getSources()
    {
        java.util.Vector $r1;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector srcs>;

        return $r1;
    }

    public java.awt.image.ColorModel getColorModel()
    {
        java.awt.image.ColorModel $r1;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.ColorModel cm>;

        return $r1;
    }

    public java.awt.image.SampleModel getSampleModel()
    {
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        java.awt.image.SampleModel $r1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel sm>;

        return $r1;
    }

    public int getMinX()
    {
        int $i0;
        java.awt.Rectangle $r1;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i0 = $r1.<java.awt.Rectangle: int x>;

        return $i0;
    }

    public int getMinY()
    {
        int $i0;
        java.awt.Rectangle $r1;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i0 = $r1.<java.awt.Rectangle: int y>;

        return $i0;
    }

    public int getWidth()
    {
        int $i0;
        java.awt.Rectangle $r1;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i0 = $r1.<java.awt.Rectangle: int width>;

        return $i0;
    }

    public int getHeight()
    {
        int $i0;
        java.awt.Rectangle $r1;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i0 = $r1.<java.awt.Rectangle: int height>;

        return $i0;
    }

    public int getTileWidth()
    {
        int $i0;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $i0 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        return $i0;
    }

    public int getTileHeight()
    {
        int $i0;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $i0 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        return $i0;
    }

    public int getTileGridXOffset()
    {
        int $i0;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $i0 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff>;

        return $i0;
    }

    public int getTileGridYOffset()
    {
        int $i0;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $i0 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff>;

        return $i0;
    }

    public int getMinTileX()
    {
        int $i0;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $i0 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

        return $i0;
    }

    public int getMinTileY()
    {
        int $i0;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $i0 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

        return $i0;
    }

    public int getNumXTiles()
    {
        int $i0;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $i0 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numXTiles>;

        return $i0;
    }

    public int getNumYTiles()
    {
        int $i0;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $i0 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numYTiles>;

        return $i0;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        java.util.Iterator $r5;
        java.awt.image.RenderedImage r7;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        java.util.Vector $r4;
        java.util.Map $r2;
        java.lang.Object $r3, $r6, $r8;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Map props>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r4 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector srcs>;

        $r5 = virtualinvoke $r4.<java.util.AbstractList: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.awt.image.RenderedImage) $r6;

        $r8 = interfaceinvoke r7.<java.awt.image.RenderedImage: java.lang.Object getProperty(java.lang.String)>(r1);

        if $r8 == null goto label3;

        return $r8;

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return null;
    }

    public java.lang.String[] getPropertyNames()
    {
        java.lang.String[] $r7, r8, r9;
        java.util.Vector $r3;
        java.util.Map $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;
        java.util.Iterator $r4;
        java.awt.image.RenderedImage r6;
        java.util.Set $r2;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        java.lang.Object $r5;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Map props>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        r9 = newarray (java.lang.String)[$i0];

        interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r9);

        $r3 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector srcs>;

        $r4 = virtualinvoke $r3.<java.util.AbstractList: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.awt.image.RenderedImage) $r5;

        $r7 = interfaceinvoke r6.<java.awt.image.RenderedImage: java.lang.String[] getPropertyNames()>();

        $i1 = lengthof $r7;

        if $i1 == 0 goto label2;

        $i3 = lengthof r9;

        $i2 = lengthof $r7;

        $i4 = $i3 + $i2;

        r8 = newarray (java.lang.String)[$i4];

        $i5 = lengthof r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, r8, 0, $i5);

        $i7 = lengthof r9;

        $i6 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, r8, $i7, $i6);

        r9 = r8;

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return r9;
    }

    public java.awt.Shape getDependencyRegion(int, java.awt.Rectangle)
    {
        java.lang.IndexOutOfBoundsException $r0;
        java.awt.Rectangle r3, $r4, $r5, $r6, $r7;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r1;
        java.util.Vector $r2;
        int i0, $i1;
        boolean $z0;

        r1 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        i0 := @parameter0: int;

        r3 := @parameter1: java.awt.Rectangle;

        if i0 < 0 goto label1;

        $r2 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector srcs>;

        $i1 = virtualinvoke $r2.<java.util.Vector: int size()>();

        if i0 <= $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Nonexistant source requested.");

        throw $r0;

     label2:
        $r4 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $z0 = virtualinvoke r3.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>($r4);

        if $z0 != 0 goto label3;

        $r7 = new java.awt.Rectangle;

        specialinvoke $r7.<java.awt.Rectangle: void <init>()>();

        return $r7;

     label3:
        $r5 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $r6 = virtualinvoke r3.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r5);

        return $r6;
    }

    public java.awt.Shape getDirtyRegion(int, java.awt.Rectangle)
    {
        java.awt.Rectangle r0, $r2, $r3, $r4, $r5;
        java.lang.IndexOutOfBoundsException $r6;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r1;
        int i0;
        boolean $z0;

        r1 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        i0 := @parameter0: int;

        r0 := @parameter1: java.awt.Rectangle;

        if i0 == 0 goto label1;

        $r6 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("Nonexistant source requested.");

        throw $r6;

     label1:
        $r2 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $z0 = virtualinvoke r0.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>($r2);

        if $z0 != 0 goto label2;

        $r5 = new java.awt.Rectangle;

        specialinvoke $r5.<java.awt.Rectangle: void <init>()>();

        return $r5;

     label2:
        $r3 = r1.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $r4 = virtualinvoke r0.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r3);

        return $r4;
    }

    public java.awt.image.Raster getTile(int, int)
    {
        int i0, i1;
        java.awt.image.WritableRaster $r1, $r2;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.WritableRaster makeTile(int,int)>(i0, i1);

        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>($r1);

        return $r2;
    }

    public java.awt.image.Raster getData()
    {
        java.awt.image.Raster $r2;
        java.awt.Rectangle $r1;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        $r1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.Raster getData(java.awt.Rectangle)>($r1);

        return $r2;
    }

    public java.awt.image.Raster getData(java.awt.Rectangle)
    {
        java.awt.Rectangle r1;
        java.awt.Point $r4;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        java.awt.image.SampleModel $r2, $r3;
        int $i0, $i1, $i2, $i3;
        java.awt.image.WritableRaster $r5, $r6;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        r1 := @parameter0: java.awt.Rectangle;

        $r2 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel sm>;

        $i1 = r1.<java.awt.Rectangle: int width>;

        $i0 = r1.<java.awt.Rectangle: int height>;

        $r3 = virtualinvoke $r2.<java.awt.image.SampleModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>($i1, $i0);

        $r4 = new java.awt.Point;

        $i3 = r1.<java.awt.Rectangle: int x>;

        $i2 = r1.<java.awt.Rectangle: int y>;

        specialinvoke $r4.<java.awt.Point: void <init>(int,int)>($i3, $i2);

        $r5 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r3, $r4);

        $r6 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>($r5);

        return $r6;
    }

    public final int getXTile(int)
    {
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff>;

        i2 = i0 - $i1;

        if i2 < 0 goto label1;

        $i8 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        $i9 = i2 / $i8;

        return $i9;

     label1:
        $i3 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        $i4 = i2 - $i3;

        $i6 = $i4 + 1;

        $i5 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        $i7 = $i6 / $i5;

        return $i7;
    }

    public final int getYTile(int)
    {
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff>;

        i2 = i0 - $i1;

        if i2 < 0 goto label1;

        $i8 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        $i9 = i2 / $i8;

        return $i9;

     label1:
        $i3 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        $i4 = i2 - $i3;

        $i6 = $i4 + 1;

        $i5 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        $i7 = $i6 / $i5;

        return $i7;
    }

    public void copyToRaster(java.awt.image.WritableRaster)
    {
        java.awt.image.SampleModel $r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i31, i32, i33;
        java.awt.image.Raster $r3;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        java.awt.image.WritableRaster r1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        r1 := @parameter0: java.awt.image.WritableRaster;

        $i0 = virtualinvoke r1.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getXTile(int)>($i0);

        i28 = $i1;

        $i2 = virtualinvoke r1.<java.awt.image.Raster: int getMinY()>();

        $i3 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getYTile(int)>($i2);

        i29 = $i3;

        $i4 = virtualinvoke r1.<java.awt.image.Raster: int getMinX()>();

        $i5 = virtualinvoke r1.<java.awt.image.Raster: int getWidth()>();

        $i6 = $i4 + $i5;

        $i7 = $i6 - 1;

        $i8 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getXTile(int)>($i7);

        i30 = $i8;

        $i9 = virtualinvoke r1.<java.awt.image.Raster: int getMinY()>();

        $i10 = virtualinvoke r1.<java.awt.image.Raster: int getHeight()>();

        $i11 = $i9 + $i10;

        $i12 = $i11 - 1;

        $i13 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int getYTile(int)>($i12);

        i31 = $i13;

        $i14 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

        if $i1 >= $i14 goto label01;

        i28 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

     label01:
        $i15 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

        if $i3 >= $i15 goto label02;

        i29 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

     label02:
        $i17 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

        $i16 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numXTiles>;

        $i18 = $i17 + $i16;

        if $i8 < $i18 goto label03;

        $i26 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

        $i25 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numXTiles>;

        $i27 = $i26 + $i25;

        i30 = $i27 - 1;

     label03:
        $i20 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

        $i19 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numYTiles>;

        $i21 = $i20 + $i19;

        if $i13 < $i21 goto label04;

        $i23 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

        $i22 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numYTiles>;

        $i24 = $i23 + $i22;

        i31 = $i24 - 1;

     label04:
        $r2 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel getSampleModel()>();

        $z0 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: boolean is_INT_PACK_Data(java.awt.image.SampleModel,boolean)>($r2, 0);

        i32 = i29;

        goto label10;

     label05:
        i33 = i28;

        goto label09;

     label06:
        $r3 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.Raster getTile(int,int)>(i33, i32);

        if $z0 == 0 goto label07;

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_INT_PACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r3, r1);

        goto label08;

     label07:
        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void copyData_FALLBACK(java.awt.image.Raster,java.awt.image.WritableRaster)>($r3, r1);

     label08:
        i33 = i33 + 1;

     label09:
        if i33 <= i30 goto label06;

        i32 = i32 + 1;

     label10:
        if i32 <= i31 goto label05;

        return;
    }

    public java.awt.image.WritableRaster makeTile(int, int)
    {
        java.lang.IndexOutOfBoundsException $r21;
        java.awt.image.SampleModel $r2;
        java.lang.StringBuffer $r22, $r23, $r24, $r25, $r26, $r27;
        java.lang.String $r28;
        java.awt.Point $r1;
        java.awt.Rectangle $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r30;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, i49, i50, i51, i52, $i53;
        org.apache.batik.ext.awt.image.rendered.AbstractRed r0;
        java.awt.image.WritableRaster $r3, r29;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.AbstractRed;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $i1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

        if i0 < $i1 goto label1;

        $i4 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileX>;

        $i3 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numXTiles>;

        $i5 = $i4 + $i3;

        if i0 >= $i5 goto label1;

        $i6 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

        if i2 < $i6 goto label1;

        $i8 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int minTileY>;

        $i7 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int numYTiles>;

        $i9 = $i8 + $i7;

        if i2 < $i9 goto label2;

     label1:
        $r21 = new java.lang.IndexOutOfBoundsException;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Requested Tile (");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") lies outside the bounds of image");

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r28);

        throw $r21;

     label2:
        $r1 = new java.awt.Point;

        $i12 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff>;

        $i10 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        $i11 = i0 * $i10;

        $i17 = $i12 + $i11;

        $i15 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff>;

        $i13 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        $i14 = i2 * $i13;

        $i16 = $i15 + $i14;

        specialinvoke $r1.<java.awt.Point: void <init>(int,int)>($i17, $i16);

        $r2 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel sm>;

        $r3 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r2, $r1);

        r29 = $r3;

        $i18 = virtualinvoke $r3.<java.awt.image.Raster: int getMinX()>();

        i49 = $i18;

        $i19 = virtualinvoke $r3.<java.awt.image.Raster: int getMinY()>();

        i50 = $i19;

        $i20 = virtualinvoke $r3.<java.awt.image.Raster: int getWidth()>();

        $i21 = $i18 + $i20;

        i51 = $i21 - 1;

        $i22 = virtualinvoke $r3.<java.awt.image.Raster: int getHeight()>();

        $i23 = $i19 + $i22;

        i52 = $i23 - 1;

        $r4 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i24 = $r4.<java.awt.Rectangle: int x>;

        if $i18 < $i24 goto label3;

        $r16 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i43 = $r16.<java.awt.Rectangle: int x>;

        $r17 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i42 = $r17.<java.awt.Rectangle: int width>;

        $i44 = $i43 + $i42;

        if i51 >= $i44 goto label3;

        $r18 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i45 = $r18.<java.awt.Rectangle: int y>;

        if $i19 < $i45 goto label3;

        $r19 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i47 = $r19.<java.awt.Rectangle: int y>;

        $r20 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i46 = $r20.<java.awt.Rectangle: int height>;

        $i48 = $i47 + $i46;

        if i52 < $i48 goto label8;

     label3:
        $r30 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i53 = $r30.<java.awt.Rectangle: int x>;

        if $i18 >= $i53 goto label4;

        $r15 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        i49 = $r15.<java.awt.Rectangle: int x>;

     label4:
        $r5 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i25 = $r5.<java.awt.Rectangle: int y>;

        if $i19 >= $i25 goto label5;

        $r14 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        i50 = $r14.<java.awt.Rectangle: int y>;

     label5:
        $r6 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i27 = $r6.<java.awt.Rectangle: int x>;

        $r7 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i26 = $r7.<java.awt.Rectangle: int width>;

        $i28 = $i27 + $i26;

        if i51 < $i28 goto label6;

        $r12 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i40 = $r12.<java.awt.Rectangle: int x>;

        $r13 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i39 = $r13.<java.awt.Rectangle: int width>;

        $i41 = $i40 + $i39;

        i51 = $i41 - 1;

     label6:
        $r8 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i30 = $r8.<java.awt.Rectangle: int y>;

        $r9 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i29 = $r9.<java.awt.Rectangle: int height>;

        $i31 = $i30 + $i29;

        if i52 < $i31 goto label7;

        $r10 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i37 = $r10.<java.awt.Rectangle: int y>;

        $r11 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.Rectangle bounds>;

        $i36 = $r11.<java.awt.Rectangle: int height>;

        $i38 = $i37 + $i36;

        i52 = $i38 - 1;

     label7:
        $i32 = i51 - i49;

        $i35 = $i32 + 1;

        $i33 = i52 - i50;

        $i34 = $i33 + 1;

        r29 = virtualinvoke $r3.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>(i49, i50, $i35, $i34, i49, i50, null);

     label8:
        return r29;
    }

    public static void copyBand(java.awt.image.Raster, int, java.awt.image.WritableRaster, int)
    {
        java.awt.Rectangle $r0, $r2, $r4;
        int[] $r5, r6;
        java.awt.image.Raster r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, i14, $i15, $i16, i17;
        java.awt.image.WritableRaster r3;

        r1 := @parameter0: java.awt.image.Raster;

        i11 := @parameter1: int;

        r3 := @parameter2: java.awt.image.WritableRaster;

        i14 := @parameter3: int;

        $r0 = new java.awt.Rectangle;

        $i0 = virtualinvoke r1.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r1.<java.awt.image.Raster: int getMinY()>();

        $i2 = virtualinvoke r1.<java.awt.image.Raster: int getWidth()>();

        $i3 = virtualinvoke r1.<java.awt.image.Raster: int getHeight()>();

        specialinvoke $r0.<java.awt.Rectangle: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        $r2 = new java.awt.Rectangle;

        $i4 = virtualinvoke r3.<java.awt.image.Raster: int getMinX()>();

        $i5 = virtualinvoke r3.<java.awt.image.Raster: int getMinY()>();

        $i6 = virtualinvoke r3.<java.awt.image.Raster: int getWidth()>();

        $i7 = virtualinvoke r3.<java.awt.image.Raster: int getHeight()>();

        specialinvoke $r2.<java.awt.Rectangle: void <init>(int,int,int,int)>($i4, $i5, $i6, $i7);

        $r4 = virtualinvoke $r0.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r2);

        r6 = null;

        i17 = $r4.<java.awt.Rectangle: int y>;

        goto label2;

     label1:
        $i13 = $r4.<java.awt.Rectangle: int x>;

        $i12 = $r4.<java.awt.Rectangle: int width>;

        $r5 = virtualinvoke r1.<java.awt.image.Raster: int[] getSamples(int,int,int,int,int,int[])>($i13, i17, $i12, 1, i11, r6);

        r6 = $r5;

        $i16 = $r4.<java.awt.Rectangle: int x>;

        $i15 = $r4.<java.awt.Rectangle: int width>;

        virtualinvoke r3.<java.awt.image.WritableRaster: void setSamples(int,int,int,int,int,int[])>($i16, i17, $i15, 1, i14, $r5);

        i17 = i17 + 1;

     label2:
        $i9 = $r4.<java.awt.Rectangle: int y>;

        $i8 = $r4.<java.awt.Rectangle: int height>;

        $i10 = $i9 + $i8;

        if i17 < $i10 goto label1;

        return;
    }

    public abstract java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster);
}
