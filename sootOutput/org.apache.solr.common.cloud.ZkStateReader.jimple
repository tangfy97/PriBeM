public class org.apache.solr.common.cloud.ZkStateReader extends java.lang.Object
{
    private static org.slf4j.Logger log;
    public static final java.lang.String BASE_URL_PROP;
    public static final java.lang.String NODE_NAME_PROP;
    public static final java.lang.String CORE_NODE_NAME_PROP;
    public static final java.lang.String ROLES_PROP;
    public static final java.lang.String STATE_PROP;
    public static final java.lang.String CORE_NAME_PROP;
    public static final java.lang.String COLLECTION_PROP;
    public static final java.lang.String SHARD_ID_PROP;
    public static final java.lang.String SHARD_RANGE_PROP;
    public static final java.lang.String SHARD_STATE_PROP;
    public static final java.lang.String NUM_SHARDS_PROP;
    public static final java.lang.String LEADER_PROP;
    public static final java.lang.String COLLECTIONS_ZKNODE;
    public static final java.lang.String LIVE_NODES_ZKNODE;
    public static final java.lang.String ALIASES;
    public static final java.lang.String CLUSTER_STATE;
    public static final java.lang.String RECOVERING;
    public static final java.lang.String RECOVERY_FAILED;
    public static final java.lang.String ACTIVE;
    public static final java.lang.String DOWN;
    public static final java.lang.String SYNC;
    private volatile org.apache.solr.common.cloud.ClusterState clusterState;
    private static final long SOLRCLOUD_UPDATE_DELAY;
    public static final java.lang.String LEADER_ELECT_ZKNODE;
    public static final java.lang.String SHARD_LEADERS_ZKNODE;
    private java.util.concurrent.ScheduledExecutorService updateCloudExecutor;
    private boolean clusterStateUpdateScheduled;
    private org.apache.solr.common.cloud.SolrZkClient zkClient;
    private boolean closeClient;
    private org.apache.solr.common.cloud.ZkCmdExecutor cmdExecutor;
    private org.apache.solr.common.cloud.Aliases aliases;
    private volatile boolean closed;

    public static byte[] toJSON(java.lang.Object)
    {
        byte[] $r3;
        org.noggit.CharArr $r0;
        java.lang.Object r2;
        org.noggit.JSONWriter $r1;

        r2 := @parameter0: java.lang.Object;

        $r0 = new org.noggit.CharArr;

        specialinvoke $r0.<org.noggit.CharArr: void <init>()>();

        $r1 = new org.noggit.JSONWriter;

        specialinvoke $r1.<org.noggit.JSONWriter: void <init>(org.noggit.CharArr,int)>($r0, 2);

        virtualinvoke $r1.<org.noggit.JSONWriter: void write(java.lang.Object)>(r2);

        $r3 = staticinvoke <org.apache.solr.common.cloud.ZkStateReader: byte[] toUTF8(org.noggit.CharArr)>($r0);

        return $r3;
    }

    public static byte[] toUTF8(org.noggit.CharArr)
    {
        byte[] r1, $r2;
        int $i0, $i1, $i2, $i3;
        org.noggit.CharArr r0;

        r0 := @parameter0: org.noggit.CharArr;

        $i0 = virtualinvoke r0.<org.noggit.CharArr: int size()>();

        $i1 = $i0 << 2;

        r1 = newarray (byte)[$i1];

        $i2 = virtualinvoke r0.<org.noggit.CharArr: int size()>();

        $i3 = staticinvoke <org.apache.solr.common.util.ByteUtils: int UTF16toUTF8(java.lang.CharSequence,int,int,byte[],int)>(r0, 0, $i2, r1, 0);

        $r2 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r1, $i3);

        return $r2;
    }

    public static java.lang.Object fromJSON(byte[])
    {
        byte[] r1;
        org.noggit.JSONParser $r2;
        org.noggit.CharArr $r0;
        java.io.IOException $r5;
        java.lang.RuntimeException $r6;
        int $i0, $i1, $i2;
        char[] $r3;
        java.lang.Object $r4;

        r1 := @parameter0: byte[];

        $r0 = new org.noggit.CharArr;

        specialinvoke $r0.<org.noggit.CharArr: void <init>()>();

        $i0 = lengthof r1;

        staticinvoke <org.apache.solr.common.util.ByteUtils: void UTF8toUTF16(byte[],int,int,org.noggit.CharArr)>(r1, 0, $i0, $r0);

        $r2 = new org.noggit.JSONParser;

        $r3 = virtualinvoke $r0.<org.noggit.CharArr: char[] getArray()>();

        $i1 = virtualinvoke $r0.<org.noggit.CharArr: int getStart()>();

        $i2 = virtualinvoke $r0.<org.noggit.CharArr: int length()>();

        specialinvoke $r2.<org.noggit.JSONParser: void <init>(char[],int,int)>($r3, $i1, $i2);

     label1:
        $r4 = staticinvoke <org.noggit.ObjectBuilder: java.lang.Object getVal(org.noggit.JSONParser)>($r2);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void <init>(org.apache.solr.common.cloud.SolrZkClient)
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        org.apache.solr.common.cloud.Aliases $r3;
        org.apache.solr.common.cloud.ZkStateReader$ZKTF $r1;
        java.util.concurrent.ScheduledExecutorService $r2;
        int $i0;
        org.apache.solr.common.cloud.SolrZkClient r4;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        r4 := @parameter0: org.apache.solr.common.cloud.SolrZkClient;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.solr.common.cloud.ZkStateReader$ZKTF;

        specialinvoke $r1.<org.apache.solr.common.cloud.ZkStateReader$ZKTF: void <init>(org.apache.solr.common.cloud.ZkStateReader$1)>(null);

        $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)>(1, $r1);

        r0.<org.apache.solr.common.cloud.ZkStateReader: java.util.concurrent.ScheduledExecutorService updateCloudExecutor> = $r2;

        r0.<org.apache.solr.common.cloud.ZkStateReader: boolean closeClient> = 0;

        $r3 = new org.apache.solr.common.cloud.Aliases;

        specialinvoke $r3.<org.apache.solr.common.cloud.Aliases: void <init>()>();

        r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.Aliases aliases> = $r3;

        r0.<org.apache.solr.common.cloud.ZkStateReader: boolean closed> = 0;

        r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.SolrZkClient zkClient> = r4;

        $i0 = virtualinvoke r4.<org.apache.solr.common.cloud.SolrZkClient: int getZkClientTimeout()>();

        specialinvoke r0.<org.apache.solr.common.cloud.ZkStateReader: void initZkCmdExecutor(int)>($i0);

        return;
    }

    public void <init>(java.lang.String, int, int) throws java.lang.InterruptedException, java.util.concurrent.TimeoutException, java.io.IOException
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        org.apache.solr.common.cloud.Aliases $r3;
        org.apache.solr.common.cloud.ZkStateReader$1 $r6;
        org.apache.solr.common.cloud.ZkStateReader$ZKTF $r1;
        java.util.concurrent.ScheduledExecutorService $r2;
        int i0, i1;
        java.lang.String r5;
        org.apache.solr.common.cloud.SolrZkClient $r4;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        r5 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.solr.common.cloud.ZkStateReader$ZKTF;

        specialinvoke $r1.<org.apache.solr.common.cloud.ZkStateReader$ZKTF: void <init>(org.apache.solr.common.cloud.ZkStateReader$1)>(null);

        $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)>(1, $r1);

        r0.<org.apache.solr.common.cloud.ZkStateReader: java.util.concurrent.ScheduledExecutorService updateCloudExecutor> = $r2;

        r0.<org.apache.solr.common.cloud.ZkStateReader: boolean closeClient> = 0;

        $r3 = new org.apache.solr.common.cloud.Aliases;

        specialinvoke $r3.<org.apache.solr.common.cloud.Aliases: void <init>()>();

        r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.Aliases aliases> = $r3;

        r0.<org.apache.solr.common.cloud.ZkStateReader: boolean closed> = 0;

        r0.<org.apache.solr.common.cloud.ZkStateReader: boolean closeClient> = 1;

        specialinvoke r0.<org.apache.solr.common.cloud.ZkStateReader: void initZkCmdExecutor(int)>(i0);

        $r4 = new org.apache.solr.common.cloud.SolrZkClient;

        $r6 = new org.apache.solr.common.cloud.ZkStateReader$1;

        specialinvoke $r6.<org.apache.solr.common.cloud.ZkStateReader$1: void <init>(org.apache.solr.common.cloud.ZkStateReader)>(r0);

        specialinvoke $r4.<org.apache.solr.common.cloud.SolrZkClient: void <init>(java.lang.String,int,int,org.apache.solr.common.cloud.OnReconnect)>(r5, i0, i1, $r6);

        r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.SolrZkClient zkClient> = $r4;

        return;
    }

    private void initZkCmdExecutor(int)
    {
        int i0;
        org.apache.solr.common.cloud.ZkStateReader r0;
        org.apache.solr.common.cloud.ZkCmdExecutor $r1;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        i0 := @parameter0: int;

        $r1 = new org.apache.solr.common.cloud.ZkCmdExecutor;

        specialinvoke $r1.<org.apache.solr.common.cloud.ZkCmdExecutor: void <init>(int)>(i0);

        r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ZkCmdExecutor cmdExecutor> = $r1;

        return;
    }

    public void updateClusterState(boolean) throws org.apache.zookeeper.KeeperException, java.lang.InterruptedException
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        boolean z0;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.apache.solr.common.cloud.ZkStateReader: void updateClusterState(boolean,boolean)>(z0, 0);

        return;
    }

    public void updateLiveNodes() throws org.apache.zookeeper.KeeperException, java.lang.InterruptedException
    {
        org.apache.solr.common.cloud.ZkStateReader r0;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        specialinvoke r0.<org.apache.solr.common.cloud.ZkStateReader: void updateClusterState(boolean,boolean)>(1, 1);

        return;
    }

    public org.apache.solr.common.cloud.Aliases getAliases()
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        org.apache.solr.common.cloud.Aliases $r1;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        $r1 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.Aliases aliases>;

        return $r1;
    }

    public synchronized void createClusterStateWatchersAndUpdate() throws org.apache.zookeeper.KeeperException, java.lang.InterruptedException
    {
        java.lang.Throwable $r18, $r19;
        org.apache.solr.common.cloud.ZkCmdExecutor $r3, $r5;
        org.apache.solr.common.cloud.ClusterState $r15;
        java.util.HashSet $r13;
        org.apache.solr.common.cloud.ZkStateReader r0;
        org.slf4j.Logger $r6;
        org.apache.solr.common.cloud.ZkStateReader$3 $r10;
        java.util.List $r12;
        org.apache.solr.common.cloud.ZkStateReader$4 $r16;
        org.apache.solr.common.cloud.ZkStateReader$2 $r7;
        java.lang.Object $r1, $r9;
        org.apache.solr.common.cloud.SolrZkClient $r2, $r4, $r8, $r11, $r14, $r17;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        $r1 = virtualinvoke r0.<org.apache.solr.common.cloud.ZkStateReader: java.lang.Object getUpdateLock()>();

        entermonitor $r1;

     label01:
        $r3 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ZkCmdExecutor cmdExecutor>;

        $r2 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.SolrZkClient zkClient>;

        virtualinvoke $r3.<org.apache.solr.common.cloud.ZkCmdExecutor: void ensureExists(java.lang.String,org.apache.solr.common.cloud.SolrZkClient)>("/clusterstate.json", $r2);

        $r5 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ZkCmdExecutor cmdExecutor>;

        $r4 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.SolrZkClient zkClient>;

        virtualinvoke $r5.<org.apache.solr.common.cloud.ZkCmdExecutor: void ensureExists(java.lang.String,org.apache.solr.common.cloud.SolrZkClient)>("/aliases.json", $r4);

        $r6 = <org.apache.solr.common.cloud.ZkStateReader: org.slf4j.Logger log>;

        interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>("Updating cluster state from ZooKeeper... ");

        $r8 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.SolrZkClient zkClient>;

        $r7 = new org.apache.solr.common.cloud.ZkStateReader$2;

        specialinvoke $r7.<org.apache.solr.common.cloud.ZkStateReader$2: void <init>(org.apache.solr.common.cloud.ZkStateReader)>(r0);

        virtualinvoke $r8.<org.apache.solr.common.cloud.SolrZkClient: org.apache.zookeeper.data.Stat exists(java.lang.String,org.apache.zookeeper.Watcher,boolean)>("/clusterstate.json", $r7, 1);

        exitmonitor $r1;

     label02:
        goto label05;

     label03:
        $r19 := @caughtexception;

        exitmonitor $r1;

     label04:
        throw $r19;

     label05:
        $r9 = virtualinvoke r0.<org.apache.solr.common.cloud.ZkStateReader: java.lang.Object getUpdateLock()>();

        entermonitor $r9;

     label06:
        $r11 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.SolrZkClient zkClient>;

        $r10 = new org.apache.solr.common.cloud.ZkStateReader$3;

        specialinvoke $r10.<org.apache.solr.common.cloud.ZkStateReader$3: void <init>(org.apache.solr.common.cloud.ZkStateReader)>(r0);

        $r12 = virtualinvoke $r11.<org.apache.solr.common.cloud.SolrZkClient: java.util.List getChildren(java.lang.String,org.apache.zookeeper.Watcher,boolean)>("/live_nodes", $r10, 1);

        $r13 = new java.util.HashSet;

        specialinvoke $r13.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r13.<java.util.Set: boolean addAll(java.util.Collection)>($r12);

        $r14 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.SolrZkClient zkClient>;

        $r15 = staticinvoke <org.apache.solr.common.cloud.ClusterState: org.apache.solr.common.cloud.ClusterState load(org.apache.solr.common.cloud.SolrZkClient,java.util.Set)>($r14, $r13);

        r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ClusterState clusterState> = $r15;

        $r17 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.SolrZkClient zkClient>;

        $r16 = new org.apache.solr.common.cloud.ZkStateReader$4;

        specialinvoke $r16.<org.apache.solr.common.cloud.ZkStateReader$4: void <init>(org.apache.solr.common.cloud.ZkStateReader)>(r0);

        virtualinvoke $r17.<org.apache.solr.common.cloud.SolrZkClient: org.apache.zookeeper.data.Stat exists(java.lang.String,org.apache.zookeeper.Watcher,boolean)>("/aliases.json", $r16, 1);

        exitmonitor $r9;

     label07:
        goto label10;

     label08:
        $r18 := @caughtexception;

        exitmonitor $r9;

     label09:
        throw $r18;

     label10:
        virtualinvoke r0.<org.apache.solr.common.cloud.ZkStateReader: void updateAliases()>();

        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    private synchronized void updateClusterState(boolean, boolean) throws org.apache.zookeeper.KeeperException, java.lang.InterruptedException
    {
        java.lang.Throwable $r19;
        org.apache.solr.common.cloud.ClusterState $r12, $r13, $r15, r20;
        long $l0;
        java.lang.Integer $r11, $r14;
        java.util.HashSet $r9;
        java.util.Map $r16;
        java.util.concurrent.ScheduledExecutorService $r3;
        int $i1;
        boolean z0, $z1, z2;
        org.apache.solr.common.cloud.ZkStateReader r0;
        org.slf4j.Logger $r1, $r5, $r10, $r17;
        org.apache.solr.common.cloud.ZkStateReader$5 $r2;
        java.util.concurrent.TimeUnit $r4;
        java.util.List $r8;
        java.lang.Object $r6;
        org.apache.solr.common.cloud.SolrZkClient $r7, $r18;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        z0 := @parameter0: boolean;

        z2 := @parameter1: boolean;

        if z0 == 0 goto label08;

        $r6 = virtualinvoke r0.<org.apache.solr.common.cloud.ZkStateReader: java.lang.Object getUpdateLock()>();

        entermonitor $r6;

     label01:
        $r7 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.SolrZkClient zkClient>;

        $r8 = virtualinvoke $r7.<org.apache.solr.common.cloud.SolrZkClient: java.util.List getChildren(java.lang.String,org.apache.zookeeper.Watcher,boolean)>("/live_nodes", null, 1);

        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r9.<java.util.Set: boolean addAll(java.util.Collection)>($r8);

        if z2 != 0 goto label02;

        $r17 = <org.apache.solr.common.cloud.ZkStateReader: org.slf4j.Logger log>;

        interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String)>("Updating cloud state from ZooKeeper... ");

        $r18 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.SolrZkClient zkClient>;

        r20 = staticinvoke <org.apache.solr.common.cloud.ClusterState: org.apache.solr.common.cloud.ClusterState load(org.apache.solr.common.cloud.SolrZkClient,java.util.Set)>($r18, $r9);

        goto label03;

     label02:
        $r10 = <org.apache.solr.common.cloud.ZkStateReader: org.slf4j.Logger log>;

        $i1 = interfaceinvoke $r9.<java.util.Set: int size()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Updating live nodes from ZooKeeper... ({})", $r11);

        $r12 = new org.apache.solr.common.cloud.ClusterState;

        $r13 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ClusterState clusterState>;

        $r14 = virtualinvoke $r13.<org.apache.solr.common.cloud.ClusterState: java.lang.Integer getZkClusterStateVersion()>();

        $r15 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ClusterState clusterState>;

        $r16 = virtualinvoke $r15.<org.apache.solr.common.cloud.ClusterState: java.util.Map getCollectionStates()>();

        specialinvoke $r12.<org.apache.solr.common.cloud.ClusterState: void <init>(java.lang.Integer,java.util.Set,java.util.Map)>($r14, $r9, $r16);

        r20 = $r12;

     label03:
        r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ClusterState clusterState> = r20;

        exitmonitor $r6;

     label04:
        goto label07;

     label05:
        $r19 := @caughtexception;

        exitmonitor $r6;

     label06:
        throw $r19;

     label07:
        goto label10;

     label08:
        $z1 = r0.<org.apache.solr.common.cloud.ZkStateReader: boolean clusterStateUpdateScheduled>;

        if $z1 == 0 goto label09;

        $r5 = <org.apache.solr.common.cloud.ZkStateReader: org.slf4j.Logger log>;

        interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>("Cloud state update for ZooKeeper already scheduled");

        return;

     label09:
        $r1 = <org.apache.solr.common.cloud.ZkStateReader: org.slf4j.Logger log>;

        interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String)>("Scheduling cloud state update from ZooKeeper...");

        r0.<org.apache.solr.common.cloud.ZkStateReader: boolean clusterStateUpdateScheduled> = 1;

        $r3 = r0.<org.apache.solr.common.cloud.ZkStateReader: java.util.concurrent.ScheduledExecutorService updateCloudExecutor>;

        $r2 = new org.apache.solr.common.cloud.ZkStateReader$5;

        specialinvoke $r2.<org.apache.solr.common.cloud.ZkStateReader$5: void <init>(org.apache.solr.common.cloud.ZkStateReader,boolean)>(r0, z2);

        $l0 = <org.apache.solr.common.cloud.ZkStateReader: long SOLRCLOUD_UPDATE_DELAY>;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke $r3.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r2, $l0, $r4);

     label10:
        return;

        catch java.lang.Throwable from label01 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
    }

    public org.apache.solr.common.cloud.ClusterState getClusterState()
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        org.apache.solr.common.cloud.ClusterState $r1;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        $r1 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ClusterState clusterState>;

        return $r1;
    }

    public java.lang.Object getUpdateLock()
    {
        org.apache.solr.common.cloud.ZkStateReader r0;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        return r0;
    }

    public void close()
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        org.apache.solr.common.cloud.SolrZkClient $r1;
        boolean $z0;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        r0.<org.apache.solr.common.cloud.ZkStateReader: boolean closed> = 1;

        $z0 = r0.<org.apache.solr.common.cloud.ZkStateReader: boolean closeClient>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.SolrZkClient zkClient>;

        virtualinvoke $r1.<org.apache.solr.common.cloud.SolrZkClient: void close()>();

     label1:
        return;
    }

    public java.lang.String getLeaderUrl(java.lang.String, java.lang.String, int) throws java.lang.InterruptedException, org.apache.zookeeper.KeeperException
    {
        org.apache.solr.common.cloud.ZkStateReader r1;
        org.apache.solr.common.cloud.ZkCoreNodeProps $r0;
        int i0;
        java.lang.String r2, r3, $r5;
        org.apache.solr.common.cloud.Replica $r4;

        r1 := @this: org.apache.solr.common.cloud.ZkStateReader;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r0 = new org.apache.solr.common.cloud.ZkCoreNodeProps;

        $r4 = virtualinvoke r1.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.Replica getLeaderRetry(java.lang.String,java.lang.String,int)>(r2, r3, i0);

        specialinvoke $r0.<org.apache.solr.common.cloud.ZkCoreNodeProps: void <init>(org.apache.solr.common.cloud.ZkNodeProps)>($r4);

        $r5 = virtualinvoke $r0.<org.apache.solr.common.cloud.ZkCoreNodeProps: java.lang.String getCoreUrl()>();

        return $r5;
    }

    public org.apache.solr.common.cloud.Replica getLeaderRetry(java.lang.String, java.lang.String) throws java.lang.InterruptedException
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        java.lang.String r1, r2;
        org.apache.solr.common.cloud.Replica $r3;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.Replica getLeaderRetry(java.lang.String,java.lang.String,int)>(r1, r2, 1000);

        return $r3;
    }

    public org.apache.solr.common.cloud.Replica getLeaderRetry(java.lang.String, java.lang.String, int) throws java.lang.InterruptedException
    {
        org.apache.solr.common.cloud.ClusterState $r11, $r12, $r14;
        long $l0, $l2, l3, $l4;
        org.apache.solr.common.SolrException $r17;
        byte $b5;
        int i1, $i6;
        java.lang.String r4, r7, $r9, $r15;
        boolean $z0, $z1;
        org.apache.solr.common.cloud.ZkStateReader r10;
        org.apache.solr.common.SolrException$ErrorCode $r2;
        org.apache.solr.common.cloud.Replica $r13;
        java.lang.StringBuilder $r3, $r5, $r6, $r8, $r16;

        r10 := @this: org.apache.solr.common.cloud.ZkStateReader;

        r4 := @parameter0: java.lang.String;

        r7 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = (long) i1;

        l3 = $l0 + $l2;

     label1:
        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $b5 = $l4 cmp l3;

        $i6 = (int) $b5;

        if $i6 >= 0 goto label3;

        $z0 = r10.<org.apache.solr.common.cloud.ZkStateReader: boolean closed>;

        if $z0 != 0 goto label3;

        $r11 = r10.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ClusterState clusterState>;

        if $r11 == null goto label2;

        $r12 = r10.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ClusterState clusterState>;

        $r13 = virtualinvoke $r12.<org.apache.solr.common.cloud.ClusterState: org.apache.solr.common.cloud.Replica getLeader(java.lang.String,java.lang.String)>(r4, r7);

        if $r13 == null goto label2;

        $r14 = virtualinvoke r10.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ClusterState getClusterState()>();

        $r15 = virtualinvoke $r13.<org.apache.solr.common.cloud.Replica: java.lang.String getNodeName()>();

        $z1 = virtualinvoke $r14.<org.apache.solr.common.cloud.ClusterState: boolean liveNodesContain(java.lang.String)>($r15);

        if $z1 == 0 goto label2;

        return $r13;

     label2:
        staticinvoke <java.lang.Thread: void sleep(long)>(50L);

        goto label1;

     label3:
        $r17 = new org.apache.solr.common.SolrException;

        $r2 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode SERVICE_UNAVAILABLE>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No registered leader was found, collection:");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" slice:");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.apache.solr.common.SolrException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String)>($r2, $r9);

        throw $r17;
    }

    public static java.lang.String getShardLeadersPath(java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r5, $r7, $r9, $r10, $r11;
        java.lang.String r2, r6, $r8, $r12;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/collections/");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("leaders");

        if r6 == null goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r12 = "";

     label2:
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public java.util.List getReplicaProps(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        java.util.List $r5;
        java.lang.String r1, r2, r3, r4;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        $r5 = virtualinvoke r0.<org.apache.solr.common.cloud.ZkStateReader: java.util.List getReplicaProps(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4, null);

        return $r5;
    }

    public java.util.List getReplicaProps(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        java.util.List $r6;
        java.lang.String r1, r2, r3, r4, r5;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        $r6 = virtualinvoke r0.<org.apache.solr.common.cloud.ZkStateReader: java.util.List getReplicaProps(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4, r5, null);

        return $r6;
    }

    public java.util.List getReplicaProps(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.solr.common.cloud.ClusterState r1;
        java.util.Map $r3, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.solr.common.cloud.ZkStateReader r0;
        org.apache.solr.common.cloud.ZooKeeperException $r25, $r31;
        java.util.Set $r9, $r37;
        org.apache.solr.common.cloud.Replica $r17;
        java.lang.StringBuilder $r26, $r28, $r29, $r32, $r34, $r35, $r36, $r38;
        org.apache.solr.common.cloud.ZkNodeProps $r15;
        java.util.ArrayList $r8;
        org.apache.solr.common.cloud.ZkCoreNodeProps $r13;
        int $i0, $i1;
        java.lang.String r2, r4, $r18, $r19, r20, r21, r22, $r23, $r24, $r30, $r39, r40;
        java.util.Map$Entry r12;
        org.apache.solr.common.cloud.Slice r6;
        java.util.Iterator $r10;
        org.apache.solr.common.SolrException$ErrorCode $r27, $r33;
        java.lang.Object $r5, $r11, $r14, $r16;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r20 := @parameter2: java.lang.String;

        r40 := @parameter3: java.lang.String;

        r21 := @parameter4: java.lang.String;

        r22 := @parameter5: java.lang.String;

        r1 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ClusterState clusterState>;

        if r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r1.<org.apache.solr.common.cloud.ClusterState: java.util.Map getSlicesMap(java.lang.String)>(r2);

        if $r3 != null goto label2;

        $r31 = new org.apache.solr.common.cloud.ZooKeeperException;

        $r33 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find collection in zk: ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r37 = virtualinvoke r1.<org.apache.solr.common.cloud.ClusterState: java.util.Set getCollections()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<org.apache.solr.common.cloud.ZooKeeperException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String)>($r33, $r39);

        throw $r31;

     label2:
        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r6 = (org.apache.solr.common.cloud.Slice) $r5;

        if r6 != null goto label3;

        $r25 = new org.apache.solr.common.cloud.ZooKeeperException;

        $r27 = <org.apache.solr.common.SolrException$ErrorCode: org.apache.solr.common.SolrException$ErrorCode BAD_REQUEST>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find shardId in zk: ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.apache.solr.common.cloud.ZooKeeperException: void <init>(org.apache.solr.common.SolrException$ErrorCode,java.lang.String)>($r27, $r30);

        throw $r25;

     label3:
        $r7 = virtualinvoke r6.<org.apache.solr.common.cloud.Slice: java.util.Map getReplicasMap()>();

        $r8 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r7.<java.util.Map: int size()>();

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>($i0);

        $r9 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        $r10 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label8;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (java.util.Map$Entry) $r11;

        $r13 = new org.apache.solr.common.cloud.ZkCoreNodeProps;

        $r14 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (org.apache.solr.common.cloud.ZkNodeProps) $r14;

        specialinvoke $r13.<org.apache.solr.common.cloud.ZkCoreNodeProps: void <init>(org.apache.solr.common.cloud.ZkNodeProps)>($r15);

        $r16 = interfaceinvoke r12.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r17 = (org.apache.solr.common.cloud.Replica) $r16;

        $r18 = virtualinvoke $r17.<org.apache.solr.common.cloud.Replica: java.lang.String getName()>();

        $r19 = virtualinvoke $r13.<org.apache.solr.common.cloud.ZkCoreNodeProps: java.lang.String getNodeName()>();

        $z1 = virtualinvoke r1.<org.apache.solr.common.cloud.ClusterState: boolean liveNodesContain(java.lang.String)>($r19);

        if $z1 == 0 goto label7;

        $z2 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r20);

        if $z2 != 0 goto label7;

        if r21 == null goto label5;

        $r24 = virtualinvoke $r13.<org.apache.solr.common.cloud.ZkCoreNodeProps: java.lang.String getState()>();

        $z4 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>($r24);

        if $z4 == 0 goto label7;

     label5:
        if r22 == null goto label6;

        $r23 = virtualinvoke $r13.<org.apache.solr.common.cloud.ZkCoreNodeProps: java.lang.String getState()>();

        $z3 = virtualinvoke r22.<java.lang.String: boolean equals(java.lang.Object)>($r23);

        if $z3 != 0 goto label7;

     label6:
        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r13);

     label7:
        goto label4;

     label8:
        $i1 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i1 != 0 goto label9;

        return null;

     label9:
        return $r8;
    }

    public org.apache.solr.common.cloud.SolrZkClient getZkClient()
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        org.apache.solr.common.cloud.SolrZkClient $r1;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        $r1 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.SolrZkClient zkClient>;

        return $r1;
    }

    public void updateAliases() throws org.apache.zookeeper.KeeperException, java.lang.InterruptedException
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        byte[] $r2;
        org.apache.solr.common.cloud.Aliases $r3;
        org.apache.solr.common.cloud.SolrZkClient $r1;

        r0 := @this: org.apache.solr.common.cloud.ZkStateReader;

        $r1 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.SolrZkClient zkClient>;

        $r2 = virtualinvoke $r1.<org.apache.solr.common.cloud.SolrZkClient: byte[] getData(java.lang.String,org.apache.zookeeper.Watcher,org.apache.zookeeper.data.Stat,boolean)>("/aliases.json", null, null, 1);

        $r3 = staticinvoke <org.apache.solr.common.cloud.ClusterState: org.apache.solr.common.cloud.Aliases load(byte[])>($r2);

        r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.Aliases aliases> = $r3;

        return;
    }

    static org.slf4j.Logger access$100()
    {
        org.slf4j.Logger $r0;

        $r0 = <org.apache.solr.common.cloud.ZkStateReader: org.slf4j.Logger log>;

        return $r0;
    }

    static org.apache.solr.common.cloud.ClusterState access$200(org.apache.solr.common.cloud.ZkStateReader)
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        org.apache.solr.common.cloud.ClusterState $r1;

        r0 := @parameter0: org.apache.solr.common.cloud.ZkStateReader;

        $r1 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ClusterState clusterState>;

        return $r1;
    }

    static org.apache.solr.common.cloud.SolrZkClient access$300(org.apache.solr.common.cloud.ZkStateReader)
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        org.apache.solr.common.cloud.SolrZkClient $r1;

        r0 := @parameter0: org.apache.solr.common.cloud.ZkStateReader;

        $r1 = r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.SolrZkClient zkClient>;

        return $r1;
    }

    static org.apache.solr.common.cloud.ClusterState access$202(org.apache.solr.common.cloud.ZkStateReader, org.apache.solr.common.cloud.ClusterState)
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        org.apache.solr.common.cloud.ClusterState r1;

        r0 := @parameter0: org.apache.solr.common.cloud.ZkStateReader;

        r1 := @parameter1: org.apache.solr.common.cloud.ClusterState;

        r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.ClusterState clusterState> = r1;

        return r1;
    }

    static org.apache.solr.common.cloud.Aliases access$402(org.apache.solr.common.cloud.ZkStateReader, org.apache.solr.common.cloud.Aliases)
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        org.apache.solr.common.cloud.Aliases r1;

        r0 := @parameter0: org.apache.solr.common.cloud.ZkStateReader;

        r1 := @parameter1: org.apache.solr.common.cloud.Aliases;

        r0.<org.apache.solr.common.cloud.ZkStateReader: org.apache.solr.common.cloud.Aliases aliases> = r1;

        return r1;
    }

    static boolean access$502(org.apache.solr.common.cloud.ZkStateReader, boolean)
    {
        org.apache.solr.common.cloud.ZkStateReader r0;
        boolean z0;

        r0 := @parameter0: org.apache.solr.common.cloud.ZkStateReader;

        z0 := @parameter1: boolean;

        r0.<org.apache.solr.common.cloud.ZkStateReader: boolean clusterStateUpdateScheduled> = z0;

        return z0;
    }

    static void <clinit>()
    {
        long $l0;
        org.slf4j.Logger $r0;
        java.lang.String $r1;

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String SHARD_LEADERS_ZKNODE> = "leaders";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String LEADER_ELECT_ZKNODE> = "/leader_elect";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String SYNC> = "sync";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String DOWN> = "down";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String ACTIVE> = "active";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String RECOVERY_FAILED> = "recovery_failed";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String RECOVERING> = "recovering";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String CLUSTER_STATE> = "/clusterstate.json";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String ALIASES> = "/aliases.json";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String LIVE_NODES_ZKNODE> = "/live_nodes";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String COLLECTIONS_ZKNODE> = "/collections";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String LEADER_PROP> = "leader";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String NUM_SHARDS_PROP> = "numShards";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String SHARD_STATE_PROP> = "shard_state";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String SHARD_RANGE_PROP> = "shard_range";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String SHARD_ID_PROP> = "shard";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String COLLECTION_PROP> = "collection";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String CORE_NAME_PROP> = "core";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String STATE_PROP> = "state";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String ROLES_PROP> = "roles";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String CORE_NODE_NAME_PROP> = "core_node_name";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String NODE_NAME_PROP> = "node_name";

        <org.apache.solr.common.cloud.ZkStateReader: java.lang.String BASE_URL_PROP> = "base_url";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/solr/common/cloud/ZkStateReader;");

        <org.apache.solr.common.cloud.ZkStateReader: org.slf4j.Logger log> = $r0;

        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("solrcloud.update.delay", "5000");

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

        <org.apache.solr.common.cloud.ZkStateReader: long SOLRCLOUD_UPDATE_DELAY> = $l0;

        return;
    }
}
