public final class nu.xom.Nodes extends java.lang.Object
{
    private final java.util.List nodes;

    public void <init>()
    {
        nu.xom.Nodes r0;
        java.util.ArrayList $r1;

        r0 := @this: nu.xom.Nodes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<nu.xom.Nodes: java.util.List nodes> = $r1;

        return;
    }

    public void <init>(nu.xom.Node)
    {
        java.util.List $r3;
        nu.xom.Nodes r0;
        nu.xom.Node r1;
        java.lang.NullPointerException $r4;
        java.util.ArrayList $r2;

        r0 := @this: nu.xom.Nodes;

        r1 := @parameter0: nu.xom.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Nodes content must be non-null");

        throw $r4;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(1);

        r0.<nu.xom.Nodes: java.util.List nodes> = $r2;

        $r3 = r0.<nu.xom.Nodes: java.util.List nodes>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    void <init>(java.util.List)
    {
        nu.xom.Nodes r0;
        java.util.List r1;

        r0 := @this: nu.xom.Nodes;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<nu.xom.Nodes: java.util.List nodes> = r1;

        return;
    }

    public int size()
    {
        int $i0;
        nu.xom.Nodes r0;
        java.util.List $r1;

        r0 := @this: nu.xom.Nodes;

        $r1 = r0.<nu.xom.Nodes: java.util.List nodes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public nu.xom.Node get(int)
    {
        java.util.List $r1;
        int i0;
        nu.xom.Nodes r0;
        java.lang.Object $r2;
        nu.xom.Node $r3;

        r0 := @this: nu.xom.Nodes;

        i0 := @parameter0: int;

        $r1 = r0.<nu.xom.Nodes: java.util.List nodes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (nu.xom.Node) $r2;

        return $r3;
    }

    public nu.xom.Node remove(int)
    {
        java.util.List $r1;
        int i0;
        nu.xom.Nodes r0;
        java.lang.Object $r2;
        nu.xom.Node $r3;

        r0 := @this: nu.xom.Nodes;

        i0 := @parameter0: int;

        $r1 = r0.<nu.xom.Nodes: java.util.List nodes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0);

        $r3 = (nu.xom.Node) $r2;

        return $r3;
    }

    public void insert(nu.xom.Node, int)
    {
        java.util.List $r2;
        int i0;
        nu.xom.Nodes r1;
        nu.xom.Node r0;
        java.lang.NullPointerException $r3;

        r1 := @this: nu.xom.Nodes;

        r0 := @parameter0: nu.xom.Node;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Nodes content must be non-null");

        throw $r3;

     label1:
        $r2 = r1.<nu.xom.Nodes: java.util.List nodes>;

        interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(i0, r0);

        return;
    }

    public void append(nu.xom.Node)
    {
        java.util.List $r2;
        nu.xom.Nodes r1;
        nu.xom.Node r0;
        java.lang.NullPointerException $r3;

        r1 := @this: nu.xom.Nodes;

        r0 := @parameter0: nu.xom.Node;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Nodes content must be non-null");

        throw $r3;

     label1:
        $r2 = r1.<nu.xom.Nodes: java.util.List nodes>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        return;
    }

    public boolean contains(nu.xom.Node)
    {
        java.util.List $r2;
        nu.xom.Nodes r0;
        nu.xom.Node r1;
        boolean $z0;

        r0 := @this: nu.xom.Nodes;

        r1 := @parameter0: nu.xom.Node;

        $r2 = r0.<nu.xom.Nodes: java.util.List nodes>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }
}
