public abstract class com.sun.xml.bind.Util extends java.lang.Object
{

    private void <init>()
    {
        com.sun.xml.bind.Util r0;

        r0 := @this: com.sun.xml.bind.Util;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.logging.Logger getClassLogger()
    {
        java.lang.StackTraceElement[] $r1;
        java.lang.StackTraceElement $r2;
        java.lang.SecurityException $r5;
        java.lang.String $r3;
        java.util.logging.Logger $r4, $r6;
        java.lang.Exception $r0;

     label1:
        $r0 = new java.lang.Exception;

        specialinvoke $r0.<java.lang.Exception: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.Exception: java.lang.StackTraceElement[] getStackTrace()>();

        $r2 = $r1[1];

        $r3 = virtualinvoke $r2.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r4 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>("com.sun.xml.bind");

        return $r6;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public static java.lang.String getSystemProperty(java.lang.String)
    {
        java.lang.SecurityException $r2;
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        return null;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }
}
