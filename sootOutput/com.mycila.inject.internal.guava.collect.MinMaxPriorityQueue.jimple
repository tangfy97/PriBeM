public final class com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue extends java.util.AbstractQueue
{
    private final com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap minHeap;
    private final com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap maxHeap;
    final int maximumSize;
    private java.lang.Object[] queue;
    private int size;
    private int modCount;
    private static final int EVEN_POWERS_OF_TWO;
    private static final int ODD_POWERS_OF_TWO;
    private static final int DEFAULT_CAPACITY;

    public static com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue create()
    {
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder $r0;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue $r2;
        com.mycila.inject.internal.guava.collect.Ordering $r1;

        $r0 = new com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder: void <init>(java.util.Comparator,com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$1)>($r1, null);

        $r2 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue create()>();

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue create(java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder $r0;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue $r3;
        com.mycila.inject.internal.guava.collect.Ordering $r1;
        java.lang.Iterable r2;

        r2 := @parameter0: java.lang.Iterable;

        $r0 = new com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder: void <init>(java.util.Comparator,com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$1)>($r1, null);

        $r3 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue create(java.lang.Iterable)>(r2);

        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder orderedBy(java.util.Comparator)
    {
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder $r0;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        $r0 = new com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder: void <init>(java.util.Comparator,com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$1)>(r1, null);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder expectedSize(int)
    {
        int i0;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder $r0, $r2;
        com.mycila.inject.internal.guava.collect.Ordering $r1;

        i0 := @parameter0: int;

        $r0 = new com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder: void <init>(java.util.Comparator,com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$1)>($r1, null);

        $r2 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder expectedSize(int)>(i0);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder maximumSize(int)
    {
        int i0;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder $r0, $r2;
        com.mycila.inject.internal.guava.collect.Ordering $r1;

        i0 := @parameter0: int;

        $r0 = new com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering natural()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder: void <init>(java.util.Comparator,com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$1)>($r1, null);

        $r2 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder maximumSize(int)>(i0);

        return $r2;
    }

    private void <init>(com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder, int)
    {
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap $r3, $r4, $r6, $r7, $r8, $r9;
        java.lang.Object[] $r10;
        int $i0, i1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder r1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;
        com.mycila.inject.internal.guava.collect.Ordering $r2, $r5;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder;

        i1 := @parameter1: int;

        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder: com.mycila.inject.internal.guava.collect.Ordering access$200(com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder)>(r1);

        $r3 = new com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap: void <init>(com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue,com.mycila.inject.internal.guava.collect.Ordering)>(r0, $r2);

        r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap minHeap> = $r3;

        $r4 = new com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap;

        $r5 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.Ordering: com.mycila.inject.internal.guava.collect.Ordering reverse()>();

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap: void <init>(com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue,com.mycila.inject.internal.guava.collect.Ordering)>(r0, $r5);

        r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap maxHeap> = $r4;

        $r7 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap minHeap>;

        $r6 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap maxHeap>;

        $r7.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap otherHeap> = $r6;

        $r9 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap maxHeap>;

        $r8 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap minHeap>;

        $r9.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap otherHeap> = $r8;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder: int access$300(com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder)>(r1);

        r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int maximumSize> = $i0;

        $r10 = newarray (java.lang.Object)[i1];

        r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object[] queue> = $r10;

        return;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        return $i0;
    }

    public boolean add(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: boolean offer(java.lang.Object)>(r1);

        return 1;
    }

    public boolean addAll(java.util.Collection)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r3;
        boolean $z0, z1;

        r3 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        r0 := @parameter0: java.util.Collection;

        z1 = 0;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r3.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: boolean offer(java.lang.Object)>($r2);

        z1 = 1;

        goto label1;

     label2:
        return z1;
    }

    public boolean offer(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object r0, $r3;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r1;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = r1.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int modCount>;

        $i1 = $i0 + 1;

        r1.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int modCount> = $i1;

        $i2 = r1.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        $i3 = $i2 + 1;

        r1.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size> = $i3;

        specialinvoke r1.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: void growIfNeeded()>();

        $r2 = specialinvoke r1.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap heapForIndex(int)>($i2);

        virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap: void bubbleUp(int,java.lang.Object)>($i2, r0);

        $i5 = r1.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        $i4 = r1.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int maximumSize>;

        if $i5 <= $i4 goto label1;

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object pollLast()>();

        if $r3 == r0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.lang.Object poll()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object removeAndGet(int)>(0);

     label2:
        return $r1;
    }

    java.lang.Object elementData(int)
    {
        java.lang.Object[] $r1;
        int i0;
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        i0 := @parameter0: int;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object[] queue>;

        $r2 = $r1[i0];

        return $r2;
    }

    public java.lang.Object peek()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object elementData(int)>(0);

     label2:
        return $r1;
    }

    private int getMaxElementIndex()
    {
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap $r1;
        byte $b2;
        int $i0, $i1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        lookupswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        $r1 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap maxHeap>;

        $i1 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap: int compareElements(int,int)>(1, 2);

        if $i1 > 0 goto label4;

        $b2 = 1;

        goto label5;

     label4:
        $b2 = 2;

     label5:
        return $b2;
    }

    public java.lang.Object pollFirst()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object poll()>();

        return $r1;
    }

    public java.lang.Object removeFirst()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object remove()>();

        return $r1;
    }

    public java.lang.Object peekFirst()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object peek()>();

        return $r1;
    }

    public java.lang.Object pollLast()
    {
        int $i0;
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $i0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int getMaxElementIndex()>();

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object removeAndGet(int)>($i0);

     label2:
        return $r1;
    }

    public java.lang.Object removeLast()
    {
        int $i0;
        java.lang.Object $r1;
        java.util.NoSuchElementException $r2;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label1:
        $i0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int getMaxElementIndex()>();

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object removeAndGet(int)>($i0);

        return $r1;
    }

    public java.lang.Object peekLast()
    {
        int $i0;
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r1 = null;

        goto label2;

     label1:
        $i0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int getMaxElementIndex()>();

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object elementData(int)>($i0);

     label2:
        return $r1;
    }

    com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$MoveDesc removeAt(int)
    {
        java.lang.Object[] $r4, $r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap $r2;
        java.lang.Object $r1, $r3, $r7;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$MoveDesc $r5, $r6, $r8;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        i0 := @parameter0: int;

        $i1 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: int checkPositionIndex(int,int)>(i0, $i1);

        $i2 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int modCount>;

        $i3 = $i2 + 1;

        r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int modCount> = $i3;

        $i4 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        $i5 = $i4 - 1;

        r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size> = $i5;

        $i6 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        if $i6 != i0 goto label1;

        $r9 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object[] queue>;

        $i12 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        $r9[$i12] = null;

        return null;

     label1:
        $i7 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object elementData(int)>($i7);

        $i8 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap heapForIndex(int)>($i8);

        $i9 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap: int getCorrectLastElement(java.lang.Object)>($r1);

        $i10 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object elementData(int)>($i10);

        $r4 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object[] queue>;

        $i11 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        $r4[$i11] = null;

        $r5 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$MoveDesc fillHole(int,java.lang.Object)>(i0, $r3);

        if $i9 >= i0 goto label3;

        if $r5 != null goto label2;

        $r8 = new com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$MoveDesc;

        specialinvoke $r8.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$MoveDesc: void <init>(java.lang.Object,java.lang.Object)>($r1, $r3);

        return $r8;

     label2:
        $r6 = new com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$MoveDesc;

        $r7 = $r5.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$MoveDesc: java.lang.Object replaced>;

        specialinvoke $r6.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$MoveDesc: void <init>(java.lang.Object,java.lang.Object)>($r1, $r7);

        return $r6;

     label3:
        return $r5;
    }

    private com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$MoveDesc fillHole(int, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap $r1;
        int i0, $i1, $i2;
        java.lang.Object r2, $r3;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$MoveDesc $r4, $r5;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap heapForIndex(int)>(i0);

        $i1 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap: int fillHoleAt(int)>(i0);

        $i2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap: int bubbleUpAlternatingLevels(int,java.lang.Object)>($i1, r2);

        if $i2 != $i1 goto label1;

        $r4 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$MoveDesc tryCrossOverAndBubbleUp(int,int,java.lang.Object)>(i0, $i1, r2);

        return $r4;

     label1:
        if $i2 >= i0 goto label2;

        $r5 = new com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$MoveDesc;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object elementData(int)>(i0);

        specialinvoke $r5.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$MoveDesc: void <init>(java.lang.Object,java.lang.Object)>(r2, $r3);

        goto label3;

     label2:
        $r5 = null;

     label3:
        return $r5;
    }

    private java.lang.Object removeAndGet(int)
    {
        int i0;
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object elementData(int)>(i0);

        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$MoveDesc removeAt(int)>(i0);

        return $r1;
    }

    private com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap heapForIndex(int)
    {
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap $r1;
        int i0;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: boolean isEvenLevel(int)>(i0);

        if $z0 == 0 goto label1;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap minHeap>;

        goto label2;

     label1:
        $r1 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap maxHeap>;

     label2:
        return $r1;
    }

    static boolean isEvenLevel(int)
    {
        int i0, i1, $i2, $i3;
        boolean $z0, $z1;

        i0 := @parameter0: int;

        i1 = i0 + 1;

        if i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "negative index");

        $i3 = i1 & 1431655765;

        $i2 = i1 & -1431655766;

        if $i3 <= $i2 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    boolean isIntact()
    {
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap $r1;
        int $i0, i1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        i1 = 1;

     label1:
        $i0 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        if i1 >= $i0 goto label3;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap heapForIndex(int)>(i1);

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap: boolean access$400(com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap,int)>($r1, i1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 1;
    }

    public java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$QueueIterator $r0;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $r0 = new com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$QueueIterator;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$QueueIterator: void <init>(com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue,com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$1)>(r1, null);

        return $r0;
    }

    public void clear()
    {
        java.lang.Object[] $r1;
        int $i0, i1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        i1 = 0;

     label1:
        $i0 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        if i1 >= $i0 goto label2;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object[] queue>;

        $r1[i1] = null;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size> = 0;

        return;
    }

    public java.lang.Object[] toArray()
    {
        java.lang.Object[] r1, $r2;
        int $i0, $i1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        r1 = newarray (java.lang.Object)[$i0];

        $r2 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object[] queue>;

        $i1 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        return r1;
    }

    public java.util.Comparator comparator()
    {
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap $r1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;
        com.mycila.inject.internal.guava.collect.Ordering $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap minHeap>;

        $r2 = $r1.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Heap: com.mycila.inject.internal.guava.collect.Ordering ordering>;

        return $r2;
    }

    int capacity()
    {
        int $i0;
        java.lang.Object[] $r1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object[] queue>;

        $i0 = lengthof $r1;

        return $i0;
    }

    static int initialQueueSize(int, int, java.lang.Iterable)
    {
        java.util.Collection $r1;
        java.lang.Iterable r0;
        int i0, i1, $i2, $i3, $i4, i5, $i7;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.Iterable;

        $i7 = (int) -1;

        if i0 != $i7 goto label1;

        $i4 = 11;

        goto label2;

     label1:
        $i4 = i0;

     label2:
        i5 = $i4;

        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label3;

        $r1 = (java.util.Collection) r0;

        $i3 = interfaceinvoke $r1.<java.util.Collection: int size()>();

        i5 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i3);

     label3:
        $i2 = staticinvoke <com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int capAtMaximumSize(int,int)>(i5, i1);

        return $i2;
    }

    private void growIfNeeded()
    {
        java.lang.Object[] $r1, r2, $r3, $r4;
        int $i0, $i1, $i2, $i3;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $i1 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object[] queue>;

        $i0 = lengthof $r1;

        if $i1 <= $i0 goto label1;

        $i2 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int calculateNewCapacity()>();

        r2 = newarray (java.lang.Object)[$i2];

        $r4 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object[] queue>;

        $r3 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object[] queue>;

        $i3 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i3);

        r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object[] queue> = r2;

     label1:
        return;
    }

    private int calculateNewCapacity()
    {
        java.lang.Object[] $r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object[] queue>;

        i0 = lengthof $r1;

        if i0 >= 64 goto label1;

        $i4 = i0 + 1;

        $i5 = $i4 * 2;

        goto label2;

     label1:
        $i1 = i0 / 2;

        $i5 = $i1 * 3;

     label2:
        i6 = $i5;

        if $i5 >= 0 goto label3;

        i6 = 2147483647;

     label3:
        $i2 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int maximumSize>;

        $i3 = staticinvoke <com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int capAtMaximumSize(int,int)>(i6, $i2);

        return $i3;
    }

    private static int capAtMaximumSize(int, int)
    {
        int i0, i1, $i2, $i3, $i4;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 - 1;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i1);

        $i4 = $i3 + 1;

        return $i4;
    }

    void <init>(com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder, int, com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$1)
    {
        int i0;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder r1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$1 r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder;

        i0 := @parameter1: int;

        r2 := @parameter2: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$1;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: void <init>(com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue$Builder,int)>(r1, i0);

        return;
    }

    static java.lang.Object[] access$500(com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue)
    {
        java.lang.Object[] $r1;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: java.lang.Object[] queue>;

        return $r1;
    }

    static int access$600(com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue)
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int size>;

        return $i0;
    }

    static int access$700(com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue)
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int modCount>;

        return $i0;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int DEFAULT_CAPACITY> = 11;

        <com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int ODD_POWERS_OF_TWO> = -1431655766;

        <com.mycila.inject.internal.guava.collect.MinMaxPriorityQueue: int EVEN_POWERS_OF_TWO> = 1431655765;

        return;
    }
}
