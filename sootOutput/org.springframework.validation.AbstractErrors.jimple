public abstract class org.springframework.validation.AbstractErrors extends java.lang.Object implements org.springframework.validation.Errors, java.io.Serializable
{
    private java.lang.String nestedPath;
    private final java.util.Stack nestedPathStack;

    public void <init>()
    {
        org.springframework.validation.AbstractErrors r0;
        java.util.Stack $r1;

        r0 := @this: org.springframework.validation.AbstractErrors;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.validation.AbstractErrors: java.lang.String nestedPath> = "";

        $r1 = new java.util.Stack;

        specialinvoke $r1.<java.util.Stack: void <init>()>();

        r0.<org.springframework.validation.AbstractErrors: java.util.Stack nestedPathStack> = $r1;

        return;
    }

    public void setNestedPath(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.validation.AbstractErrors r0;
        java.util.Stack $r2;

        r0 := @this: org.springframework.validation.AbstractErrors;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.springframework.validation.AbstractErrors: void doSetNestedPath(java.lang.String)>(r1);

        $r2 = r0.<org.springframework.validation.AbstractErrors: java.util.Stack nestedPathStack>;

        virtualinvoke $r2.<java.util.Stack: void clear()>();

        return;
    }

    public java.lang.String getNestedPath()
    {
        java.lang.String $r1;
        org.springframework.validation.AbstractErrors r0;

        r0 := @this: org.springframework.validation.AbstractErrors;

        $r1 = r0.<org.springframework.validation.AbstractErrors: java.lang.String nestedPath>;

        return $r1;
    }

    public void pushNestedPath(java.lang.String)
    {
        org.springframework.validation.AbstractErrors r0;
        java.util.Stack $r1;
        java.lang.StringBuilder $r3, $r7;
        java.lang.String $r2, $r4, $r5, r6, $r8;

        r0 := @this: org.springframework.validation.AbstractErrors;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.validation.AbstractErrors: java.util.Stack nestedPathStack>;

        $r2 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: java.lang.String getNestedPath()>();

        virtualinvoke $r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r2);

        $r3 = new java.lang.StringBuilder;

        $r4 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: java.lang.String getNestedPath()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r4);

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.springframework.validation.AbstractErrors: void doSetNestedPath(java.lang.String)>($r8);

        return;
    }

    public void popNestedPath() throws java.lang.IllegalArgumentException
    {
        java.lang.IllegalStateException $r5;
        java.util.EmptyStackException $r4;
        org.springframework.validation.AbstractErrors r0;
        java.lang.Object $r2;
        java.lang.String r3;
        java.util.Stack $r1;

        r0 := @this: org.springframework.validation.AbstractErrors;

     label1:
        $r1 = r0.<org.springframework.validation.AbstractErrors: java.util.Stack nestedPathStack>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        r3 = (java.lang.String) $r2;

        virtualinvoke r0.<org.springframework.validation.AbstractErrors: void doSetNestedPath(java.lang.String)>(r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot pop nested path: no nested path on stack");

        throw $r5;

     label4:
        return;

        catch java.util.EmptyStackException from label1 to label2 with label3;
    }

    protected void doSetNestedPath(java.lang.String)
    {
        org.springframework.validation.AbstractErrors r0;
        int $i0;
        java.lang.StringBuilder $r2, $r4;
        java.lang.String $r1, $r3, r5, r6;
        boolean $z0;

        r0 := @this: org.springframework.validation.AbstractErrors;

        r5 := @parameter0: java.lang.String;

        if r5 != null goto label1;

        r5 = "";

     label1:
        $r1 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: java.lang.String canonicalFieldName(java.lang.String)>(r5);

        r6 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $z0 != 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        r0.<org.springframework.validation.AbstractErrors: java.lang.String nestedPath> = r6;

        return;
    }

    protected java.lang.String fixedField(java.lang.String)
    {
        int $i0, $i1, $i2;
        java.lang.String r0, $r2, $r3, $r5, $r6, $r7, $r9, $r10;
        boolean $z0, $z1;
        org.springframework.validation.AbstractErrors r1;
        java.lang.StringBuilder $r4, $r8;

        r1 := @this: org.springframework.validation.AbstractErrors;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        $r5 = virtualinvoke r1.<org.springframework.validation.AbstractErrors: java.lang.String getNestedPath()>();

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r5);

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        $r7 = virtualinvoke r1.<org.springframework.validation.AbstractErrors: java.lang.String canonicalFieldName(java.lang.String)>(r0);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label1:
        $r2 = virtualinvoke r1.<org.springframework.validation.AbstractErrors: java.lang.String getNestedPath()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".");

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        $r3 = ".";

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        $r10 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        goto label3;

     label2:
        $r10 = $r2;

     label3:
        return $r10;
    }

    protected java.lang.String canonicalFieldName(java.lang.String)
    {
        java.lang.String r0;
        org.springframework.validation.AbstractErrors r1;

        r1 := @this: org.springframework.validation.AbstractErrors;

        r0 := @parameter0: java.lang.String;

        return r0;
    }

    public void reject(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.validation.AbstractErrors r0;

        r0 := @this: org.springframework.validation.AbstractErrors;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.springframework.validation.AbstractErrors: void reject(java.lang.String,java.lang.Object[],java.lang.String)>(r1, null, null);

        return;
    }

    public void reject(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.springframework.validation.AbstractErrors r0;

        r0 := @this: org.springframework.validation.AbstractErrors;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.springframework.validation.AbstractErrors: void reject(java.lang.String,java.lang.Object[],java.lang.String)>(r1, null, r2);

        return;
    }

    public void rejectValue(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.springframework.validation.AbstractErrors r0;

        r0 := @this: org.springframework.validation.AbstractErrors;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<org.springframework.validation.AbstractErrors: void rejectValue(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)>(r1, r2, null, null);

        return;
    }

    public void rejectValue(java.lang.String, java.lang.String, java.lang.String)
    {
        org.springframework.validation.AbstractErrors r0;
        java.lang.String r1, r2, r3;

        r0 := @this: org.springframework.validation.AbstractErrors;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<org.springframework.validation.AbstractErrors: void rejectValue(java.lang.String,java.lang.String,java.lang.Object[],java.lang.String)>(r1, r2, null, r3);

        return;
    }

    public boolean hasErrors()
    {
        java.util.List $r1;
        org.springframework.validation.AbstractErrors r0;
        boolean $z0, $z1;

        r0 := @this: org.springframework.validation.AbstractErrors;

        $r1 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: java.util.List getAllErrors()>();

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        return $z1;
    }

    public int getErrorCount()
    {
        int $i0;
        java.util.List $r1;
        org.springframework.validation.AbstractErrors r0;

        r0 := @this: org.springframework.validation.AbstractErrors;

        $r1 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: java.util.List getAllErrors()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.util.List getAllErrors()
    {
        java.util.List $r2, $r3, $r4;
        org.springframework.validation.AbstractErrors r1;
        java.util.LinkedList $r0;

        r1 := @this: org.springframework.validation.AbstractErrors;

        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        $r2 = virtualinvoke r1.<org.springframework.validation.AbstractErrors: java.util.List getGlobalErrors()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        $r3 = virtualinvoke r1.<org.springframework.validation.AbstractErrors: java.util.List getFieldErrors()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r4;
    }

    public boolean hasGlobalErrors()
    {
        int $i0;
        org.springframework.validation.AbstractErrors r0;

        r0 := @this: org.springframework.validation.AbstractErrors;

        $i0 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: int getGlobalErrorCount()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int getGlobalErrorCount()
    {
        int $i0;
        java.util.List $r1;
        org.springframework.validation.AbstractErrors r0;

        r0 := @this: org.springframework.validation.AbstractErrors;

        $r1 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: java.util.List getGlobalErrors()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public org.springframework.validation.ObjectError getGlobalError()
    {
        java.util.List $r1;
        org.springframework.validation.AbstractErrors r0;
        org.springframework.validation.ObjectError $r3;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.springframework.validation.AbstractErrors;

        $r1 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: java.util.List getGlobalErrors()>();

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.springframework.validation.ObjectError) $r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public boolean hasFieldErrors()
    {
        int $i0;
        org.springframework.validation.AbstractErrors r0;

        r0 := @this: org.springframework.validation.AbstractErrors;

        $i0 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: int getFieldErrorCount()>();

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int getFieldErrorCount()
    {
        int $i0;
        java.util.List $r1;
        org.springframework.validation.AbstractErrors r0;

        r0 := @this: org.springframework.validation.AbstractErrors;

        $r1 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: java.util.List getFieldErrors()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public org.springframework.validation.FieldError getFieldError()
    {
        java.util.List $r1;
        org.springframework.validation.AbstractErrors r0;
        org.springframework.validation.FieldError $r3;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.springframework.validation.AbstractErrors;

        $r1 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: java.util.List getFieldErrors()>();

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r3 = (org.springframework.validation.FieldError) $r2;

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public boolean hasFieldErrors(java.lang.String)
    {
        int $i0;
        java.lang.String r1;
        org.springframework.validation.AbstractErrors r0;

        r0 := @this: org.springframework.validation.AbstractErrors;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: int getFieldErrorCount(java.lang.String)>(r1);

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public int getFieldErrorCount(java.lang.String)
    {
        java.util.List $r2;
        org.springframework.validation.AbstractErrors r0;
        int $i0;
        java.lang.String r1;

        r0 := @this: org.springframework.validation.AbstractErrors;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: java.util.List getFieldErrors(java.lang.String)>(r1);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        return $i0;
    }

    public java.util.List getFieldErrors(java.lang.String)
    {
        org.springframework.validation.AbstractErrors r0;
        java.util.Iterator $r5;
        org.springframework.validation.FieldError r7;
        java.util.List $r1, $r8;
        java.lang.Object $r6;
        java.lang.String r3, $r4;
        java.util.LinkedList $r2;
        boolean $z0, $z1;

        r0 := @this: org.springframework.validation.AbstractErrors;

        r3 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: java.util.List getFieldErrors()>();

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        $r4 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: java.lang.String fixedField(java.lang.String)>(r3);

        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.springframework.validation.FieldError) $r6;

        $z0 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: boolean isMatchingFieldError(java.lang.String,org.springframework.validation.FieldError)>($r4, r7);

        if $z0 == 0 goto label2;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r7);

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $r8 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        return $r8;
    }

    public org.springframework.validation.FieldError getFieldError(java.lang.String)
    {
        java.util.List $r2;
        org.springframework.validation.AbstractErrors r0;
        org.springframework.validation.FieldError $r4;
        java.lang.Object $r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.springframework.validation.AbstractErrors;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: java.util.List getFieldErrors(java.lang.String)>(r1);

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (org.springframework.validation.FieldError) $r3;

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public java.lang.Class getFieldType(java.lang.String)
    {
        org.springframework.validation.AbstractErrors r0;
        java.lang.Object $r2;
        java.lang.Class $r3;
        java.lang.String r1;

        r0 := @this: org.springframework.validation.AbstractErrors;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.springframework.validation.AbstractErrors: java.lang.Object getFieldValue(java.lang.String)>(r1);

        if $r2 == null goto label1;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        return $r3;

     label1:
        return null;
    }

    protected boolean isMatchingFieldError(java.lang.String, org.springframework.validation.FieldError)
    {
        org.springframework.validation.AbstractErrors r5;
        org.springframework.validation.FieldError r1;
        int $i0, $i1;
        java.lang.String r0, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;

        r5 := @this: org.springframework.validation.AbstractErrors;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: org.springframework.validation.FieldError;

        $r2 = virtualinvoke r1.<org.springframework.validation.FieldError: java.lang.String getField()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("*");

        if $z1 == 0 goto label1;

        $r3 = virtualinvoke r1.<org.springframework.validation.FieldError: java.lang.String getField()>();

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $z2 = virtualinvoke $r3.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z2 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public java.lang.String toString()
    {
        org.springframework.validation.AbstractErrors r1;
        java.util.Iterator $r7;
        java.util.List $r6;
        org.springframework.validation.ObjectError r9;
        int $i0;
        java.lang.StringBuilder $r0, $r4, $r5, $r10;
        java.lang.Class $r2;
        java.lang.Object $r8;
        java.lang.String $r3, $r11;
        boolean $z0;

        r1 := @this: org.springframework.validation.AbstractErrors;

        $r0 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $i0 = virtualinvoke r1.<org.springframework.validation.AbstractErrors: int getErrorCount()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" errors");

        $r6 = virtualinvoke r1.<org.springframework.validation.AbstractErrors: java.util.List getAllErrors()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.springframework.validation.ObjectError) $r8;

        $r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r11 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }
}
