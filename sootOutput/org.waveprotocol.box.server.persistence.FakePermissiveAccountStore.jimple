public class org.waveprotocol.box.server.persistence.FakePermissiveAccountStore extends java.lang.Object implements org.waveprotocol.box.server.persistence.AccountStore
{
    java.util.Map accounts;

    public void <init>()
    {
        java.util.HashMap $r1;
        org.waveprotocol.box.server.persistence.FakePermissiveAccountStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.FakePermissiveAccountStore;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.box.server.persistence.FakePermissiveAccountStore: java.util.Map accounts> = $r1;

        return;
    }

    public org.waveprotocol.box.server.account.AccountData getAccount(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.box.server.account.HumanAccountDataImpl $r5;
        org.waveprotocol.box.server.account.AccountData r10;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.box.server.persistence.FakePermissiveAccountStore r0;
        java.util.Map $r2, $r9;
        char[] $r8;
        java.lang.Object $r3;
        java.lang.String $r4, $r7;
        org.waveprotocol.box.server.authentication.PasswordDigest $r6;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.persistence.FakePermissiveAccountStore;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.box.server.persistence.FakePermissiveAccountStore: java.util.Map accounts>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r10 = (org.waveprotocol.box.server.account.AccountData) $r3;

        if r10 != null goto label1;

        $r4 = virtualinvoke r1.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("xxx");

        if $z0 != 0 goto label1;

        $r5 = new org.waveprotocol.box.server.account.HumanAccountDataImpl;

        $r6 = new org.waveprotocol.box.server.authentication.PasswordDigest;

        $r7 = "";

        $r8 = virtualinvoke $r7.<java.lang.String: char[] toCharArray()>();

        specialinvoke $r6.<org.waveprotocol.box.server.authentication.PasswordDigest: void <init>(char[])>($r8);

        specialinvoke $r5.<org.waveprotocol.box.server.account.HumanAccountDataImpl: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.box.server.authentication.PasswordDigest)>(r1, $r6);

        r10 = $r5;

        $r9 = r0.<org.waveprotocol.box.server.persistence.FakePermissiveAccountStore: java.util.Map accounts>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

     label1:
        return r10;
    }

    public void initializeAccountStore()
    {
        org.waveprotocol.box.server.persistence.FakePermissiveAccountStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.FakePermissiveAccountStore;

        return;
    }

    public void putAccount(org.waveprotocol.box.server.account.AccountData)
    {
        java.util.Map $r2;
        org.waveprotocol.box.server.account.AccountData r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;
        org.waveprotocol.box.server.persistence.FakePermissiveAccountStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.FakePermissiveAccountStore;

        r1 := @parameter0: org.waveprotocol.box.server.account.AccountData;

        $r2 = r0.<org.waveprotocol.box.server.persistence.FakePermissiveAccountStore: java.util.Map accounts>;

        $r3 = interfaceinvoke r1.<org.waveprotocol.box.server.account.AccountData: org.waveprotocol.wave.model.wave.ParticipantId getId()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public void removeAccount(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.box.server.persistence.FakePermissiveAccountStore r0;
        java.util.Map $r2;

        r0 := @this: org.waveprotocol.box.server.persistence.FakePermissiveAccountStore;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.box.server.persistence.FakePermissiveAccountStore: java.util.Map accounts>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        return;
    }
}
