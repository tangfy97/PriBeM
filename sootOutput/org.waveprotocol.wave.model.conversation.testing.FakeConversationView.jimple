public final class org.waveprotocol.wave.model.conversation.testing.FakeConversationView extends java.lang.Object implements org.waveprotocol.wave.model.conversation.ObservableConversationView
{
    private static final org.waveprotocol.wave.model.schema.SchemaProvider DEFAULT_SCHEMAS;
    private final org.waveprotocol.wave.model.conversation.WaveBasedConversationView view;

    public static org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder builder()
    {
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder $r0;

        $r0 = new org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder;

        specialinvoke $r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: void <init>(org.waveprotocol.wave.model.conversation.testing.FakeConversationView$1)>(null);

        return $r0;
    }

    private void <init>(org.waveprotocol.wave.model.conversation.WaveBasedConversationView)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveBasedConversationView view> = r1;

        return;
    }

    public java.lang.String getId()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView $r1;
        java.lang.String $r2;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveBasedConversationView view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: java.lang.String getId()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversation createConversation()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView $r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveBasedConversationView view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation createConversation()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversation createRoot()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView $r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveBasedConversationView view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation createRoot()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation(java.lang.String)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView $r2;
        java.lang.String r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r3;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveBasedConversationView view>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation(java.lang.String)>(r1);

        return $r3;
    }

    public java.util.Collection getConversations()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView $r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        java.util.Collection $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveBasedConversationView view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: java.util.Collection getConversations()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.conversation.WaveletBasedConversation getRoot()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView $r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveBasedConversationView view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getRoot()>();

        return $r2;
    }

    public void addListener(org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView $r2;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveBasedConversationView view>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: void addListener(org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView $r2;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveBasedConversationView view>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: void removeListener(org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener)>(r1);

        return;
    }

    public org.waveprotocol.wave.model.wave.opbased.ObservableWaveView getWaveView()
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView $r1;
        org.waveprotocol.wave.model.wave.opbased.ObservableWaveView $r2;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveBasedConversationView view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.wave.opbased.ObservableWaveView getWaveView()>();

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversation createConversation()
    {
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation createConversation()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversation getConversation(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversation createRoot()
    {
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation createRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.ObservableConversation getRoot()
    {
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.Conversation createConversation()
    {
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation createConversation()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.Conversation createRoot()
    {
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation createRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.Conversation getRoot()
    {
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.conversation.Conversation getConversation(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversation $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.conversation.WaveletBasedConversation getConversation(java.lang.String)>(r1);

        return $r2;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: void removeListener(org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;
        org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: void addListener(org.waveprotocol.wave.model.conversation.ObservableConversationView$Listener)>($r2);

        return;
    }

    static org.waveprotocol.wave.model.schema.SchemaProvider access$000()
    {
        org.waveprotocol.wave.model.schema.SchemaProvider $r0;

        $r0 = <org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.schema.SchemaProvider DEFAULT_SCHEMAS>;

        return $r0;
    }

    void <init>(org.waveprotocol.wave.model.conversation.WaveBasedConversationView, org.waveprotocol.wave.model.conversation.testing.FakeConversationView$1)
    {
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView$1 r2;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveBasedConversationView;

        r2 := @parameter1: org.waveprotocol.wave.model.conversation.testing.FakeConversationView$1;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: void <init>(org.waveprotocol.wave.model.conversation.WaveBasedConversationView)>(r1);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.schema.conversation.ConversationSchemas $r0;

        $r0 = new org.waveprotocol.wave.model.schema.conversation.ConversationSchemas;

        specialinvoke $r0.<org.waveprotocol.wave.model.schema.conversation.ConversationSchemas: void <init>()>();

        <org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.schema.SchemaProvider DEFAULT_SCHEMAS> = $r0;

        return;
    }
}
