public class com.hp.hpl.jena.n3.N3JenaWriterTriples extends com.hp.hpl.jena.n3.N3JenaWriterCommon
{
    public static final int colWidth;

    public void <init>()
    {
        com.hp.hpl.jena.n3.N3JenaWriterTriples r0;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterTriples;

        specialinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterCommon: void <init>()>();

        return;
    }

    protected void writeModel(com.hp.hpl.jena.rdf.model.Model)
    {
        com.hp.hpl.jena.n3.N3IndentedWriter $r6, $r8, $r11, $r13, $r14, $r17;
        com.hp.hpl.jena.rdf.model.StmtIterator $r2;
        com.hp.hpl.jena.rdf.model.Property $r9;
        java.lang.String $r5, $r7, $r10, $r12, $r16;
        com.hp.hpl.jena.n3.N3JenaWriterTriples r0;
        boolean $z0;
        com.hp.hpl.jena.rdf.model.RDFNode $r15;
        com.hp.hpl.jena.rdf.model.Statement $r3;
        com.hp.hpl.jena.rdf.model.Resource $r4;
        com.hp.hpl.jena.rdf.model.Model r1;

        r0 := @this: com.hp.hpl.jena.n3.N3JenaWriterTriples;

        r1 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r0.<com.hp.hpl.jena.n3.N3JenaWriterTriples: boolean alwaysAllocateBNodeLabel> = 1;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.StmtIterator listStatements()>();

     label1:
        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: com.hp.hpl.jena.rdf.model.Statement nextStatement()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Resource getSubject()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterTriples: java.lang.String formatResource(com.hp.hpl.jena.rdf.model.Resource)>($r4);

        $r6 = r0.<com.hp.hpl.jena.n3.N3JenaWriterTriples: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        virtualinvoke $r6.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r5);

        specialinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterTriples: void padCol(java.lang.String)>($r5);

        $r8 = r0.<com.hp.hpl.jena.n3.N3JenaWriterTriples: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $r7 = r0.<com.hp.hpl.jena.n3.N3JenaWriterTriples: java.lang.String minGapStr>;

        virtualinvoke $r8.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r7);

        $r9 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.Property getPredicate()>();

        $r10 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterTriples: java.lang.String formatProperty(com.hp.hpl.jena.rdf.model.Property)>($r9);

        $r11 = r0.<com.hp.hpl.jena.n3.N3JenaWriterTriples: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        virtualinvoke $r11.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r10);

        specialinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterTriples: void padCol(java.lang.String)>($r10);

        $r13 = r0.<com.hp.hpl.jena.n3.N3JenaWriterTriples: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $r12 = r0.<com.hp.hpl.jena.n3.N3JenaWriterTriples: java.lang.String minGapStr>;

        virtualinvoke $r13.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r12);

        $r14 = r0.<com.hp.hpl.jena.n3.N3JenaWriterTriples: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $r15 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Statement: com.hp.hpl.jena.rdf.model.RDFNode getObject()>();

        $r16 = virtualinvoke r0.<com.hp.hpl.jena.n3.N3JenaWriterTriples: java.lang.String formatNode(com.hp.hpl.jena.rdf.model.RDFNode)>($r15);

        virtualinvoke $r14.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r16);

        $r17 = r0.<com.hp.hpl.jena.n3.N3JenaWriterTriples: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        virtualinvoke $r17.<com.hp.hpl.jena.n3.N3IndentedWriter: void println(java.lang.String)>(" .");

        goto label1;

     label2:
        interfaceinvoke $r2.<com.hp.hpl.jena.rdf.model.StmtIterator: void close()>();

        return;
    }

    private void padCol(java.lang.String)
    {
        com.hp.hpl.jena.n3.N3IndentedWriter $r2;
        int $i0, $i1, $i2;
        java.lang.String r0, $r3;
        com.hp.hpl.jena.n3.N3JenaWriterTriples r1;

        r1 := @this: com.hp.hpl.jena.n3.N3JenaWriterTriples;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 >= 8 goto label1;

        $r2 = r1.<com.hp.hpl.jena.n3.N3JenaWriterTriples: com.hp.hpl.jena.n3.N3IndentedWriter out>;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = 8 - $i1;

        $r3 = staticinvoke <com.hp.hpl.jena.n3.N3JenaWriterTriples: java.lang.String pad(int)>($i2);

        virtualinvoke $r2.<com.hp.hpl.jena.n3.N3IndentedWriter: void print(java.lang.String)>($r3);

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.hp.hpl.jena.n3.N3JenaWriterTriples: int colWidth> = 8;

        return;
    }
}
