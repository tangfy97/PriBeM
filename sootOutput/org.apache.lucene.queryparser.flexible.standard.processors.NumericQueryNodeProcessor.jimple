public class org.apache.lucene.queryparser.flexible.standard.processors.NumericQueryNodeProcessor extends org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl
{

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.processors.NumericQueryNodeProcessor r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.NumericQueryNodeProcessor;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void <init>()>();

        return;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode $r24;
        org.apache.lucene.queryparser.flexible.standard.processors.NumericQueryNodeProcessor r2;
        org.apache.lucene.queryparser.flexible.core.QueryNodeParseException $r12, $r26;
        int[] $r18;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, $r1;
        java.text.ParseException $r25;
        boolean $z0, $z1;
        org.apache.lucene.queryparser.flexible.core.config.FieldConfig $r6;
        org.apache.lucene.document.FieldType$NumericType $r19;
        java.lang.CharSequence $r21, $r23;
        org.apache.lucene.queryparser.flexible.messages.MessageImpl $r13, $r27;
        float $f0;
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r7;
        java.lang.Object[] $r14, $r28;
        long $l4;
        org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode $r20, $r22;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode r4;
        java.text.NumberFormat $r10;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r5, $r11, $r15, $r16, $r29, $r30, $r32;
        java.lang.Number $r17, r33;
        double $d0;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r3;
        org.apache.lucene.queryparser.flexible.standard.config.NumericConfig r9;
        java.lang.Object $r8;
        java.lang.Class $r31;

        r2 := @this: org.apache.lucene.queryparser.flexible.standard.processors.NumericQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode;

        if $z0 == 0 goto label12;

        $r1 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getParent()>();

        $z1 = $r1 instanceof org.apache.lucene.queryparser.flexible.core.nodes.RangeQueryNode;

        if $z1 != 0 goto label12;

        $r3 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.standard.processors.NumericQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        if $r3 == null goto label12;

        r4 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode) r0;

        $r5 = virtualinvoke r4.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.String getFieldAsString()>();

        $r6 = virtualinvoke $r3.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: org.apache.lucene.queryparser.flexible.core.config.FieldConfig getFieldConfig(java.lang.String)>($r5);

        if $r6 == null goto label12;

        $r7 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey NUMERIC_CONFIG>;

        $r8 = virtualinvoke $r6.<org.apache.lucene.queryparser.flexible.core.config.FieldConfig: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r7);

        r9 = (org.apache.lucene.queryparser.flexible.standard.config.NumericConfig) $r8;

        if r9 == null goto label12;

        $r10 = virtualinvoke r9.<org.apache.lucene.queryparser.flexible.standard.config.NumericConfig: java.text.NumberFormat getNumberFormat()>();

        $r11 = virtualinvoke r4.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.String getTextAsString()>();

        $i0 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i0 <= 0 goto label10;

     label01:
        $r17 = virtualinvoke $r10.<java.text.NumberFormat: java.lang.Number parse(java.lang.String)>($r11);

        r33 = $r17;

     label02:
        goto label04;

     label03:
        $r25 := @caughtexception;

        $r26 = new org.apache.lucene.queryparser.flexible.core.QueryNodeParseException;

        $r27 = new org.apache.lucene.queryparser.flexible.messages.MessageImpl;

        $r29 = <org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages: java.lang.String COULD_NOT_PARSE_NUMBER>;

        $r28 = newarray (java.lang.Object)[2];

        $r30 = virtualinvoke r4.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.String getTextAsString()>();

        $r28[0] = $r30;

        $r31 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $r32 = virtualinvoke $r31.<java.lang.Class: java.lang.String getCanonicalName()>();

        $r28[1] = $r32;

        specialinvoke $r27.<org.apache.lucene.queryparser.flexible.messages.MessageImpl: void <init>(java.lang.String,java.lang.Object[])>($r29, $r28);

        specialinvoke $r26.<org.apache.lucene.queryparser.flexible.core.QueryNodeParseException: void <init>(org.apache.lucene.queryparser.flexible.messages.Message,java.lang.Throwable)>($r27, $r25);

        throw $r26;

     label04:
        $r18 = <org.apache.lucene.queryparser.flexible.standard.processors.NumericQueryNodeProcessor$1: int[] $SwitchMap$org$apache$lucene$document$FieldType$NumericType>;

        $r19 = virtualinvoke r9.<org.apache.lucene.queryparser.flexible.standard.config.NumericConfig: org.apache.lucene.document.FieldType$NumericType getType()>();

        $i1 = virtualinvoke $r19.<org.apache.lucene.document.FieldType$NumericType: int ordinal()>();

        $i2 = $r18[$i1];

        tableswitch($i2)
        {
            case 1: goto label05;
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label08;
            default: goto label09;
        };

     label05:
        $l4 = virtualinvoke $r17.<java.lang.Number: long longValue()>();

        r33 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        goto label09;

     label06:
        $i3 = virtualinvoke $r17.<java.lang.Number: int intValue()>();

        r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        goto label09;

     label07:
        $d0 = virtualinvoke $r17.<java.lang.Number: double doubleValue()>();

        r33 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        goto label09;

     label08:
        $f0 = virtualinvoke $r17.<java.lang.Number: float floatValue()>();

        r33 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

     label09:
        goto label11;

     label10:
        $r12 = new org.apache.lucene.queryparser.flexible.core.QueryNodeParseException;

        $r13 = new org.apache.lucene.queryparser.flexible.messages.MessageImpl;

        $r15 = <org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages: java.lang.String NUMERIC_CANNOT_BE_EMPTY>;

        $r14 = newarray (java.lang.Object)[1];

        $r16 = virtualinvoke r4.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.String getFieldAsString()>();

        $r14[0] = $r16;

        specialinvoke $r13.<org.apache.lucene.queryparser.flexible.messages.MessageImpl: void <init>(java.lang.String,java.lang.Object[])>($r15, $r14);

        specialinvoke $r12.<org.apache.lucene.queryparser.flexible.core.QueryNodeParseException: void <init>(org.apache.lucene.queryparser.flexible.messages.Message)>($r13);

        throw $r12;

     label11:
        $r20 = new org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode;

        $r21 = virtualinvoke r4.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.CharSequence getField()>();

        specialinvoke $r20.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode: void <init>(java.lang.CharSequence,java.lang.Number,java.text.NumberFormat)>($r21, r33, $r10);

        $r22 = new org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode;

        $r23 = virtualinvoke r4.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.CharSequence getField()>();

        specialinvoke $r22.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode: void <init>(java.lang.CharSequence,java.lang.Number,java.text.NumberFormat)>($r23, r33, $r10);

        $r24 = new org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode;

        specialinvoke $r24.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: void <init>(org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode,org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode,boolean,boolean,org.apache.lucene.queryparser.flexible.standard.config.NumericConfig)>($r20, $r22, 1, 1, r9);

        return $r24;

     label12:
        return r0;

        catch java.text.ParseException from label01 to label02 with label03;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        org.apache.lucene.queryparser.flexible.standard.processors.NumericQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.NumericQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        return r0;
    }

    protected java.util.List setChildrenOrder(java.util.List) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.util.List r0;
        org.apache.lucene.queryparser.flexible.standard.processors.NumericQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.NumericQueryNodeProcessor;

        r0 := @parameter0: java.util.List;

        return r0;
    }
}
