final class org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2 extends java.lang.Object implements org.waveprotocol.wave.model.document.operation.DocOpCursor
{

    void <init>()
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2 r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void retain(int)
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2 r0;
        int i0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2;

        i0 := @parameter0: int;

        return;
    }

    public void characters(java.lang.String)
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2 r1;
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True $r0;
        java.lang.String r2;

        r1 := @this: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True access$100()>();

        throw $r0;
    }

    public void elementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2 r2;
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True $r1;
        java.lang.String r0;
        org.waveprotocol.wave.model.document.operation.Attributes r3;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $z0 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: boolean access$200(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True access$100()>();

        throw $r1;

     label1:
        return;
    }

    public void elementEnd()
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2 r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2;

        return;
    }

    public void deleteCharacters(java.lang.String)
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2 r1;
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True $r0;
        java.lang.String r2;

        r1 := @this: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2;

        r2 := @parameter0: java.lang.String;

        $r0 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True access$100()>();

        throw $r0;
    }

    public void deleteElementStart(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2 r2;
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True $r1;
        java.lang.String r0;
        org.waveprotocol.wave.model.document.operation.Attributes r3;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $z0 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: boolean access$200(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r1 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True access$100()>();

        throw $r1;

     label1:
        return;
    }

    public void deleteElementEnd()
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2 r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2;

        return;
    }

    public void replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2 r1;
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True $r0;
        org.waveprotocol.wave.model.document.operation.Attributes r2, r3;

        r1 := @this: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.Attributes;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $r0 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True access$100()>();

        throw $r0;
    }

    public void updateAttributes(org.waveprotocol.wave.model.document.operation.AttributesUpdate)
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2 r1;
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True $r0;
        org.waveprotocol.wave.model.document.operation.AttributesUpdate r2;

        r1 := @this: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.AttributesUpdate;

        $r0 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True access$100()>();

        throw $r0;
    }

    public void annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)
    {
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2 r5;
        org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True $r4;
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r0;
        int $i0, i1;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r5 := @this: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$2;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int changeSize()>();

        if i1 >= $i0 goto label3;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getChangeKey(int)>(i1);

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getOldValue(int)>(i1);

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getNewValue(int)>(i1);

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("user/");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("spell");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("link/auto");

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("tr/1");

        if $z4 != 0 goto label2;

        $z5 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("lang");

        if $z5 != 0 goto label2;

        $r4 = staticinvoke <org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker: org.waveprotocol.wave.model.operation.wave.WorthyChangeChecker$True access$100()>();

        throw $r4;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }
}
