public class com.mycila.inject.internal.cglib.transform.MethodFilterTransformer extends com.mycila.inject.internal.cglib.transform.AbstractClassTransformer
{
    private com.mycila.inject.internal.cglib.transform.MethodFilter filter;
    private com.mycila.inject.internal.cglib.transform.ClassTransformer pass;
    private com.mycila.inject.internal.asm.ClassVisitor direct;

    public void <init>(com.mycila.inject.internal.cglib.transform.MethodFilter, com.mycila.inject.internal.cglib.transform.ClassTransformer)
    {
        com.mycila.inject.internal.cglib.transform.MethodFilter r1;
        com.mycila.inject.internal.cglib.transform.ClassTransformer r2;
        com.mycila.inject.internal.cglib.transform.MethodFilterTransformer r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.MethodFilterTransformer;

        r1 := @parameter0: com.mycila.inject.internal.cglib.transform.MethodFilter;

        r2 := @parameter1: com.mycila.inject.internal.cglib.transform.ClassTransformer;

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractClassTransformer: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.transform.MethodFilterTransformer: com.mycila.inject.internal.cglib.transform.MethodFilter filter> = r1;

        r0.<com.mycila.inject.internal.cglib.transform.MethodFilterTransformer: com.mycila.inject.internal.cglib.transform.ClassTransformer pass> = r2;

        specialinvoke r0.<com.mycila.inject.internal.cglib.transform.AbstractClassTransformer: void setTarget(com.mycila.inject.internal.asm.ClassVisitor)>(r2);

        return;
    }

    public com.mycila.inject.internal.asm.MethodVisitor visitMethod(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String[])
    {
        java.lang.String[] r4;
        com.mycila.inject.internal.cglib.transform.MethodFilter $r5;
        com.mycila.inject.internal.asm.MethodVisitor $r6;
        int i0;
        java.lang.String r1, r2, r3;
        com.mycila.inject.internal.asm.ClassVisitor $r7;
        com.mycila.inject.internal.cglib.transform.MethodFilterTransformer r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.MethodFilterTransformer;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String[];

        $r5 = r0.<com.mycila.inject.internal.cglib.transform.MethodFilterTransformer: com.mycila.inject.internal.cglib.transform.MethodFilter filter>;

        $z0 = interfaceinvoke $r5.<com.mycila.inject.internal.cglib.transform.MethodFilter: boolean accept(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i0, r1, r2, r3, r4);

        if $z0 == 0 goto label1;

        $r7 = r0.<com.mycila.inject.internal.cglib.transform.MethodFilterTransformer: com.mycila.inject.internal.cglib.transform.ClassTransformer pass>;

        goto label2;

     label1:
        $r7 = r0.<com.mycila.inject.internal.cglib.transform.MethodFilterTransformer: com.mycila.inject.internal.asm.ClassVisitor direct>;

     label2:
        $r6 = interfaceinvoke $r7.<com.mycila.inject.internal.asm.ClassVisitor: com.mycila.inject.internal.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(i0, r1, r2, r3, r4);

        return $r6;
    }

    public void setTarget(com.mycila.inject.internal.asm.ClassVisitor)
    {
        com.mycila.inject.internal.asm.ClassVisitor r1;
        com.mycila.inject.internal.cglib.transform.ClassTransformer $r2;
        com.mycila.inject.internal.cglib.transform.MethodFilterTransformer r0;

        r0 := @this: com.mycila.inject.internal.cglib.transform.MethodFilterTransformer;

        r1 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        $r2 = r0.<com.mycila.inject.internal.cglib.transform.MethodFilterTransformer: com.mycila.inject.internal.cglib.transform.ClassTransformer pass>;

        interfaceinvoke $r2.<com.mycila.inject.internal.cglib.transform.ClassTransformer: void setTarget(com.mycila.inject.internal.asm.ClassVisitor)>(r1);

        r0.<com.mycila.inject.internal.cglib.transform.MethodFilterTransformer: com.mycila.inject.internal.asm.ClassVisitor direct> = r1;

        return;
    }
}
