public final class org.apache.lucene.analysis.LimitTokenCountAnalyzer extends org.apache.lucene.analysis.Analyzer
{
    private final org.apache.lucene.analysis.Analyzer delegate;
    private final int maxTokenCount;

    public void <init>(org.apache.lucene.analysis.Analyzer, int)
    {
        int i0;
        org.apache.lucene.analysis.LimitTokenCountAnalyzer r0;
        org.apache.lucene.analysis.Analyzer r1;

        r0 := @this: org.apache.lucene.analysis.LimitTokenCountAnalyzer;

        r1 := @parameter0: org.apache.lucene.analysis.Analyzer;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.analysis.Analyzer: void <init>()>();

        r0.<org.apache.lucene.analysis.LimitTokenCountAnalyzer: org.apache.lucene.analysis.Analyzer delegate> = r1;

        r0.<org.apache.lucene.analysis.LimitTokenCountAnalyzer: int maxTokenCount> = i0;

        return;
    }

    public org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String, java.io.Reader)
    {
        org.apache.lucene.analysis.TokenStream $r5;
        org.apache.lucene.analysis.LimitTokenCountFilter $r0;
        org.apache.lucene.analysis.LimitTokenCountAnalyzer r1;
        org.apache.lucene.analysis.Analyzer $r4;
        int $i0;
        java.lang.String r2;
        java.io.Reader r3;

        r1 := @this: org.apache.lucene.analysis.LimitTokenCountAnalyzer;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.io.Reader;

        $r0 = new org.apache.lucene.analysis.LimitTokenCountFilter;

        $r4 = r1.<org.apache.lucene.analysis.LimitTokenCountAnalyzer: org.apache.lucene.analysis.Analyzer delegate>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream tokenStream(java.lang.String,java.io.Reader)>(r2, r3);

        $i0 = r1.<org.apache.lucene.analysis.LimitTokenCountAnalyzer: int maxTokenCount>;

        specialinvoke $r0.<org.apache.lucene.analysis.LimitTokenCountFilter: void <init>(org.apache.lucene.analysis.TokenStream,int)>($r5, $i0);

        return $r0;
    }

    public org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String, java.io.Reader) throws java.io.IOException
    {
        org.apache.lucene.analysis.TokenStream $r5;
        org.apache.lucene.analysis.LimitTokenCountFilter $r0;
        org.apache.lucene.analysis.LimitTokenCountAnalyzer r1;
        org.apache.lucene.analysis.Analyzer $r4;
        int $i0;
        java.lang.String r2;
        java.io.Reader r3;

        r1 := @this: org.apache.lucene.analysis.LimitTokenCountAnalyzer;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.io.Reader;

        $r0 = new org.apache.lucene.analysis.LimitTokenCountFilter;

        $r4 = r1.<org.apache.lucene.analysis.LimitTokenCountAnalyzer: org.apache.lucene.analysis.Analyzer delegate>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.analysis.Analyzer: org.apache.lucene.analysis.TokenStream reusableTokenStream(java.lang.String,java.io.Reader)>(r2, r3);

        $i0 = r1.<org.apache.lucene.analysis.LimitTokenCountAnalyzer: int maxTokenCount>;

        specialinvoke $r0.<org.apache.lucene.analysis.LimitTokenCountFilter: void <init>(org.apache.lucene.analysis.TokenStream,int)>($r5, $i0);

        return $r0;
    }

    public int getPositionIncrementGap(java.lang.String)
    {
        org.apache.lucene.analysis.LimitTokenCountAnalyzer r0;
        org.apache.lucene.analysis.Analyzer $r2;
        int $i0;
        java.lang.String r1;

        r0 := @this: org.apache.lucene.analysis.LimitTokenCountAnalyzer;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.lucene.analysis.LimitTokenCountAnalyzer: org.apache.lucene.analysis.Analyzer delegate>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.analysis.Analyzer: int getPositionIncrementGap(java.lang.String)>(r1);

        return $i0;
    }

    public int getOffsetGap(org.apache.lucene.document.Fieldable)
    {
        org.apache.lucene.document.Fieldable r1;
        org.apache.lucene.analysis.LimitTokenCountAnalyzer r0;
        org.apache.lucene.analysis.Analyzer $r2;
        int $i0;

        r0 := @this: org.apache.lucene.analysis.LimitTokenCountAnalyzer;

        r1 := @parameter0: org.apache.lucene.document.Fieldable;

        $r2 = r0.<org.apache.lucene.analysis.LimitTokenCountAnalyzer: org.apache.lucene.analysis.Analyzer delegate>;

        $i0 = virtualinvoke $r2.<org.apache.lucene.analysis.Analyzer: int getOffsetGap(org.apache.lucene.document.Fieldable)>(r1);

        return $i0;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.analysis.Analyzer $r3;
        org.apache.lucene.analysis.LimitTokenCountAnalyzer r2;
        int $i0;
        java.lang.StringBuilder $r0, $r1, $r5, $r6, $r7, $r8;
        java.lang.String $r4, $r9;

        r2 := @this: org.apache.lucene.analysis.LimitTokenCountAnalyzer;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LimitTokenCountAnalyzer(");

        $r3 = r2.<org.apache.lucene.analysis.LimitTokenCountAnalyzer: org.apache.lucene.analysis.Analyzer delegate>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.String toString()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", maxTokenCount=");

        $i0 = r2.<org.apache.lucene.analysis.LimitTokenCountAnalyzer: int maxTokenCount>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }
}
