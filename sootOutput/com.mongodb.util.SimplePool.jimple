public abstract class com.mongodb.util.SimplePool extends java.lang.Object implements javax.management.DynamicMBean
{
    static final boolean TRACK_LEAKS;
    static final long _sleepTime;
    protected final java.lang.String _name;
    protected final int _maxToKeep;
    protected final int _maxTotal;
    protected final boolean _trackLeaks;
    protected final boolean _debug;
    private final java.util.List _avail;
    protected final java.util.List _availSafe;
    private final com.mongodb.util.WeakBag _all;
    private final java.util.Map _where;
    private final java.util.concurrent.Semaphore _waiting;
    private int _everCreated;
    private int _trackPrintCount;
    private int _consecutiveSleeps;
    private static long _nextGC;

    public void <init>(java.lang.String, int, int)
    {
        com.mongodb.util.SimplePool r0;
        int i0, i1;
        java.lang.String r1;

        r0 := @this: com.mongodb.util.SimplePool;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.mongodb.util.SimplePool: void <init>(java.lang.String,int,int,boolean,boolean)>(r1, i0, i1, 0, 0);

        return;
    }

    public void <init>(java.lang.String, int, int, boolean, boolean)
    {
        java.util.concurrent.Semaphore $r6;
        com.mongodb.util.WeakBag $r4;
        java.util.HashMap $r5;
        java.util.ArrayList $r1;
        com.mongodb.util.SimplePool r0;
        java.util.List $r2, $r3;
        int i0, i1;
        java.lang.String r7;
        boolean z0, z1, $z2, $z3;

        r0 := @this: com.mongodb.util.SimplePool;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.mongodb.util.SimplePool: java.util.List _avail> = $r1;

        $r2 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2);

        r0.<com.mongodb.util.SimplePool: java.util.List _availSafe> = $r3;

        $r4 = new com.mongodb.util.WeakBag;

        specialinvoke $r4.<com.mongodb.util.WeakBag: void <init>()>();

        r0.<com.mongodb.util.SimplePool: com.mongodb.util.WeakBag _all> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<com.mongodb.util.SimplePool: java.util.Map _where> = $r5;

        $r6 = new java.util.concurrent.Semaphore;

        specialinvoke $r6.<java.util.concurrent.Semaphore: void <init>(int)>(0);

        r0.<com.mongodb.util.SimplePool: java.util.concurrent.Semaphore _waiting> = $r6;

        r0.<com.mongodb.util.SimplePool: int _everCreated> = 0;

        r0.<com.mongodb.util.SimplePool: int _trackPrintCount> = 0;

        r0.<com.mongodb.util.SimplePool: int _consecutiveSleeps> = 0;

        r0.<com.mongodb.util.SimplePool: java.lang.String _name> = r7;

        r0.<com.mongodb.util.SimplePool: int _maxToKeep> = i0;

        r0.<com.mongodb.util.SimplePool: int _maxTotal> = i1;

        if z0 != 0 goto label1;

        $z2 = <com.mongodb.util.SimplePool: boolean TRACK_LEAKS>;

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        r0.<com.mongodb.util.SimplePool: boolean _trackLeaks> = $z3;

        r0.<com.mongodb.util.SimplePool: boolean _debug> = z1;

        return;
    }

    protected abstract java.lang.Object createNew();

    public boolean ok(java.lang.Object)
    {
        com.mongodb.util.SimplePool r0;
        java.lang.Object r1;

        r0 := @this: com.mongodb.util.SimplePool;

        r1 := @parameter0: java.lang.Object;

        return 1;
    }

    public void cleanup(java.lang.Object)
    {
        com.mongodb.util.SimplePool r0;
        java.lang.Object r1;

        r0 := @this: com.mongodb.util.SimplePool;

        r1 := @parameter0: java.lang.Object;

        return;
    }

    protected int pick(int, boolean)
    {
        int i0;
        com.mongodb.util.SimplePool r0;
        boolean z0;

        r0 := @this: com.mongodb.util.SimplePool;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return i0;
    }

    public void done(java.lang.Object)
    {
        com.mongodb.util.SimplePool r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mongodb.util.SimplePool;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.mongodb.util.SimplePool: boolean ok(java.lang.Object)>(r1);

        virtualinvoke r0.<com.mongodb.util.SimplePool: void done(java.lang.Object,boolean)>(r1, $z0);

        return;
    }

    void done(java.lang.Object, boolean)
    {
        java.lang.Throwable $r15, $r16, $r17;
        com.mongodb.util.WeakBag $r3, $r11;
        java.lang.Integer $r14;
        com.mongodb.util.SimplePool r0;
        java.util.Map $r12, $r13;
        int $i0, $i1, $i2, $i3, i4, $i5;
        boolean $z0, z1, $z2;
        java.util.concurrent.Semaphore $r5;
        java.lang.RuntimeException $r8;
        java.util.List $r1, $r4, $r6, $r9, $r10, $r18;
        java.lang.Object r2, $r7;

        r0 := @this: com.mongodb.util.SimplePool;

        r2 := @parameter0: java.lang.Object;

        z1 := @parameter1: boolean;

        $z0 = r0.<com.mongodb.util.SimplePool: boolean _trackLeaks>;

        if $z0 == 0 goto label05;

        $r12 = r0.<com.mongodb.util.SimplePool: java.util.Map _where>;

        entermonitor $r12;

     label01:
        $r13 = r0.<com.mongodb.util.SimplePool: java.util.Map _where>;

        $i3 = specialinvoke r0.<com.mongodb.util.SimplePool: int _hash(java.lang.Object)>(r2);

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r14);

        exitmonitor $r12;

     label02:
        goto label05;

     label03:
        $r17 := @caughtexception;

        exitmonitor $r12;

     label04:
        throw $r17;

     label05:
        if z1 != 0 goto label11;

        $r10 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        entermonitor $r10;

     label06:
        $r11 = r0.<com.mongodb.util.SimplePool: com.mongodb.util.WeakBag _all>;

        virtualinvoke $r11.<com.mongodb.util.WeakBag: boolean remove(java.lang.Object)>(r2);

        exitmonitor $r10;

     label07:
        goto label10;

     label08:
        $r16 := @caughtexception;

        exitmonitor $r10;

     label09:
        throw $r16;

     label10:
        return;

     label11:
        $r1 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        entermonitor $r1;

     label12:
        $i0 = r0.<com.mongodb.util.SimplePool: int _maxToKeep>;

        if $i0 < 0 goto label13;

        $r9 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        $i2 = r0.<com.mongodb.util.SimplePool: int _maxToKeep>;

        if $i1 >= $i2 goto label17;

     label13:
        i4 = 0;

     label14:
        $r18 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        $i5 = interfaceinvoke $r18.<java.util.List: int size()>();

        if i4 >= $i5 goto label16;

        $r6 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i4);

        if $r7 != r2 goto label15;

        $r8 = new java.lang.RuntimeException;

        specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("trying to put something back in the pool that\'s already there");

        throw $r8;

     label15:
        i4 = i4 + 1;

        goto label14;

     label16:
        $r3 = r0.<com.mongodb.util.SimplePool: com.mongodb.util.WeakBag _all>;

        $z2 = virtualinvoke $r3.<com.mongodb.util.WeakBag: boolean contains(java.lang.Object)>(r2);

        if $z2 == 0 goto label18;

        $r4 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r5 = r0.<com.mongodb.util.SimplePool: java.util.concurrent.Semaphore _waiting>;

        virtualinvoke $r5.<java.util.concurrent.Semaphore: void release()>();

        goto label18;

     label17:
        virtualinvoke r0.<com.mongodb.util.SimplePool: void cleanup(java.lang.Object)>(r2);

     label18:
        exitmonitor $r1;

     label19:
        goto label22;

     label20:
        $r15 := @caughtexception;

        exitmonitor $r1;

     label21:
        throw $r15;

     label22:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.lang.Throwable from label12 to label19 with label20;
        catch java.lang.Throwable from label20 to label21 with label20;
    }

    public void remove(java.lang.Object)
    {
        com.mongodb.util.SimplePool r0;
        java.lang.Object r1;

        r0 := @this: com.mongodb.util.SimplePool;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<com.mongodb.util.SimplePool: void done(java.lang.Object,boolean)>(r1, 0);

        return;
    }

    public java.lang.Object get()
    {
        com.mongodb.util.SimplePool r0;
        java.lang.Object $r1;

        r0 := @this: com.mongodb.util.SimplePool;

        $r1 = virtualinvoke r0.<com.mongodb.util.SimplePool: java.lang.Object get(long)>(-1L);

        return $r1;
    }

    public java.lang.Object get(long)
    {
        java.lang.Throwable $r2, $r6;
        long l0;
        java.lang.Integer $r5;
        com.mongodb.util.SimplePool r0;
        java.util.Map $r3, $r4;
        int $i1;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: com.mongodb.util.SimplePool;

        l0 := @parameter0: long;

        $r1 = specialinvoke r0.<com.mongodb.util.SimplePool: java.lang.Object _get(long)>(l0);

        if $r1 == null goto label5;

        r0.<com.mongodb.util.SimplePool: int _consecutiveSleeps> = 0;

        $z0 = r0.<com.mongodb.util.SimplePool: boolean _trackLeaks>;

        if $z0 == 0 goto label5;

        $r2 = new java.lang.Throwable;

        specialinvoke $r2.<java.lang.Throwable: void <init>()>();

        virtualinvoke $r2.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>();

        $r3 = r0.<com.mongodb.util.SimplePool: java.util.Map _where>;

        entermonitor $r3;

     label1:
        $r4 = r0.<com.mongodb.util.SimplePool: java.util.Map _where>;

        $i1 = specialinvoke r0.<com.mongodb.util.SimplePool: int _hash(java.lang.Object)>($r1);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r2);

        exitmonitor $r3;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        exitmonitor $r3;

     label4:
        throw $r6;

     label5:
        return $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private int _hash(java.lang.Object)
    {
        int $i0;
        com.mongodb.util.SimplePool r1;
        java.lang.Object r0;

        r1 := @this: com.mongodb.util.SimplePool;

        r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        return $i0;
    }

    private java.lang.Object _get(long)
    {
        java.lang.IllegalStateException $r15;
        com.mongodb.util.WeakBag $r3, $r8, $r9;
        com.mongodb.util.SimplePool r0;
        byte $b2, $b3, $b7, $b8;
        boolean z0, $z1, $z2, $z3;
        java.util.List $r1, $r4, $r6, $r12;
        java.lang.Throwable $r11;
        long l1, $l5, $l6, l18, $l23;
        int $i0, $i4, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i19, i20, $i21, $i22, $i24, $i25, $i26;
        java.util.concurrent.Semaphore $r13;
        java.util.concurrent.TimeUnit $r14;
        java.lang.InterruptedException $r10;
        java.lang.Object $r2, $r7;

        r0 := @this: com.mongodb.util.SimplePool;

        l1 := @parameter0: long;

        l18 = 0L;

     label01:
        $r1 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        entermonitor $r1;

     label02:
        $i0 = r0.<com.mongodb.util.SimplePool: int _maxTotal>;

        if $i0 <= 0 goto label03;

        $r9 = r0.<com.mongodb.util.SimplePool: com.mongodb.util.WeakBag _all>;

        $i16 = virtualinvoke $r9.<com.mongodb.util.WeakBag: int size()>();

        $i17 = r0.<com.mongodb.util.SimplePool: int _maxTotal>;

        if $i16 >= $i17 goto label04;

     label03:
        $z3 = 1;

        goto label05;

     label04:
        $z3 = 0;

     label05:
        z0 = $z3;

     label06:
        $r12 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        $i19 = interfaceinvoke $r12.<java.util.List: int size()>();

        if $i19 <= 0 goto label10;

        $r4 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        $i14 = interfaceinvoke $r4.<java.util.List: int size()>();

        i20 = $i14 - 1;

        $i15 = virtualinvoke r0.<com.mongodb.util.SimplePool: int pick(int,boolean)>(i20, z0);

        if $i15 < 0 goto label09;

        $r6 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>($i15);

        $z2 = virtualinvoke r0.<com.mongodb.util.SimplePool: boolean ok(java.lang.Object)>($r7);

        if $z2 == 0 goto label08;

        specialinvoke r0.<com.mongodb.util.SimplePool: void _debug(java.lang.String)>("got an old one");

        exitmonitor $r1;

     label07:
        return $r7;

     label08:
        specialinvoke r0.<com.mongodb.util.SimplePool: void _debug(java.lang.String)>("old one was not ok");

        $r8 = r0.<com.mongodb.util.SimplePool: com.mongodb.util.WeakBag _all>;

        virtualinvoke $r8.<com.mongodb.util.WeakBag: boolean remove(java.lang.Object)>($r7);

        goto label06;

     label09:
        if z0 != 0 goto label10;

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("can\'t pick nothing if can\'t create");

        throw $r15;

     label10:
        if z0 == 0 goto label12;

        $i12 = r0.<com.mongodb.util.SimplePool: int _everCreated>;

        $i13 = $i12 + 1;

        r0.<com.mongodb.util.SimplePool: int _everCreated> = $i13;

        $r2 = virtualinvoke r0.<com.mongodb.util.SimplePool: java.lang.Object createNew()>();

        $r3 = r0.<com.mongodb.util.SimplePool: com.mongodb.util.WeakBag _all>;

        virtualinvoke $r3.<com.mongodb.util.WeakBag: void add(java.lang.Object)>($r2);

        exitmonitor $r1;

     label11:
        return $r2;

     label12:
        $z1 = r0.<com.mongodb.util.SimplePool: boolean _trackLeaks>;

        if $z1 == 0 goto label13;

        $i9 = r0.<com.mongodb.util.SimplePool: int _trackPrintCount>;

        $i10 = $i9 + 1;

        r0.<com.mongodb.util.SimplePool: int _trackPrintCount> = $i10;

        $i11 = $i9 % 200;

        if $i11 != 0 goto label13;

        specialinvoke r0.<com.mongodb.util.SimplePool: void _wherePrint()>();

        r0.<com.mongodb.util.SimplePool: int _trackPrintCount> = 1;

     label13:
        exitmonitor $r1;

     label14:
        goto label17;

     label15:
        $r11 := @caughtexception;

        exitmonitor $r1;

     label16:
        throw $r11;

     label17:
        $b2 = l1 cmp 0L;

        if $b2 != 0 goto label18;

        return null;

     label18:
        $b3 = l1 cmp 0L;

        $i24 = (int) $b3;

        if $i24 <= 0 goto label19;

        $b8 = l18 cmp l1;

        $i25 = (int) $b8;

        if $i25 < 0 goto label19;

        return null;

     label19:
        $i4 = r0.<com.mongodb.util.SimplePool: int _consecutiveSleeps>;

        if $i4 <= 100 goto label20;

        $b7 = l18 cmp 4L;

        $i26 = (int) $b7;

        if $i26 <= 0 goto label20;

        staticinvoke <com.mongodb.util.SimplePool: void _gcIfNeeded()>();

     label20:
        $i21 = r0.<com.mongodb.util.SimplePool: int _consecutiveSleeps>;

        $i22 = $i21 + 1;

        r0.<com.mongodb.util.SimplePool: int _consecutiveSleeps> = $i22;

        $l23 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label21:
        $r13 = r0.<com.mongodb.util.SimplePool: java.util.concurrent.Semaphore _waiting>;

        $r14 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r13.<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>(2L, $r14);

     label22:
        goto label24;

     label23:
        $r10 := @caughtexception;

     label24:
        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l6 = $l5 - $l23;

        l18 = l18 + $l6;

        goto label01;

        catch java.lang.Throwable from label02 to label07 with label15;
        catch java.lang.Throwable from label08 to label11 with label15;
        catch java.lang.Throwable from label12 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.lang.InterruptedException from label21 to label22 with label23;
    }

    private void _wherePrint()
    {
        java.lang.Throwable r10, $r15;
        com.mongodb.util.SimplePool r1;
        java.util.Map $r4, $r5;
        int $i0, i1;
        java.lang.StackTraceElement $r13;
        java.lang.String $r2;
        boolean $z0;
        java.io.PrintStream $r8;
        java.util.Iterator $r7;
        java.util.Collection $r6;
        java.lang.StackTraceElement[] $r11;
        java.lang.StringBuilder $r0, $r3, $r12, $r14;
        java.lang.Object $r9;

        r1 := @this: com.mongodb.util.SimplePool;

        $r0 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<com.mongodb.util.SimplePool: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" waiting \n");

        $r4 = r1.<com.mongodb.util.SimplePool: java.util.Map _where>;

        entermonitor $r4;

     label1:
        $r5 = r1.<com.mongodb.util.SimplePool: java.util.Map _where>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.Throwable) $r9;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--\n");

        $r11 = virtualinvoke r10.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        i1 = 0;

     label3:
        $i0 = lengthof $r11;

        if i1 >= $i0 goto label4;

        $r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r13 = $r11[i1];

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        i1 = i1 + 1;

        goto label3;

     label4:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("----\n");

        goto label2;

     label5:
        exitmonitor $r4;

     label6:
        goto label9;

     label7:
        $r15 := @caughtexception;

        exitmonitor $r4;

     label8:
        throw $r15;

     label9:
        $r8 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.Object)>($r3);

        return;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    protected void clear()
    {
        java.lang.Throwable $r9, $r10;
        java.util.Iterator $r3;
        com.mongodb.util.WeakBag $r5;
        com.mongodb.util.SimplePool r0;
        java.util.List $r1, $r2, $r4;
        java.util.Map $r6, $r7;
        java.lang.Object $r8;
        boolean $z0;

        r0 := @this: com.mongodb.util.SimplePool;

        $r1 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        entermonitor $r1;

     label01:
        $r2 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r8 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<com.mongodb.util.SimplePool: void cleanup(java.lang.Object)>($r8);

        goto label02;

     label03:
        $r4 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        interfaceinvoke $r4.<java.util.List: void clear()>();

        $r5 = r0.<com.mongodb.util.SimplePool: com.mongodb.util.WeakBag _all>;

        virtualinvoke $r5.<com.mongodb.util.WeakBag: void clear()>();

        $r6 = r0.<com.mongodb.util.SimplePool: java.util.Map _where>;

        entermonitor $r6;

     label04:
        $r7 = r0.<com.mongodb.util.SimplePool: java.util.Map _where>;

        interfaceinvoke $r7.<java.util.Map: void clear()>();

        exitmonitor $r6;

     label05:
        goto label08;

     label06:
        $r10 := @caughtexception;

        exitmonitor $r6;

     label07:
        throw $r10;

     label08:
        exitmonitor $r1;

     label09:
        goto label12;

     label10:
        $r9 := @caughtexception;

        exitmonitor $r1;

     label11:
        throw $r9;

     label12:
        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label01 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    public int total()
    {
        com.mongodb.util.SimplePool r0;
        com.mongodb.util.WeakBag $r1;
        int $i0;

        r0 := @this: com.mongodb.util.SimplePool;

        $r1 = r0.<com.mongodb.util.SimplePool: com.mongodb.util.WeakBag _all>;

        $i0 = virtualinvoke $r1.<com.mongodb.util.WeakBag: int size()>();

        return $i0;
    }

    public int inUse()
    {
        com.mongodb.util.SimplePool r0;
        java.util.List $r2;
        com.mongodb.util.WeakBag $r1;
        int $i0, $i1, $i2;

        r0 := @this: com.mongodb.util.SimplePool;

        $r1 = r0.<com.mongodb.util.SimplePool: com.mongodb.util.WeakBag _all>;

        $i0 = virtualinvoke $r1.<com.mongodb.util.WeakBag: int size()>();

        $r2 = r0.<com.mongodb.util.SimplePool: java.util.List _avail>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = $i0 - $i1;

        return $i2;
    }

    public java.util.Iterator getAll()
    {
        com.mongodb.util.SimplePool r0;
        java.util.List $r2;
        java.util.Iterator $r3;
        com.mongodb.util.WeakBag $r1;

        r0 := @this: com.mongodb.util.SimplePool;

        $r1 = r0.<com.mongodb.util.SimplePool: com.mongodb.util.WeakBag _all>;

        $r2 = virtualinvoke $r1.<com.mongodb.util.WeakBag: java.util.List getAll()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r3;
    }

    public int available()
    {
        com.mongodb.util.SimplePool r0;
        java.lang.IllegalStateException $r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.mongodb.util.SimplePool;

        $i0 = r0.<com.mongodb.util.SimplePool: int _maxTotal>;

        if $i0 > 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this pool has an infinite number of things available");

        throw $r1;

     label1:
        $i1 = r0.<com.mongodb.util.SimplePool: int _maxTotal>;

        $i2 = virtualinvoke r0.<com.mongodb.util.SimplePool: int inUse()>();

        $i3 = $i1 - $i2;

        return $i3;
    }

    public int everCreated()
    {
        com.mongodb.util.SimplePool r0;
        int $i0;

        r0 := @this: com.mongodb.util.SimplePool;

        $i0 = r0.<com.mongodb.util.SimplePool: int _everCreated>;

        return $i0;
    }

    private void _debug(java.lang.String)
    {
        java.io.PrintStream $r2;
        com.mongodb.util.SimplePool r0;
        java.lang.StringBuilder $r1, $r3, $r5, $r6, $r8;
        java.lang.String $r4, r7, $r9;
        boolean $z0;

        r0 := @this: com.mongodb.util.SimplePool;

        r7 := @parameter0: java.lang.String;

        $z0 = r0.<com.mongodb.util.SimplePool: boolean _debug>;

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SimplePool [");

        $r4 = r0.<com.mongodb.util.SimplePool: java.lang.String _name>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] : ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label1:
        return;
    }

    public int maxToKeep()
    {
        com.mongodb.util.SimplePool r0;
        int $i0;

        r0 := @this: com.mongodb.util.SimplePool;

        $i0 = r0.<com.mongodb.util.SimplePool: int _maxToKeep>;

        return $i0;
    }

    public java.lang.Object getAttribute(java.lang.String)
    {
        java.lang.Integer $r12, $r13, $r14, $r15;
        com.mongodb.util.SimplePool r11;
        int $i0, $i1, $i2, $i3;
        java.lang.String r0, $r5, $r10, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.PrintStream $r2;
        java.lang.RuntimeException $r6;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8, $r9;

        r11 := @this: com.mongodb.util.SimplePool;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("name");

        if $z0 == 0 goto label1;

        $r16 = r11.<com.mongodb.util.SimplePool: java.lang.String _name>;

        return $r16;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("size");

        if $z1 == 0 goto label2;

        $i3 = r11.<com.mongodb.util.SimplePool: int _maxToKeep>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        return $r15;

     label2:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("available");

        if $z2 == 0 goto label3;

        $i2 = virtualinvoke r11.<com.mongodb.util.SimplePool: int available()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        return $r14;

     label3:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("inUse");

        if $z3 == 0 goto label4;

        $i1 = virtualinvoke r11.<com.mongodb.util.SimplePool: int inUse()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        return $r13;

     label4:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("everCreated");

        if $z4 == 0 goto label5;

        $i0 = r11.<com.mongodb.util.SimplePool: int _everCreated>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        return $r12;

     label5:
        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("com.mongo.util.SimplePool unknown attribute: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5);

        $r6 = new java.lang.RuntimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown attribute: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r6;
    }

    public javax.management.AttributeList getAttributes(java.lang.String[])
    {
        java.lang.String[] r1;
        javax.management.AttributeList $r0;
        com.mongodb.util.SimplePool r4;
        javax.management.Attribute $r3;
        int $i0, i1;
        java.lang.Object $r5;
        java.lang.String r2;

        r4 := @this: com.mongodb.util.SimplePool;

        r1 := @parameter0: java.lang.String[];

        $r0 = new javax.management.AttributeList;

        specialinvoke $r0.<javax.management.AttributeList: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        r2 = r1[i1];

        $r3 = new javax.management.Attribute;

        $r5 = virtualinvoke r4.<com.mongodb.util.SimplePool: java.lang.Object getAttribute(java.lang.String)>(r2);

        specialinvoke $r3.<javax.management.Attribute: void <init>(java.lang.String,java.lang.Object)>(r2, $r5);

        virtualinvoke $r0.<javax.management.AttributeList: void add(javax.management.Attribute)>($r3);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public javax.management.MBeanInfo getMBeanInfo()
    {
        javax.management.MBeanAttributeInfo $r5, $r7, $r8, $r9, $r10;
        javax.management.MBeanInfo $r0;
        com.mongodb.util.SimplePool r1;
        javax.management.MBeanAttributeInfo[] $r4;
        java.lang.Class $r2;
        java.lang.String $r3, $r6;

        r1 := @this: com.mongodb.util.SimplePool;

        $r0 = new javax.management.MBeanInfo;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r6 = r1.<com.mongodb.util.SimplePool: java.lang.String _name>;

        $r4 = newarray (javax.management.MBeanAttributeInfo)[5];

        $r5 = new javax.management.MBeanAttributeInfo;

        specialinvoke $r5.<javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>("name", "java.lang.String", "name of pool", 1, 0, 0);

        $r4[0] = $r5;

        $r7 = new javax.management.MBeanAttributeInfo;

        specialinvoke $r7.<javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>("size", "java.lang.Integer", "total size of pool", 1, 0, 0);

        $r4[1] = $r7;

        $r8 = new javax.management.MBeanAttributeInfo;

        specialinvoke $r8.<javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>("available", "java.lang.Integer", "total connections available", 1, 0, 0);

        $r4[2] = $r8;

        $r9 = new javax.management.MBeanAttributeInfo;

        specialinvoke $r9.<javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>("inUse", "java.lang.Integer", "number connections in use right now", 1, 0, 0);

        $r4[3] = $r9;

        $r10 = new javax.management.MBeanAttributeInfo;

        specialinvoke $r10.<javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>("everCreated", "java.lang.Integer", "numbe connections ever created", 1, 0, 0);

        $r4[4] = $r10;

        specialinvoke $r0.<javax.management.MBeanInfo: void <init>(java.lang.String,java.lang.String,javax.management.MBeanAttributeInfo[],javax.management.MBeanConstructorInfo[],javax.management.MBeanOperationInfo[],javax.management.MBeanNotificationInfo[])>($r3, $r6, $r4, null, null, null);

        return $r0;
    }

    public java.lang.Object invoke(java.lang.String, java.lang.Object[], java.lang.String[])
    {
        com.mongodb.util.SimplePool r1;
        java.lang.Object[] r3;
        java.lang.String[] r4;
        java.lang.RuntimeException $r0;
        java.lang.String r2;

        r1 := @this: com.mongodb.util.SimplePool;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object[];

        r4 := @parameter2: java.lang.String[];

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("not allowed to invoke anything");

        throw $r0;
    }

    public void setAttribute(javax.management.Attribute)
    {
        com.mongodb.util.SimplePool r1;
        java.lang.RuntimeException $r0;
        javax.management.Attribute r2;

        r1 := @this: com.mongodb.util.SimplePool;

        r2 := @parameter0: javax.management.Attribute;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("not allowed to set anything");

        throw $r0;
    }

    public javax.management.AttributeList setAttributes(javax.management.AttributeList)
    {
        com.mongodb.util.SimplePool r1;
        java.lang.RuntimeException $r0;
        javax.management.AttributeList r2;

        r1 := @this: com.mongodb.util.SimplePool;

        r2 := @parameter0: javax.management.AttributeList;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("not allowed to set anything");

        throw $r0;
    }

    public java.lang.String toString()
    {
        com.mongodb.util.WeakBag $r16;
        com.mongodb.util.SimplePool r2;
        java.util.Map $r10;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r3, $r17;
        java.util.List $r13;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r12, $r14, $r15;

        r2 := @this: com.mongodb.util.SimplePool;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pool: ");

        $r3 = r2.<com.mongodb.util.SimplePool: java.lang.String _name>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" maxToKeep: ");

        $i0 = r2.<com.mongodb.util.SimplePool: int _maxToKeep>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" maxTotal: ");

        $i1 = r2.<com.mongodb.util.SimplePool: int _maxToKeep>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" where ");

        $r10 = r2.<com.mongodb.util.SimplePool: java.util.Map _where>;

        $i2 = interfaceinvoke $r10.<java.util.Map: int size()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" avail ");

        $r13 = r2.<com.mongodb.util.SimplePool: java.util.List _avail>;

        $i3 = interfaceinvoke $r13.<java.util.List: int size()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" all ");

        $r16 = r2.<com.mongodb.util.SimplePool: com.mongodb.util.WeakBag _all>;

        $i4 = virtualinvoke $r16.<com.mongodb.util.WeakBag: int size()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r17 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;
    }

    private static void _gcIfNeeded()
    {
        byte $b2;
        int $i4;
        long $l0, $l1, $l3;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l1 = <com.mongodb.util.SimplePool: long _nextGC>;

        $b2 = $l0 cmp $l1;

        $i4 = (int) $b2;

        if $i4 >= 0 goto label1;

        return;

     label1:
        $l3 = $l0 + 5000L;

        <com.mongodb.util.SimplePool: long _nextGC> = $l3;

        staticinvoke <java.lang.System: void gc()>();

        return;
    }

    static void <clinit>()
    {
        boolean $z0;

        <com.mongodb.util.SimplePool: long _sleepTime> = 2L;

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("MONGO-TRACKLEAKS");

        <com.mongodb.util.SimplePool: boolean TRACK_LEAKS> = $z0;

        <com.mongodb.util.SimplePool: long _nextGC> = 0L;

        return;
    }
}
