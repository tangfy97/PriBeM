public final class kodkod.engine.Solver extends java.lang.Object
{
    private final kodkod.engine.config.Options options;

    public void <init>()
    {
        kodkod.engine.config.Options $r1;
        kodkod.engine.Solver r0;

        r0 := @this: kodkod.engine.Solver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new kodkod.engine.config.Options;

        specialinvoke $r1.<kodkod.engine.config.Options: void <init>()>();

        r0.<kodkod.engine.Solver: kodkod.engine.config.Options options> = $r1;

        return;
    }

    public void <init>(kodkod.engine.config.Options)
    {
        kodkod.engine.config.Options r1;
        kodkod.engine.Solver r0;
        java.lang.NullPointerException $r2;

        r0 := @this: kodkod.engine.Solver;

        r1 := @parameter0: kodkod.engine.config.Options;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        r0.<kodkod.engine.Solver: kodkod.engine.config.Options options> = r1;

        return;
    }

    public kodkod.engine.config.Options options()
    {
        kodkod.engine.config.Options $r1;
        kodkod.engine.Solver r0;

        r0 := @this: kodkod.engine.Solver;

        $r1 = r0.<kodkod.engine.Solver: kodkod.engine.config.Options options>;

        return $r1;
    }

    public kodkod.engine.Solution solve(kodkod.ast.Formula, kodkod.instance.Bounds, kodkod.engine.Cost) throws kodkod.engine.fol2sat.HigherOrderDeclException, kodkod.engine.fol2sat.UnboundLeafException, kodkod.engine.AbortedException
    {
        java.lang.IllegalStateException $r2;
        kodkod.util.ints.IntIterator $r16;
        kodkod.instance.Bounds r6;
        kodkod.engine.fol2sat.Translation $r8;
        kodkod.engine.Cost r15;
        boolean $z0, $z1, $z2, $z3;
        kodkod.engine.satlab.SATFactory $r4;
        kodkod.engine.fol2sat.TrivialFormulaException $r22;
        kodkod.engine.config.Reporter $r18;
        java.util.Set $r11;
        kodkod.engine.satlab.SATAbortedException $r20;
        kodkod.engine.AbortedException $r21;
        kodkod.engine.satlab.SATSolver $r9;
        kodkod.ast.Relation r24;
        kodkod.engine.config.Options $r1, $r3, $r7, $r17;
        long $l1, $l2, $l7, $l8, $l9, $l10, $l11, $l12;
        int $i0, $i3, $i4, $i5, $i6;
        kodkod.engine.Statistics $r19;
        java.util.Iterator $r12;
        kodkod.ast.Formula r5;
        kodkod.util.ints.IntSet $r14;
        kodkod.engine.satlab.SATMinSolver r10;
        kodkod.engine.Solution $r23, $r25;
        kodkod.engine.Solver r0;
        java.lang.Object $r13;

        r0 := @this: kodkod.engine.Solver;

        r5 := @parameter0: kodkod.ast.Formula;

        r6 := @parameter1: kodkod.instance.Bounds;

        r15 := @parameter2: kodkod.engine.Cost;

        $r1 = r0.<kodkod.engine.Solver: kodkod.engine.config.Options options>;

        $i0 = virtualinvoke $r1.<kodkod.engine.config.Options: int logTranslation()>();

        if $i0 > 0 goto label01;

        $r3 = r0.<kodkod.engine.Solver: kodkod.engine.config.Options options>;

        $r4 = virtualinvoke $r3.<kodkod.engine.config.Options: kodkod.engine.satlab.SATFactory solver()>();

        $z0 = virtualinvoke $r4.<kodkod.engine.satlab.SATFactory: boolean minimizer()>();

        if $z0 != 0 goto label02;

     label01:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label02:
        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label03:
        $r7 = r0.<kodkod.engine.Solver: kodkod.engine.config.Options options>;

        $r8 = staticinvoke <kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.Translation translate(kodkod.ast.Formula,kodkod.instance.Bounds,kodkod.engine.config.Options)>(r5, r6, $r7);

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r9 = virtualinvoke $r8.<kodkod.engine.fol2sat.Translation: kodkod.engine.satlab.SATSolver cnf()>();

        r10 = (kodkod.engine.satlab.SATMinSolver) $r9;

        $r11 = virtualinvoke r6.<kodkod.instance.Bounds: java.util.Set relations()>();

        $r12 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

        goto label07;

     label04:
        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r24 = (kodkod.ast.Relation) $r13;

        $r14 = virtualinvoke $r8.<kodkod.engine.fol2sat.Translation: kodkod.util.ints.IntSet primaryVariables(kodkod.ast.Relation)>(r24);

        if $r14 == null goto label07;

        $i3 = interfaceinvoke r15.<kodkod.engine.Cost: int edgeCost(kodkod.ast.Relation)>(r24);

        $r16 = interfaceinvoke $r14.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label06;

     label05:
        $i4 = interfaceinvoke $r16.<kodkod.util.ints.IntIterator: int next()>();

        interfaceinvoke r10.<kodkod.engine.satlab.SATMinSolver: void setCost(int,int)>($i4, $i3);

     label06:
        $z1 = interfaceinvoke $r16.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z1 != 0 goto label05;

     label07:
        $z3 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label04;

        $r17 = r0.<kodkod.engine.Solver: kodkod.engine.config.Options options>;

        $r18 = virtualinvoke $r17.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        $i5 = interfaceinvoke r10.<kodkod.engine.satlab.SATMinSolver: int numberOfVariables()>();

        $i6 = interfaceinvoke r10.<kodkod.engine.satlab.SATMinSolver: int numberOfClauses()>();

        interfaceinvoke $r18.<kodkod.engine.config.Reporter: void solvingCNF(int,int,int)>(0, $i5, $i6);

        $l7 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z2 = interfaceinvoke r10.<kodkod.engine.satlab.SATMinSolver: boolean solve()>();

        $l8 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r19 = new kodkod.engine.Statistics;

        $l10 = $l2 - $l1;

        $l9 = $l8 - $l7;

        specialinvoke $r19.<kodkod.engine.Statistics: void <init>(kodkod.engine.fol2sat.Translation,long,long)>($r8, $l10, $l9);

        if $z2 == 0 goto label08;

        $r25 = staticinvoke <kodkod.engine.Solver: kodkod.engine.Solution sat(kodkod.instance.Bounds,kodkod.engine.fol2sat.Translation,kodkod.engine.Statistics)>(r6, $r8, $r19);

        goto label09;

     label08:
        $r25 = staticinvoke <kodkod.engine.Solver: kodkod.engine.Solution unsat(kodkod.engine.fol2sat.Translation,kodkod.engine.Statistics)>($r8, $r19);

     label09:
        return $r25;

     label10:
        $r22 := @caughtexception;

        $l11 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l12 = $l11 - $l1;

        $r23 = staticinvoke <kodkod.engine.Solver: kodkod.engine.Solution trivial(kodkod.instance.Bounds,kodkod.engine.fol2sat.TrivialFormulaException,long)>(r6, $r22, $l12);

        return $r23;

     label11:
        $r20 := @caughtexception;

        $r21 = new kodkod.engine.AbortedException;

        specialinvoke $r21.<kodkod.engine.AbortedException: void <init>(java.lang.Throwable)>($r20);

        throw $r21;

        catch kodkod.engine.fol2sat.TrivialFormulaException from label03 to label09 with label10;
        catch kodkod.engine.satlab.SATAbortedException from label03 to label09 with label11;
    }

    public kodkod.engine.Solution solve(kodkod.ast.Formula, kodkod.instance.Bounds) throws kodkod.engine.fol2sat.HigherOrderDeclException, kodkod.engine.fol2sat.UnboundLeafException, kodkod.engine.AbortedException
    {
        kodkod.engine.config.Options $r3, $r6;
        long $l0, $l1, $l5, $l6, $l7, $l8, $l9, $l10;
        kodkod.instance.Bounds r1;
        kodkod.engine.fol2sat.Translation $r4;
        int $i2, $i3, $i4;
        kodkod.engine.Statistics $r8;
        boolean $z0;
        kodkod.engine.fol2sat.TrivialFormulaException $r11;
        kodkod.ast.Formula r0;
        kodkod.engine.config.Reporter $r7;
        kodkod.engine.Solution $r12, $r13;
        kodkod.engine.satlab.SATAbortedException $r9;
        kodkod.engine.AbortedException $r10;
        kodkod.engine.Solver r2;
        kodkod.engine.satlab.SATSolver $r5;

        r2 := @this: kodkod.engine.Solver;

        r0 := @parameter0: kodkod.ast.Formula;

        r1 := @parameter1: kodkod.instance.Bounds;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label1:
        $r3 = r2.<kodkod.engine.Solver: kodkod.engine.config.Options options>;

        $r4 = staticinvoke <kodkod.engine.fol2sat.Translator: kodkod.engine.fol2sat.Translation translate(kodkod.ast.Formula,kodkod.instance.Bounds,kodkod.engine.config.Options)>(r0, r1, $r3);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r5 = virtualinvoke $r4.<kodkod.engine.fol2sat.Translation: kodkod.engine.satlab.SATSolver cnf()>();

        $r6 = r2.<kodkod.engine.Solver: kodkod.engine.config.Options options>;

        $r7 = virtualinvoke $r6.<kodkod.engine.config.Options: kodkod.engine.config.Reporter reporter()>();

        $i2 = virtualinvoke $r4.<kodkod.engine.fol2sat.Translation: int numPrimaryVariables()>();

        $i3 = interfaceinvoke $r5.<kodkod.engine.satlab.SATSolver: int numberOfVariables()>();

        $i4 = interfaceinvoke $r5.<kodkod.engine.satlab.SATSolver: int numberOfClauses()>();

        interfaceinvoke $r7.<kodkod.engine.config.Reporter: void solvingCNF(int,int,int)>($i2, $i3, $i4);

        $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $z0 = interfaceinvoke $r5.<kodkod.engine.satlab.SATSolver: boolean solve()>();

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r8 = new kodkod.engine.Statistics;

        $l8 = $l1 - $l0;

        $l7 = $l6 - $l5;

        specialinvoke $r8.<kodkod.engine.Statistics: void <init>(kodkod.engine.fol2sat.Translation,long,long)>($r4, $l8, $l7);

        if $z0 == 0 goto label2;

        $r13 = staticinvoke <kodkod.engine.Solver: kodkod.engine.Solution sat(kodkod.instance.Bounds,kodkod.engine.fol2sat.Translation,kodkod.engine.Statistics)>(r1, $r4, $r8);

        goto label3;

     label2:
        $r13 = staticinvoke <kodkod.engine.Solver: kodkod.engine.Solution unsat(kodkod.engine.fol2sat.Translation,kodkod.engine.Statistics)>($r4, $r8);

     label3:
        return $r13;

     label4:
        $r11 := @caughtexception;

        $l9 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l10 = $l9 - $l0;

        $r12 = staticinvoke <kodkod.engine.Solver: kodkod.engine.Solution trivial(kodkod.instance.Bounds,kodkod.engine.fol2sat.TrivialFormulaException,long)>(r1, $r11, $l10);

        return $r12;

     label5:
        $r9 := @caughtexception;

        $r10 = new kodkod.engine.AbortedException;

        specialinvoke $r10.<kodkod.engine.AbortedException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

        catch kodkod.engine.fol2sat.TrivialFormulaException from label1 to label3 with label4;
        catch kodkod.engine.satlab.SATAbortedException from label1 to label3 with label5;
    }

    public java.util.Iterator solveAll(kodkod.ast.Formula, kodkod.instance.Bounds) throws kodkod.engine.fol2sat.HigherOrderDeclException, kodkod.engine.fol2sat.UnboundLeafException, kodkod.engine.AbortedException
    {
        kodkod.engine.config.Options $r1, $r6;
        kodkod.engine.satlab.SATFactory $r2;
        kodkod.ast.Formula r4;
        java.lang.IllegalArgumentException $r7;
        kodkod.instance.Bounds r5;
        kodkod.engine.Solver r0;
        kodkod.engine.Solver$SolutionIterator $r3;
        boolean $z0;

        r0 := @this: kodkod.engine.Solver;

        r4 := @parameter0: kodkod.ast.Formula;

        r5 := @parameter1: kodkod.instance.Bounds;

        $r1 = r0.<kodkod.engine.Solver: kodkod.engine.config.Options options>;

        $r2 = virtualinvoke $r1.<kodkod.engine.config.Options: kodkod.engine.satlab.SATFactory solver()>();

        $z0 = virtualinvoke $r2.<kodkod.engine.satlab.SATFactory: boolean incremental()>();

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("cannot enumerate solutions without an incremental solver.");

        throw $r7;

     label1:
        $r3 = new kodkod.engine.Solver$SolutionIterator;

        $r6 = r0.<kodkod.engine.Solver: kodkod.engine.config.Options options>;

        specialinvoke $r3.<kodkod.engine.Solver$SolutionIterator: void <init>(kodkod.ast.Formula,kodkod.instance.Bounds,kodkod.engine.config.Options)>(r4, r5, $r6);

        return $r3;
    }

    public java.lang.String toString()
    {
        kodkod.engine.config.Options $r1;
        kodkod.engine.Solver r0;
        java.lang.String $r2;

        r0 := @this: kodkod.engine.Solver;

        $r1 = r0.<kodkod.engine.Solver: kodkod.engine.config.Options options>;

        $r2 = virtualinvoke $r1.<kodkod.engine.config.Options: java.lang.String toString()>();

        return $r2;
    }

    private static kodkod.engine.Solution sat(kodkod.instance.Bounds, kodkod.engine.fol2sat.Translation, kodkod.engine.Statistics)
    {
        kodkod.instance.Instance $r2, $r4;
        kodkod.instance.Bounds r3;
        kodkod.engine.fol2sat.Translation r1;
        kodkod.engine.Solution $r5;
        kodkod.engine.Statistics r0;
        kodkod.engine.satlab.SATSolver $r6;

        r3 := @parameter0: kodkod.instance.Bounds;

        r1 := @parameter1: kodkod.engine.fol2sat.Translation;

        r0 := @parameter2: kodkod.engine.Statistics;

        $r2 = virtualinvoke r1.<kodkod.engine.fol2sat.Translation: kodkod.instance.Instance interpret()>();

        $r4 = staticinvoke <kodkod.engine.Solver: kodkod.instance.Instance padInstance(kodkod.instance.Instance,kodkod.instance.Bounds)>($r2, r3);

        $r5 = staticinvoke <kodkod.engine.Solution: kodkod.engine.Solution satisfiable(kodkod.engine.Statistics,kodkod.instance.Instance)>(r0, $r4);

        $r6 = virtualinvoke r1.<kodkod.engine.fol2sat.Translation: kodkod.engine.satlab.SATSolver cnf()>();

        interfaceinvoke $r6.<kodkod.engine.satlab.SATSolver: void free()>();

        return $r5;
    }

    private static kodkod.engine.Solution unsat(kodkod.engine.fol2sat.Translation, kodkod.engine.Statistics)
    {
        kodkod.engine.fol2sat.TranslationLog $r2;
        kodkod.engine.satlab.SATProver $r6;
        kodkod.engine.Solution $r4, $r7;
        kodkod.engine.ResolutionBasedProof $r5;
        kodkod.engine.fol2sat.Translation r0;
        kodkod.engine.satlab.SATSolver $r1;
        kodkod.engine.Statistics r3;
        boolean $z0;

        r0 := @parameter0: kodkod.engine.fol2sat.Translation;

        r3 := @parameter1: kodkod.engine.Statistics;

        $r1 = virtualinvoke r0.<kodkod.engine.fol2sat.Translation: kodkod.engine.satlab.SATSolver cnf()>();

        $r2 = virtualinvoke r0.<kodkod.engine.fol2sat.Translation: kodkod.engine.fol2sat.TranslationLog log()>();

        $z0 = $r1 instanceof kodkod.engine.satlab.SATProver;

        if $z0 == 0 goto label1;

        if $r2 == null goto label1;

        $r5 = new kodkod.engine.ResolutionBasedProof;

        $r6 = (kodkod.engine.satlab.SATProver) $r1;

        specialinvoke $r5.<kodkod.engine.ResolutionBasedProof: void <init>(kodkod.engine.satlab.SATProver,kodkod.engine.fol2sat.TranslationLog)>($r6, $r2);

        $r7 = staticinvoke <kodkod.engine.Solution: kodkod.engine.Solution unsatisfiable(kodkod.engine.Statistics,kodkod.engine.Proof)>(r3, $r5);

        return $r7;

     label1:
        $r4 = staticinvoke <kodkod.engine.Solution: kodkod.engine.Solution unsatisfiable(kodkod.engine.Statistics,kodkod.engine.Proof)>(r3, null);

        interfaceinvoke $r1.<kodkod.engine.satlab.SATSolver: void free()>();

        return $r4;
    }

    private static int trivialPrimaries(kodkod.instance.Bounds)
    {
        java.util.Iterator $r2;
        java.util.Set $r1;
        kodkod.instance.Bounds r0;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r3;
        kodkod.ast.Relation r4;
        boolean $z0;
        kodkod.instance.TupleSet $r5, $r6;

        r0 := @parameter0: kodkod.instance.Bounds;

        i3 = 0;

        $r1 = virtualinvoke r0.<kodkod.instance.Bounds: java.util.Set relations()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (kodkod.ast.Relation) $r3;

        $r5 = virtualinvoke r0.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>(r4);

        $i0 = virtualinvoke $r5.<kodkod.instance.TupleSet: int size()>();

        $r6 = virtualinvoke r0.<kodkod.instance.Bounds: kodkod.instance.TupleSet lowerBound(kodkod.ast.Relation)>(r4);

        $i1 = virtualinvoke $r6.<kodkod.instance.TupleSet: int size()>();

        $i2 = $i0 - $i1;

        i3 = i3 + $i2;

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return i3;
    }

    private static kodkod.engine.Solution trivial(kodkod.instance.Bounds, kodkod.engine.fol2sat.TrivialFormulaException, long)
    {
        kodkod.engine.Proof $r5;
        kodkod.engine.fol2sat.TrivialFormulaException r1;
        kodkod.engine.bool.BooleanConstant $r3;
        kodkod.engine.fol2sat.TranslationLog $r4;
        long l1;
        kodkod.engine.Solution $r6, $r11;
        kodkod.instance.Instance $r8, $r10;
        kodkod.instance.Bounds $r2, $r7, r9;
        int $i0;
        kodkod.engine.Statistics $r0;
        boolean $z0;

        r9 := @parameter0: kodkod.instance.Bounds;

        r1 := @parameter1: kodkod.engine.fol2sat.TrivialFormulaException;

        l1 := @parameter2: long;

        $r0 = new kodkod.engine.Statistics;

        $r2 = virtualinvoke r1.<kodkod.engine.fol2sat.TrivialFormulaException: kodkod.instance.Bounds bounds()>();

        $i0 = staticinvoke <kodkod.engine.Solver: int trivialPrimaries(kodkod.instance.Bounds)>($r2);

        specialinvoke $r0.<kodkod.engine.Statistics: void <init>(int,int,int,long,long)>($i0, 0, 0, l1, 0L);

        $r3 = virtualinvoke r1.<kodkod.engine.fol2sat.TrivialFormulaException: kodkod.engine.bool.BooleanConstant value()>();

        $z0 = virtualinvoke $r3.<kodkod.engine.bool.BooleanConstant: boolean booleanValue()>();

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r1.<kodkod.engine.fol2sat.TrivialFormulaException: kodkod.instance.Bounds bounds()>();

        $r8 = staticinvoke <kodkod.engine.Solver: kodkod.instance.Instance toInstance(kodkod.instance.Bounds)>($r7);

        $r10 = staticinvoke <kodkod.engine.Solver: kodkod.instance.Instance padInstance(kodkod.instance.Instance,kodkod.instance.Bounds)>($r8, r9);

        $r11 = staticinvoke <kodkod.engine.Solution: kodkod.engine.Solution triviallySatisfiable(kodkod.engine.Statistics,kodkod.instance.Instance)>($r0, $r10);

        return $r11;

     label1:
        $r4 = virtualinvoke r1.<kodkod.engine.fol2sat.TrivialFormulaException: kodkod.engine.fol2sat.TranslationLog log()>();

        $r5 = staticinvoke <kodkod.engine.Solver: kodkod.engine.Proof trivialProof(kodkod.engine.fol2sat.TranslationLog)>($r4);

        $r6 = staticinvoke <kodkod.engine.Solution: kodkod.engine.Solution triviallyUnsatisfiable(kodkod.engine.Statistics,kodkod.engine.Proof)>($r0, $r5);

        return $r6;
    }

    private static kodkod.engine.Proof trivialProof(kodkod.engine.fol2sat.TranslationLog)
    {
        kodkod.engine.fol2sat.TranslationLog r0;
        kodkod.engine.TrivialProof $r1;

        r0 := @parameter0: kodkod.engine.fol2sat.TranslationLog;

        if r0 != null goto label1;

        $r1 = null;

        goto label2;

     label1:
        $r1 = new kodkod.engine.TrivialProof;

        specialinvoke $r1.<kodkod.engine.TrivialProof: void <init>(kodkod.engine.fol2sat.TranslationLog)>(r0);

     label2:
        return $r1;
    }

    private static kodkod.instance.Instance padInstance(kodkod.instance.Instance, kodkod.instance.Bounds)
    {
        java.util.Iterator $r2;
        kodkod.util.ints.IntSet $r6;
        java.util.Set $r1;
        kodkod.util.ints.IntIterator $r7;
        kodkod.instance.Instance r4;
        kodkod.instance.Bounds r0;
        int $i0;
        java.lang.Object $r3;
        kodkod.ast.Relation r9;
        boolean $z0, $z1, $z2;
        kodkod.instance.TupleSet $r5, $r8;

        r4 := @parameter0: kodkod.instance.Instance;

        r0 := @parameter1: kodkod.instance.Bounds;

        $r1 = virtualinvoke r0.<kodkod.instance.Bounds: java.util.Set relations()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (kodkod.ast.Relation) $r3;

        $z0 = virtualinvoke r4.<kodkod.instance.Instance: boolean contains(kodkod.ast.Relation)>(r9);

        if $z0 != 0 goto label2;

        $r5 = virtualinvoke r0.<kodkod.instance.Bounds: kodkod.instance.TupleSet lowerBound(kodkod.ast.Relation)>(r9);

        virtualinvoke r4.<kodkod.instance.Instance: void add(kodkod.ast.Relation,kodkod.instance.TupleSet)>(r9, $r5);

     label2:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        $r6 = virtualinvoke r0.<kodkod.instance.Bounds: kodkod.util.ints.IntSet ints()>();

        $r7 = interfaceinvoke $r6.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label4;

     label3:
        $i0 = interfaceinvoke $r7.<kodkod.util.ints.IntIterator: int next()>();

        $r8 = virtualinvoke r0.<kodkod.instance.Bounds: kodkod.instance.TupleSet exactBound(int)>($i0);

        virtualinvoke r4.<kodkod.instance.Instance: void add(int,kodkod.instance.TupleSet)>($i0, $r8);

     label4:
        $z1 = interfaceinvoke $r7.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        return r4;
    }

    private static kodkod.instance.Instance toInstance(kodkod.instance.Bounds)
    {
        java.util.Iterator $r4;
        kodkod.util.ints.IntSet $r7;
        java.util.Set $r3;
        kodkod.util.ints.IntIterator $r8;
        kodkod.instance.Instance $r0;
        kodkod.instance.Bounds r1;
        int $i0;
        java.lang.Object $r5;
        kodkod.instance.Universe $r2;
        kodkod.ast.Relation r10;
        boolean $z0, $z1;
        kodkod.instance.TupleSet $r6, $r9;

        r1 := @parameter0: kodkod.instance.Bounds;

        $r0 = new kodkod.instance.Instance;

        $r2 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        specialinvoke $r0.<kodkod.instance.Instance: void <init>(kodkod.instance.Universe)>($r2);

        $r3 = virtualinvoke r1.<kodkod.instance.Bounds: java.util.Set relations()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r10 = (kodkod.ast.Relation) $r5;

        $r6 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.TupleSet lowerBound(kodkod.ast.Relation)>(r10);

        virtualinvoke $r0.<kodkod.instance.Instance: void add(kodkod.ast.Relation,kodkod.instance.TupleSet)>(r10, $r6);

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r7 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.util.ints.IntSet ints()>();

        $r8 = interfaceinvoke $r7.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label4;

     label3:
        $i0 = interfaceinvoke $r8.<kodkod.util.ints.IntIterator: int next()>();

        $r9 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.TupleSet exactBound(int)>($i0);

        virtualinvoke $r0.<kodkod.instance.Instance: void add(int,kodkod.instance.TupleSet)>($i0, $r9);

     label4:
        $z1 = interfaceinvoke $r8.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        return $r0;
    }

    static kodkod.instance.Instance access$0(kodkod.instance.Instance, kodkod.instance.Bounds)
    {
        kodkod.instance.Instance r0, $r2;
        kodkod.instance.Bounds r1;

        r0 := @parameter0: kodkod.instance.Instance;

        r1 := @parameter1: kodkod.instance.Bounds;

        $r2 = staticinvoke <kodkod.engine.Solver: kodkod.instance.Instance padInstance(kodkod.instance.Instance,kodkod.instance.Bounds)>(r0, r1);

        return $r2;
    }

    static kodkod.engine.Solution access$1(kodkod.engine.fol2sat.Translation, kodkod.engine.Statistics)
    {
        kodkod.engine.Solution $r2;
        kodkod.engine.Statistics r1;
        kodkod.engine.fol2sat.Translation r0;

        r0 := @parameter0: kodkod.engine.fol2sat.Translation;

        r1 := @parameter1: kodkod.engine.Statistics;

        $r2 = staticinvoke <kodkod.engine.Solver: kodkod.engine.Solution unsat(kodkod.engine.fol2sat.Translation,kodkod.engine.Statistics)>(r0, r1);

        return $r2;
    }

    static kodkod.instance.Instance access$2(kodkod.instance.Bounds)
    {
        kodkod.instance.Instance $r1;
        kodkod.instance.Bounds r0;

        r0 := @parameter0: kodkod.instance.Bounds;

        $r1 = staticinvoke <kodkod.engine.Solver: kodkod.instance.Instance toInstance(kodkod.instance.Bounds)>(r0);

        return $r1;
    }

    static kodkod.engine.Proof access$3(kodkod.engine.fol2sat.TranslationLog)
    {
        kodkod.engine.fol2sat.TranslationLog r0;
        kodkod.engine.Proof $r1;

        r0 := @parameter0: kodkod.engine.fol2sat.TranslationLog;

        $r1 = staticinvoke <kodkod.engine.Solver: kodkod.engine.Proof trivialProof(kodkod.engine.fol2sat.TranslationLog)>(r0);

        return $r1;
    }
}
