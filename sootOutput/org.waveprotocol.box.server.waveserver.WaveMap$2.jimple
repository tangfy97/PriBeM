class org.waveprotocol.box.server.waveserver.WaveMap$2 extends java.lang.Object implements com.google.common.base.Function
{
    final org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore val$waveletStore;
    final java.util.concurrent.Executor val$lookupExecutor;
    final org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber val$notifiee;
    final org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory val$localFactory;
    final org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory val$remoteFactory;
    final java.lang.String val$waveDomain;
    final org.waveprotocol.box.server.waveserver.WaveMap this$0;

    void <init>(org.waveprotocol.box.server.waveserver.WaveMap, org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore, java.util.concurrent.Executor, org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber, org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory, org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory, java.lang.String)
    {
        org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore r2;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory r5;
        java.util.concurrent.Executor r3;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory r6;
        org.waveprotocol.box.server.waveserver.WaveMap$2 r0;
        org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber r4;
        java.lang.String r7;
        org.waveprotocol.box.server.waveserver.WaveMap r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveMap$2;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.WaveMap;

        r2 := @parameter1: org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore;

        r3 := @parameter2: java.util.concurrent.Executor;

        r4 := @parameter3: org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber;

        r5 := @parameter4: org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory;

        r6 := @parameter5: org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory;

        r7 := @parameter6: java.lang.String;

        r0.<org.waveprotocol.box.server.waveserver.WaveMap$2: org.waveprotocol.box.server.waveserver.WaveMap this$0> = r1;

        r0.<org.waveprotocol.box.server.waveserver.WaveMap$2: org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore val$waveletStore> = r2;

        r0.<org.waveprotocol.box.server.waveserver.WaveMap$2: java.util.concurrent.Executor val$lookupExecutor> = r3;

        r0.<org.waveprotocol.box.server.waveserver.WaveMap$2: org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber val$notifiee> = r4;

        r0.<org.waveprotocol.box.server.waveserver.WaveMap$2: org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory val$localFactory> = r5;

        r0.<org.waveprotocol.box.server.waveserver.WaveMap$2: org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory val$remoteFactory> = r6;

        r0.<org.waveprotocol.box.server.waveserver.WaveMap$2: java.lang.String val$waveDomain> = r7;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.box.server.waveserver.Wave apply(org.waveprotocol.wave.model.id.WaveId)
    {
        org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore $r3;
        org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory $r8;
        org.waveprotocol.wave.model.id.WaveId r0;
        com.google.common.util.concurrent.ListenableFuture $r4;
        java.util.concurrent.Executor $r2;
        org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory $r7;
        org.waveprotocol.box.server.waveserver.WaveMap$2 r1;
        org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber $r9;
        org.waveprotocol.box.server.waveserver.Wave $r5;
        java.lang.String $r6;

        r1 := @this: org.waveprotocol.box.server.waveserver.WaveMap$2;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        $r3 = r1.<org.waveprotocol.box.server.waveserver.WaveMap$2: org.waveprotocol.box.server.waveserver.DeltaAndSnapshotStore val$waveletStore>;

        $r2 = r1.<org.waveprotocol.box.server.waveserver.WaveMap$2: java.util.concurrent.Executor val$lookupExecutor>;

        $r4 = staticinvoke <org.waveprotocol.box.server.waveserver.WaveMap: com.google.common.util.concurrent.ListenableFuture access$000(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.box.server.waveserver.WaveletStore,java.util.concurrent.Executor)>(r0, $r3, $r2);

        $r5 = new org.waveprotocol.box.server.waveserver.Wave;

        $r9 = r1.<org.waveprotocol.box.server.waveserver.WaveMap$2: org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber val$notifiee>;

        $r8 = r1.<org.waveprotocol.box.server.waveserver.WaveMap$2: org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory val$localFactory>;

        $r7 = r1.<org.waveprotocol.box.server.waveserver.WaveMap$2: org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory val$remoteFactory>;

        $r6 = r1.<org.waveprotocol.box.server.waveserver.WaveMap$2: java.lang.String val$waveDomain>;

        specialinvoke $r5.<org.waveprotocol.box.server.waveserver.Wave: void <init>(org.waveprotocol.wave.model.id.WaveId,com.google.common.util.concurrent.ListenableFuture,org.waveprotocol.box.server.waveserver.WaveletNotificationSubscriber,org.waveprotocol.box.server.waveserver.LocalWaveletContainer$Factory,org.waveprotocol.box.server.waveserver.RemoteWaveletContainer$Factory,java.lang.String)>(r0, $r4, $r9, $r8, $r7, $r6);

        return $r5;
    }

    public volatile java.lang.Object apply(java.lang.Object)
    {
        org.waveprotocol.wave.model.id.WaveId $r2;
        java.lang.Object r1;
        org.waveprotocol.box.server.waveserver.Wave $r3;
        org.waveprotocol.box.server.waveserver.WaveMap$2 r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.WaveMap$2;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.id.WaveId) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.WaveMap$2: org.waveprotocol.box.server.waveserver.Wave apply(org.waveprotocol.wave.model.id.WaveId)>($r2);

        return $r3;
    }
}
