final class com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment extends com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Segment
{

    void <init>(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap, int, int)
    {
        com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment r0;
        int i0, i1;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Segment: void <init>(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap,int,int)>(r1, i0, i1);

        return;
    }

    java.lang.Object getOrCompute(java.lang.Object, int, com.mycila.inject.internal.guava.base.Function) throws java.util.concurrent.ExecutionException
    {
        com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment r0;
        com.mycila.inject.internal.guava.collect.MapMaker$RemovalCause $r18, $r21;
        com.mycila.inject.internal.guava.base.Equivalence $r12;
        java.util.concurrent.atomic.AtomicReferenceArray $r23;
        com.mycila.inject.internal.guava.base.Function r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, z8, z9;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference $r4, $r13, $r14, $r22;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap $r11, $r16, $r17;
        com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingValueReference $r7, r29;
        java.util.Queue $r19, $r20;
        java.lang.Throwable $r26, $r27;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry $r2, $r9, $r24, r28;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object r1, $r3, $r5, $r6, $r10, $r15, $r25;

        r0 := @this: com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r8 := @parameter2: com.mycila.inject.internal.guava.base.Function;

     label01:
        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry getEntry(java.lang.Object,int)>(r1, i0);

        r28 = $r2;

        if $r2 == null goto label03;

        $r25 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: java.lang.Object getLiveValue(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>($r2);

        if $r25 == null goto label03;

        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void recordRead(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>($r2);

     label02:
        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void postReadCleanup()>();

        return $r25;

     label03:
        if $r2 == null goto label04;

        $r22 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $z5 = interfaceinvoke $r22.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference: boolean isComputingReference()>();

        if $z5 != 0 goto label21;

     label04:
        z6 = 1;

        z9 = 1;

        z8 = 1;

        r29 = null;

        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void lock()>();

     label05:
        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void preWriteCleanup()>();

        $i1 = r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: int count>;

        $i5 = $i1 - 1;

        $r23 = r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i2 = virtualinvoke $r23.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i3 = $i2 - 1;

        $i6 = i0 & $i3;

        $r3 = virtualinvoke $r23.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i6);

        $r24 = (com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry) $r3;

        r28 = $r24;

     label06:
        if r28 == null goto label14;

        $r10 = interfaceinvoke r28.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: java.lang.Object getKey()>();

        $i4 = interfaceinvoke r28.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: int getHash()>();

        if $i4 != i0 goto label13;

        if $r10 == null goto label13;

        $r11 = r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap map>;

        $r12 = $r11.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap: com.mycila.inject.internal.guava.base.Equivalence keyEquivalence>;

        $z1 = virtualinvoke $r12.<com.mycila.inject.internal.guava.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)>(r1, $r10);

        if $z1 == 0 goto label13;

        $r13 = interfaceinvoke r28.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $z2 = interfaceinvoke $r13.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference: boolean isComputingReference()>();

        if $z2 == 0 goto label07;

        z6 = 0;

        z9 = 0;

        z8 = 0;

        goto label14;

     label07:
        $r14 = interfaceinvoke r28.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r15 = interfaceinvoke $r14.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference: java.lang.Object get()>();

        if $r15 != null goto label08;

        $r21 = <com.mycila.inject.internal.guava.collect.MapMaker$RemovalCause: com.mycila.inject.internal.guava.collect.MapMaker$RemovalCause COLLECTED>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.collect.MapMaker$RemovalCause)>($r10, i0, $r15, $r21);

        goto label12;

     label08:
        $r16 = r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap map>;

        $z3 = virtualinvoke $r16.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap: boolean expires()>();

        if $z3 == 0 goto label09;

        $r17 = r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap map>;

        $z4 = virtualinvoke $r17.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap: boolean isExpired(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>(r28);

        if $z4 == 0 goto label09;

        $r18 = <com.mycila.inject.internal.guava.collect.MapMaker$RemovalCause: com.mycila.inject.internal.guava.collect.MapMaker$RemovalCause EXPIRED>;

        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.collect.MapMaker$RemovalCause)>($r10, i0, $r15, $r18);

        goto label12;

     label09:
        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void recordLockedRead(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>(r28);

     label10:
        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void postWriteCleanup()>();

     label11:
        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void postReadCleanup()>();

        return $r15;

     label12:
        $r19 = r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: java.util.Queue evictionQueue>;

        interfaceinvoke $r19.<java.util.Queue: boolean remove(java.lang.Object)>(r28);

        $r20 = r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: java.util.Queue expirationQueue>;

        interfaceinvoke $r20.<java.util.Queue: boolean remove(java.lang.Object)>(r28);

        r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: int count> = $i5;

        goto label14;

     label13:
        r28 = interfaceinvoke r28.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry getNext()>();

        goto label06;

     label14:
        if z8 == 0 goto label16;

        $r7 = new com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingValueReference;

        specialinvoke $r7.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingValueReference: void <init>(com.mycila.inject.internal.guava.base.Function)>(r8);

        r29 = $r7;

        if r28 != null goto label15;

        $r9 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry newEntry(java.lang.Object,int,com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>(r1, i0, $r24);

        r28 = $r9;

        interfaceinvoke $r9.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: void setValueReference(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference)>($r7);

        virtualinvoke $r23.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i6, $r9);

        goto label16;

     label15:
        interfaceinvoke r28.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: void setValueReference(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference)>($r7);

     label16:
        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void postWriteCleanup()>();

        goto label19;

     label17:
        $r27 := @caughtexception;

     label18:
        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void unlock()>();

        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void postWriteCleanup()>();

        throw $r27;

     label19:
        if z9 == 0 goto label21;

        $r6 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: java.lang.Object compute(java.lang.Object,int,com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry,com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingValueReference)>(r1, i0, r28, r29);

     label20:
        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void postReadCleanup()>();

        return $r6;

     label21:
        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r28);

        if $z0 != 0 goto label22;

        $z7 = 1;

        goto label23;

     label22:
        $z7 = 0;

     label23:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean,java.lang.Object)>($z7, "Recursive computation");

        $r4 = interfaceinvoke r28.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference getValueReference()>();

        $r5 = interfaceinvoke $r4.<com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference: java.lang.Object waitForValue()>();

        if $r5 == null goto label01;

        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void recordRead(com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry)>(r28);

     label24:
        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void postReadCleanup()>();

        return $r5;

     label25:
        $r26 := @caughtexception;

     label26:
        virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void postReadCleanup()>();

        throw $r26;

        catch java.lang.Throwable from label05 to label10 with label17;
        catch java.lang.Throwable from label12 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label03 to label11 with label25;
        catch java.lang.Throwable from label12 to label20 with label25;
        catch java.lang.Throwable from label21 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
    }

    java.lang.Object compute(java.lang.Object, int, com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry, com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingValueReference) throws java.util.concurrent.ExecutionException
    {
        java.lang.Throwable $r7, $r8;
        com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment r4;
        com.mycila.inject.internal.guava.collect.MapMaker$RemovalCause $r6;
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry r0;
        long $l1, l3;
        com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingValueReference r1;
        byte $b2, $b4;
        int i0;
        java.lang.Object r2, $r3, $r5, r9;

        r4 := @this: com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment;

        r2 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        r0 := @parameter2: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ReferenceEntry;

        r1 := @parameter3: com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingValueReference;

        r9 = null;

        staticinvoke <java.lang.System: long nanoTime()>();

        l3 = 0L;

     label01:
        entermonitor r0;

     label02:
        $r3 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingValueReference: java.lang.Object compute(java.lang.Object,int)>(r2, i0);

        r9 = $r3;

        $l1 = staticinvoke <java.lang.System: long nanoTime()>();

        l3 = $l1;

        exitmonitor r0;

     label03:
        goto label06;

     label04:
        $r8 := @caughtexception;

        exitmonitor r0;

     label05:
        throw $r8;

     label06:
        if $r3 == null goto label07;

        $r5 = virtualinvoke r4.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>(r2, i0, $r3, 1);

        if $r5 == null goto label07;

        $r6 = <com.mycila.inject.internal.guava.collect.MapMaker$RemovalCause: com.mycila.inject.internal.guava.collect.MapMaker$RemovalCause REPLACED>;

        virtualinvoke r4.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: void enqueueNotification(java.lang.Object,int,java.lang.Object,com.mycila.inject.internal.guava.collect.MapMaker$RemovalCause)>(r2, i0, $r3, $r6);

     label07:
        $b4 = $l1 cmp 0L;

        if $b4 != 0 goto label08;

        staticinvoke <java.lang.System: long nanoTime()>();

     label08:
        if $r3 != null goto label09;

        virtualinvoke r4.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: boolean clearValue(java.lang.Object,int,com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference)>(r2, i0, r1);

     label09:
        return $r3;

     label10:
        $r7 := @caughtexception;

     label11:
        $b2 = l3 cmp 0L;

        if $b2 != 0 goto label12;

        staticinvoke <java.lang.System: long nanoTime()>();

     label12:
        if r9 != null goto label13;

        virtualinvoke r4.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment: boolean clearValue(java.lang.Object,int,com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$ValueReference)>(r2, i0, r1);

     label13:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label01 to label07 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }
}
