public class com.hp.hpl.jena.sparql.algebra.AlgebraQuad extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{

    private void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.AlgebraQuad;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.algebra.Op quadize(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Popper $r5;
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$QuadSlot $r1;
        com.hp.hpl.jena.graph.Node $r2, $r3;
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Pusher $r4;
        com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph $r6;
        java.util.ArrayDeque $r0;
        com.hp.hpl.jena.sparql.algebra.Op r7, $r8;

        r7 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r0 = new java.util.ArrayDeque;

        specialinvoke $r0.<java.util.ArrayDeque: void <init>()>();

        $r1 = new com.hp.hpl.jena.sparql.algebra.AlgebraQuad$QuadSlot;

        $r3 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        $r2 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$QuadSlot: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r2);

        interfaceinvoke $r0.<java.util.Deque: void push(java.lang.Object)>($r1);

        $r4 = new com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Pusher;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Pusher: void <init>(java.util.Deque)>($r0);

        $r5 = new com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Popper;

        specialinvoke $r5.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$Popper: void <init>(java.util.Deque)>($r0);

        $r6 = new com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.AlgebraQuad$TransformQuadGraph: void <init>(java.util.Deque)>($r0);

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.algebra.Transformer: com.hp.hpl.jena.sparql.algebra.Op transformSkipService(com.hp.hpl.jena.sparql.algebra.Transform,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.OpVisitor,com.hp.hpl.jena.sparql.algebra.OpVisitor)>($r6, r7, $r4, $r5);

        return $r8;
    }
}
