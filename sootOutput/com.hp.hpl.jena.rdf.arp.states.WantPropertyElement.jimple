public class com.hp.hpl.jena.rdf.arp.states.WantPropertyElement extends com.hp.hpl.jena.rdf.arp.states.Frame implements com.hp.hpl.jena.rdf.arp.states.WantsObjectFrameI, com.hp.hpl.jena.rdf.arp.states.HasSubjectFrameI
{
    int liCounter;
    com.hp.hpl.jena.rdf.arp.impl.ANode predicate;
    com.hp.hpl.jena.rdf.arp.impl.ANode object;
    com.hp.hpl.jena.rdf.arp.impl.ANode reify;
    boolean objectIsBlank;
    private static final int TYPEDLITERAL;
    private static final int EMPTYWITHOBJ;
    private static final int PARSETYPE;
    private static com.hp.hpl.jena.rdf.arp.impl.URIReference[] _rdf_n;

    public void <init>(com.hp.hpl.jena.rdf.arp.states.HasSubjectFrameI, com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)
    {
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r0;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext r2;
        com.hp.hpl.jena.rdf.arp.states.HasSubjectFrameI r1;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.states.HasSubjectFrameI;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.Frame: void <init>(com.hp.hpl.jena.rdf.arp.states.FrameI,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r1, r2);

        r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: int liCounter> = 1;

        r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: boolean objectIsBlank> = 0;

        return;
    }

    public com.hp.hpl.jena.rdf.arp.states.FrameI startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXParseException
    {
        byte $b1, $b3, $b6, $b7;
        com.hp.hpl.jena.rdf.arp.impl.ANode $r16, $r18, $r19, $r23, $r26, $r33, $r34, $r37, $r43, $r45;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext $r11, $r12;
        com.hp.hpl.jena.rdf.arp.impl.Taint $r4, $r8, $r15, $r17, $r22, $r38, $r40, $r46;
        com.hp.hpl.jena.rdf.arp.impl.AttributeLexer $r6;
        java.lang.String r1, r2, r3, $r9, $r10, $r13, $r14, $r20, $r21, $r27, $r30, $r32, $r35, $r36;
        com.hp.hpl.jena.rdf.arp.impl.ARPResource $r24, $r29;
        com.hp.hpl.jena.rdf.arp.impl.TaintImpl $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        com.hp.hpl.jena.rdf.arp.impl.URIReference $r28, $r41, $r42;
        com.hp.hpl.jena.rdf.arp.states.FrameI $r44;
        org.xml.sax.Attributes r7;
        int $i0, $i2, $i4, $i5;
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler $r25, $r31;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r0;
        com.hp.hpl.jena.rdf.arp.impl.ElementLexer $r39;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r7 := @parameter3: org.xml.sax.Attributes;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void clearObject()>();

        $z0 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: boolean nonWhiteMsgGiven>;

        if $z0 == 0 goto label01;

        $r38 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        interfaceinvoke $r38.<com.hp.hpl.jena.rdf.arp.impl.Taint: boolean isTainted()>();

     label01:
        r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: boolean nonWhiteMsgGiven> = 0;

        if r1 == null goto label02;

        $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z8 == 0 goto label03;

     label02:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void warning(int,java.lang.String)>(104, "Unqualified property elements are not allowed. Treated as a relative URI.");

     label03:
        $r39 = new com.hp.hpl.jena.rdf.arp.impl.ElementLexer;

        $r40 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        specialinvoke $r39.<com.hp.hpl.jena.rdf.arp.impl.ElementLexer: void <init>(com.hp.hpl.jena.rdf.arp.impl.Taint,com.hp.hpl.jena.rdf.arp.states.Frame,java.lang.String,java.lang.String,java.lang.String,int,int,boolean)>($r40, r0, r1, r2, r3, 2048, 30200, 0);

        $z9 = $r39.<com.hp.hpl.jena.rdf.arp.impl.ElementLexer: boolean goodMatch>;

        if $z9 == 0 goto label04;

        $i4 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: int liCounter>;

        $i5 = $i4 + 1;

        r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: int liCounter> = $i5;

        $r41 = staticinvoke <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.URIReference rdf_n(int)>($i4);

        goto label05;

     label04:
        $r41 = staticinvoke <com.hp.hpl.jena.rdf.arp.impl.URIReference: com.hp.hpl.jena.rdf.arp.impl.URIReference fromQName(com.hp.hpl.jena.rdf.arp.states.Frame,java.lang.String,java.lang.String)>(r0, r1, r2);

     label05:
        r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode predicate> = $r41;

        $r4 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        $z1 = interfaceinvoke $r4.<com.hp.hpl.jena.rdf.arp.impl.Taint: boolean isTainted()>();

        if $z1 == 0 goto label06;

        $r37 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode predicate>;

        interfaceinvoke $r37.<com.hp.hpl.jena.rdf.arp.impl.ANode: void taint()>();

     label06:
        $r5 = new com.hp.hpl.jena.rdf.arp.impl.TaintImpl;

        specialinvoke $r5.<com.hp.hpl.jena.rdf.arp.impl.TaintImpl: void <init>()>();

        r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.Taint taint> = $r5;

        $r6 = new com.hp.hpl.jena.rdf.arp.impl.AttributeLexer;

        specialinvoke $r6.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: void <init>(com.hp.hpl.jena.rdf.arp.states.Frame,int,int)>(r0, 1007, 32248);

        $r8 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        $i0 = virtualinvoke $r6.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: int processSpecials(com.hp.hpl.jena.rdf.arp.impl.Taint,org.xml.sax.Attributes)>($r8, r7);

        $r9 = $r6.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String datatype>;

        if $r9 != null goto label07;

        $z10 = 0;

        goto label08;

     label07:
        $z10 = 1;

     label08:
        $r10 = $r6.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String parseType>;

        if $r10 != null goto label09;

        $b6 = 0;

        goto label10;

     label09:
        $b6 = 4;

     label10:
        $b1 = $z10 | $b6;

        $z11 = specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: boolean mustBeEmpty(com.hp.hpl.jena.rdf.arp.impl.AttributeLexer,org.xml.sax.Attributes,int)>($r6, r7, $i0);

        if $z11 == 0 goto label11;

        $b7 = 2;

        goto label12;

     label11:
        $b7 = 0;

     label12:
        $b3 = $b1 | $b7;

        $z2 = specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: boolean badStateCode(int)>($b3);

        if $z2 == 0 goto label13;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: int errorNumber(int)>($b3);

        $r35 = specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: java.lang.String propertyAttributeDescription(org.xml.sax.Attributes,com.hp.hpl.jena.rdf.arp.impl.AttributeLexer,int)>(r7, $r6, $i0);

        $r36 = specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: java.lang.String descriptionOfCases(com.hp.hpl.jena.rdf.arp.impl.AttributeLexer,int,java.lang.String)>($r6, $b3, $r35);

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void warning(int,java.lang.String)>($i2, $r36);

     label13:
        $r11 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext xml>;

        $r12 = virtualinvoke $r6.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext xml(com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>($r11);

        $r13 = $r6.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String id>;

        if $r13 != null goto label14;

        $r42 = null;

        goto label15;

     label14:
        $r14 = $r6.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String id>;

        $r42 = staticinvoke <com.hp.hpl.jena.rdf.arp.impl.URIReference: com.hp.hpl.jena.rdf.arp.impl.URIReference fromID(com.hp.hpl.jena.rdf.arp.states.Frame,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext,java.lang.String)>(r0, $r12, $r14);

     label15:
        r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode reify> = $r42;

        $r15 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        $z3 = interfaceinvoke $r15.<com.hp.hpl.jena.rdf.arp.impl.Taint: boolean isTainted()>();

        if $z3 == 0 goto label16;

        $r34 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode predicate>;

        interfaceinvoke $r34.<com.hp.hpl.jena.rdf.arp.impl.ANode: void taint()>();

     label16:
        $z4 = specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: boolean mustBeEmpty(com.hp.hpl.jena.rdf.arp.impl.AttributeLexer,org.xml.sax.Attributes,int)>($r6, r7, $i0);

        if $z4 == 0 goto label22;

        $r20 = $r6.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String nodeID>;

        if $r20 == null goto label17;

        $r29 = new com.hp.hpl.jena.rdf.arp.impl.ARPResource;

        $r31 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        $r30 = $r6.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String nodeID>;

        specialinvoke $r29.<com.hp.hpl.jena.rdf.arp.impl.ARPResource: void <init>(com.hp.hpl.jena.rdf.arp.impl.XMLHandler,java.lang.String)>($r31, $r30);

        r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object> = $r29;

        $r33 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object>;

        $r32 = $r6.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String nodeID>;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void checkXMLName(com.hp.hpl.jena.rdf.arp.impl.Taint,java.lang.String)>($r33, $r32);

        r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: boolean objectIsBlank> = 1;

     label17:
        $r21 = $r6.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String resource>;

        if $r21 == null goto label19;

        $r26 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object>;

        if $r26 == null goto label18;

        $z7 = specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: boolean badStateCode(int)>($b3);

        if $z7 != 0 goto label19;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void warning(int,java.lang.String)>(201, "On a property element, only one of the attributes rdf:nodeID or rdf:resource is permitted.");

        goto label19;

     label18:
        $r27 = $r6.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String resource>;

        $r28 = staticinvoke <com.hp.hpl.jena.rdf.arp.impl.URIReference: com.hp.hpl.jena.rdf.arp.impl.URIReference resolve(com.hp.hpl.jena.rdf.arp.states.Frame,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext,java.lang.String)>(r0, $r12, $r27);

        r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object> = $r28;

     label19:
        $r43 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object>;

        if $r43 != null goto label20;

        $r24 = new com.hp.hpl.jena.rdf.arp.impl.ARPResource;

        $r25 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        specialinvoke $r24.<com.hp.hpl.jena.rdf.arp.impl.ARPResource: void <init>(com.hp.hpl.jena.rdf.arp.impl.XMLHandler)>($r25);

        r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object> = $r24;

        r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: boolean objectIsBlank> = 1;

     label20:
        $r22 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        $z6 = interfaceinvoke $r22.<com.hp.hpl.jena.rdf.arp.impl.Taint: boolean isTainted()>();

        if $z6 == 0 goto label21;

        $r23 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object>;

        interfaceinvoke $r23.<com.hp.hpl.jena.rdf.arp.impl.ANode: void taint()>();

     label21:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void processPropertyAttributes(com.hp.hpl.jena.rdf.arp.impl.AttributeLexer,org.xml.sax.Attributes,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>($r6, r7, $r12);

     label22:
        $r44 = specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.states.FrameI nextFrame(org.xml.sax.Attributes,com.hp.hpl.jena.rdf.arp.impl.AttributeLexer,int,int,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r7, $r6, $i0, $b3, $r12);

        $r45 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object>;

        if $r45 == null goto label24;

        $r17 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        $z5 = interfaceinvoke $r17.<com.hp.hpl.jena.rdf.arp.impl.Taint: boolean isTainted()>();

        if $z5 == 0 goto label23;

        $r19 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object>;

        interfaceinvoke $r19.<com.hp.hpl.jena.rdf.arp.impl.ANode: void taint()>();

     label23:
        $r18 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object>;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void theObject(com.hp.hpl.jena.rdf.arp.impl.ANode)>($r18);

     label24:
        $r46 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.Taint taint>;

        $z12 = interfaceinvoke $r46.<com.hp.hpl.jena.rdf.arp.impl.Taint: boolean isTainted()>();

        if $z12 == 0 goto label25;

        $r16 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode predicate>;

        interfaceinvoke $r16.<com.hp.hpl.jena.rdf.arp.impl.ANode: void taint()>();

     label25:
        return $r44;
    }

    private boolean mustBeEmpty(com.hp.hpl.jena.rdf.arp.impl.AttributeLexer, org.xml.sax.Attributes, int)
    {
        com.hp.hpl.jena.rdf.arp.impl.AttributeLexer r1;
        int i0, $i1;
        org.xml.sax.Attributes r0;
        java.lang.String $r2, $r3, $r4;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r5;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.AttributeLexer;

        r0 := @parameter1: org.xml.sax.Attributes;

        i0 := @parameter2: int;

        $i1 = interfaceinvoke r0.<org.xml.sax.Attributes: int getLength()>();

        if i0 < $i1 goto label1;

        $r2 = r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String type>;

        if $r2 != null goto label1;

        $r3 = r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String nodeID>;

        if $r3 != null goto label1;

        $r4 = r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String resource>;

        if $r4 == null goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private com.hp.hpl.jena.rdf.arp.states.FrameI nextFrame(org.xml.sax.Attributes, com.hp.hpl.jena.rdf.arp.impl.AttributeLexer, int, int, com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext) throws org.xml.sax.SAXParseException
    {
        java.lang.IllegalStateException $r9;
        com.hp.hpl.jena.rdf.arp.states.WantTypedLiteral $r6;
        com.hp.hpl.jena.rdf.arp.impl.AttributeLexer r1;
        com.hp.hpl.jena.rdf.arp.states.FrameI $r4;
        com.hp.hpl.jena.rdf.arp.states.WantEmpty $r5;
        int i0, i1;
        org.xml.sax.Attributes r10;
        com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription $r8;
        java.lang.String $r3, $r7;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r0;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        r10 := @parameter0: org.xml.sax.Attributes;

        r1 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AttributeLexer;

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        r2 := @parameter4: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label3;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            default: goto label5;
        };

     label1:
        $r8 = new com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription;

        specialinvoke $r8.<com.hp.hpl.jena.rdf.arp.states.WantLiteralValueOrDescription: void <init>(com.hp.hpl.jena.rdf.arp.states.WantsObjectFrameI,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r0, r2);

        return $r8;

     label2:
        $r3 = r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String parseType>;

        $r4 = specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.states.FrameI withParsetype(java.lang.String,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>($r3, r2);

        return $r4;

     label3:
        $r6 = new com.hp.hpl.jena.rdf.arp.states.WantTypedLiteral;

        $r7 = r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String datatype>;

        specialinvoke $r6.<com.hp.hpl.jena.rdf.arp.states.WantTypedLiteral: void <init>(com.hp.hpl.jena.rdf.arp.states.WantsObjectFrameI,java.lang.String,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r0, $r7, r2);

        return $r6;

     label4:
        $r5 = new com.hp.hpl.jena.rdf.arp.states.WantEmpty;

        specialinvoke $r5.<com.hp.hpl.jena.rdf.arp.states.WantEmpty: void <init>(com.hp.hpl.jena.rdf.arp.states.FrameI,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r0, r2);

        return $r5;

     label5:
        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("impossible");

        throw $r9;
    }

    private com.hp.hpl.jena.rdf.arp.states.FrameI withParsetype(java.lang.String, com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.rdf.arp.states.OuterXMLLiteral $r1;
        java.lang.String r0, $r8;
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler $r12;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r2, $r10;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.rdf.arp.states.RDFCollection $r13;
        com.hp.hpl.jena.rdf.arp.impl.ARPResource $r11;
        com.hp.hpl.jena.rdf.arp.impl.ANode $r9;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext r3;

        r2 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("Collection");

        if $z0 == 0 goto label1;

        $r13 = new com.hp.hpl.jena.rdf.arp.states.RDFCollection;

        specialinvoke $r13.<com.hp.hpl.jena.rdf.arp.states.RDFCollection: void <init>(com.hp.hpl.jena.rdf.arp.states.WantsObjectFrameI,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r2, r3);

        return $r13;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("Resource");

        if $z1 == 0 goto label3;

        $r9 = r2.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object>;

        if $r9 != null goto label2;

        $r11 = new com.hp.hpl.jena.rdf.arp.impl.ARPResource;

        $r12 = r2.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        specialinvoke $r11.<com.hp.hpl.jena.rdf.arp.impl.ARPResource: void <init>(com.hp.hpl.jena.rdf.arp.impl.XMLHandler)>($r12);

        r2.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object> = $r11;

        r2.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: boolean objectIsBlank> = 1;

     label2:
        $r10 = new com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        specialinvoke $r10.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void <init>(com.hp.hpl.jena.rdf.arp.states.HasSubjectFrameI,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext)>(r2, r3);

        return $r10;

     label3:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("Literal");

        if $z2 != 0 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown rdf:parseType: \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' (treated as \'Literal\'.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void warning(int,java.lang.String)>(106, $r8);

     label4:
        $r1 = new com.hp.hpl.jena.rdf.arp.states.OuterXMLLiteral;

        specialinvoke $r1.<com.hp.hpl.jena.rdf.arp.states.OuterXMLLiteral: void <init>(com.hp.hpl.jena.rdf.arp.states.WantsObjectFrameI,com.hp.hpl.jena.rdf.arp.impl.AbsXMLContext,java.lang.String)>(r2, r3, r0);

        return $r1;
    }

    java.lang.String suggestParsetypeLiteral()
    {
        com.hp.hpl.jena.rdf.arp.states.FrameI $r1;
        java.lang.String $r2;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.states.FrameI getParent()>();

        $z0 = $r1 instanceof com.hp.hpl.jena.rdf.arp.states.WantTopLevelDescription;

        if $z0 == 0 goto label1;

        $r2 = "";

        goto label2;

     label1:
        $r2 = specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.Frame: java.lang.String suggestParsetypeLiteral()>();

     label2:
        return $r2;
    }

    public void aPredAndObj(com.hp.hpl.jena.rdf.arp.impl.ANode, com.hp.hpl.jena.rdf.arp.impl.ANode)
    {
        com.hp.hpl.jena.rdf.arp.impl.ANode r1, r2, $r3;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.ANode;

        r2 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.ANode;

        $r3 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object>;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void triple(com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode)>($r3, r1, r2);

        return;
    }

    public void makeSubjectReificationWith(com.hp.hpl.jena.rdf.arp.impl.ANode)
    {
        com.hp.hpl.jena.rdf.arp.impl.ANode r1, $r2, $r3;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.ANode;

        $r3 = <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode RDF_SUBJECT>;

        $r2 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object>;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void triple(com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode)>(r1, $r3, $r2);

        return;
    }

    public void theObject(com.hp.hpl.jena.rdf.arp.impl.ANode)
    {
        com.hp.hpl.jena.rdf.arp.states.HasSubjectFrameI r2;
        com.hp.hpl.jena.rdf.arp.impl.ANode r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        com.hp.hpl.jena.rdf.arp.states.FrameI $r1;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        r3 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.ANode;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.states.FrameI getParent()>();

        r2 = (com.hp.hpl.jena.rdf.arp.states.HasSubjectFrameI) $r1;

        $r4 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode predicate>;

        interfaceinvoke r2.<com.hp.hpl.jena.rdf.arp.states.HasSubjectFrameI: void aPredAndObj(com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode)>($r4, r3);

        $r5 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode reify>;

        if $r5 == null goto label1;

        $r8 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode reify>;

        $r7 = <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode RDF_TYPE>;

        $r6 = <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode RDF_STATEMENT>;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void triple(com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode)>($r8, $r7, $r6);

        $r10 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode reify>;

        $r9 = <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode RDF_OBJECT>;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void triple(com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode)>($r10, $r9, r3);

        $r13 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode reify>;

        $r12 = <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode RDF_PREDICATE>;

        $r11 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode predicate>;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void triple(com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode,com.hp.hpl.jena.rdf.arp.impl.ANode)>($r13, $r12, $r11);

        $r14 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode reify>;

        interfaceinvoke r2.<com.hp.hpl.jena.rdf.arp.states.HasSubjectFrameI: void makeSubjectReificationWith(com.hp.hpl.jena.rdf.arp.impl.ANode)>($r14);

     label1:
        return;
    }

    public void endElement()
    {
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void clearObject()>();

        return;
    }

    public void abort()
    {
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: void clearObject()>();

        return;
    }

    private void clearObject()
    {
        com.hp.hpl.jena.rdf.arp.impl.ANode $r1;
        com.hp.hpl.jena.rdf.arp.impl.XMLHandler $r2;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        $z0 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: boolean objectIsBlank>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.XMLHandler arp>;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object>;

        virtualinvoke $r2.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: void endLocalScope(com.hp.hpl.jena.rdf.arp.impl.ANode)>($r1);

     label1:
        r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: boolean objectIsBlank> = 0;

        r0.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.ANode object> = null;

        return;
    }

    private static com.hp.hpl.jena.rdf.arp.impl.URIReference rdf_n(int)
    {
        int i0, $i1, $i2, $i3, i4, $i5, i6;
        java.lang.String $r8, $r12;
        com.hp.hpl.jena.rdf.arp.impl.URIReference[] $r0, $r1, r3, $r4, $r5, $r6;
        com.hp.hpl.jena.rdf.arp.impl.URIReference $r2, $r13;
        java.lang.StringBuilder $r7, $r9, $r10, $r11;

        i0 := @parameter0: int;

        $r0 = <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.URIReference[] _rdf_n>;

        $i1 = lengthof $r0;

        if i0 < $i1 goto label3;

        $i2 = i0 + 10;

        $i3 = $i2 * 3;

        i4 = $i3 / 2;

        r3 = newarray (com.hp.hpl.jena.rdf.arp.impl.URIReference)[i4];

        $r5 = <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.URIReference[] _rdf_n>;

        $r4 = <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.URIReference[] _rdf_n>;

        $i5 = lengthof $r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r3, 0, $i5);

        $r6 = <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.URIReference[] _rdf_n>;

        i6 = lengthof $r6;

     label1:
        if i6 >= i4 goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: java.lang.String rdfns>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = staticinvoke <com.hp.hpl.jena.rdf.arp.impl.URIReference: com.hp.hpl.jena.rdf.arp.impl.URIReference createNoChecks(java.lang.String)>($r12);

        r3[i6] = $r13;

        i6 = i6 + 1;

        goto label1;

     label2:
        <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.URIReference[] _rdf_n> = r3;

     label3:
        $r1 = <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.URIReference[] _rdf_n>;

        $r2 = $r1[i0];

        return $r2;
    }

    private boolean badStateCode(int)
    {
        int i0;
        java.lang.IllegalStateException $r0;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r1;

        r1 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            default: goto label3;
        };

     label1:
        return 1;

     label2:
        return 0;

     label3:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("impossible");

        throw $r0;
    }

    private int errorNumber(int)
    {
        int i0;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        i0 := @parameter0: int;

        return 201;
    }

    private java.lang.String descriptionOfCases(com.hp.hpl.jena.rdf.arp.impl.AttributeLexer, int, java.lang.String)
    {
        com.hp.hpl.jena.rdf.arp.impl.AttributeLexer r1;
        int i0;
        java.lang.String r0, $r2, $r4, $r5, $r6, $r7, $r8, $r9;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r3;

        r3 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        r1 := @parameter0: com.hp.hpl.jena.rdf.arp.impl.AttributeLexer;

        i0 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        if r0 != null goto label1;

        $r7 = r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String type>;

        if $r7 == null goto label3;

     label1:
        $r2 = r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String nodeID>;

        if $r2 != null goto label2;

        $r5 = r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String resource>;

        if $r5 != null goto label2;

        $r6 = r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String type>;

        if $r6 == null goto label3;

     label2:
        $r8 = r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String nodeID>;

        if $r8 != null goto label4;

        $r4 = r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String resource>;

        if $r4 != null goto label4;

        if r0 != null goto label4;

     label3:
        $r9 = specialinvoke r3.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: java.lang.String pairwiseIncompatibleErrorMessage(int,com.hp.hpl.jena.rdf.arp.impl.AttributeLexer,java.lang.String)>(i0, r1, r0);

        goto label5;

     label4:
        $r9 = specialinvoke r3.<com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: java.lang.String complicatedErrorMessage(int,com.hp.hpl.jena.rdf.arp.impl.AttributeLexer,java.lang.String)>(i0, r1, r0);

     label5:
        return $r9;
    }

    private java.lang.String pairwiseIncompatibleErrorMessage(int, com.hp.hpl.jena.rdf.arp.impl.AttributeLexer, java.lang.String)
    {
        java.lang.IllegalStateException $r38;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r12, $r13, $r14, $r15, $r18, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r33, $r34, $r35, $r36;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.rdf.arp.impl.AttributeLexer r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        java.lang.String $r2, $r3, $r4, r5, $r9, $r17, $r19, $r32, $r37, r40;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r39;
        java.lang.Object $r16, $r31;

        r39 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        i0 := @parameter0: int;

        r1 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AttributeLexer;

        r5 := @parameter2: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $i1 = i0 & 4;

        if $i1 == 0 goto label01;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>("rdf:parseType");

     label01:
        $i2 = i0 & 1;

        if $i2 == 0 goto label02;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>("rdf:datatype");

     label02:
        $r2 = r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String nodeID>;

        if $r2 == null goto label03;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>("rdf:nodeID");

     label03:
        $r3 = r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String resource>;

        if $r3 == null goto label04;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>("rdf:resource");

     label04:
        $r4 = r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String type>;

        if $r4 == null goto label05;

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>("rdf:type");

     label05:
        $i3 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        if $i3 != 1 goto label07;

        if r5 != null goto label06;

        $r38 = new java.lang.IllegalStateException;

        specialinvoke $r38.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Shouldn\'t happen.");

        throw $r38;

     label06:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The attribute ");

        $r31 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r32 = (java.lang.String) $r31;

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not permitted with ");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on a property element.");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r37;

     label07:
        r40 = "On a property element, only one of the ";

        if r5 != null goto label08;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("On a property element, only one of the ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("attributes ");

        r40 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        i6 = 0;

     label09:
        $i7 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        if i6 >= $i7 goto label14;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r16 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        $r17 = (java.lang.String) $r16;

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        r40 = $r19;

        $i4 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        $i5 = $i4 - i6;

        lookupswitch($i5)
        {
            case 1: goto label10;
            case 2: goto label11;
            default: goto label12;
        };

     label10:
        goto label13;

     label11:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or ");

        r40 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label13;

     label12:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        r40 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

     label13:
        i6 = i6 + 1;

        goto label09;

     label14:
        if r5 == null goto label15;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" attributes or ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r40 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

     label15:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is permitted.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private java.lang.String complicatedErrorMessage(int, com.hp.hpl.jena.rdf.arp.impl.AttributeLexer, java.lang.String)
    {
        java.lang.IllegalStateException $r33, $r35, $r38;
        byte $b3;
        boolean $z1;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        com.hp.hpl.jena.rdf.arp.impl.AttributeLexer r0;
        int i0, $i1, i2;
        java.lang.String $r1, $r2, $r3, $r4, r5, $r6, $r7, $r17, $r34, $r36, $r37, r40, r41, $r42, r44, r45, $r46, $r47, $r48, r49, r50, r51, r52;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r39;

        r39 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        i0 := @parameter0: int;

        r0 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AttributeLexer;

        r5 := @parameter2: java.lang.String;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String nodeID>;

        if $r1 != null goto label02;

        $r36 = r0.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String resource>;

        if $r36 != null goto label02;

        $r37 = r0.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String type>;

        if $r37 == null goto label01;

        if r5 != null goto label02;

     label01:
        $r38 = new java.lang.IllegalStateException;

        specialinvoke $r38.<java.lang.IllegalStateException: void <init>(java.lang.String)>("precondition failed.");

        throw $r38;

     label02:
        $i1 = i0 & 5;

        tableswitch($i1)
        {
            case 1: goto label04;
            case 2: goto label06;
            case 3: goto label06;
            case 4: goto label05;
            case 5: goto label03;
            default: goto label06;
        };

     label03:
        r40 = "the mutually incompatible attributes rdf:datatype and rdf:parseType are";

        goto label07;

     label04:
        r40 = "the attribute rdf:datatype is";

        goto label07;

     label05:
        r40 = "the attribute rdf:parseType is";

        goto label07;

     label06:
        $r35 = new java.lang.IllegalStateException;

        specialinvoke $r35.<java.lang.IllegalStateException: void <init>(java.lang.String)>("precondition failed");

        throw $r35;

     label07:
        r41 = null;

        r52 = null;

        r51 = null;

        r50 = null;

        r49 = null;

        $r42 = r0.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String nodeID>;

        if $r42 == null goto label08;

        $r34 = r0.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String resource>;

        if $r34 == null goto label08;

        r41 = "the mutually incompatible attributes rdf:nodeID and rdf:resource";

        r52 = "the mutually incompatible attributes rdf:nodeID and rdf:resource";

        r51 = "the mutually incompatible attributes rdf:nodeID and rdf:resource";

        r50 = "the mutually incompatible attributes rdf:nodeID and rdf:resource";

        r49 = "the mutually incompatible attributes rdf:nodeID and rdf:resource";

        goto label10;

     label08:
        $r2 = r0.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String nodeID>;

        if $r2 == null goto label09;

        r41 = "the attribute rdf:nodeID";

        r52 = "the attribute rdf:nodeID";

        r51 = "the attribute rdf:nodeID";

        r50 = "the attribute rdf:nodeID";

        r49 = "the attribute rdf:nodeID";

        goto label10;

     label09:
        $r3 = r0.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String resource>;

        if $r3 == null goto label10;

        r41 = "the attribute rdf:resource";

        r52 = "the attribute rdf:resource";

        r51 = "the attribute rdf:resource";

        r50 = "the attribute rdf:resource";

        r49 = "the attribute rdf:resource";

     label10:
        if r49 != null goto label11;

        $b3 = 0;

        $z1 = 0;

        goto label12;

     label11:
        $b3 = 1;

        $z1 = 1;

     label12:
        i2 = $b3;

        $r4 = r0.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String type>;

        if $r4 == null goto label13;

        i2 = $z1 + 1;

     label13:
        if r5 == null goto label14;

        i2 = i2 + 1;

     label14:
        if i2 >= 2 goto label15;

        $r33 = new java.lang.IllegalStateException;

        specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>("logic error");

        throw $r33;

     label15:
        if i2 != 2 goto label16;

        $r48 = "both ";

        $r47 = "both ";

        $r46 = "both ";

        goto label17;

     label16:
        $r48 = "each of ";

        $r47 = "each of ";

        $r46 = "each of ";

     label17:
        r44 = $r47;

        $r6 = r0.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String type>;

        if $r6 == null goto label19;

        if r5 == null goto label19;

        if r52 != null goto label18;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the attribute rdf:type and the ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r45 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label21;

     label18:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the attribute rdf:type, the ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r45 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label21;

     label19:
        $r7 = r0.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: java.lang.String type>;

        if $r7 == null goto label20;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the attribute rdf:type");

        r45 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label21;

     label20:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("the ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r45 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label21:
        if r51 == null goto label22;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r45);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r50);

        r45 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

     label22:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("On a property element, ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" incompatible with ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r45);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;
    }

    private java.lang.String propertyAttributeDescription(org.xml.sax.Attributes, com.hp.hpl.jena.rdf.arp.impl.AttributeLexer, int)
    {
        java.lang.IllegalStateException $r23;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r5, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r21, $r22, $r26, $r27, $r28, $r29;
        com.hp.hpl.jena.rdf.arp.impl.AttributeLexer r1;
        org.xml.sax.Attributes r0;
        int $i0, i1, i2, $i3, $i4, $i5, i6, i7, i8;
        java.lang.String $r4, $r6, $r15, $r20, r25, $r30;
        com.hp.hpl.jena.rdf.arp.states.WantPropertyElement r24;

        r24 := @this: com.hp.hpl.jena.rdf.arp.states.WantPropertyElement;

        r0 := @parameter0: org.xml.sax.Attributes;

        r1 := @parameter1: com.hp.hpl.jena.rdf.arp.impl.AttributeLexer;

        i1 := @parameter2: int;

        r25 = "";

        $i0 = interfaceinvoke r0.<org.xml.sax.Attributes: int getLength()>();

        i2 = $i0 - i1;

        i6 = 0;

        if i2 != 0 goto label01;

        return null;

     label01:
        tableswitch(i2)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 2: goto label03;
            case 3: goto label03;
            default: goto label10;
        };

     label02:
        goto label16;

     label03:
        i7 = 0;

     label04:
        $i3 = interfaceinvoke r0.<org.xml.sax.Attributes: int getLength()>();

        if i7 >= $i3 goto label09;

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: boolean done(int)>(i7);

        if $z0 != 0 goto label08;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r4 = interfaceinvoke r0.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i7);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        r25 = $r6;

        i6 = i6 + 1;

        $i4 = i2 - i6;

        lookupswitch($i4)
        {
            case 0: goto label05;
            case 1: goto label06;
            default: goto label07;
        };

     label05:
        goto label08;

     label06:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ");

        r25 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label08;

     label07:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        r25 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        i7 = i7 + 1;

        goto label04;

     label09:
        goto label16;

     label10:
        if i2 >= 0 goto label11;

        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Shouldn\'t happen.");

        throw $r23;

     label11:
        i8 = 0;

     label12:
        $i5 = interfaceinvoke r0.<org.xml.sax.Attributes: int getLength()>();

        if i8 >= $i5 goto label16;

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.rdf.arp.impl.AttributeLexer: boolean done(int)>(i8);

        if $z1 != 0 goto label15;

        i6 = i6 + 1;

        lookupswitch(i6)
        {
            case 1: goto label13;
            case 2: goto label14;
            default: goto label15;
        };

     label13:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r20 = interfaceinvoke r0.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i8);

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label15;

     label14:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r15 = interfaceinvoke r0.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i8);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ...");

        r25 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label15;

     label15:
        i8 = i8 + 1;

        goto label12;

     label16:
        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("property attributes (");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r30;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.rdf.arp.impl.URIReference[] $r0;

        <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: int PARSETYPE> = 4;

        <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: int EMPTYWITHOBJ> = 2;

        <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: int TYPEDLITERAL> = 1;

        $r0 = newarray (com.hp.hpl.jena.rdf.arp.impl.URIReference)[0];

        <com.hp.hpl.jena.rdf.arp.states.WantPropertyElement: com.hp.hpl.jena.rdf.arp.impl.URIReference[] _rdf_n> = $r0;

        return;
    }
}
