public class org.apache.log4j.RollingFileAppender extends org.apache.log4j.FileAppender
{
    protected long maxFileSize;
    protected int maxBackupIndex;
    private long nextRollover;

    public void <init>()
    {
        org.apache.log4j.RollingFileAppender r0;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        specialinvoke r0.<org.apache.log4j.FileAppender: void <init>()>();

        r0.<org.apache.log4j.RollingFileAppender: long maxFileSize> = 10485760L;

        r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex> = 1;

        r0.<org.apache.log4j.RollingFileAppender: long nextRollover> = 0L;

        return;
    }

    public void <init>(org.apache.log4j.Layout, java.lang.String, boolean) throws java.io.IOException
    {
        org.apache.log4j.RollingFileAppender r0;
        org.apache.log4j.Layout r1;
        java.lang.String r2;
        boolean z0;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        r1 := @parameter0: org.apache.log4j.Layout;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String,boolean)>(r1, r2, z0);

        r0.<org.apache.log4j.RollingFileAppender: long maxFileSize> = 10485760L;

        r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex> = 1;

        r0.<org.apache.log4j.RollingFileAppender: long nextRollover> = 0L;

        return;
    }

    public void <init>(org.apache.log4j.Layout, java.lang.String) throws java.io.IOException
    {
        org.apache.log4j.RollingFileAppender r0;
        org.apache.log4j.Layout r1;
        java.lang.String r2;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        r1 := @parameter0: org.apache.log4j.Layout;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.log4j.FileAppender: void <init>(org.apache.log4j.Layout,java.lang.String)>(r1, r2);

        r0.<org.apache.log4j.RollingFileAppender: long maxFileSize> = 10485760L;

        r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex> = 1;

        r0.<org.apache.log4j.RollingFileAppender: long nextRollover> = 0L;

        return;
    }

    public int getMaxBackupIndex()
    {
        int $i0;
        org.apache.log4j.RollingFileAppender r0;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        $i0 = r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex>;

        return $i0;
    }

    public long getMaximumFileSize()
    {
        org.apache.log4j.RollingFileAppender r0;
        long $l0;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        $l0 = r0.<org.apache.log4j.RollingFileAppender: long maxFileSize>;

        return $l0;
    }

    public void rollOver()
    {
        java.lang.Thread $r63, $r71;
        org.apache.log4j.helpers.QuietWriter $r1, $r50;
        long $l7, $l8, $l9;
        java.lang.StringBuffer $r3, $r4, $r10, $r11, $r12, $r17, $r18, $r19, $r24, $r25, $r26, $r27, $r33, $r34, $r35, $r40, $r41, $r42, $r45, $r46, $r47, $r48, $r53, $r54, $r58, $r60, $r61, $r66, $r68, $r69, $r72, $r73, $r74, $r76, $r78, $r80, $r81, $r84, $r85, $r86;
        java.lang.String $r5, $r6, $r9, $r13, $r16, $r20, $r22, $r28, $r29, $r32, $r36, $r39, $r43, $r49, $r55, $r59, $r62, $r67, $r70;
        java.io.IOException $r56, $r64;
        java.io.File $r75, $r77, $r79, $r82, $r83;
        org.apache.log4j.RollingFileAppender r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i10, $i12;
        org.apache.log4j.helpers.CountingQuietWriter $r51;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        $r1 = r0.<org.apache.log4j.WriterAppender: org.apache.log4j.helpers.QuietWriter qw>;

        if $r1 == null goto label01;

        $r50 = r0.<org.apache.log4j.WriterAppender: org.apache.log4j.helpers.QuietWriter qw>;

        $r51 = (org.apache.log4j.helpers.CountingQuietWriter) $r50;

        $l7 = virtualinvoke $r51.<org.apache.log4j.helpers.CountingQuietWriter: long getCount()>();

        $r72 = new java.lang.StringBuffer;

        specialinvoke $r72.<java.lang.StringBuffer: void <init>()>();

        $r53 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("rolling over count=");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l7);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r55);

        $l8 = r0.<org.apache.log4j.RollingFileAppender: long maxFileSize>;

        $l9 = $l7 + $l8;

        r0.<org.apache.log4j.RollingFileAppender: long nextRollover> = $l9;

     label01:
        $r73 = new java.lang.StringBuffer;

        specialinvoke $r73.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("maxBackupIndex=");

        $i0 = r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r5);

        z7 = 1;

        $i1 = r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex>;

        if $i1 <= 0 goto label10;

        $r75 = new java.io.File;

        $r74 = new java.lang.StringBuffer;

        specialinvoke $r74.<java.lang.StringBuffer: void <init>()>();

        $r9 = r0.<org.apache.log4j.FileAppender: java.lang.String fileName>;

        $r10 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $i3 = r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r75.<java.io.File: void <init>(java.lang.String)>($r13);

        $z1 = virtualinvoke $r75.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label02;

        z7 = virtualinvoke $r75.<java.io.File: boolean delete()>();

     label02:
        $i4 = r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex>;

        i10 = $i4 - 1;

     label03:
        if i10 < 1 goto label05;

        if z7 == 0 goto label05;

        $r77 = new java.io.File;

        $r76 = new java.lang.StringBuffer;

        specialinvoke $r76.<java.lang.StringBuffer: void <init>()>();

        $r32 = r0.<org.apache.log4j.FileAppender: java.lang.String fileName>;

        $r33 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i10);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r77.<java.io.File: void <init>(java.lang.String)>($r36);

        $z4 = virtualinvoke $r77.<java.io.File: boolean exists()>();

        if $z4 == 0 goto label04;

        $r79 = new java.io.File;

        $r78 = new java.lang.StringBuffer;

        specialinvoke $r78.<java.lang.StringBuffer: void <init>()>();

        $r39 = r0.<org.apache.log4j.FileAppender: java.lang.String fileName>;

        $r40 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(46);

        $i6 = i10 + 1;

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r79.<java.io.File: void <init>(java.lang.String)>($r43);

        $r80 = new java.lang.StringBuffer;

        specialinvoke $r80.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Renaming file ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r77);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to ");

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r79);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r49);

        z7 = virtualinvoke $r77.<java.io.File: boolean renameTo(java.io.File)>($r79);

     label04:
        $i12 = (int) -1;

        i10 = i10 + $i12;

        goto label03;

     label05:
        if z7 == 0 goto label10;

        $r82 = new java.io.File;

        $r81 = new java.lang.StringBuffer;

        specialinvoke $r81.<java.lang.StringBuffer: void <init>()>();

        $r16 = r0.<org.apache.log4j.FileAppender: java.lang.String fileName>;

        $r17 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r82.<java.io.File: void <init>(java.lang.String)>($r20);

        virtualinvoke r0.<org.apache.log4j.FileAppender: void closeFile()>();

        $r83 = new java.io.File;

        $r22 = r0.<org.apache.log4j.FileAppender: java.lang.String fileName>;

        specialinvoke $r83.<java.io.File: void <init>(java.lang.String)>($r22);

        $r84 = new java.lang.StringBuffer;

        specialinvoke $r84.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Renaming file ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r83);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r82);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void debug(java.lang.String)>($r28);

        $z2 = virtualinvoke $r83.<java.io.File: boolean renameTo(java.io.File)>($r82);

        z7 = $z2;

        if $z2 != 0 goto label10;

     label06:
        $r29 = r0.<org.apache.log4j.FileAppender: java.lang.String fileName>;

        $z3 = r0.<org.apache.log4j.FileAppender: boolean bufferedIO>;

        $i5 = r0.<org.apache.log4j.FileAppender: int bufferSize>;

        virtualinvoke r0.<org.apache.log4j.RollingFileAppender: void setFile(java.lang.String,boolean,boolean,int)>($r29, 1, $z3, $i5);

     label07:
        goto label10;

     label08:
        $r64 := @caughtexception;

        $z6 = $r64 instanceof java.io.InterruptedIOException;

        if $z6 == 0 goto label09;

        $r71 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r71.<java.lang.Thread: void interrupt()>();

     label09:
        $r85 = new java.lang.StringBuffer;

        specialinvoke $r85.<java.lang.StringBuffer: void <init>()>();

        $r66 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("setFile(");

        $r67 = r0.<org.apache.log4j.FileAppender: java.lang.String fileName>;

        $r68 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", true) call failed.");

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r70, $r64);

     label10:
        if z7 == 0 goto label15;

     label11:
        $r6 = r0.<org.apache.log4j.FileAppender: java.lang.String fileName>;

        $z0 = r0.<org.apache.log4j.FileAppender: boolean bufferedIO>;

        $i2 = r0.<org.apache.log4j.FileAppender: int bufferSize>;

        virtualinvoke r0.<org.apache.log4j.RollingFileAppender: void setFile(java.lang.String,boolean,boolean,int)>($r6, 0, $z0, $i2);

        r0.<org.apache.log4j.RollingFileAppender: long nextRollover> = 0L;

     label12:
        goto label15;

     label13:
        $r56 := @caughtexception;

        $z5 = $r56 instanceof java.io.InterruptedIOException;

        if $z5 == 0 goto label14;

        $r63 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r63.<java.lang.Thread: void interrupt()>();

     label14:
        $r86 = new java.lang.StringBuffer;

        specialinvoke $r86.<java.lang.StringBuffer: void <init>()>();

        $r58 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("setFile(");

        $r59 = r0.<org.apache.log4j.FileAppender: java.lang.String fileName>;

        $r60 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", false) call failed.");

        $r62 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r62, $r56);

     label15:
        return;

        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label11 to label12 with label13;
    }

    public synchronized void setFile(java.lang.String, boolean, boolean, int) throws java.io.IOException
    {
        org.apache.log4j.helpers.CountingQuietWriter $r4;
        long $l1;
        java.io.File $r2;
        int $i0, i2;
        org.apache.log4j.RollingFileAppender r0;
        java.lang.String r1;
        org.apache.log4j.helpers.QuietWriter $r3;
        boolean z0, $z1, z2;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        i2 := @parameter3: int;

        $z1 = r0.<org.apache.log4j.FileAppender: boolean bufferedIO>;

        $i0 = r0.<org.apache.log4j.FileAppender: int bufferSize>;

        specialinvoke r0.<org.apache.log4j.FileAppender: void setFile(java.lang.String,boolean,boolean,int)>(r1, z0, $z1, $i0);

        if z0 == 0 goto label1;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r1);

        $r3 = r0.<org.apache.log4j.WriterAppender: org.apache.log4j.helpers.QuietWriter qw>;

        $r4 = (org.apache.log4j.helpers.CountingQuietWriter) $r3;

        $l1 = virtualinvoke $r2.<java.io.File: long length()>();

        virtualinvoke $r4.<org.apache.log4j.helpers.CountingQuietWriter: void setCount(long)>($l1);

     label1:
        return;
    }

    public void setMaxBackupIndex(int)
    {
        int i0;
        org.apache.log4j.RollingFileAppender r0;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        i0 := @parameter0: int;

        r0.<org.apache.log4j.RollingFileAppender: int maxBackupIndex> = i0;

        return;
    }

    public void setMaximumFileSize(long)
    {
        org.apache.log4j.RollingFileAppender r0;
        long l0;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        l0 := @parameter0: long;

        r0.<org.apache.log4j.RollingFileAppender: long maxFileSize> = l0;

        return;
    }

    public void setMaxFileSize(java.lang.String)
    {
        org.apache.log4j.RollingFileAppender r0;
        long $l0, $l1, $l2;
        java.lang.String r1;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        r1 := @parameter0: java.lang.String;

        $l0 = r0.<org.apache.log4j.RollingFileAppender: long maxFileSize>;

        $l1 = $l0 + 1L;

        $l2 = staticinvoke <org.apache.log4j.helpers.OptionConverter: long toFileSize(java.lang.String,long)>(r1, $l1);

        r0.<org.apache.log4j.RollingFileAppender: long maxFileSize> = $l2;

        return;
    }

    protected void setQWForFiles(java.io.Writer)
    {
        org.apache.log4j.helpers.CountingQuietWriter $r1;
        java.io.Writer r2;
        org.apache.log4j.spi.ErrorHandler $r3;
        org.apache.log4j.RollingFileAppender r0;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        r2 := @parameter0: java.io.Writer;

        $r1 = new org.apache.log4j.helpers.CountingQuietWriter;

        $r3 = r0.<org.apache.log4j.AppenderSkeleton: org.apache.log4j.spi.ErrorHandler errorHandler>;

        specialinvoke $r1.<org.apache.log4j.helpers.CountingQuietWriter: void <init>(java.io.Writer,org.apache.log4j.spi.ErrorHandler)>(r2, $r3);

        r0.<org.apache.log4j.WriterAppender: org.apache.log4j.helpers.QuietWriter qw> = $r1;

        return;
    }

    protected void subAppend(org.apache.log4j.spi.LoggingEvent)
    {
        org.apache.log4j.helpers.CountingQuietWriter $r5;
        org.apache.log4j.spi.LoggingEvent r1;
        long $l0, $l1, $l3;
        byte $b2, $b4;
        int $i5, $i6;
        org.apache.log4j.RollingFileAppender r0;
        java.lang.String $r2;
        org.apache.log4j.helpers.QuietWriter $r3, $r4;

        r0 := @this: org.apache.log4j.RollingFileAppender;

        r1 := @parameter0: org.apache.log4j.spi.LoggingEvent;

        specialinvoke r0.<org.apache.log4j.WriterAppender: void subAppend(org.apache.log4j.spi.LoggingEvent)>(r1);

        $r2 = r0.<org.apache.log4j.FileAppender: java.lang.String fileName>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.log4j.WriterAppender: org.apache.log4j.helpers.QuietWriter qw>;

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.log4j.WriterAppender: org.apache.log4j.helpers.QuietWriter qw>;

        $r5 = (org.apache.log4j.helpers.CountingQuietWriter) $r4;

        $l0 = virtualinvoke $r5.<org.apache.log4j.helpers.CountingQuietWriter: long getCount()>();

        $l1 = r0.<org.apache.log4j.RollingFileAppender: long maxFileSize>;

        $b2 = $l0 cmp $l1;

        $i5 = (int) $b2;

        if $i5 < 0 goto label1;

        $l3 = r0.<org.apache.log4j.RollingFileAppender: long nextRollover>;

        $b4 = $l0 cmp $l3;

        $i6 = (int) $b4;

        if $i6 < 0 goto label1;

        virtualinvoke r0.<org.apache.log4j.RollingFileAppender: void rollOver()>();

     label1:
        return;
    }
}
