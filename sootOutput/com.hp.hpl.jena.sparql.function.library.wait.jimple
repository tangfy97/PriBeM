public class com.hp.hpl.jena.sparql.function.library.wait extends com.hp.hpl.jena.sparql.function.FunctionBase1
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.function.library.wait r0;

        r0 := @this: com.hp.hpl.jena.sparql.function.library.wait;

        specialinvoke r0.<com.hp.hpl.jena.sparql.function.FunctionBase1: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue exec(com.hp.hpl.jena.sparql.expr.NodeValue)
    {
        com.hp.hpl.jena.sparql.function.library.wait r4;
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r2;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r3;
        int $i0;
        java.math.BigInteger $r1;
        boolean $z0;

        r4 := @this: com.hp.hpl.jena.sparql.function.library.wait;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.NodeValue;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isInteger()>();

        if $z0 != 0 goto label1;

        $r3 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>("Not an integer");

        throw $r3;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: java.math.BigInteger getInteger()>();

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int intValue()>();

        staticinvoke <org.apache.jena.atlas.lib.Lib: void sleep(int)>($i0);

        $r2 = <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue TRUE>;

        return $r2;
    }
}
