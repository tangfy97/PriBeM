public final class org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot extends com.google.protobuf.GeneratedMessage
{
    private static final org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot defaultInstance;
    public static final int DOCUMENTID_FIELD_NUMBER;
    private boolean hasDocumentId;
    private java.lang.String documentId_;
    public static final int DOCUMENTOPERATION_FIELD_NUMBER;
    private boolean hasDocumentOperation;
    private org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation documentOperation_;
    public static final int AUTHOR_FIELD_NUMBER;
    private boolean hasAuthor;
    private java.lang.String author_;
    public static final int CONTRIBUTOR_FIELD_NUMBER;
    private java.util.List contributor_;
    public static final int LASTMODIFIEDVERSION_FIELD_NUMBER;
    private boolean hasLastModifiedVersion;
    private long lastModifiedVersion_;
    public static final int LASTMODIFIEDTIME_FIELD_NUMBER;
    private boolean hasLastModifiedTime;
    private long lastModifiedTime_;
    private int memoizedSerializedSize;

    private void <init>()
    {
        int $i1;
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        specialinvoke r0.<com.google.protobuf.GeneratedMessage: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String documentId_> = "";

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String author_> = "";

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.util.List contributor_> = $r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: long lastModifiedVersion_> = 0L;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: long lastModifiedTime_> = 0L;

        $i1 = (int) -1;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: int memoizedSerializedSize> = $i1;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: void initFields()>();

        return;
    }

    private void <init>(boolean)
    {
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        int $i1;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.google.protobuf.GeneratedMessage: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String documentId_> = "";

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String author_> = "";

        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.util.List contributor_> = $r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: long lastModifiedVersion_> = 0L;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: long lastModifiedTime_> = 0L;

        $i1 = (int) -1;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: int memoizedSerializedSize> = $i1;

        return;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot getDefaultInstance()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r0;

        $r0 = <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot defaultInstance>;

        return $r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r0, r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r0 = <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot defaultInstance>;

        return $r0;
    }

    public static final com.google.protobuf.Descriptors$Descriptor getDescriptor()
    {
        com.google.protobuf.Descriptors$Descriptor $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer: com.google.protobuf.Descriptors$Descriptor access$5100()>();

        return $r0;
    }

    protected com.google.protobuf.GeneratedMessage$FieldAccessorTable internalGetFieldAccessorTable()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r1;
        com.google.protobuf.GeneratedMessage$FieldAccessorTable $r0;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer: com.google.protobuf.GeneratedMessage$FieldAccessorTable access$5200()>();

        return $r0;
    }

    public boolean hasDocumentId()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasDocumentId>;

        return $z0;
    }

    public java.lang.String getDocumentId()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String documentId_>;

        return $r1;
    }

    public boolean hasDocumentOperation()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasDocumentOperation>;

        return $z0;
    }

    public org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation getDocumentOperation()
    {
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation documentOperation_>;

        return $r1;
    }

    public boolean hasAuthor()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasAuthor>;

        return $z0;
    }

    public java.lang.String getAuthor()
    {
        java.lang.String $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String author_>;

        return $r1;
    }

    public java.util.List getContributorList()
    {
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.util.List contributor_>;

        return $r1;
    }

    public int getContributorCount()
    {
        int $i0;
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.util.List contributor_>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public java.lang.String getContributor(int)
    {
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        int i0;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.util.List contributor_>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public boolean hasLastModifiedVersion()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasLastModifiedVersion>;

        return $z0;
    }

    public long getLastModifiedVersion()
    {
        long $l0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $l0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: long lastModifiedVersion_>;

        return $l0;
    }

    public boolean hasLastModifiedTime()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasLastModifiedTime>;

        return $z0;
    }

    public long getLastModifiedTime()
    {
        long $l0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $l0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: long lastModifiedTime_>;

        return $l0;
    }

    private void initFields()
    {
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = staticinvoke <org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation getDefaultInstance()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation documentOperation_> = $r1;

        return;
    }

    public final boolean isInitialized()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasDocumentId>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasDocumentOperation>;

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $z2 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasAuthor>;

        if $z2 != 0 goto label3;

        return 0;

     label3:
        $z3 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasLastModifiedVersion>;

        if $z3 != 0 goto label4;

        return 0;

     label4:
        $z4 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasLastModifiedTime>;

        if $z4 != 0 goto label5;

        return 0;

     label5:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation getDocumentOperation()>();

        $z5 = virtualinvoke $r1.<org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation: boolean isInitialized()>();

        if $z5 != 0 goto label6;

        return 0;

     label6:
        return 1;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        long $l0, $l1;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation $r8;
        java.lang.String r6, $r7, $r9;
        com.google.protobuf.CodedOutputStream r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.google.protobuf.UnknownFieldSet $r3;
        java.util.Iterator $r2;
        java.util.List $r1;
        java.lang.Object $r5;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        r4 := @parameter0: com.google.protobuf.CodedOutputStream;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: int getSerializedSize()>();

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasDocumentId()>();

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String getDocumentId()>();

        virtualinvoke r4.<com.google.protobuf.CodedOutputStream: void writeString(int,java.lang.String)>(1, $r9);

     label1:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasDocumentOperation()>();

        if $z1 == 0 goto label2;

        $r8 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation getDocumentOperation()>();

        virtualinvoke r4.<com.google.protobuf.CodedOutputStream: void writeMessage(int,com.google.protobuf.MessageLite)>(2, $r8);

     label2:
        $z2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasAuthor()>();

        if $z2 == 0 goto label3;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String getAuthor()>();

        virtualinvoke r4.<com.google.protobuf.CodedOutputStream: void writeString(int,java.lang.String)>(3, $r7);

     label3:
        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.util.List getContributorList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z5 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label5;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        virtualinvoke r4.<com.google.protobuf.CodedOutputStream: void writeString(int,java.lang.String)>(4, r6);

        goto label4;

     label5:
        $z3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasLastModifiedVersion()>();

        if $z3 == 0 goto label6;

        $l1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: long getLastModifiedVersion()>();

        virtualinvoke r4.<com.google.protobuf.CodedOutputStream: void writeInt64(int,long)>(5, $l1);

     label6:
        $z4 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasLastModifiedTime()>();

        if $z4 == 0 goto label7;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: long getLastModifiedTime()>();

        virtualinvoke r4.<com.google.protobuf.CodedOutputStream: void writeInt64(int,long)>(6, $l0);

     label7:
        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: com.google.protobuf.UnknownFieldSet getUnknownFields()>();

        virtualinvoke $r3.<com.google.protobuf.UnknownFieldSet: void writeTo(com.google.protobuf.CodedOutputStream)>(r4);

        return;
    }

    public int getSerializedSize()
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        long $l3, $l6;
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation $r8;
        int $i0, $i1, $i2, $i4, $i5, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, $i18;
        java.lang.String r6, $r7, $r9;
        com.google.protobuf.UnknownFieldSet $r4;
        java.util.Iterator $r2;
        java.lang.Object $r5;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        i12 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: int memoizedSerializedSize>;

        $i18 = (int) -1;

        if i12 == $i18 goto label1;

        return i12;

     label1:
        i13 = 0;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasDocumentId()>();

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String getDocumentId()>();

        $i11 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeStringSize(int,java.lang.String)>(1, $r9);

        i13 = 0 + $i11;

     label2:
        $z1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasDocumentOperation()>();

        if $z1 == 0 goto label3;

        $r8 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation getDocumentOperation()>();

        $i10 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeMessageSize(int,com.google.protobuf.MessageLite)>(2, $r8);

        i13 = i13 + $i10;

     label3:
        $z2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasAuthor()>();

        if $z2 == 0 goto label4;

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String getAuthor()>();

        $i9 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeStringSize(int,java.lang.String)>(3, $r7);

        i13 = i13 + $i9;

     label4:
        i14 = 0;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.util.List getContributorList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z5 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label6;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $i8 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeStringSizeNoTag(java.lang.String)>(r6);

        i14 = i14 + $i8;

        goto label5;

     label6:
        i15 = i13 + i14;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.util.List getContributorList()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $i1 = 1 * $i0;

        i16 = i15 + $i1;

        $z3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasLastModifiedVersion()>();

        if $z3 == 0 goto label7;

        $l6 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: long getLastModifiedVersion()>();

        $i7 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeInt64Size(int,long)>(5, $l6);

        i16 = i16 + $i7;

     label7:
        $z4 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasLastModifiedTime()>();

        if $z4 == 0 goto label8;

        $l3 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: long getLastModifiedTime()>();

        $i4 = staticinvoke <com.google.protobuf.CodedOutputStream: int computeInt64Size(int,long)>(6, $l3);

        i16 = i16 + $i4;

     label8:
        $r4 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: com.google.protobuf.UnknownFieldSet getUnknownFields()>();

        $i2 = virtualinvoke $r4.<com.google.protobuf.UnknownFieldSet: int getSerializedSize()>();

        $i5 = i16 + $i2;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: int memoizedSerializedSize> = $i5;

        return $i5;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot parseFrom(com.google.protobuf.ByteString) throws com.google.protobuf.InvalidProtocolBufferException
    {
        com.google.protobuf.ByteString r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r0, $r3;
        com.google.protobuf.AbstractMessage$Builder $r2;

        r1 := @parameter0: com.google.protobuf.ByteString;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.ByteString)>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot access$5300(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot parseFrom(com.google.protobuf.ByteString, com.google.protobuf.ExtensionRegistryLite) throws com.google.protobuf.InvalidProtocolBufferException
    {
        com.google.protobuf.ByteString r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r5;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r0, $r4;
        com.google.protobuf.AbstractMessage$Builder $r3;

        r1 := @parameter0: com.google.protobuf.ByteString;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder) $r3;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot access$5300(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder)>($r4);

        return $r5;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot parseFrom(byte[]) throws com.google.protobuf.InvalidProtocolBufferException
    {
        byte[] r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r0, $r3;
        com.google.protobuf.AbstractMessage$Builder $r2;

        r1 := @parameter0: byte[];

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(byte[])>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot access$5300(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot parseFrom(byte[], com.google.protobuf.ExtensionRegistryLite) throws com.google.protobuf.InvalidProtocolBufferException
    {
        byte[] r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r5;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r0, $r4;
        com.google.protobuf.AbstractMessage$Builder $r3;

        r1 := @parameter0: byte[];

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(byte[],com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder) $r3;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot access$5300(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder)>($r4);

        return $r5;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot parseFrom(java.io.InputStream) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r0, $r3;
        com.google.protobuf.AbstractMessage$Builder $r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(java.io.InputStream)>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot access$5300(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot parseFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r5;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r0, $r4;
        com.google.protobuf.AbstractMessage$Builder $r3;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder) $r3;

        $r5 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot access$5300(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder)>($r4);

        return $r5;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot parseDelimitedFrom(java.io.InputStream) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r0;
        java.io.InputStream r1;
        boolean $z0;

        r1 := @parameter0: java.io.InputStream;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        $z0 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: boolean mergeDelimitedFrom(java.io.InputStream)>(r1);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot access$5300(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder)>($r0);

        return $r2;

     label1:
        return null;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot parseDelimitedFrom(java.io.InputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r3;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r0;
        java.io.InputStream r1;
        boolean $z0;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        $z0 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: boolean mergeDelimitedFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot access$5300(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder)>($r0);

        return $r3;

     label1:
        return null;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot parseFrom(com.google.protobuf.CodedInputStream) throws java.io.IOException
    {
        com.google.protobuf.CodedInputStream r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r0, $r3;
        com.google.protobuf.AbstractMessage$Builder $r2;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream)>(r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder) $r2;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot access$5300(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot parseFrom(com.google.protobuf.CodedInputStream, com.google.protobuf.ExtensionRegistryLite) throws java.io.IOException
    {
        com.google.protobuf.CodedInputStream r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r4;
        com.google.protobuf.ExtensionRegistryLite r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r0, $r3;

        r1 := @parameter0: com.google.protobuf.CodedInputStream;

        r2 := @parameter1: com.google.protobuf.ExtensionRegistryLite;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>(r1, r2);

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot access$5300(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder)>($r3);

        return $r4;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r0;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder access$5400()>();

        return $r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilderForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        return $r0;
    }

    public static org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r0, $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r1;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder()>();

        $r2 = virtualinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder mergeFrom(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot)>(r1);

        return $r2;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder toBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot)>(r0);

        return $r1;
    }

    public volatile com.google.protobuf.Message$Builder toBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder toBuilder()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message$Builder newBuilderForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilderForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.Message getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot getDefaultInstanceForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite$Builder toBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder toBuilder()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite$Builder newBuilderForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot$Builder newBuilderForType()>();

        return $r1;
    }

    public volatile com.google.protobuf.MessageLite getDefaultInstanceForType()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0, $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot getDefaultInstanceForType()>();

        return $r1;
    }

    void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$1)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$1 r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$1;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: void <init>()>();

        return;
    }

    static java.util.List access$5600(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot)
    {
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.util.List contributor_>;

        return $r1;
    }

    static java.util.List access$5602(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot, java.util.List)
    {
        java.util.List r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        r1 := @parameter1: java.util.List;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.util.List contributor_> = r1;

        return r1;
    }

    static boolean access$5702(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasDocumentId> = z0;

        return z0;
    }

    static java.lang.String access$5802(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot, java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        r1 := @parameter1: java.lang.String;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String documentId_> = r1;

        return r1;
    }

    static boolean access$5902(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasDocumentOperation> = z0;

        return z0;
    }

    static org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation access$6002(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot, org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        r1 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation documentOperation_> = r1;

        return r1;
    }

    static org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation access$6000(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot)
    {
        org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.federation.Proto$ProtocolDocumentOperation documentOperation_>;

        return $r1;
    }

    static boolean access$6102(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasAuthor> = z0;

        return z0;
    }

    static java.lang.String access$6202(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot, java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        r1 := @parameter1: java.lang.String;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: java.lang.String author_> = r1;

        return r1;
    }

    static boolean access$6302(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasLastModifiedVersion> = z0;

        return z0;
    }

    static long access$6402(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot, long)
    {
        long l0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        l0 := @parameter1: long;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: long lastModifiedVersion_> = l0;

        return l0;
    }

    static boolean access$6502(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: boolean hasLastModifiedTime> = z0;

        return z0;
    }

    static long access$6602(org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot, long)
    {
        long l0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        l0 := @parameter1: long;

        r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: long lastModifiedTime_> = l0;

        return l0;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot $r0, $r1;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: int LASTMODIFIEDTIME_FIELD_NUMBER> = 6;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: int LASTMODIFIEDVERSION_FIELD_NUMBER> = 5;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: int CONTRIBUTOR_FIELD_NUMBER> = 4;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: int AUTHOR_FIELD_NUMBER> = 3;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: int DOCUMENTOPERATION_FIELD_NUMBER> = 2;

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: int DOCUMENTID_FIELD_NUMBER> = 1;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: void <init>(boolean)>(1);

        <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot defaultInstance> = $r0;

        staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer: void internalForceInit()>();

        $r1 = <org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot defaultInstance>;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$DocumentSnapshot: void initFields()>();

        return;
    }
}
