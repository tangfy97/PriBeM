public final class com.mycila.inject.internal.guava.collect.Interners extends java.lang.Object
{

    private void <init>()
    {
        com.mycila.inject.internal.guava.collect.Interners r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Interners;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.mycila.inject.internal.guava.collect.Interner newStrongInterner()
    {
        com.mycila.inject.internal.guava.collect.Interners$1 $r2;
        com.mycila.inject.internal.guava.collect.MapMaker $r0;
        java.util.concurrent.ConcurrentMap $r1;

        $r0 = new com.mycila.inject.internal.guava.collect.MapMaker;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.MapMaker: void <init>()>();

        $r1 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.MapMaker: java.util.concurrent.ConcurrentMap makeMap()>();

        $r2 = new com.mycila.inject.internal.guava.collect.Interners$1;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.Interners$1: void <init>(java.util.concurrent.ConcurrentMap)>($r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.Interner newWeakInterner()
    {
        com.mycila.inject.internal.guava.collect.Interners$CustomInterner $r0;
        com.mycila.inject.internal.guava.collect.MapMaker $r1, $r2;

        $r0 = new com.mycila.inject.internal.guava.collect.Interners$CustomInterner;

        $r1 = new com.mycila.inject.internal.guava.collect.MapMaker;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.MapMaker: void <init>()>();

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.MapMaker: com.mycila.inject.internal.guava.collect.MapMaker weakKeys()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Interners$CustomInterner: void <init>(com.mycila.inject.internal.guava.collect.GenericMapMaker)>($r2);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.base.Function asFunction(com.mycila.inject.internal.guava.collect.Interner)
    {
        com.mycila.inject.internal.guava.collect.Interner r1, $r3;
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.collect.Interners$InternerFunction $r0;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Interner;

        $r0 = new com.mycila.inject.internal.guava.collect.Interners$InternerFunction;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (com.mycila.inject.internal.guava.collect.Interner) $r2;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.Interners$InternerFunction: void <init>(com.mycila.inject.internal.guava.collect.Interner)>($r3);

        return $r0;
    }
}
