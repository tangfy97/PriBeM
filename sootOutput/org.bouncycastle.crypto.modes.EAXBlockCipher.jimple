public class org.bouncycastle.crypto.modes.EAXBlockCipher extends java.lang.Object implements org.bouncycastle.crypto.modes.AEADBlockCipher
{
    private static final byte nTAG;
    private static final byte hTAG;
    private static final byte cTAG;
    private org.bouncycastle.crypto.modes.SICBlockCipher cipher;
    private boolean forEncryption;
    private int blockSize;
    private org.bouncycastle.crypto.Mac mac;
    private byte[] nonceMac;
    private byte[] associatedTextMac;
    private byte[] macBlock;
    private int macSize;
    private byte[] bufBlock;
    private int bufOff;

    public void <init>(org.bouncycastle.crypto.BlockCipher)
    {
        byte[] $r3, $r4, $r6, $r8;
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.bouncycastle.crypto.Mac $r5, $r7;
        org.bouncycastle.crypto.BlockCipher r1;
        org.bouncycastle.crypto.macs.CMac $r2;
        org.bouncycastle.crypto.modes.SICBlockCipher $r9;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        r1 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize> = $i0;

        $r2 = new org.bouncycastle.crypto.macs.CMac;

        specialinvoke $r2.<org.bouncycastle.crypto.macs.CMac: void <init>(org.bouncycastle.crypto.BlockCipher)>(r1);

        r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac> = $r2;

        $i1 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        $r3 = newarray (byte)[$i1];

        r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] macBlock> = $r3;

        $i2 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        $i3 = $i2 * 2;

        $r4 = newarray (byte)[$i3];

        r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock> = $r4;

        $r5 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        $i4 = interfaceinvoke $r5.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        $r6 = newarray (byte)[$i4];

        r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] associatedTextMac> = $r6;

        $r7 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        $i5 = interfaceinvoke $r7.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        $r8 = newarray (byte)[$i5];

        r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] nonceMac> = $r8;

        $r9 = new org.bouncycastle.crypto.modes.SICBlockCipher;

        specialinvoke $r9.<org.bouncycastle.crypto.modes.SICBlockCipher: void <init>(org.bouncycastle.crypto.BlockCipher)>(r1);

        r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.modes.SICBlockCipher cipher> = $r9;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.modes.EAXBlockCipher r1;
        org.bouncycastle.crypto.BlockCipher $r3;
        java.lang.StringBuilder $r0, $r5, $r6;
        java.lang.String $r4, $r7;
        org.bouncycastle.crypto.modes.SICBlockCipher $r2;

        r1 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.modes.SICBlockCipher cipher>;

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.modes.SICBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r4 = interfaceinvoke $r3.<org.bouncycastle.crypto.BlockCipher: java.lang.String getAlgorithmName()>();

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/EAX");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()
    {
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;
        org.bouncycastle.crypto.BlockCipher $r2;
        org.bouncycastle.crypto.modes.SICBlockCipher $r1;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        $r1 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.modes.SICBlockCipher cipher>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.modes.SICBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        return $r2;
    }

    public int getBlockSize()
    {
        int $i0;
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;
        org.bouncycastle.crypto.modes.SICBlockCipher $r1;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        $r1 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.modes.SICBlockCipher cipher>;

        $i0 = virtualinvoke $r1.<org.bouncycastle.crypto.modes.SICBlockCipher: int getBlockSize()>();

        return $i0;
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters) throws java.lang.IllegalArgumentException
    {
        byte[] $r7, $r11, $r15, $r17, r19, r20;
        org.bouncycastle.crypto.params.ParametersWithIV $r14, r22;
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;
        org.bouncycastle.crypto.Mac $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r13;
        boolean z0, $z1, $z2;
        org.bouncycastle.crypto.CipherParameters r1, r21;
        org.bouncycastle.crypto.params.AEADParameters r18;
        org.bouncycastle.crypto.modes.SICBlockCipher $r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        z0 := @parameter0: boolean;

        r1 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: boolean forEncryption> = z0;

        $z1 = r1 instanceof org.bouncycastle.crypto.params.AEADParameters;

        if $z1 == 0 goto label1;

        r18 = (org.bouncycastle.crypto.params.AEADParameters) r1;

        r19 = virtualinvoke r18.<org.bouncycastle.crypto.params.AEADParameters: byte[] getNonce()>();

        r20 = virtualinvoke r18.<org.bouncycastle.crypto.params.AEADParameters: byte[] getAssociatedText()>();

        $i14 = virtualinvoke r18.<org.bouncycastle.crypto.params.AEADParameters: int getMacSize()>();

        $i15 = $i14 / 8;

        r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int macSize> = $i15;

        r21 = virtualinvoke r18.<org.bouncycastle.crypto.params.AEADParameters: org.bouncycastle.crypto.params.KeyParameter getKey()>();

        goto label3;

     label1:
        $z2 = r1 instanceof org.bouncycastle.crypto.params.ParametersWithIV;

        if $z2 == 0 goto label2;

        r22 = (org.bouncycastle.crypto.params.ParametersWithIV) r1;

        r19 = virtualinvoke r22.<org.bouncycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        r20 = newarray (byte)[0];

        $r3 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        $i0 = interfaceinvoke $r3.<org.bouncycastle.crypto.Mac: int getMacSize()>();

        $i1 = $i0 / 2;

        r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int macSize> = $i1;

        r21 = virtualinvoke r22.<org.bouncycastle.crypto.params.ParametersWithIV: org.bouncycastle.crypto.CipherParameters getParameters()>();

        goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("invalid parameters passed to EAX");

        throw $r2;

     label3:
        $i2 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        $r17 = newarray (byte)[$i2];

        $r4 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void init(org.bouncycastle.crypto.CipherParameters)>(r21);

        $i3 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        $i4 = $i3 - 1;

        $r17[$i4] = 1;

        $r5 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        $i5 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        interfaceinvoke $r5.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r17, 0, $i5);

        $r6 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        $i6 = lengthof r20;

        interfaceinvoke $r6.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>(r20, 0, $i6);

        $r8 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        $r7 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] associatedTextMac>;

        interfaceinvoke $r8.<org.bouncycastle.crypto.Mac: int doFinal(byte[],int)>($r7, 0);

        $i7 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        $i8 = $i7 - 1;

        $r17[$i8] = 0;

        $r9 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        $i9 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        interfaceinvoke $r9.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r17, 0, $i9);

        $r10 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        $i10 = lengthof r19;

        interfaceinvoke $r10.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>(r19, 0, $i10);

        $r12 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        $r11 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] nonceMac>;

        interfaceinvoke $r12.<org.bouncycastle.crypto.Mac: int doFinal(byte[],int)>($r11, 0);

        $i11 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        $i12 = $i11 - 1;

        $r17[$i12] = 2;

        $r13 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        $i13 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        interfaceinvoke $r13.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r17, 0, $i13);

        $r16 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.modes.SICBlockCipher cipher>;

        $r14 = new org.bouncycastle.crypto.params.ParametersWithIV;

        $r15 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] nonceMac>;

        specialinvoke $r14.<org.bouncycastle.crypto.params.ParametersWithIV: void <init>(org.bouncycastle.crypto.CipherParameters,byte[])>(r21, $r15);

        virtualinvoke $r16.<org.bouncycastle.crypto.modes.SICBlockCipher: void init(boolean,org.bouncycastle.crypto.CipherParameters)>(1, $r14);

        return;
    }

    private void calculateMac()
    {
        byte[] r1, $r3, $r4, $r5, $r6;
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;
        byte $b2, $b3, $b4, $b5, $b6, $b7;
        int $i0, $i1, i8;
        org.bouncycastle.crypto.Mac $r2;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        $i0 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        r1 = newarray (byte)[$i0];

        $r2 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.Mac: int doFinal(byte[],int)>(r1, 0);

        i8 = 0;

     label1:
        $r3 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] macBlock>;

        $i1 = lengthof $r3;

        if i8 >= $i1 goto label2;

        $r6 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] macBlock>;

        $r4 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] nonceMac>;

        $b3 = $r4[i8];

        $r5 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] associatedTextMac>;

        $b2 = $r5[i8];

        $b5 = $b3 ^ $b2;

        $b4 = r1[i8];

        $b6 = $b5 ^ $b4;

        $b7 = (byte) $b6;

        $r6[i8] = $b7;

        i8 = i8 + 1;

        goto label1;

     label2:
        return;
    }

    public void reset()
    {
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        specialinvoke r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: void reset(boolean)>(1);

        return;
    }

    private void reset(boolean)
    {
        byte[] $r3, $r5, $r6;
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;
        int $i0, $i1, $i2, $i3;
        org.bouncycastle.crypto.Mac $r2, $r4;
        org.bouncycastle.crypto.modes.SICBlockCipher $r1;
        boolean z0;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.modes.SICBlockCipher cipher>;

        virtualinvoke $r1.<org.bouncycastle.crypto.modes.SICBlockCipher: void reset()>();

        $r2 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        interfaceinvoke $r2.<org.bouncycastle.crypto.Mac: void reset()>();

        r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int bufOff> = 0;

        $r3 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        staticinvoke <org.bouncycastle.util.Arrays: void fill(byte[],byte)>($r3, 0);

        if z0 == 0 goto label1;

        $r5 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] macBlock>;

        staticinvoke <org.bouncycastle.util.Arrays: void fill(byte[],byte)>($r5, 0);

     label1:
        $i0 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        $r6 = newarray (byte)[$i0];

        $i1 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        $i2 = $i1 - 1;

        $r6[$i2] = 2;

        $r4 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        $i3 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r6, 0, $i3);

        return;
    }

    public int processByte(byte, byte[], int) throws org.bouncycastle.crypto.DataLengthException
    {
        byte[] r1;
        byte b0;
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;
        int i1, $i2;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        b0 := @parameter0: byte;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        $i2 = specialinvoke r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int process(byte,byte[],int)>(b0, r1, i1);

        return $i2;
    }

    public int processBytes(byte[], int, int, byte[], int) throws org.bouncycastle.crypto.DataLengthException
    {
        byte[] r1, r2;
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;
        byte $b5;
        int i0, i1, $i2, i3, $i4, $i6, i7, i8;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: byte[];

        i3 := @parameter4: int;

        i7 = 0;

        i8 = 0;

     label1:
        if i8 == i0 goto label2;

        $i2 = i1 + i8;

        $b5 = r1[$i2];

        $i4 = i3 + i7;

        $i6 = specialinvoke r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int process(byte,byte[],int)>($b5, r2, $i4);

        i7 = i7 + $i6;

        i8 = i8 + 1;

        goto label1;

     label2:
        return i7;
    }

    public int doFinal(byte[], int) throws java.lang.IllegalStateException, org.bouncycastle.crypto.InvalidCipherTextException
    {
        byte[] $r1, r2, $r3, $r5, $r7, $r9, r11, $r12, $r14, $r17;
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;
        org.bouncycastle.crypto.Mac $r6, $r16;
        boolean $z0, $z1;
        org.bouncycastle.crypto.modes.SICBlockCipher $r8, $r10, $r13, $r15;
        org.bouncycastle.crypto.InvalidCipherTextException $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        r11 := @parameter0: byte[];

        i11 := @parameter1: int;

        i0 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int bufOff>;

        $r1 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        $i1 = lengthof $r1;

        r2 = newarray (byte)[$i1];

        r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int bufOff> = 0;

        $z0 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $r13 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.modes.SICBlockCipher cipher>;

        $r12 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        virtualinvoke $r13.<org.bouncycastle.crypto.modes.SICBlockCipher: int processBlock(byte[],int,byte[],int)>($r12, 0, r2, 0);

        $r15 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.modes.SICBlockCipher cipher>;

        $r14 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        $i15 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        $i14 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        virtualinvoke $r15.<org.bouncycastle.crypto.modes.SICBlockCipher: int processBlock(byte[],int,byte[],int)>($r14, $i15, r2, $i14);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r11, i11, i0);

        $r16 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        interfaceinvoke $r16.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>(r2, 0, i0);

        specialinvoke r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: void calculateMac()>();

        $r17 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] macBlock>;

        $i17 = i11 + i0;

        $i16 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int macSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r17, 0, r11, $i17, $i16);

        specialinvoke r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: void reset(boolean)>(0);

        $i18 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int macSize>;

        $i19 = i0 + $i18;

        return $i19;

     label1:
        $i2 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int macSize>;

        if i0 <= $i2 goto label2;

        $r6 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        $r5 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        $i7 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int macSize>;

        $i8 = i0 - $i7;

        interfaceinvoke $r6.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r5, 0, $i8);

        $r8 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.modes.SICBlockCipher cipher>;

        $r7 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        virtualinvoke $r8.<org.bouncycastle.crypto.modes.SICBlockCipher: int processBlock(byte[],int,byte[],int)>($r7, 0, r2, 0);

        $r10 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.modes.SICBlockCipher cipher>;

        $r9 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        $i10 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        $i9 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        virtualinvoke $r10.<org.bouncycastle.crypto.modes.SICBlockCipher: int processBlock(byte[],int,byte[],int)>($r9, $i10, r2, $i9);

        $i12 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int macSize>;

        $i13 = i0 - $i12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r11, i11, $i13);

     label2:
        specialinvoke r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: void calculateMac()>();

        $r3 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        $i3 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int macSize>;

        $i4 = i0 - $i3;

        $z1 = specialinvoke r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: boolean verifyMac(byte[],int)>($r3, $i4);

        if $z1 != 0 goto label3;

        $r4 = new org.bouncycastle.crypto.InvalidCipherTextException;

        specialinvoke $r4.<org.bouncycastle.crypto.InvalidCipherTextException: void <init>(java.lang.String)>("mac check in EAX failed");

        throw $r4;

     label3:
        specialinvoke r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: void reset(boolean)>(0);

        $i5 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int macSize>;

        $i6 = i0 - $i5;

        return $i6;
    }

    public byte[] getMac()
    {
        byte[] r1, $r2;
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;
        int $i0, $i1;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        $i0 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int macSize>;

        r1 = newarray (byte)[$i0];

        $r2 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] macBlock>;

        $i1 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int macSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        return r1;
    }

    public int getUpdateOutputSize(int)
    {
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        i0 := @parameter0: int;

        $i1 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int bufOff>;

        $i3 = i0 + $i1;

        $i2 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        $i5 = $i3 / $i2;

        $i4 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        $i6 = $i5 * $i4;

        return $i6;
    }

    public int getOutputSize(int)
    {
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        i0 := @parameter0: int;

        $z0 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $i5 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int bufOff>;

        $i7 = i0 + $i5;

        $i6 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int macSize>;

        $i8 = $i7 + $i6;

        return $i8;

     label1:
        $i1 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int bufOff>;

        $i3 = i0 + $i1;

        $i2 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int macSize>;

        $i4 = $i3 - $i2;

        return $i4;
    }

    private int process(byte, byte[], int)
    {
        byte[] $r1, $r2, $r3, r5, $r6, $r8, $r9, $r10;
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;
        byte b2;
        int $i0, $i1, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i10, i11;
        org.bouncycastle.crypto.Mac $r4, $r12;
        boolean $z0;
        org.bouncycastle.crypto.modes.SICBlockCipher $r7, $r11;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        b2 := @parameter0: byte;

        r5 := @parameter1: byte[];

        i6 := @parameter2: int;

        $r1 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        $i0 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int bufOff>;

        $i1 = $i0 + 1;

        r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int bufOff> = $i1;

        $r1[$i0] = b2;

        $i4 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int bufOff>;

        $r2 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        $i3 = lengthof $r2;

        if $i4 != $i3 goto label3;

        $z0 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: boolean forEncryption>;

        if $z0 == 0 goto label1;

        $r11 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.modes.SICBlockCipher cipher>;

        $r10 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        i11 = virtualinvoke $r11.<org.bouncycastle.crypto.modes.SICBlockCipher: int processBlock(byte[],int,byte[],int)>($r10, 0, r5, i6);

        $r12 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        $i10 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        interfaceinvoke $r12.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>(r5, i6, $i10);

        goto label2;

     label1:
        $r4 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.Mac mac>;

        $r3 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        $i5 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        interfaceinvoke $r4.<org.bouncycastle.crypto.Mac: void update(byte[],int,int)>($r3, 0, $i5);

        $r7 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: org.bouncycastle.crypto.modes.SICBlockCipher cipher>;

        $r6 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        i11 = virtualinvoke $r7.<org.bouncycastle.crypto.modes.SICBlockCipher: int processBlock(byte[],int,byte[],int)>($r6, 0, r5, i6);

     label2:
        $i7 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int bufOff> = $i7;

        $r9 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        $i9 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        $r8 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] bufBlock>;

        $i8 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int blockSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i9, $r8, 0, $i8);

        return i11;

     label3:
        return 0;
    }

    private boolean verifyMac(byte[], int)
    {
        byte[] $r1, r2;
        org.bouncycastle.crypto.modes.EAXBlockCipher r0;
        byte $b3, $b4;
        int $i0, i1, $i2, i5, $i6, $i7;

        r0 := @this: org.bouncycastle.crypto.modes.EAXBlockCipher;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        i5 = 0;

     label1:
        $i0 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: int macSize>;

        if i5 >= $i0 goto label3;

        $r1 = r0.<org.bouncycastle.crypto.modes.EAXBlockCipher: byte[] macBlock>;

        $b4 = $r1[i5];

        $i2 = i1 + i5;

        $b3 = r2[$i2];

        $i6 = (int) $b4;

        $i7 = (int) $b3;

        if $i6 == $i7 goto label2;

        return 0;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static void <clinit>()
    {
        <org.bouncycastle.crypto.modes.EAXBlockCipher: byte cTAG> = 2;

        <org.bouncycastle.crypto.modes.EAXBlockCipher: byte hTAG> = 1;

        <org.bouncycastle.crypto.modes.EAXBlockCipher: byte nTAG> = 0;

        return;
    }
}
