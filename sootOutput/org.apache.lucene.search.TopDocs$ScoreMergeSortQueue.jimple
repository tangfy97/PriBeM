class org.apache.lucene.search.TopDocs$ScoreMergeSortQueue extends org.apache.lucene.util.PriorityQueue
{
    final org.apache.lucene.search.ScoreDoc[][] shardHits;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.search.TopDocs[])
    {
        org.apache.lucene.search.TopDocs$ScoreMergeSortQueue r0;
        org.apache.lucene.search.TopDocs $r3;
        org.apache.lucene.search.TopDocs[] r1;
        org.apache.lucene.search.ScoreDoc[][] $r2, $r5;
        org.apache.lucene.search.ScoreDoc[] $r4;
        int $i0, $i1, $i2, i3;

        r0 := @this: org.apache.lucene.search.TopDocs$ScoreMergeSortQueue;

        r1 := @parameter0: org.apache.lucene.search.TopDocs[];

        $i0 = lengthof r1;

        specialinvoke r0.<org.apache.lucene.util.PriorityQueue: void <init>(int)>($i0);

        $i1 = lengthof r1;

        $r2 = newarray (org.apache.lucene.search.ScoreDoc[])[$i1];

        r0.<org.apache.lucene.search.TopDocs$ScoreMergeSortQueue: org.apache.lucene.search.ScoreDoc[][] shardHits> = $r2;

        i3 = 0;

     label1:
        $i2 = lengthof r1;

        if i3 >= $i2 goto label2;

        $r5 = r0.<org.apache.lucene.search.TopDocs$ScoreMergeSortQueue: org.apache.lucene.search.ScoreDoc[][] shardHits>;

        $r3 = r1[i3];

        $r4 = $r3.<org.apache.lucene.search.TopDocs: org.apache.lucene.search.ScoreDoc[] scoreDocs>;

        $r5[i3] = $r4;

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean lessThan(org.apache.lucene.search.TopDocs$ShardRef, org.apache.lucene.search.TopDocs$ShardRef)
    {
        org.apache.lucene.search.ScoreDoc $r4, $r8;
        byte $b4, $b5;
        org.apache.lucene.search.ScoreDoc[] $r3, $r7;
        org.apache.lucene.search.TopDocs$ShardRef r1, r5;
        boolean $z0, $z1, $z2;
        org.apache.lucene.search.TopDocs$ScoreMergeSortQueue r0;
        org.apache.lucene.search.ScoreDoc[][] $r2, $r6;
        float $f0, $f1;
        java.lang.AssertionError $r11, $r12;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;

        r0 := @this: org.apache.lucene.search.TopDocs$ScoreMergeSortQueue;

        r1 := @parameter0: org.apache.lucene.search.TopDocs$ShardRef;

        r5 := @parameter1: org.apache.lucene.search.TopDocs$ShardRef;

        $z0 = <org.apache.lucene.search.TopDocs$ScoreMergeSortQueue: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != r5 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $r2 = r0.<org.apache.lucene.search.TopDocs$ScoreMergeSortQueue: org.apache.lucene.search.ScoreDoc[][] shardHits>;

        $i0 = r1.<org.apache.lucene.search.TopDocs$ShardRef: int shardIndex>;

        $r3 = $r2[$i0];

        $i1 = r1.<org.apache.lucene.search.TopDocs$ShardRef: int hitIndex>;

        $r4 = $r3[$i1];

        $f0 = $r4.<org.apache.lucene.search.ScoreDoc: float score>;

        $r6 = r0.<org.apache.lucene.search.TopDocs$ScoreMergeSortQueue: org.apache.lucene.search.ScoreDoc[][] shardHits>;

        $i2 = r5.<org.apache.lucene.search.TopDocs$ShardRef: int shardIndex>;

        $r7 = $r6[$i2];

        $i3 = r5.<org.apache.lucene.search.TopDocs$ShardRef: int hitIndex>;

        $r8 = $r7[$i3];

        $f1 = $r8.<org.apache.lucene.search.ScoreDoc: float score>;

        $b4 = $f0 cmpg $f1;

        $i14 = (int) $b4;

        if $i14 >= 0 goto label2;

        return 0;

     label2:
        $b5 = $f0 cmpl $f1;

        $i15 = (int) $b5;

        if $i15 <= 0 goto label3;

        return 1;

     label3:
        $i7 = r1.<org.apache.lucene.search.TopDocs$ShardRef: int shardIndex>;

        $i6 = r5.<org.apache.lucene.search.TopDocs$ShardRef: int shardIndex>;

        if $i7 >= $i6 goto label4;

        return 1;

     label4:
        $i9 = r1.<org.apache.lucene.search.TopDocs$ShardRef: int shardIndex>;

        $i8 = r5.<org.apache.lucene.search.TopDocs$ShardRef: int shardIndex>;

        if $i9 <= $i8 goto label5;

        return 0;

     label5:
        $z1 = <org.apache.lucene.search.TopDocs$ScoreMergeSortQueue: boolean $assertionsDisabled>;

        if $z1 != 0 goto label6;

        $i13 = r1.<org.apache.lucene.search.TopDocs$ShardRef: int hitIndex>;

        $i12 = r5.<org.apache.lucene.search.TopDocs$ShardRef: int hitIndex>;

        if $i13 != $i12 goto label6;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label6:
        $i11 = r1.<org.apache.lucene.search.TopDocs$ShardRef: int hitIndex>;

        $i10 = r5.<org.apache.lucene.search.TopDocs$ShardRef: int hitIndex>;

        if $i11 >= $i10 goto label7;

        $z2 = 1;

        goto label8;

     label7:
        $z2 = 0;

     label8:
        return $z2;
    }

    public volatile boolean lessThan(java.lang.Object, java.lang.Object)
    {
        org.apache.lucene.search.TopDocs$ScoreMergeSortQueue r0;
        org.apache.lucene.search.TopDocs$ShardRef $r3, $r4;
        java.lang.Object r1, r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.search.TopDocs$ScoreMergeSortQueue;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (org.apache.lucene.search.TopDocs$ShardRef) r1;

        $r3 = (org.apache.lucene.search.TopDocs$ShardRef) r2;

        $z0 = virtualinvoke r0.<org.apache.lucene.search.TopDocs$ScoreMergeSortQueue: boolean lessThan(org.apache.lucene.search.TopDocs$ShardRef,org.apache.lucene.search.TopDocs$ShardRef)>($r4, $r3);

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/TopDocs;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.TopDocs$ScoreMergeSortQueue: boolean $assertionsDisabled> = $z1;

        return;
    }
}
