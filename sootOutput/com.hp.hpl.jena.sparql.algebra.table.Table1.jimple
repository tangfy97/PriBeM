public class com.hp.hpl.jena.sparql.algebra.table.Table1 extends com.hp.hpl.jena.sparql.algebra.table.TableBase
{
    private com.hp.hpl.jena.sparql.core.Var var;
    private com.hp.hpl.jena.graph.Node value;

    public void <init>(com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.algebra.table.Table1 r0;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.core.Var r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.Table1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.Var;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.table.TableBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.sparql.core.Var var> = r1;

        r0.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.graph.Node value> = r2;

        return;
    }

    public java.util.Iterator rows()
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r3;
        com.hp.hpl.jena.sparql.algebra.table.Table1 r0;
        java.util.Iterator $r4;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.core.Var $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.Table1;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.sparql.core.Var var>;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.graph.Node value>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.Binding binding(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r2, $r1);

        $r4 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator singleton(java.lang.Object)>($r3);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterSingleton $r7;
        com.hp.hpl.jena.graph.Node $r1, $r5;
        com.hp.hpl.jena.sparql.core.Var $r2, $r6;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r3;
        com.hp.hpl.jena.sparql.algebra.table.Table1 r0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.Table1;

        r4 := @parameter0: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.sparql.core.Var var>;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.graph.Node value>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.Binding binding(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r2, $r1);

        $r6 = r0.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.sparql.core.Var var>;

        $r5 = r0.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.graph.Node value>;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterSingleton: com.hp.hpl.jena.sparql.engine.iterator.QueryIterSingleton create(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r3, $r6, $r5, r4);

        return $r7;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator matchRightLeft(com.hp.hpl.jena.sparql.engine.binding.Binding, boolean, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterSingleton $r7, $r12;
        com.hp.hpl.jena.graph.Node $r3, $r4, $r9;
        com.hp.hpl.jena.sparql.algebra.table.Table1 r1;
        com.hp.hpl.jena.sparql.expr.ExprList r5;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r6;
        boolean $z0, z1, z2;
        com.hp.hpl.jena.sparql.core.Var $r2, $r10;
        com.hp.hpl.jena.sparql.engine.binding.Binding r0, $r11;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r8;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.table.Table1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        z1 := @parameter1: boolean;

        r5 := @parameter2: com.hp.hpl.jena.sparql.expr.ExprList;

        r6 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        z2 = 1;

        $r2 = r1.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.sparql.core.Var var>;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>($r2);

        if $r3 != null goto label1;

        $r10 = r1.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.sparql.core.Var var>;

        $r9 = r1.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.graph.Node value>;

        $r11 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.Binding binding(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r0, $r10, $r9);

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterSingleton: com.hp.hpl.jena.sparql.engine.iterator.QueryIterSingleton create(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r11, r6);

        return $r12;

     label1:
        $r4 = r1.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.graph.Node value>;

        $z0 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        z2 = 0;

        goto label3;

     label2:
        if r5 == null goto label3;

        z2 = virtualinvoke r5.<com.hp.hpl.jena.sparql.expr.ExprList: boolean isSatisfied(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0, r6);

     label3:
        if z2 != 0 goto label4;

        if z1 != 0 goto label4;

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterNullIterator: com.hp.hpl.jena.sparql.engine.QueryIterator create(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r6);

        return $r8;

     label4:
        $r7 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterSingleton: com.hp.hpl.jena.sparql.engine.iterator.QueryIterSingleton create(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0, r6);

        return $r7;
    }

    public void closeTable()
    {
        com.hp.hpl.jena.sparql.algebra.table.Table1 r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.Table1;

        return;
    }

    public java.util.List getVars()
    {
        com.hp.hpl.jena.sparql.algebra.table.Table1 r1;
        com.hp.hpl.jena.sparql.core.Var $r2;
        java.util.ArrayList $r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.table.Table1;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.sparql.core.Var var>;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        return $r0;
    }

    public java.util.List getVarNames()
    {
        com.hp.hpl.jena.sparql.algebra.table.Table1 r1;
        java.lang.String $r3;
        com.hp.hpl.jena.sparql.core.Var $r2;
        java.util.ArrayList $r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.table.Table1;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.sparql.core.Var var>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getVarName()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        return $r0;
    }

    public int size()
    {
        com.hp.hpl.jena.sparql.algebra.table.Table1 r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.Table1;

        return 1;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.sparql.algebra.table.Table1 r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.table.Table1;

        return 0;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.graph.Node $r6;
        com.hp.hpl.jena.sparql.core.Var $r3;
        com.hp.hpl.jena.sparql.algebra.table.Table1 r2;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r8, $r9;
        java.lang.String $r7, $r10;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.table.Table1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Table1(");

        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.sparql.core.Var var>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        $r6 = r2.<com.hp.hpl.jena.sparql.algebra.table.Table1: com.hp.hpl.jena.graph.Node value>;

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }
}
