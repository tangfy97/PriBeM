public final class com.hp.hpl.jena.tdb.base.record.RecordFactory extends java.lang.Object
{
    private final int keyLength;
    private final int valueLength;
    private final int slotLen;
    private final boolean checking;

    public void <init>(int, int)
    {
        java.lang.IllegalArgumentException $r1, $r6;
        int i0, i1, $i2, $i3;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r7, $r8, $r9;
        java.lang.String $r5, $r10;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: boolean checking> = 0;

        r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: boolean checking> = 0;

        if i0 > 0 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad key length: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        if i1 >= 0 goto label2;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad value length: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label2:
        r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int keyLength> = i0;

        r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int valueLength> = i1;

        if i1 <= 0 goto label3;

        $i3 = i1;

        goto label4;

     label3:
        $i3 = 0;

     label4:
        $i2 = i0 + $i3;

        r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int slotLen> = $i2;

        return;
    }

    public com.hp.hpl.jena.tdb.base.record.RecordFactory keyFactory()
    {
        int $i0;
        com.hp.hpl.jena.tdb.base.record.RecordFactory $r0, r1;

        r1 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        $r0 = new com.hp.hpl.jena.tdb.base.record.RecordFactory;

        $i0 = r1.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int keyLength>;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: void <init>(int,int)>($i0, 0);

        return $r0;
    }

    public com.hp.hpl.jena.tdb.base.record.Record createKeyOnly()
    {
        byte[] $r1;
        com.hp.hpl.jena.tdb.base.record.Record $r2;
        int $i0;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int keyLength>;

        $r1 = newarray (byte)[$i0];

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: com.hp.hpl.jena.tdb.base.record.Record create(byte[],byte[])>($r1, null);

        return $r2;
    }

    public com.hp.hpl.jena.tdb.base.record.Record createKeyOnly(com.hp.hpl.jena.tdb.base.record.Record)
    {
        byte[] $r2, $r3, $r4;
        com.hp.hpl.jena.tdb.base.record.Record r1, $r5;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.record.Record: byte[] getKey()>();

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: void checkKey(byte[])>($r2);

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.record.Record: byte[] getValue()>();

        if $r3 != null goto label1;

        return r1;

     label1:
        $r4 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.record.Record: byte[] getKey()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: com.hp.hpl.jena.tdb.base.record.Record create(byte[],byte[])>($r4, null);

        return $r5;
    }

    public com.hp.hpl.jena.tdb.base.record.Record create(byte[])
    {
        byte[] r1, r3;
        com.hp.hpl.jena.tdb.base.record.Record $r2;
        int $i0, $i1;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        r1 := @parameter0: byte[];

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: void checkKey(byte[])>(r1);

        r3 = null;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int valueLength>;

        if $i0 <= 0 goto label1;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int valueLength>;

        r3 = newarray (byte)[$i1];

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: com.hp.hpl.jena.tdb.base.record.Record create(byte[],byte[])>(r1, r3);

        return $r2;
    }

    public com.hp.hpl.jena.tdb.base.record.Record create()
    {
        byte[] $r1, $r3;
        com.hp.hpl.jena.tdb.base.record.Record $r2;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int keyLength>;

        $r1 = newarray (byte)[$i0];

        $i1 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int valueLength>;

        if $i1 <= 0 goto label1;

        $i2 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int valueLength>;

        $r3 = newarray (byte)[$i2];

        goto label2;

     label1:
        $r3 = null;

     label2:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: com.hp.hpl.jena.tdb.base.record.Record create(byte[],byte[])>($r1, $r3);

        return $r2;
    }

    public com.hp.hpl.jena.tdb.base.record.Record create(byte[], byte[])
    {
        byte[] r1, r2;
        com.hp.hpl.jena.tdb.base.record.Record $r3;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: void check(byte[],byte[])>(r1, r2);

        $r3 = new com.hp.hpl.jena.tdb.base.record.Record;

        specialinvoke $r3.<com.hp.hpl.jena.tdb.base.record.Record: void <init>(byte[],byte[])>(r1, r2);

        return $r3;
    }

    public void insertInto(com.hp.hpl.jena.tdb.base.record.Record, java.nio.ByteBuffer, int)
    {
        byte[] $r3, $r4, $r5;
        java.nio.ByteBuffer r2;
        com.hp.hpl.jena.tdb.base.record.Record r1;
        int i0, $i1, $i2, $i3, $i4;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        r2 := @parameter1: java.nio.ByteBuffer;

        i0 := @parameter2: int;

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: void check(com.hp.hpl.jena.tdb.base.record.Record)>(r1);

        $i1 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int slotLen>;

        $i2 = i0 * $i1;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i2);

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.record.Record: byte[] getKey()>();

        $i3 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int keyLength>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r3, 0, $i3);

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: boolean hasValue()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.record.Record: byte[] getValue()>();

        if $r4 == null goto label1;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.record.Record: byte[] getValue()>();

        $i4 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int valueLength>;

        virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>($r5, 0, $i4);

     label1:
        return;
    }

    public com.hp.hpl.jena.tdb.base.record.Record buildFrom(java.nio.ByteBuffer, int)
    {
        java.lang.Throwable $r5;
        byte[] r1, r2, $r6;
        java.nio.ByteBuffer r3;
        com.hp.hpl.jena.tdb.base.record.Record $r4;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        r3 := @parameter0: java.nio.ByteBuffer;

        i1 := @parameter1: int;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int keyLength>;

        r1 = newarray (byte)[$i0];

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: boolean hasValue()>();

        if $z0 == 0 goto label1;

        $i6 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int valueLength>;

        $r6 = newarray (byte)[$i6];

        goto label2;

     label1:
        $r6 = null;

     label2:
        r2 = $r6;

        entermonitor r3;

     label3:
        $i2 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int slotLen>;

        $i3 = i1 * $i2;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i3);

        $i4 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int keyLength>;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, 0, $i4);

        if $r6 == null goto label4;

        $i5 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int valueLength>;

        virtualinvoke r3.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>($r6, 0, $i5);

     label4:
        exitmonitor r3;

     label5:
        goto label8;

     label6:
        $r5 := @caughtexception;

        exitmonitor r3;

     label7:
        throw $r5;

     label8:
        $r4 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: com.hp.hpl.jena.tdb.base.record.Record create(byte[],byte[])>(r1, r2);

        return $r4;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private final void copyInto(byte[], java.nio.ByteBuffer, int, int)
    {
        byte[] r0;
        java.nio.ByteBuffer r1;
        byte $b3;
        int i0, i1, $i2, i4;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r2;

        r2 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.nio.ByteBuffer;

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $i2 = i1 + i4;

        $b3 = virtualinvoke r1.<java.nio.ByteBuffer: byte get(int)>($i2);

        r0[i4] = $b3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean hasValue()
    {
        int $i0;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int valueLength>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int recordLength()
    {
        int $i0, $i1, $i2;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int keyLength>;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int valueLength>;

        $i2 = $i1 + $i0;

        return $i2;
    }

    public int keyLength()
    {
        int $i0;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int keyLength>;

        return $i0;
    }

    public int valueLength()
    {
        int $i0;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        $i0 = r0.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int valueLength>;

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r0;
        int $i0, $i1;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r1;
        java.lang.String $r4;
        java.lang.Integer $r2, $r3;

        r1 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        $r0 = newarray (java.lang.Object)[2];

        $i0 = r1.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int keyLength>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0[0] = $r2;

        $i1 = r1.<com.hp.hpl.jena.tdb.base.record.RecordFactory: int valueLength>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r0[1] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("<RecordFactory k=%d v=%d>", $r0);

        return $r4;
    }

    private final void check(com.hp.hpl.jena.tdb.base.record.Record)
    {
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;
        com.hp.hpl.jena.tdb.base.record.Record r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.record.Record;

        return;
    }

    private final void checkKey(byte[])
    {
        byte[] r1;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        r1 := @parameter0: byte[];

        return;
    }

    private final void check(byte[], byte[])
    {
        byte[] r1, r2;
        com.hp.hpl.jena.tdb.base.record.RecordFactory r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.record.RecordFactory;

        r1 := @parameter0: byte[];

        r2 := @parameter1: byte[];

        return;
    }
}
