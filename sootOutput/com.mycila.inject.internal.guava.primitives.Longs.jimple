public final class com.mycila.inject.internal.guava.primitives.Longs extends java.lang.Object
{
    public static final int BYTES;
    public static final long MAX_POWER_OF_TWO;

    private void <init>()
    {
        com.mycila.inject.internal.guava.primitives.Longs r0;

        r0 := @this: com.mycila.inject.internal.guava.primitives.Longs;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int hashCode(long)
    {
        int $i3;
        long l0, $l1, $l2;

        l0 := @parameter0: long;

        $l1 = l0 >>> 32;

        $l2 = l0 ^ $l1;

        $i3 = (int) $l2;

        return $i3;
    }

    public static int compare(long, long)
    {
        byte $b2, $b3, $b4;
        int $i5, $i6;
        long l0, l1;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $b2 = l0 cmp l1;

        $i5 = (int) $b2;

        if $i5 >= 0 goto label1;

        $b4 = -1;

        goto label3;

     label1:
        $b3 = l0 cmp l1;

        $i6 = (int) $b3;

        if $i6 <= 0 goto label2;

        $b4 = 1;

        goto label3;

     label2:
        $b4 = 0;

     label3:
        return $b4;
    }

    public static boolean contains(long[], long)
    {
        long[] r0;
        byte $b3;
        int i0, i4;
        long l1, l2;

        r0 := @parameter0: long[];

        l2 := @parameter1: long;

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label3;

        l1 = r0[i4];

        $b3 = l1 cmp l2;

        if $b3 != 0 goto label2;

        return 1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static int indexOf(long[], long)
    {
        long[] r0;
        int $i1, $i2;
        long l0;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        $i1 = lengthof r0;

        $i2 = staticinvoke <com.mycila.inject.internal.guava.primitives.Longs: int indexOf(long[],long,int,int)>(r0, l0, 0, $i1);

        return $i2;
    }

    private static int indexOf(long[], long, int, int)
    {
        long l2, $l3;
        long[] r0;
        byte $b4;
        int i0, i1, i5, $i7;

        r0 := @parameter0: long[];

        l2 := @parameter1: long;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i5 = i0;

     label1:
        if i5 >= i1 goto label3;

        $l3 = r0[i5];

        $b4 = $l3 cmp l2;

        if $b4 != 0 goto label2;

        return i5;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        $i7 = (int) -1;

        return $i7;
    }

    public static int indexOf(long[], long[])
    {
        long $l7, $l8;
        long[] r0, r1;
        byte $b9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i10, i11, $i13;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "array");

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "target");

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        return 0;

     label1:
        i10 = 0;

     label2:
        $i2 = lengthof r0;

        $i1 = lengthof r1;

        $i3 = $i2 - $i1;

        $i4 = $i3 + 1;

        if i10 >= $i4 goto label7;

        i11 = 0;

     label3:
        $i5 = lengthof r1;

        if i11 >= $i5 goto label5;

        $i6 = i10 + i11;

        $l8 = r0[$i6];

        $l7 = r1[i11];

        $b9 = $l8 cmp $l7;

        if $b9 == 0 goto label4;

        goto label6;

     label4:
        i11 = i11 + 1;

        goto label3;

     label5:
        return i10;

     label6:
        i10 = i10 + 1;

        goto label2;

     label7:
        $i13 = (int) -1;

        return $i13;
    }

    public static int lastIndexOf(long[], long)
    {
        long[] r0;
        int $i1, $i2;
        long l0;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        $i1 = lengthof r0;

        $i2 = staticinvoke <com.mycila.inject.internal.guava.primitives.Longs: int lastIndexOf(long[],long,int,int)>(r0, l0, 0, $i1);

        return $i2;
    }

    private static int lastIndexOf(long[], long, int, int)
    {
        long l2, $l3;
        long[] r0;
        byte $b4;
        int i0, i1, i5, $i7, $i9;

        r0 := @parameter0: long[];

        l2 := @parameter1: long;

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        i5 = i0 - 1;

     label1:
        if i5 < i1 goto label3;

        $l3 = r0[i5];

        $b4 = $l3 cmp l2;

        if $b4 != 0 goto label2;

        return i5;

     label2:
        $i7 = (int) -1;

        i5 = i5 + $i7;

        goto label1;

     label3:
        $i9 = (int) -1;

        return $i9;
    }

    public static transient long min(long[])
    {
        long $l1, l3;
        long[] r0;
        byte $b2;
        int $i0, i4, $i5, $i6;
        boolean $z0;

        r0 := @parameter0: long[];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        l3 = r0[0];

        i4 = 1;

     label3:
        $i5 = lengthof r0;

        if i4 >= $i5 goto label5;

        $l1 = r0[i4];

        $b2 = $l1 cmp l3;

        $i6 = (int) $b2;

        if $i6 >= 0 goto label4;

        l3 = r0[i4];

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        return l3;
    }

    public static transient long max(long[])
    {
        long $l1, l3;
        long[] r0;
        byte $b2;
        int $i0, i4, $i5, $i6;
        boolean $z0;

        r0 := @parameter0: long[];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean)>($z0);

        l3 = r0[0];

        i4 = 1;

     label3:
        $i5 = lengthof r0;

        if i4 >= $i5 goto label5;

        $l1 = r0[i4];

        $b2 = $l1 cmp l3;

        $i6 = (int) $b2;

        if $i6 <= 0 goto label4;

        l3 = r0[i4];

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        return l3;
    }

    public static transient long[] concat(long[][])
    {
        long[][] r0;
        long[] r1, r2, r3;
        int $i0, $i1, $i2, i3, i4, i5, i6, i7, i8;

        r0 := @parameter0: long[][];

        i3 = 0;

        i4 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i4 goto label2;

        r2 = r0[i5];

        $i2 = lengthof r2;

        i3 = i3 + $i2;

        i5 = i5 + 1;

        goto label1;

     label2:
        r3 = newarray (long)[i3];

        i6 = 0;

        i7 = lengthof r0;

        i8 = 0;

     label3:
        if i8 >= i7 goto label4;

        r1 = r0[i8];

        $i0 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, i6, $i0);

        $i1 = lengthof r1;

        i6 = i6 + $i1;

        i8 = i8 + 1;

        goto label3;

     label4:
        return r3;
    }

    public static byte[] toByteArray(long)
    {
        byte[] $r0;
        long l0, $l1, $l4, $l7, $l10, $l13, $l16, $l19;
        byte $b3, $b6, $b9, $b12, $b15, $b18, $b21, $b23;
        int $i2, $i5, $i8, $i11, $i14, $i17, $i20, $i22;

        l0 := @parameter0: long;

        $r0 = newarray (byte)[8];

        $l1 = l0 >> 56;

        $i2 = (int) $l1;

        $b3 = (byte) $i2;

        $r0[0] = $b3;

        $l4 = l0 >> 48;

        $i5 = (int) $l4;

        $b6 = (byte) $i5;

        $r0[1] = $b6;

        $l7 = l0 >> 40;

        $i8 = (int) $l7;

        $b9 = (byte) $i8;

        $r0[2] = $b9;

        $l10 = l0 >> 32;

        $i11 = (int) $l10;

        $b12 = (byte) $i11;

        $r0[3] = $b12;

        $l13 = l0 >> 24;

        $i14 = (int) $l13;

        $b15 = (byte) $i14;

        $r0[4] = $b15;

        $l16 = l0 >> 16;

        $i17 = (int) $l16;

        $b18 = (byte) $i17;

        $r0[5] = $b18;

        $l19 = l0 >> 8;

        $i20 = (int) $l19;

        $b21 = (byte) $i20;

        $r0[6] = $b21;

        $i22 = (int) l0;

        $b23 = (byte) $i22;

        $r0[7] = $b23;

        return $r0;
    }

    public static long fromByteArray(byte[])
    {
        byte[] r0;
        java.lang.Object[] $r1;
        long $l10;
        java.lang.Integer $r2, $r3;
        byte $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        if $i0 < 8 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[2];

        $i1 = lengthof r0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        $r1[1] = $r3;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "array too small: %s < %s", $r1);

        $b9 = r0[0];

        $b8 = r0[1];

        $b7 = r0[2];

        $b6 = r0[3];

        $b5 = r0[4];

        $b4 = r0[5];

        $b3 = r0[6];

        $b2 = r0[7];

        $l10 = staticinvoke <com.mycila.inject.internal.guava.primitives.Longs: long fromBytes(byte,byte,byte,byte,byte,byte,byte,byte)>($b9, $b8, $b7, $b6, $b5, $b4, $b3, $b2);

        return $l10;
    }

    public static long fromBytes(byte, byte, byte, byte, byte, byte, byte, byte)
    {
        byte b0, b3, b8, b13, b18, b23, b28, b33;
        long $l1, $l2, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12, $l14, $l15, $l16, $l17, $l19, $l20, $l21, $l22, $l24, $l25, $l26, $l27, $l29, $l30, $l31, $l32, $l34, $l35, $l36, $l37;

        b0 := @parameter0: byte;

        b3 := @parameter1: byte;

        b8 := @parameter2: byte;

        b13 := @parameter3: byte;

        b18 := @parameter4: byte;

        b23 := @parameter5: byte;

        b28 := @parameter6: byte;

        b33 := @parameter7: byte;

        $l1 = (long) b0;

        $l2 = $l1 & 255L;

        $l7 = $l2 << 56;

        $l4 = (long) b3;

        $l5 = $l4 & 255L;

        $l6 = $l5 << 48;

        $l12 = $l7 | $l6;

        $l9 = (long) b8;

        $l10 = $l9 & 255L;

        $l11 = $l10 << 40;

        $l17 = $l12 | $l11;

        $l14 = (long) b13;

        $l15 = $l14 & 255L;

        $l16 = $l15 << 32;

        $l22 = $l17 | $l16;

        $l19 = (long) b18;

        $l20 = $l19 & 255L;

        $l21 = $l20 << 24;

        $l27 = $l22 | $l21;

        $l24 = (long) b23;

        $l25 = $l24 & 255L;

        $l26 = $l25 << 16;

        $l32 = $l27 | $l26;

        $l29 = (long) b28;

        $l30 = $l29 & 255L;

        $l31 = $l30 << 8;

        $l36 = $l32 | $l31;

        $l34 = (long) b33;

        $l35 = $l34 & 255L;

        $l37 = $l36 | $l35;

        return $l37;
    }

    public static long[] ensureCapacity(long[], int, int)
    {
        java.lang.Object[] $r0, $r2;
        java.lang.Integer $r1, $r3;
        long[] r4, $r5;
        int i0, i1, $i2, $i3;
        boolean $z0, $z1;

        r4 := @parameter0: long[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Invalid minLength: %s", $r0);

        if i1 < 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[0] = $r3;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Invalid padding: %s", $r2);

        $i2 = lengthof r4;

        if $i2 >= i0 goto label5;

        $i3 = i0 + i1;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.primitives.Longs: long[] copyOf(long[],int)>(r4, $i3);

        goto label6;

     label5:
        $r5 = r4;

     label6:
        return $r5;
    }

    private static long[] copyOf(long[], int)
    {
        long[] r0, r1;
        int i0, $i1, $i2;

        r1 := @parameter0: long[];

        i0 := @parameter1: int;

        r0 = newarray (long)[i0];

        $i1 = lengthof r1;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, $i2);

        return r0;
    }

    public static transient java.lang.String join(java.lang.String, long[])
    {
        long $l3, $l5;
        long[] r1;
        int $i0, $i1, $i2, $i4, i6;
        java.lang.StringBuilder $r2, $r4;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: long[];

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        return "";

     label1:
        $r2 = new java.lang.StringBuilder;

        $i1 = lengthof r1;

        $i2 = $i1 * 10;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i2);

        $l3 = r1[0];

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        i6 = 1;

     label2:
        $i4 = lengthof r1;

        if i6 >= $i4 goto label3;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $l5 = r1[i6];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        i6 = i6 + 1;

        goto label2;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.util.Comparator lexicographicalComparator()
    {
        com.mycila.inject.internal.guava.primitives.Longs$LexicographicalComparator $r0;

        $r0 = <com.mycila.inject.internal.guava.primitives.Longs$LexicographicalComparator: com.mycila.inject.internal.guava.primitives.Longs$LexicographicalComparator INSTANCE>;

        return $r0;
    }

    public static long[] toArray(java.util.Collection)
    {
        com.mycila.inject.internal.guava.primitives.Longs$LongArrayAsList $r6;
        java.lang.Object[] $r1;
        java.util.Collection r0;
        long $l1;
        long[] r2, $r7;
        java.lang.Long $r5;
        int i0, i2;
        java.lang.Object $r3, $r4;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.primitives.Longs$LongArrayAsList;

        if $z0 == 0 goto label1;

        $r6 = (com.mycila.inject.internal.guava.primitives.Longs$LongArrayAsList) r0;

        $r7 = virtualinvoke $r6.<com.mycila.inject.internal.guava.primitives.Longs$LongArrayAsList: long[] toLongArray()>();

        return $r7;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray()>();

        i0 = lengthof $r1;

        r2 = newarray (long)[i0];

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r3 = $r1[i2];

        $r4 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r3);

        $r5 = (java.lang.Long) $r4;

        $l1 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        r2[i2] = $l1;

        i2 = i2 + 1;

        goto label2;

     label3:
        return r2;
    }

    public static transient java.util.List asList(long[])
    {
        com.mycila.inject.internal.guava.primitives.Longs$LongArrayAsList $r1;
        java.util.List $r2;
        long[] r0;
        int $i0;

        r0 := @parameter0: long[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label1:
        $r1 = new com.mycila.inject.internal.guava.primitives.Longs$LongArrayAsList;

        specialinvoke $r1.<com.mycila.inject.internal.guava.primitives.Longs$LongArrayAsList: void <init>(long[])>(r0);

        return $r1;
    }

    static int access$000(long[], long, int, int)
    {
        long[] r0;
        int i1, i2, $i3;
        long l0;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = staticinvoke <com.mycila.inject.internal.guava.primitives.Longs: int indexOf(long[],long,int,int)>(r0, l0, i1, i2);

        return $i3;
    }

    static int access$100(long[], long, int, int)
    {
        long[] r0;
        int i1, i2, $i3;
        long l0;

        r0 := @parameter0: long[];

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = staticinvoke <com.mycila.inject.internal.guava.primitives.Longs: int lastIndexOf(long[],long,int,int)>(r0, l0, i1, i2);

        return $i3;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.primitives.Longs: long MAX_POWER_OF_TWO> = 4611686018427387904L;

        <com.mycila.inject.internal.guava.primitives.Longs: int BYTES> = 8;

        return;
    }
}
