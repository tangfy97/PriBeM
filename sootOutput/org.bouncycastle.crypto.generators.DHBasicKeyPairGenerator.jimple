public class org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator extends java.lang.Object implements org.bouncycastle.crypto.AsymmetricCipherKeyPairGenerator
{
    private org.bouncycastle.crypto.params.DHKeyGenerationParameters param;

    public void <init>()
    {
        org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator r0;

        r0 := @this: org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init(org.bouncycastle.crypto.KeyGenerationParameters)
    {
        org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator r0;
        org.bouncycastle.crypto.KeyGenerationParameters r1;
        org.bouncycastle.crypto.params.DHKeyGenerationParameters $r2;

        r0 := @this: org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator;

        r1 := @parameter0: org.bouncycastle.crypto.KeyGenerationParameters;

        $r2 = (org.bouncycastle.crypto.params.DHKeyGenerationParameters) r1;

        r0.<org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator: org.bouncycastle.crypto.params.DHKeyGenerationParameters param> = $r2;

        return;
    }

    public org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()
    {
        org.bouncycastle.crypto.generators.DHKeyGeneratorHelper r0;
        org.bouncycastle.crypto.params.DHPrivateKeyParameters $r10;
        java.security.SecureRandom $r5;
        org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator r1;
        org.bouncycastle.crypto.AsymmetricCipherKeyPair $r8;
        org.bouncycastle.crypto.params.DHKeyGenerationParameters $r2, $r4;
        java.math.BigInteger $r6, $r7;
        org.bouncycastle.crypto.params.DHParameters $r3;
        org.bouncycastle.crypto.params.DHPublicKeyParameters $r9;

        r1 := @this: org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator;

        r0 = <org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: org.bouncycastle.crypto.generators.DHKeyGeneratorHelper INSTANCE>;

        $r2 = r1.<org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator: org.bouncycastle.crypto.params.DHKeyGenerationParameters param>;

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.params.DHKeyGenerationParameters: org.bouncycastle.crypto.params.DHParameters getParameters()>();

        $r4 = r1.<org.bouncycastle.crypto.generators.DHBasicKeyPairGenerator: org.bouncycastle.crypto.params.DHKeyGenerationParameters param>;

        $r5 = virtualinvoke $r4.<org.bouncycastle.crypto.params.DHKeyGenerationParameters: java.security.SecureRandom getRandom()>();

        $r6 = virtualinvoke r0.<org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger calculatePrivate(org.bouncycastle.crypto.params.DHParameters,java.security.SecureRandom)>($r3, $r5);

        $r7 = virtualinvoke r0.<org.bouncycastle.crypto.generators.DHKeyGeneratorHelper: java.math.BigInteger calculatePublic(org.bouncycastle.crypto.params.DHParameters,java.math.BigInteger)>($r3, $r6);

        $r8 = new org.bouncycastle.crypto.AsymmetricCipherKeyPair;

        $r9 = new org.bouncycastle.crypto.params.DHPublicKeyParameters;

        specialinvoke $r9.<org.bouncycastle.crypto.params.DHPublicKeyParameters: void <init>(java.math.BigInteger,org.bouncycastle.crypto.params.DHParameters)>($r7, $r3);

        $r10 = new org.bouncycastle.crypto.params.DHPrivateKeyParameters;

        specialinvoke $r10.<org.bouncycastle.crypto.params.DHPrivateKeyParameters: void <init>(java.math.BigInteger,org.bouncycastle.crypto.params.DHParameters)>($r6, $r3);

        specialinvoke $r8.<org.bouncycastle.crypto.AsymmetricCipherKeyPair: void <init>(org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters)>($r9, $r10);

        return $r8;
    }
}
