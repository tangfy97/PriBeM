public class org.apache.batik.bridge.SVGTextElementBridge extends org.apache.batik.bridge.AbstractGraphicsNodeBridge implements org.apache.batik.dom.svg.SVGTextContent
{
    protected static final java.lang.Integer ZERO;
    public static final java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_DELIMITER;
    public static final java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID;
    public static final java.text.AttributedCharacterIterator$Attribute PAINT_INFO;
    public static final java.text.AttributedCharacterIterator$Attribute ALT_GLYPH_HANDLER;
    public static final java.text.AttributedCharacterIterator$Attribute TEXTPATH;
    public static final java.text.AttributedCharacterIterator$Attribute ANCHOR_TYPE;
    public static final java.text.AttributedCharacterIterator$Attribute GVT_FONT_FAMILIES;
    public static final java.text.AttributedCharacterIterator$Attribute GVT_FONTS;
    public static final java.text.AttributedCharacterIterator$Attribute BASELINE_SHIFT;
    protected java.text.AttributedString laidoutText;
    protected java.util.WeakHashMap elemTPI;
    protected boolean usingComplexSVGFont;
    protected org.apache.batik.bridge.SVGTextElementBridge$DOMChildNodeRemovedEventListener childNodeRemovedEventListener;
    protected org.apache.batik.bridge.SVGTextElementBridge$DOMSubtreeModifiedEventListener subtreeModifiedEventListener;
    private boolean hasNewACI;
    private org.w3c.dom.Element cssProceedElement;
    protected int endLimit;

    public void <init>()
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        java.util.WeakHashMap $r1;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void <init>()>();

        $r1 = new java.util.WeakHashMap;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();

        r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI> = $r1;

        r0.<org.apache.batik.bridge.SVGTextElementBridge: boolean usingComplexSVGFont> = 0;

        return;
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        return "text";
    }

    public org.apache.batik.bridge.Bridge getInstance()
    {
        org.apache.batik.bridge.SVGTextElementBridge $r0, r1;

        r1 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        $r0 = new org.apache.batik.bridge.SVGTextElementBridge;

        specialinvoke $r0.<org.apache.batik.bridge.SVGTextElementBridge: void <init>()>();

        return $r0;
    }

    protected org.apache.batik.gvt.TextNode getTextNode()
    {
        org.apache.batik.gvt.TextNode $r2;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.apache.batik.gvt.GraphicsNode $r1;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        $r1 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r2 = (org.apache.batik.gvt.TextNode) $r1;

        return $r2;
    }

    public org.apache.batik.gvt.GraphicsNode createGraphicsNode(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.gvt.TextNode r4;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        java.awt.geom.Point2D $r9;
        org.apache.batik.gvt.GraphicsNode $r3;
        org.apache.batik.bridge.BridgeContext r1;
        java.awt.RenderingHints $r7, $r8;
        short $s0;
        org.w3c.dom.Element r2, $r5;
        org.w3c.dom.Node r11;
        org.apache.batik.gvt.TextPainter $r6, $r10;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter1: org.w3c.dom.Element;

        $r3 = specialinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode createGraphicsNode(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r1, r2);

        r4 = (org.apache.batik.gvt.TextNode) $r3;

        if r4 != null goto label1;

        return null;

     label1:
        virtualinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void associateSVGContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r1, r2, r4);

        r11 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r2);

        goto label4;

     label2:
        $s0 = interfaceinvoke r11.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label3;

        $r5 = (org.w3c.dom.Element) r11;

        virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: void addContextToChild(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r1, $r5);

     label3:
        r11 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r11);

     label4:
        if r11 != null goto label2;

        $r6 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.TextPainter getTextPainter()>();

        if $r6 == null goto label5;

        $r10 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.gvt.TextPainter getTextPainter()>();

        virtualinvoke r4.<org.apache.batik.gvt.TextNode: void setTextPainter(org.apache.batik.gvt.TextPainter)>($r10);

     label5:
        $r7 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.RenderingHints convertColorRendering(org.w3c.dom.Element,java.awt.RenderingHints)>(r2, null);

        $r8 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.RenderingHints convertTextRendering(org.w3c.dom.Element,java.awt.RenderingHints)>(r2, $r7);

        if $r8 == null goto label6;

        virtualinvoke r4.<org.apache.batik.gvt.AbstractGraphicsNode: void setRenderingHints(java.awt.RenderingHints)>($r8);

     label6:
        $r9 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.awt.geom.Point2D getLocation(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r1, r2);

        virtualinvoke r4.<org.apache.batik.gvt.TextNode: void setLocation(java.awt.geom.Point2D)>($r9);

        return r4;
    }

    protected org.apache.batik.gvt.GraphicsNode instantiateGraphicsNode()
    {
        org.apache.batik.gvt.TextNode $r0;
        org.apache.batik.bridge.SVGTextElementBridge r1;

        r1 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        $r0 = new org.apache.batik.gvt.TextNode;

        specialinvoke $r0.<org.apache.batik.gvt.TextNode: void <init>()>();

        return $r0;
    }

    protected java.awt.geom.Point2D getLocation(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.SVGTextElementBridge r13;
        org.apache.batik.dom.svg.LiveAttributeException $r10;
        org.w3c.dom.svg.SVGAnimatedLengthList $r1, $r4;
        int $i0, $i1;
        org.apache.batik.dom.svg.SVGOMTextPositioningElement r14;
        org.apache.batik.bridge.BridgeException $r11;
        org.apache.batik.bridge.BridgeContext r12;
        org.w3c.dom.svg.SVGLength $r7, $r8;
        org.w3c.dom.svg.SVGLengthList $r3, $r5;
        org.w3c.dom.Element r0;
        java.awt.geom.Point2D$Float $r6;
        org.apache.batik.dom.svg.SVGOMAnimatedLengthList r2, $r9;
        float f0, f1;

        r13 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r12 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

     label1:
        r14 = (org.apache.batik.dom.svg.SVGOMTextPositioningElement) r0;

        $r1 = virtualinvoke r14.<org.apache.batik.dom.svg.SVGOMTextPositioningElement: org.w3c.dom.svg.SVGAnimatedLengthList getX()>();

        r2 = (org.apache.batik.dom.svg.SVGOMAnimatedLengthList) $r1;

        virtualinvoke r2.<org.apache.batik.dom.svg.SVGOMAnimatedLengthList: void check()>();

        $r3 = virtualinvoke r2.<org.apache.batik.dom.svg.SVGOMAnimatedLengthList: org.w3c.dom.svg.SVGLengthList getAnimVal()>();

        f0 = 0.0F;

        $i0 = interfaceinvoke $r3.<org.w3c.dom.svg.SVGLengthList: int getNumberOfItems()>();

        if $i0 <= 0 goto label2;

        $r8 = interfaceinvoke $r3.<org.w3c.dom.svg.SVGLengthList: org.w3c.dom.svg.SVGLength getItem(int)>(0);

        f0 = interfaceinvoke $r8.<org.w3c.dom.svg.SVGLength: float getValue()>();

     label2:
        $r4 = virtualinvoke r14.<org.apache.batik.dom.svg.SVGOMTextPositioningElement: org.w3c.dom.svg.SVGAnimatedLengthList getY()>();

        $r9 = (org.apache.batik.dom.svg.SVGOMAnimatedLengthList) $r4;

        virtualinvoke $r9.<org.apache.batik.dom.svg.SVGOMAnimatedLengthList: void check()>();

        $r5 = virtualinvoke $r9.<org.apache.batik.dom.svg.SVGOMAnimatedLengthList: org.w3c.dom.svg.SVGLengthList getAnimVal()>();

        f1 = 0.0F;

        $i1 = interfaceinvoke $r5.<org.w3c.dom.svg.SVGLengthList: int getNumberOfItems()>();

        if $i1 <= 0 goto label3;

        $r7 = interfaceinvoke $r5.<org.w3c.dom.svg.SVGLengthList: org.w3c.dom.svg.SVGLength getItem(int)>(0);

        f1 = interfaceinvoke $r7.<org.w3c.dom.svg.SVGLength: float getValue()>();

     label3:
        $r6 = new java.awt.geom.Point2D$Float;

        specialinvoke $r6.<java.awt.geom.Point2D$Float: void <init>(float,float)>(f0, f1);

        return $r6;

     label4:
        $r10 := @caughtexception;

        $r11 = new org.apache.batik.bridge.BridgeException;

        specialinvoke $r11.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.apache.batik.dom.svg.LiveAttributeException)>(r12, $r10);

        throw $r11;

        catch org.apache.batik.dom.svg.LiveAttributeException from label1 to label4 with label4;
    }

    protected boolean isTextElement(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.SVGTextElementBridge r4;
        org.w3c.dom.Element r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;

        r4 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = "http://www.w3.org/2000/svg";

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("text");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("tspan");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("altGlyph");

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("a");

        if $z4 != 0 goto label2;

        $z5 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("textPath");

        if $z5 != 0 goto label2;

        $z6 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("tref");

        if $z6 == 0 goto label3;

     label2:
        $z7 = 1;

        goto label4;

     label3:
        $z7 = 0;

     label4:
        return $z7;
    }

    protected boolean isTextChild(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.SVGTextElementBridge r4;
        org.w3c.dom.Element r0;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r4 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = "http://www.w3.org/2000/svg";

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("tspan");

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("altGlyph");

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("a");

        if $z3 != 0 goto label2;

        $z4 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("textPath");

        if $z4 != 0 goto label2;

        $z5 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("tref");

        if $z5 == 0 goto label3;

     label2:
        $z6 = 1;

        goto label4;

     label3:
        $z6 = 0;

     label4:
        return $z6;
    }

    public void buildGraphicsNode(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.bridge.SVGTextElementBridge r1;
        java.awt.Composite $r4;
        org.apache.batik.gvt.GraphicsNode r3;
        org.apache.batik.bridge.BridgeContext r2;
        org.apache.batik.ext.awt.image.renderable.ClipRable $r7;
        org.apache.batik.ext.awt.image.renderable.Filter $r5;
        org.w3c.dom.Element r0;
        int $i0;
        org.apache.batik.gvt.filter.Mask $r6;
        java.util.WeakHashMap $r8;
        boolean $z0;

        r1 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r2 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        r3 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        interfaceinvoke r0.<org.w3c.dom.Node: void normalize()>();

        virtualinvoke r1.<org.apache.batik.bridge.SVGTextElementBridge: void computeLaidoutText(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r2, r0, r3);

        $r4 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.Composite convertOpacity(org.w3c.dom.Element)>(r0);

        interfaceinvoke r3.<org.apache.batik.gvt.GraphicsNode: void setComposite(java.awt.Composite)>($r4);

        $r5 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.ext.awt.image.renderable.Filter convertFilter(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r0, r3, r2);

        interfaceinvoke r3.<org.apache.batik.gvt.GraphicsNode: void setFilter(org.apache.batik.ext.awt.image.renderable.Filter)>($r5);

        $r6 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.gvt.filter.Mask convertMask(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r0, r3, r2);

        interfaceinvoke r3.<org.apache.batik.gvt.GraphicsNode: void setMask(org.apache.batik.gvt.filter.Mask)>($r6);

        $r7 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.ext.awt.image.renderable.ClipRable convertClipPath(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r0, r3, r2);

        interfaceinvoke r3.<org.apache.batik.gvt.GraphicsNode: void setClip(org.apache.batik.ext.awt.image.renderable.ClipRable)>($r7);

        $i0 = staticinvoke <org.apache.batik.bridge.CSSUtilities: int convertPointerEvents(org.w3c.dom.Element)>(r0);

        interfaceinvoke r3.<org.apache.batik.gvt.GraphicsNode: void setPointerEventType(int)>($i0);

        virtualinvoke r1.<org.apache.batik.bridge.SVGTextElementBridge: void initializeDynamicSupport(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r2, r0, r3);

        $z0 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: boolean isDynamic()>();

        if $z0 != 0 goto label1;

        $r8 = r1.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        virtualinvoke $r8.<java.util.WeakHashMap: void clear()>();

     label1:
        return;
    }

    public boolean isComposite()
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        return 0;
    }

    protected org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.SVGTextElementBridge r2;
        org.w3c.dom.Node r0, $r1;

        r2 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r0 := @parameter0: org.w3c.dom.Node;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        return $r1;
    }

    protected org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.SVGTextElementBridge r2;
        org.w3c.dom.Node r0, $r1;

        r2 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r0 := @parameter0: org.w3c.dom.Node;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        return $r1;
    }

    protected org.w3c.dom.Node getParentNode(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.SVGTextElementBridge r2;
        org.w3c.dom.Node r0, $r1;

        r2 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r0 := @parameter0: org.w3c.dom.Node;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        return $r1;
    }

    protected void initializeDynamicSupport(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element r2;
        org.apache.batik.gvt.GraphicsNode r3;
        org.apache.batik.bridge.BridgeContext r1;
        boolean $z0;
        org.apache.batik.dom.events.NodeEventTarget $r4;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter1: org.w3c.dom.Element;

        r3 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        specialinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void initializeDynamicSupport(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r1, r2, r3);

        $z0 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: boolean isDynamic()>();

        if $z0 == 0 goto label1;

        $r4 = (org.apache.batik.dom.events.NodeEventTarget) r2;

        virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: void addTextEventListeners(org.apache.batik.bridge.BridgeContext,org.apache.batik.dom.events.NodeEventTarget)>(r1, $r4);

     label1:
        return;
    }

    protected void addTextEventListeners(org.apache.batik.bridge.BridgeContext, org.apache.batik.dom.events.NodeEventTarget)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.apache.batik.bridge.SVGTextElementBridge$DOMSubtreeModifiedEventListener $r2, $r7, $r8, $r9;
        org.apache.batik.bridge.BridgeContext r5;
        org.apache.batik.dom.events.NodeEventTarget r3;
        org.apache.batik.bridge.SVGTextElementBridge$DOMChildNodeRemovedEventListener $r1, $r4, $r6, $r10;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r5 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r3 := @parameter1: org.apache.batik.dom.events.NodeEventTarget;

        $r1 = r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$DOMChildNodeRemovedEventListener childNodeRemovedEventListener>;

        if $r1 != null goto label1;

        $r10 = new org.apache.batik.bridge.SVGTextElementBridge$DOMChildNodeRemovedEventListener;

        specialinvoke $r10.<org.apache.batik.bridge.SVGTextElementBridge$DOMChildNodeRemovedEventListener: void <init>(org.apache.batik.bridge.SVGTextElementBridge)>(r0);

        r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$DOMChildNodeRemovedEventListener childNodeRemovedEventListener> = $r10;

     label1:
        $r2 = r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$DOMSubtreeModifiedEventListener subtreeModifiedEventListener>;

        if $r2 != null goto label2;

        $r9 = new org.apache.batik.bridge.SVGTextElementBridge$DOMSubtreeModifiedEventListener;

        specialinvoke $r9.<org.apache.batik.bridge.SVGTextElementBridge$DOMSubtreeModifiedEventListener: void <init>(org.apache.batik.bridge.SVGTextElementBridge)>(r0);

        r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$DOMSubtreeModifiedEventListener subtreeModifiedEventListener> = $r9;

     label2:
        $r4 = r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$DOMChildNodeRemovedEventListener childNodeRemovedEventListener>;

        interfaceinvoke r3.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "DOMNodeRemoved", $r4, 1, null);

        $r6 = r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$DOMChildNodeRemovedEventListener childNodeRemovedEventListener>;

        virtualinvoke r5.<org.apache.batik.bridge.BridgeContext: void storeEventListenerNS(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r3, "http://www.w3.org/2001/xml-events", "DOMNodeRemoved", $r6, 1);

        $r7 = r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$DOMSubtreeModifiedEventListener subtreeModifiedEventListener>;

        interfaceinvoke r3.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "DOMSubtreeModified", $r7, 0, null);

        $r8 = r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$DOMSubtreeModifiedEventListener subtreeModifiedEventListener>;

        virtualinvoke r5.<org.apache.batik.bridge.BridgeContext: void storeEventListenerNS(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r3, "http://www.w3.org/2001/xml-events", "DOMSubtreeModified", $r8, 0);

        return;
    }

    protected void removeTextEventListeners(org.apache.batik.bridge.BridgeContext, org.apache.batik.dom.events.NodeEventTarget)
    {
        org.apache.batik.bridge.SVGTextElementBridge r1;
        org.apache.batik.bridge.SVGTextElementBridge$DOMChildNodeRemovedEventListener $r2;
        org.apache.batik.bridge.SVGTextElementBridge$DOMSubtreeModifiedEventListener $r3;
        org.apache.batik.bridge.BridgeContext r4;
        org.apache.batik.dom.events.NodeEventTarget r0;

        r1 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r4 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.apache.batik.dom.events.NodeEventTarget;

        $r2 = r1.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$DOMChildNodeRemovedEventListener childNodeRemovedEventListener>;

        interfaceinvoke r0.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMNodeRemoved", $r2, 1);

        $r3 = r1.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$DOMSubtreeModifiedEventListener subtreeModifiedEventListener>;

        interfaceinvoke r0.<org.apache.batik.dom.events.NodeEventTarget: void removeEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>("http://www.w3.org/2001/xml-events", "DOMSubtreeModified", $r3, 0);

        return;
    }

    public void dispose()
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element $r1;
        org.apache.batik.bridge.BridgeContext $r3;
        org.apache.batik.dom.events.NodeEventTarget $r2;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        $r3 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r2 = (org.apache.batik.dom.events.NodeEventTarget) $r1;

        virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: void removeTextEventListeners(org.apache.batik.bridge.BridgeContext,org.apache.batik.dom.events.NodeEventTarget)>($r3, $r2);

        specialinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void dispose()>();

        return;
    }

    protected void addContextToChild(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.SVGTextElementBridge r3;
        org.apache.batik.bridge.SVGTextElementBridge$TRefBridge $r9;
        short $s0;
        org.w3c.dom.Node r15;
        java.lang.String $r1, $r2, $r6, $r7, $r8;
        org.apache.batik.dom.svg.SVGOMElement $r10, $r12, $r14;
        boolean $z0, $z1, $z2, $z3;
        org.apache.batik.bridge.SVGTextElementBridge$TextPathBridge $r11;
        org.apache.batik.bridge.BridgeContext r4;
        org.apache.batik.bridge.SVGTextElementBridge$TspanBridge $r13;
        org.w3c.dom.Element r0, $r5;

        r3 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r4 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        $r1 = "http://www.w3.org/2000/svg";

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("tspan");

        if $z1 == 0 goto label1;

        $r14 = (org.apache.batik.dom.svg.SVGOMElement) r0;

        $r13 = new org.apache.batik.bridge.SVGTextElementBridge$TspanBridge;

        specialinvoke $r13.<org.apache.batik.bridge.SVGTextElementBridge$TspanBridge: void <init>(org.apache.batik.bridge.SVGTextElementBridge,org.apache.batik.bridge.BridgeContext,org.apache.batik.bridge.SVGTextElementBridge,org.w3c.dom.Element)>(r3, r4, r3, r0);

        virtualinvoke $r14.<org.apache.batik.dom.svg.SVGOMElement: void setSVGContext(org.apache.batik.dom.svg.SVGContext)>($r13);

        goto label3;

     label1:
        $r7 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("textPath");

        if $z2 == 0 goto label2;

        $r12 = (org.apache.batik.dom.svg.SVGOMElement) r0;

        $r11 = new org.apache.batik.bridge.SVGTextElementBridge$TextPathBridge;

        specialinvoke $r11.<org.apache.batik.bridge.SVGTextElementBridge$TextPathBridge: void <init>(org.apache.batik.bridge.SVGTextElementBridge,org.apache.batik.bridge.BridgeContext,org.apache.batik.bridge.SVGTextElementBridge,org.w3c.dom.Element)>(r3, r4, r3, r0);

        virtualinvoke $r12.<org.apache.batik.dom.svg.SVGOMElement: void setSVGContext(org.apache.batik.dom.svg.SVGContext)>($r11);

        goto label3;

     label2:
        $r8 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("tref");

        if $z3 == 0 goto label3;

        $r10 = (org.apache.batik.dom.svg.SVGOMElement) r0;

        $r9 = new org.apache.batik.bridge.SVGTextElementBridge$TRefBridge;

        specialinvoke $r9.<org.apache.batik.bridge.SVGTextElementBridge$TRefBridge: void <init>(org.apache.batik.bridge.SVGTextElementBridge,org.apache.batik.bridge.BridgeContext,org.apache.batik.bridge.SVGTextElementBridge,org.w3c.dom.Element)>(r3, r4, r3, r0);

        virtualinvoke $r10.<org.apache.batik.dom.svg.SVGOMElement: void setSVGContext(org.apache.batik.dom.svg.SVGContext)>($r9);

     label3:
        r15 = virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r0);

        goto label6;

     label4:
        $s0 = interfaceinvoke r15.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label5;

        $r5 = (org.w3c.dom.Element) r15;

        virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: void addContextToChild(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r4, $r5);

     label5:
        r15 = virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r15);

     label6:
        if r15 != null goto label4;

        return;
    }

    protected void removeContextFromChild(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.SVGTextElementBridge r3;
        org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildBridgeUpdateHandler $r11, $r14, $r17;
        short $s0;
        org.apache.batik.dom.svg.SVGContext $r10, $r13, $r16;
        org.w3c.dom.Node r18;
        java.lang.String $r1, $r2, $r6, $r7, $r8;
        org.apache.batik.dom.svg.SVGOMElement $r9, $r12, $r15;
        boolean $z0, $z1, $z2, $z3;
        org.apache.batik.bridge.BridgeContext r4;
        org.w3c.dom.Element r0, $r5;

        r3 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r4 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        $r1 = "http://www.w3.org/2000/svg";

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("tspan");

        if $z1 == 0 goto label1;

        $r15 = (org.apache.batik.dom.svg.SVGOMElement) r0;

        $r16 = virtualinvoke $r15.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $r17 = (org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildBridgeUpdateHandler) $r16;

        virtualinvoke $r17.<org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildBridgeUpdateHandler: void dispose()>();

        goto label3;

     label1:
        $r7 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("textPath");

        if $z2 == 0 goto label2;

        $r12 = (org.apache.batik.dom.svg.SVGOMElement) r0;

        $r13 = virtualinvoke $r12.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $r14 = (org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildBridgeUpdateHandler) $r13;

        virtualinvoke $r14.<org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildBridgeUpdateHandler: void dispose()>();

        goto label3;

     label2:
        $r8 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("tref");

        if $z3 == 0 goto label3;

        $r9 = (org.apache.batik.dom.svg.SVGOMElement) r0;

        $r10 = virtualinvoke $r9.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $r11 = (org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildBridgeUpdateHandler) $r10;

        virtualinvoke $r11.<org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildBridgeUpdateHandler: void dispose()>();

     label3:
        r18 = virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r0);

        goto label6;

     label4:
        $s0 = interfaceinvoke r18.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label5;

        $r5 = (org.w3c.dom.Element) r18;

        virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: void removeContextFromChild(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r4, $r5);

     label5:
        r18 = virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r18);

     label6:
        if r18 != null goto label4;

        return;
    }

    public void handleDOMNodeInsertedEvent(org.w3c.dom.events.MutationEvent)
    {
        org.apache.batik.gvt.TextNode $r6;
        org.apache.batik.bridge.SVGTextElementBridge r3;
        org.apache.batik.bridge.BridgeContext $r4, $r8;
        java.text.AttributedString $r9;
        short $s0;
        org.w3c.dom.Element $r5, r7;
        org.w3c.dom.events.EventTarget $r1;
        org.w3c.dom.Node r2;
        int $i1;
        org.w3c.dom.events.MutationEvent r0;
        boolean $z0;

        r3 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r0 := @parameter0: org.w3c.dom.events.MutationEvent;

        $r1 = interfaceinvoke r0.<org.w3c.dom.events.Event: org.w3c.dom.events.EventTarget getTarget()>();

        r2 = (org.w3c.dom.Node) $r1;

        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label1;
            case 4: goto label1;
            default: goto label3;
        };

     label1:
        r3.<org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedString laidoutText> = null;

        goto label3;

     label2:
        r7 = (org.w3c.dom.Element) r2;

        $z0 = virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: boolean isTextChild(org.w3c.dom.Element)>(r7);

        if $z0 == 0 goto label3;

        $r8 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: void addContextToChild(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>($r8, r7);

        r3.<org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedString laidoutText> = null;

        goto label3;

     label3:
        $r9 = r3.<org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedString laidoutText>;

        if $r9 != null goto label4;

        $r4 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r5 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r6 = virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: void computeLaidoutText(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>($r4, $r5, $r6);

     label4:
        return;
    }

    public void handleDOMChildNodeRemovedEvent(org.w3c.dom.events.MutationEvent)
    {
        org.apache.batik.bridge.SVGTextElementBridge r3;
        org.apache.batik.bridge.BridgeContext $r5;
        short $s0;
        org.w3c.dom.Element r4;
        org.w3c.dom.events.EventTarget $r1;
        org.w3c.dom.Node r2;
        int $i1;
        org.w3c.dom.events.MutationEvent r0;
        boolean $z0, $z1;

        r3 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r0 := @parameter0: org.w3c.dom.events.MutationEvent;

        $r1 = interfaceinvoke r0.<org.w3c.dom.events.Event: org.w3c.dom.events.EventTarget getTarget()>();

        r2 = (org.w3c.dom.Node) $r1;

        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label1;
            case 4: goto label1;
            default: goto label3;
        };

     label1:
        $z0 = virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: boolean isParentDisplayed(org.w3c.dom.Node)>(r2);

        if $z0 == 0 goto label3;

        r3.<org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedString laidoutText> = null;

        goto label3;

     label2:
        r4 = (org.w3c.dom.Element) r2;

        $z1 = virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: boolean isTextChild(org.w3c.dom.Element)>(r4);

        if $z1 == 0 goto label3;

        r3.<org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedString laidoutText> = null;

        $r5 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: void removeContextFromChild(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>($r5, r4);

        goto label3;

     label3:
        return;
    }

    public void handleDOMSubtreeModifiedEvent(org.w3c.dom.events.MutationEvent)
    {
        org.apache.batik.gvt.TextNode $r4;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element $r3;
        org.apache.batik.bridge.BridgeContext $r2;
        java.text.AttributedString $r1;
        org.w3c.dom.events.MutationEvent r5;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r5 := @parameter0: org.w3c.dom.events.MutationEvent;

        $r1 = r0.<org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedString laidoutText>;

        if $r1 != null goto label1;

        $r2 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r3 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r4 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: void computeLaidoutText(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>($r2, $r3, $r4);

     label1:
        return;
    }

    public void handleDOMCharacterDataModified(org.w3c.dom.events.MutationEvent)
    {
        org.apache.batik.bridge.SVGTextElementBridge r3;
        org.w3c.dom.events.EventTarget $r1;
        org.w3c.dom.Node r2;
        org.w3c.dom.events.MutationEvent r0;
        boolean $z0;

        r3 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r0 := @parameter0: org.w3c.dom.events.MutationEvent;

        $r1 = interfaceinvoke r0.<org.w3c.dom.events.Event: org.w3c.dom.events.EventTarget getTarget()>();

        r2 = (org.w3c.dom.Node) $r1;

        $z0 = virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: boolean isParentDisplayed(org.w3c.dom.Node)>(r2);

        if $z0 == 0 goto label1;

        r3.<org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedString laidoutText> = null;

     label1:
        return;
    }

    protected boolean isParentDisplayed(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element $r3;
        org.w3c.dom.Node r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r1 := @parameter0: org.w3c.dom.Node;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getParentNode(org.w3c.dom.Node)>(r1);

        $r3 = (org.w3c.dom.Element) $r2;

        $z0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: boolean isTextElement(org.w3c.dom.Element)>($r3);

        return $z0;
    }

    protected void computeLaidoutText(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.gvt.TextNode r1;
        org.apache.batik.bridge.SVGTextElementBridge r2;
        org.apache.batik.gvt.GraphicsNode r0;
        org.apache.batik.bridge.BridgeContext r4;
        java.text.AttributedString $r6, $r10;
        org.apache.batik.gvt.text.TextPaintInfo $r8;
        org.w3c.dom.Element r5;
        java.text.AttributedCharacterIterator $r7, $r9, $r11;
        java.util.WeakHashMap $r3;
        boolean $z0, $z1, $z2;

        r2 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r4 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r5 := @parameter1: org.w3c.dom.Element;

        r0 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        r1 = (org.apache.batik.gvt.TextNode) r0;

        $r3 = r2.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        virtualinvoke $r3.<java.util.WeakHashMap: void clear()>();

        $r6 = virtualinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedString buildAttributedString(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r4, r5);

        if $r6 != null goto label1;

        virtualinvoke r1.<org.apache.batik.gvt.TextNode: void setAttributedCharacterIterator(java.text.AttributedCharacterIterator)>(null);

        return;

     label1:
        virtualinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: void addGlyphPositionAttributes(java.text.AttributedString,org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>($r6, r5, r4);

        $z0 = virtualinvoke r4.<org.apache.batik.bridge.BridgeContext: boolean isDynamic()>();

        if $z0 == 0 goto label2;

        $r10 = new java.text.AttributedString;

        $r11 = virtualinvoke $r6.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        specialinvoke $r10.<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator)>($r11);

        r2.<org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedString laidoutText> = $r10;

     label2:
        $r7 = virtualinvoke $r6.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        virtualinvoke r1.<org.apache.batik.gvt.TextNode: void setAttributedCharacterIterator(java.text.AttributedCharacterIterator)>($r7);

        $r8 = new org.apache.batik.gvt.text.TextPaintInfo;

        specialinvoke $r8.<org.apache.batik.gvt.text.TextPaintInfo: void <init>()>();

        virtualinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: void setBaseTextPaintInfo(org.apache.batik.gvt.text.TextPaintInfo,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>($r8, r5, r0, r4);

        virtualinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: void setDecorationTextPaintInfo(org.apache.batik.gvt.text.TextPaintInfo,org.w3c.dom.Element)>($r8, r5);

        virtualinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: void addPaintAttributes(java.text.AttributedString,org.w3c.dom.Element,org.apache.batik.gvt.TextNode,org.apache.batik.gvt.text.TextPaintInfo,org.apache.batik.bridge.BridgeContext)>($r6, r5, r1, $r8, r4);

        $z1 = r2.<org.apache.batik.bridge.SVGTextElementBridge: boolean usingComplexSVGFont>;

        if $z1 == 0 goto label3;

        $r9 = virtualinvoke $r6.<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>();

        virtualinvoke r1.<org.apache.batik.gvt.TextNode: void setAttributedCharacterIterator(java.text.AttributedCharacterIterator)>($r9);

     label3:
        $z2 = virtualinvoke r4.<org.apache.batik.bridge.BridgeContext: boolean isDynamic()>();

        if $z2 == 0 goto label4;

        virtualinvoke r2.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void checkBBoxChange()>();

     label4:
        return;
    }

    public void handleAnimatedAttributeChanged(org.apache.batik.dom.svg.AnimatedLiveAttributeValue)
    {
        org.apache.batik.gvt.TextNode $r4, $r10;
        org.apache.batik.bridge.SVGTextElementBridge r2;
        java.awt.geom.Point2D $r7;
        int $i1, $i2;
        java.lang.String $r1, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.batik.dom.svg.AnimatedLiveAttributeValue r0;
        org.apache.batik.bridge.BridgeContext $r6, $r8;
        char $c0;
        org.w3c.dom.Element $r5, $r9;

        r2 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r0 := @parameter0: org.apache.batik.dom.svg.AnimatedLiveAttributeValue;

        $r1 = interfaceinvoke r0.<org.apache.batik.dom.svg.AnimatedLiveAttributeValue: java.lang.String getNamespaceURI()>();

        if $r1 != null goto label4;

        $r3 = interfaceinvoke r0.<org.apache.batik.dom.svg.AnimatedLiveAttributeValue: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("x");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("y");

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("dx");

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("dy");

        if $z3 != 0 goto label1;

        $z4 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("rotate");

        if $z4 != 0 goto label1;

        $z5 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("textLength");

        if $z5 != 0 goto label1;

        $z6 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("lengthAdjust");

        if $z6 == 0 goto label4;

     label1:
        $c0 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        if $i1 == 120 goto label2;

        $i2 = (int) $c0;

        if $i2 != 121 goto label3;

     label2:
        $r4 = virtualinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        $r6 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r5 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r7 = virtualinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: java.awt.geom.Point2D getLocation(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>($r6, $r5);

        virtualinvoke $r4.<org.apache.batik.gvt.TextNode: void setLocation(java.awt.geom.Point2D)>($r7);

     label3:
        $r8 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r9 = r2.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r10 = virtualinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        virtualinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: void computeLaidoutText(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>($r8, $r9, $r10);

        return;

     label4:
        specialinvoke r2.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void handleAnimatedAttributeChanged(org.apache.batik.dom.svg.AnimatedLiveAttributeValue)>(r0);

        return;
    }

    public void handleCSSEngineEvent(org.apache.batik.css.engine.CSSEngineEvent)
    {
        org.apache.batik.gvt.TextNode $r5;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.apache.batik.bridge.BridgeContext $r3;
        org.w3c.dom.Element $r4, $r6;
        int[] $r2;
        int $i0, i1, $i2;
        org.apache.batik.css.engine.CSSEngineEvent r1;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r1 := @parameter0: org.apache.batik.css.engine.CSSEngineEvent;

        r0.<org.apache.batik.bridge.SVGTextElementBridge: boolean hasNewACI> = 0;

        $r2 = virtualinvoke r1.<org.apache.batik.css.engine.CSSEngineEvent: int[] getProperties()>();

        i1 = 0;

        goto label4;

     label1:
        $i0 = $r2[i1];

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label3;
            case 5: goto label3;
            case 6: goto label3;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label3;
            case 10: goto label3;
            case 11: goto label2;
            case 12: goto label2;
            case 13: goto label3;
            case 14: goto label3;
            case 15: goto label3;
            case 16: goto label3;
            case 17: goto label3;
            case 18: goto label3;
            case 19: goto label3;
            case 20: goto label3;
            case 21: goto label2;
            case 22: goto label2;
            case 23: goto label3;
            case 24: goto label2;
            case 25: goto label2;
            case 26: goto label3;
            case 27: goto label2;
            case 28: goto label2;
            case 29: goto label2;
            case 30: goto label3;
            case 31: goto label2;
            case 32: goto label2;
            case 33: goto label3;
            case 34: goto label3;
            case 35: goto label3;
            case 36: goto label3;
            case 37: goto label3;
            case 38: goto label3;
            case 39: goto label3;
            case 40: goto label3;
            case 41: goto label3;
            case 42: goto label3;
            case 43: goto label3;
            case 44: goto label3;
            case 45: goto label3;
            case 46: goto label3;
            case 47: goto label3;
            case 48: goto label3;
            case 49: goto label3;
            case 50: goto label3;
            case 51: goto label3;
            case 52: goto label3;
            case 53: goto label2;
            case 54: goto label3;
            case 55: goto label3;
            case 56: goto label2;
            case 57: goto label3;
            case 58: goto label2;
            case 59: goto label2;
            default: goto label3;
        };

     label2:
        $z0 = r0.<org.apache.batik.bridge.SVGTextElementBridge: boolean hasNewACI>;

        if $z0 != 0 goto label3;

        r0.<org.apache.batik.bridge.SVGTextElementBridge: boolean hasNewACI> = 1;

        $r3 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r4 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r5 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: void computeLaidoutText(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>($r3, $r4, $r5);

     label3:
        i1 = i1 + 1;

     label4:
        $i2 = lengthof $r2;

        if i1 < $i2 goto label1;

        $r6 = virtualinvoke r1.<org.apache.batik.css.engine.CSSEngineEvent: org.w3c.dom.Element getElement()>();

        r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Element cssProceedElement> = $r6;

        specialinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void handleCSSEngineEvent(org.apache.batik.css.engine.CSSEngineEvent)>(r1);

        r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Element cssProceedElement> = null;

        return;
    }

    protected void handleCSSPropertyChanged(int)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.apache.batik.gvt.GraphicsNode $r1, $r5, $r6, $r10;
        java.awt.RenderingHints $r2, $r4, $r7, $r9;
        org.w3c.dom.Element $r3, $r8;
        int i0;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 9: goto label4;
            case 10: goto label5;
            case 11: goto label5;
            case 12: goto label5;
            case 13: goto label5;
            case 14: goto label5;
            case 15: goto label1;
            case 16: goto label1;
            case 17: goto label5;
            case 18: goto label5;
            case 19: goto label5;
            case 20: goto label5;
            case 21: goto label5;
            case 22: goto label5;
            case 23: goto label5;
            case 24: goto label5;
            case 25: goto label5;
            case 26: goto label5;
            case 27: goto label5;
            case 28: goto label5;
            case 29: goto label5;
            case 30: goto label5;
            case 31: goto label5;
            case 32: goto label5;
            case 33: goto label5;
            case 34: goto label5;
            case 35: goto label5;
            case 36: goto label5;
            case 37: goto label5;
            case 38: goto label5;
            case 39: goto label5;
            case 40: goto label5;
            case 41: goto label5;
            case 42: goto label5;
            case 43: goto label5;
            case 44: goto label5;
            case 45: goto label1;
            case 46: goto label1;
            case 47: goto label1;
            case 48: goto label1;
            case 49: goto label1;
            case 50: goto label1;
            case 51: goto label1;
            case 52: goto label1;
            case 53: goto label5;
            case 54: goto label1;
            case 55: goto label3;
            case 56: goto label5;
            case 57: goto label2;
            default: goto label5;
        };

     label1:
        virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: void rebuildACI()>();

        goto label6;

     label2:
        virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: void rebuildACI()>();

        specialinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void handleCSSPropertyChanged(int)>(i0);

        goto label6;

     label3:
        $r1 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.gvt.GraphicsNode: java.awt.RenderingHints getRenderingHints()>();

        $r3 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r4 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.RenderingHints convertTextRendering(org.w3c.dom.Element,java.awt.RenderingHints)>($r3, $r2);

        if $r4 == null goto label6;

        $r5 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        interfaceinvoke $r5.<org.apache.batik.gvt.GraphicsNode: void setRenderingHints(java.awt.RenderingHints)>($r4);

        goto label6;

     label4:
        $r6 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r7 = interfaceinvoke $r6.<org.apache.batik.gvt.GraphicsNode: java.awt.RenderingHints getRenderingHints()>();

        $r8 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r9 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.RenderingHints convertColorRendering(org.w3c.dom.Element,java.awt.RenderingHints)>($r8, $r7);

        if $r9 == null goto label6;

        $r10 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        interfaceinvoke $r10.<org.apache.batik.gvt.GraphicsNode: void setRenderingHints(java.awt.RenderingHints)>($r9);

        goto label6;

     label5:
        specialinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void handleCSSPropertyChanged(int)>(i0);

     label6:
        return;
    }

    protected void rebuildACI()
    {
        org.apache.batik.gvt.TextNode $r1;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        java.util.WeakHashMap $r10, $r19;
        boolean $z0, $z1;
        org.apache.batik.gvt.GraphicsNode $r15;
        org.apache.batik.bridge.BridgeContext $r7, $r14;
        org.apache.batik.gvt.text.TextPaintInfo $r6, $r13, r21, r22;
        org.w3c.dom.Element $r3, $r4, $r5, $r8, $r9, $r16, $r17, $r18;
        java.text.AttributedCharacterIterator $r2, $r12;
        java.lang.Object $r11, $r20;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        $z0 = r0.<org.apache.batik.bridge.SVGTextElementBridge: boolean hasNewACI>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        $r2 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r2 != null goto label2;

        return;

     label2:
        $r4 = r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Element cssProceedElement>;

        $r3 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        if $r4 != $r3 goto label3;

        $r13 = new org.apache.batik.gvt.text.TextPaintInfo;

        specialinvoke $r13.<org.apache.batik.gvt.text.TextPaintInfo: void <init>()>();

        r21 = $r13;

        $r16 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r15 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r14 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: void setBaseTextPaintInfo(org.apache.batik.gvt.text.TextPaintInfo,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>($r13, $r16, $r15, $r14);

        $r17 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: void setDecorationTextPaintInfo(org.apache.batik.gvt.text.TextPaintInfo,org.w3c.dom.Element)>($r13, $r17);

        $r19 = r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r18 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r20 = virtualinvoke $r19.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>($r18);

        r22 = (org.apache.batik.gvt.text.TextPaintInfo) $r20;

        goto label4;

     label3:
        $r5 = r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Element cssProceedElement>;

        $r6 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.text.TextPaintInfo getParentTextPaintInfo(org.w3c.dom.Element)>($r5);

        $r8 = r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Element cssProceedElement>;

        $r7 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        r21 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.text.TextPaintInfo getTextPaintInfo(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.gvt.text.TextPaintInfo,org.apache.batik.bridge.BridgeContext)>($r8, $r1, $r6, $r7);

        $r10 = r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r9 = r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Element cssProceedElement>;

        $r11 = virtualinvoke $r10.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>($r9);

        r22 = (org.apache.batik.gvt.text.TextPaintInfo) $r11;

     label4:
        if r22 != null goto label5;

        return;

     label5:
        virtualinvoke $r1.<org.apache.batik.gvt.TextNode: void swapTextPaintInfo(org.apache.batik.gvt.text.TextPaintInfo,org.apache.batik.gvt.text.TextPaintInfo)>(r21, r22);

        $z1 = r0.<org.apache.batik.bridge.SVGTextElementBridge: boolean usingComplexSVGFont>;

        if $z1 == 0 goto label6;

        $r12 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        virtualinvoke $r1.<org.apache.batik.gvt.TextNode: void setAttributedCharacterIterator(java.text.AttributedCharacterIterator)>($r12);

     label6:
        return;
    }

    int getElementStartIndex(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element r1;
        int $i0, $i2;
        java.lang.Object $r3;
        java.util.WeakHashMap $r2;
        org.apache.batik.gvt.text.TextPaintInfo r4;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r3 = virtualinvoke $r2.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.batik.gvt.text.TextPaintInfo) $r3;

        if r4 != null goto label1;

        $i2 = (int) -1;

        return $i2;

     label1:
        $i0 = r4.<org.apache.batik.gvt.text.TextPaintInfo: int startChar>;

        return $i0;
    }

    int getElementEndIndex(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element r1;
        int $i0, $i2;
        java.lang.Object $r3;
        java.util.WeakHashMap $r2;
        org.apache.batik.gvt.text.TextPaintInfo r4;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r1 := @parameter0: org.w3c.dom.Element;

        $r2 = r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r3 = virtualinvoke $r2.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.apache.batik.gvt.text.TextPaintInfo) $r3;

        if r4 != null goto label1;

        $i2 = (int) -1;

        return $i2;

     label1:
        $i0 = r4.<org.apache.batik.gvt.text.TextPaintInfo: int endChar>;

        return $i0;
    }

    protected java.text.AttributedString buildAttributedString(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.SVGTextElementBridge r1;
        org.w3c.dom.Element r3;
        org.apache.batik.bridge.BridgeContext r2;
        java.text.AttributedString $r4;
        org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer $r0;

        r1 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r2 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r3 := @parameter1: org.w3c.dom.Element;

        $r0 = new org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer;

        specialinvoke $r0.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: void <init>()>();

        virtualinvoke r1.<org.apache.batik.bridge.SVGTextElementBridge: void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean,org.apache.batik.gvt.text.TextPath,java.lang.Integer,java.util.Map,org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer)>(r2, r3, 1, null, null, null, $r0);

        $r4 = virtualinvoke $r0.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: java.text.AttributedString toAttributedString()>();

        return $r4;
    }

    protected void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, boolean, org.apache.batik.gvt.text.TextPath, java.lang.Integer, java.util.Map, org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer)
    {
        java.awt.Cursor $r18;
        java.lang.Integer r8, r38;
        java.util.Map r35, r37;
        org.apache.batik.bridge.SVGTextPathElementBridge r41;
        org.apache.batik.bridge.BridgeContext r1;
        org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer r4;
        org.apache.batik.bridge.Bridge $r29;
        org.apache.batik.bridge.UserAgent $r2, $r16;
        java.awt.font.TextAttribute $r9;
        short $s24;
        java.lang.String $r3, $r11, $r12, $r13, $r14, $r15, $r21, $r24, $r25;
        org.apache.batik.dom.events.NodeEventTarget r43;
        org.apache.batik.bridge.SVGAElementBridge$AnchorListener $r53;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11, z12, $z13;
        java.util.Collection $r32;
        org.apache.batik.bridge.SVGTextElementBridge r6;
        java.util.HashMap r5, $r36, $r42, $r48, $r49, $r50, $r51;
        org.apache.batik.bridge.SVGAElementBridge$CursorHolder $r52;
        org.w3c.dom.Node r39;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i25, i26, $i27, $i28, $i29;
        org.apache.batik.gvt.text.TextPath r7, $r30;
        java.util.WeakHashMap $r26, $r31, $r45;
        java.util.Iterator $r33;
        org.apache.batik.gvt.text.TextPaintInfo $r28, r44, $r47;
        org.w3c.dom.Element r0, $r20, $r22, $r23, r40;
        java.lang.Object $r10, $r27, $r34, $r46;

        r6 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        z3 := @parameter2: boolean;

        r7 := @parameter3: org.apache.batik.gvt.text.TextPath;

        r8 := @parameter4: java.lang.Integer;

        r35 := @parameter5: java.util.Map;

        r4 := @parameter6: org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer;

        $r2 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $z0 = staticinvoke <org.apache.batik.bridge.SVGUtilities: boolean matchUserAgent(org.w3c.dom.Element,org.apache.batik.bridge.UserAgent)>(r0, $r2);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertDisplay(org.w3c.dom.Element)>(r0);

        if $z1 != 0 goto label02;

     label01:
        return;

     label02:
        $r3 = staticinvoke <org.apache.batik.dom.util.XMLSupport: java.lang.String getXMLSpace(org.w3c.dom.Element)>(r0);

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("preserve");

        $i0 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if z3 == 0 goto label03;

        r6.<org.apache.batik.bridge.SVGTextElementBridge: int endLimit> = 0;

     label03:
        if $z2 == 0 goto label04;

        $i23 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        r6.<org.apache.batik.bridge.SVGTextElementBridge: int endLimit> = $i23;

     label04:
        if r35 != null goto label05;

        $r48 = new java.util.HashMap;

        $r36 = $r48;

        specialinvoke $r48.<java.util.HashMap: void <init>()>();

        goto label06;

     label05:
        $r49 = new java.util.HashMap;

        $r36 = $r49;

        specialinvoke $r49.<java.util.HashMap: void <init>(java.util.Map)>(r35);

     label06:
        r5 = $r36;

        r37 = virtualinvoke r6.<org.apache.batik.bridge.SVGTextElementBridge: java.util.Map getAttributeMap(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.text.TextPath,java.lang.Integer,java.util.Map)>(r1, r0, r7, r8, $r36);

        $r9 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;

        $r10 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9);

        r38 = r8;

        if $r10 == null goto label07;

        r38 = (java.lang.Integer) $r10;

     label07:
        r39 = virtualinvoke r6.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r0);

        goto label29;

     label08:
        if $z2 == 0 goto label09;

        z10 = 0;

        goto label13;

     label09:
        $i1 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if $i1 != 0 goto label10;

        z10 = 1;

        goto label13;

     label10:
        $i2 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int getLastChar()>();

        if $i2 != 32 goto label11;

        $z11 = 1;

        goto label12;

     label11:
        $z11 = 0;

     label12:
        z10 = $z11;

     label13:
        $s24 = interfaceinvoke r39.<org.w3c.dom.Node: short getNodeType()>();

        $i29 = (int) $s24;

        tableswitch($i29)
        {
            case 1: goto label14;
            case 2: goto label28;
            case 3: goto label26;
            case 4: goto label26;
            default: goto label28;
        };

     label14:
        $r13 = "http://www.w3.org/2000/svg";

        $r14 = interfaceinvoke r39.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z4 != 0 goto label15;

        goto label28;

     label15:
        r40 = (org.w3c.dom.Element) r39;

        $r15 = interfaceinvoke r39.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z5 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("tspan");

        if $z5 != 0 goto label16;

        $z6 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("altGlyph");

        if $z6 == 0 goto label18;

     label16:
        $i12 = r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int count>;

        virtualinvoke r6.<org.apache.batik.bridge.SVGTextElementBridge: void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean,org.apache.batik.gvt.text.TextPath,java.lang.Integer,java.util.Map,org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer)>(r1, r40, 0, r7, r38, r37, r4);

        $i5 = r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int count>;

        if $i5 == $i12 goto label17;

        r37 = null;

     label17:
        goto label28;

     label18:
        $z7 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("textPath");

        if $z7 == 0 goto label20;

        $r29 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)>(r40);

        r41 = (org.apache.batik.bridge.SVGTextPathElementBridge) $r29;

        $r30 = virtualinvoke r41.<org.apache.batik.bridge.SVGTextPathElementBridge: org.apache.batik.gvt.text.TextPath createTextPath(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r1, r40);

        if $r30 == null goto label19;

        i25 = r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int count>;

        virtualinvoke r6.<org.apache.batik.bridge.SVGTextElementBridge: void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean,org.apache.batik.gvt.text.TextPath,java.lang.Integer,java.util.Map,org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer)>(r1, r40, 0, $r30, r38, r37, r4);

        $i11 = r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int count>;

        if $i11 == i25 goto label19;

        r37 = null;

     label19:
        goto label28;

     label20:
        $z8 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("tref");

        if $z8 == 0 goto label24;

        $r20 = (org.w3c.dom.Element) r39;

        $r21 = staticinvoke <org.apache.batik.dom.util.XLinkSupport: java.lang.String getXLinkHref(org.w3c.dom.Element)>($r20);

        $r22 = (org.w3c.dom.Element) r39;

        $r23 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Element getReferencedElement(org.w3c.dom.Element,java.lang.String)>($r22, $r21);

        $r24 = staticinvoke <org.apache.batik.bridge.TextUtilities: java.lang.String getElementContent(org.w3c.dom.Element)>($r23);

        $r25 = virtualinvoke r6.<org.apache.batik.bridge.SVGTextElementBridge: java.lang.String normalizeString(java.lang.String,boolean,boolean)>($r24, $z2, z10);

        $i7 = virtualinvoke $r25.<java.lang.String: int length()>();

        if $i7 == 0 goto label23;

        $i8 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if r37 != null goto label21;

        $r50 = new java.util.HashMap;

        $r42 = $r50;

        specialinvoke $r50.<java.util.HashMap: void <init>()>();

        goto label22;

     label21:
        $r51 = new java.util.HashMap;

        $r42 = $r51;

        specialinvoke $r51.<java.util.HashMap: void <init>(java.util.Map)>(r37);

     label22:
        virtualinvoke r6.<org.apache.batik.bridge.SVGTextElementBridge: java.util.Map getAttributeMap(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.text.TextPath,java.lang.Integer,java.util.Map)>(r1, r40, r7, r8, $r42);

        virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: void append(java.lang.String,java.util.Map)>($r25, $r42);

        $i9 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        $i10 = $i9 - 1;

        $r26 = r6.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r27 = virtualinvoke $r26.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r40);

        $r28 = (org.apache.batik.gvt.text.TextPaintInfo) $r27;

        $r28.<org.apache.batik.gvt.text.TextPaintInfo: int startChar> = $i8;

        $r28.<org.apache.batik.gvt.text.TextPaintInfo: int endChar> = $i10;

        r37 = null;

     label23:
        goto label28;

     label24:
        $z9 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("a");

        if $z9 == 0 goto label28;

        r43 = (org.apache.batik.dom.events.NodeEventTarget) r40;

        $r16 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $r52 = new org.apache.batik.bridge.SVGAElementBridge$CursorHolder;

        $r18 = <org.apache.batik.bridge.CursorManager: java.awt.Cursor DEFAULT_CURSOR>;

        specialinvoke $r52.<org.apache.batik.bridge.SVGAElementBridge$CursorHolder: void <init>(java.awt.Cursor)>($r18);

        $r53 = new org.apache.batik.bridge.SVGAElementBridge$AnchorListener;

        specialinvoke $r53.<org.apache.batik.bridge.SVGAElementBridge$AnchorListener: void <init>(org.apache.batik.bridge.UserAgent,org.apache.batik.bridge.SVGAElementBridge$CursorHolder)>($r16, $r52);

        interfaceinvoke r43.<org.apache.batik.dom.events.NodeEventTarget: void addEventListenerNS(java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean,java.lang.Object)>("http://www.w3.org/2001/xml-events", "click", $r53, 0, null);

        virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: void storeEventListenerNS(org.w3c.dom.events.EventTarget,java.lang.String,java.lang.String,org.w3c.dom.events.EventListener,boolean)>(r43, "http://www.w3.org/2001/xml-events", "click", $r53, 0);

        i26 = r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int count>;

        virtualinvoke r6.<org.apache.batik.bridge.SVGTextElementBridge: void fillAttributedStringBuffer(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,boolean,org.apache.batik.gvt.text.TextPath,java.lang.Integer,java.util.Map,org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer)>(r1, r40, 0, r7, r38, r37, r4);

        $i6 = r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int count>;

        if $i6 == i26 goto label25;

        r37 = null;

     label25:
        goto label28;

     label26:
        $r11 = interfaceinvoke r39.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r12 = virtualinvoke r6.<org.apache.batik.bridge.SVGTextElementBridge: java.lang.String normalizeString(java.lang.String,boolean,boolean)>($r11, $z2, z10);

        $i3 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i3 == 0 goto label28;

        virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: void append(java.lang.String,java.util.Map)>($r12, r5);

        if $z2 == 0 goto label27;

        $i4 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        r6.<org.apache.batik.bridge.SVGTextElementBridge: int endLimit> = $i4;

     label27:
        r37 = null;

     label28:
        r39 = virtualinvoke r6.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r39);

     label29:
        if r39 != null goto label08;

        if z3 == 0 goto label35;

        z12 = 0;

        goto label31;

     label30:
        virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: void stripLast()>();

        z12 = 1;

     label31:
        $i13 = r6.<org.apache.batik.bridge.SVGTextElementBridge: int endLimit>;

        $i14 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if $i13 >= $i14 goto label32;

        $i22 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int getLastChar()>();

        if $i22 == 32 goto label30;

     label32:
        if z12 == 0 goto label35;

        $r31 = r6.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r32 = virtualinvoke $r31.<java.util.AbstractMap: java.util.Collection values()>();

        $r33 = interfaceinvoke $r32.<java.util.Collection: java.util.Iterator iterator()>();

        goto label34;

     label33:
        $r34 = interfaceinvoke $r33.<java.util.Iterator: java.lang.Object next()>();

        r44 = (org.apache.batik.gvt.text.TextPaintInfo) $r34;

        $i15 = r44.<org.apache.batik.gvt.text.TextPaintInfo: int endChar>;

        $i16 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        if $i15 < $i16 goto label34;

        $i17 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        $i18 = $i17 - 1;

        r44.<org.apache.batik.gvt.text.TextPaintInfo: int endChar> = $i18;

        $i20 = r44.<org.apache.batik.gvt.text.TextPaintInfo: int startChar>;

        $i19 = r44.<org.apache.batik.gvt.text.TextPaintInfo: int endChar>;

        if $i20 <= $i19 goto label34;

        $i21 = r44.<org.apache.batik.gvt.text.TextPaintInfo: int endChar>;

        r44.<org.apache.batik.gvt.text.TextPaintInfo: int startChar> = $i21;

     label34:
        $z13 = interfaceinvoke $r33.<java.util.Iterator: boolean hasNext()>();

        if $z13 != 0 goto label33;

     label35:
        $i27 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge$AttributedStringBuffer: int length()>();

        $i28 = $i27 - 1;

        $r45 = r6.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r46 = virtualinvoke $r45.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r0);

        $r47 = (org.apache.batik.gvt.text.TextPaintInfo) $r46;

        $r47.<org.apache.batik.gvt.text.TextPaintInfo: int startChar> = $i0;

        $r47.<org.apache.batik.gvt.text.TextPaintInfo: int endChar> = $i28;

        return;
    }

    protected java.lang.String normalizeString(java.lang.String, boolean, boolean)
    {
        org.apache.batik.bridge.SVGTextElementBridge r4;
        java.lang.StringBuffer $r5;
        int $i0, $i2, i5, $i6, i7, i8, $i9, $i10, $i11, $i12;
        java.lang.String r1, $r2, $r3;
        boolean z0, z1, z2;
        char $c1, $c3, $c4;

        r4 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r5 = new java.lang.StringBuffer;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r5.<java.lang.StringBuffer: void <init>(int)>($i0);

        if z0 == 0 goto label06;

        i5 = 0;

        goto label05;

     label01:
        $c4 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5);

        $i10 = (int) $c4;

        tableswitch($i10)
        {
            case 9: goto label02;
            case 10: goto label02;
            case 11: goto label03;
            case 12: goto label03;
            case 13: goto label02;
            default: goto label03;
        };

     label02:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        goto label04;

     label03:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

     label04:
        i5 = i5 + 1;

     label05:
        $i6 = virtualinvoke r1.<java.lang.String: int length()>();

        if i5 < $i6 goto label01;

        $r3 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;

     label06:
        i7 = 0;

        if z1 == 0 goto label11;

        goto label10;

     label07:
        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i7);

        $i11 = (int) $c3;

        lookupswitch($i11)
        {
            case 9: goto label09;
            case 10: goto label09;
            case 13: goto label09;
            case 32: goto label09;
            default: goto label08;
        };

     label08:
        goto label11;

     label09:
        i7 = i7 + 1;

     label10:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if i7 < $i2 goto label07;

     label11:
        z2 = 0;

        i8 = i7;

        goto label17;

     label12:
        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i8);

        $i12 = (int) $c1;

        lookupswitch($i12)
        {
            case 9: goto label14;
            case 10: goto label13;
            case 13: goto label13;
            case 32: goto label14;
            default: goto label15;
        };

     label13:
        goto label16;

     label14:
        if z2 != 0 goto label16;

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        z2 = 1;

        goto label16;

     label15:
        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        z2 = 0;

     label16:
        i8 = i8 + 1;

     label17:
        $i9 = virtualinvoke r1.<java.lang.String: int length()>();

        if i8 < $i9 goto label12;

        $r2 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    protected boolean nodeAncestorOf(org.w3c.dom.Node, org.w3c.dom.Node)
    {
        org.apache.batik.bridge.SVGTextElementBridge r2;
        org.w3c.dom.Node r0, r1, r3;
        boolean $z0;

        r2 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r1 := @parameter0: org.w3c.dom.Node;

        r0 := @parameter1: org.w3c.dom.Node;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return 0;

     label2:
        r3 = virtualinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getParentNode(org.w3c.dom.Node)>(r0);

        goto label4;

     label3:
        r3 = virtualinvoke r2.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getParentNode(org.w3c.dom.Node)>(r3);

     label4:
        if r3 == null goto label5;

        if r3 != r1 goto label3;

     label5:
        if r3 != r1 goto label6;

        $z0 = 1;

        goto label7;

     label6:
        $z0 = 0;

     label7:
        return $z0;
    }

    protected void addGlyphPositionAttributes(java.text.AttributedString, org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Float $r42, $r43, $r44, $r45, $r46, $r47;
        org.w3c.dom.svg.SVGAnimatedNumberList $r13;
        org.apache.batik.bridge.BridgeException $r48;
        org.apache.batik.bridge.BridgeContext r1;
        org.w3c.dom.svg.SVGLength $r29, $r32, $r35, $r38;
        org.w3c.dom.svg.SVGLengthList $r15, $r16, $r17, $r18;
        org.apache.batik.bridge.UserAgent $r2;
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r23, $r26, $r28, $r31, $r34, $r37;
        org.apache.batik.dom.svg.LiveAttributeException $r39;
        java.lang.String $r3;
        org.apache.batik.dom.svg.SVGOMAnimatedNumberList r14;
        org.w3c.dom.svg.SVGAnimatedLengthList $r6, $r7, $r9, $r11;
        boolean $z0, $z1, $z2, $z3;
        java.text.AttributedString r20;
        org.apache.batik.dom.svg.SVGOMAnimatedLengthList r8, r10, r12, r41;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        org.apache.batik.bridge.SVGTextElementBridge r4;
        org.w3c.dom.svg.SVGTextPositioningElement r5;
        org.w3c.dom.svg.SVGNumber $r22, $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, i29, i30, i31, i32, $i34;
        double $d0, $d1, $d2, $d3;
        org.w3c.dom.Element r0;
        org.w3c.dom.svg.SVGNumberList $r19;

        r4 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r20 := @parameter0: java.text.AttributedString;

        r0 := @parameter1: org.w3c.dom.Element;

        r1 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $r2 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $z0 = staticinvoke <org.apache.batik.bridge.SVGUtilities: boolean matchUserAgent(org.w3c.dom.Element,org.apache.batik.bridge.UserAgent)>(r0, $r2);

        if $z0 == 0 goto label01;

        $z1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertDisplay(org.w3c.dom.Element)>(r0);

        if $z1 != 0 goto label02;

     label01:
        return;

     label02:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("textPath");

        if $z2 == 0 goto label03;

        virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge: void addChildGlyphPositionAttributes(java.text.AttributedString,org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r20, r0, r1);

        return;

     label03:
        $i0 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge: int getElementStartIndex(org.w3c.dom.Element)>(r0);

        $i34 = (int) -1;

        if $i0 != $i34 goto label04;

        return;

     label04:
        $i1 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge: int getElementEndIndex(org.w3c.dom.Element)>(r0);

        $z3 = r0 instanceof org.w3c.dom.svg.SVGTextPositioningElement;

        if $z3 != 0 goto label05;

        virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge: void addChildGlyphPositionAttributes(java.text.AttributedString,org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r20, r0, r1);

        return;

     label05:
        r5 = (org.w3c.dom.svg.SVGTextPositioningElement) r0;

     label06:
        $r6 = interfaceinvoke r5.<org.w3c.dom.svg.SVGTextPositioningElement: org.w3c.dom.svg.SVGAnimatedLengthList getX()>();

        r41 = (org.apache.batik.dom.svg.SVGOMAnimatedLengthList) $r6;

        virtualinvoke r41.<org.apache.batik.dom.svg.SVGOMAnimatedLengthList: void check()>();

        $r7 = interfaceinvoke r5.<org.w3c.dom.svg.SVGTextPositioningElement: org.w3c.dom.svg.SVGAnimatedLengthList getY()>();

        r8 = (org.apache.batik.dom.svg.SVGOMAnimatedLengthList) $r7;

        virtualinvoke r8.<org.apache.batik.dom.svg.SVGOMAnimatedLengthList: void check()>();

        $r9 = interfaceinvoke r5.<org.w3c.dom.svg.SVGTextPositioningElement: org.w3c.dom.svg.SVGAnimatedLengthList getDx()>();

        r10 = (org.apache.batik.dom.svg.SVGOMAnimatedLengthList) $r9;

        virtualinvoke r10.<org.apache.batik.dom.svg.SVGOMAnimatedLengthList: void check()>();

        $r11 = interfaceinvoke r5.<org.w3c.dom.svg.SVGTextPositioningElement: org.w3c.dom.svg.SVGAnimatedLengthList getDy()>();

        r12 = (org.apache.batik.dom.svg.SVGOMAnimatedLengthList) $r11;

        virtualinvoke r12.<org.apache.batik.dom.svg.SVGOMAnimatedLengthList: void check()>();

        $r13 = interfaceinvoke r5.<org.w3c.dom.svg.SVGTextPositioningElement: org.w3c.dom.svg.SVGAnimatedNumberList getRotate()>();

        r14 = (org.apache.batik.dom.svg.SVGOMAnimatedNumberList) $r13;

        virtualinvoke r14.<org.apache.batik.dom.svg.SVGOMAnimatedNumberList: void check()>();

        $r15 = virtualinvoke r41.<org.apache.batik.dom.svg.SVGOMAnimatedLengthList: org.w3c.dom.svg.SVGLengthList getAnimVal()>();

        $r16 = virtualinvoke r8.<org.apache.batik.dom.svg.SVGOMAnimatedLengthList: org.w3c.dom.svg.SVGLengthList getAnimVal()>();

        $r17 = virtualinvoke r10.<org.apache.batik.dom.svg.SVGOMAnimatedLengthList: org.w3c.dom.svg.SVGLengthList getAnimVal()>();

        $r18 = virtualinvoke r12.<org.apache.batik.dom.svg.SVGOMAnimatedLengthList: org.w3c.dom.svg.SVGLengthList getAnimVal()>();

        $r19 = virtualinvoke r14.<org.apache.batik.dom.svg.SVGOMAnimatedNumberList: org.w3c.dom.svg.SVGNumberList getAnimVal()>();

        $i2 = interfaceinvoke $r15.<org.w3c.dom.svg.SVGLengthList: int getNumberOfItems()>();

        i28 = 0;

        goto label08;

     label07:
        $r37 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute X>;

        $r42 = new java.lang.Float;

        $r38 = interfaceinvoke $r15.<org.w3c.dom.svg.SVGLengthList: org.w3c.dom.svg.SVGLength getItem(int)>(i28);

        $f5 = interfaceinvoke $r38.<org.w3c.dom.svg.SVGLength: float getValue()>();

        specialinvoke $r42.<java.lang.Float: void <init>(float)>($f5);

        $i27 = $i0 + i28;

        $i25 = $i0 + i28;

        $i26 = $i25 + 1;

        virtualinvoke r20.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r37, $r42, $i27, $i26);

        i28 = i28 + 1;

     label08:
        if i28 >= $i2 goto label09;

        $i24 = $i0 + i28;

        if $i24 <= $i1 goto label07;

     label09:
        $i3 = interfaceinvoke $r16.<org.w3c.dom.svg.SVGLengthList: int getNumberOfItems()>();

        i29 = 0;

        goto label11;

     label10:
        $r34 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute Y>;

        $r43 = new java.lang.Float;

        $r35 = interfaceinvoke $r16.<org.w3c.dom.svg.SVGLengthList: org.w3c.dom.svg.SVGLength getItem(int)>(i29);

        $f4 = interfaceinvoke $r35.<org.w3c.dom.svg.SVGLength: float getValue()>();

        specialinvoke $r43.<java.lang.Float: void <init>(float)>($f4);

        $i23 = $i0 + i29;

        $i21 = $i0 + i29;

        $i22 = $i21 + 1;

        virtualinvoke r20.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r34, $r43, $i23, $i22);

        i29 = i29 + 1;

     label11:
        if i29 >= $i3 goto label12;

        $i20 = $i0 + i29;

        if $i20 <= $i1 goto label10;

     label12:
        $i4 = interfaceinvoke $r17.<org.w3c.dom.svg.SVGLengthList: int getNumberOfItems()>();

        i30 = 0;

        goto label14;

     label13:
        $r31 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute DX>;

        $r44 = new java.lang.Float;

        $r32 = interfaceinvoke $r17.<org.w3c.dom.svg.SVGLengthList: org.w3c.dom.svg.SVGLength getItem(int)>(i30);

        $f3 = interfaceinvoke $r32.<org.w3c.dom.svg.SVGLength: float getValue()>();

        specialinvoke $r44.<java.lang.Float: void <init>(float)>($f3);

        $i19 = $i0 + i30;

        $i17 = $i0 + i30;

        $i18 = $i17 + 1;

        virtualinvoke r20.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r31, $r44, $i19, $i18);

        i30 = i30 + 1;

     label14:
        if i30 >= $i4 goto label15;

        $i16 = $i0 + i30;

        if $i16 <= $i1 goto label13;

     label15:
        $i5 = interfaceinvoke $r18.<org.w3c.dom.svg.SVGLengthList: int getNumberOfItems()>();

        i31 = 0;

        goto label17;

     label16:
        $r28 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute DY>;

        $r45 = new java.lang.Float;

        $r29 = interfaceinvoke $r18.<org.w3c.dom.svg.SVGLengthList: org.w3c.dom.svg.SVGLength getItem(int)>(i31);

        $f2 = interfaceinvoke $r29.<org.w3c.dom.svg.SVGLength: float getValue()>();

        specialinvoke $r45.<java.lang.Float: void <init>(float)>($f2);

        $i15 = $i0 + i31;

        $i13 = $i0 + i31;

        $i14 = $i13 + 1;

        virtualinvoke r20.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r28, $r45, $i15, $i14);

        i31 = i31 + 1;

     label17:
        if i31 >= $i5 goto label18;

        $i12 = $i0 + i31;

        if $i12 <= $i1 goto label16;

     label18:
        $i6 = interfaceinvoke $r19.<org.w3c.dom.svg.SVGNumberList: int getNumberOfItems()>();

        if $i6 != 1 goto label19;

        $r46 = new java.lang.Float;

        $r25 = interfaceinvoke $r19.<org.w3c.dom.svg.SVGNumberList: org.w3c.dom.svg.SVGNumber getItem(int)>(0);

        $f1 = interfaceinvoke $r25.<org.w3c.dom.svg.SVGNumber: float getValue()>();

        $d2 = (double) $f1;

        $d3 = staticinvoke <java.lang.Math: double toRadians(double)>($d2);

        specialinvoke $r46.<java.lang.Float: void <init>(double)>($d3);

        $r26 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ROTATION>;

        $i11 = $i1 + 1;

        virtualinvoke r20.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r26, $r46, $i0, $i11);

        goto label22;

     label19:
        if $i6 <= 1 goto label22;

        i32 = 0;

        goto label21;

     label20:
        $r47 = new java.lang.Float;

        $r22 = interfaceinvoke $r19.<org.w3c.dom.svg.SVGNumberList: org.w3c.dom.svg.SVGNumber getItem(int)>(i32);

        $f0 = interfaceinvoke $r22.<org.w3c.dom.svg.SVGNumber: float getValue()>();

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        specialinvoke $r47.<java.lang.Float: void <init>(double)>($d1);

        $r23 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ROTATION>;

        $i10 = $i0 + i32;

        $i8 = $i0 + i32;

        $i9 = $i8 + 1;

        virtualinvoke r20.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>($r23, $r47, $i10, $i9);

        i32 = i32 + 1;

     label21:
        if i32 >= $i6 goto label22;

        $i7 = $i0 + i32;

        if $i7 <= $i1 goto label20;

     label22:
        virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge: void addChildGlyphPositionAttributes(java.text.AttributedString,org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r20, r0, r1);

     label23:
        goto label25;

     label24:
        $r39 := @caughtexception;

        $r48 = new org.apache.batik.bridge.BridgeException;

        specialinvoke $r48.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.apache.batik.dom.svg.LiveAttributeException)>(r1, $r39);

        throw $r48;

     label25:
        return;

        catch org.apache.batik.dom.svg.LiveAttributeException from label06 to label23 with label24;
    }

    protected void addChildGlyphPositionAttributes(java.text.AttributedString, org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.apache.batik.bridge.BridgeContext r4;
        java.text.AttributedString r3;
        short $s0;
        org.w3c.dom.Element r1, r2;
        org.w3c.dom.Node r5;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r3 := @parameter0: java.text.AttributedString;

        r1 := @parameter1: org.w3c.dom.Element;

        r4 := @parameter2: org.apache.batik.bridge.BridgeContext;

        r5 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r1);

        goto label4;

     label1:
        $s0 = interfaceinvoke r5.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label2;

        goto label3;

     label2:
        r2 = (org.w3c.dom.Element) r5;

        $z0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: boolean isTextChild(org.w3c.dom.Element)>(r2);

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: void addGlyphPositionAttributes(java.text.AttributedString,org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>(r3, r2, r4);

     label3:
        r5 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r5);

     label4:
        if r5 != null goto label1;

        return;
    }

    protected void addPaintAttributes(java.text.AttributedString, org.w3c.dom.Element, org.apache.batik.gvt.TextNode, org.apache.batik.gvt.text.TextPaintInfo, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.gvt.TextNode r7;
        org.apache.batik.bridge.SVGTextElementBridge r3;
        org.apache.batik.bridge.BridgeContext r1;
        java.text.AttributedString r6;
        org.apache.batik.gvt.text.TextPaintInfo r8, $r9;
        org.apache.batik.bridge.UserAgent $r2;
        org.w3c.dom.Element r0;
        java.lang.Object $r5;
        java.util.WeakHashMap $r4;
        boolean $z0, $z1;

        r3 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r6 := @parameter0: java.text.AttributedString;

        r0 := @parameter1: org.w3c.dom.Element;

        r7 := @parameter2: org.apache.batik.gvt.TextNode;

        r8 := @parameter3: org.apache.batik.gvt.text.TextPaintInfo;

        r1 := @parameter4: org.apache.batik.bridge.BridgeContext;

        $r2 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $z0 = staticinvoke <org.apache.batik.bridge.SVGUtilities: boolean matchUserAgent(org.w3c.dom.Element,org.apache.batik.bridge.UserAgent)>(r0, $r2);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertDisplay(org.w3c.dom.Element)>(r0);

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $r4 = r3.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r5 = virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r0);

        if $r5 == null goto label3;

        $r9 = (org.apache.batik.gvt.text.TextPaintInfo) $r5;

        virtualinvoke r7.<org.apache.batik.gvt.TextNode: void swapTextPaintInfo(org.apache.batik.gvt.text.TextPaintInfo,org.apache.batik.gvt.text.TextPaintInfo)>(r8, $r9);

     label3:
        virtualinvoke r3.<org.apache.batik.bridge.SVGTextElementBridge: void addChildPaintAttributes(java.text.AttributedString,org.w3c.dom.Element,org.apache.batik.gvt.TextNode,org.apache.batik.gvt.text.TextPaintInfo,org.apache.batik.bridge.BridgeContext)>(r6, r0, r7, r8, r1);

        return;
    }

    protected void addChildPaintAttributes(java.text.AttributedString, org.w3c.dom.Element, org.apache.batik.gvt.TextNode, org.apache.batik.gvt.text.TextPaintInfo, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.gvt.TextNode r3;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.apache.batik.bridge.BridgeContext r5;
        java.text.AttributedString r7;
        org.apache.batik.gvt.text.TextPaintInfo r4, $r6;
        short $s0;
        org.w3c.dom.Element r1, r2;
        org.w3c.dom.Node r8;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r7 := @parameter0: java.text.AttributedString;

        r1 := @parameter1: org.w3c.dom.Element;

        r3 := @parameter2: org.apache.batik.gvt.TextNode;

        r4 := @parameter3: org.apache.batik.gvt.text.TextPaintInfo;

        r5 := @parameter4: org.apache.batik.bridge.BridgeContext;

        r8 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getFirstChild(org.w3c.dom.Node)>(r1);

        goto label4;

     label1:
        $s0 = interfaceinvoke r8.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label2;

        goto label3;

     label2:
        r2 = (org.w3c.dom.Element) r8;

        $z0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: boolean isTextChild(org.w3c.dom.Element)>(r2);

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.text.TextPaintInfo getTextPaintInfo(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.gvt.text.TextPaintInfo,org.apache.batik.bridge.BridgeContext)>(r2, r3, r4, r5);

        virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: void addPaintAttributes(java.text.AttributedString,org.w3c.dom.Element,org.apache.batik.gvt.TextNode,org.apache.batik.gvt.text.TextPaintInfo,org.apache.batik.bridge.BridgeContext)>(r7, r2, r3, $r6, r5);

     label3:
        r8 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getNextSibling(org.w3c.dom.Node)>(r8);

     label4:
        if r8 != null goto label1;

        return;
    }

    protected java.util.List getFontList(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, java.util.Map)
    {
        java.lang.Float $r4, $r7, $r9, $r11;
        java.util.Map r0;
        boolean $z0, $z1, $z2, $z3;
        org.apache.batik.bridge.BridgeContext r22;
        float $f0;
        org.apache.batik.bridge.SVGTextElementBridge r24;
        java.awt.font.TextAttribute $r5, $r6, $r8, $r10;
        org.apache.batik.gvt.font.GVTFont $r31;
        java.util.ArrayList $r18, $r19;
        java.text.AttributedCharacterIterator$Attribute $r3, $r16, $r27, $r28;
        int $i0, i1;
        java.lang.ref.SoftReference $r1;
        java.lang.String $r13, $r15, $r21;
        org.apache.batik.gvt.font.UnresolvedFontFamily $r25;
        org.apache.batik.bridge.SVGFontFamily r30;
        org.apache.batik.gvt.font.GVTFontFamily $r23, $r26, r29;
        org.apache.batik.css.engine.value.Value $r12, $r14, $r17, $r20;
        org.w3c.dom.Element r2;

        r24 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r22 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r2 := @parameter1: org.w3c.dom.Element;

        r0 := @parameter2: java.util.Map;

        $r3 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID>;

        $r1 = new java.lang.ref.SoftReference;

        specialinvoke $r1.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r2);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

        $r4 = staticinvoke <org.apache.batik.bridge.TextUtilities: java.lang.Float convertFontSize(org.w3c.dom.Element)>(r2);

        $f0 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        $r5 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SIZE>;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r4);

        $r6 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute WIDTH>;

        $r7 = staticinvoke <org.apache.batik.bridge.TextUtilities: java.lang.Float convertFontStretch(org.w3c.dom.Element)>(r2);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute POSTURE>;

        $r9 = staticinvoke <org.apache.batik.bridge.TextUtilities: java.lang.Float convertFontStyle(org.w3c.dom.Element)>(r2);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9);

        $r10 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute WEIGHT>;

        $r11 = staticinvoke <org.apache.batik.bridge.TextUtilities: java.lang.Float convertFontWeight(org.w3c.dom.Element)>(r2);

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

        $r12 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r2, 27);

        $r13 = interfaceinvoke $r12.<org.apache.batik.css.engine.value.Value: java.lang.String getCssText()>();

        $r14 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r2, 25);

        $r15 = interfaceinvoke $r14.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $r16 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_DELIMITER>;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r2);

        $r17 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r2, 21);

        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>()>();

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        $i0 = interfaceinvoke $r17.<org.apache.batik.css.engine.value.Value: int getLength()>();

        i1 = 0;

        goto label6;

     label1:
        $r20 = interfaceinvoke $r17.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(i1);

        $r21 = interfaceinvoke $r20.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $r23 = staticinvoke <org.apache.batik.bridge.SVGFontUtilities: org.apache.batik.gvt.font.GVTFontFamily getFontFamily(org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext,java.lang.String,java.lang.String,java.lang.String)>(r2, r22, $r21, $r13, $r15);

        r29 = $r23;

        if $r23 != null goto label2;

        goto label5;

     label2:
        $z0 = $r23 instanceof org.apache.batik.gvt.font.UnresolvedFontFamily;

        if $z0 == 0 goto label3;

        $r25 = (org.apache.batik.gvt.font.UnresolvedFontFamily) $r23;

        $r26 = staticinvoke <org.apache.batik.gvt.font.FontFamilyResolver: org.apache.batik.gvt.font.GVTFontFamily resolve(org.apache.batik.gvt.font.UnresolvedFontFamily)>($r25);

        r29 = $r26;

        if $r26 != null goto label3;

        goto label5;

     label3:
        interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>(r29);

        $z1 = r29 instanceof org.apache.batik.bridge.SVGFontFamily;

        if $z1 == 0 goto label4;

        r30 = (org.apache.batik.bridge.SVGFontFamily) r29;

        $z2 = virtualinvoke r30.<org.apache.batik.bridge.SVGFontFamily: boolean isComplex()>();

        if $z2 == 0 goto label4;

        r24.<org.apache.batik.bridge.SVGTextElementBridge: boolean usingComplexSVGFont> = 1;

     label4:
        $r31 = interfaceinvoke r29.<org.apache.batik.gvt.font.GVTFontFamily: org.apache.batik.gvt.font.GVTFont deriveFont(float,java.util.Map)>($f0, r0);

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r31);

     label5:
        i1 = i1 + 1;

     label6:
        if i1 < $i0 goto label1;

        $r27 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute GVT_FONT_FAMILIES>;

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r18);

        $z3 = virtualinvoke r22.<org.apache.batik.bridge.BridgeContext: boolean isDynamic()>();

        if $z3 != 0 goto label7;

        $r28 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_DELIMITER>;

        interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r28);

     label7:
        return $r19;
    }

    protected java.util.Map getAttributeMap(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.text.TextPath, java.lang.Integer, java.util.Map)
    {
        java.awt.Color $r100;
        java.lang.Integer r16, $r21, $r23, $r34, $r36, $r42, $r44, $r66, $r70, $r74, $r83, $r85, $r111;
        java.util.Map r3;
        org.apache.batik.gvt.TextNode$Anchor $r6;
        org.w3c.dom.svg.SVGAnimatedEnumeration $r33;
        org.apache.batik.bridge.BridgeException $r124;
        org.apache.batik.dom.svg.AbstractSVGAnimatedLength r108;
        java.awt.font.TextAttribute $r18, $r20, $r88, $r89;
        short $s3, $s8, $s9;
        java.text.AttributedCharacterIterator$Attribute $r7, $r10, $r90, $r91, $r94, $r101;
        java.lang.StringBuffer $r63, $r64, $r80, $r81, $r115, $r120;
        org.apache.batik.css.engine.value.Value $r12, $r14, $r103, $r105, $r106;
        org.apache.batik.bridge.SVGAltGlyphHandler $r109;
        int $i2, $i4, i5, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;
        java.lang.Boolean $r17, $r38, $r40, $r49, $r52, $r55, $r87;
        org.w3c.dom.Element r0;
        java.lang.Object $r11;
        java.lang.Float $r27, $r28, $r107, $r112, $r113, $r114, $r117, $r118, $r119, $r123;
        org.apache.batik.bridge.BridgeContext r8;
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r22, $r24, $r26, $r31, $r32, $r35, $r37, $r39, $r41, $r43, $r45, $r48, $r50, $r51, $r53, $r54, $r56, $r58, $r60, $r67, $r69, $r71, $r73, $r75, $r77, $r84, $r86;
        org.apache.batik.dom.svg.LiveAttributeException $r95;
        org.apache.batik.dom.svg.SVGOMAnimatedEnumeration $r47;
        java.lang.String $r1, $r2, $r13, $r15, $r65, $r82, $r92, $r104;
        org.w3c.dom.svg.SVGTextContentElement r97;
        java.lang.IllegalStateException $r116, $r121;
        boolean $z0, $z1, $z2, $z3;
        java.util.List $r9;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;
        org.apache.batik.bridge.SVGTextElementBridge r4;
        java.util.HashMap r98, $r122;
        org.w3c.dom.svg.SVGAnimatedLength $r29;
        org.apache.batik.gvt.text.TextPath r5;
        java.util.WeakHashMap $r102;
        double $d0, $d1, $d2, $d3;
        char $c0, $c1, $c6, $c7;
        org.apache.batik.gvt.text.TextPaintInfo $r110;

        r4 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r8 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        r5 := @parameter2: org.apache.batik.gvt.text.TextPath;

        r16 := @parameter3: java.lang.Integer;

        r3 := @parameter4: java.util.Map;

        r97 = null;

        $z0 = r0 instanceof org.w3c.dom.svg.SVGTextContentElement;

        if $z0 == 0 goto label01;

        r97 = (org.w3c.dom.svg.SVGTextContentElement) r0;

     label01:
        r98 = null;

        $r1 = "http://www.w3.org/2000/svg";

        $r2 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label02;

        $r92 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z3 = virtualinvoke $r92.<java.lang.String: boolean equals(java.lang.Object)>("altGlyph");

        if $z3 == 0 goto label02;

        $r94 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute ALT_GLYPH_HANDLER>;

        $r109 = new org.apache.batik.bridge.SVGAltGlyphHandler;

        specialinvoke $r109.<org.apache.batik.bridge.SVGAltGlyphHandler: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r8, r0);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r94, $r109);

     label02:
        $r110 = new org.apache.batik.gvt.text.TextPaintInfo;

        specialinvoke $r110.<org.apache.batik.gvt.text.TextPaintInfo: void <init>()>();

        $r110.<org.apache.batik.gvt.text.TextPaintInfo: boolean visible> = 1;

        $r100 = <java.awt.Color: java.awt.Color black>;

        $r110.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint> = $r100;

        $r101 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute PAINT_INFO>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r101, $r110);

        $r102 = r4.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        virtualinvoke $r102.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r110);

        if r5 == null goto label03;

        $r91 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute TEXTPATH>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r91, r5);

     label03:
        $r6 = staticinvoke <org.apache.batik.bridge.TextUtilities: org.apache.batik.gvt.TextNode$Anchor convertTextAnchor(org.w3c.dom.Element)>(r0);

        $r7 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute ANCHOR_TYPE>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r6);

        $r9 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge: java.util.List getFontList(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.util.Map)>(r8, r0, r3);

        $r10 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute GVT_FONTS>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r9);

        $r11 = staticinvoke <org.apache.batik.bridge.TextUtilities: java.lang.Object convertBaselineShift(org.w3c.dom.Element)>(r0);

        if $r11 == null goto label04;

        $r90 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute BASELINE_SHIFT>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r90, $r11);

     label04:
        $r12 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 56);

        $r13 = interfaceinvoke $r12.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c0 = virtualinvoke $r13.<java.lang.String: char charAt(int)>(0);

        $i10 = (int) $c0;

        if $i10 != 110 goto label05;

        if r16 == null goto label15;

        $r89 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r89, r16);

        goto label15;

     label05:
        $r14 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 11);

        $r15 = interfaceinvoke $r14.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        i5 = 0;

        if r16 == null goto label06;

        i5 = virtualinvoke r16.<java.lang.Integer: int intValue()>();

     label06:
        if i5 >= 0 goto label07;

        i5 = neg i5;

     label07:
        $c1 = virtualinvoke $r15.<java.lang.String: char charAt(int)>(0);

        $i11 = (int) $c1;

        lookupswitch($i11)
        {
            case 108: goto label08;
            case 114: goto label10;
            default: goto label12;
        };

     label08:
        $r88 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;

        $r87 = <java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_LTR>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r88, $r87);

        $i4 = i5 & 1;

        if $i4 != 1 goto label09;

        i5 = i5 + 1;

        goto label12;

     label09:
        i5 = i5 + 2;

        goto label12;

     label10:
        $r18 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute RUN_DIRECTION>;

        $r17 = <java.awt.font.TextAttribute: java.lang.Boolean RUN_DIRECTION_RTL>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r17);

        $i2 = i5 & 1;

        if $i2 != 1 goto label11;

        i5 = i5 + 2;

        goto label12;

     label11:
        i5 = i5 + 1;

     label12:
        $c6 = virtualinvoke $r13.<java.lang.String: char charAt(int)>(0);

        $i12 = (int) $c6;

        lookupswitch($i12)
        {
            case 98: goto label13;
            default: goto label14;
        };

     label13:
        i5 = neg i5;

     label14:
        $r20 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute BIDI_EMBEDDING>;

        $r111 = new java.lang.Integer;

        specialinvoke $r111.<java.lang.Integer: void <init>(int)>(i5);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r111);

     label15:
        $r103 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 59);

        $r104 = interfaceinvoke $r103.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c7 = virtualinvoke $r104.<java.lang.String: char charAt(int)>(0);

        $i13 = (int) $c7;

        lookupswitch($i13)
        {
            case 108: goto label16;
            case 114: goto label17;
            case 116: goto label18;
            default: goto label19;
        };

     label16:
        $r86 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute WRITING_MODE>;

        $r85 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer WRITING_MODE_LTR>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r86, $r85);

        goto label19;

     label17:
        $r84 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute WRITING_MODE>;

        $r83 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer WRITING_MODE_RTL>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r84, $r83);

        goto label19;

     label18:
        $r22 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute WRITING_MODE>;

        $r21 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer WRITING_MODE_TTB>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r21);

     label19:
        $r105 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 29);

        $s8 = interfaceinvoke $r105.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i14 = (int) $s8;

        lookupswitch($i14)
        {
            case 11: goto label21;
            case 12: goto label22;
            case 13: goto label23;
            case 21: goto label20;
            default: goto label24;
        };

     label20:
        $r24 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute VERTICAL_ORIENTATION>;

        $r23 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ORIENTATION_AUTO>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r23);

        goto label25;

     label21:
        $r75 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute VERTICAL_ORIENTATION>;

        $r74 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ORIENTATION_ANGLE>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r75, $r74);

        $r77 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute VERTICAL_ORIENTATION_ANGLE>;

        $r112 = new java.lang.Float;

        $f10 = interfaceinvoke $r105.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        specialinvoke $r112.<java.lang.Float: void <init>(float)>($f10);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r77, $r112);

        goto label25;

     label22:
        $r71 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute VERTICAL_ORIENTATION>;

        $r70 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ORIENTATION_ANGLE>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r71, $r70);

        $r73 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute VERTICAL_ORIENTATION_ANGLE>;

        $r113 = new java.lang.Float;

        $f9 = interfaceinvoke $r105.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $d2 = (double) $f9;

        $d3 = staticinvoke <java.lang.Math: double toDegrees(double)>($d2);

        specialinvoke $r113.<java.lang.Float: void <init>(double)>($d3);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r73, $r113);

        goto label25;

     label23:
        $r67 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute VERTICAL_ORIENTATION>;

        $r66 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ORIENTATION_ANGLE>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r67, $r66);

        $r69 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute VERTICAL_ORIENTATION_ANGLE>;

        $r114 = new java.lang.Float;

        $f6 = interfaceinvoke $r105.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $f7 = $f6 * 9.0F;

        $f8 = $f7 / 5.0F;

        specialinvoke $r114.<java.lang.Float: void <init>(float)>($f8);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r69, $r114);

        goto label25;

     label24:
        $r116 = new java.lang.IllegalStateException;

        $r115 = new java.lang.StringBuffer;

        specialinvoke $r115.<java.lang.StringBuffer: void <init>()>();

        $r80 = virtualinvoke $r115.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unexpected primitiveType (V):");

        $i15 = (int) $s8;

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i15);

        $r82 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r116.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r82);

        throw $r116;

     label25:
        $r106 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 28);

        $s9 = interfaceinvoke $r106.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i16 = (int) $s9;

        tableswitch($i16)
        {
            case 11: goto label26;
            case 12: goto label27;
            case 13: goto label28;
            default: goto label29;
        };

     label26:
        $r60 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute HORIZONTAL_ORIENTATION_ANGLE>;

        $r117 = new java.lang.Float;

        $f5 = interfaceinvoke $r106.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        specialinvoke $r117.<java.lang.Float: void <init>(float)>($f5);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r60, $r117);

        goto label30;

     label27:
        $r58 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute HORIZONTAL_ORIENTATION_ANGLE>;

        $r118 = new java.lang.Float;

        $f4 = interfaceinvoke $r106.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $d0 = (double) $f4;

        $d1 = staticinvoke <java.lang.Math: double toDegrees(double)>($d0);

        specialinvoke $r118.<java.lang.Float: void <init>(double)>($d1);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r58, $r118);

        goto label30;

     label28:
        $r26 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute HORIZONTAL_ORIENTATION_ANGLE>;

        $r119 = new java.lang.Float;

        $f0 = interfaceinvoke $r106.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $f1 = $f0 * 9.0F;

        $f2 = $f1 / 5.0F;

        specialinvoke $r119.<java.lang.Float: void <init>(float)>($f2);

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r119);

        goto label30;

     label29:
        $r121 = new java.lang.IllegalStateException;

        $r120 = new java.lang.StringBuffer;

        specialinvoke $r120.<java.lang.StringBuffer: void <init>()>();

        $r63 = virtualinvoke $r120.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("unexpected primitiveType (H):");

        $i17 = (int) $s9;

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i17);

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r121.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r65);

        throw $r121;

     label30:
        $r107 = staticinvoke <org.apache.batik.bridge.TextUtilities: java.lang.Float convertLetterSpacing(org.w3c.dom.Element)>(r0);

        if $r107 == null goto label31;

        $r54 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LETTER_SPACING>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r54, $r107);

        $r56 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute CUSTOM_SPACING>;

        $r55 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r56, $r55);

     label31:
        $r27 = staticinvoke <org.apache.batik.bridge.TextUtilities: java.lang.Float convertWordSpacing(org.w3c.dom.Element)>(r0);

        if $r27 == null goto label32;

        $r51 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute WORD_SPACING>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r51, $r27);

        $r53 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute CUSTOM_SPACING>;

        $r52 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r53, $r52);

     label32:
        $r28 = staticinvoke <org.apache.batik.bridge.TextUtilities: java.lang.Float convertKerning(org.w3c.dom.Element)>(r0);

        if $r28 == null goto label33;

        $r48 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute KERNING>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r48, $r28);

        $r50 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute CUSTOM_SPACING>;

        $r49 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r50, $r49);

     label33:
        if r97 != null goto label34;

        return null;

     label34:
        $r29 = interfaceinvoke r97.<org.w3c.dom.svg.SVGTextContentElement: org.w3c.dom.svg.SVGAnimatedLength getTextLength()>();

        r108 = (org.apache.batik.dom.svg.AbstractSVGAnimatedLength) $r29;

        $z2 = virtualinvoke r108.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: boolean isSpecified()>();

        if $z2 == 0 goto label37;

        if null != null goto label35;

        $r122 = new java.util.HashMap;

        specialinvoke $r122.<java.util.HashMap: void <init>()>();

        r98 = $r122;

     label35:
        $r123 = new java.lang.Float;

        $f3 = virtualinvoke r108.<org.apache.batik.dom.svg.AbstractSVGAnimatedLength: float getCheckedValue()>();

        specialinvoke $r123.<java.lang.Float: void <init>(float)>($f3);

        $r31 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute BBOX_WIDTH>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, $r123);

        $r32 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute BBOX_WIDTH>;

        interfaceinvoke r98.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, $r123);

        $r33 = interfaceinvoke r97.<org.w3c.dom.svg.SVGTextContentElement: org.w3c.dom.svg.SVGAnimatedEnumeration getLengthAdjust()>();

        $r47 = (org.apache.batik.dom.svg.SVGOMAnimatedEnumeration) $r33;

        $s3 = virtualinvoke $r47.<org.apache.batik.dom.svg.SVGOMAnimatedEnumeration: short getCheckedVal()>();

        $i18 = (int) $s3;

        if $i18 != 2 goto label36;

        $r43 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LENGTH_ADJUST>;

        $r42 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ADJUST_ALL>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, $r42);

        $r45 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LENGTH_ADJUST>;

        $r44 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ADJUST_ALL>;

        interfaceinvoke r98.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r45, $r44);

        goto label37;

     label36:
        $r35 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LENGTH_ADJUST>;

        $r34 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ADJUST_SPACING>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, $r34);

        $r37 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute LENGTH_ADJUST>;

        $r36 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: java.lang.Integer ADJUST_SPACING>;

        interfaceinvoke r98.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, $r36);

        $r39 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute CUSTOM_SPACING>;

        $r38 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, $r38);

        $r41 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute CUSTOM_SPACING>;

        $r40 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r98.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r41, $r40);

     label37:
        goto label39;

     label38:
        $r95 := @caughtexception;

        $r124 = new org.apache.batik.bridge.BridgeException;

        specialinvoke $r124.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.apache.batik.dom.svg.LiveAttributeException)>(r8, $r95);

        throw $r124;

     label39:
        return r98;

        catch org.apache.batik.dom.svg.LiveAttributeException from label34 to label37 with label38;
    }

    protected org.apache.batik.gvt.text.TextPaintInfo getParentTextPaintInfo(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element r1;
        org.w3c.dom.Node r5;
        java.lang.Object $r3;
        java.util.WeakHashMap $r2;
        org.apache.batik.gvt.text.TextPaintInfo r4;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r1 := @parameter0: org.w3c.dom.Element;

        r5 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getParentNode(org.w3c.dom.Node)>(r1);

        goto label3;

     label1:
        $r2 = r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.WeakHashMap elemTPI>;

        $r3 = virtualinvoke $r2.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r5);

        r4 = (org.apache.batik.gvt.text.TextPaintInfo) $r3;

        if r4 == null goto label2;

        return r4;

     label2:
        r5 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getParentNode(org.w3c.dom.Node)>(r5);

     label3:
        if r5 != null goto label1;

        return null;
    }

    protected org.apache.batik.gvt.text.TextPaintInfo getTextPaintInfo(org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.gvt.text.TextPaintInfo, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.bridge.SVGTextElementBridge r5;
        org.apache.batik.gvt.GraphicsNode r6;
        org.apache.batik.bridge.BridgeContext r7;
        org.apache.batik.css.engine.CSSStylableElement $r3;
        org.apache.batik.gvt.text.TextPaintInfo $r1, r2;
        org.w3c.dom.Element r0;
        org.apache.batik.css.engine.StyleMap $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r5 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r0 := @parameter0: org.w3c.dom.Element;

        r6 := @parameter1: org.apache.batik.gvt.GraphicsNode;

        r2 := @parameter2: org.apache.batik.gvt.text.TextPaintInfo;

        r7 := @parameter3: org.apache.batik.bridge.BridgeContext;

        staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 54);

        $r1 = new org.apache.batik.gvt.text.TextPaintInfo;

        specialinvoke $r1.<org.apache.batik.gvt.text.TextPaintInfo: void <init>(org.apache.batik.gvt.text.TextPaintInfo)>(r2);

        $r3 = (org.apache.batik.css.engine.CSSStylableElement) r0;

        $r4 = interfaceinvoke $r3.<org.apache.batik.css.engine.CSSStylableElement: org.apache.batik.css.engine.StyleMap getComputedStyleMap(java.lang.String)>(null);

        $z0 = virtualinvoke $r4.<org.apache.batik.css.engine.StyleMap: boolean isNullCascaded(int)>(54);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r4.<org.apache.batik.css.engine.StyleMap: boolean isNullCascaded(int)>(15);

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke $r4.<org.apache.batik.css.engine.StyleMap: boolean isNullCascaded(int)>(45);

        if $z2 == 0 goto label1;

        $z3 = virtualinvoke $r4.<org.apache.batik.css.engine.StyleMap: boolean isNullCascaded(int)>(52);

        if $z3 == 0 goto label1;

        $z4 = virtualinvoke $r4.<org.apache.batik.css.engine.StyleMap: boolean isNullCascaded(int)>(38);

        if $z4 == 0 goto label1;

        return $r1;

     label1:
        virtualinvoke r5.<org.apache.batik.bridge.SVGTextElementBridge: void setBaseTextPaintInfo(org.apache.batik.gvt.text.TextPaintInfo,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>($r1, r0, r6, r7);

        $z5 = virtualinvoke $r4.<org.apache.batik.css.engine.StyleMap: boolean isNullCascaded(int)>(54);

        if $z5 != 0 goto label2;

        virtualinvoke r5.<org.apache.batik.bridge.SVGTextElementBridge: void setDecorationTextPaintInfo(org.apache.batik.gvt.text.TextPaintInfo,org.w3c.dom.Element)>($r1, r0);

     label2:
        return $r1;
    }

    public void setBaseTextPaintInfo(org.apache.batik.gvt.text.TextPaintInfo, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.Stroke $r8;
        org.apache.batik.bridge.SVGTextElementBridge r10;
        java.awt.Composite $r9;
        org.apache.batik.gvt.GraphicsNode r4;
        org.apache.batik.bridge.BridgeContext r5;
        org.apache.batik.gvt.text.TextPaintInfo r2;
        java.awt.AlphaComposite $r3;
        org.w3c.dom.Element r0;
        java.awt.Paint $r6, $r7;
        java.lang.String $r1;
        boolean $z0, $z1;

        r10 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r2 := @parameter0: org.apache.batik.gvt.text.TextPaintInfo;

        r0 := @parameter1: org.w3c.dom.Element;

        r4 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        r5 := @parameter3: org.apache.batik.bridge.BridgeContext;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("text");

        if $z0 != 0 goto label1;

        $r9 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.Composite convertOpacity(org.w3c.dom.Element)>(r0);

        r2.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Composite composite> = $r9;

        goto label2;

     label1:
        $r3 = <java.awt.AlphaComposite: java.awt.AlphaComposite SrcOver>;

        r2.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Composite composite> = $r3;

     label2:
        $z1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertVisibility(org.w3c.dom.Element)>(r0);

        r2.<org.apache.batik.gvt.text.TextPaintInfo: boolean visible> = $z1;

        $r6 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Paint convertFillPaint(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r0, r4, r5);

        r2.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint> = $r6;

        $r7 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Paint convertStrokePaint(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r0, r4, r5);

        r2.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strokePaint> = $r7;

        $r8 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Stroke convertStroke(org.w3c.dom.Element)>(r0);

        r2.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strokeStroke> = $r8;

        return;
    }

    public void setDecorationTextPaintInfo(org.apache.batik.gvt.text.TextPaintInfo, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.SVGTextElementBridge r24;
        short $s0;
        int $i1, i3, $i4, $i5;
        java.lang.String $r4;
        java.awt.Stroke $r8, $r9, $r14, $r15, $r20, $r21;
        char $c2;
        org.apache.batik.css.engine.value.Value $r1, $r3;
        org.apache.batik.css.engine.value.ListValue r2;
        org.apache.batik.gvt.text.TextPaintInfo r5;
        org.w3c.dom.Element r0;
        java.awt.Paint $r6, $r7, $r10, $r11, $r12, $r13, $r16, $r17, $r18, $r19, $r22, $r23;

        r24 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r5 := @parameter0: org.apache.batik.gvt.text.TextPaintInfo;

        r0 := @parameter1: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 54);

        $s0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        $i4 = (int) $s0;

        lookupswitch($i4)
        {
            case 2: goto label01;
            default: goto label14;
        };

     label01:
        r2 = (org.apache.batik.css.engine.value.ListValue) $r1;

        $i1 = virtualinvoke r2.<org.apache.batik.css.engine.value.ListValue: int getLength()>();

        i3 = 0;

        goto label13;

     label02:
        $r3 = virtualinvoke r2.<org.apache.batik.css.engine.value.ListValue: org.apache.batik.css.engine.value.Value item(int)>(i3);

        $r4 = interfaceinvoke $r3.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c2 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0);

        $i5 = (int) $c2;

        lookupswitch($i5)
        {
            case 108: goto label09;
            case 111: goto label06;
            case 117: goto label03;
            default: goto label12;
        };

     label03:
        $r6 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint>;

        if $r6 == null goto label04;

        $r11 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint>;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint underlinePaint> = $r11;

     label04:
        $r7 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strokePaint>;

        if $r7 == null goto label05;

        $r10 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strokePaint>;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint underlineStrokePaint> = $r10;

     label05:
        $r8 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strokeStroke>;

        if $r8 == null goto label12;

        $r9 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strokeStroke>;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke underlineStroke> = $r9;

        goto label12;

     label06:
        $r12 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint>;

        if $r12 == null goto label07;

        $r17 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint>;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint overlinePaint> = $r17;

     label07:
        $r13 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strokePaint>;

        if $r13 == null goto label08;

        $r16 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strokePaint>;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint overlineStrokePaint> = $r16;

     label08:
        $r14 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strokeStroke>;

        if $r14 == null goto label12;

        $r15 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strokeStroke>;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke overlineStroke> = $r15;

        goto label12;

     label09:
        $r18 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint>;

        if $r18 == null goto label10;

        $r23 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint fillPaint>;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strikethroughPaint> = $r23;

     label10:
        $r19 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strokePaint>;

        if $r19 == null goto label11;

        $r22 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strokePaint>;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strikethroughStrokePaint> = $r22;

     label11:
        $r20 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strokeStroke>;

        if $r20 == null goto label12;

        $r21 = r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strokeStroke>;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strikethroughStroke> = $r21;

     label12:
        i3 = i3 + 1;

     label13:
        if i3 < $i1 goto label02;

        goto label15;

     label14:
        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint underlinePaint> = null;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint underlineStrokePaint> = null;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke underlineStroke> = null;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint overlinePaint> = null;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint overlineStrokePaint> = null;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke overlineStroke> = null;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strikethroughPaint> = null;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Paint strikethroughStrokePaint> = null;

        r5.<org.apache.batik.gvt.text.TextPaintInfo: java.awt.Stroke strikethroughStroke> = null;

     label15:
        return;
    }

    public int getNumberOfChars()
    {
        int $i0;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element $r1;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $i0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: int getNumberOfChars(org.w3c.dom.Element)>($r1);

        return $i0;
    }

    public java.awt.geom.Rectangle2D getExtentOfChar(int)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element $r1;
        java.awt.geom.Rectangle2D $r2;
        int i0;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.awt.geom.Rectangle2D getExtentOfChar(org.w3c.dom.Element,int)>($r1, i0);

        return $r2;
    }

    public java.awt.geom.Point2D getStartPositionOfChar(int)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element $r1;
        java.awt.geom.Point2D $r2;
        int i0;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.awt.geom.Point2D getStartPositionOfChar(org.w3c.dom.Element,int)>($r1, i0);

        return $r2;
    }

    public java.awt.geom.Point2D getEndPositionOfChar(int)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element $r1;
        java.awt.geom.Point2D $r2;
        int i0;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r2 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.awt.geom.Point2D getEndPositionOfChar(org.w3c.dom.Element,int)>($r1, i0);

        return $r2;
    }

    public void selectSubString(int, int)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element $r1;
        int i0, i1;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: void selectSubString(org.w3c.dom.Element,int,int)>($r1, i0, i1);

        return;
    }

    public float getRotationOfChar(int)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element $r1;
        int i0;
        float $f0;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $f0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: float getRotationOfChar(org.w3c.dom.Element,int)>($r1, i0);

        return $f0;
    }

    public float getComputedTextLength()
    {
        float $f0;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element $r1;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $f0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: float getComputedTextLength(org.w3c.dom.Element)>($r1);

        return $f0;
    }

    public float getSubStringLength(int, int)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element $r1;
        int i0, i1;
        float $f0;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $f0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: float getSubStringLength(org.w3c.dom.Element,int,int)>($r1, i0, i1);

        return $f0;
    }

    public int getCharNumAtPosition(float, float)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element $r1;
        int $i0;
        float f0, f1;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $i0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: int getCharNumAtPosition(org.w3c.dom.Element,float,float)>($r1, f0, f1);

        return $i0;
    }

    protected int getNumberOfChars(org.w3c.dom.Element)
    {
        org.apache.batik.gvt.TextNode $r1;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element r3;
        java.text.AttributedCharacterIterator $r2;
        int $i0, $i1, $i2, $i3, $i5;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r3 := @parameter0: org.w3c.dom.Element;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        $r2 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r2 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: int getElementStartIndex(org.w3c.dom.Element)>(r3);

        $i5 = (int) -1;

        if $i0 != $i5 goto label2;

        return 0;

     label2:
        $i1 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: int getElementEndIndex(org.w3c.dom.Element)>(r3);

        $i2 = $i1 - $i0;

        $i3 = $i2 + 1;

        return $i3;
    }

    protected java.awt.geom.Rectangle2D getExtentOfChar(org.w3c.dom.Element, int)
    {
        org.apache.batik.gvt.TextNode $r1;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        java.awt.geom.Rectangle2D $r8, $r10;
        org.apache.batik.gvt.font.GVTGlyphVector $r7;
        int $i0, i1, $i2, $i3, $i4, $i5, i6, $i7, $i9;
        boolean $z0, $z1;
        java.awt.Shape r11;
        org.apache.batik.gvt.text.TextSpanLayout $r6;
        java.util.List $r4;
        org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation $r5;
        org.w3c.dom.Element r3;
        java.text.AttributedCharacterIterator $r2;
        java.awt.geom.GeneralPath r12, $r13;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r3 := @parameter0: org.w3c.dom.Element;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        $r2 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r2 != null goto label01;

        return null;

     label01:
        $i0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: int getElementStartIndex(org.w3c.dom.Element)>(r3);

        $i9 = (int) -1;

        if $i0 != $i9 goto label02;

        return null;

     label02:
        $r4 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.List getTextRuns(org.apache.batik.gvt.TextNode)>($r1);

        $r5 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation getCharacterInformation(java.util.List,int,int,java.text.AttributedCharacterIterator)>($r4, $i0, i1, $r2);

        if $r5 != null goto label03;

        return null;

     label03:
        $r6 = $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $r7 = interfaceinvoke $r6.<org.apache.batik.gvt.text.TextSpanLayout: org.apache.batik.gvt.font.GVTGlyphVector getGlyphVector()>();

        r11 = null;

        $i3 = $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart>;

        $i2 = $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd>;

        if $i3 != $i2 goto label04;

        $i4 = $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart>;

        $z1 = interfaceinvoke $r7.<org.apache.batik.gvt.font.GVTGlyphVector: boolean isGlyphVisible(int)>($i4);

        if $z1 == 0 goto label09;

        $i5 = $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart>;

        r11 = interfaceinvoke $r7.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.geom.Rectangle2D getGlyphCellBounds(int)>($i5);

        goto label09;

     label04:
        r12 = null;

        i6 = $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart>;

        goto label08;

     label05:
        $z0 = interfaceinvoke $r7.<org.apache.batik.gvt.font.GVTGlyphVector: boolean isGlyphVisible(int)>(i6);

        if $z0 == 0 goto label07;

        $r8 = interfaceinvoke $r7.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.geom.Rectangle2D getGlyphCellBounds(int)>(i6);

        if r12 != null goto label06;

        $r13 = new java.awt.geom.GeneralPath;

        specialinvoke $r13.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r8);

        r12 = $r13;

        goto label07;

     label06:
        virtualinvoke r12.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r8, 0);

     label07:
        i6 = i6 + 1;

     label08:
        $i7 = $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd>;

        if i6 <= $i7 goto label05;

        r11 = r12;

     label09:
        if r11 != null goto label10;

        return null;

     label10:
        $r10 = interfaceinvoke r11.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r10;
    }

    protected java.awt.geom.Point2D getStartPositionOfChar(org.w3c.dom.Element, int)
    {
        org.apache.batik.gvt.TextNode $r1;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        java.awt.geom.Point2D $r6;
        java.util.List $r4;
        org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation $r5;
        org.w3c.dom.Element r3;
        java.text.AttributedCharacterIterator $r2;
        int $i0, i1, $i3;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r3 := @parameter0: org.w3c.dom.Element;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        $r2 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: int getElementStartIndex(org.w3c.dom.Element)>(r3);

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        return null;

     label2:
        $r4 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.List getTextRuns(org.apache.batik.gvt.TextNode)>($r1);

        $r5 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation getCharacterInformation(java.util.List,int,int,java.text.AttributedCharacterIterator)>($r4, $i0, i1, $r2);

        if $r5 != null goto label3;

        return null;

     label3:
        $r6 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.awt.geom.Point2D getStartPoint(org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation)>($r5);

        return $r6;
    }

    protected java.awt.geom.Point2D getStartPoint(org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation)
    {
        org.apache.batik.bridge.SVGTextElementBridge r6;
        java.awt.geom.Point2D $r3;
        org.apache.batik.gvt.font.GVTGlyphVector $r2;
        int $i0, $i1, $i2;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.batik.gvt.text.TextSpanLayout $r1;
        java.awt.geom.AffineTransform $r4;
        org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation r0;
        java.awt.geom.Point2D$Float $r5;
        float $f0, $f1, $f2, $f3;

        r6 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r0 := @parameter0: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation;

        $r1 = r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.gvt.text.TextSpanLayout: org.apache.batik.gvt.font.GVTGlyphVector getGlyphVector()>();

        $i0 = r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart>;

        $z0 = interfaceinvoke $r2.<org.apache.batik.gvt.font.GVTGlyphVector: boolean isGlyphVisible(int)>($i0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $i1 = r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart>;

        $r3 = interfaceinvoke $r2.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>($i1);

        $i2 = r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart>;

        $r4 = interfaceinvoke $r2.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.geom.AffineTransform getGlyphTransform(int)>($i2);

        $r5 = new java.awt.geom.Point2D$Float;

        specialinvoke $r5.<java.awt.geom.Point2D$Float: void <init>(float,float)>(0.0F, 0.0F);

        if $r4 == null goto label2;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r5, $r5);

     label2:
        $f0 = $r5.<java.awt.geom.Point2D$Float: float x>;

        $d0 = (double) $f0;

        $d1 = virtualinvoke $r3.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 + $d1;

        $f1 = (float) $d2;

        $r5.<java.awt.geom.Point2D$Float: float x> = $f1;

        $f2 = $r5.<java.awt.geom.Point2D$Float: float y>;

        $d3 = (double) $f2;

        $d4 = virtualinvoke $r3.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 + $d4;

        $f3 = (float) $d5;

        $r5.<java.awt.geom.Point2D$Float: float y> = $f3;

        return $r5;
    }

    protected java.awt.geom.Point2D getEndPositionOfChar(org.w3c.dom.Element, int)
    {
        org.apache.batik.gvt.TextNode $r1;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        java.awt.geom.Point2D $r6;
        java.util.List $r4;
        org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation $r5;
        org.w3c.dom.Element r3;
        java.text.AttributedCharacterIterator $r2;
        int $i0, i1, $i3;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r3 := @parameter0: org.w3c.dom.Element;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        $r2 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: int getElementStartIndex(org.w3c.dom.Element)>(r3);

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        return null;

     label2:
        $r4 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.List getTextRuns(org.apache.batik.gvt.TextNode)>($r1);

        $r5 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation getCharacterInformation(java.util.List,int,int,java.text.AttributedCharacterIterator)>($r4, $i0, i1, $r2);

        if $r5 != null goto label3;

        return null;

     label3:
        $r6 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.awt.geom.Point2D getEndPoint(org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation)>($r5);

        return $r6;
    }

    protected java.awt.geom.Point2D getEndPoint(org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation)
    {
        org.apache.batik.bridge.SVGTextElementBridge r7;
        java.awt.geom.Point2D $r3;
        org.apache.batik.gvt.font.GVTGlyphMetrics $r5;
        org.apache.batik.gvt.font.GVTGlyphVector $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.batik.gvt.text.TextSpanLayout $r1;
        java.awt.geom.AffineTransform $r4;
        org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation r0;
        java.awt.geom.Point2D$Float $r6;
        float $f0, $f1, $f2, $f3, $f4;

        r7 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r0 := @parameter0: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation;

        $r1 = r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.gvt.text.TextSpanLayout: org.apache.batik.gvt.font.GVTGlyphVector getGlyphVector()>();

        $i0 = r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd>;

        $z0 = interfaceinvoke $r2.<org.apache.batik.gvt.font.GVTGlyphVector: boolean isGlyphVisible(int)>($i0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $i1 = r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd>;

        $r3 = interfaceinvoke $r2.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>($i1);

        $i2 = r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd>;

        $r4 = interfaceinvoke $r2.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.geom.AffineTransform getGlyphTransform(int)>($i2);

        $i3 = r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd>;

        $r5 = interfaceinvoke $r2.<org.apache.batik.gvt.font.GVTGlyphVector: org.apache.batik.gvt.font.GVTGlyphMetrics getGlyphMetrics(int)>($i3);

        $r6 = new java.awt.geom.Point2D$Float;

        $f0 = virtualinvoke $r5.<org.apache.batik.gvt.font.GVTGlyphMetrics: float getHorizontalAdvance()>();

        specialinvoke $r6.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f0, 0.0F);

        if $r4 == null goto label2;

        virtualinvoke $r4.<java.awt.geom.AffineTransform: java.awt.geom.Point2D transform(java.awt.geom.Point2D,java.awt.geom.Point2D)>($r6, $r6);

     label2:
        $f1 = $r6.<java.awt.geom.Point2D$Float: float x>;

        $d0 = (double) $f1;

        $d1 = virtualinvoke $r3.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 + $d1;

        $f2 = (float) $d2;

        $r6.<java.awt.geom.Point2D$Float: float x> = $f2;

        $f3 = $r6.<java.awt.geom.Point2D$Float: float y>;

        $d3 = (double) $f3;

        $d4 = virtualinvoke $r3.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 + $d4;

        $f4 = (float) $d5;

        $r6.<java.awt.geom.Point2D$Float: float y> = $f4;

        return $r6;
    }

    protected float getRotationOfChar(org.w3c.dom.Element, int)
    {
        org.apache.batik.gvt.TextNode $r1;
        byte $b2, $b3, $b4;
        boolean $z0;
        java.awt.geom.AffineTransform $r8;
        java.util.List $r4;
        java.text.AttributedCharacterIterator $r2;
        float $f0;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.apache.batik.gvt.font.GVTGlyphVector $r7;
        int $i0, i1, i5, i6, $i7, $i9, $i10, $i11;
        double $d0, $d1, $d2, $d3, $d4, $d5, d6, d7, $d8, $d9, $d10, $d11, $d12;
        org.apache.batik.gvt.text.TextSpanLayout $r6;
        org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation $r5;
        org.w3c.dom.Element r3;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r3 := @parameter0: org.w3c.dom.Element;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        $r2 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r2 != null goto label01;

        return 0.0F;

     label01:
        $i0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: int getElementStartIndex(org.w3c.dom.Element)>(r3);

        $i9 = (int) -1;

        if $i0 != $i9 goto label02;

        return 0.0F;

     label02:
        $r4 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.List getTextRuns(org.apache.batik.gvt.TextNode)>($r1);

        $r5 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation getCharacterInformation(java.util.List,int,int,java.text.AttributedCharacterIterator)>($r4, $i0, i1, $r2);

        d6 = 0.0;

        i5 = 0;

        if $r5 == null goto label11;

        $r6 = $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $r7 = interfaceinvoke $r6.<org.apache.batik.gvt.text.TextSpanLayout: org.apache.batik.gvt.font.GVTGlyphVector getGlyphVector()>();

        i6 = $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart>;

        goto label10;

     label03:
        $z0 = interfaceinvoke $r7.<org.apache.batik.gvt.font.GVTGlyphVector: boolean isGlyphVisible(int)>(i6);

        if $z0 != 0 goto label04;

        goto label09;

     label04:
        i5 = i5 + 1;

        $r8 = interfaceinvoke $r7.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.geom.AffineTransform getGlyphTransform(int)>(i6);

        if $r8 != null goto label05;

        goto label09;

     label05:
        $d2 = virtualinvoke $r8.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d3 = virtualinvoke $r8.<java.awt.geom.AffineTransform: double getShearX()>();

        $b2 = $d2 cmpl 0.0;

        if $b2 != 0 goto label07;

        $b4 = $d3 cmpl 0.0;

        $i10 = (int) $b4;

        if $i10 <= 0 goto label06;

        d7 = 3.141592653589793;

        goto label08;

     label06:
        d7 = -3.141592653589793;

        goto label08;

     label07:
        $d4 = $d3 / $d2;

        $d5 = staticinvoke <java.lang.Math: double atan(double)>($d4);

        d7 = $d5;

        $b3 = $d2 cmpg 0.0;

        $i11 = (int) $b3;

        if $i11 >= 0 goto label08;

        d7 = $d5 + 3.141592653589793;

     label08:
        $d8 = neg d7;

        $d9 = staticinvoke <java.lang.Math: double toDegrees(double)>($d8);

        $d10 = $d9 % 360.0;

        $d11 = virtualinvoke $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: double getComputedOrientationAngle()>();

        $d12 = $d10 - $d11;

        d6 = d6 + $d12;

     label09:
        i6 = i6 + 1;

     label10:
        $i7 = $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd>;

        if i6 <= $i7 goto label03;

     label11:
        if i5 != 0 goto label12;

        return 0.0F;

     label12:
        $d0 = (double) i5;

        $d1 = d6 / $d0;

        $f0 = (float) $d1;

        return $f0;
    }

    protected float getComputedTextLength(org.w3c.dom.Element)
    {
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.w3c.dom.Element r1;
        int $i0;
        float $f0;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r1 := @parameter0: org.w3c.dom.Element;

        $i0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: int getNumberOfChars(org.w3c.dom.Element)>(r1);

        $f0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: float getSubStringLength(org.w3c.dom.Element,int,int)>(r1, 0, $i0);

        return $f0;
    }

    protected float getSubStringLength(org.w3c.dom.Element, int, int)
    {
        float[] $r8, $r15, $r21, r26;
        boolean[] r27;
        org.apache.batik.gvt.text.TextSpanLayout $r6, $r7, $r9, $r10, $r13, $r14, $r17, $r18, $r19, $r20, $r22;
        org.apache.batik.gvt.TextNode $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.List $r4;
        java.text.AttributedCharacterIterator $r2;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, f8;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        org.apache.batik.gvt.font.GVTGlyphVector r25;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, $i17, $i18, i19, $i20, $i22;
        org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation $r5, $r11, $r12, $r16, r23, r24;
        org.w3c.dom.Element r3;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r3 := @parameter0: org.w3c.dom.Element;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 != 0 goto label01;

        return 0.0F;

     label01:
        f8 = 0.0F;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        $r2 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r2 != null goto label02;

        return -1.0F;

     label02:
        $i1 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: int getElementStartIndex(org.w3c.dom.Element)>(r3);

        $i22 = (int) -1;

        if $i1 != $i22 goto label03;

        return -1.0F;

     label03:
        $r4 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.List getTextRuns(org.apache.batik.gvt.TextNode)>($r1);

        $r5 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation getCharacterInformation(java.util.List,int,int,java.text.AttributedCharacterIterator)>($r4, $i1, i2, $r2);

        r23 = $r5;

        r24 = null;

        $i3 = $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int characterIndex>;

        i14 = $i3 + 1;

        $r6 = $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        r25 = interfaceinvoke $r6.<org.apache.batik.gvt.text.TextSpanLayout: org.apache.batik.gvt.font.GVTGlyphVector getGlyphVector()>();

        $r7 = $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $r8 = interfaceinvoke $r7.<org.apache.batik.gvt.text.TextSpanLayout: float[] getGlyphAdvances()>();

        r26 = $r8;

        $i4 = lengthof $r8;

        r27 = newarray (boolean)[$i4];

        i15 = i2 + 1;

        goto label12;

     label04:
        $r9 = r23.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $z0 = interfaceinvoke $r9.<org.apache.batik.gvt.text.TextSpanLayout: boolean isOnATextPath()>();

        if $z0 == 0 goto label09;

        i16 = r23.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart>;

        goto label07;

     label05:
        $z2 = interfaceinvoke r25.<org.apache.batik.gvt.font.GVTGlyphVector: boolean isGlyphVisible(int)>(i16);

        if $z2 == 0 goto label06;

        $z3 = r27[i16];

        if $z3 != 0 goto label06;

        $i8 = i16 + 1;

        $f2 = r26[$i8];

        $f1 = r26[i16];

        $f3 = $f2 - $f1;

        f8 = f8 + $f3;

     label06:
        r27[i16] = 1;

        i16 = i16 + 1;

     label07:
        $i17 = r23.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd>;

        if i16 <= $i17 goto label05;

        $r16 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation getCharacterInformation(java.util.List,int,int,java.text.AttributedCharacterIterator)>($r4, $i1, i15, $r2);

        $r18 = $r16.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $r17 = r23.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        if $r18 == $r17 goto label08;

        $r19 = $r16.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        r25 = interfaceinvoke $r19.<org.apache.batik.gvt.text.TextSpanLayout: org.apache.batik.gvt.font.GVTGlyphVector getGlyphVector()>();

        $r20 = $r16.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $r21 = interfaceinvoke $r20.<org.apache.batik.gvt.text.TextSpanLayout: float[] getGlyphAdvances()>();

        r26 = $r21;

        $i9 = lengthof $r21;

        r27 = newarray (boolean)[$i9];

        $i10 = r23.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int characterIndex>;

        i14 = $i10 + 1;

     label08:
        r23 = $r16;

        goto label11;

     label09:
        $r10 = r23.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $z1 = interfaceinvoke $r10.<org.apache.batik.gvt.text.TextSpanLayout: boolean hasCharacterIndex(int)>(i14);

        if $z1 == 0 goto label10;

        i14 = i14 + 1;

        goto label11;

     label10:
        $i5 = i15 - 1;

        $r11 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation getCharacterInformation(java.util.List,int,int,java.text.AttributedCharacterIterator)>($r4, $i1, $i5, $r2);

        $f0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: float distanceFirstLastCharacterInRun(org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation,org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation)>(r23, $r11);

        f8 = f8 + $f0;

        $r12 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation getCharacterInformation(java.util.List,int,int,java.text.AttributedCharacterIterator)>($r4, $i1, i15, $r2);

        r23 = $r12;

        $i6 = $r12.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int characterIndex>;

        i14 = $i6 + 1;

        $r13 = $r12.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        r25 = interfaceinvoke $r13.<org.apache.batik.gvt.text.TextSpanLayout: org.apache.batik.gvt.font.GVTGlyphVector getGlyphVector()>();

        $r14 = $r12.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $r15 = interfaceinvoke $r14.<org.apache.batik.gvt.text.TextSpanLayout: float[] getGlyphAdvances()>();

        r26 = $r15;

        $i7 = lengthof $r15;

        r27 = newarray (boolean)[$i7];

        r24 = null;

     label11:
        i15 = i15 + 1;

     label12:
        $i18 = i2 + i0;

        if i15 < $i18 goto label04;

        $r22 = r23.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $z4 = interfaceinvoke $r22.<org.apache.batik.gvt.text.TextSpanLayout: boolean isOnATextPath()>();

        if $z4 == 0 goto label16;

        i19 = r23.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart>;

        goto label15;

     label13:
        $z5 = interfaceinvoke r25.<org.apache.batik.gvt.font.GVTGlyphVector: boolean isGlyphVisible(int)>(i19);

        if $z5 == 0 goto label14;

        $z6 = r27[i19];

        if $z6 != 0 goto label14;

        $i13 = i19 + 1;

        $f6 = r26[$i13];

        $f5 = r26[i19];

        $f7 = $f6 - $f5;

        f8 = f8 + $f7;

     label14:
        r27[i19] = 1;

        i19 = i19 + 1;

     label15:
        $i20 = r23.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd>;

        if i19 <= $i20 goto label13;

        goto label18;

     label16:
        if null != null goto label17;

        $i11 = i2 + i0;

        $i12 = $i11 - 1;

        r24 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation getCharacterInformation(java.util.List,int,int,java.text.AttributedCharacterIterator)>($r4, $i1, $i12, $r2);

     label17:
        $f4 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: float distanceFirstLastCharacterInRun(org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation,org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation)>(r23, r24);

        f8 = f8 + $f4;

     label18:
        return f8;
    }

    protected float distanceFirstLastCharacterInRun(org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation, org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation)
    {
        org.apache.batik.bridge.SVGTextElementBridge r4;
        float[] $r2;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7;
        org.apache.batik.gvt.text.TextSpanLayout $r1;
        org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation r0, r3;
        float $f0, $f1, $f2;

        r4 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r0 := @parameter0: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation;

        r3 := @parameter1: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation;

        $r1 = r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.gvt.text.TextSpanLayout: float[] getGlyphAdvances()>();

        i0 = r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart>;

        i1 = r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd>;

        i2 = r3.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart>;

        i3 = r3.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd>;

        if i0 >= i2 goto label1;

        $i6 = i0;

        goto label2;

     label1:
        $i6 = i2;

     label2:
        i4 = $i6;

        if i1 >= i3 goto label3;

        $i7 = i3;

        goto label4;

     label3:
        $i7 = i1;

     label4:
        $i5 = $i7 + 1;

        $f1 = $r2[$i5];

        $f0 = $r2[i4];

        $f2 = $f1 - $f0;

        return $f2;
    }

    protected float distanceBetweenRun(org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation, org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation)
    {
        org.apache.batik.bridge.SVGTextElementBridge r4;
        java.awt.geom.Point2D $r5, $r8;
        int $i0, $i1;
        boolean $z0;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        org.apache.batik.gvt.text.TextSpanLayout $r2, $r3, $r7;
        org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation $r0, r1, r6;
        float f0;

        r4 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r1 := @parameter0: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation;

        r6 := @parameter1: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation;

        $r0 = new org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation;

        specialinvoke $r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: void <init>()>();

        $r2 = r1.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout> = $r2;

        $r3 = r1.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $i0 = interfaceinvoke $r3.<org.apache.batik.gvt.text.TextSpanLayout: int getGlyphCount()>();

        $i1 = $i0 - 1;

        $r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd> = $i1;

        $r5 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge: java.awt.geom.Point2D getEndPoint(org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation)>($r0);

        $r7 = r6.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout> = $r7;

        $r0.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart> = 0;

        $r8 = virtualinvoke r4.<org.apache.batik.bridge.SVGTextElementBridge: java.awt.geom.Point2D getStartPoint(org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation)>($r0);

        $z0 = virtualinvoke r6.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: boolean isVertical()>();

        if $z0 == 0 goto label1;

        $d3 = virtualinvoke $r8.<java.awt.geom.Point2D: double getY()>();

        $d4 = virtualinvoke $r5.<java.awt.geom.Point2D: double getY()>();

        $d5 = $d3 - $d4;

        f0 = (float) $d5;

        goto label2;

     label1:
        $d0 = virtualinvoke $r8.<java.awt.geom.Point2D: double getX()>();

        $d1 = virtualinvoke $r5.<java.awt.geom.Point2D: double getX()>();

        $d2 = $d0 - $d1;

        f0 = (float) $d2;

     label2:
        return f0;
    }

    protected void selectSubString(org.w3c.dom.Element, int, int)
    {
        org.apache.batik.gvt.TextNode $r1;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        int $i0, $i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i10;
        org.apache.batik.bridge.BridgeContext $r9;
        java.util.List $r4;
        org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation $r5, $r6;
        org.apache.batik.bridge.UserAgent $r10;
        org.w3c.dom.Element r3;
        org.apache.batik.gvt.text.Mark $r7, r8;
        java.text.AttributedCharacterIterator $r2;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r3 := @parameter0: org.w3c.dom.Element;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        $r2 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r2 != null goto label1;

        return;

     label1:
        $i0 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: int getElementStartIndex(org.w3c.dom.Element)>(r3);

        $i10 = (int) -1;

        if $i0 != $i10 goto label2;

        return;

     label2:
        $r4 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.List getTextRuns(org.apache.batik.gvt.TextNode)>($r1);

        $i1 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: int getElementEndIndex(org.w3c.dom.Element)>(r3);

        $r5 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation getCharacterInformation(java.util.List,int,int,java.text.AttributedCharacterIterator)>($r4, $i0, i2, $r2);

        $i4 = i2 + i3;

        $i5 = $i4 - 1;

        $r6 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation getCharacterInformation(java.util.List,int,int,java.text.AttributedCharacterIterator)>($r4, $i0, $i5, $r2);

        $i6 = $r5.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int characterIndex>;

        $r7 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark getMarkerForChar(int,boolean)>($i6, 1);

        if $r6 == null goto label3;

        $i7 = $r6.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int characterIndex>;

        if $i7 > $i1 goto label3;

        $i8 = $r6.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int characterIndex>;

        r8 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark getMarkerForChar(int,boolean)>($i8, 0);

        goto label4;

     label3:
        r8 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: org.apache.batik.gvt.text.Mark getMarkerForChar(int,boolean)>($i1, 0);

     label4:
        $r9 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r10 = virtualinvoke $r9.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        interfaceinvoke $r10.<org.apache.batik.bridge.UserAgent: void setTextSelection(org.apache.batik.gvt.text.Mark,org.apache.batik.gvt.text.Mark)>($r7, r8);

        return;
    }

    protected int getCharNumAtPosition(org.w3c.dom.Element, float, float)
    {
        org.apache.batik.gvt.TextNode $r1;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        int $i0, $i1, $i2, $i3, $i4, i5, $i7, $i9, $i11, $i13;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r8;
        org.apache.batik.gvt.text.TextSpanLayout $r6;
        java.util.List $r3;
        org.w3c.dom.Element r4;
        java.text.AttributedCharacterIterator $r2;
        float f0, f1;
        java.lang.Object $r5;
        org.apache.batik.gvt.text.TextHit r7;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r4 := @parameter0: org.w3c.dom.Element;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        $r2 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: java.text.AttributedCharacterIterator getAttributedCharacterIterator()>();

        if $r2 != null goto label1;

        $i7 = (int) -1;

        return $i7;

     label1:
        $r3 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: java.util.List getTextRuns(org.apache.batik.gvt.TextNode)>($r1);

        r7 = null;

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        i5 = $i0 - 1;

        goto label3;

     label2:
        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i5);

        r8 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r5;

        $r6 = virtualinvoke r8.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        r7 = interfaceinvoke $r6.<org.apache.batik.gvt.text.TextSpanLayout: org.apache.batik.gvt.text.TextHit hitTestChar(float,float)>(f0, f1);

        $i9 = (int) -1;

        i5 = i5 + $i9;

     label3:
        if i5 < 0 goto label4;

        if r7 == null goto label2;

     label4:
        if r7 != null goto label5;

        $i11 = (int) -1;

        return $i11;

     label5:
        $i1 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: int getElementStartIndex(org.w3c.dom.Element)>(r4);

        $i2 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: int getElementEndIndex(org.w3c.dom.Element)>(r4);

        $i3 = virtualinvoke r7.<org.apache.batik.gvt.text.TextHit: int getCharIndex()>();

        if $i3 < $i1 goto label6;

        if $i3 > $i2 goto label6;

        $i4 = $i3 - $i1;

        return $i4;

     label6:
        $i13 = (int) -1;

        return $i13;
    }

    protected java.util.List getTextRuns(org.apache.batik.gvt.TextNode)
    {
        org.apache.batik.gvt.TextNode r0;
        java.util.List $r1, $r2;
        org.apache.batik.bridge.SVGTextElementBridge r3;

        r3 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r0 := @parameter0: org.apache.batik.gvt.TextNode;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.util.List getTextRuns()>();

        if $r1 != null goto label1;

        virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.awt.geom.Rectangle2D getPrimitiveBounds()>();

     label1:
        $r2 = virtualinvoke r0.<org.apache.batik.gvt.TextNode: java.util.List getTextRuns()>();

        return $r2;
    }

    protected org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation getCharacterInformation(java.util.List, int, int, java.text.AttributedCharacterIterator)
    {
        org.apache.batik.bridge.SVGTextElementBridge r12;
        java.text.AttributedCharacterIterator$Attribute $r7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i16;
        boolean $z0;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r3;
        org.apache.batik.gvt.text.TextSpanLayout $r4, $r5, $r9, $r10, $r11;
        java.util.List r1;
        org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation $r13;
        java.text.AttributedCharacterIterator r6;
        java.lang.Object $r2, $r8;

        r12 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r6 := @parameter3: java.text.AttributedCharacterIterator;

        $r13 = new org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation;

        specialinvoke $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: void <init>()>();

        $i2 = i0 + i1;

        $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int characterIndex> = $i2;

        i14 = 0;

        goto label7;

     label1:
        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i14);

        r3 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r2;

        $r4 = virtualinvoke r3.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $i4 = $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int characterIndex>;

        $z0 = interfaceinvoke $r4.<org.apache.batik.gvt.text.TextSpanLayout: boolean hasCharacterIndex(int)>($i4);

        if $z0 != 0 goto label2;

        goto label6;

     label2:
        $r5 = virtualinvoke r3.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout> = $r5;

        $i5 = $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int characterIndex>;

        interfaceinvoke r6.<java.text.CharacterIterator: char setIndex(int)>($i5);

        $r7 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute ALT_GLYPH_HANDLER>;

        $r8 = interfaceinvoke r6.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r7);

        if $r8 == null goto label3;

        $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart> = 0;

        $r11 = $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $i12 = interfaceinvoke $r11.<org.apache.batik.gvt.text.TextSpanLayout: int getGlyphCount()>();

        $i13 = $i12 - 1;

        $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd> = $i13;

        goto label5;

     label3:
        $r9 = $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $i6 = $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int characterIndex>;

        $i7 = interfaceinvoke $r9.<org.apache.batik.gvt.text.TextSpanLayout: int getGlyphIndex(int)>($i6);

        $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart> = $i7;

        $i8 = $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart>;

        $i16 = (int) -1;

        if $i8 != $i16 goto label4;

        $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart> = 0;

        $r10 = $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: org.apache.batik.gvt.text.TextSpanLayout layout>;

        $i10 = interfaceinvoke $r10.<org.apache.batik.gvt.text.TextSpanLayout: int getGlyphCount()>();

        $i11 = $i10 - 1;

        $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd> = $i11;

        goto label5;

     label4:
        $i9 = $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexStart>;

        $r13.<org.apache.batik.bridge.SVGTextElementBridge$CharacterInformation: int glyphIndexEnd> = $i9;

     label5:
        return $r13;

     label6:
        i14 = i14 + 1;

     label7:
        $i3 = interfaceinvoke r1.<java.util.List: int size()>();

        if i14 < $i3 goto label1;

        return null;
    }

    public java.util.Set getTextIntersectionSet(java.awt.geom.AffineTransform, java.awt.geom.Rectangle2D)
    {
        org.apache.batik.gvt.TextNode $r2;
        org.apache.batik.bridge.SVGTextElementBridge r1;
        java.awt.geom.Rectangle2D $r13, $r18, r19, $r21;
        java.util.HashSet $r0;
        java.text.AttributedCharacterIterator$Attribute $r8;
        org.apache.batik.gvt.font.GVTGlyphVector $r14;
        int i0, i1, $i2, $i3;
        java.lang.ref.SoftReference r10;
        boolean $z0, $z1, $z2, $z3;
        java.awt.Shape $r15, $r17, $r20;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r5;
        org.apache.batik.gvt.text.TextSpanLayout $r6;
        java.awt.geom.AffineTransform r16;
        java.util.List $r3;
        org.w3c.dom.Element r12;
        java.text.AttributedCharacterIterator $r7;
        java.lang.Object $r4, $r9, $r11;

        r1 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r16 := @parameter0: java.awt.geom.AffineTransform;

        r19 := @parameter1: java.awt.geom.Rectangle2D;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        $r3 = virtualinvoke $r2.<org.apache.batik.gvt.TextNode: java.util.List getTextRuns()>();

        if $r3 != null goto label01;

        return $r0;

     label01:
        i0 = 0;

        goto label11;

     label02:
        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        r5 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r4;

        $r6 = virtualinvoke r5.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r7 = virtualinvoke r5.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: java.text.AttributedCharacterIterator getACI()>();

        interfaceinvoke $r7.<java.text.CharacterIterator: char first()>();

        $r8 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID>;

        $r9 = interfaceinvoke $r7.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r8);

        r10 = (java.lang.ref.SoftReference) $r9;

        $r11 = virtualinvoke r10.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r12 = (org.w3c.dom.Element) $r11;

        if r12 != null goto label03;

        goto label10;

     label03:
        $z0 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>(r12);

        if $z0 == 0 goto label04;

        goto label10;

     label04:
        $z1 = staticinvoke <org.apache.batik.bridge.SVGTextElementBridge: boolean isTextSensitive(org.w3c.dom.Element)>(r12);

        if $z1 != 0 goto label05;

        goto label10;

     label05:
        $r13 = interfaceinvoke $r6.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.geom.Rectangle2D getBounds2D()>();

        if $r13 == null goto label06;

        $r20 = virtualinvoke r16.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r13);

        $r21 = interfaceinvoke $r20.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $z3 = virtualinvoke r19.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r21);

        if $z3 != 0 goto label06;

        goto label10;

     label06:
        $r14 = interfaceinvoke $r6.<org.apache.batik.gvt.text.TextSpanLayout: org.apache.batik.gvt.font.GVTGlyphVector getGlyphVector()>();

        i1 = 0;

        goto label09;

     label07:
        $r15 = interfaceinvoke $r14.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.Shape getGlyphLogicalBounds(int)>(i1);

        if $r15 == null goto label08;

        $r17 = virtualinvoke r16.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r15);

        $r18 = interfaceinvoke $r17.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $z2 = interfaceinvoke $r18.<java.awt.Shape: boolean intersects(java.awt.geom.Rectangle2D)>(r19);

        if $z2 == 0 goto label08;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r12);

        goto label10;

     label08:
        i1 = i1 + 1;

     label09:
        $i2 = interfaceinvoke $r14.<org.apache.batik.gvt.font.GVTGlyphVector: int getNumGlyphs()>();

        if i1 < $i2 goto label07;

     label10:
        i0 = i0 + 1;

     label11:
        $i3 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i0 < $i3 goto label02;

        return $r0;
    }

    public java.util.Set getTextEnclosureSet(java.awt.geom.AffineTransform, java.awt.geom.Rectangle2D)
    {
        org.apache.batik.gvt.TextNode $r1;
        org.apache.batik.bridge.SVGTextElementBridge r0;
        java.awt.geom.Rectangle2D $r14, $r17, r18;
        java.util.HashSet $r2, $r4;
        java.text.AttributedCharacterIterator$Attribute $r9;
        int i0, $i1;
        java.lang.ref.SoftReference r11;
        boolean $z0, $z1, $z2;
        java.awt.Shape $r16;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r6;
        org.apache.batik.gvt.text.TextSpanLayout $r7;
        java.awt.geom.AffineTransform r15;
        java.util.List $r3;
        org.w3c.dom.Element r13;
        java.text.AttributedCharacterIterator $r8;
        java.lang.Object $r5, $r10, $r12;

        r0 := @this: org.apache.batik.bridge.SVGTextElementBridge;

        r15 := @parameter0: java.awt.geom.AffineTransform;

        r18 := @parameter1: java.awt.geom.Rectangle2D;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $r3 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: java.util.List getTextRuns()>();

        if $r3 != null goto label1;

        return $r2;

     label1:
        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        i0 = 0;

        goto label9;

     label2:
        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0);

        r6 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r5;

        $r7 = virtualinvoke r6.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r8 = virtualinvoke r6.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: java.text.AttributedCharacterIterator getACI()>();

        interfaceinvoke $r8.<java.text.CharacterIterator: char first()>();

        $r9 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID>;

        $r10 = interfaceinvoke $r8.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r9);

        r11 = (java.lang.ref.SoftReference) $r10;

        $r12 = virtualinvoke r11.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r13 = (org.w3c.dom.Element) $r12;

        if r13 != null goto label3;

        goto label8;

     label3:
        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r13);

        if $z0 == 0 goto label4;

        goto label8;

     label4:
        $z1 = staticinvoke <org.apache.batik.bridge.SVGTextElementBridge: boolean isTextSensitive(org.w3c.dom.Element)>(r13);

        if $z1 != 0 goto label5;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r13);

        goto label8;

     label5:
        $r14 = interfaceinvoke $r7.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.geom.Rectangle2D getBounds2D()>();

        if $r14 != null goto label6;

        goto label8;

     label6:
        $r16 = virtualinvoke r15.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r14);

        $r17 = interfaceinvoke $r16.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $z2 = virtualinvoke r18.<java.awt.geom.RectangularShape: boolean contains(java.awt.geom.Rectangle2D)>($r17);

        if $z2 == 0 goto label7;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r13);

        goto label8;

     label7:
        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r13);

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r13);

     label8:
        i0 = i0 + 1;

     label9:
        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        if i0 < $i1 goto label2;

        return $r2;
    }

    public static boolean getTextIntersection(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, java.awt.geom.AffineTransform, java.awt.geom.Rectangle2D, boolean)
    {
        org.apache.batik.gvt.TextNode $r1;
        java.awt.geom.Rectangle2D $r6, $r8, r9, $r19, $r21, $r25;
        org.apache.batik.dom.svg.SVGContext r29;
        org.apache.batik.dom.svg.SVGOMElement $r27;
        boolean $z0, $z1, $z2, $z3, z4, $z5, $z6, $z7;
        java.awt.Shape $r7, $r20, $r23, $r24;
        org.apache.batik.bridge.BridgeContext r28;
        java.awt.geom.AffineTransform $r4, r5;
        java.util.List $r2;
        java.text.AttributedCharacterIterator $r13;
        org.apache.batik.bridge.SVGTextElementBridge r30;
        java.text.AttributedCharacterIterator$Attribute $r14;
        org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildSVGContext r31;
        org.apache.batik.gvt.font.GVTGlyphVector $r22;
        org.w3c.dom.Node $r26;
        int i0, i1, $i2, $i3;
        java.lang.ref.SoftReference r16;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r11;
        org.apache.batik.gvt.text.TextSpanLayout $r12;
        org.w3c.dom.Element r0, r3, r18, r32;
        java.lang.Object $r10, $r15, $r17;

        r28 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        r5 := @parameter2: java.awt.geom.AffineTransform;

        r9 := @parameter3: java.awt.geom.Rectangle2D;

        z4 := @parameter4: boolean;

        r29 = null;

        $z0 = r0 instanceof org.apache.batik.dom.svg.SVGOMElement;

        if $z0 == 0 goto label01;

        $r27 = (org.apache.batik.dom.svg.SVGOMElement) r0;

        r29 = virtualinvoke $r27.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

     label01:
        if r29 != null goto label02;

        return 0;

     label02:
        r30 = null;

        $z1 = r29 instanceof org.apache.batik.bridge.SVGTextElementBridge;

        if $z1 == 0 goto label03;

        r30 = (org.apache.batik.bridge.SVGTextElementBridge) r29;

        goto label04;

     label03:
        $z2 = r29 instanceof org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildSVGContext;

        if $z2 == 0 goto label04;

        r31 = (org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildSVGContext) r29;

        r30 = virtualinvoke r31.<org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildSVGContext: org.apache.batik.bridge.SVGTextElementBridge getTextBridge()>();

     label04:
        if r30 != null goto label05;

        return 0;

     label05:
        $r1 = virtualinvoke r30.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        $r2 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: java.util.List getTextRuns()>();

        if $r2 != null goto label06;

        return 0;

     label06:
        r3 = r30.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r4 = virtualinvoke $r1.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.AffineTransform getGlobalTransform()>();

        virtualinvoke $r4.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>(r5);

        $r6 = virtualinvoke $r1.<org.apache.batik.gvt.AbstractGraphicsNode: java.awt.geom.Rectangle2D getBounds()>();

        $r7 = virtualinvoke $r4.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r6);

        $r8 = interfaceinvoke $r7.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $z3 = virtualinvoke r9.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r8);

        if $z3 != 0 goto label07;

        return 0;

     label07:
        i0 = 0;

        goto label21;

     label08:
        $r10 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        r11 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r10;

        $r12 = virtualinvoke r11.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r13 = virtualinvoke r11.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: java.text.AttributedCharacterIterator getACI()>();

        interfaceinvoke $r13.<java.text.CharacterIterator: char first()>();

        $r14 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID>;

        $r15 = interfaceinvoke $r13.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r14);

        r16 = (java.lang.ref.SoftReference) $r15;

        $r17 = virtualinvoke r16.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r18 = (org.w3c.dom.Element) $r17;

        if r18 != null goto label09;

        goto label20;

     label09:
        if z4 == 0 goto label10;

        $z7 = staticinvoke <org.apache.batik.bridge.SVGTextElementBridge: boolean isTextSensitive(org.w3c.dom.Element)>(r18);

        if $z7 != 0 goto label10;

        goto label20;

     label10:
        r32 = r18;

        goto label12;

     label11:
        $r26 = virtualinvoke r30.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getParentNode(org.w3c.dom.Node)>(r32);

        r32 = (org.w3c.dom.Element) $r26;

     label12:
        if r32 == null goto label13;

        if r32 == r3 goto label13;

        if r32 != r0 goto label11;

     label13:
        if r32 == r0 goto label14;

        goto label20;

     label14:
        $r19 = interfaceinvoke $r12.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.geom.Rectangle2D getBounds2D()>();

        if $r19 != null goto label15;

        goto label20;

     label15:
        $r20 = virtualinvoke $r4.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r19);

        $r21 = interfaceinvoke $r20.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $z5 = virtualinvoke r9.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r21);

        if $z5 != 0 goto label16;

        goto label20;

     label16:
        $r22 = interfaceinvoke $r12.<org.apache.batik.gvt.text.TextSpanLayout: org.apache.batik.gvt.font.GVTGlyphVector getGlyphVector()>();

        i1 = 0;

        goto label19;

     label17:
        $r23 = interfaceinvoke $r22.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.Shape getGlyphLogicalBounds(int)>(i1);

        if $r23 == null goto label18;

        $r24 = virtualinvoke $r4.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r23);

        $r25 = interfaceinvoke $r24.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $z6 = interfaceinvoke $r25.<java.awt.Shape: boolean intersects(java.awt.geom.Rectangle2D)>(r9);

        if $z6 == 0 goto label18;

        return 1;

     label18:
        i1 = i1 + 1;

     label19:
        $i2 = interfaceinvoke $r22.<org.apache.batik.gvt.font.GVTGlyphVector: int getNumGlyphs()>();

        if i1 < $i2 goto label17;

     label20:
        i0 = i0 + 1;

     label21:
        $i3 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i0 < $i3 goto label08;

        return 0;
    }

    public static java.awt.geom.Rectangle2D getTextBounds(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, boolean)
    {
        org.apache.batik.gvt.TextNode $r1;
        org.apache.batik.bridge.SVGTextElementBridge r19;
        java.awt.geom.Rectangle2D $r13, r21;
        java.text.AttributedCharacterIterator$Attribute $r8;
        org.apache.batik.dom.svg.SVGContext r18;
        org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildSVGContext r20;
        org.w3c.dom.Node $r15;
        int i0, $i1;
        java.lang.ref.SoftReference r10;
        org.apache.batik.dom.svg.SVGOMElement $r16;
        boolean $z0, $z1, $z2, z3, $z4;
        org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun r5;
        org.apache.batik.bridge.BridgeContext r17;
        org.apache.batik.gvt.text.TextSpanLayout $r6;
        java.util.List $r2;
        org.w3c.dom.Element r0, r3, r12, r22;
        java.text.AttributedCharacterIterator $r7;
        java.lang.Object $r4, $r9, $r11, $r14;

        r17 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        z3 := @parameter2: boolean;

        r18 = null;

        $z0 = r0 instanceof org.apache.batik.dom.svg.SVGOMElement;

        if $z0 == 0 goto label01;

        $r16 = (org.apache.batik.dom.svg.SVGOMElement) r0;

        r18 = virtualinvoke $r16.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

     label01:
        if r18 != null goto label02;

        return null;

     label02:
        r19 = null;

        $z1 = r18 instanceof org.apache.batik.bridge.SVGTextElementBridge;

        if $z1 == 0 goto label03;

        r19 = (org.apache.batik.bridge.SVGTextElementBridge) r18;

        goto label04;

     label03:
        $z2 = r18 instanceof org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildSVGContext;

        if $z2 == 0 goto label04;

        r20 = (org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildSVGContext) r18;

        r19 = virtualinvoke r20.<org.apache.batik.bridge.SVGTextElementBridge$AbstractTextChildSVGContext: org.apache.batik.bridge.SVGTextElementBridge getTextBridge()>();

     label04:
        if r19 != null goto label05;

        return null;

     label05:
        $r1 = virtualinvoke r19.<org.apache.batik.bridge.SVGTextElementBridge: org.apache.batik.gvt.TextNode getTextNode()>();

        $r2 = virtualinvoke $r1.<org.apache.batik.gvt.TextNode: java.util.List getTextRuns()>();

        if $r2 != null goto label06;

        return null;

     label06:
        r3 = r19.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        r21 = null;

        i0 = 0;

        goto label16;

     label07:
        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        r5 = (org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun) $r4;

        $r6 = virtualinvoke r5.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: org.apache.batik.gvt.text.TextSpanLayout getLayout()>();

        $r7 = virtualinvoke r5.<org.apache.batik.gvt.renderer.StrokingTextPainter$TextRun: java.text.AttributedCharacterIterator getACI()>();

        interfaceinvoke $r7.<java.text.CharacterIterator: char first()>();

        $r8 = <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID>;

        $r9 = interfaceinvoke $r7.<java.text.AttributedCharacterIterator: java.lang.Object getAttribute(java.text.AttributedCharacterIterator$Attribute)>($r8);

        r10 = (java.lang.ref.SoftReference) $r9;

        $r11 = virtualinvoke r10.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r12 = (org.w3c.dom.Element) $r11;

        if r12 != null goto label08;

        goto label15;

     label08:
        if z3 == 0 goto label09;

        $z4 = staticinvoke <org.apache.batik.bridge.SVGTextElementBridge: boolean isTextSensitive(org.w3c.dom.Element)>(r12);

        if $z4 != 0 goto label09;

        goto label15;

     label09:
        r22 = r12;

        goto label11;

     label10:
        $r15 = virtualinvoke r19.<org.apache.batik.bridge.SVGTextElementBridge: org.w3c.dom.Node getParentNode(org.w3c.dom.Node)>(r22);

        r22 = (org.w3c.dom.Element) $r15;

     label11:
        if r22 == null goto label12;

        if r22 == r3 goto label12;

        if r22 != r0 goto label10;

     label12:
        if r22 == r0 goto label13;

        goto label15;

     label13:
        $r13 = interfaceinvoke $r6.<org.apache.batik.gvt.text.TextSpanLayout: java.awt.geom.Rectangle2D getBounds2D()>();

        if $r13 == null goto label15;

        if r21 != null goto label14;

        $r14 = virtualinvoke $r13.<java.awt.geom.RectangularShape: java.lang.Object clone()>();

        r21 = (java.awt.geom.Rectangle2D) $r14;

        goto label15;

     label14:
        virtualinvoke r21.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r13);

     label15:
        i0 = i0 + 1;

     label16:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i0 < $i1 goto label07;

        return r21;
    }

    public static boolean isTextSensitive(org.w3c.dom.Element)
    {
        int $i0;
        org.w3c.dom.Element r0;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Element;

        $i0 = staticinvoke <org.apache.batik.bridge.CSSUtilities: int convertPointerEvents(org.w3c.dom.Element)>(r0);

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label3;
            default: goto label3;
        };

     label1:
        $z0 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertVisibility(org.w3c.dom.Element)>(r0);

        return $z0;

     label2:
        return 1;

     label3:
        return 0;
    }

    static void <clinit>()
    {
        java.lang.Integer $r0;
        org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        $r0 = new java.lang.Integer;

        specialinvoke $r0.<java.lang.Integer: void <init>(int)>(0);

        <org.apache.batik.bridge.SVGTextElementBridge: java.lang.Integer ZERO> = $r0;

        $r1 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute TEXT_COMPOUND_DELIMITER>;

        <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_DELIMITER> = $r1;

        $r2 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute TEXT_COMPOUND_ID>;

        <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute TEXT_COMPOUND_ID> = $r2;

        $r3 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute PAINT_INFO>;

        <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute PAINT_INFO> = $r3;

        $r4 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ALT_GLYPH_HANDLER>;

        <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute ALT_GLYPH_HANDLER> = $r4;

        $r5 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute TEXTPATH>;

        <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute TEXTPATH> = $r5;

        $r6 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute ANCHOR_TYPE>;

        <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute ANCHOR_TYPE> = $r6;

        $r7 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute GVT_FONT_FAMILIES>;

        <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute GVT_FONT_FAMILIES> = $r7;

        $r8 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute GVT_FONTS>;

        <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute GVT_FONTS> = $r8;

        $r9 = <org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute: org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute BASELINE_SHIFT>;

        <org.apache.batik.bridge.SVGTextElementBridge: java.text.AttributedCharacterIterator$Attribute BASELINE_SHIFT> = $r9;

        return;
    }
}
