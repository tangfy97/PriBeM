class com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance extends java.lang.Object
{
    com.hp.hpl.jena.graph.Node predicate;
    com.hp.hpl.jena.sparql.pfunction.PropFuncArg subjArgs;
    com.hp.hpl.jena.sparql.pfunction.PropFuncArg objArgs;

    void <init>(com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg)
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r1, r3;
        com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance r0;
        com.hp.hpl.jena.graph.Node r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance;

        r1 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance: com.hp.hpl.jena.sparql.pfunction.PropFuncArg subjArgs> = r1;

        r0.<com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance: com.hp.hpl.jena.graph.Node predicate> = r2;

        r0.<com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance: com.hp.hpl.jena.sparql.pfunction.PropFuncArg objArgs> = r3;

        return;
    }

    com.hp.hpl.jena.sparql.expr.ExprList argList()
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r2, $r3;
        com.hp.hpl.jena.sparql.expr.ExprList $r0;
        com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance r1;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance: com.hp.hpl.jena.sparql.pfunction.PropFuncArg subjArgs>;

        staticinvoke <com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance: void argList(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.pfunction.PropFuncArg)>($r0, $r2);

        $r3 = r1.<com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance: com.hp.hpl.jena.sparql.pfunction.PropFuncArg objArgs>;

        staticinvoke <com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance: void argList(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.pfunction.PropFuncArg)>($r0, $r3);

        return $r0;
    }

    com.hp.hpl.jena.sparql.pfunction.PropFuncArg getSubjectArgList()
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r1;
        com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance: com.hp.hpl.jena.sparql.pfunction.PropFuncArg subjArgs>;

        return $r1;
    }

    com.hp.hpl.jena.sparql.pfunction.PropFuncArg getObjectArgList()
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r1;
        com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.PropertyFunctionGenerator$PropertyFunctionInstance: com.hp.hpl.jena.sparql.pfunction.PropFuncArg objArgs>;

        return $r1;
    }

    private static void argList(com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.pfunction.PropFuncArg)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.graph.Node $r6, r8;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.expr.Expr $r4, $r7;
        com.hp.hpl.jena.sparql.expr.ExprList r5;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r5 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        r0 := @parameter1: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: com.hp.hpl.jena.sparql.expr.Expr nodeToExpr(com.hp.hpl.jena.graph.Node)>($r6);

        virtualinvoke r5.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r7);

        return;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Node) $r3;

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: com.hp.hpl.jena.sparql.expr.Expr nodeToExpr(com.hp.hpl.jena.graph.Node)>(r8);

        virtualinvoke r5.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r4);

        goto label2;

     label3:
        return;
    }
}
