public class com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier extends com.mycila.inject.internal.asm.tree.analysis.BasicVerifier
{
    private final com.mycila.inject.internal.asm.Type currentClass;
    private final com.mycila.inject.internal.asm.Type currentSuperClass;
    private final java.util.List currentClassInterfaces;
    private final boolean isInterface;
    private java.lang.ClassLoader loader;
    static java.lang.Class class$java$lang$Object;

    public void <init>()
    {
        com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier;

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: void <init>(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type,boolean)>(null, null, 0);

        return;
    }

    public void <init>(com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.asm.Type, boolean)
    {
        com.mycila.inject.internal.asm.Type r1, r2;
        com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier r0;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        r2 := @parameter1: com.mycila.inject.internal.asm.Type;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: void <init>(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type,java.util.List,boolean)>(r1, r2, null, z0);

        return;
    }

    public void <init>(com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.asm.Type, java.util.List, boolean)
    {
        java.util.List r5;
        com.mycila.inject.internal.asm.Type r3, r4;
        java.lang.Class $r1;
        java.lang.ClassLoader $r2;
        com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier r0;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier;

        r3 := @parameter0: com.mycila.inject.internal.asm.Type;

        r4 := @parameter1: com.mycila.inject.internal.asm.Type;

        r5 := @parameter2: java.util.List;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.mycila.inject.internal.asm.tree.analysis.BasicVerifier: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.lang.ClassLoader loader> = $r2;

        r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type currentClass> = r3;

        r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type currentSuperClass> = r4;

        r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.util.List currentClassInterfaces> = r5;

        r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: boolean isInterface> = z0;

        return;
    }

    public void setClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier r0;

        r0 := @this: com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.lang.ClassLoader loader> = r1;

        return;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.tree.analysis.BasicValue $r4, $r7, $r9, $r15;
        com.mycila.inject.internal.asm.Type r0, $r5, $r8, $r10, $r14;
        java.lang.StringBuffer $r11, $r12, $r13;
        int $i0, $i1, $i2, i3;
        java.lang.String r18;
        boolean z0, $z1, $z3, $z4;
        com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier r1;
        com.mycila.inject.internal.asm.tree.analysis.Value $r2, $r3, $r6, $r16, r17;

        r1 := @this: com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        if r0 != null goto label1;

        $r16 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value UNINITIALIZED_VALUE>;

        return $r16;

     label1:
        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSort()>();

        if $i0 != 9 goto label2;

        $z4 = 1;

        $z3 = 1;

        goto label3;

     label2:
        $z4 = 0;

        $z3 = 0;

     label3:
        z0 = $z3;

        if $z4 == 0 goto label5;

        $r14 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getElementType()>();

        $i2 = virtualinvoke $r14.<com.mycila.inject.internal.asm.Type: int getSort()>();

        tableswitch($i2)
        {
            case 1: goto label4;
            case 2: goto label4;
            case 3: goto label4;
            case 4: goto label4;
            default: goto label5;
        };

     label4:
        $r15 = new com.mycila.inject.internal.asm.tree.analysis.BasicValue;

        specialinvoke $r15.<com.mycila.inject.internal.asm.tree.analysis.BasicValue: void <init>(com.mycila.inject.internal.asm.Type)>(r0);

        return $r15;

     label5:
        $r2 = specialinvoke r1.<com.mycila.inject.internal.asm.tree.analysis.BasicVerifier: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>(r0);

        r17 = $r2;

        $r3 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value REFERENCE_VALUE>;

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label9;

        if z0 == 0 goto label8;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getElementType()>();

        $r6 = virtualinvoke r1.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r5);

        $r7 = (com.mycila.inject.internal.asm.tree.analysis.BasicValue) $r6;

        $r8 = virtualinvoke $r7.<com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.Type getType()>();

        r18 = virtualinvoke $r8.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        i3 = 0;

     label6:
        $i1 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getDimensions()>();

        if i3 >= $i1 goto label7;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r18);

        r18 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        i3 = i3 + 1;

        goto label6;

     label7:
        $r9 = new com.mycila.inject.internal.asm.tree.analysis.BasicValue;

        $r10 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>(r18);

        specialinvoke $r9.<com.mycila.inject.internal.asm.tree.analysis.BasicValue: void <init>(com.mycila.inject.internal.asm.Type)>($r10);

        r17 = $r9;

        goto label9;

     label8:
        $r4 = new com.mycila.inject.internal.asm.tree.analysis.BasicValue;

        specialinvoke $r4.<com.mycila.inject.internal.asm.tree.analysis.BasicValue: void <init>(com.mycila.inject.internal.asm.Type)>(r0);

        r17 = $r4;

     label9:
        return r17;
    }

    protected boolean isArrayValue(com.mycila.inject.internal.asm.tree.analysis.Value)
    {
        com.mycila.inject.internal.asm.tree.analysis.BasicValue $r1;
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.asm.tree.analysis.Value r0;
        int $i0;
        java.lang.String $r3, $r4;
        boolean $z0, $z1;
        com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier r5;

        r5 := @this: com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.analysis.Value;

        $r1 = (com.mycila.inject.internal.asm.tree.analysis.BasicValue) r0;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.Type getType()>();

        if $r2 == null goto label2;

        $r3 = "Lnull;";

        $r4 = virtualinvoke $r2.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label1;

        $i0 = virtualinvoke $r2.<com.mycila.inject.internal.asm.Type: int getSort()>();

        if $i0 != 9 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    protected com.mycila.inject.internal.asm.tree.analysis.Value getElementValue(com.mycila.inject.internal.asm.tree.analysis.Value) throws com.mycila.inject.internal.asm.tree.analysis.AnalyzerException
    {
        com.mycila.inject.internal.asm.tree.analysis.BasicValue $r1;
        com.mycila.inject.internal.asm.Type $r2, $r9;
        java.lang.Error $r3;
        com.mycila.inject.internal.asm.tree.analysis.Value r0, $r10;
        int $i0;
        java.lang.String $r4, $r5, $r7, $r8;
        boolean $z0;
        com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier r6;

        r6 := @this: com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.analysis.Value;

        $r1 = (com.mycila.inject.internal.asm.tree.analysis.BasicValue) r0;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.Type getType()>();

        if $r2 == null goto label2;

        $i0 = virtualinvoke $r2.<com.mycila.inject.internal.asm.Type: int getSort()>();

        if $i0 != 9 goto label1;

        $r7 = virtualinvoke $r2.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>(1);

        $r9 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>($r8);

        $r10 = virtualinvoke r6.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r9);

        return $r10;

     label1:
        $r4 = "Lnull;";

        $r5 = virtualinvoke $r2.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label2;

        return r0;

     label2:
        $r3 = new java.lang.Error;

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.String)>("Internal error");

        throw $r3;
    }

    protected boolean isSubTypeOf(com.mycila.inject.internal.asm.tree.analysis.Value, com.mycila.inject.internal.asm.tree.analysis.Value)
    {
        com.mycila.inject.internal.asm.tree.analysis.BasicValue $r1, $r4;
        com.mycila.inject.internal.asm.Type $r2, $r5;
        java.lang.Error $r9;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r7;
        boolean $z0, $z1, $z2;
        com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier r8;
        com.mycila.inject.internal.asm.tree.analysis.Value r0, r3;

        r8 := @this: com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier;

        r3 := @parameter0: com.mycila.inject.internal.asm.tree.analysis.Value;

        r0 := @parameter1: com.mycila.inject.internal.asm.tree.analysis.Value;

        $r1 = (com.mycila.inject.internal.asm.tree.analysis.BasicValue) r0;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.Type getType()>();

        $r4 = (com.mycila.inject.internal.asm.tree.analysis.BasicValue) r3;

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.Type getType()>();

        $i0 = virtualinvoke $r2.<com.mycila.inject.internal.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label2;
            case 10: goto label2;
            default: goto label6;
        };

     label1:
        $z2 = virtualinvoke $r5.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>($r2);

        return $z2;

     label2:
        $r6 = "Lnull;";

        $r7 = virtualinvoke $r5.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $i1 = virtualinvoke $r5.<com.mycila.inject.internal.asm.Type: int getSort()>();

        if $i1 == 10 goto label4;

        $i2 = virtualinvoke $r5.<com.mycila.inject.internal.asm.Type: int getSort()>();

        if $i2 != 9 goto label5;

     label4:
        $z1 = virtualinvoke r8.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: boolean isAssignableFrom(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r2, $r5);

        return $z1;

     label5:
        return 0;

     label6:
        $r9 = new java.lang.Error;

        specialinvoke $r9.<java.lang.Error: void <init>(java.lang.String)>("Internal error");

        throw $r9;
    }

    public com.mycila.inject.internal.asm.tree.analysis.Value merge(com.mycila.inject.internal.asm.tree.analysis.Value, com.mycila.inject.internal.asm.tree.analysis.Value)
    {
        com.mycila.inject.internal.asm.tree.analysis.BasicValue $r2, $r4;
        com.mycila.inject.internal.asm.Type $r3, $r5, $r12, r14;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier r10;
        com.mycila.inject.internal.asm.tree.analysis.Value r0, r1, $r11, $r13, $r15;

        r10 := @this: com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier;

        r0 := @parameter0: com.mycila.inject.internal.asm.tree.analysis.Value;

        r1 := @parameter1: com.mycila.inject.internal.asm.tree.analysis.Value;

        $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label10;

        $r2 = (com.mycila.inject.internal.asm.tree.analysis.BasicValue) r0;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.Type getType()>();

        r14 = $r3;

        $r4 = (com.mycila.inject.internal.asm.tree.analysis.BasicValue) r1;

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.Type getType()>();

        if $r3 == null goto label09;

        $i0 = virtualinvoke $r3.<com.mycila.inject.internal.asm.Type: int getSort()>();

        if $i0 == 10 goto label01;

        $i3 = virtualinvoke $r3.<com.mycila.inject.internal.asm.Type: int getSort()>();

        if $i3 != 9 goto label09;

     label01:
        if $r5 == null goto label09;

        $i1 = virtualinvoke $r5.<com.mycila.inject.internal.asm.Type: int getSort()>();

        if $i1 == 10 goto label02;

        $i2 = virtualinvoke $r5.<com.mycila.inject.internal.asm.Type: int getSort()>();

        if $i2 != 9 goto label09;

     label02:
        $r6 = "Lnull;";

        $r7 = virtualinvoke $r3.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label03;

        return r1;

     label03:
        $r8 = "Lnull;";

        $r9 = virtualinvoke $r5.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z2 == 0 goto label04;

        return r0;

     label04:
        $z3 = virtualinvoke r10.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: boolean isAssignableFrom(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r3, $r5);

        if $z3 == 0 goto label05;

        return r0;

     label05:
        $z4 = virtualinvoke r10.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: boolean isAssignableFrom(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r5, $r3);

        if $z4 == 0 goto label06;

        return r1;

     label06:
        if r14 == null goto label07;

        $z5 = virtualinvoke r10.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: boolean isInterface(com.mycila.inject.internal.asm.Type)>(r14);

        if $z5 == 0 goto label08;

     label07:
        $r11 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value REFERENCE_VALUE>;

        return $r11;

     label08:
        $r12 = virtualinvoke r10.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type getSuperClass(com.mycila.inject.internal.asm.Type)>(r14);

        r14 = $r12;

        $z6 = virtualinvoke r10.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: boolean isAssignableFrom(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r12, $r5);

        if $z6 == 0 goto label06;

        $r13 = virtualinvoke r10.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.tree.analysis.Value newValue(com.mycila.inject.internal.asm.Type)>($r12);

        return $r13;

     label09:
        $r15 = <com.mycila.inject.internal.asm.tree.analysis.BasicValue: com.mycila.inject.internal.asm.tree.analysis.Value UNINITIALIZED_VALUE>;

        return $r15;

     label10:
        return r0;
    }

    protected boolean isInterface(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type $r1, r2, $r4;
        java.lang.Class $r3;
        com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier r0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier;

        r2 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type currentClass>;

        if $r1 == null goto label1;

        $r4 = r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type currentClass>;

        $z1 = virtualinvoke r2.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $z2 = r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: boolean isInterface>;

        return $z2;

     label1:
        $r3 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.lang.Class getClass(com.mycila.inject.internal.asm.Type)>(r2);

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInterface()>();

        return $z0;
    }

    protected com.mycila.inject.internal.asm.Type getSuperClass(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type $r1, r2, $r5, $r6, $r7;
        java.lang.Class $r3, $r4;
        com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier;

        r2 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r1 = r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type currentClass>;

        if $r1 == null goto label1;

        $r5 = r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type currentClass>;

        $z0 = virtualinvoke r2.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $r6 = r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type currentSuperClass>;

        return $r6;

     label1:
        $r3 = virtualinvoke r0.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.lang.Class getClass(com.mycila.inject.internal.asm.Type)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r4 != null goto label2;

        $r7 = null;

        goto label3;

     label2:
        $r7 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r4);

     label3:
        return $r7;
    }

    protected boolean isAssignableFrom(com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.asm.Type)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.util.List $r9, $r10, $r11;
        com.mycila.inject.internal.asm.Type r0, r1, $r3, $r4, $r7, $r8, r13, $r14, $r15, $r16;
        int $i0, $i1, $i2, i3;
        com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier r2;
        java.lang.Class $r5, $r6, r17, $r18, $r19;
        java.lang.Object $r12;

        r2 := @this: com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        r1 := @parameter1: com.mycila.inject.internal.asm.Type;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $r3 = r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type currentClass>;

        if $r3 == null goto label07;

        $r14 = r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type currentClass>;

        $z5 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>($r14);

        if $z5 == 0 goto label07;

        $r15 = virtualinvoke r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type getSuperClass(com.mycila.inject.internal.asm.Type)>(r1);

        if $r15 != null goto label02;

        return 0;

     label02:
        $z6 = r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: boolean isInterface>;

        if $z6 == 0 goto label06;

        $i1 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getSort()>();

        if $i1 == 10 goto label03;

        $i2 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getSort()>();

        if $i2 != 9 goto label04;

     label03:
        $z8 = 1;

        goto label05;

     label04:
        $z8 = 0;

     label05:
        return $z8;

     label06:
        $r16 = virtualinvoke r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type getSuperClass(com.mycila.inject.internal.asm.Type)>(r1);

        $z7 = virtualinvoke r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: boolean isAssignableFrom(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>(r0, $r16);

        return $z7;

     label07:
        $r4 = r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type currentClass>;

        if $r4 == null goto label12;

        $r7 = r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type currentClass>;

        $z2 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label12;

        $r8 = r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: com.mycila.inject.internal.asm.Type currentSuperClass>;

        $z3 = virtualinvoke r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: boolean isAssignableFrom(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>(r0, $r8);

        if $z3 == 0 goto label08;

        return 1;

     label08:
        $r9 = r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.util.List currentClassInterfaces>;

        if $r9 == null goto label11;

        i3 = 0;

     label09:
        $r10 = r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.util.List currentClassInterfaces>;

        $i0 = interfaceinvoke $r10.<java.util.List: int size()>();

        if i3 >= $i0 goto label11;

        $r11 = r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.util.List currentClassInterfaces>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i3);

        r13 = (com.mycila.inject.internal.asm.Type) $r12;

        $z4 = virtualinvoke r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: boolean isAssignableFrom(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>(r0, r13);

        if $z4 == 0 goto label10;

        return 1;

     label10:
        i3 = i3 + 1;

        goto label09;

     label11:
        return 0;

     label12:
        $r5 = virtualinvoke r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.lang.Class getClass(com.mycila.inject.internal.asm.Type)>(r0);

        r17 = $r5;

        $z1 = virtualinvoke $r5.<java.lang.Class: boolean isInterface()>();

        if $z1 == 0 goto label15;

        $r6 = <com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.lang.Class class$java$lang$Object>;

        if $r6 != null goto label13;

        $r18 = staticinvoke <com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.lang.Class class$java$lang$Object> = $r18;

        goto label14;

     label13:
        $r18 = <com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.lang.Class class$java$lang$Object>;

     label14:
        r17 = $r18;

     label15:
        $r19 = virtualinvoke r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.lang.Class getClass(com.mycila.inject.internal.asm.Type)>(r1);

        $z9 = virtualinvoke r17.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r19);

        return $z9;
    }

    protected java.lang.Class getClass(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r0;
        java.lang.RuntimeException $r10;
        int $i0;
        java.lang.Class $r4, $r8;
        java.lang.ClassNotFoundException $r9;
        java.lang.String $r1, $r5, $r6, $r11;
        java.lang.ClassLoader $r3, $r7;
        com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier r2;

        r2 := @this: com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

     label1:
        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSort()>();

        if $i0 != 9 goto label3;

        $r5 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        $r7 = r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.lang.ClassLoader loader>;

        $r8 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r6, 0, $r7);

     label2:
        return $r8;

     label3:
        $r1 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: java.lang.String getClassName()>();

        $r3 = r2.<com.mycila.inject.internal.asm.tree.analysis.SimpleVerifier: java.lang.ClassLoader loader>;

        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r1, 0, $r3);

     label4:
        return $r4;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        $r11 = virtualinvoke $r9.<java.lang.ClassNotFoundException: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r10;

        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
