public abstract class org.apache.lucene.analysis.util.AbstractAnalysisFactory extends java.lang.Object
{
    public static final java.lang.String LUCENE_MATCH_VERSION_PARAM;
    private final java.util.Map originalArgs;
    protected final org.apache.lucene.util.Version luceneMatchVersion;
    private boolean isExplicitLuceneMatchVersion;
    private static final java.util.regex.Pattern ITEM_PATTERN;
    private static final java.lang.String CLASS_NAME;

    protected void <init>(java.util.Map)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        java.util.Map r2, $r3;
        java.util.HashMap $r1;
        java.lang.String $r4;
        org.apache.lucene.util.Version $r5;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r2 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: boolean isExplicitLuceneMatchVersion> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>(r2);

        $r3 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.util.Map originalArgs> = $r3;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.lang.String get(java.util.Map,java.lang.String)>(r2, "luceneMatchVersion");

        if $r4 != null goto label1;

        $r5 = null;

        goto label2;

     label1:
        $r5 = staticinvoke <org.apache.lucene.util.Version: org.apache.lucene.util.Version parseLeniently(java.lang.String)>($r4);

     label2:
        r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: org.apache.lucene.util.Version luceneMatchVersion> = $r5;

        interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("class");

        return;
    }

    public final java.util.Map getOriginalArgs()
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        java.util.Map $r1;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        $r1 = r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.util.Map originalArgs>;

        return $r1;
    }

    protected final void assureMatchVersion()
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        java.lang.IllegalArgumentException $r2;
        org.apache.lucene.util.Version $r1;
        java.lang.StringBuilder $r3, $r4, $r7, $r8;
        java.lang.Class $r5;
        java.lang.String $r6, $r9;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        $r1 = r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: org.apache.lucene.util.Version luceneMatchVersion>;

        if $r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Configuration Error: Factory \'");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' needs a \'luceneMatchVersion\' parameter");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r2;

     label1:
        return;
    }

    public final org.apache.lucene.util.Version getLuceneMatchVersion()
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        org.apache.lucene.util.Version $r1;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        $r1 = r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: org.apache.lucene.util.Version luceneMatchVersion>;

        return $r1;
    }

    public java.lang.String require(java.util.Map, java.lang.String)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r10;
        java.lang.IllegalArgumentException $r4;
        java.util.Map r0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String r1, r3, $r9;

        r10 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Configuration Error: missing parameter \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label1:
        return r3;
    }

    public java.lang.String require(java.util.Map, java.lang.String, java.util.Collection)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        java.util.Map r1;
        java.util.Collection r3;
        java.lang.String r2, $r4;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Collection;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.lang.String require(java.util.Map,java.lang.String,java.util.Collection,boolean)>(r1, r2, r3, 1);

        return $r4;
    }

    public java.lang.String require(java.util.Map, java.lang.String, java.util.Collection, boolean)
    {
        java.util.Map r0;
        java.lang.String r1, r3, $r12, r14, $r20;
        boolean $z0, z1, $z2, $z3;
        java.util.Iterator $r5;
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r21;
        java.util.Collection r4;
        java.lang.IllegalArgumentException $r6, $r15;
        java.lang.Object $r2, $r13;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11, $r16, $r17, $r18, $r19;

        r21 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.util.Collection;

        z1 := @parameter3: boolean;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Configuration Error: missing parameter \'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r15;

     label1:
        $r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r13 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r13;

        if z1 == 0 goto label3;

        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r14);

        if $z3 == 0 goto label4;

        return r3;

     label3:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r14);

        if $z2 == 0 goto label4;

        return r3;

     label4:
        goto label2;

     label5:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Configuration Error: \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' value must be one of ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;
    }

    public java.lang.String get(java.util.Map, java.lang.String)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r4;
        java.util.Map r0;
        java.lang.Object $r2;
        java.lang.String r1, $r3;

        r4 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public java.lang.String get(java.util.Map, java.lang.String, java.lang.String)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r5;
        java.util.Map r0;
        java.lang.Object $r2;
        java.lang.String r1, r3, r4, $r6;

        r5 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        $r6 = r4;

        goto label2;

     label1:
        $r6 = r3;

     label2:
        return $r6;
    }

    public java.lang.String get(java.util.Map, java.lang.String, java.util.Collection)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        java.util.Map r1;
        java.util.Collection r3;
        java.lang.String r2, $r4;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Collection;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.lang.String get(java.util.Map,java.lang.String,java.util.Collection,java.lang.String)>(r1, r2, r3, null);

        return $r4;
    }

    public java.lang.String get(java.util.Map, java.lang.String, java.util.Collection, java.lang.String)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        java.util.Map r1;
        java.util.Collection r3;
        java.lang.String r2, r4, $r5;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.util.Collection;

        r4 := @parameter3: java.lang.String;

        $r5 = virtualinvoke r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.lang.String get(java.util.Map,java.lang.String,java.util.Collection,java.lang.String,boolean)>(r1, r2, r3, r4, 1);

        return $r5;
    }

    public java.lang.String get(java.util.Map, java.lang.String, java.util.Collection, java.lang.String, boolean)
    {
        java.util.Map r0;
        java.lang.String r1, r3, $r12, r14, r15;
        boolean $z0, z1, $z2, $z3;
        java.util.Iterator $r5;
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r16;
        java.util.Collection r4;
        java.lang.IllegalArgumentException $r6;
        java.lang.Object $r2, $r13;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;

        r16 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.util.Collection;

        r15 := @parameter3: java.lang.String;

        z1 := @parameter4: boolean;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        return r15;

     label1:
        $r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r13 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r13;

        if z1 == 0 goto label3;

        $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r14);

        if $z3 == 0 goto label4;

        return r3;

     label3:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r14);

        if $z2 == 0 goto label4;

        return r3;

     label4:
        goto label2;

     label5:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Configuration Error: \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' value must be one of ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;
    }

    protected final int requireInt(java.util.Map, java.lang.String)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        java.util.Map r1;
        int $i0;
        java.lang.String r2, $r3;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.lang.String require(java.util.Map,java.lang.String)>(r1, r2);

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        return $i0;
    }

    protected final int getInt(java.util.Map, java.lang.String, int)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r4;
        java.util.Map r0;
        int i0, $i1;
        java.lang.Object $r2;
        java.lang.String r1, r3;

        r4 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r3);

     label2:
        return $i1;
    }

    protected final boolean requireBoolean(java.util.Map, java.lang.String)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        java.util.Map r1;
        java.lang.String r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.lang.String require(java.util.Map,java.lang.String)>(r1, r2);

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r3);

        return $z0;
    }

    protected final boolean getBoolean(java.util.Map, java.lang.String, boolean)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r4;
        java.util.Map r0;
        java.lang.Object $r2;
        java.lang.String r1, r3;
        boolean z0, $z1;

        r4 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        $z1 = z0;

        goto label2;

     label1:
        $z1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r3);

     label2:
        return $z1;
    }

    protected final float requireFloat(java.util.Map, java.lang.String)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        java.util.Map r1;
        float $f0;
        java.lang.String r2, $r3;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.lang.String require(java.util.Map,java.lang.String)>(r1, r2);

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r3);

        return $f0;
    }

    protected final float getFloat(java.util.Map, java.lang.String, float)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r4;
        java.util.Map r0;
        float f0, $f1;
        java.lang.Object $r2;
        java.lang.String r1, r3;

        r4 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        $f1 = f0;

        goto label2;

     label1:
        $f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r3);

     label2:
        return $f1;
    }

    public char requireChar(java.util.Map, java.lang.String)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        java.util.Map r1;
        char $c0;
        java.lang.String r2, $r3;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.lang.String require(java.util.Map,java.lang.String)>(r1, r2);

        $c0 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(0);

        return $c0;
    }

    public char getChar(java.util.Map, java.lang.String, char)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r11;
        char $c1, c2;
        java.lang.IllegalArgumentException $r4;
        java.util.Map r0;
        int $i0;
        java.lang.Object $r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9;
        java.lang.String r1, r3, $r10;

        r11 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        c2 := @parameter2: char;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        return c2;

     label1:
        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 == 1 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" should be a char. \"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is invalid");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label2:
        $c1 = virtualinvoke r3.<java.lang.String: char charAt(int)>(0);

        return $c1;
    }

    public java.util.Set getSet(java.util.Map, java.lang.String)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r9;
        java.util.HashSet $r6, r10;
        java.util.regex.Matcher $r5;
        java.util.Map r0;
        java.lang.Object $r2;
        java.lang.String r1, r3, $r7, $r8;
        java.util.regex.Pattern $r4;
        boolean $z0, $z1;

        r9 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        return null;

     label1:
        r10 = null;

        $r4 = <org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.util.regex.Pattern ITEM_PATTERN>;

        $r5 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

        $z0 = virtualinvoke $r5.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label3;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r10 = $r6;

        $r7 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r7);

     label2:
        $z1 = virtualinvoke $r5.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label3;

        $r8 = virtualinvoke $r5.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>($r8);

        goto label2;

     label3:
        return r10;
    }

    protected final java.util.regex.Pattern getPattern(java.util.Map, java.lang.String)
    {
        java.util.regex.PatternSyntaxException $r5;
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        java.lang.IllegalArgumentException $r6;
        java.util.Map r1;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r13;
        java.lang.Class $r11;
        java.lang.String r2, $r3, $r12, $r14;
        java.util.regex.Pattern $r4;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

     label1:
        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.lang.String require(java.util.Map,java.lang.String)>(r1, r2);

        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r3);

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Configuration Error: \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' can not be parsed in ");

        $r11 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getSimpleName()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r5);

        throw $r6;

        catch java.util.regex.PatternSyntaxException from label1 to label2 with label3;
    }

    protected final org.apache.lucene.analysis.util.CharArraySet getWordSet(org.apache.lucene.analysis.util.ResourceLoader, java.lang.String, boolean) throws java.io.IOException
    {
        int $i0, $i1, $i2;
        org.apache.lucene.analysis.util.ResourceLoader r8;
        java.lang.String r1, r7, $r9;
        boolean z0, $z1;
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        java.util.Iterator $r5;
        org.apache.lucene.util.Version $r4, $r11;
        java.util.List $r2, $r10;
        org.apache.lucene.analysis.util.CharArraySet $r3, $r12, r13;
        java.lang.Object $r6;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r8 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: void assureMatchVersion()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.util.List splitFileNames(java.lang.String)>(r1);

        r13 = null;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label2;

        $r3 = new org.apache.lucene.analysis.util.CharArraySet;

        $r4 = r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: org.apache.lucene.util.Version luceneMatchVersion>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = $i1 * 10;

        specialinvoke $r3.<org.apache.lucene.analysis.util.CharArraySet: void <init>(org.apache.lucene.util.Version,int,boolean)>($r4, $i2, z0);

        r13 = $r3;

        $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $r9 = virtualinvoke r7.<java.lang.String: java.lang.String trim()>();

        $r10 = virtualinvoke r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.util.List getLines(org.apache.lucene.analysis.util.ResourceLoader,java.lang.String)>(r8, $r9);

        $r11 = r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: org.apache.lucene.util.Version luceneMatchVersion>;

        $r12 = staticinvoke <org.apache.lucene.analysis.core.StopFilter: org.apache.lucene.analysis.util.CharArraySet makeStopSet(org.apache.lucene.util.Version,java.util.List,boolean)>($r11, $r10, z0);

        virtualinvoke $r3.<org.apache.lucene.analysis.util.CharArraySet: boolean addAll(java.util.Collection)>($r12);

        goto label1;

     label2:
        return r13;
    }

    protected final java.util.List getLines(org.apache.lucene.analysis.util.ResourceLoader, java.lang.String) throws java.io.IOException
    {
        java.util.List $r4;
        java.nio.charset.Charset $r3;
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r5;
        org.apache.lucene.analysis.util.ResourceLoader r0;
        java.lang.String r1;
        java.io.InputStream $r2;

        r5 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r0 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<org.apache.lucene.analysis.util.ResourceLoader: java.io.InputStream openResource(java.lang.String)>(r1);

        $r3 = <org.apache.lucene.util.IOUtils: java.nio.charset.Charset CHARSET_UTF_8>;

        $r4 = staticinvoke <org.apache.lucene.analysis.util.WordlistLoader: java.util.List getLines(java.io.InputStream,java.nio.charset.Charset)>($r2, $r3);

        return $r4;
    }

    protected final org.apache.lucene.analysis.util.CharArraySet getSnowballWordSet(org.apache.lucene.analysis.util.ResourceLoader, java.lang.String, boolean) throws java.io.IOException
    {
        java.lang.Throwable $r19;
        java.nio.charset.Charset $r11;
        java.nio.charset.CodingErrorAction $r13, $r15;
        int $i0, $i1, $i2;
        java.io.Closeable[] $r18, $r20;
        org.apache.lucene.analysis.util.ResourceLoader r8;
        java.lang.String r1, r7, $r9;
        boolean z0, $z1;
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        java.util.Iterator $r5;
        java.nio.charset.CharsetDecoder $r12, $r14, $r16;
        org.apache.lucene.util.Version $r4;
        java.io.InputStreamReader $r17, r23;
        java.util.List $r2;
        org.apache.lucene.analysis.util.CharArraySet $r3, r21;
        java.lang.Object $r6;
        java.io.InputStream $r10, r22;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r8 := @parameter0: org.apache.lucene.analysis.util.ResourceLoader;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: void assureMatchVersion()>();

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.util.List splitFileNames(java.lang.String)>(r1);

        r21 = null;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label7;

        $r3 = new org.apache.lucene.analysis.util.CharArraySet;

        $r4 = r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: org.apache.lucene.util.Version luceneMatchVersion>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = $i1 * 10;

        specialinvoke $r3.<org.apache.lucene.analysis.util.CharArraySet: void <init>(org.apache.lucene.util.Version,int,boolean)>($r4, $i2, z0);

        r21 = $r3;

        $r5 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        r22 = null;

        r23 = null;

     label2:
        $r9 = virtualinvoke r7.<java.lang.String: java.lang.String trim()>();

        $r10 = interfaceinvoke r8.<org.apache.lucene.analysis.util.ResourceLoader: java.io.InputStream openResource(java.lang.String)>($r9);

        r22 = $r10;

        $r11 = <org.apache.lucene.util.IOUtils: java.nio.charset.Charset CHARSET_UTF_8>;

        $r12 = virtualinvoke $r11.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>();

        $r13 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        $r14 = virtualinvoke $r12.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>($r13);

        $r15 = <java.nio.charset.CodingErrorAction: java.nio.charset.CodingErrorAction REPORT>;

        $r16 = virtualinvoke $r14.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>($r15);

        $r17 = new java.io.InputStreamReader;

        specialinvoke $r17.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)>($r10, $r16);

        r23 = $r17;

        staticinvoke <org.apache.lucene.analysis.util.WordlistLoader: org.apache.lucene.analysis.util.CharArraySet getSnowballWordSet(java.io.Reader,org.apache.lucene.analysis.util.CharArraySet)>($r17, $r3);

     label3:
        $r18 = newarray (java.io.Closeable)[2];

        $r18[0] = $r17;

        $r18[1] = $r10;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r18);

        goto label6;

     label4:
        $r19 := @caughtexception;

     label5:
        $r20 = newarray (java.io.Closeable)[2];

        $r20[0] = r23;

        $r20[1] = r22;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r20);

        throw $r19;

     label6:
        goto label1;

     label7:
        return r21;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected final java.util.List splitFileNames(java.lang.String)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r6;
        java.lang.String[] $r2;
        java.util.ArrayList $r1;
        java.util.List $r5;
        int i0, i1;
        java.lang.String r0, r3, $r4;

        r6 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r5 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r5;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("(?<!\\\\),");

        i0 = lengthof $r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        r3 = $r2[i1];

        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\(?=,)", "");

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        return $r1;
    }

    public java.lang.String getClassArg()
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        java.util.Map $r1, $r4;
        java.lang.Class $r2;
        java.lang.Object $r5;
        java.lang.String $r3, r6;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        $r1 = r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.util.Map originalArgs>;

        if null == $r1 goto label1;

        $r4 = r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.util.Map originalArgs>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("class");

        r6 = (java.lang.String) $r5;

        if null == r6 goto label1;

        return r6;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        return $r3;
    }

    public boolean isExplicitLuceneMatchVersion()
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        $z0 = r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: boolean isExplicitLuceneMatchVersion>;

        return $z0;
    }

    public void setExplicitLuceneMatchVersion(boolean)
    {
        org.apache.lucene.analysis.util.AbstractAnalysisFactory r0;
        boolean z0;

        r0 := @this: org.apache.lucene.analysis.util.AbstractAnalysisFactory;

        z0 := @parameter0: boolean;

        r0.<org.apache.lucene.analysis.util.AbstractAnalysisFactory: boolean isExplicitLuceneMatchVersion> = z0;

        return;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.lang.String CLASS_NAME> = "class";

        <org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.lang.String LUCENE_MATCH_VERSION_PARAM> = "luceneMatchVersion";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[^,\\s]+");

        <org.apache.lucene.analysis.util.AbstractAnalysisFactory: java.util.regex.Pattern ITEM_PATTERN> = $r0;

        return;
    }
}
