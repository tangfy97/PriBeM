public class org.apache.batik.ext.awt.image.rendered.CompositeRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{
    org.apache.batik.ext.awt.image.CompositeRule rule;
    java.awt.CompositeContext[] contexts;

    public void <init>(java.util.List, org.apache.batik.ext.awt.image.CompositeRule)
    {
        java.awt.image.SampleModel $r13;
        org.apache.batik.ext.awt.image.CompositeRule r4;
        org.apache.batik.ext.awt.image.rendered.CompositeRed r0;
        boolean $z0, $z1, $z2;
        org.apache.batik.ext.awt.image.SVGComposite $r5;
        java.util.List r19;
        org.apache.batik.ext.awt.image.rendered.CachableRed r2, r21, r22;
        java.awt.Rectangle $r12, $r17, r20;
        org.apache.batik.ext.awt.image.rendered.PadRed $r23;
        java.util.ArrayList $r14;
        org.apache.batik.ext.awt.image.PadMode $r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22;
        double $d0, $d1, $d2, $d3;
        java.util.Iterator $r7, $r15;
        java.awt.CompositeContext[] $r6, $r9;
        java.lang.IllegalArgumentException $r18;
        java.awt.image.ColorModel $r3, $r10;
        java.lang.Object $r1, $r8, $r16;
        java.awt.CompositeContext $r11;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.CompositeRed;

        r19 := @parameter0: java.util.List;

        r4 := @parameter1: org.apache.batik.ext.awt.image.CompositeRule;

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>()>();

        $r1 = interfaceinvoke r19.<java.util.List: java.lang.Object get(int)>(0);

        r2 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r1;

        $r3 = staticinvoke <org.apache.batik.ext.awt.image.rendered.CompositeRed: java.awt.image.ColorModel fixColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r2);

        r0.<org.apache.batik.ext.awt.image.rendered.CompositeRed: org.apache.batik.ext.awt.image.CompositeRule rule> = r4;

        $r5 = new org.apache.batik.ext.awt.image.SVGComposite;

        specialinvoke $r5.<org.apache.batik.ext.awt.image.SVGComposite: void <init>(org.apache.batik.ext.awt.image.CompositeRule)>(r4);

        $i0 = interfaceinvoke r19.<java.util.List: int size()>();

        $r6 = newarray (java.awt.CompositeContext)[$i0];

        r0.<org.apache.batik.ext.awt.image.rendered.CompositeRed: java.awt.CompositeContext[] contexts> = $r6;

        i22 = 0;

        $r7 = interfaceinvoke r19.<java.util.List: java.util.Iterator iterator()>();

        r20 = null;

        goto label07;

     label01:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r21 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r8;

        $r9 = r0.<org.apache.batik.ext.awt.image.rendered.CompositeRed: java.awt.CompositeContext[] contexts>;

        $i1 = i22;

        i22 = i22 + 1;

        $r10 = interfaceinvoke r21.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r11 = virtualinvoke $r5.<org.apache.batik.ext.awt.image.SVGComposite: java.awt.CompositeContext createContext(java.awt.image.ColorModel,java.awt.image.ColorModel,java.awt.RenderingHints)>($r10, $r3, null);

        $r9[$i1] = $r11;

        $r12 = interfaceinvoke r21.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        if r20 != null goto label02;

        r20 = $r12;

        goto label07;

     label02:
        $i2 = virtualinvoke r4.<org.apache.batik.ext.awt.image.CompositeRule: int getRule()>();

        lookupswitch($i2)
        {
            case 2: goto label03;
            case 3: goto label05;
            default: goto label06;
        };

     label03:
        $z0 = virtualinvoke r20.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>($r12);

        if $z0 == 0 goto label04;

        r20 = virtualinvoke r20.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r12);

        goto label07;

     label04:
        r20.<java.awt.Rectangle: int width> = 0;

        r20.<java.awt.Rectangle: int height> = 0;

        goto label07;

     label05:
        r20 = $r12;

        goto label07;

     label06:
        virtualinvoke r20.<java.awt.Rectangle: void add(java.awt.Rectangle)>($r12);

     label07:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label01;

        if r20 != null goto label08;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Composite Operation Must have some source!");

        throw $r18;

     label08:
        $i3 = virtualinvoke r4.<org.apache.batik.ext.awt.image.CompositeRule: int getRule()>();

        if $i3 != 6 goto label13;

        $r14 = new java.util.ArrayList;

        $i11 = interfaceinvoke r19.<java.util.List: int size()>();

        specialinvoke $r14.<java.util.ArrayList: void <init>(int)>($i11);

        $r15 = interfaceinvoke r19.<java.util.List: java.util.Iterator iterator()>();

        goto label12;

     label09:
        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r22 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r16;

        $r17 = interfaceinvoke r22.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $i13 = $r17.<java.awt.Rectangle: int x>;

        $i12 = r20.<java.awt.Rectangle: int x>;

        if $i13 != $i12 goto label10;

        $i15 = $r17.<java.awt.Rectangle: int y>;

        $i14 = r20.<java.awt.Rectangle: int y>;

        if $i15 != $i14 goto label10;

        $i17 = $r17.<java.awt.Rectangle: int width>;

        $i16 = r20.<java.awt.Rectangle: int width>;

        if $i17 != $i16 goto label10;

        $i19 = $r17.<java.awt.Rectangle: int height>;

        $i18 = r20.<java.awt.Rectangle: int height>;

        if $i19 == $i18 goto label11;

     label10:
        $r23 = new org.apache.batik.ext.awt.image.rendered.PadRed;

        $r24 = <org.apache.batik.ext.awt.image.PadMode: org.apache.batik.ext.awt.image.PadMode ZERO_PAD>;

        specialinvoke $r23.<org.apache.batik.ext.awt.image.rendered.PadRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,org.apache.batik.ext.awt.image.PadMode,java.awt.RenderingHints)>(r22, r20, $r24, null);

        r22 = $r23;

     label11:
        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r22);

     label12:
        $z2 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label09;

        r19 = $r14;

     label13:
        $r13 = staticinvoke <org.apache.batik.ext.awt.image.rendered.CompositeRed: java.awt.image.SampleModel fixSampleModel(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.image.ColorModel,java.awt.Rectangle)>(r2, $r3, r20);

        $i4 = staticinvoke <org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: int getDefaultTileSize()>();

        $i5 = r20.<java.awt.Rectangle: int x>;

        $i6 = $i5 / $i4;

        $d0 = (double) $i6;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i7 = (int) $d1;

        $i20 = $i4 * $i7;

        $i8 = r20.<java.awt.Rectangle: int y>;

        $i9 = $i8 / $i4;

        $d2 = (double) $i9;

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        $i10 = (int) $d3;

        $i21 = $i4 * $i10;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void init(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>(r19, r20, $r3, $r13, $i20, $i21, null);

        return;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        java.awt.image.WritableRaster r1;
        org.apache.batik.ext.awt.image.rendered.CompositeRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.CompositeRed;

        r1 := @parameter0: java.awt.image.WritableRaster;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.CompositeRed: void genRect(java.awt.image.WritableRaster)>(r1);

        return r1;
    }

    public java.awt.image.Raster getTile(int, int)
    {
        java.awt.Point $r1;
        java.awt.image.SampleModel $r2;
        int i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8, i9;
        java.awt.image.WritableRaster $r3;
        org.apache.batik.ext.awt.image.rendered.CompositeRed r0;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.CompositeRed;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        $i3 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridXOff>;

        $i1 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileWidth>;

        $i2 = i0 * $i1;

        i4 = $i3 + $i2;

        $i8 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileGridYOff>;

        $i6 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: int tileHeight>;

        $i7 = i5 * $i6;

        i9 = $i8 + $i7;

        $r1 = new java.awt.Point;

        specialinvoke $r1.<java.awt.Point: void <init>(int,int)>(i4, i9);

        $r2 = r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.SampleModel sm>;

        $r3 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createWritableRaster(java.awt.image.SampleModel,java.awt.Point)>($r2, $r1);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.CompositeRed: void genRect(java.awt.image.WritableRaster)>($r3);

        return $r3;
    }

    public void emptyRect(java.awt.image.WritableRaster)
    {
        java.awt.Rectangle $r2;
        org.apache.batik.ext.awt.image.rendered.PadRed$ZeroRecter $r1;
        int $i0, $i1, $i2, $i3;
        java.awt.image.WritableRaster r0;
        org.apache.batik.ext.awt.image.rendered.CompositeRed r3;

        r3 := @this: org.apache.batik.ext.awt.image.rendered.CompositeRed;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $r1 = staticinvoke <org.apache.batik.ext.awt.image.rendered.PadRed$ZeroRecter: org.apache.batik.ext.awt.image.rendered.PadRed$ZeroRecter getZeroRecter(java.awt.image.WritableRaster)>(r0);

        $r2 = new java.awt.Rectangle;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i2 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i3 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        specialinvoke $r2.<java.awt.Rectangle: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        virtualinvoke $r1.<org.apache.batik.ext.awt.image.rendered.PadRed$ZeroRecter: void zeroRect(java.awt.Rectangle)>($r2);

        return;
    }

    public void genRect(java.awt.image.WritableRaster)
    {
        java.util.Vector $r3;
        org.apache.batik.ext.awt.image.rendered.CompositeRed r2;
        boolean $z0, z1, $z2, $z3;
        org.apache.batik.ext.awt.image.rendered.CachableRed r6;
        java.awt.Rectangle $r1, $r7, $r8, $r13;
        java.awt.image.Raster $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22;
        java.util.Iterator $r4;
        java.awt.CompositeContext[] $r11;
        java.awt.image.ColorModel $r14, $r15;
        java.awt.image.WritableRaster r0, $r10;
        java.lang.Object $r5;
        java.awt.CompositeContext $r12;

        r2 := @this: org.apache.batik.ext.awt.image.rendered.CompositeRed;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        i22 = 0;

        $r3 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector srcs>;

        $r4 = virtualinvoke $r3.<java.util.AbstractList: java.util.Iterator iterator()>();

        z1 = 1;

        goto label7;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r5;

        if z1 == 0 goto label5;

        $r13 = interfaceinvoke r6.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $i7 = $r1.<java.awt.Rectangle: int x>;

        $i6 = $r13.<java.awt.Rectangle: int x>;

        if $i7 < $i6 goto label2;

        $i9 = $r1.<java.awt.Rectangle: int y>;

        $i8 = $r13.<java.awt.Rectangle: int y>;

        if $i9 < $i8 goto label2;

        $i11 = $r1.<java.awt.Rectangle: int x>;

        $i10 = $r1.<java.awt.Rectangle: int width>;

        $i15 = $i11 + $i10;

        $i13 = $r13.<java.awt.Rectangle: int x>;

        $i12 = $r13.<java.awt.Rectangle: int width>;

        $i14 = $i13 + $i12;

        if $i15 > $i14 goto label2;

        $i17 = $r1.<java.awt.Rectangle: int y>;

        $i16 = $r1.<java.awt.Rectangle: int height>;

        $i21 = $i17 + $i16;

        $i19 = $r13.<java.awt.Rectangle: int y>;

        $i18 = $r13.<java.awt.Rectangle: int height>;

        $i20 = $i19 + $i18;

        if $i21 <= $i20 goto label3;

     label2:
        virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.CompositeRed: void emptyRect(java.awt.image.WritableRaster)>(r0);

     label3:
        interfaceinvoke r6.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(r0);

        $r15 = interfaceinvoke r6.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $z2 = virtualinvoke $r15.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z2 != 0 goto label4;

        $r14 = interfaceinvoke r6.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>(r0, $r14, 1);

     label4:
        z1 = 0;

        goto label6;

     label5:
        $r7 = interfaceinvoke r6.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $z0 = virtualinvoke $r7.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>($r1);

        if $z0 == 0 goto label6;

        $r8 = virtualinvoke $r7.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r1);

        $r9 = interfaceinvoke r6.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r8);

        $i5 = $r8.<java.awt.Rectangle: int x>;

        $i4 = $r8.<java.awt.Rectangle: int y>;

        $i3 = $r8.<java.awt.Rectangle: int width>;

        $i2 = $r8.<java.awt.Rectangle: int height>;

        $i1 = $r8.<java.awt.Rectangle: int x>;

        $i0 = $r8.<java.awt.Rectangle: int y>;

        $r10 = virtualinvoke r0.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>($i5, $i4, $i3, $i2, $i1, $i0, null);

        $r11 = r2.<org.apache.batik.ext.awt.image.rendered.CompositeRed: java.awt.CompositeContext[] contexts>;

        $r12 = $r11[i22];

        interfaceinvoke $r12.<java.awt.CompositeContext: void compose(java.awt.image.Raster,java.awt.image.Raster,java.awt.image.WritableRaster)>($r9, $r10, $r10);

     label6:
        i22 = i22 + 1;

     label7:
        $z3 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label1;

        return;
    }

    public void genRect_OVER(java.awt.image.WritableRaster)
    {
        java.util.Vector $r7;
        org.apache.batik.ext.awt.image.rendered.CompositeRed r2;
        boolean $z0, z1, $z2, $z3;
        java.awt.image.BufferedImage $r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r10;
        java.awt.Rectangle $r1, $r11;
        java.awt.Graphics2D $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        java.util.Iterator $r8;
        java.awt.image.ColorModel $r3, $r12;
        java.awt.image.WritableRaster r0, $r5;
        java.lang.Object $r9;

        r2 := @this: org.apache.batik.ext.awt.image.rendered.CompositeRed;

        r0 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r3 = virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.awt.image.ColorModel getColorModel()>();

        $r4 = new java.awt.image.BufferedImage;

        $r5 = virtualinvoke r0.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableTranslatedChild(int,int)>(0, 0);

        $z0 = virtualinvoke $r3.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        specialinvoke $r4.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r3, $r5, $z0, null);

        $r6 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.Graphics2D createGraphics(java.awt.image.BufferedImage)>($r4);

        $i0 = $r1.<java.awt.Rectangle: int x>;

        $i3 = neg $i0;

        $i1 = $r1.<java.awt.Rectangle: int y>;

        $i2 = neg $i1;

        virtualinvoke $r6.<java.awt.Graphics2D: void translate(int,int)>($i3, $i2);

        $r7 = r2.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector srcs>;

        $r8 = virtualinvoke $r7.<java.util.AbstractList: java.util.Iterator iterator()>();

        z1 = 1;

        goto label5;

     label1:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r9;

        if z1 == 0 goto label4;

        $r11 = interfaceinvoke r10.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $i5 = $r1.<java.awt.Rectangle: int x>;

        $i4 = $r11.<java.awt.Rectangle: int x>;

        if $i5 < $i4 goto label2;

        $i7 = $r1.<java.awt.Rectangle: int y>;

        $i6 = $r11.<java.awt.Rectangle: int y>;

        if $i7 < $i6 goto label2;

        $i9 = $r1.<java.awt.Rectangle: int x>;

        $i8 = $r1.<java.awt.Rectangle: int width>;

        $i13 = $i9 + $i8;

        $i11 = $r11.<java.awt.Rectangle: int x>;

        $i10 = $r11.<java.awt.Rectangle: int width>;

        $i12 = $i11 + $i10;

        if $i13 > $i12 goto label2;

        $i15 = $r1.<java.awt.Rectangle: int y>;

        $i14 = $r1.<java.awt.Rectangle: int height>;

        $i19 = $i15 + $i14;

        $i17 = $r11.<java.awt.Rectangle: int y>;

        $i16 = $r11.<java.awt.Rectangle: int height>;

        $i18 = $i17 + $i16;

        if $i19 <= $i18 goto label3;

     label2:
        virtualinvoke r2.<org.apache.batik.ext.awt.image.rendered.CompositeRed: void emptyRect(java.awt.image.WritableRaster)>(r0);

     label3:
        interfaceinvoke r10.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(r0);

        $r12 = interfaceinvoke r10.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $z2 = virtualinvoke $r3.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,java.awt.image.ColorModel,boolean)>(r0, $r12, $z2);

        z1 = 0;

        goto label5;

     label4:
        staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: void drawImage(java.awt.Graphics2D,org.apache.batik.ext.awt.image.rendered.CachableRed)>($r6, r10);

     label5:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label1;

        return;
    }

    protected static java.awt.image.SampleModel fixSampleModel(org.apache.batik.ext.awt.image.rendered.CachableRed, java.awt.image.ColorModel, java.awt.Rectangle)
    {
        java.awt.Rectangle r0;
        java.awt.image.SampleModel $r2, $r4;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, i16, $i17, $i18, i19, i20;
        double $d0, $d1, $d2, $d3;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1;
        java.awt.image.ColorModel r3;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r3 := @parameter1: java.awt.image.ColorModel;

        r0 := @parameter2: java.awt.Rectangle;

        $i0 = staticinvoke <org.apache.batik.ext.awt.image.rendered.AbstractTiledRed: int getDefaultTileSize()>();

        $i1 = r0.<java.awt.Rectangle: int x>;

        $i2 = $i1 / $i0;

        $d0 = (double) $i2;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i3 = (int) $d1;

        i4 = $i0 * $i3;

        $i5 = r0.<java.awt.Rectangle: int y>;

        $i6 = $i5 / $i0;

        $d2 = (double) $i6;

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        $i7 = (int) $d3;

        i8 = $i0 * $i7;

        $i10 = r0.<java.awt.Rectangle: int x>;

        $i9 = r0.<java.awt.Rectangle: int width>;

        $i11 = $i10 + $i9;

        i12 = $i11 - i4;

        $i14 = r0.<java.awt.Rectangle: int y>;

        $i13 = r0.<java.awt.Rectangle: int height>;

        $i15 = $i14 + $i13;

        i16 = $i15 - i8;

        $r2 = interfaceinvoke r1.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i17 = virtualinvoke $r2.<java.awt.image.SampleModel: int getWidth()>();

        i19 = $i17;

        if $i17 >= $i0 goto label1;

        i19 = $i0;

     label1:
        if i19 <= i12 goto label2;

        i19 = i12;

     label2:
        $i18 = virtualinvoke $r2.<java.awt.image.SampleModel: int getHeight()>();

        i20 = $i18;

        if $i18 >= $i0 goto label3;

        i20 = $i0;

     label3:
        if i20 <= i16 goto label4;

        i20 = i16;

     label4:
        if i19 <= 0 goto label5;

        if i20 > 0 goto label6;

     label5:
        i19 = 1;

        i20 = 1;

     label6:
        $r4 = virtualinvoke r3.<java.awt.image.ColorModel: java.awt.image.SampleModel createCompatibleSampleModel(int,int)>(i19, i20);

        return $r4;
    }

    protected static java.awt.image.ColorModel fixColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.color.ColorSpace $r4;
        java.awt.image.SampleModel $r2;
        int[] r3;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        boolean $z0, $z1;
        java.awt.image.DirectColorModel $r5;
        java.lang.IllegalArgumentException $r6;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel $r1, r7;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        r7 = $r1;

        $z0 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z1 != 0 goto label1;

        r7 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.image.ColorModel coerceColorModel(java.awt.image.ColorModel,boolean)>($r1, 1);

     label1:
        return r7;

     label2:
        $r2 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r2.<java.awt.image.SampleModel: int getNumBands()>();

        i1 = $i0 + 1;

        if i1 <= 4 goto label3;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CompositeRed can only handle up to three band images");

        throw $r6;

     label3:
        r3 = newarray (int)[4];

        i13 = 0;

        goto label5;

     label4:
        $i3 = 8 * i13;

        $i4 = 16711680 >> $i3;

        r3[i13] = $i4;

        i13 = i13 + 1;

     label5:
        $i2 = i1 - 1;

        if i13 < $i2 goto label4;

        $i5 = i1 - 1;

        $i6 = 8 * $i5;

        $i7 = 255 << $i6;

        r3[3] = $i7;

        $r4 = virtualinvoke $r1.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $r5 = new java.awt.image.DirectColorModel;

        $i12 = 8 * i1;

        $i11 = r3[0];

        $i10 = r3[1];

        $i9 = r3[2];

        $i8 = r3[3];

        specialinvoke $r5.<java.awt.image.DirectColorModel: void <init>(java.awt.color.ColorSpace,int,int,int,int,int,boolean,int)>($r4, $i12, $i11, $i10, $i9, $i8, 1, 3);

        return $r5;
    }
}
