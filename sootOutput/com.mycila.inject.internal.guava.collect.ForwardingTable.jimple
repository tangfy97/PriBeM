public abstract class com.mycila.inject.internal.guava.collect.ForwardingTable extends com.mycila.inject.internal.guava.collect.ForwardingObject implements com.mycila.inject.internal.guava.collect.Table
{

    protected void <init>()
    {
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingObject: void <init>()>();

        return;
    }

    protected abstract com.mycila.inject.internal.guava.collect.Table delegate();

    public java.util.Set cellSet()
    {
        com.mycila.inject.internal.guava.collect.Table $r1;
        java.util.Set $r2;
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: java.util.Set cellSet()>();

        return $r2;
    }

    public void clear()
    {
        com.mycila.inject.internal.guava.collect.Table $r1;
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: void clear()>();

        return;
    }

    public java.util.Map column(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;
        java.util.Map $r3;
        com.mycila.inject.internal.guava.collect.Table $r1;
        java.lang.Object r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $r3 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: java.util.Map column(java.lang.Object)>(r2);

        return $r3;
    }

    public java.util.Set columnKeySet()
    {
        com.mycila.inject.internal.guava.collect.Table $r1;
        java.util.Set $r2;
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: java.util.Set columnKeySet()>();

        return $r2;
    }

    public java.util.Map columnMap()
    {
        com.mycila.inject.internal.guava.collect.Table $r1;
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;
        java.util.Map $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: java.util.Map columnMap()>();

        return $r2;
    }

    public boolean contains(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;
        com.mycila.inject.internal.guava.collect.Table $r1;
        java.lang.Object r2, r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $z0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: boolean contains(java.lang.Object,java.lang.Object)>(r2, r3);

        return $z0;
    }

    public boolean containsColumn(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;
        com.mycila.inject.internal.guava.collect.Table $r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $z0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: boolean containsColumn(java.lang.Object)>(r2);

        return $z0;
    }

    public boolean containsRow(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;
        com.mycila.inject.internal.guava.collect.Table $r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $z0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: boolean containsRow(java.lang.Object)>(r2);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;
        com.mycila.inject.internal.guava.collect.Table $r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $z0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: boolean containsValue(java.lang.Object)>(r2);

        return $z0;
    }

    public java.lang.Object get(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;
        com.mycila.inject.internal.guava.collect.Table $r1;
        java.lang.Object r2, r3, $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $r4 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: java.lang.Object get(java.lang.Object,java.lang.Object)>(r2, r3);

        return $r4;
    }

    public boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.Table $r1;
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $z0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: boolean isEmpty()>();

        return $z0;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;
        com.mycila.inject.internal.guava.collect.Table $r1;
        java.lang.Object r2, r3, r4, $r5;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $r5 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r3, r4);

        return $r5;
    }

    public void putAll(com.mycila.inject.internal.guava.collect.Table)
    {
        com.mycila.inject.internal.guava.collect.Table $r1, r2;
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.Table;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: void putAll(com.mycila.inject.internal.guava.collect.Table)>(r2);

        return;
    }

    public java.lang.Object remove(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;
        com.mycila.inject.internal.guava.collect.Table $r1;
        java.lang.Object r2, r3, $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $r4 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: java.lang.Object remove(java.lang.Object,java.lang.Object)>(r2, r3);

        return $r4;
    }

    public java.util.Map row(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;
        java.util.Map $r3;
        com.mycila.inject.internal.guava.collect.Table $r1;
        java.lang.Object r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $r3 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: java.util.Map row(java.lang.Object)>(r2);

        return $r3;
    }

    public java.util.Set rowKeySet()
    {
        com.mycila.inject.internal.guava.collect.Table $r1;
        java.util.Set $r2;
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: java.util.Set rowKeySet()>();

        return $r2;
    }

    public java.util.Map rowMap()
    {
        com.mycila.inject.internal.guava.collect.Table $r1;
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;
        java.util.Map $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: java.util.Map rowMap()>();

        return $r2;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Table $r1;
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $i0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: int size()>();

        return $i0;
    }

    public java.util.Collection values()
    {
        com.mycila.inject.internal.guava.collect.Table $r1;
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;
        java.util.Collection $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.collect.Table: java.util.Collection values()>();

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ForwardingTable r1;
        com.mycila.inject.internal.guava.collect.Table $r2;
        java.lang.Object r0;
        boolean $z0, $z1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        r0 := @parameter0: java.lang.Object;

        if r0 == r1 goto label1;

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public int hashCode()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Table $r1;
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    protected volatile java.lang.Object delegate()
    {
        com.mycila.inject.internal.guava.collect.Table $r1;
        com.mycila.inject.internal.guava.collect.ForwardingTable r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ForwardingTable;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingTable: com.mycila.inject.internal.guava.collect.Table delegate()>();

        return $r1;
    }
}
