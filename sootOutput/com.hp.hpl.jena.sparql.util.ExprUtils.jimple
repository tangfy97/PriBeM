public class com.hp.hpl.jena.sparql.util.ExprUtils extends java.lang.Object
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.ExprUtils r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.ExprUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.sparql.expr.Expr nodeToExpr(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r1;
        com.hp.hpl.jena.graph.Node r0;
        boolean $z0;
        com.hp.hpl.jena.sparql.expr.ExprVar $r2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label1;

        $r2 = new com.hp.hpl.jena.sparql.expr.ExprVar;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.expr.ExprVar: void <init>(com.hp.hpl.jena.graph.Node)>(r0);

        return $r2;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>(r0);

        return $r1;
    }

    public static java.lang.String joinList(java.util.List, java.lang.String)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r7;
        java.util.Iterator $r2;
        java.util.List r0;
        com.hp.hpl.jena.sparql.expr.Expr r5;
        java.lang.StringBuffer $r1;
        int $i0;
        java.lang.Object $r4;
        java.lang.String $r3, $r6, $r8, r9;
        boolean $z0, $z1, z2;

        r0 := @parameter0: java.util.List;

        r9 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return "<<Null list>>";

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

        return "<<Empty list>>";

     label2:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        z2 = 1;

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.expr.Expr) $r4;

        if z2 != 0 goto label4;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);

     label4:
        $z1 = r5 instanceof com.hp.hpl.jena.sparql.expr.NodeValue;

        if $z1 == 0 goto label5;

        r7 = (com.hp.hpl.jena.sparql.expr.NodeValue) r5;

        $r8 = virtualinvoke r7.<com.hp.hpl.jena.sparql.expr.NodeValue: java.lang.String asQuotedString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        goto label6;

     label5:
        $r6 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

     label6:
        z2 = 0;

        goto label3;

     label7:
        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.Expr parse(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.sparql.expr.Expr $r2;
        com.hp.hpl.jena.shared.PrefixMapping $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.shared.PrefixMapping getGlobalPrefixMap()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: com.hp.hpl.jena.sparql.expr.Expr parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.Expr parse(java.lang.String, com.hp.hpl.jena.shared.PrefixMapping)
    {
        com.hp.hpl.jena.query.Query $r0;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        java.lang.String r2;
        com.hp.hpl.jena.shared.PrefixMapping r1;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: com.hp.hpl.jena.shared.PrefixMapping;

        $r0 = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query make()>();

        virtualinvoke $r0.<com.hp.hpl.jena.query.Query: void setPrefixMapping(com.hp.hpl.jena.shared.PrefixMapping)>(r1);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: com.hp.hpl.jena.sparql.expr.Expr parse(com.hp.hpl.jena.query.Query,java.lang.String,boolean)>($r0, r2, 1);

        return $r3;
    }

    public static com.hp.hpl.jena.sparql.expr.Expr parse(com.hp.hpl.jena.query.Query, java.lang.String, boolean)
    {
        com.hp.hpl.jena.sparql.expr.Expr $r4;
        boolean z0;
        com.hp.hpl.jena.sparql.lang.arq.ARQParser $r29;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r14, $r30;
        com.hp.hpl.jena.query.Query r3;
        java.lang.Error $r16;
        com.hp.hpl.jena.sparql.lang.arq.ParseException $r23;
        com.hp.hpl.jena.sparql.lang.arq.TokenMgrError $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10, $i12, $i14, $i16, $i18;
        com.hp.hpl.jena.sparql.lang.arq.Token $r5, $r26, $r27;
        java.lang.String r1, $r9, $r15, $r17, $r22, $r25;
        com.hp.hpl.jena.query.QueryParseException $r31, $r32, $r33, $r34, $r35;
        java.io.StringReader $r28;

        r3 := @parameter0: com.hp.hpl.jena.query.Query;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

     label1:
        $r28 = new java.io.StringReader;

        specialinvoke $r28.<java.io.StringReader: void <init>(java.lang.String)>(r1);

        $r29 = new com.hp.hpl.jena.sparql.lang.arq.ARQParser;

        specialinvoke $r29.<com.hp.hpl.jena.sparql.lang.arq.ARQParser: void <init>(java.io.Reader)>($r28);

        virtualinvoke $r29.<com.hp.hpl.jena.sparql.lang.arq.ARQParser: void setQuery(com.hp.hpl.jena.query.Query)>(r3);

        $r4 = virtualinvoke $r29.<com.hp.hpl.jena.sparql.lang.arq.ARQParser: com.hp.hpl.jena.sparql.expr.Expr Expression()>();

        if z0 == 0 goto label2;

        $r5 = virtualinvoke $r29.<com.hp.hpl.jena.sparql.lang.arq.ARQParser: com.hp.hpl.jena.sparql.lang.arq.Token getNextToken()>();

        $i0 = $r5.<com.hp.hpl.jena.sparql.lang.arq.Token: int kind>;

        if $i0 == 0 goto label2;

        $r31 = new com.hp.hpl.jena.query.QueryParseException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Extra tokens beginning \"");

        $r9 = $r5.<com.hp.hpl.jena.sparql.lang.arq.Token: java.lang.String image>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" starting line ");

        $i1 = $r5.<com.hp.hpl.jena.sparql.lang.arq.Token: int beginLine>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", column ");

        $i2 = $r5.<com.hp.hpl.jena.sparql.lang.arq.Token: int beginColumn>;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $i4 = $r5.<com.hp.hpl.jena.sparql.lang.arq.Token: int beginLine>;

        $i3 = $r5.<com.hp.hpl.jena.sparql.lang.arq.Token: int beginColumn>;

        specialinvoke $r31.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>($r15, $i4, $i3);

        throw $r31;

     label2:
        return $r4;

     label3:
        $r23 := @caughtexception;

        $r32 = new com.hp.hpl.jena.query.QueryParseException;

        $r25 = virtualinvoke $r23.<com.hp.hpl.jena.sparql.lang.arq.ParseException: java.lang.String getMessage()>();

        $r26 = $r23.<com.hp.hpl.jena.sparql.lang.arq.ParseException: com.hp.hpl.jena.sparql.lang.arq.Token currentToken>;

        $i6 = $r26.<com.hp.hpl.jena.sparql.lang.arq.Token: int beginLine>;

        $r27 = $r23.<com.hp.hpl.jena.sparql.lang.arq.ParseException: com.hp.hpl.jena.sparql.lang.arq.Token currentToken>;

        $i5 = $r27.<com.hp.hpl.jena.sparql.lang.arq.Token: int beginLine>;

        specialinvoke $r32.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>($r25, $i6, $i5);

        throw $r32;

     label4:
        $r20 := @caughtexception;

        $r33 = new com.hp.hpl.jena.query.QueryParseException;

        $r22 = virtualinvoke $r20.<com.hp.hpl.jena.sparql.lang.arq.TokenMgrError: java.lang.String getMessage()>();

        $i8 = (int) -1;

        $i10 = (int) -1;

        specialinvoke $r33.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>($r22, $i8, $i10);

        throw $r33;

     label5:
        $r16 := @caughtexception;

        $r17 = virtualinvoke $r16.<java.lang.Error: java.lang.String getMessage()>();

        if $r17 != null goto label6;

        $r34 = new com.hp.hpl.jena.query.QueryParseException;

        $i12 = (int) -1;

        $i14 = (int) -1;

        specialinvoke $r34.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.Throwable,int,int)>($r16, $i12, $i14);

        throw $r34;

     label6:
        $r35 = new com.hp.hpl.jena.query.QueryParseException;

        $i16 = (int) -1;

        $i18 = (int) -1;

        specialinvoke $r35.<com.hp.hpl.jena.query.QueryParseException: void <init>(java.lang.String,int,int)>($r17, $i16, $i18);

        throw $r35;

        catch com.hp.hpl.jena.sparql.lang.arq.ParseException from label1 to label2 with label3;
        catch com.hp.hpl.jena.sparql.lang.arq.TokenMgrError from label1 to label2 with label4;
        catch java.lang.Error from label1 to label2 with label5;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue parseNodeValue(java.lang.String)
    {
        java.lang.String r0;
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node parseNode(java.lang.String)>(r0);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.sparql.expr.NodeValue makeNode(com.hp.hpl.jena.graph.Node)>($r1);

        return $r2;
    }

    public static void fmtSPARQL(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        com.hp.hpl.jena.sparql.expr.Expr r3;
        com.hp.hpl.jena.sparql.serializer.SerializationContext r2;
        com.hp.hpl.jena.sparql.serializer.FmtExprSPARQL $r0;
        org.apache.jena.atlas.io.IndentedWriter r1;

        r1 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r3 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        r2 := @parameter2: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r0 = new com.hp.hpl.jena.sparql.serializer.FmtExprSPARQL;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.serializer.FmtExprSPARQL: void <init>(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r1, r2);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.serializer.FmtExprSPARQL: void format(com.hp.hpl.jena.sparql.expr.Expr)>(r3);

        return;
    }

    public static void fmtSPARQL(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1;
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r2;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: void fmtSPARQL(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, r1, $r2);

        return;
    }

    public static java.lang.String fmtSPARQL(com.hp.hpl.jena.sparql.expr.Expr)
    {
        org.apache.jena.atlas.io.IndentedLineBuffer $r0;
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.expr.Expr r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = new org.apache.jena.atlas.io.IndentedLineBuffer;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: void fmtSPARQL(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.expr.Expr)>($r0, r1);

        $r2 = virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static void fmtSPARQL(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.sparql.serializer.SerializationContext r2;
        org.apache.jena.atlas.io.IndentedWriter r1;
        com.hp.hpl.jena.sparql.expr.Expr r6;
        com.hp.hpl.jena.sparql.expr.ExprList r3;
        java.lang.Object $r5;
        com.hp.hpl.jena.sparql.serializer.FmtExprSPARQL $r0;
        java.lang.String r7;
        boolean $z0;

        r1 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r3 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        r2 := @parameter2: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r0 = new com.hp.hpl.jena.sparql.serializer.FmtExprSPARQL;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.serializer.FmtExprSPARQL: void <init>(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r1, r2);

        r7 = "";

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.expr.Expr) $r5;

        virtualinvoke r1.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(r7);

        r7 = " , ";

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.serializer.FmtExprSPARQL: void format(com.hp.hpl.jena.sparql.expr.Expr)>(r6);

        goto label1;

     label2:
        return;
    }

    public static void fmtSPARQL(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.sparql.expr.ExprList r1;
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r2;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r1 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: com.hp.hpl.jena.sparql.serializer.SerializationContext sCxt()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: void fmtSPARQL(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r0, r1, $r2);

        return;
    }

    public static java.lang.String fmtSPARQL(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        org.apache.jena.atlas.io.IndentedLineBuffer $r0;
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.expr.ExprList r1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        $r0 = new org.apache.jena.atlas.io.IndentedLineBuffer;

        specialinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: void fmtSPARQL(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.expr.ExprList)>($r0, r1);

        $r2 = virtualinvoke $r0.<org.apache.jena.atlas.io.IndentedLineBuffer: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String strComparison(int)
    {
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case -1: goto label3;
            case 0: goto label2;
            case 1: goto label1;
            case 2: goto label4;
            default: goto label5;
        };

     label1:
        return "GT";

     label2:
        return "EQ";

     label3:
        return "LT";

     label4:
        return "indeterminate";

     label5:
        return "??";
    }

    public static void expr(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: void expr(java.lang.String,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0, null);

        return;
    }

    public static void expr(java.lang.String, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.io.PrintStream $r6;
        com.hp.hpl.jena.sparql.engine.binding.Binding r3;
        com.hp.hpl.jena.sparql.expr.Expr $r2;
        java.lang.StringBuilder $r5, $r7, $r9;
        java.lang.String r0, $r8, $r10;
        com.hp.hpl.jena.query.QueryParseException $r4;
        com.hp.hpl.jena.shared.PrefixMapping $r1;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.shared.PrefixMapping getGlobalPrefixMap()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: com.hp.hpl.jena.sparql.expr.Expr parse(java.lang.String,com.hp.hpl.jena.shared.PrefixMapping)>(r0, $r1);

        staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: void evalPrint(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r2, r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r6 = <java.lang.System: java.io.PrintStream err>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parse error: ");

        $r8 = virtualinvoke $r4.<com.hp.hpl.jena.query.QueryParseException: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10);

        return;

     label4:
        return;

        catch com.hp.hpl.jena.query.QueryParseException from label1 to label2 with label3;
    }

    public static void exprPrefix(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: void exprPrefix(java.lang.String,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0, null);

        return;
    }

    public static void evalPrint(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        com.hp.hpl.jena.sparql.sse.builders.ExprBuildException $r6;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.expr.Expr r0;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r13;
        java.lang.String $r4, $r10, $r12, $r17, $r19;
        java.io.PrintStream $r5, $r8, $r15;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        java.lang.StringBuilder $r7, $r9, $r11, $r14, $r16, $r18;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r1 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0, r1);

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.NodeValue: com.hp.hpl.jena.graph.Node asNode()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r3);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r4);

     label2:
        goto label5;

     label3:
        $r13 := @caughtexception;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception: ");

        $r17 = virtualinvoke $r13.<com.hp.hpl.jena.sparql.expr.ExprEvalException: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r19);

        return;

     label4:
        $r6 := @caughtexception;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Build exception: ");

        $r10 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.sse.builders.ExprBuildException: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);

        return;

     label5:
        return;

        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label1 to label2 with label3;
        catch com.hp.hpl.jena.sparql.sse.builders.ExprBuildException from label1 to label2 with label4;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding $r1;
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        com.hp.hpl.jena.sparql.expr.Expr r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingRoot: com.hp.hpl.jena.sparql.engine.binding.Binding create()>();

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.engine.binding.Binding)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.expr.Expr, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r7;
        com.hp.hpl.jena.graph.Node $r3;
        com.hp.hpl.jena.sparql.util.Context $r0, $r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r6;
        com.hp.hpl.jena.sparql.expr.Expr r5;
        com.hp.hpl.jena.sparql.engine.ExecutionContext $r4;
        com.hp.hpl.jena.sparql.util.Symbol $r2;

        r5 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        r6 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r0 = staticinvoke <com.hp.hpl.jena.query.ARQ: com.hp.hpl.jena.sparql.util.Context getContext()>();

        $r1 = virtualinvoke $r0.<com.hp.hpl.jena.sparql.util.Context: com.hp.hpl.jena.sparql.util.Context copy()>();

        $r2 = <com.hp.hpl.jena.sparql.ARQConstants: com.hp.hpl.jena.sparql.util.Symbol sysCurrentTime>;

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node nowAsDateTime()>();

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.Context: void set(com.hp.hpl.jena.sparql.util.Symbol,java.lang.Object)>($r2, $r3);

        $r4 = new com.hp.hpl.jena.sparql.engine.ExecutionContext;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.engine.ExecutionContext: void <init>(com.hp.hpl.jena.sparql.util.Context,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.sparql.engine.main.OpExecutorFactory)>($r1, null, null, null);

        $r7 = interfaceinvoke r5.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r6, $r4);

        return $r7;
    }

    public static void exprPrefix(java.lang.String, com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        java.io.PrintStream $r5;
        com.hp.hpl.jena.sparql.sse.SSEParseException $r3;
        com.hp.hpl.jena.sparql.engine.binding.Binding r2;
        com.hp.hpl.jena.sparql.expr.Expr $r1;
        java.lang.StringBuilder $r4, $r6, $r8;
        java.lang.String r0, $r7, $r9;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.sparql.engine.binding.Binding;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: com.hp.hpl.jena.sparql.expr.Expr parseExpr(java.lang.String)>(r0);

        staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: void evalPrint(com.hp.hpl.jena.sparql.expr.Expr,com.hp.hpl.jena.sparql.engine.binding.Binding)>($r1, r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parse error: ");

        $r7 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.sse.SSEParseException: java.lang.String getMessage()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9);

        return;

     label4:
        return;

        catch com.hp.hpl.jena.sparql.sse.SSEParseException from label1 to label2 with label3;
    }
}
