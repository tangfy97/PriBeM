public class org.bouncycastle.util.test.UncloseableOutputStream extends java.io.FilterOutputStream
{

    public void <init>(java.io.OutputStream)
    {
        java.io.OutputStream r1;
        org.bouncycastle.util.test.UncloseableOutputStream r0;

        r0 := @this: org.bouncycastle.util.test.UncloseableOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>(r1);

        return;
    }

    public void close()
    {
        java.lang.RuntimeException $r0;
        org.bouncycastle.util.test.UncloseableOutputStream r1;

        r1 := @this: org.bouncycastle.util.test.UncloseableOutputStream;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("close() called on UncloseableOutputStream");

        throw $r0;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] r1;
        org.bouncycastle.util.test.UncloseableOutputStream r0;
        int i0, i1;

        r0 := @this: org.bouncycastle.util.test.UncloseableOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.bouncycastle.util.test.UncloseableOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1);

        return;
    }
}
