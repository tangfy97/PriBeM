public class org.apache.cxf.clustering.FailoverTargetSelector extends org.apache.cxf.endpoint.AbstractConduitSelector
{
    private static final java.util.logging.Logger LOG;
    protected java.util.Map inProgress;
    protected org.apache.cxf.clustering.FailoverStrategy failoverStrategy;

    public void <init>()
    {
        org.apache.cxf.clustering.FailoverTargetSelector r0;

        r0 := @this: org.apache.cxf.clustering.FailoverTargetSelector;

        specialinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector: void <init>(org.apache.cxf.transport.Conduit)>(null);

        return;
    }

    public void <init>(org.apache.cxf.transport.Conduit)
    {
        java.util.concurrent.ConcurrentHashMap $r2;
        org.apache.cxf.clustering.FailoverTargetSelector r0;
        org.apache.cxf.transport.Conduit r1;

        r0 := @this: org.apache.cxf.clustering.FailoverTargetSelector;

        r1 := @parameter0: org.apache.cxf.transport.Conduit;

        specialinvoke r0.<org.apache.cxf.endpoint.AbstractConduitSelector: void <init>(org.apache.cxf.transport.Conduit)>(r1);

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.cxf.clustering.FailoverTargetSelector: java.util.Map inProgress> = $r2;

        return;
    }

    public synchronized void prepare(org.apache.cxf.message.Message)
    {
        java.lang.Object[] $r10;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext $r14;
        org.apache.cxf.service.model.BindingOperationInfo $r7;
        java.util.Map $r4, $r12, $r13, $r15;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationKey $r2;
        boolean $z0;
        org.apache.cxf.message.Message r0;
        org.apache.cxf.message.Exchange $r1;
        java.util.List $r9;
        org.apache.cxf.endpoint.Endpoint r6;
        java.lang.Object $r5, $r8, $r11;
        org.apache.cxf.clustering.FailoverTargetSelector r3;

        r3 := @this: org.apache.cxf.clustering.FailoverTargetSelector;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r2 = new org.apache.cxf.clustering.FailoverTargetSelector$InvocationKey;

        specialinvoke $r2.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationKey: void <init>(org.apache.cxf.message.Exchange)>($r1);

        $r4 = r3.<org.apache.cxf.clustering.FailoverTargetSelector: java.util.Map inProgress>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r5 = interfaceinvoke $r1.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/endpoint/Endpoint;");

        r6 = (org.apache.cxf.endpoint.Endpoint) $r5;

        $r7 = interfaceinvoke $r1.<org.apache.cxf.message.Exchange: org.apache.cxf.service.model.BindingOperationInfo getBindingOperationInfo()>();

        $r8 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/util/List;");

        $r9 = (java.util.List) $r8;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object[] toArray()>();

        $r11 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("org.apache.cxf.invocation.context");

        $r12 = (java.util.Map) $r11;

        $r13 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Map cast(java.util.Map)>($r12);

        $r14 = new org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext;

        specialinvoke $r14.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: void <init>(org.apache.cxf.clustering.FailoverTargetSelector,org.apache.cxf.endpoint.Endpoint,org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[],java.util.Map)>(r3, r6, $r7, $r10, $r13);

        $r15 = r3.<org.apache.cxf.clustering.FailoverTargetSelector: java.util.Map inProgress>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r14);

     label1:
        return;
    }

    public org.apache.cxf.transport.Conduit selectConduit(org.apache.cxf.message.Message)
    {
        org.apache.cxf.clustering.FailoverTargetSelector r0;
        org.apache.cxf.transport.Conduit $r2;
        org.apache.cxf.message.Message r1;

        r0 := @this: org.apache.cxf.clustering.FailoverTargetSelector;

        r1 := @parameter0: org.apache.cxf.message.Message;

        $r2 = virtualinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.transport.Conduit getSelectedConduit(org.apache.cxf.message.Message)>(r1);

        return $r2;
    }

    public void complete(org.apache.cxf.message.Exchange)
    {
        org.apache.cxf.transport.Conduit $r10;
        byte $b1;
        java.util.Map $r3, $r6, $r18, $r23;
        boolean $z0, z1;
        java.util.logging.Logger $r5;
        java.lang.Exception r14, r17, $r25;
        org.apache.cxf.endpoint.Retryable r20;
        java.lang.Throwable $r24, $r28;
        java.lang.Object[] $r22;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r29;
        org.apache.cxf.service.model.BindingOperationInfo $r21;
        long $l0;
        int $i2;
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationKey $r30;
        java.lang.String $r12;
        org.apache.cxf.message.Message $r15;
        org.apache.cxf.message.Exchange r1;
        org.apache.cxf.endpoint.Endpoint $r7, $r8, $r9;
        java.lang.Object $r4, $r13, $r16, $r19, $r26, $r27;
        java.lang.Class $r11;
        org.apache.cxf.clustering.FailoverTargetSelector r2;

        r2 := @this: org.apache.cxf.clustering.FailoverTargetSelector;

        r1 := @parameter0: org.apache.cxf.message.Exchange;

        $r30 = new org.apache.cxf.clustering.FailoverTargetSelector$InvocationKey;

        specialinvoke $r30.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationKey: void <init>(org.apache.cxf.message.Exchange)>(r1);

        entermonitor r2;

     label01:
        $r3 = r2.<org.apache.cxf.clustering.FailoverTargetSelector: java.util.Map inProgress>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r30);

        r29 = (org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext) $r4;

        exitmonitor r2;

     label02:
        goto label05;

     label03:
        $r28 := @caughtexception;

        exitmonitor r2;

     label04:
        throw $r28;

     label05:
        z1 = 0;

        $z0 = virtualinvoke r2.<org.apache.cxf.clustering.FailoverTargetSelector: boolean requiresFailover(org.apache.cxf.message.Exchange)>(r1);

        if $z0 == 0 goto label13;

        $r7 = virtualinvoke r2.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.endpoint.Endpoint getFailoverTarget(org.apache.cxf.message.Exchange,org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext)>(r1, r29);

        if $r7 == null goto label12;

        virtualinvoke r2.<org.apache.cxf.clustering.FailoverTargetSelector: void setEndpoint(org.apache.cxf.endpoint.Endpoint)>($r7);

        $r10 = r2.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.transport.Conduit selectedConduit>;

        interfaceinvoke $r10.<org.apache.cxf.transport.Conduit: void close()>();

        r2.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.transport.Conduit selectedConduit> = null;

        $r11 = class "Ljava/lang/Exception;";

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = interfaceinvoke r1.<org.apache.cxf.message.Exchange: java.lang.Object remove(java.lang.Object)>($r12);

        r14 = (java.lang.Exception) $r13;

        $r15 = interfaceinvoke r1.<org.apache.cxf.message.Exchange: org.apache.cxf.message.Message getOutMessage()>();

        $r16 = interfaceinvoke $r15.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/lang/Exception;");

        r17 = (java.lang.Exception) $r16;

        interfaceinvoke $r15.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Exception;", null);

        $r18 = virtualinvoke r29.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.Map getContext()>();

        virtualinvoke r2.<org.apache.cxf.clustering.FailoverTargetSelector: void overrideAddressProperty(java.util.Map)>($r18);

        $r19 = interfaceinvoke r1.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Lorg/apache/cxf/endpoint/Retryable;");

        r20 = (org.apache.cxf.endpoint.Retryable) $r19;

        interfaceinvoke r1.<org.apache.cxf.message.Exchange: void clear()>();

        if r20 == null goto label11;

     label06:
        z1 = 1;

        $l0 = virtualinvoke r2.<org.apache.cxf.clustering.FailoverTargetSelector: long getDelayBetweenRetries()>();

        $b1 = $l0 cmp 0L;

        $i2 = (int) $b1;

        if $i2 <= 0 goto label07;

        staticinvoke <java.lang.Thread: void sleep(long)>($l0);

     label07:
        $r21 = virtualinvoke r29.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: org.apache.cxf.service.model.BindingOperationInfo getBindingOperationInfo()>();

        $r22 = virtualinvoke r29.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.lang.Object[] getParams()>();

        $r23 = virtualinvoke r29.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.Map getContext()>();

        interfaceinvoke r20.<org.apache.cxf.endpoint.Retryable: java.lang.Object[] invoke(org.apache.cxf.service.model.BindingOperationInfo,java.lang.Object[],java.util.Map,org.apache.cxf.message.Exchange)>($r21, $r22, $r23, r1);

     label08:
        goto label11;

     label09:
        $r25 := @caughtexception;

        $r26 = interfaceinvoke r1.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Exception;");

        if $r26 == null goto label10;

        interfaceinvoke r1.<org.apache.cxf.message.Exchange: void put(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Exception;", r14);

     label10:
        $r27 = interfaceinvoke $r15.<org.apache.cxf.message.Message: java.lang.Object getContent(java.lang.Class)>(class "Ljava/lang/Exception;");

        if $r27 == null goto label11;

        interfaceinvoke $r15.<org.apache.cxf.message.Message: void setContent(java.lang.Class,java.lang.Object)>(class "Ljava/lang/Exception;", r17);

     label11:
        goto label13;

     label12:
        $r8 = r2.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.endpoint.Endpoint endpoint>;

        $r9 = virtualinvoke r29.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: org.apache.cxf.endpoint.Endpoint retrieveOriginalEndpoint(org.apache.cxf.endpoint.Endpoint)>($r8);

        virtualinvoke r2.<org.apache.cxf.clustering.FailoverTargetSelector: void setEndpoint(org.apache.cxf.endpoint.Endpoint)>($r9);

     label13:
        if z1 != 0 goto label19;

        $r5 = virtualinvoke r2.<org.apache.cxf.clustering.FailoverTargetSelector: java.util.logging.Logger getLogger()>();

        virtualinvoke $r5.<java.util.logging.Logger: void info(java.lang.String)>("FAILOVER_NOT_REQUIRED");

        entermonitor r2;

     label14:
        $r6 = r2.<org.apache.cxf.clustering.FailoverTargetSelector: java.util.Map inProgress>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r30);

        exitmonitor r2;

     label15:
        goto label18;

     label16:
        $r24 := @caughtexception;

        exitmonitor r2;

     label17:
        throw $r24;

     label18:
        specialinvoke r2.<org.apache.cxf.endpoint.AbstractConduitSelector: void complete(org.apache.cxf.message.Exchange)>(r1);

     label19:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Exception from label06 to label08 with label09;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label16 to label17 with label16;
    }

    public synchronized void setStrategy(org.apache.cxf.clustering.FailoverStrategy)
    {
        java.lang.Object[] $r3;
        org.apache.cxf.clustering.FailoverStrategy r0;
        org.apache.cxf.clustering.FailoverTargetSelector r1;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r4;

        r1 := @this: org.apache.cxf.clustering.FailoverTargetSelector;

        r0 := @parameter0: org.apache.cxf.clustering.FailoverStrategy;

        if r0 == null goto label1;

        $r2 = virtualinvoke r1.<org.apache.cxf.clustering.FailoverTargetSelector: java.util.logging.Logger getLogger()>();

        $r4 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r0;

        virtualinvoke $r2.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>($r4, "USING_STRATEGY", $r3);

        r1.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.clustering.FailoverStrategy failoverStrategy> = r0;

     label1:
        return;
    }

    public synchronized org.apache.cxf.clustering.FailoverStrategy getStrategy()
    {
        java.lang.Object[] $r5;
        org.apache.cxf.clustering.SequentialStrategy $r3;
        java.util.logging.Logger $r4;
        java.util.logging.Level $r7;
        org.apache.cxf.clustering.FailoverStrategy $r1, $r2, $r6;
        org.apache.cxf.clustering.FailoverTargetSelector r0;

        r0 := @this: org.apache.cxf.clustering.FailoverTargetSelector;

        $r1 = r0.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.clustering.FailoverStrategy failoverStrategy>;

        if $r1 != null goto label1;

        $r3 = new org.apache.cxf.clustering.SequentialStrategy;

        specialinvoke $r3.<org.apache.cxf.clustering.SequentialStrategy: void <init>()>();

        r0.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.clustering.FailoverStrategy failoverStrategy> = $r3;

        $r4 = virtualinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector: java.util.logging.Logger getLogger()>();

        $r7 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = r0.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.clustering.FailoverStrategy failoverStrategy>;

        $r5[0] = $r6;

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>($r7, "USING_STRATEGY", $r5);

     label1:
        $r2 = r0.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.clustering.FailoverStrategy failoverStrategy>;

        return $r2;
    }

    protected java.util.logging.Logger getLogger()
    {
        java.util.logging.Logger $r0;
        org.apache.cxf.clustering.FailoverTargetSelector r1;

        r1 := @this: org.apache.cxf.clustering.FailoverTargetSelector;

        $r0 = <org.apache.cxf.clustering.FailoverTargetSelector: java.util.logging.Logger LOG>;

        return $r0;
    }

    protected long getDelayBetweenRetries()
    {
        org.apache.cxf.clustering.AbstractStaticFailoverStrategy $r2;
        org.apache.cxf.clustering.FailoverStrategy $r1;
        long $l0;
        org.apache.cxf.clustering.FailoverTargetSelector r0;
        boolean $z0;

        r0 := @this: org.apache.cxf.clustering.FailoverTargetSelector;

        $r1 = virtualinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $z0 = $r1 instanceof org.apache.cxf.clustering.AbstractStaticFailoverStrategy;

        if $z0 == 0 goto label1;

        $r2 = (org.apache.cxf.clustering.AbstractStaticFailoverStrategy) $r1;

        $l0 = virtualinvoke $r2.<org.apache.cxf.clustering.AbstractStaticFailoverStrategy: long getDelayBetweenRetries()>();

        return $l0;

     label1:
        return 0L;
    }

    protected boolean requiresFailover(org.apache.cxf.message.Exchange)
    {
        java.lang.Throwable r16;
        java.lang.Object[] $r7, $r11;
        java.util.logging.Level $r8, $r12;
        java.lang.Boolean $r9, $r13;
        boolean $z0, z1;
        org.apache.cxf.message.Message $r1;
        java.util.logging.Logger $r6, $r10;
        org.apache.cxf.message.Exchange r0;
        java.lang.Exception r4, $r15;
        java.lang.Object $r2, $r3, $r14;
        org.apache.cxf.clustering.FailoverTargetSelector r5;

        r5 := @this: org.apache.cxf.clustering.FailoverTargetSelector;

        r0 := @parameter0: org.apache.cxf.message.Exchange;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Exchange: org.apache.cxf.message.Message getOutMessage()>();

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Exception;");

        if $r2 == null goto label1;

        $r14 = interfaceinvoke $r1.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Exception;");

        $r15 = (java.lang.Exception) $r14;

        goto label2;

     label1:
        $r3 = interfaceinvoke r0.<org.apache.cxf.message.Exchange: java.lang.Object get(java.lang.Class)>(class "Ljava/lang/Exception;");

        $r15 = (java.lang.Exception) $r3;

     label2:
        r4 = $r15;

        $r6 = virtualinvoke r5.<org.apache.cxf.clustering.FailoverTargetSelector: java.util.logging.Logger getLogger()>();

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r7 = newarray (java.lang.Object)[1];

        if $r15 == null goto label3;

        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r7[0] = $r9;

        virtualinvoke $r6.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>($r8, "CHECK_LAST_INVOKE_FAILED", $r7);

        r16 = r4;

        z1 = 0;

     label5:
        if r16 == null goto label6;

        z1 = r16 instanceof java.io.IOException;

        r16 = virtualinvoke r16.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label5;

     label6:
        if r4 == null goto label7;

        $r10 = virtualinvoke r5.<org.apache.cxf.clustering.FailoverTargetSelector: java.util.logging.Logger getLogger()>();

        $r12 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = r4;

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        $r11[1] = $r13;

        virtualinvoke $r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>($r12, "CHECK_FAILURE_IN_TRANSPORT", $r11);

     label7:
        return z1;
    }

    protected org.apache.cxf.endpoint.Endpoint getFailoverTarget(org.apache.cxf.message.Exchange, org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext)
    {
        org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext r0;
        java.lang.String $r5;
        boolean $z0;
        org.apache.cxf.service.model.EndpointInfo $r7;
        org.apache.cxf.message.Exchange r9;
        java.util.List $r3, $r10, $r12, r13;
        org.apache.cxf.endpoint.Endpoint $r6, r14;
        org.apache.cxf.clustering.FailoverStrategy $r2, $r4, $r8, $r11;
        org.apache.cxf.clustering.FailoverTargetSelector r1;

        r1 := @this: org.apache.cxf.clustering.FailoverTargetSelector;

        r9 := @parameter0: org.apache.cxf.message.Exchange;

        r0 := @parameter1: org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext;

        $z0 = virtualinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: boolean hasAlternates()>();

        if $z0 != 0 goto label2;

        $r8 = virtualinvoke r1.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $r10 = interfaceinvoke $r8.<org.apache.cxf.clustering.FailoverStrategy: java.util.List getAlternateAddresses(org.apache.cxf.message.Exchange)>(r9);

        r13 = $r10;

        if $r10 == null goto label1;

        virtualinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: void setAlternateAddresses(java.util.List)>($r10);

        goto label3;

     label1:
        $r11 = virtualinvoke r1.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $r12 = interfaceinvoke $r11.<org.apache.cxf.clustering.FailoverStrategy: java.util.List getAlternateEndpoints(org.apache.cxf.message.Exchange)>(r9);

        virtualinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: void setAlternateEndpoints(java.util.List)>($r12);

        goto label3;

     label2:
        r13 = virtualinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.List getAlternateAddresses()>();

     label3:
        r14 = null;

        if r13 == null goto label5;

        $r4 = virtualinvoke r1.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $r5 = interfaceinvoke $r4.<org.apache.cxf.clustering.FailoverStrategy: java.lang.String selectAlternateAddress(java.util.List)>(r13);

        if $r5 == null goto label4;

        $r6 = virtualinvoke r1.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.endpoint.Endpoint getEndpoint()>();

        r14 = $r6;

        $r7 = interfaceinvoke $r6.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        virtualinvoke $r7.<org.apache.cxf.service.model.EndpointInfo: void setAddress(java.lang.String)>($r5);

     label4:
        goto label6;

     label5:
        $r2 = virtualinvoke r1.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.clustering.FailoverStrategy getStrategy()>();

        $r3 = virtualinvoke r0.<org.apache.cxf.clustering.FailoverTargetSelector$InvocationContext: java.util.List getAlternateEndpoints()>();

        r14 = interfaceinvoke $r2.<org.apache.cxf.clustering.FailoverStrategy: org.apache.cxf.endpoint.Endpoint selectAlternateEndpoint(java.util.List)>($r3);

     label6:
        return r14;
    }

    protected void overrideAddressProperty(java.util.Map)
    {
        org.apache.cxf.service.model.EndpointInfo $r7, $r10;
        org.apache.cxf.endpoint.Endpoint $r6, $r9;
        java.util.Map r0, $r2, $r3;
        java.lang.Object $r1;
        java.lang.String $r5, $r8, $r11;
        org.apache.cxf.clustering.FailoverTargetSelector r4;

        r4 := @this: org.apache.cxf.clustering.FailoverTargetSelector;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("RequestContext");

        $r2 = (java.util.Map) $r1;

        $r3 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Map cast(java.util.Map)>($r2);

        if $r3 == null goto label1;

        $r5 = <org.apache.cxf.message.Message: java.lang.String ENDPOINT_ADDRESS>;

        $r6 = virtualinvoke r4.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.endpoint.Endpoint getEndpoint()>();

        $r7 = interfaceinvoke $r6.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r8 = virtualinvoke $r7.<org.apache.cxf.service.model.EndpointInfo: java.lang.String getAddress()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, $r8);

        $r9 = virtualinvoke r4.<org.apache.cxf.clustering.FailoverTargetSelector: org.apache.cxf.endpoint.Endpoint getEndpoint()>();

        $r10 = interfaceinvoke $r9.<org.apache.cxf.endpoint.Endpoint: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r11 = virtualinvoke $r10.<org.apache.cxf.service.model.EndpointInfo: java.lang.String getAddress()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("javax.xml.ws.service.endpoint.address", $r11);

     label1:
        return;
    }

    static void <clinit>()
    {
        java.util.logging.Logger $r0;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/clustering/FailoverTargetSelector;");

        <org.apache.cxf.clustering.FailoverTargetSelector: java.util.logging.Logger LOG> = $r0;

        return;
    }
}
