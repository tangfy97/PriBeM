public class org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService
{
    public final java.util.List opens;
    public final java.util.List submits;
    public final java.util.List closes;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService r0;
        java.util.ArrayList $r1, $r2, $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List opens> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List submits> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List closes> = $r3;

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$OpenArguments lastOpen()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$OpenArguments $r5;
        java.util.List $r1, $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService r0;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List opens>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        staticinvoke <junit.framework.Assert: void assertFalse(boolean)>($z0);

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List opens>;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List opens>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r5 = (org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$OpenArguments) $r4;

        return $r5;
    }

    public org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments lastSubmit()
    {
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments $r5;
        java.util.List $r1, $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService r0;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List submits>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        staticinvoke <junit.framework.Assert: void assertFalse(boolean)>($z0);

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List submits>;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List submits>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r5 = (org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments) $r4;

        return $r5;
    }

    public org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$CloseArguments lastClose()
    {
        java.util.List $r1, $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService r0;
        int $i0, $i1;
        java.lang.Object $r4;
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$CloseArguments $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List closes>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        staticinvoke <junit.framework.Assert: void assertFalse(boolean)>($z0);

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List closes>;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List closes>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1);

        $r5 = (org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$CloseArguments) $r4;

        return $r5;
    }

    public void viewOpen(org.waveprotocol.wave.model.id.IdFilter, java.util.Map, org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$OpenCallback)
    {
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$OpenArguments $r1;
        java.util.List $r5;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$OpenCallback r4;
        java.util.Map r3;
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService r0;
        org.waveprotocol.wave.model.id.IdFilter r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService;

        r2 := @parameter0: org.waveprotocol.wave.model.id.IdFilter;

        r3 := @parameter1: java.util.Map;

        r4 := @parameter2: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$OpenCallback;

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List opens>;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$OpenArguments;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$OpenArguments: void <init>(org.waveprotocol.wave.model.id.IdFilter,java.util.Map,org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$OpenCallback,org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$1)>(r2, r3, r4, null);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public java.lang.String viewSubmit(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.operation.wave.WaveletDelta, java.lang.String, org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback)
    {
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments $r1;
        org.waveprotocol.wave.model.id.WaveletName r2;
        java.util.List $r6;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback r5;
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService r0;
        org.waveprotocol.wave.model.operation.wave.WaveletDelta r3;
        java.lang.String r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r3 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletDelta;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback;

        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List submits>;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$SubmitArguments: void <init>(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.operation.wave.WaveletDelta,java.lang.String,org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$SubmitCallback,org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$1)>(r2, r3, r4, r5, null);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r1);

        return null;
    }

    public void viewClose(org.waveprotocol.wave.model.id.WaveId, java.lang.String, org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$CloseCallback)
    {
        java.util.List $r5;
        org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$CloseCallback r4;
        org.waveprotocol.wave.model.id.WaveId r2;
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService r0;
        java.lang.String r3;
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$CloseArguments $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$CloseCallback;

        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService: java.util.List closes>;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$CloseArguments;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$CloseArguments: void <init>(org.waveprotocol.wave.model.id.WaveId,java.lang.String,org.waveprotocol.wave.concurrencycontrol.channel.WaveViewService$CloseCallback,org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService$1)>(r2, r3, r4, null);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public java.lang.String debugGetProfilingInfo(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.testing.MockWaveViewService;

        r1 := @parameter0: java.lang.String;

        return "";
    }
}
