class bsh.JJTParserState extends java.lang.Object
{
    private java.util.Stack nodes;
    private java.util.Stack marks;
    private int sp;
    private int mk;
    private boolean node_created;

    void <init>()
    {
        bsh.JJTParserState r0;
        java.util.Stack $r1, $r2;

        r0 := @this: bsh.JJTParserState;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Stack;

        specialinvoke $r1.<java.util.Stack: void <init>()>();

        r0.<bsh.JJTParserState: java.util.Stack nodes> = $r1;

        $r2 = new java.util.Stack;

        specialinvoke $r2.<java.util.Stack: void <init>()>();

        r0.<bsh.JJTParserState: java.util.Stack marks> = $r2;

        r0.<bsh.JJTParserState: int sp> = 0;

        r0.<bsh.JJTParserState: int mk> = 0;

        return;
    }

    boolean nodeCreated()
    {
        bsh.JJTParserState r0;
        boolean $z0;

        r0 := @this: bsh.JJTParserState;

        $z0 = r0.<bsh.JJTParserState: boolean node_created>;

        return $z0;
    }

    void reset()
    {
        bsh.JJTParserState r0;
        java.util.Stack $r1, $r2;

        r0 := @this: bsh.JJTParserState;

        $r1 = r0.<bsh.JJTParserState: java.util.Stack nodes>;

        virtualinvoke $r1.<java.util.Stack: void removeAllElements()>();

        $r2 = r0.<bsh.JJTParserState: java.util.Stack marks>;

        virtualinvoke $r2.<java.util.Stack: void removeAllElements()>();

        r0.<bsh.JJTParserState: int sp> = 0;

        r0.<bsh.JJTParserState: int mk> = 0;

        return;
    }

    bsh.Node rootNode()
    {
        java.lang.Object $r2;
        bsh.JJTParserState r0;
        bsh.Node $r3;
        java.util.Stack $r1;

        r0 := @this: bsh.JJTParserState;

        $r1 = r0.<bsh.JJTParserState: java.util.Stack nodes>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object elementAt(int)>(0);

        $r3 = (bsh.Node) $r2;

        return $r3;
    }

    void pushNode(bsh.Node)
    {
        int $i0, $i1;
        bsh.JJTParserState r0;
        bsh.Node r1;
        java.util.Stack $r2;

        r0 := @this: bsh.JJTParserState;

        r1 := @parameter0: bsh.Node;

        $r2 = r0.<bsh.JJTParserState: java.util.Stack nodes>;

        virtualinvoke $r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r1);

        $i0 = r0.<bsh.JJTParserState: int sp>;

        $i1 = $i0 + 1;

        r0.<bsh.JJTParserState: int sp> = $i1;

        return;
    }

    bsh.Node popNode()
    {
        java.lang.Integer $r6;
        java.util.Stack $r1, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r2, $r5;
        bsh.JJTParserState r0;
        bsh.Node $r3;

        r0 := @this: bsh.JJTParserState;

        $i0 = r0.<bsh.JJTParserState: int sp>;

        $i1 = $i0 - 1;

        r0.<bsh.JJTParserState: int sp> = $i1;

        $i2 = r0.<bsh.JJTParserState: int mk>;

        if $i1 >= $i2 goto label1;

        $r4 = r0.<bsh.JJTParserState: java.util.Stack marks>;

        $r5 = virtualinvoke $r4.<java.util.Stack: java.lang.Object pop()>();

        $r6 = (java.lang.Integer) $r5;

        $i3 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        r0.<bsh.JJTParserState: int mk> = $i3;

     label1:
        $r1 = r0.<bsh.JJTParserState: java.util.Stack nodes>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        $r3 = (bsh.Node) $r2;

        return $r3;
    }

    bsh.Node peekNode()
    {
        java.lang.Object $r2;
        bsh.JJTParserState r0;
        bsh.Node $r3;
        java.util.Stack $r1;

        r0 := @this: bsh.JJTParserState;

        $r1 = r0.<bsh.JJTParserState: java.util.Stack nodes>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>();

        $r3 = (bsh.Node) $r2;

        return $r3;
    }

    int nodeArity()
    {
        int $i0, $i1, $i2;
        bsh.JJTParserState r0;

        r0 := @this: bsh.JJTParserState;

        $i1 = r0.<bsh.JJTParserState: int sp>;

        $i0 = r0.<bsh.JJTParserState: int mk>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    void clearNodeScope(bsh.Node)
    {
        java.lang.Integer $r3;
        java.util.Stack $r1;
        int $i0, $i1, $i2;
        java.lang.Object $r2;
        bsh.JJTParserState r0;
        bsh.Node r4;

        r0 := @this: bsh.JJTParserState;

        r4 := @parameter0: bsh.Node;

        goto label2;

     label1:
        virtualinvoke r0.<bsh.JJTParserState: bsh.Node popNode()>();

     label2:
        $i1 = r0.<bsh.JJTParserState: int sp>;

        $i0 = r0.<bsh.JJTParserState: int mk>;

        if $i1 > $i0 goto label1;

        $r1 = r0.<bsh.JJTParserState: java.util.Stack marks>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        $r3 = (java.lang.Integer) $r2;

        $i2 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r0.<bsh.JJTParserState: int mk> = $i2;

        return;
    }

    void openNodeScope(bsh.Node)
    {
        int $i0, $i1;
        bsh.JJTParserState r0;
        bsh.Node r3;
        java.lang.Integer $r1;
        java.util.Stack $r2;

        r0 := @this: bsh.JJTParserState;

        r3 := @parameter0: bsh.Node;

        $r2 = r0.<bsh.JJTParserState: java.util.Stack marks>;

        $r1 = new java.lang.Integer;

        $i0 = r0.<bsh.JJTParserState: int mk>;

        specialinvoke $r1.<java.lang.Integer: void <init>(int)>($i0);

        virtualinvoke $r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r1);

        $i1 = r0.<bsh.JJTParserState: int sp>;

        r0.<bsh.JJTParserState: int mk> = $i1;

        interfaceinvoke r3.<bsh.Node: void jjtOpen()>();

        return;
    }

    void closeNodeScope(bsh.Node, int)
    {
        java.lang.Integer $r3;
        java.util.Stack $r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r2;
        bsh.JJTParserState r0;
        bsh.Node $r4, r5;

        r0 := @this: bsh.JJTParserState;

        r5 := @parameter0: bsh.Node;

        i3 := @parameter1: int;

        $r1 = r0.<bsh.JJTParserState: java.util.Stack marks>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r0.<bsh.JJTParserState: int mk> = $i0;

        goto label2;

     label1:
        $r4 = virtualinvoke r0.<bsh.JJTParserState: bsh.Node popNode()>();

        interfaceinvoke $r4.<bsh.Node: void jjtSetParent(bsh.Node)>(r5);

        interfaceinvoke r5.<bsh.Node: void jjtAddChild(bsh.Node,int)>($r4, $i2);

     label2:
        $i1 = i3;

        $i2 = i3 - 1;

        i3 = $i2;

        if $i1 > 0 goto label1;

        interfaceinvoke r5.<bsh.Node: void jjtClose()>();

        virtualinvoke r0.<bsh.JJTParserState: void pushNode(bsh.Node)>(r5);

        r0.<bsh.JJTParserState: boolean node_created> = 1;

        return;
    }

    void closeNodeScope(bsh.Node, boolean)
    {
        java.lang.Integer $r3, $r6;
        java.util.Stack $r1, $r4;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r2, $r5;
        bsh.JJTParserState r0;
        bsh.Node $r7, r8;
        boolean z0;

        r0 := @this: bsh.JJTParserState;

        r8 := @parameter0: bsh.Node;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label3;

        i4 = virtualinvoke r0.<bsh.JJTParserState: int nodeArity()>();

        $r4 = r0.<bsh.JJTParserState: java.util.Stack marks>;

        $r5 = virtualinvoke $r4.<java.util.Stack: java.lang.Object pop()>();

        $r6 = (java.lang.Integer) $r5;

        $i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        r0.<bsh.JJTParserState: int mk> = $i1;

        goto label2;

     label1:
        $r7 = virtualinvoke r0.<bsh.JJTParserState: bsh.Node popNode()>();

        interfaceinvoke $r7.<bsh.Node: void jjtSetParent(bsh.Node)>(r8);

        interfaceinvoke r8.<bsh.Node: void jjtAddChild(bsh.Node,int)>($r7, $i3);

     label2:
        $i2 = i4;

        $i3 = i4 - 1;

        i4 = $i3;

        if $i2 > 0 goto label1;

        interfaceinvoke r8.<bsh.Node: void jjtClose()>();

        virtualinvoke r0.<bsh.JJTParserState: void pushNode(bsh.Node)>(r8);

        r0.<bsh.JJTParserState: boolean node_created> = 1;

        goto label4;

     label3:
        $r1 = r0.<bsh.JJTParserState: java.util.Stack marks>;

        $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>();

        $r3 = (java.lang.Integer) $r2;

        $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        r0.<bsh.JJTParserState: int mk> = $i0;

        r0.<bsh.JJTParserState: boolean node_created> = 0;

     label4:
        return;
    }
}
