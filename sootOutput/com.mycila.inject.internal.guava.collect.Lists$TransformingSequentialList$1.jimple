class com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1 extends java.lang.Object implements java.util.ListIterator
{
    final java.util.ListIterator val$delegate;
    final com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList this$0;

    void <init>(com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList, java.util.ListIterator)
    {
        com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList r1;
        java.util.ListIterator r2;
        com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList;

        r2 := @parameter1: java.util.ListIterator;

        r0.<com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1: com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList this$0> = r1;

        r0.<com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1: java.util.ListIterator val$delegate> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void add(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1 r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean hasNext()
    {
        java.util.ListIterator $r1;
        com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1 r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1: java.util.ListIterator val$delegate>;

        $z0 = interfaceinvoke $r1.<java.util.ListIterator: boolean hasNext()>();

        return $z0;
    }

    public boolean hasPrevious()
    {
        java.util.ListIterator $r1;
        com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1 r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1: java.util.ListIterator val$delegate>;

        $z0 = interfaceinvoke $r1.<java.util.ListIterator: boolean hasPrevious()>();

        return $z0;
    }

    public java.lang.Object next()
    {
        com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList $r1;
        java.util.ListIterator $r2;
        java.lang.Object $r4, $r5;
        com.mycila.inject.internal.guava.base.Function $r3;
        com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1: com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList this$0>;

        $r3 = $r1.<com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList: com.mycila.inject.internal.guava.base.Function function>;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1: java.util.ListIterator val$delegate>;

        $r4 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object next()>();

        $r5 = interfaceinvoke $r3.<com.mycila.inject.internal.guava.base.Function: java.lang.Object apply(java.lang.Object)>($r4);

        return $r5;
    }

    public int nextIndex()
    {
        int $i0;
        java.util.ListIterator $r1;
        com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1: java.util.ListIterator val$delegate>;

        $i0 = interfaceinvoke $r1.<java.util.ListIterator: int nextIndex()>();

        return $i0;
    }

    public java.lang.Object previous()
    {
        com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList $r1;
        java.util.ListIterator $r2;
        java.lang.Object $r4, $r5;
        com.mycila.inject.internal.guava.base.Function $r3;
        com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1: com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList this$0>;

        $r3 = $r1.<com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList: com.mycila.inject.internal.guava.base.Function function>;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1: java.util.ListIterator val$delegate>;

        $r4 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object previous()>();

        $r5 = interfaceinvoke $r3.<com.mycila.inject.internal.guava.base.Function: java.lang.Object apply(java.lang.Object)>($r4);

        return $r5;
    }

    public int previousIndex()
    {
        int $i0;
        java.util.ListIterator $r1;
        com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1: java.util.ListIterator val$delegate>;

        $i0 = interfaceinvoke $r1.<java.util.ListIterator: int previousIndex()>();

        return $i0;
    }

    public void remove()
    {
        java.util.ListIterator $r1;
        com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1: java.util.ListIterator val$delegate>;

        interfaceinvoke $r1.<java.util.ListIterator: void remove()>();

        return;
    }

    public void set(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1 r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.Lists$TransformingSequentialList$1;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("not supported");

        throw $r0;
    }
}
