public class com.hp.hpl.jena.tdb.store.GraphTDB extends com.hp.hpl.jena.sparql.core.GraphView implements org.apache.jena.atlas.lib.Closeable, org.apache.jena.atlas.lib.Sync
{
    private final com.hp.hpl.jena.graph.BulkUpdateHandler bulkUpdateHandler;
    private final com.hp.hpl.jena.graph.TransactionHandler transactionHandler;
    private final com.hp.hpl.jena.tdb.store.DatasetGraphTDB dataset;
    private static org.apache.jena.atlas.iterator.Transform project4TupleTo3Tuple;

    public void <init>(com.hp.hpl.jena.tdb.store.DatasetGraphTDB, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.graph.TransactionHandlerTDB $r4;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r1;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;
        com.hp.hpl.jena.tdb.graph.BulkUpdateHandlerTDB $r3;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        r1 := @parameter0: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.GraphView: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraph,com.hp.hpl.jena.graph.Node)>(r1, r2);

        $r3 = new com.hp.hpl.jena.tdb.graph.BulkUpdateHandlerTDB;

        specialinvoke $r3.<com.hp.hpl.jena.tdb.graph.BulkUpdateHandlerTDB: void <init>(com.hp.hpl.jena.tdb.store.GraphTDB)>(r0);

        r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.BulkUpdateHandler bulkUpdateHandler> = $r3;

        $r4 = new com.hp.hpl.jena.tdb.graph.TransactionHandlerTDB;

        specialinvoke $r4.<com.hp.hpl.jena.tdb.graph.TransactionHandlerTDB: void <init>(com.hp.hpl.jena.tdb.store.GraphTDB)>(r0);

        r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.TransactionHandler transactionHandler> = $r4;

        r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB dataset> = r1;

        return;
    }

    public com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDSG()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r1;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB dataset>;

        return $r1;
    }

    public com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r3;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r1;
        com.hp.hpl.jena.graph.Node $r2;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDSG()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.Node getGraphName()>();

        $r3 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable chooseNodeTupleTable(com.hp.hpl.jena.graph.Node)>($r2);

        return $r3;
    }

    public static com.hp.hpl.jena.tdb.nodetable.NodeTupleTable chooseNodeTupleTable(com.hp.hpl.jena.tdb.store.DatasetGraphTDB, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r2;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node r1;

        r0 := @parameter0: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable chooseNodeTupleTable(com.hp.hpl.jena.graph.Node)>(r1);

        return $r2;
    }

    protected com.hp.hpl.jena.shared.PrefixMapping createPrefixMapping()
    {
        com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB $r2, $r7, $r10;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r1, $r6, $r9;
        com.hp.hpl.jena.graph.Node $r3;
        java.lang.String $r4;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;
        com.hp.hpl.jena.shared.PrefixMapping $r5, $r8, $r11;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: boolean isDefaultGraph()>();

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDSG()>();

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB getPrefixes()>();

        $r11 = virtualinvoke $r10.<com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        return $r11;

     label1:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: boolean isUnionGraph()>();

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDSG()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB getPrefixes()>();

        $r8 = virtualinvoke $r7.<com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping()>();

        return $r8;

     label2:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDSG()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB getPrefixes()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.Node getGraphName()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.graph.Node: java.lang.String getURI()>();

        $r5 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.store.DatasetPrefixesTDB: com.hp.hpl.jena.shared.PrefixMapping getPrefixMapping(java.lang.String)>($r4);

        return $r5;
    }

    public final void performAdd(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.tdb.store.GraphTDB r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: void startUpdate()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.GraphView: void performAdd(com.hp.hpl.jena.graph.Triple)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: void finishUpdate()>();

        return;
    }

    public final void performDelete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.tdb.store.GraphTDB r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: void startUpdate()>();

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.GraphView: void performDelete(com.hp.hpl.jena.graph.Triple)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: void finishUpdate()>();

        return;
    }

    public final void sync()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r1;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB dataset>;

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: void sync()>();

        return;
    }

    public final void close()
    {
        com.hp.hpl.jena.tdb.store.GraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: void sync()>();

        return;
    }

    protected static com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFindDft(com.hp.hpl.jena.tdb.store.DatasetGraphTDB, com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.util.iterator.NullIterator $r10;
        java.util.Iterator $r6;
        com.hp.hpl.jena.util.iterator.WrappedIterator $r9;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r0;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5, $r8;
        com.hp.hpl.jena.tdb.store.GraphTDB$ProjectQuadsToTriples $r7;
        com.hp.hpl.jena.graph.TripleMatch r1;

        r0 := @parameter0: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r1 := @parameter1: com.hp.hpl.jena.graph.TripleMatch;

        $r2 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphIRI>;

        $r3 = interfaceinvoke r1.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchSubject()>();

        $r4 = interfaceinvoke r1.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchPredicate()>();

        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchObject()>();

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, $r4, $r5);

        if $r6 != null goto label1;

        $r10 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        return $r10;

     label1:
        $r7 = new com.hp.hpl.jena.tdb.store.GraphTDB$ProjectQuadsToTriples;

        $r8 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphIRI>;

        specialinvoke $r7.<com.hp.hpl.jena.tdb.store.GraphTDB$ProjectQuadsToTriples: void <init>(com.hp.hpl.jena.graph.Node,java.util.Iterator)>($r8, $r6);

        $r9 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.WrappedIterator createNoRemove(java.util.Iterator)>($r7);

        return $r9;
    }

    protected static com.hp.hpl.jena.util.iterator.ExtendedIterator graphBaseFindNG(com.hp.hpl.jena.tdb.store.DatasetGraphTDB, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.TripleMatch)
    {
        com.hp.hpl.jena.util.iterator.NullIterator $r12;
        com.hp.hpl.jena.tdb.store.QuadTable $r2;
        com.hp.hpl.jena.util.iterator.WrappedIterator $r11;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB r1;
        com.hp.hpl.jena.graph.Node r0, $r4, $r5, $r6, $r9, $r10, r13, $r14;
        com.hp.hpl.jena.graph.TripleMatch r3;
        boolean $z0;
        java.util.Iterator $r7, r15;
        com.hp.hpl.jena.tdb.store.GraphTDB$ProjectQuadsToTriples $r8;

        r1 := @parameter0: com.hp.hpl.jena.tdb.store.DatasetGraphTDB;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.TripleMatch;

        r13 = r0;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.store.GraphTDB: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 == 0 goto label1;

        r13 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchSubject()>();

        $r5 = interfaceinvoke r3.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchPredicate()>();

        $r6 = interfaceinvoke r3.<com.hp.hpl.jena.graph.TripleMatch: com.hp.hpl.jena.graph.Node getMatchObject()>();

        $r7 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.store.QuadTable: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r13, $r4, $r5, $r6);

        if $r7 != null goto label2;

        $r12 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        return $r12;

     label2:
        $r8 = new com.hp.hpl.jena.tdb.store.GraphTDB$ProjectQuadsToTriples;

        $r9 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        if r13 != $r9 goto label3;

        $r14 = null;

        goto label4;

     label3:
        $r14 = r13;

     label4:
        specialinvoke $r8.<com.hp.hpl.jena.tdb.store.GraphTDB$ProjectQuadsToTriples: void <init>(com.hp.hpl.jena.graph.Node,java.util.Iterator)>($r14, $r7);

        r15 = $r8;

        $r10 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        if r13 != $r10 goto label5;

        r15 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator distinct(java.util.Iterator)>($r8);

     label5:
        $r11 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.WrappedIterator createNoRemove(java.util.Iterator)>(r15);

        return $r11;
    }

    protected com.hp.hpl.jena.util.iterator.ExtendedIterator graphUnionFind(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.util.Iterator $r6, $r8;
        com.hp.hpl.jena.util.iterator.WrappedIterator $r9;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r2;
        com.hp.hpl.jena.graph.Node r0, r3, r4, r5;
        org.apache.jena.atlas.iterator.Iter $r7;
        com.hp.hpl.jena.tdb.store.GraphTDB r1;

        r1 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: com.hp.hpl.jena.graph.Node;

        r0 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node unionGraph>;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDSG()>();

        $r6 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: java.util.Iterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, r3, r4, r5);

        $r7 = staticinvoke <org.apache.jena.riot.other.GLib: org.apache.jena.atlas.iterator.Iter quads2triples(java.util.Iterator)>($r6);

        $r8 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator distinctAdjacent(java.util.Iterator)>($r7);

        $r9 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.WrappedIterator createNoRemove(java.util.Iterator)>($r8);

        return $r9;
    }

    public void startRead()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r1;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDSG()>();

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: void startRead()>();

        return;
    }

    public void finishRead()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r1;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDSG()>();

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: void finishRead()>();

        return;
    }

    public final void startUpdate()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r1;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDSG()>();

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: void startUpdate()>();

        return;
    }

    public final void finishUpdate()
    {
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r1;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDSG()>();

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: void finishUpdate()>();

        return;
    }

    protected final int graphBaseSize()
    {
        com.hp.hpl.jena.tdb.store.QuadTable $r3;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r2;
        long $l0, $l2;
        com.hp.hpl.jena.graph.Node $r1, $r10;
        org.apache.jena.atlas.iterator.Transform $r7;
        int $i1, $i3;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;
        boolean $z0, $z1;
        com.hp.hpl.jena.graph.Node[] $r5;
        java.util.Iterator $r6, $r8, r11;
        com.hp.hpl.jena.tdb.nodetable.NodeTupleTable $r4, $r9;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: boolean isDefaultGraph()>();

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $l2 = interfaceinvoke $r9.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: long size()>();

        $i3 = (int) $l2;

        return $i3;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.Node getGraphName()>();

        $z1 = staticinvoke <com.hp.hpl.jena.tdb.store.GraphTDB: boolean isUnionGraph(com.hp.hpl.jena.graph.Node)>($r1);

        if $z1 == 0 goto label2;

        $r10 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        goto label3;

     label2:
        $r10 = $r1;

     label3:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB getDSG()>();

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: com.hp.hpl.jena.tdb.store.QuadTable getQuadTable()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.store.QuadTable: com.hp.hpl.jena.tdb.nodetable.NodeTupleTable getNodeTupleTable()>();

        $r5 = newarray (com.hp.hpl.jena.graph.Node)[4];

        $r5[0] = $r10;

        $r5[1] = null;

        $r5[2] = null;

        $r5[3] = null;

        $r6 = interfaceinvoke $r4.<com.hp.hpl.jena.tdb.nodetable.NodeTupleTable: java.util.Iterator findAsNodeIds(com.hp.hpl.jena.graph.Node[])>($r5);

        r11 = $r6;

        if $z1 == 0 goto label4;

        $r7 = <com.hp.hpl.jena.tdb.store.GraphTDB: org.apache.jena.atlas.iterator.Transform project4TupleTo3Tuple>;

        $r8 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator map(java.util.Iterator,org.apache.jena.atlas.iterator.Transform)>($r6, $r7);

        r11 = staticinvoke <org.apache.jena.atlas.iterator.Iter: java.util.Iterator distinctAdjacent(java.util.Iterator)>($r8);

     label4:
        $l0 = staticinvoke <org.apache.jena.atlas.iterator.Iter: long count(java.util.Iterator)>(r11);

        $i1 = (int) $l0;

        return $i1;
    }

    public com.hp.hpl.jena.graph.Capabilities getCapabilities()
    {
        com.hp.hpl.jena.tdb.store.GraphTDB$2 $r3;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;
        com.hp.hpl.jena.graph.Capabilities $r1, $r2;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.Capabilities capabilities>;

        if $r1 != null goto label1;

        $r3 = new com.hp.hpl.jena.tdb.store.GraphTDB$2;

        specialinvoke $r3.<com.hp.hpl.jena.tdb.store.GraphTDB$2: void <init>(com.hp.hpl.jena.tdb.store.GraphTDB)>(r0);

        r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.Capabilities capabilities> = $r3;

     label1:
        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.core.GraphView: com.hp.hpl.jena.graph.Capabilities getCapabilities()>();

        return $r2;
    }

    public com.hp.hpl.jena.graph.BulkUpdateHandler getBulkUpdateHandler()
    {
        com.hp.hpl.jena.graph.BulkUpdateHandler $r1;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.BulkUpdateHandler bulkUpdateHandler>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.TransactionHandler getTransactionHandler()
    {
        com.hp.hpl.jena.graph.TransactionHandler $r1;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.TransactionHandler transactionHandler>;

        return $r1;
    }

    public void clear()
    {
        com.hp.hpl.jena.graph.GraphEventManager $r6;
        com.hp.hpl.jena.graph.GraphEvents $r7;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r1;
        com.hp.hpl.jena.graph.Node $r2, $r3, $r4, $r5;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        $r1 = r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB dataset>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.Node getGraphName()>();

        $r5 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        virtualinvoke $r1.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: void deleteAny(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r5, $r4, $r3);

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        $r7 = <com.hp.hpl.jena.graph.GraphEvents: com.hp.hpl.jena.graph.GraphEvents removeAll>;

        interfaceinvoke $r6.<com.hp.hpl.jena.graph.GraphEventManager: void notifyEvent(com.hp.hpl.jena.graph.Graph,java.lang.Object)>(r0, $r7);

        return;
    }

    public void remove(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.GraphEventManager $r1;
        com.hp.hpl.jena.tdb.store.DatasetGraphTDB $r2;
        com.hp.hpl.jena.graph.Node $r3, r4, r5, r6;
        com.hp.hpl.jena.tdb.store.GraphTDB r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.store.GraphTDB;

        r4 := @parameter0: com.hp.hpl.jena.graph.Node;

        r5 := @parameter1: com.hp.hpl.jena.graph.Node;

        r6 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.GraphEventManager getEventManager()>();

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.graph.GraphEventManager: boolean listening()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.GraphView: void remove(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r4, r5, r6);

        return;

     label1:
        $r2 = r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.tdb.store.DatasetGraphTDB dataset>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.tdb.store.GraphTDB: com.hp.hpl.jena.graph.Node getGraphName()>();

        virtualinvoke $r2.<com.hp.hpl.jena.tdb.store.DatasetGraphTDB: void deleteAny(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, r4, r5, r6);

        return;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.tdb.store.GraphTDB$1 $r0;

        $r0 = new com.hp.hpl.jena.tdb.store.GraphTDB$1;

        specialinvoke $r0.<com.hp.hpl.jena.tdb.store.GraphTDB$1: void <init>()>();

        <com.hp.hpl.jena.tdb.store.GraphTDB: org.apache.jena.atlas.iterator.Transform project4TupleTo3Tuple> = $r0;

        return;
    }
}
