public class com.google.gwt.user.server.rpc.RemoteServiceServlet extends com.google.gwt.user.server.rpc.AbstractRemoteServiceServlet implements com.google.gwt.user.server.rpc.SerializationPolicyProvider
{
    private final java.util.Map serializationPolicyCache;
    private final java.lang.Object delegate;

    static com.google.gwt.user.server.rpc.SerializationPolicy loadSerializationPolicy(javax.servlet.http.HttpServlet, javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.String)
    {
        java.net.URL $r25;
        java.text.ParseException $r35;
        boolean $z0;
        javax.servlet.http.HttpServlet r10;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r12, $r13, $r15, $r20, $r21, $r22, $r23, $r30, $r31, $r32, $r33, $r36, $r37, $r38, $r39, $r42, $r43, $r44;
        java.lang.Throwable $r27;
        javax.servlet.http.HttpServletRequest r0;
        int $i0;
        java.lang.String $r1, r2, $r9, $r11, r14, $r16, $r17, $r24, $r34, $r40, $r45, r46;
        com.google.gwt.user.server.rpc.SerializationPolicy r47;
        java.net.MalformedURLException $r41;
        java.io.IOException $r26, $r28, $r29;
        javax.servlet.ServletContext $r18;
        java.io.InputStream $r19;

        r10 := @parameter0: javax.servlet.http.HttpServlet;

        r0 := @parameter1: javax.servlet.http.HttpServletRequest;

        r2 := @parameter2: java.lang.String;

        r14 := @parameter3: java.lang.String;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getContextPath()>();

        r46 = null;

        if r2 == null goto label04;

     label01:
        $r25 = new java.net.URL;

        specialinvoke $r25.<java.net.URL: void <init>(java.lang.String)>(r2);

        r46 = virtualinvoke $r25.<java.net.URL: java.lang.String getPath()>();

     label02:
        goto label04;

     label03:
        $r41 := @caughtexception;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed moduleBaseURL: ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r10.<javax.servlet.http.HttpServlet: void log(java.lang.String,java.lang.Throwable)>($r45, $r41);

     label04:
        r47 = null;

        if r46 == null goto label05;

        $z0 = virtualinvoke r46.<java.lang.String: boolean startsWith(java.lang.String)>($r1);

        if $z0 != 0 goto label06;

     label05:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ERROR: The module path requested, ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r46);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", is not in the same web application as this servlet, ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Your module may not be properly configured or your client and server code maybe out of date.");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r10.<javax.servlet.http.HttpServlet: void log(java.lang.String)>($r9);

        goto label23;

     label06:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r11 = virtualinvoke r46.<java.lang.String: java.lang.String substring(int)>($i0);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = staticinvoke <com.google.gwt.user.server.rpc.SerializationPolicyLoader: java.lang.String getSerializationPolicyFileName(java.lang.String)>($r16);

        $r18 = virtualinvoke r10.<javax.servlet.http.HttpServlet: javax.servlet.ServletContext getServletContext()>();

        $r19 = interfaceinvoke $r18.<javax.servlet.ServletContext: java.io.InputStream getResourceAsStream(java.lang.String)>($r17);

     label07:
        if $r19 == null goto label12;

     label08:
        r47 = staticinvoke <com.google.gwt.user.server.rpc.SerializationPolicyLoader: com.google.gwt.user.server.rpc.SerializationPolicy loadFromStream(java.io.InputStream,java.util.List)>($r19, null);

     label09:
        goto label13;

     label10:
        $r35 := @caughtexception;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ERROR: Failed to parse the policy file \'");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r10.<javax.servlet.http.HttpServlet: void log(java.lang.String,java.lang.Throwable)>($r40, $r35);

        goto label13;

     label11:
        $r29 := @caughtexception;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ERROR: Could not read the policy file \'");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r10.<javax.servlet.http.HttpServlet: void log(java.lang.String,java.lang.Throwable)>($r34, $r29);

        goto label13;

     label12:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ERROR: The serialization policy file \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was not found; did you forget to include it in this deployment?");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r10.<javax.servlet.http.HttpServlet: void log(java.lang.String)>($r24);

     label13:
        if $r19 == null goto label23;

     label14:
        virtualinvoke $r19.<java.io.InputStream: void close()>();

     label15:
        goto label23;

     label16:
        $r28 := @caughtexception;

        goto label23;

     label17:
        $r27 := @caughtexception;

     label18:
        if $r19 == null goto label22;

     label19:
        virtualinvoke $r19.<java.io.InputStream: void close()>();

     label20:
        goto label22;

     label21:
        $r26 := @caughtexception;

     label22:
        throw $r27;

     label23:
        return r47;

        catch java.net.MalformedURLException from label01 to label02 with label03;
        catch java.text.ParseException from label08 to label09 with label10;
        catch java.io.IOException from label08 to label09 with label11;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Throwable from label07 to label13 with label17;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    public void <init>()
    {
        java.util.HashMap $r1;
        com.google.gwt.user.server.rpc.RemoteServiceServlet r0;

        r0 := @this: com.google.gwt.user.server.rpc.RemoteServiceServlet;

        specialinvoke r0.<com.google.gwt.user.server.rpc.AbstractRemoteServiceServlet: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: java.util.Map serializationPolicyCache> = $r1;

        r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: java.lang.Object delegate> = r0;

        return;
    }

    public void <init>(java.lang.Object)
    {
        java.util.HashMap $r1;
        java.lang.Object r2;
        com.google.gwt.user.server.rpc.RemoteServiceServlet r0;

        r0 := @this: com.google.gwt.user.server.rpc.RemoteServiceServlet;

        r2 := @parameter0: java.lang.Object;

        specialinvoke r0.<com.google.gwt.user.server.rpc.AbstractRemoteServiceServlet: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: java.util.Map serializationPolicyCache> = $r1;

        r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: java.lang.Object delegate> = r2;

        return;
    }

    public final com.google.gwt.user.server.rpc.SerializationPolicy getSerializationPolicy(java.lang.String, java.lang.String)
    {
        javax.servlet.http.HttpServletRequest $r4;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11;
        java.lang.String r1, r2, $r12;
        com.google.gwt.user.server.rpc.SerializationPolicy $r3, $r5, r13;
        com.google.gwt.user.server.rpc.RemoteServiceServlet r0;

        r0 := @this: com.google.gwt.user.server.rpc.RemoteServiceServlet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: com.google.gwt.user.server.rpc.SerializationPolicy getCachedSerializationPolicy(java.lang.String,java.lang.String)>(r1, r2);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r4 = virtualinvoke r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: javax.servlet.http.HttpServletRequest getThreadLocalRequest()>();

        $r5 = virtualinvoke r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: com.google.gwt.user.server.rpc.SerializationPolicy doGetSerializationPolicy(javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>($r4, r1, r2);

        r13 = $r5;

        if $r5 != null goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: Failed to get the SerializationPolicy \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for module \'");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'; a legacy, 1.3.3 compatible, serialization policy will be used.  You may experience SerializationExceptions as a result.");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: void log(java.lang.String)>($r12);

        r13 = staticinvoke <com.google.gwt.user.server.rpc.RPC: com.google.gwt.user.server.rpc.SerializationPolicy getDefaultSerializationPolicy()>();

     label2:
        specialinvoke r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: void putCachedSerializationPolicy(java.lang.String,java.lang.String,com.google.gwt.user.server.rpc.SerializationPolicy)>(r1, r2, r13);

        return r13;
    }

    public java.lang.String processCall(java.lang.String) throws com.google.gwt.user.client.rpc.SerializationException
    {
        java.lang.Object[] $r7;
        com.google.gwt.user.server.rpc.RPCRequest $r4;
        int $i0;
        java.lang.Object $r2, $r5;
        java.lang.Class $r3;
        java.lang.String r1, $r9, $r11;
        java.lang.reflect.Method $r6;
        com.google.gwt.user.server.rpc.SerializationPolicy $r8;
        com.google.gwt.user.server.rpc.RemoteServiceServlet r0;
        com.google.gwt.user.client.rpc.IncompatibleRemoteServiceException $r10;

        r0 := @this: com.google.gwt.user.server.rpc.RemoteServiceServlet;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: void checkPermutationStrongName()>();

     label1:
        $r2 = r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: java.lang.Object delegate>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <com.google.gwt.user.server.rpc.RPC: com.google.gwt.user.server.rpc.RPCRequest decodeRequest(java.lang.String,java.lang.Class,com.google.gwt.user.server.rpc.SerializationPolicyProvider)>(r1, $r3, r0);

        virtualinvoke r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: void onAfterRequestDeserialized(com.google.gwt.user.server.rpc.RPCRequest)>($r4);

        $r5 = r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: java.lang.Object delegate>;

        $r6 = virtualinvoke $r4.<com.google.gwt.user.server.rpc.RPCRequest: java.lang.reflect.Method getMethod()>();

        $r7 = virtualinvoke $r4.<com.google.gwt.user.server.rpc.RPCRequest: java.lang.Object[] getParameters()>();

        $r8 = virtualinvoke $r4.<com.google.gwt.user.server.rpc.RPCRequest: com.google.gwt.user.server.rpc.SerializationPolicy getSerializationPolicy()>();

        $i0 = virtualinvoke $r4.<com.google.gwt.user.server.rpc.RPCRequest: int getFlags()>();

        $r9 = staticinvoke <com.google.gwt.user.server.rpc.RPC: java.lang.String invokeAndEncodeResponse(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],com.google.gwt.user.server.rpc.SerializationPolicy,int)>($r5, $r6, $r7, $r8, $i0);

     label2:
        return $r9;

     label3:
        $r10 := @caughtexception;

        virtualinvoke r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: void log(java.lang.String,java.lang.Throwable)>("An IncompatibleRemoteServiceException was thrown while processing this call.", $r10);

        $r11 = staticinvoke <com.google.gwt.user.server.rpc.RPC: java.lang.String encodeResponseForFailure(java.lang.reflect.Method,java.lang.Throwable)>(null, $r10);

        return $r11;

        catch com.google.gwt.user.client.rpc.IncompatibleRemoteServiceException from label1 to label2 with label3;
    }

    public final void processPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException, javax.servlet.ServletException, com.google.gwt.user.client.rpc.SerializationException
    {
        javax.servlet.http.HttpServletRequest r1;
        javax.servlet.http.HttpServletResponse r4;
        java.lang.String $r2, $r3;
        com.google.gwt.user.server.rpc.RemoteServiceServlet r0;

        r0 := @this: com.google.gwt.user.server.rpc.RemoteServiceServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r4 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r2 = virtualinvoke r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: java.lang.String readContent(javax.servlet.http.HttpServletRequest)>(r1);

        virtualinvoke r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: void onBeforeRequestDeserialized(java.lang.String)>($r2);

        $r3 = virtualinvoke r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: java.lang.String processCall(java.lang.String)>($r2);

        virtualinvoke r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: void onAfterResponseSerialized(java.lang.String)>($r3);

        specialinvoke r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: void writeResponse(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>(r1, r4, $r3);

        return;
    }

    protected void checkPermutationStrongName() throws java.lang.SecurityException
    {
        java.lang.SecurityException $r2;
        java.lang.String $r1;
        com.google.gwt.user.server.rpc.RemoteServiceServlet r0;

        r0 := @this: com.google.gwt.user.server.rpc.RemoteServiceServlet;

        $r1 = virtualinvoke r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: java.lang.String getPermutationStrongName()>();

        if $r1 != null goto label1;

        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Blocked request without GWT permutation header (XSRF attack?)");

        throw $r2;

     label1:
        return;
    }

    protected com.google.gwt.user.server.rpc.SerializationPolicy doGetSerializationPolicy(javax.servlet.http.HttpServletRequest, java.lang.String, java.lang.String)
    {
        javax.servlet.http.HttpServletRequest r1;
        java.lang.String r2, r3;
        com.google.gwt.user.server.rpc.SerializationPolicy $r4;
        com.google.gwt.user.server.rpc.RemoteServiceServlet r0;

        r0 := @this: com.google.gwt.user.server.rpc.RemoteServiceServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = staticinvoke <com.google.gwt.user.server.rpc.RemoteServiceServlet: com.google.gwt.user.server.rpc.SerializationPolicy loadSerializationPolicy(javax.servlet.http.HttpServlet,javax.servlet.http.HttpServletRequest,java.lang.String,java.lang.String)>(r0, r1, r2, r3);

        return $r4;
    }

    protected void onAfterResponseSerialized(java.lang.String)
    {
        java.lang.String r1;
        com.google.gwt.user.server.rpc.RemoteServiceServlet r0;

        r0 := @this: com.google.gwt.user.server.rpc.RemoteServiceServlet;

        r1 := @parameter0: java.lang.String;

        return;
    }

    protected void onBeforeRequestDeserialized(java.lang.String)
    {
        java.lang.String r1;
        com.google.gwt.user.server.rpc.RemoteServiceServlet r0;

        r0 := @this: com.google.gwt.user.server.rpc.RemoteServiceServlet;

        r1 := @parameter0: java.lang.String;

        return;
    }

    protected boolean shouldCompressResponse(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String)
    {
        javax.servlet.http.HttpServletRequest r2;
        javax.servlet.http.HttpServletResponse r3;
        java.lang.String r0;
        boolean $z0;
        com.google.gwt.user.server.rpc.RemoteServiceServlet r1;

        r1 := @this: com.google.gwt.user.server.rpc.RemoteServiceServlet;

        r2 := @parameter0: javax.servlet.http.HttpServletRequest;

        r3 := @parameter1: javax.servlet.http.HttpServletResponse;

        r0 := @parameter2: java.lang.String;

        $z0 = staticinvoke <com.google.gwt.user.server.rpc.RPCServletUtils: boolean exceedsUncompressedContentLengthLimit(java.lang.String)>(r0);

        return $z0;
    }

    private com.google.gwt.user.server.rpc.SerializationPolicy getCachedSerializationPolicy(java.lang.String, java.lang.String)
    {
        java.lang.Throwable $r11;
        java.util.Map $r1, $r3;
        java.lang.StringBuilder $r2, $r5, $r7;
        java.lang.Object $r9;
        java.lang.String r4, r6, $r8;
        com.google.gwt.user.server.rpc.SerializationPolicy $r10;
        com.google.gwt.user.server.rpc.RemoteServiceServlet r0;

        r0 := @this: com.google.gwt.user.server.rpc.RemoteServiceServlet;

        r4 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        $r1 = r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: java.util.Map serializationPolicyCache>;

        entermonitor $r1;

     label1:
        $r3 = r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: java.util.Map serializationPolicyCache>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r10 = (com.google.gwt.user.server.rpc.SerializationPolicy) $r9;

        exitmonitor $r1;

     label2:
        return $r10;

     label3:
        $r11 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void putCachedSerializationPolicy(java.lang.String, java.lang.String, com.google.gwt.user.server.rpc.SerializationPolicy)
    {
        java.lang.Throwable $r10;
        java.util.Map $r1, $r3;
        java.lang.StringBuilder $r2, $r5, $r7;
        java.lang.String r4, r6, $r8;
        com.google.gwt.user.server.rpc.SerializationPolicy r9;
        com.google.gwt.user.server.rpc.RemoteServiceServlet r0;

        r0 := @this: com.google.gwt.user.server.rpc.RemoteServiceServlet;

        r4 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        r9 := @parameter2: com.google.gwt.user.server.rpc.SerializationPolicy;

        $r1 = r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: java.util.Map serializationPolicyCache>;

        entermonitor $r1;

     label1:
        $r3 = r0.<com.google.gwt.user.server.rpc.RemoteServiceServlet: java.util.Map serializationPolicyCache>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r9);

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r10 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r10;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private void writeResponse(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.String) throws java.io.IOException
    {
        javax.servlet.http.HttpServletResponse r2;
        javax.servlet.http.HttpServletRequest r0;
        javax.servlet.ServletContext $r4;
        java.lang.String r3;
        boolean $z0, $z1, $z2;
        com.google.gwt.user.server.rpc.RemoteServiceServlet r1;

        r1 := @this: com.google.gwt.user.server.rpc.RemoteServiceServlet;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        r3 := @parameter2: java.lang.String;

        $z0 = staticinvoke <com.google.gwt.user.server.rpc.RPCServletUtils: boolean acceptsGzipEncoding(javax.servlet.http.HttpServletRequest)>(r0);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<com.google.gwt.user.server.rpc.RemoteServiceServlet: boolean shouldCompressResponse(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>(r0, r2, r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $r4 = virtualinvoke r1.<com.google.gwt.user.server.rpc.RemoteServiceServlet: javax.servlet.ServletContext getServletContext()>();

        staticinvoke <com.google.gwt.user.server.rpc.RPCServletUtils: void writeResponse(javax.servlet.ServletContext,javax.servlet.http.HttpServletResponse,java.lang.String,boolean)>($r4, r2, r3, $z2);

        return;
    }
}
