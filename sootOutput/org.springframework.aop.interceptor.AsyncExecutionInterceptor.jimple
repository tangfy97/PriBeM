public class org.springframework.aop.interceptor.AsyncExecutionInterceptor extends java.lang.Object implements org.aopalliance.intercept.MethodInterceptor, org.springframework.core.Ordered
{
    private final org.springframework.core.task.AsyncTaskExecutor asyncExecutor;

    public void <init>(org.springframework.core.task.AsyncTaskExecutor)
    {
        org.springframework.aop.interceptor.AsyncExecutionInterceptor r0;
        org.springframework.core.task.AsyncTaskExecutor r1;

        r0 := @this: org.springframework.aop.interceptor.AsyncExecutionInterceptor;

        r1 := @parameter0: org.springframework.core.task.AsyncTaskExecutor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "TaskExecutor must not be null");

        r0.<org.springframework.aop.interceptor.AsyncExecutionInterceptor: org.springframework.core.task.AsyncTaskExecutor asyncExecutor> = r1;

        return;
    }

    public void <init>(java.util.concurrent.Executor)
    {
        org.springframework.core.task.support.TaskExecutorAdapter $r1;
        org.springframework.aop.interceptor.AsyncExecutionInterceptor r0;
        java.util.concurrent.Executor r2;

        r0 := @this: org.springframework.aop.interceptor.AsyncExecutionInterceptor;

        r2 := @parameter0: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.springframework.core.task.support.TaskExecutorAdapter;

        specialinvoke $r1.<org.springframework.core.task.support.TaskExecutorAdapter: void <init>(java.util.concurrent.Executor)>(r2);

        r0.<org.springframework.aop.interceptor.AsyncExecutionInterceptor: org.springframework.core.task.AsyncTaskExecutor asyncExecutor> = $r1;

        return;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        org.springframework.aop.interceptor.AsyncExecutionInterceptor r0;
        org.springframework.core.task.AsyncTaskExecutor $r3;
        java.util.concurrent.Future $r4;
        org.aopalliance.intercept.MethodInvocation r2;
        java.lang.Class $r5, $r7;
        org.springframework.aop.interceptor.AsyncExecutionInterceptor$1 $r1;
        java.lang.reflect.Method $r6;
        boolean $z0;

        r0 := @this: org.springframework.aop.interceptor.AsyncExecutionInterceptor;

        r2 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r3 = r0.<org.springframework.aop.interceptor.AsyncExecutionInterceptor: org.springframework.core.task.AsyncTaskExecutor asyncExecutor>;

        $r1 = new org.springframework.aop.interceptor.AsyncExecutionInterceptor$1;

        specialinvoke $r1.<org.springframework.aop.interceptor.AsyncExecutionInterceptor$1: void <init>(org.springframework.aop.interceptor.AsyncExecutionInterceptor,org.aopalliance.intercept.MethodInvocation)>(r0, r2);

        $r4 = interfaceinvoke $r3.<org.springframework.core.task.AsyncTaskExecutor: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r1);

        $r5 = class "Ljava/util/concurrent/Future;";

        $r6 = interfaceinvoke r2.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r7 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r7);

        if $z0 == 0 goto label1;

        return $r4;

     label1:
        return null;
    }

    public int getOrder()
    {
        org.springframework.aop.interceptor.AsyncExecutionInterceptor r0;

        r0 := @this: org.springframework.aop.interceptor.AsyncExecutionInterceptor;

        return -2147483648;
    }
}
