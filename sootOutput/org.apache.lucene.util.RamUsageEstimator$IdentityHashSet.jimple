final class org.apache.lucene.util.RamUsageEstimator$IdentityHashSet extends java.lang.Object implements java.lang.Iterable
{
    public static final float DEFAULT_LOAD_FACTOR;
    public static final int MIN_CAPACITY;
    public java.lang.Object[] keys;
    public int assigned;
    public final float loadFactor;
    private int resizeThreshold;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet r0;

        r0 := @this: org.apache.lucene.util.RamUsageEstimator$IdentityHashSet;

        specialinvoke r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: void <init>(int,float)>(16, 0.75F);

        return;
    }

    public void <init>(int)
    {
        int i0;
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet r0;

        r0 := @this: org.apache.lucene.util.RamUsageEstimator$IdentityHashSet;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: void <init>(int,float)>(i0, 0.75F);

        return;
    }

    public void <init>(int, float)
    {
        java.lang.AssertionError $r3, $r4;
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet r0;
        byte $b2, $b3;
        int $i0, $i1, i4, $i5, $i6;
        float f0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.util.RamUsageEstimator$IdentityHashSet;

        i4 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = staticinvoke <java.lang.Math: int max(int,int)>(4, i4);

        $z0 = <org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $i0 > 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("Initial capacity must be between (0, 2147483647].");

        throw $r3;

     label1:
        $z1 = <org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $b2 = f0 cmpl 0.0F;

        $i5 = (int) $b2;

        if $i5 <= 0 goto label2;

        $b3 = f0 cmpg 1.0F;

        $i6 = (int) $b3;

        if $i6 < 0 goto label3;

     label2:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("Load factor must be between (0, 1).");

        throw $r4;

     label3:
        r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: float loadFactor> = f0;

        $i1 = virtualinvoke r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int roundCapacity(int)>($i0);

        specialinvoke r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: void allocateBuffers(int)>($i1);

        return;
    }

    public boolean add(java.lang.Object)
    {
        java.lang.Object[] $r1, $r3, $r5;
        java.lang.AssertionError $r4;
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        boolean $z0;
        java.lang.Object r2, $r6;

        r0 := @this: org.apache.lucene.util.RamUsageEstimator$IdentityHashSet;

        r2 := @parameter0: java.lang.Object;

        $z0 = <org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r2 != null goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("Null keys not allowed.");

        throw $r4;

     label1:
        $i1 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int assigned>;

        $i0 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int resizeThreshold>;

        if $i1 < $i0 goto label2;

        specialinvoke r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: void expandAndRehash()>();

     label2:
        $r1 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: java.lang.Object[] keys>;

        $i2 = lengthof $r1;

        $i7 = $i2 - 1;

        $i3 = staticinvoke <org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int rehash(java.lang.Object)>(r2);

        i8 = $i3 & $i7;

     label3:
        $r5 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: java.lang.Object[] keys>;

        $r6 = $r5[i8];

        if $r6 == null goto label5;

        if r2 != $r6 goto label4;

        return 0;

     label4:
        $i6 = i8 + 1;

        i8 = $i6 & $i7;

        goto label3;

     label5:
        $i4 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int assigned>;

        $i5 = $i4 + 1;

        r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int assigned> = $i5;

        $r3 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: java.lang.Object[] keys>;

        $r3[i8] = r2;

        return 1;
    }

    public boolean contains(java.lang.Object)
    {
        java.lang.Object[] $r1, $r3;
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet r0;
        int $i0, i1, $i2, $i3, i4;
        java.lang.Object r2, $r4;

        r0 := @this: org.apache.lucene.util.RamUsageEstimator$IdentityHashSet;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: java.lang.Object[] keys>;

        $i0 = lengthof $r1;

        i1 = $i0 - 1;

        $i2 = staticinvoke <org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int rehash(java.lang.Object)>(r2);

        i4 = $i2 & i1;

     label1:
        $r3 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: java.lang.Object[] keys>;

        $r4 = $r3[i4];

        if $r4 == null goto label3;

        if r2 != $r4 goto label2;

        return 1;

     label2:
        $i3 = i4 + 1;

        i4 = $i3 & i1;

        goto label1;

     label3:
        return 0;
    }

    private static int rehash(java.lang.Object)
    {
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8;
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $i1 = $i0 >>> 16;

        i4 = $i0 ^ $i1;

        i5 = i4 * -2048144789;

        $i2 = i5 >>> 13;

        i6 = i5 ^ $i2;

        i7 = i6 * -1028477387;

        $i3 = i7 >>> 16;

        i8 = i7 ^ $i3;

        return i8;
    }

    private void expandAndRehash()
    {
        java.lang.Object[] r1, $r2, $r3, $r5, $r7;
        java.lang.AssertionError $r8;
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, i10;
        boolean $z0;
        java.lang.Object r4, $r6;

        r0 := @this: org.apache.lucene.util.RamUsageEstimator$IdentityHashSet;

        r1 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: java.lang.Object[] keys>;

        $z0 = <org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i6 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int assigned>;

        $i5 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int resizeThreshold>;

        if $i6 >= $i5 goto label1;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label1:
        $r2 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: java.lang.Object[] keys>;

        $i0 = lengthof $r2;

        $i1 = virtualinvoke r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int nextCapacity(int)>($i0);

        specialinvoke r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: void allocateBuffers(int)>($i1);

        $r3 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: java.lang.Object[] keys>;

        $i2 = lengthof $r3;

        $i7 = $i2 - 1;

        i8 = 0;

     label2:
        $i9 = lengthof r1;

        if i8 >= $i9 goto label6;

        r4 = r1[i8];

        if r4 == null goto label5;

        $i3 = staticinvoke <org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int rehash(java.lang.Object)>(r4);

        i10 = $i3 & $i7;

     label3:
        $r5 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: java.lang.Object[] keys>;

        $r6 = $r5[i10];

        if $r6 == null goto label4;

        $i4 = i10 + 1;

        i10 = $i4 & $i7;

        goto label3;

     label4:
        $r7 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: java.lang.Object[] keys>;

        $r7[i10] = r4;

     label5:
        i8 = i8 + 1;

        goto label2;

     label6:
        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>(r1, null);

        return;
    }

    private void allocateBuffers(int)
    {
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet r0;
        java.lang.Object[] $r1;
        int i0, $i1;
        float $f0, $f1;

        r0 := @this: org.apache.lucene.util.RamUsageEstimator$IdentityHashSet;

        i0 := @parameter0: int;

        $r1 = newarray (java.lang.Object)[i0];

        r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: java.lang.Object[] keys> = $r1;

        $f0 = (float) i0;

        $f1 = $f0 * 0.75F;

        $i1 = (int) $f1;

        r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int resizeThreshold> = $i1;

        return;
    }

    protected int nextCapacity(int)
    {
        long $l2;
        java.lang.AssertionError $r0, $r1;
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet r2;
        int $i0, $i1, $i3, i4;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.util.RamUsageEstimator$IdentityHashSet;

        i4 := @parameter0: int;

        $z0 = <org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i4 <= 0 goto label1;

        $l2 = (long) i4;

        $i3 = staticinvoke <java.lang.Long: int bitCount(long)>($l2);

        if $i3 == 1 goto label2;

     label1:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>("Capacity must be a power of two.");

        throw $r1;

     label2:
        $z1 = <org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $i1 = i4 << 1;

        if $i1 > 0 goto label3;

        $r0 = new java.lang.AssertionError;

        specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("Maximum capacity exceeded (1073741824).");

        throw $r0;

     label3:
        if i4 >= 2 goto label4;

        i4 = 2;

     label4:
        $i0 = i4 << 1;

        return $i0;
    }

    protected int roundCapacity(int)
    {
        int i0, i1;
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet r0;

        r0 := @this: org.apache.lucene.util.RamUsageEstimator$IdentityHashSet;

        i0 := @parameter0: int;

        if i0 <= 1073741824 goto label1;

        return 1073741824;

     label1:
        i1 = 4;

     label2:
        if i1 >= i0 goto label3;

        i1 = i1 << 1;

        goto label2;

     label3:
        return i1;
    }

    public void clear()
    {
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet r0;
        java.lang.Object[] $r1;

        r0 := @this: org.apache.lucene.util.RamUsageEstimator$IdentityHashSet;

        r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int assigned> = 0;

        $r1 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: java.lang.Object[] keys>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r1, null);

        return;
    }

    public int size()
    {
        int $i0;
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet r0;

        r0 := @this: org.apache.lucene.util.RamUsageEstimator$IdentityHashSet;

        $i0 = r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int assigned>;

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.RamUsageEstimator$IdentityHashSet;

        $i0 = virtualinvoke r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Iterator iterator()
    {
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet r1;
        org.apache.lucene.util.RamUsageEstimator$IdentityHashSet$1 $r0;

        r1 := @this: org.apache.lucene.util.RamUsageEstimator$IdentityHashSet;

        $r0 = new org.apache.lucene.util.RamUsageEstimator$IdentityHashSet$1;

        specialinvoke $r0.<org.apache.lucene.util.RamUsageEstimator$IdentityHashSet$1: void <init>(org.apache.lucene.util.RamUsageEstimator$IdentityHashSet)>(r1);

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: int MIN_CAPACITY> = 4;

        <org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: float DEFAULT_LOAD_FACTOR> = 0.75F;

        $r0 = class "Lorg/apache/lucene/util/RamUsageEstimator;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.RamUsageEstimator$IdentityHashSet: boolean $assertionsDisabled> = $z1;

        return;
    }
}
