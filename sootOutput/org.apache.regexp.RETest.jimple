public class org.apache.regexp.RETest extends java.lang.Object
{
    static final boolean showSuccesses;
    static final java.lang.String NEW_LINE;
    org.apache.regexp.REDebugCompiler compiler;
    int testCount;
    int failures;

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        java.lang.Exception $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

     label1:
        $z0 = staticinvoke <org.apache.regexp.RETest: boolean test(java.lang.String[])>(r0);

        if $z0 != 0 goto label2;

        staticinvoke <java.lang.System: void exit(int)>(1);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.lang.Throwable: void printStackTrace()>();

        staticinvoke <java.lang.System: void exit(int)>(1);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static boolean test(java.lang.String[]) throws java.lang.Exception
    {
        java.io.PrintStream $r2, $r3, $r4;
        org.apache.regexp.RETest $r0;
        java.lang.String[] r1;
        int $i0, $i1, $i2;
        java.lang.String $r5, $r6;
        boolean $z0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new org.apache.regexp.RETest;

        specialinvoke $r0.<org.apache.regexp.RETest: void <init>()>();

        $i0 = lengthof r1;

        if $i0 != 2 goto label1;

        $r6 = r1[1];

        virtualinvoke $r0.<org.apache.regexp.RETest: void runInteractiveTests(java.lang.String)>($r6);

        goto label3;

     label1:
        $i1 = lengthof r1;

        if $i1 != 1 goto label2;

        $r5 = r1[0];

        virtualinvoke $r0.<org.apache.regexp.RETest: void runAutomatedTests(java.lang.String)>($r5);

        goto label3;

     label2:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Usage: RETest ([-i] [regex]) ([/path/to/testfile.txt])");

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("By Default will run automated tests from file \'docs/RETest.txt\' ...");

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println()>();

        virtualinvoke $r0.<org.apache.regexp.RETest: void runAutomatedTests(java.lang.String)>("docs/RETest.txt");

     label3:
        $i2 = $r0.<org.apache.regexp.RETest: int failures>;

        if $i2 != 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public void <init>()
    {
        org.apache.regexp.REDebugCompiler $r1;
        org.apache.regexp.RETest r0;

        r0 := @this: org.apache.regexp.RETest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.regexp.REDebugCompiler;

        specialinvoke $r1.<org.apache.regexp.REDebugCompiler: void <init>()>();

        r0.<org.apache.regexp.RETest: org.apache.regexp.REDebugCompiler compiler> = $r1;

        r0.<org.apache.regexp.RETest: int testCount> = 0;

        r0.<org.apache.regexp.RETest: int failures> = 0;

        return;
    }

    void runInteractiveTests(java.lang.String)
    {
        org.apache.regexp.RE $r0;
        boolean $z0, z1;
        java.io.PrintWriter $r16;
        java.lang.Exception $r26;
        org.apache.regexp.RETest r1;
        java.lang.StringBuffer $r5, $r6, $r8, $r9, $r10, $r11, $r13, $r14, $r27, $r28, $r30;
        java.lang.String r2, $r7, $r12, $r15, $r24, $r29, $r31;
        java.io.PrintStream $r17, $r22, $r23, $r25;
        org.apache.regexp.REDebugCompiler $r3, $r18;
        org.apache.regexp.REProgram $r4;
        java.io.InputStreamReader $r20;
        java.io.BufferedReader $r19;
        java.io.InputStream $r21;

        r1 := @this: org.apache.regexp.RETest;

        r2 := @parameter0: java.lang.String;

        $r0 = new org.apache.regexp.RE;

        specialinvoke $r0.<org.apache.regexp.RE: void <init>()>();

     label1:
        $r3 = r1.<org.apache.regexp.RETest: org.apache.regexp.REDebugCompiler compiler>;

        $r4 = virtualinvoke $r3.<org.apache.regexp.RECompiler: org.apache.regexp.REProgram compile(java.lang.String)>(r2);

        virtualinvoke $r0.<org.apache.regexp.RE: void setProgram(org.apache.regexp.REProgram)>($r4);

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r7 = <org.apache.regexp.RETest: java.lang.String NEW_LINE>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r12 = <org.apache.regexp.RETest: java.lang.String NEW_LINE>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>($r15);

        $r16 = new java.io.PrintWriter;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r16.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r17);

        $r18 = r1.<org.apache.regexp.RETest: org.apache.regexp.REDebugCompiler compiler>;

        virtualinvoke $r18.<org.apache.regexp.REDebugCompiler: void dumpProgram(java.io.PrintWriter)>($r16);

        virtualinvoke $r16.<java.io.PrintWriter: void flush()>();

        z1 = 1;

        goto label6;

     label2:
        $r19 = new java.io.BufferedReader;

        $r20 = new java.io.InputStreamReader;

        $r21 = <java.lang.System: java.io.InputStream in>;

        specialinvoke $r20.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r21);

        specialinvoke $r19.<java.io.BufferedReader: void <init>(java.io.Reader)>($r20);

        $r22 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r22.<java.io.PrintStream: void print(java.lang.String)>("> ");

        $r23 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r23.<java.io.PrintStream: void flush()>();

        $r24 = virtualinvoke $r19.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r24 == null goto label5;

        $z0 = virtualinvoke $r0.<org.apache.regexp.RE: boolean match(java.lang.String)>($r24);

        if $z0 == 0 goto label3;

        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>("Match successful.");

        goto label4;

     label3:
        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>("Match failed.");

     label4:
        virtualinvoke r1.<org.apache.regexp.RETest: void showParens(org.apache.regexp.RE)>($r0);

        goto label6;

     label5:
        z1 = 0;

        $r25 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r25.<java.io.PrintStream: void println()>();

     label6:
        if z1 != 0 goto label2;

     label7:
        goto label9;

     label8:
        $r26 := @caughtexception;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Error: ");

        $r29 = virtualinvoke $r26.<java.lang.Throwable: java.lang.String toString()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>($r31);

        virtualinvoke $r26.<java.lang.Throwable: void printStackTrace()>();

     label9:
        return;

        catch java.lang.Exception from label1 to label7 with label8;
    }

    void die(java.lang.String)
    {
        java.lang.StringBuffer $r2, $r4, $r6;
        org.apache.regexp.RETest r0;
        int $i1;
        java.lang.String r3, $r5;

        r0 := @this: org.apache.regexp.RETest;

        r3 := @parameter0: java.lang.String;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FATAL ERROR: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.regexp.RETest: void say(java.lang.String)>($r5);

        $i1 = (int) -1;

        staticinvoke <java.lang.System: void exit(int)>($i1);

        return;
    }

    void fail(java.lang.StringBuffer, java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.StringBuffer r0;
        org.apache.regexp.RETest r3;
        java.lang.String $r2, r4;

        r3 := @this: org.apache.regexp.RETest;

        r0 := @parameter0: java.lang.StringBuffer;

        r4 := @parameter1: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>($r2);

        virtualinvoke r3.<org.apache.regexp.RETest: void fail(java.lang.String)>(r4);

        return;
    }

    void fail(java.lang.String)
    {
        org.apache.regexp.RETest r0;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r7, $r8, $r10, $r11, $r18, $r19, $r21, $r22;
        int $i0, $i1;
        java.lang.String $r3, $r6, $r9, $r12, r13, $r20, $r23;
        java.io.PrintWriter $r15;
        java.io.PrintStream $r16;
        org.apache.regexp.REDebugCompiler $r14, $r17;

        r0 := @this: org.apache.regexp.RETest;

        r13 := @parameter0: java.lang.String;

        $i0 = r0.<org.apache.regexp.RETest: int failures>;

        $i1 = $i0 + 1;

        r0.<org.apache.regexp.RETest: int failures> = $i1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r3 = <org.apache.regexp.RETest: java.lang.String NEW_LINE>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.regexp.RETest: void say(java.lang.String)>($r6);

        virtualinvoke r0.<org.apache.regexp.RETest: void say(java.lang.String)>("*******************************************************");

        virtualinvoke r0.<org.apache.regexp.RETest: void say(java.lang.String)>("*********************  FAILURE!  **********************");

        virtualinvoke r0.<org.apache.regexp.RETest: void say(java.lang.String)>("*******************************************************");

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r9 = <org.apache.regexp.RETest: java.lang.String NEW_LINE>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.regexp.RETest: void say(java.lang.String)>($r12);

        virtualinvoke r0.<org.apache.regexp.RETest: void say(java.lang.String)>(r13);

        virtualinvoke r0.<org.apache.regexp.RETest: void say(java.lang.String)>("");

        $r14 = r0.<org.apache.regexp.RETest: org.apache.regexp.REDebugCompiler compiler>;

        if $r14 == null goto label1;

        $r15 = new java.io.PrintWriter;

        $r16 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r15.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r16);

        $r17 = r0.<org.apache.regexp.RETest: org.apache.regexp.REDebugCompiler compiler>;

        virtualinvoke $r17.<org.apache.regexp.REDebugCompiler: void dumpProgram(java.io.PrintWriter)>($r15);

        virtualinvoke $r15.<java.io.PrintWriter: void flush()>();

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r20 = <org.apache.regexp.RETest: java.lang.String NEW_LINE>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.regexp.RETest: void say(java.lang.String)>($r23);

     label1:
        return;
    }

    void say(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.String r0;
        org.apache.regexp.RETest r2;

        r2 := @this: org.apache.regexp.RETest;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        return;
    }

    void showParens(org.apache.regexp.RE)
    {
        org.apache.regexp.RETest r1;
        org.apache.regexp.RE r0;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r7;
        int $i0, i1;
        java.lang.String $r6, $r8;

        r1 := @this: org.apache.regexp.RETest;

        r0 := @parameter0: org.apache.regexp.RE;

        i1 = 0;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("$");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r6 = virtualinvoke r0.<org.apache.regexp.RE: java.lang.String getParen(int)>(i1);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>($r8);

        i1 = i1 + 1;

     label2:
        $i0 = virtualinvoke r0.<org.apache.regexp.RE: int getParenCount()>();

        if i1 < $i0 goto label1;

        return;
    }

    void runAutomatedTests(java.lang.String) throws java.lang.Exception
    {
        boolean $z0, $z1;
        org.apache.regexp.RETestCase $r5;
        java.lang.Exception $r22;
        java.lang.Throwable $r27;
        org.apache.regexp.RETest r0;
        long $l0, $l1, $l2;
        java.lang.StringBuffer $r6, $r8, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r23, $r24, $r25;
        int $i3, $i4, $i5;
        java.lang.String r2, $r7, $r9, $r14, $r21, $r26;
        java.io.File $r1;
        java.io.BufferedReader $r3;
        java.io.FileReader $r4;

        r0 := @this: org.apache.regexp.RETest;

        r2 := @parameter0: java.lang.String;

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        specialinvoke r0.<org.apache.regexp.RETest: void testPrecompiledRE()>();

        specialinvoke r0.<org.apache.regexp.RETest: void testSplitAndGrep()>();

        specialinvoke r0.<org.apache.regexp.RETest: void testSubst()>();

        virtualinvoke r0.<org.apache.regexp.RETest: void testOther()>();

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label01;

        $r22 = new java.lang.Exception;

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r22.<java.lang.Exception: void <init>(java.lang.String)>($r26);

        throw $r22;

     label01:
        $r3 = new java.io.BufferedReader;

        $r4 = new java.io.FileReader;

        specialinvoke $r4.<java.io.FileReader: void <init>(java.io.File)>($r1);

        specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4);

     label02:
        goto label04;

     label03:
        $r5 = specialinvoke r0.<org.apache.regexp.RETest: org.apache.regexp.RETestCase getNextTestCase(java.io.BufferedReader)>($r3);

        if $r5 == null goto label04;

        virtualinvoke $r5.<org.apache.regexp.RETestCase: void runTest()>();

     label04:
        $z1 = virtualinvoke $r3.<java.io.BufferedReader: boolean ready()>();

        if $z1 != 0 goto label03;

        goto label10;

     label05:
        goto label08;

     label06:
        $r27 := @caughtexception;

        goto label11;

     label07:
        throw $r27;

     label08:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = <org.apache.regexp.RETest: java.lang.String NEW_LINE>;

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = <org.apache.regexp.RETest: java.lang.String NEW_LINE>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Match time = ");

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l2 = $l1 - $l0;

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ms.");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.regexp.RETest: void say(java.lang.String)>($r14);

        $i3 = r0.<org.apache.regexp.RETest: int failures>;

        if $i3 <= 0 goto label09;

        virtualinvoke r0.<org.apache.regexp.RETest: void say(java.lang.String)>("*************** THERE ARE FAILURES! *******************");

     label09:
        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Tests complete.  ");

        $i4 = r0.<org.apache.regexp.RETest: int testCount>;

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" tests, ");

        $i5 = r0.<org.apache.regexp.RETest: int failures>;

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" failure(s).");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.regexp.RETest: void say(java.lang.String)>($r21);

        return;

     label10:
        virtualinvoke $r3.<java.io.BufferedReader: void close()>();

        goto label05;

     label11:
        virtualinvoke $r3.<java.io.BufferedReader: void close()>();

        goto label07;

        catch java.lang.Throwable from label02 to label06 with label06;
    }

    void testOther() throws java.lang.Exception
    {
        byte[] $r5, $r10;
        java.io.ObjectInputStream $r6, $r11;
        org.apache.regexp.RE $r0, $r13, $r14, $r15, $r16, $r17, $r18, $r19, r20;
        java.io.ByteArrayInputStream $r4, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        java.io.ByteArrayOutputStream $r2;
        org.apache.regexp.RETest r1;
        int $i0;
        java.io.ObjectOutputStream $r3, $r8;
        java.lang.Object $r7, $r12;

        r1 := @this: org.apache.regexp.RETest;

        $r0 = new org.apache.regexp.RE;

        specialinvoke $r0.<org.apache.regexp.RE: void <init>(java.lang.String)>("(a*)b");

        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>("Serialized/deserialized (a*)b");

        $r2 = new java.io.ByteArrayOutputStream;

        specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>(int)>(128);

        $r3 = new java.io.ObjectOutputStream;

        specialinvoke $r3.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r2);

        virtualinvoke $r3.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r0);

        $r4 = new java.io.ByteArrayInputStream;

        $r5 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>($r5);

        $r6 = new java.io.ObjectInputStream;

        specialinvoke $r6.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r4);

        $r7 = virtualinvoke $r6.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r20 = (org.apache.regexp.RE) $r7;

        $z0 = virtualinvoke r20.<org.apache.regexp.RE: boolean match(java.lang.String)>("aaab");

        if $z0 != 0 goto label01;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("Did not match \'aaab\' with deserialized RE.");

        goto label02;

     label01:
        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>("aaaab = true");

        virtualinvoke r1.<org.apache.regexp.RETest: void showParens(org.apache.regexp.RE)>(r20);

     label02:
        virtualinvoke $r2.<java.io.ByteArrayOutputStream: void reset()>();

        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>("Deserialized (a*)b");

        $r8 = new java.io.ObjectOutputStream;

        specialinvoke $r8.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r2);

        virtualinvoke $r8.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r20);

        $r9 = new java.io.ByteArrayInputStream;

        $r10 = virtualinvoke $r2.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r10);

        $r11 = new java.io.ObjectInputStream;

        specialinvoke $r11.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r9);

        $r12 = virtualinvoke $r11.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r19 = (org.apache.regexp.RE) $r12;

        $i0 = virtualinvoke $r19.<org.apache.regexp.RE: int getParenCount()>();

        if $i0 == 0 goto label03;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("Has parens after deserialization.");

     label03:
        $z1 = virtualinvoke $r19.<org.apache.regexp.RE: boolean match(java.lang.String)>("aaab");

        if $z1 != 0 goto label04;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("Did not match \'aaab\' with deserialized RE.");

        goto label05;

     label04:
        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>("aaaab = true");

        virtualinvoke r1.<org.apache.regexp.RETest: void showParens(org.apache.regexp.RE)>($r19);

     label05:
        $r13 = new org.apache.regexp.RE;

        specialinvoke $r13.<org.apache.regexp.RE: void <init>(java.lang.String)>("abc(\\w*)");

        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>("MATCH_CASEINDEPENDENT abc(\\w*)");

        virtualinvoke $r13.<org.apache.regexp.RE: void setMatchFlags(int)>(1);

        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>("abc(d*)");

        $z2 = virtualinvoke $r13.<org.apache.regexp.RE: boolean match(java.lang.String)>("abcddd");

        if $z2 != 0 goto label06;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("Did not match \'abcddd\'.");

        goto label07;

     label06:
        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>("abcddd = true");

        virtualinvoke r1.<org.apache.regexp.RETest: void showParens(org.apache.regexp.RE)>($r13);

     label07:
        $z3 = virtualinvoke $r13.<org.apache.regexp.RE: boolean match(java.lang.String)>("aBcDDdd");

        if $z3 != 0 goto label08;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("Did not match \'aBcDDdd\'.");

        goto label09;

     label08:
        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>("aBcDDdd = true");

        virtualinvoke r1.<org.apache.regexp.RETest: void showParens(org.apache.regexp.RE)>($r13);

     label09:
        $z4 = virtualinvoke $r13.<org.apache.regexp.RE: boolean match(java.lang.String)>("ABCDDDDD");

        if $z4 != 0 goto label10;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("Did not match \'ABCDDDDD\'.");

        goto label11;

     label10:
        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>("ABCDDDDD = true");

        virtualinvoke r1.<org.apache.regexp.RETest: void showParens(org.apache.regexp.RE)>($r13);

     label11:
        $r14 = new org.apache.regexp.RE;

        specialinvoke $r14.<org.apache.regexp.RE: void <init>(java.lang.String)>("(A*)b\\1");

        virtualinvoke $r14.<org.apache.regexp.RE: void setMatchFlags(int)>(1);

        $z5 = virtualinvoke $r14.<org.apache.regexp.RE: boolean match(java.lang.String)>("AaAaaaBAAAAAA");

        if $z5 != 0 goto label12;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("Did not match \'AaAaaaBAAAAAA\'.");

        goto label13;

     label12:
        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>("AaAaaaBAAAAAA = true");

        virtualinvoke r1.<org.apache.regexp.RETest: void showParens(org.apache.regexp.RE)>($r14);

     label13:
        $r15 = new org.apache.regexp.RE;

        specialinvoke $r15.<org.apache.regexp.RE: void <init>(java.lang.String)>("[A-Z]*");

        virtualinvoke $r15.<org.apache.regexp.RE: void setMatchFlags(int)>(1);

        $z6 = virtualinvoke $r15.<org.apache.regexp.RE: boolean match(java.lang.String)>("CaBgDe12");

        if $z6 != 0 goto label14;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("Did not match \'CaBgDe12\'.");

        goto label15;

     label14:
        virtualinvoke r1.<org.apache.regexp.RETest: void say(java.lang.String)>("CaBgDe12 = true");

        virtualinvoke r1.<org.apache.regexp.RETest: void showParens(org.apache.regexp.RE)>($r15);

     label15:
        $r16 = new org.apache.regexp.RE;

        specialinvoke $r16.<org.apache.regexp.RE: void <init>(java.lang.String)>("^abc$");

        $z7 = virtualinvoke $r16.<org.apache.regexp.RE: boolean match(java.lang.String)>("\nabc");

        if $z7 == 0 goto label16;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"\\nabc\" matches \"^abc$\"");

     label16:
        $r17 = new org.apache.regexp.RE;

        specialinvoke $r17.<org.apache.regexp.RE: void <init>(java.lang.String,int)>("^abc$", 2);

        $z8 = virtualinvoke $r17.<org.apache.regexp.RE: boolean match(java.lang.String)>("\nabc");

        if $z8 != 0 goto label17;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"\\nabc\" doesn\'t match \"^abc$\"");

     label17:
        $z9 = virtualinvoke $r17.<org.apache.regexp.RE: boolean match(java.lang.String)>("\rabc");

        if $z9 != 0 goto label18;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"\\rabc\" doesn\'t match \"^abc$\"");

     label18:
        $z10 = virtualinvoke $r17.<org.apache.regexp.RE: boolean match(java.lang.String)>("\r\nabc");

        if $z10 != 0 goto label19;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"\\r\\nabc\" doesn\'t match \"^abc$\"");

     label19:
        $z11 = virtualinvoke $r17.<org.apache.regexp.RE: boolean match(java.lang.String)>("\u0085abc");

        if $z11 != 0 goto label20;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"\\u0085abc\" doesn\'t match \"^abc$\"");

     label20:
        $z12 = virtualinvoke $r17.<org.apache.regexp.RE: boolean match(java.lang.String)>("\u2028abc");

        if $z12 != 0 goto label21;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"\\u2028abc\" doesn\'t match \"^abc$\"");

     label21:
        $z13 = virtualinvoke $r17.<org.apache.regexp.RE: boolean match(java.lang.String)>("\u2029abc");

        if $z13 != 0 goto label22;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"\\u2029abc\" doesn\'t match \"^abc$\"");

     label22:
        $r18 = new org.apache.regexp.RE;

        specialinvoke $r18.<org.apache.regexp.RE: void <init>(java.lang.String,int)>("^a.*b$", 2);

        $z14 = virtualinvoke $r18.<org.apache.regexp.RE: boolean match(java.lang.String)>("a\nb");

        if $z14 == 0 goto label23;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"a\\nb\" matches \"^a.*b$\"");

     label23:
        $z15 = virtualinvoke $r18.<org.apache.regexp.RE: boolean match(java.lang.String)>("a\rb");

        if $z15 == 0 goto label24;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"a\\rb\" matches \"^a.*b$\"");

     label24:
        $z16 = virtualinvoke $r18.<org.apache.regexp.RE: boolean match(java.lang.String)>("a\r\nb");

        if $z16 == 0 goto label25;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"a\\r\\nb\" matches \"^a.*b$\"");

     label25:
        $z17 = virtualinvoke $r18.<org.apache.regexp.RE: boolean match(java.lang.String)>("a\u0085b");

        if $z17 == 0 goto label26;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"a\\u0085b\" matches \"^a.*b$\"");

     label26:
        $z18 = virtualinvoke $r18.<org.apache.regexp.RE: boolean match(java.lang.String)>("a\u2028b");

        if $z18 == 0 goto label27;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"a\\u2028b\" matches \"^a.*b$\"");

     label27:
        $z19 = virtualinvoke $r18.<org.apache.regexp.RE: boolean match(java.lang.String)>("a\u2029b");

        if $z19 == 0 goto label28;

        virtualinvoke r1.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"a\\u2029b\" matches \"^a.*b$\"");

     label28:
        return;
    }

    private void testPrecompiledRE()
    {
        org.apache.regexp.RETest r3;
        org.apache.regexp.RE $r2;
        java.lang.StringBuffer $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r13, $r14, $r16, $r17, $r18;
        java.lang.String $r7, $r11, $r15, $r19;
        boolean $z0, $z1, $z2, $z3;
        org.apache.regexp.REProgram $r1;
        char[] $r0;

        r3 := @this: org.apache.regexp.RETest;

        $r0 = newarray (char)[29];

        $r0[0] = 124;

        $r0[1] = 0;

        $r0[2] = 26;

        $r0[3] = 124;

        $r0[4] = 0;

        $r0[5] = 13;

        $r0[6] = 65;

        $r0[7] = 1;

        $r0[8] = 4;

        $r0[9] = 97;

        $r0[10] = 124;

        $r0[11] = 0;

        $r0[12] = 3;

        $r0[13] = 71;

        $r0[14] = 0;

        $r0[15] = 65526;

        $r0[16] = 124;

        $r0[17] = 0;

        $r0[18] = 3;

        $r0[19] = 78;

        $r0[20] = 0;

        $r0[21] = 3;

        $r0[22] = 65;

        $r0[23] = 1;

        $r0[24] = 4;

        $r0[25] = 98;

        $r0[26] = 69;

        $r0[27] = 0;

        $r0[28] = 0;

        $r1 = new org.apache.regexp.REProgram;

        specialinvoke $r1.<org.apache.regexp.REProgram: void <init>(char[])>($r0);

        $r2 = new org.apache.regexp.RE;

        specialinvoke $r2.<org.apache.regexp.RE: void <init>(org.apache.regexp.REProgram)>($r1);

        virtualinvoke r3.<org.apache.regexp.RETest: void say(java.lang.String)>("a*b");

        $z0 = virtualinvoke $r2.<org.apache.regexp.RE: boolean match(java.lang.String)>("aaab");

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("aaab = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<org.apache.regexp.RETest: void say(java.lang.String)>($r7);

        virtualinvoke r3.<org.apache.regexp.RETest: void showParens(org.apache.regexp.RE)>($r2);

        if $z0 != 0 goto label1;

        virtualinvoke r3.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"aaab\" doesn\'t match to precompiled \"a*b\"");

     label1:
        $z1 = virtualinvoke $r2.<org.apache.regexp.RE: boolean match(java.lang.String)>("b");

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("b = ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<org.apache.regexp.RETest: void say(java.lang.String)>($r11);

        virtualinvoke r3.<org.apache.regexp.RETest: void showParens(org.apache.regexp.RE)>($r2);

        if $z1 != 0 goto label2;

        virtualinvoke r3.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"b\" doesn\'t match to precompiled \"a*b\"");

     label2:
        $z2 = virtualinvoke $r2.<org.apache.regexp.RE: boolean match(java.lang.String)>("c");

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("c = ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<org.apache.regexp.RETest: void say(java.lang.String)>($r15);

        virtualinvoke r3.<org.apache.regexp.RETest: void showParens(org.apache.regexp.RE)>($r2);

        if $z2 == 0 goto label3;

        virtualinvoke r3.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"c\" matches to precompiled \"a*b\"");

     label3:
        $z3 = virtualinvoke $r2.<org.apache.regexp.RE: boolean match(java.lang.String)>("ccccaaaaab");

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ccccaaaaab = ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(boolean)>($z3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<org.apache.regexp.RETest: void say(java.lang.String)>($r19);

        virtualinvoke r3.<org.apache.regexp.RETest: void showParens(org.apache.regexp.RE)>($r2);

        if $z3 != 0 goto label4;

        virtualinvoke r3.<org.apache.regexp.RETest: void fail(java.lang.String)>("\"ccccaaaaab\" doesn\'t match to precompiled \"a*b\"");

     label4:
        return;
    }

    private void testSplitAndGrep()
    {
        org.apache.regexp.RETest r3;
        java.lang.String[] $r0, $r2, $r5, $r6;
        org.apache.regexp.RE $r1, $r4;
        java.lang.StringBuffer $r7, $r8, $r9, $r10, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.String $r11, $r13, $r14, $r15, $r16, $r17;

        r3 := @this: org.apache.regexp.RETest;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "xxxx";

        $r0[1] = "xxxx";

        $r0[2] = "yyyy";

        $r0[3] = "zzz";

        $r1 = new org.apache.regexp.RE;

        specialinvoke $r1.<org.apache.regexp.RE: void <init>(java.lang.String)>("a*b");

        $r2 = virtualinvoke $r1.<org.apache.regexp.RE: java.lang.String[] split(java.lang.String)>("xxxxaabxxxxbyyyyaaabzzz");

        i7 = 0;

        goto label2;

     label1:
        $r17 = $r0[i7];

        $r16 = $r2[i7];

        virtualinvoke r3.<org.apache.regexp.RETest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Wrong splitted part", $r17, $r16);

        i7 = i7 + 1;

     label2:
        $i0 = lengthof $r0;

        if i7 >= $i0 goto label3;

        $i6 = lengthof $r2;

        if i7 < $i6 goto label1;

     label3:
        $i2 = lengthof $r0;

        $i1 = lengthof $r2;

        virtualinvoke r3.<org.apache.regexp.RETest: void assertEquals(java.lang.String,int,int)>("Wrong number of splitted parts", $i2, $i1);

        $r4 = new org.apache.regexp.RE;

        specialinvoke $r4.<org.apache.regexp.RE: void <init>(java.lang.String)>("x+");

        $r5 = newarray (java.lang.String)[2];

        $r5[0] = "xxxx";

        $r5[1] = "xxxx";

        $r6 = virtualinvoke $r4.<org.apache.regexp.RE: java.lang.String[] grep(java.lang.Object[])>($r2);

        i8 = 0;

        goto label5;

     label4:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("s[");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] = ");

        $r11 = $r6[i8];

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<org.apache.regexp.RETest: void say(java.lang.String)>($r13);

        $r15 = $r5[i8];

        $r14 = $r6[i8];

        virtualinvoke r3.<org.apache.regexp.RETest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Grep fails", $r15, $r14);

        i8 = i8 + 1;

     label5:
        $i3 = lengthof $r6;

        if i8 < $i3 goto label4;

        $i5 = lengthof $r5;

        $i4 = lengthof $r6;

        virtualinvoke r3.<org.apache.regexp.RETest: void assertEquals(java.lang.String,int,int)>("Wrong number of string found by grep", $i5, $i4);

        return;
    }

    private void testSubst()
    {
        org.apache.regexp.RETest r2;
        org.apache.regexp.RE $r0, $r3, $r5, $r7, $r9, $r11;
        java.lang.String $r1, $r4, $r6, $r8, $r10, $r12;

        r2 := @this: org.apache.regexp.RETest;

        $r0 = new org.apache.regexp.RE;

        specialinvoke $r0.<org.apache.regexp.RE: void <init>(java.lang.String)>("a*b");

        $r1 = virtualinvoke $r0.<org.apache.regexp.RE: java.lang.String subst(java.lang.String,java.lang.String)>("aaaabfooaaabgarplyaaabwackyb", "-");

        virtualinvoke r2.<org.apache.regexp.RETest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Wrong result of substitution in \"a*b\"", "-foo-garply-wacky-", $r1);

        $r3 = new org.apache.regexp.RE;

        specialinvoke $r3.<org.apache.regexp.RE: void <init>(java.lang.String)>("http://[\\.\\w\\-\\?/~_@&=%]+");

        $r4 = virtualinvoke $r3.<org.apache.regexp.RE: java.lang.String subst(java.lang.String,java.lang.String,int)>("visit us: http://www.apache.org!", "1234<a href=\"$0\">$0</a>", 2);

        virtualinvoke r2.<org.apache.regexp.RETest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Wrong subst() result", "visit us: 1234<a href=\"http://www.apache.org\">http://www.apache.org</a>!", $r4);

        $r5 = new org.apache.regexp.RE;

        specialinvoke $r5.<org.apache.regexp.RE: void <init>(java.lang.String)>("(.*?)=(.*)");

        $r6 = virtualinvoke $r5.<org.apache.regexp.RE: java.lang.String subst(java.lang.String,java.lang.String,int)>("variable=value", "$1_test_$212", 2);

        virtualinvoke r2.<org.apache.regexp.RETest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Wrong subst() result", "variable_test_value12", $r6);

        $r7 = new org.apache.regexp.RE;

        specialinvoke $r7.<org.apache.regexp.RE: void <init>(java.lang.String)>("^a$");

        $r8 = virtualinvoke $r7.<org.apache.regexp.RE: java.lang.String subst(java.lang.String,java.lang.String,int)>("a", "b", 2);

        virtualinvoke r2.<org.apache.regexp.RETest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Wrong subst() result", "b", $r8);

        $r9 = new org.apache.regexp.RE;

        specialinvoke $r9.<org.apache.regexp.RE: void <init>(java.lang.String,int)>("^a$", 2);

        $r10 = virtualinvoke $r9.<org.apache.regexp.RE: java.lang.String subst(java.lang.String,java.lang.String,int)>("\r\na\r\n", "b", 2);

        virtualinvoke r2.<org.apache.regexp.RETest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Wrong subst() result", "\r\nb\r\n", $r10);

        $r11 = new org.apache.regexp.RE;

        specialinvoke $r11.<org.apache.regexp.RE: void <init>(java.lang.String)>("fo(o)");

        $r12 = virtualinvoke $r11.<org.apache.regexp.RE: java.lang.String subst(java.lang.String,java.lang.String,int)>("foo", "$1", 2);

        virtualinvoke r2.<org.apache.regexp.RETest: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>("Wrong subst() result", "o", $r12);

        return;
    }

    public void assertEquals(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.regexp.RETest r2;
        java.lang.StringBuffer $r3, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.String r0, r1, r4, $r11;
        boolean $z0, $z1;

        r2 := @this: org.apache.regexp.RETest;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

     label1:
        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label3;

     label2:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (expected \"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\", actual \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\")");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.regexp.RETest: void fail(java.lang.String)>($r11);

     label3:
        return;
    }

    public void assertEquals(java.lang.String, int, int)
    {
        org.apache.regexp.RETest r0;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r7, $r8;
        int i0, i1;
        java.lang.String r2, $r9;

        r0 := @this: org.apache.regexp.RETest;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 == i1 goto label1;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (expected \"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\", actual \"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.regexp.RETest: void fail(java.lang.String)>($r9);

     label1:
        return;
    }

    private boolean getExpectedResult(java.lang.String)
    {
        org.apache.regexp.RETest r3;
        java.lang.String r0, $r1, $r2;
        boolean $z0, $z1;

        r3 := @this: org.apache.regexp.RETest;

        r0 := @parameter0: java.lang.String;

        $r1 = "NO";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r2 = "YES";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        virtualinvoke r3.<org.apache.regexp.RETest: void die(java.lang.String)>("Test script error!");

        return 0;
    }

    private java.lang.String findNextTest(java.io.BufferedReader) throws java.io.IOException
    {
        org.apache.regexp.RETest r3;
        java.lang.StringBuffer $r5, $r6, $r9;
        int $i1;
        java.io.BufferedReader r0;
        java.lang.String $r1, $r2, $r7, r8;
        boolean $z0, $z1, $z2;

        r3 := @this: org.apache.regexp.RETest;

        r0 := @parameter0: java.io.BufferedReader;

        r8 = "";

        goto label4;

     label1:
        $r1 = virtualinvoke r0.<java.io.BufferedReader: java.lang.String readLine()>();

        r8 = $r1;

        if $r1 != null goto label2;

        goto label5;

     label2:
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        r8 = $r2;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z0 == 0 goto label3;

        goto label5;

     label3:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label4;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Script error.  Line = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r3.<org.apache.regexp.RETest: void say(java.lang.String)>($r7);

        $i1 = (int) -1;

        staticinvoke <java.lang.System: void exit(int)>($i1);

     label4:
        $z2 = virtualinvoke r0.<java.io.BufferedReader: boolean ready()>();

        if $z2 != 0 goto label1;

     label5:
        return r8;
    }

    private org.apache.regexp.RETestCase getNextTestCase(java.io.BufferedReader) throws java.io.IOException
    {
        org.apache.regexp.RETest r0;
        java.lang.String[] r11;
        int $i0, i1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, z3;
        org.apache.regexp.RETestCase $r12;
        java.io.BufferedReader r1;

        r0 := @this: org.apache.regexp.RETest;

        r1 := @parameter0: java.io.BufferedReader;

        $r2 = specialinvoke r0.<org.apache.regexp.RETest: java.lang.String findNextTest(java.io.BufferedReader)>(r1);

        $z0 = virtualinvoke r1.<java.io.BufferedReader: boolean ready()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

        $r4 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

        $r5 = "ERR";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        z3 = 0;

        r11 = null;

        if $z1 != 0 goto label4;

        $r6 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String trim()>();

        $z2 = specialinvoke r0.<org.apache.regexp.RETest: boolean getExpectedResult(java.lang.String)>($r7);

        z3 = $z2;

        if $z2 == 0 goto label4;

        $r8 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        r11 = newarray (java.lang.String)[$i0];

        i1 = 0;

        goto label3;

     label2:
        $r10 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>();

        r11[i1] = $r10;

        i1 = i1 + 1;

     label3:
        if i1 < $i0 goto label2;

     label4:
        $r12 = new org.apache.regexp.RETestCase;

        specialinvoke $r12.<org.apache.regexp.RETestCase: void <init>(org.apache.regexp.RETest,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,java.lang.String[])>(r0, $r2, $r3, $r4, $z1, z3, r11);

        return $r12;
    }

    static void <clinit>()
    {
        java.lang.String $r0;

        <org.apache.regexp.RETest: boolean showSuccesses> = 0;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        <org.apache.regexp.RETest: java.lang.String NEW_LINE> = $r0;

        return;
    }
}
