final class org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler extends org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler
{
    private static final java.lang.String DEFINITION_TYPE_NAME;
    private static final java.lang.String ROOT_TYPE_NAME;
    private final java.util.Map definitions;
    private java.lang.String root;

    private void <init>()
    {
        java.util.TreeMap $r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler: void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1)>(null);

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: java.util.Map definitions> = $r1;

        return;
    }

    org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler pushHandler(java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler $r10;
        java.lang.String r0, $r5, $r7, $r9, $r12;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r1, $r11;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$DefinitionHandler $r13;
        org.waveprotocol.wave.model.document.operation.Attributes r8;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler r6;
        java.lang.StringBuilder $r2, $r3, $r4;

        r6 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler;

        r0 := @parameter0: java.lang.String;

        r8 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("definition");

        if $z0 == 0 goto label1;

        $r12 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: java.lang.String access$100(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>("definition", r8);

        $r13 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$DefinitionHandler;

        specialinvoke $r13.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$DefinitionHandler: void <init>(java.lang.String,org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler)>($r12, r6);

        return $r13;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("root");

        if $z1 == 0 goto label3;

        $r7 = r6.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: java.lang.String root>;

        if $r7 == null goto label2;

        $r11 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        specialinvoke $r11.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>("More than one declaration of root");

        throw $r11;

     label2:
        $r9 = staticinvoke <org.waveprotocol.wave.model.experimental.schema.SchemaFactory: java.lang.String access$100(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>("root", r8);

        r6.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: java.lang.String root> = $r9;

        $r10 = new org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler;

        specialinvoke $r10.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$EmptyHandler: void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler)>(r6);

        return $r10;

     label3:
        $r1 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized element type: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    org.waveprotocol.wave.model.experimental.schema.SchemaFactory$Handler popHandler()
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler;

        return null;
    }

    void registerDefinition(java.lang.String, org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment) throws org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException
    {
        org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException $r5;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler r0;
        java.util.Map $r2, $r4;
        org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment r3;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String r1, $r9;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.experimental.schema.IntermediateSchemaFragment;

        $r2 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: java.util.Map definitions>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r5 = new org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate definition for: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.waveprotocol.wave.model.experimental.schema.InvalidSchemaException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label1:
        $r4 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: java.util.Map definitions>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        return;
    }

    void <init>(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1)
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1 r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler r0;

        r0 := @this: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler;

        r1 := @parameter0: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$1;

        specialinvoke r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: void <init>()>();

        return;
    }

    static java.lang.String access$800(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler)
    {
        java.lang.String $r1;
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler r0;

        r0 := @parameter0: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler;

        $r1 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: java.lang.String root>;

        return $r1;
    }

    static java.util.Map access$900(org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler)
    {
        org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler r0;
        java.util.Map $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler;

        $r1 = r0.<org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: java.util.Map definitions>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: java.lang.String ROOT_TYPE_NAME> = "root";

        <org.waveprotocol.wave.model.experimental.schema.SchemaFactory$BaseHandler: java.lang.String DEFINITION_TYPE_NAME> = "definition";

        return;
    }
}
