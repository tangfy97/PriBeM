public class org.apache.xmlbeans.impl.schema.StscResolver extends java.lang.Object
{
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$schema$StscResolver;

    public void <init>()
    {
        org.apache.xmlbeans.impl.schema.StscResolver r0;

        r0 := @this: org.apache.xmlbeans.impl.schema.StscResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void resolveAll()
    {
        org.apache.xmlbeans.SchemaType[] $r1, $r3, $r5, $r7, $r9, $r14;
        java.util.ArrayList $r2;
        org.apache.xmlbeans.impl.schema.StscState $r0;
        int $i0, $i1, i2, i3;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl $r13, $r17;
        org.apache.xmlbeans.SchemaType r12, $r16;
        java.util.List $r4, $r6, $r8, $r10, $r15;
        java.lang.Object $r11;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r1 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaType[] documentTypes()>();

        i2 = 0;

     label1:
        $i0 = lengthof $r1;

        if i2 >= $i0 goto label2;

        $r16 = $r1[i2];

        $r17 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) $r16;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: boolean resolveSubstitutionGroup(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r17);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaType[] documentTypes()>();

        $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r3);

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r5 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaType[] attributeTypes()>();

        $r6 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaType[] redefinedGlobalTypes()>();

        $r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r7);

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        $r9 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.SchemaType[] globalTypes()>();

        $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9);

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r10);

        i3 = 0;

     label3:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i3 >= $i1 goto label4;

        $r11 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i3);

        r12 = (org.apache.xmlbeans.SchemaType) $r11;

        $r13 = (org.apache.xmlbeans.impl.schema.SchemaTypeImpl) r12;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: boolean resolveType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r13);

        $r14 = interfaceinvoke r12.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType[] getAnonymousTypes()>();

        $r15 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14);

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r15);

        i3 = i3 + 1;

        goto label3;

     label4:
        staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: void resolveIdentityConstraints()>();

        return;
    }

    public static boolean resolveType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.impl.schema.StscState $r1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0;
        org.apache.xmlbeans.XmlObject $r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isResolved()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isResolving()>();

        if $z1 == 0 goto label2;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        virtualinvoke $r1.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Cyclic dependency error", 13, $r2);

        return 0;

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void startResolving()>();

        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isDocumentType()>();

        if $z2 == 0 goto label3;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: void resolveDocumentType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

        goto label6;

     label3:
        $z3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isAttributeType()>();

        if $z3 == 0 goto label4;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: void resolveAttributeType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

        goto label6;

     label4:
        $z4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSimpleType()>();

        if $z4 == 0 goto label5;

        staticinvoke <org.apache.xmlbeans.impl.schema.StscSimpleTypeResolver: void resolveSimpleType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

        goto label6;

     label5:
        staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: void resolveComplexType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>(r0);

     label6:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void finishResolving()>();

        return 1;
    }

    public static boolean resolveSubstitutionGroup(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.XmlQName $r25;
        org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement r2;
        org.apache.xmlbeans.impl.schema.StscState $r7, $r17, $r23, $r26;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r0, $r10, $r21, r29;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        javax.xml.namespace.QName $r3, $r6, $r8, $r14, $r18, $r22, $r24;
        java.lang.AssertionError $r11, $r28;
        java.lang.StringBuffer $r12, $r13, $r15;
        org.apache.xmlbeans.XmlObject $r1, $r27;
        java.lang.String $r4, $r5, $r9, $r16, $r19, $r20;

        r0 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = <org.apache.xmlbeans.impl.schema.StscResolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z7 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isDocumentType()>();

        if $z7 != 0 goto label1;

        $r28 = new java.lang.AssertionError;

        specialinvoke $r28.<java.lang.AssertionError: void <init>()>();

        throw $r28;

     label1:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSGResolved()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isSGResolving()>();

        if $z2 == 0 goto label3;

        $r26 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r27 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        virtualinvoke $r26.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,int,org.apache.xmlbeans.XmlObject)>("Cyclic dependency error", 13, $r27);

        return 0;

     label3:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void startResolvingSGs()>();

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        r2 = (org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement) $r1;

        r29 = null;

        $r3 = new javax.xml.namespace.QName;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        $r5 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: java.lang.String getName()>();

        specialinvoke $r3.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r4, $r5);

        $z3 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: boolean isSetSubstitutionGroup()>();

        if $z3 == 0 goto label6;

        $r17 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r18 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: javax.xml.namespace.QName getSubstitutionGroup()>();

        $r19 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        $r20 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        $r21 = virtualinvoke $r17.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findDocumentType(javax.xml.namespace.QName,java.lang.String,java.lang.String)>($r18, $r19, $r20);

        r29 = $r21;

        if $r21 != null goto label4;

        $r23 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r24 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: javax.xml.namespace.QName getSubstitutionGroup()>();

        $r25 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: org.apache.xmlbeans.XmlQName xgetSubstitutionGroup()>();

        virtualinvoke $r23.<org.apache.xmlbeans.impl.schema.StscState: void notFoundError(javax.xml.namespace.QName,int,org.apache.xmlbeans.XmlObject,boolean)>($r24, 1, $r25, 1);

        goto label6;

     label4:
        $z6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: boolean resolveSubstitutionGroup(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r21);

        if $z6 != 0 goto label5;

        r29 = null;

        goto label6;

     label5:
        $r22 = interfaceinvoke r2.<org.apache.xmlbeans.impl.xb.xsdschema.TopLevelElement: javax.xml.namespace.QName getSubstitutionGroup()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setSubstitutionGroup(javax.xml.namespace.QName)>($r22);

     label6:
        if r29 == null goto label9;

        virtualinvoke r29.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void addSubstitutionGroupMember(javax.xml.namespace.QName)>($r3);

        $r6 = virtualinvoke r29.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getSubstitutionGroup()>();

        if $r6 != null goto label7;

        goto label9;

     label7:
        $r7 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r8 = virtualinvoke r29.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getSubstitutionGroup()>();

        $r9 = virtualinvoke r29.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getChameleonNamespace()>();

        $r10 = virtualinvoke $r7.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findDocumentType(javax.xml.namespace.QName,java.lang.String,java.lang.String)>($r8, $r9, null);

        r29 = $r10;

        $z4 = <org.apache.xmlbeans.impl.schema.StscResolver: boolean $assertionsDisabled>;

        if $z4 != 0 goto label8;

        if $r10 != null goto label8;

        $r11 = new java.lang.AssertionError;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not find document type for: ");

        $r14 = virtualinvoke $r10.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getSubstitutionGroup()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r11;

     label8:
        $z5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: boolean resolveSubstitutionGroup(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)>($r10);

        if $z5 != 0 goto label6;

        r29 = null;

        goto label6;

     label9:
        virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void finishResolvingSGs()>();

        return 1;
    }

    public static void resolveDocumentType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl $r22;
        org.apache.xmlbeans.QNameSet $r14, $r24, $r25;
        org.apache.xmlbeans.impl.schema.StscState $r8, $r10;
        org.apache.xmlbeans.impl.xb.xsdschema.Element $r3;
        java.util.Map $r6, $r23;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r1, $r19;
        java.math.BigInteger $r12, $r13;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.xmlbeans.impl.schema.SchemaGlobalElementImpl $r15;
        javax.xml.namespace.QName $r7, $r9;
        org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl $r5, $r11, r18;
        java.lang.AssertionError $r16, $r17;
        java.util.ArrayList $r0;
        org.apache.xmlbeans.SchemaType$Ref $r21;
        int $i0, $i1;
        org.apache.xmlbeans.XmlObject $r2;
        java.lang.String $r4, $r20;
        org.apache.xmlbeans.SchemaType$Ref[] $r26;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = <org.apache.xmlbeans.impl.schema.StscResolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z5 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isResolving()>();

        if $z5 != 0 goto label1;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label1:
        $z1 = <org.apache.xmlbeans.impl.schema.StscResolver: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z4 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isDocumentType()>();

        if $z4 != 0 goto label2;

        $r16 = new java.lang.AssertionError;

        specialinvoke $r16.<java.lang.AssertionError: void <init>()>();

        throw $r16;

     label2:
        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        $r3 = (org.apache.xmlbeans.impl.xb.xsdschema.Element) $r2;

        $r4 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        $z2 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isChameleon()>();

        $r5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscTranslator: org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl translateElement(org.apache.xmlbeans.impl.xb.xsdschema.Element,java.lang.String,boolean,java.lang.String,java.lang.String,java.util.List,org.apache.xmlbeans.SchemaType)>($r3, $r4, $z2, null, null, $r0, r1);

        $r15 = (org.apache.xmlbeans.impl.schema.SchemaGlobalElementImpl) $r5;

        r18 = null;

        if $r15 == null goto label3;

        $r10 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        virtualinvoke $r10.<org.apache.xmlbeans.impl.schema.StscState: void addGlobalElement(org.apache.xmlbeans.impl.schema.SchemaGlobalElementImpl)>($r15);

        $r11 = new org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl;

        specialinvoke $r11.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: void <init>()>();

        r18 = $r11;

        virtualinvoke $r11.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: void setParticleType(int)>(4);

        staticinvoke <org.apache.xmlbeans.impl.schema.StscTranslator: void copyGlobalElementToLocalElement(org.apache.xmlbeans.SchemaGlobalElement,org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl)>($r15, $r11);

        $r12 = <java.math.BigInteger: java.math.BigInteger ONE>;

        virtualinvoke $r11.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: void setMinOccurs(java.math.BigInteger)>($r12);

        $r13 = <java.math.BigInteger: java.math.BigInteger ONE>;

        virtualinvoke $r11.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: void setMaxOccurs(java.math.BigInteger)>($r13);

        $r14 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet EMPTY>;

        virtualinvoke $r11.<org.apache.xmlbeans.impl.schema.SchemaLocalElementImpl: void setTransitionNotes(org.apache.xmlbeans.QNameSet,boolean)>($r14, 1);

     label3:
        $r6 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map buildContentPropertyModelByQName(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaType)>(r18, r1);

        $r7 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getSubstitutionGroup()>();

        if $r7 != null goto label4;

        $r19 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_TYPE>;

        goto label7;

     label4:
        $r8 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r9 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: javax.xml.namespace.QName getSubstitutionGroup()>();

        $z3 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isChameleon()>();

        if $z3 == 0 goto label5;

        $r20 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        goto label6;

     label5:
        $r20 = null;

     label6:
        $r19 = virtualinvoke $r8.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaTypeImpl findDocumentType(javax.xml.namespace.QName,java.lang.String,java.lang.String)>($r9, $r20, null);

     label7:
        $r21 = virtualinvoke $r19.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r21);

        $i0 = virtualinvoke $r19.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i1 = $i0 + 1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseDepth(int)>($i1);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setDerivationType(int)>(1);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setComplexTypeVariety(int)>(3);

        $r22 = new org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl;

        specialinvoke $r22.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void <init>()>();

        $r23 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setContentModel(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaAttributeModel,java.util.Map,java.util.Map,boolean)>(r18, $r22, $r6, $r23, 0);

        $r24 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet EMPTY>;

        $r25 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet EMPTY>;

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setWildcardSummary(org.apache.xmlbeans.QNameSet,boolean,org.apache.xmlbeans.QNameSet,boolean)>($r24, 0, $r25, 0);

        $r26 = staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)>($r0);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setAnonymousTypeRefs(org.apache.xmlbeans.SchemaType$Ref[])>($r26);

        return;
    }

    public static void resolveAttributeType(org.apache.xmlbeans.impl.schema.SchemaTypeImpl)
    {
        org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl $r6;
        org.apache.xmlbeans.impl.schema.SchemaLocalAttributeImpl $r5, $r15;
        java.lang.AssertionError $r17, $r18;
        java.util.ArrayList $r0;
        org.apache.xmlbeans.QNameSet $r11, $r12;
        org.apache.xmlbeans.impl.schema.StscState $r14;
        org.apache.xmlbeans.SchemaType$Ref $r8;
        java.util.Map $r9, $r10;
        int $i0, $i1;
        org.apache.xmlbeans.impl.schema.SchemaTypeImpl r1, $r7;
        org.apache.xmlbeans.XmlObject $r2;
        java.lang.String $r4;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.xmlbeans.impl.xb.xsdschema.Attribute $r3;
        org.apache.xmlbeans.impl.schema.SchemaGlobalAttributeImpl $r16;
        org.apache.xmlbeans.SchemaType$Ref[] $r13;

        r1 := @parameter0: org.apache.xmlbeans.impl.schema.SchemaTypeImpl;

        $z0 = <org.apache.xmlbeans.impl.schema.StscResolver: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z4 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isResolving()>();

        if $z4 != 0 goto label1;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label1:
        $z1 = <org.apache.xmlbeans.impl.schema.StscResolver: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $z3 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isAttributeType()>();

        if $z3 != 0 goto label2;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label2:
        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        $r3 = (org.apache.xmlbeans.impl.xb.xsdschema.Attribute) $r2;

        $r4 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: java.lang.String getTargetNamespace()>();

        $z2 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: boolean isChameleon()>();

        $r5 = staticinvoke <org.apache.xmlbeans.impl.schema.StscTranslator: org.apache.xmlbeans.impl.schema.SchemaLocalAttributeImpl translateAttribute(org.apache.xmlbeans.impl.xb.xsdschema.Attribute,java.lang.String,java.lang.String,boolean,java.util.List,org.apache.xmlbeans.SchemaType,org.apache.xmlbeans.SchemaAttributeModel,boolean)>($r3, $r4, null, $z2, $r0, r1, null, 0);

        $r16 = (org.apache.xmlbeans.impl.schema.SchemaGlobalAttributeImpl) $r5;

        $r6 = new org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl;

        specialinvoke $r6.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void <init>()>();

        if $r16 == null goto label3;

        $r14 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        virtualinvoke $r14.<org.apache.xmlbeans.impl.schema.StscState: void addGlobalAttribute(org.apache.xmlbeans.impl.schema.SchemaGlobalAttributeImpl)>($r16);

        $r15 = new org.apache.xmlbeans.impl.schema.SchemaLocalAttributeImpl;

        specialinvoke $r15.<org.apache.xmlbeans.impl.schema.SchemaLocalAttributeImpl: void <init>()>();

        staticinvoke <org.apache.xmlbeans.impl.schema.StscTranslator: void copyGlobalAttributeToLocalAttribute(org.apache.xmlbeans.impl.schema.SchemaGlobalAttributeImpl,org.apache.xmlbeans.impl.schema.SchemaLocalAttributeImpl)>($r16, $r15);

        virtualinvoke $r6.<org.apache.xmlbeans.impl.schema.SchemaAttributeModelImpl: void addAttribute(org.apache.xmlbeans.SchemaLocalAttribute)>($r15);

     label3:
        $r7 = <org.apache.xmlbeans.impl.schema.BuiltinSchemaTypeSystem: org.apache.xmlbeans.impl.schema.SchemaTypeImpl ST_ANY_TYPE>;

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseTypeRef(org.apache.xmlbeans.SchemaType$Ref)>($r8);

        $i0 = virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: int getBaseDepth()>();

        $i1 = $i0 + 1;

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setBaseDepth(int)>($i1);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setDerivationType(int)>(1);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setComplexTypeVariety(int)>(1);

        $r9 = staticinvoke <org.apache.xmlbeans.impl.schema.StscComplexTypeResolver: java.util.Map buildAttributePropertyModelByQName(org.apache.xmlbeans.SchemaAttributeModel,org.apache.xmlbeans.SchemaType)>($r6, r1);

        $r10 = <java.util.Collections: java.util.Map EMPTY_MAP>;

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setContentModel(org.apache.xmlbeans.SchemaParticle,org.apache.xmlbeans.SchemaAttributeModel,java.util.Map,java.util.Map,boolean)>(null, $r6, $r10, $r9, 0);

        $r12 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet EMPTY>;

        $r11 = <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet EMPTY>;

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setWildcardSummary(org.apache.xmlbeans.QNameSet,boolean,org.apache.xmlbeans.QNameSet,boolean)>($r12, 0, $r11, 0);

        $r13 = staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)>($r0);

        virtualinvoke r1.<org.apache.xmlbeans.impl.schema.SchemaTypeImpl: void setAnonymousTypeRefs(org.apache.xmlbeans.SchemaType$Ref[])>($r13);

        return;
    }

    private static org.apache.xmlbeans.SchemaType$Ref[] makeRefArray(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        org.apache.xmlbeans.SchemaType$Ref $r5;
        int $i0, i1;
        org.apache.xmlbeans.SchemaType$Ref[] r1;
        java.lang.Object $r3;
        org.apache.xmlbeans.SchemaType $r4;
        boolean $z0;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (org.apache.xmlbeans.SchemaType$Ref)[$i0];

        i1 = 0;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.apache.xmlbeans.SchemaType) $r3;

        $r5 = interfaceinvoke $r4.<org.apache.xmlbeans.SchemaType: org.apache.xmlbeans.SchemaType$Ref getRef()>();

        r1[i1] = $r5;

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static void resolveIdentityConstraints()
    {
        org.apache.xmlbeans.impl.xb.xsdschema.KeyrefDocument$Keyref r5;
        org.apache.xmlbeans.SchemaIdentityConstraint$Ref $r16;
        java.lang.String[] $r12, $r14;
        org.apache.xmlbeans.impl.schema.StscState $r0;
        org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl $r2, $r3, $r7, $r9, $r11, $r13, $r15, $r17, $r19;
        int $i0, $i1, $i2, $i3, i4;
        org.apache.xmlbeans.XmlObject $r4, $r18, $r20;
        java.lang.String $r8, $r10;
        boolean $z0;
        org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl[] $r1;
        javax.xml.namespace.QName $r6;

        $r0 = staticinvoke <org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.StscState get()>();

        $r1 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl[] idConstraints()>();

        i4 = 0;

     label1:
        $i0 = lengthof $r1;

        if i4 >= $i0 goto label6;

        $r2 = $r1[i4];

        $z0 = virtualinvoke $r2.<org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl: boolean isResolved()>();

        if $z0 != 0 goto label5;

        $r3 = $r1[i4];

        $r4 = virtualinvoke $r3.<org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        r5 = (org.apache.xmlbeans.impl.xb.xsdschema.KeyrefDocument$Keyref) $r4;

        $r6 = interfaceinvoke r5.<org.apache.xmlbeans.impl.xb.xsdschema.KeyrefDocument$Keyref: javax.xml.namespace.QName getRefer()>();

        $r7 = $r1[i4];

        $r8 = virtualinvoke $r7.<org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl: java.lang.String getChameleonNamespace()>();

        $r9 = $r1[i4];

        $r10 = virtualinvoke $r9.<org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl: java.lang.String getTargetNamespace()>();

        $r11 = virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl findIdConstraint(javax.xml.namespace.QName,java.lang.String,java.lang.String)>($r6, $r8, $r10);

        if $r11 != null goto label2;

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void notFoundError(javax.xml.namespace.QName,int,org.apache.xmlbeans.XmlObject,boolean)>($r6, 5, r5, 1);

        goto label5;

     label2:
        $i1 = virtualinvoke $r11.<org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl: int getConstraintCategory()>();

        if $i1 != 2 goto label3;

        $r19 = $r1[i4];

        $r20 = virtualinvoke $r19.<org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("c-props-correct.1", null, $r20);

     label3:
        $r12 = virtualinvoke $r11.<org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl: java.lang.String[] getFields()>();

        $i2 = lengthof $r12;

        $r13 = $r1[i4];

        $r14 = virtualinvoke $r13.<org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl: java.lang.String[] getFields()>();

        $i3 = lengthof $r14;

        if $i2 == $i3 goto label4;

        $r17 = $r1[i4];

        $r18 = virtualinvoke $r17.<org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl: org.apache.xmlbeans.XmlObject getParseObject()>();

        virtualinvoke $r0.<org.apache.xmlbeans.impl.schema.StscState: void error(java.lang.String,java.lang.Object[],org.apache.xmlbeans.XmlObject)>("c-props-correct.2", null, $r18);

     label4:
        $r15 = $r1[i4];

        $r16 = virtualinvoke $r11.<org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl: org.apache.xmlbeans.SchemaIdentityConstraint$Ref getRef()>();

        virtualinvoke $r15.<org.apache.xmlbeans.impl.schema.SchemaIdentityConstraintImpl: void setReferencedKey(org.apache.xmlbeans.SchemaIdentityConstraint$Ref)>($r16);

     label5:
        i4 = i4 + 1;

        goto label1;

     label6:
        return;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.apache.xmlbeans.impl.schema.StscResolver: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscResolver>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.apache.xmlbeans.impl.schema.StscResolver: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.schema.StscResolver");

        <org.apache.xmlbeans.impl.schema.StscResolver: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscResolver> = $r1;

        goto label2;

     label1:
        $r1 = <org.apache.xmlbeans.impl.schema.StscResolver: java.lang.Class class$org$apache$xmlbeans$impl$schema$StscResolver>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.schema.StscResolver: boolean $assertionsDisabled> = $z1;

        return;
    }
}
