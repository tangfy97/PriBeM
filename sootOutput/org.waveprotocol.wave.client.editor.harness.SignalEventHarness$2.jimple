class org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2 extends java.lang.Object implements org.waveprotocol.wave.client.common.util.DomHelper$JavaScriptEventListener
{
    final org.waveprotocol.wave.client.editor.harness.SignalEventHarness this$0;

    void <init>(org.waveprotocol.wave.client.editor.harness.SignalEventHarness)
    {
        org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2 r0;
        org.waveprotocol.wave.client.editor.harness.SignalEventHarness r1;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.harness.SignalEventHarness;

        r0.<org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2: org.waveprotocol.wave.client.editor.harness.SignalEventHarness this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onJavaScriptEvent(java.lang.String, com.google.gwt.user.client.Event)
    {
        com.google.gwt.user.client.Event r0;
        com.google.gwt.dom.client.BRElement $r38;
        org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2 r2;
        org.waveprotocol.wave.client.common.util.SignalEventImpl $r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.google.gwt.dom.client.DivElement $r36;
        org.waveprotocol.wave.client.editor.harness.SignalEventHarness $r35;
        java.lang.StringBuilder $r12, $r13, $r17, $r18, $r22, $r23, $r27, $r28, $r32, $r33, $r39, $r40, $r41, $r42, $r43;
        int $i0;
        java.lang.String r3, $r7, $r9, $r14, $r19, $r24, $r29, $r34;
        org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo $r4, $r5, $r8, $r11, $r16, $r21, $r26, $r31;
        org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType $r6;
        org.waveprotocol.wave.client.common.util.SignalEvent $r44, $r45, $r46, $r47, $r48, $r49, $r50;
        com.google.gwt.dom.client.Document $r37;
        com.google.gwt.dom.client.Node $r51;

        r2 := @this: org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2;

        r3 := @parameter0: java.lang.String;

        r0 := @parameter1: com.google.gwt.user.client.Event;

        $r1 = staticinvoke <org.waveprotocol.wave.client.common.util.SignalEventImpl: org.waveprotocol.wave.client.common.util.SignalEventImpl create(com.google.gwt.user.client.Event,boolean)>(r0, 1);

        if $r1 != null goto label1;

        return;

     label1:
        $r4 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo TYPE>;

        specialinvoke r2.<org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2: void addInfo(org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo,java.lang.String)>($r4, r3);

        $r5 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo KEYSIGNAL>;

        $r44 = (org.waveprotocol.wave.client.common.util.SignalEvent) $r1;

        $r6 = interfaceinvoke $r44.<org.waveprotocol.wave.client.common.util.SignalEvent: org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType getKeySignalType()>();

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.client.common.util.SignalEvent$KeySignalType: java.lang.String toString()>();

        specialinvoke r2.<org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2: void addInfo(org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo,java.lang.String)>($r5, $r7);

        $r8 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo KEYCODE>;

        $r45 = (org.waveprotocol.wave.client.common.util.SignalEvent) $r1;

        $i0 = interfaceinvoke $r45.<org.waveprotocol.wave.client.common.util.SignalEvent: int getKeyCode()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        specialinvoke r2.<org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2: void addInfo(org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo,java.lang.String)>($r8, $r9);

        $r11 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETSHIFT>;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r46 = (org.waveprotocol.wave.client.common.util.SignalEvent) $r1;

        $z0 = interfaceinvoke $r46.<org.waveprotocol.wave.client.common.util.SignalEvent: boolean getShiftKey()>();

        $r12 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2: void addInfo(org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo,java.lang.String)>($r11, $r14);

        $r16 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETALT>;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r47 = (org.waveprotocol.wave.client.common.util.SignalEvent) $r1;

        $z1 = interfaceinvoke $r47.<org.waveprotocol.wave.client.common.util.SignalEvent: boolean getAltKey()>();

        $r17 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2: void addInfo(org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo,java.lang.String)>($r16, $r19);

        $r21 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETCTRL>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r48 = (org.waveprotocol.wave.client.common.util.SignalEvent) $r1;

        $z2 = interfaceinvoke $r48.<org.waveprotocol.wave.client.common.util.SignalEvent: boolean getCtrlKey()>();

        $r22 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2: void addInfo(org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo,java.lang.String)>($r21, $r24);

        $r26 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETMETA>;

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r49 = (org.waveprotocol.wave.client.common.util.SignalEvent) $r1;

        $z3 = interfaceinvoke $r49.<org.waveprotocol.wave.client.common.util.SignalEvent: boolean getMetaKey()>();

        $r27 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2: void addInfo(org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo,java.lang.String)>($r26, $r29);

        $r31 = <org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo GETCOMMAND>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r50 = (org.waveprotocol.wave.client.common.util.SignalEvent) $r1;

        $z4 = interfaceinvoke $r50.<org.waveprotocol.wave.client.common.util.SignalEvent: boolean getCommandKey()>();

        $r32 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r2.<org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2: void addInfo(org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo,java.lang.String)>($r31, $r34);

        $r35 = r2.<org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2: org.waveprotocol.wave.client.editor.harness.SignalEventHarness this$0>;

        $r36 = staticinvoke <org.waveprotocol.wave.client.editor.harness.SignalEventHarness: com.google.gwt.dom.client.DivElement access$000(org.waveprotocol.wave.client.editor.harness.SignalEventHarness)>($r35);

        $r37 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r38 = virtualinvoke $r37.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.BRElement createBRElement()>();

        $r51 = (com.google.gwt.dom.client.Node) $r38;

        virtualinvoke $r36.<com.google.gwt.dom.client.DivElement: com.google.gwt.dom.client.Node appendChild(com.google.gwt.dom.client.Node)>($r51);

        return;
    }

    private void addInfo(org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo, java.lang.String)
    {
        com.google.gwt.dom.client.Text $r14;
        org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2 r5;
        java.lang.String $r3, r4, $r13;
        org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo r2;
        com.google.gwt.dom.client.SpanElement $r1;
        com.google.gwt.dom.client.DivElement $r7, $r16;
        org.waveprotocol.wave.client.editor.harness.SignalEventHarness $r6, $r15;
        java.lang.StringBuilder $r10, $r11, $r12, $r17;
        com.google.gwt.dom.client.Document $r0, $r8;
        com.google.gwt.dom.client.Node $r18, $r19;

        r5 := @this: org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2;

        r2 := @parameter0: org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo;

        r4 := @parameter1: java.lang.String;

        $r0 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r1 = virtualinvoke $r0.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.SpanElement createSpanElement()>();

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.client.editor.testtools.TestConstants$EventInfo: java.lang.String className()>();

        virtualinvoke $r1.<com.google.gwt.dom.client.SpanElement: void addClassName(java.lang.String)>($r3);

        virtualinvoke $r1.<com.google.gwt.dom.client.SpanElement: void setInnerText(java.lang.String)>(r4);

        $r6 = r5.<org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2: org.waveprotocol.wave.client.editor.harness.SignalEventHarness this$0>;

        $r7 = staticinvoke <org.waveprotocol.wave.client.editor.harness.SignalEventHarness: com.google.gwt.dom.client.DivElement access$000(org.waveprotocol.wave.client.editor.harness.SignalEventHarness)>($r6);

        $r8 = staticinvoke <com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Document get()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = virtualinvoke $r8.<com.google.gwt.dom.client.Document: com.google.gwt.dom.client.Text createTextNode(java.lang.String)>($r13);

        $r18 = (com.google.gwt.dom.client.Node) $r14;

        virtualinvoke $r7.<com.google.gwt.dom.client.DivElement: com.google.gwt.dom.client.Node appendChild(com.google.gwt.dom.client.Node)>($r18);

        $r15 = r5.<org.waveprotocol.wave.client.editor.harness.SignalEventHarness$2: org.waveprotocol.wave.client.editor.harness.SignalEventHarness this$0>;

        $r16 = staticinvoke <org.waveprotocol.wave.client.editor.harness.SignalEventHarness: com.google.gwt.dom.client.DivElement access$000(org.waveprotocol.wave.client.editor.harness.SignalEventHarness)>($r15);

        $r19 = (com.google.gwt.dom.client.Node) $r1;

        virtualinvoke $r16.<com.google.gwt.dom.client.DivElement: com.google.gwt.dom.client.Node appendChild(com.google.gwt.dom.client.Node)>($r19);

        return;
    }
}
