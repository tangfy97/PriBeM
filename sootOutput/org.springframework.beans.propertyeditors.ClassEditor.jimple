public class org.springframework.beans.propertyeditors.ClassEditor extends java.beans.PropertyEditorSupport
{
    private final java.lang.ClassLoader classLoader;

    public void <init>()
    {
        org.springframework.beans.propertyeditors.ClassEditor r0;

        r0 := @this: org.springframework.beans.propertyeditors.ClassEditor;

        specialinvoke r0.<org.springframework.beans.propertyeditors.ClassEditor: void <init>(java.lang.ClassLoader)>(null);

        return;
    }

    public void <init>(java.lang.ClassLoader)
    {
        org.springframework.beans.propertyeditors.ClassEditor r0;
        java.lang.ClassLoader r1, $r2;

        r0 := @this: org.springframework.beans.propertyeditors.ClassEditor;

        r1 := @parameter0: java.lang.ClassLoader;

        specialinvoke r0.<java.beans.PropertyEditorSupport: void <init>()>();

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

     label2:
        r0.<org.springframework.beans.propertyeditors.ClassEditor: java.lang.ClassLoader classLoader> = $r2;

        return;
    }

    public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.springframework.beans.propertyeditors.ClassEditor r1;
        java.lang.Class $r4;
        java.lang.String r0, $r2;
        java.lang.ClassLoader $r3;
        boolean $z0;

        r1 := @this: org.springframework.beans.propertyeditors.ClassEditor;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $r3 = r1.<org.springframework.beans.propertyeditors.ClassEditor: java.lang.ClassLoader classLoader>;

        $r4 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class resolveClassName(java.lang.String,java.lang.ClassLoader)>($r2, $r3);

        virtualinvoke r1.<org.springframework.beans.propertyeditors.ClassEditor: void setValue(java.lang.Object)>($r4);

        goto label2;

     label1:
        virtualinvoke r1.<org.springframework.beans.propertyeditors.ClassEditor: void setValue(java.lang.Object)>(null);

     label2:
        return;
    }

    public java.lang.String getAsText()
    {
        org.springframework.beans.propertyeditors.ClassEditor r0;
        java.lang.Object $r1;
        java.lang.Class r2;
        java.lang.String $r3;

        r0 := @this: org.springframework.beans.propertyeditors.ClassEditor;

        $r1 = virtualinvoke r0.<org.springframework.beans.propertyeditors.ClassEditor: java.lang.Object getValue()>();

        r2 = (java.lang.Class) $r1;

        if r2 == null goto label1;

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedName(java.lang.Class)>(r2);

        return $r3;

     label1:
        return "";
    }
}
