class org.waveprotocol.wave.model.account.BasicAssignment extends java.lang.Object implements org.waveprotocol.wave.model.account.MutableAssignment
{
    private final org.waveprotocol.wave.model.wave.ParticipantId participantId;
    private org.waveprotocol.wave.model.account.Role role;

    void <init>(org.waveprotocol.wave.model.account.Assignment)
    {
        org.waveprotocol.wave.model.account.BasicAssignment r0;
        org.waveprotocol.wave.model.account.Role $r3;
        org.waveprotocol.wave.model.wave.ParticipantId $r2;
        org.waveprotocol.wave.model.account.Assignment r1;

        r0 := @this: org.waveprotocol.wave.model.account.BasicAssignment;

        r1 := @parameter0: org.waveprotocol.wave.model.account.Assignment;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.account.Assignment: org.waveprotocol.wave.model.wave.ParticipantId getParticipant()>();

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.model.account.Assignment: org.waveprotocol.wave.model.account.Role getRole()>();

        specialinvoke r0.<org.waveprotocol.wave.model.account.BasicAssignment: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.account.Role)>($r2, $r3);

        return;
    }

    void <init>(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.account.Role)
    {
        org.waveprotocol.wave.model.account.Role r2;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.account.BasicAssignment r0;

        r0 := @this: org.waveprotocol.wave.model.account.BasicAssignment;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r2 := @parameter1: org.waveprotocol.wave.model.account.Role;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "Null participant id");

        r0.<org.waveprotocol.wave.model.account.BasicAssignment: org.waveprotocol.wave.model.wave.ParticipantId participantId> = r1;

        r0.<org.waveprotocol.wave.model.account.BasicAssignment: org.waveprotocol.wave.model.account.Role role> = r2;

        return;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getParticipant()
    {
        org.waveprotocol.wave.model.wave.ParticipantId $r1;
        org.waveprotocol.wave.model.account.BasicAssignment r0;

        r0 := @this: org.waveprotocol.wave.model.account.BasicAssignment;

        $r1 = r0.<org.waveprotocol.wave.model.account.BasicAssignment: org.waveprotocol.wave.model.wave.ParticipantId participantId>;

        return $r1;
    }

    public org.waveprotocol.wave.model.account.Role getRole()
    {
        org.waveprotocol.wave.model.account.Role $r1;
        org.waveprotocol.wave.model.account.BasicAssignment r0;

        r0 := @this: org.waveprotocol.wave.model.account.BasicAssignment;

        $r1 = r0.<org.waveprotocol.wave.model.account.BasicAssignment: org.waveprotocol.wave.model.account.Role role>;

        return $r1;
    }

    public void setRole(org.waveprotocol.wave.model.account.Role)
    {
        org.waveprotocol.wave.model.account.Role r1;
        org.waveprotocol.wave.model.account.BasicAssignment r0;

        r0 := @this: org.waveprotocol.wave.model.account.BasicAssignment;

        r1 := @parameter0: org.waveprotocol.wave.model.account.Role;

        r0.<org.waveprotocol.wave.model.account.BasicAssignment: org.waveprotocol.wave.model.account.Role role> = r1;

        return;
    }
}
