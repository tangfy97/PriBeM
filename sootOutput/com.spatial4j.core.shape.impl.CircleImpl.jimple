public class com.spatial4j.core.shape.impl.CircleImpl extends java.lang.Object implements com.spatial4j.core.shape.Circle
{
    protected final com.spatial4j.core.context.SpatialContext ctx;
    protected final com.spatial4j.core.shape.Point point;
    protected double radiusDEG;
    protected com.spatial4j.core.shape.Rectangle enclosingBox;
    static final boolean $assertionsDisabled;

    public void <init>(com.spatial4j.core.shape.Point, double, com.spatial4j.core.context.SpatialContext)
    {
        com.spatial4j.core.shape.impl.CircleImpl r0;
        com.spatial4j.core.distance.DistanceCalculator $r3;
        com.spatial4j.core.shape.Rectangle $r5;
        com.spatial4j.core.context.SpatialContext r1;
        com.spatial4j.core.shape.Point r2, $r4;
        double d0, $d1;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        r2 := @parameter0: com.spatial4j.core.shape.Point;

        d0 := @parameter1: double;

        r1 := @parameter2: com.spatial4j.core.context.SpatialContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.context.SpatialContext ctx> = r1;

        r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Point point> = r2;

        r0.<com.spatial4j.core.shape.impl.CircleImpl: double radiusDEG> = d0;

        $r3 = virtualinvoke r1.<com.spatial4j.core.context.SpatialContext: com.spatial4j.core.distance.DistanceCalculator getDistCalc()>();

        $r4 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Point point>;

        $d1 = r0.<com.spatial4j.core.shape.impl.CircleImpl: double radiusDEG>;

        $r5 = interfaceinvoke $r3.<com.spatial4j.core.distance.DistanceCalculator: com.spatial4j.core.shape.Rectangle calcBoxByDistFromPt(com.spatial4j.core.shape.Point,double,com.spatial4j.core.context.SpatialContext,com.spatial4j.core.shape.Rectangle)>($r4, $d1, r1, null);

        r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Rectangle enclosingBox> = $r5;

        return;
    }

    public void reset(double, double, double)
    {
        com.spatial4j.core.shape.impl.CircleImpl r0;
        com.spatial4j.core.distance.DistanceCalculator $r3;
        com.spatial4j.core.shape.Rectangle $r4, $r7;
        com.spatial4j.core.context.SpatialContext $r2, $r5;
        com.spatial4j.core.shape.Point $r1, $r6;
        double d0, d1, d2, $d3;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        d2 := @parameter2: double;

        $r1 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Point point>;

        interfaceinvoke $r1.<com.spatial4j.core.shape.Point: void reset(double,double)>(d0, d1);

        r0.<com.spatial4j.core.shape.impl.CircleImpl: double radiusDEG> = d2;

        $r2 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.context.SpatialContext ctx>;

        $r3 = virtualinvoke $r2.<com.spatial4j.core.context.SpatialContext: com.spatial4j.core.distance.DistanceCalculator getDistCalc()>();

        $r6 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Point point>;

        $d3 = r0.<com.spatial4j.core.shape.impl.CircleImpl: double radiusDEG>;

        $r5 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.context.SpatialContext ctx>;

        $r4 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Rectangle enclosingBox>;

        $r7 = interfaceinvoke $r3.<com.spatial4j.core.distance.DistanceCalculator: com.spatial4j.core.shape.Rectangle calcBoxByDistFromPt(com.spatial4j.core.shape.Point,double,com.spatial4j.core.context.SpatialContext,com.spatial4j.core.shape.Rectangle)>($r6, $d3, $r5, $r4);

        r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Rectangle enclosingBox> = $r7;

        return;
    }

    public com.spatial4j.core.shape.Point getCenter()
    {
        com.spatial4j.core.shape.Point $r1;
        com.spatial4j.core.shape.impl.CircleImpl r0;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        $r1 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Point point>;

        return $r1;
    }

    public double getRadius()
    {
        com.spatial4j.core.shape.impl.CircleImpl r0;
        double $d0;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        $d0 = r0.<com.spatial4j.core.shape.impl.CircleImpl: double radiusDEG>;

        return $d0;
    }

    public double getArea(com.spatial4j.core.context.SpatialContext)
    {
        com.spatial4j.core.distance.DistanceCalculator $r1;
        com.spatial4j.core.shape.impl.CircleImpl r2;
        com.spatial4j.core.context.SpatialContext r0;
        double $d0, $d1, $d2, $d3, $d4;

        r2 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        r0 := @parameter0: com.spatial4j.core.context.SpatialContext;

        if r0 != null goto label1;

        $d1 = r2.<com.spatial4j.core.shape.impl.CircleImpl: double radiusDEG>;

        $d3 = 3.141592653589793 * $d1;

        $d2 = r2.<com.spatial4j.core.shape.impl.CircleImpl: double radiusDEG>;

        $d4 = $d3 * $d2;

        return $d4;

     label1:
        $r1 = virtualinvoke r0.<com.spatial4j.core.context.SpatialContext: com.spatial4j.core.distance.DistanceCalculator getDistCalc()>();

        $d0 = interfaceinvoke $r1.<com.spatial4j.core.distance.DistanceCalculator: double area(com.spatial4j.core.shape.Circle)>(r2);

        return $d0;
    }

    public boolean contains(double, double)
    {
        com.spatial4j.core.shape.impl.CircleImpl r0;
        com.spatial4j.core.distance.DistanceCalculator $r2;
        com.spatial4j.core.context.SpatialContext $r1;
        byte $b0;
        com.spatial4j.core.shape.Point $r3;
        int $i1;
        double d0, d1, $d2, $d3;
        boolean $z0;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $r1 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.context.SpatialContext ctx>;

        $r2 = virtualinvoke $r1.<com.spatial4j.core.context.SpatialContext: com.spatial4j.core.distance.DistanceCalculator getDistCalc()>();

        $r3 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Point point>;

        $d2 = interfaceinvoke $r2.<com.spatial4j.core.distance.DistanceCalculator: double distance(com.spatial4j.core.shape.Point,double,double)>($r3, d0, d1);

        $d3 = r0.<com.spatial4j.core.shape.impl.CircleImpl: double radiusDEG>;

        $b0 = $d2 cmpg $d3;

        $i1 = (int) $b0;

        if $i1 > 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasArea()
    {
        com.spatial4j.core.shape.impl.CircleImpl r0;
        byte $b0;
        int $i1;
        double $d0;
        boolean $z0;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        $d0 = r0.<com.spatial4j.core.shape.impl.CircleImpl: double radiusDEG>;

        $b0 = $d0 cmpl 0.0;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.spatial4j.core.shape.Rectangle getBoundingBox()
    {
        com.spatial4j.core.shape.impl.CircleImpl r0;
        com.spatial4j.core.shape.Rectangle $r1;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        $r1 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Rectangle enclosingBox>;

        return $r1;
    }

    public com.spatial4j.core.shape.SpatialRelation relate(com.spatial4j.core.shape.Shape)
    {
        com.spatial4j.core.shape.impl.CircleImpl r1;
        com.spatial4j.core.shape.Rectangle $r6;
        com.spatial4j.core.shape.Shape r0;
        com.spatial4j.core.shape.Circle $r4;
        com.spatial4j.core.shape.Point $r8;
        com.spatial4j.core.shape.SpatialRelation $r2, $r3, $r5, $r7, $r9;
        boolean $z0, $z1, $z2;

        r1 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        r0 := @parameter0: com.spatial4j.core.shape.Shape;

        $z0 = r0 instanceof com.spatial4j.core.shape.Point;

        if $z0 == 0 goto label1;

        $r8 = (com.spatial4j.core.shape.Point) r0;

        $r9 = virtualinvoke r1.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.SpatialRelation relate(com.spatial4j.core.shape.Point)>($r8);

        return $r9;

     label1:
        $z1 = r0 instanceof com.spatial4j.core.shape.Rectangle;

        if $z1 == 0 goto label2;

        $r6 = (com.spatial4j.core.shape.Rectangle) r0;

        $r7 = virtualinvoke r1.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.SpatialRelation relate(com.spatial4j.core.shape.Rectangle)>($r6);

        return $r7;

     label2:
        $z2 = r0 instanceof com.spatial4j.core.shape.Circle;

        if $z2 == 0 goto label3;

        $r4 = (com.spatial4j.core.shape.Circle) r0;

        $r5 = virtualinvoke r1.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.SpatialRelation relate(com.spatial4j.core.shape.Circle)>($r4);

        return $r5;

     label3:
        $r2 = interfaceinvoke r0.<com.spatial4j.core.shape.Shape: com.spatial4j.core.shape.SpatialRelation relate(com.spatial4j.core.shape.Shape)>(r1);

        $r3 = virtualinvoke $r2.<com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation transpose()>();

        return $r3;
    }

    public com.spatial4j.core.shape.SpatialRelation relate(com.spatial4j.core.shape.Point)
    {
        com.spatial4j.core.shape.impl.CircleImpl r0;
        com.spatial4j.core.shape.Point r1;
        com.spatial4j.core.shape.SpatialRelation $r2;
        double $d0, $d1;
        boolean $z0;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        r1 := @parameter0: com.spatial4j.core.shape.Point;

        $d0 = interfaceinvoke r1.<com.spatial4j.core.shape.Point: double getX()>();

        $d1 = interfaceinvoke r1.<com.spatial4j.core.shape.Point: double getY()>();

        $z0 = virtualinvoke r0.<com.spatial4j.core.shape.impl.CircleImpl: boolean contains(double,double)>($d0, $d1);

        if $z0 == 0 goto label1;

        $r2 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation CONTAINS>;

        goto label2;

     label1:
        $r2 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation DISJOINT>;

     label2:
        return $r2;
    }

    public com.spatial4j.core.shape.SpatialRelation relate(com.spatial4j.core.shape.Rectangle)
    {
        com.spatial4j.core.shape.impl.CircleImpl r0;
        com.spatial4j.core.shape.Rectangle r1, $r2, $r8;
        com.spatial4j.core.shape.SpatialRelation $r3, $r4, $r5, $r6, $r7, $r9;
        boolean $z0;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        r1 := @parameter0: com.spatial4j.core.shape.Rectangle;

        $r2 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Rectangle enclosingBox>;

        $r3 = interfaceinvoke $r2.<com.spatial4j.core.shape.Rectangle: com.spatial4j.core.shape.SpatialRelation relate(com.spatial4j.core.shape.Shape)>(r1);

        $r4 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation DISJOINT>;

        if $r3 == $r4 goto label1;

        $r5 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation WITHIN>;

        if $r3 != $r5 goto label2;

     label1:
        return $r3;

     label2:
        $r6 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation CONTAINS>;

        if $r3 != $r6 goto label3;

        $r8 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Rectangle enclosingBox>;

        $z0 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r9 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation WITHIN>;

        return $r9;

     label3:
        $r7 = virtualinvoke r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.SpatialRelation relateRectanglePhase2(com.spatial4j.core.shape.Rectangle,com.spatial4j.core.shape.SpatialRelation)>(r1, $r3);

        return $r7;
    }

    protected com.spatial4j.core.shape.SpatialRelation relateRectanglePhase2(com.spatial4j.core.shape.Rectangle, com.spatial4j.core.shape.SpatialRelation)
    {
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11;
        com.spatial4j.core.shape.impl.CircleImpl r0;
        boolean $z0, $z1;
        com.spatial4j.core.shape.Rectangle r1, $r7, $r9, $r10, $r12;
        int $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21;
        com.spatial4j.core.shape.SpatialRelation r2, $r3, $r4, $r5, $r6, $r8, $r11, $r13;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, d20, $d21, $d22, d23, $d24, $d25, $d26, d27, $d28;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        r1 := @parameter0: com.spatial4j.core.shape.Rectangle;

        r2 := @parameter1: com.spatial4j.core.shape.SpatialRelation;

        $d0 = virtualinvoke r0.<com.spatial4j.core.shape.impl.CircleImpl: double getXAxis()>();

        $d1 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMinX()>();

        $b0 = $d0 cmpg $d1;

        $i12 = (int) $b0;

        if $i12 >= 0 goto label01;

        d20 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMinX()>();

        goto label03;

     label01:
        $d2 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMaxX()>();

        $b1 = $d0 cmpl $d2;

        $i13 = (int) $b1;

        if $i13 <= 0 goto label02;

        d20 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMaxX()>();

        goto label03;

     label02:
        d20 = $d0;

     label03:
        $d21 = virtualinvoke r0.<com.spatial4j.core.shape.impl.CircleImpl: double getYAxis()>();

        $d22 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMinY()>();

        $b10 = $d21 cmpg $d22;

        $i14 = (int) $b10;

        if $i14 >= 0 goto label04;

        d23 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMinY()>();

        goto label06;

     label04:
        $d3 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMaxY()>();

        $b2 = $d21 cmpl $d3;

        $i15 = (int) $b2;

        if $i15 <= 0 goto label05;

        d23 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMaxY()>();

        goto label06;

     label05:
        d23 = $d21;

     label06:
        $b11 = $d0 cmpl d20;

        if $b11 != 0 goto label10;

        $d16 = $d21 - d23;

        $d17 = staticinvoke <java.lang.Math: double abs(double)>($d16);

        $b8 = $d21 cmpg d23;

        $i16 = (int) $b8;

        if $i16 >= 0 goto label07;

        $r12 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Rectangle enclosingBox>;

        $d19 = interfaceinvoke $r12.<com.spatial4j.core.shape.Rectangle: double getMaxY()>();

        $d24 = $d19 - $d21;

        goto label08;

     label07:
        $r10 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Rectangle enclosingBox>;

        $d18 = interfaceinvoke $r10.<com.spatial4j.core.shape.Rectangle: double getMinY()>();

        $d24 = $d21 - $d18;

     label08:
        $b9 = $d17 cmpl $d24;

        $i17 = (int) $b9;

        if $i17 <= 0 goto label09;

        $r11 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation DISJOINT>;

        return $r11;

     label09:
        goto label15;

     label10:
        $b3 = $d21 cmpl d23;

        if $b3 != 0 goto label14;

        $d12 = $d0 - d20;

        $d13 = staticinvoke <java.lang.Math: double abs(double)>($d12);

        $b6 = $d0 cmpg d20;

        $i18 = (int) $b6;

        if $i18 >= 0 goto label11;

        $r9 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Rectangle enclosingBox>;

        $d15 = interfaceinvoke $r9.<com.spatial4j.core.shape.Rectangle: double getMaxX()>();

        $d25 = $d15 - $d0;

        goto label12;

     label11:
        $r7 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Rectangle enclosingBox>;

        $d14 = interfaceinvoke $r7.<com.spatial4j.core.shape.Rectangle: double getMinX()>();

        $d25 = $d0 - $d14;

     label12:
        $b7 = $d13 cmpl $d25;

        $i19 = (int) $b7;

        if $i19 <= 0 goto label13;

        $r8 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation DISJOINT>;

        return $r8;

     label13:
        goto label15;

     label14:
        $z0 = virtualinvoke r0.<com.spatial4j.core.shape.impl.CircleImpl: boolean contains(double,double)>(d20, d23);

        if $z0 != 0 goto label15;

        $r6 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation DISJOINT>;

        return $r6;

     label15:
        $r13 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation CONTAINS>;

        if r2 == $r13 goto label16;

        $r5 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation INTERSECTS>;

        return $r5;

     label16:
        $d4 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMaxX()>();

        $d5 = $d4 - $d0;

        $d6 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMinX()>();

        $d7 = $d0 - $d6;

        $b4 = $d5 cmpl $d7;

        $i20 = (int) $b4;

        if $i20 <= 0 goto label17;

        $d26 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMaxX()>();

        goto label18;

     label17:
        $d26 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMinX()>();

     label18:
        d27 = $d26;

        $d8 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMaxY()>();

        $d9 = $d8 - $d21;

        $d10 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMinY()>();

        $d11 = $d21 - $d10;

        $b5 = $d9 cmpl $d11;

        $i21 = (int) $b5;

        if $i21 <= 0 goto label19;

        $d28 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMaxY()>();

        goto label20;

     label19:
        $d28 = interfaceinvoke r1.<com.spatial4j.core.shape.Rectangle: double getMinY()>();

     label20:
        $z1 = virtualinvoke r0.<com.spatial4j.core.shape.impl.CircleImpl: boolean contains(double,double)>(d27, $d28);

        if $z1 == 0 goto label21;

        $r4 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation CONTAINS>;

        return $r4;

     label21:
        $r3 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation INTERSECTS>;

        return $r3;
    }

    protected double getYAxis()
    {
        com.spatial4j.core.shape.Point $r1;
        com.spatial4j.core.shape.impl.CircleImpl r0;
        double $d0;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        $r1 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Point point>;

        $d0 = interfaceinvoke $r1.<com.spatial4j.core.shape.Point: double getY()>();

        return $d0;
    }

    protected double getXAxis()
    {
        com.spatial4j.core.shape.Point $r1;
        com.spatial4j.core.shape.impl.CircleImpl r0;
        double $d0;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        $r1 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Point point>;

        $d0 = interfaceinvoke $r1.<com.spatial4j.core.shape.Point: double getX()>();

        return $d0;
    }

    public com.spatial4j.core.shape.SpatialRelation relate(com.spatial4j.core.shape.Circle)
    {
        com.spatial4j.core.distance.DistanceCalculator $r2;
        byte $b0, $b1, $b2, $b3, $b4;
        com.spatial4j.core.shape.Point $r4, $r5;
        int $i5, $i6, $i7, $i8, $i9;
        com.spatial4j.core.shape.SpatialRelation $r6, $r7, $r8, $r9;
        double $d0, d1, $d2, $d3, $d4, $d5;
        com.spatial4j.core.shape.impl.CircleImpl r0;
        com.spatial4j.core.context.SpatialContext $r1;
        com.spatial4j.core.shape.Circle r3;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        r3 := @parameter0: com.spatial4j.core.shape.Circle;

        $r1 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.context.SpatialContext ctx>;

        $r2 = virtualinvoke $r1.<com.spatial4j.core.context.SpatialContext: com.spatial4j.core.distance.DistanceCalculator getDistCalc()>();

        $r4 = r0.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Point point>;

        $r5 = interfaceinvoke r3.<com.spatial4j.core.shape.Circle: com.spatial4j.core.shape.Point getCenter()>();

        $d0 = interfaceinvoke $r2.<com.spatial4j.core.distance.DistanceCalculator: double distance(com.spatial4j.core.shape.Point,com.spatial4j.core.shape.Point)>($r4, $r5);

        d1 = r0.<com.spatial4j.core.shape.impl.CircleImpl: double radiusDEG>;

        $d2 = interfaceinvoke r3.<com.spatial4j.core.shape.Circle: double getRadius()>();

        $d3 = d1 + $d2;

        $b0 = $d0 cmpl $d3;

        $i5 = (int) $b0;

        if $i5 <= 0 goto label1;

        $r9 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation DISJOINT>;

        return $r9;

     label1:
        $b1 = $d0 cmpg d1;

        $i6 = (int) $b1;

        if $i6 >= 0 goto label2;

        $d5 = $d0 + $d2;

        $b4 = $d5 cmpg d1;

        $i7 = (int) $b4;

        if $i7 > 0 goto label2;

        $r8 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation CONTAINS>;

        return $r8;

     label2:
        $b2 = $d0 cmpg $d2;

        $i8 = (int) $b2;

        if $i8 >= 0 goto label3;

        $d4 = $d0 + d1;

        $b3 = $d4 cmpg $d2;

        $i9 = (int) $b3;

        if $i9 > 0 goto label3;

        $r7 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation WITHIN>;

        return $r7;

     label3:
        $r6 = <com.spatial4j.core.shape.SpatialRelation: com.spatial4j.core.shape.SpatialRelation INTERSECTS>;

        return $r6;
    }

    public java.lang.String toString()
    {
        com.spatial4j.core.shape.impl.CircleImpl r2;
        com.spatial4j.core.shape.Point $r3;
        java.lang.StringBuilder $r0, $r1, $r4, $r5, $r6, $r7;
        java.lang.String $r8;
        double $d0;

        r2 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Circle(");

        $r3 = r2.<com.spatial4j.core.shape.impl.CircleImpl: com.spatial4j.core.shape.Point point>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", d=");

        $d0 = r2.<com.spatial4j.core.shape.impl.CircleImpl: double radiusDEG>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\u00b0)");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public boolean equals(java.lang.Object)
    {
        com.spatial4j.core.shape.impl.CircleImpl r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <com.spatial4j.core.shape.impl.CircleImpl: boolean equals(com.spatial4j.core.shape.Circle,java.lang.Object)>(r0, r1);

        return $z0;
    }

    public static boolean equals(com.spatial4j.core.shape.Circle, java.lang.Object)
    {
        java.lang.AssertionError $r5;
        com.spatial4j.core.shape.Circle r0, r2;
        com.spatial4j.core.shape.Point $r3, $r4;
        int $i0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2;
        double $d0, $d1;

        r0 := @parameter0: com.spatial4j.core.shape.Circle;

        r1 := @parameter1: java.lang.Object;

        $z0 = <com.spatial4j.core.shape.impl.CircleImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r0 != null goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        if r0 != r1 goto label2;

        return 1;

     label2:
        $z1 = r1 instanceof com.spatial4j.core.shape.Circle;

        if $z1 != 0 goto label3;

        return 0;

     label3:
        r2 = (com.spatial4j.core.shape.Circle) r1;

        $r3 = interfaceinvoke r0.<com.spatial4j.core.shape.Circle: com.spatial4j.core.shape.Point getCenter()>();

        $r4 = interfaceinvoke r2.<com.spatial4j.core.shape.Circle: com.spatial4j.core.shape.Point getCenter()>();

        $z2 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z2 != 0 goto label4;

        return 0;

     label4:
        $d0 = interfaceinvoke r2.<com.spatial4j.core.shape.Circle: double getRadius()>();

        $d1 = interfaceinvoke r0.<com.spatial4j.core.shape.Circle: double getRadius()>();

        $i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1);

        if $i0 == 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    public int hashCode()
    {
        int $i0;
        com.spatial4j.core.shape.impl.CircleImpl r0;

        r0 := @this: com.spatial4j.core.shape.impl.CircleImpl;

        $i0 = staticinvoke <com.spatial4j.core.shape.impl.CircleImpl: int hashCode(com.spatial4j.core.shape.Circle)>(r0);

        return $i0;
    }

    public static int hashCode(com.spatial4j.core.shape.Circle)
    {
        long $l2, $l3, $l7;
        com.spatial4j.core.shape.Circle r0;
        byte $b1;
        com.spatial4j.core.shape.Point $r1;
        int $i0, $i4, $i5, $i6;
        double $d0, $d1;

        r0 := @parameter0: com.spatial4j.core.shape.Circle;

        $r1 = interfaceinvoke r0.<com.spatial4j.core.shape.Circle: com.spatial4j.core.shape.Point getCenter()>();

        $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $d0 = interfaceinvoke r0.<com.spatial4j.core.shape.Circle: double getRadius()>();

        $b1 = $d0 cmpl 0.0;

        if $b1 == 0 goto label1;

        $d1 = interfaceinvoke r0.<com.spatial4j.core.shape.Circle: double getRadius()>();

        $l7 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1);

        goto label2;

     label1:
        $l7 = 0L;

     label2:
        $i5 = 31 * $i0;

        $l2 = $l7 >>> 32;

        $l3 = $l7 ^ $l2;

        $i4 = (int) $l3;

        $i6 = $i5 + $i4;

        return $i6;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/spatial4j/core/shape/impl/CircleImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.spatial4j.core.shape.impl.CircleImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
