public class org.apache.solr.common.util.DateUtil extends java.lang.Object
{
    public static final java.lang.String PATTERN_RFC1123;
    public static final java.lang.String PATTERN_RFC1036;
    public static final java.lang.String PATTERN_ASCTIME;
    private static final java.util.Collection DEFAULT_HTTP_CLIENT_PATTERNS;
    private static final java.util.Date DEFAULT_TWO_DIGIT_YEAR_START;
    private static final java.util.TimeZone GMT;
    public static final java.util.Collection DEFAULT_DATE_FORMATS;
    public static java.util.TimeZone UTC;
    private static org.apache.solr.common.util.DateUtil$ThreadLocalDateFormat fmtThreadLocal;

    public void <init>()
    {
        org.apache.solr.common.util.DateUtil r0;

        r0 := @this: org.apache.solr.common.util.DateUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Date parseDate(java.lang.String) throws java.text.ParseException
    {
        java.lang.String r0;
        java.util.Date $r2;
        java.util.Collection $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.solr.common.util.DateUtil: java.util.Collection DEFAULT_DATE_FORMATS>;

        $r2 = staticinvoke <org.apache.solr.common.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection)>(r0, $r1);

        return $r2;
    }

    public static java.util.Date parseDate(java.lang.String, java.util.Collection) throws java.text.ParseException
    {
        java.util.Date $r2, $r4;
        java.util.Collection r1;
        int $i0;
        java.lang.String r0;
        java.text.DateFormat $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Collection;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("Z");

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 20 goto label1;

        $r3 = staticinvoke <org.apache.solr.common.util.DateUtil: java.text.DateFormat getThreadLocalDateFormat()>();

        $r4 = virtualinvoke $r3.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r0);

        return $r4;

     label1:
        $r2 = staticinvoke <org.apache.solr.common.util.DateUtil: java.util.Date parseDate(java.lang.String,java.util.Collection,java.util.Date)>(r0, r1, null);

        return $r2;
    }

    public static java.util.Date parseDate(java.lang.String, java.util.Collection, java.util.Date) throws java.text.ParseException
    {
        java.util.Date $r7, r15;
        java.text.SimpleDateFormat $r8, r16;
        java.util.Locale $r9;
        int $i0, $i1, $i2;
        java.lang.String $r4, r6, r13;
        java.text.ParseException $r0, $r12;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r17;
        java.util.TimeZone $r10;
        java.util.Collection r14;
        java.lang.IllegalArgumentException $r11;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.Object $r5;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: java.util.Collection;

        r15 := @parameter2: java.util.Date;

        if r13 != null goto label01;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("dateValue is null");

        throw $r11;

     label01:
        if r14 != null goto label02;

        r14 = <org.apache.solr.common.util.DateUtil: java.util.Collection DEFAULT_HTTP_CLIENT_PATTERNS>;

     label02:
        if r15 != null goto label03;

        r15 = <org.apache.solr.common.util.DateUtil: java.util.Date DEFAULT_TWO_DIGIT_YEAR_START>;

     label03:
        $i0 = virtualinvoke r13.<java.lang.String: int length()>();

        if $i0 <= 1 goto label04;

        $z0 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("\'");

        if $z0 == 0 goto label04;

        $z1 = virtualinvoke r13.<java.lang.String: boolean endsWith(java.lang.String)>("\'");

        if $z1 == 0 goto label04;

        $i1 = virtualinvoke r13.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        r13 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(1, $i2);

     label04:
        r16 = null;

        $r17 = interfaceinvoke r14.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r5 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        if r16 != null goto label06;

        $r8 = new java.text.SimpleDateFormat;

        $r9 = <java.util.Locale: java.util.Locale ROOT>;

        specialinvoke $r8.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(r6, $r9);

        r16 = $r8;

        $r10 = <org.apache.solr.common.util.DateUtil: java.util.TimeZone GMT>;

        virtualinvoke $r8.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r10);

        virtualinvoke $r8.<java.text.SimpleDateFormat: void set2DigitYearStart(java.util.Date)>(r15);

        goto label07;

     label06:
        virtualinvoke r16.<java.text.SimpleDateFormat: void applyPattern(java.lang.String)>(r6);

     label07:
        $r7 = virtualinvoke r16.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r13);

     label08:
        return $r7;

     label09:
        $r12 := @caughtexception;

        goto label05;

     label10:
        $r0 = new java.text.ParseException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse the date ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.text.ParseException: void <init>(java.lang.String,int)>($r4, 0);

        throw $r0;

        catch java.text.ParseException from label07 to label08 with label09;
    }

    public static java.text.DateFormat getThreadLocalDateFormat()
    {
        org.apache.solr.common.util.DateUtil$ThreadLocalDateFormat $r0;
        java.lang.Object $r1;
        java.text.DateFormat $r2;

        $r0 = <org.apache.solr.common.util.DateUtil: org.apache.solr.common.util.DateUtil$ThreadLocalDateFormat fmtThreadLocal>;

        $r1 = virtualinvoke $r0.<org.apache.solr.common.util.DateUtil$ThreadLocalDateFormat: java.lang.Object get()>();

        $r2 = (java.text.DateFormat) $r1;

        return $r2;
    }

    public static java.util.Calendar formatDate(java.util.Date, java.util.Calendar, java.lang.Appendable) throws java.io.IOException
    {
        java.util.Date r2;
        java.util.Calendar r5;
        java.util.Locale $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, $i11, $i12, i13, $i14, $i16, $i17, $i19;
        boolean $z0;
        java.lang.Appendable r0;
        java.util.TimeZone $r3;
        char $c8, $c9;
        java.lang.StringBuilder r1, $r6, $r7;

        r2 := @parameter0: java.util.Date;

        r5 := @parameter1: java.util.Calendar;

        r0 := @parameter2: java.lang.Appendable;

        $z0 = r0 instanceof java.lang.StringBuilder;

        if $z0 == 0 goto label01;

        $r6 = (java.lang.StringBuilder) r0;

        goto label02;

     label01:
        $r7 = new java.lang.StringBuilder;

        $r6 = $r7;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

     label02:
        r1 = $r6;

        if r5 != null goto label03;

        $r3 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        $r4 = <java.util.Locale: java.util.Locale ROOT>;

        r5 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>($r3, $r4);

     label03:
        virtualinvoke r5.<java.util.Calendar: void setTime(java.util.Date)>(r2);

        $i0 = virtualinvoke r5.<java.util.Calendar: int get(int)>(1);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i1 = virtualinvoke r5.<java.util.Calendar: int get(int)>(2);

        $i12 = $i1 + 1;

        if $i12 >= 10 goto label04;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label04:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i2 = virtualinvoke r5.<java.util.Calendar: int get(int)>(5);

        if $i2 >= 10 goto label05;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label05:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(84);

        $i3 = virtualinvoke r5.<java.util.Calendar: int get(int)>(11);

        if $i3 >= 10 goto label06;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label06:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i4 = virtualinvoke r5.<java.util.Calendar: int get(int)>(12);

        if $i4 >= 10 goto label07;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label07:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $i5 = virtualinvoke r5.<java.util.Calendar: int get(int)>(13);

        if $i5 >= 10 goto label08;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label08:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $i6 = virtualinvoke r5.<java.util.Calendar: int get(int)>(14);

        if $i6 == 0 goto label12;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        if $i6 >= 100 goto label09;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label09:
        if $i6 >= 10 goto label10;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label10:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $i7 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $i11 = $i7 - 1;

        $c8 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>($i11);

        $i14 = (int) $c8;

        if $i14 != 48 goto label12;

        $i16 = (int) -1;

        i13 = $i11 + $i16;

        $c9 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>(i13);

        $i17 = (int) $c9;

        if $i17 != 48 goto label11;

        $i19 = (int) -1;

        i13 = i13 + $i19;

     label11:
        $i10 = i13 + 1;

        virtualinvoke r1.<java.lang.StringBuilder: void setLength(int)>($i10);

     label12:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(90);

        if r0 == r1 goto label13;

        interfaceinvoke r0.<java.lang.Appendable: java.lang.Appendable append(java.lang.CharSequence)>(r1);

     label13:
        return r5;
    }

    static void <clinit>()
    {
        java.util.Date $r5;
        java.lang.String[] $r0;
        java.util.ArrayList $r7;
        java.util.Calendar $r4;
        java.util.Locale $r3;
        java.util.TimeZone $r2, $r6, $r16;
        java.util.Collection $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15;
        org.apache.solr.common.util.DateUtil$ThreadLocalDateFormat $r17;
        java.util.List $r1;

        <org.apache.solr.common.util.DateUtil: java.lang.String PATTERN_ASCTIME> = "EEE MMM d HH:mm:ss yyyy";

        <org.apache.solr.common.util.DateUtil: java.lang.String PATTERN_RFC1036> = "EEEE, dd-MMM-yy HH:mm:ss zzz";

        <org.apache.solr.common.util.DateUtil: java.lang.String PATTERN_RFC1123> = "EEE, dd MMM yyyy HH:mm:ss zzz";

        $r0 = newarray (java.lang.String)[3];

        $r0[0] = "EEE MMM d HH:mm:ss yyyy";

        $r0[1] = "EEEE, dd-MMM-yy HH:mm:ss zzz";

        $r0[2] = "EEE, dd MMM yyyy HH:mm:ss zzz";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        <org.apache.solr.common.util.DateUtil: java.util.Collection DEFAULT_HTTP_CLIENT_PATTERNS> = $r1;

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        $r3 = <java.util.Locale: java.util.Locale ROOT>;

        $r4 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>($r2, $r3);

        virtualinvoke $r4.<java.util.Calendar: void set(int,int,int,int,int)>(2000, 0, 1, 0, 0);

        $r5 = virtualinvoke $r4.<java.util.Calendar: java.util.Date getTime()>();

        <org.apache.solr.common.util.DateUtil: java.util.Date DEFAULT_TWO_DIGIT_YEAR_START> = $r5;

        $r6 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        <org.apache.solr.common.util.DateUtil: java.util.TimeZone GMT> = $r6;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        <org.apache.solr.common.util.DateUtil: java.util.Collection DEFAULT_DATE_FORMATS> = $r7;

        $r8 = <org.apache.solr.common.util.DateUtil: java.util.Collection DEFAULT_DATE_FORMATS>;

        interfaceinvoke $r8.<java.util.Collection: boolean add(java.lang.Object)>("yyyy-MM-dd\'T\'HH:mm:ss\'Z\'");

        $r9 = <org.apache.solr.common.util.DateUtil: java.util.Collection DEFAULT_DATE_FORMATS>;

        interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>("yyyy-MM-dd\'T\'HH:mm:ss");

        $r10 = <org.apache.solr.common.util.DateUtil: java.util.Collection DEFAULT_DATE_FORMATS>;

        interfaceinvoke $r10.<java.util.Collection: boolean add(java.lang.Object)>("yyyy-MM-dd");

        $r11 = <org.apache.solr.common.util.DateUtil: java.util.Collection DEFAULT_DATE_FORMATS>;

        interfaceinvoke $r11.<java.util.Collection: boolean add(java.lang.Object)>("yyyy-MM-dd hh:mm:ss");

        $r12 = <org.apache.solr.common.util.DateUtil: java.util.Collection DEFAULT_DATE_FORMATS>;

        interfaceinvoke $r12.<java.util.Collection: boolean add(java.lang.Object)>("yyyy-MM-dd HH:mm:ss");

        $r13 = <org.apache.solr.common.util.DateUtil: java.util.Collection DEFAULT_DATE_FORMATS>;

        interfaceinvoke $r13.<java.util.Collection: boolean add(java.lang.Object)>("EEE MMM d hh:mm:ss z yyyy");

        $r15 = <org.apache.solr.common.util.DateUtil: java.util.Collection DEFAULT_DATE_FORMATS>;

        $r14 = <org.apache.solr.common.util.DateUtil: java.util.Collection DEFAULT_HTTP_CLIENT_PATTERNS>;

        interfaceinvoke $r15.<java.util.Collection: boolean addAll(java.util.Collection)>($r14);

        $r16 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("UTC");

        <org.apache.solr.common.util.DateUtil: java.util.TimeZone UTC> = $r16;

        $r17 = new org.apache.solr.common.util.DateUtil$ThreadLocalDateFormat;

        specialinvoke $r17.<org.apache.solr.common.util.DateUtil$ThreadLocalDateFormat: void <init>()>();

        <org.apache.solr.common.util.DateUtil: org.apache.solr.common.util.DateUtil$ThreadLocalDateFormat fmtThreadLocal> = $r17;

        return;
    }
}
