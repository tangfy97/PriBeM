final class minsolver.MinSATSolver$ReadOnlyIVecInt extends java.lang.Object implements org.sat4j.specs.IVecInt
{
    private static final long serialVersionUID;
    private int[] vec;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <minsolver.MinSATSolver$ReadOnlyIVecInt: long serialVersionUID> = 1L;

        $r0 = class "Lminsolver/MinSATSolver;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <minsolver.MinSATSolver$ReadOnlyIVecInt: boolean $assertionsDisabled> = $z1;

        return;
    }

    private void <init>()
    {
        minsolver.MinSATSolver$ReadOnlyIVecInt r0;

        r0 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    org.sat4j.specs.IVecInt wrap(int[])
    {
        minsolver.MinSATSolver$ReadOnlyIVecInt r0;
        int[] r1;

        r0 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        r1 := @parameter0: int[];

        r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec> = r1;

        return r0;
    }

    public int size()
    {
        int $i0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r0;
        int[] $r1;

        r0 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        $r1 = r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r0;

        r0 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        $i0 = virtualinvoke r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int size()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void shrink(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void shrinkTo(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public org.sat4j.specs.IVecInt pop()
    {
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void growTo(int, int)
    {
        java.lang.UnsupportedOperationException $r0;
        int i0, i1;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void ensure(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public org.sat4j.specs.IVecInt push(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void unsafePush(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int unsafeGet(int)
    {
        int[] $r1;
        int i0, $i1;
        minsolver.MinSATSolver$ReadOnlyIVecInt r0;

        r0 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        $r1 = r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        $i1 = $r1[i0];

        return $i1;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int last()
    {
        int[] $r1, $r2;
        int $i0, $i1, $i2;
        minsolver.MinSATSolver$ReadOnlyIVecInt r0;

        r0 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        $r2 = r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        $r1 = r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        $i2 = $r2[$i1];

        return $i2;
    }

    public int get(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        int[] $r5, $r6;
        int i0, $i1, $i2;
        minsolver.MinSATSolver$ReadOnlyIVecInt r4;
        java.lang.StringBuilder $r1, $r2;
        java.lang.String $r3;

        r4 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r5 = r4.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        $i1 = lengthof $r5;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("arg0: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r3);

        throw $r0;

     label2:
        $r6 = r4.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        $i2 = $r6[i0];

        return $i2;
    }

    public void set(int, int)
    {
        java.lang.UnsupportedOperationException $r0;
        int i0, i1;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean contains(int)
    {
        int[] $r1;
        int i0, i1, i2, i3;
        minsolver.MinSATSolver$ReadOnlyIVecInt r0;

        r0 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i2 := @parameter0: int;

        $r1 = r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        i0 = lengthof $r1;

        i3 = 0;

        goto label3;

     label1:
        i1 = $r1[i3];

        if i1 != i2 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i0 goto label1;

        return 0;
    }

    public void copyTo(org.sat4j.specs.IVecInt)
    {
        org.sat4j.specs.IVecInt r0;
        int[] $r2, $r3;
        int $i0, $i1, $i2, i3, i4, $i5, i6, i7;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        r0 := @parameter0: org.sat4j.specs.IVecInt;

        $i0 = interfaceinvoke r0.<org.sat4j.specs.IVecInt: int size()>();

        i6 = $i0;

        $r2 = r1.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        $i1 = lengthof $r2;

        $i2 = $i0 + $i1;

        interfaceinvoke r0.<org.sat4j.specs.IVecInt: void ensure(int)>($i2);

        $r3 = r1.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        i3 = lengthof $r3;

        i7 = 0;

        goto label2;

     label1:
        i4 = $r3[i7];

        $i5 = i6;

        i6 = i6 + 1;

        interfaceinvoke r0.<org.sat4j.specs.IVecInt: void set(int,int)>($i5, i4);

        i7 = i7 + 1;

     label2:
        if i7 < i3 goto label1;

        return;
    }

    public void copyTo(int[])
    {
        java.lang.AssertionError $r5;
        int[] r1, $r2, $r3, $r4;
        int $i0, $i1, $i2;
        minsolver.MinSATSolver$ReadOnlyIVecInt r0;
        boolean $z0;

        r0 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        r1 := @parameter0: int[];

        $z0 = <minsolver.MinSATSolver$ReadOnlyIVecInt: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i2 = lengthof r1;

        $r4 = r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        $i1 = lengthof $r4;

        if $i2 >= $i1 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r3 = r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        $r2 = r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        $i0 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i0);

        return;
    }

    public void moveTo(org.sat4j.specs.IVecInt)
    {
        org.sat4j.specs.IVecInt r2;
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        r2 := @parameter0: org.sat4j.specs.IVecInt;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void moveTo2(org.sat4j.specs.IVecInt)
    {
        org.sat4j.specs.IVecInt r2;
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        r2 := @parameter0: org.sat4j.specs.IVecInt;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void moveTo(int[])
    {
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;
        int[] r2;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        r2 := @parameter0: int[];

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void moveTo(int, int)
    {
        java.lang.UnsupportedOperationException $r0;
        int i0, i1;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void insertFirst(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void remove(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int delete(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void sort()
    {
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void sortUnique()
    {
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public org.sat4j.specs.IteratorInt iterator()
    {
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;
        minsolver.MinSATSolver$ReadOnlyIVecInt$1 $r0;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        $r0 = new minsolver.MinSATSolver$ReadOnlyIVecInt$1;

        specialinvoke $r0.<minsolver.MinSATSolver$ReadOnlyIVecInt$1: void <init>(minsolver.MinSATSolver$ReadOnlyIVecInt)>(r1);

        return $r0;
    }

    public int containsAt(int)
    {
        int[] $r1, $r2;
        int i0, i1, $i2, i3, $i5;
        minsolver.MinSATSolver$ReadOnlyIVecInt r0;

        r0 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i1 := @parameter0: int;

        $r1 = r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        i0 = lengthof $r1;

        i3 = 0;

        goto label3;

     label1:
        $r2 = r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        $i2 = $r2[i3];

        if $i2 != i1 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

     label3:
        if i3 < i0 goto label1;

        $i5 = (int) -1;

        return $i5;
    }

    public int containsAt(int, int)
    {
        int[] $r1, $r2, $r3;
        int i0, $i1, i2, i3, $i4, i5, $i7;
        minsolver.MinSATSolver$ReadOnlyIVecInt r0;

        r0 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        $r1 = r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        $i1 = lengthof $r1;

        if i0 >= $i1 goto label4;

        $r2 = r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        i2 = lengthof $r2;

        i5 = i0 + 1;

        goto label3;

     label1:
        $r3 = r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        $i4 = $r3[i5];

        if $i4 != i3 goto label2;

        return i5;

     label2:
        i5 = i5 + 1;

     label3:
        if i5 < i2 goto label1;

     label4:
        $i7 = (int) -1;

        return $i7;
    }

    public int[] toArray()
    {
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int indexOf(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void moveTo(int, int[])
    {
        java.lang.UnsupportedOperationException $r0;
        int[] r2;
        int i0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        r2 := @parameter1: int[];

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public org.sat4j.specs.IVecInt[] subset(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        minsolver.MinSATSolver$ReadOnlyIVecInt r1;

        r1 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    static int[] access$0(minsolver.MinSATSolver$ReadOnlyIVecInt)
    {
        minsolver.MinSATSolver$ReadOnlyIVecInt r0;
        int[] $r1;

        r0 := @parameter0: minsolver.MinSATSolver$ReadOnlyIVecInt;

        $r1 = r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: int[] vec>;

        return $r1;
    }

    void <init>(minsolver.MinSATSolver$ReadOnlyIVecInt)
    {
        minsolver.MinSATSolver$ReadOnlyIVecInt r0, r1;

        r0 := @this: minsolver.MinSATSolver$ReadOnlyIVecInt;

        r1 := @parameter0: minsolver.MinSATSolver$ReadOnlyIVecInt;

        specialinvoke r0.<minsolver.MinSATSolver$ReadOnlyIVecInt: void <init>()>();

        return;
    }
}
