public class org.apache.log4j.jmx.LayoutDynamicMBean extends org.apache.log4j.jmx.AbstractDynamicMBean
{
    private javax.management.MBeanConstructorInfo[] dConstructors;
    private java.util.Vector dAttributes;
    private java.lang.String dClassName;
    private java.util.Hashtable dynamicProps;
    private javax.management.MBeanOperationInfo[] dOperations;
    private java.lang.String dDescription;
    private static org.apache.log4j.Logger cat;
    private org.apache.log4j.Layout layout;
    static java.lang.Class class$org$apache$log4j$jmx$LayoutDynamicMBean;
    static java.lang.Class class$org$apache$log4j$Level;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$org$apache$log4j$Priority;

    public void <init>(org.apache.log4j.Layout) throws java.beans.IntrospectionException
    {
        org.apache.log4j.jmx.LayoutDynamicMBean r0;
        javax.management.MBeanConstructorInfo[] $r1;
        java.util.Vector $r2;
        java.lang.Class $r3;
        org.apache.log4j.Layout r7;
        java.lang.String $r4;
        javax.management.MBeanOperationInfo[] $r6;
        java.util.Hashtable $r5;

        r0 := @this: org.apache.log4j.jmx.LayoutDynamicMBean;

        r7 := @parameter0: org.apache.log4j.Layout;

        specialinvoke r0.<org.apache.log4j.jmx.AbstractDynamicMBean: void <init>()>();

        $r1 = newarray (javax.management.MBeanConstructorInfo)[1];

        r0.<org.apache.log4j.jmx.LayoutDynamicMBean: javax.management.MBeanConstructorInfo[] dConstructors> = $r1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<org.apache.log4j.jmx.LayoutDynamicMBean: java.util.Vector dAttributes> = $r2;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        r0.<org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.String dClassName> = $r4;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<java.util.Hashtable: void <init>(int)>(5);

        r0.<org.apache.log4j.jmx.LayoutDynamicMBean: java.util.Hashtable dynamicProps> = $r5;

        $r6 = newarray (javax.management.MBeanOperationInfo)[1];

        r0.<org.apache.log4j.jmx.LayoutDynamicMBean: javax.management.MBeanOperationInfo[] dOperations> = $r6;

        r0.<org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.String dDescription> = "This MBean acts as a management facade for log4j layouts.";

        r0.<org.apache.log4j.jmx.LayoutDynamicMBean: org.apache.log4j.Layout layout> = r7;

        specialinvoke r0.<org.apache.log4j.jmx.LayoutDynamicMBean: void buildDynamicMBeanInfo()>();

        return;
    }

    private void buildDynamicMBeanInfo() throws java.beans.IntrospectionException
    {
        javax.management.MBeanConstructorInfo[] $r5;
        java.beans.PropertyDescriptor[] $r9;
        javax.management.MBeanAttributeInfo $r20;
        java.util.Vector $r21;
        javax.management.MBeanOperationInfo[] $r11;
        java.lang.reflect.Method $r15, $r17;
        boolean $z0, $z1, $z2;
        org.apache.log4j.jmx.LayoutDynamicMBean r0;
        javax.management.MBeanOperationInfo $r10;
        javax.management.MBeanConstructorInfo $r3;
        java.beans.PropertyDescriptor $r12, $r14, $r16;
        javax.management.MBeanParameterInfo[] r27;
        org.apache.log4j.Layout $r6;
        java.lang.reflect.Constructor $r4;
        java.lang.reflect.Constructor[] $r2;
        org.apache.log4j.jmx.MethodUnion $r22;
        java.beans.BeanInfo $r8;
        int i0, i1;
        java.lang.String $r13, $r24, r26;
        java.util.Hashtable $r23;
        java.lang.Class $r1, $r7, $r18, $r19, $r25;

        r0 := @this: org.apache.log4j.jmx.LayoutDynamicMBean;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        $r5 = r0.<org.apache.log4j.jmx.LayoutDynamicMBean: javax.management.MBeanConstructorInfo[] dConstructors>;

        $r3 = new javax.management.MBeanConstructorInfo;

        $r4 = $r2[0];

        specialinvoke $r3.<javax.management.MBeanConstructorInfo: void <init>(java.lang.String,java.lang.reflect.Constructor)>("LayoutDynamicMBean(): Constructs a LayoutDynamicMBean instance", $r4);

        $r5[0] = $r3;

        $r6 = r0.<org.apache.log4j.jmx.LayoutDynamicMBean: org.apache.log4j.Layout layout>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class)>($r7);

        $r9 = interfaceinvoke $r8.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        i0 = lengthof $r9;

        i1 = 0;

     label1:
        if i1 >= i0 goto label9;

        $r12 = $r9[i1];

        $r13 = virtualinvoke $r12.<java.beans.FeatureDescriptor: java.lang.String getName()>();

        $r14 = $r9[i1];

        $r15 = virtualinvoke $r14.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        $r16 = $r9[i1];

        $r17 = virtualinvoke $r16.<java.beans.PropertyDescriptor: java.lang.reflect.Method getWriteMethod()>();

        if $r15 == null goto label8;

        $r18 = virtualinvoke $r15.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = specialinvoke r0.<org.apache.log4j.jmx.LayoutDynamicMBean: boolean isSupportedType(java.lang.Class)>($r18);

        if $z0 == 0 goto label8;

        $r19 = <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$org$apache$log4j$Level>;

        if $r19 != null goto label2;

        $r25 = staticinvoke <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$(java.lang.String)>("org.apache.log4j.Level");

        <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$org$apache$log4j$Level> = $r25;

        goto label3;

     label2:
        $r25 = <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$org$apache$log4j$Level>;

     label3:
        $z1 = virtualinvoke $r18.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r25);

        if $z1 == 0 goto label4;

        r26 = "java.lang.String";

        goto label5;

     label4:
        r26 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

     label5:
        $r21 = r0.<org.apache.log4j.jmx.LayoutDynamicMBean: java.util.Vector dAttributes>;

        $r20 = new javax.management.MBeanAttributeInfo;

        $r24 = r26;

        if $r17 == null goto label6;

        $z2 = 1;

        goto label7;

     label6:
        $z2 = 0;

     label7:
        specialinvoke $r20.<javax.management.MBeanAttributeInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean)>($r13, $r24, "Dynamic", 1, $z2, 0);

        virtualinvoke $r21.<java.util.Vector: boolean add(java.lang.Object)>($r20);

        $r23 = r0.<org.apache.log4j.jmx.LayoutDynamicMBean: java.util.Hashtable dynamicProps>;

        $r22 = new org.apache.log4j.jmx.MethodUnion;

        specialinvoke $r22.<org.apache.log4j.jmx.MethodUnion: void <init>(java.lang.reflect.Method,java.lang.reflect.Method)>($r15, $r17);

        virtualinvoke $r23.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r22);

     label8:
        i1 = i1 + 1;

        goto label1;

     label9:
        r27 = newarray (javax.management.MBeanParameterInfo)[0];

        $r11 = r0.<org.apache.log4j.jmx.LayoutDynamicMBean: javax.management.MBeanOperationInfo[] dOperations>;

        $r10 = new javax.management.MBeanOperationInfo;

        specialinvoke $r10.<javax.management.MBeanOperationInfo: void <init>(java.lang.String,java.lang.String,javax.management.MBeanParameterInfo[],java.lang.String,int)>("activateOptions", "activateOptions(): add an layout", r27, "void", 1);

        $r11[0] = $r10;

        return;
    }

    private boolean isSupportedType(java.lang.Class)
    {
        org.apache.log4j.jmx.LayoutDynamicMBean r3;
        java.lang.Class r0, $r1, $r2, $r4, $r5;
        boolean $z0, $z1;

        r3 := @this: org.apache.log4j.jmx.LayoutDynamicMBean;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$java$lang$String>;

        if $r1 != null goto label2;

        $r4 = staticinvoke <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$java$lang$String> = $r4;

        goto label3;

     label2:
        $r4 = <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$java$lang$String>;

     label3:
        if r0 != $r4 goto label4;

        return 1;

     label4:
        $r2 = <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$org$apache$log4j$Level>;

        if $r2 != null goto label5;

        $r5 = staticinvoke <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$(java.lang.String)>("org.apache.log4j.Level");

        <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$org$apache$log4j$Level> = $r5;

        goto label6;

     label5:
        $r5 = <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$org$apache$log4j$Level>;

     label6:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z1 == 0 goto label7;

        return 1;

     label7:
        return 0;
    }

    public javax.management.MBeanInfo getMBeanInfo()
    {
        org.apache.log4j.jmx.LayoutDynamicMBean r1;
        javax.management.MBeanConstructorInfo[] $r8;
        javax.management.MBeanInfo $r5;
        org.apache.log4j.Logger $r0;
        java.util.Vector $r2, $r4;
        javax.management.MBeanAttributeInfo[] r3;
        int $i0;
        java.lang.String $r9, $r10;
        javax.management.MBeanOperationInfo[] $r7;
        javax.management.MBeanNotificationInfo[] $r6;

        r1 := @this: org.apache.log4j.jmx.LayoutDynamicMBean;

        $r0 = <org.apache.log4j.jmx.LayoutDynamicMBean: org.apache.log4j.Logger cat>;

        virtualinvoke $r0.<org.apache.log4j.Category: void debug(java.lang.Object)>("getMBeanInfo called.");

        $r2 = r1.<org.apache.log4j.jmx.LayoutDynamicMBean: java.util.Vector dAttributes>;

        $i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

        r3 = newarray (javax.management.MBeanAttributeInfo)[$i0];

        $r4 = r1.<org.apache.log4j.jmx.LayoutDynamicMBean: java.util.Vector dAttributes>;

        virtualinvoke $r4.<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>(r3);

        $r5 = new javax.management.MBeanInfo;

        $r10 = r1.<org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.String dClassName>;

        $r9 = r1.<org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.String dDescription>;

        $r8 = r1.<org.apache.log4j.jmx.LayoutDynamicMBean: javax.management.MBeanConstructorInfo[] dConstructors>;

        $r7 = r1.<org.apache.log4j.jmx.LayoutDynamicMBean: javax.management.MBeanOperationInfo[] dOperations>;

        $r6 = newarray (javax.management.MBeanNotificationInfo)[0];

        specialinvoke $r5.<javax.management.MBeanInfo: void <init>(java.lang.String,java.lang.String,javax.management.MBeanAttributeInfo[],javax.management.MBeanConstructorInfo[],javax.management.MBeanOperationInfo[],javax.management.MBeanNotificationInfo[])>($r10, $r9, r3, $r8, $r7, $r6);

        return $r5;
    }

    public java.lang.Object invoke(java.lang.String, java.lang.Object[], java.lang.String[]) throws javax.management.MBeanException, javax.management.ReflectionException
    {
        org.apache.log4j.jmx.LayoutDynamicMBean r1;
        java.lang.Object[] r4;
        java.lang.String[] r5;
        org.apache.log4j.Layout $r2, r3;
        java.lang.String r0;
        boolean $z0, $z1;

        r1 := @this: org.apache.log4j.jmx.LayoutDynamicMBean;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.Object[];

        r5 := @parameter2: java.lang.String[];

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("activateOptions");

        if $z0 == 0 goto label1;

        $r2 = r1.<org.apache.log4j.jmx.LayoutDynamicMBean: org.apache.log4j.Layout layout>;

        $z1 = $r2 instanceof org.apache.log4j.spi.OptionHandler;

        if $z1 == 0 goto label1;

        r3 = r1.<org.apache.log4j.jmx.LayoutDynamicMBean: org.apache.log4j.Layout layout>;

        interfaceinvoke r3.<org.apache.log4j.spi.OptionHandler: void activateOptions()>();

        return "Options activated.";

     label1:
        return null;
    }

    protected org.apache.log4j.Logger getLogger()
    {
        org.apache.log4j.jmx.LayoutDynamicMBean r1;
        org.apache.log4j.Logger $r0;

        r1 := @this: org.apache.log4j.jmx.LayoutDynamicMBean;

        $r0 = <org.apache.log4j.jmx.LayoutDynamicMBean: org.apache.log4j.Logger cat>;

        return $r0;
    }

    public java.lang.Object getAttribute(java.lang.String) throws javax.management.AttributeNotFoundException, javax.management.MBeanException, javax.management.ReflectionException
    {
        org.apache.log4j.Logger $r6;
        java.lang.Thread $r36;
        java.lang.reflect.Method $r20, $r22;
        boolean $z0, $z1;
        org.apache.log4j.jmx.LayoutDynamicMBean r1;
        java.lang.IllegalAccessException $r33;
        java.lang.reflect.InvocationTargetException $r34;
        org.apache.log4j.Layout $r21;
        javax.management.RuntimeOperationsException $r24;
        java.lang.Throwable $r35, $r37;
        javax.management.AttributeNotFoundException $r12;
        org.apache.log4j.jmx.MethodUnion r4;
        java.lang.StringBuffer $r5, $r7, $r8, $r9, $r10, $r13, $r14, $r15, $r16, $r18, $r26, $r27, $r29, $r30;
        java.lang.String r0, $r11, $r17, $r19, $r28, $r31;
        java.util.Hashtable $r2;
        java.lang.RuntimeException $r32;
        java.lang.IllegalArgumentException $r25;
        java.lang.Object $r3, $r23;

        r1 := @this: org.apache.log4j.jmx.LayoutDynamicMBean;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r24 = new javax.management.RuntimeOperationsException;

        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attribute name cannot be null");

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot invoke a getter of ");

        $r28 = r1.<org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.String dClassName>;

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with null attribute name");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r24.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r25, $r31);

        throw $r24;

     label1:
        $r2 = r1.<org.apache.log4j.jmx.LayoutDynamicMBean: java.util.Hashtable dynamicProps>;

        $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        r4 = (org.apache.log4j.jmx.MethodUnion) $r3;

        $r6 = <org.apache.log4j.jmx.LayoutDynamicMBean: org.apache.log4j.Logger cat>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("----name=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", mu=");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r6.<org.apache.log4j.Category: void debug(java.lang.Object)>($r11);

        if r4 == null goto label9;

        $r20 = r4.<org.apache.log4j.jmx.MethodUnion: java.lang.reflect.Method readMethod>;

        if $r20 == null goto label9;

     label2:
        $r22 = r4.<org.apache.log4j.jmx.MethodUnion: java.lang.reflect.Method readMethod>;

        $r21 = r1.<org.apache.log4j.jmx.LayoutDynamicMBean: org.apache.log4j.Layout layout>;

        $r23 = virtualinvoke $r22.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r21, null);

     label3:
        return $r23;

     label4:
        $r34 := @caughtexception;

        $r35 = virtualinvoke $r34.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r35 instanceof java.lang.InterruptedException;

        if $z0 != 0 goto label5;

        $r37 = virtualinvoke $r34.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z1 = $r37 instanceof java.io.InterruptedIOException;

        if $z1 == 0 goto label6;

     label5:
        $r36 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r36.<java.lang.Thread: void interrupt()>();

     label6:
        return null;

     label7:
        $r33 := @caughtexception;

        return null;

     label8:
        $r32 := @caughtexception;

        return null;

     label9:
        $r12 = new javax.management.AttributeNotFoundException;

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot find ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" attribute in ");

        $r17 = r1.<org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.String dClassName>;

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r12.<javax.management.AttributeNotFoundException: void <init>(java.lang.String)>($r19);

        throw $r12;

        catch java.lang.reflect.InvocationTargetException from label2 to label3 with label4;
        catch java.lang.IllegalAccessException from label2 to label3 with label7;
        catch java.lang.RuntimeException from label2 to label3 with label8;
    }

    public void setAttribute(javax.management.Attribute) throws javax.management.AttributeNotFoundException, javax.management.InvalidAttributeValueException, javax.management.MBeanException, javax.management.ReflectionException
    {
        org.apache.log4j.Logger $r44, $r46, $r53;
        org.apache.log4j.Level $r26;
        java.lang.Thread $r49;
        java.lang.reflect.Method $r16, $r18, $r23;
        boolean $z0, $z1;
        org.apache.log4j.jmx.LayoutDynamicMBean r3;
        java.lang.IllegalAccessException $r45;
        java.lang.reflect.InvocationTargetException $r47;
        org.apache.log4j.Layout $r22;
        javax.management.RuntimeOperationsException $r27, $r35;
        java.lang.Throwable $r48, $r50;
        javax.management.AttributeNotFoundException $r7;
        java.lang.Object[] r17;
        javax.management.Attribute r0;
        org.apache.log4j.jmx.MethodUnion r6;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r14, $r29, $r30, $r32, $r33, $r37, $r38, $r40, $r41;
        java.lang.String $r1, $r13, $r15, $r24, $r31, $r34, $r39, $r42;
        java.util.Hashtable $r4;
        java.lang.Class[] $r19;
        java.lang.RuntimeException $r43;
        java.lang.IllegalArgumentException $r28, $r36;
        java.lang.Object $r2, $r5, $r25, r51;
        java.lang.Class $r12, $r20, $r21, $r52;

        r3 := @this: org.apache.log4j.jmx.LayoutDynamicMBean;

        r0 := @parameter0: javax.management.Attribute;

        if r0 != null goto label01;

        $r35 = new javax.management.RuntimeOperationsException;

        $r36 = new java.lang.IllegalArgumentException;

        specialinvoke $r36.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attribute cannot be null");

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot invoke a setter of ");

        $r39 = r3.<org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.String dClassName>;

        $r40 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with null attribute");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r35.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r36, $r42);

        throw $r35;

     label01:
        $r1 = virtualinvoke r0.<javax.management.Attribute: java.lang.String getName()>();

        $r2 = virtualinvoke r0.<javax.management.Attribute: java.lang.Object getValue()>();

        r51 = $r2;

        if $r1 != null goto label02;

        $r27 = new javax.management.RuntimeOperationsException;

        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Attribute name cannot be null");

        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot invoke the setter of ");

        $r31 = r3.<org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.String dClassName>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" with null attribute name");

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r27.<javax.management.RuntimeOperationsException: void <init>(java.lang.RuntimeException,java.lang.String)>($r28, $r34);

        throw $r27;

     label02:
        $r4 = r3.<org.apache.log4j.jmx.LayoutDynamicMBean: java.util.Hashtable dynamicProps>;

        $r5 = virtualinvoke $r4.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1);

        r6 = (org.apache.log4j.jmx.MethodUnion) $r5;

        if r6 == null goto label14;

        $r16 = r6.<org.apache.log4j.jmx.MethodUnion: java.lang.reflect.Method writeMethod>;

        if $r16 == null goto label14;

        r17 = newarray (java.lang.Object)[1];

        $r18 = r6.<org.apache.log4j.jmx.MethodUnion: java.lang.reflect.Method writeMethod>;

        $r19 = virtualinvoke $r18.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r21 = $r19[0];

        $r20 = <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$org$apache$log4j$Priority>;

        if $r20 != null goto label03;

        $r52 = staticinvoke <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$(java.lang.String)>("org.apache.log4j.Priority");

        <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$org$apache$log4j$Priority> = $r52;

        goto label04;

     label03:
        $r52 = <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$org$apache$log4j$Priority>;

     label04:
        if $r21 != $r52 goto label05;

        $r24 = (java.lang.String) $r2;

        $r25 = virtualinvoke r3.<org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Object getAttribute(java.lang.String)>($r1);

        $r26 = (org.apache.log4j.Level) $r25;

        r51 = staticinvoke <org.apache.log4j.helpers.OptionConverter: org.apache.log4j.Level toLevel(java.lang.String,org.apache.log4j.Level)>($r24, $r26);

     label05:
        r17[0] = r51;

     label06:
        $r23 = r6.<org.apache.log4j.jmx.MethodUnion: java.lang.reflect.Method writeMethod>;

        $r22 = r3.<org.apache.log4j.jmx.LayoutDynamicMBean: org.apache.log4j.Layout layout>;

        virtualinvoke $r23.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r22, r17);

     label07:
        goto label13;

     label08:
        $r47 := @caughtexception;

        $r48 = virtualinvoke $r47.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z0 = $r48 instanceof java.lang.InterruptedException;

        if $z0 != 0 goto label09;

        $r50 = virtualinvoke $r47.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z1 = $r50 instanceof java.io.InterruptedIOException;

        if $z1 == 0 goto label10;

     label09:
        $r49 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r49.<java.lang.Thread: void interrupt()>();

     label10:
        $r53 = <org.apache.log4j.jmx.LayoutDynamicMBean: org.apache.log4j.Logger cat>;

        virtualinvoke $r53.<org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>("FIXME", $r47);

        goto label13;

     label11:
        $r45 := @caughtexception;

        $r46 = <org.apache.log4j.jmx.LayoutDynamicMBean: org.apache.log4j.Logger cat>;

        virtualinvoke $r46.<org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>("FIXME", $r45);

        goto label13;

     label12:
        $r43 := @caughtexception;

        $r44 = <org.apache.log4j.jmx.LayoutDynamicMBean: org.apache.log4j.Logger cat>;

        virtualinvoke $r44.<org.apache.log4j.Category: void error(java.lang.Object,java.lang.Throwable)>("FIXME", $r43);

     label13:
        goto label15;

     label14:
        $r7 = new javax.management.AttributeNotFoundException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attribute ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not found in ");

        $r12 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<javax.management.AttributeNotFoundException: void <init>(java.lang.String)>($r15);

        throw $r7;

     label15:
        return;

        catch java.lang.reflect.InvocationTargetException from label06 to label07 with label08;
        catch java.lang.IllegalAccessException from label06 to label07 with label11;
        catch java.lang.RuntimeException from label06 to label07 with label12;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.apache.log4j.Logger $r1;
        java.lang.Class $r0, $r2;

        $r0 = <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$org$apache$log4j$jmx$LayoutDynamicMBean>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$(java.lang.String)>("org.apache.log4j.jmx.LayoutDynamicMBean");

        <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$org$apache$log4j$jmx$LayoutDynamicMBean> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.log4j.jmx.LayoutDynamicMBean: java.lang.Class class$org$apache$log4j$jmx$LayoutDynamicMBean>;

     label2:
        $r1 = staticinvoke <org.apache.log4j.Logger: org.apache.log4j.Logger getLogger(java.lang.Class)>($r2);

        <org.apache.log4j.jmx.LayoutDynamicMBean: org.apache.log4j.Logger cat> = $r1;

        return;
    }
}
