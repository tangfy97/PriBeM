public class org.apache.batik.dom.AbstractDocument$XPathExpr$Result extends java.lang.Object implements org.w3c.dom.xpath.XPathResult
{
    protected short resultType;
    protected double numberValue;
    protected java.lang.String stringValue;
    protected boolean booleanValue;
    protected org.w3c.dom.Node singleNodeValue;
    protected org.w3c.dom.NodeList iterator;
    protected int iteratorPosition;
    private final org.apache.batik.dom.AbstractDocument$XPathExpr this$1;

    public void <init>(org.apache.batik.dom.AbstractDocument$XPathExpr, org.w3c.dom.Node, short)
    {
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result r0;
        short s0;
        org.w3c.dom.Node r2;
        org.apache.batik.dom.AbstractDocument$XPathExpr r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        r1 := @parameter0: org.apache.batik.dom.AbstractDocument$XPathExpr;

        r2 := @parameter1: org.w3c.dom.Node;

        s0 := @parameter2: short;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.apache.batik.dom.AbstractDocument$XPathExpr this$1> = r1;

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType> = s0;

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.w3c.dom.Node singleNodeValue> = r2;

        return;
    }

    public void <init>(org.apache.batik.dom.AbstractDocument$XPathExpr, boolean) throws javax.xml.transform.TransformerException
    {
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result r0;
        org.apache.batik.dom.AbstractDocument$XPathExpr r1;
        boolean z0;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        r1 := @parameter0: org.apache.batik.dom.AbstractDocument$XPathExpr;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.apache.batik.dom.AbstractDocument$XPathExpr this$1> = r1;

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType> = 3;

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: boolean booleanValue> = z0;

        return;
    }

    public void <init>(org.apache.batik.dom.AbstractDocument$XPathExpr, double) throws javax.xml.transform.TransformerException
    {
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result r0;
        org.apache.batik.dom.AbstractDocument$XPathExpr r1;
        double d0;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        r1 := @parameter0: org.apache.batik.dom.AbstractDocument$XPathExpr;

        d0 := @parameter1: double;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.apache.batik.dom.AbstractDocument$XPathExpr this$1> = r1;

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType> = 1;

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: double numberValue> = d0;

        return;
    }

    public void <init>(org.apache.batik.dom.AbstractDocument$XPathExpr, java.lang.String)
    {
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result r0;
        java.lang.String r2;
        org.apache.batik.dom.AbstractDocument$XPathExpr r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        r1 := @parameter0: org.apache.batik.dom.AbstractDocument$XPathExpr;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.apache.batik.dom.AbstractDocument$XPathExpr this$1> = r1;

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType> = 2;

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: java.lang.String stringValue> = r2;

        return;
    }

    public void <init>(org.apache.batik.dom.AbstractDocument$XPathExpr, org.w3c.dom.NodeList, short)
    {
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result r0;
        short s0;
        org.w3c.dom.NodeList r2;
        org.apache.batik.dom.AbstractDocument$XPathExpr r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        r1 := @parameter0: org.apache.batik.dom.AbstractDocument$XPathExpr;

        r2 := @parameter1: org.w3c.dom.NodeList;

        s0 := @parameter2: short;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.apache.batik.dom.AbstractDocument$XPathExpr this$1> = r1;

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType> = s0;

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.w3c.dom.NodeList iterator> = r2;

        return;
    }

    public short getResultType()
    {
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result r0;
        short $s0;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        $s0 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        return $s0;
    }

    public boolean getBooleanValue()
    {
        java.lang.Object[] $r3;
        org.apache.batik.dom.AbstractDocument $r2;
        org.w3c.dom.xpath.XPathException $r5;
        org.apache.batik.dom.AbstractDocument$XPathExpr $r1;
        java.lang.Integer $r6;
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result r0;
        short $s0, $s1;
        int $i2, $i3;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        $s0 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i2 = (int) $s0;

        if $i2 == 3 goto label1;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.apache.batik.dom.AbstractDocument$XPathExpr this$1>;

        $r2 = staticinvoke <org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument access$000(org.apache.batik.dom.AbstractDocument$XPathExpr)>($r1);

        $r3 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.Integer;

        $s1 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i3 = (int) $s1;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i3);

        $r3[0] = $r6;

        $r5 = virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.xpath.XPathException createXPathException(short,java.lang.String,java.lang.Object[])>(52, "xpath.invalid.result.type", $r3);

        throw $r5;

     label1:
        $z0 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: boolean booleanValue>;

        return $z0;
    }

    public double getNumberValue()
    {
        java.lang.Object[] $r3;
        org.apache.batik.dom.AbstractDocument $r2;
        org.w3c.dom.xpath.XPathException $r5;
        org.apache.batik.dom.AbstractDocument$XPathExpr $r1;
        java.lang.Integer $r6;
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result r0;
        short $s0, $s1;
        int $i2;
        double $d0;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        $s0 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        if $s0 == 1 goto label1;

        $r1 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.apache.batik.dom.AbstractDocument$XPathExpr this$1>;

        $r2 = staticinvoke <org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument access$000(org.apache.batik.dom.AbstractDocument$XPathExpr)>($r1);

        $r3 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.Integer;

        $s1 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i2 = (int) $s1;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>($i2);

        $r3[0] = $r6;

        $r5 = virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.xpath.XPathException createXPathException(short,java.lang.String,java.lang.Object[])>(52, "xpath.invalid.result.type", $r3);

        throw $r5;

     label1:
        $d0 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: double numberValue>;

        return $d0;
    }

    public java.lang.String getStringValue()
    {
        java.lang.Object[] $r4;
        org.apache.batik.dom.AbstractDocument $r3;
        org.w3c.dom.xpath.XPathException $r6;
        org.apache.batik.dom.AbstractDocument$XPathExpr $r2;
        java.lang.Integer $r7;
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result r0;
        short $s0, $s1;
        int $i2, $i3;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        $s0 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i2 = (int) $s0;

        if $i2 == 2 goto label1;

        $r2 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.apache.batik.dom.AbstractDocument$XPathExpr this$1>;

        $r3 = staticinvoke <org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument access$000(org.apache.batik.dom.AbstractDocument$XPathExpr)>($r2);

        $r4 = newarray (java.lang.Object)[1];

        $r7 = new java.lang.Integer;

        $s1 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i3 = (int) $s1;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>($i3);

        $r4[0] = $r7;

        $r6 = virtualinvoke $r3.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.xpath.XPathException createXPathException(short,java.lang.String,java.lang.Object[])>(52, "xpath.invalid.result.type", $r4);

        throw $r6;

     label1:
        $r1 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: java.lang.String stringValue>;

        return $r1;
    }

    public org.w3c.dom.Node getSingleNodeValue()
    {
        java.lang.Object[] $r4;
        org.apache.batik.dom.AbstractDocument $r3;
        org.w3c.dom.xpath.XPathException $r6;
        org.apache.batik.dom.AbstractDocument$XPathExpr $r2;
        java.lang.Integer $r7;
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result r0;
        short $s0, $s1, $s2;
        org.w3c.dom.Node $r1;
        int $i3, $i4, $i5;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        $s0 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i3 = (int) $s0;

        if $i3 == 8 goto label1;

        $s1 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i4 = (int) $s1;

        if $i4 == 9 goto label1;

        $r2 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.apache.batik.dom.AbstractDocument$XPathExpr this$1>;

        $r3 = staticinvoke <org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument access$000(org.apache.batik.dom.AbstractDocument$XPathExpr)>($r2);

        $r4 = newarray (java.lang.Object)[1];

        $r7 = new java.lang.Integer;

        $s2 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i5 = (int) $s2;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>($i5);

        $r4[0] = $r7;

        $r6 = virtualinvoke $r3.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.xpath.XPathException createXPathException(short,java.lang.String,java.lang.Object[])>(52, "xpath.invalid.result.type", $r4);

        throw $r6;

     label1:
        $r1 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.w3c.dom.Node singleNodeValue>;

        return $r1;
    }

    public boolean getInvalidIteratorState()
    {
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result r0;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        return 0;
    }

    public int getSnapshotLength()
    {
        org.w3c.dom.NodeList $r1;
        java.lang.Object[] $r4;
        org.apache.batik.dom.AbstractDocument $r3;
        org.w3c.dom.xpath.XPathException $r6;
        org.apache.batik.dom.AbstractDocument$XPathExpr $r2;
        java.lang.Integer $r7;
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result r0;
        short $s0, $s2, $s3;
        int $i1, $i4, $i5, $i6;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        $s0 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i4 = (int) $s0;

        if $i4 == 6 goto label1;

        $s2 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i5 = (int) $s2;

        if $i5 == 7 goto label1;

        $r2 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.apache.batik.dom.AbstractDocument$XPathExpr this$1>;

        $r3 = staticinvoke <org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument access$000(org.apache.batik.dom.AbstractDocument$XPathExpr)>($r2);

        $r4 = newarray (java.lang.Object)[1];

        $r7 = new java.lang.Integer;

        $s3 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i6 = (int) $s3;

        specialinvoke $r7.<java.lang.Integer: void <init>(int)>($i6);

        $r4[0] = $r7;

        $r6 = virtualinvoke $r3.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.xpath.XPathException createXPathException(short,java.lang.String,java.lang.Object[])>(52, "xpath.invalid.result.type", $r4);

        throw $r6;

     label1:
        $r1 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.w3c.dom.NodeList iterator>;

        $i1 = interfaceinvoke $r1.<org.w3c.dom.NodeList: int getLength()>();

        return $i1;
    }

    public org.w3c.dom.Node iterateNext()
    {
        java.lang.Object[] $r5;
        java.lang.Integer $r8;
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result r0;
        short $s0, $s3, $s4;
        org.w3c.dom.Node $r2;
        int $i1, $i2, $i5, $i6, $i7;
        org.w3c.dom.NodeList $r1;
        org.apache.batik.dom.AbstractDocument $r4;
        org.w3c.dom.xpath.XPathException $r7;
        org.apache.batik.dom.AbstractDocument$XPathExpr $r3;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        $s0 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i5 = (int) $s0;

        if $i5 == 4 goto label1;

        $s3 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i6 = (int) $s3;

        if $i6 == 5 goto label1;

        $r3 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.apache.batik.dom.AbstractDocument$XPathExpr this$1>;

        $r4 = staticinvoke <org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument access$000(org.apache.batik.dom.AbstractDocument$XPathExpr)>($r3);

        $r5 = newarray (java.lang.Object)[1];

        $r8 = new java.lang.Integer;

        $s4 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i7 = (int) $s4;

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>($i7);

        $r5[0] = $r8;

        $r7 = virtualinvoke $r4.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.xpath.XPathException createXPathException(short,java.lang.String,java.lang.Object[])>(52, "xpath.invalid.result.type", $r5);

        throw $r7;

     label1:
        $r1 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.w3c.dom.NodeList iterator>;

        $i1 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: int iteratorPosition>;

        $i2 = $i1 + 1;

        r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: int iteratorPosition> = $i2;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>($i1);

        return $r2;
    }

    public org.w3c.dom.Node snapshotItem(int)
    {
        org.w3c.dom.NodeList $r1;
        java.lang.Object[] $r5;
        org.apache.batik.dom.AbstractDocument $r4;
        org.w3c.dom.xpath.XPathException $r7;
        org.apache.batik.dom.AbstractDocument$XPathExpr $r3;
        java.lang.Integer $r8;
        org.apache.batik.dom.AbstractDocument$XPathExpr$Result r0;
        short $s0, $s2, $s3;
        org.w3c.dom.Node $r2;
        int i1, $i4, $i5, $i6;

        r0 := @this: org.apache.batik.dom.AbstractDocument$XPathExpr$Result;

        i1 := @parameter0: int;

        $s0 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i4 = (int) $s0;

        if $i4 == 6 goto label1;

        $s2 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i5 = (int) $s2;

        if $i5 == 7 goto label1;

        $r3 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.apache.batik.dom.AbstractDocument$XPathExpr this$1>;

        $r4 = staticinvoke <org.apache.batik.dom.AbstractDocument$XPathExpr: org.apache.batik.dom.AbstractDocument access$000(org.apache.batik.dom.AbstractDocument$XPathExpr)>($r3);

        $r5 = newarray (java.lang.Object)[1];

        $r8 = new java.lang.Integer;

        $s3 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: short resultType>;

        $i6 = (int) $s3;

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>($i6);

        $r5[0] = $r8;

        $r7 = virtualinvoke $r4.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.xpath.XPathException createXPathException(short,java.lang.String,java.lang.Object[])>(52, "xpath.invalid.result.type", $r5);

        throw $r7;

     label1:
        $r1 = r0.<org.apache.batik.dom.AbstractDocument$XPathExpr$Result: org.w3c.dom.NodeList iterator>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        return $r2;
    }
}
