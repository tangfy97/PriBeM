public abstract class org.apache.poi.ss.format.CellFormatCondition extends java.lang.Object
{
    private static final int LT;
    private static final int LE;
    private static final int GT;
    private static final int GE;
    private static final int EQ;
    private static final int NE;
    private static final java.util.Map TESTS;

    public void <init>()
    {
        org.apache.poi.ss.format.CellFormatCondition r0;

        r0 := @this: org.apache.poi.ss.format.CellFormatCondition;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.poi.ss.format.CellFormatCondition getInstance(java.lang.String, java.lang.String)
    {
        org.apache.poi.ss.format.CellFormatCondition$4 $r8;
        org.apache.poi.ss.format.CellFormatCondition$3 $r9;
        org.apache.poi.ss.format.CellFormatCondition$2 $r10;
        org.apache.poi.ss.format.CellFormatCondition$1 $r11;
        java.lang.Integer $r4;
        org.apache.poi.ss.format.CellFormatCondition$6 $r6;
        java.util.Map $r1, $r2;
        org.apache.poi.ss.format.CellFormatCondition$5 $r7;
        int $i0;
        java.lang.String r0, r5, $r19, $r24;
        boolean $z0;
        double $d0;
        java.lang.IllegalArgumentException $r12, $r20;
        java.lang.Object $r3;
        java.lang.StringBuilder $r13, $r14, $r15, $r16, $r17, $r18, $r21, $r22, $r23;

        r0 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        $r1 = <org.apache.poi.ss.format.CellFormatCondition: java.util.Map TESTS>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown test: ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label1:
        $r2 = <org.apache.poi.ss.format.CellFormatCondition: java.util.Map TESTS>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (java.lang.Integer) $r3;

        $i0 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r5);

        tableswitch($i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label4;
            case 3: goto label5;
            case 4: goto label6;
            case 5: goto label7;
            default: goto label8;
        };

     label2:
        $r11 = new org.apache.poi.ss.format.CellFormatCondition$1;

        specialinvoke $r11.<org.apache.poi.ss.format.CellFormatCondition$1: void <init>(double)>($d0);

        return $r11;

     label3:
        $r10 = new org.apache.poi.ss.format.CellFormatCondition$2;

        specialinvoke $r10.<org.apache.poi.ss.format.CellFormatCondition$2: void <init>(double)>($d0);

        return $r10;

     label4:
        $r9 = new org.apache.poi.ss.format.CellFormatCondition$3;

        specialinvoke $r9.<org.apache.poi.ss.format.CellFormatCondition$3: void <init>(double)>($d0);

        return $r9;

     label5:
        $r8 = new org.apache.poi.ss.format.CellFormatCondition$4;

        specialinvoke $r8.<org.apache.poi.ss.format.CellFormatCondition$4: void <init>(double)>($d0);

        return $r8;

     label6:
        $r7 = new org.apache.poi.ss.format.CellFormatCondition$5;

        specialinvoke $r7.<org.apache.poi.ss.format.CellFormatCondition$5: void <init>(double)>($d0);

        return $r7;

     label7:
        $r6 = new org.apache.poi.ss.format.CellFormatCondition$6;

        specialinvoke $r6.<org.apache.poi.ss.format.CellFormatCondition$6: void <init>(double)>($d0);

        return $r6;

     label8:
        $r12 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create for test number ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(\"");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r12;
    }

    public abstract boolean pass(double);

    static void <clinit>()
    {
        java.util.HashMap $r0;
        java.lang.Integer $r2, $r4, $r6, $r8, $r10, $r12, $r14, $r16;
        java.util.Map $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15;

        <org.apache.poi.ss.format.CellFormatCondition: int NE> = 5;

        <org.apache.poi.ss.format.CellFormatCondition: int EQ> = 4;

        <org.apache.poi.ss.format.CellFormatCondition: int GE> = 3;

        <org.apache.poi.ss.format.CellFormatCondition: int GT> = 2;

        <org.apache.poi.ss.format.CellFormatCondition: int LE> = 1;

        <org.apache.poi.ss.format.CellFormatCondition: int LT> = 0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.poi.ss.format.CellFormatCondition: java.util.Map TESTS> = $r0;

        $r1 = <org.apache.poi.ss.format.CellFormatCondition: java.util.Map TESTS>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("<", $r2);

        $r3 = <org.apache.poi.ss.format.CellFormatCondition: java.util.Map TESTS>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("<=", $r4);

        $r5 = <org.apache.poi.ss.format.CellFormatCondition: java.util.Map TESTS>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(">", $r6);

        $r7 = <org.apache.poi.ss.format.CellFormatCondition: java.util.Map TESTS>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(">=", $r8);

        $r9 = <org.apache.poi.ss.format.CellFormatCondition: java.util.Map TESTS>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("=", $r10);

        $r11 = <org.apache.poi.ss.format.CellFormatCondition: java.util.Map TESTS>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("==", $r12);

        $r13 = <org.apache.poi.ss.format.CellFormatCondition: java.util.Map TESTS>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("!=", $r14);

        $r15 = <org.apache.poi.ss.format.CellFormatCondition: java.util.Map TESTS>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("<>", $r16);

        return;
    }
}
