public final class com.mycila.inject.internal.guava.collect.HashMultiset extends com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset
{
    private static final long serialVersionUID;

    public static com.mycila.inject.internal.guava.collect.HashMultiset create()
    {
        com.mycila.inject.internal.guava.collect.HashMultiset $r0;

        $r0 = new com.mycila.inject.internal.guava.collect.HashMultiset;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.HashMultiset: void <init>()>();

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.HashMultiset create(int)
    {
        int i0;
        com.mycila.inject.internal.guava.collect.HashMultiset $r0;

        i0 := @parameter0: int;

        $r0 = new com.mycila.inject.internal.guava.collect.HashMultiset;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.HashMultiset: void <init>(int)>(i0);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.HashMultiset create(java.lang.Iterable)
    {
        int $i0;
        java.lang.Iterable r0;
        com.mycila.inject.internal.guava.collect.HashMultiset $r1;

        r0 := @parameter0: java.lang.Iterable;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: int inferDistinctElements(java.lang.Iterable)>(r0);

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.HashMultiset: com.mycila.inject.internal.guava.collect.HashMultiset create(int)>($i0);

        staticinvoke <com.mycila.inject.internal.guava.collect.Iterables: boolean addAll(java.util.Collection,java.lang.Iterable)>($r1, r0);

        return $r1;
    }

    private void <init>()
    {
        java.util.HashMap $r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: void <init>(java.util.Map)>($r1);

        return;
    }

    private void <init>(int)
    {
        int i0;
        java.util.HashMap $r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        i0 := @parameter0: int;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.HashMap newHashMapWithExpectedSize(int)>(i0);

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: void <init>(java.util.Map)>($r1);

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        com.mycila.inject.internal.guava.collect.HashMultiset r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        staticinvoke <com.mycila.inject.internal.guava.collect.Serialization: void writeMultiset(com.mycila.inject.internal.guava.collect.Multiset,java.io.ObjectOutputStream)>(r1, r0);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        int $i0;
        java.util.HashMap $r2;
        com.mycila.inject.internal.guava.collect.HashMultiset r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Serialization: int readCount(java.io.ObjectInputStream)>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Maps: java.util.HashMap newHashMapWithExpectedSize(int)>($i0);

        virtualinvoke r1.<com.mycila.inject.internal.guava.collect.HashMultiset: void setBackingMap(java.util.Map)>($r2);

        staticinvoke <com.mycila.inject.internal.guava.collect.Serialization: void populateMultiset(com.mycila.inject.internal.guava.collect.Multiset,java.io.ObjectInputStream,int)>(r1, r0, $i0);

        return;
    }

    public volatile int setCount(java.lang.Object, int)
    {
        int i0, $i1;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: int setCount(java.lang.Object,int)>(r1, i0);

        return $i1;
    }

    public volatile int remove(java.lang.Object, int)
    {
        int i0, $i1;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: int remove(java.lang.Object,int)>(r1, i0);

        return $i1;
    }

    public volatile int add(java.lang.Object, int)
    {
        int i0, $i1;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: int add(java.lang.Object,int)>(r1, i0);

        return $i1;
    }

    public volatile int count(java.lang.Object)
    {
        int $i0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        r1 := @parameter0: java.lang.Object;

        $i0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: int count(java.lang.Object)>(r1);

        return $i0;
    }

    public volatile java.util.Iterator iterator()
    {
        java.util.Iterator $r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Iterator iterator()>();

        return $r1;
    }

    public volatile int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        $i0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: int size()>();

        return $i0;
    }

    public volatile void clear()
    {
        com.mycila.inject.internal.guava.collect.HashMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: void clear()>();

        return;
    }

    public volatile java.util.Set entrySet()
    {
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Set entrySet()>();

        return $r1;
    }

    public volatile java.lang.String toString()
    {
        java.lang.String $r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.lang.String toString()>();

        return $r1;
    }

    public volatile int hashCode()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        $i0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: int hashCode()>();

        return $i0;
    }

    public volatile boolean equals(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile java.util.Set elementSet()
    {
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Set elementSet()>();

        return $r1;
    }

    public volatile boolean retainAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.HashMultiset r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: boolean retainAll(java.util.Collection)>(r1);

        return $z0;
    }

    public volatile boolean removeAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.HashMultiset r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: boolean removeAll(java.util.Collection)>(r1);

        return $z0;
    }

    public volatile boolean addAll(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.HashMultiset r0;
        java.util.Collection r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        r1 := @parameter0: java.util.Collection;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: boolean addAll(java.util.Collection)>(r1);

        return $z0;
    }

    public volatile boolean setCount(java.lang.Object, int, int)
    {
        int i0, i1;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: boolean setCount(java.lang.Object,int,int)>(r1, i0, i1);

        return $z0;
    }

    public volatile boolean remove(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: boolean remove(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile boolean add(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: boolean add(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile boolean contains(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.HashMultiset r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public volatile boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.HashMultiset r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.HashMultiset;

        $z0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: boolean isEmpty()>();

        return $z0;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.HashMultiset: long serialVersionUID> = 0L;

        return;
    }
}
