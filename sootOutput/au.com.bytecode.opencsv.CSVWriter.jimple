public class au.com.bytecode.opencsv.CSVWriter extends java.lang.Object implements java.io.Closeable
{
    public static final int INITIAL_STRING_SIZE;
    private java.io.Writer rawWriter;
    private java.io.PrintWriter pw;
    private char separator;
    private char quotechar;
    private char escapechar;
    private java.lang.String lineEnd;
    public static final char DEFAULT_ESCAPE_CHARACTER;
    public static final char DEFAULT_SEPARATOR;
    public static final char DEFAULT_QUOTE_CHARACTER;
    public static final char NO_QUOTE_CHARACTER;
    public static final char NO_ESCAPE_CHARACTER;
    public static final java.lang.String DEFAULT_LINE_END;

    public void <init>(java.io.Writer)
    {
        java.io.Writer r1;
        au.com.bytecode.opencsv.CSVWriter r0;

        r0 := @this: au.com.bytecode.opencsv.CSVWriter;

        r1 := @parameter0: java.io.Writer;

        specialinvoke r0.<au.com.bytecode.opencsv.CSVWriter: void <init>(java.io.Writer,char)>(r1, 44);

        return;
    }

    public void <init>(java.io.Writer, char)
    {
        java.io.Writer r1;
        char c0;
        au.com.bytecode.opencsv.CSVWriter r0;

        r0 := @this: au.com.bytecode.opencsv.CSVWriter;

        r1 := @parameter0: java.io.Writer;

        c0 := @parameter1: char;

        specialinvoke r0.<au.com.bytecode.opencsv.CSVWriter: void <init>(java.io.Writer,char,char)>(r1, c0, 34);

        return;
    }

    public void <init>(java.io.Writer, char, char)
    {
        au.com.bytecode.opencsv.CSVWriter r0;
        java.io.Writer r1;
        char c0, c1;

        r0 := @this: au.com.bytecode.opencsv.CSVWriter;

        r1 := @parameter0: java.io.Writer;

        c0 := @parameter1: char;

        c1 := @parameter2: char;

        specialinvoke r0.<au.com.bytecode.opencsv.CSVWriter: void <init>(java.io.Writer,char,char,char)>(r1, c0, c1, 34);

        return;
    }

    public void <init>(java.io.Writer, char, char, char)
    {
        au.com.bytecode.opencsv.CSVWriter r0;
        java.io.Writer r1;
        char c0, c1, c2;

        r0 := @this: au.com.bytecode.opencsv.CSVWriter;

        r1 := @parameter0: java.io.Writer;

        c0 := @parameter1: char;

        c1 := @parameter2: char;

        c2 := @parameter3: char;

        specialinvoke r0.<au.com.bytecode.opencsv.CSVWriter: void <init>(java.io.Writer,char,char,char,java.lang.String)>(r1, c0, c1, c2, "\n");

        return;
    }

    public void <init>(java.io.Writer, char, char, java.lang.String)
    {
        au.com.bytecode.opencsv.CSVWriter r0;
        java.io.Writer r1;
        char c0, c1;
        java.lang.String r2;

        r0 := @this: au.com.bytecode.opencsv.CSVWriter;

        r1 := @parameter0: java.io.Writer;

        c0 := @parameter1: char;

        c1 := @parameter2: char;

        r2 := @parameter3: java.lang.String;

        specialinvoke r0.<au.com.bytecode.opencsv.CSVWriter: void <init>(java.io.Writer,char,char,char,java.lang.String)>(r1, c0, c1, 34, r2);

        return;
    }

    public void <init>(java.io.Writer, char, char, char, java.lang.String)
    {
        java.io.PrintWriter $r2;
        au.com.bytecode.opencsv.CSVWriter r0;
        java.io.Writer r1;
        char c0, c1, c2;
        java.lang.String r3;

        r0 := @this: au.com.bytecode.opencsv.CSVWriter;

        r1 := @parameter0: java.io.Writer;

        c0 := @parameter1: char;

        c1 := @parameter2: char;

        c2 := @parameter3: char;

        r3 := @parameter4: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<au.com.bytecode.opencsv.CSVWriter: java.io.Writer rawWriter> = r1;

        $r2 = new java.io.PrintWriter;

        specialinvoke $r2.<java.io.PrintWriter: void <init>(java.io.Writer)>(r1);

        r0.<au.com.bytecode.opencsv.CSVWriter: java.io.PrintWriter pw> = $r2;

        r0.<au.com.bytecode.opencsv.CSVWriter: char separator> = c0;

        r0.<au.com.bytecode.opencsv.CSVWriter: char quotechar> = c1;

        r0.<au.com.bytecode.opencsv.CSVWriter: char escapechar> = c2;

        r0.<au.com.bytecode.opencsv.CSVWriter: java.lang.String lineEnd> = r3;

        return;
    }

    public void writeAll(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        au.com.bytecode.opencsv.CSVWriter r4;
        java.lang.Object $r2;
        java.lang.String[] r3;
        boolean $z0;

        r4 := @this: au.com.bytecode.opencsv.CSVWriter;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String[]) $r2;

        virtualinvoke r4.<au.com.bytecode.opencsv.CSVWriter: void writeNext(java.lang.String[])>(r3);

        goto label1;

     label2:
        return;
    }

    protected void writeColumnNames(java.sql.ResultSetMetaData) throws java.sql.SQLException
    {
        au.com.bytecode.opencsv.CSVWriter r2;
        int $i0, $i1, i2;
        java.lang.String[] r1;
        java.lang.String $r3;
        java.sql.ResultSetMetaData r0;

        r2 := @this: au.com.bytecode.opencsv.CSVWriter;

        r0 := @parameter0: java.sql.ResultSetMetaData;

        $i0 = interfaceinvoke r0.<java.sql.ResultSetMetaData: int getColumnCount()>();

        r1 = newarray (java.lang.String)[$i0];

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $i1 = i2 + 1;

        $r3 = interfaceinvoke r0.<java.sql.ResultSetMetaData: java.lang.String getColumnName(int)>($i1);

        r1[i2] = $r3;

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r2.<au.com.bytecode.opencsv.CSVWriter: void writeNext(java.lang.String[])>(r1);

        return;
    }

    public void writeAll(java.sql.ResultSet, boolean) throws java.sql.SQLException, java.io.IOException
    {
        au.com.bytecode.opencsv.CSVWriter r3;
        java.lang.String[] r2;
        java.sql.ResultSet r0;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r4;
        java.sql.ResultSetMetaData $r1;
        boolean z0, $z1;

        r3 := @this: au.com.bytecode.opencsv.CSVWriter;

        r0 := @parameter0: java.sql.ResultSet;

        z0 := @parameter1: boolean;

        $r1 = interfaceinvoke r0.<java.sql.ResultSet: java.sql.ResultSetMetaData getMetaData()>();

        if z0 == 0 goto label1;

        virtualinvoke r3.<au.com.bytecode.opencsv.CSVWriter: void writeColumnNames(java.sql.ResultSetMetaData)>($r1);

     label1:
        $i0 = interfaceinvoke $r1.<java.sql.ResultSetMetaData: int getColumnCount()>();

     label2:
        $z1 = interfaceinvoke r0.<java.sql.ResultSet: boolean next()>();

        if $z1 == 0 goto label5;

        r2 = newarray (java.lang.String)[$i0];

        i4 = 0;

     label3:
        if i4 >= $i0 goto label4;

        $i1 = i4 + 1;

        $i2 = interfaceinvoke $r1.<java.sql.ResultSetMetaData: int getColumnType(int)>($i1);

        $i3 = i4 + 1;

        $r4 = staticinvoke <au.com.bytecode.opencsv.CSVWriter: java.lang.String getColumnValue(java.sql.ResultSet,int,int)>(r0, $i2, $i3);

        r2[i4] = $r4;

        i4 = i4 + 1;

        goto label3;

     label4:
        virtualinvoke r3.<au.com.bytecode.opencsv.CSVWriter: void writeNext(java.lang.String[])>(r2);

        goto label2;

     label5:
        return;
    }

    private static java.lang.String getColumnValue(java.sql.ResultSet, int, int) throws java.sql.SQLException, java.io.IOException
    {
        java.sql.Time $r5;
        java.text.SimpleDateFormat $r4, $r7;
        long $l2;
        java.math.BigDecimal $r9;
        java.sql.ResultSet r0;
        int i0, i1, $i3;
        java.lang.Boolean $r8;
        java.lang.String r11;
        java.sql.Clob $r1;
        boolean $z0, $z1, $z2, $z3;
        java.sql.Timestamp $r3;
        java.sql.Date $r6;
        java.lang.Object $r2, $r10;

        r0 := @parameter0: java.sql.ResultSet;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r11 = "";

        lookupswitch(i0)
        {
            case -7: goto label01;
            case -6: goto label06;
            case -5: goto label04;
            case -1: goto label11;
            case 1: goto label11;
            case 2: goto label05;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label06;
            case 6: goto label05;
            case 7: goto label05;
            case 8: goto label05;
            case 12: goto label11;
            case 16: goto label02;
            case 91: goto label08;
            case 92: goto label09;
            case 93: goto label10;
            case 2000: goto label07;
            case 2005: goto label03;
            default: goto label12;
        };

     label01:
        $r10 = interfaceinvoke r0.<java.sql.ResultSet: java.lang.Object getObject(int)>(i1);

        if $r10 == null goto label13;

        r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r10);

        goto label13;

     label02:
        $z0 = interfaceinvoke r0.<java.sql.ResultSet: boolean getBoolean(int)>(i1);

        $z1 = interfaceinvoke r0.<java.sql.ResultSet: boolean wasNull()>();

        if $z1 != 0 goto label13;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r11 = virtualinvoke $r8.<java.lang.Boolean: java.lang.String toString()>();

        goto label13;

     label03:
        $r1 = interfaceinvoke r0.<java.sql.ResultSet: java.sql.Clob getClob(int)>(i1);

        if $r1 == null goto label13;

        r11 = staticinvoke <au.com.bytecode.opencsv.CSVWriter: java.lang.String read(java.sql.Clob)>($r1);

        goto label13;

     label04:
        $l2 = interfaceinvoke r0.<java.sql.ResultSet: long getLong(int)>(i1);

        $z2 = interfaceinvoke r0.<java.sql.ResultSet: boolean wasNull()>();

        if $z2 != 0 goto label13;

        r11 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l2);

        goto label13;

     label05:
        $r9 = interfaceinvoke r0.<java.sql.ResultSet: java.math.BigDecimal getBigDecimal(int)>(i1);

        if $r9 == null goto label13;

        r11 = virtualinvoke $r9.<java.math.BigDecimal: java.lang.String toString()>();

        goto label13;

     label06:
        $i3 = interfaceinvoke r0.<java.sql.ResultSet: int getInt(int)>(i1);

        $z3 = interfaceinvoke r0.<java.sql.ResultSet: boolean wasNull()>();

        if $z3 != 0 goto label13;

        r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

        goto label13;

     label07:
        $r2 = interfaceinvoke r0.<java.sql.ResultSet: java.lang.Object getObject(int)>(i1);

        if $r2 == null goto label13;

        r11 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r2);

        goto label13;

     label08:
        $r6 = interfaceinvoke r0.<java.sql.ResultSet: java.sql.Date getDate(int)>(i1);

        if $r6 == null goto label13;

        $r7 = new java.text.SimpleDateFormat;

        specialinvoke $r7.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("dd-MMM-yyyy");

        r11 = virtualinvoke $r7.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r6);

        goto label13;

     label09:
        $r5 = interfaceinvoke r0.<java.sql.ResultSet: java.sql.Time getTime(int)>(i1);

        if $r5 == null goto label13;

        r11 = virtualinvoke $r5.<java.sql.Time: java.lang.String toString()>();

        goto label13;

     label10:
        $r3 = interfaceinvoke r0.<java.sql.ResultSet: java.sql.Timestamp getTimestamp(int)>(i1);

        if $r3 == null goto label13;

        $r4 = new java.text.SimpleDateFormat;

        specialinvoke $r4.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("dd-MMM-yyyy HH:mm:ss");

        r11 = virtualinvoke $r4.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r3);

        goto label13;

     label11:
        r11 = interfaceinvoke r0.<java.sql.ResultSet: java.lang.String getString(int)>(i1);

        goto label13;

     label12:
        r11 = "";

     label13:
        if r11 != null goto label14;

        r11 = "";

     label14:
        return r11;
    }

    private static java.lang.String read(java.sql.Clob) throws java.sql.SQLException, java.io.IOException
    {
        long $l0;
        java.io.Reader $r2;
        int $i1, $i2, $i3, $i5;
        char[] r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r4;
        java.sql.Clob r1;

        r1 := @parameter0: java.sql.Clob;

        $r5 = new java.lang.StringBuilder;

        $l0 = interfaceinvoke r1.<java.sql.Clob: long length()>();

        $i1 = (int) $l0;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>($i1);

        $r2 = interfaceinvoke r1.<java.sql.Clob: java.io.Reader getCharacterStream()>();

        r3 = newarray (char)[2048];

     label1:
        $i2 = lengthof r3;

        $i3 = virtualinvoke $r2.<java.io.Reader: int read(char[],int,int)>(r3, 0, $i2);

        $i5 = (int) -1;

        if $i3 == $i5 goto label2;

        if $i3 <= 0 goto label1;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>(r3, 0, $i3);

        goto label1;

     label2:
        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public void writeNext(java.lang.String[])
    {
        java.lang.String[] r0;
        int $i0, i6;
        java.lang.String $r3, $r5, $r6;
        boolean $z0;
        java.io.PrintWriter $r4;
        java.lang.CharSequence $r7;
        au.com.bytecode.opencsv.CSVWriter r2;
        char $c1, $c2, $c3, $c4, $c5;
        java.lang.StringBuilder $r1;

        r2 := @this: au.com.bytecode.opencsv.CSVWriter;

        r0 := @parameter0: java.lang.String[];

        if r0 != null goto label1;

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(128);

        i6 = 0;

     label2:
        $i0 = lengthof r0;

        if i6 >= $i0 goto label9;

        if i6 == 0 goto label3;

        $c5 = r2.<au.com.bytecode.opencsv.CSVWriter: char separator>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

     label3:
        $r6 = r0[i6];

        if $r6 != null goto label4;

        goto label8;

     label4:
        $c1 = r2.<au.com.bytecode.opencsv.CSVWriter: char quotechar>;

        if $c1 == 0 goto label5;

        $c4 = r2.<au.com.bytecode.opencsv.CSVWriter: char quotechar>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

     label5:
        $z0 = specialinvoke r2.<au.com.bytecode.opencsv.CSVWriter: boolean stringContainsSpecialCharacters(java.lang.String)>($r6);

        if $z0 == 0 goto label6;

        $r7 = specialinvoke r2.<au.com.bytecode.opencsv.CSVWriter: java.lang.StringBuilder processLine(java.lang.String)>($r6);

        goto label7;

     label6:
        $r7 = $r6;

     label7:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r7);

        $c2 = r2.<au.com.bytecode.opencsv.CSVWriter: char quotechar>;

        if $c2 == 0 goto label8;

        $c3 = r2.<au.com.bytecode.opencsv.CSVWriter: char quotechar>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

     label8:
        i6 = i6 + 1;

        goto label2;

     label9:
        $r3 = r2.<au.com.bytecode.opencsv.CSVWriter: java.lang.String lineEnd>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r4 = r2.<au.com.bytecode.opencsv.CSVWriter: java.io.PrintWriter pw>;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<java.io.PrintWriter: void write(java.lang.String)>($r5);

        return;
    }

    private boolean stringContainsSpecialCharacters(java.lang.String)
    {
        au.com.bytecode.opencsv.CSVWriter r1;
        char $c0, $c2;
        int $i1, $i3, $i4, $i6, $i7, $i9;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: au.com.bytecode.opencsv.CSVWriter;

        r0 := @parameter0: java.lang.String;

        $c0 = r1.<au.com.bytecode.opencsv.CSVWriter: char quotechar>;

        $i4 = (int) $c0;

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>($i4);

        $i6 = (int) -1;

        if $i1 != $i6 goto label1;

        $c2 = r1.<au.com.bytecode.opencsv.CSVWriter: char escapechar>;

        $i7 = (int) $c2;

        $i3 = virtualinvoke r0.<java.lang.String: int indexOf(int)>($i7);

        $i9 = (int) -1;

        if $i3 == $i9 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private java.lang.StringBuilder processLine(java.lang.String)
    {
        int $i0, i8, $i9, $i10, $i11, $i12;
        java.lang.String r1;
        au.com.bytecode.opencsv.CSVWriter r2;
        char $c1, $c2, $c3, $c4, $c5, $c6, $c7;
        java.lang.StringBuilder $r3, $r4, $r5;

        r2 := @this: au.com.bytecode.opencsv.CSVWriter;

        r1 := @parameter0: java.lang.String;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>(128);

        i8 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i8 >= $i0 goto label5;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i8);

        $c2 = r2.<au.com.bytecode.opencsv.CSVWriter: char escapechar>;

        if $c2 == 0 goto label2;

        $c6 = r2.<au.com.bytecode.opencsv.CSVWriter: char quotechar>;

        $i9 = (int) $c1;

        $i10 = (int) $c6;

        if $i9 != $i10 goto label2;

        $c7 = r2.<au.com.bytecode.opencsv.CSVWriter: char escapechar>;

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label4;

     label2:
        $c3 = r2.<au.com.bytecode.opencsv.CSVWriter: char escapechar>;

        if $c3 == 0 goto label3;

        $c4 = r2.<au.com.bytecode.opencsv.CSVWriter: char escapechar>;

        $i11 = (int) $c1;

        $i12 = (int) $c4;

        if $i11 != $i12 goto label3;

        $c5 = r2.<au.com.bytecode.opencsv.CSVWriter: char escapechar>;

        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label4;

     label3:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

     label4:
        i8 = i8 + 1;

        goto label1;

     label5:
        return $r5;
    }

    public void flush() throws java.io.IOException
    {
        java.io.PrintWriter $r1;
        au.com.bytecode.opencsv.CSVWriter r0;

        r0 := @this: au.com.bytecode.opencsv.CSVWriter;

        $r1 = r0.<au.com.bytecode.opencsv.CSVWriter: java.io.PrintWriter pw>;

        virtualinvoke $r1.<java.io.PrintWriter: void flush()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.PrintWriter $r1, $r2;
        au.com.bytecode.opencsv.CSVWriter r0;
        java.io.Writer $r3;

        r0 := @this: au.com.bytecode.opencsv.CSVWriter;

        $r1 = r0.<au.com.bytecode.opencsv.CSVWriter: java.io.PrintWriter pw>;

        virtualinvoke $r1.<java.io.PrintWriter: void flush()>();

        $r2 = r0.<au.com.bytecode.opencsv.CSVWriter: java.io.PrintWriter pw>;

        virtualinvoke $r2.<java.io.PrintWriter: void close()>();

        $r3 = r0.<au.com.bytecode.opencsv.CSVWriter: java.io.Writer rawWriter>;

        virtualinvoke $r3.<java.io.Writer: void close()>();

        return;
    }

    public static void <clinit>()
    {
        <au.com.bytecode.opencsv.CSVWriter: java.lang.String DEFAULT_LINE_END> = "\n";

        <au.com.bytecode.opencsv.CSVWriter: char NO_ESCAPE_CHARACTER> = 0;

        <au.com.bytecode.opencsv.CSVWriter: char NO_QUOTE_CHARACTER> = 0;

        <au.com.bytecode.opencsv.CSVWriter: char DEFAULT_QUOTE_CHARACTER> = 34;

        <au.com.bytecode.opencsv.CSVWriter: char DEFAULT_SEPARATOR> = 44;

        <au.com.bytecode.opencsv.CSVWriter: char DEFAULT_ESCAPE_CHARACTER> = 34;

        <au.com.bytecode.opencsv.CSVWriter: int INITIAL_STRING_SIZE> = 128;

        return;
    }
}
