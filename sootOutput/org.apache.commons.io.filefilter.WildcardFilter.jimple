public class org.apache.commons.io.filefilter.WildcardFilter extends org.apache.commons.io.filefilter.AbstractFileFilter implements java.io.Serializable
{
    private final java.lang.String[] wildcards;

    public void <init>(java.lang.String)
    {
        org.apache.commons.io.filefilter.WildcardFilter r0;
        java.lang.String[] $r2;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.io.filefilter.WildcardFilter;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The wildcard must not be null");

        throw $r3;

     label1:
        $r2 = newarray (java.lang.String)[1];

        $r2[0] = r1;

        r0.<org.apache.commons.io.filefilter.WildcardFilter: java.lang.String[] wildcards> = $r2;

        return;
    }

    public void <init>(java.lang.String[])
    {
        org.apache.commons.io.filefilter.WildcardFilter r0;
        int $i0, $i1;
        java.lang.String[] r1, $r2, $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.io.filefilter.WildcardFilter;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The wildcard array must not be null");

        throw $r4;

     label1:
        $i0 = lengthof r1;

        $r2 = newarray (java.lang.String)[$i0];

        r0.<org.apache.commons.io.filefilter.WildcardFilter: java.lang.String[] wildcards> = $r2;

        $r3 = r0.<org.apache.commons.io.filefilter.WildcardFilter: java.lang.String[] wildcards>;

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, $i1);

        return;
    }

    public void <init>(java.util.List)
    {
        java.util.List r1;
        java.lang.Object[] $r3;
        org.apache.commons.io.filefilter.WildcardFilter r0;
        int $i0;
        java.lang.String[] $r2, $r4;
        java.lang.IllegalArgumentException $r5;

        r0 := @this: org.apache.commons.io.filefilter.WildcardFilter;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.apache.commons.io.filefilter.AbstractFileFilter: void <init>()>();

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The wildcard list must not be null");

        throw $r5;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = newarray (java.lang.String)[$i0];

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.String[]) $r3;

        r0.<org.apache.commons.io.filefilter.WildcardFilter: java.lang.String[] wildcards> = $r4;

        return;
    }

    public boolean accept(java.io.File, java.lang.String)
    {
        java.lang.String[] $r5;
        java.io.File r0, $r4;
        org.apache.commons.io.filefilter.WildcardFilter r1;
        int $i0, i1;
        java.lang.String r2, r3;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.io.filefilter.WildcardFilter;

        r0 := @parameter0: java.io.File;

        r3 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        $r4 = new java.io.File;

        specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r0, r3);

        $z1 = virtualinvoke $r4.<java.io.File: boolean isDirectory()>();

        if $z1 == 0 goto label1;

        return 0;

     label1:
        $r5 = r1.<org.apache.commons.io.filefilter.WildcardFilter: java.lang.String[] wildcards>;

        $i0 = lengthof $r5;

        i1 = 0;

     label2:
        if i1 >= $i0 goto label4;

        r2 = $r5[i1];

        $z0 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String)>(r3, r2);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public boolean accept(java.io.File)
    {
        java.lang.String[] r2;
        java.io.File r0;
        org.apache.commons.io.filefilter.WildcardFilter r1;
        int i0, i1;
        java.lang.String r3, $r4;
        boolean $z0, $z1;

        r1 := @this: org.apache.commons.io.filefilter.WildcardFilter;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        r2 = r1.<org.apache.commons.io.filefilter.WildcardFilter: java.lang.String[] wildcards>;

        i0 = lengthof r2;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r3 = r2[i1];

        $r4 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        $z1 = staticinvoke <org.apache.commons.io.FilenameUtils: boolean wildcardMatch(java.lang.String,java.lang.String)>($r4, r3);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }
}
