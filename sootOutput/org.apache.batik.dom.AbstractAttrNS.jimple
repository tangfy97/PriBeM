public abstract class org.apache.batik.dom.AbstractAttrNS extends org.apache.batik.dom.AbstractAttr
{
    protected java.lang.String namespaceURI;

    protected void <init>()
    {
        org.apache.batik.dom.AbstractAttrNS r0;

        r0 := @this: org.apache.batik.dom.AbstractAttrNS;

        specialinvoke r0.<org.apache.batik.dom.AbstractAttr: void <init>()>();

        return;
    }

    protected void <init>(java.lang.String, java.lang.String, org.apache.batik.dom.AbstractDocument) throws org.w3c.dom.DOMException
    {
        java.lang.Object[] $r5, $r15;
        java.lang.Integer $r19, $r20;
        short $s0, $s2;
        org.w3c.dom.DOMException $r8, $r18;
        org.apache.batik.dom.AbstractAttrNS r0;
        int $i1, $i3, $i4;
        java.lang.String r1, $r3, $r4, $r7, $r9, $r10, $r11, $r12, r13, $r14, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.batik.dom.AbstractDocument r2;

        r0 := @this: org.apache.batik.dom.AbstractAttrNS;

        r13 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractAttr: void <init>(java.lang.String,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        if r13 == null goto label1;

        $i1 = virtualinvoke r13.<java.lang.String: int length()>();

        if $i1 != 0 goto label1;

        r13 = null;

     label1:
        r0.<org.apache.batik.dom.AbstractAttrNS: java.lang.String namespaceURI> = r13;

        $r14 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: java.lang.String getPrefix(java.lang.String)>(r1);

        $z6 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: boolean getStrictErrorChecking()>();

        if $z6 != 0 goto label2;

        return;

     label2:
        if $r14 == null goto label5;

        if r13 == null goto label4;

        $r9 = "xml";

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z2 == 0 goto label3;

        $r12 = "http://www.w3.org/XML/1998/namespace";

        $z5 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z5 == 0 goto label4;

     label3:
        $r10 = "xmlns";

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z3 == 0 goto label6;

        $r11 = "http://www.w3.org/2000/xmlns/";

        $z4 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z4 != 0 goto label6;

     label4:
        $r15 = newarray (java.lang.Object)[3];

        $r19 = new java.lang.Integer;

        $s2 = virtualinvoke r0.<org.apache.batik.dom.AbstractAttr: short getNodeType()>();

        $i3 = (int) $s2;

        specialinvoke $r19.<java.lang.Integer: void <init>(int)>($i3);

        $r15[0] = $r19;

        $r17 = virtualinvoke r0.<org.apache.batik.dom.AbstractAttr: java.lang.String getNodeName()>();

        $r15[1] = $r17;

        $r15[2] = r13;

        $r18 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(14, "namespace.uri", $r15);

        throw $r18;

     label5:
        $r3 = "xmlns";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label6;

        $r4 = "http://www.w3.org/2000/xmlns/";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z1 != 0 goto label6;

        $r5 = newarray (java.lang.Object)[3];

        $r20 = new java.lang.Integer;

        $s0 = virtualinvoke r0.<org.apache.batik.dom.AbstractAttr: short getNodeType()>();

        $i4 = (int) $s0;

        specialinvoke $r20.<java.lang.Integer: void <init>(int)>($i4);

        $r5[0] = $r20;

        $r7 = virtualinvoke r0.<org.apache.batik.dom.AbstractAttr: java.lang.String getNodeName()>();

        $r5[1] = $r7;

        $r5[2] = r13;

        $r8 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(14, "namespace.uri", $r5);

        throw $r8;

     label6:
        return;
    }

    public java.lang.String getNamespaceURI()
    {
        org.apache.batik.dom.AbstractAttrNS r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractAttrNS;

        $r1 = r0.<org.apache.batik.dom.AbstractAttrNS: java.lang.String namespaceURI>;

        return $r1;
    }

    protected org.w3c.dom.Node export(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractAttrNS r0, r3;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String $r4;

        r0 := @this: org.apache.batik.dom.AbstractAttrNS;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractAttr: org.w3c.dom.Node export(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r3 = (org.apache.batik.dom.AbstractAttrNS) r1;

        $r4 = r0.<org.apache.batik.dom.AbstractAttrNS: java.lang.String namespaceURI>;

        r3.<org.apache.batik.dom.AbstractAttrNS: java.lang.String namespaceURI> = $r4;

        return r1;
    }

    protected org.w3c.dom.Node deepExport(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractAttrNS r0, r3;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String $r4;

        r0 := @this: org.apache.batik.dom.AbstractAttrNS;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractAttr: org.w3c.dom.Node deepExport(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r3 = (org.apache.batik.dom.AbstractAttrNS) r1;

        $r4 = r0.<org.apache.batik.dom.AbstractAttrNS: java.lang.String namespaceURI>;

        r3.<org.apache.batik.dom.AbstractAttrNS: java.lang.String namespaceURI> = $r4;

        return r1;
    }

    protected org.w3c.dom.Node copyInto(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractAttrNS r0, r2;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.dom.AbstractAttrNS;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractAttr: org.w3c.dom.Node copyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.AbstractAttrNS) r1;

        $r3 = r0.<org.apache.batik.dom.AbstractAttrNS: java.lang.String namespaceURI>;

        r2.<org.apache.batik.dom.AbstractAttrNS: java.lang.String namespaceURI> = $r3;

        return r1;
    }

    protected org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)
    {
        org.w3c.dom.Node r1;
        org.apache.batik.dom.AbstractAttrNS r0, r2;
        java.lang.String $r3;

        r0 := @this: org.apache.batik.dom.AbstractAttrNS;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractAttr: org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.AbstractAttrNS) r1;

        $r3 = r0.<org.apache.batik.dom.AbstractAttrNS: java.lang.String namespaceURI>;

        r2.<org.apache.batik.dom.AbstractAttrNS: java.lang.String namespaceURI> = $r3;

        return r1;
    }
}
