public class org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver extends org.codehaus.jackson.map.jsontype.impl.TypeIdResolverBase
{
    protected final org.codehaus.jackson.map.MapperConfig _config;
    protected final java.util.HashMap _typeToId;
    protected final java.util.HashMap _idToType;

    protected void <init>(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, java.util.HashMap, java.util.HashMap)
    {
        org.codehaus.jackson.map.type.TypeFactory $r3;
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r0;
        org.codehaus.jackson.type.JavaType r1;
        java.util.HashMap r4, r5;
        org.codehaus.jackson.map.MapperConfig r2;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        r2 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r4 := @parameter2: java.util.HashMap;

        r5 := @parameter3: java.util.HashMap;

        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.type.TypeFactory getTypeFactory()>();

        specialinvoke r0.<org.codehaus.jackson.map.jsontype.impl.TypeIdResolverBase: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.type.TypeFactory)>(r1, $r3);

        r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: org.codehaus.jackson.map.MapperConfig _config> = r2;

        r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _typeToId> = r4;

        r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _idToType> = r5;

        return;
    }

    public static org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver construct(org.codehaus.jackson.map.MapperConfig, org.codehaus.jackson.type.JavaType, java.util.Collection, boolean, boolean)
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver $r1;
        java.util.HashMap $r14, $r15, r17, r18;
        org.codehaus.jackson.map.jsontype.NamedType r6;
        org.codehaus.jackson.type.JavaType r3, r10, $r11;
        java.lang.String r8, $r13, $r19;
        boolean z0, z1, $z2, $z3, $z4;
        java.util.Iterator $r4;
        java.util.Collection r0;
        org.codehaus.jackson.map.MapperConfig r2;
        java.lang.IllegalArgumentException $r16;
        java.lang.Object $r5, $r9;
        java.lang.Class $r7, $r12;

        r2 := @parameter0: org.codehaus.jackson.map.MapperConfig;

        r3 := @parameter1: org.codehaus.jackson.type.JavaType;

        r0 := @parameter2: java.util.Collection;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        if z0 != z1 goto label01;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r16;

     label01:
        r17 = null;

        r18 = null;

        if z0 == 0 goto label02;

        $r15 = new java.util.HashMap;

        specialinvoke $r15.<java.util.HashMap: void <init>()>();

        r17 = $r15;

     label02:
        if z1 == 0 goto label03;

        $r14 = new java.util.HashMap;

        specialinvoke $r14.<java.util.HashMap: void <init>()>();

        r18 = $r14;

     label03:
        if r0 == null goto label10;

        $r4 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label10;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.codehaus.jackson.map.jsontype.NamedType) $r5;

        $r7 = virtualinvoke r6.<org.codehaus.jackson.map.jsontype.NamedType: java.lang.Class getType()>();

        $z2 = virtualinvoke r6.<org.codehaus.jackson.map.jsontype.NamedType: boolean hasName()>();

        if $z2 == 0 goto label05;

        $r19 = virtualinvoke r6.<org.codehaus.jackson.map.jsontype.NamedType: java.lang.String getName()>();

        goto label06;

     label05:
        $r19 = staticinvoke <org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.lang.String _defaultTypeId(java.lang.Class)>($r7);

     label06:
        r8 = $r19;

        if z0 == 0 goto label07;

        $r13 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r19);

     label07:
        if z1 == 0 goto label09;

        $r9 = virtualinvoke r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r8);

        r10 = (org.codehaus.jackson.type.JavaType) $r9;

        if r10 == null goto label08;

        $r12 = virtualinvoke r10.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z3 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r12);

        if $z3 == 0 goto label08;

        goto label04;

     label08:
        $r11 = virtualinvoke r2.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.type.JavaType constructType(java.lang.Class)>($r7);

        virtualinvoke r18.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r11);

     label09:
        goto label04;

     label10:
        $r1 = new org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        specialinvoke $r1.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: void <init>(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.type.JavaType,java.util.HashMap,java.util.HashMap)>(r2, r3, r17, r18);

        return $r1;
    }

    public org.codehaus.jackson.annotate.JsonTypeInfo$Id getMechanism()
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r1;
        org.codehaus.jackson.annotate.JsonTypeInfo$Id $r0;

        r1 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        $r0 = <org.codehaus.jackson.annotate.JsonTypeInfo$Id: org.codehaus.jackson.annotate.JsonTypeInfo$Id NAME>;

        return $r0;
    }

    public java.lang.String idFromValue(java.lang.Object)
    {
        java.lang.Throwable $r15;
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r3;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r11;
        java.util.HashMap $r4, $r5, $r8;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r14;
        java.lang.String $r2, r16;
        boolean $z0;
        org.codehaus.jackson.map.MapperConfig $r7, $r9, $r12;
        org.codehaus.jackson.map.AnnotationIntrospector $r13;
        java.lang.Object r0, $r6;
        java.lang.Class $r1;
        org.codehaus.jackson.map.BeanDescription $r10;

        r3 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        r0 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r4 = r3.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _typeToId>;

        entermonitor $r4;

     label1:
        $r5 = r3.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _typeToId>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        r16 = (java.lang.String) $r6;

        if r16 != null goto label4;

        $r7 = r3.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: org.codehaus.jackson.map.MapperConfig _config>;

        $z0 = virtualinvoke $r7.<org.codehaus.jackson.map.MapperConfig: boolean isAnnotationProcessingEnabled()>();

        if $z0 == 0 goto label2;

        $r9 = r3.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: org.codehaus.jackson.map.MapperConfig _config>;

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)>($r1);

        r11 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r10;

        $r12 = r3.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: org.codehaus.jackson.map.MapperConfig _config>;

        $r13 = virtualinvoke $r12.<org.codehaus.jackson.map.MapperConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r14 = virtualinvoke r11.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        r16 = virtualinvoke $r13.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String findTypeName(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r14);

     label2:
        if r16 != null goto label3;

        r16 = staticinvoke <org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.lang.String _defaultTypeId(java.lang.Class)>($r1);

     label3:
        $r8 = r3.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _typeToId>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r16);

     label4:
        exitmonitor $r4;

     label5:
        goto label8;

     label6:
        $r15 := @caughtexception;

        exitmonitor $r4;

     label7:
        throw $r15;

     label8:
        return r16;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public java.lang.String idFromValueAndType(java.lang.Object, java.lang.Class)
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r0;
        java.lang.Object r1;
        java.lang.Class r3;
        java.lang.String $r2;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Class;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.lang.String idFromValue(java.lang.Object)>(r1);

        return $r2;
    }

    public org.codehaus.jackson.type.JavaType typeFromId(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r0;
        org.codehaus.jackson.type.JavaType r4;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _idToType>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.codehaus.jackson.type.JavaType) $r3;

        return r4;
    }

    public java.lang.String toString()
    {
        org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver r2;
        java.util.HashMap $r6;
        java.lang.StringBuilder $r0, $r1, $r5;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;

        r2 := @this: org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; id-to-type=");

        $r6 = r2.<org.codehaus.jackson.map.jsontype.impl.TypeNameIdResolver: java.util.HashMap _idToType>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    protected static java.lang.String _defaultTypeId(java.lang.Class)
    {
        int $i0, $i1;
        java.lang.Class r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 >= 0 goto label1;

        $r2 = $r1;

        goto label2;

     label1:
        $i1 = $i0 + 1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

     label2:
        return $r2;
    }
}
