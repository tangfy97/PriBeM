public class org.tukaani.xz.XZOutputStream extends org.tukaani.xz.FinishableOutputStream
{
    private java.io.OutputStream out;
    private final org.tukaani.xz.common.StreamFlags streamFlags;
    private final org.tukaani.xz.check.Check check;
    private final org.tukaani.xz.index.IndexEncoder index;
    private org.tukaani.xz.BlockOutputStream blockEncoder;
    private org.tukaani.xz.FilterEncoder[] filters;
    private boolean filtersSupportFlushing;
    private java.io.IOException exception;
    private boolean finished;
    private final byte[] tempBuf;

    public void <init>(java.io.OutputStream, org.tukaani.xz.FilterOptions) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.tukaani.xz.XZOutputStream r0;
        org.tukaani.xz.FilterOptions r2;

        r0 := @this: org.tukaani.xz.XZOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: org.tukaani.xz.FilterOptions;

        specialinvoke r0.<org.tukaani.xz.XZOutputStream: void <init>(java.io.OutputStream,org.tukaani.xz.FilterOptions,int)>(r1, r2, 4);

        return;
    }

    public void <init>(java.io.OutputStream, org.tukaani.xz.FilterOptions, int) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.tukaani.xz.FilterOptions[] $r2;
        org.tukaani.xz.FilterOptions r3;
        int i0;
        org.tukaani.xz.XZOutputStream r0;

        r0 := @this: org.tukaani.xz.XZOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: org.tukaani.xz.FilterOptions;

        i0 := @parameter2: int;

        $r2 = newarray (org.tukaani.xz.FilterOptions)[1];

        $r2[0] = r3;

        specialinvoke r0.<org.tukaani.xz.XZOutputStream: void <init>(java.io.OutputStream,org.tukaani.xz.FilterOptions[],int)>(r1, $r2, i0);

        return;
    }

    public void <init>(java.io.OutputStream, org.tukaani.xz.FilterOptions[]) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.tukaani.xz.XZOutputStream r0;
        org.tukaani.xz.FilterOptions[] r2;

        r0 := @this: org.tukaani.xz.XZOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: org.tukaani.xz.FilterOptions[];

        specialinvoke r0.<org.tukaani.xz.XZOutputStream: void <init>(java.io.OutputStream,org.tukaani.xz.FilterOptions[],int)>(r1, r2, 4);

        return;
    }

    public void <init>(java.io.OutputStream, org.tukaani.xz.FilterOptions[], int) throws java.io.IOException
    {
        java.io.OutputStream r4;
        byte[] $r3;
        org.tukaani.xz.check.Check $r7;
        org.tukaani.xz.common.StreamFlags $r1, $r6;
        org.tukaani.xz.FilterOptions[] r5;
        org.tukaani.xz.index.IndexEncoder $r2;
        int i0;
        org.tukaani.xz.XZOutputStream r0;

        r0 := @this: org.tukaani.xz.XZOutputStream;

        r4 := @parameter0: java.io.OutputStream;

        r5 := @parameter1: org.tukaani.xz.FilterOptions[];

        i0 := @parameter2: int;

        specialinvoke r0.<org.tukaani.xz.FinishableOutputStream: void <init>()>();

        $r1 = new org.tukaani.xz.common.StreamFlags;

        specialinvoke $r1.<org.tukaani.xz.common.StreamFlags: void <init>()>();

        r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.common.StreamFlags streamFlags> = $r1;

        $r2 = new org.tukaani.xz.index.IndexEncoder;

        specialinvoke $r2.<org.tukaani.xz.index.IndexEncoder: void <init>()>();

        r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.index.IndexEncoder index> = $r2;

        r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder> = null;

        r0.<org.tukaani.xz.XZOutputStream: java.io.IOException exception> = null;

        r0.<org.tukaani.xz.XZOutputStream: boolean finished> = 0;

        $r3 = newarray (byte)[1];

        r0.<org.tukaani.xz.XZOutputStream: byte[] tempBuf> = $r3;

        r0.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out> = r4;

        virtualinvoke r0.<org.tukaani.xz.XZOutputStream: void updateFilters(org.tukaani.xz.FilterOptions[])>(r5);

        $r6 = r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.common.StreamFlags streamFlags>;

        $r6.<org.tukaani.xz.common.StreamFlags: int checkType> = i0;

        $r7 = staticinvoke <org.tukaani.xz.check.Check: org.tukaani.xz.check.Check getInstance(int)>(i0);

        r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.check.Check check> = $r7;

        specialinvoke r0.<org.tukaani.xz.XZOutputStream: void encodeStreamHeader()>();

        return;
    }

    public void updateFilters(org.tukaani.xz.FilterOptions) throws org.tukaani.xz.XZIOException
    {
        org.tukaani.xz.XZOutputStream r2;
        org.tukaani.xz.FilterOptions[] r0;
        org.tukaani.xz.FilterOptions r1;

        r2 := @this: org.tukaani.xz.XZOutputStream;

        r1 := @parameter0: org.tukaani.xz.FilterOptions;

        r0 = newarray (org.tukaani.xz.FilterOptions)[1];

        r0[0] = r1;

        virtualinvoke r2.<org.tukaani.xz.XZOutputStream: void updateFilters(org.tukaani.xz.FilterOptions[])>(r0);

        return;
    }

    public void updateFilters(org.tukaani.xz.FilterOptions[]) throws org.tukaani.xz.XZIOException
    {
        org.tukaani.xz.FilterOptions[] r2;
        org.tukaani.xz.FilterEncoder $r6, $r7;
        org.tukaani.xz.FilterOptions $r5;
        int $i0, $i1, $i2, $i3, i4;
        boolean $z0, $z1, $z2;
        org.tukaani.xz.BlockOutputStream $r1;
        org.tukaani.xz.UnsupportedOptionsException $r3, $r8;
        org.tukaani.xz.XZOutputStream r0;
        org.tukaani.xz.FilterEncoder[] r4;

        r0 := @this: org.tukaani.xz.XZOutputStream;

        r2 := @parameter0: org.tukaani.xz.FilterOptions[];

        $r1 = r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder>;

        if $r1 == null goto label1;

        $r8 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r8.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>("Changing filter options in the middle of a XZ Block not implemented");

        throw $r8;

     label1:
        $i0 = lengthof r2;

        if $i0 < 1 goto label2;

        $i1 = lengthof r2;

        if $i1 <= 4 goto label3;

     label2:
        $r3 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r3.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>("XZ filter chain must be 1-4 filters");

        throw $r3;

     label3:
        r0.<org.tukaani.xz.XZOutputStream: boolean filtersSupportFlushing> = 1;

        $i2 = lengthof r2;

        r4 = newarray (org.tukaani.xz.FilterEncoder)[$i2];

        i4 = 0;

     label4:
        $i3 = lengthof r2;

        if i4 >= $i3 goto label5;

        $r5 = r2[i4];

        $r6 = virtualinvoke $r5.<org.tukaani.xz.FilterOptions: org.tukaani.xz.FilterEncoder getFilterEncoder()>();

        r4[i4] = $r6;

        $z0 = r0.<org.tukaani.xz.XZOutputStream: boolean filtersSupportFlushing>;

        $r7 = r4[i4];

        $z1 = interfaceinvoke $r7.<org.tukaani.xz.FilterEncoder: boolean supportsFlushing()>();

        $z2 = $z0 & $z1;

        r0.<org.tukaani.xz.XZOutputStream: boolean filtersSupportFlushing> = $z2;

        i4 = i4 + 1;

        goto label4;

     label5:
        staticinvoke <org.tukaani.xz.RawCoder: void validate(org.tukaani.xz.FilterCoder[])>(r4);

        r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.FilterEncoder[] filters> = r4;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        byte[] $r1, $r2;
        byte $b1;
        int i0;
        org.tukaani.xz.XZOutputStream r0;

        r0 := @this: org.tukaani.xz.XZOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.XZOutputStream: byte[] tempBuf>;

        $b1 = (byte) i0;

        $r1[0] = $b1;

        $r2 = r0.<org.tukaani.xz.XZOutputStream: byte[] tempBuf>;

        virtualinvoke r0.<org.tukaani.xz.XZOutputStream: void write(byte[],int,int)>($r2, 0, 1);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r0;
        java.lang.IndexOutOfBoundsException $r12;
        org.tukaani.xz.check.Check $r6;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0;
        java.io.OutputStream $r8;
        java.io.IOException $r2, $r10, $r11;
        org.tukaani.xz.BlockOutputStream $r3, $r4, $r5;
        org.tukaani.xz.XZIOException $r9;
        org.tukaani.xz.XZOutputStream r1;
        org.tukaani.xz.FilterEncoder[] $r7;

        r1 := @this: org.tukaani.xz.XZOutputStream;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        $i2 = i0 + i1;

        if $i2 < 0 goto label1;

        $i4 = i0 + i1;

        $i3 = lengthof r0;

        if $i4 <= $i3 goto label2;

     label1:
        $r12 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r12.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r12;

     label2:
        $r2 = r1.<org.tukaani.xz.XZOutputStream: java.io.IOException exception>;

        if $r2 == null goto label3;

        $r10 = r1.<org.tukaani.xz.XZOutputStream: java.io.IOException exception>;

        throw $r10;

     label3:
        $z0 = r1.<org.tukaani.xz.XZOutputStream: boolean finished>;

        if $z0 == 0 goto label4;

        $r9 = new org.tukaani.xz.XZIOException;

        specialinvoke $r9.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream finished or closed");

        throw $r9;

     label4:
        $r3 = r1.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder>;

        if $r3 != null goto label5;

        $r5 = new org.tukaani.xz.BlockOutputStream;

        $r8 = r1.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        $r7 = r1.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.FilterEncoder[] filters>;

        $r6 = r1.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.check.Check check>;

        specialinvoke $r5.<org.tukaani.xz.BlockOutputStream: void <init>(java.io.OutputStream,org.tukaani.xz.FilterEncoder[],org.tukaani.xz.check.Check)>($r8, $r7, $r6);

        r1.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder> = $r5;

     label5:
        $r4 = r1.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder>;

        virtualinvoke $r4.<org.tukaani.xz.BlockOutputStream: void write(byte[],int,int)>(r0, i0, i1);

     label6:
        goto label8;

     label7:
        $r11 := @caughtexception;

        r1.<org.tukaani.xz.XZOutputStream: java.io.IOException exception> = $r11;

        throw $r11;

     label8:
        return;

        catch java.io.IOException from label4 to label6 with label7;
    }

    public void endBlock() throws java.io.IOException
    {
        java.io.IOException $r1, $r8, $r9;
        long $l0, $l1;
        org.tukaani.xz.BlockOutputStream $r2, $r3, $r4, $r6;
        org.tukaani.xz.XZIOException $r7;
        org.tukaani.xz.index.IndexEncoder $r5;
        org.tukaani.xz.XZOutputStream r0;
        boolean $z0;

        r0 := @this: org.tukaani.xz.XZOutputStream;

        $r1 = r0.<org.tukaani.xz.XZOutputStream: java.io.IOException exception>;

        if $r1 == null goto label1;

        $r8 = r0.<org.tukaani.xz.XZOutputStream: java.io.IOException exception>;

        throw $r8;

     label1:
        $z0 = r0.<org.tukaani.xz.XZOutputStream: boolean finished>;

        if $z0 == 0 goto label2;

        $r7 = new org.tukaani.xz.XZIOException;

        specialinvoke $r7.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream finished or closed");

        throw $r7;

     label2:
        $r2 = r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder>;

        if $r2 == null goto label6;

     label3:
        $r3 = r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder>;

        virtualinvoke $r3.<org.tukaani.xz.BlockOutputStream: void finish()>();

        $r5 = r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.index.IndexEncoder index>;

        $r4 = r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder>;

        $l0 = virtualinvoke $r4.<org.tukaani.xz.BlockOutputStream: long getUnpaddedSize()>();

        $r6 = r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder>;

        $l1 = virtualinvoke $r6.<org.tukaani.xz.BlockOutputStream: long getUncompressedSize()>();

        virtualinvoke $r5.<org.tukaani.xz.index.IndexEncoder: void add(long,long)>($l0, $l1);

        r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder> = null;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        r0.<org.tukaani.xz.XZOutputStream: java.io.IOException exception> = $r9;

        throw $r9;

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public void flush() throws java.io.IOException
    {
        java.io.OutputStream $r3, $r4;
        java.io.IOException $r1, $r7, $r8;
        org.tukaani.xz.BlockOutputStream $r2, $r5;
        org.tukaani.xz.XZIOException $r6;
        org.tukaani.xz.XZOutputStream r0;
        boolean $z0, $z1;

        r0 := @this: org.tukaani.xz.XZOutputStream;

        $r1 = r0.<org.tukaani.xz.XZOutputStream: java.io.IOException exception>;

        if $r1 == null goto label1;

        $r7 = r0.<org.tukaani.xz.XZOutputStream: java.io.IOException exception>;

        throw $r7;

     label1:
        $z0 = r0.<org.tukaani.xz.XZOutputStream: boolean finished>;

        if $z0 == 0 goto label2;

        $r6 = new org.tukaani.xz.XZIOException;

        specialinvoke $r6.<org.tukaani.xz.XZIOException: void <init>(java.lang.String)>("Stream finished or closed");

        throw $r6;

     label2:
        $r2 = r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder>;

        if $r2 == null goto label4;

        $z1 = r0.<org.tukaani.xz.XZOutputStream: boolean filtersSupportFlushing>;

        if $z1 == 0 goto label3;

        $r5 = r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.BlockOutputStream blockEncoder>;

        virtualinvoke $r5.<org.tukaani.xz.BlockOutputStream: void flush()>();

        goto label5;

     label3:
        virtualinvoke r0.<org.tukaani.xz.XZOutputStream: void endBlock()>();

        $r4 = r0.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        virtualinvoke $r4.<java.io.OutputStream: void flush()>();

        goto label5;

     label4:
        $r3 = r0.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        virtualinvoke $r3.<java.io.OutputStream: void flush()>();

     label5:
        goto label7;

     label6:
        $r8 := @caughtexception;

        r0.<org.tukaani.xz.XZOutputStream: java.io.IOException exception> = $r8;

        throw $r8;

     label7:
        return;

        catch java.io.IOException from label2 to label5 with label6;
    }

    public void finish() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        org.tukaani.xz.index.IndexEncoder $r2;
        java.io.IOException $r3;
        org.tukaani.xz.XZOutputStream r0;
        boolean $z0;

        r0 := @this: org.tukaani.xz.XZOutputStream;

        $z0 = r0.<org.tukaani.xz.XZOutputStream: boolean finished>;

        if $z0 != 0 goto label5;

        virtualinvoke r0.<org.tukaani.xz.XZOutputStream: void endBlock()>();

     label1:
        $r2 = r0.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.index.IndexEncoder index>;

        $r1 = r0.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        virtualinvoke $r2.<org.tukaani.xz.index.IndexEncoder: void encode(java.io.OutputStream)>($r1);

        specialinvoke r0.<org.tukaani.xz.XZOutputStream: void encodeStreamFooter()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r0.<org.tukaani.xz.XZOutputStream: java.io.IOException exception> = $r3;

        throw $r3;

     label4:
        r0.<org.tukaani.xz.XZOutputStream: boolean finished> = 1;

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void close() throws java.io.IOException
    {
        java.io.OutputStream $r1, $r3;
        java.io.IOException $r2, $r4, $r5, $r6, $r7;
        org.tukaani.xz.XZOutputStream r0;

        r0 := @this: org.tukaani.xz.XZOutputStream;

        $r1 = r0.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        if $r1 == null goto label8;

     label1:
        virtualinvoke r0.<org.tukaani.xz.XZOutputStream: void finish()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        $r3 = r0.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        virtualinvoke $r3.<java.io.OutputStream: void close()>();

     label5:
        goto label7;

     label6:
        $r4 := @caughtexception;

        $r5 = r0.<org.tukaani.xz.XZOutputStream: java.io.IOException exception>;

        if $r5 != null goto label7;

        r0.<org.tukaani.xz.XZOutputStream: java.io.IOException exception> = $r4;

     label7:
        r0.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out> = null;

     label8:
        $r7 = r0.<org.tukaani.xz.XZOutputStream: java.io.IOException exception>;

        if $r7 == null goto label9;

        $r2 = r0.<org.tukaani.xz.XZOutputStream: java.io.IOException exception>;

        throw $r2;

     label9:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    private void encodeStreamFlags(byte[], int)
    {
        byte[] r0;
        byte $b2;
        org.tukaani.xz.common.StreamFlags $r2;
        int i0, $i1, $i3;
        org.tukaani.xz.XZOutputStream r1;

        r1 := @this: org.tukaani.xz.XZOutputStream;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r0[i0] = 0;

        $i3 = i0 + 1;

        $r2 = r1.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.common.StreamFlags streamFlags>;

        $i1 = $r2.<org.tukaani.xz.common.StreamFlags: int checkType>;

        $b2 = (byte) $i1;

        r0[$i3] = $b2;

        return;
    }

    private void encodeStreamHeader() throws java.io.IOException
    {
        java.io.OutputStream $r2, $r4, $r5;
        byte[] $r1, r3;
        org.tukaani.xz.XZOutputStream r0;

        r0 := @this: org.tukaani.xz.XZOutputStream;

        $r2 = r0.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        $r1 = <org.tukaani.xz.XZ: byte[] HEADER_MAGIC>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[])>($r1);

        r3 = newarray (byte)[2];

        specialinvoke r0.<org.tukaani.xz.XZOutputStream: void encodeStreamFlags(byte[],int)>(r3, 0);

        $r4 = r0.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>(r3);

        $r5 = r0.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        staticinvoke <org.tukaani.xz.common.EncoderUtil: void writeCRC32(java.io.OutputStream,byte[])>($r5, r3);

        return;
    }

    private void encodeStreamFooter() throws java.io.IOException
    {
        java.io.OutputStream $r3, $r4, $r6;
        byte[] r0, $r5;
        long $l0, $l1, l2, $l4;
        byte $b6;
        org.tukaani.xz.index.IndexEncoder $r2;
        int $i3, $i5, i7;
        org.tukaani.xz.XZOutputStream r1;

        r1 := @this: org.tukaani.xz.XZOutputStream;

        r0 = newarray (byte)[6];

        $r2 = r1.<org.tukaani.xz.XZOutputStream: org.tukaani.xz.index.IndexEncoder index>;

        $l0 = virtualinvoke $r2.<org.tukaani.xz.index.IndexEncoder: long getIndexSize()>();

        $l1 = $l0 / 4L;

        l2 = $l1 - 1L;

        i7 = 0;

     label1:
        if i7 >= 4 goto label2;

        $i3 = i7 * 8;

        $l4 = l2 >>> $i3;

        $i5 = (int) $l4;

        $b6 = (byte) $i5;

        r0[i7] = $b6;

        i7 = i7 + 1;

        goto label1;

     label2:
        specialinvoke r1.<org.tukaani.xz.XZOutputStream: void encodeStreamFlags(byte[],int)>(r0, 4);

        $r3 = r1.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        staticinvoke <org.tukaani.xz.common.EncoderUtil: void writeCRC32(java.io.OutputStream,byte[])>($r3, r0);

        $r4 = r1.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>(r0);

        $r6 = r1.<org.tukaani.xz.XZOutputStream: java.io.OutputStream out>;

        $r5 = <org.tukaani.xz.XZ: byte[] FOOTER_MAGIC>;

        virtualinvoke $r6.<java.io.OutputStream: void write(byte[])>($r5);

        return;
    }
}
