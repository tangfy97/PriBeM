public final class org.codehaus.jackson.map.util.ClassUtil extends java.lang.Object
{

    public void <init>()
    {
        org.codehaus.jackson.map.util.ClassUtil r0;

        r0 := @this: org.codehaus.jackson.map.util.ClassUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List findSuperTypes(java.lang.Class, java.lang.Class)
    {
        java.util.List $r3;
        java.lang.Class r0, r1;
        java.util.ArrayList $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(8);

        $r3 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.util.List findSuperTypes(java.lang.Class,java.lang.Class,java.util.List)>(r0, r1, $r2);

        return $r3;
    }

    public static java.util.List findSuperTypes(java.lang.Class, java.lang.Class, java.util.List)
    {
        java.lang.Class r0, r1;
        java.util.List r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.util.List;

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: void _addSuperTypes(java.lang.Class,java.lang.Class,java.util.Collection,boolean)>(r0, r1, r2, 0);

        return r2;
    }

    private static void _addSuperTypes(java.lang.Class, java.lang.Class, java.util.Collection, boolean)
    {
        java.util.Collection r4;
        java.lang.Class[] $r2;
        int $i0, i1;
        java.lang.Class r0, r1, $r3, r5;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r4 := @parameter2: java.util.Collection;

        z0 := @parameter3: boolean;

        if r0 == r1 goto label1;

        if r0 == null goto label1;

        if r0 != class "Ljava/lang/Object;" goto label2;

     label1:
        return;

     label2:
        if z0 == 0 goto label4;

        $z1 = interfaceinvoke r4.<java.util.Collection: boolean contains(java.lang.Object)>(r0);

        if $z1 == 0 goto label3;

        return;

     label3:
        interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>(r0);

     label4:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        $i0 = lengthof $r2;

        i1 = 0;

     label5:
        if i1 >= $i0 goto label6;

        r5 = $r2[i1];

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: void _addSuperTypes(java.lang.Class,java.lang.Class,java.util.Collection,boolean)>(r5, r1, r4, 1);

        i1 = i1 + 1;

        goto label5;

     label6:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: void _addSuperTypes(java.lang.Class,java.lang.Class,java.util.Collection,boolean)>($r3, r1, r4, 1);

        return;
    }

    public static java.lang.String canBeABeanType(java.lang.Class)
    {
        java.lang.Class r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAnnotation()>();

        if $z0 == 0 goto label1;

        return "annotation";

     label1:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label2;

        return "array";

     label2:
        $z2 = virtualinvoke r0.<java.lang.Class: boolean isEnum()>();

        if $z2 == 0 goto label3;

        return "enum";

     label3:
        $z3 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z3 == 0 goto label4;

        return "primitive";

     label4:
        return null;
    }

    public static java.lang.String isLocalType(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.String isLocalType(java.lang.Class,boolean)>(r0, 0);

        return $r1;
    }

    public static java.lang.String isLocalType(java.lang.Class, boolean)
    {
        java.lang.NullPointerException $r3;
        int $i0;
        java.lang.Class r0, $r2;
        java.lang.SecurityException $r4;
        java.lang.reflect.Method $r1;
        boolean z0, $z1;

        r0 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>();

        if $r1 == null goto label3;

     label2:
        return "local/anonymous";

     label3:
        if z0 != 0 goto label5;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r2 == null goto label5;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z1 != 0 goto label5;

     label4:
        return "non-static member class";

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        goto label8;

     label7:
        $r3 := @caughtexception;

     label8:
        return null;

        catch java.lang.SecurityException from label1 to label2 with label6;
        catch java.lang.SecurityException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label7;
    }

    public static java.lang.Class getOuterClass(java.lang.Class)
    {
        int $i0;
        java.lang.Class r0, $r2;
        java.lang.SecurityException $r4;
        java.lang.reflect.Method $r1;
        java.lang.NullPointerException $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getEnclosingMethod()>();

        if $r1 == null goto label3;

     label2:
        return null;

     label3:
        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 != 0 goto label5;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>();

     label4:
        return $r2;

     label5:
        goto label8;

     label6:
        $r4 := @caughtexception;

        goto label8;

     label7:
        $r3 := @caughtexception;

     label8:
        return null;

        catch java.lang.SecurityException from label1 to label2 with label6;
        catch java.lang.SecurityException from label3 to label4 with label6;
        catch java.lang.NullPointerException from label1 to label2 with label7;
        catch java.lang.NullPointerException from label3 to label4 with label7;
    }

    public static boolean isProxyType(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("net.sf.cglib.proxy.");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("org.hibernate.proxy.");

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isConcrete(java.lang.Class)
    {
        int $i0, $i1;
        java.lang.Class r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $i1 = $i0 & 1536;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isConcrete(java.lang.reflect.Member)
    {
        java.lang.reflect.Member r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Member;

        $i0 = interfaceinvoke r0.<java.lang.reflect.Member: int getModifiers()>();

        $i1 = $i0 & 1536;

        if $i1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isCollectionMapOrArray(java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = class "Ljava/util/Collection;";

        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $r2 = class "Ljava/util/Map;";

        $z2 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public static java.lang.String getClassDescription(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r2;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return "unknown";

     label1:
        $z0 = r0 instanceof java.lang.Class;

        if $z0 == 0 goto label2;

        $r2 = (java.lang.Class) r0;

        goto label3;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label3:
        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        return $r1;
    }

    public static java.lang.Class findClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.Thread $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Exception $r23, $r27;
        java.lang.ClassLoader $r2;
        java.lang.Throwable r28;
        int $i0;
        java.lang.String r0, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r25;
        java.lang.RuntimeException $r26;
        java.lang.Class $r3, $r4, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        java.lang.ClassNotFoundException $r24;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46);

        if $i0 >= 0 goto label09;

        $r5 = "int";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label01;

        $r22 = <java.lang.Integer: java.lang.Class TYPE>;

        return $r22;

     label01:
        $r6 = "long";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label02;

        $r21 = <java.lang.Long: java.lang.Class TYPE>;

        return $r21;

     label02:
        $r7 = "float";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label03;

        $r20 = <java.lang.Float: java.lang.Class TYPE>;

        return $r20;

     label03:
        $r8 = "double";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z3 == 0 goto label04;

        $r19 = <java.lang.Double: java.lang.Class TYPE>;

        return $r19;

     label04:
        $r9 = "boolean";

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z4 == 0 goto label05;

        $r18 = <java.lang.Boolean: java.lang.Class TYPE>;

        return $r18;

     label05:
        $r10 = "byte";

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z5 == 0 goto label06;

        $r17 = <java.lang.Byte: java.lang.Class TYPE>;

        return $r17;

     label06:
        $r11 = "char";

        $z6 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z6 == 0 goto label07;

        $r16 = <java.lang.Character: java.lang.Class TYPE>;

        return $r16;

     label07:
        $r12 = "short";

        $z7 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z7 == 0 goto label08;

        $r15 = <java.lang.Short: java.lang.Class TYPE>;

        return $r15;

     label08:
        $r13 = "void";

        $z8 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z8 == 0 goto label09;

        $r14 = <java.lang.Void: java.lang.Class TYPE>;

        return $r14;

     label09:
        r28 = null;

        $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r2 = virtualinvoke $r1.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if $r2 == null goto label13;

     label10:
        $r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, 1, $r2);

     label11:
        return $r4;

     label12:
        $r27 := @caughtexception;

        r28 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Throwable getRootCause(java.lang.Throwable)>($r27);

     label13:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label14:
        return $r3;

     label15:
        $r23 := @caughtexception;

        if r28 != null goto label16;

        r28 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Throwable getRootCause(java.lang.Throwable)>($r23);

     label16:
        $z9 = r28 instanceof java.lang.RuntimeException;

        if $z9 == 0 goto label17;

        $r26 = (java.lang.RuntimeException) r28;

        throw $r26;

     label17:
        $r24 = new java.lang.ClassNotFoundException;

        $r25 = virtualinvoke r28.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r24.<java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)>($r25, r28);

        throw $r24;

        catch java.lang.Exception from label10 to label11 with label12;
        catch java.lang.Exception from label13 to label14 with label15;
    }

    public static boolean hasGetterSignature(java.lang.reflect.Method)
    {
        int $i0, $i1;
        java.lang.Class[] $r1;
        java.lang.Class $r2, $r3;
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        if $r1 == null goto label2;

        $i1 = lengthof $r1;

        if $i1 == 0 goto label2;

        return 0;

     label2:
        $r2 = <java.lang.Void: java.lang.Class TYPE>;

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        if $r2 != $r3 goto label3;

        return 0;

     label3:
        return 1;
    }

    public static java.lang.Throwable getRootCause(java.lang.Throwable)
    {
        java.lang.Throwable $r0, r1;

        r1 := @parameter0: java.lang.Throwable;

     label1:
        $r0 = virtualinvoke r1.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r0 == null goto label2;

        r1 = virtualinvoke r1.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label1;

     label2:
        return r1;
    }

    public static void throwRootCause(java.lang.Throwable) throws java.lang.Exception
    {
        java.lang.Throwable $r0, r3;
        java.lang.Error $r1;
        java.lang.Exception $r2;
        boolean $z0;

        r3 := @parameter0: java.lang.Throwable;

        $r0 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Throwable getRootCause(java.lang.Throwable)>(r3);

        $z0 = $r0 instanceof java.lang.Exception;

        if $z0 == 0 goto label1;

        $r2 = (java.lang.Exception) $r0;

        throw $r2;

     label1:
        $r1 = (java.lang.Error) $r0;

        throw $r1;
    }

    public static void throwAsIAE(java.lang.Throwable)
    {
        java.lang.Throwable r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.String getMessage()>();

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: void throwAsIAE(java.lang.Throwable,java.lang.String)>(r0, $r1);

        return;
    }

    public static void throwAsIAE(java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable r0;
        java.lang.Error $r3;
        java.lang.String r2;
        java.lang.RuntimeException $r4;
        java.lang.IllegalArgumentException $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Throwable;

        r2 := @parameter1: java.lang.String;

        $z0 = r0 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label1;

        $r4 = (java.lang.RuntimeException) r0;

        throw $r4;

     label1:
        $z1 = r0 instanceof java.lang.Error;

        if $z1 == 0 goto label2;

        $r3 = (java.lang.Error) r0;

        throw $r3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>(r2, r0);

        throw $r1;
    }

    public static void unwrapAndThrowAsIAE(java.lang.Throwable)
    {
        java.lang.Throwable r0, $r1;

        r0 := @parameter0: java.lang.Throwable;

        $r1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Throwable getRootCause(java.lang.Throwable)>(r0);

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: void throwAsIAE(java.lang.Throwable)>($r1);

        return;
    }

    public static void unwrapAndThrowAsIAE(java.lang.Throwable, java.lang.String)
    {
        java.lang.Throwable r0, $r1;
        java.lang.String r2;

        r0 := @parameter0: java.lang.Throwable;

        r2 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Throwable getRootCause(java.lang.Throwable)>(r0);

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: void throwAsIAE(java.lang.Throwable,java.lang.String)>($r1, r2);

        return;
    }

    public static java.lang.Object createInstance(java.lang.Class, boolean) throws java.lang.IllegalArgumentException
    {
        java.lang.Object[] $r2;
        java.lang.reflect.Constructor $r1;
        java.lang.String $r7, $r10, $r14, $r17, $r19;
        boolean z0;
        java.lang.IllegalArgumentException $r4;
        java.lang.Exception $r11;
        java.lang.Class r0;
        java.lang.Object $r3;
        java.lang.StringBuilder $r5, $r6, $r8, $r9, $r12, $r13, $r15, $r16, $r18;

        r0 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

        $r1 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.reflect.Constructor findConstructor(java.lang.Class,boolean)>(r0, z0);

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no default (no arg) constructor");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        $r2 = newarray (java.lang.Object)[0];

        $r3 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r2);

     label2:
        return $r3;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to instantiate class ");

        $r14 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", problem: ");

        $r17 = virtualinvoke $r11.<java.lang.Exception: java.lang.String getMessage()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: void unwrapAndThrowAsIAE(java.lang.Throwable,java.lang.String)>($r11, $r19);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.reflect.Constructor findConstructor(java.lang.Class, boolean) throws java.lang.IllegalArgumentException
    {
        java.lang.NoSuchMethodException $r19;
        java.lang.reflect.Constructor $r2;
        int $i0;
        java.lang.String $r6, $r9, $r13, $r16, $r18;
        boolean z0, $z1;
        java.lang.Class[] $r1;
        java.lang.IllegalArgumentException $r3;
        java.lang.Exception $r10;
        java.lang.Class r0;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r11, $r12, $r14, $r15, $r17;

        r0 := @parameter0: java.lang.Class;

        z0 := @parameter1: boolean;

     label1:
        $r1 = newarray (java.lang.Class)[0];

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

        if z0 == 0 goto label2;

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: void checkAndFixAccess(java.lang.reflect.Member)>($r2);

        goto label3;

     label2:
        $i0 = virtualinvoke $r2.<java.lang.reflect.Constructor: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z1 != 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Default constructor for ");

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not accessible (non-public?): not allowed to try modify access via Reflection: can not instantiate type");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label3:
        return $r2;

     label4:
        $r19 := @caughtexception;

        goto label6;

     label5:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find default constructor of class ");

        $r13 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", problem: ");

        $r16 = virtualinvoke $r10.<java.lang.Exception: java.lang.String getMessage()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.codehaus.jackson.map.util.ClassUtil: void unwrapAndThrowAsIAE(java.lang.Throwable,java.lang.String)>($r10, $r18);

     label6:
        return null;

        catch java.lang.NoSuchMethodException from label1 to label3 with label4;
        catch java.lang.Exception from label1 to label3 with label5;
    }

    public static java.lang.Object defaultValue(java.lang.Class)
    {
        java.lang.Float $r19;
        java.lang.Double $r20;
        java.lang.Integer $r23;
        java.lang.Character $r16;
        java.lang.Long $r22;
        java.lang.Short $r17;
        java.lang.Boolean $r21;
        java.lang.String $r12, $r15;
        java.lang.Byte $r18;
        java.lang.IllegalArgumentException $r9;
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.StringBuilder $r10, $r11, $r13, $r14;

        r0 := @parameter0: java.lang.Class;

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r1 goto label1;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        return $r23;

     label1:
        $r2 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r2 goto label2;

        $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        return $r22;

     label2:
        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r3 goto label3;

        $r21 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r21;

     label3:
        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r4 goto label4;

        $r20 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        return $r20;

     label4:
        $r5 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r5 goto label5;

        $r19 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        return $r19;

     label5:
        $r6 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r6 goto label6;

        $r18 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(0);

        return $r18;

     label6:
        $r7 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r7 goto label7;

        $r17 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(0);

        return $r17;

     label7:
        $r8 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r8 goto label8;

        $r16 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(0);

        return $r16;

     label8:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a primitive type");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;
    }

    public static java.lang.Class wrapperType(java.lang.Class)
    {
        java.lang.String $r12, $r15;
        java.lang.IllegalArgumentException $r9;
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.StringBuilder $r10, $r11, $r13, $r14;

        r0 := @parameter0: java.lang.Class;

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r1 goto label1;

        return class "Ljava/lang/Integer;";

     label1:
        $r2 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r2 goto label2;

        return class "Ljava/lang/Long;";

     label2:
        $r3 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r3 goto label3;

        return class "Ljava/lang/Boolean;";

     label3:
        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r4 goto label4;

        return class "Ljava/lang/Double;";

     label4:
        $r5 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r5 goto label5;

        return class "Ljava/lang/Float;";

     label5:
        $r6 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r6 goto label6;

        return class "Ljava/lang/Byte;";

     label6:
        $r7 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r7 goto label7;

        return class "Ljava/lang/Short;";

     label7:
        $r8 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r8 goto label8;

        return class "Ljava/lang/Character;";

     label8:
        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a primitive type");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;
    }

    public static void checkAndFixAccess(java.lang.reflect.Member)
    {
        java.lang.SecurityException $r2;
        java.lang.String $r9, $r12, $r14;
        boolean $z0;
        java.lang.reflect.AccessibleObject r1;
        java.lang.reflect.Member r0;
        java.lang.IllegalArgumentException $r4;
        java.lang.Class $r3;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10, $r11, $r13;

        r0 := @parameter0: java.lang.reflect.Member;

        r1 = (java.lang.reflect.AccessibleObject) r0;

     label1:
        virtualinvoke r1.<java.lang.reflect.AccessibleObject: void setAccessible(boolean)>(1);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $z0 = virtualinvoke r1.<java.lang.reflect.AccessibleObject: boolean isAccessible()>();

        if $z0 != 0 goto label4;

        $r3 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not access ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (from class ");

        $r9 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; failed to set access: ");

        $r12 = virtualinvoke $r2.<java.lang.SecurityException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r4;

     label4:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public static java.lang.Class findEnumType(java.util.EnumSet)
    {
        org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator $r1;
        java.util.Iterator $r3;
        java.lang.Enum $r5;
        java.lang.Class $r2, $r6;
        java.lang.Object $r4;
        java.util.EnumSet r0;
        boolean $z0;

        r0 := @parameter0: java.util.EnumSet;

        $z0 = virtualinvoke r0.<java.util.EnumSet: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<java.util.EnumSet: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Enum) $r4;

        $r6 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findEnumType(java.lang.Enum)>($r5);

        return $r6;

     label1:
        $r1 = <org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.Class enumTypeFor(java.util.EnumSet)>(r0);

        return $r2;
    }

    public static java.lang.Class findEnumType(java.util.EnumMap)
    {
        org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator $r1;
        java.util.Iterator $r4;
        java.util.EnumMap r0;
        java.util.Set $r3;
        java.lang.Enum $r6;
        java.lang.Class $r2, $r7;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @parameter0: java.util.EnumMap;

        $z0 = virtualinvoke r0.<java.util.EnumMap: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<java.util.EnumMap: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Enum) $r5;

        $r7 = staticinvoke <org.codehaus.jackson.map.util.ClassUtil: java.lang.Class findEnumType(java.lang.Enum)>($r6);

        return $r7;

     label1:
        $r1 = <org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator instance>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.map.util.ClassUtil$EnumTypeLocator: java.lang.Class enumTypeFor(java.util.EnumMap)>(r0);

        return $r2;
    }

    public static java.lang.Class findEnumType(java.lang.Enum)
    {
        java.lang.Enum r0;
        java.lang.Class $r1, $r2, r3;

        r0 := @parameter0: java.lang.Enum;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r3 = $r1;

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r2 == class "Ljava/lang/Enum;" goto label1;

        r3 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getSuperclass()>();

     label1:
        return r3;
    }

    public static java.lang.Class findEnumType(java.lang.Class)
    {
        java.lang.Class $r0, r1;

        r1 := @parameter0: java.lang.Class;

        $r0 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r0 == class "Ljava/lang/Enum;" goto label1;

        r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

     label1:
        return r1;
    }
}
