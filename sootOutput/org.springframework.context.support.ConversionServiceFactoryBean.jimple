public class org.springframework.context.support.ConversionServiceFactoryBean extends java.lang.Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.InitializingBean
{
    private java.util.Set converters;
    private org.springframework.core.convert.support.GenericConversionService conversionService;

    public void <init>()
    {
        org.springframework.context.support.ConversionServiceFactoryBean r0;

        r0 := @this: org.springframework.context.support.ConversionServiceFactoryBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setConverters(java.util.Set)
    {
        java.util.Set r1;
        org.springframework.context.support.ConversionServiceFactoryBean r0;

        r0 := @this: org.springframework.context.support.ConversionServiceFactoryBean;

        r1 := @parameter0: java.util.Set;

        r0.<org.springframework.context.support.ConversionServiceFactoryBean: java.util.Set converters> = r1;

        return;
    }

    public void afterPropertiesSet()
    {
        java.util.Set $r4;
        org.springframework.core.convert.support.GenericConversionService $r1, $r2, $r3;
        org.springframework.context.support.ConversionServiceFactoryBean r0;

        r0 := @this: org.springframework.context.support.ConversionServiceFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.context.support.ConversionServiceFactoryBean: org.springframework.core.convert.support.GenericConversionService createConversionService()>();

        r0.<org.springframework.context.support.ConversionServiceFactoryBean: org.springframework.core.convert.support.GenericConversionService conversionService> = $r1;

        $r2 = r0.<org.springframework.context.support.ConversionServiceFactoryBean: org.springframework.core.convert.support.GenericConversionService conversionService>;

        staticinvoke <org.springframework.core.convert.support.ConversionServiceFactory: void addDefaultConverters(org.springframework.core.convert.support.GenericConversionService)>($r2);

        $r4 = r0.<org.springframework.context.support.ConversionServiceFactoryBean: java.util.Set converters>;

        $r3 = r0.<org.springframework.context.support.ConversionServiceFactoryBean: org.springframework.core.convert.support.GenericConversionService conversionService>;

        staticinvoke <org.springframework.core.convert.support.ConversionServiceFactory: void registerConverters(java.util.Set,org.springframework.core.convert.converter.ConverterRegistry)>($r4, $r3);

        return;
    }

    protected org.springframework.core.convert.support.GenericConversionService createConversionService()
    {
        org.springframework.core.convert.support.GenericConversionService $r0;
        org.springframework.context.support.ConversionServiceFactoryBean r1;

        r1 := @this: org.springframework.context.support.ConversionServiceFactoryBean;

        $r0 = new org.springframework.core.convert.support.GenericConversionService;

        specialinvoke $r0.<org.springframework.core.convert.support.GenericConversionService: void <init>()>();

        return $r0;
    }

    public org.springframework.core.convert.ConversionService getObject()
    {
        org.springframework.core.convert.support.GenericConversionService $r1;
        org.springframework.context.support.ConversionServiceFactoryBean r0;

        r0 := @this: org.springframework.context.support.ConversionServiceFactoryBean;

        $r1 = r0.<org.springframework.context.support.ConversionServiceFactoryBean: org.springframework.core.convert.support.GenericConversionService conversionService>;

        return $r1;
    }

    public java.lang.Class getObjectType()
    {
        org.springframework.context.support.ConversionServiceFactoryBean r0;

        r0 := @this: org.springframework.context.support.ConversionServiceFactoryBean;

        return class "Lorg/springframework/core/convert/support/GenericConversionService;";
    }

    public boolean isSingleton()
    {
        org.springframework.context.support.ConversionServiceFactoryBean r0;

        r0 := @this: org.springframework.context.support.ConversionServiceFactoryBean;

        return 1;
    }

    public volatile java.lang.Object getObject() throws java.lang.Exception
    {
        org.springframework.context.support.ConversionServiceFactoryBean r0;
        org.springframework.core.convert.ConversionService $r1;

        r0 := @this: org.springframework.context.support.ConversionServiceFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.context.support.ConversionServiceFactoryBean: org.springframework.core.convert.ConversionService getObject()>();

        return $r1;
    }
}
