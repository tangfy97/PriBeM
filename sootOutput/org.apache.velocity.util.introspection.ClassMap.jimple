public class org.apache.velocity.util.introspection.ClassMap extends java.lang.Object
{
    private static final boolean debugReflection;
    private final org.apache.velocity.runtime.log.Log log;
    private final java.lang.Class clazz;
    private final org.apache.velocity.util.introspection.ClassMap$MethodCache methodCache;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$java$lang$Boolean;
    static java.lang.Class class$java$lang$Byte;
    static java.lang.Class class$java$lang$Character;
    static java.lang.Class class$java$lang$Double;
    static java.lang.Class class$java$lang$Float;
    static java.lang.Class class$java$lang$Integer;
    static java.lang.Class class$java$lang$Long;
    static java.lang.Class class$java$lang$Short;

    public void <init>(java.lang.Class, org.apache.velocity.runtime.log.Log)
    {
        org.apache.velocity.runtime.log.Log r2;
        org.apache.velocity.util.introspection.ClassMap r0;
        org.apache.velocity.util.introspection.ClassMap$MethodCache $r3;
        java.lang.Class r1;

        r0 := @this: org.apache.velocity.util.introspection.ClassMap;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.apache.velocity.runtime.log.Log;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.velocity.util.introspection.ClassMap: java.lang.Class clazz> = r1;

        r0.<org.apache.velocity.util.introspection.ClassMap: org.apache.velocity.runtime.log.Log log> = r2;

        $r3 = specialinvoke r0.<org.apache.velocity.util.introspection.ClassMap: org.apache.velocity.util.introspection.ClassMap$MethodCache createMethodCache()>();

        r0.<org.apache.velocity.util.introspection.ClassMap: org.apache.velocity.util.introspection.ClassMap$MethodCache methodCache> = $r3;

        return;
    }

    public java.lang.Class getCachedClass()
    {
        org.apache.velocity.util.introspection.ClassMap r0;
        java.lang.Class $r1;

        r0 := @this: org.apache.velocity.util.introspection.ClassMap;

        $r1 = r0.<org.apache.velocity.util.introspection.ClassMap: java.lang.Class clazz>;

        return $r1;
    }

    public java.lang.reflect.Method findMethod(java.lang.String, java.lang.Object[]) throws org.apache.velocity.util.introspection.MethodMap$AmbiguousException
    {
        org.apache.velocity.util.introspection.ClassMap r0;
        java.lang.Object[] r2;
        org.apache.velocity.util.introspection.ClassMap$MethodCache $r3;
        java.lang.String r1;
        java.lang.reflect.Method $r4;

        r0 := @this: org.apache.velocity.util.introspection.ClassMap;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object[];

        $r3 = r0.<org.apache.velocity.util.introspection.ClassMap: org.apache.velocity.util.introspection.ClassMap$MethodCache methodCache>;

        $r4 = virtualinvoke $r3.<org.apache.velocity.util.introspection.ClassMap$MethodCache: java.lang.reflect.Method get(java.lang.String,java.lang.Object[])>(r1, r2);

        return $r4;
    }

    private org.apache.velocity.util.introspection.ClassMap$MethodCache createMethodCache()
    {
        org.apache.velocity.util.introspection.ClassMap r1;
        org.apache.velocity.util.introspection.ClassMap$MethodCache $r0;
        java.lang.Class[] $r3;
        org.apache.velocity.runtime.log.Log $r2;
        int $i0, i1, $i2;
        java.lang.Class $r4, r5;
        boolean $z0;

        r1 := @this: org.apache.velocity.util.introspection.ClassMap;

        $r0 = new org.apache.velocity.util.introspection.ClassMap$MethodCache;

        $r2 = r1.<org.apache.velocity.util.introspection.ClassMap: org.apache.velocity.runtime.log.Log log>;

        specialinvoke $r0.<org.apache.velocity.util.introspection.ClassMap$MethodCache: void <init>(org.apache.velocity.runtime.log.Log,org.apache.velocity.util.introspection.ClassMap$1)>($r2, null);

        r5 = virtualinvoke r1.<org.apache.velocity.util.introspection.ClassMap: java.lang.Class getCachedClass()>();

     label1:
        if r5 == null goto label5;

        $i0 = virtualinvoke r5.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label2;

        specialinvoke r1.<org.apache.velocity.util.introspection.ClassMap: void populateMethodCacheWith(org.apache.velocity.util.introspection.ClassMap$MethodCache,java.lang.Class)>($r0, r5);

     label2:
        $r3 = virtualinvoke r5.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i1 = 0;

     label3:
        $i2 = lengthof $r3;

        if i1 >= $i2 goto label4;

        $r4 = $r3[i1];

        specialinvoke r1.<org.apache.velocity.util.introspection.ClassMap: void populateMethodCacheWithInterface(org.apache.velocity.util.introspection.ClassMap$MethodCache,java.lang.Class)>($r0, $r4);

        i1 = i1 + 1;

        goto label3;

     label4:
        r5 = virtualinvoke r5.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label5:
        return $r0;
    }

    private void populateMethodCacheWithInterface(org.apache.velocity.util.introspection.ClassMap$MethodCache, java.lang.Class)
    {
        org.apache.velocity.util.introspection.ClassMap r2;
        org.apache.velocity.util.introspection.ClassMap$MethodCache r3;
        java.lang.Class[] $r1;
        int $i0, i1, $i2;
        java.lang.Class r0, $r4;
        boolean $z0;

        r2 := @this: org.apache.velocity.util.introspection.ClassMap;

        r3 := @parameter0: org.apache.velocity.util.introspection.ClassMap$MethodCache;

        r0 := @parameter1: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.Class: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label1;

        specialinvoke r2.<org.apache.velocity.util.introspection.ClassMap: void populateMethodCacheWith(org.apache.velocity.util.introspection.ClassMap$MethodCache,java.lang.Class)>(r3, r0);

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i1 = 0;

     label2:
        $i2 = lengthof $r1;

        if i1 >= $i2 goto label3;

        $r4 = $r1[i1];

        specialinvoke r2.<org.apache.velocity.util.introspection.ClassMap: void populateMethodCacheWithInterface(org.apache.velocity.util.introspection.ClassMap$MethodCache,java.lang.Class)>(r3, $r4);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    private void populateMethodCacheWith(org.apache.velocity.util.introspection.ClassMap$MethodCache, java.lang.Class)
    {
        org.apache.velocity.util.introspection.ClassMap r6;
        java.lang.reflect.Method[] $r1;
        java.lang.StringBuffer $r8, $r10, $r11, $r12;
        int $i0, $i1, i2;
        java.lang.SecurityException $r5;
        java.lang.String $r13;
        java.lang.reflect.Method $r2, $r4;
        boolean $z0, $z1;
        org.apache.velocity.util.introspection.ClassMap$MethodCache r3;
        org.apache.velocity.runtime.log.Log $r7, $r9;
        java.lang.Class r0;

        r6 := @this: org.apache.velocity.util.introspection.ClassMap;

        r3 := @parameter0: org.apache.velocity.util.introspection.ClassMap$MethodCache;

        r0 := @parameter1: java.lang.Class;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i2 = 0;

     label2:
        $i0 = lengthof $r1;

        if i2 >= $i0 goto label4;

        $r2 = $r1[i2];

        $i1 = virtualinvoke $r2.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z0 == 0 goto label3;

        $r4 = $r1[i2];

        staticinvoke <org.apache.velocity.util.introspection.ClassMap$MethodCache: void access$100(org.apache.velocity.util.introspection.ClassMap$MethodCache,java.lang.reflect.Method)>(r3, $r4);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        $r7 = r6.<org.apache.velocity.util.introspection.ClassMap: org.apache.velocity.runtime.log.Log log>;

        $z1 = virtualinvoke $r7.<org.apache.velocity.runtime.log.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label6;

        $r9 = r6.<org.apache.velocity.util.introspection.ClassMap: org.apache.velocity.runtime.log.Log log>;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("While accessing methods of ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r9.<org.apache.velocity.runtime.log.Log: void debug(java.lang.Object,java.lang.Throwable)>($r13, $r5);

     label6:
        return;

        catch java.lang.SecurityException from label1 to label4 with label5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.velocity.util.introspection.ClassMap: boolean debugReflection> = 0;

        return;
    }
}
