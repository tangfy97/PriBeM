public class com.jhlabs.image.BorderFilter extends com.jhlabs.image.AbstractBufferedImageOp
{
    private int leftBorder;
    private int rightBorder;
    private int topBorder;
    private int bottomBorder;
    private java.awt.Paint borderPaint;

    public void <init>()
    {
        com.jhlabs.image.BorderFilter r0;

        r0 := @this: com.jhlabs.image.BorderFilter;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        return;
    }

    public void <init>(int, int, int, int, java.awt.Paint)
    {
        com.jhlabs.image.BorderFilter r0;
        java.awt.Paint r1;
        int i0, i1, i2, i3;

        r0 := @this: com.jhlabs.image.BorderFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: java.awt.Paint;

        specialinvoke r0.<com.jhlabs.image.AbstractBufferedImageOp: void <init>()>();

        r0.<com.jhlabs.image.BorderFilter: int leftBorder> = i0;

        r0.<com.jhlabs.image.BorderFilter: int topBorder> = i1;

        r0.<com.jhlabs.image.BorderFilter: int rightBorder> = i2;

        r0.<com.jhlabs.image.BorderFilter: int bottomBorder> = i3;

        r0.<com.jhlabs.image.BorderFilter: java.awt.Paint borderPaint> = r1;

        return;
    }

    public void setLeftBorder(int)
    {
        com.jhlabs.image.BorderFilter r0;
        int i0;

        r0 := @this: com.jhlabs.image.BorderFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.BorderFilter: int leftBorder> = i0;

        return;
    }

    public int getLeftBorder()
    {
        com.jhlabs.image.BorderFilter r0;
        int $i0;

        r0 := @this: com.jhlabs.image.BorderFilter;

        $i0 = r0.<com.jhlabs.image.BorderFilter: int leftBorder>;

        return $i0;
    }

    public void setRightBorder(int)
    {
        com.jhlabs.image.BorderFilter r0;
        int i0;

        r0 := @this: com.jhlabs.image.BorderFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.BorderFilter: int rightBorder> = i0;

        return;
    }

    public int getRightBorder()
    {
        com.jhlabs.image.BorderFilter r0;
        int $i0;

        r0 := @this: com.jhlabs.image.BorderFilter;

        $i0 = r0.<com.jhlabs.image.BorderFilter: int rightBorder>;

        return $i0;
    }

    public void setTopBorder(int)
    {
        com.jhlabs.image.BorderFilter r0;
        int i0;

        r0 := @this: com.jhlabs.image.BorderFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.BorderFilter: int topBorder> = i0;

        return;
    }

    public int getTopBorder()
    {
        com.jhlabs.image.BorderFilter r0;
        int $i0;

        r0 := @this: com.jhlabs.image.BorderFilter;

        $i0 = r0.<com.jhlabs.image.BorderFilter: int topBorder>;

        return $i0;
    }

    public void setBottomBorder(int)
    {
        com.jhlabs.image.BorderFilter r0;
        int i0;

        r0 := @this: com.jhlabs.image.BorderFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.BorderFilter: int bottomBorder> = i0;

        return;
    }

    public int getBottomBorder()
    {
        com.jhlabs.image.BorderFilter r0;
        int $i0;

        r0 := @this: com.jhlabs.image.BorderFilter;

        $i0 = r0.<com.jhlabs.image.BorderFilter: int bottomBorder>;

        return $i0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage r0, $r5, r6;
        java.awt.geom.AffineTransform $r7;
        java.awt.Paint $r3, $r4;
        java.awt.Graphics2D $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34;
        double $d0, $d1;
        com.jhlabs.image.BorderFilter r2;

        r2 := @this: com.jhlabs.image.BorderFilter;

        r0 := @parameter0: java.awt.image.BufferedImage;

        r6 := @parameter1: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        if r6 != null goto label1;

        $r5 = new java.awt.image.BufferedImage;

        $i24 = r2.<com.jhlabs.image.BorderFilter: int leftBorder>;

        $i26 = $i0 + $i24;

        $i25 = r2.<com.jhlabs.image.BorderFilter: int rightBorder>;

        $i30 = $i26 + $i25;

        $i27 = r2.<com.jhlabs.image.BorderFilter: int topBorder>;

        $i29 = $i1 + $i27;

        $i28 = r2.<com.jhlabs.image.BorderFilter: int bottomBorder>;

        $i31 = $i29 + $i28;

        $i32 = virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        specialinvoke $r5.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i30, $i31, $i32);

        r6 = $r5;

     label1:
        $r1 = virtualinvoke r6.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $r3 = r2.<com.jhlabs.image.BorderFilter: java.awt.Paint borderPaint>;

        if $r3 == null goto label5;

        $r4 = r2.<com.jhlabs.image.BorderFilter: java.awt.Paint borderPaint>;

        virtualinvoke $r1.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r4);

        $i2 = r2.<com.jhlabs.image.BorderFilter: int leftBorder>;

        if $i2 <= 0 goto label2;

        $i23 = r2.<com.jhlabs.image.BorderFilter: int leftBorder>;

        virtualinvoke $r1.<java.awt.Graphics: void fillRect(int,int,int,int)>(0, 0, $i23, $i1);

     label2:
        $i3 = r2.<com.jhlabs.image.BorderFilter: int rightBorder>;

        if $i3 <= 0 goto label3;

        $i20 = r2.<com.jhlabs.image.BorderFilter: int rightBorder>;

        $i22 = $i0 - $i20;

        $i21 = r2.<com.jhlabs.image.BorderFilter: int rightBorder>;

        virtualinvoke $r1.<java.awt.Graphics: void fillRect(int,int,int,int)>($i22, 0, $i21, $i1);

     label3:
        $i4 = r2.<com.jhlabs.image.BorderFilter: int topBorder>;

        if $i4 <= 0 goto label4;

        $i19 = r2.<com.jhlabs.image.BorderFilter: int leftBorder>;

        $i14 = r2.<com.jhlabs.image.BorderFilter: int leftBorder>;

        $i16 = $i0 - $i14;

        $i15 = r2.<com.jhlabs.image.BorderFilter: int rightBorder>;

        $i18 = $i16 - $i15;

        $i17 = r2.<com.jhlabs.image.BorderFilter: int topBorder>;

        virtualinvoke $r1.<java.awt.Graphics: void fillRect(int,int,int,int)>($i19, 0, $i18, $i17);

     label4:
        $i5 = r2.<com.jhlabs.image.BorderFilter: int bottomBorder>;

        if $i5 <= 0 goto label5;

        $i13 = r2.<com.jhlabs.image.BorderFilter: int leftBorder>;

        $i6 = r2.<com.jhlabs.image.BorderFilter: int bottomBorder>;

        $i12 = $i1 - $i6;

        $i7 = r2.<com.jhlabs.image.BorderFilter: int leftBorder>;

        $i9 = $i0 - $i7;

        $i8 = r2.<com.jhlabs.image.BorderFilter: int rightBorder>;

        $i11 = $i9 - $i8;

        $i10 = r2.<com.jhlabs.image.BorderFilter: int bottomBorder>;

        virtualinvoke $r1.<java.awt.Graphics: void fillRect(int,int,int,int)>($i13, $i12, $i11, $i10);

     label5:
        $i33 = r2.<com.jhlabs.image.BorderFilter: int leftBorder>;

        $d0 = (double) $i33;

        $i34 = r2.<com.jhlabs.image.BorderFilter: int rightBorder>;

        $d1 = (double) $i34;

        $r7 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d0, $d1);

        virtualinvoke $r1.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>(r0, $r7);

        virtualinvoke $r1.<java.awt.Graphics: void dispose()>();

        return r6;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.BorderFilter r0;

        r0 := @this: com.jhlabs.image.BorderFilter;

        return "Distort/Border...";
    }
}
