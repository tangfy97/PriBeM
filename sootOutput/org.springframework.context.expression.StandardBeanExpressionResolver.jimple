public class org.springframework.context.expression.StandardBeanExpressionResolver extends java.lang.Object implements org.springframework.beans.factory.config.BeanExpressionResolver
{
    public static final java.lang.String DEFAULT_EXPRESSION_PREFIX;
    public static final java.lang.String DEFAULT_EXPRESSION_SUFFIX;
    private java.lang.String expressionPrefix;
    private java.lang.String expressionSuffix;
    private org.springframework.expression.ExpressionParser expressionParser;
    private final java.util.Map expressionCache;
    private final java.util.Map evaluationCache;
    private final org.springframework.expression.ParserContext beanExpressionParserContext;

    public void <init>()
    {
        org.springframework.context.expression.StandardBeanExpressionResolver r0;
        java.util.concurrent.ConcurrentHashMap $r2, $r3;
        org.springframework.expression.spel.standard.SpelExpressionParser $r1;
        org.springframework.context.expression.StandardBeanExpressionResolver$1 $r4;

        r0 := @this: org.springframework.context.expression.StandardBeanExpressionResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.context.expression.StandardBeanExpressionResolver: java.lang.String expressionPrefix> = "#{";

        r0.<org.springframework.context.expression.StandardBeanExpressionResolver: java.lang.String expressionSuffix> = "}";

        $r1 = new org.springframework.expression.spel.standard.SpelExpressionParser;

        specialinvoke $r1.<org.springframework.expression.spel.standard.SpelExpressionParser: void <init>()>();

        r0.<org.springframework.context.expression.StandardBeanExpressionResolver: org.springframework.expression.ExpressionParser expressionParser> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.context.expression.StandardBeanExpressionResolver: java.util.Map expressionCache> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.context.expression.StandardBeanExpressionResolver: java.util.Map evaluationCache> = $r3;

        $r4 = new org.springframework.context.expression.StandardBeanExpressionResolver$1;

        specialinvoke $r4.<org.springframework.context.expression.StandardBeanExpressionResolver$1: void <init>(org.springframework.context.expression.StandardBeanExpressionResolver)>(r0);

        r0.<org.springframework.context.expression.StandardBeanExpressionResolver: org.springframework.expression.ParserContext beanExpressionParserContext> = $r4;

        return;
    }

    public void setExpressionPrefix(java.lang.String)
    {
        java.lang.String r0;
        org.springframework.context.expression.StandardBeanExpressionResolver r1;

        r1 := @this: org.springframework.context.expression.StandardBeanExpressionResolver;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "Expression prefix must not be empty");

        r1.<org.springframework.context.expression.StandardBeanExpressionResolver: java.lang.String expressionPrefix> = r0;

        return;
    }

    public void setExpressionSuffix(java.lang.String)
    {
        java.lang.String r0;
        org.springframework.context.expression.StandardBeanExpressionResolver r1;

        r1 := @this: org.springframework.context.expression.StandardBeanExpressionResolver;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "Expression suffix must not be empty");

        r1.<org.springframework.context.expression.StandardBeanExpressionResolver: java.lang.String expressionSuffix> = r0;

        return;
    }

    public void setExpressionParser(org.springframework.expression.ExpressionParser)
    {
        org.springframework.expression.ExpressionParser r0;
        org.springframework.context.expression.StandardBeanExpressionResolver r1;

        r1 := @this: org.springframework.context.expression.StandardBeanExpressionResolver;

        r0 := @parameter0: org.springframework.expression.ExpressionParser;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "ExpressionParser must not be null");

        r1.<org.springframework.context.expression.StandardBeanExpressionResolver: org.springframework.expression.ExpressionParser expressionParser> = r0;

        return;
    }

    public java.lang.Object evaluate(java.lang.String, org.springframework.beans.factory.config.BeanExpressionContext) throws org.springframework.beans.BeansException
    {
        org.springframework.context.expression.StandardBeanExpressionResolver r1;
        org.springframework.expression.ParserContext $r20;
        org.springframework.expression.spel.support.StandardTypeConverter $r19;
        java.util.Map $r2, $r5, $r18, $r23;
        org.springframework.context.expression.MapAccessor $r10;
        org.springframework.context.expression.BeanFactoryResolver $r11;
        java.lang.String r0;
        org.springframework.core.convert.ConversionService $r17;
        boolean $z0;
        org.springframework.context.expression.BeanFactoryAccessor $r9;
        org.springframework.beans.factory.BeanExpressionException $r26;
        org.springframework.expression.spel.support.StandardTypeLocator $r13;
        org.springframework.beans.factory.config.BeanExpressionContext r4;
        java.lang.Exception $r25;
        org.springframework.expression.ExpressionParser $r21;
        org.springframework.expression.Expression $r22, r27;
        java.lang.Object $r3, $r6, $r29;
        org.springframework.context.expression.BeanExpressionContextAccessor $r8;
        java.lang.ClassLoader $r15;
        org.springframework.beans.factory.config.ConfigurableBeanFactory $r12, $r14, $r16;
        org.springframework.expression.spel.support.StandardEvaluationContext $r7, $r24, r28;

        r1 := @this: org.springframework.context.expression.StandardBeanExpressionResolver;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: org.springframework.beans.factory.config.BeanExpressionContext;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r2 = r1.<org.springframework.context.expression.StandardBeanExpressionResolver: java.util.Map expressionCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r27 = (org.springframework.expression.Expression) $r3;

        if r27 != null goto label2;

        $r21 = r1.<org.springframework.context.expression.StandardBeanExpressionResolver: org.springframework.expression.ExpressionParser expressionParser>;

        $r20 = r1.<org.springframework.context.expression.StandardBeanExpressionResolver: org.springframework.expression.ParserContext beanExpressionParserContext>;

        $r22 = interfaceinvoke $r21.<org.springframework.expression.ExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String,org.springframework.expression.ParserContext)>(r0, $r20);

        r27 = $r22;

        $r23 = r1.<org.springframework.context.expression.StandardBeanExpressionResolver: java.util.Map expressionCache>;

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r22);

     label2:
        $r5 = r1.<org.springframework.context.expression.StandardBeanExpressionResolver: java.util.Map evaluationCache>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r24 = (org.springframework.expression.spel.support.StandardEvaluationContext) $r6;

        r28 = $r24;

        if $r24 != null goto label4;

        $r7 = new org.springframework.expression.spel.support.StandardEvaluationContext;

        specialinvoke $r7.<org.springframework.expression.spel.support.StandardEvaluationContext: void <init>()>();

        r28 = $r7;

        virtualinvoke $r7.<org.springframework.expression.spel.support.StandardEvaluationContext: void setRootObject(java.lang.Object)>(r4);

        $r8 = new org.springframework.context.expression.BeanExpressionContextAccessor;

        specialinvoke $r8.<org.springframework.context.expression.BeanExpressionContextAccessor: void <init>()>();

        virtualinvoke $r7.<org.springframework.expression.spel.support.StandardEvaluationContext: void addPropertyAccessor(org.springframework.expression.PropertyAccessor)>($r8);

        $r9 = new org.springframework.context.expression.BeanFactoryAccessor;

        specialinvoke $r9.<org.springframework.context.expression.BeanFactoryAccessor: void <init>()>();

        virtualinvoke $r7.<org.springframework.expression.spel.support.StandardEvaluationContext: void addPropertyAccessor(org.springframework.expression.PropertyAccessor)>($r9);

        $r10 = new org.springframework.context.expression.MapAccessor;

        specialinvoke $r10.<org.springframework.context.expression.MapAccessor: void <init>()>();

        virtualinvoke $r7.<org.springframework.expression.spel.support.StandardEvaluationContext: void addPropertyAccessor(org.springframework.expression.PropertyAccessor)>($r10);

        $r11 = new org.springframework.context.expression.BeanFactoryResolver;

        $r12 = virtualinvoke r4.<org.springframework.beans.factory.config.BeanExpressionContext: org.springframework.beans.factory.config.ConfigurableBeanFactory getBeanFactory()>();

        specialinvoke $r11.<org.springframework.context.expression.BeanFactoryResolver: void <init>(org.springframework.beans.factory.BeanFactory)>($r12);

        virtualinvoke $r7.<org.springframework.expression.spel.support.StandardEvaluationContext: void setBeanResolver(org.springframework.expression.BeanResolver)>($r11);

        $r13 = new org.springframework.expression.spel.support.StandardTypeLocator;

        $r14 = virtualinvoke r4.<org.springframework.beans.factory.config.BeanExpressionContext: org.springframework.beans.factory.config.ConfigurableBeanFactory getBeanFactory()>();

        $r15 = interfaceinvoke $r14.<org.springframework.beans.factory.config.ConfigurableBeanFactory: java.lang.ClassLoader getBeanClassLoader()>();

        specialinvoke $r13.<org.springframework.expression.spel.support.StandardTypeLocator: void <init>(java.lang.ClassLoader)>($r15);

        virtualinvoke $r7.<org.springframework.expression.spel.support.StandardEvaluationContext: void setTypeLocator(org.springframework.expression.TypeLocator)>($r13);

        $r16 = virtualinvoke r4.<org.springframework.beans.factory.config.BeanExpressionContext: org.springframework.beans.factory.config.ConfigurableBeanFactory getBeanFactory()>();

        $r17 = interfaceinvoke $r16.<org.springframework.beans.factory.config.ConfigurableBeanFactory: org.springframework.core.convert.ConversionService getConversionService()>();

        if $r17 == null goto label3;

        $r19 = new org.springframework.expression.spel.support.StandardTypeConverter;

        specialinvoke $r19.<org.springframework.expression.spel.support.StandardTypeConverter: void <init>(org.springframework.core.convert.ConversionService)>($r17);

        virtualinvoke $r7.<org.springframework.expression.spel.support.StandardEvaluationContext: void setTypeConverter(org.springframework.expression.TypeConverter)>($r19);

     label3:
        virtualinvoke r1.<org.springframework.context.expression.StandardBeanExpressionResolver: void customizeEvaluationContext(org.springframework.expression.spel.support.StandardEvaluationContext)>($r7);

        $r18 = r1.<org.springframework.context.expression.StandardBeanExpressionResolver: java.util.Map evaluationCache>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r7);

     label4:
        $r29 = interfaceinvoke r27.<org.springframework.expression.Expression: java.lang.Object getValue(org.springframework.expression.EvaluationContext)>(r28);

     label5:
        return $r29;

     label6:
        $r25 := @caughtexception;

        $r26 = new org.springframework.beans.factory.BeanExpressionException;

        specialinvoke $r26.<org.springframework.beans.factory.BeanExpressionException: void <init>(java.lang.String,java.lang.Throwable)>("Expression parsing failed", $r25);

        throw $r26;

        catch java.lang.Exception from label1 to label5 with label6;
    }

    protected void customizeEvaluationContext(org.springframework.expression.spel.support.StandardEvaluationContext)
    {
        org.springframework.expression.spel.support.StandardEvaluationContext r1;
        org.springframework.context.expression.StandardBeanExpressionResolver r0;

        r0 := @this: org.springframework.context.expression.StandardBeanExpressionResolver;

        r1 := @parameter0: org.springframework.expression.spel.support.StandardEvaluationContext;

        return;
    }

    static java.lang.String access$0(org.springframework.context.expression.StandardBeanExpressionResolver)
    {
        java.lang.String $r1;
        org.springframework.context.expression.StandardBeanExpressionResolver r0;

        r0 := @parameter0: org.springframework.context.expression.StandardBeanExpressionResolver;

        $r1 = r0.<org.springframework.context.expression.StandardBeanExpressionResolver: java.lang.String expressionPrefix>;

        return $r1;
    }

    static java.lang.String access$1(org.springframework.context.expression.StandardBeanExpressionResolver)
    {
        java.lang.String $r1;
        org.springframework.context.expression.StandardBeanExpressionResolver r0;

        r0 := @parameter0: org.springframework.context.expression.StandardBeanExpressionResolver;

        $r1 = r0.<org.springframework.context.expression.StandardBeanExpressionResolver: java.lang.String expressionSuffix>;

        return $r1;
    }

    public static void <clinit>()
    {
        <org.springframework.context.expression.StandardBeanExpressionResolver: java.lang.String DEFAULT_EXPRESSION_SUFFIX> = "}";

        <org.springframework.context.expression.StandardBeanExpressionResolver: java.lang.String DEFAULT_EXPRESSION_PREFIX> = "#{";

        return;
    }
}
