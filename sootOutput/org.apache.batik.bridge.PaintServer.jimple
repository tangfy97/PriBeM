public abstract class org.apache.batik.bridge.PaintServer extends java.lang.Object implements org.apache.batik.util.SVGConstants, org.apache.batik.util.CSSConstants, org.apache.batik.bridge.ErrorConstants
{

    protected void <init>()
    {
        org.apache.batik.bridge.PaintServer r0;

        r0 := @this: org.apache.batik.bridge.PaintServer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.batik.gvt.ShapePainter convertMarkers(org.w3c.dom.Element, org.apache.batik.gvt.ShapeNode, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.gvt.MarkerShapePainter $r9;
        java.awt.Shape $r10;
        org.apache.batik.bridge.BridgeContext r2;
        org.apache.batik.gvt.ShapeNode r8;
        org.apache.batik.css.engine.value.Value $r1, $r4, $r6;
        org.w3c.dom.Element r0;
        org.apache.batik.gvt.Marker $r3, $r5, $r7;

        r0 := @parameter0: org.w3c.dom.Element;

        r8 := @parameter1: org.apache.batik.gvt.ShapeNode;

        r2 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 36);

        $r3 = staticinvoke <org.apache.batik.bridge.PaintServer: org.apache.batik.gvt.Marker convertMarker(org.w3c.dom.Element,org.apache.batik.css.engine.value.Value,org.apache.batik.bridge.BridgeContext)>(r0, $r1, r2);

        $r4 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 35);

        $r5 = staticinvoke <org.apache.batik.bridge.PaintServer: org.apache.batik.gvt.Marker convertMarker(org.w3c.dom.Element,org.apache.batik.css.engine.value.Value,org.apache.batik.bridge.BridgeContext)>(r0, $r4, r2);

        $r6 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 34);

        $r7 = staticinvoke <org.apache.batik.bridge.PaintServer: org.apache.batik.gvt.Marker convertMarker(org.w3c.dom.Element,org.apache.batik.css.engine.value.Value,org.apache.batik.bridge.BridgeContext)>(r0, $r6, r2);

        if $r3 != null goto label1;

        if $r5 != null goto label1;

        if $r7 == null goto label2;

     label1:
        $r9 = new org.apache.batik.gvt.MarkerShapePainter;

        $r10 = virtualinvoke r8.<org.apache.batik.gvt.ShapeNode: java.awt.Shape getShape()>();

        specialinvoke $r9.<org.apache.batik.gvt.MarkerShapePainter: void <init>(java.awt.Shape)>($r10);

        virtualinvoke $r9.<org.apache.batik.gvt.MarkerShapePainter: void setStartMarker(org.apache.batik.gvt.Marker)>($r3);

        virtualinvoke $r9.<org.apache.batik.gvt.MarkerShapePainter: void setMiddleMarker(org.apache.batik.gvt.Marker)>($r5);

        virtualinvoke $r9.<org.apache.batik.gvt.MarkerShapePainter: void setEndMarker(org.apache.batik.gvt.Marker)>($r7);

        return $r9;

     label2:
        return null;
    }

    public static org.apache.batik.gvt.Marker convertMarker(org.w3c.dom.Element, org.apache.batik.css.engine.value.Value, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r7;
        org.apache.batik.bridge.BridgeException $r10;
        org.apache.batik.bridge.BridgeContext r2;
        org.apache.batik.css.engine.value.Value r0;
        org.apache.batik.bridge.Bridge $r5;
        short $s0;
        org.w3c.dom.Element r3, $r4;
        org.apache.batik.bridge.MarkerBridge $r8;
        org.apache.batik.gvt.Marker $r9;
        int $i1;
        java.lang.String $r1;
        boolean $z0;

        r3 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.apache.batik.css.engine.value.Value;

        r2 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $s0 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i1 = (int) $s0;

        if $i1 != 21 goto label1;

        return null;

     label1:
        $r1 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $r4 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Element getReferencedElement(org.w3c.dom.Element,java.lang.String)>(r3, $r1);

        $r5 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)>($r4);

        if $r5 == null goto label2;

        $z0 = $r5 instanceof org.apache.batik.bridge.MarkerBridge;

        if $z0 != 0 goto label3;

     label2:
        $r10 = new org.apache.batik.bridge.BridgeException;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r1;

        specialinvoke $r10.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r2, r3, "css.uri.badTarget", $r7);

        throw $r10;

     label3:
        $r8 = (org.apache.batik.bridge.MarkerBridge) $r5;

        $r9 = interfaceinvoke $r8.<org.apache.batik.bridge.MarkerBridge: org.apache.batik.gvt.Marker createMarker(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.w3c.dom.Element)>(r2, $r4, r3);

        return $r9;
    }

    public static org.apache.batik.gvt.ShapePainter convertFillAndStroke(org.w3c.dom.Element, org.apache.batik.gvt.ShapeNode, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.Shape $r1;
        java.awt.Stroke $r6;
        org.apache.batik.gvt.StrokeShapePainter $r8;
        org.apache.batik.gvt.FillShapePainter $r5;
        org.apache.batik.bridge.BridgeContext r3;
        org.apache.batik.gvt.ShapeNode r0;
        org.w3c.dom.Element r2;
        java.awt.Paint $r4, $r7;
        org.apache.batik.gvt.CompositeShapePainter $r9;

        r2 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.apache.batik.gvt.ShapeNode;

        r3 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.ShapeNode: java.awt.Shape getShape()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r4 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Paint convertFillPaint(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r2, r0, r3);

        $r5 = new org.apache.batik.gvt.FillShapePainter;

        specialinvoke $r5.<org.apache.batik.gvt.FillShapePainter: void <init>(java.awt.Shape)>($r1);

        virtualinvoke $r5.<org.apache.batik.gvt.FillShapePainter: void setPaint(java.awt.Paint)>($r4);

        $r6 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Stroke convertStroke(org.w3c.dom.Element)>(r2);

        if $r6 != null goto label2;

        return $r5;

     label2:
        $r7 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Paint convertStrokePaint(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r2, r0, r3);

        $r8 = new org.apache.batik.gvt.StrokeShapePainter;

        specialinvoke $r8.<org.apache.batik.gvt.StrokeShapePainter: void <init>(java.awt.Shape)>($r1);

        virtualinvoke $r8.<org.apache.batik.gvt.StrokeShapePainter: void setStroke(java.awt.Stroke)>($r6);

        virtualinvoke $r8.<org.apache.batik.gvt.StrokeShapePainter: void setPaint(java.awt.Paint)>($r7);

        $r9 = new org.apache.batik.gvt.CompositeShapePainter;

        specialinvoke $r9.<org.apache.batik.gvt.CompositeShapePainter: void <init>(java.awt.Shape)>($r1);

        virtualinvoke $r9.<org.apache.batik.gvt.CompositeShapePainter: void addShapePainter(org.apache.batik.gvt.ShapePainter)>($r5);

        virtualinvoke $r9.<org.apache.batik.gvt.CompositeShapePainter: void addShapePainter(org.apache.batik.gvt.ShapePainter)>($r8);

        return $r9;
    }

    public static org.apache.batik.gvt.ShapePainter convertStrokePainter(org.w3c.dom.Element, org.apache.batik.gvt.ShapeNode, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.Shape $r1;
        java.awt.Stroke $r3;
        org.apache.batik.gvt.StrokeShapePainter $r6;
        org.w3c.dom.Element r2;
        java.awt.Paint $r5;
        org.apache.batik.bridge.BridgeContext r4;
        org.apache.batik.gvt.ShapeNode r0;

        r2 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.apache.batik.gvt.ShapeNode;

        r4 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.ShapeNode: java.awt.Shape getShape()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Stroke convertStroke(org.w3c.dom.Element)>(r2);

        if $r3 != null goto label2;

        return null;

     label2:
        $r5 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Paint convertStrokePaint(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r2, r0, r4);

        $r6 = new org.apache.batik.gvt.StrokeShapePainter;

        specialinvoke $r6.<org.apache.batik.gvt.StrokeShapePainter: void <init>(java.awt.Shape)>($r1);

        virtualinvoke $r6.<org.apache.batik.gvt.StrokeShapePainter: void setStroke(java.awt.Stroke)>($r3);

        virtualinvoke $r6.<org.apache.batik.gvt.StrokeShapePainter: void setPaint(java.awt.Paint)>($r5);

        return $r6;
    }

    public static java.awt.Paint convertStrokePaint(org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.bridge.BridgeContext)
    {
        org.w3c.dom.Element r0;
        java.awt.Paint $r5;
        org.apache.batik.gvt.GraphicsNode r3;
        float $f0;
        org.apache.batik.bridge.BridgeContext r4;
        org.apache.batik.css.engine.value.Value $r1, $r2;

        r0 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: org.apache.batik.gvt.GraphicsNode;

        r4 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 51);

        $f0 = staticinvoke <org.apache.batik.bridge.PaintServer: float convertOpacity(org.apache.batik.css.engine.value.Value)>($r1);

        $r2 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 45);

        $r5 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Paint convertPaint(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.css.engine.value.Value,float,org.apache.batik.bridge.BridgeContext)>(r0, r3, $r2, $f0, r4);

        return $r5;
    }

    public static java.awt.Paint convertFillPaint(org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.bridge.BridgeContext)
    {
        org.w3c.dom.Element r0;
        java.awt.Paint $r5;
        org.apache.batik.gvt.GraphicsNode r3;
        float $f0;
        org.apache.batik.bridge.BridgeContext r4;
        org.apache.batik.css.engine.value.Value $r1, $r2;

        r0 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: org.apache.batik.gvt.GraphicsNode;

        r4 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 16);

        $f0 = staticinvoke <org.apache.batik.bridge.PaintServer: float convertOpacity(org.apache.batik.css.engine.value.Value)>($r1);

        $r2 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 15);

        $r5 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Paint convertPaint(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.css.engine.value.Value,float,org.apache.batik.bridge.BridgeContext)>(r0, r3, $r2, $f0, r4);

        return $r5;
    }

    public static java.awt.Paint convertPaint(org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.css.engine.value.Value, float, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.Color $r6, $r12, $r13, $r16;
        short $s0, $s1, $s2, $s4;
        int $i3, $i5, $i6, $i7;
        org.apache.batik.gvt.GraphicsNode r7;
        org.apache.batik.bridge.BridgeContext r4;
        java.lang.IllegalArgumentException $r19, $r20, $r21;
        org.apache.batik.css.engine.value.Value r0, $r1, $r3, $r9, $r10;
        org.w3c.dom.Element r2;
        java.awt.Paint $r8, $r17;
        float f0;
        org.apache.batik.css.engine.value.svg.ICCColor $r5, $r11;

        r2 := @parameter0: org.w3c.dom.Element;

        r7 := @parameter1: org.apache.batik.gvt.GraphicsNode;

        r0 := @parameter2: org.apache.batik.css.engine.value.Value;

        f0 := @parameter3: float;

        r4 := @parameter4: org.apache.batik.bridge.BridgeContext;

        $s0 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        if $s0 != 1 goto label05;

        $s4 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i5 = (int) $s4;

        lookupswitch($i5)
        {
            case 20: goto label03;
            case 21: goto label01;
            case 25: goto label02;
            default: goto label04;
        };

     label01:
        return null;

     label02:
        $r16 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Color convertColor(org.apache.batik.css.engine.value.Value,float)>(r0, f0);

        return $r16;

     label03:
        $r17 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Paint convertURIPaint(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.css.engine.value.Value,float,org.apache.batik.bridge.BridgeContext)>(r2, r7, r0, f0, r4);

        return $r17;

     label04:
        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Paint argument is not an appropriate CSS value");

        throw $r19;

     label05:
        $r1 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(0);

        $s1 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i6 = (int) $s1;

        lookupswitch($i6)
        {
            case 20: goto label07;
            case 25: goto label06;
            default: goto label13;
        };

     label06:
        $r3 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(1);

        $r5 = (org.apache.batik.css.engine.value.svg.ICCColor) $r3;

        $r6 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Color convertRGBICCColor(org.w3c.dom.Element,org.apache.batik.css.engine.value.Value,org.apache.batik.css.engine.value.svg.ICCColor,float,org.apache.batik.bridge.BridgeContext)>(r2, $r1, $r5, f0, r4);

        return $r6;

     label07:
        $r8 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Paint silentConvertURIPaint(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.css.engine.value.Value,float,org.apache.batik.bridge.BridgeContext)>(r2, r7, $r1, f0, r4);

        if $r8 == null goto label08;

        return $r8;

     label08:
        $r9 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(1);

        $s2 = interfaceinvoke $r9.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i7 = (int) $s2;

        lookupswitch($i7)
        {
            case 21: goto label09;
            case 25: goto label10;
            default: goto label12;
        };

     label09:
        return null;

     label10:
        $i3 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: int getLength()>();

        if $i3 != 2 goto label11;

        $r13 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Color convertColor(org.apache.batik.css.engine.value.Value,float)>($r9, f0);

        return $r13;

     label11:
        $r10 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(2);

        $r11 = (org.apache.batik.css.engine.value.svg.ICCColor) $r10;

        $r12 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Color convertRGBICCColor(org.w3c.dom.Element,org.apache.batik.css.engine.value.Value,org.apache.batik.css.engine.value.svg.ICCColor,float,org.apache.batik.bridge.BridgeContext)>(r2, $r9, $r11, f0, r4);

        return $r12;

     label12:
        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Paint argument is not an appropriate CSS value");

        throw $r20;

     label13:
        $r21 = new java.lang.IllegalArgumentException;

        specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Paint argument is not an appropriate CSS value");

        throw $r21;
    }

    public static java.awt.Paint silentConvertURIPaint(org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.css.engine.value.Value, float, org.apache.batik.bridge.BridgeContext)
    {
        org.w3c.dom.Element r0;
        java.awt.Paint r5;
        org.apache.batik.gvt.GraphicsNode r1;
        float f0;
        org.apache.batik.bridge.BridgeException $r4;
        org.apache.batik.bridge.BridgeContext r3;
        org.apache.batik.css.engine.value.Value r2;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: org.apache.batik.gvt.GraphicsNode;

        r2 := @parameter2: org.apache.batik.css.engine.value.Value;

        f0 := @parameter3: float;

        r3 := @parameter4: org.apache.batik.bridge.BridgeContext;

        r5 = null;

     label1:
        r5 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Paint convertURIPaint(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.css.engine.value.Value,float,org.apache.batik.bridge.BridgeContext)>(r0, r1, r2, f0, r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return r5;

        catch org.apache.batik.bridge.BridgeException from label1 to label2 with label3;
    }

    public static java.awt.Paint convertURIPaint(org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode, org.apache.batik.css.engine.value.Value, float, org.apache.batik.bridge.BridgeContext)
    {
        java.lang.Object[] $r7;
        org.apache.batik.gvt.GraphicsNode r8;
        org.apache.batik.bridge.BridgeException $r6;
        org.apache.batik.bridge.BridgeContext r2;
        org.apache.batik.css.engine.value.Value r0;
        org.apache.batik.bridge.Bridge $r5;
        org.w3c.dom.Element r3, $r4;
        java.awt.Paint $r10;
        float f0;
        java.lang.String $r1;
        org.apache.batik.bridge.PaintBridge $r9;
        boolean $z0;

        r3 := @parameter0: org.w3c.dom.Element;

        r8 := @parameter1: org.apache.batik.gvt.GraphicsNode;

        r0 := @parameter2: org.apache.batik.css.engine.value.Value;

        f0 := @parameter3: float;

        r2 := @parameter4: org.apache.batik.bridge.BridgeContext;

        $r1 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $r4 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.w3c.dom.Element getReferencedElement(org.w3c.dom.Element,java.lang.String)>(r3, $r1);

        $r5 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)>($r4);

        if $r5 == null goto label1;

        $z0 = $r5 instanceof org.apache.batik.bridge.PaintBridge;

        if $z0 != 0 goto label2;

     label1:
        $r6 = new org.apache.batik.bridge.BridgeException;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r1;

        specialinvoke $r6.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String,java.lang.Object[])>(r2, r3, "css.uri.badTarget", $r7);

        throw $r6;

     label2:
        $r9 = (org.apache.batik.bridge.PaintBridge) $r5;

        $r10 = interfaceinvoke $r9.<org.apache.batik.bridge.PaintBridge: java.awt.Paint createPaint(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,float)>(r2, $r4, r3, r8, f0);

        return $r10;
    }

    public static java.awt.Color convertRGBICCColor(org.w3c.dom.Element, org.apache.batik.css.engine.value.Value, org.apache.batik.css.engine.value.svg.ICCColor, float, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.Color r4;
        org.w3c.dom.Element r2;
        float f0;
        org.apache.batik.bridge.BridgeContext r3;
        org.apache.batik.css.engine.value.svg.ICCColor r0;
        org.apache.batik.css.engine.value.Value r1;

        r2 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: org.apache.batik.css.engine.value.Value;

        r0 := @parameter2: org.apache.batik.css.engine.value.svg.ICCColor;

        f0 := @parameter3: float;

        r3 := @parameter4: org.apache.batik.bridge.BridgeContext;

        r4 = null;

        if r0 == null goto label1;

        r4 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Color convertICCColor(org.w3c.dom.Element,org.apache.batik.css.engine.value.svg.ICCColor,float,org.apache.batik.bridge.BridgeContext)>(r2, r0, f0, r3);

     label1:
        if r4 != null goto label2;

        r4 = staticinvoke <org.apache.batik.bridge.PaintServer: java.awt.Color convertColor(org.apache.batik.css.engine.value.Value,float)>(r1, f0);

     label2:
        return r4;
    }

    public static java.awt.Color convertICCColor(org.w3c.dom.Element, org.apache.batik.css.engine.value.svg.ICCColor, float, org.apache.batik.bridge.BridgeContext)
    {
        java.awt.Color $r9;
        float[] r7, $r8;
        int $i0, i1;
        java.lang.String $r1;
        org.apache.batik.ext.awt.color.ICCColorSpaceExt $r6;
        org.apache.batik.bridge.SVGColorProfileElementBridge r4;
        org.apache.batik.bridge.BridgeContext r2;
        org.apache.batik.bridge.Bridge $r3;
        org.w3c.dom.Element r5;
        float $f0, f1, $f2, $f3, $f4;
        org.apache.batik.css.engine.value.svg.ICCColor r0;

        r5 := @parameter0: org.w3c.dom.Element;

        r0 := @parameter1: org.apache.batik.css.engine.value.svg.ICCColor;

        f1 := @parameter2: float;

        r2 := @parameter3: org.apache.batik.bridge.BridgeContext;

        $r1 = virtualinvoke r0.<org.apache.batik.css.engine.value.svg.ICCColor: java.lang.String getColorProfile()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke r2.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "color-profile");

        r4 = (org.apache.batik.bridge.SVGColorProfileElementBridge) $r3;

        if r4 != null goto label2;

        return null;

     label2:
        $r6 = virtualinvoke r4.<org.apache.batik.bridge.SVGColorProfileElementBridge: org.apache.batik.ext.awt.color.ICCColorSpaceExt createICCColorSpaceExt(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.String)>(r2, r5, $r1);

        if $r6 != null goto label3;

        return null;

     label3:
        $i0 = virtualinvoke r0.<org.apache.batik.css.engine.value.svg.ICCColor: int getNumberOfColors()>();

        r7 = newarray (float)[$i0];

        if $i0 != 0 goto label4;

        return null;

     label4:
        i1 = 0;

        goto label6;

     label5:
        $f0 = virtualinvoke r0.<org.apache.batik.css.engine.value.svg.ICCColor: float getColor(int)>(i1);

        r7[i1] = $f0;

        i1 = i1 + 1;

     label6:
        if i1 < $i0 goto label5;

        $r8 = virtualinvoke $r6.<org.apache.batik.ext.awt.color.ICCColorSpaceExt: float[] intendedToRGB(float[])>(r7);

        $r9 = new java.awt.Color;

        $f4 = $r8[0];

        $f3 = $r8[1];

        $f2 = $r8[2];

        specialinvoke $r9.<java.awt.Color: void <init>(float,float,float,float)>($f4, $f3, $f2, f1);

        return $r9;
    }

    public static java.awt.Color convertColor(org.apache.batik.css.engine.value.Value, float)
    {
        java.awt.Color $r4;
        org.apache.batik.css.engine.value.Value r0, $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3;
        float f0, $f1;

        r0 := @parameter0: org.apache.batik.css.engine.value.Value;

        f0 := @parameter1: float;

        $r1 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value getRed()>();

        $i0 = staticinvoke <org.apache.batik.bridge.PaintServer: int resolveColorComponent(org.apache.batik.css.engine.value.Value)>($r1);

        $r2 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value getGreen()>();

        $i1 = staticinvoke <org.apache.batik.bridge.PaintServer: int resolveColorComponent(org.apache.batik.css.engine.value.Value)>($r2);

        $r3 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value getBlue()>();

        $i2 = staticinvoke <org.apache.batik.bridge.PaintServer: int resolveColorComponent(org.apache.batik.css.engine.value.Value)>($r3);

        $r4 = new java.awt.Color;

        $f1 = f0 * 255.0F;

        $i3 = staticinvoke <java.lang.Math: int round(float)>($f1);

        specialinvoke $r4.<java.awt.Color: void <init>(int,int,int,int)>($i0, $i1, $i2, $i3);

        return $r4;
    }

    public static java.awt.Stroke convertStroke(org.w3c.dom.Element)
    {
        float[] $r6;
        byte $b0, $b3, $b7, $b8;
        int $i1, $i2, $i4, $i5, $i6, i9, $i10, $i11;
        org.apache.batik.css.engine.value.Value $r1, $r2, $r3, $r4, $r5, $r7;
        org.w3c.dom.Element r0;
        float $f0, $f1, $f2, $f3, f4, f5;
        java.awt.BasicStroke $r9;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 52);

        $f0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        return null;

     label1:
        $r2 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 48);

        $i1 = staticinvoke <org.apache.batik.bridge.PaintServer: int convertStrokeLinecap(org.apache.batik.css.engine.value.Value)>($r2);

        $r3 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 49);

        $i2 = staticinvoke <org.apache.batik.bridge.PaintServer: int convertStrokeLinejoin(org.apache.batik.css.engine.value.Value)>($r3);

        $r4 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 50);

        $f1 = staticinvoke <org.apache.batik.bridge.PaintServer: float convertStrokeMiterlimit(org.apache.batik.css.engine.value.Value)>($r4);

        $r5 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 46);

        $r6 = staticinvoke <org.apache.batik.bridge.PaintServer: float[] convertStrokeDasharray(org.apache.batik.css.engine.value.Value)>($r5);

        f4 = 0.0F;

        if $r6 == null goto label7;

        $r7 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r0, 47);

        $f2 = interfaceinvoke $r7.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        f4 = $f2;

        $b3 = $f2 cmpg 0.0F;

        $i10 = (int) $b3;

        if $i10 >= 0 goto label7;

        f5 = 0.0F;

        i9 = 0;

        goto label3;

     label2:
        $f3 = $r6[i9];

        f5 = f5 + $f3;

        i9 = i9 + 1;

     label3:
        $i4 = lengthof $r6;

        if i9 < $i4 goto label2;

        $i5 = lengthof $r6;

        $i6 = $i5 % 2;

        if $i6 == 0 goto label4;

        f5 = f5 * 2.0F;

     label4:
        $b7 = f5 cmpl 0.0F;

        if $b7 != 0 goto label6;

        f4 = 0.0F;

        goto label7;

     label5:
        f4 = f4 + f5;

     label6:
        $b8 = f4 cmpg 0.0F;

        $i11 = (int) $b8;

        if $i11 < 0 goto label5;

     label7:
        $r9 = new java.awt.BasicStroke;

        specialinvoke $r9.<java.awt.BasicStroke: void <init>(float,int,int,float,float[],float)>($f0, $i1, $i2, $f1, $r6, f4);

        return $r9;
    }

    public static float[] convertStrokeDasharray(org.apache.batik.css.engine.value.Value)
    {
        float[] r2;
        org.apache.batik.css.engine.value.Value r0, $r1;
        short $s0;
        byte $b3;
        int $i1, $i2, i4, $i5;
        float $f0, $f1, f2;

        r0 := @parameter0: org.apache.batik.css.engine.value.Value;

        r2 = null;

        $s0 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getCssValueType()>();

        $i5 = (int) $s0;

        if $i5 != 2 goto label3;

        $i1 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: int getLength()>();

        r2 = newarray (float)[$i1];

        f2 = 0.0F;

        i4 = 0;

        goto label2;

     label1:
        $r1 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: org.apache.batik.css.engine.value.Value item(int)>(i4);

        $f0 = interfaceinvoke $r1.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        r2[i4] = $f0;

        $f1 = r2[i4];

        f2 = f2 + $f1;

        i4 = i4 + 1;

     label2:
        $i2 = lengthof r2;

        if i4 < $i2 goto label1;

        $b3 = f2 cmpl 0.0F;

        if $b3 != 0 goto label3;

        r2 = null;

     label3:
        return r2;
    }

    public static float convertStrokeMiterlimit(org.apache.batik.css.engine.value.Value)
    {
        byte $b0;
        int $i1;
        float $f0, $f1;
        org.apache.batik.css.engine.value.Value r0;

        r0 := @parameter0: org.apache.batik.css.engine.value.Value;

        $f0 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $b0 = $f0 cmpg 1.0F;

        $i1 = (int) $b0;

        if $i1 >= 0 goto label1;

        $f1 = 1.0F;

        goto label2;

     label1:
        $f1 = $f0;

     label2:
        return $f1;
    }

    public static int convertStrokeLinecap(org.apache.batik.css.engine.value.Value)
    {
        int $i1;
        char $c0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r3;
        org.apache.batik.css.engine.value.Value r0;

        r0 := @parameter0: org.apache.batik.css.engine.value.Value;

        $r1 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        lookupswitch($i1)
        {
            case 98: goto label1;
            case 114: goto label2;
            case 115: goto label3;
            default: goto label4;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        return 2;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Linecap argument is not an appropriate CSS value");

        throw $r3;
    }

    public static int convertStrokeLinejoin(org.apache.batik.css.engine.value.Value)
    {
        int $i1;
        char $c0;
        java.lang.String $r1;
        java.lang.IllegalArgumentException $r3;
        org.apache.batik.css.engine.value.Value r0;

        r0 := @parameter0: org.apache.batik.css.engine.value.Value;

        $r1 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: java.lang.String getStringValue()>();

        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $i1 = (int) $c0;

        lookupswitch($i1)
        {
            case 98: goto label3;
            case 109: goto label1;
            case 114: goto label2;
            default: goto label4;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        return 2;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Linejoin argument is not an appropriate CSS value");

        throw $r3;
    }

    public static int resolveColorComponent(org.apache.batik.css.engine.value.Value)
    {
        short $s0;
        byte $b1, $b2, $b3, $b4;
        int $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        java.lang.IllegalArgumentException $r2;
        org.apache.batik.css.engine.value.Value r0;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @parameter0: org.apache.batik.css.engine.value.Value;

        $s0 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: short getPrimitiveType()>();

        $i7 = (int) $s0;

        lookupswitch($i7)
        {
            case 1: goto label5;
            case 2: goto label1;
            default: goto label9;
        };

     label1:
        $f0 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $b1 = $f0 cmpl 100.0F;

        $i8 = (int) $b1;

        if $i8 <= 0 goto label2;

        $f2 = 100.0F;

        goto label4;

     label2:
        $b2 = $f0 cmpg 0.0F;

        $i9 = (int) $b2;

        if $i9 >= 0 goto label3;

        $f2 = 0.0F;

        goto label4;

     label3:
        $f2 = $f0;

     label4:
        $f3 = 255.0F * $f2;

        $f4 = $f3 / 100.0F;

        $i5 = staticinvoke <java.lang.Math: int round(float)>($f4);

        return $i5;

     label5:
        $f1 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $b3 = $f1 cmpl 255.0F;

        $i10 = (int) $b3;

        if $i10 <= 0 goto label6;

        $f5 = 255.0F;

        goto label8;

     label6:
        $b4 = $f1 cmpg 0.0F;

        $i11 = (int) $b4;

        if $i11 >= 0 goto label7;

        $f5 = 0.0F;

        goto label8;

     label7:
        $f5 = $f1;

     label8:
        $i6 = staticinvoke <java.lang.Math: int round(float)>($f5);

        return $i6;

     label9:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Color component argument is not an appropriate CSS value");

        throw $r2;
    }

    public static float convertOpacity(org.apache.batik.css.engine.value.Value)
    {
        byte $b0, $b1;
        int $i2, $i3;
        float $f0, $f1;
        org.apache.batik.css.engine.value.Value r0;

        r0 := @parameter0: org.apache.batik.css.engine.value.Value;

        $f0 = interfaceinvoke r0.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $b0 = $f0 cmpg 0.0F;

        $i2 = (int) $b0;

        if $i2 >= 0 goto label1;

        $f1 = 0.0F;

        goto label3;

     label1:
        $b1 = $f0 cmpl 1.0F;

        $i3 = (int) $b1;

        if $i3 <= 0 goto label2;

        $f1 = 1.0F;

        goto label3;

     label2:
        $f1 = $f0;

     label3:
        return $f1;
    }
}
