public class org.springframework.core.type.filter.RegexPatternTypeFilter extends org.springframework.core.type.filter.AbstractClassTestingTypeFilter
{
    private final java.util.regex.Pattern pattern;

    public void <init>(java.util.regex.Pattern)
    {
        java.util.regex.Pattern r1;
        org.springframework.core.type.filter.RegexPatternTypeFilter r0;

        r0 := @this: org.springframework.core.type.filter.RegexPatternTypeFilter;

        r1 := @parameter0: java.util.regex.Pattern;

        specialinvoke r0.<org.springframework.core.type.filter.AbstractClassTestingTypeFilter: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Pattern must not be null");

        r0.<org.springframework.core.type.filter.RegexPatternTypeFilter: java.util.regex.Pattern pattern> = r1;

        return;
    }

    protected boolean match(org.springframework.core.type.ClassMetadata)
    {
        java.util.regex.Matcher $r4;
        org.springframework.core.type.filter.RegexPatternTypeFilter r0;
        org.springframework.core.type.ClassMetadata r1;
        java.util.regex.Pattern $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.springframework.core.type.filter.RegexPatternTypeFilter;

        r1 := @parameter0: org.springframework.core.type.ClassMetadata;

        $r2 = r0.<org.springframework.core.type.filter.RegexPatternTypeFilter: java.util.regex.Pattern pattern>;

        $r3 = interfaceinvoke r1.<org.springframework.core.type.ClassMetadata: java.lang.String getClassName()>();

        $r4 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r3);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }
}
