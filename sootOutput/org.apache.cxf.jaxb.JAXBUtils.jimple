public final class org.apache.cxf.jaxb.JAXBUtils extends java.lang.Object
{
    public static final java.lang.String JAXB_URI;
    private static final char[] XML_NAME_PUNCTUATION_CHARS;
    private static final java.lang.String XML_NAME_PUNCTUATION_STRING;
    private static final java.util.Map BUILTIN_DATATYPES_MAP;
    private static final java.util.Map HOLDER_TYPES_MAP;
    private static final java.util.logging.Logger LOG;
    private static java.lang.ClassLoader jaxbXjcLoader;

    private void <init>()
    {
        org.apache.cxf.jaxb.JAXBUtils r0;

        r0 := @this: org.apache.cxf.jaxb.JAXBUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String builtInTypeToJavaType(java.lang.String)
    {
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public static java.lang.Class holderClass(java.lang.String)
    {
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.Class $r3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map HOLDER_TYPES_MAP>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r3 = (java.lang.Class) $r2;

        return $r3;
    }

    protected static boolean isJavaKeyword(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.cxf.helpers.JavaUtils: boolean isJavaKeyword(java.lang.String)>(r0);

        return $z0;
    }

    public static java.lang.String namespaceURIToPackage(java.lang.String)
    {
        java.net.URISyntaxException $r3;
        java.net.URI $r0;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.net.URI;

        specialinvoke $r0.<java.net.URI: void <init>(java.lang.String)>(r1);

        $r2 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.String nameSpaceURIToPackage(java.net.URI)>($r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.net.URISyntaxException from label1 to label2 with label3;
    }

    public static java.lang.String nameSpaceURIToPackage(java.net.URI)
    {
        java.net.URI r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.StringBuilder $r28;
        java.util.StringTokenizer $r29, $r30, $r31;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i9, i10, $i11;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r20, $r21, $r22, r23, $r24, r25, $r27;
        char $c8;

        r1 := @parameter0: java.net.URI;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.net.URI: java.lang.String getAuthority()>();

        r23 = $r2;

        $r3 = virtualinvoke r1.<java.net.URI: java.lang.String getScheme()>();

        if $r2 != null goto label01;

        $r22 = "urn";

        $z8 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z8 == 0 goto label01;

        r23 = virtualinvoke r1.<java.net.URI: java.lang.String getSchemeSpecificPart()>();

     label01:
        if null == r23 goto label14;

        $r9 = "";

        $z1 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r23);

        if $z1 != 0 goto label14;

        $r10 = "urn";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label09;

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        i9 = 0;

     label02:
        $i6 = virtualinvoke $r28.<java.lang.StringBuilder: int length()>();

        if i9 >= $i6 goto label04;

        $c8 = virtualinvoke $r28.<java.lang.StringBuilder: char charAt(int)>(i9);

        $i11 = (int) $c8;

        if $i11 != 45 goto label03;

        virtualinvoke $r28.<java.lang.StringBuilder: void setCharAt(int,char)>(i9, 46);

     label03:
        i9 = i9 + 1;

        goto label02;

     label04:
        $r18 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r28.<java.lang.StringBuilder: void setLength(int)>(0);

        $r29 = new java.util.StringTokenizer;

        specialinvoke $r29.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r18, ":");

     label05:
        $z7 = virtualinvoke $r29.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z7 == 0 goto label08;

        $r20 = virtualinvoke $r29.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i7 = virtualinvoke $r28.<java.lang.StringBuilder: int length()>();

        if $i7 <= 0 goto label06;

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, ".");

        $r21 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.String normalizePackageNamePart(java.lang.String)>($r20);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, $r21);

        goto label07;

     label06:
        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, $r20);

     label07:
        goto label05;

     label08:
        r23 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r28.<java.lang.StringBuilder: void setLength(int)>(0);

     label09:
        $r30 = new java.util.StringTokenizer;

        specialinvoke $r30.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r23, ".");

        $z3 = virtualinvoke $r30.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z3 == 0 goto label13;

     label10:
        $z9 = virtualinvoke $r30.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z9 == 0 goto label13;

        $r15 = virtualinvoke $r30.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i5 = virtualinvoke $r28.<java.lang.StringBuilder: int length()>();

        if $i5 != 0 goto label11;

        $r17 = "www";

        $z6 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z6 == 0 goto label12;

        goto label10;

     label11:
        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, ".");

     label12:
        $r16 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.String normalizePackageNamePart(java.lang.String)>($r15);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, $r16);

        goto label10;

     label13:
        $r12 = "http";

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z4 != 0 goto label14;

        $r13 = "urn";

        $z5 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3);

        if $z5 != 0 goto label14;

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, ".");

        $r14 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.String normalizePackageNamePart(java.lang.String)>($r3);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, $r14);

     label14:
        $r24 = virtualinvoke r1.<java.net.URI: java.lang.String getPath()>();

        r25 = $r24;

        if $r24 != null goto label15;

        r25 = "";

     label15:
        $i0 = virtualinvoke r25.<java.lang.String: int lastIndexOf(int)>(46);

        i10 = $i0;

        if $i0 >= 0 goto label16;

        i10 = virtualinvoke r25.<java.lang.String: int length()>();

        goto label18;

     label16:
        $i1 = $i0 + 1;

        $r4 = virtualinvoke r25.<java.lang.String: java.lang.String substring(int)>($i1);

        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i2 < 2 goto label17;

        $i4 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i4 <= 3 goto label18;

        $r8 = "html";

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r4);

        if $z0 != 0 goto label18;

     label17:
        i10 = virtualinvoke r25.<java.lang.String: int length()>();

     label18:
        $r31 = new java.util.StringTokenizer;

        $r27 = virtualinvoke r25.<java.lang.String: java.lang.String substring(int,int)>(0, i10);

        specialinvoke $r31.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r27, "/");

     label19:
        $z10 = virtualinvoke $r31.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z10 == 0 goto label21;

        $r6 = virtualinvoke $r31.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $i3 = virtualinvoke $r28.<java.lang.StringBuilder: int length()>();

        if $i3 <= 0 goto label20;

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

     label20:
        $r7 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.String normalizePackageNamePart(java.lang.String)>($r6);

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label19;

     label21:
        $r5 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private static java.lang.String normalizePackageNamePart(java.lang.String)
    {
        int $i0, $i1, i6, i7;
        java.lang.String r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2;
        char $c2, $c3, $c4, $c5;
        java.lang.StringBuilder $r0;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r2);

        i6 = 0;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if i6 >= $i0 goto label2;

        $c4 = virtualinvoke $r0.<java.lang.StringBuilder: char charAt(int)>(i6);

        $c5 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c4);

        virtualinvoke $r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i6, $c5);

        i6 = i6 + 1;

        goto label1;

     label2:
        i7 = 0;

     label3:
        $i1 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if i7 >= $i1 goto label5;

        $c3 = virtualinvoke $r0.<java.lang.StringBuilder: char charAt(int)>(i7);

        $z2 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c3);

        if $z2 != 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i7, 95);

     label4:
        i7 = i7 + 1;

        goto label3;

     label5:
        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: boolean isJavaKeyword(java.lang.String)>($r3);

        if $z0 == 0 goto label6;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 95);

     label6:
        $c2 = virtualinvoke $r0.<java.lang.StringBuilder: char charAt(int)>(0);

        $z1 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c2);

        if $z1 != 0 goto label7;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 95);

     label7:
        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    public static java.lang.String nameToIdentifier(java.lang.String, org.apache.cxf.jaxb.JAXBUtils$IdentifierType)
    {
        java.util.ArrayList $r2;
        java.util.StringTokenizer $r3;
        int $i0, $i2, $i3, i5, i6;
        java.lang.String $r4, $r5, $r6, $r8, r9;
        boolean $z0, $z1, $z2, z3, $z4, $z5;
        org.apache.cxf.jaxb.JAXBUtils$IdentifierType r1, $r7;
        char $c1, $c4;
        java.lang.StringBuilder $r0;

        r9 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.cxf.jaxb.JAXBUtils$IdentifierType;

        if null == r9 goto label01;

        $i0 = virtualinvoke r9.<java.lang.String: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return r9;

     label02:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(r9);

        $c1 = virtualinvoke $r0.<java.lang.StringBuilder: char charAt(int)>(0);

        z3 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c1);

        i5 = 1;

     label03:
        $i2 = virtualinvoke r9.<java.lang.String: int length()>();

        if i5 >= $i2 goto label06;

        if z3 == 0 goto label06;

        if z3 == 0 goto label04;

        $c4 = virtualinvoke $r0.<java.lang.StringBuilder: char charAt(int)>(i5);

        $z2 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c4);

        if $z2 == 0 goto label04;

        $z4 = 1;

        goto label05;

     label04:
        $z4 = 0;

     label05:
        z3 = $z4;

        i5 = i5 + 1;

        goto label03;

     label06:
        $z0 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: boolean isConventionalIdentifier(java.lang.StringBuilder,org.apache.cxf.jaxb.JAXBUtils$IdentifierType)>($r0, r1);

        if z3 == 0 goto label08;

        if $z0 == 0 goto label08;

        $z1 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: boolean isJavaKeyword(java.lang.String)>(r9);

        if $z1 == 0 goto label07;

        $r7 = <org.apache.cxf.jaxb.JAXBUtils$IdentifierType: org.apache.cxf.jaxb.JAXBUtils$IdentifierType VARIABLE>;

        if r1 != $r7 goto label07;

        $r8 = virtualinvoke r9.<java.lang.String: java.lang.String toString()>();

        r9 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.String normalizePackageNamePart(java.lang.String)>($r8);

     label07:
        return r9;

     label08:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new java.util.StringTokenizer;

        $r4 = <org.apache.cxf.jaxb.JAXBUtils: java.lang.String XML_NAME_PUNCTUATION_STRING>;

        specialinvoke $r3.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r9, $r4);

     label09:
        $z5 = virtualinvoke $r3.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z5 == 0 goto label10;

        $r6 = virtualinvoke $r3.<java.util.StringTokenizer: java.lang.String nextToken()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r6);

        goto label09;

     label10:
        i6 = 0;

     label11:
        $i3 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i6 >= $i3 goto label12;

        staticinvoke <org.apache.cxf.jaxb.JAXBUtils: void splitWord(java.util.List,int)>($r2, i6);

        i6 = i6 + 1;

        goto label11;

     label12:
        $r5 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.String makeConventionalIdentifier(java.util.List,org.apache.cxf.jaxb.JAXBUtils$IdentifierType)>($r2, r1);

        return $r5;
    }

    private static void splitWord(java.util.List, int)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8;
        java.util.List r0;
        java.lang.StringBuilder $r3;
        int i0, $i1, $i3, $i4, $i7, $i11, i14, i15, i17, $i18, $i19;
        java.lang.String r2, $r4;
        char $c2, $c5, $c6, $c8, $c9, $c10, $c12, $c13, c16;
        java.lang.Object $r1;

        r0 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0);

        r2 = (java.lang.String) $r1;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 > 1 goto label01;

        return;

     label01:
        i14 = i0 + 1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>(r2);

        i15 = 0;

        $c2 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>(0);

        c16 = $c2;

        $z0 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c2);

        if $z0 == 0 goto label02;

        $c13 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c2);

        virtualinvoke $r3.<java.lang.StringBuilder: void setCharAt(int,char)>(0, $c13);

     label02:
        i17 = 1;

     label03:
        $i18 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if i17 >= $i18 goto label13;

        $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c16);

        if $z1 == 0 goto label05;

     label04:
        $i11 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if i17 >= $i11 goto label11;

        $c12 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>(i17);

        $z7 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c12);

        if $z7 == 0 goto label11;

        i17 = i17 + 1;

        goto label04;

     label05:
        $z2 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: boolean isCasedLetter(char)>(c16);

        if $z2 == 0 goto label09;

        z8 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(c16);

     label06:
        $i7 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if i17 >= $i7 goto label08;

        $c8 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>(i17);

        $z5 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: boolean isCasedLetter(char)>($c8);

        if $z5 == 0 goto label08;

        $c9 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>(i17);

        $z6 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c9);

        if $z6 == 0 goto label07;

        if z8 == 0 goto label07;

        goto label08;

     label07:
        $c10 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>(i17);

        z8 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c10);

        i17 = i17 + 1;

        goto label06;

     label08:
        goto label11;

     label09:
        $i4 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if i17 >= $i4 goto label11;

        $c5 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>(i17);

        $z3 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: boolean isMark(char)>($c5);

        if $z3 != 0 goto label10;

        $c6 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>(i17);

        $z4 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: boolean isCasedLetter(char)>($c6);

        if $z4 != 0 goto label11;

     label10:
        i17 = i17 + 1;

        goto label09;

     label11:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String substring(int,int)>(i15, i17);

        interfaceinvoke r0.<java.util.List: void add(int,java.lang.Object)>(i14, $r4);

        i14 = i14 + 1;

        $i19 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if i17 < $i19 goto label12;

        goto label13;

     label12:
        i15 = i17;

        c16 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>(i17);

        goto label03;

     label13:
        $i3 = i0 + 1;

        if i14 <= $i3 goto label14;

        interfaceinvoke r0.<java.util.List: java.lang.Object remove(int)>(i0);

     label14:
        return;
    }

    private static boolean isMark(char)
    {
        char c0;
        boolean $z0, $z1, $z2, $z3;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>(c0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0);

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    private static boolean isCasedLetter(char)
    {
        char c0;
        boolean $z0, $z1, $z2;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(c0);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean isConventionalIdentifier(java.lang.StringBuilder, org.apache.cxf.jaxb.JAXBUtils$IdentifierType)
    {
        int $i0, $i2, $i3, $i5, i7;
        java.lang.String $r6, $r8;
        boolean $z0, $z1, $z2, z3;
        org.apache.cxf.jaxb.JAXBUtils$IdentifierType r1, $r2, $r3, $r4, $r5;
        java.lang.CharSequence $r7, $r9;
        char $c1, $c4, $c6;
        java.lang.StringBuilder r0;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: org.apache.cxf.jaxb.JAXBUtils$IdentifierType;

        if null == r0 goto label01;

        $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label02;

     label01:
        return 0;

     label02:
        $r2 = <org.apache.cxf.jaxb.JAXBUtils$IdentifierType: org.apache.cxf.jaxb.JAXBUtils$IdentifierType CONSTANT>;

        if $r2 != r1 goto label06;

        i7 = 0;

     label03:
        $i5 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        if i7 >= $i5 goto label05;

        $c6 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>(i7);

        $z2 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c6);

        if $z2 == 0 goto label04;

        return 0;

     label04:
        i7 = i7 + 1;

        goto label03;

     label05:
        z3 = 1;

        goto label12;

     label06:
        $r3 = <org.apache.cxf.jaxb.JAXBUtils$IdentifierType: org.apache.cxf.jaxb.JAXBUtils$IdentifierType VARIABLE>;

        if $r3 != r1 goto label07;

        $c4 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>(0);

        z3 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c4);

        goto label12;

     label07:
        $r4 = <org.apache.cxf.jaxb.JAXBUtils$IdentifierType: org.apache.cxf.jaxb.JAXBUtils$IdentifierType GETTER>;

        if $r4 != r1 goto label09;

        $i3 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        if $i3 < 3 goto label08;

        $r8 = "get";

        $r9 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>(0, 3);

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label09;

     label08:
        return 0;

     label09:
        $r5 = <org.apache.cxf.jaxb.JAXBUtils$IdentifierType: org.apache.cxf.jaxb.JAXBUtils$IdentifierType SETTER>;

        if $r5 != r1 goto label11;

        $i2 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        if $i2 < 3 goto label10;

        $r6 = "set";

        $r7 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.CharSequence subSequence(int,int)>(0, 3);

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 != 0 goto label11;

     label10:
        return 0;

     label11:
        $c1 = virtualinvoke r0.<java.lang.StringBuilder: char charAt(int)>(0);

        z3 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c1);

     label12:
        return z3;
    }

    private static java.lang.String makeConventionalIdentifier(java.util.List, org.apache.cxf.jaxb.JAXBUtils$IdentifierType)
    {
        boolean $z0, $z1, $z2, z3, $z4, z5, z6;
        org.apache.cxf.jaxb.JAXBUtils$IdentifierType r1, $r2, $r3, $r8, $r9, $r11;
        java.util.List r4;
        java.lang.StringBuilder $r0;
        int $i0, $i7, i11, i12;
        java.lang.String $r5, r7;
        java.util.Iterator $r10;
        char $c1, $c2, $c3, $c4, $c5, $c6, $c8, $c9, $c10;
        java.lang.Object $r6;

        r4 := @parameter0: java.util.List;

        r1 := @parameter1: org.apache.cxf.jaxb.JAXBUtils$IdentifierType;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        z3 = 1;

        z6 = 1;

        z5 = 1;

        $r2 = <org.apache.cxf.jaxb.JAXBUtils$IdentifierType: org.apache.cxf.jaxb.JAXBUtils$IdentifierType GETTER>;

        if $r2 != r1 goto label01;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("get");

        goto label02;

     label01:
        $r3 = <org.apache.cxf.jaxb.JAXBUtils$IdentifierType: org.apache.cxf.jaxb.JAXBUtils$IdentifierType SETTER>;

        if $r3 != r1 goto label02;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("set");

     label02:
        $r10 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z4 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        $r6 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        i11 = $i0;

        if $i0 <= 0 goto label04;

        $r9 = <org.apache.cxf.jaxb.JAXBUtils$IdentifierType: org.apache.cxf.jaxb.JAXBUtils$IdentifierType CONSTANT>;

        if $r9 != r1 goto label04;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        i11 = $i0 + 1;

     label04:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r11 = <org.apache.cxf.jaxb.JAXBUtils$IdentifierType: org.apache.cxf.jaxb.JAXBUtils$IdentifierType CONSTANT>;

        if $r11 != r1 goto label08;

        i12 = i11;

     label05:
        $i7 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        if i12 >= $i7 goto label07;

        $c8 = virtualinvoke $r0.<java.lang.StringBuilder: char charAt(int)>(i12);

        $z2 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c8);

        if $z2 == 0 goto label06;

        $c9 = virtualinvoke $r0.<java.lang.StringBuilder: char charAt(int)>(i12);

        $c10 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c9);

        virtualinvoke $r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i12, $c10);

     label06:
        i12 = i12 + 1;

        goto label05;

     label07:
        goto label10;

     label08:
        $r8 = <org.apache.cxf.jaxb.JAXBUtils$IdentifierType: org.apache.cxf.jaxb.JAXBUtils$IdentifierType VARIABLE>;

        if $r8 != r1 goto label09;

        if z5 == 0 goto label10;

        $c4 = virtualinvoke $r0.<java.lang.StringBuilder: char charAt(int)>(i11);

        $z1 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c4);

        if $z1 == 0 goto label10;

        $c5 = virtualinvoke $r0.<java.lang.StringBuilder: char charAt(int)>(i11);

        $c6 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c5);

        virtualinvoke $r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i11, $c6);

        goto label10;

     label09:
        if z6 == 0 goto label10;

        $c1 = virtualinvoke $r0.<java.lang.StringBuilder: char charAt(int)>(i11);

        $z0 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c1);

        if $z0 == 0 goto label10;

        $c2 = virtualinvoke $r0.<java.lang.StringBuilder: char charAt(int)>(i11);

        $c3 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c2);

        virtualinvoke $r0.<java.lang.StringBuilder: void setCharAt(int,char)>(i11, $c3);

     label10:
        z3 = 0;

        z6 = 0;

        z5 = 0;

        goto label03;

     label11:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.Class getValidClass(java.lang.Class)
    {
        java.lang.Class[] $r1, $r3;
        java.lang.reflect.Constructor $r2, r7;
        java.lang.Class r6;
        java.lang.String $r0, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r6 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r6.<java.lang.Class: boolean isEnum()>();

        if $z0 == 0 goto label01;

        return r6;

     label01:
        $z1 = virtualinvoke r6.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label02;

        return r6;

     label02:
        if r6 == class "Ljava/lang/Object;" goto label03;

        if r6 == class "Ljava/lang/String;" goto label03;

        $r4 = "javax.xml.ws.Holder";

        $r5 = virtualinvoke r6.<java.lang.Class: java.lang.String getName()>();

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label04;

     label03:
        r6 = null;

        goto label07;

     label04:
        $z4 = virtualinvoke r6.<java.lang.Class: boolean isPrimitive()>();

        if $z4 != 0 goto label05;

        $z5 = virtualinvoke r6.<java.lang.Class: boolean isAnnotation()>();

        if $z5 == 0 goto label06;

     label05:
        r6 = null;

        goto label07;

     label06:
        $z6 = virtualinvoke r6.<java.lang.Class: boolean isInterface()>();

        if $z6 == 0 goto label07;

        return r6;

     label07:
        if r6 == null goto label10;

        $r0 = virtualinvoke r6.<java.lang.Class: java.lang.String getName()>();

        $z2 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("javax.xml.ws.wsaddressing.W3CEndpointReference");

        if $z2 == 0 goto label08;

        return r6;

     label08:
        $r1 = newarray (java.lang.Class)[0];

        $r2 = staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class,java.lang.Class[])>(r6, $r1);

        r7 = $r2;

        if $r2 != null goto label09;

        $r3 = newarray (java.lang.Class)[0];

        r7 = staticinvoke <org.apache.cxf.common.util.ReflectionUtil: java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[])>(r6, $r3);

     label09:
        if r7 != null goto label10;

        r6 = null;

     label10:
        return r6;
    }

    private static synchronized java.lang.ClassLoader getXJCClassLoader()
    {
        java.net.URL $r10;
        java.net.URL[] $r8;
        java.net.URLClassLoader $r7;
        java.lang.String $r4;
        java.net.URI $r9;
        boolean $z0, $z1, $z2;
        java.lang.Exception $r2, $r3;
        java.io.File $r5, $r6, $r12, r13;
        java.lang.ClassLoader $r0, $r1, $r11, $r14;

        $r0 = <org.apache.cxf.jaxb.JAXBUtils: java.lang.ClassLoader jaxbXjcLoader>;

        if $r0 != null goto label8;

     label1:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.tools.internal.xjc.api.XJC");

        $r1 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        <org.apache.cxf.jaxb.JAXBUtils: java.lang.ClassLoader jaxbXjcLoader> = $r1;

     label2:
        goto label8;

     label3:
        $r3 := @caughtexception;

        $r4 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getProperty(java.lang.String)>("java.home");

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r4);

        if $z0 != 0 goto label8;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r4);

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "lib/tools.jar");

        r13 = $r6;

        $z1 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label4;

        $r12 = new java.io.File;

        specialinvoke $r12.<java.io.File: void <init>(java.io.File,java.lang.String)>($r5, "../lib/tools.jar");

        r13 = $r12;

     label4:
        $z2 = virtualinvoke r13.<java.io.File: boolean exists()>();

        if $z2 == 0 goto label8;

     label5:
        $r7 = new java.net.URLClassLoader;

        $r8 = newarray (java.net.URL)[1];

        $r9 = virtualinvoke r13.<java.io.File: java.net.URI toURI()>();

        $r10 = virtualinvoke $r9.<java.net.URI: java.net.URL toURL()>();

        $r8[0] = $r10;

        specialinvoke $r7.<java.net.URLClassLoader: void <init>(java.net.URL[])>($r8);

        <org.apache.cxf.jaxb.JAXBUtils: java.lang.ClassLoader jaxbXjcLoader> = $r7;

        $r11 = <org.apache.cxf.jaxb.JAXBUtils: java.lang.ClassLoader jaxbXjcLoader>;

        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.sun.tools.internal.xjc.api.XJC", 0, $r11);

     label6:
        goto label8;

     label7:
        $r2 := @caughtexception;

        <org.apache.cxf.jaxb.JAXBUtils: java.lang.ClassLoader jaxbXjcLoader> = null;

     label8:
        $r14 = <org.apache.cxf.jaxb.JAXBUtils: java.lang.ClassLoader jaxbXjcLoader>;

        return $r14;

        catch java.lang.Exception from label1 to label2 with label3;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public static javax.xml.bind.JAXBContext createRIContext(java.lang.Class[], java.lang.String) throws javax.xml.bind.JAXBException
    {
        java.lang.Object[] $r11;
        java.lang.Class[] r2, $r8;
        java.util.HashMap $r0;
        javax.xml.bind.JAXBException $r4;
        java.lang.Exception $r3;
        java.lang.ClassNotFoundException $r5;
        java.lang.Class r7, $r9;
        java.lang.Object $r12;
        java.lang.String r1;
        java.lang.ClassLoader $r6;
        java.lang.reflect.Method $r10;
        javax.xml.bind.JAXBContext $r13;

        r2 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.String;

     label1:
        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

     label2:
        r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.xml.bind.v2.ContextFactory");

        if r1 == null goto label3;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("com.sun.xml.bind.defaultNamespaceRemap", r1);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.ClassLoader getXJCClassLoader()>();

        r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.sun.xml.internal.bind.v2.ContextFactory", 1, $r6);

        if r1 == null goto label5;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("com.sun.xml.internal.bind.defaultNamespaceRemap", r1);

     label5:
        $r8 = newarray (java.lang.Class)[2];

        $r9 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r8[0] = $r9;

        $r8[1] = class "Ljava/util/Map;";

        $r10 = virtualinvoke r7.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("createContext", $r8);

        $r11 = newarray (java.lang.Object)[2];

        $r11[0] = r2;

        $r11[1] = $r0;

        $r12 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r11);

        $r13 = (javax.xml.bind.JAXBContext) $r12;

     label6:
        return $r13;

     label7:
        $r3 := @caughtexception;

        $r4 = new javax.xml.bind.JAXBException;

        specialinvoke $r4.<javax.xml.bind.JAXBException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.lang.ClassNotFoundException from label2 to label3 with label4;
        catch java.lang.Exception from label1 to label6 with label7;
    }

    public static void setNamespaceWrapper(java.util.Map, javax.xml.bind.Marshaller) throws javax.xml.bind.PropertyException
    {
        java.lang.Object[] $r6;
        javax.xml.bind.Marshaller r0;
        java.lang.reflect.Constructor $r5;
        java.util.logging.Level $r9, $r12;
        java.util.Map r7;
        java.lang.String $r2;
        boolean $z0;
        java.lang.Class[] $r4;
        java.util.logging.Logger $r10, $r13;
        java.lang.Exception $r11;
        java.lang.Class $r1, $r3;
        java.lang.Object $r8, r14;

        r7 := @parameter0: java.util.Map;

        r0 := @parameter1: javax.xml.bind.Marshaller;

        r14 = null;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>(".internal.");

        if $z0 == 0 goto label2;

        $r8 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.Object createNamespaceWrapper(java.util.Map)>(r7);

        if $r8 != null goto label1;

        $r10 = <org.apache.cxf.jaxb.JAXBUtils: java.util.logging.Logger LOG>;

        $r9 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r9, "Could not create namespace mapper for JDK internal JAXB implementation.");

        goto label6;

     label1:
        interfaceinvoke r0.<javax.xml.bind.Marshaller: void setProperty(java.lang.String,java.lang.Object)>("com.sun.xml.internal.bind.namespacePrefixMapper", $r8);

        goto label6;

     label2:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.apache.cxf.jaxb.NamespaceMapper");

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "Ljava/util/Map;";

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r4);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r7;

        r14 = virtualinvoke $r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        $r13 = <org.apache.cxf.jaxb.JAXBUtils: java.util.logging.Logger LOG>;

        $r12 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke $r13.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r12, "Could not create NamespaceMapper", $r11);

     label5:
        interfaceinvoke r0.<javax.xml.bind.Marshaller: void setProperty(java.lang.String,java.lang.Object)>("com.sun.xml.bind.namespacePrefixMapper", r14);

     label6:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static org.apache.cxf.jaxb.JAXBUtils$BridgeWrapper createBridge(java.util.Set, javax.xml.namespace.QName, java.lang.Class, java.lang.'annotation'.Annotation[]) throws javax.xml.bind.JAXBException
    {
        java.lang.reflect.Method[] $r18;
        java.lang.reflect.Method $r21, r26;
        boolean $z0, $z1;
        java.util.Set r14;
        javax.xml.bind.JAXBException $r34;
        java.lang.Exception $r33;
        java.lang.StringBuilder $r0, $r1, $r2, $r37, $r38, $r39;
        javax.xml.namespace.QName r9;
        java.lang.ClassLoader $r36, $r41;
        java.lang.Object[] $r8, $r22, $r29, $r31;
        java.lang.'annotation'.Annotation[] r5;
        java.lang.reflect.Constructor $r7;
        java.util.ArrayList $r12, $r13;
        org.apache.cxf.jaxb.JAXBUtils$BridgeWrapper $r25;
        int $i0, $i1, $i2, i3;
        java.lang.Boolean $r32;
        java.lang.String $r3, $r27, $r40;
        java.lang.Class[] $r4, $r20, $r28, $r30;
        java.lang.reflect.Field $r15;
        java.lang.Class $r6, r10, $r17, $r19, r42, r43;
        java.lang.Object $r11, $r16, $r23, $r24, r44;
        java.lang.ClassNotFoundException $r35;

        r14 := @parameter0: java.util.Set;

        r9 := @parameter1: javax.xml.namespace.QName;

        r10 := @parameter2: java.lang.Class;

        r5 := @parameter3: java.lang.'annotation'.Annotation[];

     label01:
        r42 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.xml.bind.api.JAXBRIContext");

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("com.sun.xml.bind.");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("api.TypeReference");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r43 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r3);

     label02:
        goto label04;

     label03:
        $r35 := @caughtexception;

        $r36 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.ClassLoader getXJCClassLoader()>();

        r42 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.sun.xml.internal.bind.api.JAXBRIContext", 1, $r36);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("com.sun.xml.internal.bind.");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("api.TypeReference");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        $r41 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.ClassLoader getXJCClassLoader()>();

        r43 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r40, 1, $r41);

     label04:
        $r4 = newarray (java.lang.Class)[3];

        $r4[0] = class "Ljavax/xml/namespace/QName;";

        $r4[1] = class "Ljava/lang/reflect/Type;";

        $r6 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>();

        $r4[2] = $r6;

        $r7 = virtualinvoke r43.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r4);

        $r8 = newarray (java.lang.Object)[3];

        $r8[0] = r9;

        $r8[1] = r10;

        $r8[2] = r5;

        $r11 = virtualinvoke $r7.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r8);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r11);

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>(java.util.Collection)>(r14);

        $r15 = virtualinvoke r43.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>("type");

        $r16 = virtualinvoke $r15.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r11);

        $r17 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>($r17);

        $z0 = virtualinvoke r10.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label05;

        interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r10);

     label05:
        r44 = null;

        $r18 = virtualinvoke r42.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i2 = lengthof $r18;

        i3 = 0;

     label06:
        if i3 >= $i2 goto label08;

        r26 = $r18[i3];

        $r27 = virtualinvoke r26.<java.lang.reflect.Method: java.lang.String getName()>();

        $z1 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>("newInstance");

        if $z1 == 0 goto label07;

        $r28 = virtualinvoke r26.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r28;

        if $i0 != 6 goto label07;

        $r29 = newarray (java.lang.Object)[6];

        $i1 = interfaceinvoke $r13.<java.util.List: int size()>();

        $r30 = newarray (java.lang.Class)[$i1];

        $r31 = interfaceinvoke $r13.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r30);

        $r29[0] = $r31;

        $r29[1] = $r12;

        $r29[2] = null;

        $r29[3] = null;

        $r32 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r29[4] = $r32;

        $r29[5] = null;

        r44 = virtualinvoke r26.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r29);

     label07:
        i3 = i3 + 1;

        goto label06;

     label08:
        $r19 = virtualinvoke r44.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = newarray (java.lang.Class)[1];

        $r20[0] = r43;

        $r21 = virtualinvoke $r19.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("createBridge", $r20);

        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = $r11;

        $r23 = virtualinvoke $r21.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r44, $r22);

        $r24 = staticinvoke <org.apache.cxf.common.util.ReflectionInvokationHandler: java.lang.Object createProxyWrapper(java.lang.Object,java.lang.Class)>($r23, class "Lorg/apache/cxf/jaxb/JAXBUtils$BridgeWrapper;");

        $r25 = (org.apache.cxf.jaxb.JAXBUtils$BridgeWrapper) $r24;

     label09:
        return $r25;

     label10:
        $r33 := @caughtexception;

        $r34 = new javax.xml.bind.JAXBException;

        specialinvoke $r34.<javax.xml.bind.JAXBException: void <init>(java.lang.Throwable)>($r33);

        throw $r34;

        catch java.lang.ClassNotFoundException from label01 to label02 with label03;
        catch java.lang.Exception from label01 to label09 with label10;
    }

    public static org.apache.cxf.jaxb.JAXBUtils$SchemaCompiler createSchemaCompiler() throws javax.xml.bind.JAXBException
    {
        org.apache.cxf.jaxb.JAXBUtils$SchemaCompiler $r5;
        java.lang.Throwable $r8;
        java.lang.Object[] $r3, $r13;
        java.lang.Class[] $r1, $r11;
        javax.xml.bind.JAXBException $r7;
        java.lang.Exception $r6;
        java.lang.Class $r0, $r10;
        java.lang.Object $r4, r14;
        java.lang.ClassLoader $r9;
        java.lang.reflect.Method $r2, $r12;

     label1:
        $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.tools.xjc.api.XJC");

        $r1 = newarray (java.lang.Class)[0];

        $r2 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("createSchemaCompiler", $r1);

        $r3 = newarray (java.lang.Object)[0];

        r14 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.ClassLoader getXJCClassLoader()>();

        $r10 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.sun.tools.internal.xjc.api.XJC", 1, $r9);

        $r11 = newarray (java.lang.Class)[0];

        $r12 = virtualinvoke $r10.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("createSchemaCompiler", $r11);

        $r13 = newarray (java.lang.Object)[0];

        r14 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r13);

     label4:
        $r4 = staticinvoke <org.apache.cxf.common.util.ReflectionInvokationHandler: java.lang.Object createProxyWrapper(java.lang.Object,java.lang.Class)>(r14, class "Lorg/apache/cxf/jaxb/JAXBUtils$SchemaCompiler;");

        $r5 = (org.apache.cxf.jaxb.JAXBUtils$SchemaCompiler) $r4;

     label5:
        return $r5;

     label6:
        $r6 := @caughtexception;

        $r7 = new javax.xml.bind.JAXBException;

        specialinvoke $r7.<javax.xml.bind.JAXBException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label5 with label6;
    }

    public static org.apache.cxf.jaxb.JAXBUtils$SchemaCompiler createSchemaCompilerWithDefaultAllocator(java.util.Set)
    {
        org.apache.cxf.jaxb.JAXBUtils$SchemaCompiler $r0;
        org.apache.cxf.jaxb.JAXBUtils$DefaultClassNameAllocator $r1;
        java.lang.IllegalStateException $r6;
        java.util.Set r2;
        java.lang.Class $r3;
        java.lang.Object $r4;
        javax.xml.bind.JAXBException $r5;

        r2 := @parameter0: java.util.Set;

     label1:
        $r0 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: org.apache.cxf.jaxb.JAXBUtils$SchemaCompiler createSchemaCompiler()>();

        $r1 = new org.apache.cxf.jaxb.JAXBUtils$DefaultClassNameAllocator;

        specialinvoke $r1.<org.apache.cxf.jaxb.JAXBUtils$DefaultClassNameAllocator: void <init>(java.util.Set)>(r2);

        $r3 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.Class getParamClass(org.apache.cxf.jaxb.JAXBUtils$SchemaCompiler,java.lang.String)>($r0, "setClassNameAllocator");

        $r4 = staticinvoke <org.apache.cxf.common.util.ReflectionInvokationHandler: java.lang.Object createProxyWrapper(java.lang.Object,java.lang.Class)>($r1, $r3);

        interfaceinvoke $r0.<org.apache.cxf.jaxb.JAXBUtils$SchemaCompiler: void setClassNameAllocator(java.lang.Object)>($r4);

     label2:
        return $r0;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to create schema compiler", $r5);

        throw $r6;

        catch javax.xml.bind.JAXBException from label1 to label2 with label3;
    }

    public static void logGeneratedClassNames(java.util.logging.Logger, org.apache.cxf.jaxb.JAXBUtils$JCodeModel)
    {
        java.util.logging.Level $r1, $r6;
        java.lang.String $r8, $r10, $r16;
        boolean $z0, $z1, $z2, z3;
        java.util.Iterator $r4, $r13;
        org.apache.cxf.jaxb.JAXBUtils$JPackage r12;
        java.util.logging.Logger r0;
        org.apache.cxf.jaxb.JAXBUtils$JCodeModel r3;
        org.apache.cxf.jaxb.JAXBUtils$JDefinedClass $r15;
        java.lang.StringBuilder $r2, $r5, $r7, $r9;
        java.lang.Object $r11, $r14;

        r0 := @parameter0: java.util.logging.Logger;

        r3 := @parameter1: org.apache.cxf.jaxb.JAXBUtils$JCodeModel;

        $r1 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $z0 = virtualinvoke r0.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        z3 = 1;

        $r4 = interfaceinvoke r3.<org.apache.cxf.jaxb.JAXBUtils$JCodeModel: java.util.Iterator packages()>();

     label2:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r11 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.cxf.jaxb.JAXBUtils$JPackage) $r11;

        $r13 = interfaceinvoke r12.<org.apache.cxf.jaxb.JAXBUtils$JPackage: java.util.Iterator classes()>();

     label3:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        if z3 != 0 goto label4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        goto label5;

     label4:
        z3 = 0;

     label5:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (org.apache.cxf.jaxb.JAXBUtils$JDefinedClass) $r14;

        $r16 = interfaceinvoke $r15.<org.apache.cxf.jaxb.JAXBUtils$JDefinedClass: java.lang.String fullName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        goto label3;

     label6:
        goto label2;

     label7:
        $r6 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Created classes: ");

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r6, $r10);

        return;
    }

    public static java.util.List getGeneratedClassNames(org.apache.cxf.jaxb.JAXBUtils$JCodeModel)
    {
        java.util.Iterator $r2, $r5;
        org.apache.cxf.jaxb.JAXBUtils$JPackage r4;
        java.util.ArrayList $r0;
        org.apache.cxf.jaxb.JAXBUtils$JCodeModel r1;
        org.apache.cxf.jaxb.JAXBUtils$JDefinedClass $r7;
        java.lang.Object $r3, $r6;
        java.lang.String $r8;
        boolean $z0, $z1;

        r1 := @parameter0: org.apache.cxf.jaxb.JAXBUtils$JCodeModel;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = interfaceinvoke r1.<org.apache.cxf.jaxb.JAXBUtils$JCodeModel: java.util.Iterator packages()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.cxf.jaxb.JAXBUtils$JPackage) $r3;

        $r5 = interfaceinvoke r4.<org.apache.cxf.jaxb.JAXBUtils$JPackage: java.util.Iterator classes()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (org.apache.cxf.jaxb.JAXBUtils$JDefinedClass) $r6;

        $r8 = interfaceinvoke $r7.<org.apache.cxf.jaxb.JAXBUtils$JDefinedClass: java.lang.String fullName()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label2;

     label3:
        goto label1;

     label4:
        return $r0;
    }

    public static java.lang.Object createFileCodeWriter(java.io.File) throws javax.xml.bind.JAXBException
    {
        java.lang.Object[] $r2;
        java.lang.Class[] $r0;
        java.lang.reflect.Constructor $r1;
        javax.xml.bind.JAXBException $r6;
        java.io.File r3;
        java.lang.Exception $r5;
        java.lang.Object $r4;
        java.lang.ClassNotFoundException $r7;
        java.lang.Class r9;
        java.lang.ClassLoader $r8;

        r3 := @parameter0: java.io.File;

     label1:
        r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.codemodel.writer.FileCodeWriter");

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.ClassLoader getXJCClassLoader()>();

        r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.sun.codemodel.internal.writer.FileCodeWriter", 1, $r8);

     label4:
        $r0 = newarray (java.lang.Class)[1];

        $r0[0] = class "Ljava/io/File;";

        $r1 = virtualinvoke r9.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r0);

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = r3;

        $r4 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r2);

     label5:
        return $r4;

     label6:
        $r5 := @caughtexception;

        $r6 = new javax.xml.bind.JAXBException;

        specialinvoke $r6.<javax.xml.bind.JAXBException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label5 with label6;
    }

    public static java.lang.Class getParamClass(org.apache.cxf.jaxb.JAXBUtils$SchemaCompiler, java.lang.String)
    {
        org.apache.cxf.jaxb.JAXBUtils$SchemaCompiler r0;
        java.lang.reflect.Method[] $r5;
        int i0, $i1, i2;
        java.lang.String $r7, r8;
        org.apache.cxf.common.util.ReflectionInvokationHandler $r2;
        java.lang.reflect.Method r6;
        boolean $z0;
        java.lang.Class[] $r9, $r10;
        java.lang.Object $r3;
        java.lang.Class $r4, $r11;
        java.lang.reflect.InvocationHandler $r1;

        r0 := @parameter0: org.apache.cxf.jaxb.JAXBUtils$SchemaCompiler;

        r8 := @parameter1: java.lang.String;

        $r1 = staticinvoke <java.lang.reflect.Proxy: java.lang.reflect.InvocationHandler getInvocationHandler(java.lang.Object)>(r0);

        $r2 = (org.apache.cxf.common.util.ReflectionInvokationHandler) $r1;

        $r3 = virtualinvoke $r2.<org.apache.cxf.common.util.ReflectionInvokationHandler: java.lang.Object getTarget()>();

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r5;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r6 = $r5[i2];

        $r7 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i1 = lengthof $r9;

        if $i1 != 1 goto label2;

        $r10 = virtualinvoke r6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r11 = $r10[0];

        return $r11;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return null;
    }

    public static org.apache.cxf.jaxb.JAXBBeanInfo getBeanInfo(org.apache.cxf.jaxb.JAXBContextProxy, java.lang.Class)
    {
        java.lang.Class r1;
        java.lang.Object $r2, $r3;
        org.apache.cxf.jaxb.JAXBBeanInfo $r4;
        org.apache.cxf.jaxb.JAXBContextProxy r0;

        r0 := @parameter0: org.apache.cxf.jaxb.JAXBContextProxy;

        r1 := @parameter1: java.lang.Class;

        $r2 = interfaceinvoke r0.<org.apache.cxf.jaxb.JAXBContextProxy: java.lang.Object getBeanInfo(java.lang.Class)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.apache.cxf.common.util.ReflectionInvokationHandler: java.lang.Object createProxyWrapper(java.lang.Object,java.lang.Class)>($r2, class "Lorg/apache/cxf/jaxb/JAXBBeanInfo;");

        $r4 = (org.apache.cxf.jaxb.JAXBBeanInfo) $r3;

        return $r4;
    }

    public static java.util.List generateJaxbSchemas(javax.xml.bind.JAXBContext, java.util.Map) throws java.io.IOException
    {
        org.apache.cxf.jaxb.JAXBUtils$1 $r2;
        java.util.Map r3;
        javax.xml.bind.JAXBContext r1;
        java.util.ArrayList $r0;

        r1 := @parameter0: javax.xml.bind.JAXBContext;

        r3 := @parameter1: java.util.Map;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = new org.apache.cxf.jaxb.JAXBUtils$1;

        specialinvoke $r2.<org.apache.cxf.jaxb.JAXBUtils$1: void <init>(java.util.Map,java.util.List)>(r3, $r0);

        virtualinvoke r1.<javax.xml.bind.JAXBContext: void generateSchema(javax.xml.bind.SchemaOutputResolver)>($r2);

        return $r0;
    }

    public static java.lang.String getPackageNamespace(java.lang.Class)
    {
        java.lang.Package $r1;
        java.lang.'annotation'.Annotation $r2;
        java.lang.Class r0;
        java.lang.String $r4;
        javax.xml.bind.'annotation'.XmlSchema r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Package getPackage()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke $r1.<java.lang.Package: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljavax/xml/bind/annotation/XmlSchema;");

        r3 = (javax.xml.bind.'annotation'.XmlSchema) $r2;

        if r3 == null goto label1;

        $r4 = interfaceinvoke r3.<javax.xml.bind.'annotation'.XmlSchema: java.lang.String namespace()>();

        return $r4;

     label1:
        return null;
    }

    public static void scanPackages(java.util.Set, java.util.Map)
    {
        java.util.Set r0;
        java.util.Map r1;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.util.Map;

        staticinvoke <org.apache.cxf.jaxb.JAXBUtils: void scanPackages(java.util.Set,java.lang.Class[],java.util.Map)>(r0, null, r1);

        return;
    }

    public static void scanPackages(java.util.Set, java.lang.Class[], java.util.Map)
    {
        java.util.Map r35;
        java.util.Set r1, $r2;
        java.lang.Exception $r37, $r38, $r39, $r43, $r46;
        java.lang.StringBuilder $r16, $r17, $r21, $r22, $r29, $r30, $r31, $r66, $r69, $r70;
        java.lang.ClassLoader $r27, $r33, r60;
        java.lang.Throwable $r40, $r48;
        java.lang.String $r14, $r18, $r24, $r32, r59, r61, r62;
        java.util.Map$Entry r57;
        java.lang.Class[] r0;
        java.io.InputStreamReader $r67;
        org.apache.cxf.common.util.CachedClass r56;
        java.lang.ClassNotFoundException $r47;
        java.io.BufferedReader r58, $r68;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.HashMap $r63, $r64;
        java.util.HashSet $r65;
        int $i0, $i1, $i2, i3, i4, $i6;
        java.util.Iterator $r3, $r53;
        java.lang.Package $r25;
        java.lang.Object $r4, $r5, $r8, $r10, $r11, $r12, $r23, $r36, $r41, $r44;
        java.lang.Class $r19, $r34, r49, r54, r55;
        java.io.InputStream $r9, $r13, $r26, $r42, $r45;

        r1 := @parameter0: java.util.Set;

        r0 := @parameter1: java.lang.Class[];

        r35 := @parameter2: java.util.Map;

        if r0 == null goto label02;

        $i2 = lengthof r0;

        if $i2 <= 0 goto label02;

        i3 = lengthof r0;

        i4 = 0;

     label01:
        if i4 >= i3 goto label02;

        r49 = r0[i4];

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r49);

        i4 = i4 + 1;

        goto label01;

     label02:
        $r63 = new java.util.HashMap;

        specialinvoke $r63.<java.util.HashMap: void <init>()>();

        $r64 = new java.util.HashMap;

        specialinvoke $r64.<java.util.HashMap: void <init>()>();

        $r65 = new java.util.HashSet;

        specialinvoke $r65.<java.util.HashSet: void <init>()>();

        $r53 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z4 = interfaceinvoke $r53.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label15;

        $r23 = interfaceinvoke $r53.<java.util.Iterator: java.lang.Object next()>();

        r54 = (java.lang.Class) $r23;

        $r24 = staticinvoke <org.apache.cxf.common.util.PackageUtils: java.lang.String getPackageName(java.lang.Class)>(r54);

        $z3 = interfaceinvoke $r63.<java.util.Map: boolean containsKey(java.lang.Object)>($r24);

        if $z3 != 0 goto label14;

        $r25 = virtualinvoke r54.<java.lang.Class: java.lang.Package getPackage()>();

        $r26 = virtualinvoke r54.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("jaxb.index");

        interfaceinvoke $r63.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r26);

        $r27 = virtualinvoke r54.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        interfaceinvoke $r64.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r27);

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ObjectFactory");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        r55 = null;

        r56 = null;

        if $r25 == null goto label08;

        if r35 == null goto label08;

        entermonitor r35;

     label04:
        $r36 = interfaceinvoke r35.<java.util.Map: java.lang.Object get(java.lang.Object)>($r25);

        r56 = (org.apache.cxf.common.util.CachedClass) $r36;

        exitmonitor r35;

     label05:
        goto label08;

     label06:
        $r48 := @caughtexception;

        exitmonitor r35;

     label07:
        throw $r48;

     label08:
        if r56 == null goto label09;

        r55 = virtualinvoke r56.<org.apache.cxf.common.util.CachedClass: java.lang.Class getCachedClass()>();

     label09:
        if r55 != null goto label13;

     label10:
        $r33 = virtualinvoke r54.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r34 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r32, 0, $r33);

        interfaceinvoke $r65.<java.util.Set: boolean add(java.lang.Object)>($r34);

        staticinvoke <org.apache.cxf.jaxb.JAXBUtils: void addToObjectFactoryCache(java.lang.Package,java.lang.Class,java.util.Map)>($r25, $r34, r35);

     label11:
        goto label14;

     label12:
        $r47 := @caughtexception;

        staticinvoke <org.apache.cxf.jaxb.JAXBUtils: void addToObjectFactoryCache(java.lang.Package,java.lang.Class,java.util.Map)>($r25, null, r35);

        goto label14;

     label13:
        interfaceinvoke $r65.<java.util.Set: boolean add(java.lang.Object)>(r55);

     label14:
        goto label03;

     label15:
        $r2 = interfaceinvoke $r63.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label16:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label32;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r57 = (java.util.Map$Entry) $r4;

        $r5 = interfaceinvoke r57.<java.util.Map$Entry: java.lang.Object getValue()>();

        if $r5 == null goto label31;

        r58 = null;

     label17:
        $r68 = new java.io.BufferedReader;

        $r67 = new java.io.InputStreamReader;

        $r8 = interfaceinvoke r57.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r9 = (java.io.InputStream) $r8;

        specialinvoke $r67.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r9, "UTF-8");

        specialinvoke $r68.<java.io.BufferedReader: void <init>(java.io.Reader)>($r67);

        r58 = $r68;

        $r10 = interfaceinvoke r57.<java.util.Map$Entry: java.lang.Object getKey()>();

        r59 = (java.lang.String) $r10;

        $r11 = interfaceinvoke $r64.<java.util.Map: java.lang.Object get(java.lang.Object)>(r59);

        r60 = (java.lang.ClassLoader) $r11;

        $z1 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r59);

        if $z1 != 0 goto label18;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r59);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        r59 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

     label18:
        r61 = virtualinvoke $r68.<java.io.BufferedReader: java.lang.String readLine()>();

     label19:
        if r61 == null goto label25;

        $r14 = virtualinvoke r61.<java.lang.String: java.lang.String trim()>();

        r62 = $r14;

        $i0 = virtualinvoke $r14.<java.lang.String: int indexOf(java.lang.String)>("#");

        $i6 = (int) -1;

        if $i0 == $i6 goto label20;

        $i1 = virtualinvoke $r14.<java.lang.String: int indexOf(java.lang.String)>("#");

        r62 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label20:
        $z2 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r62);

        if $z2 != 0 goto label24;

     label21:
        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r59);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>($r18, 0, r60);

        interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>($r19);

     label22:
        goto label24;

     label23:
        $r46 := @caughtexception;

     label24:
        r61 = virtualinvoke $r68.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label19;

     label25:
        goto label33;

     label26:
        goto label31;

     label27:
        $r43 := @caughtexception;

        goto label37;

     label28:
        goto label31;

     label29:
        $r40 := @caughtexception;

        goto label41;

     label30:
        throw $r40;

     label31:
        goto label16;

     label32:
        interfaceinvoke r1.<java.util.Set: boolean addAll(java.util.Collection)>($r65);

        return;

     label33:
        if $r68 == null goto label34;

        virtualinvoke $r68.<java.io.BufferedReader: void close()>();

        $r12 = interfaceinvoke r57.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r13 = (java.io.InputStream) $r12;

        virtualinvoke $r13.<java.io.InputStream: void close()>();

     label34:
        goto label36;

     label35:
        $r39 := @caughtexception;

     label36:
        goto label26;

     label37:
        if r58 == null goto label38;

        virtualinvoke r58.<java.io.BufferedReader: void close()>();

        $r44 = interfaceinvoke r57.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r45 = (java.io.InputStream) $r44;

        virtualinvoke $r45.<java.io.InputStream: void close()>();

     label38:
        goto label40;

     label39:
        $r38 := @caughtexception;

     label40:
        goto label28;

     label41:
        if r58 == null goto label42;

        virtualinvoke r58.<java.io.BufferedReader: void close()>();

        $r41 = interfaceinvoke r57.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r42 = (java.io.InputStream) $r41;

        virtualinvoke $r42.<java.io.InputStream: void close()>();

     label42:
        goto label44;

     label43:
        $r37 := @caughtexception;

     label44:
        goto label30;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.ClassNotFoundException from label10 to label11 with label12;
        catch java.lang.Exception from label21 to label22 with label23;
        catch java.lang.Exception from label17 to label25 with label27;
        catch java.lang.Throwable from label17 to label26 with label29;
        catch java.lang.Throwable from label27 to label28 with label29;
        catch java.lang.Throwable from label29 to label30 with label29;
        catch java.lang.Exception from label33 to label34 with label35;
        catch java.lang.Exception from label37 to label38 with label39;
        catch java.lang.Exception from label41 to label42 with label43;
    }

    private static void addToObjectFactoryCache(java.lang.Package, java.lang.Class, java.util.Map)
    {
        java.lang.Throwable $r4;
        org.apache.cxf.common.util.CachedClass $r2;
        java.lang.Package r0;
        java.util.Map r1;
        java.lang.Class r3;

        r0 := @parameter0: java.lang.Package;

        r3 := @parameter1: java.lang.Class;

        r1 := @parameter2: java.util.Map;

        if r0 == null goto label1;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        entermonitor r1;

     label3:
        $r2 = new org.apache.cxf.common.util.CachedClass;

        specialinvoke $r2.<org.apache.cxf.common.util.CachedClass: void <init>(java.lang.Class)>(r3);

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r2);

        exitmonitor r1;

     label4:
        goto label7;

     label5:
        $r4 := @caughtexception;

        exitmonitor r1;

     label6:
        throw $r4;

     label7:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static boolean isJAXB22()
    {
        java.lang.'annotation'.Target r2;
        java.lang.'annotation'.ElementType r4, $r5;
        java.lang.'annotation'.Annotation $r1;
        int i0, i1;
        java.lang.'annotation'.ElementType[] $r3;
        java.lang.Class $r0;

        $r0 = class "Ljavax/xml/bind/annotation/XmlElement;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Ljava/lang/annotation/Target;");

        r2 = (java.lang.'annotation'.Target) $r1;

        $r3 = interfaceinvoke r2.<java.lang.'annotation'.Target: java.lang.'annotation'.ElementType[] value()>();

        i0 = lengthof $r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = $r3[i1];

        $r5 = <java.lang.'annotation'.ElementType: java.lang.'annotation'.ElementType PARAMETER>;

        if r4 != $r5 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static synchronized java.lang.Object createNamespaceWrapper(java.util.Map)
    {
        org.objectweb.asm.ClassWriter $r7;
        java.lang.Object[] $r4;
        java.lang.Class[] $r2;
        java.lang.reflect.Constructor $r3;
        java.lang.Exception $r8;
        org.apache.cxf.common.util.ASMHelper $r0;
        java.util.Map r5;
        java.lang.Class $r1, r9;
        java.lang.Object $r6;

        r5 := @parameter0: java.util.Map;

        $r0 = new org.apache.cxf.common.util.ASMHelper;

        specialinvoke $r0.<org.apache.cxf.common.util.ASMHelper: void <init>()>();

        $r1 = virtualinvoke $r0.<org.apache.cxf.common.util.ASMHelper: java.lang.Class findClass(java.lang.String,java.lang.Class)>("org.apache.cxf.jaxb.NamespaceMapperInternal", class "Lorg/apache/cxf/jaxb/JAXBUtils;");

        r9 = $r1;

        if $r1 != null goto label2;

        $r7 = virtualinvoke $r0.<org.apache.cxf.common.util.ASMHelper: org.objectweb.asm.ClassWriter createClassWriter()>();

        if $r7 != null goto label1;

        return null;

     label1:
        r9 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.Class createNamespaceWrapperInternal(org.apache.cxf.common.util.ASMHelper,org.objectweb.asm.ClassWriter)>($r0, $r7);

     label2:
        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "Ljava/util/Map;";

        $r3 = virtualinvoke r9.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2);

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r5;

        $r6 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r4);

     label3:
        return $r6;

     label4:
        $r8 := @caughtexception;

        return null;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private static java.lang.Class createNamespaceWrapperInternal(org.apache.cxf.common.util.ASMHelper, org.objectweb.asm.ClassWriter)
    {
        org.objectweb.asm.ClassWriter r0;
        byte[] $r13;
        org.objectweb.asm.MethodVisitor $r2, $r7;
        org.objectweb.asm.FieldVisitor $r1;
        org.objectweb.asm.Label $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r11, $r12;
        org.apache.cxf.common.util.ASMHelper r14;
        java.lang.ClassNotFoundException $r15, $r16;
        java.lang.Class r18, $r19;
        java.lang.ClassLoader $r17;

        r14 := @parameter0: org.apache.cxf.common.util.ASMHelper;

        r0 := @parameter1: org.objectweb.asm.ClassWriter;

        virtualinvoke r0.<org.objectweb.asm.ClassWriter: void visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(49, 49, "org/apache/cxf/jaxb/NamespaceMapperInternal", null, "com/sun/xml/internal/bind/marshaller/NamespacePrefixMapper", null);

        virtualinvoke r0.<org.objectweb.asm.ClassWriter: void visitSource(java.lang.String,java.lang.String)>("NamespaceMapper.java", null);

        $r1 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.FieldVisitor visitField(int,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(18, "nspref", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", null);

        interfaceinvoke $r1.<org.objectweb.asm.FieldVisitor: void visitEnd()>();

        $r2 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(1, "<init>", "(Ljava/util/Map;)V", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", null);

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitCode()>();

        $r3 = new org.objectweb.asm.Label;

        specialinvoke $r3.<org.objectweb.asm.Label: void <init>()>();

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>($r3);

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLineNumber(int,org.objectweb.asm.Label)>(30, $r3);

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, "com/sun/xml/internal/bind/marshaller/NamespacePrefixMapper", "<init>", "()V");

        $r4 = new org.objectweb.asm.Label;

        specialinvoke $r4.<org.objectweb.asm.Label: void <init>()>();

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>($r4);

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLineNumber(int,org.objectweb.asm.Label)>(31, $r4);

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, "org/apache/cxf/jaxb/NamespaceMapperInternal", "nspref", "Ljava/util/Map;");

        $r5 = new org.objectweb.asm.Label;

        specialinvoke $r5.<org.objectweb.asm.Label: void <init>()>();

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>($r5);

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLineNumber(int,org.objectweb.asm.Label)>(32, $r5);

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(177);

        $r6 = new org.objectweb.asm.Label;

        specialinvoke $r6.<org.objectweb.asm.Label: void <init>()>();

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>($r6);

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>("this", "Lorg/apache/cxf/jaxb/NamespaceMapperInternal;", null, $r3, $r6, 0);

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>("nspref", "Ljava/util/Map;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", $r3, $r6, 1);

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(2, 2);

        interfaceinvoke $r2.<org.objectweb.asm.MethodVisitor: void visitEnd()>();

        $r7 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: org.objectweb.asm.MethodVisitor visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])>(1, "getPreferredPrefix", "(Ljava/lang/String;Ljava/lang/String;Z)Ljava/lang/String;", null, null);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitCode()>();

        $r8 = new org.objectweb.asm.Label;

        specialinvoke $r8.<org.objectweb.asm.Label: void <init>()>();

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>($r8);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitLineNumber(int,org.objectweb.asm.Label)>(38, $r8);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 0);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(180, "org/apache/cxf/jaxb/NamespaceMapperInternal", "nspref", "Ljava/util/Map;");

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 1);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(185, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;");

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(192, "java/lang/String");

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(58, 4);

        $r9 = new org.objectweb.asm.Label;

        specialinvoke $r9.<org.objectweb.asm.Label: void <init>()>();

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>($r9);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitLineNumber(int,org.objectweb.asm.Label)>(39, $r9);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 4);

        $r10 = new org.objectweb.asm.Label;

        specialinvoke $r10.<org.objectweb.asm.Label: void <init>()>();

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitJumpInsn(int,org.objectweb.asm.Label)>(198, $r10);

        $r11 = new org.objectweb.asm.Label;

        specialinvoke $r11.<org.objectweb.asm.Label: void <init>()>();

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>($r11);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitLineNumber(int,org.objectweb.asm.Label)>(40, $r11);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 4);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(176);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>($r10);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitLineNumber(int,org.objectweb.asm.Label)>(42, $r10);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitVarInsn(int,int)>(25, 2);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitInsn(int)>(176);

        $r12 = new org.objectweb.asm.Label;

        specialinvoke $r12.<org.objectweb.asm.Label: void <init>()>();

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitLabel(org.objectweb.asm.Label)>($r12);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>("this", "Lorg/apache/cxf/jaxb/NamespaceMapperInternal;", null, $r8, $r12, 0);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>("namespaceUri", "Ljava/lang/String;", null, $r8, $r12, 1);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>("suggestion", "Ljava/lang/String;", null, $r8, $r12, 2);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>("requirePrefix", "Z", null, $r8, $r12, 3);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,org.objectweb.asm.Label,org.objectweb.asm.Label,int)>("prefix", "Ljava/lang/String;", null, $r9, $r12, 4);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitMaxs(int,int)>(2, 5);

        interfaceinvoke $r7.<org.objectweb.asm.MethodVisitor: void visitEnd()>();

        virtualinvoke r0.<org.objectweb.asm.ClassWriter: void visitEnd()>();

        $r13 = virtualinvoke r0.<org.objectweb.asm.ClassWriter: byte[] toByteArray()>();

     label1:
        r18 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.sun.xml.bind.api.JAXBRIContext");

     label2:
        goto label7;

     label3:
        $r16 := @caughtexception;

     label4:
        $r17 = staticinvoke <org.apache.cxf.jaxb.JAXBUtils: java.lang.ClassLoader getXJCClassLoader()>();

        r18 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.sun.xml.internal.bind.api.JAXBRIContext", 1, $r17);

     label5:
        goto label7;

     label6:
        $r15 := @caughtexception;

        r18 = class "Lorg/apache/cxf/jaxb/JAXBUtils;";

     label7:
        $r19 = virtualinvoke r14.<org.apache.cxf.common.util.ASMHelper: java.lang.Class loadClass(java.lang.String,java.lang.Class,byte[])>("org.apache.cxf.jaxb.NamespaceMapperInternal", r18, $r13);

        return $r19;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.ClassNotFoundException from label4 to label5 with label6;
    }

    static void <clinit>()
    {
        java.util.Map $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r33, $r34, $r35, $r36, $r37, $r38, $r39;
        java.util.logging.Logger $r3;
        java.util.HashMap $r4, $r32;
        java.lang.String $r1;
        char[] $r0, $r2;

        <org.apache.cxf.jaxb.JAXBUtils: java.lang.String JAXB_URI> = "http://java.sun.com/xml/ns/jaxb";

        $r0 = newarray (char)[8];

        $r0[0] = 45;

        $r0[1] = 46;

        $r0[2] = 58;

        $r0[3] = 183;

        $r0[4] = 903;

        $r0[5] = 1757;

        $r0[6] = 1758;

        $r0[7] = 95;

        <org.apache.cxf.jaxb.JAXBUtils: char[] XML_NAME_PUNCTUATION_CHARS> = $r0;

        $r1 = new java.lang.String;

        $r2 = <org.apache.cxf.jaxb.JAXBUtils: char[] XML_NAME_PUNCTUATION_CHARS>;

        specialinvoke $r1.<java.lang.String: void <init>(char[])>($r2);

        <org.apache.cxf.jaxb.JAXBUtils: java.lang.String XML_NAME_PUNCTUATION_STRING> = $r1;

        $r3 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class,java.lang.String)>(class "Lorg/apache/cxf/jaxb/JAXBUtils;", "CommonUtilityMessages");

        <org.apache.cxf.jaxb.JAXBUtils: java.util.logging.Logger LOG> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP> = $r4;

        $r5 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("string", "java.lang.String");

        $r6 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("integer", "java.math.BigInteger");

        $r7 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", "int");

        $r8 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", "long");

        $r9 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", "short");

        $r10 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("decimal", "java.math.BigDecimal");

        $r11 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", "float");

        $r12 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", "double");

        $r13 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", "boolean");

        $r14 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", "byte");

        $r15 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("QName", "javax.xml.namespace.QName");

        $r16 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dateTime", "javax.xml.datatype.XMLGregorianCalendar");

        $r17 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("base64Binary", "byte[]");

        $r18 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hexBinary", "byte[]");

        $r19 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("unsignedInt", "long");

        $r20 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("unsignedShort", "short");

        $r21 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("unsignedByte", "byte");

        $r22 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("time", "javax.xml.datatype.XMLGregorianCalendar");

        $r23 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("date", "javax.xml.datatype.XMLGregorianCalendar");

        $r24 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("gYear", "javax.xml.datatype.XMLGregorianCalendar");

        $r25 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("gYearMonth", "javax.xml.datatype.XMLGregorianCalendar");

        $r26 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("gMonth", "javax.xml.datatype.XMLGregorianCalendar");

        $r27 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("gMonthDay", "javax.xml.datatype.XMLGregorianCalendar");

        $r28 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("gDay", "javax.xml.datatype.XMLGregorianCalendar");

        $r29 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("duration", "javax.xml.datatype.Duration");

        $r30 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("NOTATION", "javax.xml.namespace.QName");

        $r31 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map BUILTIN_DATATYPES_MAP>;

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("string", "java.lang.String");

        $r32 = new java.util.HashMap;

        specialinvoke $r32.<java.util.HashMap: void <init>()>();

        <org.apache.cxf.jaxb.JAXBUtils: java.util.Map HOLDER_TYPES_MAP> = $r32;

        $r33 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map HOLDER_TYPES_MAP>;

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("int", class "Ljava/lang/Integer;");

        $r34 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map HOLDER_TYPES_MAP>;

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("long", class "Ljava/lang/Long;");

        $r35 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map HOLDER_TYPES_MAP>;

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("short", class "Ljava/lang/Short;");

        $r36 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map HOLDER_TYPES_MAP>;

        interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("float", class "Ljava/lang/Float;");

        $r37 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map HOLDER_TYPES_MAP>;

        interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("double", class "Ljava/lang/Double;");

        $r38 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map HOLDER_TYPES_MAP>;

        interfaceinvoke $r38.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("boolean", class "Ljava/lang/Boolean;");

        $r39 = <org.apache.cxf.jaxb.JAXBUtils: java.util.Map HOLDER_TYPES_MAP>;

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("byte", class "Ljava/lang/Byte;");

        return;
    }
}
