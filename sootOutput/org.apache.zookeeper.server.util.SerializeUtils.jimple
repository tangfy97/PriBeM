public class org.apache.zookeeper.server.util.SerializeUtils extends java.lang.Object
{
    private static final org.slf4j.Logger LOG;

    public void <init>()
    {
        org.apache.zookeeper.server.util.SerializeUtils r0;

        r0 := @this: org.apache.zookeeper.server.util.SerializeUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.jute.Record deserializeTxn(byte[], org.apache.zookeeper.txn.TxnHeader) throws java.io.IOException
    {
        byte[] r1, $r20;
        org.apache.zookeeper.txn.SetACLTxn $r28;
        org.apache.zookeeper.txn.SetDataTxn $r27;
        org.apache.zookeeper.txn.CreateTxnV0 $r33;
        org.apache.zookeeper.txn.CreateSessionTxn $r24;
        java.io.ByteArrayInputStream $r23;
        org.apache.zookeeper.txn.CreateTxn r17, $r25;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.String $r15, $r19;
        boolean $z0;
        org.apache.zookeeper.txn.MultiTxn $r30;
        org.apache.zookeeper.txn.TxnHeader r3;
        org.apache.jute.Record r22;
        java.io.IOException $r32;
        java.io.EOFException $r16;
        org.apache.jute.BinaryInputArchive $r2;
        java.util.List $r21;
        org.apache.zookeeper.txn.ErrorTxn $r29;
        java.lang.StringBuilder $r13, $r14, $r31;
        org.apache.zookeeper.txn.DeleteTxn $r26;

        r1 := @parameter0: byte[];

        r3 := @parameter1: org.apache.zookeeper.txn.TxnHeader;

        $r23 = new java.io.ByteArrayInputStream;

        specialinvoke $r23.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

        $r2 = staticinvoke <org.apache.jute.BinaryInputArchive: org.apache.jute.BinaryInputArchive getArchive(java.io.InputStream)>($r23);

        virtualinvoke r3.<org.apache.zookeeper.txn.TxnHeader: void deserialize(org.apache.jute.InputArchive,java.lang.String)>($r2, "hdr");

        $i0 = virtualinvoke $r23.<java.io.ByteArrayInputStream: int available()>();

        virtualinvoke $r23.<java.io.ByteArrayInputStream: void mark(int)>($i0);

        $i1 = virtualinvoke r3.<org.apache.zookeeper.txn.TxnHeader: int getType()>();

        tableswitch($i1)
        {
            case -11: goto label02;
            case -10: goto label01;
            case -9: goto label09;
            case -8: goto label09;
            case -7: goto label09;
            case -6: goto label09;
            case -5: goto label09;
            case -4: goto label09;
            case -3: goto label09;
            case -2: goto label09;
            case -1: goto label07;
            case 0: goto label09;
            case 1: goto label03;
            case 2: goto label04;
            case 3: goto label09;
            case 4: goto label09;
            case 5: goto label05;
            case 6: goto label09;
            case 7: goto label06;
            case 8: goto label09;
            case 9: goto label09;
            case 10: goto label09;
            case 11: goto label09;
            case 12: goto label09;
            case 13: goto label09;
            case 14: goto label08;
            default: goto label09;
        };

     label01:
        $r24 = new org.apache.zookeeper.txn.CreateSessionTxn;

        specialinvoke $r24.<org.apache.zookeeper.txn.CreateSessionTxn: void <init>()>();

        r22 = $r24;

        goto label10;

     label02:
        return null;

     label03:
        $r25 = new org.apache.zookeeper.txn.CreateTxn;

        specialinvoke $r25.<org.apache.zookeeper.txn.CreateTxn: void <init>()>();

        r22 = $r25;

        goto label10;

     label04:
        $r26 = new org.apache.zookeeper.txn.DeleteTxn;

        specialinvoke $r26.<org.apache.zookeeper.txn.DeleteTxn: void <init>()>();

        r22 = $r26;

        goto label10;

     label05:
        $r27 = new org.apache.zookeeper.txn.SetDataTxn;

        specialinvoke $r27.<org.apache.zookeeper.txn.SetDataTxn: void <init>()>();

        r22 = $r27;

        goto label10;

     label06:
        $r28 = new org.apache.zookeeper.txn.SetACLTxn;

        specialinvoke $r28.<org.apache.zookeeper.txn.SetACLTxn: void <init>()>();

        r22 = $r28;

        goto label10;

     label07:
        $r29 = new org.apache.zookeeper.txn.ErrorTxn;

        specialinvoke $r29.<org.apache.zookeeper.txn.ErrorTxn: void <init>()>();

        r22 = $r29;

        goto label10;

     label08:
        $r30 = new org.apache.zookeeper.txn.MultiTxn;

        specialinvoke $r30.<org.apache.zookeeper.txn.MultiTxn: void <init>()>();

        r22 = $r30;

        goto label10;

     label09:
        $r32 = new java.io.IOException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported Txn with type=%d");

        $i2 = virtualinvoke r3.<org.apache.zookeeper.txn.TxnHeader: int getType()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r32.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r32;

     label10:
        if r22 == null goto label15;

     label11:
        interfaceinvoke r22.<org.apache.jute.Record: void deserialize(org.apache.jute.InputArchive,java.lang.String)>($r2, "txn");

     label12:
        goto label15;

     label13:
        $r16 := @caughtexception;

        $i3 = virtualinvoke r3.<org.apache.zookeeper.txn.TxnHeader: int getType()>();

        if $i3 != 1 goto label14;

        r17 = (org.apache.zookeeper.txn.CreateTxn) r22;

        virtualinvoke $r23.<java.io.ByteArrayInputStream: void reset()>();

        $r33 = new org.apache.zookeeper.txn.CreateTxnV0;

        specialinvoke $r33.<org.apache.zookeeper.txn.CreateTxnV0: void <init>()>();

        virtualinvoke $r33.<org.apache.zookeeper.txn.CreateTxnV0: void deserialize(org.apache.jute.InputArchive,java.lang.String)>($r2, "txn");

        $r19 = virtualinvoke $r33.<org.apache.zookeeper.txn.CreateTxnV0: java.lang.String getPath()>();

        virtualinvoke r17.<org.apache.zookeeper.txn.CreateTxn: void setPath(java.lang.String)>($r19);

        $r20 = virtualinvoke $r33.<org.apache.zookeeper.txn.CreateTxnV0: byte[] getData()>();

        virtualinvoke r17.<org.apache.zookeeper.txn.CreateTxn: void setData(byte[])>($r20);

        $r21 = virtualinvoke $r33.<org.apache.zookeeper.txn.CreateTxnV0: java.util.List getAcl()>();

        virtualinvoke r17.<org.apache.zookeeper.txn.CreateTxn: void setAcl(java.util.List)>($r21);

        $z0 = virtualinvoke $r33.<org.apache.zookeeper.txn.CreateTxnV0: boolean getEphemeral()>();

        virtualinvoke r17.<org.apache.zookeeper.txn.CreateTxn: void setEphemeral(boolean)>($z0);

        $i5 = (int) -1;

        virtualinvoke r17.<org.apache.zookeeper.txn.CreateTxn: void setParentCVersion(int)>($i5);

        goto label15;

     label14:
        throw $r16;

     label15:
        return r22;

        catch java.io.EOFException from label11 to label12 with label13;
    }

    public static void deserializeSnapshot(org.apache.zookeeper.server.DataTree, org.apache.jute.InputArchive, java.util.Map) throws java.io.IOException
    {
        org.apache.jute.InputArchive r0;
        long $l0;
        java.lang.Integer $r4;
        java.lang.Long $r3;
        java.util.Map r2;
        int $i1, i2, $i4;
        java.lang.String $r12;
        boolean $z0;
        org.slf4j.Logger $r5, $r7;
        org.apache.zookeeper.server.DataTree r1;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r13;

        r1 := @parameter0: org.apache.zookeeper.server.DataTree;

        r0 := @parameter1: org.apache.jute.InputArchive;

        r2 := @parameter2: java.util.Map;

        i2 = interfaceinvoke r0.<org.apache.jute.InputArchive: int readInt(java.lang.String)>("count");

     label1:
        if i2 <= 0 goto label3;

        $l0 = interfaceinvoke r0.<org.apache.jute.InputArchive: long readLong(java.lang.String)>("id");

        $i1 = interfaceinvoke r0.<org.apache.jute.InputArchive: int readInt(java.lang.String)>("timeout");

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r5 = <org.apache.zookeeper.server.util.SerializeUtils: org.slf4j.Logger LOG>;

        $z0 = interfaceinvoke $r5.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label2;

        $r7 = <org.apache.zookeeper.server.util.SerializeUtils: org.slf4j.Logger LOG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("loadData --- session in archive: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with timeout: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.apache.zookeeper.server.ZooTrace: void logTraceMessage(org.slf4j.Logger,long,java.lang.String)>($r7, 32L, $r12);

     label2:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label3:
        virtualinvoke r1.<org.apache.zookeeper.server.DataTree: void deserialize(org.apache.jute.InputArchive,java.lang.String)>(r0, "tree");

        return;
    }

    public static void serializeSnapshot(org.apache.zookeeper.server.DataTree, org.apache.jute.OutputArchive, java.util.Map) throws java.io.IOException
    {
        java.util.HashMap $r0;
        long $l1;
        java.lang.Integer $r11;
        java.lang.Long $r9;
        java.util.Map r1;
        org.apache.jute.OutputArchive r2;
        int $i0, $i2;
        boolean $z0;
        java.util.Map$Entry r7;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.apache.zookeeper.server.DataTree r5;
        java.lang.Object $r6, $r8, $r10;

        r5 := @parameter0: org.apache.zookeeper.server.DataTree;

        r2 := @parameter1: org.apache.jute.OutputArchive;

        r1 := @parameter2: java.util.Map;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(java.util.Map)>(r1);

        $i0 = virtualinvoke $r0.<java.util.HashMap: int size()>();

        interfaceinvoke r2.<org.apache.jute.OutputArchive: void writeInt(int,java.lang.String)>($i0, "count");

        $r3 = virtualinvoke $r0.<java.util.HashMap: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (java.lang.Long) $r8;

        $l1 = virtualinvoke $r9.<java.lang.Long: long longValue()>();

        interfaceinvoke r2.<org.apache.jute.OutputArchive: void writeLong(long,java.lang.String)>($l1, "id");

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.lang.Integer) $r10;

        $i2 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        interfaceinvoke r2.<org.apache.jute.OutputArchive: void writeInt(int,java.lang.String)>($i2, "timeout");

        goto label1;

     label2:
        virtualinvoke r5.<org.apache.zookeeper.server.DataTree: void serialize(org.apache.jute.OutputArchive,java.lang.String)>(r2, "tree");

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/server/util/SerializeUtils;");

        <org.apache.zookeeper.server.util.SerializeUtils: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
