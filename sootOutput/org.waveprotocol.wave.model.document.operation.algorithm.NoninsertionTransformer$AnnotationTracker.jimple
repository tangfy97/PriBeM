abstract class org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker extends java.lang.Object
{
    final java.util.Map tracked;
    final java.util.Map active;
    final java.util.Map temporary;
    final java.util.Map propagating;
    final org.waveprotocol.wave.model.document.operation.DocOpCursor output;
    final org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer this$0;

    void <init>(org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer, org.waveprotocol.wave.model.document.operation.DocOpCursor)
    {
        org.waveprotocol.wave.model.document.operation.DocOpCursor r6;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer r1;
        java.util.HashMap $r2, $r3, $r4, $r5;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer;

        r6 := @parameter1: org.waveprotocol.wave.model.document.operation.DocOpCursor;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map tracked> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map active> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map temporary> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map propagating> = $r5;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: org.waveprotocol.wave.model.document.operation.DocOpCursor output> = r6;

        return;
    }

    void commenceDeletion()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate r24, r27, r32, $r41;
        java.util.Map $r5, $r25, $r28, $r29, $r30, $r37, $r39;
        boolean $z0, $z1, $z2;
        java.util.Set $r6;
        java.lang.Object[] $r11, $r14, $r17;
        java.lang.String[] $r9, $r10, $r12, $r13, $r15, $r16, $r18;
        java.util.ArrayList $r2, $r3, $r4;
        java.lang.String r22, $r33, $r34, $r35, $r36, $r38, $r42, $r43;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl $r8;
        java.util.Map$Entry r20;
        java.util.Iterator $r7;
        java.lang.Object $r19, $r21, $r23, $r26, $r31, $r40;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker r0, $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker opposingTracker()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = $r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map propagating>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r19 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.util.Map$Entry) $r19;

        $r21 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getKey()>();

        r22 = (java.lang.String) $r21;

        $r23 = interfaceinvoke r20.<java.util.Map$Entry: java.lang.Object getValue()>();

        r24 = (org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate) $r23;

        $r25 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map active>;

        $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>(r22);

        r27 = (org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate) $r26;

        $r28 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map temporary>;

        interfaceinvoke $r28.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r22, r27);

        if r24 == null goto label4;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r22);

        $r36 = r24.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: java.lang.String newValue>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r36);

        if r27 == null goto label2;

        $r43 = r27.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: java.lang.String oldValue>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r43);

        goto label6;

     label2:
        $r37 = $r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map active>;

        $z2 = interfaceinvoke $r37.<java.util.Map: boolean containsKey(java.lang.Object)>(r22);

        if $z2 == 0 goto label3;

        $r39 = $r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map active>;

        $r40 = interfaceinvoke $r39.<java.util.Map: java.lang.Object get(java.lang.Object)>(r22);

        $r41 = (org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate) $r40;

        $r42 = $r41.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: java.lang.String newValue>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r42);

        goto label6;

     label3:
        $r38 = r24.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: java.lang.String oldValue>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r38);

        goto label6;

     label4:
        $r29 = $r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map active>;

        $z1 = interfaceinvoke $r29.<java.util.Map: boolean containsKey(java.lang.Object)>(r22);

        if $z1 == 0 goto label6;

        $r30 = $r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map active>;

        $r31 = interfaceinvoke $r30.<java.util.Map: java.lang.Object get(java.lang.Object)>(r22);

        r32 = (org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate) $r31;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r22);

        $r33 = r32.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: java.lang.String newValue>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r33);

        if r27 == null goto label5;

        $r35 = r27.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: java.lang.String newValue>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r35);

        goto label6;

     label5:
        $r34 = r32.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: java.lang.String oldValue>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r34);

     label6:
        goto label1;

     label7:
        $r8 = new org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl;

        $r10 = newarray (java.lang.String)[0];

        $r9 = newarray (java.lang.String)[0];

        $r11 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r13 = (java.lang.String[]) $r11;

        $r12 = newarray (java.lang.String)[0];

        $r14 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r12);

        $r16 = (java.lang.String[]) $r14;

        $r15 = newarray (java.lang.String)[0];

        $r17 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r15);

        $r18 = (java.lang.String[]) $r17;

        specialinvoke $r8.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl: void <init>(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[])>($r10, $r13, $r16, $r18);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void commit(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>($r8);

        return;
    }

    void concludeDeletion()
    {
        java.lang.Object[] $r10, $r13, $r16, $r19;
        java.lang.String[] $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r20;
        java.util.ArrayList $r1, $r2, $r3, $r4;
        org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate r27;
        java.util.Map $r5, $r21;
        java.lang.String r25, $r28, $r29;
        boolean $z0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl $r8;
        java.util.Map$Entry r23;
        java.util.Iterator $r7;
        java.util.Set $r6;
        java.lang.Object $r22, $r24, $r26;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker;

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker opposingTracker()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map temporary>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r22 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r23 = (java.util.Map$Entry) $r22;

        $r24 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getKey()>();

        r25 = (java.lang.String) $r24;

        $r26 = interfaceinvoke r23.<java.util.Map$Entry: java.lang.Object getValue()>();

        r27 = (org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate) $r26;

        if r27 == null goto label2;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r25);

        $r28 = r27.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: java.lang.String oldValue>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r28);

        $r29 = r27.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: java.lang.String newValue>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r29);

        goto label3;

     label2:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r25);

     label3:
        goto label1;

     label4:
        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void sync()>();

        $r8 = new org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl;

        $r9 = newarray (java.lang.String)[0];

        $r10 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r12 = (java.lang.String[]) $r10;

        $r11 = newarray (java.lang.String)[0];

        $r13 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r11);

        $r15 = (java.lang.String[]) $r13;

        $r14 = newarray (java.lang.String)[0];

        $r16 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r14);

        $r18 = (java.lang.String[]) $r16;

        $r17 = newarray (java.lang.String)[0];

        $r19 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r17);

        $r20 = (java.lang.String[]) $r19;

        specialinvoke $r8.<org.waveprotocol.wave.model.document.operation.impl.AnnotationBoundaryMapImpl: void <init>(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[])>($r12, $r15, $r18, $r20);

        virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void commit(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>($r8);

        $r21 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map temporary>;

        interfaceinvoke $r21.<java.util.Map: void clear()>();

        return;
    }

    void register(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)
    {
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r0;
        org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate $r4;
        java.util.Map $r2, $r7;
        int $i0, $i1, i2, i3;
        java.lang.String $r3, $r5, $r6, $r8;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker r1;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        i2 = 0;

     label1:
        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int endSize()>();

        if i2 >= $i0 goto label2;

        $r7 = r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map tracked>;

        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getEndKey(int)>(i2);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r8);

        i2 = i2 + 1;

        goto label1;

     label2:
        i3 = 0;

     label3:
        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int changeSize()>();

        if i3 >= $i1 goto label4;

        $r2 = r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map tracked>;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getChangeKey(int)>(i3);

        $r4 = new org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate;

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getOldValue(int)>(i3);

        $r6 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getNewValue(int)>(i3);

        specialinvoke $r4.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: void <init>(java.lang.String,java.lang.String)>($r5, $r6);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        i3 = i3 + 1;

        goto label3;

     label4:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: void process(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>(r0);

        return;
    }

    void commit(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)
    {
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r0;
        org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate r6, $r7;
        java.util.Map $r4, $r8, $r11, $r12, $r19, $r20, $r21, $r22, $r24;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.document.operation.DocOpCursor $r2;
        int $i0, $i1, i2, i3;
        java.lang.String $r3, $r9, $r10, $r14, $r15, $r16, $r17, $r18;
        java.lang.Object $r5, $r13, $r23;
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker r1;

        r1 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        i2 = 0;

     label1:
        $i0 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int endSize()>();

        if i2 >= $i0 goto label3;

        $r18 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getEndKey(int)>(i2);

        $r19 = r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map propagating>;

        $z2 = interfaceinvoke $r19.<java.util.Map: boolean containsKey(java.lang.Object)>($r18);

        if $z2 != 0 goto label2;

        $r22 = r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map propagating>;

        $r21 = r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map active>;

        $r23 = interfaceinvoke $r21.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r23);

     label2:
        $r20 = r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map active>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r18);

        i2 = i2 + 1;

        goto label1;

     label3:
        i3 = 0;

     label4:
        $i1 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int changeSize()>();

        if i3 >= $i1 goto label8;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getChangeKey(int)>(i3);

        $r4 = r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map active>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate) $r5;

        if r6 == null goto label5;

        $r14 = r6.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: java.lang.String oldValue>;

        $r15 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getOldValue(int)>(i3);

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>($r14, $r15);

        if $z0 == 0 goto label5;

        $r16 = r6.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: java.lang.String newValue>;

        $r17 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getNewValue(int)>(i3);

        $z1 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean equal(java.lang.Object,java.lang.Object)>($r16, $r17);

        if $z1 != 0 goto label7;

     label5:
        $r24 = r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map propagating>;

        $z3 = interfaceinvoke $r24.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z3 != 0 goto label6;

        $r12 = r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map propagating>;

        $r11 = r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map active>;

        $r13 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r13);

     label6:
        $r8 = r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map active>;

        $r7 = new org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate;

        $r9 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getOldValue(int)>(i3);

        $r10 = interfaceinvoke r0.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getNewValue(int)>(i3);

        specialinvoke $r7.<org.waveprotocol.wave.model.document.operation.algorithm.ValueUpdate: void <init>(java.lang.String,java.lang.String)>($r9, $r10);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r7);

     label7:
        i3 = i3 + 1;

        goto label4;

     label8:
        $r2 = r1.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: org.waveprotocol.wave.model.document.operation.DocOpCursor output>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.document.operation.DocOpCursor: void annotationBoundary(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>(r0);

        return;
    }

    void sync()
    {
        org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker r0;
        java.util.Map $r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker: java.util.Map propagating>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    abstract void process(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap);

    abstract org.waveprotocol.wave.model.document.operation.algorithm.NoninsertionTransformer$AnnotationTracker opposingTracker();
}
