public class groovy.swing.factory.PropertyColumnFactory extends groovy.util.AbstractFactory implements groovy.lang.GroovyObject
{
    transient groovy.lang.MetaClass metaClass;
    public static java.lang.Long __timeStamp;
    public static java.lang.Long __timeStamp__239_neverHappen1239119697010;
    static java.lang.Class class$groovy$lang$MetaClass;
    static java.lang.Class class$0;
    static java.lang.Class class$java$lang$Class;
    static java.lang.Class class$groovy$model$DefaultTableModel;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter;
    static java.lang.Class class$java$lang$Boolean;
    static java.lang.Class class$java$lang$RuntimeException;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$groovy$util$FactoryBuilderSupport;
    static java.lang.Class class$java$lang$IllegalArgumentException;

    public void <init>()
    {
        groovy.lang.MetaClass $r9, $r11;
        java.lang.Object[] $r6;
        groovy.swing.factory.PropertyColumnFactory r0;
        java.lang.Class $r1, r2, $r3, r4, $r5, $r12, $r13, $r14;
        java.lang.Object $r7, $r8, $r10;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        specialinvoke r0.<groovy.util.AbstractFactory: void <init>()>();

        $r1 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

        if $r1 != null goto label1;

        $r12 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.PropertyColumnFactory");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0> = $r12;

        goto label2;

     label1:
        $r12 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

     label2:
        r2 = $r12;

        $r3 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r3 != null goto label3;

        $r13 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass> = $r13;

        goto label4;

     label3:
        $r13 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r4 = $r13;

        $r5 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r5 != null goto label5;

        $r14 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r14;

        goto label6;

     label5:
        $r14 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label6:
        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r0;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r2, $r14, "initMetaClass", $r6);

        $r8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r7, r4);

        $r9 = (groovy.lang.MetaClass) $r8;

        $r10 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r9, r4);

        $r11 = (groovy.lang.MetaClass) $r10;

        r0.<groovy.swing.factory.PropertyColumnFactory: groovy.lang.MetaClass metaClass> = $r11;

        return;
    }

    public java.lang.Object newInstance(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object, java.util.Map) throws java.lang.InstantiationException, java.lang.IllegalAccessException
    {
        java.util.Map r15;
        groovy.model.DefaultTableModel $r50;
        java.lang.Throwable $r12, $r48;
        java.lang.Object[] $r4, $r10, $r16, $r20, $r22, $r26, $r30, $r46;
        groovy.swing.factory.PropertyColumnFactory r51;
        java.lang.String $r49;
        boolean $z0, $z1, $z2, $z3, $z4;
        groovy.util.FactoryBuilderSupport r7;
        java.lang.Boolean $r40, r66;
        java.lang.Class $r0, r1, $r2, $r3, $r9, $r13, $r18, $r24, $r28, $r33, $r36, $r38, $r41, $r42, $r43, $r44, $r45, $r52, $r53, $r54, $r55, $r56, $r57, $r59, r60, $r61, $r62, $r63, $r65, $r67, $r68, $r69, $r70;
        java.lang.Object r5, r6, $r8, $r11, $r14, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31, $r32, $r34, $r35, $r37, $r39, $r47, r58, $r64;

        r51 := @this: groovy.swing.factory.PropertyColumnFactory;

        r7 := @parameter0: groovy.util.FactoryBuilderSupport;

        r6 := @parameter1: java.lang.Object;

        r5 := @parameter2: java.lang.Object;

        r15 := @parameter3: java.util.Map;

        $r0 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

        if $r0 != null goto label01;

        $r52 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.PropertyColumnFactory");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0> = $r52;

        goto label02;

     label01:
        $r52 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

     label02:
        r1 = $r52;

        $r2 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label03;

        $r53 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass> = $r53;

        goto label04;

     label03:
        $r53 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label04:
        $r3 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$util$FactoryBuilderSupport>;

        if $r3 != null goto label05;

        $r54 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.util.FactoryBuilderSupport");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$util$FactoryBuilderSupport> = $r54;

        goto label06;

     label05:
        $r54 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$util$FactoryBuilderSupport>;

     label06:
        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r5;

        $r4[1] = r6;

        staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r54, "checkValueIsNull", $r4);

        $r8 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r7, "getCurrent");

        $z0 = $r8 instanceof groovy.model.DefaultTableModel;

        if $z0 == 0 goto label31;

        $r13 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$model$DefaultTableModel>;

        if $r13 != null goto label07;

        $r55 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.model.DefaultTableModel");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$model$DefaultTableModel> = $r55;

        goto label08;

     label07:
        $r55 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$model$DefaultTableModel>;

     label08:
        $r14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r8, $r55);

        $r50 = (groovy.model.DefaultTableModel) $r14;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = "propertyName";

        $r17 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r15, "remove", $r16);

        $r18 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$String>;

        if $r18 != null goto label09;

        $r56 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$String> = $r56;

        goto label10;

     label09:
        $r56 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$String>;

     label10:
        $r19 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r17, $r56);

        $r49 = (java.lang.String) $r19;

        $z1 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r49, null);

        if $z1 == 0 goto label13;

        $r45 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$IllegalArgumentException>;

        if $r45 != null goto label11;

        $r57 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("java.lang.IllegalArgumentException");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$IllegalArgumentException> = $r57;

        goto label12;

     label11:
        $r57 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$IllegalArgumentException>;

     label12:
        $r46 = newarray (java.lang.Object)[1];

        $r46[0] = "Must specify a property for a propertyColumn";

        $r47 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r57, $r46);

        $r48 = (java.lang.Throwable) $r47;

        throw $r48;

     label13:
        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = "header";

        $r21 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r15, "remove", $r20);

        r58 = $r21;

        $z2 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r21, null);

        if $z2 == 0 goto label14;

        r58 = "";

        goto label14;

     label14:
        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = "type";

        $r23 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r15, "remove", $r22);

        $r24 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Class>;

        if $r24 != null goto label15;

        $r59 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("java.lang.Class");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Class> = $r59;

        goto label16;

     label15:
        $r59 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Class>;

     label16:
        $r25 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r23, $r59);

        $r44 = (java.lang.Class) $r25;

        r60 = $r44;

        $z3 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r44, null);

        if $z3 == 0 goto label21;

        $r41 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Object>;

        if $r41 != null goto label17;

        $r43 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        $r61 = $r43;

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Object> = $r43;

        goto label18;

     label17:
        $r61 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Object>;

     label18:
        $r42 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Class>;

        if $r42 != null goto label19;

        $r62 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("java.lang.Class");

        $r63 = $r62;

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Class> = $r62;

        goto label20;

     label19:
        $r63 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Class>;

     label20:
        $r64 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r61, $r63);

        r60 = (java.lang.Class) $r64;

        goto label21;

     label21:
        $r26 = newarray (java.lang.Object)[1];

        $r26[0] = "editable";

        $r27 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, r15, "remove", $r26);

        $r28 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Boolean>;

        if $r28 != null goto label22;

        $r65 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Boolean> = $r65;

        goto label23;

     label22:
        $r65 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Boolean>;

     label23:
        $r29 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r27, $r65);

        $r40 = (java.lang.Boolean) $r29;

        r66 = $r40;

        $z4 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r40, null);

        if $z4 == 0 goto label28;

        $r36 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Boolean>;

        if $r36 != null goto label24;

        $r67 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Boolean> = $r67;

        goto label25;

     label24:
        $r67 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Boolean>;

     label25:
        $r37 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object getProperty(java.lang.Class,java.lang.Object,java.lang.String)>(r1, $r67, "TRUE");

        $r38 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Boolean>;

        if $r38 != null goto label26;

        $r68 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("java.lang.Boolean");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Boolean> = $r68;

        goto label27;

     label26:
        $r68 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Boolean>;

     label27:
        $r39 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r37, $r68);

        r66 = (java.lang.Boolean) $r39;

        goto label28;

     label28:
        $r30 = newarray (java.lang.Object)[4];

        $r30[0] = r58;

        $r30[1] = $r49;

        $r30[2] = r60;

        $r31 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethod0(java.lang.Class,java.lang.Object,java.lang.String)>(r1, r66, "booleanValue");

        $r30[3] = $r31;

        $r32 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeMethodN(java.lang.Class,java.lang.Object,java.lang.String,java.lang.Object[])>(r1, $r50, "addPropertyColumn", $r30);

        $r33 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Object>;

        if $r33 != null goto label29;

        $r69 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Object> = $r69;

        goto label30;

     label29:
        $r69 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$Object>;

     label30:
        $r34 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r32, $r69);

        $r35 = (java.lang.Object) $r34;

        return $r35;

     label31:
        $r9 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$RuntimeException>;

        if $r9 != null goto label32;

        $r70 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("java.lang.RuntimeException");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$RuntimeException> = $r70;

        goto label33;

     label32:
        $r70 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$java$lang$RuntimeException>;

     label33:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = "propertyColumn must be a child of a tableModel";

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeNewN(java.lang.Class,java.lang.Class,java.lang.Object)>(r1, $r70, $r10);

        $r12 = (java.lang.Throwable) $r11;

        throw $r12;
    }

    public groovy.lang.MetaClass getMetaClass()
    {
        java.lang.Object[] $r10;
        groovy.swing.factory.PropertyColumnFactory r4;
        boolean $z0;
        groovy.lang.MetaClass $r5, $r6, $r8, $r13, $r15;
        java.lang.Class $r0, r1, $r2, r3, $r9, $r16, $r17, $r18;
        java.lang.Object $r7, $r11, $r12, $r14;

        r4 := @this: groovy.swing.factory.PropertyColumnFactory;

        $r0 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r16 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.PropertyColumnFactory");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0> = $r16;

        goto label2;

     label1:
        $r16 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

     label2:
        r1 = $r16;

        $r2 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r2 != null goto label3;

        $r17 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass> = $r17;

        goto label4;

     label3:
        $r17 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r3 = $r17;

        $r5 = r4.<groovy.swing.factory.PropertyColumnFactory: groovy.lang.MetaClass metaClass>;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: boolean compareEqual(java.lang.Object,java.lang.Object)>($r5, null);

        if $z0 == 0 goto label7;

        $r9 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

        if $r9 != null goto label5;

        $r18 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("org.codehaus.groovy.runtime.ScriptBytecodeAdapter");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter> = $r18;

        goto label6;

     label5:
        $r18 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$org$codehaus$groovy$runtime$ScriptBytecodeAdapter>;

     label6:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r4;

        $r11 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object invokeStaticMethodN(java.lang.Class,java.lang.Class,java.lang.String,java.lang.Object[])>(r1, $r18, "initMetaClass", $r10);

        $r12 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r11, r3);

        $r13 = (groovy.lang.MetaClass) $r12;

        $r14 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r13, r3);

        $r15 = (groovy.lang.MetaClass) $r14;

        r4.<groovy.swing.factory.PropertyColumnFactory: groovy.lang.MetaClass metaClass> = $r15;

        goto label7;

     label7:
        $r6 = r4.<groovy.swing.factory.PropertyColumnFactory: groovy.lang.MetaClass metaClass>;

        $r7 = staticinvoke <org.codehaus.groovy.runtime.ScriptBytecodeAdapter: java.lang.Object castToType(java.lang.Object,java.lang.Class)>($r6, r3);

        $r8 = (groovy.lang.MetaClass) $r7;

        return $r8;
    }

    public void setMetaClass(groovy.lang.MetaClass)
    {
        groovy.lang.MetaClass r3;
        java.lang.Class $r0, $r1, $r4, $r5;
        groovy.swing.factory.PropertyColumnFactory r2;

        r2 := @this: groovy.swing.factory.PropertyColumnFactory;

        r3 := @parameter0: groovy.lang.MetaClass;

        $r0 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.PropertyColumnFactory");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0> = $r4;

        goto label2;

     label1:
        $r4 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r5 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass> = $r5;

        goto label4;

     label3:
        $r5 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        r2.<groovy.swing.factory.PropertyColumnFactory: groovy.lang.MetaClass metaClass> = r3;

        return;
    }

    public java.lang.Object invokeMethod(java.lang.String, java.lang.Object)
    {
        groovy.lang.MetaClass $r3;
        groovy.swing.factory.PropertyColumnFactory r2;
        java.lang.Class $r0, $r1, $r7, $r8;
        java.lang.Object r5, $r6;
        java.lang.String r4;

        r2 := @this: groovy.swing.factory.PropertyColumnFactory;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r0 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.PropertyColumnFactory");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0> = $r7;

        goto label2;

     label1:
        $r7 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r8 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass> = $r8;

        goto label4;

     label3:
        $r8 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.swing.factory.PropertyColumnFactory: groovy.lang.MetaClass getMetaClass()>();

        $r6 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r2, r4, r5);

        return $r6;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        groovy.lang.MetaClass $r3;
        groovy.swing.factory.PropertyColumnFactory r2;
        java.lang.Class $r0, $r1, $r6, $r7;
        java.lang.Object $r5;
        java.lang.String r4;

        r2 := @this: groovy.swing.factory.PropertyColumnFactory;

        r4 := @parameter0: java.lang.String;

        $r0 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.PropertyColumnFactory");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.swing.factory.PropertyColumnFactory: groovy.lang.MetaClass getMetaClass()>();

        $r5 = interfaceinvoke $r3.<groovy.lang.MetaClass: java.lang.Object getProperty(java.lang.Object,java.lang.String)>(r2, r4);

        return $r5;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        groovy.lang.MetaClass $r3;
        groovy.swing.factory.PropertyColumnFactory r2;
        java.lang.Class $r0, $r1, $r6, $r7;
        java.lang.Object r5;
        java.lang.String r4;

        r2 := @this: groovy.swing.factory.PropertyColumnFactory;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Object;

        $r0 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.PropertyColumnFactory");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r3 = virtualinvoke r2.<groovy.swing.factory.PropertyColumnFactory: groovy.lang.MetaClass getMetaClass()>();

        interfaceinvoke $r3.<groovy.lang.MetaClass: void setProperty(java.lang.Object,java.lang.String,java.lang.Object)>(r2, r4, r5);

        return;
    }

    static void <clinit>()
    {
        java.lang.Long $r2, $r3, $r4, $r5;
        java.lang.Class $r0, $r1, $r6, $r7;

        $r0 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

        if $r0 != null goto label1;

        $r6 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.swing.factory.PropertyColumnFactory");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0> = $r6;

        goto label2;

     label1:
        $r6 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$0>;

     label2:
        $r1 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

        if $r1 != null goto label3;

        $r7 = staticinvoke <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$(java.lang.String)>("groovy.lang.MetaClass");

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass> = $r7;

        goto label4;

     label3:
        $r7 = <groovy.swing.factory.PropertyColumnFactory: java.lang.Class class$groovy$lang$MetaClass>;

     label4:
        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(1239119697010L);

        $r3 = (java.lang.Long) $r2;

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Long __timeStamp> = $r3;

        $r4 = new java.lang.Long;

        specialinvoke $r4.<java.lang.Long: void <init>(long)>(0L);

        $r5 = (java.lang.Long) $r4;

        <groovy.swing.factory.PropertyColumnFactory: java.lang.Long __timeStamp__239_neverHappen1239119697010> = $r5;

        return;
    }

    void super$1$wait()
    {
        groovy.swing.factory.PropertyColumnFactory r0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        specialinvoke r0.<java.lang.Object: void wait()>();

        return;
    }

    java.lang.String super$1$toString()
    {
        java.lang.String $r1;
        groovy.swing.factory.PropertyColumnFactory r0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.String toString()>();

        return $r1;
    }

    boolean super$2$isLeaf()
    {
        groovy.swing.factory.PropertyColumnFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        $z0 = specialinvoke r0.<groovy.util.AbstractFactory: boolean isLeaf()>();

        return $z0;
    }

    void super$2$setChild(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        java.lang.Object r2, r3;
        groovy.swing.factory.PropertyColumnFactory r0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void setChild(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    void super$1$wait(long, int)
    {
        int i1;
        long l0;
        groovy.swing.factory.PropertyColumnFactory r0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void wait(long,int)>(l0, i1);

        return;
    }

    void super$1$notify()
    {
        groovy.swing.factory.PropertyColumnFactory r0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        specialinvoke r0.<java.lang.Object: void notify()>();

        return;
    }

    void super$2$onNodeCompleted(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        java.lang.Object r2, r3;
        groovy.swing.factory.PropertyColumnFactory r0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void onNodeCompleted(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    java.lang.Class super$1$getClass()
    {
        java.lang.Class $r1;
        groovy.swing.factory.PropertyColumnFactory r0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r1;
    }

    void super$1$notifyAll()
    {
        groovy.swing.factory.PropertyColumnFactory r0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        specialinvoke r0.<java.lang.Object: void notifyAll()>();

        return;
    }

    void super$1$finalize()
    {
        groovy.swing.factory.PropertyColumnFactory r0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    void super$1$wait(long)
    {
        long l0;
        groovy.swing.factory.PropertyColumnFactory r0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        l0 := @parameter0: long;

        specialinvoke r0.<java.lang.Object: void wait(long)>(l0);

        return;
    }

    void super$2$setParent(groovy.util.FactoryBuilderSupport, java.lang.Object, java.lang.Object)
    {
        groovy.util.FactoryBuilderSupport r1;
        java.lang.Object r2, r3;
        groovy.swing.factory.PropertyColumnFactory r0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        specialinvoke r0.<groovy.util.AbstractFactory: void setParent(groovy.util.FactoryBuilderSupport,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        return;
    }

    boolean super$2$onHandleNodeAttributes(groovy.util.FactoryBuilderSupport, java.lang.Object, java.util.Map)
    {
        groovy.util.FactoryBuilderSupport r1;
        java.util.Map r3;
        java.lang.Object r2;
        groovy.swing.factory.PropertyColumnFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        r1 := @parameter0: groovy.util.FactoryBuilderSupport;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.util.Map;

        $z0 = specialinvoke r0.<groovy.util.AbstractFactory: boolean onHandleNodeAttributes(groovy.util.FactoryBuilderSupport,java.lang.Object,java.util.Map)>(r1, r2, r3);

        return $z0;
    }

    java.lang.Object super$1$clone()
    {
        java.lang.Object $r1;
        groovy.swing.factory.PropertyColumnFactory r0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        return $r1;
    }

    boolean super$1$equals(java.lang.Object)
    {
        java.lang.Object r1;
        groovy.swing.factory.PropertyColumnFactory r0;
        boolean $z0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        r1 := @parameter0: java.lang.Object;

        $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        return $z0;
    }

    int super$1$hashCode()
    {
        int $i0;
        groovy.swing.factory.PropertyColumnFactory r0;

        r0 := @this: groovy.swing.factory.PropertyColumnFactory;

        $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>();

        return $i0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        return $r1;

     label2:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label2;
    }
}
