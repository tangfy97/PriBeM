final class kodkod.engine.TrivialProof$1 extends java.lang.Object implements kodkod.engine.fol2sat.RecordFilter
{
    final java.util.Set coreNodes;
    final kodkod.engine.TrivialProof this$0;

    void <init>(kodkod.engine.TrivialProof)
    {
        kodkod.engine.fol2sat.TranslationLog $r2, $r6;
        java.util.Set $r5, $r7;
        kodkod.engine.TrivialProof$1 r0;
        java.util.Map $r3, $r4;
        kodkod.engine.TrivialProof r1;

        r0 := @this: kodkod.engine.TrivialProof$1;

        r1 := @parameter0: kodkod.engine.TrivialProof;

        r0.<kodkod.engine.TrivialProof$1: kodkod.engine.TrivialProof this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<kodkod.engine.TrivialProof: kodkod.engine.fol2sat.TranslationLog log()>();

        $r3 = staticinvoke <kodkod.engine.TrivialProof: java.util.Map access$0(kodkod.engine.TrivialProof)>(r1);

        if $r3 != null goto label1;

        $r6 = virtualinvoke r1.<kodkod.engine.TrivialProof: kodkod.engine.fol2sat.TranslationLog log()>();

        $r7 = virtualinvoke $r6.<kodkod.engine.fol2sat.TranslationLog: java.util.Set roots()>();

        goto label2;

     label1:
        $r4 = staticinvoke <kodkod.engine.TrivialProof: java.util.Map access$0(kodkod.engine.TrivialProof)>(r1);

        $r7 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

     label2:
        $r5 = staticinvoke <kodkod.engine.TrivialProof$NodePruner: java.util.Set relevantNodes(kodkod.engine.fol2sat.TranslationLog,java.util.Set)>($r2, $r7);

        r0.<kodkod.engine.TrivialProof$1: java.util.Set coreNodes> = $r5;

        return;
    }

    public boolean accept(kodkod.ast.Node, kodkod.ast.Formula, int, java.util.Map)
    {
        kodkod.ast.Formula r1;
        java.util.Map r4;
        int i0;
        java.util.Set $r2;
        kodkod.engine.TrivialProof$1 r0;
        kodkod.ast.Node r3;
        boolean $z0;

        r0 := @this: kodkod.engine.TrivialProof$1;

        r3 := @parameter0: kodkod.ast.Node;

        r1 := @parameter1: kodkod.ast.Formula;

        i0 := @parameter2: int;

        r4 := @parameter3: java.util.Map;

        $r2 = r0.<kodkod.engine.TrivialProof$1: java.util.Set coreNodes>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }
}
