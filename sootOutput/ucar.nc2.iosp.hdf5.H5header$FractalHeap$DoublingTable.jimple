class ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable extends java.lang.Object
{
    int tableWidth;
    long startingBlockSize;
    long managedSpace;
    long maxDirectBlockSize;
    java.util.List blockList;
    final ucar.nc2.iosp.hdf5.H5header$FractalHeap this$1;

    void <init>(ucar.nc2.iosp.hdf5.H5header$FractalHeap, int, long, long, long)
    {
        ucar.nc2.iosp.hdf5.H5header$FractalHeap r1;
        long l1, l2, l3;
        java.util.ArrayList $r3;
        short $s4;
        int i0, $i5, $i6;
        ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable r0;

        r0 := @this: ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable;

        r1 := @parameter0: ucar.nc2.iosp.hdf5.H5header$FractalHeap;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        l3 := @parameter4: long;

        r0.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: ucar.nc2.iosp.hdf5.H5header$FractalHeap this$1> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: int tableWidth> = i0;

        r0.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: long startingBlockSize> = l1;

        r0.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: long managedSpace> = l2;

        r0.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: long maxDirectBlockSize> = l3;

        $r3 = new java.util.ArrayList;

        $s4 = r1.<ucar.nc2.iosp.hdf5.H5header$FractalHeap: short currentNumRows>;

        $i6 = (int) $s4;

        $i5 = i0 * $i6;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i5);

        r0.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: java.util.List blockList> = $r3;

        return;
    }

    private int calcNrows(long)
    {
        long l0, $l2, $l3, l5, l6;
        byte $b7;
        int $i1, i4, $i8;
        ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable r0;

        r0 := @this: ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable;

        l0 := @parameter0: long;

        i4 = 0;

        l5 = 0L;

        l6 = r0.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: long startingBlockSize>;

     label1:
        $b7 = l5 cmp l0;

        $i8 = (int) $b7;

        if $i8 >= 0 goto label2;

        $i1 = r0.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: int tableWidth>;

        $l2 = (long) $i1;

        $l3 = l6 * $l2;

        l5 = l5 + $l3;

        i4 = i4 + 1;

        if i4 <= 1 goto label1;

        l6 = l6 * 2L;

        goto label1;

     label2:
        return i4;
    }

    private void assignSizes()
    {
        java.util.Iterator $r2;
        ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock r4;
        long l5;
        java.util.List $r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r3;
        ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable r0;
        boolean $z0;

        r0 := @this: ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable;

        i4 = 0;

        l5 = r0.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: long startingBlockSize>;

        $r1 = r0.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: java.util.List blockList>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock) $r3;

        r4.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock: long size> = l5;

        i4 = i4 + 1;

        $i0 = r0.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: int tableWidth>;

        $i1 = i4 % $i0;

        if $i1 != 0 goto label2;

        $i2 = r0.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: int tableWidth>;

        $i3 = i4 / $i2;

        if $i3 <= 1 goto label2;

        l5 = l5 * 2L;

     label2:
        goto label1;

     label3:
        return;
    }

    long getPos(long)
    {
        ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock r9;
        long l0, $l1, $l3, $l5, $l6, $l7, $l9, l10, $l11, $l12;
        byte $b2, $b4, $b8;
        int $i13, $i14, $i15;
        java.lang.String $r7;
        boolean $z0;
        org.slf4j.Logger $r3;
        java.util.Iterator $r2;
        java.util.List $r1;
        java.lang.StringBuilder $r5, $r6, $r10;
        java.lang.Object $r8;
        ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable r0;

        r0 := @this: ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable;

        l0 := @parameter0: long;

        $r1 = r0.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: java.util.List blockList>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r9 = (ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock) $r8;

        $l1 = r9.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock: long address>;

        $b2 = $l1 cmp 0L;

        $i13 = (int) $b2;

        if $i13 >= 0 goto label2;

        goto label1;

     label2:
        $l3 = r9.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock: long offset>;

        $b4 = l0 cmp $l3;

        $i14 = (int) $b4;

        if $i14 < 0 goto label3;

        $l6 = r9.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock: long offset>;

        $l5 = r9.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock: long size>;

        $l7 = $l6 + $l5;

        $b8 = l0 cmp $l7;

        $i15 = (int) $b8;

        if $i15 > 0 goto label3;

        $l9 = r9.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock: long offset>;

        l10 = l0 - $l9;

        $l11 = r9.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock: long dataPos>;

        $l12 = $l11 + l10;

        return $l12;

     label3:
        goto label1;

     label4:
        $r3 = staticinvoke <ucar.nc2.iosp.hdf5.H5header: org.slf4j.Logger access$600()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DoublingTable: illegal offset=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void error(java.lang.String)>($r7);

        return -1L;
    }

    void showDetails(java.util.Formatter)
    {
        java.lang.Object[] $r1, $r7, $r8, $r13;
        ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock r12;
        long $l1, $l2, $l3, $l4, $l5, $l6, $l7;
        java.lang.Integer $r3;
        java.util.Formatter r0;
        java.lang.Long $r4, $r5, $r6, $r14, $r15, $r16, $r17;
        int $i0;
        boolean $z0;
        java.util.Iterator $r10;
        java.util.List $r9;
        java.lang.Object $r11;
        ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable r2;

        r2 := @this: ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable;

        r0 := @parameter0: java.util.Formatter;

        $r1 = newarray (java.lang.Object)[4];

        $i0 = r2.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: int tableWidth>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r3;

        $l1 = r2.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: long startingBlockSize>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r1[1] = $r4;

        $l2 = r2.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: long managedSpace>;

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r1[2] = $r5;

        $l3 = r2.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: long maxDirectBlockSize>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r1[3] = $r6;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" DoublingTable: tableWidth= %d startingBlockSize = %d managedSpace=%d maxDirectBlockSize=%d%n", $r1);

        $r7 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" DataBlocks:\n", $r7);

        $r8 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  address            dataPos            offset size\n", $r8);

        $r9 = r2.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DoublingTable: java.util.List blockList>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock) $r11;

        $r13 = newarray (java.lang.Object)[4];

        $l4 = r12.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock: long address>;

        $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r13[0] = $r14;

        $l5 = r12.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock: long dataPos>;

        $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r13[1] = $r15;

        $l6 = r12.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock: long offset>;

        $r16 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        $r13[2] = $r16;

        $l7 = r12.<ucar.nc2.iosp.hdf5.H5header$FractalHeap$DataBlock: long size>;

        $r17 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l7);

        $r13[3] = $r17;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("  %#-18x %#-18x %5d  %4d%n", $r13);

        goto label1;

     label2:
        return;
    }
}
