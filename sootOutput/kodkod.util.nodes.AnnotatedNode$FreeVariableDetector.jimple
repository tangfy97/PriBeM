final class kodkod.util.nodes.AnnotatedNode$FreeVariableDetector extends kodkod.ast.visitor.AbstractDetector
{
    private final kodkod.util.collections.Stack varsInScope;

    void <init>(java.util.Set)
    {
        java.util.Set r1;
        kodkod.util.nodes.AnnotatedNode$FreeVariableDetector r0;
        kodkod.util.collections.ArrayStack $r2;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$FreeVariableDetector;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<kodkod.ast.visitor.AbstractDetector: void <init>(java.util.Set)>(r1);

        $r2 = new kodkod.util.collections.ArrayStack;

        specialinvoke $r2.<kodkod.util.collections.ArrayStack: void <init>()>();

        r0.<kodkod.util.nodes.AnnotatedNode$FreeVariableDetector: kodkod.util.collections.Stack varsInScope> = $r2;

        return;
    }

    private java.lang.Boolean visit(kodkod.ast.Node, kodkod.ast.Decls, kodkod.ast.Node)
    {
        int i0, $i2;
        java.lang.Boolean $r2, $r8, $r11, $r13;
        boolean $z0, $z1, z2, $z3, $z4, $z5, z6;
        java.util.Iterator $r4;
        kodkod.ast.Expression $r6;
        kodkod.ast.Decl r14;
        kodkod.util.collections.Stack $r12, $r15;
        kodkod.ast.Decls r3;
        kodkod.ast.Node r1, r9;
        kodkod.ast.Variable $r16;
        java.lang.Object $r5, $r7, $r10;
        kodkod.util.nodes.AnnotatedNode$FreeVariableDetector r0;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$FreeVariableDetector;

        r1 := @parameter0: kodkod.ast.Node;

        r3 := @parameter1: kodkod.ast.Decls;

        r9 := @parameter2: kodkod.ast.Node;

        $r2 = virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$FreeVariableDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        z2 = 0;

        $r4 = virtualinvoke r3.<kodkod.ast.Decls: java.util.Iterator iterator()>();

        goto label5;

     label2:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r14 = (kodkod.ast.Decl) $r5;

        $r6 = virtualinvoke r14.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.lang.Boolean) $r7;

        $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label3;

        if z2 != 0 goto label3;

        $z3 = 0;

        goto label4;

     label3:
        $z3 = 1;

     label4:
        z2 = $z3;

        $r15 = r0.<kodkod.util.nodes.AnnotatedNode$FreeVariableDetector: kodkod.util.collections.Stack varsInScope>;

        $r16 = virtualinvoke r14.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        virtualinvoke $r15.<kodkod.util.collections.Stack: java.lang.Object push(java.lang.Object)>($r16);

     label5:
        $z4 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label2;

        $r10 = virtualinvoke r9.<kodkod.ast.Node: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r11 = (java.lang.Boolean) $r10;

        $z1 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label6;

        if z2 != 0 goto label6;

        $z5 = 0;

        goto label7;

     label6:
        $z5 = 1;

     label7:
        z6 = $z5;

        i0 = virtualinvoke r3.<kodkod.ast.Decls: int size()>();

        goto label9;

     label8:
        $r12 = r0.<kodkod.util.nodes.AnnotatedNode$FreeVariableDetector: kodkod.util.collections.Stack varsInScope>;

        virtualinvoke $r12.<kodkod.util.collections.Stack: java.lang.Object pop()>();

        $i2 = (int) -1;

        i0 = i0 + $i2;

     label9:
        if i0 > 0 goto label8;

        $r13 = virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$FreeVariableDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, z6);

        return $r13;
    }

    public java.lang.Boolean visit(kodkod.ast.Variable)
    {
        int $i0;
        java.lang.Boolean $r3;
        kodkod.util.collections.Stack $r2;
        kodkod.util.nodes.AnnotatedNode$FreeVariableDetector r0;
        kodkod.ast.Variable r1;
        boolean $z0;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$FreeVariableDetector;

        r1 := @parameter0: kodkod.ast.Variable;

        $r2 = r0.<kodkod.util.nodes.AnnotatedNode$FreeVariableDetector: kodkod.util.collections.Stack varsInScope>;

        $i0 = virtualinvoke $r2.<kodkod.util.collections.Stack: int search(java.lang.Object)>(r1);

        if $i0 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        return $r3;
    }

    public java.lang.Boolean visit(kodkod.ast.Decl)
    {
        kodkod.ast.Decl r1;
        kodkod.ast.Expression $r3;
        java.lang.Boolean $r2, $r5, $r6;
        java.lang.Object $r4;
        kodkod.util.nodes.AnnotatedNode$FreeVariableDetector r0;
        boolean $z0;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$FreeVariableDetector;

        r1 := @parameter0: kodkod.ast.Decl;

        $r2 = virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$FreeVariableDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        $r6 = virtualinvoke r0.<kodkod.util.nodes.AnnotatedNode$FreeVariableDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z0);

        return $r6;
    }

    public java.lang.Boolean visit(kodkod.ast.Comprehension)
    {
        kodkod.ast.Formula $r3;
        java.lang.Boolean $r4;
        kodkod.ast.Decls $r2;
        kodkod.util.nodes.AnnotatedNode$FreeVariableDetector r0;
        kodkod.ast.Comprehension r1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$FreeVariableDetector;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $r2 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Decls decls()>();

        $r3 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Formula formula()>();

        $r4 = specialinvoke r0.<kodkod.util.nodes.AnnotatedNode$FreeVariableDetector: java.lang.Boolean visit(kodkod.ast.Node,kodkod.ast.Decls,kodkod.ast.Node)>(r1, $r2, $r3);

        return $r4;
    }

    public java.lang.Boolean visit(kodkod.ast.SumExpression)
    {
        kodkod.ast.IntExpression $r3;
        java.lang.Boolean $r4;
        kodkod.ast.Decls $r2;
        kodkod.util.nodes.AnnotatedNode$FreeVariableDetector r0;
        kodkod.ast.SumExpression r1;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$FreeVariableDetector;

        r1 := @parameter0: kodkod.ast.SumExpression;

        $r2 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.Decls decls()>();

        $r3 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr()>();

        $r4 = specialinvoke r0.<kodkod.util.nodes.AnnotatedNode$FreeVariableDetector: java.lang.Boolean visit(kodkod.ast.Node,kodkod.ast.Decls,kodkod.ast.Node)>(r1, $r2, $r3);

        return $r4;
    }

    public java.lang.Boolean visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.ast.QuantifiedFormula r1;
        kodkod.ast.Formula $r3;
        java.lang.Boolean $r4;
        kodkod.ast.Decls $r2;
        kodkod.util.nodes.AnnotatedNode$FreeVariableDetector r0;

        r0 := @this: kodkod.util.nodes.AnnotatedNode$FreeVariableDetector;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        $r3 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        $r4 = specialinvoke r0.<kodkod.util.nodes.AnnotatedNode$FreeVariableDetector: java.lang.Boolean visit(kodkod.ast.Node,kodkod.ast.Decls,kodkod.ast.Node)>(r1, $r2, $r3);

        return $r4;
    }
}
