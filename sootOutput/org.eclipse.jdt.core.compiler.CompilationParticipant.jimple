public abstract class org.eclipse.jdt.core.compiler.CompilationParticipant extends java.lang.Object
{
    public static int READY_FOR_BUILD;
    public static int NEEDS_FULL_BUILD;

    static void <clinit>()
    {
        <org.eclipse.jdt.core.compiler.CompilationParticipant: int READY_FOR_BUILD> = 1;

        <org.eclipse.jdt.core.compiler.CompilationParticipant: int NEEDS_FULL_BUILD> = 2;

        return;
    }

    public void <init>()
    {
        org.eclipse.jdt.core.compiler.CompilationParticipant r0;

        r0 := @this: org.eclipse.jdt.core.compiler.CompilationParticipant;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int aboutToBuild(org.eclipse.jdt.core.IJavaProject)
    {
        int $i0;
        org.eclipse.jdt.core.compiler.CompilationParticipant r0;
        org.eclipse.jdt.core.IJavaProject r1;

        r0 := @this: org.eclipse.jdt.core.compiler.CompilationParticipant;

        r1 := @parameter0: org.eclipse.jdt.core.IJavaProject;

        $i0 = <org.eclipse.jdt.core.compiler.CompilationParticipant: int READY_FOR_BUILD>;

        return $i0;
    }

    public void buildFinished(org.eclipse.jdt.core.IJavaProject)
    {
        org.eclipse.jdt.core.compiler.CompilationParticipant r0;
        org.eclipse.jdt.core.IJavaProject r1;

        r0 := @this: org.eclipse.jdt.core.compiler.CompilationParticipant;

        r1 := @parameter0: org.eclipse.jdt.core.IJavaProject;

        return;
    }

    public void buildStarting(org.eclipse.jdt.core.compiler.BuildContext[], boolean)
    {
        org.eclipse.jdt.core.compiler.CompilationParticipant r0;
        org.eclipse.jdt.core.compiler.BuildContext[] r1;
        boolean z0;

        r0 := @this: org.eclipse.jdt.core.compiler.CompilationParticipant;

        r1 := @parameter0: org.eclipse.jdt.core.compiler.BuildContext[];

        z0 := @parameter1: boolean;

        return;
    }

    public void cleanStarting(org.eclipse.jdt.core.IJavaProject)
    {
        org.eclipse.jdt.core.compiler.CompilationParticipant r0;
        org.eclipse.jdt.core.IJavaProject r1;

        r0 := @this: org.eclipse.jdt.core.compiler.CompilationParticipant;

        r1 := @parameter0: org.eclipse.jdt.core.IJavaProject;

        return;
    }

    public boolean isActive(org.eclipse.jdt.core.IJavaProject)
    {
        org.eclipse.jdt.core.compiler.CompilationParticipant r0;
        org.eclipse.jdt.core.IJavaProject r1;

        r0 := @this: org.eclipse.jdt.core.compiler.CompilationParticipant;

        r1 := @parameter0: org.eclipse.jdt.core.IJavaProject;

        return 0;
    }

    public boolean isAnnotationProcessor()
    {
        org.eclipse.jdt.core.compiler.CompilationParticipant r0;

        r0 := @this: org.eclipse.jdt.core.compiler.CompilationParticipant;

        return 0;
    }

    public void processAnnotations(org.eclipse.jdt.core.compiler.BuildContext[])
    {
        org.eclipse.jdt.core.compiler.CompilationParticipant r0;
        org.eclipse.jdt.core.compiler.BuildContext[] r1;

        r0 := @this: org.eclipse.jdt.core.compiler.CompilationParticipant;

        r1 := @parameter0: org.eclipse.jdt.core.compiler.BuildContext[];

        return;
    }

    public void reconcile(org.eclipse.jdt.core.compiler.ReconcileContext)
    {
        org.eclipse.jdt.core.compiler.CompilationParticipant r0;
        org.eclipse.jdt.core.compiler.ReconcileContext r1;

        r0 := @this: org.eclipse.jdt.core.compiler.CompilationParticipant;

        r1 := @parameter0: org.eclipse.jdt.core.compiler.ReconcileContext;

        return;
    }
}
