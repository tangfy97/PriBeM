public class org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter extends org.waveprotocol.wave.model.conversation.ConversationListenerImpl
{
    private final org.waveprotocol.wave.model.conversation.ConversationBlip myBlip;
    private final org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener listener;

    public void <init>(org.waveprotocol.wave.model.conversation.ConversationBlip, org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener r2;
        org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter r0;
        org.waveprotocol.wave.model.conversation.ConversationBlip r1;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.ConversationBlip;

        r2 := @parameter1: org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.ConversationListenerImpl: void <init>()>();

        r0.<org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter: org.waveprotocol.wave.model.conversation.ConversationBlip myBlip> = r1;

        r0.<org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter: org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener listener> = r2;

        return;
    }

    public void onBlipContributorAdded(org.waveprotocol.wave.model.conversation.ObservableConversationBlip, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.conversation.ConversationBlip $r2;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener $r4;
        org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter r1;
        org.waveprotocol.wave.model.wave.ParticipantId r3;

        r1 := @this: org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationBlip;

        r3 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r1.<org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter: org.waveprotocol.wave.model.conversation.ConversationBlip myBlip>;

        if r0 != $r2 goto label1;

        $r4 = r1.<org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter: org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener listener>;

        interfaceinvoke $r4.<org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener: void onBlipContributorAdded(org.waveprotocol.wave.model.wave.ParticipantId)>(r3);

     label1:
        return;
    }

    public void onBlipContributorRemoved(org.waveprotocol.wave.model.conversation.ObservableConversationBlip, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.conversation.ConversationBlip $r2;
        org.waveprotocol.wave.model.conversation.ObservableConversationBlip r0;
        org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener $r4;
        org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter r1;
        org.waveprotocol.wave.model.wave.ParticipantId r3;

        r1 := @this: org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter;

        r0 := @parameter0: org.waveprotocol.wave.model.conversation.ObservableConversationBlip;

        r3 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r1.<org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter: org.waveprotocol.wave.model.conversation.ConversationBlip myBlip>;

        if r0 != $r2 goto label1;

        $r4 = r1.<org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter: org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener listener>;

        interfaceinvoke $r4.<org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener: void onBlipContributorRemoved(org.waveprotocol.wave.model.wave.ParticipantId)>(r3);

     label1:
        return;
    }

    public void onParticipantAdded(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener $r2;
        org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter r0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter: org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener listener>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener: void onParticipantAdded(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        return;
    }

    public void onParticipantRemoved(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener $r2;
        org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter r0;
        org.waveprotocol.wave.model.wave.ParticipantId r1;

        r0 := @this: org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.wave.client.gadget.renderer.WaveletListenerAdapter: org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener listener>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.gadget.renderer.GadgetWaveletListener: void onParticipantRemoved(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        return;
    }
}
