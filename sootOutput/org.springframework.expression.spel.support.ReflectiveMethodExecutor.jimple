class org.springframework.expression.spel.support.ReflectiveMethodExecutor extends java.lang.Object implements org.springframework.expression.MethodExecutor
{
    private final java.lang.reflect.Method method;
    private final java.lang.Integer varargsPosition;
    private final int[] argsRequiringConversion;

    public void <init>(java.lang.reflect.Method, int[])
    {
        org.springframework.expression.spel.support.ReflectiveMethodExecutor r0;
        java.lang.Class[] $r3;
        java.lang.Integer $r4;
        int[] r2;
        int $i0, $i1;
        java.lang.reflect.Method r1;
        boolean $z0;

        r0 := @this: org.springframework.expression.spel.support.ReflectiveMethodExecutor;

        r1 := @parameter0: java.lang.reflect.Method;

        r2 := @parameter1: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: java.lang.reflect.Method method> = r1;

        $z0 = virtualinvoke r1.<java.lang.reflect.Method: boolean isVarArgs()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r3;

        $i1 = $i0 - 1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        r0.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: java.lang.Integer varargsPosition> = $r4;

        goto label2;

     label1:
        r0.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: java.lang.Integer varargsPosition> = null;

     label2:
        r0.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: int[] argsRequiringConversion> = r2;

        return;
    }

    public transient org.springframework.expression.TypedValue execute(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.Object[]) throws org.springframework.expression.AccessException
    {
        java.lang.Object[] r23;
        org.springframework.expression.spel.support.ReflectiveMethodExecutor r0;
        java.lang.Integer $r14;
        int[] $r1, $r15;
        org.springframework.core.convert.TypeDescriptor $r26;
        org.springframework.core.MethodParameter $r25;
        int $i1;
        java.lang.String $r22;
        org.springframework.expression.TypedValue $r27;
        java.lang.reflect.Method $r2, $r5, $r9, $r10, $r16, $r20, $r24;
        boolean $z0;
        org.springframework.expression.TypeConverter $r13;
        java.lang.Class[] $r11;
        java.lang.Exception $r17;
        org.springframework.expression.AccessException $r29;
        org.springframework.expression.EvaluationContext r12;
        java.lang.Object r4, $r6;
        java.lang.StringBuilder $r21, $r28;

        r0 := @this: org.springframework.expression.spel.support.ReflectiveMethodExecutor;

        r12 := @parameter0: org.springframework.expression.EvaluationContext;

        r4 := @parameter1: java.lang.Object;

        r23 := @parameter2: java.lang.Object[];

     label1:
        $r1 = r0.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: int[] argsRequiringConversion>;

        if $r1 == null goto label2;

        if r23 == null goto label2;

        $r13 = interfaceinvoke r12.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypeConverter getTypeConverter()>();

        $r16 = r0.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: java.lang.reflect.Method method>;

        $r15 = r0.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: int[] argsRequiringConversion>;

        $r14 = r0.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: java.lang.Integer varargsPosition>;

        staticinvoke <org.springframework.expression.spel.support.ReflectionHelper: void convertArguments(org.springframework.expression.TypeConverter,java.lang.Object[],java.lang.Object,int[],java.lang.Integer)>($r13, r23, $r16, $r15, $r14);

     label2:
        $r24 = r0.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: java.lang.reflect.Method method>;

        $z0 = virtualinvoke $r24.<java.lang.reflect.Method: boolean isVarArgs()>();

        if $z0 == 0 goto label3;

        $r10 = r0.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: java.lang.reflect.Method method>;

        $r11 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r23 = staticinvoke <org.springframework.expression.spel.support.ReflectionHelper: java.lang.Object[] setupArgumentsForVarargsInvocation(java.lang.Class[],java.lang.Object[])>($r11, r23);

     label3:
        $r2 = r0.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: java.lang.reflect.Method method>;

        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>($r2);

        $r27 = new org.springframework.expression.TypedValue;

        $r5 = r0.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: java.lang.reflect.Method method>;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r4, r23);

        $r26 = new org.springframework.core.convert.TypeDescriptor;

        $r25 = new org.springframework.core.MethodParameter;

        $r9 = r0.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: java.lang.reflect.Method method>;

        $i1 = (int) -1;

        specialinvoke $r25.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>($r9, $i1);

        specialinvoke $r26.<org.springframework.core.convert.TypeDescriptor: void <init>(org.springframework.core.MethodParameter)>($r25);

        specialinvoke $r27.<org.springframework.expression.TypedValue: void <init>(java.lang.Object,org.springframework.core.convert.TypeDescriptor)>($r6, $r26);

     label4:
        return $r27;

     label5:
        $r17 := @caughtexception;

        $r29 = new org.springframework.expression.AccessException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Problem invoking method: ");

        $r20 = r0.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: java.lang.reflect.Method method>;

        $r21 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>($r22, $r17);

        throw $r29;

        catch java.lang.Exception from label1 to label4 with label5;
    }
}
