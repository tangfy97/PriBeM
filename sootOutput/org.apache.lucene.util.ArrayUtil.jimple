public final class org.apache.lucene.util.ArrayUtil extends java.lang.Object
{
    static final float MERGE_OVERHEAD_RATIO;
    static final int MERGE_EXTRA_MEMORY_THRESHOLD;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        org.apache.lucene.util.ArrayUtil r0;

        r0 := @this: org.apache.lucene.util.ArrayUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int parseInt(char[]) throws java.lang.NumberFormatException
    {
        int $i0, $i1;
        char[] r0;

        r0 := @parameter0: char[];

        $i0 = lengthof r0;

        $i1 = staticinvoke <org.apache.lucene.util.ArrayUtil: int parseInt(char[],int,int,int)>(r0, 0, $i0, 10);

        return $i1;
    }

    public static int parseInt(char[], int, int) throws java.lang.NumberFormatException
    {
        int i0, i1, $i2;
        char[] r0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int parseInt(char[],int,int,int)>(r0, i0, i1, 10);

        return $i2;
    }

    public static int parseInt(char[], int, int, int) throws java.lang.NumberFormatException
    {
        char $c2;
        java.lang.NumberFormatException $r4, $r5, $r6;
        int i0, $i1, $i3, i4, i5, $i6, $i8;
        char[] r0;
        boolean z0, $z2, $z3;

        r0 := @parameter0: char[];

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        i0 := @parameter3: int;

        if r0 == null goto label1;

        if i0 < 2 goto label1;

        if i0 <= 36 goto label2;

     label1:
        $r4 = new java.lang.NumberFormatException;

        specialinvoke $r4.<java.lang.NumberFormatException: void <init>()>();

        throw $r4;

     label2:
        if i5 != 0 goto label3;

        $r5 = new java.lang.NumberFormatException;

        specialinvoke $r5.<java.lang.NumberFormatException: void <init>(java.lang.String)>("chars length is 0");

        throw $r5;

     label3:
        $i1 = i4 + 0;

        $c2 = r0[$i1];

        $i6 = (int) $c2;

        if $i6 != 45 goto label4;

        $z3 = 1;

        $z2 = 1;

        goto label5;

     label4:
        $z3 = 0;

        $z2 = 0;

     label5:
        z0 = $z3;

        if $z2 == 0 goto label6;

        if 1 != i5 goto label6;

        $r6 = new java.lang.NumberFormatException;

        specialinvoke $r6.<java.lang.NumberFormatException: void <init>(java.lang.String)>("can\'t convert to an int");

        throw $r6;

     label6:
        if z0 != 1 goto label7;

        i4 = i4 + 1;

        $i8 = (int) -1;

        i5 = i5 + $i8;

     label7:
        $i3 = staticinvoke <org.apache.lucene.util.ArrayUtil: int parse(char[],int,int,int,boolean)>(r0, i4, i5, i0, z0);

        return $i3;
    }

    private static int parse(char[], int, int, int, boolean) throws java.lang.NumberFormatException
    {
        int i0, i1, i2, i3, $i4, $i6, $i7, i8, i9, i10, $i12;
        boolean z0;
        char $c5;
        java.lang.NumberFormatException $r5, $r6, $r7, $r8;
        char[] r1;

        r1 := @parameter0: char[];

        i3 := @parameter1: int;

        i2 := @parameter2: int;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        i1 = -2147483648 / i0;

        i9 = 0;

        i10 = 0;

     label1:
        if i10 >= i2 goto label5;

        $i4 = i10 + i3;

        $c5 = r1[$i4];

        $i6 = staticinvoke <java.lang.Character: int digit(char,int)>($c5, i0);

        $i12 = (int) -1;

        if $i6 != $i12 goto label2;

        $r5 = new java.lang.NumberFormatException;

        specialinvoke $r5.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Unable to parse");

        throw $r5;

     label2:
        if i1 <= i9 goto label3;

        $r6 = new java.lang.NumberFormatException;

        specialinvoke $r6.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Unable to parse");

        throw $r6;

     label3:
        $i7 = i9 * i0;

        i8 = $i7 - $i6;

        if i8 <= i9 goto label4;

        $r7 = new java.lang.NumberFormatException;

        specialinvoke $r7.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Unable to parse");

        throw $r7;

     label4:
        i9 = i8;

        i10 = i10 + 1;

        goto label1;

     label5:
        if z0 != 0 goto label6;

        i9 = neg i9;

        if i9 >= 0 goto label6;

        $r8 = new java.lang.NumberFormatException;

        specialinvoke $r8.<java.lang.NumberFormatException: void <init>(java.lang.String)>("Unable to parse");

        throw $r8;

     label6:
        return i9;
    }

    public static int oversize(int, int)
    {
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14;
        java.lang.String $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r3;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        if i0 >= 0 goto label01;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid array size ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label01:
        if i0 != 0 goto label02;

        return 0;

     label02:
        i14 = i0 >> 3;

        if i14 >= 3 goto label03;

        i14 = 3;

     label03:
        $i13 = i0 + i14;

        $i1 = $i13 + 7;

        if $i1 >= 0 goto label04;

        return 2147483647;

     label04:
        $z0 = <org.apache.lucene.util.Constants: boolean JRE_IS_64BIT>;

        if $z0 == 0 goto label09;

        tableswitch(i2)
        {
            case 1: goto label07;
            case 2: goto label06;
            case 3: goto label08;
            case 4: goto label05;
            case 5: goto label08;
            case 6: goto label08;
            case 7: goto label08;
            case 8: goto label08;
            default: goto label08;
        };

     label05:
        $i7 = $i13 + 1;

        $i8 = $i7 & 2147483646;

        return $i8;

     label06:
        $i9 = $i13 + 3;

        $i10 = $i9 & 2147483644;

        return $i10;

     label07:
        $i11 = $i13 + 7;

        $i12 = $i11 & 2147483640;

        return $i12;

     label08:
        return $i13;

     label09:
        tableswitch(i2)
        {
            case 1: goto label11;
            case 2: goto label10;
            case 3: goto label12;
            case 4: goto label12;
            case 5: goto label12;
            case 6: goto label12;
            case 7: goto label12;
            case 8: goto label12;
            default: goto label12;
        };

     label10:
        $i3 = $i13 + 1;

        $i4 = $i3 & 2147483646;

        return $i4;

     label11:
        $i5 = $i13 + 3;

        $i6 = $i5 & 2147483644;

        return $i6;

     label12:
        return $i13;
    }

    public static int getShrinkSize(int, int, int)
    {
        int i0, i1, $i2, i3, $i4;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(i0, i1);

        $i4 = i3 / 2;

        if $i2 >= $i4 goto label1;

        return $i2;

     label1:
        return i3;
    }

    public static short[] grow(short[], int)
    {
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        short[] r0, r1;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        if $i1 >= i0 goto label2;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(i0, 2);

        r1 = newarray (short)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i3);

        return r1;

     label2:
        return r0;
    }

    public static short[] grow(short[])
    {
        int $i0, $i1;
        short[] r0, $r1;

        r0 := @parameter0: short[];

        $i0 = lengthof r0;

        $i1 = 1 + $i0;

        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: short[] grow(short[],int)>(r0, $i1);

        return $r1;
    }

    public static float[] grow(float[], int)
    {
        float[] r0, r1;
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: float[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        if $i1 >= i0 goto label2;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(i0, 4);

        r1 = newarray (float)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i3);

        return r1;

     label2:
        return r0;
    }

    public static float[] grow(float[])
    {
        int $i0, $i1;
        float[] r0, $r1;

        r0 := @parameter0: float[];

        $i0 = lengthof r0;

        $i1 = 1 + $i0;

        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: float[] grow(float[],int)>(r0, $i1);

        return $r1;
    }

    public static double[] grow(double[], int)
    {
        double[] r0, r1;
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        if $i1 >= i0 goto label2;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(i0, 8);

        r1 = newarray (double)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i3);

        return r1;

     label2:
        return r0;
    }

    public static double[] grow(double[])
    {
        double[] r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: double[];

        $i0 = lengthof r0;

        $i1 = 1 + $i0;

        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: double[] grow(double[],int)>(r0, $i1);

        return $r1;
    }

    public static short[] shrink(short[], int)
    {
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        short[] r0, r1;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: short[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int getShrinkSize(int,int,int)>($i1, i0, 2);

        $i3 = lengthof r0;

        if $i2 == $i3 goto label2;

        r1 = newarray (short)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);

        return r1;

     label2:
        return r0;
    }

    public static int[] grow(int[], int)
    {
        java.lang.AssertionError $r2;
        int[] r0, r1;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        if $i1 >= i0 goto label2;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(i0, 4);

        r1 = newarray (int)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i3);

        return r1;

     label2:
        return r0;
    }

    public static int[] grow(int[])
    {
        int[] r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: int[];

        $i0 = lengthof r0;

        $i1 = 1 + $i0;

        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[],int)>(r0, $i1);

        return $r1;
    }

    public static int[] shrink(int[], int)
    {
        java.lang.AssertionError $r2;
        int[] r0, r1;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int getShrinkSize(int,int,int)>($i1, i0, 4);

        $i3 = lengthof r0;

        if $i2 == $i3 goto label2;

        r1 = newarray (int)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);

        return r1;

     label2:
        return r0;
    }

    public static long[] grow(long[], int)
    {
        java.lang.AssertionError $r2;
        long[] r0, r1;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        if $i1 >= i0 goto label2;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(i0, 8);

        r1 = newarray (long)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i3);

        return r1;

     label2:
        return r0;
    }

    public static long[] grow(long[])
    {
        long[] r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: long[];

        $i0 = lengthof r0;

        $i1 = 1 + $i0;

        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: long[] grow(long[],int)>(r0, $i1);

        return $r1;
    }

    public static long[] shrink(long[], int)
    {
        java.lang.AssertionError $r2;
        long[] r0, r1;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: long[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int getShrinkSize(int,int,int)>($i1, i0, 8);

        $i3 = lengthof r0;

        if $i2 == $i3 goto label2;

        r1 = newarray (long)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);

        return r1;

     label2:
        return r0;
    }

    public static byte[] grow(byte[], int)
    {
        byte[] r0, r1;
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        if $i1 >= i0 goto label2;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(i0, 1);

        r1 = newarray (byte)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i3);

        return r1;

     label2:
        return r0;
    }

    public static byte[] grow(byte[])
    {
        byte[] r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $i1 = 1 + $i0;

        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: byte[] grow(byte[],int)>(r0, $i1);

        return $r1;
    }

    public static byte[] shrink(byte[], int)
    {
        byte[] r0, r1;
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int getShrinkSize(int,int,int)>($i1, i0, 1);

        $i3 = lengthof r0;

        if $i2 == $i3 goto label2;

        r1 = newarray (byte)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);

        return r1;

     label2:
        return r0;
    }

    public static boolean[] grow(boolean[], int)
    {
        boolean[] r0, r1;
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: boolean[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        if $i1 >= i0 goto label2;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(i0, 1);

        r1 = newarray (boolean)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i3);

        return r1;

     label2:
        return r0;
    }

    public static boolean[] grow(boolean[])
    {
        boolean[] r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: boolean[];

        $i0 = lengthof r0;

        $i1 = 1 + $i0;

        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: boolean[] grow(boolean[],int)>(r0, $i1);

        return $r1;
    }

    public static boolean[] shrink(boolean[], int)
    {
        boolean[] r0, r1;
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: boolean[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int getShrinkSize(int,int,int)>($i1, i0, 1);

        $i3 = lengthof r0;

        if $i2 == $i3 goto label2;

        r1 = newarray (boolean)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);

        return r1;

     label2:
        return r0;
    }

    public static char[] grow(char[], int)
    {
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3;
        char[] r0, r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        if $i1 >= i0 goto label2;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(i0, 2);

        r1 = newarray (char)[$i2];

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i3);

        return r1;

     label2:
        return r0;
    }

    public static char[] grow(char[])
    {
        int $i0, $i1;
        char[] r0, $r1;

        r0 := @parameter0: char[];

        $i0 = lengthof r0;

        $i1 = 1 + $i0;

        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: char[] grow(char[],int)>(r0, $i1);

        return $r1;
    }

    public static char[] shrink(char[], int)
    {
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3;
        char[] r0, r1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        $i2 = staticinvoke <org.apache.lucene.util.ArrayUtil: int getShrinkSize(int,int,int)>($i1, i0, 2);

        $i3 = lengthof r0;

        if $i2 == $i3 goto label2;

        r1 = newarray (char)[$i2];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i2);

        return r1;

     label2:
        return r0;
    }

    public static int[][] grow(int[][], int)
    {
        int[][] r0, r1;
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: int[][];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        if $i1 >= i0 goto label2;

        $i2 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i3 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(i0, $i2);

        r1 = newarray (int[])[$i3];

        $i4 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i4);

        return r1;

     label2:
        return r0;
    }

    public static int[][] grow(int[][])
    {
        int[][] r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: int[][];

        $i0 = lengthof r0;

        $i1 = 1 + $i0;

        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[][] grow(int[][],int)>(r0, $i1);

        return $r1;
    }

    public static int[][] shrink(int[][], int)
    {
        int[][] r0, r1;
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: int[][];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i2 = lengthof r0;

        $i1 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i3 = staticinvoke <org.apache.lucene.util.ArrayUtil: int getShrinkSize(int,int,int)>($i2, i0, $i1);

        $i4 = lengthof r0;

        if $i3 == $i4 goto label2;

        r1 = newarray (int[])[$i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i3);

        return r1;

     label2:
        return r0;
    }

    public static float[][] grow(float[][], int)
    {
        float[][] r0, r1;
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: float[][];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i1 = lengthof r0;

        if $i1 >= i0 goto label2;

        $i2 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i3 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>(i0, $i2);

        r1 = newarray (float[])[$i3];

        $i4 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i4);

        return r1;

     label2:
        return r0;
    }

    public static float[][] grow(float[][])
    {
        float[][] r0, $r1;
        int $i0, $i1;

        r0 := @parameter0: float[][];

        $i0 = lengthof r0;

        $i1 = 1 + $i0;

        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: float[][] grow(float[][],int)>(r0, $i1);

        return $r1;
    }

    public static float[][] shrink(float[][], int)
    {
        float[][] r0, r1;
        java.lang.AssertionError $r2;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @parameter0: float[][];

        i0 := @parameter1: int;

        $z0 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("size must be positive (got ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): likely integer overflow?");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r2;

     label1:
        $i2 = lengthof r0;

        $i1 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i3 = staticinvoke <org.apache.lucene.util.ArrayUtil: int getShrinkSize(int,int,int)>($i2, i0, $i1);

        $i4 = lengthof r0;

        if $i3 == $i4 goto label2;

        r1 = newarray (float[])[$i3];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 0, $i3);

        return r1;

     label2:
        return r0;
    }

    public static int hashCode(char[], int, int)
    {
        char $c2;
        int i0, i1, $i3, i4, i5, $i6, $i8;
        char[] r0;

        r0 := @parameter0: char[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i4 = 0;

        i5 = i0 - 1;

     label1:
        if i5 < i1 goto label2;

        $i3 = i4 * 31;

        $c2 = r0[i5];

        $i6 = (int) $c2;

        i4 = $i3 + $i6;

        $i8 = (int) -1;

        i5 = i5 + $i8;

        goto label1;

     label2:
        return i4;
    }

    public static int hashCode(byte[], int, int)
    {
        byte[] r0;
        byte $b2;
        int i0, i1, $i3, i4, i5, $i6, $i8;

        r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        i4 = 0;

        i5 = i0 - 1;

     label1:
        if i5 < i1 goto label2;

        $i3 = i4 * 31;

        $b2 = r0[i5];

        $i6 = (int) $b2;

        i4 = $i3 + $i6;

        $i8 = (int) -1;

        i5 = i5 + $i8;

        goto label1;

     label2:
        return i4;
    }

    public static boolean equals(char[], int, char[], int, int)
    {
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, i11, $i12, $i13;
        char $c9, $c10;
        char[] r0, r1;

        r0 := @parameter0: char[];

        i0 := @parameter1: int;

        r1 := @parameter2: char[];

        i4 := @parameter3: int;

        i1 := @parameter4: int;

        $i3 = i0 + i1;

        $i2 = lengthof r0;

        if $i3 > $i2 goto label4;

        $i6 = i4 + i1;

        $i5 = lengthof r1;

        if $i6 > $i5 goto label4;

        i11 = 0;

     label1:
        if i11 >= i1 goto label3;

        $i7 = i0 + i11;

        $c10 = r0[$i7];

        $i8 = i4 + i11;

        $c9 = r1[$i8];

        $i12 = (int) $c10;

        $i13 = (int) $c9;

        if $i12 == $i13 goto label2;

        return 0;

     label2:
        i11 = i11 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public static boolean equals(byte[], int, byte[], int, int)
    {
        byte[] r0, r1;
        byte $b9, $b10;
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, i11, $i12, $i13;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        i4 := @parameter3: int;

        i1 := @parameter4: int;

        $i3 = i0 + i1;

        $i2 = lengthof r0;

        if $i3 > $i2 goto label4;

        $i6 = i4 + i1;

        $i5 = lengthof r1;

        if $i6 > $i5 goto label4;

        i11 = 0;

     label1:
        if i11 >= i1 goto label3;

        $i7 = i0 + i11;

        $b10 = r0[$i7];

        $i8 = i4 + i11;

        $b9 = r1[$i8];

        $i12 = (int) $b10;

        $i13 = (int) $b9;

        if $i12 == $i13 goto label2;

        return 0;

     label2:
        i11 = i11 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public static boolean equals(int[], int, int[], int, int)
    {
        int[] r0, r1;
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, i11;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        i4 := @parameter3: int;

        i1 := @parameter4: int;

        $i3 = i0 + i1;

        $i2 = lengthof r0;

        if $i3 > $i2 goto label4;

        $i6 = i4 + i1;

        $i5 = lengthof r1;

        if $i6 > $i5 goto label4;

        i11 = 0;

     label1:
        if i11 >= i1 goto label3;

        $i7 = i0 + i11;

        $i10 = r0[$i7];

        $i8 = i4 + i11;

        $i9 = r1[$i8];

        if $i10 == $i9 goto label2;

        return 0;

     label2:
        i11 = i11 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public static int[] toIntArray(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        java.lang.AssertionError $r3;
        java.lang.Integer $r5;
        int[] r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        r1 = newarray (int)[$i0];

        i4 = 0;

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Integer) $r4;

        $i2 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        $i3 = i4;

        i4 = i4 + 1;

        r1[$i3] = $i2;

        goto label1;

     label2:
        $z1 = <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $i1 = lengthof r1;

        if i4 == $i1 goto label3;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        return r1;
    }

    private static org.apache.lucene.util.SorterTemplate getSorter(java.lang.Object[], java.util.Comparator)
    {
        java.lang.Object[] r1;
        java.util.Comparator r2;
        org.apache.lucene.util.ArrayUtil$1 $r0;

        r1 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.util.Comparator;

        $r0 = new org.apache.lucene.util.ArrayUtil$1;

        specialinvoke $r0.<org.apache.lucene.util.ArrayUtil$1: void <init>(java.lang.Object[],java.util.Comparator)>(r1, r2);

        return $r0;
    }

    private static org.apache.lucene.util.SorterTemplate getSorter(java.lang.Comparable[])
    {
        java.lang.Comparable[] r1;
        org.apache.lucene.util.ArrayUtil$2 $r0;

        r1 := @parameter0: java.lang.Comparable[];

        $r0 = new org.apache.lucene.util.ArrayUtil$2;

        specialinvoke $r0.<org.apache.lucene.util.ArrayUtil$2: void <init>(java.lang.Comparable[])>(r1);

        return $r0;
    }

    private static org.apache.lucene.util.SorterTemplate getMergeSorter(java.lang.Object[], java.util.Comparator)
    {
        java.lang.Object[] r0;
        int $i0;
        org.apache.lucene.util.ArrayUtil$3 $r1;
        org.apache.lucene.util.SorterTemplate $r3;
        java.util.Comparator r2;

        r0 := @parameter0: java.lang.Object[];

        r2 := @parameter1: java.util.Comparator;

        $i0 = lengthof r0;

        if $i0 >= 1500 goto label1;

        $r3 = staticinvoke <org.apache.lucene.util.ArrayUtil: org.apache.lucene.util.SorterTemplate getSorter(java.lang.Object[],java.util.Comparator)>(r0, r2);

        return $r3;

     label1:
        $r1 = new org.apache.lucene.util.ArrayUtil$3;

        specialinvoke $r1.<org.apache.lucene.util.ArrayUtil$3: void <init>(java.lang.Object[],float,java.util.Comparator)>(r0, 0.01F, r2);

        return $r1;
    }

    private static org.apache.lucene.util.SorterTemplate getMergeSorter(java.lang.Comparable[])
    {
        int $i0;
        org.apache.lucene.util.ArrayUtil$4 $r1;
        org.apache.lucene.util.SorterTemplate $r2;
        java.lang.Comparable[] r0;

        r0 := @parameter0: java.lang.Comparable[];

        $i0 = lengthof r0;

        if $i0 >= 1500 goto label1;

        $r2 = staticinvoke <org.apache.lucene.util.ArrayUtil: org.apache.lucene.util.SorterTemplate getSorter(java.lang.Comparable[])>(r0);

        return $r2;

     label1:
        $r1 = new org.apache.lucene.util.ArrayUtil$4;

        specialinvoke $r1.<org.apache.lucene.util.ArrayUtil$4: void <init>(java.lang.Comparable[],float)>(r0, 0.01F);

        return $r1;
    }

    public static void quickSort(java.lang.Object[], int, int, java.util.Comparator)
    {
        java.lang.Object[] r0;
        int i0, i1, $i2, $i3;
        org.apache.lucene.util.SorterTemplate $r2;
        java.util.Comparator r1;

        r0 := @parameter0: java.lang.Object[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.util.Comparator;

        $i2 = i0 - i1;

        if $i2 > 1 goto label1;

        return;

     label1:
        $r2 = staticinvoke <org.apache.lucene.util.ArrayUtil: org.apache.lucene.util.SorterTemplate getSorter(java.lang.Object[],java.util.Comparator)>(r0, r1);

        $i3 = i0 - 1;

        virtualinvoke $r2.<org.apache.lucene.util.SorterTemplate: void quickSort(int,int)>(i1, $i3);

        return;
    }

    public static void quickSort(java.lang.Object[], java.util.Comparator)
    {
        int $i0;
        java.lang.Object[] r0;
        java.util.Comparator r1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.util.Comparator;

        $i0 = lengthof r0;

        staticinvoke <org.apache.lucene.util.ArrayUtil: void quickSort(java.lang.Object[],int,int,java.util.Comparator)>(r0, 0, $i0, r1);

        return;
    }

    public static void quickSort(java.lang.Comparable[], int, int)
    {
        int i0, i1, $i2, $i3;
        org.apache.lucene.util.SorterTemplate $r1;
        java.lang.Comparable[] r0;

        r0 := @parameter0: java.lang.Comparable[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $i2 = i0 - i1;

        if $i2 > 1 goto label1;

        return;

     label1:
        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: org.apache.lucene.util.SorterTemplate getSorter(java.lang.Comparable[])>(r0);

        $i3 = i0 - 1;

        virtualinvoke $r1.<org.apache.lucene.util.SorterTemplate: void quickSort(int,int)>(i1, $i3);

        return;
    }

    public static void quickSort(java.lang.Comparable[])
    {
        int $i0;
        java.lang.Comparable[] r0;

        r0 := @parameter0: java.lang.Comparable[];

        $i0 = lengthof r0;

        staticinvoke <org.apache.lucene.util.ArrayUtil: void quickSort(java.lang.Comparable[],int,int)>(r0, 0, $i0);

        return;
    }

    public static void mergeSort(java.lang.Object[], int, int, java.util.Comparator)
    {
        java.lang.Object[] r0;
        int i0, i1, $i2, $i3;
        org.apache.lucene.util.SorterTemplate $r2;
        java.util.Comparator r1;

        r0 := @parameter0: java.lang.Object[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.util.Comparator;

        $i2 = i0 - i1;

        if $i2 > 1 goto label1;

        return;

     label1:
        $r2 = staticinvoke <org.apache.lucene.util.ArrayUtil: org.apache.lucene.util.SorterTemplate getMergeSorter(java.lang.Object[],java.util.Comparator)>(r0, r1);

        $i3 = i0 - 1;

        virtualinvoke $r2.<org.apache.lucene.util.SorterTemplate: void mergeSort(int,int)>(i1, $i3);

        return;
    }

    public static void mergeSort(java.lang.Object[], java.util.Comparator)
    {
        int $i0;
        java.lang.Object[] r0;
        java.util.Comparator r1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.util.Comparator;

        $i0 = lengthof r0;

        staticinvoke <org.apache.lucene.util.ArrayUtil: void mergeSort(java.lang.Object[],int,int,java.util.Comparator)>(r0, 0, $i0, r1);

        return;
    }

    public static void mergeSort(java.lang.Comparable[], int, int)
    {
        int i0, i1, $i2, $i3;
        org.apache.lucene.util.SorterTemplate $r1;
        java.lang.Comparable[] r0;

        r0 := @parameter0: java.lang.Comparable[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $i2 = i0 - i1;

        if $i2 > 1 goto label1;

        return;

     label1:
        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: org.apache.lucene.util.SorterTemplate getMergeSorter(java.lang.Comparable[])>(r0);

        $i3 = i0 - 1;

        virtualinvoke $r1.<org.apache.lucene.util.SorterTemplate: void mergeSort(int,int)>(i1, $i3);

        return;
    }

    public static void mergeSort(java.lang.Comparable[])
    {
        int $i0;
        java.lang.Comparable[] r0;

        r0 := @parameter0: java.lang.Comparable[];

        $i0 = lengthof r0;

        staticinvoke <org.apache.lucene.util.ArrayUtil: void mergeSort(java.lang.Comparable[],int,int)>(r0, 0, $i0);

        return;
    }

    public static void timSort(java.lang.Object[], int, int, java.util.Comparator)
    {
        java.lang.Object[] r0;
        int i0, i1, $i2, $i3;
        org.apache.lucene.util.SorterTemplate $r2;
        java.util.Comparator r1;

        r0 := @parameter0: java.lang.Object[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.util.Comparator;

        $i2 = i0 - i1;

        if $i2 > 1 goto label1;

        return;

     label1:
        $r2 = staticinvoke <org.apache.lucene.util.ArrayUtil: org.apache.lucene.util.SorterTemplate getMergeSorter(java.lang.Object[],java.util.Comparator)>(r0, r1);

        $i3 = i0 - 1;

        virtualinvoke $r2.<org.apache.lucene.util.SorterTemplate: void timSort(int,int)>(i1, $i3);

        return;
    }

    public static void timSort(java.lang.Object[], java.util.Comparator)
    {
        int $i0;
        java.lang.Object[] r0;
        java.util.Comparator r1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.util.Comparator;

        $i0 = lengthof r0;

        staticinvoke <org.apache.lucene.util.ArrayUtil: void timSort(java.lang.Object[],int,int,java.util.Comparator)>(r0, 0, $i0, r1);

        return;
    }

    public static void timSort(java.lang.Comparable[], int, int)
    {
        int i0, i1, $i2, $i3;
        org.apache.lucene.util.SorterTemplate $r1;
        java.lang.Comparable[] r0;

        r0 := @parameter0: java.lang.Comparable[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $i2 = i0 - i1;

        if $i2 > 1 goto label1;

        return;

     label1:
        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: org.apache.lucene.util.SorterTemplate getMergeSorter(java.lang.Comparable[])>(r0);

        $i3 = i0 - 1;

        virtualinvoke $r1.<org.apache.lucene.util.SorterTemplate: void timSort(int,int)>(i1, $i3);

        return;
    }

    public static void timSort(java.lang.Comparable[])
    {
        int $i0;
        java.lang.Comparable[] r0;

        r0 := @parameter0: java.lang.Comparable[];

        $i0 = lengthof r0;

        staticinvoke <org.apache.lucene.util.ArrayUtil: void timSort(java.lang.Comparable[],int,int)>(r0, 0, $i0);

        return;
    }

    public static void insertionSort(java.lang.Object[], int, int, java.util.Comparator)
    {
        java.lang.Object[] r0;
        int i0, i1, $i2, $i3;
        org.apache.lucene.util.SorterTemplate $r2;
        java.util.Comparator r1;

        r0 := @parameter0: java.lang.Object[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.util.Comparator;

        $i2 = i0 - i1;

        if $i2 > 1 goto label1;

        return;

     label1:
        $r2 = staticinvoke <org.apache.lucene.util.ArrayUtil: org.apache.lucene.util.SorterTemplate getSorter(java.lang.Object[],java.util.Comparator)>(r0, r1);

        $i3 = i0 - 1;

        virtualinvoke $r2.<org.apache.lucene.util.SorterTemplate: void insertionSort(int,int)>(i1, $i3);

        return;
    }

    public static void insertionSort(java.lang.Object[], java.util.Comparator)
    {
        int $i0;
        java.lang.Object[] r0;
        java.util.Comparator r1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.util.Comparator;

        $i0 = lengthof r0;

        staticinvoke <org.apache.lucene.util.ArrayUtil: void insertionSort(java.lang.Object[],int,int,java.util.Comparator)>(r0, 0, $i0, r1);

        return;
    }

    public static void insertionSort(java.lang.Comparable[], int, int)
    {
        int i0, i1, $i2, $i3;
        org.apache.lucene.util.SorterTemplate $r1;
        java.lang.Comparable[] r0;

        r0 := @parameter0: java.lang.Comparable[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $i2 = i0 - i1;

        if $i2 > 1 goto label1;

        return;

     label1:
        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: org.apache.lucene.util.SorterTemplate getSorter(java.lang.Comparable[])>(r0);

        $i3 = i0 - 1;

        virtualinvoke $r1.<org.apache.lucene.util.SorterTemplate: void insertionSort(int,int)>(i1, $i3);

        return;
    }

    public static void insertionSort(java.lang.Comparable[])
    {
        int $i0;
        java.lang.Comparable[] r0;

        r0 := @parameter0: java.lang.Comparable[];

        $i0 = lengthof r0;

        staticinvoke <org.apache.lucene.util.ArrayUtil: void insertionSort(java.lang.Comparable[],int,int)>(r0, 0, $i0);

        return;
    }

    public static void binarySort(java.lang.Object[], int, int, java.util.Comparator)
    {
        java.lang.Object[] r0;
        int i0, i1, $i2, $i3;
        org.apache.lucene.util.SorterTemplate $r2;
        java.util.Comparator r1;

        r0 := @parameter0: java.lang.Object[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r1 := @parameter3: java.util.Comparator;

        $i2 = i0 - i1;

        if $i2 > 1 goto label1;

        return;

     label1:
        $r2 = staticinvoke <org.apache.lucene.util.ArrayUtil: org.apache.lucene.util.SorterTemplate getSorter(java.lang.Object[],java.util.Comparator)>(r0, r1);

        $i3 = i0 - 1;

        virtualinvoke $r2.<org.apache.lucene.util.SorterTemplate: void binarySort(int,int)>(i1, $i3);

        return;
    }

    public static void binarySort(java.lang.Object[], java.util.Comparator)
    {
        int $i0;
        java.lang.Object[] r0;
        java.util.Comparator r1;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.util.Comparator;

        $i0 = lengthof r0;

        staticinvoke <org.apache.lucene.util.ArrayUtil: void binarySort(java.lang.Object[],int,int,java.util.Comparator)>(r0, 0, $i0, r1);

        return;
    }

    public static void binarySort(java.lang.Comparable[], int, int)
    {
        int i0, i1, $i2, $i3;
        org.apache.lucene.util.SorterTemplate $r1;
        java.lang.Comparable[] r0;

        r0 := @parameter0: java.lang.Comparable[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $i2 = i0 - i1;

        if $i2 > 1 goto label1;

        return;

     label1:
        $r1 = staticinvoke <org.apache.lucene.util.ArrayUtil: org.apache.lucene.util.SorterTemplate getSorter(java.lang.Comparable[])>(r0);

        $i3 = i0 - 1;

        virtualinvoke $r1.<org.apache.lucene.util.SorterTemplate: void binarySort(int,int)>(i1, $i3);

        return;
    }

    public static void binarySort(java.lang.Comparable[])
    {
        int $i0;
        java.lang.Comparable[] r0;

        r0 := @parameter0: java.lang.Comparable[];

        $i0 = lengthof r0;

        staticinvoke <org.apache.lucene.util.ArrayUtil: void binarySort(java.lang.Comparable[],int,int)>(r0, 0, $i0);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.util.ArrayUtil: int MERGE_EXTRA_MEMORY_THRESHOLD> = 1500;

        <org.apache.lucene.util.ArrayUtil: float MERGE_OVERHEAD_RATIO> = 0.01F;

        $r0 = class "Lorg/apache/lucene/util/ArrayUtil;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.ArrayUtil: boolean $assertionsDisabled> = $z1;

        return;
    }
}
