public class com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser extends com.hp.hpl.jena.rdf.arp.impl.XMLHandler
{
    private org.apache.xerces.parsers.SAXParser saxParser;
    private java.lang.String readerXMLEncoding;
    private java.lang.String xmlEncoding;

    protected void <init>(org.apache.xerces.parsers.SAXParser)
    {
        org.apache.xerces.parsers.SAXParser r1;
        org.xml.sax.SAXException $r2;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser r0;
        java.lang.RuntimeException $r3;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser;

        r1 := @parameter0: org.apache.xerces.parsers.SAXParser;

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.XMLHandler: void <init>()>();

        r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: java.lang.String readerXMLEncoding> = null;

        r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: java.lang.String xmlEncoding> = null;

        r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: org.apache.xerces.parsers.SAXParser saxParser> = r1;

     label1:
        staticinvoke <com.hp.hpl.jena.rdf.arp.SAX2RDF: void installHandlers(org.xml.sax.XMLReader,com.hp.hpl.jena.rdf.arp.impl.XMLHandler)>(r1, r0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Supposedly impossible:", $r2);

        throw $r3;

     label4:
        return;

        catch org.xml.sax.SAXException from label1 to label2 with label3;
    }

    public org.apache.xerces.parsers.SAXParser getSAXParser()
    {
        org.apache.xerces.parsers.SAXParser $r1;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser r0;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser;

        $r1 = r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: org.apache.xerces.parsers.SAXParser saxParser>;

        return $r1;
    }

    public static com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser create()
    {
        org.apache.xerces.parsers.StandardParserConfiguration $r0;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck $r1;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser $r2;

        $r0 = new org.apache.xerces.parsers.StandardParserConfiguration;

        specialinvoke $r0.<org.apache.xerces.parsers.StandardParserConfiguration: void <init>()>();

        $r1 = new com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck;

        specialinvoke $r1.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck: void <init>(org.apache.xerces.parsers.StandardParserConfiguration)>($r0);

        $r2 = new com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser;

        specialinvoke $r2.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void <init>(org.apache.xerces.parsers.SAXParser)>($r1);

        virtualinvoke $r1.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser$SAXParserWithEncodingCheck: void setRdfXmlParser(com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser)>($r2);

        return $r2;
    }

    public void parse(org.xml.sax.InputSource) throws java.io.IOException, org.xml.sax.SAXException
    {
        org.xml.sax.InputSource r1;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser r0;
        java.lang.String $r2;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser;

        r1 := @parameter0: org.xml.sax.InputSource;

        $r2 = virtualinvoke r1.<org.xml.sax.InputSource: java.lang.String getSystemId()>();

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void parse(org.xml.sax.InputSource,java.lang.String)>(r1, $r2);

        return;
    }

    public synchronized void parse(org.xml.sax.InputSource, java.lang.String) throws java.io.IOException, org.xml.sax.SAXException
    {
        java.lang.Throwable $r6;
        org.xml.sax.InputSource r4;
        org.apache.xerces.parsers.SAXParser $r2, $r3, $r5;
        java.io.IOException $r9;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser r0;
        com.hp.hpl.jena.rdf.arp.FatalParsingErrorException $r7;
        com.hp.hpl.jena.rdf.arp.impl.WrappedException $r8;
        java.lang.String r1;
        java.io.UTFDataFormatException $r10;

        r0 := @this: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser;

        r4 := @parameter0: org.xml.sax.InputSource;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void initParse(java.lang.String,java.lang.String)>(r1, "");

        $r2 = r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: org.apache.xerces.parsers.SAXParser saxParser>;

        staticinvoke <com.hp.hpl.jena.rdf.arp.SAX2RDF: void installHandlers(org.xml.sax.XMLReader,com.hp.hpl.jena.rdf.arp.impl.XMLHandler)>($r2, r0);

        $r3 = r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: org.apache.xerces.parsers.SAXParser saxParser>;

        virtualinvoke $r3.<org.apache.xerces.parsers.SAXParser: void reset()>();

        specialinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void initEncodingChecks(org.xml.sax.InputSource)>(r4);

     label01:
        $r5 = r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: org.apache.xerces.parsers.SAXParser saxParser>;

        virtualinvoke $r5.<org.apache.xerces.parsers.SAXParser: void parse(org.xml.sax.InputSource)>(r4);

     label02:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void afterParse()>();

        goto label13;

     label03:
        $r10 := @caughtexception;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void generalError(int,java.lang.Exception)>(212, $r10);

     label04:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void afterParse()>();

        goto label13;

     label05:
        $r9 := @caughtexception;

        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void generalError(int,java.lang.Exception)>(213, $r9);

     label06:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void afterParse()>();

        goto label13;

     label07:
        $r8 := @caughtexception;

        virtualinvoke $r8.<com.hp.hpl.jena.rdf.arp.impl.WrappedException: void throwMe()>();

     label08:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void afterParse()>();

        goto label13;

     label09:
        $r7 := @caughtexception;

     label10:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void afterParse()>();

        goto label13;

     label11:
        $r6 := @caughtexception;

     label12:
        virtualinvoke r0.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void afterParse()>();

        throw $r6;

     label13:
        return;

        catch java.io.UTFDataFormatException from label01 to label02 with label03;
        catch java.io.IOException from label01 to label02 with label05;
        catch com.hp.hpl.jena.rdf.arp.impl.WrappedException from label01 to label02 with label07;
        catch com.hp.hpl.jena.rdf.arp.FatalParsingErrorException from label01 to label02 with label09;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private void initEncodingChecks(org.xml.sax.InputSource)
    {
        org.xml.sax.InputSource r0;
        com.hp.hpl.jena.util.CharEncoding $r5;
        java.io.Reader $r1;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser r2;
        java.io.InputStreamReader $r3;
        java.lang.String $r4, $r6;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser;

        r0 := @parameter0: org.xml.sax.InputSource;

        $r1 = virtualinvoke r0.<org.xml.sax.InputSource: java.io.Reader getCharacterStream()>();

        r2.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: java.lang.String readerXMLEncoding> = null;

        r2.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: boolean encodingProblems> = 0;

        if $r1 == null goto label1;

        $z0 = $r1 instanceof java.io.InputStreamReader;

        if $z0 == 0 goto label1;

        $r3 = (java.io.InputStreamReader) $r1;

        $r4 = virtualinvoke $r3.<java.io.InputStreamReader: java.lang.String getEncoding()>();

        $r5 = staticinvoke <com.hp.hpl.jena.util.CharEncoding: com.hp.hpl.jena.util.CharEncoding create(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<com.hp.hpl.jena.util.CharEncoding: java.lang.String name()>();

        r2.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: java.lang.String readerXMLEncoding> = $r6;

     label1:
        return;
    }

    protected void setEncoding(java.lang.String) throws org.xml.sax.SAXParseException
    {
        com.hp.hpl.jena.util.CharEncoding $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r14, $r15, $r17, $r18, $r19, $r20;
        short $s0;
        java.lang.String r0, $r2, $r4, $r11, $r12, $r13, $r16, $r21, $r22, $r23, $r24, $r25;
        com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser r3;

        r3 := @this: com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.hp.hpl.jena.util.CharEncoding: com.hp.hpl.jena.util.CharEncoding create(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.util.CharEncoding: java.lang.String name()>();

        $r4 = r3.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: java.lang.String xmlEncoding>;

        if $r4 != null goto label7;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF");

        if $z0 == 0 goto label1;

        $r22 = r3.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: java.lang.String readerXMLEncoding>;

        if $r22 == null goto label1;

        $r23 = r3.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: java.lang.String readerXMLEncoding>;

        $z5 = virtualinvoke $r23.<java.lang.String: boolean startsWith(java.lang.String)>("UTF");

        if $z5 == 0 goto label1;

        $r24 = r3.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: java.lang.String readerXMLEncoding>;

        r3.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: java.lang.String xmlEncoding> = $r24;

        return;

     label1:
        r3.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: java.lang.String xmlEncoding> = $r2;

        $r25 = r3.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: java.lang.String readerXMLEncoding>;

        if $r25 == null goto label2;

        $r13 = r3.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: java.lang.String readerXMLEncoding>;

        $z4 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z4 != 0 goto label2;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encoding on InputStreamReader or FileReader does not match that of XML document. Use FileInputStream. [");

        $r16 = r3.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: java.lang.String readerXMLEncoding>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" != ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>(null, 129, $r21);

        r3.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: boolean encodingProblems> = 1;

     label2:
        $z6 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("UTF");

        if $z6 == 0 goto label3;

        return;

     label3:
        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.util.CharEncoding: boolean isIANA()>();

        if $z1 != 0 goto label6;

        $z3 = virtualinvoke $r1.<com.hp.hpl.jena.util.CharEncoding: boolean isInNIO()>();

        if $z3 == 0 goto label4;

        $s0 = 133;

        goto label5;

     label4:
        $s0 = 132;

     label5:
        $r12 = virtualinvoke $r1.<com.hp.hpl.jena.util.CharEncoding: java.lang.String warningMessage()>();

        virtualinvoke r3.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>(null, $s0, $r12);

        goto label7;

     label6:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z2 != 0 goto label7;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The encoding \"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is not the canonical name at IANA, suggest \"");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" would give more interoperability.");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r3.<com.hp.hpl.jena.rdf.arp.impl.RDFXMLParser: void warning(com.hp.hpl.jena.rdf.arp.impl.Taint,int,java.lang.String)>(null, 134, $r11);

     label7:
        return;
    }
}
