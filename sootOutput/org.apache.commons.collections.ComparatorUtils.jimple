public class org.apache.commons.collections.ComparatorUtils extends java.lang.Object
{
    public static final java.util.Comparator NATURAL_COMPARATOR;

    public void <init>()
    {
        org.apache.commons.collections.ComparatorUtils r0;

        r0 := @this: org.apache.commons.collections.ComparatorUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.Comparator naturalComparator()
    {
        java.util.Comparator $r0;

        $r0 = <org.apache.commons.collections.ComparatorUtils: java.util.Comparator NATURAL_COMPARATOR>;

        return $r0;
    }

    public static java.util.Comparator chainedComparator(java.util.Comparator, java.util.Comparator)
    {
        java.util.Comparator r1, r2, $r3;
        java.util.Comparator[] $r0;

        r1 := @parameter0: java.util.Comparator;

        r2 := @parameter1: java.util.Comparator;

        $r0 = newarray (java.util.Comparator)[2];

        $r0[0] = r1;

        $r0[1] = r2;

        $r3 = staticinvoke <org.apache.commons.collections.ComparatorUtils: java.util.Comparator chainedComparator(java.util.Comparator[])>($r0);

        return $r3;
    }

    public static java.util.Comparator chainedComparator(java.util.Comparator[])
    {
        org.apache.commons.collections.comparators.ComparatorChain $r0;
        int $i0, i1;
        java.util.Comparator $r2, $r3;
        java.lang.NullPointerException $r4;
        java.util.Comparator[] r1;

        r1 := @parameter0: java.util.Comparator[];

        $r0 = new org.apache.commons.collections.comparators.ComparatorChain;

        specialinvoke $r0.<org.apache.commons.collections.comparators.ComparatorChain: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label3;

        $r2 = r1[i1];

        if $r2 != null goto label2;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("Comparator cannot be null");

        throw $r4;

     label2:
        $r3 = r1[i1];

        virtualinvoke $r0.<org.apache.commons.collections.comparators.ComparatorChain: void addComparator(java.util.Comparator)>($r3);

        i1 = i1 + 1;

        goto label1;

     label3:
        return $r0;
    }

    public static java.util.Comparator chainedComparator(java.util.Collection)
    {
        java.lang.Object[] $r2;
        java.util.Collection r0;
        int $i0;
        java.util.Comparator $r5;
        java.util.Comparator[] $r1, $r3, $r4;

        r0 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r0.<java.util.Collection: int size()>();

        $r1 = newarray (java.util.Comparator)[$i0];

        $r2 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r3 = (java.util.Comparator[]) $r2;

        $r4 = (java.util.Comparator[]) $r3;

        $r5 = staticinvoke <org.apache.commons.collections.ComparatorUtils: java.util.Comparator chainedComparator(java.util.Comparator[])>($r4);

        return $r5;
    }

    public static java.util.Comparator reversedComparator(java.util.Comparator)
    {
        org.apache.commons.collections.comparators.ReverseComparator $r0;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        if r1 != null goto label1;

        r1 = <org.apache.commons.collections.ComparatorUtils: java.util.Comparator NATURAL_COMPARATOR>;

     label1:
        $r0 = new org.apache.commons.collections.comparators.ReverseComparator;

        specialinvoke $r0.<org.apache.commons.collections.comparators.ReverseComparator: void <init>(java.util.Comparator)>(r1);

        return $r0;
    }

    public static java.util.Comparator booleanComparator(boolean)
    {
        org.apache.commons.collections.comparators.BooleanComparator $r0;
        boolean z0;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <org.apache.commons.collections.comparators.BooleanComparator: org.apache.commons.collections.comparators.BooleanComparator getBooleanComparator(boolean)>(z0);

        return $r0;
    }

    public static java.util.Comparator nullLowComparator(java.util.Comparator)
    {
        org.apache.commons.collections.comparators.NullComparator $r0;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        if r1 != null goto label1;

        r1 = <org.apache.commons.collections.ComparatorUtils: java.util.Comparator NATURAL_COMPARATOR>;

     label1:
        $r0 = new org.apache.commons.collections.comparators.NullComparator;

        specialinvoke $r0.<org.apache.commons.collections.comparators.NullComparator: void <init>(java.util.Comparator,boolean)>(r1, 0);

        return $r0;
    }

    public static java.util.Comparator nullHighComparator(java.util.Comparator)
    {
        org.apache.commons.collections.comparators.NullComparator $r0;
        java.util.Comparator r1;

        r1 := @parameter0: java.util.Comparator;

        if r1 != null goto label1;

        r1 = <org.apache.commons.collections.ComparatorUtils: java.util.Comparator NATURAL_COMPARATOR>;

     label1:
        $r0 = new org.apache.commons.collections.comparators.NullComparator;

        specialinvoke $r0.<org.apache.commons.collections.comparators.NullComparator: void <init>(java.util.Comparator,boolean)>(r1, 1);

        return $r0;
    }

    public static java.util.Comparator transformedComparator(java.util.Comparator, org.apache.commons.collections.Transformer)
    {
        org.apache.commons.collections.comparators.TransformingComparator $r0;
        java.util.Comparator r2;
        org.apache.commons.collections.Transformer r1;

        r2 := @parameter0: java.util.Comparator;

        r1 := @parameter1: org.apache.commons.collections.Transformer;

        if r2 != null goto label1;

        r2 = <org.apache.commons.collections.ComparatorUtils: java.util.Comparator NATURAL_COMPARATOR>;

     label1:
        $r0 = new org.apache.commons.collections.comparators.TransformingComparator;

        specialinvoke $r0.<org.apache.commons.collections.comparators.TransformingComparator: void <init>(org.apache.commons.collections.Transformer,java.util.Comparator)>(r1, r2);

        return $r0;
    }

    public static java.lang.Object min(java.lang.Object, java.lang.Object, java.util.Comparator)
    {
        int $i0;
        java.lang.Object r0, r1, $r3;
        java.util.Comparator r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Comparator;

        if r2 != null goto label1;

        r2 = <org.apache.commons.collections.ComparatorUtils: java.util.Comparator NATURAL_COMPARATOR>;

     label1:
        $i0 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r1);

        if $i0 >= 0 goto label2;

        $r3 = r0;

        goto label3;

     label2:
        $r3 = r1;

     label3:
        return $r3;
    }

    public static java.lang.Object max(java.lang.Object, java.lang.Object, java.util.Comparator)
    {
        int $i0;
        java.lang.Object r0, r1, $r3;
        java.util.Comparator r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Comparator;

        if r2 != null goto label1;

        r2 = <org.apache.commons.collections.ComparatorUtils: java.util.Comparator NATURAL_COMPARATOR>;

     label1:
        $i0 = interfaceinvoke r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r1);

        if $i0 <= 0 goto label2;

        $r3 = r0;

        goto label3;

     label2:
        $r3 = r1;

     label3:
        return $r3;
    }

    static void <clinit>()
    {
        org.apache.commons.collections.comparators.ComparableComparator $r0;

        $r0 = staticinvoke <org.apache.commons.collections.comparators.ComparableComparator: org.apache.commons.collections.comparators.ComparableComparator getInstance()>();

        <org.apache.commons.collections.ComparatorUtils: java.util.Comparator NATURAL_COMPARATOR> = $r0;

        return;
    }
}
