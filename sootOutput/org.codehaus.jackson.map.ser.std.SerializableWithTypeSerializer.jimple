public class org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer extends org.codehaus.jackson.map.ser.std.SerializerBase
{
    public static final org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer instance;

    protected void <init>()
    {
        org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.SerializerBase: void <init>(java.lang.Class)>(class "Lorg/codehaus/jackson/map/JsonSerializableWithType;");

        return;
    }

    public void serialize(org.codehaus.jackson.map.JsonSerializableWithType, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.JsonSerializableWithType r0;
        org.codehaus.jackson.JsonGenerator r1;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer r3;

        r3 := @this: org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer;

        r0 := @parameter0: org.codehaus.jackson.map.JsonSerializableWithType;

        r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        interfaceinvoke r0.<org.codehaus.jackson.map.JsonSerializableWithType: void serialize(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, r2);

        return;
    }

    public final void serializeWithType(org.codehaus.jackson.map.JsonSerializableWithType, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.JsonSerializableWithType r0;
        org.codehaus.jackson.JsonGenerator r1;
        org.codehaus.jackson.map.TypeSerializer r3;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer r4;

        r4 := @this: org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer;

        r0 := @parameter0: org.codehaus.jackson.map.JsonSerializableWithType;

        r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r3 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        interfaceinvoke r0.<org.codehaus.jackson.map.JsonSerializableWithType: void serializeWithType(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>(r1, r2, r3);

        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type) throws org.codehaus.jackson.map.JsonMappingException
    {
        java.lang.IllegalStateException $r17, $r19;
        org.codehaus.jackson.map.SerializerProvider r20;
        org.codehaus.jackson.JsonNode $r5, $r8;
        java.lang.String $r12, $r13, $r14, $r15, r21, r22, r23;
        org.codehaus.jackson.node.ObjectNode $r1;
        boolean $z0, $z1, $z2;
        java.io.IOException $r16, $r18;
        java.lang.reflect.Type r2;
        java.lang.'annotation'.Annotation $r10;
        org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer r0;
        java.lang.Object $r4, $r7;
        java.lang.Class $r9;
        org.codehaus.jackson.schema.JsonSerializableSchema r11;
        org.codehaus.jackson.map.ObjectMapper $r3, $r6;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer;

        r20 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r2 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer: org.codehaus.jackson.node.ObjectNode createObjectNode()>();

        r21 = "any";

        r22 = null;

        r23 = null;

        if r2 == null goto label02;

        $r9 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: java.lang.Class rawClass(java.lang.reflect.Type)>(r2);

        $z0 = virtualinvoke $r9.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/codehaus/jackson/schema/JsonSerializableSchema;");

        if $z0 == 0 goto label02;

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/schema/JsonSerializableSchema;");

        r11 = (org.codehaus.jackson.schema.JsonSerializableSchema) $r10;

        r21 = interfaceinvoke r11.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaType()>();

        $r12 = "##irrelevant";

        $r13 = interfaceinvoke r11.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaObjectPropertiesDefinition()>();

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z1 != 0 goto label01;

        r22 = interfaceinvoke r11.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaObjectPropertiesDefinition()>();

     label01:
        $r14 = "##irrelevant";

        $r15 = interfaceinvoke r11.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaItemDefinition()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z2 != 0 goto label02;

        r23 = interfaceinvoke r11.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaItemDefinition()>();

     label02:
        virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: void put(java.lang.String,java.lang.String)>("type", r21);

        if r22 == null goto label06;

     label03:
        $r6 = new org.codehaus.jackson.map.ObjectMapper;

        specialinvoke $r6.<org.codehaus.jackson.map.ObjectMapper: void <init>()>();

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>(r22, class "Lorg/codehaus/jackson/JsonNode;");

        $r8 = (org.codehaus.jackson.JsonNode) $r7;

        virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("properties", $r8);

     label04:
        goto label06;

     label05:
        $r18 := @caughtexception;

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r18);

        throw $r19;

     label06:
        if r23 == null goto label10;

     label07:
        $r3 = new org.codehaus.jackson.map.ObjectMapper;

        specialinvoke $r3.<org.codehaus.jackson.map.ObjectMapper: void <init>()>();

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>(r23, class "Lorg/codehaus/jackson/JsonNode;");

        $r5 = (org.codehaus.jackson.JsonNode) $r4;

        virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("items", $r5);

     label08:
        goto label10;

     label09:
        $r16 := @caughtexception;

        $r17 = new java.lang.IllegalStateException;

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r16);

        throw $r17;

     label10:
        return $r1;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label07 to label08 with label09;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.JsonSerializableWithType $r4;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.SerializerProvider r3;
        org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer r0;
        java.lang.Object r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (org.codehaus.jackson.map.JsonSerializableWithType) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer: void serialize(org.codehaus.jackson.map.JsonSerializableWithType,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r2, r3);

        return;
    }

    public volatile void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.JsonSerializableWithType $r5;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.TypeSerializer r4;
        org.codehaus.jackson.map.SerializerProvider r3;
        org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer r0;
        java.lang.Object r1;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 = (org.codehaus.jackson.map.JsonSerializableWithType) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer: void serializeWithType(org.codehaus.jackson.map.JsonSerializableWithType,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r5, r2, r3, r4);

        return;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer $r0;

        $r0 = new org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer: void <init>()>();

        <org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer: org.codehaus.jackson.map.ser.std.SerializableWithTypeSerializer instance> = $r0;

        return;
    }
}
