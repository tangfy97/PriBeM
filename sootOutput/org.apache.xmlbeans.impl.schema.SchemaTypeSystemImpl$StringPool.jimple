class org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool extends java.lang.Object
{
    private java.util.List intsToStrings;
    private java.util.Map stringsToInts;
    private java.lang.String _handle;
    private java.lang.String _name;

    void <init>(java.lang.String, java.lang.String)
    {
        java.util.List $r5;
        org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool r0;
        java.util.HashMap $r2;
        java.lang.String r3, r4;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.util.List intsToStrings> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.util.Map stringsToInts> = $r2;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.lang.String _handle> = r3;

        r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.lang.String _name> = r4;

        $r5 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.util.List intsToStrings>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(null);

        return;
    }

    int codeForString(java.lang.String)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool r1;
        java.lang.Integer $r4, r8;
        java.util.List $r5, $r6;
        java.util.Map $r2, $r7;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.String r0;

        r1 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        $r2 = r1.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.util.Map stringsToInts>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r8 = (java.lang.Integer) $r3;

        if r8 != null goto label2;

        $r4 = new java.lang.Integer;

        $r5 = r1.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.util.List intsToStrings>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>($i1);

        r8 = $r4;

        $r6 = r1.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.util.List intsToStrings>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r0);

        $r7 = r1.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.util.Map stringsToInts>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r4);

     label2:
        $i0 = virtualinvoke r8.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    java.lang.String stringForCode(int)
    {
        java.util.List $r1;
        int i0;
        org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool r0;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.util.List intsToStrings>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    void writeTo(java.io.DataOutputStream)
    {
        org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool r0;
        java.io.DataOutputStream r2;
        java.lang.StringBuffer $r10, $r12, $r13, $r22;
        int $i0, $i1, $i2, $i4;
        java.lang.String r7, $r14, $r15, $r16, $r19, $r20, $r21;
        boolean $z0;
        java.util.Iterator $r5;
        java.io.IOException $r17;
        java.util.List $r1, $r3, $r4, $r11;
        java.lang.Object $r6;
        org.apache.xmlbeans.SchemaTypeLoaderException $r23, $r24;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool;

        r2 := @parameter0: java.io.DataOutputStream;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.util.List intsToStrings>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $i4 = (int) 65535;

        if $i0 < $i4 goto label1;

        $r23 = new org.apache.xmlbeans.SchemaTypeLoaderException;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r10 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Too many strings (");

        $r11 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.util.List intsToStrings>;

        $i2 = interfaceinvoke $r11.<java.util.List: int size()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $r16 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.lang.String _name>;

        $r15 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.lang.String _handle>;

        specialinvoke $r23.<org.apache.xmlbeans.SchemaTypeLoaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>($r14, $r16, $r15, 10);

        throw $r23;

     label1:
        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.util.List intsToStrings>;

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        virtualinvoke r2.<java.io.DataOutputStream: void writeShort(int)>($i1);

        $r4 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.util.List intsToStrings>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        virtualinvoke r2.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r7);

        goto label2;

     label3:
        goto label5;

     label4:
        $r17 := @caughtexception;

        $r24 = new org.apache.xmlbeans.SchemaTypeLoaderException;

        $r19 = virtualinvoke $r17.<java.io.IOException: java.lang.String getMessage()>();

        $r21 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.lang.String _name>;

        $r20 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.lang.String _handle>;

        specialinvoke $r24.<org.apache.xmlbeans.SchemaTypeLoaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,int)>($r19, $r21, $r20, 9);

        throw $r24;

     label5:
        return;

        catch java.io.IOException from label1 to label3 with label4;
    }

    void readFrom(java.io.DataInputStream)
    {
        java.lang.IllegalStateException $r2, $r7;
        java.io.DataInputStream r4;
        org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool r0;
        java.util.Map $r3;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r5, $r6, $r10, $r11, $r12, $r13;
        java.io.IOException $r8;
        java.util.List $r1;
        org.apache.xmlbeans.SchemaTypeLoaderException $r9;

        r0 := @this: org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool;

        r4 := @parameter0: java.io.DataInputStream;

        $r1 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.util.List intsToStrings>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r3 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.util.Map stringsToInts>;

        $i1 = interfaceinvoke $r3.<java.util.Map: int size()>();

        if $i1 == 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>()>();

        throw $r2;

     label2:
        $i2 = virtualinvoke r4.<java.io.DataInputStream: int readUnsignedShort()>();

        i4 = 1;

     label3:
        if i4 >= $i2 goto label5;

        $r5 = virtualinvoke r4.<java.io.DataInputStream: java.lang.String readUTF()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String intern()>();

        $i3 = virtualinvoke r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: int codeForString(java.lang.String)>($r6);

        if $i3 == i4 goto label4;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        goto label9;

     label6:
        $r8 := @caughtexception;

        $r9 = new org.apache.xmlbeans.SchemaTypeLoaderException;

        $r10 = virtualinvoke $r8.<java.io.IOException: java.lang.String getMessage()>();

        if $r10 != null goto label7;

        $r13 = virtualinvoke $r8.<java.io.IOException: java.lang.String getMessage()>();

        goto label8;

     label7:
        $r13 = "IO Exception";

     label8:
        $r12 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.lang.String _name>;

        $r11 = r0.<org.apache.xmlbeans.impl.schema.SchemaTypeSystemImpl$StringPool: java.lang.String _handle>;

        specialinvoke $r9.<org.apache.xmlbeans.SchemaTypeLoaderException: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Exception)>($r13, $r12, $r11, 9, $r8);

        throw $r9;

     label9:
        return;

        catch java.io.IOException from label2 to label5 with label6;
    }
}
