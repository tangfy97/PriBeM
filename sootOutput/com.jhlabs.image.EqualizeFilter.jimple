public class com.jhlabs.image.EqualizeFilter extends com.jhlabs.image.WholeImageFilter implements java.io.Serializable
{
    protected int[][] lut;

    public void <init>()
    {
        com.jhlabs.image.EqualizeFilter r0;

        r0 := @this: com.jhlabs.image.EqualizeFilter;

        specialinvoke r0.<com.jhlabs.image.WholeImageFilter: void <init>()>();

        return;
    }

    protected int[] filterPixels(int, int, int[], java.awt.Rectangle)
    {
        int[][] $r3, $r4, $r5, $r6, $r8, $r9, $r12, $r13;
        int[] r1, $r7, $r10, $r11, $r14, $r15;
        com.jhlabs.image.EqualizeFilter r2;
        float $f0, $f1, $f2, f3;
        java.awt.Rectangle r16;
        com.jhlabs.image.Histogram $r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17, i18;

        r2 := @this: com.jhlabs.image.EqualizeFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r16 := @parameter3: java.awt.Rectangle;

        $r0 = new com.jhlabs.image.Histogram;

        specialinvoke $r0.<com.jhlabs.image.Histogram: void <init>(int[],int,int,int,int)>(r1, i0, i1, 0, i0);

        $i2 = virtualinvoke $r0.<com.jhlabs.image.Histogram: int getNumSamples()>();

        if $i2 <= 0 goto label07;

        $i5 = virtualinvoke $r0.<com.jhlabs.image.Histogram: int getNumSamples()>();

        $f0 = (float) $i5;

        f3 = 255.0F / $f0;

        $r5 = newmultiarray (int)[3][256];

        r2.<com.jhlabs.image.EqualizeFilter: int[][] lut> = $r5;

        i13 = 0;

     label01:
        if i13 >= 3 goto label06;

        $r6 = r2.<com.jhlabs.image.EqualizeFilter: int[][] lut>;

        $r7 = $r6[i13];

        $i6 = virtualinvoke $r0.<com.jhlabs.image.Histogram: int getFrequency(int,int)>(i13, 0);

        $r7[0] = $i6;

        i14 = 1;

     label02:
        if i14 >= 256 goto label03;

        $r12 = r2.<com.jhlabs.image.EqualizeFilter: int[][] lut>;

        $r15 = $r12[i13];

        $r13 = r2.<com.jhlabs.image.EqualizeFilter: int[][] lut>;

        $r14 = $r13[i13];

        $i9 = i14 - 1;

        $i10 = $r14[$i9];

        $i11 = virtualinvoke $r0.<com.jhlabs.image.Histogram: int getFrequency(int,int)>(i13, i14);

        $i12 = $i10 + $i11;

        $r15[i14] = $i12;

        i14 = i14 + 1;

        goto label02;

     label03:
        i15 = 0;

     label04:
        if i15 >= 256 goto label05;

        $r8 = r2.<com.jhlabs.image.EqualizeFilter: int[][] lut>;

        $r11 = $r8[i13];

        $r9 = r2.<com.jhlabs.image.EqualizeFilter: int[][] lut>;

        $r10 = $r9[i13];

        $i7 = $r10[i15];

        $f1 = (float) $i7;

        $f2 = $f1 * f3;

        $i8 = staticinvoke <java.lang.Math: int round(float)>($f2);

        $r11[i15] = $i8;

        i15 = i15 + 1;

        goto label04;

     label05:
        i13 = i13 + 1;

        goto label01;

     label06:
        goto label08;

     label07:
        $r3 = (int[][]) null;

        r2.<com.jhlabs.image.EqualizeFilter: int[][] lut> = $r3;

     label08:
        i16 = 0;

        i17 = 0;

     label09:
        if i17 >= i1 goto label12;

        i18 = 0;

     label10:
        if i18 >= i0 goto label11;

        $i3 = r1[i16];

        $i4 = virtualinvoke r2.<com.jhlabs.image.EqualizeFilter: int filterRGB(int,int,int)>(i18, i17, $i3);

        r1[i16] = $i4;

        i16 = i16 + 1;

        i18 = i18 + 1;

        goto label10;

     label11:
        i17 = i17 + 1;

        goto label09;

     label12:
        $r4 = (int[][]) null;

        r2.<com.jhlabs.image.EqualizeFilter: int[][] lut> = $r4;

        return r1;
    }

    public int filterRGB(int, int, int)
    {
        int[][] $r1, $r2, $r4, $r6;
        int[] $r3, $r5, $r7;
        int i0, i1, $i2, $i3, i4, $i5, $i6, i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, i15, i16;
        com.jhlabs.image.EqualizeFilter r0;

        r0 := @this: com.jhlabs.image.EqualizeFilter;

        i15 := @parameter0: int;

        i16 := @parameter1: int;

        i0 := @parameter2: int;

        $r1 = r0.<com.jhlabs.image.EqualizeFilter: int[][] lut>;

        if $r1 == null goto label1;

        i1 = i0 & -16777216;

        $r2 = r0.<com.jhlabs.image.EqualizeFilter: int[][] lut>;

        $r3 = $r2[0];

        $i2 = i0 >> 16;

        $i3 = $i2 & 255;

        i4 = $r3[$i3];

        $r4 = r0.<com.jhlabs.image.EqualizeFilter: int[][] lut>;

        $r5 = $r4[1];

        $i5 = i0 >> 8;

        $i6 = $i5 & 255;

        i7 = $r5[$i6];

        $r6 = r0.<com.jhlabs.image.EqualizeFilter: int[][] lut>;

        $r7 = $r6[2];

        $i8 = i0 & 255;

        i9 = $r7[$i8];

        $i10 = i4 << 16;

        $i12 = i1 | $i10;

        $i11 = i7 << 8;

        $i13 = $i12 | $i11;

        $i14 = $i13 | i9;

        return $i14;

     label1:
        return i0;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.EqualizeFilter r0;

        r0 := @this: com.jhlabs.image.EqualizeFilter;

        return "Colors/Equalize";
    }
}
