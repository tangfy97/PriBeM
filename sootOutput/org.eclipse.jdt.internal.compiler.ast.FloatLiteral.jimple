public class org.eclipse.jdt.internal.compiler.ast.FloatLiteral extends org.eclipse.jdt.internal.compiler.ast.NumberLiteral
{
    float value;
    static final float Float_MIN_VALUE;

    static void <clinit>()
    {
        float $f0;

        $f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(1);

        <org.eclipse.jdt.internal.compiler.ast.FloatLiteral: float Float_MIN_VALUE> = $f0;

        return;
    }

    public void <init>(char[], int, int)
    {
        int i0, i1;
        char[] r1;
        org.eclipse.jdt.internal.compiler.ast.FloatLiteral r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.FloatLiteral;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.NumberLiteral: void <init>(char[],int,int)>(r1, i0, i1);

        return;
    }

    public void computeConstant()
    {
        java.lang.Float $r3;
        byte $b0, $b1, $b3;
        int i4, $i5, $i6, $i7, $i8;
        java.lang.String $r2;
        boolean $z0, z1;
        char $c2;
        java.lang.NumberFormatException $r5, $r6;
        org.eclipse.jdt.internal.compiler.ast.FloatLiteral r0;
        org.eclipse.jdt.internal.compiler.impl.Constant $r8, $r10;
        char[] $r1, $r4, $r7, $r9;
        float $f0, $f1, $f2;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.FloatLiteral;

     label01:
        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.FloatLiteral: char[] source>;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r1);

        $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(java.lang.String)>($r2);

     label02:
        goto label12;

     label03:
        $r6 := @caughtexception;

     label04:
        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.FloatLiteral: char[] source>;

        $f1 = staticinvoke <org.eclipse.jdt.internal.compiler.util.FloatUtil: float valueOfHexFloatLiteral(char[])>($r7);

        $b3 = $f1 cmpl #InfinityF;

        if $b3 != 0 goto label06;

     label05:
        return;

     label06:
        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f1);

        if $z0 == 0 goto label08;

     label07:
        return;

     label08:
        r0.<org.eclipse.jdt.internal.compiler.ast.FloatLiteral: float value> = $f1;

        $r8 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.FloatConstant: org.eclipse.jdt.internal.compiler.impl.Constant fromValue(float)>($f1);

        r0.<org.eclipse.jdt.internal.compiler.ast.FloatLiteral: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r8;

     label09:
        goto label11;

     label10:
        $r5 := @caughtexception;

     label11:
        return;

     label12:
        $f0 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        $b0 = $f0 cmpl 3.4028235E38F;

        $i6 = (int) $b0;

        if $i6 <= 0 goto label13;

        return;

     label13:
        $b1 = $f0 cmpg 1.4E-45F;

        $i7 = (int) $b1;

        if $i7 >= 0 goto label22;

        z1 = 0;

        i4 = 0;

        goto label21;

     label14:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.FloatLiteral: char[] source>;

        $c2 = $r4[i4];

        $i8 = (int) $c2;

        lookupswitch($i8)
        {
            case 46: goto label15;
            case 48: goto label15;
            case 68: goto label17;
            case 69: goto label17;
            case 70: goto label17;
            case 80: goto label18;
            case 88: goto label16;
            case 100: goto label17;
            case 101: goto label17;
            case 102: goto label17;
            case 112: goto label18;
            case 120: goto label16;
            default: goto label19;
        };

     label15:
        goto label20;

     label16:
        z1 = 1;

        goto label20;

     label17:
        if z1 == 0 goto label22;

        return;

     label18:
        goto label22;

     label19:
        return;

     label20:
        i4 = i4 + 1;

     label21:
        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.FloatLiteral: char[] source>;

        $i5 = lengthof $r9;

        if i4 < $i5 goto label14;

     label22:
        r0.<org.eclipse.jdt.internal.compiler.ast.FloatLiteral: float value> = $f0;

        $f2 = r0.<org.eclipse.jdt.internal.compiler.ast.FloatLiteral: float value>;

        $r10 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.FloatConstant: org.eclipse.jdt.internal.compiler.impl.Constant fromValue(float)>($f2);

        r0.<org.eclipse.jdt.internal.compiler.ast.FloatLiteral: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r10;

        return;

        catch java.lang.NumberFormatException from label01 to label02 with label03;
        catch java.lang.NumberFormatException from label04 to label05 with label10;
        catch java.lang.NumberFormatException from label06 to label07 with label10;
        catch java.lang.NumberFormatException from label08 to label09 with label10;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r3;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;
        org.eclipse.jdt.internal.compiler.ast.FloatLiteral r1;
        org.eclipse.jdt.internal.compiler.impl.Constant $r2;
        int i0, $i1, $i2;
        boolean z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.FloatLiteral;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z0 := @parameter2: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        if z0 == 0 goto label1;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.FloatLiteral: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.ast.FloatLiteral: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateConstant(org.eclipse.jdt.internal.compiler.impl.Constant,int)>($r2, $i2);

     label1:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.FloatLiteral: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i1);

        return;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding literalType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.FloatLiteral r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.FloatLiteral;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r0 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding FLOAT>;

        return $r0;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.FloatLiteral r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.FloatLiteral;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.FloatLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.FloatLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
