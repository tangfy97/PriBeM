public abstract class com.mycila.inject.internal.guava.base.Equivalence extends java.lang.Object
{

    protected void <init>()
    {
        com.mycila.inject.internal.guava.base.Equivalence r0;

        r0 := @this: com.mycila.inject.internal.guava.base.Equivalence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public final boolean equivalent(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.base.Equivalence r2;
        java.lang.Object r0, r1;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.guava.base.Equivalence;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 == null goto label2;

        if r1 != null goto label3;

     label2:
        return 0;

     label3:
        $z0 = virtualinvoke r2.<com.mycila.inject.internal.guava.base.Equivalence: boolean doEquivalent(java.lang.Object,java.lang.Object)>(r0, r1);

        return $z0;
    }

    protected abstract boolean doEquivalent(java.lang.Object, java.lang.Object);

    public final int hash(java.lang.Object)
    {
        int $i0;
        java.lang.Object r0;
        com.mycila.inject.internal.guava.base.Equivalence r1;

        r1 := @this: com.mycila.inject.internal.guava.base.Equivalence;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r1.<com.mycila.inject.internal.guava.base.Equivalence: int doHash(java.lang.Object)>(r0);

        return $i0;
    }

    protected abstract int doHash(java.lang.Object);

    public final com.mycila.inject.internal.guava.base.Equivalence onResultOf(com.mycila.inject.internal.guava.base.Function)
    {
        com.mycila.inject.internal.guava.base.Function r1;
        com.mycila.inject.internal.guava.base.Equivalence r2;
        com.mycila.inject.internal.guava.base.FunctionalEquivalence $r0;

        r2 := @this: com.mycila.inject.internal.guava.base.Equivalence;

        r1 := @parameter0: com.mycila.inject.internal.guava.base.Function;

        $r0 = new com.mycila.inject.internal.guava.base.FunctionalEquivalence;

        specialinvoke $r0.<com.mycila.inject.internal.guava.base.FunctionalEquivalence: void <init>(com.mycila.inject.internal.guava.base.Function,com.mycila.inject.internal.guava.base.Equivalence)>(r1, r2);

        return $r0;
    }

    public final com.mycila.inject.internal.guava.base.Equivalence$Wrapper wrap(java.lang.Object)
    {
        java.lang.Object r2;
        com.mycila.inject.internal.guava.base.Equivalence r1;
        com.mycila.inject.internal.guava.base.Equivalence$Wrapper $r0;

        r1 := @this: com.mycila.inject.internal.guava.base.Equivalence;

        r2 := @parameter0: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.base.Equivalence$Wrapper;

        specialinvoke $r0.<com.mycila.inject.internal.guava.base.Equivalence$Wrapper: void <init>(com.mycila.inject.internal.guava.base.Equivalence,java.lang.Object,com.mycila.inject.internal.guava.base.Equivalence$1)>(r1, r2, null);

        return $r0;
    }

    public final com.mycila.inject.internal.guava.base.Equivalence pairwise()
    {
        com.mycila.inject.internal.guava.base.Equivalence r1;
        com.mycila.inject.internal.guava.base.PairwiseEquivalence $r0;

        r1 := @this: com.mycila.inject.internal.guava.base.Equivalence;

        $r0 = new com.mycila.inject.internal.guava.base.PairwiseEquivalence;

        specialinvoke $r0.<com.mycila.inject.internal.guava.base.PairwiseEquivalence: void <init>(com.mycila.inject.internal.guava.base.Equivalence)>(r1);

        return $r0;
    }

    public final com.mycila.inject.internal.guava.base.Predicate equivalentTo(java.lang.Object)
    {
        java.lang.Object r2;
        com.mycila.inject.internal.guava.base.Equivalence r1;
        com.mycila.inject.internal.guava.base.Equivalence$EquivalentToPredicate $r0;

        r1 := @this: com.mycila.inject.internal.guava.base.Equivalence;

        r2 := @parameter0: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.base.Equivalence$EquivalentToPredicate;

        specialinvoke $r0.<com.mycila.inject.internal.guava.base.Equivalence$EquivalentToPredicate: void <init>(com.mycila.inject.internal.guava.base.Equivalence,java.lang.Object)>(r1, r2);

        return $r0;
    }
}
