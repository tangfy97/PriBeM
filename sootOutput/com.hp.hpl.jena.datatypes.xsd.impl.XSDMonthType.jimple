public class com.hp.hpl.jena.datatypes.xsd.impl.XSDMonthType extends com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType
{

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDMonthType r0;

        r0 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDMonthType;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.hp.hpl.jena.datatypes.xsd.impl.XSDAbstractDateTimeType: void <init>(java.lang.String)>(r1);

        return;
    }

    public java.lang.Object parseValidated(java.lang.String)
    {
        byte b8, b9, b10;
        int[] r1, r2;
        com.hp.hpl.jena.datatypes.xsd.XSDDateTime $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i11, $i12;
        java.lang.String r0;
        char $c6, $c7;
        com.hp.hpl.jena.datatypes.xsd.impl.XSDMonthType r3;

        r3 := @this: com.hp.hpl.jena.datatypes.xsd.impl.XSDMonthType;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = newarray (int)[9];

        r2 = newarray (int)[2];

        r1[0] = 2000;

        r1[2] = 15;

        b8 = 4;

        b10 = 4;

        b9 = 4;

        $i1 = virtualinvoke r3.<com.hp.hpl.jena.datatypes.xsd.impl.XSDMonthType: int parseInt(java.lang.String,int,int)>(r0, 2, 4);

        r1[1] = $i1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 < 6 goto label1;

        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(4);

        $i11 = (int) $c6;

        if $i11 != 45 goto label1;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(5);

        $i12 = (int) $c7;

        if $i12 != 45 goto label1;

        b8 = 6;

        b10 = 6;

        b9 = 6;

     label1:
        if b9 >= $i0 goto label2;

        $i5 = virtualinvoke r3.<com.hp.hpl.jena.datatypes.xsd.impl.XSDMonthType: int findUTCSign(java.lang.String,int,int)>(r0, b10, $i0);

        virtualinvoke r3.<com.hp.hpl.jena.datatypes.xsd.impl.XSDMonthType: void getTimeZone(java.lang.String,int[],int,int,int[])>(r0, r1, $i5, $i0, r2);

     label2:
        $i3 = r1[7];

        if $i3 == 0 goto label3;

        $i4 = r1[7];

        if $i4 == 90 goto label3;

        staticinvoke <com.hp.hpl.jena.datatypes.xsd.AbstractDateTime: void normalize(int[],int[])>(r1, r2);

     label3:
        $r5 = new com.hp.hpl.jena.datatypes.xsd.XSDDateTime;

        specialinvoke $r5.<com.hp.hpl.jena.datatypes.xsd.XSDDateTime: void <init>(java.lang.Object,int)>(r1, 2);

        return $r5;
    }
}
