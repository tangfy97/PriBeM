public class org.apache.batik.gvt.font.GVTLineMetrics extends java.lang.Object
{
    protected float ascent;
    protected int baselineIndex;
    protected float[] baselineOffsets;
    protected float descent;
    protected float height;
    protected float leading;
    protected int numChars;
    protected float strikethroughOffset;
    protected float strikethroughThickness;
    protected float underlineOffset;
    protected float underlineThickness;
    protected float overlineOffset;
    protected float overlineThickness;

    public void <init>(java.awt.font.LineMetrics)
    {
        float[] $r2;
        int $i0, $i1;
        org.apache.batik.gvt.font.GVTLineMetrics r0;
        java.awt.font.LineMetrics r1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        r1 := @parameter0: java.awt.font.LineMetrics;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $f0 = virtualinvoke r1.<java.awt.font.LineMetrics: float getAscent()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float ascent> = $f0;

        $i0 = virtualinvoke r1.<java.awt.font.LineMetrics: int getBaselineIndex()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: int baselineIndex> = $i0;

        $r2 = virtualinvoke r1.<java.awt.font.LineMetrics: float[] getBaselineOffsets()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float[] baselineOffsets> = $r2;

        $f1 = virtualinvoke r1.<java.awt.font.LineMetrics: float getDescent()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float descent> = $f1;

        $f2 = virtualinvoke r1.<java.awt.font.LineMetrics: float getHeight()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float height> = $f2;

        $f3 = virtualinvoke r1.<java.awt.font.LineMetrics: float getLeading()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float leading> = $f3;

        $i1 = virtualinvoke r1.<java.awt.font.LineMetrics: int getNumChars()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: int numChars> = $i1;

        $f4 = virtualinvoke r1.<java.awt.font.LineMetrics: float getStrikethroughOffset()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float strikethroughOffset> = $f4;

        $f5 = virtualinvoke r1.<java.awt.font.LineMetrics: float getStrikethroughThickness()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float strikethroughThickness> = $f5;

        $f6 = virtualinvoke r1.<java.awt.font.LineMetrics: float getUnderlineOffset()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float underlineOffset> = $f6;

        $f7 = virtualinvoke r1.<java.awt.font.LineMetrics: float getUnderlineThickness()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float underlineThickness> = $f7;

        $f8 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float ascent>;

        $f9 = neg $f8;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float overlineOffset> = $f9;

        $f10 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float underlineThickness>;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float overlineThickness> = $f10;

        return;
    }

    public void <init>(java.awt.font.LineMetrics, float)
    {
        float[] $r2, $r3, $r4;
        int $i0, $i1, $i2, i3;
        org.apache.batik.gvt.font.GVTLineMetrics r0;
        java.awt.font.LineMetrics r1;
        float $f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        r1 := @parameter0: java.awt.font.LineMetrics;

        f1 := @parameter1: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $f0 = virtualinvoke r1.<java.awt.font.LineMetrics: float getAscent()>();

        $f2 = $f0 * f1;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float ascent> = $f2;

        $i0 = virtualinvoke r1.<java.awt.font.LineMetrics: int getBaselineIndex()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: int baselineIndex> = $i0;

        $r2 = virtualinvoke r1.<java.awt.font.LineMetrics: float[] getBaselineOffsets()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float[] baselineOffsets> = $r2;

        i3 = 0;

        goto label2;

     label1:
        $r4 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float[] baselineOffsets>;

        $f3 = $r4[i3];

        $f4 = $f3 * f1;

        $r4[i3] = $f4;

        i3 = i3 + 1;

     label2:
        $r3 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float[] baselineOffsets>;

        $i1 = lengthof $r3;

        if i3 < $i1 goto label1;

        $f5 = virtualinvoke r1.<java.awt.font.LineMetrics: float getDescent()>();

        $f6 = $f5 * f1;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float descent> = $f6;

        $f7 = virtualinvoke r1.<java.awt.font.LineMetrics: float getHeight()>();

        $f8 = $f7 * f1;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float height> = $f8;

        $f9 = virtualinvoke r1.<java.awt.font.LineMetrics: float getLeading()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float leading> = $f9;

        $i2 = virtualinvoke r1.<java.awt.font.LineMetrics: int getNumChars()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: int numChars> = $i2;

        $f10 = virtualinvoke r1.<java.awt.font.LineMetrics: float getStrikethroughOffset()>();

        $f11 = $f10 * f1;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float strikethroughOffset> = $f11;

        $f12 = virtualinvoke r1.<java.awt.font.LineMetrics: float getStrikethroughThickness()>();

        $f13 = $f12 * f1;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float strikethroughThickness> = $f13;

        $f14 = virtualinvoke r1.<java.awt.font.LineMetrics: float getUnderlineOffset()>();

        $f15 = $f14 * f1;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float underlineOffset> = $f15;

        $f16 = virtualinvoke r1.<java.awt.font.LineMetrics: float getUnderlineThickness()>();

        $f17 = $f16 * f1;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float underlineThickness> = $f17;

        $f18 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float ascent>;

        $f19 = neg $f18;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float overlineOffset> = $f19;

        $f20 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float underlineThickness>;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float overlineThickness> = $f20;

        return;
    }

    public void <init>(float, int, float[], float, float, float, int, float, float, float, float, float, float)
    {
        float[] r1;
        int i0, i1;
        float f0, f1, f2, f3, f4, f5, f6, f7, f8, f9;
        org.apache.batik.gvt.font.GVTLineMetrics r0;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        r1 := @parameter2: float[];

        f1 := @parameter3: float;

        f2 := @parameter4: float;

        f3 := @parameter5: float;

        i1 := @parameter6: int;

        f4 := @parameter7: float;

        f5 := @parameter8: float;

        f6 := @parameter9: float;

        f7 := @parameter10: float;

        f8 := @parameter11: float;

        f9 := @parameter12: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float ascent> = f0;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: int baselineIndex> = i0;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float[] baselineOffsets> = r1;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float descent> = f1;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float height> = f2;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float leading> = f3;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: int numChars> = i1;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float strikethroughOffset> = f4;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float strikethroughThickness> = f5;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float underlineOffset> = f6;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float underlineThickness> = f7;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float overlineOffset> = f8;

        r0.<org.apache.batik.gvt.font.GVTLineMetrics: float overlineThickness> = f9;

        return;
    }

    public float getAscent()
    {
        float $f0;
        org.apache.batik.gvt.font.GVTLineMetrics r0;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        $f0 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float ascent>;

        return $f0;
    }

    public int getBaselineIndex()
    {
        int $i0;
        org.apache.batik.gvt.font.GVTLineMetrics r0;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        $i0 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: int baselineIndex>;

        return $i0;
    }

    public float[] getBaselineOffsets()
    {
        float[] $r1;
        org.apache.batik.gvt.font.GVTLineMetrics r0;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        $r1 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float[] baselineOffsets>;

        return $r1;
    }

    public float getDescent()
    {
        float $f0;
        org.apache.batik.gvt.font.GVTLineMetrics r0;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        $f0 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float descent>;

        return $f0;
    }

    public float getHeight()
    {
        float $f0;
        org.apache.batik.gvt.font.GVTLineMetrics r0;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        $f0 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float height>;

        return $f0;
    }

    public float getLeading()
    {
        float $f0;
        org.apache.batik.gvt.font.GVTLineMetrics r0;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        $f0 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float leading>;

        return $f0;
    }

    public int getNumChars()
    {
        int $i0;
        org.apache.batik.gvt.font.GVTLineMetrics r0;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        $i0 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: int numChars>;

        return $i0;
    }

    public float getStrikethroughOffset()
    {
        float $f0;
        org.apache.batik.gvt.font.GVTLineMetrics r0;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        $f0 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float strikethroughOffset>;

        return $f0;
    }

    public float getStrikethroughThickness()
    {
        float $f0;
        org.apache.batik.gvt.font.GVTLineMetrics r0;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        $f0 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float strikethroughThickness>;

        return $f0;
    }

    public float getUnderlineOffset()
    {
        float $f0;
        org.apache.batik.gvt.font.GVTLineMetrics r0;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        $f0 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float underlineOffset>;

        return $f0;
    }

    public float getUnderlineThickness()
    {
        float $f0;
        org.apache.batik.gvt.font.GVTLineMetrics r0;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        $f0 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float underlineThickness>;

        return $f0;
    }

    public float getOverlineOffset()
    {
        float $f0;
        org.apache.batik.gvt.font.GVTLineMetrics r0;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        $f0 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float overlineOffset>;

        return $f0;
    }

    public float getOverlineThickness()
    {
        float $f0;
        org.apache.batik.gvt.font.GVTLineMetrics r0;

        r0 := @this: org.apache.batik.gvt.font.GVTLineMetrics;

        $f0 = r0.<org.apache.batik.gvt.font.GVTLineMetrics: float overlineThickness>;

        return $f0;
    }
}
