final class org.apache.lucene.index.StandardDirectoryReader extends org.apache.lucene.index.DirectoryReader
{
    private final org.apache.lucene.index.IndexWriter writer;
    private final org.apache.lucene.index.SegmentInfos segmentInfos;
    private final int termInfosIndexDivisor;
    private final boolean applyAllDeletes;
    static final boolean $assertionsDisabled;

    void <init>(org.apache.lucene.store.Directory, org.apache.lucene.index.AtomicReader[], org.apache.lucene.index.IndexWriter, org.apache.lucene.index.SegmentInfos, int, boolean)
    {
        org.apache.lucene.index.StandardDirectoryReader r0;
        org.apache.lucene.index.IndexWriter r3;
        org.apache.lucene.store.Directory r1;
        int i0;
        org.apache.lucene.index.AtomicReader[] r2;
        org.apache.lucene.index.SegmentInfos r4;
        boolean z0;

        r0 := @this: org.apache.lucene.index.StandardDirectoryReader;

        r1 := @parameter0: org.apache.lucene.store.Directory;

        r2 := @parameter1: org.apache.lucene.index.AtomicReader[];

        r3 := @parameter2: org.apache.lucene.index.IndexWriter;

        r4 := @parameter3: org.apache.lucene.index.SegmentInfos;

        i0 := @parameter4: int;

        z0 := @parameter5: boolean;

        specialinvoke r0.<org.apache.lucene.index.DirectoryReader: void <init>(org.apache.lucene.store.Directory,org.apache.lucene.index.AtomicReader[])>(r1, r2);

        r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.IndexWriter writer> = r3;

        r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.SegmentInfos segmentInfos> = r4;

        r0.<org.apache.lucene.index.StandardDirectoryReader: int termInfosIndexDivisor> = i0;

        r0.<org.apache.lucene.index.StandardDirectoryReader: boolean applyAllDeletes> = z0;

        return;
    }

    static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory, org.apache.lucene.index.IndexCommit, int) throws java.io.IOException
    {
        org.apache.lucene.index.IndexCommit r2;
        org.apache.lucene.store.Directory r1;
        org.apache.lucene.index.DirectoryReader $r4;
        int i0;
        org.apache.lucene.index.StandardDirectoryReader$1 $r0;
        java.lang.Object $r3;

        r1 := @parameter0: org.apache.lucene.store.Directory;

        r2 := @parameter1: org.apache.lucene.index.IndexCommit;

        i0 := @parameter2: int;

        $r0 = new org.apache.lucene.index.StandardDirectoryReader$1;

        specialinvoke $r0.<org.apache.lucene.index.StandardDirectoryReader$1: void <init>(org.apache.lucene.store.Directory,int)>(r1, i0);

        $r3 = virtualinvoke $r0.<org.apache.lucene.index.StandardDirectoryReader$1: java.lang.Object run(org.apache.lucene.index.IndexCommit)>(r2);

        $r4 = (org.apache.lucene.index.DirectoryReader) $r3;

        return $r4;
    }

    static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.index.IndexWriter, org.apache.lucene.index.SegmentInfos, boolean) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r10;
        org.apache.lucene.store.Directory $r3, $r17;
        org.apache.lucene.store.IOContext $r13;
        boolean z0, $z1, $z2;
        org.apache.lucene.index.SegmentInfo $r16;
        org.apache.lucene.index.AtomicReader[] $r8;
        org.apache.lucene.index.ReadersAndLiveDocs $r12;
        org.apache.lucene.index.SegmentInfos r0, $r4;
        org.apache.lucene.index.IndexWriter r2;
        java.lang.Throwable $r19, $r21;
        java.lang.Object[] $r7;
        org.apache.lucene.index.LiveIndexWriterConfig $r9;
        org.apache.lucene.index.SegmentReader[] $r6;
        java.lang.AssertionError $r18;
        java.util.ArrayList $r1;
        org.apache.lucene.index.StandardDirectoryReader $r5;
        int $i0, $i1, $i2, $i3, i4, i5;
        org.apache.lucene.index.SegmentReader $r14;
        java.io.IOException $r20;
        org.apache.lucene.index.IndexWriter$ReaderPool $r11, $r15, $r22;

        r2 := @parameter0: org.apache.lucene.index.IndexWriter;

        r0 := @parameter1: org.apache.lucene.index.SegmentInfos;

        z0 := @parameter2: boolean;

        $i0 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfos: int size()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r2.<org.apache.lucene.index.IndexWriter: org.apache.lucene.store.Directory getDirectory()>();

        $r4 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfos clone()>();

        i4 = 0;

        i5 = 0;

     label01:
        if i5 >= $i0 goto label17;

     label02:
        $r10 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i5);

        $z1 = <org.apache.lucene.index.StandardDirectoryReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label03;

        $r16 = $r10.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r17 = $r16.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        if $r17 == $r3 goto label03;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label03:
        $r11 = r2.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        $r12 = virtualinvoke $r11.<org.apache.lucene.index.IndexWriter$ReaderPool: org.apache.lucene.index.ReadersAndLiveDocs get(org.apache.lucene.index.SegmentInfoPerCommit,boolean)>($r10, 1);

     label04:
        $r13 = <org.apache.lucene.store.IOContext: org.apache.lucene.store.IOContext READ>;

        $r14 = virtualinvoke $r12.<org.apache.lucene.index.ReadersAndLiveDocs: org.apache.lucene.index.SegmentReader getReadOnlyClone(org.apache.lucene.store.IOContext)>($r13);

        $i3 = virtualinvoke $r14.<org.apache.lucene.index.SegmentReader: int numDocs()>();

        if $i3 > 0 goto label05;

        $z2 = virtualinvoke r2.<org.apache.lucene.index.IndexWriter: boolean getKeepFullyDeletedSegments()>();

        if $z2 == 0 goto label06;

     label05:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r14);

        i4 = i4 + 1;

        goto label07;

     label06:
        virtualinvoke $r14.<org.apache.lucene.index.SegmentReader: void close()>();

        virtualinvoke $r4.<org.apache.lucene.index.SegmentInfos: void remove(int)>(i4);

     label07:
        $r15 = r2.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        virtualinvoke $r15.<org.apache.lucene.index.IndexWriter$ReaderPool: void release(org.apache.lucene.index.ReadersAndLiveDocs)>($r12);

        goto label10;

     label08:
        $r21 := @caughtexception;

     label09:
        $r22 = r2.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.IndexWriter$ReaderPool readerPool>;

        virtualinvoke $r22.<org.apache.lucene.index.IndexWriter$ReaderPool: void release(org.apache.lucene.index.ReadersAndLiveDocs)>($r12);

        throw $r21;

     label10:
        if 1 != 0 goto label16;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.lang.Iterable)>(null, $r1);

        goto label16;

     label11:
        $r20 := @caughtexception;

     label12:
        if 0 != 0 goto label16;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.lang.Iterable)>($r20, $r1);

        goto label16;

     label13:
        $r19 := @caughtexception;

     label14:
        if 0 != 0 goto label15;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.lang.Iterable)>(null, $r1);

     label15:
        throw $r19;

     label16:
        i5 = i5 + 1;

        goto label01;

     label17:
        $r5 = new org.apache.lucene.index.StandardDirectoryReader;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r6 = newarray (org.apache.lucene.index.SegmentReader)[$i1];

        $r7 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (org.apache.lucene.index.AtomicReader[]) $r7;

        $r9 = virtualinvoke r2.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.LiveIndexWriterConfig getConfig()>();

        $i2 = virtualinvoke $r9.<org.apache.lucene.index.LiveIndexWriterConfig: int getReaderTermsIndexDivisor()>();

        specialinvoke $r5.<org.apache.lucene.index.StandardDirectoryReader: void <init>(org.apache.lucene.store.Directory,org.apache.lucene.index.AtomicReader[],org.apache.lucene.index.IndexWriter,org.apache.lucene.index.SegmentInfos,int,boolean)>($r3, $r8, r2, $r4, $i2, z0);

        return $r5;

        catch java.lang.Throwable from label04 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch java.io.IOException from label02 to label10 with label11;
        catch java.lang.Throwable from label02 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
    }

    private static org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory, org.apache.lucene.index.SegmentInfos, java.util.List, int) throws java.io.IOException
    {
        org.apache.lucene.index.SegmentInfoPerCommit $r5, $r14, $r23, $r26, $r29, $r30, $r32, $r36, $r38, $r42;
        java.lang.Integer r9, $r51;
        byte $b8;
        org.apache.lucene.store.IOContext $r15, $r34;
        org.apache.lucene.index.SegmentInfo $r6, $r24, $r27, $r39, $r43;
        java.lang.Throwable $r52, $r60, $r61, $r69, $r70, r72, r73;
        org.apache.lucene.index.SegmentReader[] $r47;
        java.lang.Error $r17, $r54, $r63;
        long $l6, $l7;
        java.lang.AssertionError $r76, $r77;
        java.lang.String $r7, $r50;
        boolean[] $r48;
        java.io.IOException $r19, $r56, $r65;
        java.lang.RuntimeException $r18, $r55, $r64, $r79, $r80, $r81;
        org.apache.lucene.store.Directory r4, $r41, $r44;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z17;
        org.apache.lucene.index.SegmentInfos r2;
        java.util.List r1;
        org.apache.lucene.index.SegmentCoreReaders $r35;
        java.util.HashMap $r74;
        org.apache.lucene.index.StandardDirectoryReader $r82;
        int $i0, $i1, $i2, i3, $i4, $i5, $i9, $i10, $i11, i12, i13, i14, $i16;
        org.apache.lucene.index.SegmentReader $r11, $r12, $r20, $r21, $r22, $r25, $r28, $r33, $r40, $r46, $r57, $r58, $r59, $r66, $r67, $r68, r71, $r75, $r78;
        java.lang.Object $r8, $r10, $r49;

        r4 := @parameter0: org.apache.lucene.store.Directory;

        r2 := @parameter1: org.apache.lucene.index.SegmentInfos;

        r1 := @parameter2: java.util.List;

        i3 := @parameter3: int;

        $r74 = new java.util.HashMap;

        specialinvoke $r74.<java.util.HashMap: void <init>()>();

        if r1 == null goto label02;

        i12 = 0;

        $i9 = interfaceinvoke r1.<java.util.List: int size()>();

     label01:
        if i12 >= $i9 goto label02;

        $r49 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i12);

        r71 = (org.apache.lucene.index.SegmentReader) $r49;

        $r50 = virtualinvoke r71.<org.apache.lucene.index.SegmentReader: java.lang.String getSegmentName()>();

        $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12);

        interfaceinvoke $r74.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r50, $r51);

        i12 = i12 + 1;

        goto label01;

     label02:
        $i0 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfos: int size()>();

        $r47 = newarray (org.apache.lucene.index.SegmentReader)[$i0];

        $i1 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfos: int size()>();

        $r48 = newarray (boolean)[$i1];

        $i2 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfos: int size()>();

        i13 = $i2 - 1;

     label03:
        if i13 < 0 goto label50;

        $r5 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i13);

        $r6 = $r5.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r7 = $r6.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r8 = interfaceinvoke $r74.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r9 = (java.lang.Integer) $r8;

        if r9 != null goto label04;

        $r47[i13] = null;

        goto label05;

     label04:
        $i4 = virtualinvoke r9.<java.lang.Integer: int intValue()>();

        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i4);

        $r11 = (org.apache.lucene.index.SegmentReader) $r10;

        $r47[i13] = $r11;

     label05:
        z17 = 0;

        r72 = null;

     label06:
        $r12 = $r47[i13];

        if $r12 == null goto label07;

        $r23 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i13);

        $r24 = $r23.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $z4 = virtualinvoke $r24.<org.apache.lucene.index.SegmentInfo: boolean getUseCompoundFile()>();

        $r25 = $r47[i13];

        $r26 = virtualinvoke $r25.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentInfoPerCommit getSegmentInfo()>();

        $r27 = $r26.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $z5 = virtualinvoke $r27.<org.apache.lucene.index.SegmentInfo: boolean getUseCompoundFile()>();

        if $z4 == $z5 goto label08;

     label07:
        $r75 = new org.apache.lucene.index.SegmentReader;

        $r14 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i13);

        $r15 = <org.apache.lucene.store.IOContext: org.apache.lucene.store.IOContext READ>;

        specialinvoke $r75.<org.apache.lucene.index.SegmentReader: void <init>(org.apache.lucene.index.SegmentInfoPerCommit,int,org.apache.lucene.store.IOContext)>($r14, i3, $r15);

        $r48[i13] = 0;

        $r47[i13] = $r75;

        goto label12;

     label08:
        $r28 = $r47[i13];

        $r29 = virtualinvoke $r28.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentInfoPerCommit getSegmentInfo()>();

        $l6 = virtualinvoke $r29.<org.apache.lucene.index.SegmentInfoPerCommit: long getDelGen()>();

        $r30 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i13);

        $l7 = virtualinvoke $r30.<org.apache.lucene.index.SegmentInfoPerCommit: long getDelGen()>();

        $b8 = $l6 cmp $l7;

        if $b8 != 0 goto label09;

        $r48[i13] = 1;

        $r46 = $r47[i13];

        virtualinvoke $r46.<org.apache.lucene.index.SegmentReader: void incRef()>();

        goto label12;

     label09:
        $r48[i13] = 0;

        $z6 = <org.apache.lucene.index.StandardDirectoryReader: boolean $assertionsDisabled>;

        if $z6 != 0 goto label10;

        $r38 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i13);

        $r39 = $r38.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r41 = $r39.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        $r40 = $r47[i13];

        $r42 = virtualinvoke $r40.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentInfoPerCommit getSegmentInfo()>();

        $r43 = $r42.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r44 = $r43.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        if $r41 == $r44 goto label10;

        $r76 = new java.lang.AssertionError;

        specialinvoke $r76.<java.lang.AssertionError: void <init>()>();

        throw $r76;

     label10:
        $z7 = <org.apache.lucene.index.StandardDirectoryReader: boolean $assertionsDisabled>;

        if $z7 != 0 goto label11;

        $r36 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i13);

        $z8 = virtualinvoke $r36.<org.apache.lucene.index.SegmentInfoPerCommit: boolean hasDeletions()>();

        if $z8 != 0 goto label11;

        $r77 = new java.lang.AssertionError;

        specialinvoke $r77.<java.lang.AssertionError: void <init>()>();

        throw $r77;

     label11:
        $r78 = new org.apache.lucene.index.SegmentReader;

        $r32 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfos: org.apache.lucene.index.SegmentInfoPerCommit info(int)>(i13);

        $r33 = $r47[i13];

        $r35 = $r33.<org.apache.lucene.index.SegmentReader: org.apache.lucene.index.SegmentCoreReaders core>;

        $r34 = <org.apache.lucene.store.IOContext: org.apache.lucene.store.IOContext READ>;

        specialinvoke $r78.<org.apache.lucene.index.SegmentReader: void <init>(org.apache.lucene.index.SegmentInfoPerCommit,org.apache.lucene.index.SegmentCoreReaders,org.apache.lucene.store.IOContext)>($r32, $r35, $r34);

        $r47[i13] = $r78;

     label12:
        z17 = 1;

     label13:
        if 1 != 0 goto label20;

        i13 = i13 + 1;

     label14:
        $i5 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfos: int size()>();

        if i13 >= $i5 goto label20;

        $r20 = $r47[i13];

        if $r20 == null goto label19;

     label15:
        $z3 = $r48[i13];

        if $z3 != 0 goto label16;

        $r22 = $r47[i13];

        virtualinvoke $r22.<org.apache.lucene.index.SegmentReader: void close()>();

        goto label17;

     label16:
        $r21 = $r47[i13];

        virtualinvoke $r21.<org.apache.lucene.index.SegmentReader: void decRef()>();

     label17:
        goto label19;

     label18:
        $r70 := @caughtexception;

        if r72 != null goto label19;

        r72 = $r70;

     label19:
        i13 = i13 + 1;

        goto label14;

     label20:
        if r72 == null goto label49;

        $z0 = r72 instanceof java.io.IOException;

        if $z0 == 0 goto label21;

        $r19 = (java.io.IOException) r72;

        throw $r19;

     label21:
        $z1 = r72 instanceof java.lang.RuntimeException;

        if $z1 == 0 goto label22;

        $r18 = (java.lang.RuntimeException) r72;

        throw $r18;

     label22:
        $z2 = r72 instanceof java.lang.Error;

        if $z2 == 0 goto label23;

        $r17 = (java.lang.Error) r72;

        throw $r17;

     label23:
        $r79 = new java.lang.RuntimeException;

        specialinvoke $r79.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r72);

        throw $r79;

     label24:
        $r69 := @caughtexception;

        r73 = $r69;

     label25:
        if 0 != 0 goto label32;

        i13 = i13 + 1;

     label26:
        $i11 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfos: int size()>();

        if i13 >= $i11 goto label32;

        $r66 = $r47[i13];

        if $r66 == null goto label31;

     label27:
        $z16 = $r48[i13];

        if $z16 != 0 goto label28;

        $r68 = $r47[i13];

        virtualinvoke $r68.<org.apache.lucene.index.SegmentReader: void close()>();

        goto label29;

     label28:
        $r67 = $r47[i13];

        virtualinvoke $r67.<org.apache.lucene.index.SegmentReader: void decRef()>();

     label29:
        goto label31;

     label30:
        $r61 := @caughtexception;

        if r73 != null goto label31;

        r73 = $r61;

     label31:
        i13 = i13 + 1;

        goto label26;

     label32:
        if r73 == null goto label49;

        $z13 = r73 instanceof java.io.IOException;

        if $z13 == 0 goto label33;

        $r65 = (java.io.IOException) r73;

        throw $r65;

     label33:
        $z14 = r73 instanceof java.lang.RuntimeException;

        if $z14 == 0 goto label34;

        $r64 = (java.lang.RuntimeException) r73;

        throw $r64;

     label34:
        $z15 = r73 instanceof java.lang.Error;

        if $z15 == 0 goto label35;

        $r63 = (java.lang.Error) r73;

        throw $r63;

     label35:
        $r80 = new java.lang.RuntimeException;

        specialinvoke $r80.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r73);

        throw $r80;

     label36:
        $r60 := @caughtexception;

     label37:
        if z17 != 0 goto label44;

        i14 = i13 + 1;

     label38:
        $i10 = virtualinvoke r2.<org.apache.lucene.index.SegmentInfos: int size()>();

        if i14 >= $i10 goto label44;

        $r57 = $r47[i14];

        if $r57 == null goto label43;

     label39:
        $z12 = $r48[i14];

        if $z12 != 0 goto label40;

        $r59 = $r47[i14];

        virtualinvoke $r59.<org.apache.lucene.index.SegmentReader: void close()>();

        goto label41;

     label40:
        $r58 = $r47[i14];

        virtualinvoke $r58.<org.apache.lucene.index.SegmentReader: void decRef()>();

     label41:
        goto label43;

     label42:
        $r52 := @caughtexception;

        if r72 != null goto label43;

        r72 = $r52;

     label43:
        i14 = i14 + 1;

        goto label38;

     label44:
        if r72 == null goto label48;

        $z9 = r72 instanceof java.io.IOException;

        if $z9 == 0 goto label45;

        $r56 = (java.io.IOException) r72;

        throw $r56;

     label45:
        $z10 = r72 instanceof java.lang.RuntimeException;

        if $z10 == 0 goto label46;

        $r55 = (java.lang.RuntimeException) r72;

        throw $r55;

     label46:
        $z11 = r72 instanceof java.lang.Error;

        if $z11 == 0 goto label47;

        $r54 = (java.lang.Error) r72;

        throw $r54;

     label47:
        $r81 = new java.lang.RuntimeException;

        specialinvoke $r81.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r72);

        throw $r81;

     label48:
        throw $r60;

     label49:
        $i16 = (int) -1;

        i13 = i13 + $i16;

        goto label03;

     label50:
        $r82 = new org.apache.lucene.index.StandardDirectoryReader;

        specialinvoke $r82.<org.apache.lucene.index.StandardDirectoryReader: void <init>(org.apache.lucene.store.Directory,org.apache.lucene.index.AtomicReader[],org.apache.lucene.index.IndexWriter,org.apache.lucene.index.SegmentInfos,int,boolean)>(r4, $r47, null, r2, i3, 0);

        return $r82;

        catch java.lang.Throwable from label15 to label17 with label18;
        catch java.lang.Throwable from label06 to label13 with label24;
        catch java.lang.Throwable from label27 to label29 with label30;
        catch java.lang.Throwable from label24 to label25 with label36;
        catch java.lang.Throwable from label39 to label41 with label42;
        catch java.lang.Throwable from label36 to label37 with label36;
    }

    public java.lang.String toString()
    {
        long $l0;
        org.apache.lucene.index.StandardDirectoryReader r1;
        java.lang.String $r3, $r5, $r9;
        boolean $z0;
        java.util.Iterator $r8;
        org.apache.lucene.index.SegmentInfos $r4, $r14;
        org.apache.lucene.index.IndexWriter $r6;
        java.util.List $r7;
        java.lang.StringBuilder $r0, $r12, $r13;
        java.lang.Class $r2;
        java.lang.Object $r10;
        org.apache.lucene.index.AtomicReader r11;

        r1 := @this: org.apache.lucene.index.StandardDirectoryReader;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        $r4 = r1.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.SegmentInfos: java.lang.String getSegmentsFileName()>();

        if $r5 == null goto label1;

        $r12 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r14 = r1.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $l0 = virtualinvoke $r14.<org.apache.lucene.index.SegmentInfos: long getVersion()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

     label1:
        $r6 = r1.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.IndexWriter writer>;

        if $r6 == null goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":nrt");

     label2:
        $r7 = virtualinvoke r1.<org.apache.lucene.index.StandardDirectoryReader: java.util.List getSequentialSubReaders()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r11 = (org.apache.lucene.index.AtomicReader) $r10;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        goto label3;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    protected org.apache.lucene.index.DirectoryReader doOpenIfChanged() throws java.io.IOException
    {
        org.apache.lucene.index.StandardDirectoryReader r0;
        org.apache.lucene.index.DirectoryReader $r1;

        r0 := @this: org.apache.lucene.index.StandardDirectoryReader;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.DirectoryReader doOpenIfChanged(org.apache.lucene.index.IndexCommit)>(null);

        return $r1;
    }

    protected org.apache.lucene.index.DirectoryReader doOpenIfChanged(org.apache.lucene.index.IndexCommit) throws java.io.IOException
    {
        org.apache.lucene.index.IndexCommit r2;
        org.apache.lucene.index.StandardDirectoryReader r0;
        org.apache.lucene.index.IndexWriter $r1;
        org.apache.lucene.index.DirectoryReader $r3, $r4;

        r0 := @this: org.apache.lucene.index.StandardDirectoryReader;

        r2 := @parameter0: org.apache.lucene.index.IndexCommit;

        virtualinvoke r0.<org.apache.lucene.index.StandardDirectoryReader: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.IndexWriter writer>;

        if $r1 == null goto label1;

        $r4 = specialinvoke r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.DirectoryReader doOpenFromWriter(org.apache.lucene.index.IndexCommit)>(r2);

        return $r4;

     label1:
        $r3 = specialinvoke r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.DirectoryReader doOpenNoWriter(org.apache.lucene.index.IndexCommit)>(r2);

        return $r3;
    }

    protected org.apache.lucene.index.DirectoryReader doOpenIfChanged(org.apache.lucene.index.IndexWriter, boolean) throws java.io.IOException
    {
        org.apache.lucene.index.StandardDirectoryReader r0;
        org.apache.lucene.index.IndexWriter r1, $r2;
        org.apache.lucene.index.DirectoryReader $r3, $r4;
        boolean z0, $z1;

        r0 := @this: org.apache.lucene.index.StandardDirectoryReader;

        r1 := @parameter0: org.apache.lucene.index.IndexWriter;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.apache.lucene.index.StandardDirectoryReader: void ensureOpen()>();

        $r2 = r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.IndexWriter writer>;

        if r1 != $r2 goto label1;

        $z1 = r0.<org.apache.lucene.index.StandardDirectoryReader: boolean applyAllDeletes>;

        if z0 != $z1 goto label1;

        $r4 = specialinvoke r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.DirectoryReader doOpenFromWriter(org.apache.lucene.index.IndexCommit)>(null);

        return $r4;

     label1:
        $r3 = virtualinvoke r1.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DirectoryReader getReader(boolean)>(z0);

        return $r3;
    }

    private org.apache.lucene.index.DirectoryReader doOpenFromWriter(org.apache.lucene.index.IndexCommit) throws java.io.IOException
    {
        org.apache.lucene.index.IndexCommit r0;
        org.apache.lucene.index.DirectoryReader $r5, $r7;
        long $l0, $l1;
        org.apache.lucene.index.SegmentInfos $r2, $r6;
        org.apache.lucene.index.StandardDirectoryReader r1;
        org.apache.lucene.index.IndexWriter $r3, $r4;
        byte $b2;
        boolean $z0, $z1;

        r1 := @this: org.apache.lucene.index.StandardDirectoryReader;

        r0 := @parameter0: org.apache.lucene.index.IndexCommit;

        if r0 == null goto label1;

        $r7 = specialinvoke r1.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.DirectoryReader doOpenFromCommit(org.apache.lucene.index.IndexCommit)>(r0);

        return $r7;

     label1:
        $r3 = r1.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.IndexWriter writer>;

        $r2 = r1.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $z0 = virtualinvoke $r3.<org.apache.lucene.index.IndexWriter: boolean nrtIsCurrent(org.apache.lucene.index.SegmentInfos)>($r2);

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r4 = r1.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.IndexWriter writer>;

        $z1 = r1.<org.apache.lucene.index.StandardDirectoryReader: boolean applyAllDeletes>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.IndexWriter: org.apache.lucene.index.DirectoryReader getReader(boolean)>($z1);

        $l0 = virtualinvoke $r5.<org.apache.lucene.index.DirectoryReader: long getVersion()>();

        $r6 = r1.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $l1 = virtualinvoke $r6.<org.apache.lucene.index.SegmentInfos: long getVersion()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        virtualinvoke $r5.<org.apache.lucene.index.DirectoryReader: void decRef()>();

        return null;

     label3:
        return $r5;
    }

    private org.apache.lucene.index.DirectoryReader doOpenNoWriter(org.apache.lucene.index.IndexCommit) throws java.io.IOException
    {
        org.apache.lucene.index.IndexCommit r0;
        org.apache.lucene.index.DirectoryReader $r9;
        java.io.IOException $r8;
        org.apache.lucene.index.SegmentInfos $r4, $r6;
        org.apache.lucene.index.StandardDirectoryReader r1;
        org.apache.lucene.store.Directory $r2, $r3;
        java.lang.String $r5, $r7;
        boolean $z0, $z1;

        r1 := @this: org.apache.lucene.index.StandardDirectoryReader;

        r0 := @parameter0: org.apache.lucene.index.IndexCommit;

        if r0 != null goto label1;

        $z1 = virtualinvoke r1.<org.apache.lucene.index.StandardDirectoryReader: boolean isCurrent()>();

        if $z1 == 0 goto label3;

        return null;

     label1:
        $r2 = r1.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.store.Directory directory>;

        $r3 = virtualinvoke r0.<org.apache.lucene.index.IndexCommit: org.apache.lucene.store.Directory getDirectory()>();

        if $r2 == $r3 goto label2;

        $r8 = new java.io.IOException;

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("the specified commit does not match the specified Directory");

        throw $r8;

     label2:
        $r4 = r1.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.SegmentInfos segmentInfos>;

        if $r4 == null goto label3;

        $r5 = virtualinvoke r0.<org.apache.lucene.index.IndexCommit: java.lang.String getSegmentsFileName()>();

        $r6 = r1.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r7 = virtualinvoke $r6.<org.apache.lucene.index.SegmentInfos: java.lang.String getSegmentsFileName()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label3;

        return null;

     label3:
        $r9 = specialinvoke r1.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.DirectoryReader doOpenFromCommit(org.apache.lucene.index.IndexCommit)>(r0);

        return $r9;
    }

    private org.apache.lucene.index.DirectoryReader doOpenFromCommit(org.apache.lucene.index.IndexCommit) throws java.io.IOException
    {
        org.apache.lucene.index.IndexCommit r3;
        org.apache.lucene.index.StandardDirectoryReader r1;
        org.apache.lucene.store.Directory $r2;
        org.apache.lucene.index.DirectoryReader $r5;
        org.apache.lucene.index.StandardDirectoryReader$2 $r0;
        java.lang.Object $r4;

        r1 := @this: org.apache.lucene.index.StandardDirectoryReader;

        r3 := @parameter0: org.apache.lucene.index.IndexCommit;

        $r0 = new org.apache.lucene.index.StandardDirectoryReader$2;

        $r2 = r1.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.store.Directory directory>;

        specialinvoke $r0.<org.apache.lucene.index.StandardDirectoryReader$2: void <init>(org.apache.lucene.index.StandardDirectoryReader,org.apache.lucene.store.Directory)>(r1, $r2);

        $r4 = virtualinvoke $r0.<org.apache.lucene.index.StandardDirectoryReader$2: java.lang.Object run(org.apache.lucene.index.IndexCommit)>(r3);

        $r5 = (org.apache.lucene.index.DirectoryReader) $r4;

        return $r5;
    }

    org.apache.lucene.index.DirectoryReader doOpenIfChanged(org.apache.lucene.index.SegmentInfos) throws java.io.IOException
    {
        org.apache.lucene.index.StandardDirectoryReader r0;
        java.util.List $r3;
        org.apache.lucene.store.Directory $r2;
        org.apache.lucene.index.DirectoryReader $r4;
        int $i0;
        org.apache.lucene.index.SegmentInfos r1;

        r0 := @this: org.apache.lucene.index.StandardDirectoryReader;

        r1 := @parameter0: org.apache.lucene.index.SegmentInfos;

        $r2 = r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.store.Directory directory>;

        $r3 = virtualinvoke r0.<org.apache.lucene.index.StandardDirectoryReader: java.util.List getSequentialSubReaders()>();

        $i0 = r0.<org.apache.lucene.index.StandardDirectoryReader: int termInfosIndexDivisor>;

        $r4 = staticinvoke <org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.DirectoryReader open(org.apache.lucene.store.Directory,org.apache.lucene.index.SegmentInfos,java.util.List,int)>($r2, r1, $r3, $i0);

        return $r4;
    }

    public long getVersion()
    {
        org.apache.lucene.index.StandardDirectoryReader r0;
        long $l0;
        org.apache.lucene.index.SegmentInfos $r1;

        r0 := @this: org.apache.lucene.index.StandardDirectoryReader;

        virtualinvoke r0.<org.apache.lucene.index.StandardDirectoryReader: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.index.SegmentInfos: long getVersion()>();

        return $l0;
    }

    public boolean isCurrent() throws java.io.IOException
    {
        long $l0, $l1;
        org.apache.lucene.index.SegmentInfos $r2, $r4, $r6;
        org.apache.lucene.index.StandardDirectoryReader r0;
        org.apache.lucene.index.IndexWriter $r1, $r5, $r7;
        byte $b2;
        org.apache.lucene.store.Directory $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.lucene.index.StandardDirectoryReader;

        virtualinvoke r0.<org.apache.lucene.index.StandardDirectoryReader: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.IndexWriter writer>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.IndexWriter writer>;

        $z0 = virtualinvoke $r5.<org.apache.lucene.index.IndexWriter: boolean isClosed()>();

        if $z0 == 0 goto label4;

     label1:
        $r2 = new org.apache.lucene.index.SegmentInfos;

        specialinvoke $r2.<org.apache.lucene.index.SegmentInfos: void <init>()>();

        $r3 = r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.store.Directory directory>;

        virtualinvoke $r2.<org.apache.lucene.index.SegmentInfos: void read(org.apache.lucene.store.Directory)>($r3);

        $l0 = virtualinvoke $r2.<org.apache.lucene.index.SegmentInfos: long getVersion()>();

        $r4 = r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $l1 = virtualinvoke $r4.<org.apache.lucene.index.SegmentInfos: long getVersion()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;

     label4:
        $r7 = r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.IndexWriter writer>;

        $r6 = r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $z1 = virtualinvoke $r7.<org.apache.lucene.index.IndexWriter: boolean nrtIsCurrent(org.apache.lucene.index.SegmentInfos)>($r6);

        return $z1;
    }

    protected void doClose() throws java.io.IOException
    {
        java.lang.Throwable $r11, r12;
        java.lang.Error $r5;
        org.apache.lucene.index.StandardDirectoryReader r0;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r2;
        java.io.IOException $r7;
        java.lang.RuntimeException $r4, $r6;
        java.util.List $r1;
        org.apache.lucene.index.IndexWriter $r3, $r8;
        java.lang.Object $r9;
        org.apache.lucene.index.AtomicReader r10;

        r0 := @this: org.apache.lucene.index.StandardDirectoryReader;

        r12 = null;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.StandardDirectoryReader: java.util.List getSequentialSubReaders()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r9 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.lucene.index.AtomicReader) $r9;

     label02:
        virtualinvoke r10.<org.apache.lucene.index.AtomicReader: void decRef()>();

     label03:
        goto label05;

     label04:
        $r11 := @caughtexception;

        if r12 != null goto label05;

        r12 = $r11;

     label05:
        goto label01;

     label06:
        $r3 = r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.IndexWriter writer>;

        if $r3 == null goto label07;

        $r8 = r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.IndexWriter writer>;

        virtualinvoke $r8.<org.apache.lucene.index.IndexWriter: void deletePendingFiles()>();

     label07:
        if r12 == null goto label11;

        $z1 = r12 instanceof java.io.IOException;

        if $z1 == 0 goto label08;

        $r7 = (java.io.IOException) r12;

        throw $r7;

     label08:
        $z2 = r12 instanceof java.lang.RuntimeException;

        if $z2 == 0 goto label09;

        $r6 = (java.lang.RuntimeException) r12;

        throw $r6;

     label09:
        $z3 = r12 instanceof java.lang.Error;

        if $z3 == 0 goto label10;

        $r5 = (java.lang.Error) r12;

        throw $r5;

     label10:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r12);

        throw $r4;

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label04;
    }

    public org.apache.lucene.index.IndexCommit getIndexCommit() throws java.io.IOException
    {
        org.apache.lucene.index.StandardDirectoryReader r0;
        org.apache.lucene.index.StandardDirectoryReader$ReaderCommit $r1;
        org.apache.lucene.store.Directory $r2;
        org.apache.lucene.index.SegmentInfos $r3;

        r0 := @this: org.apache.lucene.index.StandardDirectoryReader;

        virtualinvoke r0.<org.apache.lucene.index.StandardDirectoryReader: void ensureOpen()>();

        $r1 = new org.apache.lucene.index.StandardDirectoryReader$ReaderCommit;

        $r3 = r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.index.SegmentInfos segmentInfos>;

        $r2 = r0.<org.apache.lucene.index.StandardDirectoryReader: org.apache.lucene.store.Directory directory>;

        specialinvoke $r1.<org.apache.lucene.index.StandardDirectoryReader$ReaderCommit: void <init>(org.apache.lucene.index.SegmentInfos,org.apache.lucene.store.Directory)>($r3, $r2);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/StandardDirectoryReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.StandardDirectoryReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
