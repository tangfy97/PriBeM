public abstract class com.hp.hpl.jena.sparql.expr.ExprNode extends java.lang.Object implements com.hp.hpl.jena.sparql.expr.Expr
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isSatisfied(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r4;
        com.hp.hpl.jena.sparql.expr.ExprNode r0;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprNode: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean booleanEffectiveValue(com.hp.hpl.jena.sparql.expr.NodeValue)>($r3);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch com.hp.hpl.jena.sparql.expr.ExprEvalException from label1 to label2 with label3;
    }

    public boolean isExpr()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        return 1;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr getExpr()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        return r0;
    }

    public abstract com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv);

    public java.util.Set getVarsMentioned()
    {
        java.util.Set $r1;
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprVars: java.util.Set getVarsMentioned(com.hp.hpl.jena.sparql.expr.Expr)>(r0);

        return $r1;
    }

    public void varsMentioned(java.util.Collection)
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r1;
        java.util.Collection r0;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        r0 := @parameter0: java.util.Collection;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprVars: void varsMentioned(java.util.Collection,com.hp.hpl.jena.sparql.expr.Expr)>(r0, r1);

        return;
    }

    public java.util.Set getVarNamesMentioned()
    {
        java.util.Set $r1;
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprVars: java.util.Set getVarNamesMentioned(com.hp.hpl.jena.sparql.expr.Expr)>(r0);

        return $r1;
    }

    public void varNamesMentioned(java.util.Collection)
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r1;
        java.util.Collection r0;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        r0 := @parameter0: java.util.Collection;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprVars: void varNamesMentioned(java.util.Collection,com.hp.hpl.jena.sparql.expr.Expr)>(r0, r1);

        return;
    }

    public abstract int hashCode();

    public abstract boolean equals(java.lang.Object);

    protected static com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.NodeValue $r3;
        com.hp.hpl.jena.sparql.expr.Expr r0;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        r0 := @parameter2: com.hp.hpl.jena.sparql.expr.Expr;

        if r0 != null goto label1;

        return null;

     label1:
        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

        return $r3;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.Expr $r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprNode: com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding,boolean)>(r1, 0);

        return $r2;
    }

    public final com.hp.hpl.jena.sparql.expr.Expr deepCopy()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;
        com.hp.hpl.jena.sparql.expr.Expr $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprNode: com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding,boolean)>(null, 0);

        return $r1;
    }

    public abstract com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding, boolean);

    public abstract com.hp.hpl.jena.sparql.expr.Expr applyNodeTransform(com.hp.hpl.jena.sparql.graph.NodeTransform);

    public boolean isVariable()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        return 0;
    }

    public java.lang.String getVarName()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        return null;
    }

    public com.hp.hpl.jena.sparql.expr.ExprVar getExprVar()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        return null;
    }

    public com.hp.hpl.jena.sparql.core.Var asVar()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        return null;
    }

    public boolean isConstant()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        return 0;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue getConstant()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        return null;
    }

    public boolean isFunction()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        return 0;
    }

    public com.hp.hpl.jena.sparql.expr.ExprFunction getFunction()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        return null;
    }

    public boolean isGraphPattern()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        return 0;
    }

    public com.hp.hpl.jena.sparql.algebra.Op getGraphPattern()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        return null;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.sparql.expr.ExprNode r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprNode;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: java.lang.String fmtSPARQL(com.hp.hpl.jena.sparql.expr.Expr)>(r0);

        return $r1;
    }
}
