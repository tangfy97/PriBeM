public class com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty extends com.hp.hpl.jena.sparql.algebra.TransformCopy
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty r0;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r2;
        com.hp.hpl.jena.sparql.algebra.Op r1, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty: boolean isTableEmpty(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpGraph,com.hp.hpl.jena.sparql.algebra.Op)>(r2, r1);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpAssign, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty r0;
        com.hp.hpl.jena.sparql.algebra.Op r1, $r3;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty: boolean isTableEmpty(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpAssign,com.hp.hpl.jena.sparql.algebra.Op)>(r2, r1);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpExtend, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExtend r2;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty r0;
        com.hp.hpl.jena.sparql.algebra.Op r1, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty: boolean isTableEmpty(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpExtend,com.hp.hpl.jena.sparql.algebra.Op)>(r2, r1);

        return $r3;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpJoin, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty r0;
        com.hp.hpl.jena.sparql.algebra.op.OpJoin r4;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r2;
        com.hp.hpl.jena.sparql.algebra.Op r1, r3, $r5;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty;

        r4 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpJoin;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty: boolean isTableEmpty(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty: boolean isTableEmpty(com.hp.hpl.jena.sparql.algebra.Op)>(r3);

        if $z1 == 0 goto label2;

     label1:
        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable empty()>();

        return $r2;

     label2:
        $r5 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpJoin,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r4, r1, r3);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty r0;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r5;
        com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin r3;
        com.hp.hpl.jena.sparql.algebra.Op r1, r2, $r4;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty: boolean isTableEmpty(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable empty()>();

        return $r5;

     label1:
        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty: boolean isTableEmpty(com.hp.hpl.jena.sparql.algebra.Op)>(r2);

        if $z1 == 0 goto label2;

        return r1;

     label2:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r3, r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpMinus, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty r0;
        com.hp.hpl.jena.sparql.algebra.op.OpMinus r3;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r5;
        com.hp.hpl.jena.sparql.algebra.Op r1, r2, $r4;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty: boolean isTableEmpty(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable empty()>();

        return $r5;

     label1:
        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty: boolean isTableEmpty(com.hp.hpl.jena.sparql.algebra.Op)>(r2);

        if $z1 == 0 goto label2;

        return r1;

     label2:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpMinus,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r3, r1, r2);

        return $r4;
    }

    public com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpUnion, com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpUnion r3;
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty r0;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r5;
        com.hp.hpl.jena.sparql.algebra.Op r1, r2, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty;

        r3 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpUnion;

        r1 := @parameter1: com.hp.hpl.jena.sparql.algebra.Op;

        r2 := @parameter2: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty: boolean isTableEmpty(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        if $z0 == 0 goto label2;

        $z2 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty: boolean isTableEmpty(com.hp.hpl.jena.sparql.algebra.Op)>(r2);

        if $z2 == 0 goto label1;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable empty()>();

        return $r5;

     label1:
        return r2;

     label2:
        $z1 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty: boolean isTableEmpty(com.hp.hpl.jena.sparql.algebra.Op)>(r2);

        if $z1 == 0 goto label3;

        return r1;

     label3:
        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.TransformCopy: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpUnion,com.hp.hpl.jena.sparql.algebra.Op,com.hp.hpl.jena.sparql.algebra.Op)>(r3, r1, r2);

        return $r4;
    }

    private boolean isTableEmpty(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty r3;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r1;
        com.hp.hpl.jena.sparql.algebra.Table $r2;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.optimize.TransformPromoteTableEmpty;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpTable;

        if $z0 == 0 goto label1;

        $r1 = (com.hp.hpl.jena.sparql.algebra.op.OpTable) r0;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.Table getTable()>();

        $z1 = interfaceinvoke $r2.<com.hp.hpl.jena.sparql.algebra.Table: boolean isEmpty()>();

        return $z1;

     label1:
        return 0;
    }
}
