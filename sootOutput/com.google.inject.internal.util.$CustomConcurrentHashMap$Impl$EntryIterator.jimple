final class com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntryIterator extends com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$HashIterator implements java.util.Iterator
{
    final com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0;

    void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$Impl)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntryIterator r0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r1;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntryIterator;

        r1 := @parameter0: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntryIterator: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl this$0> = r1;

        specialinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$HashIterator: void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$Impl)>(r1);

        return;
    }

    public java.util.Map$Entry next()
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntryIterator r0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$WriteThroughEntry $r1;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntryIterator;

        $r1 = virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntryIterator: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$WriteThroughEntry nextEntry()>();

        return $r1;
    }

    public volatile java.lang.Object next()
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntryIterator r0;
        java.util.Map$Entry $r1;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntryIterator;

        $r1 = virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntryIterator: java.util.Map$Entry next()>();

        return $r1;
    }
}
