public final class com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data extends com.sun.xml.bind.v2.runtime.output.Pcdata
{
    private javax.activation.DataHandler dataHandler;
    private byte[] data;
    private int dataLen;
    private java.lang.String mimeType;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.Pcdata: void <init>()>();

        return;
    }

    public void set(byte[], int, java.lang.String)
    {
        byte[] r1;
        int i0;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;
        java.lang.String r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data> = r1;

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen> = i0;

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: javax.activation.DataHandler dataHandler> = null;

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: java.lang.String mimeType> = r2;

        return;
    }

    public void set(byte[], java.lang.String)
    {
        byte[] r1;
        int $i0;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;
        java.lang.String r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        $i0 = lengthof r1;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: void set(byte[],int,java.lang.String)>(r1, $i0, r2);

        return;
    }

    public void set(javax.activation.DataHandler)
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;
        java.lang.AssertionError $r2;
        javax.activation.DataHandler r1;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        r1 := @parameter0: javax.activation.DataHandler;

        $z0 = <com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: javax.activation.DataHandler dataHandler> = r1;

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data> = null;

        return;
    }

    public javax.activation.DataHandler getDataHandler()
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;
        javax.activation.DataHandler $r1, $r2, $r3;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data$1 $r4;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: javax.activation.DataHandler dataHandler>;

        if $r1 != null goto label1;

        $r3 = new javax.activation.DataHandler;

        $r4 = new com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data$1;

        specialinvoke $r4.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data$1: void <init>(com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data)>(r0);

        specialinvoke $r3.<javax.activation.DataHandler: void <init>(javax.activation.DataSource)>($r4);

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: javax.activation.DataHandler dataHandler> = $r3;

     label1:
        $r2 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: javax.activation.DataHandler dataHandler>;

        return $r2;
    }

    public byte[] getExact()
    {
        byte[] $r1, $r2, r3, $r4;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] get()>();

        $i1 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        $i0 = lengthof $r1;

        if $i1 == $i0 goto label1;

        $i2 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        r3 = newarray (byte)[$i2];

        $r4 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        $i3 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r3, 0, $i3);

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data> = r3;

     label1:
        $r2 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        return $r2;
    }

    public java.io.InputStream getInputStream() throws java.io.IOException
    {
        byte[] $r3;
        java.io.ByteArrayInputStream $r2;
        int $i0;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;
        javax.activation.DataHandler $r1, $r4;
        java.io.InputStream $r5;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: javax.activation.DataHandler dataHandler>;

        if $r1 == null goto label1;

        $r4 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: javax.activation.DataHandler dataHandler>;

        $r5 = virtualinvoke $r4.<javax.activation.DataHandler: java.io.InputStream getInputStream()>();

        return $r5;

     label1:
        $r2 = new java.io.ByteArrayInputStream;

        $r3 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        $i0 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        specialinvoke $r2.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>($r3, 0, $i0);

        return $r2;
    }

    public boolean hasData()
    {
        byte[] $r1;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public byte[] get()
    {
        com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx $r2;
        byte[] $r1, $r6, $r8;
        java.io.IOException $r7;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;
        javax.activation.DataHandler $r3;
        int $i0;
        javax.activation.DataSource $r4;
        java.io.InputStream $r5;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        if $r1 != null goto label4;

     label1:
        $r2 = new com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx;

        specialinvoke $r2.<com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx: void <init>(int)>(1024);

        $r3 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: javax.activation.DataHandler dataHandler>;

        $r4 = virtualinvoke $r3.<javax.activation.DataHandler: javax.activation.DataSource getDataSource()>();

        $r5 = interfaceinvoke $r4.<javax.activation.DataSource: java.io.InputStream getInputStream()>();

        virtualinvoke $r2.<com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx: void readFrom(java.io.InputStream)>($r5);

        virtualinvoke $r5.<java.io.InputStream: void close()>();

        $r6 = virtualinvoke $r2.<com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx: byte[] getBuffer()>();

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data> = $r6;

        $i0 = virtualinvoke $r2.<com.sun.xml.bind.v2.util.ByteArrayOutputStreamEx: int size()>();

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen> = $i0;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen> = 0;

     label4:
        $r8 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        return $r8;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public int getDataLen()
    {
        int $i0;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        $i0 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        return $i0;
    }

    public java.lang.String getMimeType()
    {
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: java.lang.String mimeType>;

        if $r1 != null goto label1;

        return "application/octet-stream";

     label1:
        $r2 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: java.lang.String mimeType>;

        return $r2;
    }

    public int length()
    {
        int $i0, $i1, $i2, $i3;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] get()>();

        $i0 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        $i1 = $i0 + 2;

        $i2 = $i1 / 3;

        $i3 = $i2 * 4;

        return $i3;
    }

    public char charAt(int)
    {
        byte[] $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.IllegalStateException $r8;
        byte $b7, $b8, $b15, $b24, $b25, $b32, b35, b36, b37;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i10, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i21, $i22, $i23, $i26, $i27, $i28, $i29, $i31, $i33, $i38, $i39, $i40, $i41;
        char $c9, $c20, $c30, $c34;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        i0 := @parameter0: int;

        i1 = i0 % 4;

        $i2 = i0 / 4;

        i3 = $i2 * 3;

        tableswitch(i1)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label05;
            case 3: goto label09;
            default: goto label11;
        };

     label01:
        $r6 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        $b32 = $r6[i3];

        $i38 = (int) $b32;

        $i33 = $i38 >> 2;

        $c34 = staticinvoke <com.sun.xml.bind.DatatypeConverterImpl: char encode(int)>($i33);

        return $c34;

     label02:
        $i23 = i3 + 1;

        $i22 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        if $i23 >= $i22 goto label03;

        $r5 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        $i31 = i3 + 1;

        b35 = $r5[$i31];

        goto label04;

     label03:
        b35 = 0;

     label04:
        $r4 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        $b24 = $r4[i3];

        $b25 = $b24 & 3;

        $i39 = (int) $b25;

        $i28 = $i39 << 4;

        $i26 = b35 >> 4;

        $i27 = $i26 & 15;

        $i29 = $i28 | $i27;

        $c30 = staticinvoke <com.sun.xml.bind.DatatypeConverterImpl: char encode(int)>($i29);

        return $c30;

     label05:
        $i11 = i3 + 1;

        $i10 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        if $i11 >= $i10 goto label08;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        $i12 = i3 + 1;

        b36 = $r2[$i12];

        $i14 = i3 + 2;

        $i13 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        if $i14 >= $i13 goto label06;

        $r3 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        $i21 = i3 + 2;

        b37 = $r3[$i21];

        goto label07;

     label06:
        b37 = 0;

     label07:
        $b15 = b36 & 15;

        $i40 = (int) $b15;

        $i18 = $i40 << 2;

        $i16 = b37 >> 6;

        $i17 = $i16 & 3;

        $i19 = $i18 | $i17;

        $c20 = staticinvoke <com.sun.xml.bind.DatatypeConverterImpl: char encode(int)>($i19);

        return $c20;

     label08:
        return 61;

     label09:
        $i5 = i3 + 2;

        $i4 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        if $i5 >= $i4 goto label10;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        $i6 = i3 + 2;

        $b7 = $r1[$i6];

        $b8 = $b7 & 63;

        $i41 = (int) $b8;

        $c9 = staticinvoke <com.sun.xml.bind.DatatypeConverterImpl: char encode(int)>($i41);

        return $c9;

     label10:
        return 61;

     label11:
        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;
    }

    public java.lang.CharSequence subSequence(int, int)
    {
        int i0, i1, i3;
        java.lang.StringBuilder $r0;
        char $c2;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r1;

        r1 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] get()>();

        i3 = i0;

     label1:
        if i3 >= i1 goto label2;

        $c2 = virtualinvoke r1.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: char charAt(int)>(i3);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public java.lang.String toString()
    {
        byte[] $r1;
        int $i0;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;
        java.lang.String $r2;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] get()>();

        $r1 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        $i0 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        $r2 = staticinvoke <com.sun.xml.bind.DatatypeConverterImpl: java.lang.String _printBase64Binary(byte[],int,int)>($r1, 0, $i0);

        return $r2;
    }

    public void writeTo(char[], int)
    {
        byte[] $r2;
        int i0, $i1;
        char[] r1;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] get()>();

        $r2 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        $i1 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        staticinvoke <com.sun.xml.bind.DatatypeConverterImpl: int _printBase64Binary(byte[],int,int,char[],int)>($r2, 0, $i1, r1, i0);

        return;
    }

    public void writeTo(com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput) throws java.io.IOException
    {
        byte[] $r2;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r1;
        int $i0;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] get()>();

        $r2 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        $i0 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        virtualinvoke r1.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void text(byte[],int)>($r2, $i0);

        return;
    }

    public void writeTo(javax.xml.stream.XMLStreamWriter) throws java.io.IOException, javax.xml.stream.XMLStreamException
    {
        byte[] $r2;
        int $i0;
        javax.xml.stream.XMLStreamWriter r1;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] get()>();

        $r2 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        $i0 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        staticinvoke <com.sun.xml.bind.DatatypeConverterImpl: void _printBase64Binary(byte[],int,int,javax.xml.stream.XMLStreamWriter)>($r2, 0, $i0, r1);

        return;
    }

    static byte[] access$000(com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data)
    {
        byte[] $r1;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;

        r0 := @parameter0: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: byte[] data>;

        return $r1;
    }

    static int access$100(com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data)
    {
        int $i0;
        com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data r0;

        r0 := @parameter0: com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data;

        $i0 = r0.<com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: int dataLen>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/runtime/unmarshaller/Base64Data;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.runtime.unmarshaller.Base64Data: boolean $assertionsDisabled> = $z1;

        return;
    }
}
