public class org.apache.xpath.axes.WalkingIterator extends org.apache.xpath.axes.LocPathIterator implements org.apache.xpath.ExpressionOwner
{
    protected org.apache.xpath.axes.AxesWalker m_lastUsedWalker;
    protected org.apache.xpath.axes.AxesWalker m_firstWalker;

    void <init>(org.apache.xpath.compiler.Compiler, int, int, boolean) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.WalkingIterator r0;
        org.apache.xpath.compiler.Compiler r1;
        int i0, i1, $i2;
        org.apache.xpath.axes.AxesWalker $r2, $r3;
        boolean z0;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        r1 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int,boolean)>(r1, i0, i1, z0);

        $i2 = staticinvoke <org.apache.xpath.compiler.OpMap: int getFirstChildPos(int)>(i0);

        if z0 == 0 goto label1;

        $r2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: org.apache.xpath.axes.AxesWalker loadWalkers(org.apache.xpath.axes.WalkingIterator,org.apache.xpath.compiler.Compiler,int,int)>(r0, r1, $i2, 0);

        r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker> = $r2;

        $r3 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_lastUsedWalker> = $r3;

     label1:
        return;
    }

    public void <init>(org.apache.xml.utils.PrefixResolver)
    {
        org.apache.xml.utils.PrefixResolver r1;
        org.apache.xpath.axes.WalkingIterator r0;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        r1 := @parameter0: org.apache.xml.utils.PrefixResolver;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void <init>(org.apache.xml.utils.PrefixResolver)>(r1);

        return;
    }

    public int getAnalysisBits()
    {
        int $i0, i1;
        org.apache.xpath.axes.AxesWalker $r1, r2;
        org.apache.xpath.axes.WalkingIterator r0;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        i1 = 0;

        $r1 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        if null == $r1 goto label3;

        r2 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        goto label2;

     label1:
        $i0 = virtualinvoke r2.<org.apache.xpath.axes.AxesWalker: int getAnalysisBits()>();

        i1 = i1 | $i0;

        r2 = virtualinvoke r2.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

     label2:
        if null != r2 goto label1;

     label3:
        return i1;
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.xpath.axes.AxesWalker $r3, $r4, $r5;
        java.lang.Object $r1;
        org.apache.xpath.axes.WalkingIterator r0, r2;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        $r1 = specialinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: java.lang.Object clone()>();

        r2 = (org.apache.xpath.axes.WalkingIterator) $r1;

        $r3 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        if null == $r3 goto label1;

        $r4 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        $r5 = virtualinvoke $r4.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker cloneDeep(org.apache.xpath.axes.WalkingIterator,java.util.Vector)>(r2, null);

        r2.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker> = $r5;

     label1:
        return r2;
    }

    public void reset()
    {
        int $i0;
        org.apache.xpath.axes.AxesWalker $r1, $r2, $r3;
        org.apache.xpath.axes.WalkingIterator r0;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void reset()>();

        $r1 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        if null == $r1 goto label1;

        $r2 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_lastUsedWalker> = $r2;

        $r3 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_context>;

        virtualinvoke $r3.<org.apache.xpath.axes.AxesWalker: void setRoot(int)>($i0);

     label1:
        return;
    }

    public void setRoot(int, java.lang.Object)
    {
        int i0;
        org.apache.xpath.axes.AxesWalker $r2, $r3, $r4;
        java.lang.Object r1;
        org.apache.xpath.axes.WalkingIterator r0;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void setRoot(int,java.lang.Object)>(i0, r1);

        $r2 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        if null == $r2 goto label1;

        $r3 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        virtualinvoke $r3.<org.apache.xpath.axes.AxesWalker: void setRoot(int)>(i0);

        $r4 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_lastUsedWalker> = $r4;

     label1:
        return;
    }

    public int nextNode()
    {
        org.apache.xpath.axes.WalkingIterator r0;
        org.apache.xpath.VariableStack $r2;
        org.apache.xpath.XPathContext $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i10;
        org.apache.xpath.axes.AxesWalker $r3, $r4;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        $z0 = r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean m_foundLast>;

        if $z0 == 0 goto label1;

        $i8 = (int) -1;

        return $i8;

     label1:
        $i0 = r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame>;

        $i10 = (int) -1;

        if $i10 != $i0 goto label2;

        $r4 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        $i5 = virtualinvoke $r4.<org.apache.xpath.axes.AxesWalker: int nextNode()>();

        $i6 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: int returnNextNode(int)>($i5);

        return $i6;

     label2:
        $r1 = r0.<org.apache.xpath.axes.LocPathIterator: org.apache.xpath.XPathContext m_execContext>;

        $r2 = virtualinvoke $r1.<org.apache.xpath.XPathContext: org.apache.xpath.VariableStack getVarStack()>();

        $i1 = virtualinvoke $r2.<org.apache.xpath.VariableStack: int getStackFrame()>();

        $i2 = r0.<org.apache.xpath.axes.LocPathIterator: int m_stackFrame>;

        virtualinvoke $r2.<org.apache.xpath.VariableStack: void setStackFrame(int)>($i2);

        $r3 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        $i3 = virtualinvoke $r3.<org.apache.xpath.axes.AxesWalker: int nextNode()>();

        $i4 = virtualinvoke r0.<org.apache.xpath.axes.LocPathIterator: int returnNextNode(int)>($i3);

        virtualinvoke $r2.<org.apache.xpath.VariableStack: void setStackFrame(int)>($i1);

        return $i4;
    }

    public final org.apache.xpath.axes.AxesWalker getFirstWalker()
    {
        org.apache.xpath.axes.AxesWalker $r1;
        org.apache.xpath.axes.WalkingIterator r0;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        $r1 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        return $r1;
    }

    public final void setFirstWalker(org.apache.xpath.axes.AxesWalker)
    {
        org.apache.xpath.axes.AxesWalker r1;
        org.apache.xpath.axes.WalkingIterator r0;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        r1 := @parameter0: org.apache.xpath.axes.AxesWalker;

        r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker> = r1;

        return;
    }

    public final void setLastUsedWalker(org.apache.xpath.axes.AxesWalker)
    {
        org.apache.xpath.axes.AxesWalker r1;
        org.apache.xpath.axes.WalkingIterator r0;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        r1 := @parameter0: org.apache.xpath.axes.AxesWalker;

        r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_lastUsedWalker> = r1;

        return;
    }

    public final org.apache.xpath.axes.AxesWalker getLastUsedWalker()
    {
        org.apache.xpath.axes.AxesWalker $r1;
        org.apache.xpath.axes.WalkingIterator r0;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        $r1 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_lastUsedWalker>;

        return $r1;
    }

    public void detach()
    {
        org.apache.xpath.axes.AxesWalker r1;
        org.apache.xpath.axes.WalkingIterator r0;
        boolean $z0;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        $z0 = r0.<org.apache.xpath.axes.LocPathIterator: boolean m_allowDetach>;

        if $z0 == 0 goto label3;

        r1 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        goto label2;

     label1:
        virtualinvoke r1.<org.apache.xpath.axes.AxesWalker: void detach()>();

        r1 = virtualinvoke r1.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

     label2:
        if null != r1 goto label1;

        r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_lastUsedWalker> = null;

        specialinvoke r0.<org.apache.xpath.axes.LocPathIterator: void detach()>();

     label3:
        return;
    }

    public void fixupVariables(java.util.Vector, int)
    {
        java.util.Vector r1;
        int i0, $i2;
        org.apache.xpath.axes.AxesWalker r2;
        org.apache.xpath.axes.WalkingIterator r0;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        r1 := @parameter0: java.util.Vector;

        i0 := @parameter1: int;

        $i2 = (int) -1;

        r0.<org.apache.xpath.axes.PredicatedNodeTest: int m_predicateIndex> = $i2;

        r2 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        goto label2;

     label1:
        virtualinvoke r2.<org.apache.xpath.axes.PredicatedNodeTest: void fixupVariables(java.util.Vector,int)>(r1, i0);

        r2 = virtualinvoke r2.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

     label2:
        if null != r2 goto label1;

        return;
    }

    public void callVisitors(org.apache.xpath.ExpressionOwner, org.apache.xpath.XPathVisitor)
    {
        org.apache.xpath.XPathVisitor r0;
        org.apache.xpath.axes.AxesWalker $r3, $r4;
        org.apache.xpath.axes.WalkingIterator r2;
        org.apache.xpath.ExpressionOwner r1;
        boolean $z0;

        r2 := @this: org.apache.xpath.axes.WalkingIterator;

        r1 := @parameter0: org.apache.xpath.ExpressionOwner;

        r0 := @parameter1: org.apache.xpath.XPathVisitor;

        $z0 = virtualinvoke r0.<org.apache.xpath.XPathVisitor: boolean visitLocationPath(org.apache.xpath.ExpressionOwner,org.apache.xpath.axes.LocPathIterator)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r2.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        if null == $r3 goto label1;

        $r4 = r2.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        virtualinvoke $r4.<org.apache.xpath.axes.AxesWalker: void callVisitors(org.apache.xpath.ExpressionOwner,org.apache.xpath.XPathVisitor)>(r2, r0);

     label1:
        return;
    }

    public org.apache.xpath.Expression getExpression()
    {
        org.apache.xpath.axes.AxesWalker $r1;
        org.apache.xpath.axes.WalkingIterator r0;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        $r1 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        return $r1;
    }

    public void setExpression(org.apache.xpath.Expression)
    {
        org.apache.xpath.Expression r0;
        org.apache.xpath.axes.AxesWalker $r2;
        org.apache.xpath.axes.WalkingIterator r1;

        r1 := @this: org.apache.xpath.axes.WalkingIterator;

        r0 := @parameter0: org.apache.xpath.Expression;

        virtualinvoke r0.<org.apache.xpath.Expression: void exprSetParent(org.apache.xpath.ExpressionNode)>(r1);

        $r2 = (org.apache.xpath.axes.AxesWalker) r0;

        r1.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker> = $r2;

        return;
    }

    public boolean deepEquals(org.apache.xpath.Expression)
    {
        org.apache.xpath.Expression r1;
        org.apache.xpath.axes.AxesWalker r3, r4;
        org.apache.xpath.axes.WalkingIterator r0, $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.xpath.axes.WalkingIterator;

        r1 := @parameter0: org.apache.xpath.Expression;

        $z0 = specialinvoke r0.<org.apache.xpath.axes.PredicatedNodeTest: boolean deepEquals(org.apache.xpath.Expression)>(r1);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r3 = r0.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        $r2 = (org.apache.xpath.axes.WalkingIterator) r1;

        r4 = $r2.<org.apache.xpath.axes.WalkingIterator: org.apache.xpath.axes.AxesWalker m_firstWalker>;

        goto label4;

     label2:
        $z1 = virtualinvoke r3.<org.apache.xpath.axes.AxesWalker: boolean deepEquals(org.apache.xpath.Expression)>(r4);

        if $z1 != 0 goto label3;

        return 0;

     label3:
        r3 = virtualinvoke r3.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

        r4 = virtualinvoke r4.<org.apache.xpath.axes.AxesWalker: org.apache.xpath.axes.AxesWalker getNextWalker()>();

     label4:
        if null == r3 goto label5;

        if null != r4 goto label2;

     label5:
        if null != r3 goto label6;

        if null == r4 goto label7;

     label6:
        return 0;

     label7:
        return 1;
    }
}
