final class org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData extends org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData
{
    private final org.waveprotocol.wave.model.wave.data.core.CoreWaveletData data;
    private final org.waveprotocol.wave.model.wave.data.DocumentFactory contentFactory;

    public void <init>(org.waveprotocol.wave.model.wave.data.core.CoreWaveletData, org.waveprotocol.wave.model.version.HashedVersion, org.waveprotocol.wave.model.wave.data.DocumentFactory)
    {
        org.waveprotocol.wave.model.id.WaveletName $r2, $r8;
        org.waveprotocol.wave.model.id.WaveId $r10;
        org.waveprotocol.wave.model.wave.data.core.CoreWaveletData r1;
        org.waveprotocol.wave.model.wave.data.impl.StubDocumentFactory $r9;
        org.waveprotocol.wave.model.id.WaveletId $r3;
        long $l0;
        org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r7;
        java.util.List $r4;
        org.waveprotocol.wave.model.wave.data.DocumentFactory r11;
        org.waveprotocol.wave.model.version.HashedVersion r6;
        java.lang.Object $r5;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.core.CoreWaveletData;

        r6 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        r11 := @parameter2: org.waveprotocol.wave.model.wave.data.DocumentFactory;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.core.CoreWaveletData: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r3 = $r2.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        $r4 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.core.CoreWaveletData: java.util.List getParticipants()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (org.waveprotocol.wave.model.wave.ParticipantId) $r5;

        $l0 = virtualinvoke r6.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $r8 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.core.CoreWaveletData: org.waveprotocol.wave.model.id.WaveletName getWaveletName()>();

        $r10 = $r8.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r9 = <org.waveprotocol.wave.model.wave.data.impl.StubDocumentFactory: org.waveprotocol.wave.model.wave.data.impl.StubDocumentFactory INSTANCE>;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData: void <init>(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId,long,long,org.waveprotocol.wave.model.version.HashedVersion,long,org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.wave.data.DocumentFactory)>($r3, $r7, 0L, $l0, r6, 0L, $r10, $r9);

        r0.<org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData: org.waveprotocol.wave.model.wave.data.core.CoreWaveletData data> = r1;

        r0.<org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData: org.waveprotocol.wave.model.wave.data.DocumentFactory contentFactory> = r11;

        return;
    }

    protected java.util.Set getMutableParticipants()
    {
        java.util.List $r2;
        org.waveprotocol.wave.model.wave.data.core.CoreWaveletData $r1;
        java.util.Set $r3;
        org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData: org.waveprotocol.wave.model.wave.data.core.CoreWaveletData data>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.core.CoreWaveletData: java.util.List getParticipants()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.Set immutableSet(java.util.Collection)>($r2);

        return $r3;
    }

    protected org.waveprotocol.wave.model.wave.data.impl.DataUtil$RawBlipData internalCreateDocument(java.lang.String, org.waveprotocol.wave.model.wave.ParticipantId, java.util.Collection, org.waveprotocol.wave.model.wave.data.DocumentOperationSink, long, long)
    {
        java.lang.UnsupportedOperationException $r0;
        java.util.Collection r4;
        long l0, l1;
        org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData r1;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        org.waveprotocol.wave.model.wave.data.DocumentOperationSink r5;
        java.lang.String r2;

        r1 := @this: org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r4 := @parameter2: java.util.Collection;

        r5 := @parameter3: org.waveprotocol.wave.model.wave.data.DocumentOperationSink;

        l0 := @parameter4: long;

        l1 := @parameter5: long;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CoreWrapperWaveletData doesn\'t support document creation");

        throw $r0;
    }

    public org.waveprotocol.wave.model.wave.data.impl.DataUtil$RawBlipData getDocument(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.data.core.CoreWaveletData $r5;
        org.waveprotocol.wave.model.document.operation.DocOp $r8;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r9;
        org.waveprotocol.wave.model.id.WaveletId $r4;
        org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData r2;
        org.waveprotocol.wave.model.wave.data.impl.DataUtil$RawBlipData $r0;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r3;
        java.util.Map $r6;
        org.waveprotocol.wave.model.wave.data.DocumentOperationSink $r10;
        java.lang.Object $r7;
        java.lang.String r1;

        r2 := @this: org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.waveprotocol.wave.model.wave.data.impl.DataUtil$RawBlipData;

        $r3 = r2.<org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData: org.waveprotocol.wave.model.wave.data.DocumentFactory contentFactory>;

        $r4 = virtualinvoke r2.<org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r5 = r2.<org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData: org.waveprotocol.wave.model.wave.data.core.CoreWaveletData data>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.wave.data.core.CoreWaveletData: java.util.Map getDocuments()>();

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (org.waveprotocol.wave.model.document.operation.DocOp) $r7;

        $r9 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.DocOpUtil: org.waveprotocol.wave.model.document.operation.DocInitialization asInitialization(org.waveprotocol.wave.model.document.operation.DocOp)>($r8);

        $r10 = interfaceinvoke $r3.<org.waveprotocol.wave.model.wave.data.DocumentFactory: org.waveprotocol.wave.model.wave.data.DocumentOperationSink create(org.waveprotocol.wave.model.id.WaveletId,java.lang.String,org.waveprotocol.wave.model.document.operation.DocInitialization)>($r4, r1, $r9);

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.data.impl.DataUtil$RawBlipData: void <init>(java.lang.String,org.waveprotocol.wave.model.wave.data.impl.AbstractWaveletData,org.waveprotocol.wave.model.wave.data.DocumentOperationSink)>(r1, r2, $r10);

        return $r0;
    }

    public java.util.Set getDocumentIds()
    {
        org.waveprotocol.wave.model.wave.data.core.CoreWaveletData $r1;
        java.util.Map $r2;
        java.util.Set $r3, $r4;
        org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData: org.waveprotocol.wave.model.wave.data.core.CoreWaveletData data>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.core.CoreWaveletData: java.util.Map getDocuments()>();

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r3);

        return $r4;
    }

    public volatile org.waveprotocol.wave.model.wave.data.BlipData getDocument(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.data.impl.DataUtil$RawBlipData $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData: org.waveprotocol.wave.model.wave.data.impl.DataUtil$RawBlipData getDocument(java.lang.String)>(r1);

        return $r2;
    }

    protected volatile org.waveprotocol.wave.model.wave.data.BlipData internalCreateDocument(java.lang.String, org.waveprotocol.wave.model.wave.ParticipantId, java.util.Collection, org.waveprotocol.wave.model.wave.data.DocumentOperationSink, long, long)
    {
        java.util.Collection r3;
        long l0, l1;
        org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData r0;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.wave.data.impl.DataUtil$RawBlipData $r5;
        org.waveprotocol.wave.model.wave.data.DocumentOperationSink r4;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter2: java.util.Collection;

        r4 := @parameter3: org.waveprotocol.wave.model.wave.data.DocumentOperationSink;

        l0 := @parameter4: long;

        l1 := @parameter5: long;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData: org.waveprotocol.wave.model.wave.data.impl.DataUtil$RawBlipData internalCreateDocument(java.lang.String,org.waveprotocol.wave.model.wave.ParticipantId,java.util.Collection,org.waveprotocol.wave.model.wave.data.DocumentOperationSink,long,long)>(r1, r2, r3, r4, l0, l1);

        return $r5;
    }

    public volatile org.waveprotocol.wave.model.wave.data.ReadableBlipData getDocument(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.data.impl.DataUtil$RawBlipData $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.DataUtil$CoreWrapperWaveletData: org.waveprotocol.wave.model.wave.data.impl.DataUtil$RawBlipData getDocument(java.lang.String)>(r1);

        return $r2;
    }
}
