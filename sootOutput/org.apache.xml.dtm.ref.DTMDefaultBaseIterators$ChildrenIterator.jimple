public final class org.apache.xml.dtm.ref.DTMDefaultBaseIterators$ChildrenIterator extends org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase
{
    private final org.apache.xml.dtm.ref.DTMDefaultBaseIterators this$0;

    public void <init>(org.apache.xml.dtm.ref.DTMDefaultBaseIterators)
    {
        org.apache.xml.dtm.ref.DTMDefaultBaseIterators$ChildrenIterator r0;
        org.apache.xml.dtm.ref.DTMDefaultBaseIterators r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBaseIterators$ChildrenIterator;

        r1 := @parameter0: org.apache.xml.dtm.ref.DTMDefaultBaseIterators;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: void <init>(org.apache.xml.dtm.ref.DTMDefaultBaseIterators)>(r1);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$ChildrenIterator: org.apache.xml.dtm.ref.DTMDefaultBaseIterators this$0> = r1;

        return;
    }

    public org.apache.xml.dtm.DTMAxisIterator setStartNode(int)
    {
        org.apache.xml.dtm.ref.DTMDefaultBaseIterators$ChildrenIterator r0;
        org.apache.xml.dtm.DTMAxisIterator $r3;
        org.apache.xml.dtm.ref.DTMDefaultBaseIterators $r1, $r2, $r4;
        int $i0, i1, $i2, $i4, $i6;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBaseIterators$ChildrenIterator;

        i1 := @parameter0: int;

        if i1 != 0 goto label1;

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$ChildrenIterator: org.apache.xml.dtm.ref.DTMDefaultBaseIterators this$0>;

        i1 = virtualinvoke $r4.<org.apache.xml.dtm.ref.DTMDefaultBase: int getDocument()>();

     label1:
        $z0 = r0.<org.apache.xml.dtm.ref.DTMAxisIteratorBase: boolean _isRestartable>;

        if $z0 == 0 goto label4;

        r0.<org.apache.xml.dtm.ref.DTMAxisIteratorBase: int _startNode> = i1;

        $i4 = (int) -1;

        if i1 != $i4 goto label2;

        $i6 = (int) -1;

        $i2 = $i6;

        goto label3;

     label2:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$ChildrenIterator: org.apache.xml.dtm.ref.DTMDefaultBaseIterators this$0>;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$ChildrenIterator: org.apache.xml.dtm.ref.DTMDefaultBaseIterators this$0>;

        $i0 = virtualinvoke $r1.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeIdentity(int)>(i1);

        $i2 = virtualinvoke $r2.<org.apache.xml.dtm.ref.DTMDefaultBase: int _firstch(int)>($i0);

     label3:
        r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode> = $i2;

        $r3 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMAxisIteratorBase: org.apache.xml.dtm.DTMAxisIterator resetPosition()>();

        return $r3;

     label4:
        return r0;
    }

    public int next()
    {
        org.apache.xml.dtm.ref.DTMDefaultBaseIterators$ChildrenIterator r0;
        org.apache.xml.dtm.ref.DTMDefaultBaseIterators $r1, $r2;
        int $i0, i1, $i2, $i3, $i4, $i6, $i8;

        r0 := @this: org.apache.xml.dtm.ref.DTMDefaultBaseIterators$ChildrenIterator;

        $i0 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode>;

        $i6 = (int) -1;

        if $i0 == $i6 goto label1;

        i1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode>;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$ChildrenIterator: org.apache.xml.dtm.ref.DTMDefaultBaseIterators this$0>;

        $i2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.DTMDefaultBase: int _nextsib(int)>(i1);

        r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$InternalAxisIteratorBase: int _currentNode> = $i2;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDefaultBaseIterators$ChildrenIterator: org.apache.xml.dtm.ref.DTMDefaultBaseIterators this$0>;

        $i3 = virtualinvoke $r2.<org.apache.xml.dtm.ref.DTMDefaultBase: int makeNodeHandle(int)>(i1);

        $i4 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMAxisIteratorBase: int returnNode(int)>($i3);

        return $i4;

     label1:
        $i8 = (int) -1;

        return $i8;
    }
}
