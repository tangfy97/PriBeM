final class org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2 extends java.lang.Object implements org.waveprotocol.wave.model.wave.opbased.WaveViewImpl$WaveletFactory
{
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder val$holder;
    final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer val$pipe;

    void <init>(org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder, org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder r1;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2 r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder val$holder> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer val$pipe> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet create(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.id.WaveletId r2;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        java.lang.AssertionError $r8, $r10;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder $r1, $r5, $r7, $r9;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r6;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.id.WaveId r11;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer $r4;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2 r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2;

        r11 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r2 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r3 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder val$holder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder: void expect()>();

        $z0 = <org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r9 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder val$holder>;

        $z3 = virtualinvoke $r9.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder: boolean isExpecting()>();

        if $z3 != 0 goto label1;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label1:
        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer val$pipe>;

        interfaceinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannelMultiplexer: void createOperationChannel(org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId)>(r2, r3);

        $z1 = <org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder val$holder>;

        $z2 = virtualinvoke $r7.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder: boolean isExpecting()>();

        if $z2 == 0 goto label2;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label2:
        $r5 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder val$holder>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$1LocalWaveletHolder: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet pop()>();

        return $r6;
    }

    public volatile org.waveprotocol.wave.model.wave.ObservableWavelet create(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.id.WaveletId, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.id.WaveId r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2 r0;
        org.waveprotocol.wave.model.id.WaveletId r2;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r2 := @parameter1: org.waveprotocol.wave.model.id.WaveletId;

        r3 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet create(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId)>(r1, r2, r3);

        return $r4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/concurrencycontrol/wave/CcBasedWaveViewImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWaveViewImpl$2: boolean $assertionsDisabled> = $z1;

        return;
    }
}
