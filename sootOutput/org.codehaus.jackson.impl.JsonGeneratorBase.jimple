public abstract class org.codehaus.jackson.impl.JsonGeneratorBase extends org.codehaus.jackson.JsonGenerator
{
    protected org.codehaus.jackson.ObjectCodec _objectCodec;
    protected int _features;
    protected boolean _cfgNumbersAsStrings;
    protected org.codehaus.jackson.impl.JsonWriteContext _writeContext;
    protected boolean _closed;

    protected void <init>(int, org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.JsonGenerator$Feature $r3;
        org.codehaus.jackson.ObjectCodec r2;
        int i0;
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.impl.JsonWriteContext $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        i0 := @parameter0: int;

        r2 := @parameter1: org.codehaus.jackson.ObjectCodec;

        specialinvoke r0.<org.codehaus.jackson.JsonGenerator: void <init>()>();

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: int _features> = i0;

        $r1 = staticinvoke <org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext createRootContext()>();

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r1;

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.ObjectCodec _objectCodec> = r2;

        $r3 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature WRITE_NUMBERS_AS_STRINGS>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)>($r3);

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: boolean _cfgNumbersAsStrings> = $z0;

        return;
    }

    public org.codehaus.jackson.JsonGenerator enable(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature r1, $r2;
        int $i0, $i1, $i2;
        org.codehaus.jackson.impl.JsonGeneratorBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $i0 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: int _features>;

        $i1 = virtualinvoke r1.<org.codehaus.jackson.JsonGenerator$Feature: int getMask()>();

        $i2 = $i0 | $i1;

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: int _features> = $i2;

        $r2 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature WRITE_NUMBERS_AS_STRINGS>;

        if r1 != $r2 goto label1;

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: boolean _cfgNumbersAsStrings> = 1;

     label1:
        return r0;
    }

    public org.codehaus.jackson.JsonGenerator disable(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature r1, $r2;
        int $i0, $i1, $i2, $i3, $i5;
        org.codehaus.jackson.impl.JsonGeneratorBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $i0 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: int _features>;

        $i1 = virtualinvoke r1.<org.codehaus.jackson.JsonGenerator$Feature: int getMask()>();

        $i5 = (int) -1;

        $i2 = $i1 ^ $i5;

        $i3 = $i0 & $i2;

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: int _features> = $i3;

        $r2 = <org.codehaus.jackson.JsonGenerator$Feature: org.codehaus.jackson.JsonGenerator$Feature WRITE_NUMBERS_AS_STRINGS>;

        if r1 != $r2 goto label1;

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: boolean _cfgNumbersAsStrings> = 0;

     label1:
        return r0;
    }

    public final boolean isEnabled(org.codehaus.jackson.JsonGenerator$Feature)
    {
        org.codehaus.jackson.JsonGenerator$Feature r1;
        int $i0, $i1, $i2;
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r1 := @parameter0: org.codehaus.jackson.JsonGenerator$Feature;

        $i0 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: int _features>;

        $i1 = virtualinvoke r1.<org.codehaus.jackson.JsonGenerator$Feature: int getMask()>();

        $i2 = $i0 & $i1;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final org.codehaus.jackson.JsonGenerator useDefaultPrettyPrinter()
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.impl.DefaultPrettyPrinter $r1;
        org.codehaus.jackson.JsonGenerator $r2;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 = new org.codehaus.jackson.impl.DefaultPrettyPrinter;

        specialinvoke $r1.<org.codehaus.jackson.impl.DefaultPrettyPrinter: void <init>()>();

        $r2 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.JsonGenerator setPrettyPrinter(org.codehaus.jackson.PrettyPrinter)>($r1);

        return $r2;
    }

    public final org.codehaus.jackson.JsonGenerator setCodec(org.codehaus.jackson.ObjectCodec)
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.ObjectCodec r1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r1 := @parameter0: org.codehaus.jackson.ObjectCodec;

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.ObjectCodec _objectCodec> = r1;

        return r0;
    }

    public final org.codehaus.jackson.ObjectCodec getCodec()
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.ObjectCodec $r1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.ObjectCodec _objectCodec>;

        return $r1;
    }

    public final org.codehaus.jackson.impl.JsonWriteContext getOutputContext()
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.impl.JsonWriteContext $r1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        return $r1;
    }

    public final void writeStartArray() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.PrettyPrinter $r3, $r4;
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.impl.JsonWriteContext $r1, $r2;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _verifyValueWrite(java.lang.String)>("start an array");

        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext createChildArrayContext()>();

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r2;

        $r3 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r3 == null goto label1;

        $r4 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r4.<org.codehaus.jackson.PrettyPrinter: void writeStartArray(org.codehaus.jackson.JsonGenerator)>(r0);

        goto label2;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _writeStartArray()>();

     label2:
        return;
    }

    protected abstract void _writeStartArray() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public final void writeEndArray() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.PrettyPrinter $r2, $r6;
        org.codehaus.jackson.impl.JsonWriteContext $r1, $r3, $r4, $r5, $r9;
        int $i0;
        java.lang.StringBuilder $r7, $r8, $r11;
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        java.lang.String $r10, $r12;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: boolean inArray()>();

        if $z0 != 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current context not an ARRAY but ");

        $r9 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.impl.JsonWriteContext: java.lang.String getTypeDesc()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _reportError(java.lang.String)>($r12);

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r2 == null goto label2;

        $r6 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        $r5 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $i0 = virtualinvoke $r5.<org.codehaus.jackson.impl.JsonWriteContext: int getEntryCount()>();

        interfaceinvoke $r6.<org.codehaus.jackson.PrettyPrinter: void writeEndArray(org.codehaus.jackson.JsonGenerator,int)>(r0, $i0);

        goto label3;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _writeEndArray()>();

     label3:
        $r3 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext getParent()>();

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r4;

        return;
    }

    protected abstract void _writeEndArray() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public final void writeStartObject() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.PrettyPrinter $r3, $r4;
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.impl.JsonWriteContext $r1, $r2;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _verifyValueWrite(java.lang.String)>("start an object");

        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext createChildObjectContext()>();

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r2;

        $r3 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r3 == null goto label1;

        $r4 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        interfaceinvoke $r4.<org.codehaus.jackson.PrettyPrinter: void writeStartObject(org.codehaus.jackson.JsonGenerator)>(r0);

        goto label2;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _writeStartObject()>();

     label2:
        return;
    }

    protected abstract void _writeStartObject() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public final void writeEndObject() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.PrettyPrinter $r4, $r6;
        org.codehaus.jackson.impl.JsonWriteContext $r1, $r2, $r3, $r5, $r9;
        int $i0;
        java.lang.StringBuilder $r7, $r8, $r11;
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        java.lang.String $r10, $r12;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $z0 = virtualinvoke $r1.<org.codehaus.jackson.impl.JsonWriteContext: boolean inObject()>();

        if $z0 != 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current context not an object but ");

        $r9 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.impl.JsonWriteContext: java.lang.String getTypeDesc()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _reportError(java.lang.String)>($r12);

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $r3 = virtualinvoke $r2.<org.codehaus.jackson.impl.JsonWriteContext: org.codehaus.jackson.impl.JsonWriteContext getParent()>();

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext> = $r3;

        $r4 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        if $r4 == null goto label2;

        $r6 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.PrettyPrinter _cfgPrettyPrinter>;

        $r5 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $i0 = virtualinvoke $r5.<org.codehaus.jackson.impl.JsonWriteContext: int getEntryCount()>();

        interfaceinvoke $r6.<org.codehaus.jackson.PrettyPrinter: void writeEndObject(org.codehaus.jackson.JsonGenerator,int)>(r0, $i0);

        goto label3;

     label2:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _writeEndObject()>();

     label3:
        return;
    }

    protected abstract void _writeEndObject() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public final void writeFieldName(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        int $i0;
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        java.lang.String r1;
        org.codehaus.jackson.impl.JsonWriteContext $r2;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext _writeContext>;

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.impl.JsonWriteContext: int writeFieldName(java.lang.String)>(r1);

        if $i0 != 4 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _reportError(java.lang.String)>("Can not write a field name, expecting a value");

     label1:
        if $i0 != 1 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: void _writeFieldName(java.lang.String,boolean)>(r1, $z0);

        return;
    }

    protected abstract void _writeFieldName(java.lang.String, boolean) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public abstract void writeNumber(int) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public abstract void writeNumber(long) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public abstract void writeNumber(double) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public abstract void writeNumber(float) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public abstract void writeNumber(java.math.BigDecimal) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public abstract void writeBoolean(boolean) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public abstract void writeNull() throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    public void writeObject(java.lang.Object) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.ObjectCodec $r2, $r3;
        java.lang.Object r0;
        org.codehaus.jackson.impl.JsonGeneratorBase r1;

        r1 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNull()>();

        goto label3;

     label1:
        $r2 = r1.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.ObjectCodec _objectCodec>;

        if $r2 == null goto label2;

        $r3 = r1.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.ObjectCodec _objectCodec>;

        virtualinvoke $r3.<org.codehaus.jackson.ObjectCodec: void writeValue(org.codehaus.jackson.JsonGenerator,java.lang.Object)>(r1, r0);

        return;

     label2:
        virtualinvoke r1.<org.codehaus.jackson.impl.JsonGeneratorBase: void _writeSimpleObject(java.lang.Object)>(r0);

     label3:
        return;
    }

    public void writeTree(org.codehaus.jackson.JsonNode) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        java.lang.IllegalStateException $r4;
        org.codehaus.jackson.ObjectCodec $r2, $r3;
        org.codehaus.jackson.impl.JsonGeneratorBase r1;
        org.codehaus.jackson.JsonNode r0;

        r1 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r0 := @parameter0: org.codehaus.jackson.JsonNode;

        if r0 != null goto label1;

        virtualinvoke r1.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNull()>();

        goto label3;

     label1:
        $r2 = r1.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.ObjectCodec _objectCodec>;

        if $r2 != null goto label2;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No ObjectCodec defined for the generator, can not serialize JsonNode-based trees");

        throw $r4;

     label2:
        $r3 = r1.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.ObjectCodec _objectCodec>;

        virtualinvoke $r3.<org.codehaus.jackson.ObjectCodec: void writeTree(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.JsonNode)>(r1, r0);

     label3:
        return;
    }

    public abstract void flush() throws java.io.IOException;

    public void close() throws java.io.IOException
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r0.<org.codehaus.jackson.impl.JsonGeneratorBase: boolean _closed> = 1;

        return;
    }

    public boolean isClosed()
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $z0 = r0.<org.codehaus.jackson.impl.JsonGeneratorBase: boolean _closed>;

        return $z0;
    }

    public final void copyCurrentEvent(org.codehaus.jackson.JsonParser) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r2;
        long $l7;
        java.math.BigDecimal $r7;
        int[] $r1, $r5, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9;
        java.math.BigInteger $r10;
        java.lang.String $r12;
        org.codehaus.jackson.JsonParser r0;
        double $d0;
        org.codehaus.jackson.JsonParser$NumberType $r6, $r9;
        float $f0;
        char[] $r11;
        java.lang.Object $r4;
        org.codehaus.jackson.impl.JsonGeneratorBase r3;

        r3 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 = <org.codehaus.jackson.impl.JsonGeneratorBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        $i0 = virtualinvoke $r2.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r1[$i0];

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label11;
            case 9: goto label15;
            case 10: goto label16;
            case 11: goto label17;
            case 12: goto label18;
            default: goto label19;
        };

     label01:
        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeStartObject()>();

        goto label20;

     label02:
        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeEndObject()>();

        goto label20;

     label03:
        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeStartArray()>();

        goto label20;

     label04:
        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeEndArray()>();

        goto label20;

     label05:
        $r12 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getCurrentName()>();

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeFieldName(java.lang.String)>($r12);

        goto label20;

     label06:
        $r11 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: char[] getTextCharacters()>();

        $i8 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getTextOffset()>();

        $i9 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getTextLength()>();

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeString(char[],int,int)>($r11, $i8, $i9);

        goto label20;

     label07:
        $r8 = <org.codehaus.jackson.impl.JsonGeneratorBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonParser$NumberType>;

        $r9 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $i4 = virtualinvoke $r9.<org.codehaus.jackson.JsonParser$NumberType: int ordinal()>();

        $i5 = $r8[$i4];

        lookupswitch($i5)
        {
            case 1: goto label08;
            case 2: goto label09;
            default: goto label10;
        };

     label08:
        $i6 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(int)>($i6);

        goto label20;

     label09:
        $r10 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.math.BigInteger getBigIntegerValue()>();

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(java.math.BigInteger)>($r10);

        goto label20;

     label10:
        $l7 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: long getLongValue()>();

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(long)>($l7);

        goto label20;

     label11:
        $r5 = <org.codehaus.jackson.impl.JsonGeneratorBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonParser$NumberType>;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser$NumberType getNumberType()>();

        $i2 = virtualinvoke $r6.<org.codehaus.jackson.JsonParser$NumberType: int ordinal()>();

        $i3 = $r5[$i2];

        lookupswitch($i3)
        {
            case 3: goto label12;
            case 4: goto label13;
            default: goto label14;
        };

     label12:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.math.BigDecimal getDecimalValue()>();

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(java.math.BigDecimal)>($r7);

        goto label20;

     label13:
        $f0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: float getFloatValue()>();

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(float)>($f0);

        goto label20;

     label14:
        $d0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: double getDoubleValue()>();

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(double)>($d0);

        goto label20;

     label15:
        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeBoolean(boolean)>(1);

        goto label20;

     label16:
        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeBoolean(boolean)>(0);

        goto label20;

     label17:
        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNull()>();

        goto label20;

     label18:
        $r4 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.Object getEmbeddedObject()>();

        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeObject(java.lang.Object)>($r4);

        goto label20;

     label19:
        virtualinvoke r3.<org.codehaus.jackson.impl.JsonGeneratorBase: void _cantHappen()>();

     label20:
        return;
    }

    public final void copyCurrentStructure(org.codehaus.jackson.JsonParser) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r5, $r6, $r7, $r8, r10;
        int[] $r3;
        int $i0, $i1;
        org.codehaus.jackson.impl.JsonGeneratorBase r4;
        java.lang.String $r9;
        org.codehaus.jackson.JsonParser r0;

        r4 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken getCurrentToken()>();

        r10 = $r1;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if $r1 != $r2 goto label1;

        $r9 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getCurrentName()>();

        virtualinvoke r4.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeFieldName(java.lang.String)>($r9);

        r10 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

     label1:
        $r3 = <org.codehaus.jackson.impl.JsonGeneratorBase$1: int[] $SwitchMap$org$codehaus$jackson$JsonToken>;

        $i0 = virtualinvoke r10.<org.codehaus.jackson.JsonToken: int ordinal()>();

        $i1 = $r3[$i0];

        lookupswitch($i1)
        {
            case 1: goto label5;
            case 3: goto label2;
            default: goto label8;
        };

     label2:
        virtualinvoke r4.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeStartArray()>();

     label3:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r6 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_ARRAY>;

        if $r5 == $r6 goto label4;

        virtualinvoke r4.<org.codehaus.jackson.impl.JsonGeneratorBase: void copyCurrentStructure(org.codehaus.jackson.JsonParser)>(r0);

        goto label3;

     label4:
        virtualinvoke r4.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeEndArray()>();

        goto label9;

     label5:
        virtualinvoke r4.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeStartObject()>();

     label6:
        $r7 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        $r8 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken END_OBJECT>;

        if $r7 == $r8 goto label7;

        virtualinvoke r4.<org.codehaus.jackson.impl.JsonGeneratorBase: void copyCurrentStructure(org.codehaus.jackson.JsonParser)>(r0);

        goto label6;

     label7:
        virtualinvoke r4.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeEndObject()>();

        goto label9;

     label8:
        virtualinvoke r4.<org.codehaus.jackson.impl.JsonGeneratorBase: void copyCurrentEvent(org.codehaus.jackson.JsonParser)>(r0);

     label9:
        return;
    }

    protected abstract void _releaseBuffers();

    protected abstract void _verifyValueWrite(java.lang.String) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException;

    protected void _reportError(java.lang.String) throws org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.JsonGenerationException $r0;
        java.lang.String r1;
        org.codehaus.jackson.impl.JsonGeneratorBase r2;

        r2 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.codehaus.jackson.JsonGenerationException;

        specialinvoke $r0.<org.codehaus.jackson.JsonGenerationException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    protected void _cantHappen()
    {
        java.lang.RuntimeException $r0;
        org.codehaus.jackson.impl.JsonGeneratorBase r1;

        r1 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Internal error: should never end up through this code path");

        throw $r0;
    }

    protected void _writeSimpleObject(java.lang.Object) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        byte[] $r12, $r13;
        java.lang.IllegalStateException $r21;
        java.math.BigDecimal $r17;
        byte $b2;
        java.util.concurrent.atomic.AtomicInteger $r16;
        java.math.BigInteger $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        float $f0;
        java.lang.StringBuilder $r3, $r6, $r7, $r20;
        java.util.concurrent.atomic.AtomicBoolean $r10;
        long $l0, $l4;
        short $s3;
        int $i1, $i5, $i6, $i7;
        java.lang.Boolean $r11;
        java.lang.String $r5, $r8, $r19;
        java.lang.Number r14;
        double $d0;
        java.util.concurrent.atomic.AtomicLong $r15;
        java.lang.Object r0;
        java.lang.Class $r4;
        org.codehaus.jackson.impl.JsonGeneratorBase r9;

        r9 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNull()>();

        return;

     label01:
        $z0 = r0 instanceof java.lang.String;

        if $z0 == 0 goto label02;

        $r19 = (java.lang.String) r0;

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeString(java.lang.String)>($r19);

        return;

     label02:
        $z1 = r0 instanceof java.lang.Number;

        if $z1 == 0 goto label13;

        r14 = (java.lang.Number) r0;

        $z7 = r14 instanceof java.lang.Integer;

        if $z7 == 0 goto label03;

        $i5 = virtualinvoke r14.<java.lang.Number: int intValue()>();

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(int)>($i5);

        return;

     label03:
        $z8 = r14 instanceof java.lang.Long;

        if $z8 == 0 goto label04;

        $l4 = virtualinvoke r14.<java.lang.Number: long longValue()>();

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(long)>($l4);

        return;

     label04:
        $z9 = r14 instanceof java.lang.Double;

        if $z9 == 0 goto label05;

        $d0 = virtualinvoke r14.<java.lang.Number: double doubleValue()>();

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(double)>($d0);

        return;

     label05:
        $z10 = r14 instanceof java.lang.Float;

        if $z10 == 0 goto label06;

        $f0 = virtualinvoke r14.<java.lang.Number: float floatValue()>();

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(float)>($f0);

        return;

     label06:
        $z11 = r14 instanceof java.lang.Short;

        if $z11 == 0 goto label07;

        $s3 = virtualinvoke r14.<java.lang.Number: short shortValue()>();

        $i6 = (int) $s3;

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(int)>($i6);

        return;

     label07:
        $z12 = r14 instanceof java.lang.Byte;

        if $z12 == 0 goto label08;

        $b2 = virtualinvoke r14.<java.lang.Number: byte byteValue()>();

        $i7 = (int) $b2;

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(int)>($i7);

        return;

     label08:
        $z13 = r14 instanceof java.math.BigInteger;

        if $z13 == 0 goto label09;

        $r18 = (java.math.BigInteger) r14;

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(java.math.BigInteger)>($r18);

        return;

     label09:
        $z14 = r14 instanceof java.math.BigDecimal;

        if $z14 == 0 goto label10;

        $r17 = (java.math.BigDecimal) r14;

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(java.math.BigDecimal)>($r17);

        return;

     label10:
        $z15 = r14 instanceof java.util.concurrent.atomic.AtomicInteger;

        if $z15 == 0 goto label11;

        $r16 = (java.util.concurrent.atomic.AtomicInteger) r14;

        $i1 = virtualinvoke $r16.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(int)>($i1);

        return;

     label11:
        $z16 = r14 instanceof java.util.concurrent.atomic.AtomicLong;

        if $z16 == 0 goto label12;

        $r15 = (java.util.concurrent.atomic.AtomicLong) r14;

        $l0 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicLong: long get()>();

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeNumber(long)>($l0);

        return;

     label12:
        goto label16;

     label13:
        $z2 = r0 instanceof byte[];

        if $z2 == 0 goto label14;

        $r12 = (byte[]) r0;

        $r13 = (byte[]) $r12;

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeBinary(byte[])>($r13);

        return;

     label14:
        $z3 = r0 instanceof java.lang.Boolean;

        if $z3 == 0 goto label15;

        $r11 = (java.lang.Boolean) r0;

        $z6 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeBoolean(boolean)>($z6);

        return;

     label15:
        $z4 = r0 instanceof java.util.concurrent.atomic.AtomicBoolean;

        if $z4 == 0 goto label16;

        $r10 = (java.util.concurrent.atomic.AtomicBoolean) r0;

        $z5 = virtualinvoke $r10.<java.util.concurrent.atomic.AtomicBoolean: boolean get()>();

        virtualinvoke r9.<org.codehaus.jackson.impl.JsonGeneratorBase: void writeBoolean(boolean)>($z5);

        return;

     label16:
        $r21 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8);

        throw $r21;
    }

    public volatile org.codehaus.jackson.JsonStreamContext getOutputContext()
    {
        org.codehaus.jackson.impl.JsonGeneratorBase r0;
        org.codehaus.jackson.impl.JsonWriteContext $r1;

        r0 := @this: org.codehaus.jackson.impl.JsonGeneratorBase;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonGeneratorBase: org.codehaus.jackson.impl.JsonWriteContext getOutputContext()>();

        return $r1;
    }
}
