public class arq.cmdline.ModVersion extends java.lang.Object implements arq.cmdline.ArgModuleGeneral
{
    protected final arq.cmdline.ArgDecl versionDecl;
    protected boolean version;
    protected boolean printAndExit;
    private com.hp.hpl.jena.sparql.util.Version versionMgr;

    public void <init>(boolean)
    {
        com.hp.hpl.jena.sparql.util.Version $r3, $r4;
        arq.cmdline.ArgDecl $r1;
        java.lang.String[] $r2;
        arq.cmdline.ModVersion r0;
        boolean z0;

        r0 := @this: arq.cmdline.ModVersion;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new arq.cmdline.ArgDecl;

        $r2 = newarray (java.lang.String)[0];

        specialinvoke $r1.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "version", $r2);

        r0.<arq.cmdline.ModVersion: arq.cmdline.ArgDecl versionDecl> = $r1;

        r0.<arq.cmdline.ModVersion: boolean version> = 0;

        r0.<arq.cmdline.ModVersion: boolean printAndExit> = 0;

        $r3 = new com.hp.hpl.jena.sparql.util.Version;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.util.Version: void <init>()>();

        r0.<arq.cmdline.ModVersion: com.hp.hpl.jena.sparql.util.Version versionMgr> = $r3;

        r0.<arq.cmdline.ModVersion: boolean printAndExit> = z0;

        $r4 = r0.<arq.cmdline.ModVersion: com.hp.hpl.jena.sparql.util.Version versionMgr>;

        virtualinvoke $r4.<com.hp.hpl.jena.sparql.util.Version: void addClass(java.lang.Class)>(class "Lcom/hp/hpl/jena/Jena;");

        return;
    }

    public void addClass(java.lang.Class)
    {
        com.hp.hpl.jena.sparql.util.Version $r2;
        java.lang.Class r1;
        arq.cmdline.ModVersion r0;

        r0 := @this: arq.cmdline.ModVersion;

        r1 := @parameter0: java.lang.Class;

        $r2 = r0.<arq.cmdline.ModVersion: com.hp.hpl.jena.sparql.util.Version versionMgr>;

        virtualinvoke $r2.<com.hp.hpl.jena.sparql.util.Version: void addClass(java.lang.Class)>(r1);

        return;
    }

    public void registerWith(arq.cmdline.CmdGeneral)
    {
        arq.cmdline.CmdGeneral r0;
        arq.cmdline.ArgDecl $r2;
        arq.cmdline.ModVersion r1;

        r1 := @this: arq.cmdline.ModVersion;

        r0 := @parameter0: arq.cmdline.CmdGeneral;

        $r2 = r1.<arq.cmdline.ModVersion: arq.cmdline.ArgDecl versionDecl>;

        virtualinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r2, "--version", "Version information");

        return;
    }

    public void processArgs(arq.cmdline.CmdArgModule)
    {
        arq.cmdline.CmdArgModule r0;
        arq.cmdline.ArgDecl $r2;
        arq.cmdline.ModVersion r1;
        boolean $z0, $z1, $z2;

        r1 := @this: arq.cmdline.ModVersion;

        r0 := @parameter0: arq.cmdline.CmdArgModule;

        $r2 = r1.<arq.cmdline.ModVersion: arq.cmdline.ArgDecl versionDecl>;

        $z0 = virtualinvoke r0.<arq.cmdline.CmdArgModule: boolean contains(arq.cmdline.ArgDecl)>($r2);

        if $z0 == 0 goto label1;

        r1.<arq.cmdline.ModVersion: boolean version> = 1;

     label1:
        $z1 = r1.<arq.cmdline.ModVersion: boolean version>;

        if $z1 == 0 goto label2;

        $z2 = r1.<arq.cmdline.ModVersion: boolean printAndExit>;

        if $z2 == 0 goto label2;

        virtualinvoke r1.<arq.cmdline.ModVersion: void printVersionAndExit()>();

     label2:
        return;
    }

    public boolean getVersionFlag()
    {
        arq.cmdline.ModVersion r0;
        boolean $z0;

        r0 := @this: arq.cmdline.ModVersion;

        $z0 = r0.<arq.cmdline.ModVersion: boolean version>;

        return $z0;
    }

    public void printVersion()
    {
        com.hp.hpl.jena.sparql.util.Version $r1;
        arq.cmdline.ModVersion r0;

        r0 := @this: arq.cmdline.ModVersion;

        $r1 = r0.<arq.cmdline.ModVersion: com.hp.hpl.jena.sparql.util.Version versionMgr>;

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.Version: void print()>();

        return;
    }

    public void printVersionAndExit()
    {
        arq.cmdline.ModVersion r0;

        r0 := @this: arq.cmdline.ModVersion;

        virtualinvoke r0.<arq.cmdline.ModVersion: void printVersion()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;
    }
}
