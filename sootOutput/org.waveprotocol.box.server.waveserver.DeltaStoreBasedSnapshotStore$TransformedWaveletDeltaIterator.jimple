class org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator extends java.lang.Object implements java.util.Iterator
{
    private final org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader reader;
    private long nextVersion;

    public void <init>(org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader)
    {
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator r0;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator;

        r1 := @parameter0: org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator: long nextVersion> = 0L;

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator: org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader reader> = r1;

        return;
    }

    public boolean hasNext()
    {
        long $l0, $l1;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader $r1, $r2;
        byte $b2;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator r0;
        org.waveprotocol.wave.model.version.HashedVersion $r3;
        int $i3;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator: org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader reader>;

        $z0 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $l0 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator: long nextVersion>;

        $r2 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator: org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader reader>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader: org.waveprotocol.wave.model.version.HashedVersion getEndVersion()>();

        $l1 = virtualinvoke $r3.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b2 = $l0 cmp $l1;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta next()
    {
        java.lang.Object[] $r3, $r6;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r2;
        long $l0, $l1, $l2, $l3, $l5, $l6;
        byte $b4;
        java.lang.Long $r4, $r7;
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator r0;
        org.waveprotocol.wave.model.version.HashedVersion $r5, $r8, $r9;
        int $i7;
        boolean $z0, $z1;
        org.waveprotocol.box.server.waveserver.RuntimeIOException $r12;
        java.io.IOException $r10;
        org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator;

     label1:
        $r1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator: org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader reader>;

        $l0 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator: long nextVersion>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.box.server.waveserver.WaveletDeltaRecordReader: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta getTransformedDelta(long)>($l0);

        if $r2 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r3 = newarray (java.lang.Object)[1];

        $l1 = r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator: long nextVersion>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r3[0] = $r4;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z0, "no delta at version %s", $r3);

        $l2 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getAppliedAtVersion()>();

        $r5 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        $l3 = virtualinvoke $r5.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        $b4 = $l2 cmp $l3;

        $i7 = (int) $b4;

        if $i7 >= 0 goto label4;

        $z1 = 1;

        goto label5;

     label4:
        $z1 = 0;

     label5:
        $r6 = newarray (java.lang.Object)[2];

        $l5 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getAppliedAtVersion()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r6[0] = $r7;

        $r8 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        $r6[1] = $r8;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z1, "delta [%s, %s) is empty", $r6);

        $r9 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.version.HashedVersion getResultingVersion()>();

        $l6 = virtualinvoke $r9.<org.waveprotocol.wave.model.version.HashedVersion: long getVersion()>();

        r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator: long nextVersion> = $l6;

     label6:
        return $r2;

     label7:
        $r10 := @caughtexception;

        $r12 = new org.waveprotocol.box.server.waveserver.RuntimeIOException;

        specialinvoke $r12.<org.waveprotocol.box.server.waveserver.RuntimeIOException: void <init>(java.io.IOException)>($r10);

        throw $r12;

        catch java.io.IOException from label1 to label6 with label7;
    }

    public void remove()
    {
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator r1;
        java.lang.UnsupportedOperationException $r0;

        r1 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public volatile java.lang.Object next()
    {
        org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator r0;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator;

        $r1 = virtualinvoke r0.<org.waveprotocol.box.server.waveserver.DeltaStoreBasedSnapshotStore$TransformedWaveletDeltaIterator: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta next()>();

        return $r1;
    }
}
