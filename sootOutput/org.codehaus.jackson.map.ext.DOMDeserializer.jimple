public abstract class org.codehaus.jackson.map.ext.DOMDeserializer extends org.codehaus.jackson.map.deser.std.FromStringDeserializer
{
    static final javax.xml.parsers.DocumentBuilderFactory _parserFactory;

    protected void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        org.codehaus.jackson.map.ext.DOMDeserializer r0;

        r0 := @this: org.codehaus.jackson.map.ext.DOMDeserializer;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<org.codehaus.jackson.map.deser.std.FromStringDeserializer: void <init>(java.lang.Class)>(r1);

        return;
    }

    public abstract java.lang.Object _deserialize(java.lang.String, org.codehaus.jackson.map.DeserializationContext);

    protected final org.w3c.dom.Document parse(java.lang.String) throws java.lang.IllegalArgumentException
    {
        org.xml.sax.InputSource $r2;
        java.lang.IllegalArgumentException $r7;
        java.lang.Exception $r6;
        java.io.StringReader $r3;
        org.w3c.dom.Document $r5;
        javax.xml.parsers.DocumentBuilder $r1;
        java.lang.StringBuilder $r8, $r9, $r11;
        javax.xml.parsers.DocumentBuilderFactory $r0;
        java.lang.String r4, $r10, $r12;
        org.codehaus.jackson.map.ext.DOMDeserializer r13;

        r13 := @this: org.codehaus.jackson.map.ext.DOMDeserializer;

        r4 := @parameter0: java.lang.String;

     label1:
        $r0 = <org.codehaus.jackson.map.ext.DOMDeserializer: javax.xml.parsers.DocumentBuilderFactory _parserFactory>;

        $r1 = virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

        $r2 = new org.xml.sax.InputSource;

        $r3 = new java.io.StringReader;

        specialinvoke $r3.<java.io.StringReader: void <init>(java.lang.String)>(r4);

        specialinvoke $r2.<org.xml.sax.InputSource: void <init>(java.io.Reader)>($r3);

        $r5 = virtualinvoke $r1.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(org.xml.sax.InputSource)>($r2);

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse JSON String as XML: ");

        $r10 = virtualinvoke $r6.<java.lang.Exception: java.lang.String getMessage()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r7;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        javax.xml.parsers.DocumentBuilderFactory $r0, $r1;

        $r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        <org.codehaus.jackson.map.ext.DOMDeserializer: javax.xml.parsers.DocumentBuilderFactory _parserFactory> = $r0;

        $r1 = <org.codehaus.jackson.map.ext.DOMDeserializer: javax.xml.parsers.DocumentBuilderFactory _parserFactory>;

        virtualinvoke $r1.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1);

        return;
    }
}
