public class org.apache.poi.hssf.converter.AbstractExcelUtils extends java.lang.Object
{
    static final java.lang.String EMPTY;
    private static final short EXCEL_COLUMN_WIDTH_FACTOR;
    private static final int UNIT_OFFSET_LENGTH;

    public void <init>()
    {
        org.apache.poi.hssf.converter.AbstractExcelUtils r0;

        r0 := @this: org.apache.poi.hssf.converter.AbstractExcelUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getAlign(short)
    {
        int $i1;
        short s0;

        s0 := @parameter0: short;

        $i1 = (int) s0;

        tableswitch($i1)
        {
            case 0: goto label4;
            case 1: goto label6;
            case 2: goto label1;
            case 3: goto label7;
            case 4: goto label3;
            case 5: goto label5;
            case 6: goto label2;
            default: goto label8;
        };

     label1:
        return "center";

     label2:
        return "center";

     label3:
        return "";

     label4:
        return "";

     label5:
        return "justify";

     label6:
        return "left";

     label7:
        return "right";

     label8:
        return "";
    }

    public static java.lang.String getBorderStyle(short)
    {
        int $i1;
        short s0;
        java.lang.String r0;

        s0 := @parameter0: short;

        $i1 = (int) s0;

        tableswitch($i1)
        {
            case 0: goto label1;
            case 1: goto label5;
            case 2: goto label5;
            case 3: goto label3;
            case 4: goto label2;
            case 5: goto label5;
            case 6: goto label4;
            case 7: goto label2;
            case 8: goto label3;
            case 9: goto label2;
            case 10: goto label2;
            case 11: goto label2;
            case 12: goto label2;
            case 13: goto label2;
            default: goto label5;
        };

     label1:
        r0 = "none";

        goto label6;

     label2:
        r0 = "dotted";

        goto label6;

     label3:
        r0 = "dashed";

        goto label6;

     label4:
        r0 = "double";

        goto label6;

     label5:
        r0 = "solid";

     label6:
        return r0;
    }

    public static java.lang.String getBorderWidth(short)
    {
        int $i1;
        short s0;
        java.lang.String r0;

        s0 := @parameter0: short;

        $i1 = (int) s0;

        tableswitch($i1)
        {
            case 5: goto label2;
            case 6: goto label3;
            case 7: goto label3;
            case 8: goto label1;
            case 9: goto label3;
            case 10: goto label1;
            case 11: goto label3;
            case 12: goto label1;
            default: goto label3;
        };

     label1:
        r0 = "2pt";

        goto label4;

     label2:
        r0 = "thick";

        goto label4;

     label3:
        r0 = "thin";

     label4:
        return r0;
    }

    public static java.lang.String getColor(org.apache.poi.hssf.util.HSSFColor)
    {
        org.apache.poi.hssf.util.HSSFColor r1;
        short s1;
        int i0, i2, $i3, $i4;
        java.lang.StringBuilder $r5;
        short[] $r2;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r1 := @parameter0: org.apache.poi.hssf.util.HSSFColor;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>(7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        $r2 = virtualinvoke r1.<org.apache.poi.hssf.util.HSSFColor: short[] getTriplet()>();

        i0 = lengthof $r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        s1 = $r2[i2];

        $i3 = (int) s1;

        if $i3 >= 10 goto label2;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

     label2:
        $i4 = (int) s1;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i4);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("#ffffff");

        if $z0 == 0 goto label4;

        return "white";

     label4:
        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("#c0c0c0");

        if $z1 == 0 goto label5;

        return "silver";

     label5:
        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("#808080");

        if $z2 == 0 goto label6;

        return "gray";

     label6:
        $z3 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("#000000");

        if $z3 == 0 goto label7;

        return "black";

     label7:
        return $r3;
    }

    public static int getColumnWidthInPx(int)
    {
        int i0, $i1, i2, $i3, i4, i5;
        float $f0, $f1;

        i0 := @parameter0: int;

        $i1 = i0 / 256;

        i4 = $i1 * 7;

        i2 = i0 % 256;

        $f0 = (float) i2;

        $f1 = $f0 / 36.57143F;

        $i3 = staticinvoke <java.lang.Math: int round(float)>($f1);

        i5 = i4 + $i3;

        return i5;
    }

    public static org.apache.poi.ss.util.CellRangeAddress getMergedRange(org.apache.poi.ss.util.CellRangeAddress[][], int, int)
    {
        org.apache.poi.ss.util.CellRangeAddress $r2;
        int i0, $i1, i2, $i3;
        org.apache.poi.ss.util.CellRangeAddress[] $r1;
        org.apache.poi.ss.util.CellRangeAddress[][] r0;

        r0 := @parameter0: org.apache.poi.ss.util.CellRangeAddress[][];

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        $i1 = lengthof r0;

        if i0 >= $i1 goto label1;

        $r1 = r0[i0];

        goto label2;

     label1:
        $r1 = null;

     label2:
        if $r1 == null goto label3;

        $i3 = lengthof $r1;

        if i2 >= $i3 goto label3;

        $r2 = $r1[i2];

        goto label4;

     label3:
        $r2 = null;

     label4:
        return $r2;
    }

    static boolean isEmpty(java.lang.String)
    {
        int $i0;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static boolean isNotEmpty(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.poi.hssf.converter.AbstractExcelUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static org.apache.poi.hssf.usermodel.HSSFWorkbook loadXls(java.io.File) throws java.io.IOException
    {
        java.lang.Throwable $r3;
        java.io.FileInputStream $r0;
        org.apache.poi.hssf.usermodel.HSSFWorkbook $r2;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

     label1:
        $r2 = new org.apache.poi.hssf.usermodel.HSSFWorkbook;

        specialinvoke $r2.<org.apache.poi.hssf.usermodel.HSSFWorkbook: void <init>(java.io.InputStream)>($r0);

     label2:
        staticinvoke <org.apache.poi.util.IOUtils: void closeQuietly(java.io.Closeable)>($r0);

        return $r2;

     label3:
        $r3 := @caughtexception;

     label4:
        staticinvoke <org.apache.poi.util.IOUtils: void closeQuietly(java.io.Closeable)>($r0);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void <clinit>()
    {
        <org.apache.poi.hssf.converter.AbstractExcelUtils: int UNIT_OFFSET_LENGTH> = 7;

        <org.apache.poi.hssf.converter.AbstractExcelUtils: short EXCEL_COLUMN_WIDTH_FACTOR> = 256;

        <org.apache.poi.hssf.converter.AbstractExcelUtils: java.lang.String EMPTY> = "";

        return;
    }
}
