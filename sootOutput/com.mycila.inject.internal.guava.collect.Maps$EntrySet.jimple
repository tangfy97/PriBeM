abstract class com.mycila.inject.internal.guava.collect.Maps$EntrySet extends java.util.AbstractSet
{

    void <init>()
    {
        com.mycila.inject.internal.guava.collect.Maps$EntrySet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$EntrySet;

        specialinvoke r0.<java.util.AbstractSet: void <init>()>();

        return;
    }

    abstract java.util.Map map();

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.Maps$EntrySet r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$EntrySet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$EntrySet: java.util.Map map()>();

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public void clear()
    {
        com.mycila.inject.internal.guava.collect.Maps$EntrySet r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$EntrySet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$EntrySet: java.util.Map map()>();

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        return;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Map$Entry r1;
        com.mycila.inject.internal.guava.collect.Maps$EntrySet r3;
        java.util.Map $r4, $r7;
        java.lang.Object r0, $r2, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r3 := @this: com.mycila.inject.internal.guava.collect.Maps$EntrySet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label4;

        r1 = (java.util.Map$Entry) r0;

        $r2 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r4 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.Maps$EntrySet: java.util.Map map()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r6 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = staticinvoke <com.mycila.inject.internal.guava.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $z1 == 0 goto label2;

        if $r5 != null goto label1;

        $r7 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.Maps$EntrySet: java.util.Map map()>();

        $z2 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        return 0;
    }

    public boolean isEmpty()
    {
        com.mycila.inject.internal.guava.collect.Maps$EntrySet r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$EntrySet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$EntrySet: java.util.Map map()>();

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        return $z0;
    }

    public boolean remove(java.lang.Object)
    {
        java.util.Map$Entry r2;
        com.mycila.inject.internal.guava.collect.Maps$EntrySet r0;
        java.util.Set $r4;
        java.util.Map $r3;
        java.lang.Object r1, $r5;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$EntrySet;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$EntrySet: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        r2 = (java.util.Map$Entry) r1;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$EntrySet: java.util.Map map()>();

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>($r5);

        return $z1;

     label1:
        return 0;
    }

    public boolean removeAll(java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r4;
        com.mycila.inject.internal.guava.collect.Maps$EntrySet r0;
        java.util.Iterator $r5;
        java.util.Collection r1, $r3;
        java.lang.Object $r2, $r6;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$EntrySet;

        r1 := @parameter0: java.util.Collection;

     label1:
        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.Collection) $r2;

        $z0 = specialinvoke r0.<java.util.AbstractSet: boolean removeAll(java.util.Collection)>($r3);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        z3 = 1;

        $r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $z2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$EntrySet: boolean remove(java.lang.Object)>($r6);

        z3 = z3 | $z2;

        goto label4;

     label5:
        return z3;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }

    public boolean retainAll(java.util.Collection)
    {
        java.util.HashSet $r5;
        java.util.Map $r7;
        int $i0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.UnsupportedOperationException $r4;
        java.util.Map$Entry r10;
        com.mycila.inject.internal.guava.collect.Maps$EntrySet r0;
        java.util.Iterator $r6;
        java.util.Collection r1, $r3;
        java.util.Set $r8;
        java.lang.Object $r2, $r9, $r11;

        r0 := @this: com.mycila.inject.internal.guava.collect.Maps$EntrySet;

        r1 := @parameter0: java.util.Collection;

     label1:
        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.Collection) $r2;

        $z0 = specialinvoke r0.<java.util.AbstractSet: boolean retainAll(java.util.Collection)>($r3);

     label2:
        return $z0;

     label3:
        $r4 := @caughtexception;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.Sets: java.util.HashSet newHashSetWithExpectedSize(int)>($i0);

        $r6 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r9 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $z3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$EntrySet: boolean contains(java.lang.Object)>($r9);

        if $z3 == 0 goto label5;

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r11);

     label5:
        goto label4;

     label6:
        $r7 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Maps$EntrySet: java.util.Map map()>();

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set keySet()>();

        $z2 = interfaceinvoke $r8.<java.util.Set: boolean retainAll(java.util.Collection)>($r5);

        return $z2;

        catch java.lang.UnsupportedOperationException from label1 to label2 with label3;
    }
}
