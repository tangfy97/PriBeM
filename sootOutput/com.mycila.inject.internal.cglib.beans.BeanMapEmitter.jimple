class com.mycila.inject.internal.cglib.beans.BeanMapEmitter extends com.mycila.inject.internal.cglib.core.ClassEmitter
{
    private static final com.mycila.inject.internal.asm.Type BEAN_MAP;
    private static final com.mycila.inject.internal.asm.Type FIXED_KEY_SET;
    private static final com.mycila.inject.internal.cglib.core.Signature CSTRUCT_OBJECT;
    private static final com.mycila.inject.internal.cglib.core.Signature CSTRUCT_STRING_ARRAY;
    private static final com.mycila.inject.internal.cglib.core.Signature BEAN_MAP_GET;
    private static final com.mycila.inject.internal.cglib.core.Signature BEAN_MAP_PUT;
    private static final com.mycila.inject.internal.cglib.core.Signature KEY_SET;
    private static final com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE;
    private static final com.mycila.inject.internal.cglib.core.Signature GET_PROPERTY_TYPE;

    public void <init>(com.mycila.inject.internal.asm.ClassVisitor, java.lang.String, java.lang.Class, int)
    {
        java.beans.PropertyDescriptor[] $r6, $r8;
        com.mycila.inject.internal.asm.Type $r3;
        java.util.HashMap $r10;
        java.lang.String[] $r11;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter r0;
        java.util.Map $r7, $r9;
        int i0, $i1, $i2;
        java.lang.String r2, r15;
        com.mycila.inject.internal.asm.ClassVisitor r1;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r13;
        com.mycila.inject.internal.cglib.core.Signature $r4;
        java.util.Set $r12;
        java.lang.Class r5;
        java.lang.Object $r14;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMapEmitter;

        r1 := @parameter0: com.mycila.inject.internal.asm.ClassVisitor;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.Class;

        i0 := @parameter3: int;

        specialinvoke r0.<com.mycila.inject.internal.cglib.core.ClassEmitter: void <init>(com.mycila.inject.internal.asm.ClassVisitor)>(r1);

        $r3 = <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.asm.Type BEAN_MAP>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: void begin_class(int,int,java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[],java.lang.String)>(46, 1, r2, $r3, null, "<generated>");

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void null_constructor(com.mycila.inject.internal.cglib.core.ClassEmitter)>(r0);

        $r4 = <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE>;

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void factory_method(com.mycila.inject.internal.cglib.core.ClassEmitter,com.mycila.inject.internal.cglib.core.Signature)>(r0, $r4);

        specialinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: void generateConstructor()>();

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanGetters(java.lang.Class)>(r5);

        $r7 = specialinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: java.util.Map makePropertyMap(java.beans.PropertyDescriptor[])>($r6);

        $r8 = staticinvoke <com.mycila.inject.internal.cglib.core.ReflectUtils: java.beans.PropertyDescriptor[] getBeanSetters(java.lang.Class)>(r5);

        $r9 = specialinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: java.util.Map makePropertyMap(java.beans.PropertyDescriptor[])>($r8);

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r10.<java.util.Map: void putAll(java.util.Map)>($r7);

        interfaceinvoke $r10.<java.util.Map: void putAll(java.util.Map)>($r9);

        if i0 == 0 goto label5;

        $r12 = interfaceinvoke $r10.<java.util.Map: java.util.Set keySet()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r14;

        $i1 = i0 & 1;

        if $i1 == 0 goto label2;

        $z2 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r15);

        if $z2 == 0 goto label3;

     label2:
        $i2 = i0 & 2;

        if $i2 == 0 goto label4;

        $z1 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r15);

        if $z1 != 0 goto label4;

     label3:
        interfaceinvoke $r13.<java.util.Iterator: void remove()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r15);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r15);

     label4:
        goto label1;

     label5:
        specialinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: void generateGet(java.lang.Class,java.util.Map)>(r5, $r7);

        specialinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: void generatePut(java.lang.Class,java.util.Map)>(r5, $r9);

        $r11 = specialinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: java.lang.String[] getNames(java.util.Map)>($r10);

        specialinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: void generateKeySet(java.lang.String[])>($r11);

        specialinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: void generateGetPropertyType(java.util.Map,java.lang.String[])>($r10, $r11);

        virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: void end_class()>();

        return;
    }

    private java.util.Map makePropertyMap(java.beans.PropertyDescriptor[])
    {
        java.beans.PropertyDescriptor[] r1;
        java.util.HashMap $r0;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter r5;
        java.beans.PropertyDescriptor $r2, $r4;
        int $i0, i1;
        java.lang.String $r3;

        r5 := @this: com.mycila.inject.internal.cglib.beans.BeanMapEmitter;

        r1 := @parameter0: java.beans.PropertyDescriptor[];

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i1 = 0;

     label1:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r2 = r1[i1];

        $r3 = virtualinvoke $r2.<java.beans.PropertyDescriptor: java.lang.String getName()>();

        $r4 = r1[i1];

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    private java.lang.String[] getNames(java.util.Map)
    {
        java.lang.Object[] $r3;
        java.util.Set $r1;
        java.lang.String[] $r2, $r4, $r5;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter r6;
        java.util.Map r0;
        int $i0;

        r6 := @this: com.mycila.inject.internal.cglib.beans.BeanMapEmitter;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>();

        $i0 = interfaceinvoke r0.<java.util.Map: int size()>();

        $r2 = newarray (java.lang.String)[$i0];

        $r3 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        $r4 = (java.lang.String[]) $r3;

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    private void generateConstructor()
    {
        com.mycila.inject.internal.cglib.core.Signature $r1, $r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMapEmitter;

        $r1 = <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_OBJECT>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r3 = <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_OBJECT>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void super_invoke_constructor(com.mycila.inject.internal.cglib.core.Signature)>($r3);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void generateGet(java.lang.Class, java.util.Map)
    {
        com.mycila.inject.internal.cglib.core.Signature $r1;
        com.mycila.inject.internal.asm.Type $r4, $r5;
        java.lang.String[] $r7;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter r0;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter$1 $r8;
        java.util.Map r6;
        java.lang.Class r3;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMapEmitter;

        r3 := @parameter0: java.lang.Class;

        r6 := @parameter1: java.util.Map;

        $r1 = <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature BEAN_MAP_GET>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r4 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>(r3);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(1);

        $r5 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r5);

        $r7 = specialinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: java.lang.String[] getNames(java.util.Map)>(r6);

        $r8 = new com.mycila.inject.internal.cglib.beans.BeanMapEmitter$1;

        specialinvoke $r8.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$1: void <init>(com.mycila.inject.internal.cglib.beans.BeanMapEmitter,java.util.Map,com.mycila.inject.internal.cglib.core.CodeEmitter)>(r0, r6, $r2);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void string_switch(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.String[],int,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback)>($r2, $r7, 1, $r8);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void generatePut(java.lang.Class, java.util.Map)
    {
        com.mycila.inject.internal.cglib.core.Signature $r1;
        com.mycila.inject.internal.asm.Type $r4, $r5;
        java.lang.String[] $r7;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter r0;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2 $r8;
        java.util.Map r6;
        java.lang.Class r3;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMapEmitter;

        r3 := @parameter0: java.lang.Class;

        r6 := @parameter1: java.util.Map;

        $r1 = <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature BEAN_MAP_PUT>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r4 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>(r3);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(1);

        $r5 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_STRING>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r5);

        $r7 = specialinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: java.lang.String[] getNames(java.util.Map)>(r6);

        $r8 = new com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2;

        specialinvoke $r8.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$2: void <init>(com.mycila.inject.internal.cglib.beans.BeanMapEmitter,java.util.Map,com.mycila.inject.internal.cglib.core.CodeEmitter)>(r0, r6, $r2);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void string_switch(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.String[],int,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback)>($r2, $r7, 1, $r8);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void aconst_null()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void generateKeySet(java.lang.String[])
    {
        com.mycila.inject.internal.cglib.core.Signature $r5, $r7;
        com.mycila.inject.internal.asm.Type $r1, $r3, $r6;
        java.lang.String[] r4;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2, $r8;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter r0;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMapEmitter;

        r4 := @parameter0: java.lang.String[];

        $r1 = <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.asm.Type FIXED_KEY_SET>;

        virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: void declare_field(int,java.lang.String,com.mycila.inject.internal.asm.Type,java.lang.Object)>(10, "keys", $r1, null);

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_static()>();

        $r3 = <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.asm.Type FIXED_KEY_SET>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void new_instance(com.mycila.inject.internal.asm.Type)>($r3);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void dup()>();

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void push_array(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.Object[])>($r2, r4);

        $r6 = <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.asm.Type FIXED_KEY_SET>;

        $r5 = <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_STRING_ARRAY>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke_constructor(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.cglib.core.Signature)>($r6, $r5);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void putfield(java.lang.String)>("keys");

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        $r7 = <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature KEY_SET>;

        $r8 = virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r7, null);

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_this()>();

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void getfield(java.lang.String)>("keys");

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        virtualinvoke $r8.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    private void generateGetPropertyType(java.util.Map, java.lang.String[])
    {
        com.mycila.inject.internal.cglib.core.Signature $r1;
        java.util.Map r5;
        java.lang.String[] r3;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter r0;
        com.mycila.inject.internal.cglib.beans.BeanMapEmitter$3 $r4;

        r0 := @this: com.mycila.inject.internal.cglib.beans.BeanMapEmitter;

        r5 := @parameter0: java.util.Map;

        r3 := @parameter1: java.lang.String[];

        $r1 = <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature GET_PROPERTY_TYPE>;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.CodeEmitter begin_method(int,com.mycila.inject.internal.cglib.core.Signature,com.mycila.inject.internal.asm.Type[])>(1, $r1, null);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_arg(int)>(0);

        $r4 = new com.mycila.inject.internal.cglib.beans.BeanMapEmitter$3;

        specialinvoke $r4.<com.mycila.inject.internal.cglib.beans.BeanMapEmitter$3: void <init>(com.mycila.inject.internal.cglib.beans.BeanMapEmitter,java.util.Map,com.mycila.inject.internal.cglib.core.CodeEmitter)>(r0, r5, $r2);

        staticinvoke <com.mycila.inject.internal.cglib.core.EmitUtils: void string_switch(com.mycila.inject.internal.cglib.core.CodeEmitter,java.lang.String[],int,com.mycila.inject.internal.cglib.core.ObjectSwitchCallback)>($r2, r3, 1, $r4);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void end_method()>();

        return;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.cglib.core.Signature $r2, $r3, $r4, $r5, $r6, $r7, $r11;
        com.mycila.inject.internal.asm.Type $r0, $r1, $r9, $r10;
        com.mycila.inject.internal.asm.Type[] $r8;

        $r0 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.beans.BeanMap");

        <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.asm.Type BEAN_MAP> = $r0;

        $r1 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.asm.Type parseType(java.lang.String)>("com.mycila.inject.internal.cglib.beans.FixedKeySet");

        <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.asm.Type FIXED_KEY_SET> = $r1;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseConstructor(java.lang.String)>("Object");

        <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_OBJECT> = $r2;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseConstructor(java.lang.String)>("String[]");

        <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature CSTRUCT_STRING_ARRAY> = $r3;

        $r4 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("Object get(Object, Object)");

        <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature BEAN_MAP_GET> = $r4;

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("Object put(Object, Object, Object)");

        <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature BEAN_MAP_PUT> = $r5;

        $r6 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("java.util.Set keySet()");

        <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature KEY_SET> = $r6;

        $r7 = new com.mycila.inject.internal.cglib.core.Signature;

        $r10 = <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.asm.Type BEAN_MAP>;

        $r8 = newarray (com.mycila.inject.internal.asm.Type)[1];

        $r9 = <com.mycila.inject.internal.cglib.core.Constants: com.mycila.inject.internal.asm.Type TYPE_OBJECT>;

        $r8[0] = $r9;

        specialinvoke $r7.<com.mycila.inject.internal.cglib.core.Signature: void <init>(java.lang.String,com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type[])>("newInstance", $r10, $r8);

        <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature NEW_INSTANCE> = $r7;

        $r11 = staticinvoke <com.mycila.inject.internal.cglib.core.TypeUtils: com.mycila.inject.internal.cglib.core.Signature parseSignature(java.lang.String)>("Class getPropertyType(String)");

        <com.mycila.inject.internal.cglib.beans.BeanMapEmitter: com.mycila.inject.internal.cglib.core.Signature GET_PROPERTY_TYPE> = $r11;

        return;
    }
}
