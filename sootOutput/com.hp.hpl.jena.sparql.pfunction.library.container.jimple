public class com.hp.hpl.jena.sparql.pfunction.library.container extends com.hp.hpl.jena.sparql.pfunction.PFuncSimple
{
    com.hp.hpl.jena.graph.Node typeNode;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.pfunction.library.container r0;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.library.container;

        specialinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PFuncSimple: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.graph.Node typeNode> = null;

        r0.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.graph.Node typeNode> = null;

        return;
    }

    protected void <init>(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.sparql.pfunction.library.container r0;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.library.container;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PFuncSimple: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.graph.Node typeNode> = null;

        r0.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.graph.Node typeNode> = r1;

        return;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator execEvaluated(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat $r8;
        com.hp.hpl.jena.graph.Node r2, r3, r4;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r5;
        com.hp.hpl.jena.sparql.pfunction.library.container r0;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r6, $r7;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.library.container;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        r5 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r6 = specialinvoke r0.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.sparql.engine.QueryIterator execEvaluatedConcrete(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, r2, r3, r4, r5);

        $r7 = specialinvoke r0.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.sparql.engine.QueryIterator execEvaluatedCalc(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r1, r2, r3, r4, r5);

        $r8 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r5);

        virtualinvoke $r8.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void add(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r6);

        virtualinvoke $r8.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void add(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r7);

        return $r8;
    }

    private com.hp.hpl.jena.sparql.engine.QueryIterator execEvaluatedConcrete(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern $r1;
        com.hp.hpl.jena.graph.Node r4, r5, r6;
        com.hp.hpl.jena.graph.Triple $r3;
        com.hp.hpl.jena.sparql.engine.binding.Binding r8;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r0;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot $r2;
        com.hp.hpl.jena.sparql.pfunction.library.container r7;

        r7 := @this: com.hp.hpl.jena.sparql.pfunction.library.container;

        r8 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        r5 := @parameter2: com.hp.hpl.jena.graph.Node;

        r6 := @parameter3: com.hp.hpl.jena.graph.Node;

        r0 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        $r1 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot: com.hp.hpl.jena.sparql.engine.iterator.QueryIterRoot create(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0);

        $r3 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r3.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r4, r5, r6);

        specialinvoke $r1.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterTriplePattern: void <init>(com.hp.hpl.jena.sparql.engine.QueryIterator,com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r2, $r3, r0);

        return $r1;
    }

    private com.hp.hpl.jena.sparql.engine.QueryIterator execEvaluatedCalc(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat $r6;
        com.hp.hpl.jena.graph.Node r2, r3, $r5, r10, $r13, $r15, r18, r20;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r0;
        com.hp.hpl.jena.graph.Graph $r1, $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Iterator $r8;
        java.util.Collection r19;
        com.hp.hpl.jena.sparql.core.Var $r7;
        com.hp.hpl.jena.sparql.engine.binding.Binding r11, $r12;
        java.lang.Object $r9;
        com.hp.hpl.jena.sparql.pfunction.library.container r4;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r16, $r17, $r21;

        r4 := @this: com.hp.hpl.jena.sparql.pfunction.library.container;

        r11 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r18 := @parameter2: com.hp.hpl.jena.graph.Node;

        r3 := @parameter3: com.hp.hpl.jena.graph.Node;

        r0 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        $z0 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 != 0 goto label2;

        $r14 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        $r15 = r4.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.graph.Node typeNode>;

        $z4 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: boolean isContainer(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r14, r2, $r15);

        if $z4 != 0 goto label1;

        $r17 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0);

        return $r17;

     label1:
        $r16 = specialinvoke r4.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.sparql.engine.QueryIterator oneContainer(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r11, r2, r3, r0);

        return $r16;

     label2:
        $z1 = virtualinvoke r3.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 == 0 goto label3;

        $r13 = r4.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.graph.Node typeNode>;

        r19 = staticinvoke <com.hp.hpl.jena.sparql.pfunction.library.container: java.util.Collection findContainers(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node)>($r1, $r13);

        goto label4;

     label3:
        $r5 = r4.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.graph.Node typeNode>;

        r19 = staticinvoke <com.hp.hpl.jena.sparql.pfunction.library.container: java.util.Collection findContainingContainers(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, $r5, r3);

     label4:
        $r6 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void <init>(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r2);

        $r8 = interfaceinvoke r19.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z5 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label7;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.graph.Node) $r9;

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.Binding binding(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r11, $r7, r10);

        r20 = r3;

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r3);

        if $z2 == 0 goto label6;

        $z3 = virtualinvoke r3.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r7);

        if $z3 == 0 goto label6;

        r20 = r10;

     label6:
        $r21 = specialinvoke r4.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.sparql.engine.QueryIterator oneContainer(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r12, r10, r20, r0);

        virtualinvoke $r6.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterConcat: void add(com.hp.hpl.jena.sparql.engine.QueryIterator)>($r21);

        goto label5;

     label7:
        return $r6;
    }

    private com.hp.hpl.jena.sparql.engine.QueryIterator oneContainer(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r0, r3;
        com.hp.hpl.jena.sparql.core.Var $r6;
        com.hp.hpl.jena.sparql.engine.binding.Binding r2;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r4;
        com.hp.hpl.jena.sparql.pfunction.library.container r1;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r5, $r7;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.pfunction.library.container;

        r2 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r0 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r0);

        $r7 = specialinvoke r1.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.sparql.engine.QueryIterator members(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r2, r3, $r6, r4);

        return $r7;

     label1:
        $r5 = specialinvoke r1.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.sparql.engine.QueryIterator verify(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r2, r3, r0, r4);

        return $r5;
    }

    private com.hp.hpl.jena.sparql.engine.QueryIterator members(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.core.Var, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r2, $r4, r11;
        java.util.ArrayList $r6;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r0;
        com.hp.hpl.jena.graph.Graph $r1;
        boolean $z0;
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper $r8;
        java.util.Iterator $r7, $r9;
        java.util.Collection $r5;
        com.hp.hpl.jena.sparql.core.Var r13;
        com.hp.hpl.jena.sparql.engine.binding.Binding r12, $r14;
        java.lang.Object $r10;
        com.hp.hpl.jena.sparql.pfunction.library.container r3;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r15;

        r3 := @this: com.hp.hpl.jena.sparql.pfunction.library.container;

        r12 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r13 := @parameter2: com.hp.hpl.jena.sparql.core.Var;

        r0 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        $r4 = r3.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.graph.Node typeNode>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: java.util.Collection containerMembers(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, r2, $r4);

        if $r5 != null goto label1;

        $r15 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r0);

        return $r15;

     label1:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        $r7 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r11 = (com.hp.hpl.jena.graph.Node) $r10;

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.Binding binding(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>(r12, r13, r11);

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label2;

     label3:
        $r8 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper;

        $r9 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r8.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterPlainWrapper: void <init>(java.util.Iterator,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($r9, r0);

        return $r8;
    }

    private com.hp.hpl.jena.sparql.engine.QueryIterator verify(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.sparql.engine.iterator.QueryIterYieldN $r6;
        com.hp.hpl.jena.graph.Node r2, r4, $r5;
        com.hp.hpl.jena.sparql.engine.binding.Binding r7;
        int $i0;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r0;
        com.hp.hpl.jena.sparql.pfunction.library.container r3;
        com.hp.hpl.jena.graph.Graph $r1;

        r3 := @this: com.hp.hpl.jena.sparql.pfunction.library.container;

        r7 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        r0 := @parameter3: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.ExecutionContext: com.hp.hpl.jena.graph.Graph getActiveGraph()>();

        $r5 = r3.<com.hp.hpl.jena.sparql.pfunction.library.container: com.hp.hpl.jena.graph.Node typeNode>;

        $i0 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: int countContainerMember(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r1, r2, $r5, r4);

        $r6 = new com.hp.hpl.jena.sparql.engine.iterator.QueryIterYieldN;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.engine.iterator.QueryIterYieldN: void <init>(int,com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.engine.ExecutionContext)>($i0, r7, r0);

        return $r6;
    }

    private static java.util.Collection findContainers(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r1, $r4, $r6, $r8;
        com.hp.hpl.jena.rdf.model.Resource $r3, $r5, $r7;
        java.util.HashSet $r0;
        com.hp.hpl.jena.graph.Graph r2;

        r2 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        if r1 == null goto label1;

        staticinvoke <com.hp.hpl.jena.sparql.pfunction.library.container: void findContainers(java.util.Collection,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node)>($r0, r2, r1);

        return $r0;

     label1:
        $r3 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Bag>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        staticinvoke <com.hp.hpl.jena.sparql.pfunction.library.container: void findContainers(java.util.Collection,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node)>($r0, r2, $r4);

        $r5 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Seq>;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        staticinvoke <com.hp.hpl.jena.sparql.pfunction.library.container: void findContainers(java.util.Collection,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node)>($r0, r2, $r6);

        $r7 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Resource Alt>;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.rdf.model.Resource: com.hp.hpl.jena.graph.Node asNode()>();

        staticinvoke <com.hp.hpl.jena.sparql.pfunction.library.container: void findContainers(java.util.Collection,com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node)>($r0, r2, $r8);

        return $r0;
    }

    private static void findContainers(java.util.Collection, com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node)
    {
        java.util.Collection r9;
        com.hp.hpl.jena.graph.Node $r2, $r3, r4, $r8;
        com.hp.hpl.jena.graph.Triple r7;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        com.hp.hpl.jena.rdf.model.Property $r1;
        java.lang.Object $r6;
        com.hp.hpl.jena.graph.Graph r0;
        boolean $z0;

        r9 := @parameter0: java.util.Collection;

        r0 := @parameter1: com.hp.hpl.jena.graph.Graph;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r2 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r1 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r3 = interfaceinvoke $r1.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $r5 = interfaceinvoke r0.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r3, r4);

     label1:
        $z0 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        $r8 = virtualinvoke r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        interfaceinvoke r9.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        goto label1;

     label2:
        return;
    }

    private static java.util.Collection findContainingContainers(com.hp.hpl.jena.graph.Graph, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r2, $r3, $r4, $r8, r9;
        com.hp.hpl.jena.graph.Triple r7;
        java.util.HashSet $r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r5;
        java.lang.Object $r6;
        com.hp.hpl.jena.graph.Graph r1;
        boolean $z0, $z1;

        r1 := @parameter0: com.hp.hpl.jena.graph.Graph;

        r9 := @parameter1: com.hp.hpl.jena.graph.Node;

        r2 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r4 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r3 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r5 = interfaceinvoke r1.<com.hp.hpl.jena.graph.Graph: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r4, $r3, r2);

     label1:
        $z0 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.graph.Triple) $r6;

        $r8 = virtualinvoke r7.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z1 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphContainerUtils: boolean isContainer(com.hp.hpl.jena.graph.Graph,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, $r8, r9);

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>($r8);

     label2:
        goto label1;

     label3:
        return $r0;
    }
}
