public class org.waveprotocol.wave.client.editor.content.ContentDocument$BadOpLocalOperationException extends org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException
{

    void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.client.editor.content.ContentDocument$BadOpLocalOperationException r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.content.ContentDocument$BadOpLocalOperationException;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.ContentDocument$LocalOperationException: void <init>(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r1);

        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult getValidationResult()>();

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult: boolean isInvalidSchema()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Not a low level violation");

        return;
    }
}
