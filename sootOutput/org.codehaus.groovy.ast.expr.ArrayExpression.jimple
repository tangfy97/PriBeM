public class org.codehaus.groovy.ast.expr.ArrayExpression extends org.codehaus.groovy.ast.expr.Expression
{
    private java.util.List expressions;
    private java.util.List sizeExpression;
    private org.codehaus.groovy.ast.ClassNode elementType;

    private static org.codehaus.groovy.ast.ClassNode makeArray(org.codehaus.groovy.ast.ClassNode, java.util.List)
    {
        java.util.List r2;
        org.codehaus.groovy.ast.ClassNode r0, $r1, r3;
        int $i0, i1;

        r0 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter1: java.util.List;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

        r3 = $r1;

        if r2 != null goto label1;

        return $r1;

     label1:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        i1 = 1;

     label2:
        if i1 >= $i0 goto label3;

        r3 = virtualinvoke r3.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode makeArray()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        return r3;
    }

    public void <init>(org.codehaus.groovy.ast.ClassNode, java.util.List, java.util.List)
    {
        java.lang.ClassCastException $r7, $r14;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r15, $r16, $r17, $r18;
        java.lang.String $r12, $r19;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r4, $r5;
        org.codehaus.groovy.ast.expr.ArrayExpression r0;
        org.codehaus.groovy.ast.ClassNode r1, $r3;
        java.util.List r2, r20;
        java.lang.Object $r6, $r13;

        r0 := @this: org.codehaus.groovy.ast.expr.ArrayExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r20 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void <init>()>();

        $r3 = staticinvoke <org.codehaus.groovy.ast.expr.ArrayExpression: org.codehaus.groovy.ast.ClassNode makeArray(org.codehaus.groovy.ast.ClassNode,java.util.List)>(r1, r2);

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void setType(org.codehaus.groovy.ast.ClassNode)>($r3);

        if r20 != null goto label1;

        r20 = <java.util.Collections: java.util.List EMPTY_LIST>;

     label1:
        r0.<org.codehaus.groovy.ast.expr.ArrayExpression: org.codehaus.groovy.ast.ClassNode elementType> = r1;

        r0.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List expressions> = r20;

        r0.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List sizeExpression> = r2;

        $r4 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r13 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        if $r13 == null goto label3;

        $z2 = $r13 instanceof org.codehaus.groovy.ast.expr.Expression;

        if $z2 != 0 goto label3;

        $r14 = new java.lang.ClassCastException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Item: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an Expression");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.ClassCastException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label3:
        goto label2;

     label4:
        if r2 == null goto label7;

        $r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r6 instanceof org.codehaus.groovy.ast.expr.Expression;

        if $z1 != 0 goto label6;

        $r7 = new java.lang.ClassCastException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Item: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an Expression");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.ClassCastException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label6:
        goto label5;

     label7:
        return;
    }

    public void <init>(org.codehaus.groovy.ast.ClassNode, java.util.List)
    {
        java.util.List r2;
        org.codehaus.groovy.ast.expr.ArrayExpression r0;
        org.codehaus.groovy.ast.ClassNode r1;

        r0 := @this: org.codehaus.groovy.ast.expr.ArrayExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.ArrayExpression: void <init>(org.codehaus.groovy.ast.ClassNode,java.util.List,java.util.List)>(r1, r2, null);

        return;
    }

    public void addExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        java.util.List $r2;
        org.codehaus.groovy.ast.expr.Expression r1;
        org.codehaus.groovy.ast.expr.ArrayExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.ArrayExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        $r2 = r0.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List expressions>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.List getExpressions()
    {
        java.util.List $r1;
        org.codehaus.groovy.ast.expr.ArrayExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.ArrayExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List expressions>;

        return $r1;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.expr.ArrayExpression r1;
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;

        r1 := @this: org.codehaus.groovy.ast.expr.ArrayExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitArrayExpression(org.codehaus.groovy.ast.expr.ArrayExpression)>(r1);

        return;
    }

    public boolean isDynamic()
    {
        org.codehaus.groovy.ast.expr.ArrayExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.ArrayExpression;

        return 0;
    }

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        org.codehaus.groovy.ast.expr.ArrayExpression r0, $r5;
        org.codehaus.groovy.ast.ClassNode $r6;
        java.util.List $r2, $r3, $r4, $r7, r8;
        org.codehaus.groovy.ast.expr.ExpressionTransformer r1;

        r0 := @this: org.codehaus.groovy.ast.expr.ArrayExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        $r2 = r0.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List expressions>;

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List transformExpressions(java.util.List,org.codehaus.groovy.ast.expr.ExpressionTransformer)>($r2, r1);

        r8 = null;

        $r4 = r0.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List sizeExpression>;

        if $r4 == null goto label1;

        $r7 = r0.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List sizeExpression>;

        r8 = virtualinvoke r0.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List transformExpressions(java.util.List,org.codehaus.groovy.ast.expr.ExpressionTransformer)>($r7, r1);

     label1:
        $r5 = new org.codehaus.groovy.ast.expr.ArrayExpression;

        $r6 = r0.<org.codehaus.groovy.ast.expr.ArrayExpression: org.codehaus.groovy.ast.ClassNode elementType>;

        specialinvoke $r5.<org.codehaus.groovy.ast.expr.ArrayExpression: void <init>(org.codehaus.groovy.ast.ClassNode,java.util.List,java.util.List)>($r6, $r3, r8);

        virtualinvoke $r5.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r0);

        return $r5;
    }

    public org.codehaus.groovy.ast.expr.Expression getExpression(int)
    {
        java.util.List $r1;
        org.codehaus.groovy.ast.expr.ArrayExpression r0;
        int i0;
        java.lang.Object $r2;
        org.codehaus.groovy.ast.expr.Expression $r3;

        r0 := @this: org.codehaus.groovy.ast.expr.ArrayExpression;

        i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List expressions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.codehaus.groovy.ast.expr.Expression) $r2;

        return $r3;
    }

    public org.codehaus.groovy.ast.ClassNode getElementType()
    {
        org.codehaus.groovy.ast.expr.ArrayExpression r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.ArrayExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.ArrayExpression: org.codehaus.groovy.ast.ClassNode elementType>;

        return $r1;
    }

    public java.lang.String getText()
    {
        java.util.Iterator $r3;
        org.codehaus.groovy.ast.expr.ArrayExpression r1;
        java.util.List $r2;
        java.lang.StringBuffer $r0;
        java.lang.Object $r5;
        java.lang.String $r4, $r7;
        org.codehaus.groovy.ast.expr.Expression $r6;
        boolean $z0, z1;

        r1 := @this: org.codehaus.groovy.ast.expr.ArrayExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>("[");

        z1 = 1;

        $r2 = r1.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List expressions>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        if z1 == 0 goto label2;

        z1 = 0;

        goto label3;

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label3:
        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.codehaus.groovy.ast.expr.Expression) $r5;

        $r7 = virtualinvoke $r6.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        goto label1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    public java.util.List getSizeExpression()
    {
        java.util.List $r1;
        org.codehaus.groovy.ast.expr.ArrayExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.ArrayExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List sizeExpression>;

        return $r1;
    }

    public java.lang.String toString()
    {
        java.util.List $r4;
        org.codehaus.groovy.ast.expr.ArrayExpression r1;
        java.lang.StringBuffer $r0, $r3, $r5;
        java.lang.String $r2, $r6;

        r1 := @this: org.codehaus.groovy.ast.expr.ArrayExpression;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = specialinvoke r1.<java.lang.Object: java.lang.String toString()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = r1.<org.codehaus.groovy.ast.expr.ArrayExpression: java.util.List expressions>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }
}
