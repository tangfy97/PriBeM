public class org.apache.lucene.queryparser.surround.query.DistanceQuery extends org.apache.lucene.queryparser.surround.query.ComposedQuery implements org.apache.lucene.queryparser.surround.query.DistanceSubQuery
{
    private int opDistance;
    private boolean ordered;

    public void <init>(java.util.List, boolean, int, java.lang.String, boolean)
    {
        java.util.List r1;
        int i0;
        java.lang.String r2;
        org.apache.lucene.queryparser.surround.query.DistanceQuery r0;
        boolean z0, z1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.DistanceQuery;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        z1 := @parameter4: boolean;

        specialinvoke r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: void <init>(java.util.List,boolean,java.lang.String)>(r1, z0, r2);

        r0.<org.apache.lucene.queryparser.surround.query.DistanceQuery: int opDistance> = i0;

        r0.<org.apache.lucene.queryparser.surround.query.DistanceQuery: boolean ordered> = z1;

        return;
    }

    public int getOpDistance()
    {
        int $i0;
        org.apache.lucene.queryparser.surround.query.DistanceQuery r0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.DistanceQuery;

        $i0 = r0.<org.apache.lucene.queryparser.surround.query.DistanceQuery: int opDistance>;

        return $i0;
    }

    public boolean subQueriesOrdered()
    {
        org.apache.lucene.queryparser.surround.query.DistanceQuery r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.DistanceQuery;

        $z0 = r0.<org.apache.lucene.queryparser.surround.query.DistanceQuery: boolean ordered>;

        return $z0;
    }

    public java.lang.String distanceSubQueryNotAllowed()
    {
        java.util.Iterator $r1;
        org.apache.lucene.queryparser.surround.query.DistanceSubQuery r11;
        java.lang.Object $r2;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r9;
        java.lang.String $r5, $r8, $r10, $r12;
        org.apache.lucene.queryparser.surround.query.DistanceQuery r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryparser.surround.query.DistanceQuery;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.DistanceQuery: java.util.Iterator getSubQueriesIterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $z1 = $r2 instanceof org.apache.lucene.queryparser.surround.query.DistanceSubQuery;

        if $z1 == 0 goto label3;

        r11 = (org.apache.lucene.queryparser.surround.query.DistanceSubQuery) $r2;

        $r12 = interfaceinvoke r11.<org.apache.lucene.queryparser.surround.query.DistanceSubQuery: java.lang.String distanceSubQueryNotAllowed()>();

        if $r12 == null goto label2;

        return $r12;

     label2:
        goto label4;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Operator ");

        $r5 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.DistanceQuery: java.lang.String getOperatorName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not allow subquery ");

        $r8 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;

     label4:
        goto label1;

     label5:
        return null;
    }

    public void addSpanQueries(org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory) throws java.io.IOException
    {
        org.apache.lucene.search.Query $r5;
        float $f0;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory $r4;
        org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory r1;
        java.lang.String $r3;
        org.apache.lucene.queryparser.surround.query.DistanceQuery r0;
        org.apache.lucene.index.IndexReader $r2;

        r0 := @this: org.apache.lucene.queryparser.surround.query.DistanceQuery;

        r1 := @parameter0: org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory;

        $r2 = virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: org.apache.lucene.index.IndexReader getIndexReader()>();

        $r3 = virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: java.lang.String getFieldName()>();

        $f0 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.DistanceQuery: float getWeight()>();

        $r4 = virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: org.apache.lucene.queryparser.surround.query.BasicQueryFactory getBasicQueryFactory()>();

        $r5 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.DistanceQuery: org.apache.lucene.search.Query getSpanNearQuery(org.apache.lucene.index.IndexReader,java.lang.String,float,org.apache.lucene.queryparser.surround.query.BasicQueryFactory)>($r2, $r3, $f0, $r4);

        virtualinvoke r1.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: void addSpanQuery(org.apache.lucene.search.Query)>($r5);

        return;
    }

    public org.apache.lucene.search.Query getSpanNearQuery(org.apache.lucene.index.IndexReader, java.lang.String, float, org.apache.lucene.queryparser.surround.query.BasicQueryFactory) throws java.io.IOException
    {
        org.apache.lucene.search.Query $r11;
        org.apache.lucene.search.spans.SpanQuery[] r1;
        org.apache.lucene.queryparser.surround.query.DistanceSubQuery $r9, $r13;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String r6;
        org.apache.lucene.search.spans.SpanQuery $r10;
        boolean $z0, $z1, $z2;
        org.apache.lucene.search.spans.SpanNearQuery $r3;
        java.util.Iterator $r2;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r7;
        float f0;
        org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory $r4;
        java.lang.Object $r8, $r12;
        org.apache.lucene.queryparser.surround.query.DistanceQuery r0;
        org.apache.lucene.index.IndexReader r5;

        r0 := @this: org.apache.lucene.queryparser.surround.query.DistanceQuery;

        r5 := @parameter0: org.apache.lucene.index.IndexReader;

        r6 := @parameter1: java.lang.String;

        f0 := @parameter2: float;

        r7 := @parameter3: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        $i0 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.DistanceQuery: int getNrSubQueries()>();

        r1 = newarray (org.apache.lucene.search.spans.SpanQuery)[$i0];

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.DistanceQuery: java.util.Iterator getSubQueriesIterator()>();

        i4 = 0;

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = new org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory;

        specialinvoke $r4.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: void <init>(org.apache.lucene.index.IndexReader,java.lang.String,org.apache.lucene.queryparser.surround.query.BasicQueryFactory)>(r5, r6, r7);

        $r8 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (org.apache.lucene.queryparser.surround.query.DistanceSubQuery) $r8;

        interfaceinvoke $r9.<org.apache.lucene.queryparser.surround.query.DistanceSubQuery: void addSpanQueries(org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory)>($r4);

        $i3 = virtualinvoke $r4.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: int size()>();

        if $i3 != 0 goto label4;

     label2:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r12 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r13 = (org.apache.lucene.queryparser.surround.query.DistanceSubQuery) $r12;

        interfaceinvoke $r13.<org.apache.lucene.queryparser.surround.query.DistanceSubQuery: void addSpanQueries(org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory)>($r4);

        virtualinvoke $r4.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: void clear()>();

        goto label2;

     label3:
        $r11 = <org.apache.lucene.queryparser.surround.query.SrndQuery: org.apache.lucene.search.Query theEmptyLcnQuery>;

        return $r11;

     label4:
        $r10 = virtualinvoke $r4.<org.apache.lucene.queryparser.surround.query.SpanNearClauseFactory: org.apache.lucene.search.spans.SpanQuery makeSpanClause()>();

        r1[i4] = $r10;

        i4 = i4 + 1;

        goto label1;

     label5:
        $r3 = new org.apache.lucene.search.spans.SpanNearQuery;

        $i1 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.DistanceQuery: int getOpDistance()>();

        $i2 = $i1 - 1;

        $z1 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.DistanceQuery: boolean subQueriesOrdered()>();

        specialinvoke $r3.<org.apache.lucene.search.spans.SpanNearQuery: void <init>(org.apache.lucene.search.spans.SpanQuery[],int,boolean)>(r1, $i2, $z1);

        virtualinvoke $r3.<org.apache.lucene.search.spans.SpanNearQuery: void setBoost(float)>(f0);

        return $r3;
    }

    public org.apache.lucene.search.Query makeLuceneQueryFieldNoBoost(java.lang.String, org.apache.lucene.queryparser.surround.query.BasicQueryFactory)
    {
        org.apache.lucene.queryparser.surround.query.DistanceRewriteQuery $r0;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r3;
        java.lang.String r2;
        org.apache.lucene.queryparser.surround.query.DistanceQuery r1;

        r1 := @this: org.apache.lucene.queryparser.surround.query.DistanceQuery;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        $r0 = new org.apache.lucene.queryparser.surround.query.DistanceRewriteQuery;

        specialinvoke $r0.<org.apache.lucene.queryparser.surround.query.DistanceRewriteQuery: void <init>(org.apache.lucene.queryparser.surround.query.DistanceQuery,java.lang.String,org.apache.lucene.queryparser.surround.query.BasicQueryFactory)>(r1, r2, r3);

        return $r0;
    }
}
