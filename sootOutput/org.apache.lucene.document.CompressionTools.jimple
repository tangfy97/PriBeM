public class org.apache.lucene.document.CompressionTools extends java.lang.Object
{

    private void <init>()
    {
        org.apache.lucene.document.CompressionTools r0;

        r0 := @this: org.apache.lucene.document.CompressionTools;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] compress(byte[], int, int, int)
    {
        java.lang.Throwable $r5;
        byte[] r2, r3, $r4;
        java.io.ByteArrayOutputStream $r0;
        java.util.zip.Deflater $r1;
        int i0, i1, i2, $i3;
        boolean $z0;

        r2 := @parameter0: byte[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>(int)>(i0);

        $r1 = new java.util.zip.Deflater;

        specialinvoke $r1.<java.util.zip.Deflater: void <init>()>();

     label1:
        virtualinvoke $r1.<java.util.zip.Deflater: void setLevel(int)>(i1);

        virtualinvoke $r1.<java.util.zip.Deflater: void setInput(byte[],int,int)>(r2, i2, i0);

        virtualinvoke $r1.<java.util.zip.Deflater: void finish()>();

        r3 = newarray (byte)[1024];

     label2:
        $z0 = virtualinvoke $r1.<java.util.zip.Deflater: boolean finished()>();

        if $z0 != 0 goto label3;

        $i3 = virtualinvoke $r1.<java.util.zip.Deflater: int deflate(byte[])>(r3);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r3, 0, $i3);

        goto label2;

     label3:
        virtualinvoke $r1.<java.util.zip.Deflater: void end()>();

        goto label6;

     label4:
        $r5 := @caughtexception;

     label5:
        virtualinvoke $r1.<java.util.zip.Deflater: void end()>();

        throw $r5;

     label6:
        $r4 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static byte[] compress(byte[], int, int)
    {
        byte[] r0, $r1;
        int i0, i1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <org.apache.lucene.document.CompressionTools: byte[] compress(byte[],int,int,int)>(r0, i0, i1, 9);

        return $r1;
    }

    public static byte[] compress(byte[])
    {
        int $i0;
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.apache.lucene.document.CompressionTools: byte[] compress(byte[],int,int,int)>(r0, 0, $i0, 9);

        return $r1;
    }

    public static byte[] compressString(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.lucene.document.CompressionTools: byte[] compressString(java.lang.String,int)>(r0, 9);

        return $r1;
    }

    public static byte[] compressString(java.lang.String, int)
    {
        byte[] $r2, $r3;
        org.apache.lucene.util.BytesRef $r0;
        int $i0, i1, $i2;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        $r0 = new org.apache.lucene.util.BytesRef;

        specialinvoke $r0.<org.apache.lucene.util.BytesRef: void <init>()>();

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        staticinvoke <org.apache.lucene.util.UnicodeUtil: void UTF16toUTF8(java.lang.CharSequence,int,int,org.apache.lucene.util.BytesRef)>(r1, 0, $i0, $r0);

        $r2 = $r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i2 = $r0.<org.apache.lucene.util.BytesRef: int length>;

        $r3 = staticinvoke <org.apache.lucene.document.CompressionTools: byte[] compress(byte[],int,int,int)>($r2, 0, $i2, i1);

        return $r3;
    }

    public static byte[] decompress(org.apache.lucene.util.BytesRef) throws java.util.zip.DataFormatException
    {
        byte[] $r1, $r2;
        org.apache.lucene.util.BytesRef r0;
        int $i0, $i1;

        r0 := @parameter0: org.apache.lucene.util.BytesRef;

        $r1 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i1 = r0.<org.apache.lucene.util.BytesRef: int offset>;

        $i0 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $r2 = staticinvoke <org.apache.lucene.document.CompressionTools: byte[] decompress(byte[],int,int)>($r1, $i1, $i0);

        return $r2;
    }

    public static byte[] decompress(byte[]) throws java.util.zip.DataFormatException
    {
        int $i0;
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.apache.lucene.document.CompressionTools: byte[] decompress(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static byte[] decompress(byte[], int, int) throws java.util.zip.DataFormatException
    {
        java.lang.Throwable $r5;
        byte[] r2, r3, $r4;
        java.io.ByteArrayOutputStream $r0;
        java.util.zip.Inflater $r1;
        int i0, i1, $i2;
        boolean $z0;

        r2 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>(int)>(i0);

        $r1 = new java.util.zip.Inflater;

        specialinvoke $r1.<java.util.zip.Inflater: void <init>()>();

     label1:
        virtualinvoke $r1.<java.util.zip.Inflater: void setInput(byte[],int,int)>(r2, i1, i0);

        r3 = newarray (byte)[1024];

     label2:
        $z0 = virtualinvoke $r1.<java.util.zip.Inflater: boolean finished()>();

        if $z0 != 0 goto label3;

        $i2 = virtualinvoke $r1.<java.util.zip.Inflater: int inflate(byte[])>(r3);

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r3, 0, $i2);

        goto label2;

     label3:
        virtualinvoke $r1.<java.util.zip.Inflater: void end()>();

        goto label6;

     label4:
        $r5 := @caughtexception;

     label5:
        virtualinvoke $r1.<java.util.zip.Inflater: void end()>();

        throw $r5;

     label6:
        $r4 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r4;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static java.lang.String decompressString(byte[]) throws java.util.zip.DataFormatException
    {
        int $i0;
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.apache.lucene.document.CompressionTools: java.lang.String decompressString(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static java.lang.String decompressString(byte[], int, int) throws java.util.zip.DataFormatException
    {
        byte[] r0, $r1;
        org.apache.lucene.util.CharsRef $r2;
        int i0, i1, $i2, $i3, $i4;
        char[] $r4;
        java.lang.String $r3;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <org.apache.lucene.document.CompressionTools: byte[] decompress(byte[],int,int)>(r0, i0, i1);

        $r2 = new org.apache.lucene.util.CharsRef;

        $i2 = lengthof $r1;

        specialinvoke $r2.<org.apache.lucene.util.CharsRef: void <init>(int)>($i2);

        $i3 = lengthof $r1;

        staticinvoke <org.apache.lucene.util.UnicodeUtil: void UTF8toUTF16(byte[],int,int,org.apache.lucene.util.CharsRef)>($r1, 0, $i3, $r2);

        $r3 = new java.lang.String;

        $r4 = $r2.<org.apache.lucene.util.CharsRef: char[] chars>;

        $i4 = $r2.<org.apache.lucene.util.CharsRef: int length>;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>($r4, 0, $i4);

        return $r3;
    }

    public static java.lang.String decompressString(org.apache.lucene.util.BytesRef) throws java.util.zip.DataFormatException
    {
        byte[] $r1;
        org.apache.lucene.util.BytesRef r0;
        int $i0, $i1;
        java.lang.String $r2;

        r0 := @parameter0: org.apache.lucene.util.BytesRef;

        $r1 = r0.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $i1 = r0.<org.apache.lucene.util.BytesRef: int offset>;

        $i0 = r0.<org.apache.lucene.util.BytesRef: int length>;

        $r2 = staticinvoke <org.apache.lucene.document.CompressionTools: java.lang.String decompressString(byte[],int,int)>($r1, $i1, $i0);

        return $r2;
    }
}
