public class org.eclipse.jetty.util.thread.ExecutorThreadPool extends org.eclipse.jetty.util.component.AbstractLifeCycle implements org.eclipse.jetty.util.thread.ThreadPool, org.eclipse.jetty.util.component.LifeCycle
{
    private static final org.eclipse.jetty.util.log.Logger LOG;
    private final java.util.concurrent.ExecutorService _executor;

    public void <init>(java.util.concurrent.ExecutorService)
    {
        org.eclipse.jetty.util.thread.ExecutorThreadPool r0;
        java.util.concurrent.ExecutorService r1;

        r0 := @this: org.eclipse.jetty.util.thread.ExecutorThreadPool;

        r1 := @parameter0: java.util.concurrent.ExecutorService;

        specialinvoke r0.<org.eclipse.jetty.util.component.AbstractLifeCycle: void <init>()>();

        r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: java.util.concurrent.ExecutorService _executor> = r1;

        return;
    }

    public void <init>()
    {
        java.util.concurrent.TimeUnit $r3;
        java.util.concurrent.ThreadPoolExecutor $r1;
        org.eclipse.jetty.util.thread.ExecutorThreadPool r0;
        java.util.concurrent.LinkedBlockingQueue $r2;

        r0 := @this: org.eclipse.jetty.util.thread.ExecutorThreadPool;

        $r1 = new java.util.concurrent.ThreadPoolExecutor;

        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r2 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(256, 256, 60L, $r3, $r2);

        specialinvoke r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: void <init>(java.util.concurrent.ExecutorService)>($r1);

        return;
    }

    public void <init>(int)
    {
        java.util.concurrent.SynchronousQueue $r3;
        java.util.concurrent.ThreadPoolExecutor $r5, $r8;
        org.eclipse.jetty.util.thread.ExecutorThreadPool r0;
        java.util.concurrent.LinkedBlockingQueue $r6;
        java.util.concurrent.TimeUnit $r2, $r4, $r7;
        java.util.concurrent.ArrayBlockingQueue $r1;
        int i0;

        r0 := @this: org.eclipse.jetty.util.thread.ExecutorThreadPool;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r5 = new java.util.concurrent.ThreadPoolExecutor;

        $r8 = $r5;

        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r6 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r6.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke $r5.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(256, 256, 60L, $r7, $r6);

        goto label3;

     label1:
        if i0 != 0 goto label2;

        $r8 = new java.util.concurrent.ThreadPoolExecutor;

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r3 = new java.util.concurrent.SynchronousQueue;

        specialinvoke $r3.<java.util.concurrent.SynchronousQueue: void <init>()>();

        specialinvoke $r8.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(32, 256, 60L, $r4, $r3);

        goto label3;

     label2:
        $r8 = new java.util.concurrent.ThreadPoolExecutor;

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        $r1 = new java.util.concurrent.ArrayBlockingQueue;

        specialinvoke $r1.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>(i0);

        specialinvoke $r8.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(32, 256, 60L, $r2, $r1);

     label3:
        specialinvoke r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: void <init>(java.util.concurrent.ExecutorService)>($r8);

        return;
    }

    public void <init>(int, int, long)
    {
        java.util.concurrent.TimeUnit $r1;
        int i0, i1;
        org.eclipse.jetty.util.thread.ExecutorThreadPool r0;
        long l2;

        r0 := @this: org.eclipse.jetty.util.thread.ExecutorThreadPool;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        specialinvoke r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: void <init>(int,int,long,java.util.concurrent.TimeUnit)>(i0, i1, l2, $r1);

        return;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit)
    {
        java.util.concurrent.TimeUnit r1;
        int i0, i1;
        org.eclipse.jetty.util.thread.ExecutorThreadPool r0;
        long l2;
        java.util.concurrent.LinkedBlockingQueue $r2;

        r0 := @this: org.eclipse.jetty.util.thread.ExecutorThreadPool;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r1 := @parameter3: java.util.concurrent.TimeUnit;

        $r2 = new java.util.concurrent.LinkedBlockingQueue;

        specialinvoke $r2.<java.util.concurrent.LinkedBlockingQueue: void <init>()>();

        specialinvoke r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(i0, i1, l2, r1, $r2);

        return;
    }

    public void <init>(int, int, long, java.util.concurrent.TimeUnit, java.util.concurrent.BlockingQueue)
    {
        java.util.concurrent.TimeUnit r2;
        java.util.concurrent.ThreadPoolExecutor $r1;
        int i0, i1;
        org.eclipse.jetty.util.thread.ExecutorThreadPool r0;
        long l2;
        java.util.concurrent.BlockingQueue r3;

        r0 := @this: org.eclipse.jetty.util.thread.ExecutorThreadPool;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r2 := @parameter3: java.util.concurrent.TimeUnit;

        r3 := @parameter4: java.util.concurrent.BlockingQueue;

        $r1 = new java.util.concurrent.ThreadPoolExecutor;

        specialinvoke $r1.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue)>(i0, i1, l2, r2, r3);

        specialinvoke r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: void <init>(java.util.concurrent.ExecutorService)>($r1);

        return;
    }

    public boolean dispatch(java.lang.Runnable)
    {
        java.util.concurrent.RejectedExecutionException $r3;
        org.eclipse.jetty.util.thread.ExecutorThreadPool r0;
        org.eclipse.jetty.util.log.Logger $r4;
        java.lang.Runnable r1;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: org.eclipse.jetty.util.thread.ExecutorThreadPool;

        r1 := @parameter0: java.lang.Runnable;

     label1:
        $r2 = r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: java.util.concurrent.ExecutorService _executor>;

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>(r1);

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        $r4 = <org.eclipse.jetty.util.thread.ExecutorThreadPool: org.eclipse.jetty.util.log.Logger LOG>;

        interfaceinvoke $r4.<org.eclipse.jetty.util.log.Logger: void warn(java.lang.Throwable)>($r3);

        return 0;

        catch java.util.concurrent.RejectedExecutionException from label1 to label2 with label3;
    }

    public int getIdleThreads()
    {
        java.util.concurrent.ThreadPoolExecutor r3;
        org.eclipse.jetty.util.thread.ExecutorThreadPool r0;
        int $i0, $i1, $i2, $i4;
        java.util.concurrent.ExecutorService $r1, $r2;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.thread.ExecutorThreadPool;

        $r1 = r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: java.util.concurrent.ExecutorService _executor>;

        $z0 = $r1 instanceof java.util.concurrent.ThreadPoolExecutor;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: java.util.concurrent.ExecutorService _executor>;

        r3 = (java.util.concurrent.ThreadPoolExecutor) $r2;

        $i0 = virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>();

        $i1 = virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor: int getActiveCount()>();

        $i2 = $i0 - $i1;

        return $i2;

     label1:
        $i4 = (int) -1;

        return $i4;
    }

    public int getThreads()
    {
        java.util.concurrent.ThreadPoolExecutor r3;
        int $i0, $i2;
        org.eclipse.jetty.util.thread.ExecutorThreadPool r0;
        java.util.concurrent.ExecutorService $r1, $r2;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.thread.ExecutorThreadPool;

        $r1 = r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: java.util.concurrent.ExecutorService _executor>;

        $z0 = $r1 instanceof java.util.concurrent.ThreadPoolExecutor;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: java.util.concurrent.ExecutorService _executor>;

        r3 = (java.util.concurrent.ThreadPoolExecutor) $r2;

        $i0 = virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>();

        return $i0;

     label1:
        $i2 = (int) -1;

        return $i2;
    }

    public boolean isLowOnThreads()
    {
        java.util.concurrent.ThreadPoolExecutor r3;
        org.eclipse.jetty.util.thread.ExecutorThreadPool r0;
        java.util.concurrent.BlockingQueue $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.concurrent.ExecutorService $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jetty.util.thread.ExecutorThreadPool;

        $r1 = r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: java.util.concurrent.ExecutorService _executor>;

        $z0 = $r1 instanceof java.util.concurrent.ThreadPoolExecutor;

        if $z0 == 0 goto label3;

        $r2 = r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: java.util.concurrent.ExecutorService _executor>;

        r3 = (java.util.concurrent.ThreadPoolExecutor) $r2;

        $i0 = virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>();

        $i1 = virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()>();

        if $i0 != $i1 goto label1;

        $r4 = virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor: java.util.concurrent.BlockingQueue getQueue()>();

        $i2 = interfaceinvoke $r4.<java.util.concurrent.BlockingQueue: int size()>();

        $i3 = virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>();

        $i4 = virtualinvoke r3.<java.util.concurrent.ThreadPoolExecutor: int getActiveCount()>();

        $i5 = $i3 - $i4;

        if $i2 < $i5 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public void join() throws java.lang.InterruptedException
    {
        java.util.concurrent.TimeUnit $r1;
        org.eclipse.jetty.util.thread.ExecutorThreadPool r0;
        java.util.concurrent.ExecutorService $r2;

        r0 := @this: org.eclipse.jetty.util.thread.ExecutorThreadPool;

        $r2 = r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: java.util.concurrent.ExecutorService _executor>;

        $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        interfaceinvoke $r2.<java.util.concurrent.ExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(9223372036854775807L, $r1);

        return;
    }

    protected void doStop() throws java.lang.Exception
    {
        org.eclipse.jetty.util.thread.ExecutorThreadPool r0;
        java.util.concurrent.ExecutorService $r1;

        r0 := @this: org.eclipse.jetty.util.thread.ExecutorThreadPool;

        specialinvoke r0.<org.eclipse.jetty.util.component.AbstractLifeCycle: void doStop()>();

        $r1 = r0.<org.eclipse.jetty.util.thread.ExecutorThreadPool: java.util.concurrent.ExecutorService _executor>;

        interfaceinvoke $r1.<java.util.concurrent.ExecutorService: java.util.List shutdownNow()>();

        return;
    }

    static void <clinit>()
    {
        org.eclipse.jetty.util.log.Logger $r0;

        $r0 = staticinvoke <org.eclipse.jetty.util.log.Log: org.eclipse.jetty.util.log.Logger getLogger(java.lang.Class)>(class "Lorg/eclipse/jetty/util/thread/ExecutorThreadPool;");

        <org.eclipse.jetty.util.thread.ExecutorThreadPool: org.eclipse.jetty.util.log.Logger LOG> = $r0;

        return;
    }
}
