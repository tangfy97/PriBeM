class org.springframework.context.config.MBeanExportBeanDefinitionParser extends org.springframework.beans.factory.xml.AbstractBeanDefinitionParser
{
    private static final java.lang.String MBEAN_EXPORTER_BEAN_NAME;
    private static final java.lang.String DEFAULT_DOMAIN_ATTRIBUTE;
    private static final java.lang.String SERVER_ATTRIBUTE;
    private static final java.lang.String REGISTRATION_ATTRIBUTE;
    private static final java.lang.String REGISTRATION_IGNORE_EXISTING;
    private static final java.lang.String REGISTRATION_REPLACE_EXISTING;

    void <init>()
    {
        org.springframework.context.config.MBeanExportBeanDefinitionParser r0;

        r0 := @this: org.springframework.context.config.MBeanExportBeanDefinitionParser;

        specialinvoke r0.<org.springframework.beans.factory.xml.AbstractBeanDefinitionParser: void <init>()>();

        return;
    }

    protected java.lang.String resolveId(org.w3c.dom.Element, org.springframework.beans.factory.support.AbstractBeanDefinition, org.springframework.beans.factory.xml.ParserContext)
    {
        org.w3c.dom.Element r1;
        org.springframework.context.config.MBeanExportBeanDefinitionParser r0;
        org.springframework.beans.factory.xml.ParserContext r3;
        org.springframework.beans.factory.support.AbstractBeanDefinition r2;

        r0 := @this: org.springframework.context.config.MBeanExportBeanDefinitionParser;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r3 := @parameter2: org.springframework.beans.factory.xml.ParserContext;

        return "mbeanExporter";
    }

    protected org.springframework.beans.factory.support.AbstractBeanDefinition parseInternal(org.w3c.dom.Element, org.springframework.beans.factory.xml.ParserContext)
    {
        org.springframework.beans.factory.support.BeanDefinitionBuilder $r0;
        org.springframework.beans.factory.support.AbstractBeanDefinition $r1, $r7, $r13;
        java.lang.Integer $r12;
        byte b0;
        org.springframework.beans.factory.xml.ParserContext r2;
        java.lang.String $r5, $r6, $r8, $r10, $r11;
        boolean $z0, $z1, $z2, $z3;
        org.w3c.dom.Element r3;
        org.springframework.context.config.MBeanExportBeanDefinitionParser r9;
        java.lang.Object $r4;

        r9 := @this: org.springframework.context.config.MBeanExportBeanDefinitionParser;

        r3 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: org.springframework.beans.factory.xml.ParserContext;

        $r0 = staticinvoke <org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder rootBeanDefinition(java.lang.Class)>(class "Lorg/springframework/jmx/export/annotation/AnnotationMBeanExporter;");

        virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder setRole(int)>(2);

        $r1 = virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.AbstractBeanDefinition getRawBeanDefinition()>();

        $r4 = virtualinvoke r2.<org.springframework.beans.factory.xml.ParserContext: java.lang.Object extractSource(java.lang.Object)>(r3);

        virtualinvoke $r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setSource(java.lang.Object)>($r4);

        $r5 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("default-domain");

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r5);

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("defaultDomain", $r5);

     label1:
        $r6 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("server");

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r6);

        if $z1 == 0 goto label2;

        virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyReference(java.lang.String,java.lang.String)>("server", $r6);

        goto label3;

     label2:
        $r7 = staticinvoke <org.springframework.context.config.MBeanServerBeanDefinitionParser: org.springframework.beans.factory.support.AbstractBeanDefinition findServerForSpecialEnvironment()>();

        if $r7 == null goto label3;

        virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("server", $r7);

     label3:
        $r10 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttribute(java.lang.String)>("registration");

        b0 = 0;

        $r11 = "ignoreExisting";

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z3 == 0 goto label4;

        b0 = 1;

        goto label5;

     label4:
        $r8 = "replaceExisting";

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label5;

        b0 = 2;

     label5:
        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b0);

        virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.BeanDefinitionBuilder addPropertyValue(java.lang.String,java.lang.Object)>("registrationBehavior", $r12);

        $r13 = virtualinvoke $r0.<org.springframework.beans.factory.support.BeanDefinitionBuilder: org.springframework.beans.factory.support.AbstractBeanDefinition getBeanDefinition()>();

        return $r13;
    }

    public static void <clinit>()
    {
        <org.springframework.context.config.MBeanExportBeanDefinitionParser: java.lang.String REGISTRATION_REPLACE_EXISTING> = "replaceExisting";

        <org.springframework.context.config.MBeanExportBeanDefinitionParser: java.lang.String REGISTRATION_IGNORE_EXISTING> = "ignoreExisting";

        <org.springframework.context.config.MBeanExportBeanDefinitionParser: java.lang.String REGISTRATION_ATTRIBUTE> = "registration";

        <org.springframework.context.config.MBeanExportBeanDefinitionParser: java.lang.String SERVER_ATTRIBUTE> = "server";

        <org.springframework.context.config.MBeanExportBeanDefinitionParser: java.lang.String DEFAULT_DOMAIN_ATTRIBUTE> = "default-domain";

        <org.springframework.context.config.MBeanExportBeanDefinitionParser: java.lang.String MBEAN_EXPORTER_BEAN_NAME> = "mbeanExporter";

        return;
    }
}
