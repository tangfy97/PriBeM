public class org.codehaus.groovy.reflection.SingleKeyHashMap extends org.codehaus.groovy.reflection.ComplexKeyHashMap
{

    public void <init>()
    {
        org.codehaus.groovy.reflection.SingleKeyHashMap r0;

        r0 := @this: org.codehaus.groovy.reflection.SingleKeyHashMap;

        specialinvoke r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: void <init>()>();

        return;
    }

    public void <init>(boolean)
    {
        org.codehaus.groovy.reflection.SingleKeyHashMap r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.reflection.SingleKeyHashMap;

        z0 := @parameter0: boolean;

        specialinvoke r0.<org.codehaus.groovy.reflection.ComplexKeyHashMap: void <init>(boolean)>(0);

        return;
    }

    public boolean containsKey(java.lang.String)
    {
        org.codehaus.groovy.reflection.SingleKeyHashMap r0;
        java.lang.Object $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.reflection.SingleKeyHashMap;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.reflection.SingleKeyHashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void put(java.lang.Object, java.lang.Object)
    {
        org.codehaus.groovy.reflection.SingleKeyHashMap r0;
        java.lang.Object r1, r3;
        org.codehaus.groovy.reflection.SingleKeyHashMap$Entry $r2;

        r0 := @this: org.codehaus.groovy.reflection.SingleKeyHashMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r2 = virtualinvoke r0.<org.codehaus.groovy.reflection.SingleKeyHashMap: org.codehaus.groovy.reflection.SingleKeyHashMap$Entry getOrPut(java.lang.Object)>(r1);

        $r2.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object value> = r3;

        return;
    }

    public final java.lang.Object get(java.lang.Object)
    {
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry r8;
        boolean $z0;
        org.codehaus.groovy.reflection.SingleKeyHashMap r1;
        java.lang.Object r0, $r5, $r7;
        org.codehaus.groovy.reflection.SingleKeyHashMap$Entry $r4, $r6;

        r1 := @this: org.codehaus.groovy.reflection.SingleKeyHashMap;

        r0 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <org.codehaus.groovy.reflection.SingleKeyHashMap: int hash(int)>($i0);

        $r3 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table>;

        $r2 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table>;

        $i2 = lengthof $r2;

        $i3 = $i2 - 1;

        $i4 = $i1 & $i3;

        r8 = $r3[$i4];

     label1:
        if r8 == null goto label3;

        $i5 = r8.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: int hash>;

        if $i5 != $i1 goto label2;

        $r4 = (org.codehaus.groovy.reflection.SingleKeyHashMap$Entry) r8;

        $r5 = $r4.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object key>;

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r6 = (org.codehaus.groovy.reflection.SingleKeyHashMap$Entry) r8;

        $r7 = $r6.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object value>;

        return $r7;

     label2:
        r8 = r8.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next>;

        goto label1;

     label3:
        return null;
    }

    public org.codehaus.groovy.reflection.SingleKeyHashMap$Entry getOrPut(java.lang.Object)
    {
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] r2;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10;
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry $r4, r8;
        boolean $z0;
        org.codehaus.groovy.reflection.SingleKeyHashMap r1;
        java.lang.Object r0, $r6;
        org.codehaus.groovy.reflection.SingleKeyHashMap$Entry $r3, $r5, $r7;

        r1 := @this: org.codehaus.groovy.reflection.SingleKeyHashMap;

        r0 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <org.codehaus.groovy.reflection.SingleKeyHashMap: int hash(int)>($i0);

        r2 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table>;

        $i2 = lengthof r2;

        $i3 = $i2 - 1;

        i4 = $i1 & $i3;

        r8 = r2[i4];

     label1:
        if r8 == null goto label3;

        $i10 = r8.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: int hash>;

        if $i10 != $i1 goto label2;

        $r5 = (org.codehaus.groovy.reflection.SingleKeyHashMap$Entry) r8;

        $r6 = $r5.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object key>;

        $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        $r7 = (org.codehaus.groovy.reflection.SingleKeyHashMap$Entry) r8;

        return $r7;

     label2:
        r8 = r8.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next>;

        goto label1;

     label3:
        $r3 = new org.codehaus.groovy.reflection.SingleKeyHashMap$Entry;

        specialinvoke $r3.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: void <init>()>();

        $r4 = r2[i4];

        $r3.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next> = $r4;

        $r3.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: int hash> = $i1;

        $r3.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object key> = r0;

        r2[i4] = $r3;

        $i5 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: int size>;

        $i6 = $i5 + 1;

        r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: int size> = $i6;

        $i7 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: int threshold>;

        if $i6 != $i7 goto label4;

        $i8 = lengthof r2;

        $i9 = 2 * $i8;

        virtualinvoke r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: void resize(int)>($i9);

     label4:
        return $r3;
    }

    public org.codehaus.groovy.reflection.SingleKeyHashMap$Entry getOrPutEntry(org.codehaus.groovy.reflection.SingleKeyHashMap$Entry)
    {
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] r3;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry $r5, r9;
        boolean $z0;
        org.codehaus.groovy.reflection.SingleKeyHashMap r2;
        java.lang.Object r1, $r7;
        org.codehaus.groovy.reflection.SingleKeyHashMap$Entry r0, $r4, $r6, $r8;

        r2 := @this: org.codehaus.groovy.reflection.SingleKeyHashMap;

        r0 := @parameter0: org.codehaus.groovy.reflection.SingleKeyHashMap$Entry;

        r1 = r0.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object key>;

        i0 = r0.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: int hash>;

        r3 = r2.<org.codehaus.groovy.reflection.SingleKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table>;

        $i1 = lengthof r3;

        $i2 = $i1 - 1;

        i3 = i0 & $i2;

        r9 = r3[i3];

     label1:
        if r9 == null goto label3;

        $i9 = r9.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: int hash>;

        if $i9 != i0 goto label2;

        $r6 = (org.codehaus.groovy.reflection.SingleKeyHashMap$Entry) r9;

        $r7 = $r6.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object key>;

        $z0 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r8 = (org.codehaus.groovy.reflection.SingleKeyHashMap$Entry) r9;

        return $r8;

     label2:
        r9 = r9.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next>;

        goto label1;

     label3:
        $r4 = new org.codehaus.groovy.reflection.SingleKeyHashMap$Entry;

        specialinvoke $r4.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: void <init>()>();

        $r5 = r3[i3];

        $r4.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next> = $r5;

        $r4.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: int hash> = i0;

        $r4.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object key> = r1;

        r3[i3] = $r4;

        $i4 = r2.<org.codehaus.groovy.reflection.SingleKeyHashMap: int size>;

        $i5 = $i4 + 1;

        r2.<org.codehaus.groovy.reflection.SingleKeyHashMap: int size> = $i5;

        $i6 = r2.<org.codehaus.groovy.reflection.SingleKeyHashMap: int threshold>;

        if $i5 != $i6 goto label4;

        $i7 = lengthof r3;

        $i8 = 2 * $i7;

        virtualinvoke r2.<org.codehaus.groovy.reflection.SingleKeyHashMap: void resize(int)>($i8);

     label4:
        return $r4;
    }

    public org.codehaus.groovy.reflection.SingleKeyHashMap$Entry putCopyOfUnexisting(org.codehaus.groovy.reflection.SingleKeyHashMap$Entry)
    {
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] r2;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8;
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry $r4;
        org.codehaus.groovy.reflection.SingleKeyHashMap r1;
        java.lang.Object $r5, $r6;
        org.codehaus.groovy.reflection.SingleKeyHashMap$Entry r0, $r3;

        r1 := @this: org.codehaus.groovy.reflection.SingleKeyHashMap;

        r0 := @parameter0: org.codehaus.groovy.reflection.SingleKeyHashMap$Entry;

        i0 = r0.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: int hash>;

        r2 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table>;

        $i1 = lengthof r2;

        $i2 = $i1 - 1;

        i3 = i0 & $i2;

        $r3 = new org.codehaus.groovy.reflection.SingleKeyHashMap$Entry;

        specialinvoke $r3.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: void <init>()>();

        $r4 = r2[i3];

        $r3.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next> = $r4;

        $r3.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: int hash> = i0;

        $r5 = r0.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object key>;

        $r3.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object key> = $r5;

        $r6 = r0.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object value>;

        $r3.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object value> = $r6;

        r2[i3] = $r3;

        $i4 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: int size>;

        $i5 = $i4 + 1;

        r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: int size> = $i5;

        $i6 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: int threshold>;

        if $i5 != $i6 goto label1;

        $i7 = lengthof r2;

        $i8 = 2 * $i7;

        virtualinvoke r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: void resize(int)>($i8);

     label1:
        return $r3;
    }

    public final org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry remove(java.lang.Object)
    {
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] $r2, $r3, $r8;
        int $i0, $i1, $i2, $i3, i4, $i5, $i6, $i7;
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry $r6, $r7, r9, r10;
        boolean $z0;
        org.codehaus.groovy.reflection.SingleKeyHashMap r1;
        java.lang.Object r0, $r5;
        org.codehaus.groovy.reflection.SingleKeyHashMap$Entry $r4;

        r1 := @this: org.codehaus.groovy.reflection.SingleKeyHashMap;

        r0 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $i1 = staticinvoke <org.codehaus.groovy.reflection.SingleKeyHashMap: int hash(int)>($i0);

        $r2 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table>;

        $i2 = lengthof $r2;

        $i3 = $i2 - 1;

        i4 = $i1 & $i3;

        $r3 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table>;

        r9 = $r3[i4];

        r10 = null;

     label1:
        if r9 == null goto label5;

        $i5 = r9.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: int hash>;

        if $i5 != $i1 goto label4;

        $r4 = (org.codehaus.groovy.reflection.SingleKeyHashMap$Entry) r9;

        $r5 = $r4.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object key>;

        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label4;

        if r10 != null goto label2;

        $r8 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table>;

        $r7 = r9.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next>;

        $r8[i4] = $r7;

        goto label3;

     label2:
        $r6 = r9.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next>;

        r10.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next> = $r6;

     label3:
        $i6 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: int size>;

        $i7 = $i6 - 1;

        r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: int size> = $i7;

        r9.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next> = null;

        return r9;

     label4:
        r10 = r9;

        r9 = r9.<org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next>;

        goto label1;

     label5:
        return null;
    }

    public static org.codehaus.groovy.reflection.SingleKeyHashMap copy(org.codehaus.groovy.reflection.SingleKeyHashMap, org.codehaus.groovy.reflection.SingleKeyHashMap, org.codehaus.groovy.reflection.SingleKeyHashMap$Copier)
    {
        org.codehaus.groovy.reflection.SingleKeyHashMap$Copier r8;
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] $r2, r3, r4;
        int $i0, $i1, i2, $i3, i4;
        org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry $r5, $r11, $r12;
        org.codehaus.groovy.reflection.SingleKeyHashMap r0, r1;
        java.lang.Object $r7, $r9, $r10;
        org.codehaus.groovy.reflection.SingleKeyHashMap$Entry $r6, r13;

        r0 := @parameter0: org.codehaus.groovy.reflection.SingleKeyHashMap;

        r1 := @parameter1: org.codehaus.groovy.reflection.SingleKeyHashMap;

        r8 := @parameter2: org.codehaus.groovy.reflection.SingleKeyHashMap$Copier;

        $i0 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: int threshold>;

        r0.<org.codehaus.groovy.reflection.SingleKeyHashMap: int threshold> = $i0;

        $i1 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: int size>;

        r0.<org.codehaus.groovy.reflection.SingleKeyHashMap: int size> = $i1;

        $r2 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table>;

        i2 = lengthof $r2;

        r3 = newarray (org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry)[i2];

        r4 = r1.<org.codehaus.groovy.reflection.SingleKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table>;

        i4 = 0;

     label1:
        if i4 == i2 goto label4;

        $r5 = r4[i4];

        r13 = (org.codehaus.groovy.reflection.SingleKeyHashMap$Entry) $r5;

     label2:
        if r13 == null goto label3;

        $r6 = new org.codehaus.groovy.reflection.SingleKeyHashMap$Entry;

        specialinvoke $r6.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: void <init>()>();

        $i3 = r13.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: int hash>;

        $r6.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: int hash> = $i3;

        $r7 = r13.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object key>;

        $r6.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object key> = $r7;

        $r9 = r13.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object value>;

        $r10 = interfaceinvoke r8.<org.codehaus.groovy.reflection.SingleKeyHashMap$Copier: java.lang.Object copy(java.lang.Object)>($r9);

        $r6.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: java.lang.Object value> = $r10;

        $r11 = r3[i4];

        $r6.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next> = $r11;

        r3[i4] = $r6;

        $r12 = r13.<org.codehaus.groovy.reflection.SingleKeyHashMap$Entry: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry next>;

        r13 = (org.codehaus.groovy.reflection.SingleKeyHashMap$Entry) $r12;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        r0.<org.codehaus.groovy.reflection.SingleKeyHashMap: org.codehaus.groovy.reflection.ComplexKeyHashMap$Entry[] table> = r3;

        return r0;
    }
}
