public class org.codehaus.jackson.map.ser.std.ObjectArraySerializer extends org.codehaus.jackson.map.ser.std.StdArraySerializers$ArraySerializerBase implements org.codehaus.jackson.map.ResolvableSerializer
{
    protected final boolean _staticTyping;
    protected final org.codehaus.jackson.type.JavaType _elementType;
    protected org.codehaus.jackson.map.JsonSerializer _elementSerializer;
    protected org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers;

    public void <init>(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty)
    {
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.ser.std.ObjectArraySerializer r0;
        org.codehaus.jackson.map.BeanProperty r3;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.ObjectArraySerializer;

        r1 := @parameter0: org.codehaus.jackson.type.JavaType;

        z0 := @parameter1: boolean;

        r2 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        r3 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>(r1, z0, r2, r3, null);

        return;
    }

    public void <init>(org.codehaus.jackson.type.JavaType, boolean, org.codehaus.jackson.map.TypeSerializer, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.JsonSerializer)
    {
        org.codehaus.jackson.map.TypeSerializer r1;
        org.codehaus.jackson.type.JavaType r3;
        org.codehaus.jackson.map.JsonSerializer r5;
        org.codehaus.jackson.map.ser.std.ObjectArraySerializer r0;
        org.codehaus.jackson.map.BeanProperty r2;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap $r4;
        boolean z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.ObjectArraySerializer;

        r3 := @parameter0: org.codehaus.jackson.type.JavaType;

        z0 := @parameter1: boolean;

        r1 := @parameter2: org.codehaus.jackson.map.TypeSerializer;

        r2 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        r5 := @parameter4: org.codehaus.jackson.map.JsonSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.std.StdArraySerializers$ArraySerializerBase: void <init>(java.lang.Class,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty)>(class "[Ljava/lang/Object;", r1, r2);

        r0.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.type.JavaType _elementType> = r3;

        r0.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: boolean _staticTyping> = z0;

        $r4 = staticinvoke <org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap emptyMap()>();

        r0.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers> = $r4;

        r0.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer> = r5;

        return;
    }

    public org.codehaus.jackson.map.ser.std.ContainerSerializerBase _withValueTypeSerializer(org.codehaus.jackson.map.TypeSerializer)
    {
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.type.JavaType $r5;
        org.codehaus.jackson.map.JsonSerializer $r3;
        org.codehaus.jackson.map.ser.std.ObjectArraySerializer $r0, r1;
        org.codehaus.jackson.map.BeanProperty $r4;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.ser.std.ObjectArraySerializer;

        r2 := @parameter0: org.codehaus.jackson.map.TypeSerializer;

        $r0 = new org.codehaus.jackson.map.ser.std.ObjectArraySerializer;

        $r5 = r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $z0 = r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: boolean _staticTyping>;

        $r4 = r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r3 = r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: void <init>(org.codehaus.jackson.type.JavaType,boolean,org.codehaus.jackson.map.TypeSerializer,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.JsonSerializer)>($r5, $z0, r2, $r4, $r3);

        return $r0;
    }

    public void serializeContents(java.lang.Object[], org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        java.lang.Throwable $r15, r20;
        java.lang.Object[] r0;
        org.codehaus.jackson.map.SerializerProvider r7;
        java.lang.Error $r14;
        org.codehaus.jackson.map.JsonMappingException $r13;
        org.codehaus.jackson.map.TypeSerializer $r3;
        org.codehaus.jackson.JsonGenerator r6;
        int i0, i1;
        org.codehaus.jackson.type.JavaType $r8, $r9, $r10;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r18;
        boolean $z0, $z1, $z2;
        java.io.IOException $r16;
        org.codehaus.jackson.map.JsonSerializer $r2, $r5, $r11, r19;
        org.codehaus.jackson.map.ser.std.ObjectArraySerializer r1;
        java.lang.Exception $r12;
        java.lang.Class $r4;
        java.lang.Object r17;

        r1 := @this: org.codehaus.jackson.map.ser.std.ObjectArraySerializer;

        r0 := @parameter0: java.lang.Object[];

        r6 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r7 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        i0 = lengthof r0;

        if i0 != 0 goto label01;

        return;

     label01:
        $r2 = r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        if $r2 == null goto label02;

        $r11 = r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        virtualinvoke r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: void serializeContentsUsing(java.lang.Object[],org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.JsonSerializer)>(r0, r6, r7, $r11);

        return;

     label02:
        $r3 = r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        if $r3 == null goto label03;

        virtualinvoke r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: void serializeTypedContents(java.lang.Object[],org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r0, r6, r7);

        return;

     label03:
        i1 = 0;

        r17 = null;

     label04:
        r18 = r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers>;

     label05:
        if i1 >= i0 goto label10;

        r17 = r0[i1];

        if r17 != null goto label06;

        virtualinvoke r7.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r6);

        goto label09;

     label06:
        $r4 = virtualinvoke r17.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke r18.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.JsonSerializer serializerFor(java.lang.Class)>($r4);

        r19 = $r5;

        if $r5 != null goto label08;

        $r8 = r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $z0 = virtualinvoke $r8.<org.codehaus.jackson.type.JavaType: boolean hasGenericTypes()>();

        if $z0 == 0 goto label07;

        $r9 = r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $r10 = virtualinvoke r7.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType,java.lang.Class)>($r9, $r4);

        r19 = virtualinvoke r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializerProvider)>(r18, $r10, r7);

        goto label08;

     label07:
        r19 = virtualinvoke r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,java.lang.Class,org.codehaus.jackson.map.SerializerProvider)>(r18, $r4, r7);

     label08:
        virtualinvoke r19.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r17, r6, r7);

     label09:
        i1 = i1 + 1;

        goto label05;

     label10:
        goto label16;

     label11:
        $r16 := @caughtexception;

        throw $r16;

     label12:
        $r12 := @caughtexception;

        r20 = $r12;

     label13:
        $z1 = r20 instanceof java.lang.reflect.InvocationTargetException;

        if $z1 == 0 goto label14;

        $r15 = virtualinvoke r20.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r15 == null goto label14;

        r20 = virtualinvoke r20.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label13;

     label14:
        $z2 = r20 instanceof java.lang.Error;

        if $z2 == 0 goto label15;

        $r14 = (java.lang.Error) r20;

        throw $r14;

     label15:
        $r13 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,int)>(r20, r17, i1);

        throw $r13;

     label16:
        return;

        catch java.io.IOException from label04 to label10 with label11;
        catch java.lang.Exception from label04 to label10 with label12;
    }

    public void serializeContentsUsing(java.lang.Object[], org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.JsonSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        java.lang.Throwable $r9, r12;
        java.lang.Object[] r0;
        org.codehaus.jackson.map.SerializerProvider r5;
        java.lang.Error $r8;
        org.codehaus.jackson.map.JsonMappingException $r7;
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.JsonGenerator r4;
        int i0, i1;
        boolean $z0, $z1;
        java.io.IOException $r10;
        org.codehaus.jackson.map.JsonSerializer r3;
        org.codehaus.jackson.map.ser.std.ObjectArraySerializer r1;
        java.lang.Exception $r6;
        java.lang.Object r11;

        r1 := @this: org.codehaus.jackson.map.ser.std.ObjectArraySerializer;

        r0 := @parameter0: java.lang.Object[];

        r4 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r5 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r3 := @parameter3: org.codehaus.jackson.map.JsonSerializer;

        i0 = lengthof r0;

        r2 = r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        i1 = 0;

        r11 = null;

     label01:
        if i1 >= i0 goto label05;

        r11 = r0[i1];

        if r11 != null goto label02;

        virtualinvoke r5.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r4);

        goto label04;

     label02:
        if r2 != null goto label03;

        virtualinvoke r3.<org.codehaus.jackson.map.JsonSerializer: void serialize(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r11, r4, r5);

        goto label04;

     label03:
        virtualinvoke r3.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>(r11, r4, r5, r2);

     label04:
        i1 = i1 + 1;

        goto label01;

     label05:
        goto label11;

     label06:
        $r10 := @caughtexception;

        throw $r10;

     label07:
        $r6 := @caughtexception;

        r12 = $r6;

     label08:
        $z0 = r12 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label09;

        $r9 = virtualinvoke r12.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r9 == null goto label09;

        r12 = virtualinvoke r12.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label08;

     label09:
        $z1 = r12 instanceof java.lang.Error;

        if $z1 == 0 goto label10;

        $r8 = (java.lang.Error) r12;

        throw $r8;

     label10:
        $r7 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,int)>(r12, r11, i1);

        throw $r7;

     label11:
        return;

        catch java.io.IOException from label01 to label05 with label06;
        catch java.lang.Exception from label01 to label05 with label07;
    }

    public void serializeTypedContents(java.lang.Object[], org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        java.lang.Throwable $r10, r15;
        java.lang.Object[] r0;
        org.codehaus.jackson.map.SerializerProvider r6;
        java.lang.Error $r9;
        org.codehaus.jackson.map.JsonMappingException $r8;
        org.codehaus.jackson.map.TypeSerializer r2;
        org.codehaus.jackson.JsonGenerator r5;
        int i0, i1;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r13;
        boolean $z0, $z1;
        java.io.IOException $r11;
        org.codehaus.jackson.map.JsonSerializer $r4, r14;
        org.codehaus.jackson.map.ser.std.ObjectArraySerializer r1;
        java.lang.Exception $r7;
        java.lang.Class $r3;
        java.lang.Object r12;

        r1 := @this: org.codehaus.jackson.map.ser.std.ObjectArraySerializer;

        r0 := @parameter0: java.lang.Object[];

        r5 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r6 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        i0 = lengthof r0;

        r2 = r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.TypeSerializer _valueTypeSerializer>;

        i1 = 0;

        r12 = null;

     label01:
        r13 = r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers>;

     label02:
        if i1 >= i0 goto label06;

        r12 = r0[i1];

        if r12 != null goto label03;

        virtualinvoke r6.<org.codehaus.jackson.map.SerializerProvider: void defaultSerializeNull(org.codehaus.jackson.JsonGenerator)>(r5);

        goto label05;

     label03:
        $r3 = virtualinvoke r12.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke r13.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.JsonSerializer serializerFor(java.lang.Class)>($r3);

        r14 = $r4;

        if $r4 != null goto label04;

        r14 = virtualinvoke r1.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap,java.lang.Class,org.codehaus.jackson.map.SerializerProvider)>(r13, $r3, r6);

     label04:
        virtualinvoke r14.<org.codehaus.jackson.map.JsonSerializer: void serializeWithType(java.lang.Object,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>(r12, r5, r6, r2);

     label05:
        i1 = i1 + 1;

        goto label02;

     label06:
        goto label12;

     label07:
        $r11 := @caughtexception;

        throw $r11;

     label08:
        $r7 := @caughtexception;

        r15 = $r7;

     label09:
        $z0 = r15 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label10;

        $r10 = virtualinvoke r15.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r10 == null goto label10;

        r15 = virtualinvoke r15.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label09;

     label10:
        $z1 = r15 instanceof java.lang.Error;

        if $z1 == 0 goto label11;

        $r9 = (java.lang.Error) r15;

        throw $r9;

     label11:
        $r8 = staticinvoke <org.codehaus.jackson.map.JsonMappingException: org.codehaus.jackson.map.JsonMappingException wrapWithPath(java.lang.Throwable,java.lang.Object,int)>(r15, r12, i1);

        throw $r8;

     label12:
        return;

        catch java.io.IOException from label01 to label06 with label07;
        catch java.lang.Exception from label01 to label06 with label08;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.SerializerProvider r3;
        org.codehaus.jackson.map.JsonSerializer $r9;
        org.codehaus.jackson.map.ser.std.ObjectArraySerializer r0;
        org.codehaus.jackson.JsonNode $r11, $r12;
        org.codehaus.jackson.map.BeanProperty $r8;
        org.codehaus.jackson.schema.SchemaAware $r10;
        java.lang.reflect.Type r2;
        org.codehaus.jackson.type.JavaType $r4, $r6;
        java.lang.Class $r7;
        org.codehaus.jackson.map.type.ArrayType $r5;
        org.codehaus.jackson.node.ObjectNode $r1;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.jackson.map.ser.std.ObjectArraySerializer;

        r3 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r2 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.node.ObjectNode createSchemaNode(java.lang.String,boolean)>("array", 1);

        if r2 == null goto label4;

        $r4 = virtualinvoke r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.type.JavaType constructType(java.lang.reflect.Type)>(r2);

        $z0 = virtualinvoke $r4.<org.codehaus.jackson.type.JavaType: boolean isArrayType()>();

        if $z0 == 0 goto label4;

        $r5 = (org.codehaus.jackson.map.type.ArrayType) $r4;

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r7 != class "Ljava/lang/Object;" goto label1;

        $r11 = staticinvoke <org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.JsonNode getDefaultSchemaNode()>();

        virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("items", $r11);

        goto label4;

     label1:
        $r8 = r0.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r9 = virtualinvoke r3.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(java.lang.Class,org.codehaus.jackson.map.BeanProperty)>($r7, $r8);

        $z1 = $r9 instanceof org.codehaus.jackson.schema.SchemaAware;

        if $z1 == 0 goto label2;

        $r10 = (org.codehaus.jackson.schema.SchemaAware) $r9;

        $r12 = interfaceinvoke $r10.<org.codehaus.jackson.schema.SchemaAware: org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider,java.lang.reflect.Type)>(r3, null);

        goto label3;

     label2:
        $r12 = staticinvoke <org.codehaus.jackson.schema.JsonSchema: org.codehaus.jackson.JsonNode getDefaultSchemaNode()>();

     label3:
        virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("items", $r12);

     label4:
        return $r1;
    }

    public void resolve(org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.type.JavaType $r4;
        org.codehaus.jackson.map.JsonSerializer $r1, $r5;
        org.codehaus.jackson.map.ser.std.ObjectArraySerializer r0;
        org.codehaus.jackson.map.BeanProperty $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.map.ser.std.ObjectArraySerializer;

        r2 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        $z0 = r0.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: boolean _staticTyping>;

        if $z0 == 0 goto label1;

        $r1 = r0.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer>;

        if $r1 != null goto label1;

        $r4 = r0.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.type.JavaType _elementType>;

        $r3 = r0.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r5 = virtualinvoke r2.<org.codehaus.jackson.map.SerializerProvider: org.codehaus.jackson.map.JsonSerializer findValueSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>($r4, $r3);

        r0.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.JsonSerializer _elementSerializer> = $r5;

     label1:
        return;
    }

    protected final org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap, java.lang.Class, org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.map.JsonSerializer $r7;
        org.codehaus.jackson.map.ser.std.ObjectArraySerializer r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult $r5;
        java.lang.Class r1;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r0, $r6, $r8;

        r3 := @this: org.codehaus.jackson.map.ser.std.ObjectArraySerializer;

        r0 := @parameter0: org.codehaus.jackson.map.ser.impl.PropertySerializerMap;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = r3.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSerializer(java.lang.Class,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.BeanProperty)>(r1, r2, $r4);

        $r6 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        if r0 == $r6 goto label1;

        $r8 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        r3.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers> = $r8;

     label1:
        $r7 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.JsonSerializer serializer>;

        return $r7;
    }

    protected final org.codehaus.jackson.map.JsonSerializer _findAndAddDynamic(org.codehaus.jackson.map.ser.impl.PropertySerializerMap, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.SerializerProvider) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.map.JsonSerializer $r7;
        org.codehaus.jackson.map.ser.std.ObjectArraySerializer r3;
        org.codehaus.jackson.map.BeanProperty $r4;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult $r5;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.ser.impl.PropertySerializerMap r0, $r6, $r8;

        r3 := @this: org.codehaus.jackson.map.ser.std.ObjectArraySerializer;

        r0 := @parameter0: org.codehaus.jackson.map.ser.impl.PropertySerializerMap;

        r1 := @parameter1: org.codehaus.jackson.type.JavaType;

        r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = r3.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.BeanProperty _property>;

        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap: org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult findAndAddSerializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.BeanProperty)>(r1, r2, $r4);

        $r6 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        if r0 == $r6 goto label1;

        $r8 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.ser.impl.PropertySerializerMap map>;

        r3.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: org.codehaus.jackson.map.ser.impl.PropertySerializerMap _dynamicSerializers> = $r8;

     label1:
        $r7 = $r5.<org.codehaus.jackson.map.ser.impl.PropertySerializerMap$SerializerAndMapResult: org.codehaus.jackson.map.JsonSerializer serializer>;

        return $r7;
    }

    public volatile void serializeContents(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        java.lang.Object[] $r4;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r1;
        org.codehaus.jackson.map.ser.std.ObjectArraySerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.ObjectArraySerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (java.lang.Object[]) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.ObjectArraySerializer: void serializeContents(java.lang.Object[],org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r2, r3);

        return;
    }
}
