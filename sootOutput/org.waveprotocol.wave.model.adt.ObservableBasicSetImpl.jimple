public class org.waveprotocol.wave.model.adt.ObservableBasicSetImpl extends org.waveprotocol.wave.model.adt.AbstractObservableBasicSet
{
    private final java.util.Set data;

    public void <init>()
    {
        java.util.HashSet $r1;
        org.waveprotocol.wave.model.adt.ObservableBasicSetImpl r0;

        r0 := @this: org.waveprotocol.wave.model.adt.ObservableBasicSetImpl;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.AbstractObservableBasicSet: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashSet newHashSet()>();

        r0.<org.waveprotocol.wave.model.adt.ObservableBasicSetImpl: java.util.Set data> = $r1;

        return;
    }

    public java.lang.Iterable getValues()
    {
        java.util.Set $r1;
        org.waveprotocol.wave.model.adt.ObservableBasicSetImpl r0;

        r0 := @this: org.waveprotocol.wave.model.adt.ObservableBasicSetImpl;

        $r1 = r0.<org.waveprotocol.wave.model.adt.ObservableBasicSetImpl: java.util.Set data>;

        return $r1;
    }

    public boolean contains(java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicSetImpl r0;
        java.util.Set $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.ObservableBasicSetImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.adt.ObservableBasicSetImpl: java.util.Set data>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public void add(java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicSetImpl r0;
        java.util.Set $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.ObservableBasicSetImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.adt.ObservableBasicSetImpl: java.util.Set data>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.ObservableBasicSetImpl: void fireOnValueAdded(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void remove(java.lang.Object)
    {
        org.waveprotocol.wave.model.adt.ObservableBasicSetImpl r0;
        java.util.Set $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.ObservableBasicSetImpl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.waveprotocol.wave.model.adt.ObservableBasicSetImpl: java.util.Set data>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.ObservableBasicSetImpl: void fireOnValueRemoved(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void clear()
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.adt.ObservableBasicSetImpl r0;
        java.util.Set $r1, $r2;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.ObservableBasicSetImpl;

     label1:
        $r1 = r0.<org.waveprotocol.wave.model.adt.ObservableBasicSetImpl: java.util.Set data>;

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<org.waveprotocol.wave.model.adt.ObservableBasicSetImpl: java.util.Set data>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.ObservableBasicSetImpl: void remove(java.lang.Object)>($r4);

        goto label1;

     label2:
        return;
    }
}
