public final class org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder extends java.lang.Object
{
    private org.waveprotocol.wave.concurrencycontrol.ResponseStatus status;
    private final java.util.List wavelet;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder r0;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder: java.util.List wavelet> = $r1;

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus r1;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        r0.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder: org.waveprotocol.wave.concurrencycontrol.ResponseStatus status> = r1;

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder addAllWavelet(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder r2;
        java.lang.Object $r3;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet r4;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet) $r3;

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder addWavelet(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet)>(r4);

        goto label1;

     label2:
        return r2;
    }

    public org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder setWavelet(int, org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet)
    {
        java.util.List $r2;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder r0;
        int i0;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder;

        i0 := @parameter0: int;

        r1 := @parameter1: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder: java.util.List wavelet>;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1);

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder addWavelet(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet)
    {
        java.util.List $r2;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet r1;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse$Wavelet;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder: java.util.List wavelet>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder clearWavelet()
    {
        java.util.List $r1;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder: java.util.List wavelet>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        return r0;
    }

    public org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse build(org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$Factory)
    {
        java.util.List $r4;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$Factory r0;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse $r1;
        org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder r2;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus $r3;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$Factory;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder$Factory: org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse create()>();

        $r3 = r2.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder: org.waveprotocol.wave.concurrencycontrol.ResponseStatus status>;

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse: void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>($r3);

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse: void clearWavelet()>();

        $r4 = r2.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponseBuilder: java.util.List wavelet>;

        interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.FetchWaveViewResponse: void addAllWavelet(java.util.List)>($r4);

        return $r1;
    }
}
