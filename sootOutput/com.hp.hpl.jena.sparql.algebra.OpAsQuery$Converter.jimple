public class com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter extends java.lang.Object implements com.hp.hpl.jena.sparql.algebra.OpVisitor
{
    private com.hp.hpl.jena.query.Query query;
    private com.hp.hpl.jena.sparql.algebra.Op op;
    private com.hp.hpl.jena.sparql.syntax.Element element;
    private com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup;
    private java.util.Deque stack;
    private java.util.Collection projectVars;
    private java.util.Map varExpression;
    private int groupDepth;
    private boolean inProject;
    private boolean hasRun;

    public void <init>(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.query.Query $r4;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r6;
        java.util.Set $r2;
        java.util.HashMap $r3;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        java.util.ArrayDeque $r1;
        com.hp.hpl.jena.sparql.algebra.Op r5;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r5 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.Element element> = null;

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup> = null;

        $r1 = new java.util.ArrayDeque;

        specialinvoke $r1.<java.util.ArrayDeque: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Deque stack> = $r1;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpAsQuery: java.util.Set access$000()>();

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Collection projectVars> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Map varExpression> = $r3;

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: int groupDepth> = 0;

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean inProject> = 0;

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean hasRun> = 0;

        $r4 = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create()>();

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query> = $r4;

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.algebra.Op op> = r5;

        $r6 = new com.hp.hpl.jena.sparql.syntax.ElementGroup;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup> = $r6;

        return;
    }

    com.hp.hpl.jena.query.Query convert()
    {
        java.lang.Throwable $r17;
        com.hp.hpl.jena.query.Query $r3, $r5, $r6, $r7, r8, $r11, $r13, $r16;
        com.hp.hpl.jena.sparql.expr.Expr $r15;
        java.util.Map $r10, $r12;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r4;
        java.util.Collection r2;
        com.hp.hpl.jena.sparql.core.Var r18;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r19;
        java.lang.Object $r9, $r14;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        $z0 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean hasRun>;

        if $z0 == 0 goto label1;

        $r16 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        return $r16;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.algebra.Op op>;

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r0);

        r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Collection projectVars>;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        $z1 = interfaceinvoke r2.<java.util.Collection: boolean isEmpty()>();

        virtualinvoke $r3.<com.hp.hpl.jena.query.Query: void setQueryResultStar(boolean)>($z1);

        $r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r9 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r18 = (com.hp.hpl.jena.sparql.core.Var) $r9;

        $r10 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Map varExpression>;

        $z3 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r18);

        if $z3 == 0 goto label3;

        $r13 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        $r12 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Map varExpression>;

        $r14 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r18);

        $r15 = (com.hp.hpl.jena.sparql.expr.Expr) $r14;

        virtualinvoke $r13.<com.hp.hpl.jena.query.Query: void addResultVar(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.expr.Expr)>(r18, $r15);

        goto label4;

     label3:
        $r11 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        virtualinvoke $r11.<com.hp.hpl.jena.query.Query: void addResultVar(com.hp.hpl.jena.graph.Node)>(r18);

     label4:
        goto label2;

     label5:
        r19 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup>;

        $r5 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        virtualinvoke $r5.<com.hp.hpl.jena.query.Query: void setQueryPattern(com.hp.hpl.jena.sparql.syntax.Element)>(r19);

        $r6 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        virtualinvoke $r6.<com.hp.hpl.jena.query.Query: void setQuerySelectType()>();

        $r7 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        virtualinvoke $r7.<com.hp.hpl.jena.query.Query: void setResultVars()>();

        r8 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

     label6:
        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean hasRun> = 1;

        return r8;

     label7:
        $r17 := @caughtexception;

     label8:
        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean hasRun> = 1;

        throw $r17;

        catch java.lang.Throwable from label1 to label6 with label7;
        catch java.lang.Throwable from label7 to label8 with label7;
    }

    com.hp.hpl.jena.sparql.syntax.Element asElement(com.hp.hpl.jena.sparql.algebra.Op)
    {
        java.util.List $r3, $r4;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r2;
        int $i0;
        com.hp.hpl.jena.sparql.syntax.Element $r6;
        java.lang.Object $r5;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup asElementGroup(com.hp.hpl.jena.sparql.algebra.Op)>(r1);

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r4 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (com.hp.hpl.jena.sparql.syntax.Element) $r5;

        return $r6;

     label1:
        return $r2;
    }

    com.hp.hpl.jena.sparql.syntax.ElementGroup asElementGroup(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r2;
        com.hp.hpl.jena.sparql.algebra.Op r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: void startSubGroup()>();

        interfaceinvoke r1.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r0);

        $r2 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup endSubGroup()>();

        return $r2;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpBGP)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpBGP r2;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r1;
        com.hp.hpl.jena.sparql.core.BasicPattern $r3;
        com.hp.hpl.jena.sparql.syntax.Element $r4;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: com.hp.hpl.jena.sparql.core.BasicPattern getPattern()>();

        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.Element process(com.hp.hpl.jena.sparql.core.BasicPattern)>($r3);

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpTriple)
    {
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpTriple r2;
        com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock $r4;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.graph.Triple $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTriple;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpTriple: com.hp.hpl.jena.graph.Triple getTriple()>();

        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock process(com.hp.hpl.jena.graph.Triple)>($r3);

        virtualinvoke $r1.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpQuad)
    {
        com.hp.hpl.jena.sparql.ARQNotImplemented $r0;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuad r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuad;

        $r0 = new com.hp.hpl.jena.sparql.ARQNotImplemented;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQNotImplemented: void <init>(java.lang.String)>("OpQuad");

        throw $r0;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpProcedure)
    {
        com.hp.hpl.jena.sparql.ARQNotImplemented $r0;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r1;
        com.hp.hpl.jena.sparql.algebra.op.OpProcedure r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProcedure;

        $r0 = new com.hp.hpl.jena.sparql.ARQNotImplemented;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQNotImplemented: void <init>(java.lang.String)>("OpProcedure");

        throw $r0;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpPropFunc)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPropFunc r1;
        com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock $r9;
        com.hp.hpl.jena.graph.Node $r3, $r5, $r7;
        com.hp.hpl.jena.graph.Triple $r6;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg $r2, $r4;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r8;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPropFunc;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getSubjectArgs()>();

        $r3 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.graph.Node processPropFuncArg(com.hp.hpl.jena.sparql.pfunction.PropFuncArg)>($r2);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.sparql.pfunction.PropFuncArg getObjectArgs()>();

        $r5 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.graph.Node processPropFuncArg(com.hp.hpl.jena.sparql.pfunction.PropFuncArg)>($r4);

        $r6 = new com.hp.hpl.jena.graph.Triple;

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPropFunc: com.hp.hpl.jena.graph.Node getProperty()>();

        specialinvoke $r6.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r7, $r5);

        $r8 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        $r9 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock process(com.hp.hpl.jena.graph.Triple)>($r6);

        virtualinvoke $r8.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r9);

        return;
    }

    private com.hp.hpl.jena.graph.Node processPropFuncArg(com.hp.hpl.jena.sparql.pfunction.PropFuncArg)
    {
        com.hp.hpl.jena.sparql.core.BasicPattern $r2;
        com.hp.hpl.jena.graph.Node $r3, $r7, $r8;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r5;
        int $i0;
        com.hp.hpl.jena.sparql.syntax.Element $r6;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r4;
        boolean $z0;

        r4 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        return $r8;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

        $r7 = <com.hp.hpl.jena.vocabulary.RDF$Nodes: com.hp.hpl.jena.graph.Node nil>;

        return $r7;

     label2:
        $r2 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.util.graph.GraphList: com.hp.hpl.jena.graph.Node listToTriples(java.util.List,com.hp.hpl.jena.sparql.core.BasicPattern)>($r1, $r2);

        $r5 = specialinvoke r4.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        $r6 = specialinvoke r4.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.Element process(com.hp.hpl.jena.sparql.core.BasicPattern)>($r2);

        virtualinvoke $r5.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r6);

        return $r3;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpSequence)
    {
        java.util.Iterator $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpSequence r2;
        java.util.List $r3;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r1, r8;
        com.hp.hpl.jena.sparql.syntax.Element $r7;
        java.lang.Object $r5;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.algebra.Op r6;
        boolean $z0, z1, $z3, $z4, $z5;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSequence;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        r8 = $r1;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.syntax.ElementGroup: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z5 = 1;

        $z4 = 1;

        goto label2;

     label1:
        $z5 = 0;

        $z4 = 0;

     label2:
        z1 = $z5;

        if $z4 == 0 goto label3;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: void startSubGroup()>();

        r8 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

     label3:
        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpSequence: java.util.List getElements()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z3 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.algebra.Op) $r5;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.Element asElement(com.hp.hpl.jena.sparql.algebra.Op)>(r6);

        virtualinvoke r8.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r7);

        goto label4;

     label5:
        if z1 == 0 goto label6;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup endSubGroup()>();

     label6:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpDisjunction)
    {
        com.hp.hpl.jena.sparql.ARQNotImplemented $r0;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r1;
        com.hp.hpl.jena.sparql.algebra.op.OpDisjunction r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDisjunction;

        $r0 = new com.hp.hpl.jena.sparql.ARQNotImplemented;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQNotImplemented: void <init>(java.lang.String)>("OpDisjunction");

        throw $r0;
    }

    private com.hp.hpl.jena.sparql.syntax.Element process(com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        com.hp.hpl.jena.query.Query $r1, $r4, $r11, $r17;
        com.hp.hpl.jena.query.Syntax $r2, $r3, $r5, $r6, $r12, $r13, $r18;
        com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock $r21;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        java.lang.String $r20;
        boolean $z0, $z1;
        java.util.Iterator $r9, $r22;
        com.hp.hpl.jena.sparql.core.BasicPattern r8;
        com.hp.hpl.jena.sparql.syntax.ElementPathBlock $r7;
        com.hp.hpl.jena.graph.Triple r24, r25;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r14;
        java.lang.Object $r10, $r23;
        java.lang.StringBuilder $r15, $r16, $r19;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r8 := @parameter0: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.query.Syntax getSyntax()>();

        $r3 = <com.hp.hpl.jena.query.Syntax: com.hp.hpl.jena.query.Syntax syntaxSPARQL_10>;

        if $r2 != $r3 goto label3;

        $r21 = new com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock;

        specialinvoke $r21.<com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock: void <init>()>();

        $r22 = virtualinvoke r8.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r24 = (com.hp.hpl.jena.graph.Triple) $r23;

        virtualinvoke $r21.<com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock: void addTriple(com.hp.hpl.jena.graph.Triple)>(r24);

        goto label1;

     label2:
        return $r21;

     label3:
        $r4 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        $r5 = virtualinvoke $r4.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.query.Syntax getSyntax()>();

        $r6 = <com.hp.hpl.jena.query.Syntax: com.hp.hpl.jena.query.Syntax syntaxSPARQL_11>;

        if $r5 == $r6 goto label4;

        $r11 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        $r12 = virtualinvoke $r11.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.query.Syntax getSyntax()>();

        $r13 = <com.hp.hpl.jena.query.Syntax: com.hp.hpl.jena.query.Syntax syntaxARQ>;

        if $r12 != $r13 goto label7;

     label4:
        $r7 = new com.hp.hpl.jena.sparql.syntax.ElementPathBlock;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.syntax.ElementPathBlock: void <init>()>();

        $r9 = virtualinvoke r8.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r25 = (com.hp.hpl.jena.graph.Triple) $r10;

        virtualinvoke $r7.<com.hp.hpl.jena.sparql.syntax.ElementPathBlock: void addTriple(com.hp.hpl.jena.graph.Triple)>(r25);

        goto label5;

     label6:
        return $r7;

     label7:
        $r14 = new com.hp.hpl.jena.sparql.ARQInternalErrorException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unrecognized syntax: ");

        $r17 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        $r18 = virtualinvoke $r17.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.query.Syntax getSyntax()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void <init>(java.lang.String)>($r20);

        throw $r14;
    }

    private com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock process(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r2;
        com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock $r0;
        com.hp.hpl.jena.graph.Triple r1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = new com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock: void <init>()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.syntax.ElementTriplesBlock: void addTriple(com.hp.hpl.jena.graph.Triple)>(r1);

        return $r0;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.syntax.ElementNamedGraph $r7;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r3;
        boolean $z0, $z1;
        com.hp.hpl.jena.sparql.core.BasicPattern $r5, $r11;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r0;
        com.hp.hpl.jena.sparql.algebra.op.OpBGP $r4;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r8, $r9, $r10;
        com.hp.hpl.jena.sparql.syntax.Element $r6, $r12, r13;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.graph.Node getGraphNode()>();

        $r2 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphNodeGenerated>;

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r10 = specialinvoke r3.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        $r11 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        $r12 = specialinvoke r3.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.Element process(com.hp.hpl.jena.sparql.core.BasicPattern)>($r11);

        virtualinvoke $r10.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r12);

        goto label3;

     label1:
        specialinvoke r3.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: void startSubGroup()>();

        $r4 = new com.hp.hpl.jena.sparql.algebra.op.OpBGP;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.BasicPattern getBasicPattern()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.algebra.op.OpBGP: void <init>(com.hp.hpl.jena.sparql.core.BasicPattern)>($r5);

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.Element asElement(com.hp.hpl.jena.sparql.algebra.Op)>($r4);

        r13 = $r6;

        specialinvoke r3.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup endSubGroup()>();

        $z1 = $r6 instanceof com.hp.hpl.jena.sparql.syntax.ElementGroup;

        if $z1 != 0 goto label2;

        $r9 = new com.hp.hpl.jena.sparql.syntax.ElementGroup;

        specialinvoke $r9.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void <init>()>();

        virtualinvoke $r9.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r6);

        r13 = $r9;

     label2:
        $r7 = new com.hp.hpl.jena.sparql.syntax.ElementNamedGraph;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.syntax.ElementNamedGraph: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.syntax.Element)>($r1, r13);

        $r8 = specialinvoke r3.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        virtualinvoke $r8.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r7);

     label3:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock)
    {
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r2;
        org.apache.jena.atlas.lib.NotImplemented $r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        $r0 = new org.apache.jena.atlas.lib.NotImplemented;

        specialinvoke $r0.<org.apache.jena.atlas.lib.NotImplemented: void <init>(java.lang.String)>("OpQuadBlock");

        throw $r0;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpPath)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpPath r1;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r4;
        com.hp.hpl.jena.sparql.core.TriplePath $r2;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r3;
        com.hp.hpl.jena.sparql.syntax.ElementPathBlock $r0;

        r3 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpPath;

        $r0 = new com.hp.hpl.jena.sparql.syntax.ElementPathBlock;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.syntax.ElementPathBlock: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpPath: com.hp.hpl.jena.sparql.core.TriplePath getTriplePath()>();

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.syntax.ElementPathBlock: void addTriplePath(com.hp.hpl.jena.sparql.core.TriplePath)>($r2);

        $r4 = specialinvoke r3.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        virtualinvoke $r4.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r0);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpJoin)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpJoin r1;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r5, $r6;
        com.hp.hpl.jena.sparql.syntax.Element $r3;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpJoin;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpJoin: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.Element asElement(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpJoin: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup asElementGroup(com.hp.hpl.jena.sparql.algebra.Op)>($r4);

        $r6 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        virtualinvoke $r6.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r3);

        virtualinvoke $r6.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r5);

        return;
    }

    private static boolean emptyGroup(com.hp.hpl.jena.sparql.syntax.Element)
    {
        com.hp.hpl.jena.sparql.syntax.ElementGroup r1;
        com.hp.hpl.jena.sparql.syntax.Element r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.hp.hpl.jena.sparql.syntax.Element;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.syntax.ElementGroup;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.syntax.ElementGroup) r0;

        $z1 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementGroup: boolean isEmpty()>();

        return $z1;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin)
    {
        com.hp.hpl.jena.sparql.expr.Expr r13;
        com.hp.hpl.jena.sparql.expr.ExprList $r6, $r9;
        com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin r1;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r4;
        boolean $z0, $z1;
        java.util.Iterator $r10;
        com.hp.hpl.jena.sparql.syntax.ElementOptional $r8;
        com.hp.hpl.jena.sparql.syntax.ElementFilter $r12;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r5, $r7;
        com.hp.hpl.jena.sparql.syntax.Element $r3;
        java.lang.Object $r11;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.Element asElement(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup asElementGroup(com.hp.hpl.jena.sparql.algebra.Op)>($r4);

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        if $r6 == null goto label2;

        $r9 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpLeftJoin: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.hp.hpl.jena.sparql.expr.Expr) $r11;

        $r12 = new com.hp.hpl.jena.sparql.syntax.ElementFilter;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.syntax.ElementFilter: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>(r13);

        virtualinvoke $r5.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r12);

        goto label1;

     label2:
        $r7 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean emptyGroup(com.hp.hpl.jena.sparql.syntax.Element)>($r3);

        if $z0 != 0 goto label3;

        virtualinvoke $r7.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r3);

     label3:
        $r8 = new com.hp.hpl.jena.sparql.syntax.ElementOptional;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.syntax.ElementOptional: void <init>(com.hp.hpl.jena.sparql.syntax.Element)>($r5);

        virtualinvoke $r7.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r8);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpDiff)
    {
        com.hp.hpl.jena.sparql.ARQNotImplemented $r0;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r1;
        com.hp.hpl.jena.sparql.algebra.op.OpDiff r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDiff;

        $r0 = new com.hp.hpl.jena.sparql.ARQNotImplemented;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQNotImplemented: void <init>(java.lang.String)>("OpDiff");

        throw $r0;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpMinus)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpMinus r1;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r5, $r7;
        com.hp.hpl.jena.sparql.syntax.ElementMinus $r6;
        com.hp.hpl.jena.sparql.syntax.Element $r3;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpMinus;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpMinus: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.Element asElement(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpMinus: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup asElementGroup(com.hp.hpl.jena.sparql.algebra.Op)>($r4);

        $r6 = new com.hp.hpl.jena.sparql.syntax.ElementMinus;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.syntax.ElementMinus: void <init>(com.hp.hpl.jena.sparql.syntax.Element)>($r5);

        $r7 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean emptyGroup(com.hp.hpl.jena.sparql.syntax.Element)>($r3);

        if $z0 != 0 goto label1;

        virtualinvoke $r7.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r3);

     label1:
        virtualinvoke $r7.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r6);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpUnion)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpUnion r1;
        com.hp.hpl.jena.sparql.syntax.ElementUnion $r6, r8;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r3, $r5, $r7;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2, $r4;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpUnion;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op getLeft()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup asElementGroup(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpUnion: com.hp.hpl.jena.sparql.algebra.Op getRight()>();

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup asElementGroup(com.hp.hpl.jena.sparql.algebra.Op)>($r4);

        $z0 = $r3 instanceof com.hp.hpl.jena.sparql.syntax.ElementUnion;

        if $z0 == 0 goto label1;

        r8 = (com.hp.hpl.jena.sparql.syntax.ElementUnion) $r3;

        virtualinvoke r8.<com.hp.hpl.jena.sparql.syntax.ElementUnion: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r5);

        return;

     label1:
        $r6 = new com.hp.hpl.jena.sparql.syntax.ElementUnion;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.syntax.ElementUnion: void <init>()>();

        virtualinvoke $r6.<com.hp.hpl.jena.sparql.syntax.ElementUnion: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r3);

        virtualinvoke $r6.<com.hp.hpl.jena.sparql.syntax.ElementUnion: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r5);

        $r7 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        virtualinvoke $r7.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r6);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpConditional)
    {
        com.hp.hpl.jena.sparql.ARQNotImplemented $r0;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r1;
        com.hp.hpl.jena.sparql.algebra.op.OpConditional r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpConditional;

        $r0 = new com.hp.hpl.jena.sparql.ARQNotImplemented;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQNotImplemented: void <init>(java.lang.String)>("OpCondition");

        throw $r0;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpFilter)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpFilter r1;
        java.util.Iterator $r7;
        com.hp.hpl.jena.sparql.syntax.ElementFilter $r10;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r4, $r5, $r11, $r12;
        com.hp.hpl.jena.sparql.expr.Expr r9;
        com.hp.hpl.jena.sparql.expr.ExprList $r6;
        com.hp.hpl.jena.sparql.syntax.Element $r3;
        java.lang.Object $r8;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpFilter;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.Element asElement(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        if $r4 == $r3 goto label1;

        $r12 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        virtualinvoke $r12.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r3);

     label1:
        $r5 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.Element element> = $r5;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpFilter: com.hp.hpl.jena.sparql.expr.ExprList getExprs()>();

        $r7 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.sparql.expr.Expr) $r8;

        $r10 = new com.hp.hpl.jena.sparql.syntax.ElementFilter;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.syntax.ElementFilter: void <init>(com.hp.hpl.jena.sparql.expr.Expr)>(r9);

        $r11 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        virtualinvoke $r11.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r10);

        goto label2;

     label3:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpGraph)
    {
        com.hp.hpl.jena.sparql.syntax.ElementNamedGraph $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpGraph r1;
        com.hp.hpl.jena.graph.Node $r5;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r6, $r7;
        com.hp.hpl.jena.sparql.syntax.Element $r3, r8;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGraph;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: void startSubGroup()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.Element asElement(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        r8 = $r3;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup endSubGroup()>();

        $z0 = $r3 instanceof com.hp.hpl.jena.sparql.syntax.ElementGroup;

        if $z0 != 0 goto label1;

        $r7 = new com.hp.hpl.jena.sparql.syntax.ElementGroup;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void <init>()>();

        virtualinvoke $r7.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r3);

        r8 = $r7;

     label1:
        $r4 = new com.hp.hpl.jena.sparql.syntax.ElementNamedGraph;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpGraph: com.hp.hpl.jena.graph.Node getNode()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.syntax.ElementNamedGraph: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.syntax.Element)>($r5, r8);

        $r6 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        virtualinvoke $r6.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpService)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpService r0;
        com.hp.hpl.jena.sparql.syntax.ElementService $r4;
        com.hp.hpl.jena.graph.Node $r5;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r6;
        com.hp.hpl.jena.sparql.syntax.Element $r3;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpService;

        virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpService: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpService: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.Element asElement(com.hp.hpl.jena.sparql.algebra.Op)>($r2);

        $r4 = new com.hp.hpl.jena.sparql.syntax.ElementService;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpService: com.hp.hpl.jena.graph.Node getService()>();

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpService: boolean getSilent()>();

        specialinvoke $r4.<com.hp.hpl.jena.sparql.syntax.ElementService: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.syntax.Element,boolean)>($r5, $r3, $z0);

        $r6 = specialinvoke r1.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        virtualinvoke $r6.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames)
    {
        com.hp.hpl.jena.sparql.ARQNotImplemented $r0;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r1;
        com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDatasetNames;

        $r0 = new com.hp.hpl.jena.sparql.ARQNotImplemented;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQNotImplemented: void <init>(java.lang.String)>("OpDatasetNames");

        throw $r0;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpTable)
    {
        com.hp.hpl.jena.sparql.syntax.ElementData $r1;
        java.util.List $r2, $r4, $r9;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r8;
        com.hp.hpl.jena.sparql.algebra.op.OpTable r0;
        java.lang.Object $r10;
        com.hp.hpl.jena.sparql.algebra.Table $r3, $r5;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r7;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r6;
        boolean $z0, $z1;

        r7 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTable;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTable: boolean isJoinIdentity()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new com.hp.hpl.jena.sparql.syntax.ElementData;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.syntax.ElementData: void <init>()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List getVars()>();

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.Table getTable()>();

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Table: java.util.List getVars()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r4);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.Table getTable()>();

        $r6 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.algebra.Table: com.hp.hpl.jena.sparql.engine.QueryIterator iterator(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(null);

     label2:
        $z1 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.engine.QueryIterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r9 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.syntax.ElementData: java.util.List getRows()>();

        $r10 = interfaceinvoke $r6.<com.hp.hpl.jena.sparql.engine.QueryIterator: java.lang.Object next()>();

        interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label2;

     label3:
        interfaceinvoke $r6.<com.hp.hpl.jena.sparql.engine.QueryIterator: void close()>();

        $r8 = specialinvoke r7.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        virtualinvoke $r8.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r1);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpExt)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExt r2;
        com.hp.hpl.jena.sparql.ARQNotImplemented $r0;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r1;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExt;

        $r0 = new com.hp.hpl.jena.sparql.ARQNotImplemented;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQNotImplemented: void <init>(java.lang.String)>("OpExt");

        throw $r0;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpNull)
    {
        com.hp.hpl.jena.sparql.ARQNotImplemented $r0;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r1;
        com.hp.hpl.jena.sparql.algebra.op.OpNull r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpNull;

        $r0 = new com.hp.hpl.jena.sparql.ARQNotImplemented;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQNotImplemented: void <init>(java.lang.String)>("OpNull");

        throw $r0;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpLabel)
    {
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r2;
        com.hp.hpl.jena.sparql.algebra.op.OpLabel r0;
        com.hp.hpl.jena.sparql.algebra.Op $r1;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpLabel;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpLabel: boolean hasSubOp()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpLabel: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r2);

     label1:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpAssign)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r0;
        com.hp.hpl.jena.sparql.expr.Expr $r9, $r12;
        java.util.Map $r11, $r15;
        com.hp.hpl.jena.sparql.core.VarExprList $r3, $r8;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r2;
        com.hp.hpl.jena.sparql.algebra.Op $r1;
        boolean $z0, $z1, $z2;
        com.hp.hpl.jena.sparql.syntax.ElementAssign $r13;
        java.util.Iterator $r5;
        java.util.Collection $r16;
        com.hp.hpl.jena.sparql.core.Var r7;
        java.util.List $r4;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$SubExprForVar $r10;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r14;
        java.lang.Object $r6;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r2);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.core.Var) $r6;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.sparql.core.VarExprList: com.hp.hpl.jena.sparql.expr.Expr getExpr(com.hp.hpl.jena.sparql.core.Var)>(r7);

        $r10 = new com.hp.hpl.jena.sparql.algebra.OpAsQuery$SubExprForVar;

        $r11 = r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Map varExpression>;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$SubExprForVar: void <init>(java.util.Map)>($r11);

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.expr.Expr)>($r10, $r9);

        $z1 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean inTopLevel()>();

        if $z1 == 0 goto label3;

        $z2 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean inGroupRecombine(com.hp.hpl.jena.sparql.algebra.op.OpAssign)>(r0);

        if $z2 != 0 goto label2;

        $r16 = r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Collection projectVars>;

        staticinvoke <com.hp.hpl.jena.sparql.algebra.OpAsQuery: void access$100(java.util.Collection,com.hp.hpl.jena.sparql.core.Var)>($r16, r7);

     label2:
        $r15 = r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Map varExpression>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r12);

        goto label4;

     label3:
        $r13 = new com.hp.hpl.jena.sparql.syntax.ElementAssign;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.syntax.ElementAssign: void <init>(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r7, $r9);

        $r14 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        virtualinvoke $r14.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r13);

     label4:
        goto label1;

     label5:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpExtend)
    {
        com.hp.hpl.jena.sparql.expr.Expr $r9, $r12;
        com.hp.hpl.jena.sparql.syntax.ElementBind $r13, $r17;
        java.util.Map $r11, $r15;
        int $i0;
        com.hp.hpl.jena.sparql.core.VarExprList $r3, $r8;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r2;
        com.hp.hpl.jena.sparql.algebra.Op $r1;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.algebra.op.OpExtend r0;
        java.util.Iterator $r5;
        java.util.Collection $r16;
        com.hp.hpl.jena.sparql.core.Var r7;
        java.util.List $r4;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$SubExprForVar $r10;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r14, $r18;
        java.lang.Object $r6;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r2);

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.core.Var) $r6;

        $r8 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.core.VarExprList getVarExprList()>();

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.sparql.core.VarExprList: com.hp.hpl.jena.sparql.expr.Expr getExpr(com.hp.hpl.jena.sparql.core.Var)>(r7);

        $r10 = new com.hp.hpl.jena.sparql.algebra.OpAsQuery$SubExprForVar;

        $r11 = r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Map varExpression>;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$SubExprForVar: void <init>(java.util.Map)>($r11);

        $r12 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprTransformer: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprTransform,com.hp.hpl.jena.sparql.expr.Expr)>($r10, $r9);

        $z1 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean inTopLevel()>();

        if $z1 == 0 goto label5;

        $i0 = r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: int groupDepth>;

        if $i0 == 0 goto label2;

        $z3 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean inGroupRecombine(com.hp.hpl.jena.sparql.algebra.op.OpExtend)>(r0);

        if $z3 == 0 goto label4;

     label2:
        $z2 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean inGroupRecombine(com.hp.hpl.jena.sparql.algebra.op.OpExtend)>(r0);

        if $z2 != 0 goto label3;

        $r16 = r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Collection projectVars>;

        staticinvoke <com.hp.hpl.jena.sparql.algebra.OpAsQuery: void access$100(java.util.Collection,com.hp.hpl.jena.sparql.core.Var)>($r16, r7);

     label3:
        $r15 = r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Map varExpression>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, $r12);

        goto label6;

     label4:
        $r17 = new com.hp.hpl.jena.sparql.syntax.ElementBind;

        specialinvoke $r17.<com.hp.hpl.jena.sparql.syntax.ElementBind: void <init>(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r7, $r12);

        $r18 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        virtualinvoke $r18.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r17);

        goto label6;

     label5:
        $r13 = new com.hp.hpl.jena.sparql.syntax.ElementBind;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.syntax.ElementBind: void <init>(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r7, $r12);

        $r14 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        virtualinvoke $r14.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r13);

     label6:
        goto label1;

     label7:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpList)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpList r1;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpList;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpOrder)
    {
        com.hp.hpl.jena.query.Query $r7;
        java.util.Iterator $r2;
        com.hp.hpl.jena.query.SortCondition r6;
        com.hp.hpl.jena.sparql.algebra.op.OpOrder r0;
        java.util.List $r1;
        java.lang.Object $r5;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r4;
        com.hp.hpl.jena.sparql.algebra.Op $r3;
        boolean $z0;

        r4 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpOrder;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: java.util.List getConditions()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.query.SortCondition) $r5;

        $r7 = r4.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        virtualinvoke $r7.<com.hp.hpl.jena.query.Query: void addOrderBy(com.hp.hpl.jena.query.SortCondition)>(r6);

        goto label1;

     label2:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpOrder: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r4);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpProject)
    {
        com.hp.hpl.jena.query.Query $r8;
        com.hp.hpl.jena.sparql.algebra.op.OpProject r2;
        java.util.Collection $r3;
        java.util.Set $r1;
        com.hp.hpl.jena.sparql.syntax.ElementSubQuery $r7;
        java.util.List $r4;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r9;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0, $r6;
        com.hp.hpl.jena.sparql.algebra.Op $r5;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpProject;

        $z0 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean inProject>;

        if $z0 == 0 goto label1;

        $r6 = new com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: void <init>(com.hp.hpl.jena.sparql.algebra.Op)>(r2);

        $r7 = new com.hp.hpl.jena.sparql.syntax.ElementSubQuery;

        $r8 = virtualinvoke $r6.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query convert()>();

        specialinvoke $r7.<com.hp.hpl.jena.sparql.syntax.ElementSubQuery: void <init>(com.hp.hpl.jena.query.Query)>($r8);

        $r9 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()>();

        virtualinvoke $r9.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void addElement(com.hp.hpl.jena.sparql.syntax.Element)>($r7);

        goto label2;

     label1:
        $r1 = staticinvoke <com.hp.hpl.jena.sparql.algebra.OpAsQuery: java.util.Set access$000()>();

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Collection projectVars> = $r1;

        $r3 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Collection projectVars>;

        $r4 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpProject: java.util.List getVars()>();

        interfaceinvoke $r3.<java.util.Collection: boolean addAll(java.util.Collection)>($r4);

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean inProject> = 1;

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpProject: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        interfaceinvoke $r5.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r0);

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean inProject> = 0;

     label2:
        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpReduced)
    {
        com.hp.hpl.jena.query.Query $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpReduced r2;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpReduced;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        virtualinvoke $r1.<com.hp.hpl.jena.query.Query: void setReduced(boolean)>(1);

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpReduced: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r0);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpDistinct)
    {
        com.hp.hpl.jena.query.Query $r1;
        com.hp.hpl.jena.sparql.algebra.op.OpDistinct r2;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.algebra.Op $r3;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpDistinct;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        virtualinvoke $r1.<com.hp.hpl.jena.query.Query: void setDistinct(boolean)>(1);

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.algebra.op.OpDistinct: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        interfaceinvoke $r3.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r0);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpSlice)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpSlice r0;
        com.hp.hpl.jena.query.Query $r3, $r4;
        long $l0, $l2, $l4, $l5;
        byte $b1, $b3;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r2;
        com.hp.hpl.jena.sparql.algebra.Op $r1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpSlice;

        $l0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getStart()>();

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 == 0 goto label1;

        $r4 = r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        $l5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getStart()>();

        virtualinvoke $r4.<com.hp.hpl.jena.query.Query: void setOffset(long)>($l5);

     label1:
        $l2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getLength()>();

        $b3 = $l2 cmp -9223372036854775808L;

        if $b3 == 0 goto label2;

        $r3 = r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        $l4 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: long getLength()>();

        virtualinvoke $r3.<com.hp.hpl.jena.query.Query: void setLimit(long)>($l4);

     label2:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpSlice: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        interfaceinvoke $r1.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r2);

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpGroup)
    {
        com.hp.hpl.jena.query.Query $r10, $r11, $r15;
        com.hp.hpl.jena.sparql.algebra.op.OpGroup r0;
        com.hp.hpl.jena.sparql.expr.Expr $r9, $r17;
        com.hp.hpl.jena.sparql.expr.ExprAggregator r19;
        java.util.Map $r18;
        int $i0, $i1, $i2, $i3;
        com.hp.hpl.jena.sparql.core.VarExprList $r3;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r6;
        com.hp.hpl.jena.sparql.expr.aggregate.Aggregator $r16;
        com.hp.hpl.jena.sparql.algebra.Op $r7;
        boolean $z0, $z1;
        java.util.Iterator $r2, $r5;
        com.hp.hpl.jena.sparql.core.Var $r14, r20;
        java.util.List $r1, $r4;
        java.lang.Object $r8, $r12;
        com.hp.hpl.jena.sparql.expr.ExprVar $r13;

        r6 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpGroup;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: java.util.List getAggregators()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r12 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r19 = (com.hp.hpl.jena.sparql.expr.ExprAggregator) $r12;

        $r13 = virtualinvoke r19.<com.hp.hpl.jena.sparql.expr.ExprAggregator: com.hp.hpl.jena.sparql.expr.ExprVar getAggVar()>();

        $r14 = virtualinvoke $r13.<com.hp.hpl.jena.sparql.expr.ExprVar: com.hp.hpl.jena.sparql.core.Var asVar()>();

        $r15 = r6.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        $r16 = virtualinvoke r19.<com.hp.hpl.jena.sparql.expr.ExprAggregator: com.hp.hpl.jena.sparql.expr.aggregate.Aggregator getAggregator()>();

        $r17 = virtualinvoke $r15.<com.hp.hpl.jena.query.Query: com.hp.hpl.jena.sparql.expr.Expr allocAggregate(com.hp.hpl.jena.sparql.expr.aggregate.Aggregator)>($r16);

        $r18 = r6.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Map varExpression>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r17);

        goto label1;

     label2:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: com.hp.hpl.jena.sparql.core.VarExprList getGroupVars()>();

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.VarExprList: java.util.List getVars()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r8 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r20 = (com.hp.hpl.jena.sparql.core.Var) $r8;

        $r9 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.core.VarExprList: com.hp.hpl.jena.sparql.expr.Expr getExpr(com.hp.hpl.jena.sparql.core.Var)>(r20);

        if $r9 == null goto label4;

        $r11 = r6.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        virtualinvoke $r11.<com.hp.hpl.jena.query.Query: void addGroupBy(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.sparql.expr.Expr)>(r20, $r9);

        goto label5;

     label4:
        $r10 = r6.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.query.Query query>;

        virtualinvoke $r10.<com.hp.hpl.jena.query.Query: void addGroupBy(com.hp.hpl.jena.graph.Node)>(r20);

     label5:
        goto label3;

     label6:
        $i0 = r6.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: int groupDepth>;

        $i1 = $i0 + 1;

        r6.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: int groupDepth> = $i1;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpGroup: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        interfaceinvoke $r7.<com.hp.hpl.jena.sparql.algebra.Op: void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)>(r6);

        $i2 = r6.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: int groupDepth>;

        $i3 = $i2 - 1;

        r6.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: int groupDepth> = $i3;

        return;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.op.OpTopN)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpTopN r2;
        com.hp.hpl.jena.sparql.ARQNotImplemented $r0;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r1;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r2 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpTopN;

        $r0 = new com.hp.hpl.jena.sparql.ARQNotImplemented;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.ARQNotImplemented: void <init>(java.lang.String)>("OpTopN");

        throw $r0;
    }

    private com.hp.hpl.jena.sparql.syntax.Element lastElement()
    {
        java.util.List $r2, $r3, $r4;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r1;
        int $i0, $i1, $i2;
        com.hp.hpl.jena.sparql.syntax.Element $r6;
        java.lang.Object $r5;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r1 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup>;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return null;

     label2:
        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $i1 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.sparql.syntax.ElementGroup: java.util.List getElements()>();

        $i2 = $i1 - 1;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2);

        $r6 = (com.hp.hpl.jena.sparql.syntax.Element) $r5;

        return $r6;
    }

    private void startSubGroup()
    {
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup>;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: void push(com.hp.hpl.jena.sparql.syntax.ElementGroup)>($r1);

        $r2 = new com.hp.hpl.jena.sparql.syntax.ElementGroup;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.syntax.ElementGroup: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup> = $r2;

        return;
    }

    private com.hp.hpl.jena.sparql.syntax.ElementGroup endSubGroup()
    {
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r1, r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup pop()>();

        r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup>;

        r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup> = $r1;

        return r2;
    }

    private com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup()
    {
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: com.hp.hpl.jena.sparql.syntax.ElementGroup currentGroup>;

        return $r1;
    }

    private com.hp.hpl.jena.sparql.syntax.ElementGroup peek()
    {
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r4;
        int $i0;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        java.util.Deque $r1, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Deque stack>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Deque stack>;

        $r3 = interfaceinvoke $r2.<java.util.Deque: java.lang.Object peek()>();

        $r4 = (com.hp.hpl.jena.sparql.syntax.ElementGroup) $r3;

        return $r4;
    }

    private com.hp.hpl.jena.sparql.syntax.ElementGroup pop()
    {
        com.hp.hpl.jena.sparql.syntax.ElementGroup $r3;
        java.lang.Object $r2;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        java.util.Deque $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Deque stack>;

        $r2 = interfaceinvoke $r1.<java.util.Deque: java.lang.Object pop()>();

        $r3 = (com.hp.hpl.jena.sparql.syntax.ElementGroup) $r2;

        return $r3;
    }

    private void push(com.hp.hpl.jena.sparql.syntax.ElementGroup)
    {
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        com.hp.hpl.jena.sparql.syntax.ElementGroup r1;
        java.util.Deque $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r1 := @parameter0: com.hp.hpl.jena.sparql.syntax.ElementGroup;

        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Deque stack>;

        interfaceinvoke $r2.<java.util.Deque: void push(java.lang.Object)>(r1);

        return;
    }

    private boolean inTopLevel()
    {
        int $i0;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r0;
        java.util.Deque $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: java.util.Deque stack>;

        $i0 = interfaceinvoke $r1.<java.util.Deque: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean inGroupRecombine(com.hp.hpl.jena.sparql.algebra.op.OpExtend)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExtend r0, $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign $r3;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r2;
        com.hp.hpl.jena.sparql.algebra.Op $r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpExtend: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z0 = $r1 instanceof com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        if $z0 == 0 goto label1;

        $r4 = (com.hp.hpl.jena.sparql.algebra.op.OpExtend) $r1;

        $z4 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean inGroupRecombine(com.hp.hpl.jena.sparql.algebra.op.OpExtend)>($r4);

        return $z4;

     label1:
        $z1 = $r1 instanceof com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        if $z1 == 0 goto label2;

        $r3 = (com.hp.hpl.jena.sparql.algebra.op.OpAssign) $r1;

        $z3 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean inGroupRecombine(com.hp.hpl.jena.sparql.algebra.op.OpAssign)>($r3);

        return $z3;

     label2:
        $z2 = $r1 instanceof com.hp.hpl.jena.sparql.algebra.op.OpGroup;

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private boolean inGroupRecombine(com.hp.hpl.jena.sparql.algebra.op.OpAssign)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpExtend $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpAssign r0, $r3;
        com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter r2;
        com.hp.hpl.jena.sparql.algebra.Op $r1;
        boolean $z0, $z1, $z2, $z3, $z4;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpAssign: com.hp.hpl.jena.sparql.algebra.Op getSubOp()>();

        $z0 = $r1 instanceof com.hp.hpl.jena.sparql.algebra.op.OpExtend;

        if $z0 == 0 goto label1;

        $r4 = (com.hp.hpl.jena.sparql.algebra.op.OpExtend) $r1;

        $z4 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean inGroupRecombine(com.hp.hpl.jena.sparql.algebra.op.OpExtend)>($r4);

        return $z4;

     label1:
        $z1 = $r1 instanceof com.hp.hpl.jena.sparql.algebra.op.OpAssign;

        if $z1 == 0 goto label2;

        $r3 = (com.hp.hpl.jena.sparql.algebra.op.OpAssign) $r1;

        $z3 = specialinvoke r2.<com.hp.hpl.jena.sparql.algebra.OpAsQuery$Converter: boolean inGroupRecombine(com.hp.hpl.jena.sparql.algebra.op.OpAssign)>($r3);

        return $z3;

     label2:
        $z2 = $r1 instanceof com.hp.hpl.jena.sparql.algebra.op.OpGroup;

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }
}
