final class org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache extends org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache
{
    private final org.waveprotocol.wave.model.document.operation.Attributes oldAttributes;
    private final org.waveprotocol.wave.model.document.operation.Attributes newAttributes;
    final org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget this$0;

    void <init>(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget, org.waveprotocol.wave.model.document.operation.Attributes, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache r0;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget r1;
        org.waveprotocol.wave.model.document.operation.Attributes r2, r3;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.Attributes;

        r3 := @parameter2: org.waveprotocol.wave.model.document.operation.Attributes;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$RangeCache: void <init>(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$1)>(null);

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache: org.waveprotocol.wave.model.document.operation.Attributes oldAttributes> = r2;

        r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache: org.waveprotocol.wave.model.document.operation.Attributes newAttributes> = r3;

        return;
    }

    void resolve(int)
    {
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget $r6;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget $r1, $r5;
        org.waveprotocol.wave.model.document.operation.Attributes $r2, $r3;
        org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache r0;
        org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor $r4, $r7;
        int i0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache;

        i0 := @parameter0: int;

        $r1 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget this$0>;

        $r4 = $r1.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        $r3 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache: org.waveprotocol.wave.model.document.operation.Attributes oldAttributes>;

        $r2 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache: org.waveprotocol.wave.model.document.operation.Attributes newAttributes>;

        interfaceinvoke $r4.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void replaceAttributes(org.waveprotocol.wave.model.document.operation.Attributes,org.waveprotocol.wave.model.document.operation.Attributes)>($r3, $r2);

        $r5 = r0.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget$ReplaceAttributesCache: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget this$0>;

        $r6 = staticinvoke <org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget: org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget access$300(org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$NoninsertionTarget)>($r5);

        $r7 = $r6.<org.waveprotocol.wave.model.document.operation.algorithm.InsertionNoninsertionTransformer$InsertionTarget: org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor targetDocument>;

        interfaceinvoke $r7.<org.waveprotocol.wave.model.document.operation.EvaluatingDocOpCursor: void retain(int)>(1);

        return;
    }
}
