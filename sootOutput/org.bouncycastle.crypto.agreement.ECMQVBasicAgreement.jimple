public class org.bouncycastle.crypto.agreement.ECMQVBasicAgreement extends java.lang.Object implements org.bouncycastle.crypto.BasicAgreement
{
    org.bouncycastle.crypto.params.MQVPrivateParameters privParams;

    public void <init>()
    {
        org.bouncycastle.crypto.agreement.ECMQVBasicAgreement r0;

        r0 := @this: org.bouncycastle.crypto.agreement.ECMQVBasicAgreement;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void init(org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.agreement.ECMQVBasicAgreement r0;
        org.bouncycastle.crypto.params.MQVPrivateParameters $r2;
        org.bouncycastle.crypto.CipherParameters r1;

        r0 := @this: org.bouncycastle.crypto.agreement.ECMQVBasicAgreement;

        r1 := @parameter0: org.bouncycastle.crypto.CipherParameters;

        $r2 = (org.bouncycastle.crypto.params.MQVPrivateParameters) r1;

        r0.<org.bouncycastle.crypto.agreement.ECMQVBasicAgreement: org.bouncycastle.crypto.params.MQVPrivateParameters privParams> = $r2;

        return;
    }

    public java.math.BigInteger calculateAgreement(org.bouncycastle.crypto.CipherParameters)
    {
        org.bouncycastle.crypto.params.MQVPublicParameters r1;
        org.bouncycastle.math.ec.ECFieldElement $r13;
        org.bouncycastle.crypto.params.ECPublicKeyParameters $r9, $r10, $r11;
        org.bouncycastle.crypto.params.ECPrivateKeyParameters $r4, $r7;
        org.bouncycastle.crypto.agreement.ECMQVBasicAgreement r2;
        org.bouncycastle.math.ec.ECPoint $r12;
        org.bouncycastle.crypto.params.ECDomainParameters $r5;
        org.bouncycastle.crypto.params.MQVPrivateParameters $r3, $r6, $r8;
        java.math.BigInteger $r14;
        org.bouncycastle.crypto.CipherParameters r0;

        r2 := @this: org.bouncycastle.crypto.agreement.ECMQVBasicAgreement;

        r0 := @parameter0: org.bouncycastle.crypto.CipherParameters;

        r1 = (org.bouncycastle.crypto.params.MQVPublicParameters) r0;

        $r3 = r2.<org.bouncycastle.crypto.agreement.ECMQVBasicAgreement: org.bouncycastle.crypto.params.MQVPrivateParameters privParams>;

        $r4 = virtualinvoke $r3.<org.bouncycastle.crypto.params.MQVPrivateParameters: org.bouncycastle.crypto.params.ECPrivateKeyParameters getStaticPrivateKey()>();

        $r5 = virtualinvoke $r4.<org.bouncycastle.crypto.params.ECPrivateKeyParameters: org.bouncycastle.crypto.params.ECDomainParameters getParameters()>();

        $r6 = r2.<org.bouncycastle.crypto.agreement.ECMQVBasicAgreement: org.bouncycastle.crypto.params.MQVPrivateParameters privParams>;

        $r7 = virtualinvoke $r6.<org.bouncycastle.crypto.params.MQVPrivateParameters: org.bouncycastle.crypto.params.ECPrivateKeyParameters getEphemeralPrivateKey()>();

        $r8 = r2.<org.bouncycastle.crypto.agreement.ECMQVBasicAgreement: org.bouncycastle.crypto.params.MQVPrivateParameters privParams>;

        $r9 = virtualinvoke $r8.<org.bouncycastle.crypto.params.MQVPrivateParameters: org.bouncycastle.crypto.params.ECPublicKeyParameters getEphemeralPublicKey()>();

        $r10 = virtualinvoke r1.<org.bouncycastle.crypto.params.MQVPublicParameters: org.bouncycastle.crypto.params.ECPublicKeyParameters getStaticPublicKey()>();

        $r11 = virtualinvoke r1.<org.bouncycastle.crypto.params.MQVPublicParameters: org.bouncycastle.crypto.params.ECPublicKeyParameters getEphemeralPublicKey()>();

        $r12 = specialinvoke r2.<org.bouncycastle.crypto.agreement.ECMQVBasicAgreement: org.bouncycastle.math.ec.ECPoint calculateMqvAgreement(org.bouncycastle.crypto.params.ECDomainParameters,org.bouncycastle.crypto.params.ECPrivateKeyParameters,org.bouncycastle.crypto.params.ECPrivateKeyParameters,org.bouncycastle.crypto.params.ECPublicKeyParameters,org.bouncycastle.crypto.params.ECPublicKeyParameters,org.bouncycastle.crypto.params.ECPublicKeyParameters)>($r5, $r4, $r7, $r9, $r10, $r11);

        $r13 = virtualinvoke $r12.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECFieldElement getX()>();

        $r14 = virtualinvoke $r13.<org.bouncycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        return $r14;
    }

    private org.bouncycastle.math.ec.ECPoint calculateMqvAgreement(org.bouncycastle.crypto.params.ECDomainParameters, org.bouncycastle.crypto.params.ECPrivateKeyParameters, org.bouncycastle.crypto.params.ECPrivateKeyParameters, org.bouncycastle.crypto.params.ECPublicKeyParameters, org.bouncycastle.crypto.params.ECPublicKeyParameters, org.bouncycastle.crypto.params.ECPublicKeyParameters)
    {
        java.lang.IllegalStateException $r32;
        java.math.BigInteger $r1, $r2, $r3, $r6, $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16, $r20, $r21, $r22, $r23, $r24, $r25, $r28, $r29, $r34;
        boolean $z0;
        org.bouncycastle.math.ec.ECFieldElement $r5, $r19;
        org.bouncycastle.crypto.params.ECPublicKeyParameters r4, r17, r26;
        org.bouncycastle.crypto.params.ECPrivateKeyParameters r9, r13;
        org.bouncycastle.math.ec.ECPoint $r18, $r27, $r30, $r31, $r33, r36;
        org.bouncycastle.crypto.params.ECDomainParameters r0;
        int $i0, $i1, i2;
        org.bouncycastle.crypto.agreement.ECMQVBasicAgreement r35;

        r35 := @this: org.bouncycastle.crypto.agreement.ECMQVBasicAgreement;

        r0 := @parameter0: org.bouncycastle.crypto.params.ECDomainParameters;

        r9 := @parameter1: org.bouncycastle.crypto.params.ECPrivateKeyParameters;

        r13 := @parameter2: org.bouncycastle.crypto.params.ECPrivateKeyParameters;

        r4 := @parameter3: org.bouncycastle.crypto.params.ECPublicKeyParameters;

        r26 := @parameter4: org.bouncycastle.crypto.params.ECPublicKeyParameters;

        r17 := @parameter5: org.bouncycastle.crypto.params.ECPublicKeyParameters;

        $r1 = virtualinvoke r0.<org.bouncycastle.crypto.params.ECDomainParameters: java.math.BigInteger getN()>();

        $i0 = virtualinvoke $r1.<java.math.BigInteger: int bitLength()>();

        $i1 = $i0 + 1;

        i2 = $i1 / 2;

        $r2 = <org.bouncycastle.math.ec.ECConstants: java.math.BigInteger ONE>;

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>(i2);

        if r4 != null goto label1;

        $r33 = virtualinvoke r0.<org.bouncycastle.crypto.params.ECDomainParameters: org.bouncycastle.math.ec.ECPoint getG()>();

        $r34 = virtualinvoke r13.<org.bouncycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        r36 = virtualinvoke $r33.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECPoint multiply(java.math.BigInteger)>($r34);

        goto label2;

     label1:
        r36 = virtualinvoke r4.<org.bouncycastle.crypto.params.ECPublicKeyParameters: org.bouncycastle.math.ec.ECPoint getQ()>();

     label2:
        $r5 = virtualinvoke r36.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECFieldElement getX()>();

        $r6 = virtualinvoke $r5.<org.bouncycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r7 = virtualinvoke $r6.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        $r8 = virtualinvoke $r7.<java.math.BigInteger: java.math.BigInteger setBit(int)>(i2);

        $r10 = virtualinvoke r9.<org.bouncycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        $r11 = virtualinvoke $r10.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r8);

        $r12 = virtualinvoke $r11.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        $r14 = virtualinvoke r13.<org.bouncycastle.crypto.params.ECPrivateKeyParameters: java.math.BigInteger getD()>();

        $r15 = virtualinvoke $r12.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r14);

        $r16 = virtualinvoke $r15.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        $r18 = virtualinvoke r17.<org.bouncycastle.crypto.params.ECPublicKeyParameters: org.bouncycastle.math.ec.ECPoint getQ()>();

        $r19 = virtualinvoke $r18.<org.bouncycastle.math.ec.ECPoint: org.bouncycastle.math.ec.ECFieldElement getX()>();

        $r20 = virtualinvoke $r19.<org.bouncycastle.math.ec.ECFieldElement: java.math.BigInteger toBigInteger()>();

        $r21 = virtualinvoke $r20.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r3);

        $r22 = virtualinvoke $r21.<java.math.BigInteger: java.math.BigInteger setBit(int)>(i2);

        $r23 = virtualinvoke r0.<org.bouncycastle.crypto.params.ECDomainParameters: java.math.BigInteger getH()>();

        $r24 = virtualinvoke $r23.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r16);

        $r25 = virtualinvoke $r24.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        $r27 = virtualinvoke r26.<org.bouncycastle.crypto.params.ECPublicKeyParameters: org.bouncycastle.math.ec.ECPoint getQ()>();

        $r28 = virtualinvoke $r22.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r25);

        $r29 = virtualinvoke $r28.<java.math.BigInteger: java.math.BigInteger mod(java.math.BigInteger)>($r1);

        $r30 = virtualinvoke r17.<org.bouncycastle.crypto.params.ECPublicKeyParameters: org.bouncycastle.math.ec.ECPoint getQ()>();

        $r31 = staticinvoke <org.bouncycastle.math.ec.ECAlgorithms: org.bouncycastle.math.ec.ECPoint sumOfTwoMultiplies(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)>($r27, $r29, $r30, $r25);

        $z0 = virtualinvoke $r31.<org.bouncycastle.math.ec.ECPoint: boolean isInfinity()>();

        if $z0 == 0 goto label3;

        $r32 = new java.lang.IllegalStateException;

        specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Infinity is not a valid agreement value for MQV");

        throw $r32;

     label3:
        return $r31;
    }
}
