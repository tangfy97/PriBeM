public abstract class facebook4j.internal.logging.Logger extends java.lang.Object
{
    private static final facebook4j.internal.logging.LoggerFactory LOGGER_FACTORY;
    private static final java.lang.String LOGGER_FACTORY_IMPLEMENTATION;

    public void <init>()
    {
        facebook4j.internal.logging.Logger r0;

        r0 := @this: facebook4j.internal.logging.Logger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static facebook4j.internal.logging.LoggerFactory getLoggerFactoryIfAvailable(java.lang.String, java.lang.String)
    {
        facebook4j.internal.logging.LoggerFactory $r4;
        java.lang.IllegalAccessException $r5;
        java.lang.AssertionError $r6, $r9;
        java.lang.InstantiationException $r8;
        java.lang.Class $r2;
        java.lang.Object $r3;
        java.lang.SecurityException $r7;
        java.lang.ClassNotFoundException $r10;
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

     label1:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

        $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        $r4 = (facebook4j.internal.logging.LoggerFactory) $r3;

     label2:
        return $r4;

     label3:
        $r10 := @caughtexception;

        goto label7;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r9;

     label5:
        $r7 := @caughtexception;

        goto label7;

     label6:
        $r5 := @caughtexception;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r6;

     label7:
        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.InstantiationException from label1 to label2 with label4;
        catch java.lang.SecurityException from label1 to label2 with label5;
        catch java.lang.IllegalAccessException from label1 to label2 with label6;
    }

    public static facebook4j.internal.logging.Logger getLogger(java.lang.Class)
    {
        facebook4j.internal.logging.LoggerFactory $r1;
        facebook4j.internal.logging.Logger $r2;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        $r1 = <facebook4j.internal.logging.Logger: facebook4j.internal.logging.LoggerFactory LOGGER_FACTORY>;

        $r2 = virtualinvoke $r1.<facebook4j.internal.logging.LoggerFactory: facebook4j.internal.logging.Logger getLogger(java.lang.Class)>(r0);

        return $r2;
    }

    public abstract boolean isDebugEnabled();

    public abstract boolean isInfoEnabled();

    public abstract boolean isWarnEnabled();

    public abstract boolean isErrorEnabled();

    public abstract void debug(java.lang.String);

    public abstract void debug(java.lang.String, java.lang.String);

    public abstract void info(java.lang.String);

    public abstract void info(java.lang.String, java.lang.String);

    public abstract void warn(java.lang.String);

    public abstract void warn(java.lang.String, java.lang.String);

    public abstract void error(java.lang.String);

    public abstract void error(java.lang.String, java.lang.Throwable);

    static void <clinit>()
    {
        facebook4j.internal.logging.StdOutLoggerFactory $r1;
        facebook4j.internal.logging.LoggerFactory r2;
        java.lang.String $r0;

        <facebook4j.internal.logging.Logger: java.lang.String LOGGER_FACTORY_IMPLEMENTATION> = "facebook4j.loggerFactory";

        r2 = null;

        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("facebook4j.loggerFactory");

        if $r0 == null goto label1;

        r2 = staticinvoke <facebook4j.internal.logging.Logger: facebook4j.internal.logging.LoggerFactory getLoggerFactoryIfAvailable(java.lang.String,java.lang.String)>($r0, $r0);

     label1:
        if null != r2 goto label2;

        r2 = staticinvoke <facebook4j.internal.logging.Logger: facebook4j.internal.logging.LoggerFactory getLoggerFactoryIfAvailable(java.lang.String,java.lang.String)>("org.slf4j.impl.StaticLoggerBinder", "facebook4j.internal.logging.SLF4JLoggerFactory");

     label2:
        if null != r2 goto label3;

        r2 = staticinvoke <facebook4j.internal.logging.Logger: facebook4j.internal.logging.LoggerFactory getLoggerFactoryIfAvailable(java.lang.String,java.lang.String)>("org.apache.commons.logging.Log", "facebook4j.internal.logging.CommonsLoggingLoggerFactory");

     label3:
        if null != r2 goto label4;

        r2 = staticinvoke <facebook4j.internal.logging.Logger: facebook4j.internal.logging.LoggerFactory getLoggerFactoryIfAvailable(java.lang.String,java.lang.String)>("org.apache.log4j.Logger", "facebook4j.internal.logging.Log4JLoggerFactory");

     label4:
        if null != r2 goto label5;

        r2 = staticinvoke <facebook4j.internal.logging.Logger: facebook4j.internal.logging.LoggerFactory getLoggerFactoryIfAvailable(java.lang.String,java.lang.String)>("com.google.appengine.api.urlfetch.URLFetchService", "facebook4j.internal.logging.JULLoggerFactory");

     label5:
        if null != r2 goto label6;

        $r1 = new facebook4j.internal.logging.StdOutLoggerFactory;

        specialinvoke $r1.<facebook4j.internal.logging.StdOutLoggerFactory: void <init>()>();

        r2 = $r1;

     label6:
        <facebook4j.internal.logging.Logger: facebook4j.internal.logging.LoggerFactory LOGGER_FACTORY> = r2;

        return;
    }
}
