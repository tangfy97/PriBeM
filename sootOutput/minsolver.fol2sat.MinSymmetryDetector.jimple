final class minsolver.fol2sat.MinSymmetryDetector extends java.lang.Object
{
    private final kodkod.instance.Bounds bounds;
    private final java.util.List parts;
    private final int usize;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lminsolver/fol2sat/MinSymmetryDetector;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <minsolver.fol2sat.MinSymmetryDetector: boolean $assertionsDisabled> = $z1;

        return;
    }

    private void <init>(kodkod.instance.Bounds)
    {
        minsolver.fol2sat.MinSymmetryDetector r0;
        kodkod.util.ints.IntSet $r4;
        java.util.List $r5;
        kodkod.instance.Bounds r1;
        int $i0, $i1, $i2, i3;
        kodkod.instance.Universe $r2;
        java.util.LinkedList $r3;

        r0 := @this: minsolver.fol2sat.MinSymmetryDetector;

        r1 := @parameter0: kodkod.instance.Bounds;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<minsolver.fol2sat.MinSymmetryDetector: kodkod.instance.Bounds bounds> = r1;

        $r2 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.Universe universe()>();

        $i0 = virtualinvoke $r2.<kodkod.instance.Universe: int size()>();

        r0.<minsolver.fol2sat.MinSymmetryDetector: int usize> = $i0;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<java.util.LinkedList: void <init>()>();

        r0.<minsolver.fol2sat.MinSymmetryDetector: java.util.List parts> = $r3;

        $i1 = r0.<minsolver.fol2sat.MinSymmetryDetector: int usize>;

        $r4 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>($i1);

        i3 = 0;

        goto label2;

     label1:
        interfaceinvoke $r4.<kodkod.util.ints.IntSet: boolean add(int)>(i3);

        i3 = i3 + 1;

     label2:
        $i2 = r0.<minsolver.fol2sat.MinSymmetryDetector: int usize>;

        if i3 < $i2 goto label1;

        $r5 = r0.<minsolver.fol2sat.MinSymmetryDetector: java.util.List parts>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

        return;
    }

    static java.util.Set partition(kodkod.instance.Bounds)
    {
        minsolver.fol2sat.MinSymmetryDetector $r0;
        java.lang.AssertionError $r5;
        java.util.List $r3, $r4;
        kodkod.instance.Bounds r1;
        int $i0, $i1;
        java.util.LinkedHashSet $r2;
        boolean $z0;

        r1 := @parameter0: kodkod.instance.Bounds;

        $r0 = new minsolver.fol2sat.MinSymmetryDetector;

        specialinvoke $r0.<minsolver.fol2sat.MinSymmetryDetector: void <init>(kodkod.instance.Bounds)>(r1);

        specialinvoke $r0.<minsolver.fol2sat.MinSymmetryDetector: void computePartitions()>();

        $r2 = new java.util.LinkedHashSet;

        $r3 = $r0.<minsolver.fol2sat.MinSymmetryDetector: java.util.List parts>;

        specialinvoke $r2.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r3);

        $z0 = <minsolver.fol2sat.MinSymmetryDetector: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $r4 = $r0.<minsolver.fol2sat.MinSymmetryDetector: java.util.List parts>;

        $i1 = interfaceinvoke $r4.<java.util.List: int size()>();

        if $i0 == $i1 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        return $r2;
    }

    private final void computePartitions()
    {
        minsolver.fol2sat.MinSymmetryDetector r0;
        java.util.HashMap $r1;
        kodkod.util.ints.IntIterator $r4;
        kodkod.instance.TupleSet[] $r9;
        kodkod.instance.Bounds $r2, $r5, $r8;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, i9;
        boolean $z0;
        kodkod.instance.TupleSet $r6, r12;
        kodkod.util.ints.IntSet $r3, $r7, $r11;
        java.util.List $r10;

        r0 := @this: minsolver.fol2sat.MinSymmetryDetector;

        $i0 = r0.<minsolver.fol2sat.MinSymmetryDetector: int usize>;

        if $i0 != 1 goto label1;

        return;

     label1:
        $r1 = new java.util.HashMap;

        $i1 = r0.<minsolver.fol2sat.MinSymmetryDetector: int usize>;

        $i2 = $i1 * 2;

        $i3 = $i2 / 3;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>($i3);

        $r2 = r0.<minsolver.fol2sat.MinSymmetryDetector: kodkod.instance.Bounds bounds>;

        $r3 = virtualinvoke $r2.<kodkod.instance.Bounds: kodkod.util.ints.IntSet ints()>();

        $r4 = interfaceinvoke $r3.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label3;

     label2:
        $r5 = r0.<minsolver.fol2sat.MinSymmetryDetector: kodkod.instance.Bounds bounds>;

        $i4 = interfaceinvoke $r4.<kodkod.util.ints.IntIterator: int next()>();

        $r6 = virtualinvoke $r5.<kodkod.instance.Bounds: kodkod.instance.TupleSet exactBound(int)>($i4);

        $r7 = virtualinvoke $r6.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        specialinvoke r0.<minsolver.fol2sat.MinSymmetryDetector: void refinePartitions(kodkod.util.ints.IntSet,int,java.util.Map)>($r7, 1, $r1);

     label3:
        $z0 = interfaceinvoke $r4.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r8 = r0.<minsolver.fol2sat.MinSymmetryDetector: kodkod.instance.Bounds bounds>;

        $r9 = staticinvoke <minsolver.fol2sat.MinSymmetryDetector: kodkod.instance.TupleSet[] sort(kodkod.instance.Bounds)>($r8);

        i5 = lengthof $r9;

        i9 = 0;

        goto label6;

     label4:
        r12 = $r9[i9];

        $r10 = r0.<minsolver.fol2sat.MinSymmetryDetector: java.util.List parts>;

        $i6 = interfaceinvoke $r10.<java.util.List: int size()>();

        $i7 = r0.<minsolver.fol2sat.MinSymmetryDetector: int usize>;

        if $i6 != $i7 goto label5;

        return;

     label5:
        $r11 = virtualinvoke r12.<kodkod.instance.TupleSet: kodkod.util.ints.IntSet indexView()>();

        $i8 = virtualinvoke r12.<kodkod.instance.TupleSet: int arity()>();

        specialinvoke r0.<minsolver.fol2sat.MinSymmetryDetector: void refinePartitions(kodkod.util.ints.IntSet,int,java.util.Map)>($r11, $i8, $r1);

        i9 = i9 + 1;

     label6:
        if i9 < i5 goto label4;

        return;
    }

    private static kodkod.instance.TupleSet[] sort(kodkod.instance.Bounds)
    {
        java.lang.Object[] $r9;
        kodkod.instance.TupleSet[] $r8, r12;
        java.util.ArrayList $r0;
        kodkod.instance.Bounds r1;
        int $i0, $i1, $i2, $i3;
        kodkod.instance.TupleSet $r6, $r7;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r4;
        java.util.Set $r2, $r3;
        minsolver.fol2sat.MinSymmetryDetector$1 $r10;
        java.lang.Object $r5;
        kodkod.ast.Relation r11;

        r1 := @parameter0: kodkod.instance.Bounds;

        $r0 = new java.util.ArrayList;

        $r2 = virtualinvoke r1.<kodkod.instance.Bounds: java.util.Set relations()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r3 = virtualinvoke r1.<kodkod.instance.Bounds: java.util.Set relations()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r11 = (kodkod.ast.Relation) $r5;

        $r6 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.TupleSet lowerBound(kodkod.ast.Relation)>(r11);

        $r7 = virtualinvoke r1.<kodkod.instance.Bounds: kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)>(r11);

        $z0 = virtualinvoke $r6.<kodkod.instance.TupleSet: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $i1 = virtualinvoke $r6.<kodkod.instance.TupleSet: int size()>();

        $i2 = virtualinvoke $r7.<kodkod.instance.TupleSet: int size()>();

        if $i1 >= $i2 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6);

     label2:
        $z1 = virtualinvoke $r7.<kodkod.instance.TupleSet: boolean isEmpty()>();

        if $z1 != 0 goto label3;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

     label3:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

        $i3 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r8 = newarray (kodkod.instance.TupleSet)[$i3];

        $r9 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        r12 = (kodkod.instance.TupleSet[]) $r9;

        $r10 = new minsolver.fol2sat.MinSymmetryDetector$1;

        specialinvoke $r10.<minsolver.fol2sat.MinSymmetryDetector$1: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r12, $r10);

        return r12;
    }

    private void refinePartitions(kodkod.util.ints.IntSet, int, java.util.Map)
    {
        java.util.Map r8;
        java.util.Set $r15;
        java.util.Map$Entry r32;
        kodkod.util.ints.IntSet $r2, r3, $r10, $r13, $r14, $r19, $r21, $r23, $r25, $r27, r30, r31, $r34, $r36, r37;
        minsolver.fol2sat.MinSymmetryDetector r1;
        java.util.ListIterator $r6;
        kodkod.util.ints.IntIterator $r4, $r9, $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.List $r5;
        int i0, $i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27;
        java.util.LinkedList $r0;
        double $d0, $d1, $d2;
        java.util.Iterator $r16, $r28;
        java.lang.Object $r7, $r12, $r17, $r18, $r20, $r22, $r24, $r26, $r29, $r33, $r35;

        r1 := @this: minsolver.fol2sat.MinSymmetryDetector;

        r3 := @parameter0: kodkod.util.ints.IntSet;

        i0 := @parameter1: int;

        r8 := @parameter2: java.util.Map;

        if i0 != 1 goto label01;

        specialinvoke r1.<minsolver.fol2sat.MinSymmetryDetector: void refinePartitions(kodkod.util.ints.IntSet)>(r3);

        return;

     label01:
        $r0 = new java.util.LinkedList;

        specialinvoke $r0.<java.util.LinkedList: void <init>()>();

        $i1 = r1.<minsolver.fol2sat.MinSymmetryDetector: int usize>;

        $d1 = (double) $i1;

        $i2 = i0 - 1;

        $d0 = (double) $i2;

        $d2 = staticinvoke <java.lang.StrictMath: double pow(double,double)>($d1, $d0);

        i3 = (int) $d2;

        $i4 = r1.<minsolver.fol2sat.MinSymmetryDetector: int usize>;

        $r2 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>($i4);

        $r4 = interfaceinvoke r3.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label03;

     label02:
        $i5 = interfaceinvoke $r4.<kodkod.util.ints.IntIterator: int next()>();

        $i6 = $i5 / i3;

        interfaceinvoke $r2.<kodkod.util.ints.IntSet: boolean add(int)>($i6);

     label03:
        $z0 = interfaceinvoke $r4.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label02;

        specialinvoke r1.<minsolver.fol2sat.MinSymmetryDetector: void refinePartitions(kodkod.util.ints.IntSet)>($r2);

        $i9 = 1 - i3;

        $i7 = r1.<minsolver.fol2sat.MinSymmetryDetector: int usize>;

        $i8 = 1 - $i7;

        i27 = $i9 / $i8;

        $r5 = r1.<minsolver.fol2sat.MinSymmetryDetector: java.util.List parts>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.ListIterator listIterator()>();

        goto label13;

     label04:
        $r7 = interfaceinvoke $r6.<java.util.ListIterator: java.lang.Object next()>();

        r30 = (kodkod.util.ints.IntSet) $r7;

        $i10 = interfaceinvoke r30.<kodkod.util.ints.IntSet: int min()>();

        $z1 = interfaceinvoke $r2.<kodkod.util.ints.IntSet: boolean contains(int)>($i10);

        if $z1 == 0 goto label13;

        interfaceinvoke r8.<java.util.Map: void clear()>();

        $r9 = interfaceinvoke r30.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        goto label09;

     label05:
        $i11 = interfaceinvoke $r9.<kodkod.util.ints.IntIterator: int next()>();

        $r10 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>(i3);

        $i15 = $i11 * i3;

        $i12 = $i11 + 1;

        $i13 = $i12 * i3;

        $i14 = $i13 - 1;

        $r11 = interfaceinvoke r3.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator(int,int)>($i15, $i14);

        goto label07;

     label06:
        $i16 = interfaceinvoke $r11.<kodkod.util.ints.IntIterator: int next()>();

        $i17 = $i16 % i3;

        interfaceinvoke $r10.<kodkod.util.ints.IntSet: boolean add(int)>($i17);

     label07:
        $z2 = interfaceinvoke $r11.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z2 != 0 goto label06;

        $r12 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r31 = (kodkod.util.ints.IntSet) $r12;

        if r31 == null goto label08;

        interfaceinvoke r31.<kodkod.util.ints.IntSet: boolean add(int)>($i11);

        goto label09;

     label08:
        $i18 = r1.<minsolver.fol2sat.MinSymmetryDetector: int usize>;

        $r13 = staticinvoke <minsolver.fol2sat.MinSymmetryDetector: kodkod.util.ints.IntSet oneOf(int,int)>($i18, $i11);

        interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r13);

     label09:
        $z5 = interfaceinvoke $r9.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z5 != 0 goto label05;

        interfaceinvoke $r6.<java.util.ListIterator: void remove()>();

        $i19 = r1.<minsolver.fol2sat.MinSymmetryDetector: int usize>;

        $r14 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>($i19);

        $r15 = interfaceinvoke r8.<java.util.Map: java.util.Set entrySet()>();

        $r16 = interfaceinvoke $r15.<java.util.Set: java.util.Iterator iterator()>();

        goto label12;

     label10:
        $r17 = interfaceinvoke $r16.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.util.Map$Entry) $r17;

        $r18 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r19 = (kodkod.util.ints.IntSet) $r18;

        $i20 = interfaceinvoke $r19.<kodkod.util.ints.IntSet: int size()>();

        if $i20 != 1 goto label11;

        $r20 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r21 = (kodkod.util.ints.IntSet) $r20;

        $i21 = interfaceinvoke $r21.<kodkod.util.ints.IntSet: int size()>();

        if $i21 != 1 goto label11;

        $r22 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r23 = (kodkod.util.ints.IntSet) $r22;

        $i22 = interfaceinvoke $r23.<kodkod.util.ints.IntSet: int min()>();

        $r24 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r25 = (kodkod.util.ints.IntSet) $r24;

        $i23 = interfaceinvoke $r25.<kodkod.util.ints.IntSet: int min()>();

        $i24 = $i23 * i27;

        if $i22 != $i24 goto label11;

        $r26 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r27 = (kodkod.util.ints.IntSet) $r26;

        $i25 = interfaceinvoke $r27.<kodkod.util.ints.IntSet: int min()>();

        interfaceinvoke $r14.<kodkod.util.ints.IntSet: boolean add(int)>($i25);

        goto label12;

     label11:
        $r33 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r34 = (kodkod.util.ints.IntSet) $r33;

        interfaceinvoke $r6.<java.util.ListIterator: void add(java.lang.Object)>($r34);

        $r35 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r36 = (kodkod.util.ints.IntSet) $r35;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r36);

     label12:
        $z6 = interfaceinvoke $r16.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label10;

        $z3 = interfaceinvoke $r14.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z3 != 0 goto label13;

        interfaceinvoke $r6.<java.util.ListIterator: void add(java.lang.Object)>($r14);

     label13:
        $z7 = interfaceinvoke $r6.<java.util.ListIterator: boolean hasNext()>();

        if $z7 != 0 goto label04;

        $r28 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        goto label15;

     label14:
        $r29 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r37 = (kodkod.util.ints.IntSet) $r29;

        $i26 = i0 - 1;

        specialinvoke r1.<minsolver.fol2sat.MinSymmetryDetector: void refinePartitions(kodkod.util.ints.IntSet,int,java.util.Map)>(r37, $i26, r8);

     label15:
        $z4 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label14;

        return;
    }

    private void refinePartitions(kodkod.util.ints.IntSet)
    {
        minsolver.fol2sat.MinSymmetryDetector r0;
        java.util.ListIterator $r2;
        kodkod.util.ints.IntSet r4, $r5, r6;
        java.util.List $r1;
        int $i0, $i1, $i2, $i3;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @this: minsolver.fol2sat.MinSymmetryDetector;

        r6 := @parameter0: kodkod.util.ints.IntSet;

        $r1 = r0.<minsolver.fol2sat.MinSymmetryDetector: java.util.List parts>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.ListIterator listIterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.ListIterator: java.lang.Object next()>();

        r4 = (kodkod.util.ints.IntSet) $r3;

        $i0 = interfaceinvoke r4.<kodkod.util.ints.IntSet: int min()>();

        $i1 = interfaceinvoke r4.<kodkod.util.ints.IntSet: int max()>();

        $r5 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int,int)>($i0, $i1);

        interfaceinvoke $r5.<kodkod.util.ints.IntSet: boolean addAll(kodkod.util.ints.IntCollection)>(r4);

        interfaceinvoke $r5.<kodkod.util.ints.IntSet: boolean retainAll(kodkod.util.ints.IntCollection)>(r6);

        $z0 = interfaceinvoke $r5.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $i2 = interfaceinvoke $r5.<kodkod.util.ints.IntSet: int size()>();

        $i3 = interfaceinvoke r4.<kodkod.util.ints.IntSet: int size()>();

        if $i2 >= $i3 goto label2;

        interfaceinvoke r4.<kodkod.util.ints.IntSet: boolean removeAll(kodkod.util.ints.IntCollection)>($r5);

        interfaceinvoke $r2.<java.util.ListIterator: void add(java.lang.Object)>($r5);

     label2:
        $z1 = interfaceinvoke $r2.<java.util.ListIterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return;
    }

    private static final kodkod.util.ints.IntSet oneOf(int, int)
    {
        int i0, i1;
        kodkod.util.ints.IntSet $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet bestSet(int)>(i0);

        interfaceinvoke $r0.<kodkod.util.ints.IntSet: boolean add(int)>(i1);

        return $r0;
    }
}
