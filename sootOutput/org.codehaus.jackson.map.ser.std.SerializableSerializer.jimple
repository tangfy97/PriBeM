public class org.codehaus.jackson.map.ser.std.SerializableSerializer extends org.codehaus.jackson.map.ser.SerializerBase
{
    public static final org.codehaus.jackson.map.ser.std.SerializableSerializer instance;

    protected void <init>()
    {
        org.codehaus.jackson.map.ser.std.SerializableSerializer r0;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializableSerializer;

        specialinvoke r0.<org.codehaus.jackson.map.ser.SerializerBase: void <init>(java.lang.Class)>(class "Lorg/codehaus/jackson/map/JsonSerializable;");

        return;
    }

    public void serialize(org.codehaus.jackson.map.JsonSerializable, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.std.SerializableSerializer r3;
        org.codehaus.jackson.JsonGenerator r1;
        org.codehaus.jackson.map.SerializerProvider r2;
        org.codehaus.jackson.map.JsonSerializable r0;

        r3 := @this: org.codehaus.jackson.map.ser.std.SerializableSerializer;

        r0 := @parameter0: org.codehaus.jackson.map.JsonSerializable;

        r1 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r2 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        interfaceinvoke r0.<org.codehaus.jackson.map.JsonSerializable: void serialize(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r1, r2);

        return;
    }

    public final void serializeWithType(org.codehaus.jackson.map.JsonSerializable, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.std.SerializableSerializer r1;
        org.codehaus.jackson.map.JsonSerializableWithType $r5;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.TypeSerializer r4;
        org.codehaus.jackson.map.SerializerProvider r3;
        org.codehaus.jackson.map.JsonSerializable r0;
        boolean $z0;

        r1 := @this: org.codehaus.jackson.map.ser.std.SerializableSerializer;

        r0 := @parameter0: org.codehaus.jackson.map.JsonSerializable;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $z0 = r0 instanceof org.codehaus.jackson.map.JsonSerializableWithType;

        if $z0 == 0 goto label1;

        $r5 = (org.codehaus.jackson.map.JsonSerializableWithType) r0;

        interfaceinvoke $r5.<org.codehaus.jackson.map.JsonSerializableWithType: void serializeWithType(org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>(r2, r3, r4);

        goto label2;

     label1:
        virtualinvoke r1.<org.codehaus.jackson.map.ser.std.SerializableSerializer: void serialize(org.codehaus.jackson.map.JsonSerializable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>(r0, r2, r3);

     label2:
        return;
    }

    public org.codehaus.jackson.JsonNode getSchema(org.codehaus.jackson.map.SerializerProvider, java.lang.reflect.Type) throws org.codehaus.jackson.map.JsonMappingException
    {
        java.lang.IllegalStateException $r18, $r20;
        org.codehaus.jackson.map.SerializerProvider r21;
        org.codehaus.jackson.JsonNode $r5, $r8;
        org.codehaus.jackson.type.JavaType $r9;
        java.lang.String $r13, $r14, $r15, $r16, r22, r23, r24;
        org.codehaus.jackson.node.ObjectNode $r1;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.map.ser.std.SerializableSerializer r0;
        java.io.IOException $r17, $r19;
        java.lang.reflect.Type r2;
        java.lang.'annotation'.Annotation $r11;
        java.lang.Object $r4, $r7;
        java.lang.Class $r10;
        org.codehaus.jackson.schema.JsonSerializableSchema r12;
        org.codehaus.jackson.map.ObjectMapper $r3, $r6;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializableSerializer;

        r21 := @parameter0: org.codehaus.jackson.map.SerializerProvider;

        r2 := @parameter1: java.lang.reflect.Type;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.ser.std.SerializableSerializer: org.codehaus.jackson.node.ObjectNode createObjectNode()>();

        r22 = "any";

        r23 = null;

        r24 = null;

        if r2 == null goto label02;

        $r9 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType type(java.lang.reflect.Type)>(r2);

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $z0 = virtualinvoke $r10.<java.lang.Class: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/codehaus/jackson/schema/JsonSerializableSchema;");

        if $z0 == 0 goto label02;

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/codehaus/jackson/schema/JsonSerializableSchema;");

        r12 = (org.codehaus.jackson.schema.JsonSerializableSchema) $r11;

        r22 = interfaceinvoke r12.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaType()>();

        $r13 = "##irrelevant";

        $r14 = interfaceinvoke r12.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaObjectPropertiesDefinition()>();

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z1 != 0 goto label01;

        r23 = interfaceinvoke r12.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaObjectPropertiesDefinition()>();

     label01:
        $r15 = "##irrelevant";

        $r16 = interfaceinvoke r12.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaItemDefinition()>();

        $z2 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z2 != 0 goto label02;

        r24 = interfaceinvoke r12.<org.codehaus.jackson.schema.JsonSerializableSchema: java.lang.String schemaItemDefinition()>();

     label02:
        virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: void put(java.lang.String,java.lang.String)>("type", r22);

        if r23 == null goto label06;

     label03:
        $r6 = new org.codehaus.jackson.map.ObjectMapper;

        specialinvoke $r6.<org.codehaus.jackson.map.ObjectMapper: void <init>()>();

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>(r23, class "Lorg/codehaus/jackson/JsonNode;");

        $r8 = (org.codehaus.jackson.JsonNode) $r7;

        virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("properties", $r8);

     label04:
        goto label06;

     label05:
        $r19 := @caughtexception;

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r19);

        throw $r20;

     label06:
        if r24 == null goto label10;

     label07:
        $r3 = new org.codehaus.jackson.map.ObjectMapper;

        specialinvoke $r3.<org.codehaus.jackson.map.ObjectMapper: void <init>()>();

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.map.ObjectMapper: java.lang.Object readValue(java.lang.String,java.lang.Class)>(r24, class "Lorg/codehaus/jackson/JsonNode;");

        $r5 = (org.codehaus.jackson.JsonNode) $r4;

        virtualinvoke $r1.<org.codehaus.jackson.node.ObjectNode: org.codehaus.jackson.JsonNode put(java.lang.String,org.codehaus.jackson.JsonNode)>("items", $r5);

     label08:
        goto label10;

     label09:
        $r17 := @caughtexception;

        $r18 = new java.lang.IllegalStateException;

        specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

     label10:
        return $r1;

        catch java.io.IOException from label03 to label04 with label05;
        catch java.io.IOException from label07 to label08 with label09;
    }

    public volatile void serialize(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider) throws java.io.IOException, org.codehaus.jackson.JsonGenerationException
    {
        org.codehaus.jackson.map.ser.std.SerializableSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r1;
        org.codehaus.jackson.map.JsonSerializable $r4;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializableSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        $r4 = (org.codehaus.jackson.map.JsonSerializable) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.SerializableSerializer: void serialize(org.codehaus.jackson.map.JsonSerializable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)>($r4, r2, r3);

        return;
    }

    public volatile void serializeWithType(java.lang.Object, org.codehaus.jackson.JsonGenerator, org.codehaus.jackson.map.SerializerProvider, org.codehaus.jackson.map.TypeSerializer) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        org.codehaus.jackson.map.ser.std.SerializableSerializer r0;
        org.codehaus.jackson.JsonGenerator r2;
        org.codehaus.jackson.map.TypeSerializer r4;
        org.codehaus.jackson.map.SerializerProvider r3;
        java.lang.Object r1;
        org.codehaus.jackson.map.JsonSerializable $r5;

        r0 := @this: org.codehaus.jackson.map.ser.std.SerializableSerializer;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.codehaus.jackson.JsonGenerator;

        r3 := @parameter2: org.codehaus.jackson.map.SerializerProvider;

        r4 := @parameter3: org.codehaus.jackson.map.TypeSerializer;

        $r5 = (org.codehaus.jackson.map.JsonSerializable) r1;

        virtualinvoke r0.<org.codehaus.jackson.map.ser.std.SerializableSerializer: void serializeWithType(org.codehaus.jackson.map.JsonSerializable,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider,org.codehaus.jackson.map.TypeSerializer)>($r5, r2, r3, r4);

        return;
    }

    static void <clinit>()
    {
        org.codehaus.jackson.map.ser.std.SerializableSerializer $r0;

        $r0 = new org.codehaus.jackson.map.ser.std.SerializableSerializer;

        specialinvoke $r0.<org.codehaus.jackson.map.ser.std.SerializableSerializer: void <init>()>();

        <org.codehaus.jackson.map.ser.std.SerializableSerializer: org.codehaus.jackson.map.ser.std.SerializableSerializer instance> = $r0;

        return;
    }
}
