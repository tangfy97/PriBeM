public class org.apache.tika.parser.pkg.ZipContainerDetector extends java.lang.Object implements org.apache.tika.detect.Detector
{
    private static final java.util.regex.Pattern MACRO_TEMPLATE_PATTERN;
    private static final long serialVersionUID;
    private static java.util.HashSet ipaEntryPatterns;

    public void <init>()
    {
        org.apache.tika.parser.pkg.ZipContainerDetector r0;

        r0 := @this: org.apache.tika.parser.pkg.ZipContainerDetector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.tika.mime.MediaType detect(java.io.InputStream, org.apache.tika.metadata.Metadata) throws java.io.IOException
    {
        java.lang.Throwable $r10;
        byte[] r3;
        org.apache.tika.mime.MediaType $r4, $r5, $r6, $r7, $r8;
        org.apache.tika.metadata.Metadata r15;
        org.apache.tika.exception.TikaException $r9, $r11, $r12, $r13;
        int $i0;
        org.apache.tika.io.TikaInputStream $r2;
        boolean $z0, $z1, $z2;
        org.apache.tika.io.TemporaryResources $r1;
        org.apache.tika.parser.pkg.ZipContainerDetector r14;
        java.io.InputStream r0;

        r14 := @this: org.apache.tika.parser.pkg.ZipContainerDetector;

        r0 := @parameter0: java.io.InputStream;

        r15 := @parameter1: org.apache.tika.metadata.Metadata;

        if r0 != null goto label01;

        $r8 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType OCTET_STREAM>;

        return $r8;

     label01:
        $r1 = new org.apache.tika.io.TemporaryResources;

        specialinvoke $r1.<org.apache.tika.io.TemporaryResources: void <init>()>();

     label02:
        $r2 = staticinvoke <org.apache.tika.io.TikaInputStream: org.apache.tika.io.TikaInputStream get(java.io.InputStream,org.apache.tika.io.TemporaryResources)>(r0, $r1);

        r3 = newarray (byte)[1024];

        $i0 = virtualinvoke $r2.<org.apache.tika.io.TikaInputStream: int peek(byte[])>(r3);

        $r4 = staticinvoke <org.apache.tika.parser.pkg.ZipContainerDetector: org.apache.tika.mime.MediaType detectArchiveFormat(byte[],int)>(r3, $i0);

        $z0 = staticinvoke <org.apache.tika.parser.pkg.PackageParser: boolean isZipArchive(org.apache.tika.mime.MediaType)>($r4);

        if $z0 == 0 goto label07;

        $z2 = staticinvoke <org.apache.tika.io.TikaInputStream: boolean isTikaInputStream(java.io.InputStream)>(r0);

        if $z2 == 0 goto label07;

        $r7 = staticinvoke <org.apache.tika.parser.pkg.ZipContainerDetector: org.apache.tika.mime.MediaType detectZipFormat(org.apache.tika.io.TikaInputStream)>($r2);

     label03:
        virtualinvoke $r1.<org.apache.tika.io.TemporaryResources: void dispose()>();

     label04:
        goto label06;

     label05:
        $r13 := @caughtexception;

     label06:
        return $r7;

     label07:
        $r5 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType OCTET_STREAM>;

        $z1 = virtualinvoke $r4.<org.apache.tika.mime.MediaType: boolean equals(java.lang.Object)>($r5);

        if $z1 != 0 goto label12;

     label08:
        virtualinvoke $r1.<org.apache.tika.io.TemporaryResources: void dispose()>();

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

     label11:
        return $r4;

     label12:
        $r6 = staticinvoke <org.apache.tika.parser.pkg.ZipContainerDetector: org.apache.tika.mime.MediaType detectCompressorFormat(byte[],int)>(r3, $i0);

     label13:
        virtualinvoke $r1.<org.apache.tika.io.TemporaryResources: void dispose()>();

     label14:
        goto label16;

     label15:
        $r11 := @caughtexception;

     label16:
        return $r6;

     label17:
        $r10 := @caughtexception;

     label18:
        virtualinvoke $r1.<org.apache.tika.io.TemporaryResources: void dispose()>();

     label19:
        goto label21;

     label20:
        $r9 := @caughtexception;

     label21:
        throw $r10;

        catch org.apache.tika.exception.TikaException from label03 to label04 with label05;
        catch org.apache.tika.exception.TikaException from label08 to label09 with label10;
        catch org.apache.tika.exception.TikaException from label13 to label14 with label15;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch org.apache.tika.exception.TikaException from label18 to label19 with label20;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    private static org.apache.tika.mime.MediaType detectCompressorFormat(byte[], int)
    {
        java.lang.Throwable $r7;
        byte[] r2;
        org.apache.commons.compress.compressors.CompressorException $r5;
        org.apache.commons.compress.compressors.CompressorInputStream $r3;
        org.apache.commons.compress.compressors.CompressorStreamFactory $r0;
        org.apache.tika.mime.MediaType $r4, $r6;
        java.io.ByteArrayInputStream $r1;
        int i0;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

     label1:
        $r0 = new org.apache.commons.compress.compressors.CompressorStreamFactory;

        specialinvoke $r0.<org.apache.commons.compress.compressors.CompressorStreamFactory: void <init>()>();

        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r2, 0, i0);

        $r3 = virtualinvoke $r0.<org.apache.commons.compress.compressors.CompressorStreamFactory: org.apache.commons.compress.compressors.CompressorInputStream createCompressorInputStream(java.io.InputStream)>($r1);

     label2:
        $r4 = staticinvoke <org.apache.tika.parser.pkg.CompressorParser: org.apache.tika.mime.MediaType getMediaType(org.apache.commons.compress.compressors.CompressorInputStream)>($r3);

     label3:
        staticinvoke <org.apache.tika.io.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

     label4:
        return $r4;

     label5:
        $r7 := @caughtexception;

     label6:
        staticinvoke <org.apache.tika.io.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

        throw $r7;

     label7:
        $r5 := @caughtexception;

        $r6 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType OCTET_STREAM>;

        return $r6;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
        catch org.apache.commons.compress.compressors.CompressorException from label1 to label4 with label7;
        catch org.apache.commons.compress.compressors.CompressorException from label5 to label7 with label7;
    }

    private static org.apache.tika.mime.MediaType detectArchiveFormat(byte[], int)
    {
        java.lang.Throwable $r7;
        byte[] r2;
        org.apache.commons.compress.archivers.ArchiveException $r5;
        org.apache.tika.mime.MediaType $r4, $r6, r8;
        java.io.ByteArrayInputStream $r1;
        int i0;
        org.apache.commons.compress.archivers.ArchiveInputStream $r3;
        org.apache.commons.compress.archivers.ArchiveStreamFactory $r0;
        boolean $z0, $z1;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

     label01:
        $r0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory;

        specialinvoke $r0.<org.apache.commons.compress.archivers.ArchiveStreamFactory: void <init>()>();

        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>(r2, 0, i0);

        $r3 = virtualinvoke $r0.<org.apache.commons.compress.archivers.ArchiveStreamFactory: org.apache.commons.compress.archivers.ArchiveInputStream createArchiveInputStream(java.io.InputStream)>($r1);

     label02:
        $z0 = $r3 instanceof org.apache.commons.compress.archivers.tar.TarArchiveInputStream;

        if $z0 == 0 goto label05;

        $z1 = staticinvoke <org.apache.commons.compress.archivers.tar.TarArchiveInputStream: boolean matches(byte[],int)>(r2, i0);

        if $z1 != 0 goto label05;

        r8 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType OCTET_STREAM>;

     label03:
        staticinvoke <org.apache.tika.io.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

     label04:
        return r8;

     label05:
        $r4 = staticinvoke <org.apache.tika.parser.pkg.PackageParser: org.apache.tika.mime.MediaType getMediaType(org.apache.commons.compress.archivers.ArchiveInputStream)>($r3);

     label06:
        staticinvoke <org.apache.tika.io.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

     label07:
        return $r4;

     label08:
        $r7 := @caughtexception;

     label09:
        staticinvoke <org.apache.tika.io.IOUtils: void closeQuietly(java.io.InputStream)>($r3);

        throw $r7;

     label10:
        $r5 := @caughtexception;

        $r6 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType OCTET_STREAM>;

        return $r6;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
        catch org.apache.commons.compress.archivers.ArchiveException from label01 to label04 with label10;
        catch org.apache.commons.compress.archivers.ArchiveException from label05 to label07 with label10;
        catch org.apache.commons.compress.archivers.ArchiveException from label08 to label10 with label10;
    }

    private static org.apache.tika.mime.MediaType detectZipFormat(org.apache.tika.io.TikaInputStream)
    {
        java.lang.Throwable $r8;
        java.io.IOException $r6, $r7, $r9, $r10;
        org.apache.commons.compress.archivers.zip.ZipFile $r0;
        org.apache.tika.mime.MediaType $r3, $r4, r5, r11;
        java.io.File $r2;
        org.apache.tika.io.TikaInputStream r1;

        r1 := @parameter0: org.apache.tika.io.TikaInputStream;

     label01:
        $r0 = new org.apache.commons.compress.archivers.zip.ZipFile;

        $r2 = virtualinvoke r1.<org.apache.tika.io.TikaInputStream: java.io.File getFile()>();

        specialinvoke $r0.<org.apache.commons.compress.archivers.zip.ZipFile: void <init>(java.io.File)>($r2);

     label02:
        $r3 = staticinvoke <org.apache.tika.parser.pkg.ZipContainerDetector: org.apache.tika.mime.MediaType detectOpenDocument(org.apache.commons.compress.archivers.zip.ZipFile)>($r0);

        r11 = $r3;

        if $r3 != null goto label03;

        r11 = staticinvoke <org.apache.tika.parser.pkg.ZipContainerDetector: org.apache.tika.mime.MediaType detectOPCBased(org.apache.commons.compress.archivers.zip.ZipFile,org.apache.tika.io.TikaInputStream)>($r0, r1);

     label03:
        if r11 != null goto label04;

        r11 = staticinvoke <org.apache.tika.parser.pkg.ZipContainerDetector: org.apache.tika.mime.MediaType detectIWork(org.apache.commons.compress.archivers.zip.ZipFile)>($r0);

     label04:
        if r11 != null goto label05;

        r11 = staticinvoke <org.apache.tika.parser.pkg.ZipContainerDetector: org.apache.tika.mime.MediaType detectJar(org.apache.commons.compress.archivers.zip.ZipFile)>($r0);

     label05:
        if r11 != null goto label06;

        r11 = staticinvoke <org.apache.tika.parser.pkg.ZipContainerDetector: org.apache.tika.mime.MediaType detectKmz(org.apache.commons.compress.archivers.zip.ZipFile)>($r0);

     label06:
        if r11 != null goto label07;

        r11 = staticinvoke <org.apache.tika.parser.pkg.ZipContainerDetector: org.apache.tika.mime.MediaType detectIpa(org.apache.commons.compress.archivers.zip.ZipFile)>($r0);

     label07:
        if r11 == null goto label12;

        r5 = r11;

     label08:
        virtualinvoke $r0.<org.apache.commons.compress.archivers.zip.ZipFile: void close()>();

     label09:
        goto label11;

     label10:
        $r10 := @caughtexception;

     label11:
        return r5;

     label12:
        virtualinvoke $r0.<org.apache.commons.compress.archivers.zip.ZipFile: void close()>();

     label13:
        goto label20;

     label14:
        $r9 := @caughtexception;

        goto label20;

     label15:
        $r8 := @caughtexception;

     label16:
        virtualinvoke $r0.<org.apache.commons.compress.archivers.zip.ZipFile: void close()>();

     label17:
        goto label19;

     label18:
        $r7 := @caughtexception;

     label19:
        throw $r8;

     label20:
        goto label22;

     label21:
        $r6 := @caughtexception;

     label22:
        $r4 = <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType APPLICATION_ZIP>;

        return $r4;

        catch java.io.IOException from label08 to label09 with label10;
        catch java.io.IOException from label12 to label13 with label14;
        catch java.lang.Throwable from label02 to label08 with label15;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Throwable from label15 to label16 with label15;
        catch java.io.IOException from label01 to label11 with label21;
        catch java.io.IOException from label12 to label20 with label21;
    }

    private static org.apache.tika.mime.MediaType detectOpenDocument(org.apache.commons.compress.archivers.zip.ZipFile)
    {
        java.lang.Throwable $r6;
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r1;
        java.io.IOException $r5;
        java.lang.String $r3;
        org.apache.commons.compress.archivers.zip.ZipFile r0;
        org.apache.tika.mime.MediaType $r4;
        java.io.InputStream $r2;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipFile;

     label1:
        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipFile: org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String)>("mimetype");

        if $r1 == null goto label7;

        $r2 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipFile: java.io.InputStream getInputStream(org.apache.commons.compress.archivers.zip.ZipArchiveEntry)>($r1);

     label2:
        $r3 = staticinvoke <org.apache.tika.io.IOUtils: java.lang.String toString(java.io.InputStream,java.lang.String)>($r2, "UTF-8");

        $r4 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType parse(java.lang.String)>($r3);

     label3:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label4:
        return $r4;

     label5:
        $r6 := @caughtexception;

     label6:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

        throw $r6;

     label7:
        return null;

     label8:
        $r5 := @caughtexception;

        return null;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
        catch java.io.IOException from label1 to label4 with label8;
        catch java.io.IOException from label5 to label7 with label8;
    }

    private static org.apache.tika.mime.MediaType detectOPCBased(org.apache.commons.compress.archivers.zip.ZipFile, org.apache.tika.io.TikaInputStream)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r1, $r10;
        org.apache.poi.openxml4j.exceptions.InvalidFormatException $r11;
        java.io.IOException $r13;
        org.apache.poi.openxml4j.opc.PackageAccess $r5;
        java.lang.RuntimeException $r12;
        org.apache.commons.compress.archivers.zip.ZipFile r0;
        org.apache.tika.mime.MediaType $r7, $r8, $r9;
        java.io.File $r3;
        org.apache.poi.openxml4j.opc.OPCPackage $r6;
        org.apache.tika.io.TikaInputStream r2;
        java.lang.String $r4;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipFile;

        r2 := @parameter1: org.apache.tika.io.TikaInputStream;

     label01:
        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipFile: org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String)>("_rels/.rels");

        if $r1 != null goto label02;

        $r10 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipFile: org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String)>("[Content_Types].xml");

        if $r10 == null goto label09;

     label02:
        $r3 = virtualinvoke r2.<org.apache.tika.io.TikaInputStream: java.io.File getFile()>();

        $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getPath()>();

        $r5 = <org.apache.poi.openxml4j.opc.PackageAccess: org.apache.poi.openxml4j.opc.PackageAccess READ>;

        $r6 = staticinvoke <org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.OPCPackage open(java.lang.String,org.apache.poi.openxml4j.opc.PackageAccess)>($r4, $r5);

        virtualinvoke r2.<org.apache.tika.io.TikaInputStream: void setOpenContainer(java.lang.Object)>($r6);

        $r7 = staticinvoke <org.apache.tika.parser.pkg.ZipContainerDetector: org.apache.tika.mime.MediaType detectOfficeOpenXML(org.apache.poi.openxml4j.opc.OPCPackage)>($r6);

        if $r7 == null goto label04;

     label03:
        return $r7;

     label04:
        $r8 = staticinvoke <org.apache.tika.parser.pkg.ZipContainerDetector: org.apache.tika.mime.MediaType detectXPSOPC(org.apache.poi.openxml4j.opc.OPCPackage)>($r6);

        if $r8 == null goto label06;

     label05:
        return $r8;

     label06:
        $r9 = staticinvoke <org.apache.tika.parser.pkg.ZipContainerDetector: org.apache.tika.mime.MediaType detectAutoCADOPC(org.apache.poi.openxml4j.opc.OPCPackage)>($r6);

        if $r9 == null goto label08;

     label07:
        return $r9;

     label08:
        return null;

     label09:
        return null;

     label10:
        $r13 := @caughtexception;

        return null;

     label11:
        $r12 := @caughtexception;

        return null;

     label12:
        $r11 := @caughtexception;

        return null;

        catch java.io.IOException from label01 to label03 with label10;
        catch java.io.IOException from label04 to label05 with label10;
        catch java.io.IOException from label06 to label07 with label10;
        catch java.lang.RuntimeException from label01 to label03 with label11;
        catch java.lang.RuntimeException from label04 to label05 with label11;
        catch java.lang.RuntimeException from label06 to label07 with label11;
        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label01 to label03 with label12;
        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label04 to label05 with label12;
        catch org.apache.poi.openxml4j.exceptions.InvalidFormatException from label06 to label07 with label12;
    }

    public static org.apache.tika.mime.MediaType detectOfficeOpenXML(org.apache.poi.openxml4j.opc.OPCPackage)
    {
        org.apache.tika.mime.MediaType $r10;
        org.apache.poi.openxml4j.opc.PackageRelationship $r2;
        java.util.regex.Matcher $r12;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r1;
        java.util.Locale $r6, $r8, $r14;
        int $i0, $i1;
        org.apache.poi.openxml4j.opc.PackagePart $r3;
        java.lang.String $r4, $r5, $r7, $r9, $r15, r18;
        boolean $z0, $z1;
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        java.lang.StringBuilder $r13, $r16, $r17;
        java.util.regex.Pattern $r11;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.OPCPackage;

        $r1 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationshipsByType(java.lang.String)>("http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument");

        $i0 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int size()>();

        if $i0 == 1 goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: org.apache.poi.openxml4j.opc.PackageRelationship getRelationship(int)>(0);

        $r3 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackagePart getPart(org.apache.poi.openxml4j.opc.PackageRelationship)>($r2);

        $r4 = virtualinvoke $r3.<org.apache.poi.openxml4j.opc.PackagePart: java.lang.String getContentType()>();

        $i1 = virtualinvoke $r4.<java.lang.String: int lastIndexOf(int)>(46);

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        r18 = $r5;

        $r6 = <java.util.Locale: java.util.Locale ROOT>;

        $r7 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r6);

        $z0 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>("macroenabled");

        if $z0 == 0 goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = <java.util.Locale: java.util.Locale ROOT>;

        $r15 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".12");

        r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r8 = <java.util.Locale: java.util.Locale ROOT>;

        $r9 = virtualinvoke r18.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r8);

        $z1 = virtualinvoke $r9.<java.lang.String: boolean endsWith(java.lang.String)>("macroenabledtemplate");

        if $z1 == 0 goto label3;

        $r11 = <org.apache.tika.parser.pkg.ZipContainerDetector: java.util.regex.Pattern MACRO_TEMPLATE_PATTERN>;

        $r12 = virtualinvoke $r11.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r18);

        r18 = virtualinvoke $r12.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("macroenabled.12");

     label3:
        $r10 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType parse(java.lang.String)>(r18);

        return $r10;
    }

    private static org.apache.tika.mime.MediaType detectXPSOPC(org.apache.poi.openxml4j.opc.OPCPackage)
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r1;
        int $i0;
        org.apache.tika.mime.MediaType $r2;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.OPCPackage;

        $r1 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationshipsByType(java.lang.String)>("http://schemas.microsoft.com/xps/2005/06/fixedrepresentation");

        $i0 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int size()>();

        if $i0 != 1 goto label1;

        $r2 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("vnd.ms-xpsdocument");

        return $r2;

     label1:
        return null;
    }

    private static org.apache.tika.mime.MediaType detectAutoCADOPC(org.apache.poi.openxml4j.opc.OPCPackage)
    {
        org.apache.poi.openxml4j.opc.OPCPackage r0;
        org.apache.poi.openxml4j.opc.PackageRelationshipCollection $r1;
        int $i0;
        org.apache.tika.mime.MediaType $r2;

        r0 := @parameter0: org.apache.poi.openxml4j.opc.OPCPackage;

        $r1 = virtualinvoke r0.<org.apache.poi.openxml4j.opc.OPCPackage: org.apache.poi.openxml4j.opc.PackageRelationshipCollection getRelationshipsByType(java.lang.String)>("http://schemas.autodesk.com/dwfx/2007/relationships/documentsequence");

        $i0 = virtualinvoke $r1.<org.apache.poi.openxml4j.opc.PackageRelationshipCollection: int size()>();

        if $i0 != 1 goto label1;

        $r2 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType parse(java.lang.String)>("model/vnd.dwfx+xps");

        return $r2;

     label1:
        return null;
    }

    private static org.apache.tika.mime.MediaType detectIWork(org.apache.commons.compress.archivers.zip.ZipFile)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r1, $r7;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.commons.compress.archivers.zip.ZipFile r0;
        org.apache.tika.mime.MediaType $r4, $r9;
        org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType $r8;
        java.lang.Object $r5;
        java.lang.String r6;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipFile;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipFile: org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String)>("buildVersionHistory.plist");

        if $r1 == null goto label4;

        $r2 = <org.apache.tika.parser.iwork.IWorkPackageParser: java.util.Set IWORK_CONTENT_ENTRIES>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipFile: org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String)>(r6);

        $r8 = staticinvoke <org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType detectType(org.apache.commons.compress.archivers.zip.ZipArchiveEntry,org.apache.commons.compress.archivers.zip.ZipFile)>($r7, r0);

        if $r8 == null goto label2;

        $r9 = virtualinvoke $r8.<org.apache.tika.parser.iwork.IWorkPackageParser$IWORKDocumentType: org.apache.tika.mime.MediaType getType()>();

        return $r9;

     label2:
        goto label1;

     label3:
        $r4 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("vnd.apple.iwork");

        return $r4;

     label4:
        return null;
    }

    private static org.apache.tika.mime.MediaType detectJar(org.apache.commons.compress.archivers.zip.ZipFile)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry $r1, $r2, $r4, $r5, $r6;
        org.apache.commons.compress.archivers.zip.ZipFile r0;
        org.apache.tika.mime.MediaType $r3, $r7, $r8, $r9, $r10;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipFile;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipFile: org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String)>("META-INF/MANIFEST.MF");

        if $r1 == null goto label4;

        $r4 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipFile: org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String)>("AndroidManifest.xml");

        if $r4 == null goto label1;

        $r10 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("vnd.android.package-archive");

        return $r10;

     label1:
        $r5 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipFile: org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String)>("WEB-INF/");

        if $r5 == null goto label2;

        $r9 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("x-tika-java-web-archive");

        return $r9;

     label2:
        $r6 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipFile: org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String)>("META-INF/application.xml");

        if $r6 == null goto label3;

        $r8 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("x-tika-java-enterprise-archive");

        return $r8;

     label3:
        $r7 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("java-archive");

        return $r7;

     label4:
        $r2 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipFile: org.apache.commons.compress.archivers.zip.ZipArchiveEntry getEntry(java.lang.String)>("AndroidManifest.xml");

        if $r2 == null goto label5;

        $r3 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("vnd.android.package-archive");

        return $r3;

     label5:
        return null;
    }

    private static org.apache.tika.mime.MediaType detectKmz(org.apache.commons.compress.archivers.zip.ZipFile)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r4;
        java.util.Enumeration $r1;
        org.apache.tika.mime.MediaType $r2;
        int $i0, $i1, $i3, $i5;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, z3, z4, z5;
        org.apache.commons.compress.archivers.zip.ZipFile r0;
        java.lang.Object $r3;

        r0 := @parameter0: org.apache.commons.compress.archivers.zip.ZipFile;

        z3 = 0;

        z5 = 0;

        z4 = 0;

        $r1 = virtualinvoke r0.<org.apache.commons.compress.archivers.zip.ZipFile: java.util.Enumeration getEntries()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) $r3;

        $r5 = virtualinvoke r4.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: java.lang.String getName()>();

        $z1 = virtualinvoke r4.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: boolean isDirectory()>();

        if $z1 != 0 goto label3;

        $i0 = virtualinvoke $r5.<java.lang.String: int indexOf(int)>(47);

        $i3 = (int) -1;

        if $i0 != $i3 goto label3;

        $i1 = virtualinvoke $r5.<java.lang.String: int indexOf(int)>(92);

        $i5 = (int) -1;

        if $i1 != $i5 goto label3;

        $z2 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>(".kml");

        if $z2 == 0 goto label2;

        if z5 != 0 goto label2;

        z3 = 1;

        z5 = 1;

        z4 = 1;

        goto label3;

     label2:
        return null;

     label3:
        goto label1;

     label4:
        if z4 == 0 goto label5;

        $r2 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("vnd.google-earth.kmz");

        return $r2;

     label5:
        return null;
    }

    private static org.apache.tika.mime.MediaType detectIpa(org.apache.commons.compress.archivers.zip.ZipFile)
    {
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry r6;
        java.util.Enumeration $r4;
        org.apache.tika.mime.MediaType $r9;
        java.util.HashSet $r0;
        java.util.regex.Matcher $r12;
        java.lang.String $r7;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r8;
        java.util.Set r2;
        org.apache.commons.compress.archivers.zip.ZipFile r3;
        java.lang.Object $r1, $r5, $r10;
        java.util.regex.Pattern $r11;

        r3 := @parameter0: org.apache.commons.compress.archivers.zip.ZipFile;

        $r0 = <org.apache.tika.parser.pkg.ZipContainerDetector: java.util.HashSet ipaEntryPatterns>;

        $r1 = virtualinvoke $r0.<java.util.HashSet: java.lang.Object clone()>();

        r2 = (java.util.Set) $r1;

        $r4 = virtualinvoke r3.<org.apache.commons.compress.archivers.zip.ZipFile: java.util.Enumeration getEntries()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r6 = (org.apache.commons.compress.archivers.zip.ZipArchiveEntry) $r5;

        $r7 = virtualinvoke r6.<org.apache.commons.compress.archivers.zip.ZipArchiveEntry: java.lang.String getName()>();

        $r8 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r10 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (java.util.regex.Pattern) $r10;

        $r12 = virtualinvoke $r11.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r7);

        $z2 = virtualinvoke $r12.<java.util.regex.Matcher: boolean matches()>();

        if $z2 == 0 goto label2;

        interfaceinvoke $r8.<java.util.Iterator: void remove()>();

        goto label2;

     label3:
        $z1 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        $r9 = staticinvoke <org.apache.tika.mime.MediaType: org.apache.tika.mime.MediaType application(java.lang.String)>("x-itunes-ipa");

        return $r9;

     label4:
        goto label1;

     label5:
        return null;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;
        org.apache.tika.parser.pkg.ZipContainerDetector$1 $r1;

        <org.apache.tika.parser.pkg.ZipContainerDetector: long serialVersionUID> = 2891763938430295453L;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("macroenabledtemplate$", 2);

        <org.apache.tika.parser.pkg.ZipContainerDetector: java.util.regex.Pattern MACRO_TEMPLATE_PATTERN> = $r0;

        $r1 = new org.apache.tika.parser.pkg.ZipContainerDetector$1;

        specialinvoke $r1.<org.apache.tika.parser.pkg.ZipContainerDetector$1: void <init>()>();

        <org.apache.tika.parser.pkg.ZipContainerDetector: java.util.HashSet ipaEntryPatterns> = $r1;

        return;
    }
}
