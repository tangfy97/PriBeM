public class com.hp.hpl.jena.sparql.util.TripleComparator extends java.lang.Object implements java.util.Comparator
{
    private static final com.hp.hpl.jena.sparql.util.NodeComparator nc;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.util.TripleComparator r0;

        r0 := @this: com.hp.hpl.jena.sparql.util.TripleComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.sparql.util.TripleComparator r11;
        com.hp.hpl.jena.graph.Node $r2, $r4, $r6, $r7, $r9, $r10;
        com.hp.hpl.jena.graph.Triple r0, r3;
        int $i0, $i1, i2;
        com.hp.hpl.jena.sparql.util.NodeComparator $r1, $r5, $r8;

        r11 := @this: com.hp.hpl.jena.sparql.util.TripleComparator;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        r3 := @parameter1: com.hp.hpl.jena.graph.Triple;

        $r1 = <com.hp.hpl.jena.sparql.util.TripleComparator: com.hp.hpl.jena.sparql.util.NodeComparator nc>;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.NodeComparator: int compare(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r2, $r4);

        i2 = $i0;

        if $i0 != 0 goto label1;

        $r5 = <com.hp.hpl.jena.sparql.util.TripleComparator: com.hp.hpl.jena.sparql.util.NodeComparator nc>;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r7 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $i1 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.util.NodeComparator: int compare(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r6, $r7);

        i2 = $i1;

        if $i1 != 0 goto label1;

        $r8 = <com.hp.hpl.jena.sparql.util.TripleComparator: com.hp.hpl.jena.sparql.util.NodeComparator nc>;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $r10 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        i2 = virtualinvoke $r8.<com.hp.hpl.jena.sparql.util.NodeComparator: int compare(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r9, $r10);

     label1:
        return i2;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        com.hp.hpl.jena.sparql.util.TripleComparator r0;
        int $i0;
        java.lang.Object r1, r2;
        com.hp.hpl.jena.graph.Triple $r3, $r4;

        r0 := @this: com.hp.hpl.jena.sparql.util.TripleComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.hp.hpl.jena.graph.Triple) r1;

        $r3 = (com.hp.hpl.jena.graph.Triple) r2;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.util.TripleComparator: int compare(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.graph.Triple)>($r4, $r3);

        return $i0;
    }

    static void <clinit>()
    {
        com.hp.hpl.jena.sparql.util.NodeComparator $r0;

        $r0 = new com.hp.hpl.jena.sparql.util.NodeComparator;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.util.NodeComparator: void <init>()>();

        <com.hp.hpl.jena.sparql.util.TripleComparator: com.hp.hpl.jena.sparql.util.NodeComparator nc> = $r0;

        return;
    }
}
