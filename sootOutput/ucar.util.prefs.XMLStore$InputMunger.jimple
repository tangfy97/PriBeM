class ucar.util.prefs.XMLStore$InputMunger extends java.io.BufferedInputStream
{
    private byte[] buf;
    private int count;
    private int pos;
    boolean isHeader;
    int countHeader;
    int sizeHeader;
    boolean isTrailer;
    int countTrailer;
    int sizeTrailer;
    final ucar.util.prefs.XMLStore this$0;

    void <init>(ucar.util.prefs.XMLStore, java.io.InputStream) throws java.io.IOException
    {
        ucar.util.prefs.XMLStore r1;
        ucar.util.prefs.XMLStore$InputMunger r0;
        java.io.InputStream r2;

        r0 := @this: ucar.util.prefs.XMLStore$InputMunger;

        r1 := @parameter0: ucar.util.prefs.XMLStore;

        r2 := @parameter1: java.io.InputStream;

        specialinvoke r0.<ucar.util.prefs.XMLStore$InputMunger: void <init>(ucar.util.prefs.XMLStore,java.io.InputStream,int)>(r1, r2, 1024);

        return;
    }

    void <init>(ucar.util.prefs.XMLStore, java.io.InputStream, int) throws java.io.IOException
    {
        byte[] $r5;
        ucar.util.prefs.XMLStore$InputMunger r0;
        ucar.util.prefs.XMLStore r1;
        int $i0, $i1, i2, $i3;
        java.lang.String $r3, $r4, $r6;
        java.io.InputStream r2;

        r0 := @this: ucar.util.prefs.XMLStore$InputMunger;

        r1 := @parameter0: ucar.util.prefs.XMLStore;

        r2 := @parameter1: java.io.InputStream;

        i2 := @parameter2: int;

        r0.<ucar.util.prefs.XMLStore$InputMunger: ucar.util.prefs.XMLStore this$0> = r1;

        specialinvoke r0.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r2);

        r0.<ucar.util.prefs.XMLStore$InputMunger: int count> = 0;

        r0.<ucar.util.prefs.XMLStore$InputMunger: int pos> = 0;

        r0.<ucar.util.prefs.XMLStore$InputMunger: boolean isHeader> = 1;

        r0.<ucar.util.prefs.XMLStore$InputMunger: int countHeader> = 0;

        $r3 = "<?xml version=\'1.0\' encoding=\'UTF-8\'?>\n<java version=\'1.4.1_01\' class=\'java.beans.XMLDecoder\'>\n";

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        r0.<ucar.util.prefs.XMLStore$InputMunger: int sizeHeader> = $i0;

        r0.<ucar.util.prefs.XMLStore$InputMunger: boolean isTrailer> = 0;

        r0.<ucar.util.prefs.XMLStore$InputMunger: int countTrailer> = 0;

        $r4 = "</java>\n";

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        r0.<ucar.util.prefs.XMLStore$InputMunger: int sizeTrailer> = $i1;

        $r5 = newarray (byte)[i2];

        r0.<ucar.util.prefs.XMLStore$InputMunger: byte[] buf> = $r5;

        specialinvoke r0.<ucar.util.prefs.XMLStore$InputMunger: int fill(int)>(0);

        $r6 = "<?xml version=\'1.0\' encoding=\'UTF-8\'?>\n";

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        r0.<ucar.util.prefs.XMLStore$InputMunger: int pos> = $i3;

        return;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        ucar.util.prefs.XMLStore$InputMunger r0;
        byte $b3;
        int i0, $i1, i2, $i4, i5, $i6, $i8;

        r0 := @this: ucar.util.prefs.XMLStore$InputMunger;

        r1 := @parameter0: byte[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        i5 = 0;

     label1:
        if i5 >= i0 goto label5;

        $i1 = virtualinvoke r0.<ucar.util.prefs.XMLStore$InputMunger: int read()>();

        if $i1 >= 0 goto label4;

        if i5 <= 0 goto label2;

        $i6 = i5;

        goto label3;

     label2:
        $i8 = (int) -1;

        $i6 = $i8;

     label3:
        return $i6;

     label4:
        $i4 = i2 + i5;

        $b3 = (byte) $i1;

        r1[$i4] = $b3;

        i5 = i5 + 1;

        goto label1;

     label5:
        return i0;
    }

    public int read() throws java.io.IOException
    {
        ucar.util.prefs.XMLStore$InputMunger r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2;
        char $c10;

        r0 := @this: ucar.util.prefs.XMLStore$InputMunger;

        $z0 = r0.<ucar.util.prefs.XMLStore$InputMunger: boolean isHeader>;

        if $z0 == 0 goto label3;

        $i5 = r0.<ucar.util.prefs.XMLStore$InputMunger: int countHeader>;

        $i7 = $i5 + 1;

        $i6 = r0.<ucar.util.prefs.XMLStore$InputMunger: int sizeHeader>;

        if $i7 >= $i6 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        r0.<ucar.util.prefs.XMLStore$InputMunger: boolean isHeader> = $z2;

        $r2 = "<?xml version=\'1.0\' encoding=\'UTF-8\'?>\n<java version=\'1.4.1_01\' class=\'java.beans.XMLDecoder\'>\n";

        $i8 = r0.<ucar.util.prefs.XMLStore$InputMunger: int countHeader>;

        $i9 = $i8 + 1;

        r0.<ucar.util.prefs.XMLStore$InputMunger: int countHeader> = $i9;

        $c10 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i8);

        $i12 = (int) $c10;

        return $i12;

     label3:
        $z1 = r0.<ucar.util.prefs.XMLStore$InputMunger: boolean isTrailer>;

        if $z1 == 0 goto label6;

        $i2 = r0.<ucar.util.prefs.XMLStore$InputMunger: int countTrailer>;

        $i1 = r0.<ucar.util.prefs.XMLStore$InputMunger: int sizeTrailer>;

        if $i2 >= $i1 goto label4;

        $r1 = "</java>\n";

        $i3 = r0.<ucar.util.prefs.XMLStore$InputMunger: int countTrailer>;

        $i4 = $i3 + 1;

        r0.<ucar.util.prefs.XMLStore$InputMunger: int countTrailer> = $i4;

        $i11 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i3);

        goto label5;

     label4:
        $i11 = -1;

     label5:
        return $i11;

     label6:
        $i0 = specialinvoke r0.<ucar.util.prefs.XMLStore$InputMunger: int read1()>();

        return $i0;
    }

    private int read1() throws java.io.IOException
    {
        byte[] $r1;
        ucar.util.prefs.XMLStore$InputMunger r0;
        short $s5, $s9;
        byte $b4;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i8, $i10;

        r0 := @this: ucar.util.prefs.XMLStore$InputMunger;

        $i1 = r0.<ucar.util.prefs.XMLStore$InputMunger: int pos>;

        $i0 = r0.<ucar.util.prefs.XMLStore$InputMunger: int count>;

        if $i1 < $i0 goto label1;

        specialinvoke r0.<ucar.util.prefs.XMLStore$InputMunger: int fill(int)>(0);

        $i7 = r0.<ucar.util.prefs.XMLStore$InputMunger: int pos>;

        $i6 = r0.<ucar.util.prefs.XMLStore$InputMunger: int count>;

        if $i7 < $i6 goto label1;

        r0.<ucar.util.prefs.XMLStore$InputMunger: boolean isTrailer> = 1;

        $i8 = virtualinvoke r0.<ucar.util.prefs.XMLStore$InputMunger: int read()>();

        return $i8;

     label1:
        $r1 = r0.<ucar.util.prefs.XMLStore$InputMunger: byte[] buf>;

        $i2 = r0.<ucar.util.prefs.XMLStore$InputMunger: int pos>;

        $i3 = $i2 + 1;

        r0.<ucar.util.prefs.XMLStore$InputMunger: int pos> = $i3;

        $b4 = $r1[$i2];

        $s9 = (short) $b4;

        $s5 = $s9 & 255;

        $i10 = (int) $s5;

        return $i10;
    }

    private int fill(int) throws java.io.IOException
    {
        byte[] $r1, $r2, $r4, $r5;
        ucar.util.prefs.XMLStore$InputMunger r0;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.io.InputStream $r3;

        r0 := @this: ucar.util.prefs.XMLStore$InputMunger;

        i0 := @parameter0: int;

        $i1 = r0.<ucar.util.prefs.XMLStore$InputMunger: int count>;

        i2 = $i1 - i0;

        if i0 <= 0 goto label1;

        $r5 = r0.<ucar.util.prefs.XMLStore$InputMunger: byte[] buf>;

        $r4 = r0.<ucar.util.prefs.XMLStore$InputMunger: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, i2, $r4, 0, i0);

     label1:
        r0.<ucar.util.prefs.XMLStore$InputMunger: int pos> = 0;

        r0.<ucar.util.prefs.XMLStore$InputMunger: int count> = i0;

        $r3 = r0.<ucar.util.prefs.XMLStore$InputMunger: java.io.InputStream in>;

        $r2 = r0.<ucar.util.prefs.XMLStore$InputMunger: byte[] buf>;

        $r1 = r0.<ucar.util.prefs.XMLStore$InputMunger: byte[] buf>;

        $i3 = lengthof $r1;

        $i4 = $i3 - i0;

        $i5 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r2, i0, $i4);

        if $i5 <= 0 goto label2;

        $i6 = r0.<ucar.util.prefs.XMLStore$InputMunger: int count>;

        $i7 = $i6 + $i5;

        r0.<ucar.util.prefs.XMLStore$InputMunger: int count> = $i7;

     label2:
        return $i5;
    }
}
