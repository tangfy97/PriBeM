public class org.waveprotocol.wave.client.editor.harness.DefaultTestHarness extends java.lang.Object implements com.google.gwt.core.client.EntryPoint
{

    public void <init>()
    {
        org.waveprotocol.wave.client.editor.harness.DefaultTestHarness r0;

        r0 := @this: org.waveprotocol.wave.client.editor.harness.DefaultTestHarness;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onModuleLoad()
    {
        com.google.gwt.user.client.Element $r5;
        org.waveprotocol.wave.client.editor.Editor $r8;
        org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1 $r9;
        org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$2 $r13;
        org.waveprotocol.wave.client.editor.harness.SignalEventHarness $r10;
        com.google.gwt.user.client.ui.RootPanel $r7;
        com.google.gwt.user.client.ui.Widget $r14, $r15, $r16, $r17;
        com.google.gwt.user.client.ui.FlowPanel $r11;
        org.waveprotocol.wave.client.editor.harness.DefaultTestHarness r1;
        com.google.gwt.user.client.ui.ListBox $r12;

        r1 := @this: org.waveprotocol.wave.client.editor.harness.DefaultTestHarness;

        $r9 = new org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1;

        specialinvoke $r9.<org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$1: void <init>(org.waveprotocol.wave.client.editor.harness.DefaultTestHarness)>(r1);

        $r10 = new org.waveprotocol.wave.client.editor.harness.SignalEventHarness;

        specialinvoke $r10.<org.waveprotocol.wave.client.editor.harness.SignalEventHarness: void <init>()>();

        $r11 = new com.google.gwt.user.client.ui.FlowPanel;

        specialinvoke $r11.<com.google.gwt.user.client.ui.FlowPanel: void <init>()>();

        $r12 = new com.google.gwt.user.client.ui.ListBox;

        specialinvoke $r12.<com.google.gwt.user.client.ui.ListBox: void <init>()>();

        virtualinvoke $r12.<com.google.gwt.user.client.ui.ListBox: void addItem(java.lang.String)>("edit");

        virtualinvoke $r12.<com.google.gwt.user.client.ui.ListBox: void addItem(java.lang.String)>("event");

        $r5 = virtualinvoke $r12.<com.google.gwt.user.client.ui.ListBox: com.google.gwt.user.client.Element getElement()>();

        virtualinvoke $r5.<com.google.gwt.user.client.Element: void setId(java.lang.String)>("page-mode-selector");

        $r13 = new org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$2;

        specialinvoke $r13.<org.waveprotocol.wave.client.editor.harness.DefaultTestHarness$2: void <init>(org.waveprotocol.wave.client.editor.harness.DefaultTestHarness,com.google.gwt.user.client.ui.ListBox,org.waveprotocol.wave.client.editor.harness.EditorHarness,org.waveprotocol.wave.client.editor.harness.SignalEventHarness)>(r1, $r12, $r9, $r10);

        virtualinvoke $r12.<com.google.gwt.user.client.ui.ListBox: com.google.gwt.event.shared.HandlerRegistration addChangeHandler(com.google.gwt.event.dom.client.ChangeHandler)>($r13);

        $r14 = (com.google.gwt.user.client.ui.Widget) $r12;

        virtualinvoke $r11.<com.google.gwt.user.client.ui.FlowPanel: void add(com.google.gwt.user.client.ui.Widget)>($r14);

        $r15 = (com.google.gwt.user.client.ui.Widget) $r9;

        virtualinvoke $r11.<com.google.gwt.user.client.ui.FlowPanel: void add(com.google.gwt.user.client.ui.Widget)>($r15);

        $r16 = (com.google.gwt.user.client.ui.Widget) $r10;

        virtualinvoke $r11.<com.google.gwt.user.client.ui.FlowPanel: void add(com.google.gwt.user.client.ui.Widget)>($r16);

        $r7 = staticinvoke <com.google.gwt.user.client.ui.RootPanel: com.google.gwt.user.client.ui.RootPanel get()>();

        $r17 = (com.google.gwt.user.client.ui.Widget) $r11;

        virtualinvoke $r7.<com.google.gwt.user.client.ui.RootPanel: void add(com.google.gwt.user.client.ui.Widget)>($r17);

        $r8 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.harness.EditorHarness: org.waveprotocol.wave.client.editor.Editor getEditor1()>();

        interfaceinvoke $r8.<org.waveprotocol.wave.client.editor.Editor: void focus(boolean)>(1);

        return;
    }
}
