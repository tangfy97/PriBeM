public class org.json.JSONWriter extends java.lang.Object
{
    private static final int maxdepth;
    private boolean comma;
    protected char mode;
    private char[] stack;
    private int top;
    protected java.io.Writer writer;

    public void <init>(java.io.Writer)
    {
        java.io.Writer r2;
        char[] $r1;
        org.json.JSONWriter r0;

        r0 := @this: org.json.JSONWriter;

        r2 := @parameter0: java.io.Writer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.json.JSONWriter: boolean comma> = 0;

        r0.<org.json.JSONWriter: char mode> = 105;

        $r1 = newarray (char)[20];

        r0.<org.json.JSONWriter: char[] stack> = $r1;

        r0.<org.json.JSONWriter: int top> = 0;

        r0.<org.json.JSONWriter: java.io.Writer writer> = r2;

        return;
    }

    private org.json.JSONWriter append(java.lang.String) throws org.json.JSONException
    {
        org.json.JSONException $r8, $r9, $r10;
        int $i4, $i5, $i6, $i7;
        java.lang.String r0;
        boolean $z0;
        char $c0, $c1, $c2, $c3;
        java.io.IOException $r5;
        org.json.JSONWriter r1;
        java.io.Writer $r2, $r7;

        r1 := @this: org.json.JSONWriter;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r8 = new org.json.JSONException;

        specialinvoke $r8.<org.json.JSONException: void <init>(java.lang.String)>("Null pointer");

        throw $r8;

     label1:
        $c0 = r1.<org.json.JSONWriter: char mode>;

        $i4 = (int) $c0;

        if $i4 == 111 goto label2;

        $c3 = r1.<org.json.JSONWriter: char mode>;

        $i5 = (int) $c3;

        if $i5 != 97 goto label8;

     label2:
        $z0 = r1.<org.json.JSONWriter: boolean comma>;

        if $z0 == 0 goto label3;

        $c2 = r1.<org.json.JSONWriter: char mode>;

        $i6 = (int) $c2;

        if $i6 != 97 goto label3;

        $r2 = r1.<org.json.JSONWriter: java.io.Writer writer>;

        virtualinvoke $r2.<java.io.Writer: void write(int)>(44);

     label3:
        $r7 = r1.<org.json.JSONWriter: java.io.Writer writer>;

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>(r0);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        $r9 = new org.json.JSONException;

        specialinvoke $r9.<org.json.JSONException: void <init>(java.lang.Throwable)>($r5);

        throw $r9;

     label6:
        $c1 = r1.<org.json.JSONWriter: char mode>;

        $i7 = (int) $c1;

        if $i7 != 111 goto label7;

        r1.<org.json.JSONWriter: char mode> = 107;

     label7:
        r1.<org.json.JSONWriter: boolean comma> = 1;

        return r1;

     label8:
        $r10 = new org.json.JSONException;

        specialinvoke $r10.<org.json.JSONException: void <init>(java.lang.String)>("Value out of sequence.");

        throw $r10;

        catch java.io.IOException from label2 to label4 with label5;
    }

    public org.json.JSONWriter array() throws org.json.JSONException
    {
        char $c0, $c1, $c2;
        org.json.JSONWriter r0;
        org.json.JSONException $r2;
        int $i3, $i4, $i5;

        r0 := @this: org.json.JSONWriter;

        $c0 = r0.<org.json.JSONWriter: char mode>;

        $i3 = (int) $c0;

        if $i3 == 105 goto label1;

        $c1 = r0.<org.json.JSONWriter: char mode>;

        $i4 = (int) $c1;

        if $i4 == 111 goto label1;

        $c2 = r0.<org.json.JSONWriter: char mode>;

        $i5 = (int) $c2;

        if $i5 != 97 goto label2;

     label1:
        specialinvoke r0.<org.json.JSONWriter: void push(char)>(97);

        specialinvoke r0.<org.json.JSONWriter: org.json.JSONWriter append(java.lang.String)>("[");

        r0.<org.json.JSONWriter: boolean comma> = 0;

        return r0;

     label2:
        $r2 = new org.json.JSONException;

        specialinvoke $r2.<org.json.JSONException: void <init>(java.lang.String)>("Misplaced array.");

        throw $r2;
    }

    private org.json.JSONWriter end(char, char) throws org.json.JSONException
    {
        char c0, $c1, c2;
        java.io.IOException $r3;
        org.json.JSONWriter r0;
        org.json.JSONException $r6, $r7;
        java.io.Writer $r1;
        int $i3, $i4, $i5, $i6;
        java.lang.String $r5;

        r0 := @this: org.json.JSONWriter;

        c0 := @parameter0: char;

        c2 := @parameter1: char;

        $c1 = r0.<org.json.JSONWriter: char mode>;

        $i3 = (int) $c1;

        $i4 = (int) c0;

        if $i3 == $i4 goto label3;

        $r6 = new org.json.JSONException;

        $i5 = (int) c0;

        if $i5 != 111 goto label1;

        $r5 = "Misplaced endObject.";

        goto label2;

     label1:
        $r5 = "Misplaced endArray.";

     label2:
        specialinvoke $r6.<org.json.JSONException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label3:
        specialinvoke r0.<org.json.JSONWriter: void pop(char)>(c0);

     label4:
        $r1 = r0.<org.json.JSONWriter: java.io.Writer writer>;

        $i6 = (int) c2;

        virtualinvoke $r1.<java.io.Writer: void write(int)>($i6);

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        $r7 = new org.json.JSONException;

        specialinvoke $r7.<org.json.JSONException: void <init>(java.lang.Throwable)>($r3);

        throw $r7;

     label7:
        r0.<org.json.JSONWriter: boolean comma> = 1;

        return r0;

        catch java.io.IOException from label4 to label5 with label6;
    }

    public org.json.JSONWriter endArray() throws org.json.JSONException
    {
        org.json.JSONWriter r0, $r1;

        r0 := @this: org.json.JSONWriter;

        $r1 = specialinvoke r0.<org.json.JSONWriter: org.json.JSONWriter end(char,char)>(97, 93);

        return $r1;
    }

    public org.json.JSONWriter endObject() throws org.json.JSONException
    {
        org.json.JSONWriter r0, $r1;

        r0 := @this: org.json.JSONWriter;

        $r1 = specialinvoke r0.<org.json.JSONWriter: org.json.JSONWriter end(char,char)>(107, 125);

        return $r1;
    }

    public org.json.JSONWriter key(java.lang.String) throws org.json.JSONException
    {
        char $c0;
        java.io.IOException $r8;
        org.json.JSONWriter r1;
        org.json.JSONException $r10, $r11, $r12;
        java.io.Writer $r3, $r5, $r6;
        int $i1;
        java.lang.String r0, $r4;
        boolean $z0;

        r1 := @this: org.json.JSONWriter;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r10 = new org.json.JSONException;

        specialinvoke $r10.<org.json.JSONException: void <init>(java.lang.String)>("Null key.");

        throw $r10;

     label1:
        $c0 = r1.<org.json.JSONWriter: char mode>;

        $i1 = (int) $c0;

        if $i1 != 107 goto label6;

     label2:
        $z0 = r1.<org.json.JSONWriter: boolean comma>;

        if $z0 == 0 goto label3;

        $r6 = r1.<org.json.JSONWriter: java.io.Writer writer>;

        virtualinvoke $r6.<java.io.Writer: void write(int)>(44);

     label3:
        $r3 = r1.<org.json.JSONWriter: java.io.Writer writer>;

        $r4 = staticinvoke <org.json.JSONObject: java.lang.String quote(java.lang.String)>(r0);

        virtualinvoke $r3.<java.io.Writer: void write(java.lang.String)>($r4);

        $r5 = r1.<org.json.JSONWriter: java.io.Writer writer>;

        virtualinvoke $r5.<java.io.Writer: void write(int)>(58);

        r1.<org.json.JSONWriter: boolean comma> = 0;

        r1.<org.json.JSONWriter: char mode> = 111;

     label4:
        return r1;

     label5:
        $r8 := @caughtexception;

        $r11 = new org.json.JSONException;

        specialinvoke $r11.<org.json.JSONException: void <init>(java.lang.Throwable)>($r8);

        throw $r11;

     label6:
        $r12 = new org.json.JSONException;

        specialinvoke $r12.<org.json.JSONException: void <init>(java.lang.String)>("Misplaced key.");

        throw $r12;

        catch java.io.IOException from label2 to label4 with label5;
    }

    public org.json.JSONWriter object() throws org.json.JSONException
    {
        char $c0, $c1, $c2;
        org.json.JSONWriter r0;
        org.json.JSONException $r2;
        int $i3, $i4, $i5;

        r0 := @this: org.json.JSONWriter;

        $c0 = r0.<org.json.JSONWriter: char mode>;

        $i3 = (int) $c0;

        if $i3 != 105 goto label1;

        r0.<org.json.JSONWriter: char mode> = 111;

     label1:
        $c1 = r0.<org.json.JSONWriter: char mode>;

        $i4 = (int) $c1;

        if $i4 == 111 goto label2;

        $c2 = r0.<org.json.JSONWriter: char mode>;

        $i5 = (int) $c2;

        if $i5 != 97 goto label3;

     label2:
        specialinvoke r0.<org.json.JSONWriter: org.json.JSONWriter append(java.lang.String)>("{");

        specialinvoke r0.<org.json.JSONWriter: void push(char)>(107);

        r0.<org.json.JSONWriter: boolean comma> = 0;

        return r0;

     label3:
        $r2 = new org.json.JSONException;

        specialinvoke $r2.<org.json.JSONException: void <init>(java.lang.String)>("Misplaced object.");

        throw $r2;
    }

    private void pop(char) throws org.json.JSONException
    {
        org.json.JSONException $r4;
        int $i0, $i1, $i2, $i5, $i6, $i7, $i8, $i9, $i11, $i12;
        char c3, $c4, $c10;
        org.json.JSONWriter r0;
        char[] $r2, $r3;

        r0 := @this: org.json.JSONWriter;

        c3 := @parameter0: char;

        $i0 = r0.<org.json.JSONWriter: int top>;

        if $i0 <= 0 goto label1;

        $r2 = r0.<org.json.JSONWriter: char[] stack>;

        $i1 = r0.<org.json.JSONWriter: int top>;

        $i2 = $i1 - 1;

        $c4 = $r2[$i2];

        $i11 = (int) $c4;

        $i12 = (int) c3;

        if $i11 == $i12 goto label2;

     label1:
        $r4 = new org.json.JSONException;

        specialinvoke $r4.<org.json.JSONException: void <init>(java.lang.String)>("Nesting error.");

        throw $r4;

     label2:
        $i5 = r0.<org.json.JSONWriter: int top>;

        $i6 = $i5 - 1;

        r0.<org.json.JSONWriter: int top> = $i6;

        $i7 = r0.<org.json.JSONWriter: int top>;

        if $i7 != 0 goto label3;

        $c10 = 100;

        goto label4;

     label3:
        $r3 = r0.<org.json.JSONWriter: char[] stack>;

        $i8 = r0.<org.json.JSONWriter: int top>;

        $i9 = $i8 - 1;

        $c10 = $r3[$i9];

     label4:
        r0.<org.json.JSONWriter: char mode> = $c10;

        return;
    }

    private void push(char) throws org.json.JSONException
    {
        char c1;
        org.json.JSONWriter r0;
        org.json.JSONException $r2;
        int $i0, $i2, $i3, $i4;
        char[] $r1;

        r0 := @this: org.json.JSONWriter;

        c1 := @parameter0: char;

        $i0 = r0.<org.json.JSONWriter: int top>;

        if $i0 < 20 goto label1;

        $r2 = new org.json.JSONException;

        specialinvoke $r2.<org.json.JSONException: void <init>(java.lang.String)>("Nesting too deep.");

        throw $r2;

     label1:
        $r1 = r0.<org.json.JSONWriter: char[] stack>;

        $i2 = r0.<org.json.JSONWriter: int top>;

        $r1[$i2] = c1;

        r0.<org.json.JSONWriter: char mode> = c1;

        $i3 = r0.<org.json.JSONWriter: int top>;

        $i4 = $i3 + 1;

        r0.<org.json.JSONWriter: int top> = $i4;

        return;
    }

    public org.json.JSONWriter value(boolean) throws org.json.JSONException
    {
        java.lang.String $r2;
        org.json.JSONWriter r0, $r1;
        boolean z0;

        r0 := @this: org.json.JSONWriter;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = "true";

        goto label2;

     label1:
        $r2 = "false";

     label2:
        $r1 = specialinvoke r0.<org.json.JSONWriter: org.json.JSONWriter append(java.lang.String)>($r2);

        return $r1;
    }

    public org.json.JSONWriter value(double) throws org.json.JSONException
    {
        java.lang.Double $r1;
        org.json.JSONWriter r0, $r2;
        double d0;

        r0 := @this: org.json.JSONWriter;

        d0 := @parameter0: double;

        $r1 = new java.lang.Double;

        specialinvoke $r1.<java.lang.Double: void <init>(double)>(d0);

        $r2 = virtualinvoke r0.<org.json.JSONWriter: org.json.JSONWriter value(java.lang.Object)>($r1);

        return $r2;
    }

    public org.json.JSONWriter value(long) throws org.json.JSONException
    {
        long l0;
        java.lang.String $r1;
        org.json.JSONWriter r0, $r2;

        r0 := @this: org.json.JSONWriter;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        $r2 = specialinvoke r0.<org.json.JSONWriter: org.json.JSONWriter append(java.lang.String)>($r1);

        return $r2;
    }

    public org.json.JSONWriter value(java.lang.Object) throws org.json.JSONException
    {
        java.lang.Object r1;
        java.lang.String $r2;
        org.json.JSONWriter r0, $r3;

        r0 := @this: org.json.JSONWriter;

        r1 := @parameter0: java.lang.Object;

        $r2 = staticinvoke <org.json.JSONObject: java.lang.String valueToString(java.lang.Object)>(r1);

        $r3 = specialinvoke r0.<org.json.JSONWriter: org.json.JSONWriter append(java.lang.String)>($r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <org.json.JSONWriter: int maxdepth> = 20;

        return;
    }
}
