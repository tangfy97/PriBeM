public class org.dom4j.io.STAXEventWriter extends java.lang.Object
{
    private javax.xml.stream.util.XMLEventConsumer consumer;
    private javax.xml.stream.XMLEventFactory factory;
    private javax.xml.stream.XMLOutputFactory outputFactory;

    public void <init>()
    {
        javax.xml.stream.XMLOutputFactory $r2;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <javax.xml.stream.XMLEventFactory: javax.xml.stream.XMLEventFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory> = $r1;

        $r2 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory> = $r2;

        return;
    }

    public void <init>(java.io.File) throws javax.xml.stream.XMLStreamException, java.io.IOException
    {
        javax.xml.stream.XMLOutputFactory $r2, $r5;
        javax.xml.stream.XMLEventWriter $r6;
        org.dom4j.io.STAXEventWriter r0;
        java.io.FileWriter $r3;
        javax.xml.stream.XMLEventFactory $r1;
        java.io.File r4;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r4 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <javax.xml.stream.XMLEventFactory: javax.xml.stream.XMLEventFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory> = $r1;

        $r2 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory> = $r2;

        $r5 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory>;

        $r3 = new java.io.FileWriter;

        specialinvoke $r3.<java.io.FileWriter: void <init>(java.io.File)>(r4);

        $r6 = virtualinvoke $r5.<javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.Writer)>($r3);

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer> = $r6;

        return;
    }

    public void <init>(java.io.Writer) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLOutputFactory $r2, $r4;
        javax.xml.stream.XMLEventWriter $r5;
        org.dom4j.io.STAXEventWriter r0;
        java.io.Writer r3;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r3 := @parameter0: java.io.Writer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <javax.xml.stream.XMLEventFactory: javax.xml.stream.XMLEventFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory> = $r1;

        $r2 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory> = $r2;

        $r4 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory>;

        $r5 = virtualinvoke $r4.<javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.Writer)>(r3);

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer> = $r5;

        return;
    }

    public void <init>(java.io.OutputStream) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLOutputFactory $r2, $r4;
        java.io.OutputStream r3;
        javax.xml.stream.XMLEventWriter $r5;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r3 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <javax.xml.stream.XMLEventFactory: javax.xml.stream.XMLEventFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory> = $r1;

        $r2 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory> = $r2;

        $r4 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory>;

        $r5 = virtualinvoke $r4.<javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.OutputStream)>(r3);

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer> = $r5;

        return;
    }

    public void <init>(javax.xml.stream.util.XMLEventConsumer)
    {
        javax.xml.stream.XMLOutputFactory $r2;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.XMLEventFactory $r1;
        javax.xml.stream.util.XMLEventConsumer r3;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r3 := @parameter0: javax.xml.stream.util.XMLEventConsumer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <javax.xml.stream.XMLEventFactory: javax.xml.stream.XMLEventFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory> = $r1;

        $r2 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>();

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLOutputFactory outputFactory> = $r2;

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer> = r3;

        return;
    }

    public javax.xml.stream.util.XMLEventConsumer getConsumer()
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.util.XMLEventConsumer $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        return $r1;
    }

    public void setConsumer(javax.xml.stream.util.XMLEventConsumer)
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.util.XMLEventConsumer r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: javax.xml.stream.util.XMLEventConsumer;

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer> = r1;

        return;
    }

    public javax.xml.stream.XMLEventFactory getEventFactory()
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        return $r1;
    }

    public void setEventFactory(javax.xml.stream.XMLEventFactory)
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.XMLEventFactory r1;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: javax.xml.stream.XMLEventFactory;

        r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory> = r1;

        return;
    }

    public void writeNode(org.dom4j.Node) throws javax.xml.stream.XMLStreamException
    {
        org.dom4j.Document $r4;
        org.dom4j.Node r0;
        org.dom4j.Entity $r7;
        short $s0;
        org.dom4j.DocumentType $r3;
        org.dom4j.CDATA $r8;
        java.lang.StringBuffer $r14, $r15, $r17;
        org.dom4j.Comment $r5;
        javax.xml.stream.XMLStreamException $r18;
        int $i1;
        java.lang.String $r16;
        org.dom4j.ProcessingInstruction $r6;
        org.dom4j.Namespace $r2;
        org.dom4j.io.STAXEventWriter r1;
        org.dom4j.Text $r9;
        org.dom4j.Element $r11;
        org.dom4j.Attribute $r10;

        r1 := @this: org.dom4j.io.STAXEventWriter;

        r0 := @parameter0: org.dom4j.Node;

        $s0 = interfaceinvoke r0.<org.dom4j.Node: short getNodeType()>();

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label03;
            case 3: goto label02;
            case 4: goto label06;
            case 5: goto label08;
            case 6: goto label11;
            case 7: goto label07;
            case 8: goto label05;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label11;
            case 12: goto label11;
            case 13: goto label04;
            default: goto label11;
        };

     label01:
        $r11 = (org.dom4j.Element) r0;

        virtualinvoke r1.<org.dom4j.io.STAXEventWriter: void writeElement(org.dom4j.Element)>($r11);

        goto label12;

     label02:
        $r9 = (org.dom4j.Text) r0;

        virtualinvoke r1.<org.dom4j.io.STAXEventWriter: void writeText(org.dom4j.Text)>($r9);

        goto label12;

     label03:
        $r10 = (org.dom4j.Attribute) r0;

        virtualinvoke r1.<org.dom4j.io.STAXEventWriter: void writeAttribute(org.dom4j.Attribute)>($r10);

        goto label12;

     label04:
        $r2 = (org.dom4j.Namespace) r0;

        virtualinvoke r1.<org.dom4j.io.STAXEventWriter: void writeNamespace(org.dom4j.Namespace)>($r2);

        goto label12;

     label05:
        $r5 = (org.dom4j.Comment) r0;

        virtualinvoke r1.<org.dom4j.io.STAXEventWriter: void writeComment(org.dom4j.Comment)>($r5);

        goto label12;

     label06:
        $r8 = (org.dom4j.CDATA) r0;

        virtualinvoke r1.<org.dom4j.io.STAXEventWriter: void writeCDATA(org.dom4j.CDATA)>($r8);

        goto label12;

     label07:
        $r6 = (org.dom4j.ProcessingInstruction) r0;

        virtualinvoke r1.<org.dom4j.io.STAXEventWriter: void writeProcessingInstruction(org.dom4j.ProcessingInstruction)>($r6);

        goto label12;

     label08:
        $r7 = (org.dom4j.Entity) r0;

        virtualinvoke r1.<org.dom4j.io.STAXEventWriter: void writeEntity(org.dom4j.Entity)>($r7);

        goto label12;

     label09:
        $r4 = (org.dom4j.Document) r0;

        virtualinvoke r1.<org.dom4j.io.STAXEventWriter: void writeDocument(org.dom4j.Document)>($r4);

        goto label12;

     label10:
        $r3 = (org.dom4j.DocumentType) r0;

        virtualinvoke r1.<org.dom4j.io.STAXEventWriter: void writeDocumentType(org.dom4j.DocumentType)>($r3);

        goto label12;

     label11:
        $r18 = new javax.xml.stream.XMLStreamException;

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unsupported DOM4J Node: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>($r16);

        throw $r18;

     label12:
        return;
    }

    public void writeChildNodes(org.dom4j.Branch) throws javax.xml.stream.XMLStreamException
    {
        org.dom4j.Branch r0;
        org.dom4j.Node $r1;
        org.dom4j.io.STAXEventWriter r2;
        int $i0, i1;

        r2 := @this: org.dom4j.io.STAXEventWriter;

        r0 := @parameter0: org.dom4j.Branch;

        i1 = 0;

        $i0 = interfaceinvoke r0.<org.dom4j.Branch: int nodeCount()>();

     label1:
        if i1 >= $i0 goto label2;

        $r1 = interfaceinvoke r0.<org.dom4j.Branch: org.dom4j.Node node(int)>(i1);

        virtualinvoke r2.<org.dom4j.io.STAXEventWriter: void writeNode(org.dom4j.Node)>($r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void writeElement(org.dom4j.Element) throws javax.xml.stream.XMLStreamException
    {
        org.dom4j.io.STAXEventWriter r0;
        org.dom4j.Element r1;
        javax.xml.stream.events.EndElement $r5;
        javax.xml.stream.events.StartElement $r3;
        javax.xml.stream.util.XMLEventConsumer $r2, $r4;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.Element;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r3 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.StartElement createStartElement(org.dom4j.Element)>(r1);

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r3);

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeChildNodes(org.dom4j.Branch)>(r1);

        $r4 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r5 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.EndElement createEndElement(org.dom4j.Element)>(r1);

        interfaceinvoke $r4.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r5);

        return;
    }

    public javax.xml.stream.events.StartElement createStartElement(org.dom4j.Element)
    {
        java.util.Iterator $r5, $r8;
        org.dom4j.io.STAXEventWriter r0;
        java.util.List $r7;
        org.dom4j.io.STAXEventWriter$NamespaceIterator $r6;
        org.dom4j.io.STAXEventWriter$AttributeIterator $r4;
        org.dom4j.Element r1;
        org.dom4j.QName $r2;
        javax.xml.namespace.QName $r3;
        javax.xml.stream.events.StartElement $r10;
        javax.xml.stream.XMLEventFactory $r9;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.Element;

        $r2 = interfaceinvoke r1.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r3 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.namespace.QName createQName(org.dom4j.QName)>($r2);

        $r4 = new org.dom4j.io.STAXEventWriter$AttributeIterator;

        $r5 = interfaceinvoke r1.<org.dom4j.Element: java.util.Iterator attributeIterator()>();

        specialinvoke $r4.<org.dom4j.io.STAXEventWriter$AttributeIterator: void <init>(org.dom4j.io.STAXEventWriter,java.util.Iterator)>(r0, $r5);

        $r6 = new org.dom4j.io.STAXEventWriter$NamespaceIterator;

        $r7 = interfaceinvoke r1.<org.dom4j.Element: java.util.List declaredNamespaces()>();

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r6.<org.dom4j.io.STAXEventWriter$NamespaceIterator: void <init>(org.dom4j.io.STAXEventWriter,java.util.Iterator)>(r0, $r8);

        $r9 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r10 = virtualinvoke $r9.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.StartElement createStartElement(javax.xml.namespace.QName,java.util.Iterator,java.util.Iterator)>($r3, $r4, $r6);

        return $r10;
    }

    public javax.xml.stream.events.EndElement createEndElement(org.dom4j.Element)
    {
        java.util.Iterator $r6;
        org.dom4j.io.STAXEventWriter r0;
        java.util.List $r5;
        org.dom4j.io.STAXEventWriter$NamespaceIterator $r4;
        org.dom4j.Element r1;
        org.dom4j.QName $r2;
        javax.xml.stream.events.EndElement $r8;
        javax.xml.namespace.QName $r3;
        javax.xml.stream.XMLEventFactory $r7;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.Element;

        $r2 = interfaceinvoke r1.<org.dom4j.Element: org.dom4j.QName getQName()>();

        $r3 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.namespace.QName createQName(org.dom4j.QName)>($r2);

        $r4 = new org.dom4j.io.STAXEventWriter$NamespaceIterator;

        $r5 = interfaceinvoke r1.<org.dom4j.Element: java.util.List declaredNamespaces()>();

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

        specialinvoke $r4.<org.dom4j.io.STAXEventWriter$NamespaceIterator: void <init>(org.dom4j.io.STAXEventWriter,java.util.Iterator)>(r0, $r6);

        $r7 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r8 = virtualinvoke $r7.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.EndElement createEndElement(javax.xml.namespace.QName,java.util.Iterator)>($r3, $r4);

        return $r8;
    }

    public void writeAttribute(org.dom4j.Attribute) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.Attribute $r3;
        org.dom4j.io.STAXEventWriter r0;
        org.dom4j.Attribute r1;
        javax.xml.stream.util.XMLEventConsumer $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.Attribute;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r3 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.Attribute createAttribute(org.dom4j.Attribute)>(r1);

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r3);

        return;
    }

    public javax.xml.stream.events.Attribute createAttribute(org.dom4j.Attribute)
    {
        javax.xml.stream.events.Attribute $r6;
        org.dom4j.io.STAXEventWriter r0;
        org.dom4j.QName $r2;
        javax.xml.namespace.QName $r3;
        java.lang.String $r4;
        org.dom4j.Attribute r1;
        javax.xml.stream.XMLEventFactory $r5;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.Attribute;

        $r2 = interfaceinvoke r1.<org.dom4j.Attribute: org.dom4j.QName getQName()>();

        $r3 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.namespace.QName createQName(org.dom4j.QName)>($r2);

        $r4 = interfaceinvoke r1.<org.dom4j.Attribute: java.lang.String getValue()>();

        $r5 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r6 = virtualinvoke $r5.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Attribute createAttribute(javax.xml.namespace.QName,java.lang.String)>($r3, $r4);

        return $r6;
    }

    public void writeNamespace(org.dom4j.Namespace) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.Namespace $r3;
        org.dom4j.Namespace r1;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.util.XMLEventConsumer $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.Namespace;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r3 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.Namespace createNamespace(org.dom4j.Namespace)>(r1);

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r3);

        return;
    }

    public javax.xml.stream.events.Namespace createNamespace(org.dom4j.Namespace)
    {
        javax.xml.stream.events.Namespace $r5;
        org.dom4j.Namespace r0;
        org.dom4j.io.STAXEventWriter r3;
        java.lang.String $r1, $r2;
        javax.xml.stream.XMLEventFactory $r4;

        r3 := @this: org.dom4j.io.STAXEventWriter;

        r0 := @parameter0: org.dom4j.Namespace;

        $r1 = virtualinvoke r0.<org.dom4j.Namespace: java.lang.String getPrefix()>();

        $r2 = virtualinvoke r0.<org.dom4j.Namespace: java.lang.String getURI()>();

        $r4 = r3.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r5 = virtualinvoke $r4.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Namespace createNamespace(java.lang.String,java.lang.String)>($r1, $r2);

        return $r5;
    }

    public void writeText(org.dom4j.Text) throws javax.xml.stream.XMLStreamException
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.events.Characters $r3;
        org.dom4j.Text r1;
        javax.xml.stream.util.XMLEventConsumer $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.Text;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r3 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.Characters createCharacters(org.dom4j.Text)>(r1);

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r3);

        return;
    }

    public javax.xml.stream.events.Characters createCharacters(org.dom4j.Text)
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.events.Characters $r4;
        org.dom4j.Text r1;
        java.lang.String $r3;
        javax.xml.stream.XMLEventFactory $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.Text;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r3 = interfaceinvoke r1.<org.dom4j.Text: java.lang.String getText()>();

        $r4 = virtualinvoke $r2.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Characters createCharacters(java.lang.String)>($r3);

        return $r4;
    }

    public void writeCDATA(org.dom4j.CDATA) throws javax.xml.stream.XMLStreamException
    {
        org.dom4j.io.STAXEventWriter r0;
        org.dom4j.CDATA r1;
        javax.xml.stream.events.Characters $r3;
        javax.xml.stream.util.XMLEventConsumer $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.CDATA;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r3 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.Characters createCharacters(org.dom4j.CDATA)>(r1);

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r3);

        return;
    }

    public javax.xml.stream.events.Characters createCharacters(org.dom4j.CDATA)
    {
        org.dom4j.io.STAXEventWriter r0;
        org.dom4j.CDATA r1;
        javax.xml.stream.events.Characters $r4;
        java.lang.String $r3;
        javax.xml.stream.XMLEventFactory $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.CDATA;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r3 = interfaceinvoke r1.<org.dom4j.CDATA: java.lang.String getText()>();

        $r4 = virtualinvoke $r2.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Characters createCData(java.lang.String)>($r3);

        return $r4;
    }

    public void writeComment(org.dom4j.Comment) throws javax.xml.stream.XMLStreamException
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.events.Comment $r3;
        org.dom4j.Comment r1;
        javax.xml.stream.util.XMLEventConsumer $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.Comment;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r3 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.Comment createComment(org.dom4j.Comment)>(r1);

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r3);

        return;
    }

    public javax.xml.stream.events.Comment createComment(org.dom4j.Comment)
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.events.Comment $r4;
        org.dom4j.Comment r1;
        java.lang.String $r3;
        javax.xml.stream.XMLEventFactory $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.Comment;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r3 = interfaceinvoke r1.<org.dom4j.Comment: java.lang.String getText()>();

        $r4 = virtualinvoke $r2.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.Comment createComment(java.lang.String)>($r3);

        return $r4;
    }

    public void writeProcessingInstruction(org.dom4j.ProcessingInstruction) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.ProcessingInstruction $r3;
        org.dom4j.io.STAXEventWriter r0;
        org.dom4j.ProcessingInstruction r1;
        javax.xml.stream.util.XMLEventConsumer $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.ProcessingInstruction;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r3 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.ProcessingInstruction createProcessingInstruction(org.dom4j.ProcessingInstruction)>(r1);

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r3);

        return;
    }

    public javax.xml.stream.events.ProcessingInstruction createProcessingInstruction(org.dom4j.ProcessingInstruction)
    {
        javax.xml.stream.events.ProcessingInstruction $r5;
        org.dom4j.io.STAXEventWriter r3;
        java.lang.String $r1, $r2;
        org.dom4j.ProcessingInstruction r0;
        javax.xml.stream.XMLEventFactory $r4;

        r3 := @this: org.dom4j.io.STAXEventWriter;

        r0 := @parameter0: org.dom4j.ProcessingInstruction;

        $r1 = interfaceinvoke r0.<org.dom4j.ProcessingInstruction: java.lang.String getTarget()>();

        $r2 = interfaceinvoke r0.<org.dom4j.ProcessingInstruction: java.lang.String getText()>();

        $r4 = r3.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r5 = virtualinvoke $r4.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>($r1, $r2);

        return $r5;
    }

    public void writeEntity(org.dom4j.Entity) throws javax.xml.stream.XMLStreamException
    {
        org.dom4j.Entity r1;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.events.EntityReference $r3;
        javax.xml.stream.util.XMLEventConsumer $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.Entity;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r3 = specialinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.EntityReference createEntityReference(org.dom4j.Entity)>(r1);

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r3);

        return;
    }

    private javax.xml.stream.events.EntityReference createEntityReference(org.dom4j.Entity)
    {
        org.dom4j.Entity r1;
        org.dom4j.io.STAXEventWriter r0;
        java.lang.String $r3;
        javax.xml.stream.events.EntityReference $r4;
        javax.xml.stream.XMLEventFactory $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.Entity;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r3 = interfaceinvoke r1.<org.dom4j.Entity: java.lang.String getName()>();

        $r4 = virtualinvoke $r2.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.EntityReference createEntityReference(java.lang.String,javax.xml.stream.events.EntityDeclaration)>($r3, null);

        return $r4;
    }

    public void writeDocumentType(org.dom4j.DocumentType) throws javax.xml.stream.XMLStreamException
    {
        org.dom4j.DocumentType r1;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.events.DTD $r3;
        javax.xml.stream.util.XMLEventConsumer $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.DocumentType;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r3 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.DTD createDTD(org.dom4j.DocumentType)>(r1);

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r3);

        return;
    }

    public javax.xml.stream.events.DTD createDTD(org.dom4j.DocumentType)
    {
        org.dom4j.io.STAXEventWriter r2;
        java.io.StringWriter $r0;
        java.io.IOException $r6;
        java.lang.RuntimeException $r7;
        org.dom4j.DocumentType r1;
        java.lang.String $r4;
        javax.xml.stream.events.DTD $r5;
        javax.xml.stream.XMLEventFactory $r3;

        r2 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.DocumentType;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>()>();

     label1:
        interfaceinvoke r1.<org.dom4j.DocumentType: void write(java.io.Writer)>($r0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error writing DTD", $r6);

        throw $r7;

     label4:
        $r3 = r2.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r4 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.DTD createDTD(java.lang.String)>($r4);

        return $r5;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void writeDocument(org.dom4j.Document) throws javax.xml.stream.XMLStreamException
    {
        org.dom4j.Document r1;
        javax.xml.stream.events.StartDocument $r3;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.util.XMLEventConsumer $r2, $r4;
        javax.xml.stream.events.EndDocument $r5;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.Document;

        $r2 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r3 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.StartDocument createStartDocument(org.dom4j.Document)>(r1);

        interfaceinvoke $r2.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r3);

        virtualinvoke r0.<org.dom4j.io.STAXEventWriter: void writeChildNodes(org.dom4j.Branch)>(r1);

        $r4 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.util.XMLEventConsumer consumer>;

        $r5 = virtualinvoke r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.events.EndDocument createEndDocument(org.dom4j.Document)>(r1);

        interfaceinvoke $r4.<javax.xml.stream.util.XMLEventConsumer: void add(javax.xml.stream.events.XMLEvent)>($r5);

        return;
    }

    public javax.xml.stream.events.StartDocument createStartDocument(org.dom4j.Document)
    {
        org.dom4j.Document r0;
        javax.xml.stream.events.StartDocument $r4, $r6;
        org.dom4j.io.STAXEventWriter r2;
        java.lang.String $r1;
        javax.xml.stream.XMLEventFactory $r3, $r5;

        r2 := @this: org.dom4j.io.STAXEventWriter;

        r0 := @parameter0: org.dom4j.Document;

        $r1 = interfaceinvoke r0.<org.dom4j.Document: java.lang.String getXMLEncoding()>();

        if $r1 == null goto label1;

        $r5 = r2.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r6 = virtualinvoke $r5.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.StartDocument createStartDocument(java.lang.String)>($r1);

        return $r6;

     label1:
        $r3 = r2.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r4 = virtualinvoke $r3.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.StartDocument createStartDocument()>();

        return $r4;
    }

    public javax.xml.stream.events.EndDocument createEndDocument(org.dom4j.Document)
    {
        org.dom4j.Document r3;
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.XMLEventFactory $r1;
        javax.xml.stream.events.EndDocument $r2;

        r0 := @this: org.dom4j.io.STAXEventWriter;

        r3 := @parameter0: org.dom4j.Document;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        $r2 = virtualinvoke $r1.<javax.xml.stream.XMLEventFactory: javax.xml.stream.events.EndDocument createEndDocument()>();

        return $r2;
    }

    public javax.xml.namespace.QName createQName(org.dom4j.QName)
    {
        org.dom4j.io.STAXEventWriter r5;
        org.dom4j.QName r1;
        javax.xml.namespace.QName $r0;
        java.lang.String $r2, $r3, $r4;

        r5 := @this: org.dom4j.io.STAXEventWriter;

        r1 := @parameter0: org.dom4j.QName;

        $r0 = new javax.xml.namespace.QName;

        $r2 = virtualinvoke r1.<org.dom4j.QName: java.lang.String getNamespaceURI()>();

        $r3 = virtualinvoke r1.<org.dom4j.QName: java.lang.String getName()>();

        $r4 = virtualinvoke r1.<org.dom4j.QName: java.lang.String getNamespacePrefix()>();

        specialinvoke $r0.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4);

        return $r0;
    }

    static javax.xml.stream.XMLEventFactory access$000(org.dom4j.io.STAXEventWriter)
    {
        org.dom4j.io.STAXEventWriter r0;
        javax.xml.stream.XMLEventFactory $r1;

        r0 := @parameter0: org.dom4j.io.STAXEventWriter;

        $r1 = r0.<org.dom4j.io.STAXEventWriter: javax.xml.stream.XMLEventFactory factory>;

        return $r1;
    }
}
