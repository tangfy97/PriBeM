public abstract class ucar.nc2.dt.radial.RadialDatasetSweepAdapter extends ucar.nc2.dt.TypedDatasetImpl implements ucar.nc2.dt.RadialDatasetSweep
{
    protected ucar.unidata.geoloc.EarthLocation origin;
    protected java.util.HashMap csHash;
    protected ucar.nc2.units.DateUnit dateUnits;
    protected ucar.nc2.util.cache.FileCache fileCache;

    public void <init>()
    {
        java.util.HashMap $r1;
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r0;

        r0 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        specialinvoke r0.<ucar.nc2.dt.TypedDatasetImpl: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: java.util.HashMap csHash> = $r1;

        return;
    }

    public void <init>(ucar.nc2.dataset.NetcdfDataset)
    {
        java.util.HashMap $r2;
        java.util.List $r4;
        java.lang.StringBuffer $r3;
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r0;
        int $i0, i1;
        java.lang.Object $r5;
        ucar.nc2.Variable $r6;
        ucar.nc2.dataset.NetcdfDataset r1;

        r0 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        specialinvoke r0.<ucar.nc2.dt.TypedDatasetImpl: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: java.util.HashMap csHash> = $r2;

        $r3 = r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: java.lang.StringBuffer parseInfo>;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("RadialDatasetAdapter look for RadialVariables\n");

        $r4 = virtualinvoke r1.<ucar.nc2.dataset.NetcdfDataset: java.util.List getVariables()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        if i1 >= $i0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (ucar.nc2.Variable) $r5;

        virtualinvoke r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: void addRadialVariable(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Variable)>(r1, $r6);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected abstract void addRadialVariable(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.Variable);

    protected abstract ucar.nc2.dt.RadialDatasetSweep$RadialVariable makeRadialVariable(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.VariableSimpleIF, ucar.nc2.Variable);

    protected abstract void setTimeUnits() throws java.lang.Exception;

    public java.lang.String getDetailInfo()
    {
        boolean $z0, $z1;
        java.lang.StringBuilder $r0, $r1, $r2, $r5, $r6, $r8, $r9, $r11, $r12, $r14, $r15, $r17, $r18, $r20, $r21, $r23, $r24, $r26, $r27, $r29, $r30, $r32, $r33, $r36, $r37, $r39, $r40, $r41, $r42, $r44, $r45, $r46, $r47;
        java.lang.String $r4, $r7, $r10, $r13, $r16, $r19, $r25, $r31, $r35, $r38, $r43, $r48, $r49, $r50;
        ucar.nc2.units.DateUnit $r34;
        ucar.unidata.geoloc.EarthLocation $r28;
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r3;
        ucar.nc2.dt.RadialDatasetSweep$Type $r22;

        r3 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Radar ID = ");

        $r4 = virtualinvoke r3.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: java.lang.String getRadarID()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Radar Name = ");

        $r10 = virtualinvoke r3.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: java.lang.String getRadarName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Data Format Name= ");

        $r16 = virtualinvoke r3.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: java.lang.String getDataFormat()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Common Type = ");

        $r22 = virtualinvoke r3.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: ucar.nc2.dt.RadialDatasetSweep$Type getCommonType()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Common Origin = ");

        $r28 = virtualinvoke r3.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: ucar.unidata.geoloc.EarthLocation getCommonOrigin()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Date Unit = ");

        $r34 = virtualinvoke r3.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: ucar.nc2.units.DateUnit getTimeUnits()>();

        $r35 = virtualinvoke $r34.<ucar.nc2.units.DateUnit: java.lang.String getUnitsString()>();

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isStationary = ");

        $z0 = virtualinvoke r3.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: boolean isStationary()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isVolume = ");

        $z1 = virtualinvoke r3.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: boolean isVolume()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r48);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r49 = specialinvoke r3.<ucar.nc2.dt.TypedDatasetImpl: java.lang.String getDetailInfo()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r50 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r50;
    }

    protected abstract void setEarthLocation();

    public ucar.nc2.dt.RadialDatasetSweep$Type getCommonType()
    {
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r0;

        r0 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        return null;
    }

    public ucar.nc2.units.DateUnit getTimeUnits()
    {
        ucar.nc2.units.DateUnit $r1;
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r0;

        r0 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        $r1 = r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: ucar.nc2.units.DateUnit dateUnits>;

        return $r1;
    }

    public ucar.unidata.geoloc.EarthLocation getEarthLocation()
    {
        ucar.unidata.geoloc.EarthLocation $r1;
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r0;

        r0 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        $r1 = r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: ucar.unidata.geoloc.EarthLocation origin>;

        return $r1;
    }

    protected void setBoundingBox()
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        java.util.HashMap $r1;
        ucar.nc2.dt.radial.RadialCoordSys r5;
        ucar.unidata.geoloc.LatLonRect $r7, r8;
        ucar.unidata.geoloc.EarthLocation $r6;
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        r8 = null;

        $r1 = r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: java.util.HashMap csHash>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (ucar.nc2.dt.radial.RadialCoordSys) $r4;

        $r6 = r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: ucar.unidata.geoloc.EarthLocation origin>;

        virtualinvoke r5.<ucar.nc2.dt.radial.RadialCoordSys: void setOrigin(ucar.unidata.geoloc.EarthLocation)>($r6);

        $r7 = virtualinvoke r5.<ucar.nc2.dt.radial.RadialCoordSys: ucar.unidata.geoloc.LatLonRect getBoundingBox()>();

        if r8 != null goto label2;

        r8 = $r7;

        goto label3;

     label2:
        virtualinvoke r8.<ucar.unidata.geoloc.LatLonRect: void extend(ucar.unidata.geoloc.LatLonRect)>($r7);

     label3:
        goto label1;

     label4:
        r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: ucar.unidata.geoloc.LatLonRect boundingBox> = r8;

        return;
    }

    public void calcBounds() throws java.io.IOException
    {
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r0;
        java.io.IOException $r2;
        java.lang.String $r3;
        java.lang.Exception $r1;

        r0 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        virtualinvoke r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: void setBoundingBox()>();

     label1:
        virtualinvoke r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: void setTimeUnits()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.io.IOException;

        $r3 = virtualinvoke $r1.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r3);

        throw $r2;

     label4:
        virtualinvoke r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: void setStartDate()>();

        virtualinvoke r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: void setEndDate()>();

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public ucar.nc2.constants.FeatureType getFeatureType()
    {
        ucar.nc2.constants.FeatureType $r0;
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r1;

        r1 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        $r0 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType RADIAL>;

        return $r0;
    }

    public ucar.nc2.units.DateRange getDateRange()
    {
        ucar.nc2.units.DateRange $r0;
        java.util.Date $r2, $r3;
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r1;

        r1 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        $r0 = new ucar.nc2.units.DateRange;

        $r2 = virtualinvoke r1.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: java.util.Date getStartDate()>();

        $r3 = virtualinvoke r1.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: java.util.Date getEndDate()>();

        specialinvoke $r0.<ucar.nc2.units.DateRange: void <init>(java.util.Date,java.util.Date)>($r2, $r3);

        return $r0;
    }

    public void getDetailInfo(java.util.Formatter)
    {
        java.lang.Object[] $r1;
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r2;
        java.lang.String $r3;
        java.util.Formatter r0;

        r2 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        r0 := @parameter0: java.util.Formatter;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r2.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: java.lang.String getDetailInfo()>();

        $r1[0] = $r3;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s", $r1);

        return;
    }

    public java.lang.String getImplementationName()
    {
        java.lang.Class $r1;
        java.lang.String $r2;
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r0;

        r0 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public synchronized void close() throws java.io.IOException
    {
        java.lang.Throwable $r5;
        ucar.nc2.util.cache.FileCache $r1, $r4;
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r0;
        ucar.nc2.dataset.NetcdfDataset $r2, $r3;

        r0 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        $r1 = r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: ucar.nc2.util.cache.FileCache fileCache>;

        if $r1 == null goto label1;

        $r4 = r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: ucar.nc2.util.cache.FileCache fileCache>;

        virtualinvoke $r4.<ucar.nc2.util.cache.FileCache: void release(ucar.nc2.util.cache.FileCacheable)>(r0);

        goto label5;

     label1:
        $r2 = r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: ucar.nc2.dataset.NetcdfDataset ncfile>;

        if $r2 == null goto label2;

        $r3 = r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: ucar.nc2.dataset.NetcdfDataset ncfile>;

        virtualinvoke $r3.<ucar.nc2.dataset.NetcdfDataset: void close()>();

     label2:
        r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: ucar.nc2.dataset.NetcdfDataset ncfile> = null;

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: ucar.nc2.dataset.NetcdfDataset ncfile> = null;

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean sync() throws java.io.IOException
    {
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r0;

        r0 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        return 0;
    }

    public void setFileCache(ucar.nc2.util.cache.FileCache)
    {
        ucar.nc2.util.cache.FileCache r1;
        ucar.nc2.dt.radial.RadialDatasetSweepAdapter r0;

        r0 := @this: ucar.nc2.dt.radial.RadialDatasetSweepAdapter;

        r1 := @parameter0: ucar.nc2.util.cache.FileCache;

        r0.<ucar.nc2.dt.radial.RadialDatasetSweepAdapter: ucar.nc2.util.cache.FileCache fileCache> = r1;

        return;
    }
}
