public final class org.apache.lucene.util.ReaderUtil extends java.lang.Object
{

    private void <init>()
    {
        org.apache.lucene.util.ReaderUtil r0;

        r0 := @this: org.apache.lucene.util.ReaderUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void gatherSubReaders(java.util.List, org.apache.lucene.index.IndexReader)
    {
        java.util.List r2;
        int $i0, i1;
        org.apache.lucene.index.IndexReader r0, $r3;
        org.apache.lucene.index.IndexReader[] $r1;

        r2 := @parameter0: java.util.List;

        r0 := @parameter1: org.apache.lucene.index.IndexReader;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.IndexReader: org.apache.lucene.index.IndexReader[] getSequentialSubReaders()>();

        if $r1 != null goto label1;

        interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        goto label3;

     label1:
        i1 = 0;

     label2:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        $r3 = $r1[i1];

        staticinvoke <org.apache.lucene.util.ReaderUtil: void gatherSubReaders(java.util.List,org.apache.lucene.index.IndexReader)>(r2, $r3);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public static org.apache.lucene.index.IndexReader subReader(int, org.apache.lucene.index.IndexReader)
    {
        java.lang.Object[] $r3;
        java.util.ArrayList $r0;
        int[] r5;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, i7;
        org.apache.lucene.index.IndexReader[] $r2, r4;
        org.apache.lucene.index.IndexReader r1, $r6, $r7;

        i3 := @parameter0: int;

        r1 := @parameter1: org.apache.lucene.index.IndexReader;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.apache.lucene.util.ReaderUtil: void gatherSubReaders(java.util.List,org.apache.lucene.index.IndexReader)>($r0, r1);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r2 = newarray (org.apache.lucene.index.IndexReader)[$i0];

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        r4 = (org.apache.lucene.index.IndexReader[]) $r3;

        $i1 = lengthof r4;

        r5 = newarray (int)[$i1];

        i6 = 0;

        i7 = 0;

     label1:
        $i2 = lengthof r4;

        if i7 >= $i2 goto label2;

        r5[i7] = i6;

        $r7 = r4[i7];

        $i5 = virtualinvoke $r7.<org.apache.lucene.index.IndexReader: int maxDoc()>();

        i6 = i6 + $i5;

        i7 = i7 + 1;

        goto label1;

     label2:
        $i4 = staticinvoke <org.apache.lucene.util.ReaderUtil: int subIndex(int,int[])>(i3, r5);

        $r6 = r4[$i4];

        return $r6;
    }

    public static org.apache.lucene.index.IndexReader subReader(org.apache.lucene.index.IndexReader, int)
    {
        java.lang.Object[] $r3;
        java.util.ArrayList $r0;
        org.apache.lucene.index.IndexReader[] $r2, r4;
        int $i0, i1;
        org.apache.lucene.index.IndexReader r1, $r5;

        r1 := @parameter0: org.apache.lucene.index.IndexReader;

        i1 := @parameter1: int;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.apache.lucene.util.ReaderUtil: void gatherSubReaders(java.util.List,org.apache.lucene.index.IndexReader)>($r0, r1);

        $i0 = interfaceinvoke $r0.<java.util.List: int size()>();

        $r2 = newarray (org.apache.lucene.index.IndexReader)[$i0];

        $r3 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r2);

        r4 = (org.apache.lucene.index.IndexReader[]) $r3;

        $r5 = r4[i1];

        return $r5;
    }

    public static int subIndex(int, int[])
    {
        int[] r0;
        int i0, $i1, i2, i3, $i4, $i5, $i6, i7, i8, i9;

        i3 := @parameter0: int;

        r0 := @parameter1: int[];

        i0 = lengthof r0;

        i7 = 0;

        i8 = i0 - 1;

     label1:
        if i8 < i7 goto label6;

        $i1 = i7 + i8;

        i9 = $i1 >>> 1;

        i2 = r0[i9];

        if i3 >= i2 goto label2;

        i8 = i9 - 1;

        goto label5;

     label2:
        if i3 <= i2 goto label3;

        i7 = i9 + 1;

        goto label5;

     label3:
        $i4 = i9 + 1;

        if $i4 >= i0 goto label4;

        $i5 = i9 + 1;

        $i6 = r0[$i5];

        if $i6 != i2 goto label4;

        i9 = i9 + 1;

        goto label3;

     label4:
        return i9;

     label5:
        goto label1;

     label6:
        return i8;
    }
}
