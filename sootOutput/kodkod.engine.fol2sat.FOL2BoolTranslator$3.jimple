final class kodkod.engine.fol2sat.FOL2BoolTranslator$3 extends kodkod.engine.fol2sat.FOL2BoolTranslator
{
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator;
    private static int[] $SWITCH_TABLE$kodkod$ast$operator$IntCastOperator;

    void <init>(kodkod.engine.fol2sat.FOL2BoolCache, kodkod.engine.fol2sat.LeafInterpreter, kodkod.engine.fol2sat.Environment)
    {
        kodkod.engine.fol2sat.Environment $r3;
        kodkod.engine.fol2sat.FOL2BoolTranslator$3 r0;
        kodkod.engine.fol2sat.LeafInterpreter $r2;
        kodkod.engine.fol2sat.FOL2BoolCache $r1;

        r0 := @this: kodkod.engine.fol2sat.FOL2BoolTranslator$3;

        $r1 := @parameter0: kodkod.engine.fol2sat.FOL2BoolCache;

        $r2 := @parameter1: kodkod.engine.fol2sat.LeafInterpreter;

        $r3 := @parameter2: kodkod.engine.fol2sat.Environment;

        specialinvoke r0.<kodkod.engine.fol2sat.FOL2BoolTranslator: void <init>(kodkod.engine.fol2sat.FOL2BoolCache,kodkod.engine.fol2sat.LeafInterpreter,kodkod.engine.fol2sat.Environment,kodkod.engine.fol2sat.FOL2BoolTranslator)>($r1, $r2, $r3, null);

        return;
    }

    public final kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.BinaryExpression)
    {
        kodkod.ast.BinaryExpression r1;
        int[] $r4;
        int $i0, $i1;
        kodkod.ast.Expression $r6, $r11, $r14;
        kodkod.engine.fol2sat.FOL2BoolTranslator$3 r0;
        kodkod.engine.bool.BooleanMatrix r3, $r8, $r10, $r13, $r16, $r17, $r19, $r20;
        kodkod.ast.operator.ExprOperator $r5;
        java.lang.Object $r2, $r7, $r9, $r12, $r15, $r18;

        r0 := @this: kodkod.engine.fol2sat.FOL2BoolTranslator$3;

        r1 := @parameter0: kodkod.ast.BinaryExpression;

        $r2 = virtualinvoke r0.<kodkod.engine.fol2sat.FOL2BoolTranslator$3: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.engine.bool.BooleanMatrix) $r2;

        if r3 == null goto label1;

        return r3;

     label1:
        $r4 = staticinvoke <kodkod.engine.fol2sat.FOL2BoolTranslator$3: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator()>();

        $r5 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.operator.ExprOperator op()>();

        $i0 = virtualinvoke $r5.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        $i1 = $r4[$i0];

        tableswitch($i1)
        {
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label2;
            default: goto label4;
        };

     label2:
        $r6 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (kodkod.engine.bool.BooleanMatrix) $r7;

        $r9 = virtualinvoke r0.<kodkod.engine.fol2sat.FOL2BoolTranslator$3: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, $r8);

        $r10 = (kodkod.engine.bool.BooleanMatrix) $r9;

        return $r10;

     label3:
        $r11 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        $r12 = virtualinvoke $r11.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r13 = (kodkod.engine.bool.BooleanMatrix) $r12;

        $r14 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right()>();

        $r15 = virtualinvoke $r14.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r16 = (kodkod.engine.bool.BooleanMatrix) $r15;

        $r17 = virtualinvoke $r13.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix or(kodkod.engine.bool.BooleanMatrix)>($r16);

        $r18 = virtualinvoke r0.<kodkod.engine.fol2sat.FOL2BoolTranslator$3: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, $r17);

        $r19 = (kodkod.engine.bool.BooleanMatrix) $r18;

        return $r19;

     label4:
        $r20 = specialinvoke r0.<kodkod.engine.fol2sat.FOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.BinaryExpression)>(r1);

        return $r20;
    }

    public final kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Comprehension)
    {
        kodkod.ast.Formula $r4;
        kodkod.ast.Expression $r6;
        kodkod.ast.Decls $r5;
        kodkod.engine.fol2sat.FOL2BoolTranslator$3 r0;
        kodkod.engine.bool.BooleanMatrix r3, $r8, $r10;
        java.lang.Object $r2, $r9;
        kodkod.ast.Comprehension r1, $r7;

        r0 := @this: kodkod.engine.fol2sat.FOL2BoolTranslator$3;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $r2 = virtualinvoke r0.<kodkod.engine.fol2sat.FOL2BoolTranslator$3: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.engine.bool.BooleanMatrix) $r2;

        if r3 == null goto label1;

        $r10 = r3;

        goto label2;

     label1:
        $r4 = <kodkod.ast.Formula: kodkod.ast.Formula TRUE>;

        $r5 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Decls decls()>();

        $r6 = virtualinvoke $r4.<kodkod.ast.Formula: kodkod.ast.Expression comprehension(kodkod.ast.Decls)>($r5);

        $r7 = (kodkod.ast.Comprehension) $r6;

        $r8 = specialinvoke r0.<kodkod.engine.fol2sat.FOL2BoolTranslator: kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.Comprehension)>($r7);

        $r9 = virtualinvoke r0.<kodkod.engine.fol2sat.FOL2BoolTranslator$3: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, $r8);

        $r10 = (kodkod.engine.bool.BooleanMatrix) $r9;

     label2:
        return $r10;
    }

    public kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.IfExpression)
    {
        kodkod.ast.Expression $r4, $r7;
        kodkod.engine.fol2sat.FOL2BoolTranslator$3 r0;
        kodkod.engine.bool.BooleanMatrix r3, $r6, $r9, $r10, $r12;
        java.lang.Object $r2, $r5, $r8, $r11;
        kodkod.ast.IfExpression r1;

        r0 := @this: kodkod.engine.fol2sat.FOL2BoolTranslator$3;

        r1 := @parameter0: kodkod.ast.IfExpression;

        $r2 = virtualinvoke r0.<kodkod.engine.fol2sat.FOL2BoolTranslator$3: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.engine.bool.BooleanMatrix) $r2;

        if r3 == null goto label1;

        $r12 = r3;

        goto label2;

     label1:
        $r4 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression thenExpr()>();

        $r5 = virtualinvoke $r4.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (kodkod.engine.bool.BooleanMatrix) $r5;

        $r7 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression elseExpr()>();

        $r8 = virtualinvoke $r7.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r9 = (kodkod.engine.bool.BooleanMatrix) $r8;

        $r10 = virtualinvoke $r6.<kodkod.engine.bool.BooleanMatrix: kodkod.engine.bool.BooleanMatrix or(kodkod.engine.bool.BooleanMatrix)>($r9);

        $r11 = virtualinvoke r0.<kodkod.engine.fol2sat.FOL2BoolTranslator$3: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, $r10);

        $r12 = (kodkod.engine.bool.BooleanMatrix) $r11;

     label2:
        return $r12;
    }

    public kodkod.engine.bool.BooleanMatrix visit(kodkod.ast.IntToExprCast)
    {
        kodkod.engine.bool.BooleanConstant $r14, $r18;
        kodkod.engine.fol2sat.LeafInterpreter $r5, $r7, $r11, $r13, $r17;
        int[] $r3;
        kodkod.engine.bool.Dimensions $r9;
        boolean $z0, $z1;
        kodkod.engine.bool.BooleanFactory $r6;
        kodkod.ast.Expression $r19;
        java.lang.StringBuilder $r27, $r30;
        kodkod.ast.operator.IntCastOperator $r4, $r26;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i7, $i8, $i9, i10, $i12, $i14;
        kodkod.instance.Universe $r8;
        java.lang.String $r28;
        kodkod.util.ints.IntSet $r12;
        kodkod.ast.IntToExprCast r1;
        java.lang.IllegalArgumentException $r31;
        kodkod.engine.fol2sat.FOL2BoolTranslator$3 r0;
        kodkod.engine.bool.BooleanMatrix $r10, $r16, $r21, $r23, r29;
        java.lang.Object $r2, $r15, $r20, $r22;

        r0 := @this: kodkod.engine.fol2sat.FOL2BoolTranslator$3;

        r1 := @parameter0: kodkod.ast.IntToExprCast;

        $r2 = virtualinvoke r0.<kodkod.engine.fol2sat.FOL2BoolTranslator$3: java.lang.Object lookup(kodkod.ast.Node)>(r1);

        r29 = (kodkod.engine.bool.BooleanMatrix) $r2;

        if r29 == null goto label1;

        return r29;

     label1:
        $r3 = staticinvoke <kodkod.engine.fol2sat.FOL2BoolTranslator$3: int[] $SWITCH_TABLE$kodkod$ast$operator$IntCastOperator()>();

        $r4 = virtualinvoke r1.<kodkod.ast.IntToExprCast: kodkod.ast.operator.IntCastOperator op()>();

        $i0 = virtualinvoke $r4.<kodkod.ast.operator.IntCastOperator: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 0: goto label2;
            case 1: goto label3;
            default: goto label8;
        };

     label2:
        $r19 = <kodkod.ast.Expression: kodkod.ast.Expression INTS>;

        $r20 = virtualinvoke $r19.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r21 = (kodkod.engine.bool.BooleanMatrix) $r20;

        $r22 = virtualinvoke r0.<kodkod.engine.fol2sat.FOL2BoolTranslator$3: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, $r21);

        $r23 = (kodkod.engine.bool.BooleanMatrix) $r22;

        return $r23;

     label3:
        $r5 = staticinvoke <kodkod.engine.fol2sat.FOL2BoolTranslator: kodkod.engine.fol2sat.LeafInterpreter access$31(kodkod.engine.fol2sat.FOL2BoolTranslator)>(r0);

        $r6 = virtualinvoke $r5.<kodkod.engine.fol2sat.LeafInterpreter: kodkod.engine.bool.BooleanFactory factory()>();

        $r7 = staticinvoke <kodkod.engine.fol2sat.FOL2BoolTranslator: kodkod.engine.fol2sat.LeafInterpreter access$31(kodkod.engine.fol2sat.FOL2BoolTranslator)>(r0);

        $r8 = virtualinvoke $r7.<kodkod.engine.fol2sat.LeafInterpreter: kodkod.instance.Universe universe()>();

        $i2 = virtualinvoke $r8.<kodkod.instance.Universe: int size()>();

        $r9 = staticinvoke <kodkod.engine.bool.Dimensions: kodkod.engine.bool.Dimensions square(int,int)>($i2, 1);

        $r10 = virtualinvoke $r6.<kodkod.engine.bool.BooleanFactory: kodkod.engine.bool.BooleanMatrix matrix(kodkod.engine.bool.Dimensions)>($r9);

        $r11 = staticinvoke <kodkod.engine.fol2sat.FOL2BoolTranslator: kodkod.engine.fol2sat.LeafInterpreter access$31(kodkod.engine.fol2sat.FOL2BoolTranslator)>(r0);

        $r12 = virtualinvoke $r11.<kodkod.engine.fol2sat.LeafInterpreter: kodkod.util.ints.IntSet ints()>();

        $i3 = virtualinvoke $r6.<kodkod.engine.bool.BooleanFactory: int bitwidth()>();

        i4 = $i3 - 1;

        i10 = 0;

        goto label6;

     label4:
        i5 = 1 << i10;

        $z0 = interfaceinvoke $r12.<kodkod.util.ints.IntSet: boolean contains(int)>(i5);

        if $z0 == 0 goto label5;

        $r13 = staticinvoke <kodkod.engine.fol2sat.FOL2BoolTranslator: kodkod.engine.fol2sat.LeafInterpreter access$31(kodkod.engine.fol2sat.FOL2BoolTranslator)>(r0);

        $i6 = virtualinvoke $r13.<kodkod.engine.fol2sat.LeafInterpreter: int interpret(int)>(i5);

        $r14 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        virtualinvoke $r10.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>($i6, $r14);

     label5:
        i10 = i10 + 1;

     label6:
        if i10 < i4 goto label4;

        $i12 = (int) -1;

        $i7 = $i12 << i4;

        $z1 = interfaceinvoke $r12.<kodkod.util.ints.IntSet: boolean contains(int)>($i7);

        if $z1 == 0 goto label7;

        $r17 = staticinvoke <kodkod.engine.fol2sat.FOL2BoolTranslator: kodkod.engine.fol2sat.LeafInterpreter access$31(kodkod.engine.fol2sat.FOL2BoolTranslator)>(r0);

        $i14 = (int) -1;

        $i8 = $i14 << i4;

        $i9 = virtualinvoke $r17.<kodkod.engine.fol2sat.LeafInterpreter: int interpret(int)>($i8);

        $r18 = <kodkod.engine.bool.BooleanConstant: kodkod.engine.bool.BooleanConstant TRUE>;

        virtualinvoke $r10.<kodkod.engine.bool.BooleanMatrix: void set(int,kodkod.engine.bool.BooleanValue)>($i9, $r18);

     label7:
        $r15 = virtualinvoke r0.<kodkod.engine.fol2sat.FOL2BoolTranslator$3: java.lang.Object cache(kodkod.ast.Node,java.lang.Object)>(r1, $r10);

        $r16 = (kodkod.engine.bool.BooleanMatrix) $r15;

        return $r16;

     label8:
        $r31 = new java.lang.IllegalArgumentException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unknown operator: ");

        $r26 = virtualinvoke r1.<kodkod.ast.IntToExprCast: kodkod.ast.operator.IntCastOperator op()>();

        $r27 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r31;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator()
    {
        java.lang.NoSuchFieldError $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        int[] $r0, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        kodkod.ast.operator.ExprOperator[] $r1;
        kodkod.ast.operator.ExprOperator $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        $r0 = <kodkod.engine.fol2sat.FOL2BoolTranslator$3: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator CLOSURE>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i1] = 7;

     label03:
        goto label05;

     label04:
        $r20 := @caughtexception;

     label05:
        $r4 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator DIFFERENCE>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i2] = 4;

     label06:
        goto label08;

     label07:
        $r19 := @caughtexception;

     label08:
        $r5 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator INTERSECTION>;

        $i3 = virtualinvoke $r5.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i3] = 1;

     label09:
        goto label11;

     label10:
        $r18 := @caughtexception;

     label11:
        $r6 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator JOIN>;

        $i4 = virtualinvoke $r6.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i4] = 5;

     label12:
        goto label14;

     label13:
        $r17 := @caughtexception;

     label14:
        $r7 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator OVERRIDE>;

        $i5 = virtualinvoke $r7.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i5] = 2;

     label15:
        goto label17;

     label16:
        $r16 := @caughtexception;

     label17:
        $r8 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator PRODUCT>;

        $i6 = virtualinvoke $r8.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i6] = 3;

     label18:
        goto label20;

     label19:
        $r15 := @caughtexception;

     label20:
        $r9 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator REFLEXIVE_CLOSURE>;

        $i7 = virtualinvoke $r9.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i7] = 8;

     label21:
        goto label23;

     label22:
        $r14 := @caughtexception;

     label23:
        $r10 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator TRANSPOSE>;

        $i8 = virtualinvoke $r10.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i8] = 6;

     label24:
        goto label26;

     label25:
        $r13 := @caughtexception;

     label26:
        $r11 = <kodkod.ast.operator.ExprOperator: kodkod.ast.operator.ExprOperator UNION>;

        $i9 = virtualinvoke $r11.<kodkod.ast.operator.ExprOperator: int ordinal()>();

        r2[$i9] = 0;

     label27:
        goto label29;

     label28:
        $r12 := @caughtexception;

     label29:
        <kodkod.engine.fol2sat.FOL2BoolTranslator$3: int[] $SWITCH_TABLE$kodkod$ast$operator$ExprOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
        catch java.lang.NoSuchFieldError from label11 to label12 with label13;
        catch java.lang.NoSuchFieldError from label14 to label15 with label16;
        catch java.lang.NoSuchFieldError from label17 to label18 with label19;
        catch java.lang.NoSuchFieldError from label20 to label21 with label22;
        catch java.lang.NoSuchFieldError from label23 to label24 with label25;
        catch java.lang.NoSuchFieldError from label26 to label27 with label28;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$operator$IntCastOperator()
    {
        kodkod.ast.operator.IntCastOperator[] $r1;
        java.lang.NoSuchFieldError $r5, $r6;
        int[] $r0, r2;
        int $i0, $i1, $i2;
        kodkod.ast.operator.IntCastOperator $r3, $r4;

        $r0 = <kodkod.engine.fol2sat.FOL2BoolTranslator$3: int[] $SWITCH_TABLE$kodkod$ast$operator$IntCastOperator>;

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r1 = staticinvoke <kodkod.ast.operator.IntCastOperator: kodkod.ast.operator.IntCastOperator[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label2:
        $r3 = <kodkod.ast.operator.IntCastOperator: kodkod.ast.operator.IntCastOperator BITSETCAST>;

        $i1 = virtualinvoke $r3.<kodkod.ast.operator.IntCastOperator: int ordinal()>();

        r2[$i1] = 1;

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        $r4 = <kodkod.ast.operator.IntCastOperator: kodkod.ast.operator.IntCastOperator INTCAST>;

        $i2 = virtualinvoke $r4.<kodkod.ast.operator.IntCastOperator: int ordinal()>();

        r2[$i2] = 0;

     label6:
        goto label8;

     label7:
        $r5 := @caughtexception;

     label8:
        <kodkod.engine.fol2sat.FOL2BoolTranslator$3: int[] $SWITCH_TABLE$kodkod$ast$operator$IntCastOperator> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label2 to label3 with label4;
        catch java.lang.NoSuchFieldError from label5 to label6 with label7;
    }
}
