public class arq.rset extends arq.cmdline.CmdARQ
{
    arq.cmdline.ModResultsIn modInput;
    arq.cmdline.ModResultsOut modOutput;
    static java.lang.String usage;

    public static transient void main(java.lang.String[])
    {
        java.lang.String[] r1;
        arq.rset $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new arq.rset;

        specialinvoke $r0.<arq.rset: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<arq.rset: void mainRun()>();

        return;
    }

    public void <init>(java.lang.String[])
    {
        arq.cmdline.ModResultsIn $r2, $r4;
        arq.rset r0;
        java.lang.String[] r1;
        arq.cmdline.ModResultsOut $r3, $r5;

        r0 := @this: arq.rset;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CmdARQ: void <init>(java.lang.String[])>(r1);

        $r2 = new arq.cmdline.ModResultsIn;

        specialinvoke $r2.<arq.cmdline.ModResultsIn: void <init>()>();

        r0.<arq.rset: arq.cmdline.ModResultsIn modInput> = $r2;

        $r3 = new arq.cmdline.ModResultsOut;

        specialinvoke $r3.<arq.cmdline.ModResultsOut: void <init>()>();

        r0.<arq.rset: arq.cmdline.ModResultsOut modOutput> = $r3;

        $r4 = r0.<arq.rset: arq.cmdline.ModResultsIn modInput>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r4);

        $r5 = r0.<arq.rset: arq.cmdline.ModResultsOut modOutput>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r5);

        return;
    }

    protected void processModulesAndArgs()
    {
        arq.rset r0;

        r0 := @this: arq.rset;

        specialinvoke r0.<arq.cmdline.CmdARQ: void processModulesAndArgs()>();

        return;
    }

    protected java.lang.String getSummary()
    {
        java.lang.String $r0;
        arq.rset r1;

        r1 := @this: arq.rset;

        $r0 = <arq.rset: java.lang.String usage>;

        return $r0;
    }

    protected void exec()
    {
        arq.cmdline.ModResultsIn $r1;
        arq.rset r0;
        arq.cmdline.ModResultsOut $r3;
        com.hp.hpl.jena.query.ResultSet $r2;

        r0 := @this: arq.rset;

        $r1 = r0.<arq.rset: arq.cmdline.ModResultsIn modInput>;

        $r2 = virtualinvoke $r1.<arq.cmdline.ModResultsIn: com.hp.hpl.jena.query.ResultSet getResultSet()>();

        $r3 = r0.<arq.rset: arq.cmdline.ModResultsOut modOutput>;

        virtualinvoke $r3.<arq.cmdline.ModResultsOut: void printResultSet(com.hp.hpl.jena.query.ResultSet,com.hp.hpl.jena.sparql.core.Prologue)>($r2, null);

        return;
    }

    protected java.lang.String getCommandName()
    {
        arq.rset r0;

        r0 := @this: arq.rset;

        return "rset";
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.Class $r1;
        java.lang.String $r2, $r5;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Larq/rset;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [--in syntax] [--out syntax] [--file FILE | FILE ]");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <arq.rset: java.lang.String usage> = $r5;

        return;
    }
}
