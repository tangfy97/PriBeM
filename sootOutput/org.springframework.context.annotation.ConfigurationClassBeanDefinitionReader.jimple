class org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader extends java.lang.Object
{
    private static final java.lang.String CONFIGURATION_CLASS_FULL;
    private static final java.lang.String CONFIGURATION_CLASS_LITE;
    private static final java.lang.String CONFIGURATION_CLASS_ATTRIBUTE;
    private static final org.apache.commons.logging.Log logger;
    private final org.springframework.beans.factory.support.BeanDefinitionRegistry registry;
    private final org.springframework.beans.factory.parsing.SourceExtractor sourceExtractor;
    private final org.springframework.beans.factory.parsing.ProblemReporter problemReporter;
    private final org.springframework.core.type.classreading.MetadataReaderFactory metadataReaderFactory;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r1;
        java.lang.String $r0;

        <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: java.lang.String CONFIGURATION_CLASS_LITE> = "lite";

        <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: java.lang.String CONFIGURATION_CLASS_FULL> = "full";

        $r0 = staticinvoke <org.springframework.core.Conventions: java.lang.String getQualifiedAttributeName(java.lang.Class,java.lang.String)>(class "Lorg/springframework/context/annotation/ConfigurationClassPostProcessor;", "configurationClass");

        <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: java.lang.String CONFIGURATION_CLASS_ATTRIBUTE> = $r0;

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/context/annotation/ConfigurationClassBeanDefinitionReader;");

        <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.apache.commons.logging.Log logger> = $r1;

        return;
    }

    public void <init>(org.springframework.beans.factory.support.BeanDefinitionRegistry, org.springframework.beans.factory.parsing.SourceExtractor, org.springframework.beans.factory.parsing.ProblemReporter, org.springframework.core.type.classreading.MetadataReaderFactory)
    {
        org.springframework.core.type.classreading.MetadataReaderFactory r4;
        org.springframework.beans.factory.parsing.SourceExtractor r2;
        org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader r0;
        org.springframework.beans.factory.support.BeanDefinitionRegistry r1;
        org.springframework.beans.factory.parsing.ProblemReporter r3;

        r0 := @this: org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader;

        r1 := @parameter0: org.springframework.beans.factory.support.BeanDefinitionRegistry;

        r2 := @parameter1: org.springframework.beans.factory.parsing.SourceExtractor;

        r3 := @parameter2: org.springframework.beans.factory.parsing.ProblemReporter;

        r4 := @parameter3: org.springframework.core.type.classreading.MetadataReaderFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry registry> = r1;

        r0.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.beans.factory.parsing.SourceExtractor sourceExtractor> = r2;

        r0.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.beans.factory.parsing.ProblemReporter problemReporter> = r3;

        r0.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.core.type.classreading.MetadataReaderFactory metadataReaderFactory> = r4;

        return;
    }

    public void loadBeanDefinitions(java.util.Set)
    {
        java.util.Iterator $r1;
        org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader r4;
        java.util.Set r0;
        java.lang.Object $r2;
        org.springframework.context.'annotation'.ConfigurationClass r3;
        boolean $z0;

        r4 := @this: org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader;

        r0 := @parameter0: java.util.Set;

        $r1 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.springframework.context.'annotation'.ConfigurationClass) $r2;

        specialinvoke r4.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: void loadBeanDefinitionsForConfigurationClass(org.springframework.context.'annotation'.ConfigurationClass)>(r3);

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private void loadBeanDefinitionsForConfigurationClass(org.springframework.context.'annotation'.ConfigurationClass)
    {
        org.springframework.context.'annotation'.ConfigurationClassMethod r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.springframework.context.'annotation'.ConfigurationClass r1;
        org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader r0;
        java.util.Map $r6;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader;

        r1 := @parameter0: org.springframework.context.'annotation'.ConfigurationClass;

        specialinvoke r0.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: void doLoadBeanDefinitionForConfigurationClassIfNecessary(org.springframework.context.'annotation'.ConfigurationClass)>(r1);

        $r2 = virtualinvoke r1.<org.springframework.context.'annotation'.ConfigurationClass: java.util.Set getMethods()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.springframework.context.'annotation'.ConfigurationClassMethod) $r4;

        specialinvoke r0.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: void loadBeanDefinitionsForModelMethod(org.springframework.context.'annotation'.ConfigurationClassMethod)>(r5);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r6 = virtualinvoke r1.<org.springframework.context.'annotation'.ConfigurationClass: java.util.Map getImportedResources()>();

        specialinvoke r0.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: void loadBeanDefinitionsFromImportedResources(java.util.Map)>($r6);

        return;
    }

    private void doLoadBeanDefinitionForConfigurationClassIfNecessary(org.springframework.context.'annotation'.ConfigurationClass)
    {
        java.lang.IllegalStateException $r20;
        java.lang.Object[] $r16;
        org.springframework.beans.factory.parsing.ProblemReporter $r11;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r13;
        org.springframework.context.'annotation'.ConfigurationClass r0;
        org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader r5;
        org.springframework.core.type.classreading.MetadataReader $r8;
        java.lang.String $r1, $r4, $r14, $r18, $r23;
        boolean $z0, $z1;
        org.springframework.core.io.Resource $r12;
        org.springframework.core.type.AnnotationMetadata $r3, $r9;
        java.io.IOException $r19;
        org.springframework.beans.factory.support.GenericBeanDefinition $r2;
        org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader$InvalidConfigurationImportProblem $r10;
        org.springframework.core.type.classreading.MetadataReaderFactory $r6, $r7;
        org.apache.commons.logging.Log $r15, $r17;
        java.lang.StringBuilder $r21, $r22;

        r5 := @this: org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader;

        r0 := @parameter0: org.springframework.context.'annotation'.ConfigurationClass;

        $r1 = virtualinvoke r0.<org.springframework.context.'annotation'.ConfigurationClass: java.lang.String getBeanName()>();

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new org.springframework.beans.factory.support.GenericBeanDefinition;

        specialinvoke $r2.<org.springframework.beans.factory.support.GenericBeanDefinition: void <init>()>();

        $r3 = virtualinvoke r0.<org.springframework.context.'annotation'.ConfigurationClass: org.springframework.core.type.AnnotationMetadata getMetadata()>();

        $r4 = interfaceinvoke $r3.<org.springframework.core.type.AnnotationMetadata: java.lang.String getClassName()>();

        virtualinvoke $r2.<org.springframework.beans.factory.support.GenericBeanDefinition: void setBeanClassName(java.lang.String)>($r4);

        $r6 = r5.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.core.type.classreading.MetadataReaderFactory metadataReaderFactory>;

        $z0 = staticinvoke <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: boolean checkConfigurationClassCandidate(org.springframework.beans.factory.config.BeanDefinition,org.springframework.core.type.classreading.MetadataReaderFactory)>($r2, $r6);

        if $z0 == 0 goto label2;

        $r13 = r5.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $r14 = staticinvoke <org.springframework.beans.factory.support.BeanDefinitionReaderUtils: java.lang.String registerWithGeneratedName(org.springframework.beans.factory.support.AbstractBeanDefinition,org.springframework.beans.factory.support.BeanDefinitionRegistry)>($r2, $r13);

        virtualinvoke r0.<org.springframework.context.'annotation'.ConfigurationClass: void setBeanName(java.lang.String)>($r14);

        $r15 = <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label5;

        $r17 = <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = $r14;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Registered bean definition for imported @Configuration class %s", $r16);

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r18);

        goto label5;

     label2:
        $r7 = r5.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.core.type.classreading.MetadataReaderFactory metadataReaderFactory>;

        $r8 = interfaceinvoke $r7.<org.springframework.core.type.classreading.MetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(java.lang.String)>($r4);

        $r9 = interfaceinvoke $r8.<org.springframework.core.type.classreading.MetadataReader: org.springframework.core.type.AnnotationMetadata getAnnotationMetadata()>();

        $r11 = r5.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.beans.factory.parsing.ProblemReporter problemReporter>;

        $r10 = new org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader$InvalidConfigurationImportProblem;

        $r12 = interfaceinvoke $r8.<org.springframework.core.type.classreading.MetadataReader: org.springframework.core.io.Resource getResource()>();

        specialinvoke $r10.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader$InvalidConfigurationImportProblem: void <init>(java.lang.String,org.springframework.core.io.Resource,org.springframework.core.type.AnnotationMetadata)>($r4, $r12, $r9);

        interfaceinvoke $r11.<org.springframework.beans.factory.parsing.ProblemReporter: void error(org.springframework.beans.factory.parsing.Problem)>($r10);

     label3:
        goto label5;

     label4:
        $r19 := @caughtexception;

        $r20 = new java.lang.IllegalStateException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not create MetadataReader for class ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r23);

        throw $r20;

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private void loadBeanDefinitionsForModelMethod(org.springframework.context.'annotation'.ConfigurationClassMethod)
    {
        org.springframework.beans.factory.parsing.SourceExtractor $r6;
        java.util.Map $r15, $r38, $r57, $r62, $r67;
        org.springframework.core.io.Resource $r4, $r7;
        org.springframework.core.type.AnnotationMetadata $r31, $r42, $r59;
        java.lang.Object[] $r40, $r73;
        java.util.ArrayList $r16;
        org.springframework.beans.factory.config.BeanDefinitionHolder $r45, $r48;
        org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader r5;
        org.springframework.beans.factory.config.BeanDefinition $r71, r85;
        java.lang.String $r9, $r10, $r12, $r14, r22, $r28, $r30, $r33, $r37, $r43, $r44, $r50, $r53, $r54, $r56, $r61, $r66, $r75, $r77, r78, $r80;
        org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition $r3;
        org.springframework.context.'annotation'.ConfigurationClassMethod r0;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r25, $r26, $r39, $r47, $r70;
        org.springframework.context.'annotation'.ConfigurationClass $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        org.springframework.core.type.MethodMetadata $r2, $r21;
        java.util.Collection $r20;
        org.springframework.beans.factory.'annotation'.Autowire $r83;
        java.util.List $r19;
        java.lang.String[] $r18, r81;
        int $i0, $i1, $i2;
        java.lang.Boolean $r11, $r64, $r69;
        java.util.Iterator $r23;
        org.springframework.context.'annotation'.ScopedProxyMode $r46, $r52, r84, $r86;
        java.lang.Object $r8, $r17, $r24, $r34, $r35, $r49, $r51, $r58, $r63, $r68, $r76, $r82;
        java.lang.Class $r13, $r27, $r29, $r32, $r36, $r55, $r60, $r65, $r79;
        org.apache.commons.logging.Log $r41, $r72, $r74, $r87;

        r5 := @this: org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader;

        r0 := @parameter0: org.springframework.context.'annotation'.ConfigurationClassMethod;

        $r1 = virtualinvoke r0.<org.springframework.context.'annotation'.ConfigurationClassMethod: org.springframework.context.'annotation'.ConfigurationClass getConfigurationClass()>();

        $r2 = virtualinvoke r0.<org.springframework.context.'annotation'.ConfigurationClassMethod: org.springframework.core.type.MethodMetadata getMetadata()>();

        $r3 = new org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition;

        specialinvoke $r3.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition: void <init>(org.springframework.context.'annotation'.ConfigurationClass)>($r1);

        $r4 = virtualinvoke $r1.<org.springframework.context.'annotation'.ConfigurationClass: org.springframework.core.io.Resource getResource()>();

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setResource(org.springframework.core.io.Resource)>($r4);

        $r6 = r5.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.beans.factory.parsing.SourceExtractor sourceExtractor>;

        $r7 = virtualinvoke $r1.<org.springframework.context.'annotation'.ConfigurationClass: org.springframework.core.io.Resource getResource()>();

        $r8 = interfaceinvoke $r6.<org.springframework.beans.factory.parsing.SourceExtractor: java.lang.Object extractSource(java.lang.Object,org.springframework.core.io.Resource)>($r2, $r7);

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setSource(java.lang.Object)>($r8);

        $r9 = virtualinvoke $r1.<org.springframework.context.'annotation'.ConfigurationClass: java.lang.String getBeanName()>();

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setFactoryBeanName(java.lang.String)>($r9);

        $r10 = interfaceinvoke $r2.<org.springframework.core.type.MethodMetadata: java.lang.String getMethodName()>();

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setUniqueFactoryMethodName(java.lang.String)>($r10);

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setAutowireMode(int)>(3);

        $r12 = <org.springframework.beans.factory.'annotation'.RequiredAnnotationBeanPostProcessor: java.lang.String SKIP_REQUIRED_CHECK_ATTRIBUTE>;

        $r11 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setAttribute(java.lang.String,java.lang.Object)>($r12, $r11);

        $r13 = class "Lorg/springframework/context/annotation/Bean;";

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = interfaceinvoke $r2.<org.springframework.core.type.MethodMetadata: java.util.Map getAnnotationAttributes(java.lang.String)>($r14);

        $r16 = new java.util.ArrayList;

        $r17 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>("name");

        $r18 = (java.lang.String[]) $r17;

        $r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r18);

        $r20 = (java.util.Collection) $r19;

        specialinvoke $r16.<java.util.ArrayList: void <init>(java.util.Collection)>($r20);

        $i0 = interfaceinvoke $r16.<java.util.List: int size()>();

        if $i0 <= 0 goto label01;

        $r76 = interfaceinvoke $r16.<java.util.List: java.lang.Object remove(int)>(0);

        $r77 = (java.lang.String) $r76;

        goto label02;

     label01:
        $r21 = virtualinvoke r0.<org.springframework.context.'annotation'.ConfigurationClassMethod: org.springframework.core.type.MethodMetadata getMetadata()>();

        $r77 = interfaceinvoke $r21.<org.springframework.core.type.MethodMetadata: java.lang.String getMethodName()>();

     label02:
        r22 = $r77;

        $r23 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>();

        goto label04;

     label03:
        $r24 = interfaceinvoke $r23.<java.util.Iterator: java.lang.Object next()>();

        r78 = (java.lang.String) $r24;

        $r25 = r5.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        interfaceinvoke $r25.<org.springframework.beans.factory.support.BeanDefinitionRegistry: void registerAlias(java.lang.String,java.lang.String)>(r22, r78);

     label04:
        $z0 = interfaceinvoke $r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label03;

        $r26 = r5.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $z1 = interfaceinvoke $r26.<org.springframework.beans.factory.support.BeanDefinitionRegistry: boolean containsBeanDefinition(java.lang.String)>(r22);

        if $z1 == 0 goto label06;

        $r70 = r5.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $r71 = interfaceinvoke $r70.<org.springframework.beans.factory.support.BeanDefinitionRegistry: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition(java.lang.String)>(r22);

        $z9 = $r71 instanceof org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader$ConfigurationClassBeanDefinition;

        if $z9 != 0 goto label06;

        $r72 = <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $z10 = interfaceinvoke $r72.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z10 == 0 goto label05;

        $r74 = <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $r73 = newarray (java.lang.Object)[2];

        $r73[0] = r0;

        $r73[1] = r22;

        $r75 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Skipping loading bean definition for %s: a definition for bean \'%s\' already exists. This is likely due to an override in XML.", $r73);

        interfaceinvoke $r74.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r75);

     label05:
        return;

     label06:
        $r27 = class "Lorg/springframework/context/annotation/Primary;";

        $r28 = virtualinvoke $r27.<java.lang.Class: java.lang.String getName()>();

        $z2 = interfaceinvoke $r2.<org.springframework.core.type.MethodMetadata: boolean isAnnotated(java.lang.String)>($r28);

        if $z2 == 0 goto label07;

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setPrimary(boolean)>(1);

     label07:
        $r29 = class "Lorg/springframework/context/annotation/Lazy;";

        $r30 = virtualinvoke $r29.<java.lang.Class: java.lang.String getName()>();

        $z3 = interfaceinvoke $r2.<org.springframework.core.type.MethodMetadata: boolean isAnnotated(java.lang.String)>($r30);

        if $z3 == 0 goto label08;

        $r65 = class "Lorg/springframework/context/annotation/Lazy;";

        $r66 = virtualinvoke $r65.<java.lang.Class: java.lang.String getName()>();

        $r67 = interfaceinvoke $r2.<org.springframework.core.type.MethodMetadata: java.util.Map getAnnotationAttributes(java.lang.String)>($r66);

        $r68 = interfaceinvoke $r67.<java.util.Map: java.lang.Object get(java.lang.Object)>("value");

        $r69 = (java.lang.Boolean) $r68;

        $z8 = virtualinvoke $r69.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setLazyInit(boolean)>($z8);

        goto label09;

     label08:
        $r31 = virtualinvoke $r1.<org.springframework.context.'annotation'.ConfigurationClass: org.springframework.core.type.AnnotationMetadata getMetadata()>();

        $r32 = class "Lorg/springframework/context/annotation/Lazy;";

        $r33 = virtualinvoke $r32.<java.lang.Class: java.lang.String getName()>();

        $z4 = interfaceinvoke $r31.<org.springframework.core.type.AnnotationMetadata: boolean isAnnotated(java.lang.String)>($r33);

        if $z4 == 0 goto label09;

        $r59 = virtualinvoke $r1.<org.springframework.context.'annotation'.ConfigurationClass: org.springframework.core.type.AnnotationMetadata getMetadata()>();

        $r60 = class "Lorg/springframework/context/annotation/Lazy;";

        $r61 = virtualinvoke $r60.<java.lang.Class: java.lang.String getName()>();

        $r62 = interfaceinvoke $r59.<org.springframework.core.type.AnnotationMetadata: java.util.Map getAnnotationAttributes(java.lang.String)>($r61);

        $r63 = interfaceinvoke $r62.<java.util.Map: java.lang.Object get(java.lang.Object)>("value");

        $r64 = (java.lang.Boolean) $r63;

        $z7 = virtualinvoke $r64.<java.lang.Boolean: boolean booleanValue()>();

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setLazyInit(boolean)>($z7);

     label09:
        $r79 = class "Lorg/springframework/context/annotation/DependsOn;";

        $r80 = virtualinvoke $r79.<java.lang.Class: java.lang.String getName()>();

        $z11 = interfaceinvoke $r2.<org.springframework.core.type.MethodMetadata: boolean isAnnotated(java.lang.String)>($r80);

        if $z11 == 0 goto label10;

        $r55 = class "Lorg/springframework/context/annotation/DependsOn;";

        $r56 = virtualinvoke $r55.<java.lang.Class: java.lang.String getName()>();

        $r57 = interfaceinvoke $r2.<org.springframework.core.type.MethodMetadata: java.util.Map getAnnotationAttributes(java.lang.String)>($r56);

        $r58 = interfaceinvoke $r57.<java.util.Map: java.lang.Object get(java.lang.Object)>("value");

        r81 = (java.lang.String[]) $r58;

        $i2 = lengthof r81;

        if $i2 <= 0 goto label10;

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setDependsOn(java.lang.String[])>(r81);

     label10:
        $r82 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>("autowire");

        $r83 = (org.springframework.beans.factory.'annotation'.Autowire) $r82;

        $z12 = virtualinvoke $r83.<org.springframework.beans.factory.'annotation'.Autowire: boolean isAutowire()>();

        if $z12 == 0 goto label11;

        $i1 = virtualinvoke $r83.<org.springframework.beans.factory.'annotation'.Autowire: int value()>();

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setAutowireMode(int)>($i1);

     label11:
        $r34 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>("initMethod");

        $r54 = (java.lang.String) $r34;

        $z5 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r54);

        if $z5 == 0 goto label12;

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setInitMethodName(java.lang.String)>($r54);

     label12:
        $r35 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>("destroyMethod");

        $r53 = (java.lang.String) $r35;

        $z6 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r53);

        if $z6 == 0 goto label13;

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setDestroyMethodName(java.lang.String)>($r53);

     label13:
        r84 = <org.springframework.context.'annotation'.ScopedProxyMode: org.springframework.context.'annotation'.ScopedProxyMode NO>;

        $r36 = class "Lorg/springframework/context/annotation/Scope;";

        $r37 = virtualinvoke $r36.<java.lang.Class: java.lang.String getName()>();

        $r38 = interfaceinvoke $r2.<org.springframework.core.type.MethodMetadata: java.util.Map getAnnotationAttributes(java.lang.String)>($r37);

        if $r38 == null goto label14;

        $r49 = interfaceinvoke $r38.<java.util.Map: java.lang.Object get(java.lang.Object)>("value");

        $r50 = (java.lang.String) $r49;

        virtualinvoke $r3.<org.springframework.beans.factory.support.RootBeanDefinition: void setScope(java.lang.String)>($r50);

        $r51 = interfaceinvoke $r38.<java.util.Map: java.lang.Object get(java.lang.Object)>("proxyMode");

        r84 = (org.springframework.context.'annotation'.ScopedProxyMode) $r51;

        $r52 = <org.springframework.context.'annotation'.ScopedProxyMode: org.springframework.context.'annotation'.ScopedProxyMode DEFAULT>;

        if r84 != $r52 goto label14;

        r84 = <org.springframework.context.'annotation'.ScopedProxyMode: org.springframework.context.'annotation'.ScopedProxyMode NO>;

     label14:
        r85 = $r3;

        $r86 = <org.springframework.context.'annotation'.ScopedProxyMode: org.springframework.context.'annotation'.ScopedProxyMode NO>;

        if r84 == $r86 goto label17;

        $r45 = new org.springframework.beans.factory.config.BeanDefinitionHolder;

        specialinvoke $r45.<org.springframework.beans.factory.config.BeanDefinitionHolder: void <init>(org.springframework.beans.factory.config.BeanDefinition,java.lang.String)>($r3, r22);

        $r47 = r5.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $r46 = <org.springframework.context.'annotation'.ScopedProxyMode: org.springframework.context.'annotation'.ScopedProxyMode TARGET_CLASS>;

        if r84 != $r46 goto label15;

        $z13 = 1;

        goto label16;

     label15:
        $z13 = 0;

     label16:
        $r48 = staticinvoke <org.springframework.context.'annotation'.ScopedProxyCreator: org.springframework.beans.factory.config.BeanDefinitionHolder createScopedProxy(org.springframework.beans.factory.config.BeanDefinitionHolder,org.springframework.beans.factory.support.BeanDefinitionRegistry,boolean)>($r45, $r47, $z13);

        r85 = virtualinvoke $r48.<org.springframework.beans.factory.config.BeanDefinitionHolder: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()>();

     label17:
        $r87 = <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $z14 = interfaceinvoke $r87.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z14 == 0 goto label18;

        $r41 = <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $r40 = newarray (java.lang.Object)[2];

        $r42 = virtualinvoke $r1.<org.springframework.context.'annotation'.ConfigurationClass: org.springframework.core.type.AnnotationMetadata getMetadata()>();

        $r43 = interfaceinvoke $r42.<org.springframework.core.type.AnnotationMetadata: java.lang.String getClassName()>();

        $r40[0] = $r43;

        $r40[1] = r22;

        $r44 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Registering bean definition for @Bean method %s.%s()", $r40);

        interfaceinvoke $r41.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r44);

     label18:
        $r39 = r5.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        interfaceinvoke $r39.<org.springframework.beans.factory.support.BeanDefinitionRegistry: void registerBeanDefinition(java.lang.String,org.springframework.beans.factory.config.BeanDefinition)>(r22, r85);

        return;
    }

    private void loadBeanDefinitionsFromImportedResources(java.util.Map)
    {
        java.lang.IllegalStateException $r19;
        java.lang.Object[] $r13;
        java.util.HashMap $r0;
        java.lang.reflect.Constructor $r12;
        org.springframework.beans.factory.support.BeanDefinitionRegistry $r15;
        java.util.Map r1;
        org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader r14;
        java.lang.String r7, $r21, $r24;
        boolean $z0, $z1;
        java.util.Map$Entry r5;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.lang.Class[] $r11;
        java.lang.Exception $r18;
        org.springframework.beans.factory.support.BeanDefinitionReader $r17, r25;
        java.lang.Object $r4, $r6, $r8, $r10, $r16;
        java.lang.Class r9;
        java.lang.StringBuilder $r20, $r22, $r23;

        r14 := @this: org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader;

        r1 := @parameter0: java.util.Map;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label6;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.lang.Class) $r8;

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>(r9);

        if $z0 != 0 goto label5;

     label2:
        $r11 = newarray (java.lang.Class)[1];

        $r11[0] = class "Lorg/springframework/beans/factory/support/BeanDefinitionRegistry;";

        $r12 = virtualinvoke r9.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r11);

        $r13 = newarray (java.lang.Object)[1];

        $r15 = r14.<org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.springframework.beans.factory.support.BeanDefinitionRegistry registry>;

        $r13[0] = $r15;

        $r16 = virtualinvoke $r12.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r13);

        r25 = (org.springframework.beans.factory.support.BeanDefinitionReader) $r16;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r25);

     label3:
        goto label5;

     label4:
        $r18 := @caughtexception;

        $r19 = new java.lang.IllegalStateException;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not instantiate BeanDefinitionReader class [");

        $r21 = virtualinvoke r9.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r24);

        throw $r19;

     label5:
        $r10 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r9);

        $r17 = (org.springframework.beans.factory.support.BeanDefinitionReader) $r10;

        interfaceinvoke $r17.<org.springframework.beans.factory.support.BeanDefinitionReader: int loadBeanDefinitions(java.lang.String)>(r7);

     label6:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static boolean checkConfigurationClassCandidate(org.springframework.beans.factory.config.BeanDefinition, org.springframework.core.type.classreading.MetadataReaderFactory)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition $r12, $r14;
        org.springframework.core.type.classreading.MetadataReader $r11;
        org.springframework.beans.factory.config.BeanDefinition r0;
        java.lang.String $r1, $r3, $r5, $r6, $r8, $r9, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.springframework.core.type.AnnotationMetadata r22;
        java.io.IOException $r16;
        org.springframework.core.type.StandardAnnotationMetadata $r13;
        org.springframework.core.type.classreading.MetadataReaderFactory r10;
        java.lang.Class $r2, $r4, $r7, $r15;
        org.apache.commons.logging.Log $r17, $r19;
        java.lang.StringBuilder $r18, $r20;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        r10 := @parameter1: org.springframework.core.type.classreading.MetadataReaderFactory;

        r22 = null;

        $z0 = r0 instanceof org.springframework.beans.factory.support.AbstractBeanDefinition;

        if $z0 == 0 goto label1;

        $r12 = (org.springframework.beans.factory.support.AbstractBeanDefinition) r0;

        $z4 = virtualinvoke $r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean hasBeanClass()>();

        if $z4 == 0 goto label1;

        $r13 = new org.springframework.core.type.StandardAnnotationMetadata;

        $r14 = (org.springframework.beans.factory.support.AbstractBeanDefinition) r0;

        $r15 = virtualinvoke $r14.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Class getBeanClass()>();

        specialinvoke $r13.<org.springframework.core.type.StandardAnnotationMetadata: void <init>(java.lang.Class)>($r15);

        r22 = $r13;

        goto label6;

     label1:
        $r1 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getBeanClassName()>();

        if $r1 == null goto label6;

     label2:
        $r11 = interfaceinvoke r10.<org.springframework.core.type.classreading.MetadataReaderFactory: org.springframework.core.type.classreading.MetadataReader getMetadataReader(java.lang.String)>($r1);

        r22 = interfaceinvoke $r11.<org.springframework.core.type.classreading.MetadataReader: org.springframework.core.type.AnnotationMetadata getAnnotationMetadata()>();

     label3:
        goto label6;

     label4:
        $r16 := @caughtexception;

        $r17 = <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $z5 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z5 == 0 goto label5;

        $r19 = <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: org.apache.commons.logging.Log logger>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not find class file for introspecting factory methods: ");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r19.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r21, $r16);

     label5:
        return 0;

     label6:
        if r22 == null goto label9;

        $r2 = class "Lorg/springframework/context/annotation/Configuration;";

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $z1 = interfaceinvoke r22.<org.springframework.core.type.AnnotationMetadata: boolean isAnnotated(java.lang.String)>($r3);

        if $z1 == 0 goto label7;

        $r9 = <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: java.lang.String CONFIGURATION_CLASS_ATTRIBUTE>;

        interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: void setAttribute(java.lang.String,java.lang.Object)>($r9, "full");

        return 1;

     label7:
        $r4 = class "Lorg/springframework/stereotype/Component;";

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $z2 = interfaceinvoke r22.<org.springframework.core.type.AnnotationMetadata: boolean isAnnotated(java.lang.String)>($r5);

        if $z2 != 0 goto label8;

        $r7 = class "Lorg/springframework/context/annotation/Bean;";

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        $z3 = interfaceinvoke r22.<org.springframework.core.type.AnnotationMetadata: boolean hasAnnotatedMethods(java.lang.String)>($r8);

        if $z3 == 0 goto label9;

     label8:
        $r6 = <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: java.lang.String CONFIGURATION_CLASS_ATTRIBUTE>;

        interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: void setAttribute(java.lang.String,java.lang.Object)>($r6, "lite");

        return 1;

     label9:
        return 0;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public static boolean isFullConfigurationClass(org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.beans.factory.config.BeanDefinition r0;
        java.lang.Object $r3;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        $r2 = "full";

        $r1 = <org.springframework.context.'annotation'.ConfigurationClassBeanDefinitionReader: java.lang.String CONFIGURATION_CLASS_ATTRIBUTE>;

        $r3 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.Object getAttribute(java.lang.String)>($r1);

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }
}
