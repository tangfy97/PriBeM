public class org.apache.xmlbeans.impl.tool.XsbDumper extends java.lang.Object
{
    private java.lang.String _indent;
    private java.io.PrintStream _out;
    public static final int DATA_BABE;
    public static final int MAJOR_VERSION;
    public static final int MINOR_VERSION;
    public static final int FILETYPE_SCHEMAINDEX;
    public static final int FILETYPE_SCHEMATYPE;
    public static final int FILETYPE_SCHEMAELEMENT;
    public static final int FILETYPE_SCHEMAATTRIBUTE;
    public static final int FILETYPE_SCHEMAPOINTER;
    public static final int FILETYPE_SCHEMAMODELGROUP;
    public static final int FILETYPE_SCHEMAATTRIBUTEGROUP;
    public static final int FLAG_PART_SKIPPABLE;
    public static final int FLAG_PART_FIXED;
    public static final int FLAG_PART_NILLABLE;
    public static final int FLAG_PART_BLOCKEXT;
    public static final int FLAG_PART_BLOCKREST;
    public static final int FLAG_PART_BLOCKSUBST;
    public static final int FLAG_PART_ABSTRACT;
    public static final int FLAG_PART_FINALEXT;
    public static final int FLAG_PART_FINALREST;
    public static final int FLAG_PROP_ISATTR;
    public static final int FLAG_PROP_JAVASINGLETON;
    public static final int FLAG_PROP_JAVAOPTIONAL;
    public static final int FLAG_PROP_JAVAARRAY;
    public static final int FIELD_NONE;
    public static final int FIELD_GLOBAL;
    public static final int FIELD_LOCALATTR;
    public static final int FIELD_LOCALELT;
    static final int FLAG_SIMPLE_TYPE;
    static final int FLAG_DOCUMENT_TYPE;
    static final int FLAG_ORDERED;
    static final int FLAG_BOUNDED;
    static final int FLAG_FINITE;
    static final int FLAG_NUMERIC;
    static final int FLAG_STRINGENUM;
    static final int FLAG_UNION_OF_LISTS;
    static final int FLAG_HAS_PATTERN;
    static final int FLAG_ORDER_SENSITIVE;
    static final int FLAG_TOTAL_ORDER;
    static final int FLAG_COMPILED;
    static final int FLAG_BLOCK_EXT;
    static final int FLAG_BLOCK_REST;
    static final int FLAG_FINAL_EXT;
    static final int FLAG_FINAL_REST;
    static final int FLAG_FINAL_UNION;
    static final int FLAG_FINAL_LIST;
    static final int FLAG_ABSTRACT;
    static final int FLAG_ATTRIBUTE_TYPE;
    java.io.DataInputStream _input;
    org.apache.xmlbeans.impl.tool.XsbDumper$StringPool _stringPool;
    private static final org.apache.xmlbeans.XmlOptions prettyOptions;
    static final byte[] SINGLE_ZERO_BYTE;
    private int _majorver;
    private int _minorver;
    private int _releaseno;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$apache$xmlbeans$impl$tool$XsbDumper;

    public static void printUsage()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3, $r4, $r5;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Prints the contents of an XSB file in human-readable form.");

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("An XSB file contains schema meta information needed to ");

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("perform tasks such as binding and validation.");

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Usage: dumpxsb myfile.xsb");

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("    myfile.xsb - Path to an XSB file.");

        $r5 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r5.<java.io.PrintStream: void println()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        int $i0, $i1, i2;
        java.lang.String[] r0;
        java.lang.String $r2;
        java.io.File $r1;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 != 0 goto label1;

        staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: void printUsage()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label1:
        i2 = 0;

     label2:
        $i1 = lengthof r0;

        if i2 >= $i1 goto label3;

        $r1 = new java.io.File;

        $r2 = r0[i2];

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r2);

        staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: void dump(java.io.File,boolean)>($r1, 1);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    private static void dump(java.io.File, boolean)
    {
        org.apache.xmlbeans.impl.tool.XsbDumper$1 $r8;
        int $i0, i1;
        java.lang.String $r1, $r2, $r4, $r7, $r13;
        boolean $z0, $z1, $z2, z3, $z4;
        java.io.PrintStream $r3, $r6, $r12;
        java.io.FileInputStream $r5;
        java.io.File r0, $r10;
        java.io.FileNotFoundException $r11;
        java.io.File[] $r9;

        r0 := @parameter0: java.io.File;

        z3 := @parameter1: boolean;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label3;

        $r8 = new org.apache.xmlbeans.impl.tool.XsbDumper$1;

        specialinvoke $r8.<org.apache.xmlbeans.impl.tool.XsbDumper$1: void <init>()>();

        $r9 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>($r8);

        i1 = 0;

     label1:
        $i0 = lengthof $r9;

        if i1 >= $i0 goto label2;

        $r10 = $r9[i1];

        staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: void dump(java.io.File,boolean)>($r10, 0);

        i1 = i1 + 1;

        goto label1;

     label2:
        goto label9;

     label3:
        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        $z1 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".jar");

        if $z1 != 0 goto label4;

        $r2 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        $z2 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".zip");

        if $z2 == 0 goto label5;

     label4:
        staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: void dumpZip(java.io.File)>(r0);

        goto label9;

     label5:
        if z3 != 0 goto label6;

        $r7 = virtualinvoke r0.<java.io.File: java.lang.String getName()>();

        $z4 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>(".xsb");

        if $z4 == 0 goto label9;

     label6:
        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r4 = virtualinvoke r0.<java.io.File: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r4);

        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.io.File)>(r0);

        staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: void dump(java.io.InputStream,java.lang.String)>($r5, "  ");

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println()>();

     label7:
        goto label9;

     label8:
        $r11 := @caughtexception;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r13 = virtualinvoke $r11.<java.io.FileNotFoundException: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label9:
        return;

        catch java.io.FileNotFoundException from label6 to label7 with label8;
    }

    public static void dumpZip(java.io.File)
    {
        java.io.PrintStream $r6, $r9, $r11;
        java.util.Enumeration $r2;
        java.io.IOException $r10;
        java.io.File r1;
        java.util.zip.ZipFile $r0;
        java.lang.Object $r3;
        java.lang.String $r5, $r7, $r12;
        java.util.zip.ZipEntry r4;
        boolean $z0, $z1;
        java.io.InputStream $r8;

        r1 := @parameter0: java.io.File;

     label1:
        $r0 = new java.util.zip.ZipFile;

        specialinvoke $r0.<java.util.zip.ZipFile: void <init>(java.io.File)>(r1);

        $r2 = virtualinvoke $r0.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.util.zip.ZipEntry) $r3;

        $r5 = virtualinvoke r4.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean endsWith(java.lang.String)>(".xsb");

        if $z1 == 0 goto label3;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = virtualinvoke r4.<java.util.zip.ZipEntry: java.lang.String getName()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r8 = virtualinvoke $r0.<java.util.zip.ZipFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r4);

        staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: void dump(java.io.InputStream,java.lang.String)>($r8, "  ");

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println()>();

     label3:
        goto label2;

     label4:
        goto label6;

     label5:
        $r10 := @caughtexception;

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r12 = virtualinvoke $r10.<java.io.IOException: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r12);

     label6:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }

    public static void dump(java.io.InputStream)
    {
        java.io.PrintStream $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: void dump(java.io.InputStream,java.lang.String,java.io.PrintStream)>(r0, "", $r1);

        return;
    }

    public static void dump(java.io.InputStream, java.lang.String)
    {
        java.io.PrintStream $r2;
        java.lang.String r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        r1 := @parameter1: java.lang.String;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: void dump(java.io.InputStream,java.lang.String,java.io.PrintStream)>(r0, r1, $r2);

        return;
    }

    public static void dump(java.io.InputStream, java.lang.String, java.io.PrintStream)
    {
        java.io.PrintStream r3;
        org.apache.xmlbeans.impl.tool.XsbDumper $r0;
        java.lang.String r2;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.io.PrintStream;

        $r0 = new org.apache.xmlbeans.impl.tool.XsbDumper;

        specialinvoke $r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void <init>(java.io.InputStream,java.lang.String,java.io.PrintStream)>(r1, r2, r3);

        virtualinvoke $r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpAll()>();

        return;
    }

    private void <init>(java.io.InputStream, java.lang.String, java.io.PrintStream)
    {
        java.io.PrintStream r4;
        java.io.DataInputStream $r1;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.String r3;
        java.io.InputStream r2;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.lang.String;

        r4 := @parameter2: java.io.PrintStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.io.DataInputStream;

        specialinvoke $r1.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r2);

        r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.DataInputStream _input> = $r1;

        r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String _indent> = r3;

        r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.PrintStream _out> = r4;

        return;
    }

    void flush()
    {
        java.io.PrintStream $r1;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r1 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.PrintStream _out>;

        virtualinvoke $r1.<java.io.PrintStream: void flush()>();

        return;
    }

    void emit(java.lang.String)
    {
        java.io.PrintStream $r2;
        java.lang.StringBuffer $r1, $r4, $r6;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.String $r3, r5, $r7;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        r5 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.PrintStream _out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String _indent>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r7);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void flush()>();

        return;
    }

    void emit()
    {
        java.io.PrintStream $r1;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r1 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.PrintStream _out>;

        virtualinvoke $r1.<java.io.PrintStream: void println()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void flush()>();

        return;
    }

    void error(java.lang.Exception)
    {
        java.io.PrintStream $r2;
        java.lang.IllegalStateException $r4;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.String $r3, $r5;
        java.lang.Exception r1;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        r1 := @parameter0: java.lang.Exception;

        $r2 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.PrintStream _out>;

        $r3 = virtualinvoke r1.<java.lang.Exception: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void flush()>();

        $r4 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke r1.<java.lang.Exception: java.lang.String getMessage()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.IllegalStateException: java.lang.Throwable initCause(java.lang.Throwable)>(r1);

        throw $r4;
    }

    void error(java.lang.String)
    {
        java.io.PrintStream $r2;
        java.lang.IllegalStateException $r3;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.String r1;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.PrintStream _out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(r1);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void flush()>();

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r1);

        throw $r3;
    }

    void indent()
    {
        java.lang.StringBuffer $r0, $r3, $r4;
        org.apache.xmlbeans.impl.tool.XsbDumper r1;
        java.lang.String $r2, $r5;

        r1 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String _indent>;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        r1.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String _indent> = $r5;

        return;
    }

    void outdent()
    {
        int $i0, $i1;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r2 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String _indent>;

        $r1 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String _indent>;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = $i0 - 2;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String _indent> = $r3;

        return;
    }

    static java.lang.String filetypeString(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            default: goto label8;
        };

     label1:
        return "FILETYPE_SCHEMAINDEX";

     label2:
        return "FILETYPE_SCHEMATYPE";

     label3:
        return "FILETYPE_SCHEMAELEMENT";

     label4:
        return "FILETYPE_SCHEMAATTRIBUTE";

     label5:
        return "FILETYPE_SCHEMAPOINTER";

     label6:
        return "FILETYPE_SCHEMAMODELGROUP";

     label7:
        return "FILETYPE_SCHEMAATTRIBUTEGROUP";

     label8:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown FILETYPE (");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    static java.lang.String particleflagsString(int)
    {
        java.lang.StringBuffer $r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r1;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $i1 = i0 & 1;

        if $i1 == 0 goto label01;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_PART_SKIPPABLE | ");

     label01:
        $i2 = i0 & 4;

        if $i2 == 0 goto label02;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_PART_FIXED | ");

     label02:
        $i3 = i0 & 8;

        if $i3 == 0 goto label03;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_PART_NILLABLE | ");

     label03:
        $i4 = i0 & 16;

        if $i4 == 0 goto label04;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_PART_BLOCKEXT | ");

     label04:
        $i5 = i0 & 32;

        if $i5 == 0 goto label05;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_PART_BLOCKREST | ");

     label05:
        $i6 = i0 & 64;

        if $i6 == 0 goto label06;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_PART_BLOCKSUBST | ");

     label06:
        $i7 = i0 & 128;

        if $i7 == 0 goto label07;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_PART_ABSTRACT | ");

     label07:
        $i8 = i0 & 256;

        if $i8 == 0 goto label08;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_PART_FINALEXT | ");

     label08:
        $i9 = i0 & 512;

        if $i9 == 0 goto label09;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_PART_FINALREST | ");

     label09:
        $i10 = virtualinvoke $r0.<java.lang.StringBuffer: int length()>();

        if $i10 != 0 goto label10;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0 | ");

     label10:
        $i11 = virtualinvoke $r0.<java.lang.StringBuffer: int length()>();

        $i12 = $i11 - 3;

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, $i12);

        return $r1;
    }

    static java.lang.String propertyflagsString(int)
    {
        java.lang.StringBuffer $r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r1;

        i0 := @parameter0: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_PROP_ISATTR | ");

     label1:
        $i2 = i0 & 2;

        if $i2 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_PROP_JAVASINGLETON | ");

     label2:
        $i3 = i0 & 4;

        if $i3 == 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_PROP_JAVAOPTIONAL | ");

     label3:
        $i4 = i0 & 8;

        if $i4 == 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_PROP_JAVAARRAY | ");

     label4:
        $i5 = virtualinvoke $r0.<java.lang.StringBuffer: int length()>();

        if $i5 != 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0 | ");

     label5:
        $i6 = virtualinvoke $r0.<java.lang.StringBuffer: int length()>();

        $i7 = $i6 - 3;

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, $i7);

        return $r1;
    }

    static java.lang.String containerfieldTypeString(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            default: goto label5;
        };

     label1:
        return "FIELD_NONE";

     label2:
        return "FIELD_GLOBAL";

     label3:
        return "FIELD_LOCALATTR";

     label4:
        return "FIELD_LOCALELT";

     label5:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown container field type (");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    static java.lang.String typeflagsString(int)
    {
        java.lang.StringBuffer $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i24;
        java.lang.String $r1;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $i1 = i0 & 1;

        if $i1 == 0 goto label01;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_SIMPLE_TYPE | ");

     label01:
        $i2 = i0 & 2;

        if $i2 == 0 goto label02;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_DOCUMENT_TYPE | ");

     label02:
        $i3 = i0 & 524288;

        if $i3 == 0 goto label03;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_ATTRIBUTE_TYPE | ");

     label03:
        $i4 = i0 & 4;

        if $i4 == 0 goto label04;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_ORDERED | ");

     label04:
        $i5 = i0 & 8;

        if $i5 == 0 goto label05;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_BOUNDED | ");

     label05:
        $i6 = i0 & 16;

        if $i6 == 0 goto label06;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_FINITE | ");

     label06:
        $i7 = i0 & 32;

        if $i7 == 0 goto label07;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_NUMERIC | ");

     label07:
        $i8 = i0 & 64;

        if $i8 == 0 goto label08;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_STRINGENUM | ");

     label08:
        $i9 = i0 & 128;

        if $i9 == 0 goto label09;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_UNION_OF_LISTS | ");

     label09:
        $i10 = i0 & 256;

        if $i10 == 0 goto label10;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_HAS_PATTERN | ");

     label10:
        $i11 = i0 & 1024;

        if $i11 == 0 goto label11;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_TOTAL_ORDER | ");

     label11:
        $i12 = i0 & 2048;

        if $i12 == 0 goto label12;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_COMPILED | ");

     label12:
        $i13 = i0 & 4096;

        if $i13 == 0 goto label13;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_BLOCK_EXT | ");

     label13:
        $i14 = i0 & 8192;

        if $i14 == 0 goto label14;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_BLOCK_REST | ");

     label14:
        $i15 = i0 & 16384;

        if $i15 == 0 goto label15;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_FINAL_EXT | ");

     label15:
        $i24 = (int) 32768;

        $i16 = i0 & $i24;

        if $i16 == 0 goto label16;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_FINAL_REST | ");

     label16:
        $i17 = i0 & 65536;

        if $i17 == 0 goto label17;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_FINAL_UNION | ");

     label17:
        $i18 = i0 & 131072;

        if $i18 == 0 goto label18;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_FINAL_LIST | ");

     label18:
        $i19 = i0 & 262144;

        if $i19 == 0 goto label19;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLAG_ABSTRACT | ");

     label19:
        $i20 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        if $i20 != 0 goto label20;

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("0 | ");

     label20:
        $i21 = virtualinvoke $r2.<java.lang.StringBuffer: int length()>();

        $i22 = $i21 - 3;

        $r1 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.String substring(int,int)>(0, $i22);

        return $r1;
    }

    void dumpAll()
    {
        int $i0;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int dumpHeader()>();

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            case 7: goto label7;
            default: goto label8;
        };

     label1:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpIndexData()>();

        return;

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpTypeFileData()>();

        goto label8;

     label3:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpParticleData(boolean)>(1);

        goto label8;

     label4:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpAttributeData(boolean)>(1);

        goto label8;

     label5:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpPointerData()>();

        goto label8;

     label6:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpModelGroupData()>();

        goto label8;

     label7:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpAttributeGroupData()>();

     label8:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void readEnd()>();

        return;
    }

    static java.lang.String hex32String(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        return $r0;
    }

    protected int dumpHeader()
    {
        boolean $z0;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.io.DataInputStream $r24;
        java.lang.StringBuffer $r1, $r2, $r4, $r6, $r7, $r8, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r21;
        org.apache.xmlbeans.impl.tool.XsbDumper$StringPool $r23, $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r3, $r5, $r9, $r13, $r17, $r20, $r22;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readInt()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Magic cookie: ");

        $r3 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String hex32String(int)>($i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r5);

        if $i0 == -629491010 goto label1;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>("Wrong magic cookie.");

        return 0;

     label1:
        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _majorver> = $i1;

        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _minorver> = $i2;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 18, 0);

        if $z0 == 0 goto label2;

        $i9 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _releaseno> = $i9;

     label2:
        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Major version: ");

        $i3 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _majorver>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r9);

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Minor version: ");

        $i4 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _minorver>;

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r13);

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Release number: ");

        $i5 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _releaseno>;

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r17);

        $i6 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _majorver>;

        if $i6 != 2 goto label3;

        $i7 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _minorver>;

        if $i7 <= 24 goto label4;

     label3:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>("Incompatible version.");

        return 0;

     label4:
        $i8 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filetype: ");

        $r20 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String filetypeString(int)>($i8);

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r22);

        $r23 = new org.apache.xmlbeans.impl.tool.XsbDumper$StringPool;

        specialinvoke $r23.<org.apache.xmlbeans.impl.tool.XsbDumper$StringPool: void <init>(org.apache.xmlbeans.impl.tool.XsbDumper)>(r0);

        r0.<org.apache.xmlbeans.impl.tool.XsbDumper: org.apache.xmlbeans.impl.tool.XsbDumper$StringPool _stringPool> = $r23;

        $r25 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: org.apache.xmlbeans.impl.tool.XsbDumper$StringPool _stringPool>;

        $r24 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.DataInputStream _input>;

        virtualinvoke $r25.<org.apache.xmlbeans.impl.tool.XsbDumper$StringPool: void readFrom(java.io.DataInputStream)>($r24);

        return $i8;
    }

    void dumpPointerData()
    {
        java.lang.StringBuffer $r1, $r2, $r4;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.String $r3, $r5;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Type system: ");

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r5);

        return;
    }

    protected void dumpIndexData()
    {
        java.lang.StringBuffer $r1, $r2, $r3, $r4, $r7, $r8, $r9, $r11, $r12;
        int $i0, $i1, i2;
        java.lang.String $r5, $r6, $r10, $r13;
        boolean $z0, $z1;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Handle pool (");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r5);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i2 = 0;

     label1:
        if i2 >= $i0 goto label2;

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r10 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String filetypeString(int)>($i1);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r13);

        i2 = i2 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpQNameMap(java.lang.String)>("Global elements");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpQNameMap(java.lang.String)>("Global attributes");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpQNameMap(java.lang.String)>("Model groups");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpQNameMap(java.lang.String)>("Attribute groups");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpQNameMap(java.lang.String)>("Identity constraints");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpQNameMap(java.lang.String)>("Global types");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpQNameMap(java.lang.String)>("Document types");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpQNameMap(java.lang.String)>("Attribute types");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpClassnameIndex(java.lang.String)>("All types by classname");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpStringArray(java.lang.String)>("Defined namespaces");

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 15, 0);

        if $z0 == 0 goto label3;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpQNameMap(java.lang.String)>("Redefined global types");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpQNameMap(java.lang.String)>("Redfined model groups");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpQNameMap(java.lang.String)>("Redfined attribute groups");

     label3:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 19, 0);

        if $z1 == 0 goto label4;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpAnnotations()>();

     label4:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void readEnd()>();

        return;
    }

    int readShort()
    {
        java.io.DataInputStream $r1;
        int $i0;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.io.IOException $r2;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.DataInputStream _input>;

        $i0 = virtualinvoke $r1.<java.io.DataInputStream: int readUnsignedShort()>();

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void error(java.lang.Exception)>($r2);

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    int readInt()
    {
        java.io.DataInputStream $r1;
        int $i0;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.io.IOException $r2;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.DataInputStream _input>;

        $i0 = virtualinvoke $r1.<java.io.DataInputStream: int readInt()>();

     label2:
        return $i0;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void error(java.lang.Exception)>($r2);

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    java.lang.String readString()
    {
        org.apache.xmlbeans.impl.tool.XsbDumper$StringPool $r1;
        int $i0;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.String $r2;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r1 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: org.apache.xmlbeans.impl.tool.XsbDumper$StringPool _stringPool>;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.impl.tool.XsbDumper$StringPool: java.lang.String stringForCode(int)>($i0);

        return $r2;
    }

    javax.xml.namespace.QName readQName()
    {
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.String $r1, $r2;
        javax.xml.namespace.QName $r3;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = new javax.xml.namespace.QName;

        specialinvoke $r3.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r1, $r2);

        return $r3;
    }

    java.lang.String readHandle()
    {
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        return $r1;
    }

    java.lang.String readType()
    {
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.String $r1;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readHandle()>();

        return $r1;
    }

    static java.lang.String qnameString(javax.xml.namespace.QName)
    {
        java.lang.StringBuffer $r3, $r5, $r6, $r8;
        javax.xml.namespace.QName r0;
        java.lang.String $r1, $r2, $r4, $r7, $r9;

        r0 := @parameter0: javax.xml.namespace.QName;

        if r0 != null goto label1;

        return "(null)";

     label1:
        $r1 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        if $r1 == null goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("@");

        $r7 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;

     label2:
        $r2 = virtualinvoke r0.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        return $r2;
    }

    static java.lang.String qnameSetString(org.apache.xmlbeans.QNameSet)
    {
        org.apache.xmlbeans.QNameSet r0;
        java.lang.String $r1;

        r0 := @parameter0: org.apache.xmlbeans.QNameSet;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.QNameSet: java.lang.String toString()>();

        return $r1;
    }

    void dumpQNameMap(java.lang.String)
    {
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r8, $r11, $r12, $r14;
        int $i0, i1;
        java.lang.String r2, $r7, $r10, $r13, $r15;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        javax.xml.namespace.QName $r9;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        r2 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r7);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        $r10 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String qnameString(javax.xml.namespace.QName)>($r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r13 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readHandle()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r15);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        return;
    }

    void dumpTypeArray(java.lang.String)
    {
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r8, $r9, $r10, $r12;
        int $i0, i1;
        java.lang.String r2, $r7, $r11, $r13;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        r2 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r7);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r11 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readType()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r13);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        return;
    }

    void dumpClassnameIndex(java.lang.String)
    {
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r8, $r10, $r11, $r13;
        int $i0, i1;
        java.lang.String r2, $r7, $r9, $r12, $r14;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        r2 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r7);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r12 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readType()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r14);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        return;
    }

    void dumpStringArray(java.lang.String)
    {
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6;
        int $i0, i1;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.String r2, $r7, $r8;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        r2 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r7);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        $r8 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        return;
    }

    void readEnd()
    {
        java.io.DataInputStream $r1;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.io.IOException $r2;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.DataInputStream _input>;

        virtualinvoke $r1.<java.io.DataInputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.DataInputStream _input> = null;

        r0.<org.apache.xmlbeans.impl.tool.XsbDumper: org.apache.xmlbeans.impl.tool.XsbDumper$StringPool _stringPool> = null;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static java.lang.String particleTypeString(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label4;
            case 4: goto label3;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        return "ALL";

     label2:
        return "CHOICE";

     label3:
        return "ELEMENT";

     label4:
        return "SEQUENCE";

     label5:
        return "WILDCARD";

     label6:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown particle type (");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    static java.lang.String bigIntegerString(java.math.BigInteger)
    {
        java.math.BigInteger r0;
        java.lang.String $r1;

        r0 := @parameter0: java.math.BigInteger;

        if r0 != null goto label1;

        return "(null)";

     label1:
        $r1 = virtualinvoke r0.<java.math.BigInteger: java.lang.String toString()>();

        return $r1;
    }

    static java.lang.String wcprocessString(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label4;
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label2;
            default: goto label5;
        };

     label1:
        return "STRICT";

     label2:
        return "SKIP";

     label3:
        return "LAX";

     label4:
        return "NOT_WILDCARD";

     label5:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown process type (");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    void dumpAnnotation()
    {
        boolean $z0, $z1, z2;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        javax.xml.namespace.QName $r20, $r29;
        java.lang.StringBuffer $r2, $r3, $r4, $r8, $r9, $r10, $r14, $r15, $r16, $r19, $r22, $r23, $r25, $r28, $r31, $r32, $r34, $r35, $r37, $r39, $r40, $r41, $r42, $r43;
        int $i0, $i1, $i2, i3, i4, i5, $i7;
        java.lang.String $r5, $r6, $r11, $r12, $r17, $r21, $r24, $r26, $r30, $r33, $r36, $r38;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 19, 0);

        if $z0 != 0 goto label01;

        return;

     label01:
        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readInt()>();

        $i7 = (int) -1;

        if $i0 != $i7 goto label02;

        return;

     label02:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>("Annotation");

        z2 = 1;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        if $i0 <= 0 goto label07;

        $r39 = new java.lang.StringBuffer;

        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attributes (");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r17);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i3 = 0;

     label03:
        if i3 >= $i0 goto label06;

        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 24, 0);

        if $z1 == 0 goto label04;

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Name: ");

        $r29 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        $r30 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String qnameString(javax.xml.namespace.QName)>($r29);

        $r31 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", Value: ");

        $r33 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ValueURI: ");

        $r36 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r38);

        goto label05;

     label04:
        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Name: ");

        $r20 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        $r21 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String qnameString(javax.xml.namespace.QName)>($r20);

        $r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", Value: ");

        $r24 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r26);

     label05:
        i3 = i3 + 1;

        goto label03;

     label06:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        z2 = 0;

     label07:
        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readInt()>();

        if $i1 <= 0 goto label10;

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Documentation elements (");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r11);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i4 = 0;

     label08:
        if i4 >= $i1 goto label09;

        $r12 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r12);

        i4 = i4 + 1;

        goto label08;

     label09:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        z2 = 0;

     label10:
        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readInt()>();

        if $i2 <= 0 goto label13;

        $r43 = new java.lang.StringBuffer;

        specialinvoke $r43.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Appinfo elements (");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r5);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i5 = 0;

     label11:
        if i5 >= $i2 goto label12;

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r6);

        i5 = i5 + 1;

        goto label11;

     label12:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        z2 = 0;

     label13:
        if z2 == 0 goto label14;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>("<empty>");

     label14:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        return;
    }

    void dumpAnnotations()
    {
        java.lang.StringBuffer $r1, $r2, $r3, $r4;
        int $i0, i1;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.String $r5;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readInt()>();

        if $i0 <= 0 goto label3;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Top-level annotations (");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r5);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpAnnotation()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

     label3:
        return;
    }

    void dumpParticleData(boolean)
    {
        org.apache.xmlbeans.QNameSet $r25, $r31;
        java.math.BigInteger $r13, $r19;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        javax.xml.namespace.QName $r42, $r78;
        java.lang.StringBuffer $r1, $r3, $r4, $r6, $r7, $r9, $r11, $r12, $r15, $r17, $r18, $r21, $r23, $r24, $r27, $r29, $r30, $r33, $r35, $r36, $r38, $r40, $r41, $r44, $r46, $r47, $r49, $r51, $r52, $r54, $r56, $r57, $r60, $r62, $r63, $r64, $r65, $r67, $r68, $r70, $r73, $r74, $r75, $r76, $r80, $r81, $r83, $r85, $r86, $r88;
        java.lang.String $r2, $r5, $r8, $r10, $r14, $r16, $r20, $r22, $r26, $r28, $r32, $r34, $r37, $r39, $r43, $r45, $r48, $r50, $r53, $r55, $r59, $r61, $r66, $r69, $r71, $r72, $r77, $r79, $r82, $r84, $r87, $r89;
        org.apache.xmlbeans.soap.SOAPArrayType $r58;
        boolean $z0, z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        z1 := @parameter0: boolean;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String particleTypeString(int)>($i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r5);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Flags: ");

        $r8 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String particleflagsString(int)>($i1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("MinOccurs: ");

        $r13 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.math.BigInteger readBigInteger()>();

        $r14 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String bigIntegerString(java.math.BigInteger)>($r13);

        $r15 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r16);

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("MaxOccurs: ");

        $r19 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.math.BigInteger readBigInteger()>();

        $r20 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String bigIntegerString(java.math.BigInteger)>($r19);

        $r21 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r22);

        $r23 = new java.lang.StringBuffer;

        specialinvoke $r23.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Transition: ");

        $r25 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: org.apache.xmlbeans.QNameSet readQNameSet()>();

        $r26 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String qnameSetString(org.apache.xmlbeans.QNameSet)>($r25);

        $r27 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r28);

        tableswitch($i0)
        {
            case 1: goto label10;
            case 2: goto label10;
            case 3: goto label10;
            case 4: goto label02;
            case 5: goto label01;
            default: goto label11;
        };

     label01:
        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wildcard set: ");

        $r31 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: org.apache.xmlbeans.QNameSet readQNameSet()>();

        $r32 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String qnameSetString(org.apache.xmlbeans.QNameSet)>($r31);

        $r33 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r34);

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wildcard process: ");

        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r37 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String wcprocessString(int)>($i2);

        $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r39);

        goto label12;

     label02:
        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Name: ");

        $r42 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        $r43 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String qnameString(javax.xml.namespace.QName)>($r42);

        $r44 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r43);

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r45);

        $r46 = new java.lang.StringBuffer;

        specialinvoke $r46.<java.lang.StringBuffer: void <init>()>();

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Type: ");

        $r48 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readType()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r50);

        $r51 = new java.lang.StringBuffer;

        specialinvoke $r51.<java.lang.StringBuffer: void <init>()>();

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Default: ");

        $r53 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r55);

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 16, 0);

        if $z0 == 0 goto label03;

        $r85 = new java.lang.StringBuffer;

        specialinvoke $r85.<java.lang.StringBuffer: void <init>()>();

        $r86 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Default value: ");

        $r87 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readXmlValueObject()>();

        $r88 = virtualinvoke $r86.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r87);

        $r89 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r89);

     label03:
        $r56 = new java.lang.StringBuffer;

        specialinvoke $r56.<java.lang.StringBuffer: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("WsdlArrayType: ");

        $r58 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: org.apache.xmlbeans.soap.SOAPArrayType readSOAPArrayType()>();

        $r59 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String SOAPArrayTypeString(org.apache.xmlbeans.soap.SOAPArrayType)>($r58);

        $r60 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r61);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpAnnotation()>();

        if z1 == 0 goto label07;

        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 17, 0);

        if $z2 == 0 goto label04;

        $r80 = new java.lang.StringBuffer;

        specialinvoke $r80.<java.lang.StringBuffer: void <init>()>();

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Substitution group ref: ");

        $r82 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readHandle()>();

        $r83 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r82);

        $r84 = virtualinvoke $r83.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r84);

     label04:
        $i4 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r73 = new java.lang.StringBuffer;

        specialinvoke $r73.<java.lang.StringBuffer: void <init>()>();

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Substitution group members (");

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r77 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r77);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i5 = 0;

     label05:
        if i5 >= $i4 goto label06;

        $r78 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        $r79 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String qnameString(javax.xml.namespace.QName)>($r78);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r79);

        i5 = i5 + 1;

        goto label05;

     label06:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

     label07:
        $i3 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r62 = new java.lang.StringBuffer;

        specialinvoke $r62.<java.lang.StringBuffer: void <init>()>();

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Identity constraints (");

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r66);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i6 = 0;

     label08:
        if i6 >= $i3 goto label09;

        $r72 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readHandle()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r72);

        i6 = i6 + 1;

        goto label08;

     label09:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        if z1 == 0 goto label12;

        $r67 = new java.lang.StringBuffer;

        specialinvoke $r67.<java.lang.StringBuffer: void <init>()>();

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filename: ");

        $r69 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r70 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r69);

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r71);

        goto label12;

     label10:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpParticleArray(java.lang.String)>("Particle children");

        goto label12;

     label11:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void error(java.lang.String)>("Unrecognized schema particle type");

     label12:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        return;
    }

    void dumpParticleArray(java.lang.String)
    {
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6;
        int $i0, i1;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.String r2, $r7;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        r2 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r7);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i1 = 0;

     label1:
        if i1 >= $i0 goto label2;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpParticleData(boolean)>(0);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        return;
    }

    static java.lang.String complexVarietyString(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        return "EMPTY_CONTENT";

     label2:
        return "SIMPLE_CONTENT";

     label3:
        return "ELEMENT_CONTENT";

     label4:
        return "MIXED_CONTENT";

     label5:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown complex variety (");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    static java.lang.String simpleVarietyString(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label3;
            case 3: goto label2;
            default: goto label4;
        };

     label1:
        return "ATOMIC";

     label2:
        return "LIST";

     label3:
        return "UNION";

     label4:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown simple variety (");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    java.lang.String facetCodeString(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2, $r3;
        int i0;
        org.apache.xmlbeans.impl.tool.XsbDumper r5;
        java.lang.String $r4;

        r5 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            default: goto label10;
        };

     label01:
        return "FACET_LENGTH";

     label02:
        return "FACET_MIN_LENGTH";

     label03:
        return "FACET_MAX_LENGTH";

     label04:
        return "FACET_MIN_EXCLUSIVE";

     label05:
        return "FACET_MIN_INCLUSIVE";

     label06:
        return "FACET_MAX_INCLUSIVE";

     label07:
        return "FACET_MAX_EXCLUSIVE";

     label08:
        return "FACET_TOTAL_DIGITS";

     label09:
        return "FACET_FRACTION_DIGITS";

     label10:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown facet code (");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    java.lang.String whitespaceCodeString(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2, $r3;
        int i0;
        org.apache.xmlbeans.impl.tool.XsbDumper r5;
        java.lang.String $r4;

        r5 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label4;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label1;
            default: goto label5;
        };

     label1:
        return "WS_COLLAPSE";

     label2:
        return "WS_PRESERVE";

     label3:
        return "WS_REPLACE";

     label4:
        return "WS_UNSPECIFIED";

     label5:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown whitespace code (");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    java.lang.String derivationTypeString(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2, $r3;
        int i0;
        org.apache.xmlbeans.impl.tool.XsbDumper r5;
        java.lang.String $r4;

        r5 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        return "DT_NOT_DERIVED";

     label2:
        return "DT_RESTRICTION";

     label3:
        return "DT_EXTENSION";

     label4:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown derivation code (");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    void dumpTypeFileData()
    {
        org.apache.xmlbeans.QNameSet $r118;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.StringBuffer $r1, $r2, $r5, $r7, $r8, $r10, $r12, $r13, $r14, $r16, $r17, $r19, $r21, $r22, $r24, $r26, $r27, $r29, $r31, $r32, $r33, $r35, $r36, $r38, $r40, $r41, $r42, $r43, $r45, $r46, $r48, $r50, $r51, $r52, $r53, $r55, $r56, $r57, $r58, $r60, $r61, $r63, $r65, $r66, $r68, $r70, $r71, $r73, $r75, $r76, $r77, $r79, $r80, $r81, $r82, $r84, $r85, $r87, $r88, $r89, $r90, $r92, $r97, $r98, $r100, $r102, $r103, $r104, $r106, $r107, $r109, $r111, $r112, $r113, $r114, $r116, $r117, $r120, $r122, $r123, $r125, $r127, $r128, $r129, $r130, $r132, $r133, $r134, $r136, $r137, $r138, $r139, $r141, $r142, $r144, $r146, $r147, $r148, $r150, $r151, $r153, $r155, $r156, $r158, $r160, $r161, $r163, $r165, $r166, $r167, $r169, $r170, $r172, $r174, $r175, $r177;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26, i27, i28, i29, i30, i31, i32;
        javax.xml.namespace.QName $r3;
        java.lang.String $r4, $r6, $r9, $r11, $r15, $r18, $r20, $r23, $r25, $r28, $r30, $r34, $r37, $r39, $r44, $r47, $r49, $r54, $r59, $r62, $r64, $r67, $r69, $r72, $r74, $r78, $r83, $r86, $r91, $r93, $r94, $r95, $r96, $r99, $r101, $r105, $r108, $r110, $r115, $r119, $r121, $r124, $r126, $r131, $r135, $r140, $r143, $r145, $r149, $r152, $r154, $r157, $r159, $r162, $r164, $r168, $r171, $r173, $r176, $r178;
        boolean z0, $z1, $z3, z4, $z5, $z6;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Name: ");

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String qnameString(javax.xml.namespace.QName)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Outer type: ");

        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Depth: ");

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Base type: ");

        $r18 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readType()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r20);

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Derivation type: ");

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r23 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String derivationTypeString(int)>($i1);

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r25);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpAnnotation()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>("Container field:");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Reftype: ");

        $r28 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String containerfieldTypeString(int)>($i2);

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r30);

        tableswitch($i2)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            default: goto label04;
        };

     label01:
        $r150 = new java.lang.StringBuffer;

        specialinvoke $r150.<java.lang.StringBuffer: void <init>()>();

        $r151 = virtualinvoke $r150.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Handle: ");

        $r152 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readHandle()>();

        $r153 = virtualinvoke $r151.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r152);

        $r154 = virtualinvoke $r153.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r154);

        goto label04;

     label02:
        $r146 = new java.lang.StringBuffer;

        specialinvoke $r146.<java.lang.StringBuffer: void <init>()>();

        $r147 = virtualinvoke $r146.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index: ");

        $i21 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r148 = virtualinvoke $r147.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i21);

        $r149 = virtualinvoke $r148.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r149);

        goto label04;

     label03:
        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Index: ");

        $i3 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r34);

     label04:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        $r155 = new java.lang.StringBuffer;

        specialinvoke $r155.<java.lang.StringBuffer: void <init>()>();

        $r156 = virtualinvoke $r155.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Java class name: ");

        $r157 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r158 = virtualinvoke $r156.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r157);

        $r159 = virtualinvoke $r158.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r159);

        $r160 = new java.lang.StringBuffer;

        specialinvoke $r160.<java.lang.StringBuffer: void <init>()>();

        $r161 = virtualinvoke $r160.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Java impl class name: ");

        $r162 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r163 = virtualinvoke $r161.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r162);

        $r164 = virtualinvoke $r163.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r164);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpTypeArray(java.lang.String)>("Anonymous types");

        $r165 = new java.lang.StringBuffer;

        specialinvoke $r165.<java.lang.StringBuffer: void <init>()>();

        $r166 = virtualinvoke $r165.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Anonymous union member ordinal: ");

        $i22 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r167 = virtualinvoke $r166.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i22);

        $r168 = virtualinvoke $r167.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r168);

        $i23 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readInt()>();

        $r169 = new java.lang.StringBuffer;

        specialinvoke $r169.<java.lang.StringBuffer: void <init>()>();

        $r170 = virtualinvoke $r169.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Flags: ");

        $r171 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String typeflagsString(int)>($i23);

        $r172 = virtualinvoke $r170.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r171);

        $r173 = virtualinvoke $r172.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r173);

        $i24 = $i23 & 1;

        if $i24 != 0 goto label05;

        $z6 = 1;

        $z5 = 1;

        goto label06;

     label05:
        $z6 = 0;

        $z5 = 0;

     label06:
        z0 = $z5;

        i25 = 0;

        if $z6 == 0 goto label15;

        $i15 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        i25 = $i15;

        $r106 = new java.lang.StringBuffer;

        specialinvoke $r106.<java.lang.StringBuffer: void <init>()>();

        $r107 = virtualinvoke $r106.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Complex variety: ");

        $r108 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String complexVarietyString(int)>($i15);

        $r109 = virtualinvoke $r107.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r108);

        $r110 = virtualinvoke $r109.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r110);

        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 23, 0);

        if $z1 == 0 goto label07;

        $r141 = new java.lang.StringBuffer;

        specialinvoke $r141.<java.lang.StringBuffer: void <init>()>();

        $r142 = virtualinvoke $r141.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Content based on type: ");

        $r143 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readType()>();

        $r144 = virtualinvoke $r142.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r143);

        $r145 = virtualinvoke $r144.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r145);

     label07:
        $i16 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r111 = new java.lang.StringBuffer;

        specialinvoke $r111.<java.lang.StringBuffer: void <init>()>();

        $r112 = virtualinvoke $r111.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attribute model (");

        $r113 = virtualinvoke $r112.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i16);

        $r114 = virtualinvoke $r113.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r115 = virtualinvoke $r114.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r115);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i26 = 0;

     label08:
        if i26 >= $i16 goto label09;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpAttributeData(boolean)>(0);

        i26 = i26 + 1;

        goto label08;

     label09:
        $r116 = new java.lang.StringBuffer;

        specialinvoke $r116.<java.lang.StringBuffer: void <init>()>();

        $r117 = virtualinvoke $r116.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wildcard set: ");

        $r118 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: org.apache.xmlbeans.QNameSet readQNameSet()>();

        $r119 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String qnameSetString(org.apache.xmlbeans.QNameSet)>($r118);

        $r120 = virtualinvoke $r117.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r119);

        $r121 = virtualinvoke $r120.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r121);

        $r122 = new java.lang.StringBuffer;

        specialinvoke $r122.<java.lang.StringBuffer: void <init>()>();

        $r123 = virtualinvoke $r122.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Wildcard process: ");

        $i17 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r124 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String wcprocessString(int)>($i17);

        $r125 = virtualinvoke $r123.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r124);

        $r126 = virtualinvoke $r125.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r126);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        $i18 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r127 = new java.lang.StringBuffer;

        specialinvoke $r127.<java.lang.StringBuffer: void <init>()>();

        $r128 = virtualinvoke $r127.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attribute properties (");

        $r129 = virtualinvoke $r128.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i18);

        $r130 = virtualinvoke $r129.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r131 = virtualinvoke $r130.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r131);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i27 = 0;

     label10:
        if i27 >= $i18 goto label11;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpPropertyData()>();

        i27 = i27 + 1;

        goto label10;

     label11:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        if $i15 == 3 goto label12;

        if $i15 != 4 goto label15;

     label12:
        $r132 = new java.lang.StringBuffer;

        specialinvoke $r132.<java.lang.StringBuffer: void <init>()>();

        $r133 = virtualinvoke $r132.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("IsAll: ");

        $i19 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r134 = virtualinvoke $r133.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i19);

        $r135 = virtualinvoke $r134.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r135);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpParticleArray(java.lang.String)>("Content model");

        $i20 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r136 = new java.lang.StringBuffer;

        specialinvoke $r136.<java.lang.StringBuffer: void <init>()>();

        $r137 = virtualinvoke $r136.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Element properties (");

        $r138 = virtualinvoke $r137.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i20);

        $r139 = virtualinvoke $r138.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r140 = virtualinvoke $r139.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r140);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i28 = 0;

     label13:
        if i28 >= $i20 goto label14;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpPropertyData()>();

        i28 = i28 + 1;

        goto label13;

     label14:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

     label15:
        if z0 == 0 goto label16;

        if i25 != 2 goto label32;

     label16:
        $i4 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Simple type variety: ");

        $r37 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String simpleVarietyString(int)>($i4);

        $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r39);

        $i5 = $i23 & 64;

        if $i5 == 0 goto label17;

        $z3 = 1;

        goto label18;

     label17:
        $z3 = 0;

     label18:
        z4 = $z3;

        $i6 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r40 = new java.lang.StringBuffer;

        specialinvoke $r40.<java.lang.StringBuffer: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Facets (");

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r44);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i29 = 0;

     label19:
        if i29 >= $i6 goto label20;

        $i13 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r96 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String facetCodeString(int)>($i13);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r96);

        $r97 = new java.lang.StringBuffer;

        specialinvoke $r97.<java.lang.StringBuffer: void <init>()>();

        $r98 = virtualinvoke $r97.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Value: ");

        $r99 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readXmlValueObject()>();

        $r100 = virtualinvoke $r98.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r99);

        $r101 = virtualinvoke $r100.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r101);

        $r102 = new java.lang.StringBuffer;

        specialinvoke $r102.<java.lang.StringBuffer: void <init>()>();

        $r103 = virtualinvoke $r102.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Fixed: ");

        $i14 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r104 = virtualinvoke $r103.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i14);

        $r105 = virtualinvoke $r104.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r105);

        i29 = i29 + 1;

        goto label19;

     label20:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        $r45 = new java.lang.StringBuffer;

        specialinvoke $r45.<java.lang.StringBuffer: void <init>()>();

        $r46 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Whitespace rule: ");

        $i7 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r47 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String whitespaceCodeString(int)>($i7);

        $r48 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r49);

        $i8 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $r51 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Patterns (");

        $r52 = virtualinvoke $r51.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i8);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r54);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i30 = 0;

     label21:
        if i30 >= $i8 goto label22;

        $r95 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r95);

        i30 = i30 + 1;

        goto label21;

     label22:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        $i9 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r55 = new java.lang.StringBuffer;

        specialinvoke $r55.<java.lang.StringBuffer: void <init>()>();

        $r56 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Enumeration values (");

        $r57 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i9);

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r59 = virtualinvoke $r58.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r59);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i31 = 0;

     label23:
        if i31 >= $i9 goto label24;

        $r94 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readXmlValueObject()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r94);

        i31 = i31 + 1;

        goto label23;

     label24:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        $r60 = new java.lang.StringBuffer;

        specialinvoke $r60.<java.lang.StringBuffer: void <init>()>();

        $r61 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Base enum type: ");

        $r62 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readType()>();

        $r63 = virtualinvoke $r61.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r62);

        $r64 = virtualinvoke $r63.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r64);

        if z4 == 0 goto label27;

        $i11 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r79 = new java.lang.StringBuffer;

        specialinvoke $r79.<java.lang.StringBuffer: void <init>()>();

        $r80 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("String enum entries (");

        $r81 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i11);

        $r82 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r83 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r83);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        i32 = 0;

     label25:
        if i32 >= $i11 goto label26;

        $r84 = new java.lang.StringBuffer;

        specialinvoke $r84.<java.lang.StringBuffer: void <init>()>();

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r86 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r87 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r86);

        $r88 = virtualinvoke $r87.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\" -> ");

        $i12 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r89 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i12);

        $r90 = virtualinvoke $r89.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = ");

        $r91 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r92 = virtualinvoke $r90.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r91);

        $r93 = virtualinvoke $r92.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r93);

        i32 = i32 + 1;

        goto label25;

     label26:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

     label27:
        tableswitch($i4)
        {
            case 1: goto label28;
            case 2: goto label30;
            case 3: goto label29;
            default: goto label31;
        };

     label28:
        $r70 = new java.lang.StringBuffer;

        specialinvoke $r70.<java.lang.StringBuffer: void <init>()>();

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Primitive type: ");

        $r72 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readType()>();

        $r73 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r72);

        $r74 = virtualinvoke $r73.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r74);

        $r75 = new java.lang.StringBuffer;

        specialinvoke $r75.<java.lang.StringBuffer: void <init>()>();

        $r76 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Decimal size: ");

        $i10 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readInt()>();

        $r77 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i10);

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r78);

        goto label32;

     label29:
        $r65 = new java.lang.StringBuffer;

        specialinvoke $r65.<java.lang.StringBuffer: void <init>()>();

        $r66 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("List item type: ");

        $r67 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readType()>();

        $r68 = virtualinvoke $r66.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r67);

        $r69 = virtualinvoke $r68.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r69);

        goto label32;

     label30:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpTypeArray(java.lang.String)>("Union members");

        goto label32;

     label31:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void error(java.lang.String)>("Unknown simple type variety");

     label32:
        $r174 = new java.lang.StringBuffer;

        specialinvoke $r174.<java.lang.StringBuffer: void <init>()>();

        $r175 = virtualinvoke $r174.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filename: ");

        $r176 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r177 = virtualinvoke $r175.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r176);

        $r178 = virtualinvoke $r177.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r178);

        return;
    }

    static java.lang.String attruseCodeString(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label3;
            case 2: goto label1;
            case 3: goto label2;
            default: goto label4;
        };

     label1:
        return "OPTIONAL";

     label2:
        return "REQUIRED";

     label3:
        return "PROHIBITED";

     label4:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown use code (");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    void dumpAttributeData(boolean)
    {
        boolean $z0, z1;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        javax.xml.namespace.QName $r3;
        java.lang.StringBuffer $r1, $r2, $r5, $r7, $r8, $r10, $r12, $r13, $r15, $r17, $r18, $r20, $r22, $r23, $r24, $r26, $r27, $r30, $r32, $r33, $r35, $r37, $r38, $r40;
        int $i0, $i1;
        java.lang.String $r4, $r6, $r9, $r11, $r14, $r16, $r19, $r21, $r25, $r29, $r31, $r34, $r36, $r39, $r41;
        org.apache.xmlbeans.soap.SOAPArrayType $r28;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        z1 := @parameter0: boolean;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Name: ");

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String qnameString(javax.xml.namespace.QName)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Type: ");

        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Use: ");

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r14 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String attruseCodeString(int)>($i0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r16);

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Default: ");

        $r19 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r21);

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 16, 0);

        if $z0 == 0 goto label1;

        $r37 = new java.lang.StringBuffer;

        specialinvoke $r37.<java.lang.StringBuffer: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Default value: ");

        $r39 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readXmlValueObject()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r41);

     label1:
        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Fixed: ");

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r25);

        $r26 = new java.lang.StringBuffer;

        specialinvoke $r26.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("WsdlArrayType: ");

        $r28 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: org.apache.xmlbeans.soap.SOAPArrayType readSOAPArrayType()>();

        $r29 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String SOAPArrayTypeString(org.apache.xmlbeans.soap.SOAPArrayType)>($r28);

        $r30 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r31);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpAnnotation()>();

        if z1 == 0 goto label2;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filename: ");

        $r34 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r36);

     label2:
        return;
    }

    void dumpXml()
    {
        org.apache.xmlbeans.XmlException $r5;
        org.apache.xmlbeans.XmlOptions $r3;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.lang.String $r1, $r4;
        org.apache.xmlbeans.XmlObject $r2;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

     label1:
        $r2 = staticinvoke <org.apache.xmlbeans.XmlObject$Factory: org.apache.xmlbeans.XmlObject parse(java.lang.String)>($r1);

        $r3 = <org.apache.xmlbeans.impl.tool.XsbDumper: org.apache.xmlbeans.XmlOptions prettyOptions>;

        $r4 = interfaceinvoke $r2.<org.apache.xmlbeans.XmlObject: java.lang.String xmlText(org.apache.xmlbeans.XmlOptions)>($r3);

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>("!!!!!! BAD XML !!!!!");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r1);

     label4:
        return;

        catch org.apache.xmlbeans.XmlException from label1 to label2 with label3;
    }

    void dumpModelGroupData()
    {
        boolean $z0, $z1, $z2, $z3;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        javax.xml.namespace.QName $r3;
        java.lang.StringBuffer $r1, $r2, $r5, $r7, $r8, $r10, $r12, $r13, $r14, $r16, $r17, $r19, $r21, $r22, $r23, $r25, $r26, $r28, $r30, $r31, $r33;
        int $i0, $i1;
        java.lang.String $r4, $r6, $r9, $r11, $r15, $r18, $r20, $r24, $r27, $r29, $r32, $r34;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Name: ");

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String qnameString(javax.xml.namespace.QName)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Target namespace: ");

        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Chameleon: ");

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r15);

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 22, 0);

        if $z0 == 0 goto label1;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Element form default: ");

        $r32 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r34);

     label1:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 22, 0);

        if $z1 == 0 goto label2;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Attribute form default: ");

        $r27 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r29);

     label2:
        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 15, 0);

        if $z2 == 0 goto label3;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Redefine: ");

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r24);

     label3:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>("Model Group Xml: ");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpXml()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpAnnotation()>();

        $z3 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 21, 0);

        if $z3 == 0 goto label4;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filename: ");

        $r18 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r20);

     label4:
        return;
    }

    void dumpAttributeGroupData()
    {
        boolean $z0, $z1, $z2;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        javax.xml.namespace.QName $r3;
        java.lang.StringBuffer $r1, $r2, $r5, $r7, $r8, $r10, $r12, $r13, $r14, $r16, $r17, $r19, $r21, $r22, $r23, $r25, $r26, $r28;
        int $i0, $i1;
        java.lang.String $r4, $r6, $r9, $r11, $r15, $r18, $r20, $r24, $r27, $r29;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Name: ");

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String qnameString(javax.xml.namespace.QName)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Target namespace: ");

        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Chameleon: ");

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r15);

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 22, 0);

        if $z0 == 0 goto label1;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Form default: ");

        $r27 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r29);

     label1:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 15, 0);

        if $z1 == 0 goto label2;

        $r21 = new java.lang.StringBuffer;

        specialinvoke $r21.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Redefine: ");

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r24);

     label2:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>("Attribute Group Xml: ");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpXml()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void dumpAnnotation()>();

        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 21, 0);

        if $z2 == 0 goto label3;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Filename: ");

        $r18 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r20);

     label3:
        return;
    }

    static java.lang.String alwaysString(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label2;
            case 1: goto label3;
            case 2: goto label1;
            default: goto label4;
        };

     label1:
        return "CONSISTENTLY";

     label2:
        return "NEVER";

     label3:
        return "VARIABLE";

     label4:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown frequency code (");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    static java.lang.String jtcString(int)
    {
        java.lang.StringBuffer $r0, $r1, $r2, $r3;
        int i0;
        java.lang.String $r4;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label10;
            case 10: goto label11;
            case 11: goto label12;
            case 12: goto label13;
            case 13: goto label14;
            case 14: goto label15;
            case 15: goto label16;
            case 16: goto label18;
            case 17: goto label17;
            case 18: goto label19;
            case 19: goto label20;
            default: goto label21;
        };

     label01:
        return "XML_OBJECT";

     label02:
        return "JAVA_BOOLEAN";

     label03:
        return "JAVA_FLOAT";

     label04:
        return "JAVA_DOUBLE";

     label05:
        return "JAVA_BYTE";

     label06:
        return "JAVA_SHORT";

     label07:
        return "JAVA_INT";

     label08:
        return "JAVA_LONG";

     label09:
        return "JAVA_BIG_DECIMAL";

     label10:
        return "JAVA_BIG_INTEGER";

     label11:
        return "JAVA_STRING";

     label12:
        return "JAVA_BYTE_ARRAY";

     label13:
        return "JAVA_GDATE";

     label14:
        return "JAVA_GDURATION";

     label15:
        return "JAVA_DATE";

     label16:
        return "JAVA_QNAME";

     label17:
        return "JAVA_CALENDAR";

     label18:
        return "JAVA_LIST";

     label19:
        return "JAVA_ENUM";

     label20:
        return "JAVA_OBJECT";

     label21:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unknown java type code (");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    void dumpPropertyData()
    {
        org.apache.xmlbeans.QNameSet $r86;
        java.math.BigInteger $r24, $r30;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        javax.xml.namespace.QName $r3, $r76;
        java.lang.StringBuffer $r1, $r2, $r5, $r7, $r8, $r10, $r12, $r13, $r15, $r17, $r18, $r20, $r22, $r23, $r26, $r28, $r29, $r32, $r34, $r35, $r37, $r39, $r40, $r42, $r44, $r45, $r47, $r49, $r50, $r52, $r54, $r55, $r57, $r59, $r60, $r62, $r64, $r65, $r67, $r69, $r70, $r71, $r72, $r74, $r75, $r77, $r79, $r80, $r82, $r84, $r85, $r88;
        java.lang.String $r4, $r6, $r9, $r11, $r14, $r16, $r19, $r21, $r25, $r27, $r31, $r33, $r36, $r38, $r41, $r43, $r46, $r48, $r51, $r53, $r56, $r58, $r61, $r63, $r66, $r68, $r73, $r78, $r81, $r83, $r87, $r89;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>("Property");

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void indent()>();

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Name: ");

        $r3 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        $r4 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String qnameString(javax.xml.namespace.QName)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Type: ");

        $r9 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r11);

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Flags: ");

        $r14 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String propertyflagsString(int)>($i0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r16);

        $r17 = new java.lang.StringBuffer;

        specialinvoke $r17.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Container type: ");

        $r19 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readType()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r21);

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Min occurances: ");

        $r24 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.math.BigInteger readBigInteger()>();

        $r25 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String bigIntegerString(java.math.BigInteger)>($r24);

        $r26 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r27);

        $r28 = new java.lang.StringBuffer;

        specialinvoke $r28.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Max occurances: ");

        $r30 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.math.BigInteger readBigInteger()>();

        $r31 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String bigIntegerString(java.math.BigInteger)>($r30);

        $r32 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r33);

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Nillable: ");

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r36 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String alwaysString(int)>($i1);

        $r37 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r37.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r38);

        $r39 = new java.lang.StringBuffer;

        specialinvoke $r39.<java.lang.StringBuffer: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Default: ");

        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r41 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String alwaysString(int)>($i2);

        $r42 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r43);

        $r44 = new java.lang.StringBuffer;

        specialinvoke $r44.<java.lang.StringBuffer: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Fixed: ");

        $i3 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r46 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String alwaysString(int)>($i3);

        $r47 = virtualinvoke $r45.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r48);

        $r49 = new java.lang.StringBuffer;

        specialinvoke $r49.<java.lang.StringBuffer: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Default text: ");

        $r51 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r53);

        $r54 = new java.lang.StringBuffer;

        specialinvoke $r54.<java.lang.StringBuffer: void <init>()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Java prop name: ");

        $r56 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r58);

        $r59 = new java.lang.StringBuffer;

        specialinvoke $r59.<java.lang.StringBuffer: void <init>()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Java type code: ");

        $i4 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r61 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String jtcString(int)>($i4);

        $r62 = virtualinvoke $r60.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r63);

        $r64 = new java.lang.StringBuffer;

        specialinvoke $r64.<java.lang.StringBuffer: void <init>()>();

        $r65 = virtualinvoke $r64.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Type for java signature: ");

        $r66 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readType()>();

        $r67 = virtualinvoke $r65.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r68);

        $z0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atMost(int,int,int)>(2, 19, 0);

        if $z0 == 0 goto label1;

        $r84 = new java.lang.StringBuffer;

        specialinvoke $r84.<java.lang.StringBuffer: void <init>()>();

        $r85 = virtualinvoke $r84.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Java setter delimiter: ");

        $r86 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: org.apache.xmlbeans.QNameSet readQNameSet()>();

        $r87 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String qnameSetString(org.apache.xmlbeans.QNameSet)>($r86);

        $r88 = virtualinvoke $r85.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r87);

        $r89 = virtualinvoke $r88.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r89);

     label1:
        $z1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 16, 0);

        if $z1 == 0 goto label2;

        $r79 = new java.lang.StringBuffer;

        specialinvoke $r79.<java.lang.StringBuffer: void <init>()>();

        $r80 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Default value: ");

        $r81 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readXmlValueObject()>();

        $r82 = virtualinvoke $r80.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r81);

        $r83 = virtualinvoke $r82.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r83);

     label2:
        $i5 = $i0 & 1;

        if $i5 != 0 goto label4;

        $z2 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: boolean atLeast(int,int,int)>(2, 17, 0);

        if $z2 == 0 goto label4;

        $i6 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r69 = new java.lang.StringBuffer;

        specialinvoke $r69.<java.lang.StringBuffer: void <init>()>();

        $r70 = virtualinvoke $r69.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Accepted substitutions (");

        $r71 = virtualinvoke $r70.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r72 = virtualinvoke $r71.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("):");

        $r73 = virtualinvoke $r72.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r73);

        i7 = 0;

     label3:
        if i7 >= $i6 goto label4;

        $r74 = new java.lang.StringBuffer;

        specialinvoke $r74.<java.lang.StringBuffer: void <init>()>();

        $r75 = virtualinvoke $r74.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  Accepted name ");

        $r76 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        $r77 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r76);

        $r78 = virtualinvoke $r77.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void emit(java.lang.String)>($r78);

        i7 = i7 + 1;

        goto label3;

     label4:
        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void outdent()>();

        return;
    }

    java.lang.String readXmlValueObject()
    {
        byte[] $r4, $r5;
        java.lang.AssertionError $r10;
        java.lang.StringBuffer $r6, $r8, $r9, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        int $i0, $i1;
        java.lang.String $r1, $r3, r11, $r19;
        double $d0;
        boolean $z0;
        java.lang.CharSequence $r7;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        javax.xml.namespace.QName $r2;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readType()>();

        if $r1 != null goto label1;

        return "null";

     label1:
        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        tableswitch($i0)
        {
            case 0: goto label3;
            case 1: goto label2;
            case 2: goto label4;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label5;
            case 6: goto label4;
            case 7: goto label6;
            case 8: goto label6;
            case 9: goto label7;
            case 10: goto label7;
            case 11: goto label4;
            case 12: goto label4;
            case 13: goto label4;
            case 14: goto label4;
            case 15: goto label4;
            case 16: goto label4;
            case 17: goto label4;
            case 18: goto label4;
            case 19: goto label4;
            case 20: goto label4;
            case 21: goto label4;
            default: goto label2;
        };

     label2:
        $z0 = <org.apache.xmlbeans.impl.tool.XsbDumper: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label3:
        r11 = "nil";

        goto label8;

     label4:
        r11 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        goto label8;

     label5:
        $r3 = new java.lang.String;

        $r4 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: byte[] readByteArray()>();

        $r5 = staticinvoke <org.apache.xmlbeans.impl.util.HexBin: byte[] encode(byte[])>($r4);

        specialinvoke $r3.<java.lang.String: void <init>(byte[])>($r5);

        r11 = $r3;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 <= 19 goto label8;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r3.<java.lang.String: java.lang.CharSequence subSequence(int,int)>(0, 16);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("...");

        r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label8;

     label6:
        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        r11 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r2);

        goto label8;

     label7:
        $d0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: double readDouble()>();

        r11 = staticinvoke <java.lang.Double: java.lang.String toString(double)>($d0);

     label8:
        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r19;
    }

    double readDouble()
    {
        java.io.DataInputStream $r1;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.io.IOException $r2;
        double $d0;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.DataInputStream _input>;

        $d0 = virtualinvoke $r1.<java.io.DataInputStream: double readDouble()>();

     label2:
        return $d0;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void error(java.lang.Exception)>($r2);

        return 0.0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    java.lang.String SOAPArrayTypeString(org.apache.xmlbeans.soap.SOAPArrayType)
    {
        java.lang.StringBuffer $r1, $r4, $r6;
        org.apache.xmlbeans.impl.tool.XsbDumper r8;
        javax.xml.namespace.QName $r2;
        java.lang.String $r3, $r5, $r7;
        org.apache.xmlbeans.soap.SOAPArrayType r0;

        r8 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        r0 := @parameter0: org.apache.xmlbeans.soap.SOAPArrayType;

        if r0 != null goto label1;

        return "null";

     label1:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.soap.SOAPArrayType: javax.xml.namespace.QName getQName()>();

        $r3 = staticinvoke <org.apache.xmlbeans.impl.common.QNameHelper: java.lang.String pretty(javax.xml.namespace.QName)>($r2);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke r0.<org.apache.xmlbeans.soap.SOAPArrayType: java.lang.String soap11DimensionString()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    org.apache.xmlbeans.soap.SOAPArrayType readSOAPArrayType()
    {
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r2;
        org.apache.xmlbeans.soap.SOAPArrayType $r3;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        $r2 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = new org.apache.xmlbeans.soap.SOAPArrayType;

        specialinvoke $r3.<org.apache.xmlbeans.soap.SOAPArrayType: void <init>(javax.xml.namespace.QName,java.lang.String)>($r1, $r2);

        return $r3;
    }

    org.apache.xmlbeans.QNameSet readQNameSet()
    {
        java.util.HashSet $r1, $r2, $r3;
        org.apache.xmlbeans.QNameSet $r4, $r5;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        java.lang.String $r8;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        javax.xml.namespace.QName $r6, $r7;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $i0 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $i1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        i4 = 0;

     label1:
        if i4 >= $i1 goto label2;

        $r8 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.String readString()>();

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>($r8);

        i4 = i4 + 1;

        goto label1;

     label2:
        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        $i2 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        i5 = 0;

     label3:
        if i5 >= $i2 goto label4;

        $r7 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r7);

        i5 = i5 + 1;

        goto label3;

     label4:
        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        $i3 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int readShort()>();

        i6 = 0;

     label5:
        if i6 >= $i3 goto label6;

        $r6 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: javax.xml.namespace.QName readQName()>();

        interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r6);

        i6 = i6 + 1;

        goto label5;

     label6:
        if $i0 != 1 goto label7;

        $r5 = staticinvoke <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet forSets(java.util.Set,java.util.Set,java.util.Set,java.util.Set)>($r1, null, $r2, $r3);

        return $r5;

     label7:
        $r4 = staticinvoke <org.apache.xmlbeans.QNameSet: org.apache.xmlbeans.QNameSet forSets(java.util.Set,java.util.Set,java.util.Set,java.util.Set)>(null, $r1, $r3, $r2);

        return $r4;
    }

    byte[] readByteArray()
    {
        java.io.DataInputStream $r1, $r3;
        byte[] r2;
        short $s0;
        int $i1;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.io.IOException $r4;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

     label1:
        $r1 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.DataInputStream _input>;

        $s0 = virtualinvoke $r1.<java.io.DataInputStream: short readShort()>();

        $i1 = (int) $s0;

        r2 = newarray (byte)[$i1];

        $r3 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: java.io.DataInputStream _input>;

        virtualinvoke $r3.<java.io.DataInputStream: void readFully(byte[])>(r2);

     label2:
        return r2;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: void error(java.lang.Exception)>($r4);

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    java.math.BigInteger readBigInteger()
    {
        byte[] $r1;
        byte $b3, $b4;
        int $i0, $i1, $i2;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        java.math.BigInteger $r2, $r3, $r4;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        $r1 = virtualinvoke r0.<org.apache.xmlbeans.impl.tool.XsbDumper: byte[] readByteArray()>();

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $i1 = lengthof $r1;

        if $i1 != 1 goto label2;

        $b4 = $r1[0];

        if $b4 != 0 goto label2;

        $r4 = <java.math.BigInteger: java.math.BigInteger ZERO>;

        return $r4;

     label2:
        $i2 = lengthof $r1;

        if $i2 != 1 goto label3;

        $b3 = $r1[0];

        if $b3 != 1 goto label3;

        $r3 = <java.math.BigInteger: java.math.BigInteger ONE>;

        return $r3;

     label3:
        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(byte[])>($r1);

        return $r2;
    }

    protected boolean atLeast(int, int, int)
    {
        int i0, $i1, $i2, i3, $i4, $i5, i6, $i7;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        i6 := @parameter2: int;

        $i1 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _majorver>;

        if $i1 <= i0 goto label1;

        return 1;

     label1:
        $i2 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _majorver>;

        if $i2 >= i0 goto label2;

        return 0;

     label2:
        $i4 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _minorver>;

        if $i4 <= i3 goto label3;

        return 1;

     label3:
        $i5 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _minorver>;

        if $i5 >= i3 goto label4;

        return 0;

     label4:
        $i7 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _releaseno>;

        if $i7 < i6 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    protected boolean atMost(int, int, int)
    {
        int i0, $i1, $i2, i3, $i4, $i5, i6, $i7;
        org.apache.xmlbeans.impl.tool.XsbDumper r0;
        boolean $z0;

        r0 := @this: org.apache.xmlbeans.impl.tool.XsbDumper;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        i6 := @parameter2: int;

        $i1 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _majorver>;

        if $i1 <= i0 goto label1;

        return 0;

     label1:
        $i2 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _majorver>;

        if $i2 >= i0 goto label2;

        return 1;

     label2:
        $i4 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _minorver>;

        if $i4 <= i3 goto label3;

        return 0;

     label3:
        $i5 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _minorver>;

        if $i5 >= i3 goto label4;

        return 1;

     label4:
        $i7 = r0.<org.apache.xmlbeans.impl.tool.XsbDumper: int _releaseno>;

        if $i7 > i6 goto label5;

        $z0 = 1;

        goto label6;

     label5:
        $z0 = 0;

     label6:
        return $z0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        byte[] $r3;
        org.apache.xmlbeans.XmlOptions $r1, $r2;
        java.lang.Class $r0, $r4;
        boolean $z0, $z1;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_ATTRIBUTE_TYPE> = 524288;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_ABSTRACT> = 262144;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_FINAL_LIST> = 131072;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_FINAL_UNION> = 65536;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_FINAL_REST> = 32768;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_FINAL_EXT> = 16384;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_BLOCK_REST> = 8192;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_BLOCK_EXT> = 4096;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_COMPILED> = 2048;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_TOTAL_ORDER> = 1024;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_ORDER_SENSITIVE> = 512;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_HAS_PATTERN> = 256;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_UNION_OF_LISTS> = 128;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_STRINGENUM> = 64;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_NUMERIC> = 32;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_FINITE> = 16;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_BOUNDED> = 8;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_ORDERED> = 4;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_DOCUMENT_TYPE> = 2;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_SIMPLE_TYPE> = 1;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FIELD_LOCALELT> = 3;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FIELD_LOCALATTR> = 2;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FIELD_GLOBAL> = 1;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FIELD_NONE> = 0;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_PROP_JAVAARRAY> = 8;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_PROP_JAVAOPTIONAL> = 4;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_PROP_JAVASINGLETON> = 2;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_PROP_ISATTR> = 1;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_PART_FINALREST> = 512;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_PART_FINALEXT> = 256;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_PART_ABSTRACT> = 128;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_PART_BLOCKSUBST> = 64;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_PART_BLOCKREST> = 32;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_PART_BLOCKEXT> = 16;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_PART_NILLABLE> = 8;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_PART_FIXED> = 4;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FLAG_PART_SKIPPABLE> = 1;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FILETYPE_SCHEMAATTRIBUTEGROUP> = 7;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FILETYPE_SCHEMAMODELGROUP> = 6;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FILETYPE_SCHEMAPOINTER> = 5;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FILETYPE_SCHEMAATTRIBUTE> = 4;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FILETYPE_SCHEMAELEMENT> = 3;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FILETYPE_SCHEMATYPE> = 2;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int FILETYPE_SCHEMAINDEX> = 1;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int MINOR_VERSION> = 24;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int MAJOR_VERSION> = 2;

        <org.apache.xmlbeans.impl.tool.XsbDumper: int DATA_BABE> = -629491010;

        $r0 = <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.Class class$org$apache$xmlbeans$impl$tool$XsbDumper>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.Class class$(java.lang.String)>("org.apache.xmlbeans.impl.tool.XsbDumper");

        <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.Class class$org$apache$xmlbeans$impl$tool$XsbDumper> = $r4;

        goto label2;

     label1:
        $r4 = <org.apache.xmlbeans.impl.tool.XsbDumper: java.lang.Class class$org$apache$xmlbeans$impl$tool$XsbDumper>;

     label2:
        $z0 = virtualinvoke $r4.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.apache.xmlbeans.impl.tool.XsbDumper: boolean $assertionsDisabled> = $z1;

        $r1 = new org.apache.xmlbeans.XmlOptions;

        specialinvoke $r1.<org.apache.xmlbeans.XmlOptions: void <init>()>();

        $r2 = virtualinvoke $r1.<org.apache.xmlbeans.XmlOptions: org.apache.xmlbeans.XmlOptions setSavePrettyPrint()>();

        <org.apache.xmlbeans.impl.tool.XsbDumper: org.apache.xmlbeans.XmlOptions prettyOptions> = $r2;

        $r3 = newarray (byte)[1];

        $r3[0] = 0;

        <org.apache.xmlbeans.impl.tool.XsbDumper: byte[] SINGLE_ZERO_BYTE> = $r3;

        return;
    }
}
