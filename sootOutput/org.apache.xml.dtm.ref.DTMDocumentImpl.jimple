public class org.apache.xml.dtm.ref.DTMDocumentImpl extends java.lang.Object implements org.apache.xml.dtm.DTM, org.xml.sax.ContentHandler, org.xml.sax.ext.LexicalHandler
{
    protected static final byte DOCHANDLE_SHIFT;
    protected static final int NODEHANDLE_MASK;
    protected static final int DOCHANDLE_MASK;
    int m_docHandle;
    int m_docElement;
    int currentParent;
    int previousSibling;
    protected int m_currentNode;
    private boolean previousSiblingWasParent;
    int[] gotslot;
    private boolean done;
    boolean m_isError;
    private final boolean DEBUG;
    protected java.lang.String m_documentBaseURI;
    private org.apache.xml.dtm.ref.IncrementalSAXSource m_incrSAXSource;
    org.apache.xml.dtm.ref.ChunkedIntArray nodes;
    private org.apache.xml.utils.FastStringBuffer m_char;
    private int m_char_current_start;
    private org.apache.xml.dtm.ref.DTMStringPool m_localNames;
    private org.apache.xml.dtm.ref.DTMStringPool m_nsNames;
    private org.apache.xml.dtm.ref.DTMStringPool m_prefixNames;
    private org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNames;
    private org.apache.xml.utils.XMLStringFactory m_xsf;
    static final java.lang.String[] fixednames;

    public void <init>(org.apache.xml.dtm.DTMManager, int, org.apache.xml.dtm.DTMWSFilter, org.apache.xml.utils.XMLStringFactory)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray $r11;
        org.apache.xml.utils.FastStringBuffer $r12;
        org.apache.xml.dtm.ref.DTMStringPool $r13, $r14, $r15;
        org.apache.xml.utils.XMLStringFactory r8;
        int[] $r1;
        org.apache.xml.dtm.DTMManager r9;
        int i0, $i2, $i4, $i6;
        org.apache.xml.dtm.DTMWSFilter r10;
        org.apache.xml.dtm.ref.ExpandedNameTable $r16;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r9 := @parameter0: org.apache.xml.dtm.DTMManager;

        i0 := @parameter1: int;

        r10 := @parameter2: org.apache.xml.dtm.DTMWSFilter;

        r8 := @parameter3: org.apache.xml.utils.XMLStringFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean DEBUG> = 0;

        $i2 = (int) -1;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle> = $i2;

        $i4 = (int) -1;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docElement> = $i4;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int currentParent> = 0;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int previousSibling> = 0;

        $i6 = (int) -1;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_currentNode> = $i6;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean previousSiblingWasParent> = 0;

        $r1 = newarray (int)[4];

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot> = $r1;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean done> = 0;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean m_isError> = 0;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean DEBUG> = 0;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrSAXSource> = null;

        $r11 = new org.apache.xml.dtm.ref.ChunkedIntArray;

        specialinvoke $r11.<org.apache.xml.dtm.ref.ChunkedIntArray: void <init>(int)>(4);

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes> = $r11;

        $r12 = new org.apache.xml.utils.FastStringBuffer;

        specialinvoke $r12.<org.apache.xml.utils.FastStringBuffer: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.utils.FastStringBuffer m_char> = $r12;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_char_current_start> = 0;

        $r13 = new org.apache.xml.dtm.ref.DTMStringPool;

        specialinvoke $r13.<org.apache.xml.dtm.ref.DTMStringPool: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_localNames> = $r13;

        $r14 = new org.apache.xml.dtm.ref.DTMStringPool;

        specialinvoke $r14.<org.apache.xml.dtm.ref.DTMStringPool: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_nsNames> = $r14;

        $r15 = new org.apache.xml.dtm.ref.DTMStringPool;

        specialinvoke $r15.<org.apache.xml.dtm.ref.DTMStringPool: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_prefixNames> = $r15;

        $r16 = new org.apache.xml.dtm.ref.ExpandedNameTable;

        specialinvoke $r16.<org.apache.xml.dtm.ref.ExpandedNameTable: void <init>()>();

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ExpandedNameTable m_expandedNames> = $r16;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void initDocument(int)>(i0);

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.utils.XMLStringFactory m_xsf> = r8;

        return;
    }

    public void setIncrementalSAXSource(org.apache.xml.dtm.ref.IncrementalSAXSource)
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.dtm.ref.IncrementalSAXSource r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: org.apache.xml.dtm.ref.IncrementalSAXSource;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrSAXSource> = r1;

        interfaceinvoke r1.<org.apache.xml.dtm.ref.IncrementalSAXSource: void setContentHandler(org.xml.sax.ContentHandler)>(r0);

        interfaceinvoke r1.<org.apache.xml.dtm.ref.IncrementalSAXSource: void setLexicalHandler(org.xml.sax.ext.LexicalHandler)>(r0);

        return;
    }

    private final int appendNode(int, int, int, int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray $r1, $r2;
        int i0, i1, i2, i3, $i4, $i5;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i4 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray: int appendSlot(int,int,int,int)>(i0, i1, i2, i3);

        $z0 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean previousSiblingWasParent>;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i5 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int previousSibling>;

        virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray: void writeEntry(int,int,int)>($i5, 2, $i4);

     label1:
        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean previousSiblingWasParent> = 0;

        return $i4;
    }

    public void setFeature(java.lang.String, boolean)
    {
        java.lang.String r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        return;
    }

    public void setLocalNameTable(org.apache.xml.dtm.ref.DTMStringPool)
    {
        org.apache.xml.dtm.ref.DTMStringPool r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: org.apache.xml.dtm.ref.DTMStringPool;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_localNames> = r1;

        return;
    }

    public org.apache.xml.dtm.ref.DTMStringPool getLocalNameTable()
    {
        org.apache.xml.dtm.ref.DTMStringPool $r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_localNames>;

        return $r1;
    }

    public void setNsNameTable(org.apache.xml.dtm.ref.DTMStringPool)
    {
        org.apache.xml.dtm.ref.DTMStringPool r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: org.apache.xml.dtm.ref.DTMStringPool;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_nsNames> = r1;

        return;
    }

    public org.apache.xml.dtm.ref.DTMStringPool getNsNameTable()
    {
        org.apache.xml.dtm.ref.DTMStringPool $r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_nsNames>;

        return $r1;
    }

    public void setPrefixNameTable(org.apache.xml.dtm.ref.DTMStringPool)
    {
        org.apache.xml.dtm.ref.DTMStringPool r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: org.apache.xml.dtm.ref.DTMStringPool;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_prefixNames> = r1;

        return;
    }

    public org.apache.xml.dtm.ref.DTMStringPool getPrefixNameTable()
    {
        org.apache.xml.dtm.ref.DTMStringPool $r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_prefixNames>;

        return $r1;
    }

    void setContentBuffer(org.apache.xml.utils.FastStringBuffer)
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.utils.FastStringBuffer r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: org.apache.xml.utils.FastStringBuffer;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.utils.FastStringBuffer m_char> = r1;

        return;
    }

    org.apache.xml.utils.FastStringBuffer getContentBuffer()
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.utils.FastStringBuffer $r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.utils.FastStringBuffer m_char>;

        return $r1;
    }

    public org.xml.sax.ContentHandler getContentHandler()
    {
        org.apache.xml.dtm.ref.IncrementalSAXSource $r1, $r2;
        org.xml.sax.ContentHandler $r3;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrSAXSource>;

        $z0 = $r1 instanceof org.apache.xml.dtm.ref.IncrementalSAXSource_Filter;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrSAXSource>;

        $r3 = (org.xml.sax.ContentHandler) $r2;

        return $r3;

     label1:
        return r0;
    }

    public org.xml.sax.ext.LexicalHandler getLexicalHandler()
    {
        org.xml.sax.ext.LexicalHandler $r3;
        org.apache.xml.dtm.ref.IncrementalSAXSource $r1, $r2;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrSAXSource>;

        $z0 = $r1 instanceof org.apache.xml.dtm.ref.IncrementalSAXSource_Filter;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrSAXSource>;

        $r3 = (org.xml.sax.ext.LexicalHandler) $r2;

        return $r3;

     label1:
        return r0;
    }

    public org.xml.sax.EntityResolver getEntityResolver()
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        return null;
    }

    public org.xml.sax.DTDHandler getDTDHandler()
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        return null;
    }

    public org.xml.sax.ErrorHandler getErrorHandler()
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        return null;
    }

    public org.xml.sax.ext.DeclHandler getDeclHandler()
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        return null;
    }

    public boolean needsTwoThreads()
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.dtm.ref.IncrementalSAXSource $r1;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.IncrementalSAXSource m_incrSAXSource>;

        if null == $r1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void characters(char[], int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.utils.FastStringBuffer $r2;
        int i0, i1;
        char[] r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.utils.FastStringBuffer m_char>;

        virtualinvoke $r2.<org.apache.xml.utils.FastStringBuffer: void append(char[],int,int)>(r1, i0, i1);

        return;
    }

    private void processAccumulatedText()
    {
        org.apache.xml.utils.FastStringBuffer $r1;
        int $i0, $i1, $i2, $i3, $i4;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.utils.FastStringBuffer m_char>;

        $i0 = virtualinvoke $r1.<org.apache.xml.utils.FastStringBuffer: int length()>();

        $i1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_char_current_start>;

        if $i0 == $i1 goto label1;

        $i4 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_char_current_start>;

        $i2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_char_current_start>;

        $i3 = $i0 - $i2;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void appendTextChild(int,int)>($i4, $i3);

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_char_current_start> = $i0;

     label1:
        return;
    }

    public void endDocument() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void appendEndDocument()>();

        return;
    }

    public void endElement(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String r1, r2, r3;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void processAccumulatedText()>();

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void appendEndElement()>();

        return;
    }

    public void endPrefixMapping(java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void ignorableWhitespace(char[], int, int) throws org.xml.sax.SAXException
    {
        int i0, i1;
        char[] r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void processingInstruction(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String r1, r2;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void processAccumulatedText()>();

        return;
    }

    public void setDocumentLocator(org.xml.sax.Locator)
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.xml.sax.Locator r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: org.xml.sax.Locator;

        return;
    }

    public void skippedEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void processAccumulatedText()>();

        return;
    }

    public void startDocument() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void appendStartDocument()>();

        return;
    }

    public void startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.utils.FastStringBuffer $r22, $r24;
        java.lang.StringBuffer $r3, $r4, $r5, $r7, $r38;
        java.lang.String $r8, r9, $r14, $r17, $r18, $r19, $r20, $r21, $r23, $r25, $r26, $r28, $r31, r32, r33, r34, r35, r36, r37;
        org.apache.xml.dtm.ref.DTMStringPool $r6, $r10, $r11, $r12, $r15, $r16, $r27, $r29, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, $i22, $i24;
        org.xml.sax.Attributes r13;
        java.io.PrintStream $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r9 := @parameter0: java.lang.String;

        r32 := @parameter1: java.lang.String;

        r33 := @parameter2: java.lang.String;

        r13 := @parameter3: org.xml.sax.Attributes;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void processAccumulatedText()>();

        r34 = null;

        $i0 = virtualinvoke r33.<java.lang.String: int indexOf(int)>(58);

        if $i0 <= 0 goto label01;

        r34 = virtualinvoke r33.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label01:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r38 = new java.lang.StringBuffer;

        specialinvoke $r38.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Prefix=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r34);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" index=");

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_prefixNames>;

        $i1 = virtualinvoke $r6.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r34);

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r8);

        $r10 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_nsNames>;

        $i2 = virtualinvoke $r10.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r9);

        $r11 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_localNames>;

        $i3 = virtualinvoke $r11.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r32);

        $r12 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_prefixNames>;

        $i4 = virtualinvoke $r12.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r34);

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void appendStartElement(int,int,int)>($i2, $i3, $i4);

        if r13 != null goto label02;

        $i18 = 0;

        goto label03;

     label02:
        $i18 = interfaceinvoke r13.<org.xml.sax.Attributes: int getLength()>();

     label03:
        i5 = $i18;

        i19 = $i18 - 1;

        goto label09;

     label04:
        $r14 = interfaceinvoke r13.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i19);

        $z0 = virtualinvoke $r14.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z0 != 0 goto label05;

        $r19 = "xmlns";

        $z2 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z2 == 0 goto label08;

     label05:
        $i6 = virtualinvoke $r14.<java.lang.String: int indexOf(int)>(58);

        if $i6 <= 0 goto label06;

        r35 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        goto label07;

     label06:
        r35 = null;

     label07:
        $r15 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_prefixNames>;

        $i7 = virtualinvoke $r15.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r35);

        $r16 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_nsNames>;

        $r17 = interfaceinvoke r13.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i19);

        $i8 = virtualinvoke $r16.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>($r17);

        $r18 = interfaceinvoke r13.<org.xml.sax.Attributes: java.lang.String getType(int)>(i19);

        $z1 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ID");

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void appendNSDeclaration(int,int,boolean)>($i7, $i8, $z1);

     label08:
        $i22 = (int) -1;

        i19 = i19 + $i22;

     label09:
        if i19 >= 0 goto label04;

        i20 = i5 - 1;

        goto label15;

     label10:
        $r20 = interfaceinvoke r13.<org.xml.sax.Attributes: java.lang.String getQName(int)>(i20);

        $z3 = virtualinvoke $r20.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns:");

        if $z3 != 0 goto label14;

        $r21 = "xmlns";

        $z4 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z4 != 0 goto label14;

        $i9 = virtualinvoke $r20.<java.lang.String: int indexOf(int)>(58);

        if $i9 <= 0 goto label11;

        r36 = virtualinvoke $r20.<java.lang.String: java.lang.String substring(int,int)>(0, $i9);

        $i17 = $i9 + 1;

        r37 = virtualinvoke $r20.<java.lang.String: java.lang.String substring(int)>($i17);

        goto label12;

     label11:
        r36 = "";

        r37 = $r20;

     label12:
        $r22 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.utils.FastStringBuffer m_char>;

        $r23 = interfaceinvoke r13.<org.xml.sax.Attributes: java.lang.String getValue(int)>(i20);

        virtualinvoke $r22.<org.apache.xml.utils.FastStringBuffer: void append(java.lang.String)>($r23);

        $r24 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.utils.FastStringBuffer m_char>;

        $i10 = virtualinvoke $r24.<org.apache.xml.utils.FastStringBuffer: int length()>();

        $r25 = "xmlns";

        $z5 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>(r36);

        if $z5 != 0 goto label13;

        $r26 = "xmlns";

        $z6 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z6 != 0 goto label13;

        $r27 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_nsNames>;

        $r28 = interfaceinvoke r13.<org.xml.sax.Attributes: java.lang.String getURI(int)>(i20);

        $i11 = virtualinvoke $r27.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>($r28);

        $r29 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_localNames>;

        $i12 = virtualinvoke $r29.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r37);

        $r30 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_prefixNames>;

        $i13 = virtualinvoke $r30.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r36);

        $r31 = interfaceinvoke r13.<org.xml.sax.Attributes: java.lang.String getType(int)>(i20);

        $z7 = virtualinvoke $r31.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("ID");

        $i16 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_char_current_start>;

        $i14 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_char_current_start>;

        $i15 = $i10 - $i14;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void appendAttribute(int,int,int,boolean,int,int)>($i11, $i12, $i13, $z7, $i16, $i15);

     label13:
        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_char_current_start> = $i10;

     label14:
        $i24 = (int) -1;

        i20 = i20 + $i24;

     label15:
        if i20 >= 0 goto label10;

        return;
    }

    public void startPrefixMapping(java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String r1, r2;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public void comment(char[], int, int) throws org.xml.sax.SAXException
    {
        org.apache.xml.utils.FastStringBuffer $r2;
        int i0, i1, $i2, $i3, $i4;
        char[] r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void processAccumulatedText()>();

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.utils.FastStringBuffer m_char>;

        virtualinvoke $r2.<org.apache.xml.utils.FastStringBuffer: void append(char[],int,int)>(r1, i0, i1);

        $i2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_char_current_start>;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void appendComment(int,int)>($i2, i1);

        $i3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_char_current_start>;

        $i4 = $i3 + i1;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_char_current_start> = $i4;

        return;
    }

    public void endCDATA() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        return;
    }

    public void endDTD() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        return;
    }

    public void endEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void startCDATA() throws org.xml.sax.SAXException
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        return;
    }

    public void startDTD(java.lang.String, java.lang.String, java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String r1, r2, r3;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return;
    }

    public void startEntity(java.lang.String) throws org.xml.sax.SAXException
    {
        java.lang.String r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        return;
    }

    final void initDocument(int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray $r1;
        int i0, $i1, $i3, $i5;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        $i1 = i0 << 22;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle> = $i1;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i3 = (int) -1;

        $i5 = (int) -1;

        virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray: void writeSlot(int,int,int,int,int)>(0, 9, $i3, $i5, 0);

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean done> = 0;

        return;
    }

    public boolean hasChildNodes(int)
    {
        int i0, $i1, $i3;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int getFirstChild(int)>(i0);

        $i3 = (int) -1;

        if $i1 == $i3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getFirstChild(int)
    {
        short s2;
        int[] $r1, $r3, $r4, $r5, $r6, $r8, $r10;
        int $i0, $i1, $i3, $i4, $i5, $i6, i7, i8, i9, $i10, i11, $i13, $i14, $i15, $i17, $i19, $i21, $i23;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.dtm.ref.ChunkedIntArray $r2, $r7, $r9;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i8 := @parameter0: int;

        i9 = i8 & 8388607;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>(i9, $r1);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i0 = $r3[0];

        $i13 = (int) 65535;

        $i1 = $i0 & $i13;

        s2 = (short) $i1;

        if s2 == 1 goto label1;

        $i14 = (int) s2;

        if $i14 == 9 goto label1;

        $i15 = (int) s2;

        if $i15 != 5 goto label5;

     label1:
        $i10 = i9 + 1;

        i11 = $i10;

        $r9 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $r10 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r9.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>($i10, $r10);

        goto label4;

     label2:
        $r5 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        i11 = $r5[2];

        $i17 = (int) -1;

        if i11 != $i17 goto label3;

        $i19 = (int) -1;

        return $i19;

     label3:
        $r7 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r7.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>(i11, $r6);

     label4:
        $r4 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i3 = $r4[0];

        $i21 = (int) 65535;

        $i4 = $i3 & $i21;

        if 2 == $i4 goto label2;

        $r8 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i5 = $r8[1];

        if $i5 != i9 goto label5;

        $i6 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle>;

        i7 = i11 | $i6;

        return i7;

     label5:
        $i23 = (int) -1;

        return $i23;
    }

    public int getLastChild(int)
    {
        int $i0, $i1, i2, i3, i4, i5, $i7, $i9;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i2 := @parameter0: int;

        i3 = i2 & 8388607;

        $i7 = (int) -1;

        i4 = $i7;

        i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int getFirstChild(int)>(i3);

        goto label2;

     label1:
        i4 = i5;

        i5 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int getNextSibling(int)>(i5);

     label2:
        $i9 = (int) -1;

        if i5 != $i9 goto label1;

        $i0 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle>;

        $i1 = i4 | $i0;

        return $i1;
    }

    public int getAttributeNode(int, java.lang.String, java.lang.String)
    {
        short s4;
        int[] $r5, $r7, $r8, $r9, $r10, $r12;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, $i14, $i15, $i17;
        java.lang.String r1, r3;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.dtm.ref.ChunkedIntArray $r6, $r11;
        org.apache.xml.dtm.ref.DTMStringPool $r2, $r4;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i11 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_nsNames>;

        $i0 = virtualinvoke $r2.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r1);

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_localNames>;

        $i1 = virtualinvoke $r4.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>(r3);

        i12 = i11 & 8388607;

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r6.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>(i12, $r5);

        $r7 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i2 = $r7[0];

        $i14 = (int) 65535;

        $i3 = $i2 & $i14;

        s4 = (short) $i3;

        if s4 != 1 goto label3;

        i12 = i12 + 1;

        goto label3;

     label1:
        $r8 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i5 = $r8[0];

        $i6 = $i5 << 16;

        if $i0 != $i6 goto label2;

        $r12 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i7 = $r12[3];

        if $i7 != $i1 goto label2;

        $i9 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle>;

        $i10 = i12 | $i9;

        return $i10;

     label2:
        $r9 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i8 = $r9[2];

        i12 = $i8;

        $r11 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $r10 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r11.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>($i8, $r10);

     label3:
        $i15 = (int) s4;

        if $i15 == 2 goto label1;

        $i17 = (int) -1;

        return $i17;
    }

    public int getFirstAttribute(int)
    {
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, $i8, $i10, $i12, $i14, $i16;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.dtm.ref.ChunkedIntArray $r1, $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i5 := @parameter0: int;

        i6 = i5 & 8388607;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i0 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray: int readEntry(int,int)>(i6, 0);

        $i10 = (int) 65535;

        $i1 = $i0 & $i10;

        if 1 == $i1 goto label1;

        $i12 = (int) -1;

        return $i12;

     label1:
        i7 = i6 + 1;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i2 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray: int readEntry(int,int)>(i7, 0);

        $i14 = (int) 65535;

        $i3 = $i2 & $i14;

        if 2 != $i3 goto label2;

        $i4 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle>;

        $i8 = i7 | $i4;

        goto label3;

     label2:
        $i16 = (int) -1;

        $i8 = $i16;

     label3:
        return $i8;
    }

    public int getFirstNamespaceNode(int, boolean)
    {
        int i0, $i2;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i2 = (int) -1;

        return $i2;
    }

    public int getNextSibling(int)
    {
        short s2;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i11, i12, $i14, $i16, $i17, $i18, $i20, $i22, $i24;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.dtm.ref.ChunkedIntArray $r1, $r2, $r3, $r4;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i9 := @parameter0: int;

        i10 = i9 & 8388607;

        if i10 != 0 goto label1;

        $i14 = (int) -1;

        return $i14;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i0 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray: int readEntry(int,int)>(i10, 0);

        $i16 = (int) 65535;

        $i1 = $i0 & $i16;

        s2 = (short) $i1;

        if s2 == 1 goto label2;

        $i17 = (int) s2;

        if $i17 == 2 goto label2;

        $i18 = (int) s2;

        if $i18 != 5 goto label4;

     label2:
        $r4 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i11 = virtualinvoke $r4.<org.apache.xml.dtm.ref.ChunkedIntArray: int readEntry(int,int)>(i10, 2);

        $i20 = (int) -1;

        if $i11 != $i20 goto label3;

        $i22 = (int) -1;

        return $i22;

     label3:
        if $i11 == 0 goto label4;

        $i7 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle>;

        $i8 = $i7 | $i11;

        return $i8;

     label4:
        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i3 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray: int readEntry(int,int)>(i10, 1);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        i12 = i10 + 1;

        $i4 = virtualinvoke $r3.<org.apache.xml.dtm.ref.ChunkedIntArray: int readEntry(int,int)>(i12, 1);

        if $i4 != $i3 goto label5;

        $i5 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle>;

        $i6 = $i5 | i12;

        return $i6;

     label5:
        $i24 = (int) -1;

        return $i24;
    }

    public int getPreviousSibling(int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray $r1;
        int $i0, $i1, $i2, i3, i4, i5, i6, $i8, $i10;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i3 := @parameter0: int;

        i4 = i3 & 8388607;

        if i4 != 0 goto label1;

        $i8 = (int) -1;

        return $i8;

     label1:
        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i0 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray: int readEntry(int,int)>(i4, 1);

        $i10 = (int) -1;

        i5 = $i10;

        i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int getFirstChild(int)>($i0);

        goto label3;

     label2:
        i5 = i6;

        i6 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int getNextSibling(int)>(i6);

     label3:
        if i6 != i4 goto label2;

        $i1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle>;

        $i2 = i5 | $i1;

        return $i2;
    }

    public int getNextAttribute(int)
    {
        short s2;
        int[] $r1, $r3, $r4, $r5;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7, i8, i9, $i11, $i12, $i14, $i16;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.dtm.ref.ChunkedIntArray $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i8 := @parameter0: int;

        i9 = i8 & 8388607;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>(i9, $r1);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i0 = $r3[0];

        $i11 = (int) 65535;

        $i1 = $i0 & $i11;

        s2 = (short) $i1;

        if s2 != 1 goto label1;

        $i7 = virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int getFirstAttribute(int)>(i9);

        return $i7;

     label1:
        $i12 = (int) s2;

        if $i12 != 2 goto label2;

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i3 = $r4[2];

        $i14 = (int) -1;

        if $i3 == $i14 goto label2;

        $i5 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle>;

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i4 = $r5[2];

        $i6 = $i5 | $i4;

        return $i6;

     label2:
        $i16 = (int) -1;

        return $i16;
    }

    public int getNextNamespaceNode(int, int, boolean)
    {
        int i0, i1, $i3;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i3 = (int) -1;

        return $i3;
    }

    public int getNextDescendant(int, int)
    {
        short s4;
        int[] $r1, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, $i15, $i17, $i18, $i20;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        boolean $z0, $z1, $z2;
        org.apache.xml.dtm.ref.ChunkedIntArray $r2, $r6;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i10 := @parameter0: int;

        i11 := @parameter1: int;

        i12 = i10 & 8388607;

        i13 = i11 & 8388607;

        if i13 != 0 goto label7;

        $i15 = (int) -1;

        return $i15;

     label1:
        $z0 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean done>;

        if $z0 == 0 goto label2;

        $r6 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i9 = virtualinvoke $r6.<org.apache.xml.dtm.ref.ChunkedIntArray: int slotsUsed()>();

        if i13 <= $i9 goto label2;

        goto label8;

     label2:
        if i13 <= i12 goto label6;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i0 = i13 + 1;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>($i0, $r1);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i1 = $r3[2];

        if $i1 == 0 goto label5;

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i2 = $r4[0];

        $i17 = (int) 65535;

        $i3 = $i2 & $i17;

        s4 = (short) $i3;

        $i18 = (int) s4;

        if $i18 != 2 goto label3;

        i13 = i13 + 2;

        goto label4;

     label3:
        $r5 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        i5 = $r5[1];

        if i5 < i12 goto label8;

        $i7 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle>;

        $i6 = i13 + 1;

        $i8 = $i7 | $i6;

        return $i8;

     label4:
        goto label7;

     label5:
        $z1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean done>;

        if $z1 != 0 goto label8;

        goto label7;

     label6:
        i13 = i13 + 1;

     label7:
        $z2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean m_isError>;

        if $z2 == 0 goto label1;

     label8:
        $i20 = (int) -1;

        return $i20;
    }

    public int getNextFollowing(int, int)
    {
        int i0, i1, $i3;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i3 = (int) -1;

        return $i3;
    }

    public int getNextPreceding(int, int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray $r1, $r2;
        int $i0, $i1, i2, $i3, $i4, $i5, i6, i7, $i9, $i11, $i13;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i2 := @parameter0: int;

        i6 := @parameter1: int;

        i7 = i6 & 8388607;

        goto label3;

     label1:
        $i9 = (int) -1;

        i7 = i7 + $i9;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i0 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray: int readEntry(int,int)>(i7, 0);

        $i11 = (int) 65535;

        $i1 = $i0 & $i11;

        if 2 != $i1 goto label2;

        goto label3;

     label2:
        $i3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle>;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i4 = virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray: int specialFind(int,int)>(i2, i7);

        $i5 = $i3 | $i4;

        return $i5;

     label3:
        if i7 > 1 goto label1;

        $i13 = (int) -1;

        return $i13;
    }

    public int getParent(int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray $r1;
        int i0, $i1, $i2, $i3;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle>;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray: int readEntry(int,int)>(i0, 1);

        $i3 = $i1 | $i2;

        return $i3;
    }

    public int getDocumentRoot()
    {
        int $i0, $i1, $i2;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        $i1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle>;

        $i0 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docElement>;

        $i2 = $i1 | $i0;

        return $i2;
    }

    public int getDocument()
    {
        int $i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        $i0 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle>;

        return $i0;
    }

    public int getOwnerDocument(int)
    {
        int i0, $i1, $i2, $i4;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        $i1 = i0 & 8388607;

        if $i1 != 0 goto label1;

        $i4 = (int) -1;

        return $i4;

     label1:
        $i2 = i0 & -8388608;

        return $i2;
    }

    public int getDocumentRoot(int)
    {
        int i0, $i1, $i2, $i4;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        $i1 = i0 & 8388607;

        if $i1 != 0 goto label1;

        $i4 = (int) -1;

        return $i4;

     label1:
        $i2 = i0 & -8388608;

        return $i2;
    }

    public org.apache.xml.utils.XMLString getStringValue(int)
    {
        org.apache.xml.dtm.ref.ChunkedIntArray $r2;
        org.apache.xml.utils.FastStringBuffer $r6;
        org.apache.xml.utils.XMLString $r8;
        org.apache.xml.utils.XMLStringFactory $r7;
        int[] $r1, $r3, $r4, $r5;
        int i0, $i1, i2, $i3, $i4;
        java.lang.String r9;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>(i0, $r1);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i1 = $r3[0];

        i2 = $i1 & 255;

        r9 = null;

        tableswitch(i2)
        {
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label2;
            case 8: goto label1;
            default: goto label2;
        };

     label1:
        $r6 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.utils.FastStringBuffer m_char>;

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i4 = $r4[2];

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i3 = $r5[3];

        r9 = virtualinvoke $r6.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i4, $i3);

        goto label2;

     label2:
        $r7 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.utils.XMLStringFactory m_xsf>;

        $r8 = virtualinvoke $r7.<org.apache.xml.utils.XMLStringFactory: org.apache.xml.utils.XMLString newstr(java.lang.String)>(r9);

        return $r8;
    }

    public int getStringValueChunkCount(int)
    {
        int i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        return 0;
    }

    public char[] getStringValueChunk(int, int, int[])
    {
        int[] r2;
        int i0, i1;
        char[] $r0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r1;

        r1 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 := @parameter2: int[];

        $r0 = newarray (char)[0];

        return $r0;
    }

    public int getExpandedTypeID(int)
    {
        int[] $r1, $r3, $r7;
        java.lang.StringBuffer $r10, $r11, $r12, $r13;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r5, $r6, $r9, $r14;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.dtm.ref.ChunkedIntArray $r2;
        org.apache.xml.dtm.ref.DTMStringPool $r4, $r8, $r15;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>(i0, $r1);

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_localNames>;

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i1 = $r3[3];

        $r5 = virtualinvoke $r4.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>($i1);

        $i2 = virtualinvoke $r5.<java.lang.String: int indexOf(java.lang.String)>(":");

        $i3 = $i2 + 1;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int)>($i3);

        $r8 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_nsNames>;

        $r7 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i4 = $r7[0];

        $i5 = $i4 << 16;

        $r9 = virtualinvoke $r8.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>($i5);

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $r15 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_nsNames>;

        $i6 = virtualinvoke $r15.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>($r14);

        return $i6;
    }

    public int getExpandedTypeID(java.lang.String, java.lang.String, int)
    {
        org.apache.xml.dtm.ref.DTMStringPool $r8;
        java.lang.StringBuffer $r0, $r2, $r3, $r5;
        int $i0, i1;
        java.lang.String r1, r4, $r6;
        org.apache.xml.dtm.ref.DTMDocumentImpl r7;

        r7 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = r7.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_nsNames>;

        $i0 = virtualinvoke $r8.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>($r6);

        return $i0;
    }

    public java.lang.String getLocalNameFromExpandedNameID(int)
    {
        org.apache.xml.dtm.ref.DTMStringPool $r1;
        int i0, $i1, $i2;
        java.lang.String $r2, $r3;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_localNames>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i0);

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>(":");

        $i2 = $i1 + 1;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i2);

        return $r3;
    }

    public java.lang.String getNamespaceFromExpandedNameID(int)
    {
        org.apache.xml.dtm.ref.DTMStringPool $r1;
        int i0, $i1;
        java.lang.String $r2, $r3;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_localNames>;

        $r2 = virtualinvoke $r1.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>(i0);

        $i1 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>(":");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        return $r3;
    }

    public java.lang.String getNodeName(int)
    {
        int[] $r1, $r3, $r5;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.dtm.ref.ChunkedIntArray $r2;
        java.lang.String[] $r4;
        short s3;
        java.lang.StringBuffer $r8, $r9, $r10, $r11, $r12, $r13, $r20, $r21, $r22, $r24, $r25;
        int i0, $i1, $i2, i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i14, $i16;
        java.lang.String $r14, $r16, $r18, r23;
        java.io.PrintStream $r7;
        org.apache.xml.dtm.ref.DTMStringPool $r15, $r17;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>(i0, $r1);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i1 = $r3[0];

        $i11 = (int) 65535;

        $i2 = $i1 & $i11;

        s3 = (short) $i2;

        $r4 = <org.apache.xml.dtm.ref.DTMDocumentImpl: java.lang.String[] fixednames>;

        $i12 = (int) s3;

        r23 = $r4[$i12];

        if null != r23 goto label1;

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        i4 = $r5[3];

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r24 = new java.lang.StringBuffer;

        specialinvoke $r24.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("got i=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i4);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $i5 = i4 >> 16;

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $i14 = (int) 65535;

        $i6 = i4 & $i14;

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r14);

        $r15 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_localNames>;

        $i16 = (int) 65535;

        $i7 = i4 & $i16;

        $r16 = virtualinvoke $r15.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>($i7);

        r23 = $r16;

        $r17 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_prefixNames>;

        $i8 = i4 >> 16;

        $r18 = virtualinvoke $r17.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>($i8);

        if $r18 == null goto label1;

        $i9 = virtualinvoke $r18.<java.lang.String: int length()>();

        if $i9 <= 0 goto label1;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(":");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        return r23;
    }

    public java.lang.String getNodeNameX(int)
    {
        int i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getLocalName(int)
    {
        short s3;
        int[] $r1, $r3, $r4;
        int i0, $i1, $i2, $i4, $i5, $i7, $i8, $i10;
        java.lang.String $r6, r7;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.dtm.ref.ChunkedIntArray $r2;
        org.apache.xml.dtm.ref.DTMStringPool $r5;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>(i0, $r1);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i1 = $r3[0];

        $i7 = (int) 65535;

        $i2 = $i1 & $i7;

        s3 = (short) $i2;

        r7 = "";

        if s3 == 1 goto label1;

        $i8 = (int) s3;

        if $i8 != 2 goto label2;

     label1:
        $r4 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i5 = $r4[3];

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_localNames>;

        $i10 = (int) 65535;

        $i4 = $i5 & $i10;

        $r6 = virtualinvoke $r5.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>($i4);

        r7 = $r6;

        if $r6 != null goto label2;

        r7 = "";

     label2:
        return r7;
    }

    public java.lang.String getPrefix(int)
    {
        short s3;
        int[] $r1, $r3, $r4;
        int i0, $i1, $i2, $i4, $i5, $i7, $i8;
        java.lang.String $r6, r7;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.dtm.ref.ChunkedIntArray $r2;
        org.apache.xml.dtm.ref.DTMStringPool $r5;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>(i0, $r1);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i1 = $r3[0];

        $i7 = (int) 65535;

        $i2 = $i1 & $i7;

        s3 = (short) $i2;

        r7 = "";

        if s3 == 1 goto label1;

        $i8 = (int) s3;

        if $i8 != 2 goto label2;

     label1:
        $r4 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i5 = $r4[3];

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_prefixNames>;

        $i4 = $i5 >> 16;

        $r6 = virtualinvoke $r5.<org.apache.xml.dtm.ref.DTMStringPool: java.lang.String indexToString(int)>($i4);

        r7 = $r6;

        if $r6 != null goto label2;

        r7 = "";

     label2:
        return r7;
    }

    public java.lang.String getNamespaceURI(int)
    {
        int i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getNodeValue(int)
    {
        int[] $r1, $r3, $r4, $r5, $r7;
        int i0, $i1, i2, $i3, $i4, $i5;
        java.lang.String r9;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.dtm.ref.ChunkedIntArray $r2, $r8;
        org.apache.xml.utils.FastStringBuffer $r6;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>(i0, $r1);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i1 = $r3[0];

        i2 = $i1 & 255;

        r9 = null;

        tableswitch(i2)
        {
            case 1: goto label3;
            case 2: goto label1;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label3;
            case 6: goto label3;
            case 7: goto label3;
            case 8: goto label2;
            default: goto label3;
        };

     label1:
        $r8 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i5 = i0 + 1;

        $r7 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r8.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>($i5, $r7);

     label2:
        $r6 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.utils.FastStringBuffer m_char>;

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i4 = $r4[2];

        $r5 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i3 = $r5[3];

        r9 = virtualinvoke $r6.<org.apache.xml.utils.FastStringBuffer: java.lang.String getString(int,int)>($i4, $i3);

        goto label3;

     label3:
        return r9;
    }

    public short getNodeType(int)
    {
        short $s3;
        org.apache.xml.dtm.ref.ChunkedIntArray $r1;
        int i0, $i1, $i2, $i5;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i1 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray: int readEntry(int,int)>(i0, 0);

        $i5 = (int) 65535;

        $i2 = $i1 & $i5;

        $s3 = (short) $i2;

        return $s3;
    }

    public short getLevel(int)
    {
        short s2;
        org.apache.xml.dtm.ref.ChunkedIntArray $r1;
        int $i0, i1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i1 := @parameter0: int;

        s2 = 0;

        goto label2;

     label1:
        $i0 = s2 + 1;

        s2 = (short) $i0;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        i1 = virtualinvoke $r1.<org.apache.xml.dtm.ref.ChunkedIntArray: int readEntry(int,int)>(i1, 1);

     label2:
        if i1 != 0 goto label1;

        return s2;
    }

    public boolean isSupported(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        return 0;
    }

    public java.lang.String getDocumentBaseURI()
    {
        java.lang.String $r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: java.lang.String m_documentBaseURI>;

        return $r1;
    }

    public void setDocumentBaseURI(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: java.lang.String m_documentBaseURI> = r1;

        return;
    }

    public java.lang.String getDocumentSystemIdentifier(int)
    {
        int i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getDocumentEncoding(int)
    {
        int i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getDocumentStandalone(int)
    {
        int i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getDocumentVersion(int)
    {
        int i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        return null;
    }

    public boolean getDocumentAllDeclarationsProcessed()
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        return 0;
    }

    public java.lang.String getDocumentTypeDeclarationSystemIdentifier()
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        return null;
    }

    public java.lang.String getDocumentTypeDeclarationPublicIdentifier()
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        return null;
    }

    public int getElementById(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public java.lang.String getUnparsedEntityURI(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public boolean supportsPreStripping()
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        return 0;
    }

    public boolean isNodeAfter(int, int)
    {
        int i0, i1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return 0;
    }

    public boolean isCharacterElementContentWhitespace(int)
    {
        int i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isDocumentAllDeclarationsProcessed(int)
    {
        int i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        return 0;
    }

    public boolean isAttributeSpecified(int)
    {
        int i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        return 0;
    }

    public void dispatchCharactersEvents(int, org.xml.sax.ContentHandler, boolean) throws org.xml.sax.SAXException
    {
        int i0;
        org.xml.sax.ContentHandler r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: org.xml.sax.ContentHandler;

        z0 := @parameter2: boolean;

        return;
    }

    public void dispatchToEvents(int, org.xml.sax.ContentHandler) throws org.xml.sax.SAXException
    {
        int i0;
        org.xml.sax.ContentHandler r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: org.xml.sax.ContentHandler;

        return;
    }

    public org.w3c.dom.Node getNode(int)
    {
        int i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        return null;
    }

    public void appendChild(int, boolean, boolean)
    {
        int i0, $i1, $i2;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        boolean z0, z1, $z2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $i2 = i0 & -8388608;

        $i1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docHandle>;

        if $i2 != $i1 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        if z0 != 0 goto label3;

        if $z2 != 0 goto label3;

     label3:
        return;
    }

    public void appendTextChild(java.lang.String)
    {
        java.lang.String r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        return;
    }

    void appendTextChild(int, int)
    {
        int i0, i1, i2, $i3;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i0 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int currentParent>;

        $i3 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int appendNode(int,int,int,int)>(3, i0, i1, i2);

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int previousSibling> = $i3;

        return;
    }

    void appendComment(int, int)
    {
        int i0, i1, i2, $i3;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i0 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int currentParent>;

        $i3 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int appendNode(int,int,int,int)>(8, i0, i1, i2);

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int previousSibling> = $i3;

        return;
    }

    void appendStartElement(int, int, int)
    {
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r8, $r10;
        int i0, $i1, i2, i3, i4, i5, $i6, i7, $i8, $i9, $i10, $i11, $i13, $i15;
        java.lang.String $r9;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        java.io.PrintStream $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        $i1 = i0 << 16;

        i2 = $i1 | 1;

        i3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int currentParent>;

        $i6 = i5 << 16;

        i7 = i4 | $i6;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("set w3=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i7);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $i8 = i7 >> 16;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i8);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $i13 = (int) 65535;

        $i9 = i7 & $i13;

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i9);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r9);

        $i10 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int appendNode(int,int,int,int)>(i2, i3, 0, i7);

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int currentParent> = $i10;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int previousSibling> = 0;

        $i11 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docElement>;

        $i15 = (int) -1;

        if $i11 != $i15 goto label1;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docElement> = $i10;

     label1:
        return;
    }

    void appendNSDeclaration(int, int, boolean)
    {
        org.apache.xml.dtm.ref.DTMStringPool $r1, $r2;
        int $i0, $i1, i2, i3, i4, $i5, i6;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        boolean z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i6 := @parameter0: int;

        i4 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_nsNames>;

        virtualinvoke $r1.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>("http://www.w3.org/2000/xmlns/");

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.DTMStringPool m_nsNames>;

        $i0 = virtualinvoke $r2.<org.apache.xml.dtm.ref.DTMStringPool: int stringToIndex(java.lang.String)>("http://www.w3.org/2000/xmlns/");

        $i1 = $i0 << 16;

        i2 = 13 | $i1;

        i3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int currentParent>;

        $i5 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int appendNode(int,int,int,int)>(i2, i3, 0, i4);

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int previousSibling> = $i5;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean previousSiblingWasParent> = 0;

        return;
    }

    void appendAttribute(int, int, int, boolean, int, int)
    {
        java.lang.StringBuffer $r3, $r4, $r5, $r6, $r7, $r8, $r10;
        int i0, $i1, i2, i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, $i14;
        java.lang.String $r9;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        boolean z0;
        java.io.PrintStream $r2;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        z0 := @parameter3: boolean;

        i8 := @parameter4: int;

        i9 := @parameter5: int;

        $i1 = i0 << 16;

        i10 = 2 | $i1;

        i11 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int currentParent>;

        $i4 = i3 << 16;

        i12 = i2 | $i4;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("set w3=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i12);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $i5 = i12 >> 16;

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("/");

        $i14 = (int) 65535;

        $i6 = i12 & $i14;

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r9);

        $i7 = specialinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int appendNode(int,int,int,int)>(i10, i11, 0, i12);

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int previousSibling> = $i7;

        specialinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int appendNode(int,int,int,int)>(3, $i7, i8, i9);

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean previousSiblingWasParent> = 1;

        return;
    }

    public org.apache.xml.dtm.DTMAxisTraverser getAxisTraverser(int)
    {
        int i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        return null;
    }

    public org.apache.xml.dtm.DTMAxisIterator getAxisIterator(int)
    {
        int i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        return null;
    }

    public org.apache.xml.dtm.DTMAxisIterator getTypedAxisIterator(int, int)
    {
        int i0, i1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return null;
    }

    void appendEndElement()
    {
        org.apache.xml.dtm.ref.ChunkedIntArray $r2, $r4;
        int[] $r1, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        boolean $z0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        $z0 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean previousSiblingWasParent>;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i4 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int previousSibling>;

        $i6 = (int) -1;

        virtualinvoke $r4.<org.apache.xml.dtm.ref.ChunkedIntArray: void writeEntry(int,int,int)>($i4, 2, $i6);

     label1:
        $i0 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int currentParent>;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int previousSibling> = $i0;

        $r2 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: org.apache.xml.dtm.ref.ChunkedIntArray nodes>;

        $i1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int currentParent>;

        $r1 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        virtualinvoke $r2.<org.apache.xml.dtm.ref.ChunkedIntArray: void readSlot(int,int[])>($i1, $r1);

        $r3 = r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int[] gotslot>;

        $i2 = $r3[1];

        $i8 = (int) 65535;

        $i3 = $i2 & $i8;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int currentParent> = $i3;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean previousSiblingWasParent> = 1;

        return;
    }

    void appendStartDocument()
    {
        int $i1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        $i1 = (int) -1;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: int m_docElement> = $i1;

        virtualinvoke r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: void initDocument(int)>(0);

        return;
    }

    void appendEndDocument()
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r0.<org.apache.xml.dtm.ref.DTMDocumentImpl: boolean done> = 1;

        return;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        return;
    }

    public javax.xml.transform.SourceLocator getSourceLocatorFor(int)
    {
        int i0;
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        i0 := @parameter0: int;

        return null;
    }

    public void documentRegistration()
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        return;
    }

    public void documentRelease()
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        return;
    }

    public void migrateTo(org.apache.xml.dtm.DTMManager)
    {
        org.apache.xml.dtm.ref.DTMDocumentImpl r0;
        org.apache.xml.dtm.DTMManager r1;

        r0 := @this: org.apache.xml.dtm.ref.DTMDocumentImpl;

        r1 := @parameter0: org.apache.xml.dtm.DTMManager;

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <org.apache.xml.dtm.ref.DTMDocumentImpl: int DOCHANDLE_MASK> = -8388608;

        <org.apache.xml.dtm.ref.DTMDocumentImpl: int NODEHANDLE_MASK> = 8388607;

        <org.apache.xml.dtm.ref.DTMDocumentImpl: byte DOCHANDLE_SHIFT> = 22;

        $r0 = newarray (java.lang.String)[13];

        $r0[0] = null;

        $r0[1] = null;

        $r0[2] = null;

        $r0[3] = "#text";

        $r0[4] = "#cdata_section";

        $r0[5] = null;

        $r0[6] = null;

        $r0[7] = null;

        $r0[8] = "#comment";

        $r0[9] = "#document";

        $r0[10] = null;

        $r0[11] = "#document-fragment";

        $r0[12] = null;

        <org.apache.xml.dtm.ref.DTMDocumentImpl: java.lang.String[] fixednames> = $r0;

        return;
    }
}
