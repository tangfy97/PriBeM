public class org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor extends org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl
{

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void <init>()>();

        return;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.lang.CharSequence $r1;
        org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor r3;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode $r6;
        org.apache.lucene.queryparser.flexible.standard.nodes.PrefixWildcardQueryNode $r5;
        int $i0;
        org.apache.lucene.queryparser.flexible.standard.nodes.WildcardQueryNode $r4;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r3 := @this: org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode;

        if $z0 != 0 goto label1;

        $z5 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.FuzzyQueryNode;

        if $z5 == 0 goto label5;

     label1:
        $r6 = (org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode) r0;

        $r1 = virtualinvoke $r6.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: java.lang.CharSequence getText()>();

        $r2 = virtualinvoke $r6.<org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode getParent()>();

        $z1 = $r2 instanceof org.apache.lucene.queryparser.flexible.standard.nodes.TermRangeQueryNode;

        if $z1 != 0 goto label2;

        $z2 = $r6 instanceof org.apache.lucene.queryparser.flexible.core.nodes.QuotedFieldQueryNode;

        if $z2 != 0 goto label2;

        $i0 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if $i0 > 0 goto label3;

     label2:
        return r0;

     label3:
        $z3 = specialinvoke r3.<org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor: boolean isPrefixWildcard(java.lang.CharSequence)>($r1);

        if $z3 == 0 goto label4;

        $r5 = new org.apache.lucene.queryparser.flexible.standard.nodes.PrefixWildcardQueryNode;

        specialinvoke $r5.<org.apache.lucene.queryparser.flexible.standard.nodes.PrefixWildcardQueryNode: void <init>(org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode)>($r6);

        return $r5;

     label4:
        $z4 = specialinvoke r3.<org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor: boolean isWildcard(java.lang.CharSequence)>($r1);

        if $z4 == 0 goto label5;

        $r4 = new org.apache.lucene.queryparser.flexible.standard.nodes.WildcardQueryNode;

        specialinvoke $r4.<org.apache.lucene.queryparser.flexible.standard.nodes.WildcardQueryNode: void <init>(org.apache.lucene.queryparser.flexible.core.nodes.FieldQueryNode)>($r6);

        return $r4;

     label5:
        return r0;
    }

    private boolean isWildcard(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        char $c2, $c3;
        org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor r1;
        int $i0, $i1, i4, $i5, $i6, $i8;
        boolean $z0;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 == null goto label1;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 > 0 goto label2;

     label1:
        return 0;

     label2:
        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i4 = $i1 - 1;

     label3:
        if i4 < 0 goto label6;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);

        $i5 = (int) $c2;

        if $i5 == 42 goto label4;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);

        $i6 = (int) $c3;

        if $i6 != 63 goto label5;

     label4:
        $z0 = staticinvoke <org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence: boolean wasEscaped(java.lang.CharSequence,int)>(r0, i4);

        if $z0 != 0 goto label5;

        return 1;

     label5:
        $i8 = (int) -1;

        i4 = i4 + $i8;

        goto label3;

     label6:
        return 0;
    }

    private boolean isPrefixWildcard(java.lang.CharSequence)
    {
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i10, $i11, i12, $i13, $i14, $i15;
        boolean $z0, $z1, $z2;
        java.lang.CharSequence r0;
        char $c3, $c8, $c9;
        org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor;

        r0 := @parameter0: java.lang.CharSequence;

        if r0 == null goto label01;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 <= 0 goto label01;

        $z0 = specialinvoke r1.<org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor: boolean isWildcard(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label02;

     label01:
        return 0;

     label02:
        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i2 = $i1 - 1;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>($i2);

        $i13 = (int) $c3;

        if $i13 == 42 goto label03;

        return 0;

     label03:
        $i4 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i5 = $i4 - 1;

        $z1 = staticinvoke <org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence: boolean wasEscaped(java.lang.CharSequence,int)>(r0, $i5);

        if $z1 == 0 goto label04;

        return 0;

     label04:
        $i6 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i6 != 1 goto label05;

        return 0;

     label05:
        i12 = 0;

     label06:
        $i7 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i12 >= $i7 goto label10;

        $c8 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i12);

        $i14 = (int) $c8;

        if $i14 != 63 goto label07;

        return 0;

     label07:
        $c9 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i12);

        $i15 = (int) $c9;

        if $i15 != 42 goto label09;

        $z2 = staticinvoke <org.apache.lucene.queryparser.flexible.core.util.UnescapedCharSequence: boolean wasEscaped(java.lang.CharSequence,int)>(r0, i12);

        if $z2 != 0 goto label09;

        $i10 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i11 = $i10 - 1;

        if i12 != $i11 goto label08;

        return 1;

     label08:
        return 0;

     label09:
        i12 = i12 + 1;

        goto label06;

     label10:
        return 0;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        return r0;
    }

    protected java.util.List setChildrenOrder(java.util.List) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.util.List r0;
        org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor r1;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.WildcardQueryNodeProcessor;

        r0 := @parameter0: java.util.List;

        return r0;
    }
}
