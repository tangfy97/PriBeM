public class com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock extends com.hp.hpl.jena.sparql.algebra.op.Op0
{
    private final com.hp.hpl.jena.sparql.core.QuadPattern quads;

    public static boolean isQuadBlock(com.hp.hpl.jena.sparql.algebra.Op)
    {
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        return $z0;
    }

    public static com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock create(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.core.BasicPattern)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.core.QuadPattern $r0;
        com.hp.hpl.jena.sparql.core.BasicPattern r1;
        com.hp.hpl.jena.graph.Node r7;
        com.hp.hpl.jena.graph.Triple r5;
        com.hp.hpl.jena.sparql.core.Quad $r6;
        java.lang.Object $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock $r3;
        boolean $z0;

        r7 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.sparql.core.BasicPattern;

        $r0 = new com.hp.hpl.jena.sparql.core.QuadPattern;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.QuadPattern: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.BasicPattern: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.graph.Triple) $r4;

        $r6 = new com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Triple)>(r7, r5);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.core.QuadPattern: void add(com.hp.hpl.jena.sparql.core.Quad)>($r6);

        goto label1;

     label2:
        $r3 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        specialinvoke $r3.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: void <init>(com.hp.hpl.jena.sparql.core.QuadPattern)>($r0);

        return $r3;
    }

    public void <init>()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r0;
        com.hp.hpl.jena.sparql.core.QuadPattern $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op0: void <init>()>();

        $r1 = new com.hp.hpl.jena.sparql.core.QuadPattern;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.QuadPattern: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.core.QuadPattern quads> = $r1;

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.core.QuadPattern)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r0;
        com.hp.hpl.jena.sparql.core.QuadPattern r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        r1 := @parameter0: com.hp.hpl.jena.sparql.core.QuadPattern;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op0: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.core.QuadPattern quads> = r1;

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r1;
        com.hp.hpl.jena.sparql.core.QuadPattern $r2;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        r1 := @parameter0: com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        specialinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.Op0: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: com.hp.hpl.jena.sparql.core.QuadPattern getPattern()>();

        r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.core.QuadPattern quads> = $r2;

        return;
    }

    public com.hp.hpl.jena.sparql.core.QuadPattern getPattern()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r0;
        com.hp.hpl.jena.sparql.core.QuadPattern $r1;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.core.QuadPattern quads>;

        return $r1;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.sparql.core.QuadPattern $r1;
        int $i0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.core.QuadPattern quads>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.QuadPattern: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        return "quadblock";
    }

    public com.hp.hpl.jena.sparql.algebra.Op apply(com.hp.hpl.jena.sparql.algebra.Transform)
    {
        com.hp.hpl.jena.sparql.algebra.Transform r0;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r1;
        com.hp.hpl.jena.sparql.algebra.Op $r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Transform;

        $r2 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.Transform: com.hp.hpl.jena.sparql.algebra.Op transform(com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock)>(r1);

        return $r2;
    }

    public void visit(com.hp.hpl.jena.sparql.algebra.OpVisitor)
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r1;
        com.hp.hpl.jena.sparql.algebra.OpVisitor r0;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.OpVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.algebra.OpVisitor: void visit(com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock)>(r1);

        return;
    }

    public com.hp.hpl.jena.sparql.algebra.op.Op0 copy()
    {
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock $r0, r1;
        com.hp.hpl.jena.sparql.core.QuadPattern $r2;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        $r0 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        $r2 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.core.QuadPattern quads>;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: void <init>(com.hp.hpl.jena.sparql.core.QuadPattern)>($r2);

        return $r0;
    }

    public java.util.List convert()
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.core.QuadPattern $r2;
        com.hp.hpl.jena.sparql.core.BasicPattern $r7, r11;
        com.hp.hpl.jena.graph.Node $r9, r10;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern $r4, $r8;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.core.Quad r6;
        com.hp.hpl.jena.graph.Triple $r12;
        java.lang.Object $r5;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r1;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r10 = null;

        r11 = null;

        $r2 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.core.QuadPattern quads>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.QuadPattern: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.core.Quad) $r5;

        if r10 == null goto label2;

        $r9 = virtualinvoke r6.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $z1 = virtualinvoke r10.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r9);

        if $z1 != 0 goto label4;

     label2:
        if r10 == null goto label3;

        $r8 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        specialinvoke $r8.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>(r10, r11);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

     label3:
        r10 = virtualinvoke r6.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        $r7 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r7.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        r11 = $r7;

     label4:
        $r12 = virtualinvoke r6.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Triple asTriple()>();

        virtualinvoke r11.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>($r12);

        goto label1;

     label5:
        $r4 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>(r10, r11);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        return $r0;
    }

    public com.hp.hpl.jena.sparql.algebra.Op convertOp()
    {
        com.hp.hpl.jena.sparql.core.QuadPattern $r1, $r2, $r8;
        com.hp.hpl.jena.graph.Node $r13;
        com.hp.hpl.jena.sparql.algebra.op.OpSequence $r4;
        com.hp.hpl.jena.sparql.algebra.op.OpTable $r14;
        int $i0, $i1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r0;
        boolean $z0;
        java.util.Iterator $r5;
        com.hp.hpl.jena.sparql.core.BasicPattern $r10;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern r7, $r12;
        com.hp.hpl.jena.sparql.core.Quad $r9;
        com.hp.hpl.jena.graph.Triple $r11;
        java.util.List $r3;
        java.lang.Object $r6;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.core.QuadPattern quads>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.QuadPattern: int size()>();

        if $i0 != 0 goto label1;

        $r14 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpTable: com.hp.hpl.jena.sparql.algebra.op.OpTable empty()>();

        return $r14;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.core.QuadPattern quads>;

        $i1 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.QuadPattern: int size()>();

        if $i1 != 1 goto label2;

        $r8 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.core.QuadPattern quads>;

        $r9 = virtualinvoke $r8.<com.hp.hpl.jena.sparql.core.QuadPattern: com.hp.hpl.jena.sparql.core.Quad get(int)>(0);

        $r10 = new com.hp.hpl.jena.sparql.core.BasicPattern;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.core.BasicPattern: void <init>()>();

        $r11 = virtualinvoke $r9.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Triple asTriple()>();

        virtualinvoke $r10.<com.hp.hpl.jena.sparql.core.BasicPattern: void add(com.hp.hpl.jena.graph.Triple)>($r11);

        $r12 = new com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern;

        $r13 = virtualinvoke $r9.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        specialinvoke $r12.<com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.core.BasicPattern)>($r13, $r10);

        return $r12;

     label2:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: java.util.List convert()>();

        $r4 = staticinvoke <com.hp.hpl.jena.sparql.algebra.op.OpSequence: com.hp.hpl.jena.sparql.algebra.op.OpSequence create()>();

        $r5 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.algebra.op.OpQuadPattern) $r6;

        virtualinvoke $r4.<com.hp.hpl.jena.sparql.algebra.op.OpSequence: void add(com.hp.hpl.jena.sparql.algebra.Op)>(r7);

        goto label3;

     label4:
        return $r4;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.sparql.core.QuadPattern $r1;
        int $i0, i1;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r0;

        r0 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        $r1 = r0.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.core.QuadPattern quads>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.core.QuadPattern: int hashCode()>();

        i1 = 177 ^ $i0;

        return i1;
    }

    public boolean equalTo(com.hp.hpl.jena.sparql.algebra.Op, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.core.QuadPattern $r4, $r5;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r3;
        com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock r1, r2;
        com.hp.hpl.jena.sparql.algebra.Op r0;
        boolean $z0, $z1;

        r2 := @this: com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        r0 := @parameter0: com.hp.hpl.jena.sparql.algebra.Op;

        r3 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock) r0;

        $r5 = r2.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.core.QuadPattern quads>;

        $r4 = r1.<com.hp.hpl.jena.sparql.algebra.op.OpQuadBlock: com.hp.hpl.jena.sparql.core.QuadPattern quads>;

        $z1 = virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.QuadPattern: boolean equiv(com.hp.hpl.jena.sparql.core.QuadPattern,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r4, r3);

        return $z1;
    }
}
