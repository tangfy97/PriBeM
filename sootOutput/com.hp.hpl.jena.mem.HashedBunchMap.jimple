public class com.hp.hpl.jena.mem.HashedBunchMap extends com.hp.hpl.jena.mem.HashCommon implements com.hp.hpl.jena.mem.BunchMap
{
    protected com.hp.hpl.jena.mem.TripleBunch[] values;

    public void <init>()
    {
        com.hp.hpl.jena.mem.HashedBunchMap r0;
        int $i0;
        com.hp.hpl.jena.mem.TripleBunch[] $r1;

        r0 := @this: com.hp.hpl.jena.mem.HashedBunchMap;

        specialinvoke r0.<com.hp.hpl.jena.mem.HashCommon: void <init>(int)>(10);

        $i0 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: int capacity>;

        $r1 = newarray (com.hp.hpl.jena.mem.TripleBunch)[$i0];

        r0.<com.hp.hpl.jena.mem.HashedBunchMap: com.hp.hpl.jena.mem.TripleBunch[] values> = $r1;

        return;
    }

    protected java.lang.Object[] newKeyArray(int)
    {
        int i0;
        com.hp.hpl.jena.mem.HashedBunchMap r1;
        java.lang.Object[] $r0;

        r1 := @this: com.hp.hpl.jena.mem.HashedBunchMap;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.Object)[i0];

        return $r0;
    }

    public void clear()
    {
        java.lang.Object[] $r2;
        com.hp.hpl.jena.mem.TripleBunch[] $r1;
        com.hp.hpl.jena.mem.HashedBunchMap r0;
        int $i0, i1;

        r0 := @this: com.hp.hpl.jena.mem.HashedBunchMap;

        r0.<com.hp.hpl.jena.mem.HashedBunchMap: int size> = 0;

        i1 = 0;

     label1:
        $i0 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: int capacity>;

        if i1 >= $i0 goto label2;

        $r2 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: java.lang.Object[] keys>;

        $r1 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: com.hp.hpl.jena.mem.TripleBunch[] values>;

        $r1[i1] = null;

        $r2[i1] = null;

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public long size()
    {
        com.hp.hpl.jena.mem.HashedBunchMap r0;
        int $i0;
        long $l1;

        r0 := @this: com.hp.hpl.jena.mem.HashedBunchMap;

        $i0 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: int size>;

        $l1 = (long) $i0;

        return $l1;
    }

    public com.hp.hpl.jena.mem.TripleBunch get(java.lang.Object)
    {
        com.hp.hpl.jena.mem.TripleBunch[] $r2;
        com.hp.hpl.jena.mem.TripleBunch $r3;
        com.hp.hpl.jena.mem.HashedBunchMap r0;
        int $i0, $i1, $i3;
        java.lang.Object r1;

        r0 := @this: com.hp.hpl.jena.mem.HashedBunchMap;

        r1 := @parameter0: java.lang.Object;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashedBunchMap: int findSlot(java.lang.Object)>(r1);

        if $i0 >= 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: com.hp.hpl.jena.mem.TripleBunch[] values>;

        $i3 = (int) -1;

        $i1 = $i0 ^ $i3;

        $r3 = $r2[$i1];

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void put(java.lang.Object, com.hp.hpl.jena.mem.TripleBunch)
    {
        java.lang.Object[] $r2;
        com.hp.hpl.jena.mem.TripleBunch r3;
        com.hp.hpl.jena.mem.HashedBunchMap r0;
        com.hp.hpl.jena.mem.TripleBunch[] $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7;
        java.lang.Object r1;

        r0 := @this: com.hp.hpl.jena.mem.HashedBunchMap;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: com.hp.hpl.jena.mem.TripleBunch;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashedBunchMap: int findSlot(java.lang.Object)>(r1);

        if $i0 >= 0 goto label1;

        $r5 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: com.hp.hpl.jena.mem.TripleBunch[] values>;

        $i7 = (int) -1;

        $i5 = $i0 ^ $i7;

        $r5[$i5] = r3;

        goto label2;

     label1:
        $r2 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: java.lang.Object[] keys>;

        $r2[$i0] = r1;

        $r4 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: com.hp.hpl.jena.mem.TripleBunch[] values>;

        $r4[$i0] = r3;

        $i1 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: int size>;

        $i2 = $i1 + 1;

        r0.<com.hp.hpl.jena.mem.HashedBunchMap: int size> = $i2;

        $i4 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: int size>;

        $i3 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: int threshold>;

        if $i4 != $i3 goto label2;

        virtualinvoke r0.<com.hp.hpl.jena.mem.HashedBunchMap: void grow()>();

     label2:
        return;
    }

    protected void grow()
    {
        java.lang.Object[] r1, $r3, $r6;
        com.hp.hpl.jena.mem.TripleBunch $r7;
        int i0, $i1, $i2, $i3, $i4, i5, $i7;
        java.lang.String $r15;
        com.hp.hpl.jena.shared.BrokenException $r17;
        com.hp.hpl.jena.mem.HashedBunchMap r0;
        com.hp.hpl.jena.mem.TripleBunch[] r2, $r4, $r8;
        java.lang.Object r5;
        java.lang.StringBuilder $r11, $r12, $r13, $r14, $r16;

        r0 := @this: com.hp.hpl.jena.mem.HashedBunchMap;

        r1 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: java.lang.Object[] keys>;

        r2 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: com.hp.hpl.jena.mem.TripleBunch[] values>;

        i0 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: int capacity>;

        virtualinvoke r0.<com.hp.hpl.jena.mem.HashedBunchMap: void growCapacityAndThreshold()>();

        $i1 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: int capacity>;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashedBunchMap: java.lang.Object[] newKeyArray(int)>($i1);

        r0.<com.hp.hpl.jena.mem.HashedBunchMap: java.lang.Object[] keys> = $r3;

        $i2 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: int capacity>;

        $r4 = newarray (com.hp.hpl.jena.mem.TripleBunch)[$i2];

        r0.<com.hp.hpl.jena.mem.HashedBunchMap: com.hp.hpl.jena.mem.TripleBunch[] values> = $r4;

        i5 = 0;

     label1:
        if i5 >= i0 goto label4;

        r5 = r1[i5];

        if r5 == null goto label3;

        $i3 = virtualinvoke r0.<com.hp.hpl.jena.mem.HashedBunchMap: int findSlot(java.lang.Object)>(r5);

        if $i3 >= 0 goto label2;

        $r17 = new com.hp.hpl.jena.shared.BrokenException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("oh dear, already have a slot for ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", viz ");

        $i7 = (int) -1;

        $i4 = $i3 ^ $i7;

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<com.hp.hpl.jena.shared.BrokenException: void <init>(java.lang.String)>($r15);

        throw $r17;

     label2:
        $r6 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: java.lang.Object[] keys>;

        $r6[$i3] = r5;

        $r8 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: com.hp.hpl.jena.mem.TripleBunch[] values>;

        $r7 = r2[i5];

        $r8[$i3] = $r7;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return;
    }

    protected void removeAssociatedValues(int)
    {
        com.hp.hpl.jena.mem.HashedBunchMap r0;
        int i0;
        com.hp.hpl.jena.mem.TripleBunch[] $r1;

        r0 := @this: com.hp.hpl.jena.mem.HashedBunchMap;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: com.hp.hpl.jena.mem.TripleBunch[] values>;

        $r1[i0] = null;

        return;
    }

    protected void moveAssociatedValues(int, int)
    {
        com.hp.hpl.jena.mem.TripleBunch[] $r1, $r3;
        com.hp.hpl.jena.mem.TripleBunch $r2;
        com.hp.hpl.jena.mem.HashedBunchMap r0;
        int i0, i1;

        r0 := @this: com.hp.hpl.jena.mem.HashedBunchMap;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: com.hp.hpl.jena.mem.TripleBunch[] values>;

        $r1 = r0.<com.hp.hpl.jena.mem.HashedBunchMap: com.hp.hpl.jena.mem.TripleBunch[] values>;

        $r2 = $r1[i1];

        $r3[i0] = $r2;

        return;
    }
}
