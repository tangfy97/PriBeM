public abstract class kodkod.ast.visitor.AbstractDetector extends java.lang.Object implements kodkod.ast.visitor.ReturnVisitor
{
    protected final java.util.Map cache;
    protected final java.util.Set cached;

    protected void <init>(java.util.Set)
    {
        java.util.IdentityHashMap $r2;
        int $i0;
        java.util.Set r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.ast.visitor.AbstractDetector: java.util.Set cached> = r1;

        $r2 = new java.util.IdentityHashMap;

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        specialinvoke $r2.<java.util.IdentityHashMap: void <init>(int)>($i0);

        r0.<kodkod.ast.visitor.AbstractDetector: java.util.Map cache> = $r2;

        return;
    }

    protected void <init>(java.util.Set, java.util.Map)
    {
        java.util.Set r1;
        kodkod.ast.visitor.AbstractDetector r0;
        java.util.Map r2;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.ast.visitor.AbstractDetector: java.util.Set cached> = r1;

        r0.<kodkod.ast.visitor.AbstractDetector: java.util.Map cache> = r2;

        return;
    }

    protected java.lang.Boolean lookup(kodkod.ast.Node)
    {
        java.util.Map $r2;
        java.lang.Boolean $r4;
        java.lang.Object $r3;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.Node r1;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.Node;

        $r2 = r0.<kodkod.ast.visitor.AbstractDetector: java.util.Map cache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Boolean) $r3;

        return $r4;
    }

    protected java.lang.Boolean cache(kodkod.ast.Node, boolean)
    {
        java.util.Map $r4;
        java.lang.Boolean $r0;
        java.util.Set $r3;
        kodkod.ast.visitor.AbstractDetector r1;
        kodkod.ast.Node r2;
        boolean z0, $z1;

        r1 := @this: kodkod.ast.visitor.AbstractDetector;

        r2 := @parameter0: kodkod.ast.Node;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r3 = r1.<kodkod.ast.visitor.AbstractDetector: java.util.Set cached>;

        $z1 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z1 == 0 goto label1;

        $r4 = r1.<kodkod.ast.visitor.AbstractDetector: java.util.Map cache>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r0);

     label1:
        return $r0;
    }

    public java.lang.Boolean visit(kodkod.ast.Decls)
    {
        java.util.Iterator $r3;
        kodkod.ast.Decl r5;
        kodkod.ast.Decls r1;
        kodkod.ast.visitor.AbstractDetector r0;
        java.lang.Boolean $r2, $r6, $r7, $r8;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.Decls;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.Decls: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kodkod.ast.Decl) $r4;

        $r6 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.Decl)>(r5);

        $z1 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        $r7 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, 1);

        return $r7;

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r8 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, 0);

        return $r8;
    }

    public java.lang.Boolean visit(kodkod.ast.Decl)
    {
        kodkod.ast.Decl r1;
        kodkod.ast.Expression $r6;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.Variable $r3;
        java.lang.Boolean $r2, $r5, $r8, $r9;
        java.lang.Object $r4, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.Decl;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r9 = $r2;

        goto label4;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Variable: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        $z2 = 0;

        goto label3;

     label2:
        $z2 = 1;

     label3:
        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z2);

     label4:
        return $r9;
    }

    public java.lang.Boolean visit(kodkod.ast.Relation)
    {
        java.lang.Boolean $r0;
        kodkod.ast.visitor.AbstractDetector r1;
        kodkod.ast.Relation r2;

        r1 := @this: kodkod.ast.visitor.AbstractDetector;

        r2 := @parameter0: kodkod.ast.Relation;

        $r0 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r0;
    }

    public java.lang.Boolean visit(kodkod.ast.Variable)
    {
        java.lang.Boolean $r0;
        kodkod.ast.visitor.AbstractDetector r1;
        kodkod.ast.Variable r2;

        r1 := @this: kodkod.ast.visitor.AbstractDetector;

        r2 := @parameter0: kodkod.ast.Variable;

        $r0 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r0;
    }

    public java.lang.Boolean visit(kodkod.ast.ConstantExpression)
    {
        kodkod.ast.ConstantExpression r2;
        java.lang.Boolean $r0;
        kodkod.ast.visitor.AbstractDetector r1;

        r1 := @this: kodkod.ast.visitor.AbstractDetector;

        r2 := @parameter0: kodkod.ast.ConstantExpression;

        $r0 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r0;
    }

    public java.lang.Boolean visit(kodkod.ast.NaryExpression)
    {
        java.util.Iterator $r3;
        kodkod.ast.Expression r5;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.NaryExpression r1;
        java.lang.Boolean $r2, $r7, $r8, $r9;
        java.lang.Object $r4, $r6;
        boolean $z0, $z1;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.NaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.NaryExpression: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kodkod.ast.Expression) $r4;

        $r6 = virtualinvoke r5.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (java.lang.Boolean) $r6;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        $r8 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, 1);

        return $r8;

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, 0);

        return $r9;
    }

    public java.lang.Boolean visit(kodkod.ast.BinaryExpression)
    {
        kodkod.ast.Expression $r3, $r6;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.BinaryExpression r1;
        java.lang.Boolean $r2, $r5, $r8, $r9;
        java.lang.Object $r4, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.BinaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r9 = $r2;

        goto label4;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        $z2 = 0;

        goto label3;

     label2:
        $z2 = 1;

     label3:
        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z2);

     label4:
        return $r9;
    }

    public java.lang.Boolean visit(kodkod.ast.UnaryExpression)
    {
        kodkod.ast.Expression $r3;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.UnaryExpression r1;
        java.lang.Boolean $r2, $r5, $r6;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.UnaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r6 = $r2;

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.UnaryExpression: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        $r6 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z0);

     label2:
        return $r6;
    }

    public java.lang.Boolean visit(kodkod.ast.Comprehension)
    {
        kodkod.ast.Formula $r6;
        kodkod.ast.Decls $r3;
        kodkod.ast.visitor.AbstractDetector r0;
        java.lang.Boolean $r2, $r5, $r8, $r9;
        java.lang.Object $r4, $r7;
        kodkod.ast.Comprehension r1;
        boolean $z0, $z1, $z2;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r9 = $r2;

        goto label4;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Decls decls()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Decls: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Formula formula()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        $z2 = 0;

        goto label3;

     label2:
        $z2 = 1;

     label3:
        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z2);

     label4:
        return $r9;
    }

    public java.lang.Boolean visit(kodkod.ast.IfExpression)
    {
        java.lang.Boolean $r2, $r5, $r8, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        kodkod.ast.Formula $r3;
        kodkod.ast.Expression $r6, $r9;
        kodkod.ast.visitor.AbstractDetector r0;
        java.lang.Object $r4, $r7, $r10;
        kodkod.ast.IfExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.IfExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r12 = $r2;

        goto label4;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Formula condition()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression thenExpr()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        $r9 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression elseExpr()>();

        $r10 = virtualinvoke $r9.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r11 = (java.lang.Boolean) $r10;

        $z2 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 != 0 goto label2;

        $z3 = 0;

        goto label3;

     label2:
        $z3 = 1;

     label3:
        $r12 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z3);

     label4:
        return $r12;
    }

    public java.lang.Boolean visit(kodkod.ast.ProjectExpression)
    {
        kodkod.ast.ProjectExpression r1;
        int $i0, i1;
        java.lang.Boolean $r2, $r5, $r8, $r9, $r10, $r11;
        boolean $z0, $z1;
        kodkod.ast.IntExpression $r6;
        kodkod.ast.Expression $r3;
        kodkod.ast.visitor.AbstractDetector r0;
        java.lang.Object $r4, $r7;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.ProjectExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.ProjectExpression: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r11 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, 1);

        return $r11;

     label2:
        i1 = 0;

        $i0 = virtualinvoke r1.<kodkod.ast.ProjectExpression: int arity()>();

        goto label5;

     label3:
        $r6 = virtualinvoke r1.<kodkod.ast.ProjectExpression: kodkod.ast.IntExpression column(int)>(i1);

        $r7 = virtualinvoke $r6.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label4;

        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, 1);

        return $r9;

     label4:
        i1 = i1 + 1;

     label5:
        if i1 < $i0 goto label3;

        $r10 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, 0);

        return $r10;
    }

    public java.lang.Boolean visit(kodkod.ast.IntToExprCast)
    {
        kodkod.ast.IntExpression $r3;
        kodkod.ast.IntToExprCast r1;
        kodkod.ast.visitor.AbstractDetector r0;
        java.lang.Boolean $r2, $r5, $r6;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.IntToExprCast;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r6 = $r2;

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.IntToExprCast: kodkod.ast.IntExpression intExpr()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        $r6 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z0);

     label2:
        return $r6;
    }

    public java.lang.Boolean visit(kodkod.ast.IntConstant)
    {
        kodkod.ast.IntConstant r2;
        java.lang.Boolean $r0;
        kodkod.ast.visitor.AbstractDetector r1;

        r1 := @this: kodkod.ast.visitor.AbstractDetector;

        r2 := @parameter0: kodkod.ast.IntConstant;

        $r0 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r0;
    }

    public java.lang.Boolean visit(kodkod.ast.IfIntExpression)
    {
        kodkod.ast.IfIntExpression r1;
        java.lang.Boolean $r2, $r5, $r8, $r11, $r12;
        boolean $z0, $z1, $z2, $z3;
        kodkod.ast.IntExpression $r6, $r9;
        kodkod.ast.Formula $r3;
        kodkod.ast.visitor.AbstractDetector r0;
        java.lang.Object $r4, $r7, $r10;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.IfIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r12 = $r2;

        goto label4;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.Formula condition()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression thenExpr()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        $r9 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression elseExpr()>();

        $r10 = virtualinvoke $r9.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r11 = (java.lang.Boolean) $r10;

        $z2 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 != 0 goto label2;

        $z3 = 0;

        goto label3;

     label2:
        $z3 = 1;

     label3:
        $r12 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z3);

     label4:
        return $r12;
    }

    public java.lang.Boolean visit(kodkod.ast.ExprToIntCast)
    {
        kodkod.ast.Expression $r3;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.ExprToIntCast r1;
        java.lang.Boolean $r2, $r5, $r6;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.ExprToIntCast;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r6 = $r2;

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.ExprToIntCast: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        $r6 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z0);

     label2:
        return $r6;
    }

    public java.lang.Boolean visit(kodkod.ast.NaryIntExpression)
    {
        kodkod.ast.NaryIntExpression r1;
        kodkod.ast.IntExpression r5;
        java.util.Iterator $r3;
        kodkod.ast.visitor.AbstractDetector r0;
        java.lang.Boolean $r2, $r7, $r8, $r9;
        java.lang.Object $r4, $r6;
        boolean $z0, $z1;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.NaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.NaryIntExpression: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kodkod.ast.IntExpression) $r4;

        $r6 = virtualinvoke r5.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (java.lang.Boolean) $r6;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        $r8 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, 1);

        return $r8;

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, 0);

        return $r9;
    }

    public java.lang.Boolean visit(kodkod.ast.BinaryIntExpression)
    {
        kodkod.ast.IntExpression $r3, $r6;
        kodkod.ast.BinaryIntExpression r1;
        kodkod.ast.visitor.AbstractDetector r0;
        java.lang.Boolean $r2, $r5, $r8, $r9;
        java.lang.Object $r4, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.BinaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r9 = $r2;

        goto label4;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        $z2 = 0;

        goto label3;

     label2:
        $z2 = 1;

     label3:
        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z2);

     label4:
        return $r9;
    }

    public java.lang.Boolean visit(kodkod.ast.UnaryIntExpression)
    {
        kodkod.ast.IntExpression $r3;
        kodkod.ast.visitor.AbstractDetector r0;
        java.lang.Boolean $r2, $r5, $r6;
        java.lang.Object $r4;
        kodkod.ast.UnaryIntExpression r1;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.UnaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r6 = $r2;

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.UnaryIntExpression: kodkod.ast.IntExpression intExpr()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        $r6 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z0);

     label2:
        return $r6;
    }

    public java.lang.Boolean visit(kodkod.ast.SumExpression)
    {
        kodkod.ast.IntExpression $r6;
        kodkod.ast.Decls $r3;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.SumExpression r1;
        java.lang.Boolean $r2, $r5, $r8, $r9;
        java.lang.Object $r4, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.SumExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r9 = $r2;

        goto label4;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.Decls decls()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Decls: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        $z2 = 0;

        goto label3;

     label2:
        $z2 = 1;

     label3:
        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z2);

     label4:
        return $r9;
    }

    public java.lang.Boolean visit(kodkod.ast.IntComparisonFormula)
    {
        kodkod.ast.IntExpression $r3, $r6;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.IntComparisonFormula r1;
        java.lang.Boolean $r2, $r5, $r8, $r9;
        java.lang.Object $r4, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r9 = $r2;

        goto label4;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        $z2 = 0;

        goto label3;

     label2:
        $z2 = 1;

     label3:
        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z2);

     label4:
        return $r9;
    }

    public java.lang.Boolean visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.ast.QuantifiedFormula r1;
        kodkod.ast.Formula $r6;
        kodkod.ast.Decls $r3;
        kodkod.ast.visitor.AbstractDetector r0;
        java.lang.Boolean $r2, $r5, $r8, $r9;
        java.lang.Object $r4, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r9 = $r2;

        goto label4;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Decls: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        $z2 = 0;

        goto label3;

     label2:
        $z2 = 1;

     label3:
        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z2);

     label4:
        return $r9;
    }

    public java.lang.Boolean visit(kodkod.ast.NaryFormula)
    {
        java.util.Iterator $r3;
        kodkod.ast.Formula r5;
        kodkod.ast.visitor.AbstractDetector r0;
        java.lang.Boolean $r2, $r7, $r8, $r9;
        java.lang.Object $r4, $r6;
        kodkod.ast.NaryFormula r1;
        boolean $z0, $z1;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.NaryFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.NaryFormula: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kodkod.ast.Formula) $r4;

        $r6 = virtualinvoke r5.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r7 = (java.lang.Boolean) $r6;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label3;

        $r8 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, 1);

        return $r8;

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, 0);

        return $r9;
    }

    public java.lang.Boolean visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.BinaryFormula r1;
        kodkod.ast.Formula $r3, $r6;
        kodkod.ast.visitor.AbstractDetector r0;
        java.lang.Boolean $r2, $r5, $r8, $r9;
        java.lang.Object $r4, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r9 = $r2;

        goto label4;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        $z2 = 0;

        goto label3;

     label2:
        $z2 = 1;

     label3:
        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z2);

     label4:
        return $r9;
    }

    public java.lang.Boolean visit(kodkod.ast.NotFormula)
    {
        kodkod.ast.Formula $r3;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.NotFormula r1;
        java.lang.Boolean $r2, $r5, $r6;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.NotFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r6 = $r2;

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        $r6 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z0);

     label2:
        return $r6;
    }

    public java.lang.Boolean visit(kodkod.ast.ConstantFormula)
    {
        java.lang.Boolean $r0;
        kodkod.ast.ConstantFormula r2;
        kodkod.ast.visitor.AbstractDetector r1;

        r1 := @this: kodkod.ast.visitor.AbstractDetector;

        r2 := @parameter0: kodkod.ast.ConstantFormula;

        $r0 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        return $r0;
    }

    public java.lang.Boolean visit(kodkod.ast.ComparisonFormula)
    {
        kodkod.ast.Expression $r3, $r6;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.ComparisonFormula r1;
        java.lang.Boolean $r2, $r5, $r8, $r9;
        java.lang.Object $r4, $r7;
        boolean $z0, $z1, $z2;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r9 = $r2;

        goto label4;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 != 0 goto label2;

        $r6 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r8 = (java.lang.Boolean) $r7;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        $z2 = 0;

        goto label3;

     label2:
        $z2 = 1;

     label3:
        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z2);

     label4:
        return $r9;
    }

    public java.lang.Boolean visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.MultiplicityFormula r1;
        kodkod.ast.Expression $r3;
        kodkod.ast.visitor.AbstractDetector r0;
        java.lang.Boolean $r2, $r5, $r6;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        $r6 = $r2;

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.MultiplicityFormula: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        $r6 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z0);

     label2:
        return $r6;
    }

    public java.lang.Boolean visit(kodkod.ast.RelationPredicate)
    {
        kodkod.ast.RelationPredicate$Name $r6, $r7, $r8, $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        kodkod.ast.Expression $r20, $r23;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.RelationPredicate$TotalOrdering r29;
        kodkod.ast.Relation $r3, $r11, $r14, $r17;
        java.lang.Boolean $r2, $r5, $r10, $r13, $r16, $r19, $r22, $r25, $r26, $r28, $r30;
        kodkod.ast.RelationPredicate$Function r27;
        java.lang.Object $r4, $r12, $r15, $r18, $r21, $r24;
        kodkod.ast.RelationPredicate r1;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean lookup(kodkod.ast.Node)>(r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.Relation relation()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Relation: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        if $z0 == 0 goto label2;

        $r26 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, 1);

        return $r26;

     label2:
        $r6 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.RelationPredicate$Name name()>();

        $r7 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name FUNCTION>;

        if $r6 != $r7 goto label5;

        r27 = (kodkod.ast.RelationPredicate$Function) r1;

        $r20 = virtualinvoke r27.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression domain()>();

        $r21 = virtualinvoke $r20.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r22 = (java.lang.Boolean) $r21;

        $z4 = virtualinvoke $r22.<java.lang.Boolean: boolean booleanValue()>();

        if $z4 != 0 goto label3;

        $r23 = virtualinvoke r27.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression range()>();

        $r24 = virtualinvoke $r23.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r25 = (java.lang.Boolean) $r24;

        $z5 = virtualinvoke $r25.<java.lang.Boolean: boolean booleanValue()>();

        if $z5 != 0 goto label3;

        $z6 = 0;

        goto label4;

     label3:
        $z6 = 1;

     label4:
        $r28 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z6);

        return $r28;

     label5:
        $r8 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.RelationPredicate$Name name()>();

        $r9 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name TOTAL_ORDERING>;

        if $r8 != $r9 goto label8;

        r29 = (kodkod.ast.RelationPredicate$TotalOrdering) r1;

        $r11 = virtualinvoke r29.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation ordered()>();

        $r12 = virtualinvoke $r11.<kodkod.ast.Relation: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r13 = (java.lang.Boolean) $r12;

        $z1 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label6;

        $r14 = virtualinvoke r29.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation first()>();

        $r15 = virtualinvoke $r14.<kodkod.ast.Relation: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r16 = (java.lang.Boolean) $r15;

        $z2 = virtualinvoke $r16.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 != 0 goto label6;

        $r17 = virtualinvoke r29.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation last()>();

        $r18 = virtualinvoke $r17.<kodkod.ast.Relation: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r19 = (java.lang.Boolean) $r18;

        $z3 = virtualinvoke $r19.<java.lang.Boolean: boolean booleanValue()>();

        if $z3 != 0 goto label6;

        $z7 = 0;

        goto label7;

     label6:
        $z7 = 1;

     label7:
        $r30 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, $z7);

        return $r30;

     label8:
        $r10 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean cache(kodkod.ast.Node,boolean)>(r1, 0);

        return $r10;
    }

    public volatile java.lang.Object visit(kodkod.ast.RelationPredicate)
    {
        java.lang.Boolean $r2;
        kodkod.ast.RelationPredicate r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.RelationPredicate)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.MultiplicityFormula r1;
        java.lang.Boolean $r2;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.MultiplicityFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ComparisonFormula)
    {
        kodkod.ast.ComparisonFormula r1;
        java.lang.Boolean $r2;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.ComparisonFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ConstantFormula)
    {
        java.lang.Boolean $r2;
        kodkod.ast.ConstantFormula r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.ConstantFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.ConstantFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NotFormula)
    {
        java.lang.Boolean $r2;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.NotFormula r1;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.NotFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.NotFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.BinaryFormula r1;
        java.lang.Boolean $r2;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.BinaryFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryFormula)
    {
        java.lang.Boolean $r2;
        kodkod.ast.NaryFormula r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.NaryFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.NaryFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.QuantifiedFormula)
    {
        java.lang.Boolean $r2;
        kodkod.ast.QuantifiedFormula r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.QuantifiedFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntComparisonFormula)
    {
        java.lang.Boolean $r2;
        kodkod.ast.IntComparisonFormula r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.IntComparisonFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.SumExpression)
    {
        java.lang.Boolean $r2;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.SumExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.SumExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.SumExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.UnaryIntExpression)
    {
        java.lang.Boolean $r2;
        kodkod.ast.UnaryIntExpression r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.UnaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.UnaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryIntExpression)
    {
        java.lang.Boolean $r2;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.BinaryIntExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.BinaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.BinaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryIntExpression)
    {
        java.lang.Boolean $r2;
        kodkod.ast.NaryIntExpression r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.NaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.NaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ExprToIntCast)
    {
        kodkod.ast.ExprToIntCast r1;
        java.lang.Boolean $r2;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.ExprToIntCast;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.ExprToIntCast)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IfIntExpression)
    {
        java.lang.Boolean $r2;
        kodkod.ast.IfIntExpression r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.IfIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.IfIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntConstant)
    {
        kodkod.ast.IntConstant r1;
        java.lang.Boolean $r2;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.IntConstant;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.IntConstant)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntToExprCast)
    {
        java.lang.Boolean $r2;
        kodkod.ast.IntToExprCast r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.IntToExprCast;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.IntToExprCast)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ProjectExpression)
    {
        kodkod.ast.ProjectExpression r1;
        java.lang.Boolean $r2;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.ProjectExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.ProjectExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IfExpression)
    {
        java.lang.Boolean $r2;
        kodkod.ast.IfExpression r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.IfExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.IfExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Comprehension)
    {
        java.lang.Boolean $r2;
        kodkod.ast.Comprehension r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.Comprehension)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.UnaryExpression)
    {
        java.lang.Boolean $r2;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.UnaryExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.UnaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.UnaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryExpression)
    {
        java.lang.Boolean $r2;
        kodkod.ast.BinaryExpression r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.BinaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.BinaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryExpression)
    {
        java.lang.Boolean $r2;
        kodkod.ast.NaryExpression r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.NaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.NaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ConstantExpression)
    {
        kodkod.ast.ConstantExpression r1;
        java.lang.Boolean $r2;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.ConstantExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.ConstantExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Variable)
    {
        java.lang.Boolean $r2;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.Variable r1;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.Variable;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.Variable)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Relation)
    {
        java.lang.Boolean $r2;
        kodkod.ast.visitor.AbstractDetector r0;
        kodkod.ast.Relation r1;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.Relation;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.Relation)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Decl)
    {
        kodkod.ast.Decl r1;
        java.lang.Boolean $r2;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.Decl;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.Decl)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Decls)
    {
        java.lang.Boolean $r2;
        kodkod.ast.Decls r1;
        kodkod.ast.visitor.AbstractDetector r0;

        r0 := @this: kodkod.ast.visitor.AbstractDetector;

        r1 := @parameter0: kodkod.ast.Decls;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractDetector: java.lang.Boolean visit(kodkod.ast.Decls)>(r1);

        return $r2;
    }
}
