public abstract class com.sun.xml.bind.v2.runtime.reflect.Accessor extends java.lang.Object implements com.sun.xml.bind.v2.runtime.unmarshaller.Receiver
{
    public final java.lang.Class valueType;
    private static java.util.List nonAbstractableClasses;
    private static boolean accessWarned;
    private static final com.sun.xml.bind.v2.runtime.reflect.Accessor ERROR;
    public static final com.sun.xml.bind.v2.runtime.reflect.Accessor JAXB_ELEMENT_VALUE;
    private static final java.util.Map uninitializedValues;

    public java.lang.Class getValueType()
    {
        java.lang.Class $r1;
        com.sun.xml.bind.v2.runtime.reflect.Accessor r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor: java.lang.Class valueType>;

        return $r1;
    }

    protected void <init>(java.lang.Class)
    {
        java.lang.Class r1;
        com.sun.xml.bind.v2.runtime.reflect.Accessor r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor;

        r1 := @parameter0: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor: java.lang.Class valueType> = r1;

        return;
    }

    public com.sun.xml.bind.v2.runtime.reflect.Accessor optimize(com.sun.xml.bind.v2.runtime.JAXBContextImpl)
    {
        com.sun.xml.bind.v2.runtime.reflect.Accessor r0;
        com.sun.xml.bind.v2.runtime.JAXBContextImpl r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.JAXBContextImpl;

        return r0;
    }

    public abstract java.lang.Object get(java.lang.Object) throws com.sun.xml.bind.api.AccessorException;

    public abstract void set(java.lang.Object, java.lang.Object) throws com.sun.xml.bind.api.AccessorException;

    public java.lang.Object getUnadapted(java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        java.lang.Object r1, $r2;
        com.sun.xml.bind.v2.runtime.reflect.Accessor r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor: java.lang.Object get(java.lang.Object)>(r1);

        return $r2;
    }

    public boolean isAdapted()
    {
        com.sun.xml.bind.v2.runtime.reflect.Accessor r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor;

        return 0;
    }

    public void setUnadapted(java.lang.Object, java.lang.Object) throws com.sun.xml.bind.api.AccessorException
    {
        java.lang.Object r1, r2;
        com.sun.xml.bind.v2.runtime.reflect.Accessor r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor: void set(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void receive(com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext$State, java.lang.Object) throws org.xml.sax.SAXException
    {
        com.sun.xml.bind.v2.runtime.reflect.Accessor r0;
        java.lang.IllegalAccessError $r4;
        java.lang.Object r2, $r3;
        com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext$State r1;
        com.sun.xml.bind.api.AccessorException $r5;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext$State;

        r2 := @parameter1: java.lang.Object;

     label1:
        $r3 = r1.<com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext$State: java.lang.Object target>;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor: void set(java.lang.Object,java.lang.Object)>($r3, r2);

     label2:
        goto label5;

     label3:
        $r5 := @caughtexception;

        staticinvoke <com.sun.xml.bind.v2.runtime.unmarshaller.Loader: void handleGenericException(java.lang.Exception,boolean)>($r5, 1);

        goto label5;

     label4:
        $r4 := @caughtexception;

        staticinvoke <com.sun.xml.bind.v2.runtime.unmarshaller.Loader: void handleGenericError(java.lang.Error)>($r4);

     label5:
        return;

        catch com.sun.xml.bind.api.AccessorException from label1 to label2 with label3;
        catch java.lang.IllegalAccessError from label1 to label2 with label4;
    }

    public boolean isValueTypeAbstractable()
    {
        java.util.List $r1;
        com.sun.xml.bind.v2.runtime.reflect.Accessor r0;
        java.lang.Class $r2;
        boolean $z0, $z1;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor;

        $r1 = <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.List nonAbstractableClasses>;

        $r2 = virtualinvoke r0.<com.sun.xml.bind.v2.runtime.reflect.Accessor: java.lang.Class getValueType()>();

        $z0 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean isAbstractable(java.lang.Class)
    {
        java.util.List $r1;
        com.sun.xml.bind.v2.runtime.reflect.Accessor r2;
        java.lang.Class r0;
        boolean $z0, $z1;

        r2 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.List nonAbstractableClasses>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public final com.sun.xml.bind.v2.runtime.reflect.Accessor adapt(java.lang.Class, java.lang.Class)
    {
        com.sun.xml.bind.v2.runtime.reflect.Accessor r2;
        com.sun.xml.bind.v2.runtime.reflect.AdaptedAccessor $r0;
        java.lang.Class r1, r3;

        r2 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor;

        r1 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Class;

        $r0 = new com.sun.xml.bind.v2.runtime.reflect.AdaptedAccessor;

        specialinvoke $r0.<com.sun.xml.bind.v2.runtime.reflect.AdaptedAccessor: void <init>(java.lang.Class,com.sun.xml.bind.v2.runtime.reflect.Accessor,java.lang.Class)>(r1, r2, r3);

        return $r0;
    }

    public final com.sun.xml.bind.v2.runtime.reflect.Accessor adapt(com.sun.xml.bind.v2.model.core.Adapter)
    {
        com.sun.xml.bind.v2.model.core.Adapter r1;
        com.sun.xml.bind.v2.runtime.reflect.Accessor r6;
        com.sun.xml.bind.v2.runtime.reflect.AdaptedAccessor $r0;
        java.lang.reflect.Type $r3;
        java.lang.Object $r2, $r7;
        java.lang.Class $r5, $r8;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator $r4;

        r6 := @this: com.sun.xml.bind.v2.runtime.reflect.Accessor;

        r1 := @parameter0: com.sun.xml.bind.v2.model.core.Adapter;

        $r0 = new com.sun.xml.bind.v2.runtime.reflect.AdaptedAccessor;

        $r4 = <com.sun.xml.bind.v2.model.nav.Navigator: com.sun.xml.bind.v2.model.nav.ReflectionNavigator REFLECTION>;

        $r2 = r1.<com.sun.xml.bind.v2.model.core.Adapter: java.lang.Object defaultType>;

        $r3 = (java.lang.reflect.Type) $r2;

        $r5 = virtualinvoke $r4.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class erasure(java.lang.reflect.Type)>($r3);

        $r7 = r1.<com.sun.xml.bind.v2.model.core.Adapter: java.lang.Object adapterType>;

        $r8 = (java.lang.Class) $r7;

        specialinvoke $r0.<com.sun.xml.bind.v2.runtime.reflect.AdaptedAccessor: void <init>(java.lang.Class,com.sun.xml.bind.v2.runtime.reflect.Accessor,java.lang.Class)>($r5, r6, $r8);

        return $r0;
    }

    public static com.sun.xml.bind.v2.runtime.reflect.Accessor getErrorInstance()
    {
        com.sun.xml.bind.v2.runtime.reflect.Accessor $r0;

        $r0 = <com.sun.xml.bind.v2.runtime.reflect.Accessor: com.sun.xml.bind.v2.runtime.reflect.Accessor ERROR>;

        return $r0;
    }

    static boolean access$000()
    {
        boolean $z0;

        $z0 = <com.sun.xml.bind.v2.runtime.reflect.Accessor: boolean accessWarned>;

        return $z0;
    }

    static boolean access$002(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <com.sun.xml.bind.v2.runtime.reflect.Accessor: boolean accessWarned> = z0;

        return z0;
    }

    static java.util.Map access$100()
    {
        java.util.Map $r0;

        $r0 = <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.Map uninitializedValues>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Float $r16;
        java.lang.Double $r19;
        java.util.HashMap $r4;
        java.lang.Integer $r22;
        com.sun.xml.bind.v2.runtime.reflect.Accessor$2 $r3;
        com.sun.xml.bind.v2.runtime.reflect.Accessor$1 $r2;
        java.lang.Character $r13;
        java.lang.Long $r25;
        java.lang.Short $r28;
        java.util.Map $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26;
        java.lang.Boolean $r10;
        java.lang.Byte $r7;
        java.lang.Class[] $r0;
        java.util.List $r1;
        java.lang.Class $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27;

        $r0 = newarray (java.lang.Class)[14];

        $r0[0] = class "Ljava/lang/Object;";

        $r0[1] = class "Ljava/util/Calendar;";

        $r0[2] = class "Ljavax/xml/datatype/Duration;";

        $r0[3] = class "Ljavax/xml/datatype/XMLGregorianCalendar;";

        $r0[4] = class "Ljava/awt/Image;";

        $r0[5] = class "Ljavax/activation/DataHandler;";

        $r0[6] = class "Ljavax/xml/transform/Source;";

        $r0[7] = class "Ljava/util/Date;";

        $r0[8] = class "Ljava/io/File;";

        $r0[9] = class "Ljava/net/URI;";

        $r0[10] = class "Ljava/net/URL;";

        $r0[11] = class "Ljava/lang/Class;";

        $r0[12] = class "Ljava/lang/String;";

        $r0[13] = class "Ljavax/xml/transform/Source;";

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0);

        <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.List nonAbstractableClasses> = $r1;

        <com.sun.xml.bind.v2.runtime.reflect.Accessor: boolean accessWarned> = 0;

        $r2 = new com.sun.xml.bind.v2.runtime.reflect.Accessor$1;

        specialinvoke $r2.<com.sun.xml.bind.v2.runtime.reflect.Accessor$1: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        <com.sun.xml.bind.v2.runtime.reflect.Accessor: com.sun.xml.bind.v2.runtime.reflect.Accessor ERROR> = $r2;

        $r3 = new com.sun.xml.bind.v2.runtime.reflect.Accessor$2;

        specialinvoke $r3.<com.sun.xml.bind.v2.runtime.reflect.Accessor$2: void <init>(java.lang.Class)>(class "Ljava/lang/Object;");

        <com.sun.xml.bind.v2.runtime.reflect.Accessor: com.sun.xml.bind.v2.runtime.reflect.Accessor JAXB_ELEMENT_VALUE> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.Map uninitializedValues> = $r4;

        $r5 = <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.Map uninitializedValues>;

        $r6 = <java.lang.Byte: java.lang.Class TYPE>;

        $r7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        $r8 = <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.Map uninitializedValues>;

        $r9 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

        $r11 = <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.Map uninitializedValues>;

        $r12 = <java.lang.Character: java.lang.Class TYPE>;

        $r13 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(0);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13);

        $r14 = <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.Map uninitializedValues>;

        $r15 = <java.lang.Float: java.lang.Class TYPE>;

        $r16 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16);

        $r17 = <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.Map uninitializedValues>;

        $r18 = <java.lang.Double: java.lang.Class TYPE>;

        $r19 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r19);

        $r20 = <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.Map uninitializedValues>;

        $r21 = <java.lang.Integer: java.lang.Class TYPE>;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r22);

        $r23 = <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.Map uninitializedValues>;

        $r24 = <java.lang.Long: java.lang.Class TYPE>;

        $r25 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r25);

        $r26 = <com.sun.xml.bind.v2.runtime.reflect.Accessor: java.util.Map uninitializedValues>;

        $r27 = <java.lang.Short: java.lang.Class TYPE>;

        $r28 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(0);

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r28);

        return;
    }
}
