public class org.apache.batik.svggen.SVGFont extends org.apache.batik.svggen.AbstractSVGConverter
{
    public static final float EXTRA_LIGHT;
    public static final float LIGHT;
    public static final float DEMILIGHT;
    public static final float REGULAR;
    public static final float SEMIBOLD;
    public static final float MEDIUM;
    public static final float DEMIBOLD;
    public static final float BOLD;
    public static final float HEAVY;
    public static final float EXTRABOLD;
    public static final float ULTRABOLD;
    public static final float POSTURE_REGULAR;
    public static final float POSTURE_OBLIQUE;
    static final float[] fontStyles;
    static final java.lang.String[] svgStyles;
    static final float[] fontWeights;
    static final java.lang.String[] svgWeights;
    static java.util.Map logicalFontMap;
    static final int COMMON_FONT_SIZE;
    final java.util.Map fontStringMap;

    public void <init>(org.apache.batik.svggen.SVGGeneratorContext)
    {
        java.util.HashMap $r2;
        org.apache.batik.svggen.SVGGeneratorContext r1;
        org.apache.batik.svggen.SVGFont r0;

        r0 := @this: org.apache.batik.svggen.SVGFont;

        r1 := @parameter0: org.apache.batik.svggen.SVGGeneratorContext;

        specialinvoke r0.<org.apache.batik.svggen.AbstractSVGConverter: void <init>(org.apache.batik.svggen.SVGGeneratorContext)>(r1);

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.batik.svggen.SVGFont: java.util.Map fontStringMap> = $r2;

        return;
    }

    public void recordFontUsage(java.lang.String, java.awt.Font)
    {
        org.apache.batik.svggen.SVGFont r7;
        java.lang.StringBuffer $r4, $r5, $r14;
        java.util.Map $r8, $r11;
        int $i0, $i1, i3, $i4;
        java.lang.String $r3, $r6, r10;
        java.awt.Font r0, $r1;
        char $c2;
        org.apache.batik.svggen.SVGFont$CharListHelper r13, $r15;
        java.lang.Object $r9;

        r7 := @this: org.apache.batik.svggen.SVGFont;

        r10 := @parameter0: java.lang.String;

        r0 := @parameter1: java.awt.Font;

        $r1 = staticinvoke <org.apache.batik.svggen.SVGFont: java.awt.Font createCommonSizeFont(java.awt.Font)>(r0);

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.awt.Font: java.lang.String getFamily()>();

        $r4 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $i0 = virtualinvoke $r1.<java.awt.Font: int getStyle()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        $r8 = r7.<org.apache.batik.svggen.SVGFont: java.util.Map fontStringMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r13 = (org.apache.batik.svggen.SVGFont$CharListHelper) $r9;

        if r13 != null goto label1;

        $r15 = new org.apache.batik.svggen.SVGFont$CharListHelper;

        specialinvoke $r15.<org.apache.batik.svggen.SVGFont$CharListHelper: void <init>()>();

        r13 = $r15;

     label1:
        i3 = 0;

        goto label3;

     label2:
        $c2 = virtualinvoke r10.<java.lang.String: char charAt(int)>(i3);

        $i4 = (int) $c2;

        virtualinvoke r13.<org.apache.batik.svggen.SVGFont$CharListHelper: boolean add(int)>($i4);

        i3 = i3 + 1;

     label3:
        $i1 = virtualinvoke r10.<java.lang.String: int length()>();

        if i3 < $i1 goto label2;

        $r11 = r7.<org.apache.batik.svggen.SVGFont: java.util.Map fontStringMap>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r13);

        return;
    }

    private static java.awt.Font createCommonSizeFont(java.awt.Font)
    {
        java.lang.Float $r3;
        java.awt.Font r1, $r6;
        java.awt.font.TextAttribute $r4, $r5;
        java.util.Map $r2;
        java.util.HashMap $r0;

        r1 := @parameter0: java.awt.Font;

        $r0 = new java.util.HashMap;

        $r2 = virtualinvoke r1.<java.awt.Font: java.util.Map getAttributes()>();

        specialinvoke $r0.<java.util.HashMap: void <init>(java.util.Map)>($r2);

        $r4 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute SIZE>;

        $r3 = new java.lang.Float;

        specialinvoke $r3.<java.lang.Float: void <init>(float)>(100.0F);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r3);

        $r5 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute TRANSFORM>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        $r6 = new java.awt.Font;

        specialinvoke $r6.<java.awt.Font: void <init>(java.util.Map)>($r0);

        return $r6;
    }

    public org.apache.batik.svggen.SVGDescriptor toSVG(org.apache.batik.ext.awt.g2d.GraphicContext)
    {
        java.awt.font.FontRenderContext $r3;
        java.awt.Font $r2;
        org.apache.batik.svggen.SVGFont r0;
        org.apache.batik.ext.awt.g2d.GraphicContext r1;
        org.apache.batik.svggen.SVGFontDescriptor $r4;

        r0 := @this: org.apache.batik.svggen.SVGFont;

        r1 := @parameter0: org.apache.batik.ext.awt.g2d.GraphicContext;

        $r2 = virtualinvoke r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.Font getFont()>();

        $r3 = virtualinvoke r1.<org.apache.batik.ext.awt.g2d.GraphicContext: java.awt.font.FontRenderContext getFontRenderContext()>();

        $r4 = virtualinvoke r0.<org.apache.batik.svggen.SVGFont: org.apache.batik.svggen.SVGFontDescriptor toSVG(java.awt.Font,java.awt.font.FontRenderContext)>($r2, $r3);

        return $r4;
    }

    public org.apache.batik.svggen.SVGFontDescriptor toSVG(java.awt.Font, java.awt.font.FontRenderContext)
    {
        org.w3c.dom.Document r23;
        java.util.Map $r19, $r24, $r35;
        java.awt.font.LineMetrics $r65;
        java.awt.geom.AffineTransform $r45, $r59, $r73;
        org.apache.batik.svggen.SVGGeneratorContext $r22, $r47, $r61, $r68;
        java.lang.StringBuffer $r4, $r8, $r16, $r17, $r39, $r40, $r75, $r76, $r78;
        java.lang.String $r7, $r9, $r10, $r11, $r12, $r15, $r18, $r29, $r33, $r41, $r48, $r49, $r50, r53, $r62, $r63, $r64, $r66, $r67, $r70, $r71;
        java.awt.font.GlyphMetrics $r44, $r58;
        org.apache.batik.svggen.SVGIDGenerator $r69;
        org.apache.batik.svggen.SVGFontDescriptor r26, $r77, $r79;
        java.awt.font.GlyphVector $r42, $r56;
        java.awt.font.FontRenderContext r2, $r74;
        org.apache.batik.svggen.SVGFont r5;
        int[] $r55;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        java.awt.Shape $r43, $r46, $r57, $r60;
        java.awt.Font r6, $r13;
        java.util.List $r36;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        org.w3c.dom.Node $r31, $r32;
        int $i0, $i2, $i3, $i4, $i5, i6, i7, $i8, $i10;
        double $d0;
        org.w3c.dom.NodeList $r30;
        char $c1;
        org.w3c.dom.Element $r27, $r28, $r37, r52, $r54, r72;
        org.apache.batik.svggen.SVGFont$CharListHelper r21;
        java.lang.Object $r20, $r25;

        r5 := @this: org.apache.batik.svggen.SVGFont;

        r6 := @parameter0: java.awt.Font;

        r2 := @parameter1: java.awt.font.FontRenderContext;

        $r74 = new java.awt.font.FontRenderContext;

        $r73 = new java.awt.geom.AffineTransform;

        specialinvoke $r73.<java.awt.geom.AffineTransform: void <init>()>();

        $z0 = virtualinvoke r2.<java.awt.font.FontRenderContext: boolean isAntiAliased()>();

        $z1 = virtualinvoke r2.<java.awt.font.FontRenderContext: boolean usesFractionalMetrics()>();

        specialinvoke $r74.<java.awt.font.FontRenderContext: void <init>(java.awt.geom.AffineTransform,boolean,boolean)>($r73, $z0, $z1);

        $r75 = new java.lang.StringBuffer;

        specialinvoke $r75.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r75.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $f0 = virtualinvoke r6.<java.awt.Font: float getSize2D()>();

        $d0 = (double) $f0;

        $r7 = virtualinvoke r5.<org.apache.batik.svggen.AbstractSVGConverter: java.lang.String doubleString(double)>($d0);

        $r8 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = staticinvoke <org.apache.batik.svggen.SVGFont: java.lang.String weightToSVG(java.awt.Font)>(r6);

        $r11 = staticinvoke <org.apache.batik.svggen.SVGFont: java.lang.String styleToSVG(java.awt.Font)>(r6);

        $r12 = staticinvoke <org.apache.batik.svggen.SVGFont: java.lang.String familyToSVG(java.awt.Font)>(r6);

        $r13 = staticinvoke <org.apache.batik.svggen.SVGFont: java.awt.Font createCommonSizeFont(java.awt.Font)>(r6);

        $r76 = new java.lang.StringBuffer;

        specialinvoke $r76.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r13.<java.awt.Font: java.lang.String getFamily()>();

        $r16 = virtualinvoke $r76.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $i0 = virtualinvoke $r13.<java.awt.Font: int getStyle()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        $r19 = r5.<org.apache.batik.svggen.SVGFont: java.util.Map fontStringMap>;

        $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        r21 = (org.apache.batik.svggen.SVGFont$CharListHelper) $r20;

        if r21 != null goto label01;

        $r77 = new org.apache.batik.svggen.SVGFontDescriptor;

        specialinvoke $r77.<org.apache.batik.svggen.SVGFontDescriptor: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.w3c.dom.Element)>($r9, $r10, $r11, $r12, null);

        return $r77;

     label01:
        $r22 = r5.<org.apache.batik.svggen.AbstractSVGConverter: org.apache.batik.svggen.SVGGeneratorContext generatorContext>;

        r23 = $r22.<org.apache.batik.svggen.SVGGeneratorContext: org.w3c.dom.Document domFactory>;

        $r24 = r5.<org.apache.batik.svggen.AbstractSVGConverter: java.util.Map descMap>;

        $r25 = interfaceinvoke $r24.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        r26 = (org.apache.batik.svggen.SVGFontDescriptor) $r25;

        if r26 == null goto label02;

        r52 = virtualinvoke r26.<org.apache.batik.svggen.SVGFontDescriptor: org.w3c.dom.Element getDef()>();

        goto label04;

     label02:
        $r27 = interfaceinvoke r23.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "font");

        r52 = $r27;

        $r28 = interfaceinvoke r23.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "font-face");

        r53 = $r12;

        $z2 = virtualinvoke $r12.<java.lang.String: boolean startsWith(java.lang.String)>("\'");

        if $z2 == 0 goto label03;

        $z5 = virtualinvoke $r12.<java.lang.String: boolean endsWith(java.lang.String)>("\'");

        if $z5 == 0 goto label03;

        $i2 = virtualinvoke $r12.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        r53 = virtualinvoke $r12.<java.lang.String: java.lang.String substring(int,int)>(1, $i3);

     label03:
        interfaceinvoke $r28.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "font-family", r53);

        interfaceinvoke $r28.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "font-weight", $r10);

        interfaceinvoke $r28.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "font-style", $r11);

        interfaceinvoke $r28.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "units-per-em", "100");

        interfaceinvoke $r27.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r28);

        $r54 = interfaceinvoke r23.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "missing-glyph");

        $r55 = newarray (int)[1];

        $i4 = virtualinvoke $r13.<java.awt.Font: int getMissingGlyphCode()>();

        $r55[0] = $i4;

        $r56 = virtualinvoke $r13.<java.awt.Font: java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,int[])>($r74, $r55);

        $r57 = virtualinvoke $r56.<java.awt.font.GlyphVector: java.awt.Shape getGlyphOutline(int)>(0);

        $r58 = virtualinvoke $r56.<java.awt.font.GlyphVector: java.awt.font.GlyphMetrics getGlyphMetrics(int)>(0);

        $r59 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>(1.0, -1.0);

        $r60 = virtualinvoke $r59.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r57);

        $r61 = r5.<org.apache.batik.svggen.AbstractSVGConverter: org.apache.batik.svggen.SVGGeneratorContext generatorContext>;

        $r62 = staticinvoke <org.apache.batik.svggen.SVGPath: java.lang.String toSVGPathData(java.awt.Shape,org.apache.batik.svggen.SVGGeneratorContext)>($r60, $r61);

        interfaceinvoke $r54.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "d", $r62);

        $f2 = virtualinvoke $r58.<java.awt.font.GlyphMetrics: float getAdvance()>();

        $r63 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>($f2);

        interfaceinvoke $r54.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "horiz-adv-x", $r63);

        interfaceinvoke $r27.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r54);

        $f3 = virtualinvoke $r58.<java.awt.font.GlyphMetrics: float getAdvance()>();

        $r64 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>($f3);

        interfaceinvoke $r27.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "horiz-adv-x", $r64);

        $r65 = virtualinvoke $r13.<java.awt.Font: java.awt.font.LineMetrics getLineMetrics(java.lang.String,java.awt.font.FontRenderContext)>("By", $r74);

        $f4 = virtualinvoke $r65.<java.awt.font.LineMetrics: float getAscent()>();

        $r66 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>($f4);

        interfaceinvoke $r28.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "ascent", $r66);

        $f5 = virtualinvoke $r65.<java.awt.font.LineMetrics: float getDescent()>();

        $r67 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>($f5);

        interfaceinvoke $r28.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "descent", $r67);

        $r68 = r5.<org.apache.batik.svggen.AbstractSVGConverter: org.apache.batik.svggen.SVGGeneratorContext generatorContext>;

        $r69 = $r68.<org.apache.batik.svggen.SVGGeneratorContext: org.apache.batik.svggen.SVGIDGenerator idGenerator>;

        $r70 = virtualinvoke $r69.<org.apache.batik.svggen.SVGIDGenerator: java.lang.String generateID(java.lang.String)>("font");

        interfaceinvoke $r27.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "id", $r70);

     label04:
        $r71 = virtualinvoke r21.<org.apache.batik.svggen.SVGFont$CharListHelper: java.lang.String getNewChars()>();

        virtualinvoke r21.<org.apache.batik.svggen.SVGFont$CharListHelper: void clearNewChars()>();

        $i5 = virtualinvoke $r71.<java.lang.String: int length()>();

        i6 = $i5 - 1;

        goto label10;

     label05:
        $c1 = virtualinvoke $r71.<java.lang.String: char charAt(int)>(i6);

        $r29 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c1);

        z6 = 0;

        $r30 = interfaceinvoke r52.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i7 = 0;

        goto label08;

     label06:
        $r31 = interfaceinvoke $r30.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i7);

        $z3 = $r31 instanceof org.w3c.dom.Element;

        if $z3 == 0 goto label07;

        $r32 = interfaceinvoke $r30.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i7);

        r72 = (org.w3c.dom.Element) $r32;

        $r33 = interfaceinvoke r72.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "unicode");

        $z4 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>($r29);

        if $z4 == 0 goto label07;

        z6 = 1;

        goto label09;

     label07:
        i7 = i7 + 1;

     label08:
        $i8 = interfaceinvoke $r30.<org.w3c.dom.NodeList: int getLength()>();

        if i7 < $i8 goto label06;

     label09:
        if z6 != 0 goto label11;

        $r37 = interfaceinvoke r23.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/svg", "glyph");

        $r78 = new java.lang.StringBuffer;

        specialinvoke $r78.<java.lang.StringBuffer: void <init>()>();

        $r39 = virtualinvoke $r78.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        $r41 = virtualinvoke $r40.<java.lang.StringBuffer: java.lang.String toString()>();

        $r42 = virtualinvoke $r13.<java.awt.Font: java.awt.font.GlyphVector createGlyphVector(java.awt.font.FontRenderContext,java.lang.String)>($r74, $r41);

        $r43 = virtualinvoke $r42.<java.awt.font.GlyphVector: java.awt.Shape getGlyphOutline(int)>(0);

        $r44 = virtualinvoke $r42.<java.awt.font.GlyphVector: java.awt.font.GlyphMetrics getGlyphMetrics(int)>(0);

        $r45 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>(1.0, -1.0);

        $r46 = virtualinvoke $r45.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r43);

        $r47 = r5.<org.apache.batik.svggen.AbstractSVGConverter: org.apache.batik.svggen.SVGGeneratorContext generatorContext>;

        $r48 = staticinvoke <org.apache.batik.svggen.SVGPath: java.lang.String toSVGPathData(java.awt.Shape,org.apache.batik.svggen.SVGGeneratorContext)>($r46, $r47);

        interfaceinvoke $r37.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "d", $r48);

        $f1 = virtualinvoke $r44.<java.awt.font.GlyphMetrics: float getAdvance()>();

        $r49 = staticinvoke <java.lang.String: java.lang.String valueOf(float)>($f1);

        interfaceinvoke $r37.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "horiz-adv-x", $r49);

        $r50 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c1);

        interfaceinvoke $r37.<org.w3c.dom.Element: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "unicode", $r50);

        interfaceinvoke r52.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r37);

        $i10 = (int) -1;

        i6 = i6 + $i10;

     label10:
        if i6 >= 0 goto label05;

     label11:
        $r79 = new org.apache.batik.svggen.SVGFontDescriptor;

        specialinvoke $r79.<org.apache.batik.svggen.SVGFontDescriptor: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.w3c.dom.Element)>($r9, $r10, $r11, $r12, r52);

        if r26 != null goto label12;

        $r35 = r5.<org.apache.batik.svggen.AbstractSVGConverter: java.util.Map descMap>;

        interfaceinvoke $r35.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r79);

        $r36 = r5.<org.apache.batik.svggen.AbstractSVGConverter: java.util.List defSet>;

        interfaceinvoke $r36.<java.util.List: boolean add(java.lang.Object)>(r52);

     label12:
        return $r79;
    }

    public static java.lang.String familyToSVG(java.awt.Font)
    {
        java.awt.Font r0;
        java.lang.StringBuffer $r7, $r8, $r9, $r10;
        java.util.Map $r2;
        java.lang.Object $r5;
        java.lang.String $r1, $r3, $r4, r6, r11;

        r0 := @parameter0: java.awt.Font;

        $r1 = virtualinvoke r0.<java.awt.Font: java.lang.String getFamily()>();

        $r2 = <org.apache.batik.svggen.SVGFont: java.util.Map logicalFontMap>;

        $r3 = virtualinvoke r0.<java.awt.Font: java.lang.String getName()>();

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r6 = (java.lang.String) $r5;

        if r6 == null goto label1;

        r11 = r6;

        goto label2;

     label1:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(39);

        r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        return r11;
    }

    public static java.lang.String styleToSVG(java.awt.Font)
    {
        java.lang.Float r8;
        java.awt.font.TextAttribute $r2;
        float[] $r4, $r5;
        java.lang.String[] $r6;
        byte $b1;
        java.util.Map $r1;
        int $i0, i2, $i3;
        java.lang.String $r7;
        boolean $z0;
        java.awt.Font r0;
        float $f0, $f1;
        java.lang.Object $r3;

        r0 := @parameter0: java.awt.Font;

        $r1 = virtualinvoke r0.<java.awt.Font: java.util.Map getAttributes()>();

        $r2 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute POSTURE>;

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r8 = (java.lang.Float) $r3;

        if r8 != null goto label2;

        $z0 = virtualinvoke r0.<java.awt.Font: boolean isItalic()>();

        if $z0 == 0 goto label1;

        r8 = <java.awt.font.TextAttribute: java.lang.Float POSTURE_OBLIQUE>;

        goto label2;

     label1:
        r8 = <java.awt.font.TextAttribute: java.lang.Float POSTURE_REGULAR>;

     label2:
        $f1 = virtualinvoke r8.<java.lang.Float: float floatValue()>();

        i2 = 0;

        goto label5;

     label3:
        $r5 = <org.apache.batik.svggen.SVGFont: float[] fontStyles>;

        $f0 = $r5[i2];

        $b1 = $f1 cmpg $f0;

        $i3 = (int) $b1;

        if $i3 > 0 goto label4;

        goto label6;

     label4:
        i2 = i2 + 1;

     label5:
        $r4 = <org.apache.batik.svggen.SVGFont: float[] fontStyles>;

        $i0 = lengthof $r4;

        if i2 < $i0 goto label3;

     label6:
        $r6 = <org.apache.batik.svggen.SVGFont: java.lang.String[] svgStyles>;

        $r7 = $r6[i2];

        return $r7;
    }

    public static java.lang.String weightToSVG(java.awt.Font)
    {
        java.lang.Float r8;
        java.awt.font.TextAttribute $r2;
        float[] $r4, $r5;
        java.lang.String[] $r6;
        byte $b1;
        java.util.Map $r1;
        int $i0, i2, $i3;
        java.lang.String $r7;
        boolean $z0;
        java.awt.Font r0;
        float $f0, $f1;
        java.lang.Object $r3;

        r0 := @parameter0: java.awt.Font;

        $r1 = virtualinvoke r0.<java.awt.Font: java.util.Map getAttributes()>();

        $r2 = <java.awt.font.TextAttribute: java.awt.font.TextAttribute WEIGHT>;

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r8 = (java.lang.Float) $r3;

        if r8 != null goto label2;

        $z0 = virtualinvoke r0.<java.awt.Font: boolean isBold()>();

        if $z0 == 0 goto label1;

        r8 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_BOLD>;

        goto label2;

     label1:
        r8 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_REGULAR>;

     label2:
        $f1 = virtualinvoke r8.<java.lang.Float: float floatValue()>();

        i2 = 0;

        goto label5;

     label3:
        $r5 = <org.apache.batik.svggen.SVGFont: float[] fontWeights>;

        $f0 = $r5[i2];

        $b1 = $f1 cmpg $f0;

        $i3 = (int) $b1;

        if $i3 > 0 goto label4;

        goto label6;

     label4:
        i2 = i2 + 1;

     label5:
        $r4 = <org.apache.batik.svggen.SVGFont: float[] fontWeights>;

        $i0 = lengthof $r4;

        if i2 < $i0 goto label3;

     label6:
        $r6 = <org.apache.batik.svggen.SVGFont: java.lang.String[] svgWeights>;

        $r7 = $r6[i2];

        return $r7;
    }

    static void <clinit>()
    {
        java.lang.Float $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.util.Map $r18, $r19, $r20, $r21, $r22, $r23;
        float[] $r13, $r15;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, $f41, $f42, $f43, $f44, $f45, $f46, $f47, $f48, $f49, $f50, $f51, $f52, $f53, $f54, $f55, $f56, $f57, $f58, $f59, $f60, $f61, $f62, $f63, $f64, $f65, $f66, $f67, $f68, $f69, $f70, $f71, $f72, $f73, $f74, $f75, $f76, $f77;
        java.lang.String[] $r14, $r16;
        java.util.HashMap $r17;

        <org.apache.batik.svggen.SVGFont: int COMMON_FONT_SIZE> = 100;

        $r0 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_EXTRA_LIGHT>;

        $f0 = virtualinvoke $r0.<java.lang.Float: float floatValue()>();

        <org.apache.batik.svggen.SVGFont: float EXTRA_LIGHT> = $f0;

        $r1 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_LIGHT>;

        $f1 = virtualinvoke $r1.<java.lang.Float: float floatValue()>();

        <org.apache.batik.svggen.SVGFont: float LIGHT> = $f1;

        $r2 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_DEMILIGHT>;

        $f2 = virtualinvoke $r2.<java.lang.Float: float floatValue()>();

        <org.apache.batik.svggen.SVGFont: float DEMILIGHT> = $f2;

        $r3 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_REGULAR>;

        $f3 = virtualinvoke $r3.<java.lang.Float: float floatValue()>();

        <org.apache.batik.svggen.SVGFont: float REGULAR> = $f3;

        $r4 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_SEMIBOLD>;

        $f4 = virtualinvoke $r4.<java.lang.Float: float floatValue()>();

        <org.apache.batik.svggen.SVGFont: float SEMIBOLD> = $f4;

        $r5 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_MEDIUM>;

        $f5 = virtualinvoke $r5.<java.lang.Float: float floatValue()>();

        <org.apache.batik.svggen.SVGFont: float MEDIUM> = $f5;

        $r6 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_DEMIBOLD>;

        $f6 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        <org.apache.batik.svggen.SVGFont: float DEMIBOLD> = $f6;

        $r7 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_BOLD>;

        $f7 = virtualinvoke $r7.<java.lang.Float: float floatValue()>();

        <org.apache.batik.svggen.SVGFont: float BOLD> = $f7;

        $r8 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_HEAVY>;

        $f8 = virtualinvoke $r8.<java.lang.Float: float floatValue()>();

        <org.apache.batik.svggen.SVGFont: float HEAVY> = $f8;

        $r9 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_EXTRABOLD>;

        $f9 = virtualinvoke $r9.<java.lang.Float: float floatValue()>();

        <org.apache.batik.svggen.SVGFont: float EXTRABOLD> = $f9;

        $r10 = <java.awt.font.TextAttribute: java.lang.Float WEIGHT_ULTRABOLD>;

        $f10 = virtualinvoke $r10.<java.lang.Float: float floatValue()>();

        <org.apache.batik.svggen.SVGFont: float ULTRABOLD> = $f10;

        $r11 = <java.awt.font.TextAttribute: java.lang.Float POSTURE_REGULAR>;

        $f11 = virtualinvoke $r11.<java.lang.Float: float floatValue()>();

        <org.apache.batik.svggen.SVGFont: float POSTURE_REGULAR> = $f11;

        $r12 = <java.awt.font.TextAttribute: java.lang.Float POSTURE_OBLIQUE>;

        $f12 = virtualinvoke $r12.<java.lang.Float: float floatValue()>();

        <org.apache.batik.svggen.SVGFont: float POSTURE_OBLIQUE> = $f12;

        $r13 = newarray (float)[1];

        $f17 = <org.apache.batik.svggen.SVGFont: float POSTURE_REGULAR>;

        $f14 = <org.apache.batik.svggen.SVGFont: float POSTURE_OBLIQUE>;

        $f13 = <org.apache.batik.svggen.SVGFont: float POSTURE_REGULAR>;

        $f15 = $f14 - $f13;

        $f16 = $f15 / 2.0F;

        $f18 = $f17 + $f16;

        $r13[0] = $f18;

        <org.apache.batik.svggen.SVGFont: float[] fontStyles> = $r13;

        $r14 = newarray (java.lang.String)[2];

        $r14[0] = "normal";

        $r14[1] = "italic";

        <org.apache.batik.svggen.SVGFont: java.lang.String[] svgStyles> = $r14;

        $r15 = newarray (float)[10];

        $f23 = <org.apache.batik.svggen.SVGFont: float EXTRA_LIGHT>;

        $f20 = <org.apache.batik.svggen.SVGFont: float LIGHT>;

        $f19 = <org.apache.batik.svggen.SVGFont: float EXTRA_LIGHT>;

        $f21 = $f20 - $f19;

        $f22 = $f21 / 2.0F;

        $f24 = $f23 + $f22;

        $r15[0] = $f24;

        $f29 = <org.apache.batik.svggen.SVGFont: float LIGHT>;

        $f26 = <org.apache.batik.svggen.SVGFont: float DEMILIGHT>;

        $f25 = <org.apache.batik.svggen.SVGFont: float LIGHT>;

        $f27 = $f26 - $f25;

        $f28 = $f27 / 2.0F;

        $f30 = $f29 + $f28;

        $r15[1] = $f30;

        $f35 = <org.apache.batik.svggen.SVGFont: float DEMILIGHT>;

        $f32 = <org.apache.batik.svggen.SVGFont: float REGULAR>;

        $f31 = <org.apache.batik.svggen.SVGFont: float DEMILIGHT>;

        $f33 = $f32 - $f31;

        $f34 = $f33 / 2.0F;

        $f36 = $f35 + $f34;

        $r15[2] = $f36;

        $f41 = <org.apache.batik.svggen.SVGFont: float REGULAR>;

        $f38 = <org.apache.batik.svggen.SVGFont: float SEMIBOLD>;

        $f37 = <org.apache.batik.svggen.SVGFont: float REGULAR>;

        $f39 = $f38 - $f37;

        $f40 = $f39 / 2.0F;

        $f42 = $f41 + $f40;

        $r15[3] = $f42;

        $f47 = <org.apache.batik.svggen.SVGFont: float SEMIBOLD>;

        $f44 = <org.apache.batik.svggen.SVGFont: float MEDIUM>;

        $f43 = <org.apache.batik.svggen.SVGFont: float SEMIBOLD>;

        $f45 = $f44 - $f43;

        $f46 = $f45 / 2.0F;

        $f48 = $f47 + $f46;

        $r15[4] = $f48;

        $f53 = <org.apache.batik.svggen.SVGFont: float MEDIUM>;

        $f50 = <org.apache.batik.svggen.SVGFont: float DEMIBOLD>;

        $f49 = <org.apache.batik.svggen.SVGFont: float MEDIUM>;

        $f51 = $f50 - $f49;

        $f52 = $f51 / 2.0F;

        $f54 = $f53 + $f52;

        $r15[5] = $f54;

        $f59 = <org.apache.batik.svggen.SVGFont: float DEMIBOLD>;

        $f56 = <org.apache.batik.svggen.SVGFont: float BOLD>;

        $f55 = <org.apache.batik.svggen.SVGFont: float DEMIBOLD>;

        $f57 = $f56 - $f55;

        $f58 = $f57 / 2.0F;

        $f60 = $f59 + $f58;

        $r15[6] = $f60;

        $f65 = <org.apache.batik.svggen.SVGFont: float BOLD>;

        $f62 = <org.apache.batik.svggen.SVGFont: float HEAVY>;

        $f61 = <org.apache.batik.svggen.SVGFont: float BOLD>;

        $f63 = $f62 - $f61;

        $f64 = $f63 / 2.0F;

        $f66 = $f65 + $f64;

        $r15[7] = $f66;

        $f71 = <org.apache.batik.svggen.SVGFont: float HEAVY>;

        $f68 = <org.apache.batik.svggen.SVGFont: float EXTRABOLD>;

        $f67 = <org.apache.batik.svggen.SVGFont: float HEAVY>;

        $f69 = $f68 - $f67;

        $f70 = $f69 / 2.0F;

        $f72 = $f71 + $f70;

        $r15[8] = $f72;

        $f76 = <org.apache.batik.svggen.SVGFont: float EXTRABOLD>;

        $f74 = <org.apache.batik.svggen.SVGFont: float ULTRABOLD>;

        $f73 = <org.apache.batik.svggen.SVGFont: float EXTRABOLD>;

        $f75 = $f74 - $f73;

        $f77 = $f76 + $f75;

        $r15[9] = $f77;

        <org.apache.batik.svggen.SVGFont: float[] fontWeights> = $r15;

        $r16 = newarray (java.lang.String)[11];

        $r16[0] = "100";

        $r16[1] = "200";

        $r16[2] = "300";

        $r16[3] = "normal";

        $r16[4] = "500";

        $r16[5] = "500";

        $r16[6] = "600";

        $r16[7] = "bold";

        $r16[8] = "800";

        $r16[9] = "800";

        $r16[10] = "900";

        <org.apache.batik.svggen.SVGFont: java.lang.String[] svgWeights> = $r16;

        $r17 = new java.util.HashMap;

        specialinvoke $r17.<java.util.HashMap: void <init>()>();

        <org.apache.batik.svggen.SVGFont: java.util.Map logicalFontMap> = $r17;

        $r18 = <org.apache.batik.svggen.SVGFont: java.util.Map logicalFontMap>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dialog", "sans-serif");

        $r19 = <org.apache.batik.svggen.SVGFont: java.util.Map logicalFontMap>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("dialoginput", "monospace");

        $r20 = <org.apache.batik.svggen.SVGFont: java.util.Map logicalFontMap>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("monospaced", "monospace");

        $r21 = <org.apache.batik.svggen.SVGFont: java.util.Map logicalFontMap>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("serif", "serif");

        $r22 = <org.apache.batik.svggen.SVGFont: java.util.Map logicalFontMap>;

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sansserif", "sans-serif");

        $r23 = <org.apache.batik.svggen.SVGFont: java.util.Map logicalFontMap>;

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("symbol", "\'WingDings\'");

        return;
    }
}
