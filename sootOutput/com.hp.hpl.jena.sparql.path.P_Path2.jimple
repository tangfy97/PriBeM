public abstract class com.hp.hpl.jena.sparql.path.P_Path2 extends com.hp.hpl.jena.sparql.path.PathBase
{
    private com.hp.hpl.jena.sparql.path.Path path1;
    private com.hp.hpl.jena.sparql.path.Path path2;

    protected void <init>(com.hp.hpl.jena.sparql.path.Path, com.hp.hpl.jena.sparql.path.Path)
    {
        com.hp.hpl.jena.sparql.path.P_Path2 r0;
        com.hp.hpl.jena.sparql.path.Path r1, r2;

        r0 := @this: com.hp.hpl.jena.sparql.path.P_Path2;

        r1 := @parameter0: com.hp.hpl.jena.sparql.path.Path;

        r2 := @parameter1: com.hp.hpl.jena.sparql.path.Path;

        specialinvoke r0.<com.hp.hpl.jena.sparql.path.PathBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.path.P_Path2: com.hp.hpl.jena.sparql.path.Path path1> = r1;

        r0.<com.hp.hpl.jena.sparql.path.P_Path2: com.hp.hpl.jena.sparql.path.Path path2> = r2;

        return;
    }

    public com.hp.hpl.jena.sparql.path.Path getLeft()
    {
        com.hp.hpl.jena.sparql.path.P_Path2 r0;
        com.hp.hpl.jena.sparql.path.Path $r1;

        r0 := @this: com.hp.hpl.jena.sparql.path.P_Path2;

        $r1 = r0.<com.hp.hpl.jena.sparql.path.P_Path2: com.hp.hpl.jena.sparql.path.Path path1>;

        return $r1;
    }

    public com.hp.hpl.jena.sparql.path.Path getRight()
    {
        com.hp.hpl.jena.sparql.path.P_Path2 r0;
        com.hp.hpl.jena.sparql.path.Path $r1;

        r0 := @this: com.hp.hpl.jena.sparql.path.P_Path2;

        $r1 = r0.<com.hp.hpl.jena.sparql.path.P_Path2: com.hp.hpl.jena.sparql.path.Path path2>;

        return $r1;
    }

    public abstract int hashSeed();

    public final int hashCode()
    {
        com.hp.hpl.jena.sparql.path.P_Path2 r0;
        com.hp.hpl.jena.sparql.path.Path $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.hp.hpl.jena.sparql.path.P_Path2;

        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_Path2: int hashSeed()>();

        $r1 = r0.<com.hp.hpl.jena.sparql.path.P_Path2: com.hp.hpl.jena.sparql.path.Path path1>;

        $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>();

        $i2 = $i0 ^ $i1;

        $r2 = r0.<com.hp.hpl.jena.sparql.path.P_Path2: com.hp.hpl.jena.sparql.path.Path path2>;

        $i3 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $i4 = $i2 ^ $i3;

        return $i4;
    }

    protected final boolean equalsIso(com.hp.hpl.jena.sparql.path.P_Path2, com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)
    {
        com.hp.hpl.jena.sparql.path.P_Path2 r0, r2;
        com.hp.hpl.jena.sparql.path.Path $r1, $r3, $r5, $r6;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.sparql.path.P_Path2;

        r2 := @parameter0: com.hp.hpl.jena.sparql.path.P_Path2;

        r4 := @parameter1: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_Path2: com.hp.hpl.jena.sparql.path.Path getLeft()>();

        $r3 = virtualinvoke r2.<com.hp.hpl.jena.sparql.path.P_Path2: com.hp.hpl.jena.sparql.path.Path getLeft()>();

        $z0 = interfaceinvoke $r1.<com.hp.hpl.jena.sparql.path.Path: boolean equalTo(com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r3, r4);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.path.P_Path2: com.hp.hpl.jena.sparql.path.Path getRight()>();

        $r6 = virtualinvoke r2.<com.hp.hpl.jena.sparql.path.P_Path2: com.hp.hpl.jena.sparql.path.Path getRight()>();

        $z1 = interfaceinvoke $r5.<com.hp.hpl.jena.sparql.path.Path: boolean equalTo(com.hp.hpl.jena.sparql.path.Path,com.hp.hpl.jena.sparql.util.NodeIsomorphismMap)>($r6, r4);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }
}
