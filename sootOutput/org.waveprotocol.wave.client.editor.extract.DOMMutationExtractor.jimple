public final class org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor extends java.lang.Object
{
    private static final org.waveprotocol.wave.model.util.StringSet DOM_EVENTS_IGNORE;
    private final org.waveprotocol.wave.client.scheduler.CommandQueue deferredCommands;
    private final org.waveprotocol.wave.client.editor.selection.content.SelectionHelper passiveSelectionHelper;
    private final java.util.List toRevert;
    private boolean isReverting;
    private org.waveprotocol.wave.client.editor.content.ContentRange previousContentRange;
    private final com.google.gwt.user.client.Command revertCmd;

    public void <init>(org.waveprotocol.wave.client.scheduler.CommandQueue, org.waveprotocol.wave.client.editor.selection.content.SelectionHelper)
    {
        org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor r0;
        org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor$1 $r2;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper r4;
        org.waveprotocol.wave.client.scheduler.CommandQueue r3;
        java.util.ArrayList $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor;

        r3 := @parameter0: org.waveprotocol.wave.client.scheduler.CommandQueue;

        r4 := @parameter1: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: java.util.List toRevert> = $r1;

        $r2 = new org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor$1;

        specialinvoke $r2.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor$1: void <init>(org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor)>(r0);

        r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: com.google.gwt.user.client.Command revertCmd> = $r2;

        r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: org.waveprotocol.wave.client.scheduler.CommandQueue deferredCommands> = r3;

        r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper passiveSelectionHelper> = r4;

        return;
    }

    public void handleDOMMutation(org.waveprotocol.wave.client.common.util.SignalEvent, org.waveprotocol.wave.client.editor.content.ContentRange)
    {
        org.waveprotocol.wave.model.util.StringSet $r6;
        short $s0;
        org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor r0;
        java.lang.String $r7, $r8, $r9;
        org.waveprotocol.wave.client.editor.content.ContentRange r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        com.google.gwt.dom.client.Element $r3, $r4, $r5;
        org.waveprotocol.wave.client.common.util.SignalEvent r2;
        com.google.gwt.dom.client.Node $r10, $r11;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor;

        r2 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentRange;

        $z0 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isSafari()>();

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.waveprotocol.wave.client.common.util.UserAgent: boolean isMac()>();

        if $z1 != 0 goto label2;

     label1:
        return;

     label2:
        $z2 = r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: boolean isReverting>;

        if $z2 == 0 goto label3;

        return;

     label3:
        r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: org.waveprotocol.wave.client.editor.content.ContentRange previousContentRange> = r1;

        $r3 = interfaceinvoke r2.<org.waveprotocol.wave.client.common.util.SignalEvent: com.google.gwt.dom.client.Element getTarget()>();

        $r10 = (com.google.gwt.dom.client.Node) $r3;

        $s0 = virtualinvoke $r10.<com.google.gwt.dom.client.Node: short getNodeType()>();

        if $s0 != 1 goto label6;

        $r4 = interfaceinvoke r2.<org.waveprotocol.wave.client.common.util.SignalEvent: com.google.gwt.dom.client.Element getTarget()>();

        $r11 = (com.google.gwt.dom.client.Node) $r4;

        $r5 = staticinvoke <com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Element as(com.google.gwt.dom.client.Node)>($r11);

        $r6 = <org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: org.waveprotocol.wave.model.util.StringSet DOM_EVENTS_IGNORE>;

        $r7 = interfaceinvoke r2.<org.waveprotocol.wave.client.common.util.SignalEvent: java.lang.String getType()>();

        $z3 = interfaceinvoke $r6.<org.waveprotocol.wave.model.util.StringSet: boolean contains(java.lang.String)>($r7);

        if $z3 == 0 goto label4;

        return;

     label4:
        $r8 = interfaceinvoke r2.<org.waveprotocol.wave.client.common.util.SignalEvent: java.lang.String getType()>();

        $z4 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("DOMNodeInserted");

        if $z4 == 0 goto label5;

        $z7 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: boolean handleDOMNodeInserted(com.google.gwt.dom.client.Element)>($r5);

        if $z7 == 0 goto label5;

        return;

     label5:
        $r9 = interfaceinvoke r2.<org.waveprotocol.wave.client.common.util.SignalEvent: java.lang.String getType()>();

        $z5 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("DOMNodeRemoved");

        if $z5 == 0 goto label6;

        $z6 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: boolean handleDOMNodeRemoved(com.google.gwt.dom.client.Element)>($r5);

        if $z6 == 0 goto label6;

        return;

     label6:
        return;
    }

    private boolean handleDOMNodeInserted(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0, $r4;
        org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor r3;
        java.lang.String $r1, $r2;
        boolean $z0, $z1, $z2;

        r3 := @this: org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = virtualinvoke r0.<com.google.gwt.dom.client.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("SPAN");

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.google.gwt.dom.client.Element: boolean hasAttribute(java.lang.String)>("class");

        if $z1 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.google.gwt.dom.client.Element: java.lang.String getAttribute(java.lang.String)>("class");

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("Apple-style-span");

        if $z2 == 0 goto label1;

        $r4 = virtualinvoke r0.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Element getParentElement()>();

        specialinvoke r3.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: void scheduleElementForRevert(com.google.gwt.dom.client.Element)>($r4);

     label1:
        return 1;
    }

    private boolean handleDOMNodeRemoved(com.google.gwt.dom.client.Element)
    {
        com.google.gwt.dom.client.Element r0, $r3;
        org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor r2;
        java.lang.String $r1;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = virtualinvoke r0.<com.google.gwt.dom.client.Element: java.lang.String getTagName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("B");

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.google.gwt.dom.client.Element: com.google.gwt.dom.client.Element getParentElement()>();

        specialinvoke r2.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: void scheduleElementForRevert(com.google.gwt.dom.client.Element)>($r3);

     label1:
        return 0;
    }

    private void scheduleElementForRevert(com.google.gwt.dom.client.Element)
    {
        java.util.Iterator $r4;
        java.util.List $r3, $r5;
        com.google.gwt.dom.client.Element r0;
        org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor r2;
        org.waveprotocol.wave.client.editor.content.ContentElement $r1, r7;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2;

        r2 := @this: org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor;

        r0 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement getBackReference(com.google.gwt.dom.client.Element)>(r0);

        if $r1 != null goto label1;

        return;

     label1:
        $r3 = r2.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: java.util.List toRevert>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r6;

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: boolean isAncestorOf(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentElement)>(r7, $r1);

        if $z1 == 0 goto label3;

        return;

     label3:
        $z2 = staticinvoke <org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: boolean isAncestorOf(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.ContentElement)>($r1, r7);

        if $z2 == 0 goto label4;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

     label4:
        goto label2;

     label5:
        $r5 = r2.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: java.util.List toRevert>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r1);

        specialinvoke r2.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: void schedule()>();

        return;
    }

    private void schedule()
    {
        org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor r0;
        com.google.gwt.user.client.Command $r1;
        org.waveprotocol.wave.client.scheduler.CommandQueue $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: org.waveprotocol.wave.client.scheduler.CommandQueue deferredCommands>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: com.google.gwt.user.client.Command revertCmd>;

        interfaceinvoke $r2.<org.waveprotocol.wave.client.scheduler.CommandQueue: void addCommand(com.google.gwt.user.client.Command)>($r1);

        return;
    }

    private void domMutationLog(java.lang.String)
    {
        org.waveprotocol.wave.common.logging.Logger $r1;
        org.waveprotocol.wave.common.logging.LoggerBundle $r0;
        org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor r7;
        java.lang.StringBuilder $r2, $r3, $r5;
        java.lang.String r4, $r6;

        r7 := @this: org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor;

        r4 := @parameter0: java.lang.String;

        $r0 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r1 = interfaceinvoke $r0.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DOMMutationExtractor: ");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>($r6);

        return;
    }

    public static boolean isAncestorOf(org.waveprotocol.wave.client.editor.content.ContentElement, org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.content.ContentElement r0, r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        r1 := @parameter1: org.waveprotocol.wave.client.editor.content.ContentElement;

     label1:
        if r1 == null goto label3;

        if r0 != r1 goto label2;

        return 1;

     label2:
        r1 = virtualinvoke r1.<org.waveprotocol.wave.client.editor.content.ContentElement: org.waveprotocol.wave.client.editor.content.ContentElement getParentElement()>();

        goto label1;

     label3:
        return 0;
    }

    static boolean access$002(org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor, boolean)
    {
        org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: boolean isReverting> = z0;

        return z0;
    }

    static java.util.List access$100(org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor)
    {
        org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor r0;
        java.util.List $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: java.util.List toRevert>;

        return $r1;
    }

    static void access$200(org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor, java.lang.String)
    {
        org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor r0;
        java.lang.String r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: void domMutationLog(java.lang.String)>(r1);

        return;
    }

    static org.waveprotocol.wave.client.editor.content.ContentRange access$300(org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor)
    {
        org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor r0;
        org.waveprotocol.wave.client.editor.content.ContentRange $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: org.waveprotocol.wave.client.editor.content.ContentRange previousContentRange>;

        return $r1;
    }

    static org.waveprotocol.wave.client.editor.selection.content.SelectionHelper access$400(org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor)
    {
        org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor r0;
        org.waveprotocol.wave.client.editor.selection.content.SelectionHelper $r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: org.waveprotocol.wave.client.editor.selection.content.SelectionHelper passiveSelectionHelper>;

        return $r1;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.util.StringSet $r0, $r3;
        int i0, i1;
        java.lang.String[] $r1;
        java.lang.String r2;

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        <org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: org.waveprotocol.wave.model.util.StringSet DOM_EVENTS_IGNORE> = $r0;

        $r1 = newarray (java.lang.String)[7];

        $r1[0] = "DOMSubtreeModified";

        $r1[1] = "DOMNodeRemovedFromDocument";

        $r1[2] = "DOMNodeInsertedIntoDocument";

        $r1[3] = "DOMAttrModified";

        $r1[4] = "DOMCharacterDataModified";

        $r1[5] = "DOMElementNameChanged";

        $r1[6] = "DOMAttributeNameChanged";

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = $r1[i1];

        $r3 = <org.waveprotocol.wave.client.editor.extract.DOMMutationExtractor: org.waveprotocol.wave.model.util.StringSet DOM_EVENTS_IGNORE>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringSet: void add(java.lang.String)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }
}
