public class org.codehaus.jettison.mapped.DefaultConverter extends java.lang.Object implements org.codehaus.jettison.mapped.TypeConverter
{
    private static final java.lang.String ENFORCE_32BIT_INTEGER_KEY;
    public static final boolean ENFORCE_32BIT_INTEGER;
    private boolean enforce32BitInt;

    public void <init>()
    {
        org.codehaus.jettison.mapped.DefaultConverter r0;
        boolean $z0;

        r0 := @this: org.codehaus.jettison.mapped.DefaultConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.codehaus.jettison.mapped.DefaultConverter: boolean ENFORCE_32BIT_INTEGER>;

        r0.<org.codehaus.jettison.mapped.DefaultConverter: boolean enforce32BitInt> = $z0;

        return;
    }

    public void setEnforce32BitInt(boolean)
    {
        org.codehaus.jettison.mapped.DefaultConverter r0;
        boolean z0;

        r0 := @this: org.codehaus.jettison.mapped.DefaultConverter;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.jettison.mapped.DefaultConverter: boolean enforce32BitInt> = z0;

        return;
    }

    public java.lang.Object convertToJSONPrimitive(java.lang.String)
    {
        java.lang.Double $r6;
        long $l1;
        java.lang.Integer $r7;
        java.lang.Long $r2;
        int $i0;
        java.lang.String r0, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Exception $r8, $r9;
        org.codehaus.jettison.mapped.DefaultConverter r1;
        java.lang.Comparable r10;

        r1 := @this: org.codehaus.jettison.mapped.DefaultConverter;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return r0;

     label01:
        r10 = null;

     label02:
        $z0 = r1.<org.codehaus.jettison.mapped.DefaultConverter: boolean enforce32BitInt>;

        if $z0 == 0 goto label03;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r0);

        $i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        $l1 = (long) $i0;

        goto label04;

     label03:
        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r0);

        $l1 = virtualinvoke $r2.<java.lang.Long: long longValue()>();

     label04:
        r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

     label05:
        goto label07;

     label06:
        $r9 := @caughtexception;

     label07:
        if r10 != null goto label12;

     label08:
        $r6 = staticinvoke <java.lang.Double: java.lang.Double valueOf(java.lang.String)>(r0);

        $z4 = virtualinvoke $r6.<java.lang.Double: boolean isInfinite()>();

        if $z4 != 0 goto label09;

        $z5 = virtualinvoke $r6.<java.lang.Double: boolean isNaN()>();

        if $z5 != 0 goto label09;

        r10 = $r6;

        goto label10;

     label09:
        r10 = r0;

     label10:
        goto label12;

     label11:
        $r8 := @caughtexception;

     label12:
        if r10 != null goto label14;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z2 != 0 goto label13;

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z3 == 0 goto label14;

     label13:
        r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>(r0);

     label14:
        if r10 == null goto label15;

        $r3 = virtualinvoke r10.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 != 0 goto label16;

     label15:
        r10 = r0;

     label16:
        return r10;

        catch java.lang.Exception from label02 to label05 with label06;
        catch java.lang.Exception from label08 to label10 with label11;
    }

    static void <clinit>()
    {
        boolean $z0;

        <org.codehaus.jettison.mapped.DefaultConverter: java.lang.String ENFORCE_32BIT_INTEGER_KEY> = "jettison.mapped.typeconverter.enforce_32bit_integer";

        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("jettison.mapped.typeconverter.enforce_32bit_integer");

        <org.codehaus.jettison.mapped.DefaultConverter: boolean ENFORCE_32BIT_INTEGER> = $z0;

        return;
    }
}
