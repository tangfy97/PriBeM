class org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView extends java.lang.Object implements org.waveprotocol.wave.model.supplement.SupplementWaveView
{
    private final org.waveprotocol.wave.model.supplement.SupplementWaveView target;

    private void <init>(org.waveprotocol.wave.model.supplement.SupplementWaveView)
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView r1;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.SupplementWaveView;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView: org.waveprotocol.wave.model.supplement.SupplementWaveView target> = r1;

        return;
    }

    public long getVersion(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView $r2;
        org.waveprotocol.wave.model.id.WaveletId r1;
        long $l0;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView: org.waveprotocol.wave.model.supplement.SupplementWaveView target>;

        $l0 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.SupplementWaveView: long getVersion(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $l0;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getSignature(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView $r2;
        org.waveprotocol.wave.model.version.HashedVersion $r3;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView: org.waveprotocol.wave.model.supplement.SupplementWaveView target>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.SupplementWaveView: org.waveprotocol.wave.model.version.HashedVersion getSignature(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $r3;
    }

    public java.lang.Iterable getWavelets()
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView $r2;
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.id.WaveletId r6;
        java.lang.RuntimeException $r7;
        java.lang.Iterable $r3;
        java.util.ArrayList $r0;
        java.lang.Object $r5;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView r1;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView: org.waveprotocol.wave.model.supplement.SupplementWaveView target>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.SupplementWaveView: java.lang.Iterable getWavelets()>();

        $r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.id.WaveletId) $r5;

        $z1 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isConversationalId(org.waveprotocol.wave.model.id.WaveletId)>(r6);

        if $z1 != 0 goto label2;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Error in view implementation: non-conversational wavelets were returned");

        throw $r7;

     label2:
        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r6);

        goto label1;

     label3:
        return $r0;
    }

    public java.util.Map getBlipVersions(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView $r2;
        java.util.Map $r3;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView: org.waveprotocol.wave.model.supplement.SupplementWaveView target>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.supplement.SupplementWaveView: java.util.Map getBlipVersions(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $r3;
    }

    public boolean isExplicitParticipant()
    {
        org.waveprotocol.wave.model.supplement.SupplementWaveView $r1;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView;

        $r1 = r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView: org.waveprotocol.wave.model.supplement.SupplementWaveView target>;

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.supplement.SupplementWaveView: boolean isExplicitParticipant()>();

        return $z0;
    }

    void <init>(org.waveprotocol.wave.model.supplement.SupplementWaveView, org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$1)
    {
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$1 r2;
        org.waveprotocol.wave.model.supplement.SupplementWaveView r1;
        org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.supplement.SupplementWaveView;

        r2 := @parameter1: org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$1;

        specialinvoke r0.<org.waveprotocol.wave.model.supplement.SupplementedWaveImpl$CheckingSupplementWaveView: void <init>(org.waveprotocol.wave.model.supplement.SupplementWaveView)>(r1);

        return;
    }
}
