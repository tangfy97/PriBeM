public abstract class org.apache.lucene.index.MergePolicy$DocMap extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    protected void <init>()
    {
        org.apache.lucene.index.MergePolicy$DocMap r0;

        r0 := @this: org.apache.lucene.index.MergePolicy$DocMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract int map(int);

    boolean isConsistent(int)
    {
        org.apache.lucene.util.FixedBitSet $r0;
        java.lang.AssertionError $r2, $r10;
        int i0, $i1, i2;
        java.lang.String $r9, $r16;
        org.apache.lucene.index.MergePolicy$DocMap r1;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r11, $r12, $r13, $r14, $r15;

        r1 := @this: org.apache.lucene.index.MergePolicy$DocMap;

        i0 := @parameter0: int;

        $r0 = new org.apache.lucene.util.FixedBitSet;

        specialinvoke $r0.<org.apache.lucene.util.FixedBitSet: void <init>(int)>(i0);

        i2 = 0;

     label1:
        if i2 >= i0 goto label7;

        $i1 = virtualinvoke r1.<org.apache.lucene.index.MergePolicy$DocMap: int map(int)>(i2);

        if $i1 < 0 goto label2;

        if $i1 < i0 goto label4;

     label2:
        $z0 = <org.apache.lucene.index.MergePolicy$DocMap: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        $r2 = new java.lang.AssertionError;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("out of range: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not in [0-");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>($r9);

        throw $r2;

     label3:
        return 0;

     label4:
        $z1 = virtualinvoke $r0.<org.apache.lucene.util.FixedBitSet: boolean get(int)>($i1);

        if $z1 == 0 goto label6;

        $z2 = <org.apache.lucene.index.MergePolicy$DocMap: boolean $assertionsDisabled>;

        if $z2 != 0 goto label5;

        $r10 = new java.lang.AssertionError;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already taken (");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r16);

        throw $r10;

     label5:
        return 0;

     label6:
        i2 = i2 + 1;

        goto label1;

     label7:
        return 1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/MergePolicy;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.MergePolicy$DocMap: boolean $assertionsDisabled> = $z1;

        return;
    }
}
