public class org.springframework.context.support.ReloadableResourceBundleMessageSource extends org.springframework.context.support.AbstractMessageSource implements org.springframework.context.ResourceLoaderAware
{
    private static final java.lang.String PROPERTIES_SUFFIX;
    private static final java.lang.String XML_SUFFIX;
    private java.lang.String[] basenames;
    private java.lang.String defaultEncoding;
    private java.util.Properties fileEncodings;
    private boolean fallbackToSystemLocale;
    private long cacheMillis;
    private org.springframework.util.PropertiesPersister propertiesPersister;
    private org.springframework.core.io.ResourceLoader resourceLoader;
    private final java.util.Map cachedFilenames;
    private final java.util.Map cachedProperties;
    private final java.util.Map cachedMergedProperties;

    public void <init>()
    {
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        org.springframework.core.io.DefaultResourceLoader $r3;
        org.springframework.util.DefaultPropertiesPersister $r2;
        java.lang.String[] $r1;
        java.util.HashMap $r4, $r5, $r6;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        specialinvoke r0.<org.springframework.context.support.AbstractMessageSource: void <init>()>();

        $r1 = newarray (java.lang.String)[0];

        r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.lang.String[] basenames> = $r1;

        r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: boolean fallbackToSystemLocale> = 1;

        r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: long cacheMillis> = -1L;

        $r2 = new org.springframework.util.DefaultPropertiesPersister;

        specialinvoke $r2.<org.springframework.util.DefaultPropertiesPersister: void <init>()>();

        r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.util.PropertiesPersister propertiesPersister> = $r2;

        $r3 = new org.springframework.core.io.DefaultResourceLoader;

        specialinvoke $r3.<org.springframework.core.io.DefaultResourceLoader: void <init>()>();

        r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.core.io.ResourceLoader resourceLoader> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedFilenames> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedProperties> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedMergedProperties> = $r6;

        return;
    }

    public void setBasename(java.lang.String)
    {
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        java.lang.String[] $r1;
        java.lang.String r2;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        r2 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: void setBasenames(java.lang.String[])>($r1);

        return;
    }

    public void setBasenames(java.lang.String[])
    {
        java.lang.String[] r0, $r2, $r3, $r5;
        org.springframework.context.support.ReloadableResourceBundleMessageSource r1;
        int $i0, $i1, i2;
        java.lang.String r4, $r6;

        r1 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        r0 := @parameter0: java.lang.String[];

        if r0 == null goto label3;

        $i0 = lengthof r0;

        $r3 = newarray (java.lang.String)[$i0];

        r1.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.lang.String[] basenames> = $r3;

        i2 = 0;

        goto label2;

     label1:
        r4 = r0[i2];

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r4, "Basename must not be empty");

        $r5 = r1.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.lang.String[] basenames>;

        $r6 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>();

        $r5[i2] = $r6;

        i2 = i2 + 1;

     label2:
        $i1 = lengthof r0;

        if i2 < $i1 goto label1;

        goto label4;

     label3:
        $r2 = newarray (java.lang.String)[0];

        r1.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.lang.String[] basenames> = $r2;

     label4:
        return;
    }

    public void setDefaultEncoding(java.lang.String)
    {
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        java.lang.String r1;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.lang.String defaultEncoding> = r1;

        return;
    }

    public void setFileEncodings(java.util.Properties)
    {
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        java.util.Properties r1;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        r1 := @parameter0: java.util.Properties;

        r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Properties fileEncodings> = r1;

        return;
    }

    public void setFallbackToSystemLocale(boolean)
    {
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        boolean z0;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        z0 := @parameter0: boolean;

        r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: boolean fallbackToSystemLocale> = z0;

        return;
    }

    public void setCacheSeconds(int)
    {
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        int i0, $i1;
        long $l2;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        i0 := @parameter0: int;

        $i1 = i0 * 1000;

        $l2 = (long) $i1;

        r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: long cacheMillis> = $l2;

        return;
    }

    public void setPropertiesPersister(org.springframework.util.PropertiesPersister)
    {
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        org.springframework.util.PropertiesPersister r1, $r2;
        org.springframework.util.DefaultPropertiesPersister $r3;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        r1 := @parameter0: org.springframework.util.PropertiesPersister;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.springframework.util.DefaultPropertiesPersister;

        $r2 = $r3;

        specialinvoke $r3.<org.springframework.util.DefaultPropertiesPersister: void <init>()>();

     label2:
        r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.util.PropertiesPersister propertiesPersister> = $r2;

        return;
    }

    public void setResourceLoader(org.springframework.core.io.ResourceLoader)
    {
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        org.springframework.core.io.ResourceLoader r1, $r2;
        org.springframework.core.io.DefaultResourceLoader $r3;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        r1 := @parameter0: org.springframework.core.io.ResourceLoader;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.springframework.core.io.DefaultResourceLoader;

        $r2 = $r3;

        specialinvoke $r3.<org.springframework.core.io.DefaultResourceLoader: void <init>()>();

     label2:
        r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.core.io.ResourceLoader resourceLoader> = $r2;

        return;
    }

    protected java.lang.String resolveCodeWithoutArguments(java.lang.String, java.util.Locale)
    {
        long $l0;
        java.lang.String[] $r1;
        org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder $r7, $r10;
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        byte $b1;
        java.util.Locale r2;
        int i2, i3, $i4;
        java.lang.String r6, r8, $r9, $r11, r12;
        boolean $z0;
        java.util.Iterator $r4;
        java.util.List $r3;
        java.lang.Object $r5;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        r8 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Locale;

        $l0 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: long cacheMillis>;

        $b1 = $l0 cmp 0L;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label1;

        $r10 = virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder getMergedProperties(java.util.Locale)>(r2);

        $r11 = virtualinvoke $r10.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: java.lang.String getProperty(java.lang.String)>(r8);

        if $r11 == null goto label6;

        return $r11;

     label1:
        $r1 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.lang.String[] basenames>;

        i2 = lengthof $r1;

        i3 = 0;

        goto label5;

     label2:
        r12 = $r1[i3];

        $r3 = virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.List calculateAllFilenames(java.lang.String,java.util.Locale)>(r12, r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder getProperties(java.lang.String)>(r6);

        $r9 = virtualinvoke $r7.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: java.lang.String getProperty(java.lang.String)>(r8);

        if $r9 == null goto label4;

        return $r9;

     label4:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        i3 = i3 + 1;

     label5:
        if i3 < i2 goto label2;

     label6:
        return null;
    }

    protected java.text.MessageFormat resolveCode(java.lang.String, java.util.Locale)
    {
        long $l0;
        java.lang.String[] $r1;
        java.text.MessageFormat $r9, $r11;
        org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder $r7, $r10;
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        byte $b1;
        java.util.Locale r2;
        int i2, i3, $i4;
        java.lang.String r6, r8, r12;
        boolean $z0;
        java.util.Iterator $r4;
        java.util.List $r3;
        java.lang.Object $r5;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        r8 := @parameter0: java.lang.String;

        r2 := @parameter1: java.util.Locale;

        $l0 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: long cacheMillis>;

        $b1 = $l0 cmp 0L;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label1;

        $r10 = virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder getMergedProperties(java.util.Locale)>(r2);

        $r11 = virtualinvoke $r10.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: java.text.MessageFormat getMessageFormat(java.lang.String,java.util.Locale)>(r8, r2);

        if $r11 == null goto label6;

        return $r11;

     label1:
        $r1 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.lang.String[] basenames>;

        i2 = lengthof $r1;

        i3 = 0;

        goto label5;

     label2:
        r12 = $r1[i3];

        $r3 = virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.List calculateAllFilenames(java.lang.String,java.util.Locale)>(r12, r2);

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder getProperties(java.lang.String)>(r6);

        $r9 = virtualinvoke $r7.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: java.text.MessageFormat getMessageFormat(java.lang.String,java.util.Locale)>(r8, r2);

        if $r9 == null goto label4;

        return $r9;

     label4:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        i3 = i3 + 1;

     label5:
        if i3 < i2 goto label2;

     label6:
        return null;
    }

    protected org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder getMergedProperties(java.util.Locale)
    {
        java.lang.Throwable $r17;
        java.lang.String[] $r7, $r8;
        org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder $r13, r18, $r20;
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        java.util.Locale r2;
        java.util.Map $r1, $r3, $r16;
        int $i0, $i1, i2, i3, $i5, $i7;
        java.lang.String $r9, r12;
        java.util.Properties $r14, $r15, $r19;
        java.util.List $r10;
        java.lang.Object $r4, $r11;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        r2 := @parameter0: java.util.Locale;

        $r1 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedMergedProperties>;

        entermonitor $r1;

     label01:
        $r3 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedMergedProperties>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r18 = (org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder) $r4;

        if r18 == null goto label03;

        exitmonitor $r1;

     label02:
        return r18;

     label03:
        $r19 = new java.util.Properties;

        specialinvoke $r19.<java.util.Properties: void <init>()>();

        $r20 = new org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder;

        specialinvoke $r20.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: void <init>(org.springframework.context.support.ReloadableResourceBundleMessageSource,java.util.Properties,long)>(r0, $r19, -1L);

        $r7 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.lang.String[] basenames>;

        $i0 = lengthof $r7;

        i2 = $i0 - 1;

        goto label08;

     label04:
        $r8 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.lang.String[] basenames>;

        $r9 = $r8[i2];

        $r10 = virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.List calculateAllFilenames(java.lang.String,java.util.Locale)>($r9, r2);

        $i1 = interfaceinvoke $r10.<java.util.List: int size()>();

        i3 = $i1 - 1;

        goto label07;

     label05:
        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i3);

        r12 = (java.lang.String) $r11;

        $r13 = virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder getProperties(java.lang.String)>(r12);

        $r14 = virtualinvoke $r13.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: java.util.Properties getProperties()>();

        if $r14 == null goto label06;

        $r15 = virtualinvoke $r13.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: java.util.Properties getProperties()>();

        virtualinvoke $r19.<java.util.Properties: void putAll(java.util.Map)>($r15);

     label06:
        $i5 = (int) -1;

        i3 = i3 + $i5;

     label07:
        if i3 >= 0 goto label05;

        $i7 = (int) -1;

        i2 = i2 + $i7;

     label08:
        if i2 >= 0 goto label04;

        $r16 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedMergedProperties>;

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r20);

        exitmonitor $r1;

     label09:
        return $r20;

     label10:
        $r17 := @caughtexception;

        exitmonitor $r1;

     label11:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    protected java.util.List calculateAllFilenames(java.lang.String, java.util.Locale)
    {
        java.lang.Throwable $r17;
        java.util.HashMap $r8;
        java.util.ArrayList $r5;
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        java.util.Locale r6, $r10, $r11;
        java.util.Map $r1, $r3, $r9, r18;
        java.lang.String r2, r15;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r13;
        java.util.List $r7, $r12, r19;
        java.lang.Object $r4, $r14, $r16;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        r2 := @parameter0: java.lang.String;

        r6 := @parameter1: java.util.Locale;

        $r1 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedFilenames>;

        entermonitor $r1;

     label01:
        $r3 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedFilenames>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r18 = (java.util.Map) $r4;

        if r18 == null goto label03;

        $r16 = interfaceinvoke r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r19 = (java.util.List) $r16;

        if r19 == null goto label03;

        exitmonitor $r1;

     label02:
        return r19;

     label03:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>(7);

        $r7 = virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.List calculateFilenamesForLocale(java.lang.String,java.util.Locale)>(r2, r6);

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>($r7);

        $z0 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: boolean fallbackToSystemLocale>;

        if $z0 == 0 goto label06;

        $r10 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $z1 = virtualinvoke r6.<java.util.Locale: boolean equals(java.lang.Object)>($r10);

        if $z1 != 0 goto label06;

        $r11 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $r12 = virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.List calculateFilenamesForLocale(java.lang.String,java.util.Locale)>(r2, $r11);

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

        goto label05;

     label04:
        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r14;

        $z2 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>(r15);

        if $z2 != 0 goto label05;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r15);

     label05:
        $z3 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label04;

     label06:
        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r2);

        if r18 == null goto label07;

        interfaceinvoke r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r5);

        goto label08;

     label07:
        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, $r5);

        $r9 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedFilenames>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r8);

     label08:
        exitmonitor $r1;

     label09:
        return $r5;

     label10:
        $r17 := @caughtexception;

        exitmonitor $r1;

     label11:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label09 with label10;
        catch java.lang.Throwable from label10 to label11 with label10;
    }

    protected java.util.List calculateFilenamesForLocale(java.lang.String, java.util.Locale)
    {
        java.util.ArrayList $r0;
        org.springframework.context.support.ReloadableResourceBundleMessageSource r11;
        java.util.Locale r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r2, $r3, $r4, r6, $r8, $r9, $r10;
        java.lang.StringBuilder $r5, $r7;

        r11 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(3);

        $r2 = virtualinvoke r1.<java.util.Locale: java.lang.String getLanguage()>();

        $r3 = virtualinvoke r1.<java.util.Locale: java.lang.String getCountry()>();

        $r4 = virtualinvoke r1.<java.util.Locale: java.lang.String getVariant()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(r6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>(0, $r10);

     label1:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i1 <= 0 goto label2;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>(0, $r9);

     label2:
        $i2 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i2 <= 0 goto label4;

        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i3 > 0 goto label3;

        $i4 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i4 <= 0 goto label4;

     label3:
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>(0, $r8);

     label4:
        return $r0;
    }

    protected org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder getProperties(java.lang.String)
    {
        java.lang.Throwable $r7;
        long $l0, $l2, $l3, $l4, $l5;
        org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder r5, $r6;
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        byte $b1, $b6;
        java.util.Map $r1, $r3;
        int $i7, $i8;
        java.lang.String r2;
        java.lang.Object $r4;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedProperties>;

        entermonitor $r1;

     label1:
        $r3 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedProperties>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        r5 = (org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder) $r4;

        if r5 == null goto label4;

        $l0 = virtualinvoke r5.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: long getRefreshTimestamp()>();

        $b1 = $l0 cmp 0L;

        $i7 = (int) $b1;

        if $i7 < 0 goto label2;

        $l2 = virtualinvoke r5.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: long getRefreshTimestamp()>();

        $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l4 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: long cacheMillis>;

        $l5 = $l3 - $l4;

        $b6 = $l2 cmp $l5;

        $i8 = (int) $b6;

        if $i8 <= 0 goto label4;

     label2:
        exitmonitor $r1;

     label3:
        return r5;

     label4:
        $r6 = virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder refreshProperties(java.lang.String,org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder)>(r2, r5);

        exitmonitor $r1;

     label5:
        return $r6;

     label6:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    protected org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder refreshProperties(java.lang.String, org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder)
    {
        byte $b1, $b4, $b7;
        java.util.Map $r47;
        org.springframework.core.io.Resource $r7, r43;
        java.lang.StringBuilder $r5, $r12, $r13, $r18, $r19, $r24, $r32, $r33, $r39, $r40, $r48, $r49, $r50, $r51, $r53, $r55;
        long $l0, l2, $l3, $l5, $l6, $l8, l9;
        org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder r42, r46, $r52, $r54, $r56;
        java.lang.String r2, $r4, $r6, $r14, $r20, $r23, $r25, $r31, $r34, $r41;
        java.util.Properties $r44;
        java.io.IOException $r26, $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.springframework.core.io.ResourceLoader $r3, $r22;
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        int $i10, $i11;
        org.apache.commons.logging.Log $r8, $r11, $r15, $r17, $r27, $r30, $r36, $r38;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        r2 := @parameter0: java.lang.String;

        r42 := @parameter1: org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder;

        $l0 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: long cacheMillis>;

        $b1 = $l0 cmp 0L;

        $i10 = (int) $b1;

        if $i10 >= 0 goto label01;

        $l8 = -1L;

        goto label02;

     label01:
        $l8 = staticinvoke <java.lang.System: long currentTimeMillis()>();

     label02:
        l2 = $l8;

        $r3 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.core.io.ResourceLoader resourceLoader>;

        $r48 = new java.lang.StringBuilder;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        specialinvoke $r48.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".properties");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = interfaceinvoke $r3.<org.springframework.core.io.ResourceLoader: org.springframework.core.io.Resource getResource(java.lang.String)>($r6);

        r43 = $r7;

        $z0 = interfaceinvoke $r7.<org.springframework.core.io.Resource: boolean exists()>();

        if $z0 != 0 goto label03;

        $r22 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.core.io.ResourceLoader resourceLoader>;

        $r49 = new java.lang.StringBuilder;

        $r23 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r2);

        specialinvoke $r49.<java.lang.StringBuilder: void <init>(java.lang.String)>($r23);

        $r24 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        r43 = interfaceinvoke $r22.<org.springframework.core.io.ResourceLoader: org.springframework.core.io.Resource getResource(java.lang.String)>($r25);

     label03:
        $z1 = interfaceinvoke r43.<org.springframework.core.io.Resource: boolean exists()>();

        if $z1 == 0 goto label13;

        l9 = -1L;

        $l3 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: long cacheMillis>;

        $b4 = $l3 cmp 0L;

        $i11 = (int) $b4;

        if $i11 < 0 goto label09;

     label04:
        $l5 = interfaceinvoke r43.<org.springframework.core.io.Resource: long lastModified()>();

        l9 = $l5;

        if r42 == null goto label09;

        $l6 = virtualinvoke r42.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: long getFileTimestamp()>();

        $b7 = $l6 cmp $l5;

        if $b7 != 0 goto label09;

        $r15 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r15.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label05;

        $r17 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>(java.lang.String)>("Re-caching properties for filename [");

        $r18 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - file hasn\'t been modified");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r17.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r20);

     label05:
        virtualinvoke r42.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: void setRefreshTimestamp(long)>(l2);

     label06:
        return r42;

     label07:
        $r35 := @caughtexception;

        $r36 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $z5 = interfaceinvoke $r36.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z5 == 0 goto label08;

        $r38 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r43);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" could not be resolved in the file system - assuming that is hasn\'t changed");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r38.<org.apache.commons.logging.Log: void debug(java.lang.Object,java.lang.Throwable)>($r41, $r35);

     label08:
        l9 = -1L;

     label09:
        $r44 = virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Properties loadProperties(org.springframework.core.io.Resource,java.lang.String)>(r43, r2);

        $r52 = new org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder;

        specialinvoke $r52.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: void <init>(org.springframework.context.support.ReloadableResourceBundleMessageSource,java.util.Properties,long)>(r0, $r44, l9);

        r46 = $r52;

     label10:
        goto label15;

     label11:
        $r26 := @caughtexception;

        $r27 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $z4 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isWarnEnabled()>();

        if $z4 == 0 goto label12;

        $r30 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not parse properties file [");

        $r31 = interfaceinvoke r43.<org.springframework.core.io.Resource: java.lang.String getFilename()>();

        $r32 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r30.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r34, $r26);

     label12:
        $r54 = new org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder;

        specialinvoke $r54.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: void <init>(org.springframework.context.support.ReloadableResourceBundleMessageSource)>(r0);

        r46 = $r54;

        goto label15;

     label13:
        $r8 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r8.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label14;

        $r11 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>(java.lang.String)>("No properties file found for [");

        $r12 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - neither plain properties nor XML");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r14);

     label14:
        $r56 = new org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder;

        specialinvoke $r56.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: void <init>(org.springframework.context.support.ReloadableResourceBundleMessageSource)>(r0);

        r46 = $r56;

     label15:
        virtualinvoke r46.<org.springframework.context.support.ReloadableResourceBundleMessageSource$PropertiesHolder: void setRefreshTimestamp(long)>(l2);

        $r47 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedProperties>;

        interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r46);

        return r46;

        catch java.io.IOException from label04 to label06 with label07;
        catch java.io.IOException from label09 to label10 with label11;
    }

    protected java.util.Properties loadProperties(org.springframework.core.io.Resource, java.lang.String) throws java.io.IOException
    {
        org.springframework.core.io.Resource r0;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.util.PropertiesPersister $r7, $r16, $r28;
        java.lang.StringBuilder $r8, $r11, $r12, $r17, $r20, $r21, $r22, $r23, $r29, $r32, $r33;
        java.lang.Throwable $r35;
        org.springframework.context.support.ReloadableResourceBundleMessageSource r4;
        java.lang.String $r3, $r10, $r13, $r19, $r24, r25, $r31, $r34, r36;
        java.util.Properties $r2, $r5, $r26;
        java.io.InputStreamReader $r15;
        org.apache.commons.logging.Log $r6, $r9, $r14, $r18, $r27, $r30;
        java.io.InputStream $r1;

        r4 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        r0 := @parameter0: org.springframework.core.io.Resource;

        r25 := @parameter1: java.lang.String;

        $r1 = interfaceinvoke r0.<org.springframework.core.io.Resource: java.io.InputStream getInputStream()>();

        $r2 = new java.util.Properties;

        specialinvoke $r2.<java.util.Properties: void <init>()>();

     label01:
        $r3 = interfaceinvoke r0.<org.springframework.core.io.Resource: java.lang.String getFilename()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>(".xml");

        if $z0 == 0 goto label03;

        $r27 = r4.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r27.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label02;

        $r30 = r4.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("Loading properties [");

        $r31 = interfaceinvoke r0.<org.springframework.core.io.Resource: java.lang.String getFilename()>();

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r30.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r34);

     label02:
        $r28 = r4.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.util.PropertiesPersister propertiesPersister>;

        interfaceinvoke $r28.<org.springframework.util.PropertiesPersister: void loadFromXml(java.util.Properties,java.io.InputStream)>($r2, $r1);

        goto label09;

     label03:
        r36 = null;

        $r5 = r4.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Properties fileEncodings>;

        if $r5 == null goto label04;

        $r26 = r4.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Properties fileEncodings>;

        r36 = virtualinvoke $r26.<java.util.Properties: java.lang.String getProperty(java.lang.String)>(r25);

     label04:
        if r36 != null goto label05;

        r36 = r4.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.lang.String defaultEncoding>;

     label05:
        if r36 == null goto label07;

        $r14 = r4.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r14.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label06;

        $r18 = r4.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("Loading properties [");

        $r19 = interfaceinvoke r0.<org.springframework.core.io.Resource: java.lang.String getFilename()>();

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] with encoding \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r24);

     label06:
        $r16 = r4.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.util.PropertiesPersister propertiesPersister>;

        $r15 = new java.io.InputStreamReader;

        specialinvoke $r15.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>($r1, r36);

        interfaceinvoke $r16.<org.springframework.util.PropertiesPersister: void load(java.util.Properties,java.io.Reader)>($r2, $r15);

        goto label09;

     label07:
        $r6 = r4.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r6.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label08;

        $r9 = r4.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Loading properties [");

        $r10 = interfaceinvoke r0.<org.springframework.core.io.Resource: java.lang.String getFilename()>();

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label08:
        $r7 = r4.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.util.PropertiesPersister propertiesPersister>;

        interfaceinvoke $r7.<org.springframework.util.PropertiesPersister: void load(java.util.Properties,java.io.InputStream)>($r2, $r1);

     label09:
        virtualinvoke $r1.<java.io.InputStream: void close()>();

        return $r2;

     label10:
        $r35 := @caughtexception;

        virtualinvoke $r1.<java.io.InputStream: void close()>();

        throw $r35;

        catch java.lang.Throwable from label01 to label09 with label10;
    }

    public void clearCache()
    {
        java.lang.Throwable $r6, $r7;
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0;
        java.util.Map $r2, $r3, $r4, $r5;
        org.apache.commons.logging.Log $r1;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        $r1 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Clearing entire resource bundle cache");

        $r2 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedProperties>;

        entermonitor $r2;

     label01:
        $r3 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedProperties>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        exitmonitor $r2;

     label02:
        goto label05;

     label03:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label04:
        throw $r7;

     label05:
        $r4 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedMergedProperties>;

        entermonitor $r4;

     label06:
        $r5 = r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.util.Map cachedMergedProperties>;

        interfaceinvoke $r5.<java.util.Map: void clear()>();

        exitmonitor $r4;

     label07:
        goto label10;

     label08:
        $r6 := @caughtexception;

        exitmonitor $r4;

     label09:
        throw $r6;

     label10:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    public void clearCacheIncludingAncestors()
    {
        org.springframework.context.support.ReloadableResourceBundleMessageSource r0, $r3;
        org.springframework.context.MessageSource $r1, $r2;
        boolean $z0;

        r0 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: void clearCache()>();

        $r1 = virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.context.MessageSource getParentMessageSource()>();

        $z0 = $r1 instanceof org.springframework.context.support.ReloadableResourceBundleMessageSource;

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<org.springframework.context.support.ReloadableResourceBundleMessageSource: org.springframework.context.MessageSource getParentMessageSource()>();

        $r3 = (org.springframework.context.support.ReloadableResourceBundleMessageSource) $r2;

        virtualinvoke $r3.<org.springframework.context.support.ReloadableResourceBundleMessageSource: void clearCacheIncludingAncestors()>();

     label1:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.String[] $r6;
        org.springframework.context.support.ReloadableResourceBundleMessageSource r1;
        java.lang.StringBuilder $r0, $r5, $r8, $r9;
        java.lang.Class $r2;
        java.lang.String $r3, $r4, $r7, $r10;

        r1 := @this: org.springframework.context.support.ReloadableResourceBundleMessageSource;

        $r0 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": basenames=[");

        $r6 = r1.<org.springframework.context.support.ReloadableResourceBundleMessageSource: java.lang.String[] basenames>;

        $r7 = staticinvoke <org.springframework.util.StringUtils: java.lang.String arrayToCommaDelimitedString(java.lang.Object[])>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public static void <clinit>()
    {
        <org.springframework.context.support.ReloadableResourceBundleMessageSource: java.lang.String XML_SUFFIX> = ".xml";

        <org.springframework.context.support.ReloadableResourceBundleMessageSource: java.lang.String PROPERTIES_SUFFIX> = ".properties";

        return;
    }
}
