final class org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1 extends java.lang.Object implements org.waveprotocol.wave.model.adt.docbased.Factory
{

    void <init>()
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1 r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.model.conversation.ObservableManifestThread adapt(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread $r2;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1 r3;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r0;

        r3 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread create(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public org.waveprotocol.wave.model.adt.docbased.Initializer createInitializer(org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$ThreadInitialiser)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1 r8;
        org.waveprotocol.wave.model.util.Serializer $r4, $r6;
        org.waveprotocol.wave.model.adt.docbased.Initializer $r5, $r7;
        org.waveprotocol.wave.model.adt.docbased.CompoundInitializer $r0;
        org.waveprotocol.wave.model.adt.docbased.Initializer[] $r1;
        java.lang.Boolean $r9;
        java.lang.String $r3;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$ThreadInitialiser r2;
        boolean $z0;

        r8 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1;

        r2 := @parameter0: org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$ThreadInitialiser;

        $r0 = new org.waveprotocol.wave.model.adt.docbased.CompoundInitializer;

        $r1 = newarray (org.waveprotocol.wave.model.adt.docbased.Initializer)[2];

        $r4 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer STRING>;

        $r3 = r2.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$ThreadInitialiser: java.lang.String id>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicValue: org.waveprotocol.wave.model.adt.docbased.Initializer createInitialiser(org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.Object)>($r4, "id", $r3);

        $r1[0] = $r5;

        $r6 = <org.waveprotocol.wave.model.util.Serializer: org.waveprotocol.wave.model.util.Serializer BOOLEAN>;

        $z0 = r2.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$ThreadInitialiser: boolean isInline>;

        if $z0 == 0 goto label1;

        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        goto label2;

     label1:
        $r9 = null;

     label2:
        $r7 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.DocumentBasedBasicValue: org.waveprotocol.wave.model.adt.docbased.Initializer createInitialiser(org.waveprotocol.wave.model.util.Serializer,java.lang.String,java.lang.Object)>($r6, "inline", $r9);

        $r1[1] = $r7;

        specialinvoke $r0.<org.waveprotocol.wave.model.adt.docbased.CompoundInitializer: void <init>(org.waveprotocol.wave.model.adt.docbased.Initializer[])>($r1);

        return $r0;
    }

    public volatile org.waveprotocol.wave.model.adt.docbased.Initializer createInitializer(java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1 r0;
        org.waveprotocol.wave.model.adt.docbased.Initializer $r3;
        java.lang.Object r1;
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$ThreadInitialiser $r2;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$ThreadInitialiser) r1;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1: org.waveprotocol.wave.model.adt.docbased.Initializer createInitializer(org.waveprotocol.wave.model.conversation.DocumentBasedManifestBlip$ThreadInitialiser)>($r2);

        return $r3;
    }

    public volatile java.lang.Object adapt(org.waveprotocol.wave.model.document.util.DocumentEventRouter, java.lang.Object)
    {
        org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1 r0;
        java.lang.Object r2;
        org.waveprotocol.wave.model.conversation.ObservableManifestThread $r3;
        org.waveprotocol.wave.model.document.util.DocumentEventRouter r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocumentEventRouter;

        r2 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.conversation.DocumentBasedManifestThread$1: org.waveprotocol.wave.model.conversation.ObservableManifestThread adapt(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object)>(r1, r2);

        return $r3;
    }
}
