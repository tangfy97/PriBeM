public class com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso extends java.lang.Object implements com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest
{
    private com.hp.hpl.jena.sparql.util.NodeIsomorphismMap mapping;
    private com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest literalTest;

    public void <init>(com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest)
    {
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap $r1;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest r2;
        com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso;

        r2 := @parameter0: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.hp.hpl.jena.sparql.util.NodeIsomorphismMap;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.util.NodeIsomorphismMap: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap mapping> = $r1;

        r0.<com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest literalTest> = r2;

        return;
    }

    public boolean equal(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso r2;
        com.hp.hpl.jena.graph.Node r0, r1;
        com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest $r4;
        com.hp.hpl.jena.sparql.util.NodeIsomorphismMap $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r2 := @this: com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        if r1 != null goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        if r1 != null goto label3;

        return 0;

     label3:
        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z0 == 0 goto label4;

        $z7 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isURI()>();

        if $z7 == 0 goto label4;

        $z8 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r1);

        return $z8;

     label4:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z1 == 0 goto label5;

        $z5 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z5 == 0 goto label5;

        $r4 = r2.<com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso: com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest literalTest>;

        $z6 = interfaceinvoke $r4.<com.hp.hpl.jena.sparql.util.NodeUtils$EqualityTest: boolean equal(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, r1);

        return $z6;

     label5:
        $z2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z2 == 0 goto label6;

        $z3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: boolean isBlank()>();

        if $z3 == 0 goto label6;

        $r3 = r2.<com.hp.hpl.jena.sparql.resultset.ResultSetCompare$BNodeIso: com.hp.hpl.jena.sparql.util.NodeIsomorphismMap mapping>;

        $z4 = virtualinvoke $r3.<com.hp.hpl.jena.sparql.util.NodeIsomorphismMap: boolean makeIsomorphic(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, r1);

        return $z4;

     label6:
        return 0;
    }
}
