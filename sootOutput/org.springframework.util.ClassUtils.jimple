public abstract class org.springframework.util.ClassUtils extends java.lang.Object
{
    public static final java.lang.String ARRAY_SUFFIX;
    private static final java.lang.String INTERNAL_ARRAY_PREFIX;
    private static final java.lang.String NON_PRIMITIVE_ARRAY_PREFIX;
    private static final char PACKAGE_SEPARATOR;
    private static final char INNER_CLASS_SEPARATOR;
    public static final java.lang.String CGLIB_CLASS_SEPARATOR;
    public static final java.lang.String CLASS_FILE_SUFFIX;
    private static final java.util.Map primitiveWrapperTypeMap;
    private static final java.util.Map primitiveTypeToWrapperMap;
    private static final java.util.Map primitiveTypeNameMap;
    private static final java.util.Map commonClassCache;

    static void <clinit>()
    {
        java.util.Map $r5, $r7, $r9, $r11, $r13, $r15, $r17, $r19, $r20, $r24, $r33, $r41;
        boolean $z0, $z1;
        java.util.Collection $r34, $r37;
        java.util.Set $r21;
        java.util.List $r36;
        java.util.HashMap $r0, $r1, $r2, $r3;
        java.util.HashSet $r32;
        java.lang.String $r42;
        java.util.Map$Entry r46;
        java.util.Iterator $r22, $r39;
        java.lang.Class[] $r29, $r35, $r43, $r44, $r45;
        java.lang.Class $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r26, $r28, $r31, $r38, r47;
        java.lang.Object $r23, $r25, $r27, $r30, $r40;

        <org.springframework.util.ClassUtils: java.lang.String CLASS_FILE_SUFFIX> = ".class";

        <org.springframework.util.ClassUtils: java.lang.String CGLIB_CLASS_SEPARATOR> = "$$";

        <org.springframework.util.ClassUtils: char INNER_CLASS_SEPARATOR> = 36;

        <org.springframework.util.ClassUtils: char PACKAGE_SEPARATOR> = 46;

        <org.springframework.util.ClassUtils: java.lang.String NON_PRIMITIVE_ARRAY_PREFIX> = "[L";

        <org.springframework.util.ClassUtils: java.lang.String INTERNAL_ARRAY_PREFIX> = "[";

        <org.springframework.util.ClassUtils: java.lang.String ARRAY_SUFFIX> = "[]";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>(int)>(8);

        <org.springframework.util.ClassUtils: java.util.Map primitiveWrapperTypeMap> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>(int)>(8);

        <org.springframework.util.ClassUtils: java.util.Map primitiveTypeToWrapperMap> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(int)>(32);

        <org.springframework.util.ClassUtils: java.util.Map primitiveTypeNameMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>(int)>(32);

        <org.springframework.util.ClassUtils: java.util.Map commonClassCache> = $r3;

        $r5 = <org.springframework.util.ClassUtils: java.util.Map primitiveWrapperTypeMap>;

        $r4 = <java.lang.Boolean: java.lang.Class TYPE>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Boolean;", $r4);

        $r7 = <org.springframework.util.ClassUtils: java.util.Map primitiveWrapperTypeMap>;

        $r6 = <java.lang.Byte: java.lang.Class TYPE>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Byte;", $r6);

        $r9 = <org.springframework.util.ClassUtils: java.util.Map primitiveWrapperTypeMap>;

        $r8 = <java.lang.Character: java.lang.Class TYPE>;

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Character;", $r8);

        $r11 = <org.springframework.util.ClassUtils: java.util.Map primitiveWrapperTypeMap>;

        $r10 = <java.lang.Double: java.lang.Class TYPE>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Double;", $r10);

        $r13 = <org.springframework.util.ClassUtils: java.util.Map primitiveWrapperTypeMap>;

        $r12 = <java.lang.Float: java.lang.Class TYPE>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Float;", $r12);

        $r15 = <org.springframework.util.ClassUtils: java.util.Map primitiveWrapperTypeMap>;

        $r14 = <java.lang.Integer: java.lang.Class TYPE>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Integer;", $r14);

        $r17 = <org.springframework.util.ClassUtils: java.util.Map primitiveWrapperTypeMap>;

        $r16 = <java.lang.Long: java.lang.Class TYPE>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Long;", $r16);

        $r19 = <org.springframework.util.ClassUtils: java.util.Map primitiveWrapperTypeMap>;

        $r18 = <java.lang.Short: java.lang.Class TYPE>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(class "Ljava/lang/Short;", $r18);

        $r20 = <org.springframework.util.ClassUtils: java.util.Map primitiveWrapperTypeMap>;

        $r21 = interfaceinvoke $r20.<java.util.Map: java.util.Set entrySet()>();

        $r22 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r23 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r46 = (java.util.Map$Entry) $r23;

        $r24 = <org.springframework.util.ClassUtils: java.util.Map primitiveTypeToWrapperMap>;

        $r25 = interfaceinvoke r46.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r26 = (java.lang.Class) $r25;

        $r27 = interfaceinvoke r46.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r28 = (java.lang.Class) $r27;

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, $r28);

        $r29 = newarray (java.lang.Class)[1];

        $r30 = interfaceinvoke r46.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r31 = (java.lang.Class) $r30;

        $r29[0] = $r31;

        staticinvoke <org.springframework.util.ClassUtils: void registerCommonClasses(java.lang.Class[])>($r29);

     label2:
        $z0 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r32 = new java.util.HashSet;

        specialinvoke $r32.<java.util.HashSet: void <init>(int)>(32);

        $r33 = <org.springframework.util.ClassUtils: java.util.Map primitiveWrapperTypeMap>;

        $r34 = interfaceinvoke $r33.<java.util.Map: java.util.Collection values()>();

        interfaceinvoke $r32.<java.util.Set: boolean addAll(java.util.Collection)>($r34);

        $r35 = newarray (java.lang.Class)[8];

        $r35[0] = class "[Z";

        $r35[1] = class "[B";

        $r35[2] = class "[C";

        $r35[3] = class "[D";

        $r35[4] = class "[F";

        $r35[5] = class "[I";

        $r35[6] = class "[J";

        $r35[7] = class "[S";

        $r36 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r35);

        $r37 = (java.util.Collection) $r36;

        interfaceinvoke $r32.<java.util.Set: boolean addAll(java.util.Collection)>($r37);

        $r38 = <java.lang.Void: java.lang.Class TYPE>;

        interfaceinvoke $r32.<java.util.Set: boolean add(java.lang.Object)>($r38);

        $r39 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r40 = interfaceinvoke $r39.<java.util.Iterator: java.lang.Object next()>();

        r47 = (java.lang.Class) $r40;

        $r41 = <org.springframework.util.ClassUtils: java.util.Map primitiveTypeNameMap>;

        $r42 = virtualinvoke r47.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r41.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r42, r47);

     label4:
        $z1 = interfaceinvoke $r39.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label3;

        $r43 = newarray (java.lang.Class)[8];

        $r43[0] = class "[Ljava/lang/Boolean;";

        $r43[1] = class "[Ljava/lang/Byte;";

        $r43[2] = class "[Ljava/lang/Character;";

        $r43[3] = class "[Ljava/lang/Double;";

        $r43[4] = class "[Ljava/lang/Float;";

        $r43[5] = class "[Ljava/lang/Integer;";

        $r43[6] = class "[Ljava/lang/Long;";

        $r43[7] = class "[Ljava/lang/Short;";

        staticinvoke <org.springframework.util.ClassUtils: void registerCommonClasses(java.lang.Class[])>($r43);

        $r44 = newarray (java.lang.Class)[8];

        $r44[0] = class "Ljava/lang/Number;";

        $r44[1] = class "[Ljava/lang/Number;";

        $r44[2] = class "Ljava/lang/String;";

        $r44[3] = class "[Ljava/lang/String;";

        $r44[4] = class "Ljava/lang/Object;";

        $r44[5] = class "[Ljava/lang/Object;";

        $r44[6] = class "Ljava/lang/Class;";

        $r44[7] = class "[Ljava/lang/Class;";

        staticinvoke <org.springframework.util.ClassUtils: void registerCommonClasses(java.lang.Class[])>($r44);

        $r45 = newarray (java.lang.Class)[6];

        $r45[0] = class "Ljava/lang/Throwable;";

        $r45[1] = class "Ljava/lang/Exception;";

        $r45[2] = class "Ljava/lang/RuntimeException;";

        $r45[3] = class "Ljava/lang/Error;";

        $r45[4] = class "Ljava/lang/StackTraceElement;";

        $r45[5] = class "[Ljava/lang/StackTraceElement;";

        staticinvoke <org.springframework.util.ClassUtils: void registerCommonClasses(java.lang.Class[])>($r45);

        return;
    }

    public void <init>()
    {
        org.springframework.util.ClassUtils r0;

        r0 := @this: org.springframework.util.ClassUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static transient void registerCommonClasses(java.lang.Class[])
    {
        java.util.Map $r2;
        int i0, i1;
        java.lang.Class[] r0;
        java.lang.Class r1;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.Class[];

        i0 = lengthof r0;

        i1 = 0;

        goto label2;

     label1:
        r1 = r0[i1];

        $r2 = <org.springframework.util.ClassUtils: java.util.Map commonClassCache>;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return;
    }

    public static java.lang.ClassLoader getDefaultClassLoader()
    {
        java.lang.Throwable $r2;
        java.lang.Thread $r0;
        java.lang.Class $r1;
        java.lang.ClassLoader r3;

        r3 = null;

     label1:
        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r3 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        if r3 != null goto label5;

        $r1 = class "Lorg/springframework/util/ClassUtils;";

        r3 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

     label5:
        return r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.ClassLoader overrideThreadContextClassLoader(java.lang.ClassLoader)
    {
        java.lang.Thread $r0;
        java.lang.ClassLoader $r1, r2;
        boolean $z0;

        r2 := @parameter0: java.lang.ClassLoader;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = virtualinvoke $r0.<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>();

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        virtualinvoke $r0.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r2);

        return $r1;

     label1:
        return null;
    }

    public static java.lang.Class forName(java.lang.String) throws java.lang.ClassNotFoundException, java.lang.LinkageError
    {
        java.lang.Class $r2;
        java.lang.String r0;
        java.lang.ClassLoader $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>(r0, $r1);

        return $r2;
    }

    public static java.lang.Class forName(java.lang.String, java.lang.ClassLoader) throws java.lang.ClassNotFoundException, java.lang.LinkageError
    {
        java.util.Map $r19;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r26, $r28, $r33;
        java.lang.ClassLoader r2, r32;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        java.lang.String r0, $r4, $r5, $r9, $r10, $r14, $r15, $r24, $r25, $r27, $r29;
        java.lang.Class $r1, $r3, $r6, $r8, $r11, $r13, $r16, $r18, $r30, r31;
        java.lang.Object $r7, $r12, $r17, $r20;
        java.lang.ClassNotFoundException $r21, $r22;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.ClassLoader;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Name must not be null");

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class resolvePrimitiveClassName(java.lang.String)>(r0);

        r31 = $r1;

        if $r1 != null goto label01;

        $r19 = <org.springframework.util.ClassUtils: java.util.Map commonClassCache>;

        $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r31 = (java.lang.Class) $r20;

     label01:
        if r31 == null goto label02;

        return r31;

     label02:
        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("[]");

        if $z0 == 0 goto label03;

        $i4 = virtualinvoke r0.<java.lang.String: int length()>();

        $r14 = "[]";

        $i5 = virtualinvoke $r14.<java.lang.String: int length()>();

        $i6 = $i4 - $i5;

        $r15 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i6);

        $r16 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>($r15, r2);

        $r17 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r16, 0);

        $r18 = virtualinvoke $r17.<java.lang.Object: java.lang.Class getClass()>();

        return $r18;

     label03:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("[L");

        if $z1 == 0 goto label04;

        $z3 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(";");

        if $z3 == 0 goto label04;

        $r9 = "[L";

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        $i3 = $i2 - 1;

        $r10 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i1, $i3);

        $r11 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>($r10, r2);

        $r12 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r11, 0);

        $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();

        return $r13;

     label04:
        $z2 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z2 == 0 goto label05;

        $r4 = "[";

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i0);

        $r6 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>($r5, r2);

        $r7 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r6, 0);

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        return $r8;

     label05:
        r32 = r2;

        if r2 != null goto label06;

        r32 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

     label06:
        $r3 = virtualinvoke r32.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r0);

     label07:
        return $r3;

     label08:
        $r22 := @caughtexception;

        $i7 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        $i10 = (int) -1;

        if $i7 == $i10 goto label12;

        $r33 = new java.lang.StringBuilder;

        $r24 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i7);

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r24);

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>($r25);

        $r26 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(36);

        $i8 = $i7 + 1;

        $r27 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i8);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

     label09:
        $r30 = virtualinvoke r32.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r29);

     label10:
        return $r30;

     label11:
        $r21 := @caughtexception;

     label12:
        throw $r22;

        catch java.lang.ClassNotFoundException from label06 to label07 with label08;
        catch java.lang.ClassNotFoundException from label09 to label10 with label11;
    }

    public static java.lang.Class resolveClassName(java.lang.String, java.lang.ClassLoader) throws java.lang.IllegalArgumentException
    {
        java.lang.LinkageError $r3;
        java.lang.IllegalArgumentException $r4, $r10;
        java.lang.Class $r2;
        java.lang.StringBuilder $r5, $r6, $r7, $r11, $r12, $r13;
        java.lang.ClassNotFoundException $r9;
        java.lang.String r0, $r8, $r14;
        java.lang.ClassLoader r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

     label1:
        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>(r0, r1);

     label2:
        return $r2;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Cannot find class [");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r14, $r9);

        throw $r10;

     label4:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Error loading class [");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: problem with class file or dependent class.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r3);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.LinkageError from label1 to label2 with label4;
    }

    public static java.lang.Class resolvePrimitiveClassName(java.lang.String)
    {
        java.util.Map $r1;
        int $i0;
        java.lang.Object $r2;
        java.lang.Class r3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r3 = null;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 > 8 goto label1;

        $r1 = <org.springframework.util.ClassUtils: java.util.Map primitiveTypeNameMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.Class) $r2;

     label1:
        return r3;
    }

    public static boolean isPresent(java.lang.String)
    {
        java.lang.String r0;
        java.lang.ClassLoader $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>();

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isPresent(java.lang.String,java.lang.ClassLoader)>(r0, $r1);

        return $z0;
    }

    public static boolean isPresent(java.lang.String, java.lang.ClassLoader)
    {
        java.lang.Throwable $r2;
        java.lang.String r0;
        java.lang.ClassLoader r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.ClassLoader;

     label1:
        staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>(r0, r1);

     label2:
        return 1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static java.lang.Class getUserClass(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1, $r2;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Instance must not be null");

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class getUserClass(java.lang.Class)>($r1);

        return $r2;
    }

    public static java.lang.Class getUserClass(java.lang.Class)
    {
        java.lang.Class r0, $r2, $r3;
        java.lang.String $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("$$");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r2 == null goto label1;

        $r3 = class "Ljava/lang/Object;";

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        return $r2;

     label1:
        return r0;
    }

    public static boolean isCacheSafe(java.lang.Class, java.lang.ClassLoader)
    {
        java.lang.Class r0;
        java.lang.ClassLoader $r1, r2, $r3, r4;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.ClassLoader;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        r4 = r2;

        if r2 != $r1 goto label3;

        return 1;

     label2:
        $r3 = virtualinvoke r4.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        r4 = $r3;

        if $r3 != $r1 goto label3;

        return 1;

     label3:
        if r4 != null goto label2;

        return 0;
    }

    public static java.lang.String getShortName(java.lang.String)
    {
        int $i0, $i1, $i2, i3, $i5;
        java.lang.String r0, $r1, $r2;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasLength(java.lang.String,java.lang.String)>(r0, "Class name must not be empty");

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        $i1 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>("$$");

        i3 = $i1;

        $i5 = (int) -1;

        if $i1 != $i5 goto label1;

        i3 = virtualinvoke r0.<java.lang.String: int length()>();

     label1:
        $i2 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i2, i3);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(36, 46);

        return $r2;
    }

    public static java.lang.String getShortName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedName(java.lang.Class)>(r0);

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.String)>($r1);

        return $r2;
    }

    public static java.lang.String getShortNameAsProperty(java.lang.Class)
    {
        int $i0, $i1, $i3;
        java.lang.Class r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getShortName(java.lang.Class)>(r0);

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $i1 = $i0 + 1;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        goto label2;

     label1:
        $r3 = $r1;

     label2:
        $r2 = staticinvoke <java.beans.Introspector: java.lang.String decapitalize(java.lang.String)>($r3);

        return $r2;
    }

    public static java.lang.String getClassFileName(java.lang.Class)
    {
        int $i0, $i1;
        java.lang.Class r0;
        java.lang.StringBuilder $r2, $r5;
        java.lang.String $r1, $r3, $r4, $r6;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        $r2 = new java.lang.StringBuilder;

        $i1 = $i0 + 1;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String getPackageName(java.lang.Class)
    {
        int $i0, $i2;
        java.lang.Class r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        $i2 = (int) -1;

        if $i0 == $i2 goto label1;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        goto label2;

     label1:
        $r2 = "";

     label2:
        return $r2;
    }

    public static java.lang.String getQualifiedName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedNameForArray(java.lang.Class)>(r0);

        return $r2;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        return $r1;
    }

    private static java.lang.String getQualifiedNameForArray(java.lang.Class)
    {
        java.lang.StringBuilder $r0;
        java.lang.Class r3;
        java.lang.String $r1, $r2;
        boolean $z0;

        r3 := @parameter0: java.lang.Class;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        goto label2;

     label1:
        r3 = virtualinvoke r3.<java.lang.Class: java.lang.Class getComponentType()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

     label2:
        $z0 = virtualinvoke r3.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, $r1);

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String getQualifiedMethodName(java.lang.reflect.Method)
    {
        java.lang.StringBuilder $r1, $r5, $r7;
        java.lang.Class $r2;
        java.lang.String $r3, $r4, $r6, $r8;
        java.lang.reflect.Method r0;

        r0 := @parameter0: java.lang.reflect.Method;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Method must not be null");

        $r1 = new java.lang.StringBuilder;

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r6 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static java.lang.String getDescriptiveType(java.lang.Object)
    {
        int $i0, $i1, i2, $i3;
        java.lang.String $r2, $r3, $r5, $r8, $r9;
        boolean $z0, $z1;
        java.lang.Class[] $r6;
        java.lang.Object r0;
        java.lang.Class $r1, $r7;
        java.lang.StringBuilder $r4;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>($r1);

        if $z0 == 0 goto label5;

        $r4 = new java.lang.StringBuilder;

        $r5 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" implementing ");

        $r6 = virtualinvoke $r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i2 = 0;

        goto label4;

     label2:
        $r7 = $r6[i2];

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $i0 = lengthof $r6;

        $i1 = $i0 - 1;

        if i2 >= $i1 goto label3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label3:
        i2 = i2 + 1;

     label4:
        $i3 = lengthof $r6;

        if i2 < $i3 goto label2;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label5:
        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z1 == 0 goto label6;

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedNameForArray(java.lang.Class)>($r1);

        return $r3;

     label6:
        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public static boolean matchesTypeName(java.lang.Class, java.lang.String)
    {
        java.lang.Class r1;
        java.lang.String r0, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r1 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.String;

        if r0 == null goto label2;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getSimpleName()>();

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<java.lang.Class: boolean isArray()>();

        if $z2 == 0 goto label2;

        $r4 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedNameForArray(java.lang.Class)>(r1);

        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z3 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static transient boolean hasConstructor(java.lang.Class, java.lang.Class[])
    {
        java.lang.Class[] r1;
        java.lang.Class r0;
        java.lang.reflect.Constructor $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.reflect.Constructor getConstructorIfAvailable(java.lang.Class,java.lang.Class[])>(r0, r1);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public static transient java.lang.reflect.Constructor getConstructorIfAvailable(java.lang.Class, java.lang.Class[])
    {
        java.lang.NoSuchMethodException $r3;
        java.lang.Class[] r1;
        java.lang.Class r0;
        java.lang.reflect.Constructor $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class[];

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static transient boolean hasMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.Class[] r2;
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Method $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.reflect.Method getMethodIfAvailable(java.lang.Class,java.lang.String,java.lang.Class[])>(r0, r1, r2);

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public static transient java.lang.reflect.Method getMethodIfAvailable(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.NoSuchMethodException $r4;
        java.lang.Class[] r2;
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Method $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Method name must not be null");

     label1:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    public static int getMethodCountForName(java.lang.Class, java.lang.String)
    {
        java.lang.reflect.Method[] $r2;
        int $i0, $i1, i2, i3, i4, i5, i6;
        java.lang.String r1, $r3;
        java.lang.reflect.Method r7;
        boolean $z0;
        java.lang.Class[] $r4;
        java.lang.Class r0, $r5, $r6, r8;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Method name must not be null");

        i2 = 0;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i3 = lengthof $r2;

        i4 = 0;

        goto label3;

     label1:
        r7 = $r2[i4];

        $r3 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        i2 = i2 + 1;

     label2:
        i4 = i4 + 1;

     label3:
        if i4 < i3 goto label1;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i5 = lengthof $r4;

        i6 = 0;

        goto label5;

     label4:
        r8 = $r4[i6];

        $i0 = staticinvoke <org.springframework.util.ClassUtils: int getMethodCountForName(java.lang.Class,java.lang.String)>(r8, r1);

        i2 = i2 + $i0;

        i6 = i6 + 1;

     label5:
        if i6 < i5 goto label4;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r5 == null goto label6;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $i1 = staticinvoke <org.springframework.util.ClassUtils: int getMethodCountForName(java.lang.Class,java.lang.String)>($r6, r1);

        i2 = i2 + $i1;

     label6:
        return i2;
    }

    public static boolean hasAtLeastOneMethodWithName(java.lang.Class, java.lang.String)
    {
        java.lang.reflect.Method[] $r2;
        int i0, i1, i2, i3;
        java.lang.String r1, $r3;
        java.lang.reflect.Method r7;
        boolean $z0, $z1, $z2;
        java.lang.Class[] $r4;
        java.lang.Class r0, $r5, $r6, r8;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Method name must not be null");

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i0 = lengthof $r2;

        i1 = 0;

        goto label3;

     label1:
        r7 = $r2[i1];

        $r3 = virtualinvoke r7.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

     label3:
        if i1 < i0 goto label1;

        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i2 = lengthof $r4;

        i3 = 0;

        goto label6;

     label4:
        r8 = $r4[i3];

        $z1 = staticinvoke <org.springframework.util.ClassUtils: boolean hasAtLeastOneMethodWithName(java.lang.Class,java.lang.String)>(r8, r1);

        if $z1 == 0 goto label5;

        return 1;

     label5:
        i3 = i3 + 1;

     label6:
        if i3 < i2 goto label4;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        if $r5 == null goto label7;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.Class getSuperclass()>();

        $z2 = staticinvoke <org.springframework.util.ClassUtils: boolean hasAtLeastOneMethodWithName(java.lang.Class,java.lang.String)>($r6, r1);

        if $z2 == 0 goto label7;

        return 1;

     label7:
        return 0;
    }

    public static java.lang.reflect.Method getMostSpecificMethod(java.lang.reflect.Method, java.lang.Class)
    {
        java.lang.Class[] $r4;
        java.lang.Class r1, $r2;
        java.lang.String $r3;
        java.lang.reflect.Method r0, r5, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Class;

        r5 = null;

        if r0 == null goto label1;

        $z0 = staticinvoke <org.springframework.util.ClassUtils: boolean isOverridable(java.lang.reflect.Method,java.lang.Class)>(r0, r1);

        if $z0 == 0 goto label1;

        if r1 == null goto label1;

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z1 != 0 goto label1;

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r4 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r5 = staticinvoke <org.springframework.util.ReflectionUtils: java.lang.reflect.Method findMethod(java.lang.Class,java.lang.String,java.lang.Class[])>(r1, $r3, $r4);

     label1:
        if r5 == null goto label2;

        $r6 = r5;

        goto label3;

     label2:
        $r6 = r0;

     label3:
        return $r6;
    }

    private static boolean isOverridable(java.lang.reflect.Method, java.lang.Class)
    {
        int $i0, $i1, $i2;
        java.lang.Class $r1, r3;
        java.lang.String $r2, $r4;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.reflect.Method;

        r3 := @parameter1: java.lang.Class;

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>($i0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i1 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z1 != 0 goto label2;

        $i2 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>($i2);

        if $z2 == 0 goto label3;

     label2:
        return 1;

     label3:
        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getPackageName(java.lang.Class)>($r1);

        $r4 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getPackageName(java.lang.Class)>(r3);

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z3;
    }

    public static transient java.lang.reflect.Method getStaticMethod(java.lang.Class, java.lang.String, java.lang.Class[])
    {
        java.lang.NoSuchMethodException $r4;
        java.lang.Class[] r2;
        int $i0;
        java.lang.Class r0;
        java.lang.String r1;
        java.lang.reflect.Method $r3, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class[];

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Method name must not be null");

     label1:
        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, r2);

        $i0 = virtualinvoke $r3.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label2;

        $r5 = $r3;

        goto label3;

     label2:
        $r5 = null;

     label3:
        return $r5;

     label4:
        $r4 := @caughtexception;

        return null;

        catch java.lang.NoSuchMethodException from label1 to label3 with label4;
    }

    public static boolean isPrimitiveWrapper(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.Map $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        $r1 = <org.springframework.util.ClassUtils: java.util.Map primitiveWrapperTypeMap>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0);

        return $z0;
    }

    public static boolean isPrimitiveOrWrapper(java.lang.Class)
    {
        java.lang.Class r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.springframework.util.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>(r0);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public static boolean isPrimitiveArray(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isPrimitiveWrapperArray(java.lang.Class)
    {
        java.lang.Class r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $z1 = staticinvoke <org.springframework.util.ClassUtils: boolean isPrimitiveWrapper(java.lang.Class)>($r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.lang.Class resolvePrimitiveIfNecessary(java.lang.Class)
    {
        java.util.Map $r2;
        java.lang.Class r0, $r1, $r4;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class must not be null");

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r1 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 == $r1 goto label1;

        $r2 = <org.springframework.util.ClassUtils: java.util.Map primitiveTypeToWrapperMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (java.lang.Class) $r3;

        goto label2;

     label1:
        $r4 = r0;

     label2:
        return $r4;
    }

    public static boolean isAssignable(java.lang.Class, java.lang.Class)
    {
        java.util.Map $r2, $r4;
        java.lang.Class r0, r1, r6, r7;
        java.lang.Object $r3, $r5;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Left-hand side type must not be null");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Right-hand side type must not be null");

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label2;

        $r4 = <org.springframework.util.ClassUtils: java.util.Map primitiveWrapperTypeMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (java.lang.Class) $r5;

        if r6 == null goto label3;

        $z3 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r6);

        if $z3 == 0 goto label3;

        return 1;

     label2:
        $r2 = <org.springframework.util.ClassUtils: java.util.Map primitiveTypeToWrapperMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (java.lang.Class) $r3;

        if r7 == null goto label3;

        $z2 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r7);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    public static boolean isAssignableValue(java.lang.Class, java.lang.Object)
    {
        java.lang.Class r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Type must not be null");

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = staticinvoke <org.springframework.util.ClassUtils: boolean isAssignable(java.lang.Class,java.lang.Class)>(r0, $r2);

        goto label3;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label2;

        $z1 = 0;

        goto label3;

     label2:
        $z1 = 1;

     label3:
        return $z1;
    }

    public static java.lang.String convertResourcePathToClassName(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Resource path must not be null");

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        return $r1;
    }

    public static java.lang.String convertClassNameToResourcePath(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Class name must not be null");

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        return $r1;
    }

    public static java.lang.String addResourcePathToPackagePath(java.lang.Class, java.lang.String)
    {
        java.lang.StringBuilder $r1, $r5, $r7, $r10, $r11;
        java.lang.Class r2;
        java.lang.String r0, $r3, $r4, $r6, $r8, $r9, $r12;
        boolean $z0;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Resource name must not be null");

        $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 != 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        $r8 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String classPackageAsResourcePath(java.lang.Class)>(r2);

        $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r8);

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label1:
        $r1 = new java.lang.StringBuilder;

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String classPackageAsResourcePath(java.lang.Class)>(r2);

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r3);

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.String classPackageAsResourcePath(java.lang.Class)
    {
        int $i0, $i2;
        java.lang.Class r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        return "";

     label1:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int lastIndexOf(int)>(46);

        $i2 = (int) -1;

        if $i0 != $i2 goto label2;

        return "";

     label2:
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        return $r3;
    }

    public static transient java.lang.String classNamesToString(java.lang.Class[])
    {
        java.util.List $r1;
        java.util.Collection $r2;
        java.lang.Class[] r0;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.Class[];

        $r1 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r0);

        $r2 = (java.util.Collection) $r1;

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String classNamesToString(java.util.Collection)>($r2);

        return $r3;
    }

    public static java.lang.String classNamesToString(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r0;
        java.lang.StringBuilder $r1;
        java.lang.Object $r3;
        java.lang.Class r4;
        java.lang.String $r5, $r6;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Collection;

        $z0 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>(r0);

        if $z0 == 0 goto label1;

        return "[]";

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("[");

        $r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.Class) $r3;

        $r5 = virtualinvoke r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public static java.lang.Class[] getAllInterfaces(java.lang.Object)
    {
        java.lang.Class[] $r2;
        java.lang.Object r0;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Instance must not be null");

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfacesForClass(java.lang.Class)>($r1);

        return $r2;
    }

    public static java.lang.Class[] getAllInterfacesForClass(java.lang.Class)
    {
        java.lang.Class[] $r1;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class[] getAllInterfacesForClass(java.lang.Class,java.lang.ClassLoader)>(r0, null);

        return $r1;
    }

    public static java.lang.Class[] getAllInterfacesForClass(java.lang.Class, java.lang.ClassLoader)
    {
        java.lang.Object[] $r4;
        int $i0;
        java.util.Set $r2;
        java.lang.Class[] $r3, $r5;
        java.lang.Class r0;
        java.lang.ClassLoader r1;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.ClassLoader;

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.util.Set getAllInterfacesForClassAsSet(java.lang.Class,java.lang.ClassLoader)>(r0, r1);

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $r3 = newarray (java.lang.Class)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.Class[]) $r4;

        return $r5;
    }

    public static java.util.Set getAllInterfacesAsSet(java.lang.Object)
    {
        java.util.Set $r2;
        java.lang.Object r0;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Instance must not be null");

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.util.Set getAllInterfacesForClassAsSet(java.lang.Class)>($r1);

        return $r2;
    }

    public static java.util.Set getAllInterfacesForClassAsSet(java.lang.Class)
    {
        java.util.Set $r1;
        java.lang.Class r0;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.springframework.util.ClassUtils: java.util.Set getAllInterfacesForClassAsSet(java.lang.Class,java.lang.ClassLoader)>(r0, null);

        return $r1;
    }

    public static java.util.Set getAllInterfacesForClassAsSet(java.lang.Class, java.lang.ClassLoader)
    {
        java.lang.Class[] $r1;
        java.util.Set $r4, $r5;
        int i0, i1;
        java.lang.Class r2, r6;
        java.lang.ClassLoader r3;
        java.util.LinkedHashSet $r0;
        boolean $z0, $z1;

        r6 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.ClassLoader;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r6, "Class must not be null");

        $z0 = virtualinvoke r6.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.springframework.util.ClassUtils: boolean isVisible(java.lang.Class,java.lang.ClassLoader)>(r6, r3);

        if $z1 == 0 goto label1;

        $r5 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r6);

        return $r5;

     label1:
        $r0 = new java.util.LinkedHashSet;

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>();

        goto label5;

     label2:
        $r1 = virtualinvoke r6.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i0 = lengthof $r1;

        i1 = 0;

        goto label4;

     label3:
        r2 = $r1[i1];

        $r4 = staticinvoke <org.springframework.util.ClassUtils: java.util.Set getAllInterfacesForClassAsSet(java.lang.Class,java.lang.ClassLoader)>(r2, r3);

        interfaceinvoke $r0.<java.util.Set: boolean addAll(java.util.Collection)>($r4);

        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label3;

        r6 = virtualinvoke r6.<java.lang.Class: java.lang.Class getSuperclass()>();

     label5:
        if r6 != null goto label2;

        return $r0;
    }

    public static java.lang.Class createCompositeInterface(java.lang.Class[], java.lang.ClassLoader)
    {
        java.lang.Class[] r0;
        java.lang.Class $r2;
        java.lang.ClassLoader r1;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.ClassLoader;

        staticinvoke <org.springframework.util.Assert: void notEmpty(java.lang.Object[],java.lang.String)>(r0, "Interfaces must not be empty");

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "ClassLoader must not be null");

        $r2 = staticinvoke <java.lang.reflect.Proxy: java.lang.Class getProxyClass(java.lang.ClassLoader,java.lang.Class[])>(r1, r0);

        return $r2;
    }

    public static boolean isVisible(java.lang.Class, java.lang.ClassLoader)
    {
        java.lang.Class r1, $r3;
        java.lang.ClassNotFoundException $r4;
        java.lang.ClassLoader r0;
        java.lang.String $r2;

        r1 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.ClassLoader;

        if r0 != null goto label1;

        return 1;

     label1:
        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke r0.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r2);

        if r1 != $r3 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
