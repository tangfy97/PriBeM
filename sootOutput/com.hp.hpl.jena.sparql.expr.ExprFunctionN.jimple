public abstract class com.hp.hpl.jena.sparql.expr.ExprFunctionN extends com.hp.hpl.jena.sparql.expr.ExprFunction
{
    protected com.hp.hpl.jena.sparql.expr.ExprList args;

    protected transient void <init>(java.lang.String, com.hp.hpl.jena.sparql.expr.Expr[])
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r0;
        com.hp.hpl.jena.sparql.expr.ExprList $r3;
        com.hp.hpl.jena.sparql.expr.Expr[] r2;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr[];

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.ExprList argList(com.hp.hpl.jena.sparql.expr.Expr[])>(r2);

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: void <init>(java.lang.String,com.hp.hpl.jena.sparql.expr.ExprList)>(r1, $r3);

        return;
    }

    protected void <init>(java.lang.String, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r0;
        java.lang.String r1;
        com.hp.hpl.jena.sparql.expr.ExprList r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunction: void <init>(java.lang.String)>(r1);

        r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.ExprList args> = null;

        r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.ExprList args> = r2;

        return;
    }

    private static com.hp.hpl.jena.sparql.expr.ExprList argList(com.hp.hpl.jena.sparql.expr.Expr[])
    {
        com.hp.hpl.jena.sparql.expr.Expr r2;
        com.hp.hpl.jena.sparql.expr.ExprList $r0;
        com.hp.hpl.jena.sparql.expr.Expr[] r1;
        int i0, i1;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr[];

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>(r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return $r0;
    }

    public com.hp.hpl.jena.sparql.expr.Expr getArg(int)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r0;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        com.hp.hpl.jena.sparql.expr.ExprList $r1, $r2;
        int $i0, i1, i2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        i1 := @parameter0: int;

        i2 = i1 - 1;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.ExprList args>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        if i2 < $i0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.ExprList args>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.Expr get(int)>(i2);

        return $r3;
    }

    public int numArgs()
    {
        int $i0;
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r0;
        com.hp.hpl.jena.sparql.expr.ExprList $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.ExprList args>;

        $i0 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprList: int size()>();

        return $i0;
    }

    public java.util.List getArgs()
    {
        java.util.List $r2;
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r0;
        com.hp.hpl.jena.sparql.expr.ExprList $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.ExprList args>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List getList()>();

        return $r2;
    }

    public com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding, boolean)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r4;
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r1;
        com.hp.hpl.jena.sparql.expr.Expr $r2, $r3, $r5;
        com.hp.hpl.jena.sparql.expr.ExprList $r0;
        int $i0, i1;
        boolean z0;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        r4 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        z0 := @parameter1: boolean;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        i1 = 1;

     label1:
        $i0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: int numArgs()>();

        if i1 > $i0 goto label2;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.Expr getArg(int)>(i1);

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding,boolean)>(r4, z0);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.ExprList)>($r0);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.expr.Expr applyNodeTransform(com.hp.hpl.jena.sparql.graph.NodeTransform)
    {
        com.hp.hpl.jena.sparql.graph.NodeTransform r4;
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r1;
        com.hp.hpl.jena.sparql.expr.Expr $r2, $r3, $r5;
        com.hp.hpl.jena.sparql.expr.ExprList $r0;
        int $i0, i1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        r4 := @parameter0: com.hp.hpl.jena.sparql.graph.NodeTransform;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        i1 = 1;

     label1:
        $i0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: int numArgs()>();

        if i1 > $i0 goto label2;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.Expr getArg(int)>(i1);

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.Expr applyNodeTransform(com.hp.hpl.jena.sparql.graph.NodeTransform)>(r4);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.ExprList)>($r0);

        return $r2;
    }

    protected com.hp.hpl.jena.sparql.expr.NodeValue evalSpecial(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r0;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        return null;
    }

    public final com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue $r3, $r5, $r7;
        java.util.ArrayList $r4;
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r0;
        com.hp.hpl.jena.sparql.expr.Expr $r6;
        int $i0, i1;
        com.hp.hpl.jena.sparql.function.FunctionEnv r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r2 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.NodeValue evalSpecial(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r1, r2);

        if $r3 == null goto label1;

        return $r3;

     label1:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i1 = 1;

     label2:
        $i0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: int numArgs()>();

        if i1 > $i0 goto label3;

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.Expr getArg(int)>(i1);

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.NodeValue eval(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv,com.hp.hpl.jena.sparql.expr.Expr)>(r1, r2, $r6);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r7);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r5 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.NodeValue eval(java.util.List,com.hp.hpl.jena.sparql.function.FunctionEnv)>($r4, r2);

        return $r5;
    }

    public com.hp.hpl.jena.sparql.expr.NodeValue eval(java.util.List, com.hp.hpl.jena.sparql.function.FunctionEnv)
    {
        java.util.List r1;
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r0;
        com.hp.hpl.jena.sparql.expr.NodeValue $r2;
        com.hp.hpl.jena.sparql.function.FunctionEnv r3;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        r1 := @parameter0: java.util.List;

        r3 := @parameter1: com.hp.hpl.jena.sparql.function.FunctionEnv;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprFunctionN: com.hp.hpl.jena.sparql.expr.NodeValue eval(java.util.List)>(r1);

        return $r2;
    }

    protected abstract com.hp.hpl.jena.sparql.expr.NodeValue eval(java.util.List);

    protected abstract com.hp.hpl.jena.sparql.expr.Expr copy(com.hp.hpl.jena.sparql.expr.ExprList);

    public void visit(com.hp.hpl.jena.sparql.expr.ExprVisitor)
    {
        com.hp.hpl.jena.sparql.expr.ExprVisitor r0;
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprVisitor;

        interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprVisitor: void visit(com.hp.hpl.jena.sparql.expr.ExprFunctionN)>(r1);

        return;
    }

    public com.hp.hpl.jena.sparql.expr.Expr apply(com.hp.hpl.jena.sparql.expr.ExprTransform, com.hp.hpl.jena.sparql.expr.ExprList)
    {
        com.hp.hpl.jena.sparql.expr.ExprFunctionN r1;
        com.hp.hpl.jena.sparql.expr.ExprTransform r0;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        com.hp.hpl.jena.sparql.expr.ExprList r2;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprFunctionN;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprTransform;

        r2 := @parameter1: com.hp.hpl.jena.sparql.expr.ExprList;

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprTransform: com.hp.hpl.jena.sparql.expr.Expr transform(com.hp.hpl.jena.sparql.expr.ExprFunctionN,com.hp.hpl.jena.sparql.expr.ExprList)>(r1, r2);

        return $r3;
    }
}
