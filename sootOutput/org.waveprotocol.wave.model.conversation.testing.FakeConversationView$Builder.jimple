public final class org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder extends java.lang.Object
{
    private org.waveprotocol.wave.model.schema.SchemaProvider schemas;
    private org.waveprotocol.wave.model.id.IdGenerator idGenerator;
    private org.waveprotocol.wave.model.id.WaveId waveId;
    private org.waveprotocol.wave.model.wave.ParticipantId viewer;
    private org.waveprotocol.wave.model.wave.data.DocumentFactory docFactory;

    private void <init>()
    {
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder 'with'(org.waveprotocol.wave.model.wave.data.DocumentFactory)
    {
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder r0;
        org.waveprotocol.wave.model.wave.data.DocumentFactory r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.DocumentFactory;

        r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.wave.data.DocumentFactory docFactory> = r1;

        return r0;
    }

    public org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder 'with'(org.waveprotocol.wave.model.schema.SchemaProvider)
    {
        org.waveprotocol.wave.model.schema.SchemaProvider r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.schema.SchemaProvider;

        r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.schema.SchemaProvider schemas> = r1;

        return r0;
    }

    public org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder 'with'(org.waveprotocol.wave.model.id.IdGenerator)
    {
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder r0;
        org.waveprotocol.wave.model.id.IdGenerator r1;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.id.IdGenerator;

        r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.id.IdGenerator idGenerator> = r1;

        return r0;
    }

    public org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder 'with'(org.waveprotocol.wave.model.id.WaveId)
    {
        org.waveprotocol.wave.model.id.WaveId r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.id.WaveId waveId> = r1;

        return r0;
    }

    public org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder 'with'(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.wave.ParticipantId viewer> = r1;

        return r0;
    }

    public org.waveprotocol.wave.model.conversation.testing.FakeConversationView build()
    {
        org.waveprotocol.wave.model.testing.FakeWaveView $r14;
        org.waveprotocol.wave.model.wave.ParticipantId $r12;
        org.waveprotocol.wave.model.testing.FakeWaveView$Builder $r5, $r7, $r9, $r11, $r13;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r6;
        org.waveprotocol.wave.model.conversation.WaveBasedConversationView $r17;
        org.waveprotocol.wave.model.id.WaveId $r3, $r10, $r19;
        org.waveprotocol.wave.model.id.IdGenerator $r2, $r8, $r16, $r18, $r20;
        org.waveprotocol.wave.model.schema.SchemaProvider $r1, $r4, $r21;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView $r15;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder;

        $r1 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.schema.SchemaProvider schemas>;

        if $r1 != null goto label1;

        $r21 = staticinvoke <org.waveprotocol.wave.model.conversation.testing.FakeConversationView: org.waveprotocol.wave.model.schema.SchemaProvider access$000()>();

        r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.schema.SchemaProvider schemas> = $r21;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.id.IdGenerator idGenerator>;

        if $r2 != null goto label2;

        $r20 = staticinvoke <org.waveprotocol.wave.model.testing.FakeIdGenerator: org.waveprotocol.wave.model.id.IdGenerator create()>();

        r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.id.IdGenerator idGenerator> = $r20;

     label2:
        $r3 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.id.WaveId waveId>;

        if $r3 != null goto label3;

        $r18 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.id.IdGenerator idGenerator>;

        $r19 = interfaceinvoke $r18.<org.waveprotocol.wave.model.id.IdGenerator: org.waveprotocol.wave.model.id.WaveId newWaveId()>();

        r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.id.WaveId waveId> = $r19;

     label3:
        $r4 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.schema.SchemaProvider schemas>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.testing.FakeWaveView$Builder builder(org.waveprotocol.wave.model.schema.SchemaProvider)>($r4);

        $r6 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.wave.data.DocumentFactory docFactory>;

        $r7 = virtualinvoke $r5.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.testing.FakeWaveView$Builder 'with'(org.waveprotocol.wave.model.wave.data.DocumentFactory)>($r6);

        $r8 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.id.IdGenerator idGenerator>;

        $r9 = virtualinvoke $r7.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.testing.FakeWaveView$Builder 'with'(org.waveprotocol.wave.model.id.IdGenerator)>($r8);

        $r10 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r11 = virtualinvoke $r9.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.testing.FakeWaveView$Builder 'with'(org.waveprotocol.wave.model.id.WaveId)>($r10);

        $r12 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.wave.ParticipantId viewer>;

        $r13 = virtualinvoke $r11.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.testing.FakeWaveView$Builder 'with'(org.waveprotocol.wave.model.wave.ParticipantId)>($r12);

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: org.waveprotocol.wave.model.testing.FakeWaveView build()>();

        $r15 = new org.waveprotocol.wave.model.conversation.testing.FakeConversationView;

        $r16 = r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: org.waveprotocol.wave.model.id.IdGenerator idGenerator>;

        $r17 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveBasedConversationView: org.waveprotocol.wave.model.conversation.WaveBasedConversationView create(org.waveprotocol.wave.model.wave.opbased.ObservableWaveView,org.waveprotocol.wave.model.id.IdGenerator)>($r14, $r16);

        specialinvoke $r15.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView: void <init>(org.waveprotocol.wave.model.conversation.WaveBasedConversationView,org.waveprotocol.wave.model.conversation.testing.FakeConversationView$1)>($r17, null);

        return $r15;
    }

    void <init>(org.waveprotocol.wave.model.conversation.testing.FakeConversationView$1)
    {
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView$1 r1;
        org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.testing.FakeConversationView$1;

        specialinvoke r0.<org.waveprotocol.wave.model.conversation.testing.FakeConversationView$Builder: void <init>()>();

        return;
    }
}
