public class org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl extends org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap implements org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate
{
    public static final org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl EMPTY_MAP;
    private static final java.lang.String MAX_STRING;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: void <init>()>();

        return;
    }

    private void <init>(java.util.List)
    {
        java.util.List r1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl r0;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: void <init>(java.util.List)>(r1);

        return;
    }

    protected org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl createFromList(java.util.List)
    {
        java.util.List r1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl $r0, r2;

        r2 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl;

        r1 := @parameter0: java.util.List;

        $r0 = new org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: void <init>(java.util.List)>(r1);

        return $r0;
    }

    public org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl composeWith(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)
    {
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r4;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl r1, $r31;
        boolean $z0, $z1, $z2;
        java.util.List $r2, $r26, $r28, $r32;
        java.lang.StringBuilder $r7, $r8, $r9, $r15, $r16, $r17;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate $r12, $r20, $r23, $r30;
        java.lang.AssertionError $r6, $r11, $r19;
        java.util.ArrayList $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i10;
        java.lang.String r3, r5, $r10, $r13, $r14, $r18, $r21, $r22, $r24, $r25, $r33, $r34, $r35;
        java.lang.Object $r27, $r29;

        r1 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl;

        r4 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i7 = 0;

        i8 = 0;

        i9 = 0;

     label01:
        $r2 = r1.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.util.List updates>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i7 < $i0 goto label02;

        $i5 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int changeSize()>();

        if i8 < $i5 goto label02;

        $i6 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int endSize()>();

        if i9 >= $i6 goto label19;

     label02:
        $r32 = r1.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.util.List updates>;

        $i10 = interfaceinvoke $r32.<java.util.List: int size()>();

        if i7 >= $i10 goto label03;

        $r28 = r1.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.util.List updates>;

        $r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(i7);

        $r30 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate) $r29;

        $r33 = $r30.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String name>;

        goto label04;

     label03:
        $r33 = "\uffff";

     label04:
        r3 = $r33;

        $i1 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int changeSize()>();

        if i8 >= $i1 goto label05;

        $r34 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getChangeKey(int)>(i8);

        goto label06;

     label05:
        $r34 = "\uffff";

     label06:
        r5 = $r34;

        $i2 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: int endSize()>();

        if i9 >= $i2 goto label07;

        $r35 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getEndKey(int)>(i9);

        goto label08;

     label07:
        $r35 = "\uffff";

     label08:
        $i3 = virtualinvoke r3.<java.lang.String: int compareTo(java.lang.String)>($r35);

        $i4 = virtualinvoke r3.<java.lang.String: int compareTo(java.lang.String)>(r5);

        if $i3 >= 0 goto label12;

        if $i4 >= 0 goto label09;

        $r26 = r1.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.util.List updates>;

        $r27 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>(i7);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r27);

        i7 = i7 + 1;

        goto label18;

     label09:
        if $i4 != 0 goto label10;

        $r23 = new org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate;

        $r24 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getOldValue(int)>(i8);

        $r25 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getNewValue(int)>(i8);

        specialinvoke $r23.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r5, $r24, $r25);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r23);

        i7 = i7 + 1;

        i8 = i8 + 1;

        goto label18;

     label10:
        if $i4 <= 0 goto label11;

        $r20 = new org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate;

        $r21 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getOldValue(int)>(i8);

        $r22 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getNewValue(int)>(i8);

        specialinvoke $r20.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r5, $r21, $r22);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r20);

        i8 = i8 + 1;

        goto label18;

     label11:
        $z2 = <org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: boolean $assertionsDisabled>;

        if $z2 != 0 goto label18;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>()>();

        throw $r19;

     label12:
        if $i3 != 0 goto label16;

        if $i4 >= 0 goto label13;

        i7 = i7 + 1;

        i9 = i9 + 1;

        goto label18;

     label13:
        if $i4 != 0 goto label14;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AnnotationBoundaryMap with key both in change and end: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r18);

        goto label18;

     label14:
        if $i4 <= 0 goto label15;

        $r12 = new org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate;

        $r13 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getOldValue(int)>(i8);

        $r14 = interfaceinvoke r4.<org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap: java.lang.String getNewValue(int)>(i8);

        specialinvoke $r12.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r5, $r13, $r14);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12);

        i7 = i7 + 1;

        i9 = i9 + 1;

        i8 = i8 + 1;

        goto label18;

     label15:
        $z1 = <org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label18;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label16:
        if $i3 <= 0 goto label17;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to end key that is not part of the update: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r10);

        goto label18;

     label17:
        $z0 = <org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: boolean $assertionsDisabled>;

        if $z0 != 0 goto label18;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label18:
        goto label01;

     label19:
        $r31 = virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl createFromList(java.util.List)>($r0);

        return $r31;
    }

    public boolean containsKey(java.lang.String)
    {
        java.util.Iterator $r3;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate r5;
        java.util.List $r2;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl r1;
        java.lang.Object $r4;
        java.lang.String r0, $r6;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Null key");

        $r2 = r1.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.util.List updates>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate) $r4;

        $r6 = r5.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap$AttributeUpdate: java.lang.String name>;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    protected volatile org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap createFromList(java.util.List)
    {
        java.util.List r1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl r0, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl;

        r1 := @parameter0: java.util.List;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl createFromList(java.util.List)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate composeWith(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)
    {
        org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap r1;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl r0, $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl composeWith(org.waveprotocol.wave.model.document.operation.AnnotationBoundaryMap)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate composeWith(org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate)
    {
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl r0;
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate r1, $r3;
        org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap $r2;

        r0 := @this: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap: org.waveprotocol.wave.model.document.operation.util.ImmutableUpdateMap composeWith(org.waveprotocol.wave.model.document.operation.util.UpdateMap)>(r1);

        $r3 = (org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdate) $r2;

        return $r3;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: java.lang.String MAX_STRING> = "\uffff";

        $r0 = class "Lorg/waveprotocol/wave/model/document/operation/impl/AnnotationsUpdateImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: boolean $assertionsDisabled> = $z1;

        $r1 = new org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl;

        specialinvoke $r1.<org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: void <init>()>();

        <org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl: org.waveprotocol.wave.model.document.operation.impl.AnnotationsUpdateImpl EMPTY_MAP> = $r1;

        return;
    }
}
