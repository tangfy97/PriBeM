public class javax.microedition.lcdui.Gauge extends javax.microedition.lcdui.Item
{
    public static final int CONTINUOUS_IDLE;
    public static final int CONTINUOUS_RUNNING;
    public static final int INCREMENTAL_IDLE;
    public static final int INCREMENTAL_UPDATING;
    public static final int INDEFINITE;

    public void <init>(java.lang.String, boolean, int, int)
    {
        int i0, i1;
        javax.microedition.lcdui.Gauge r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: javax.microedition.lcdui.Gauge;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<javax.microedition.lcdui.Item: void <init>()>();

        return;
    }

    public void addCommand(javax.microedition.lcdui.Command)
    {
        javax.microedition.lcdui.Gauge r0;
        javax.microedition.lcdui.Command r1;

        r0 := @this: javax.microedition.lcdui.Gauge;

        r1 := @parameter0: javax.microedition.lcdui.Command;

        return;
    }

    public int getMaxValue()
    {
        javax.microedition.lcdui.Gauge r0;

        r0 := @this: javax.microedition.lcdui.Gauge;

        return 0;
    }

    public int getValue()
    {
        javax.microedition.lcdui.Gauge r0;

        r0 := @this: javax.microedition.lcdui.Gauge;

        return 0;
    }

    public boolean isInteractive()
    {
        javax.microedition.lcdui.Gauge r0;

        r0 := @this: javax.microedition.lcdui.Gauge;

        return 0;
    }

    public void setDefaultCommand(javax.microedition.lcdui.Command)
    {
        javax.microedition.lcdui.Gauge r0;
        javax.microedition.lcdui.Command r1;

        r0 := @this: javax.microedition.lcdui.Gauge;

        r1 := @parameter0: javax.microedition.lcdui.Command;

        return;
    }

    public void setItemCommandListener(javax.microedition.lcdui.ItemCommandListener)
    {
        javax.microedition.lcdui.Gauge r0;
        javax.microedition.lcdui.ItemCommandListener r1;

        r0 := @this: javax.microedition.lcdui.Gauge;

        r1 := @parameter0: javax.microedition.lcdui.ItemCommandListener;

        return;
    }

    public void setLabel(java.lang.String)
    {
        javax.microedition.lcdui.Gauge r0;
        java.lang.String r1;

        r0 := @this: javax.microedition.lcdui.Gauge;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void setLayout(int)
    {
        int i0;
        javax.microedition.lcdui.Gauge r0;

        r0 := @this: javax.microedition.lcdui.Gauge;

        i0 := @parameter0: int;

        return;
    }

    public void setMaxValue(int)
    {
        int i0;
        javax.microedition.lcdui.Gauge r0;

        r0 := @this: javax.microedition.lcdui.Gauge;

        i0 := @parameter0: int;

        return;
    }

    public void setPreferredSize(int, int)
    {
        int i0, i1;
        javax.microedition.lcdui.Gauge r0;

        r0 := @this: javax.microedition.lcdui.Gauge;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return;
    }

    public void setValue(int)
    {
        int i0;
        javax.microedition.lcdui.Gauge r0;

        r0 := @this: javax.microedition.lcdui.Gauge;

        i0 := @parameter0: int;

        return;
    }

    public static void <clinit>()
    {
        <javax.microedition.lcdui.Gauge: int INDEFINITE> = -1;

        <javax.microedition.lcdui.Gauge: int INCREMENTAL_UPDATING> = 3;

        <javax.microedition.lcdui.Gauge: int INCREMENTAL_IDLE> = 1;

        <javax.microedition.lcdui.Gauge: int CONTINUOUS_RUNNING> = 2;

        <javax.microedition.lcdui.Gauge: int CONTINUOUS_IDLE> = 0;

        return;
    }
}
