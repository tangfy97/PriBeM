public class org.apache.zookeeper.server.quorum.SendAckRequestProcessor extends java.lang.Object implements org.apache.zookeeper.server.RequestProcessor, java.io.Flushable
{
    private static final org.slf4j.Logger LOG;
    org.apache.zookeeper.server.quorum.Learner learner;

    void <init>(org.apache.zookeeper.server.quorum.Learner)
    {
        org.apache.zookeeper.server.quorum.SendAckRequestProcessor r0;
        org.apache.zookeeper.server.quorum.Learner r1;

        r0 := @this: org.apache.zookeeper.server.quorum.SendAckRequestProcessor;

        r1 := @parameter0: org.apache.zookeeper.server.quorum.Learner;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.zookeeper.server.quorum.SendAckRequestProcessor: org.apache.zookeeper.server.quorum.Learner learner> = r1;

        return;
    }

    public void processRequest(org.apache.zookeeper.server.Request)
    {
        java.net.Socket $r10, $r12;
        org.apache.zookeeper.server.quorum.SendAckRequestProcessor r3;
        long $l1;
        org.apache.zookeeper.server.quorum.QuorumPacket $r1;
        int $i0;
        boolean $z0;
        org.slf4j.Logger $r6, $r8;
        org.apache.zookeeper.txn.TxnHeader $r2;
        java.io.IOException $r5, $r7;
        org.apache.zookeeper.server.Request r0;
        org.apache.zookeeper.server.quorum.Learner $r4, $r9, $r11;

        r3 := @this: org.apache.zookeeper.server.quorum.SendAckRequestProcessor;

        r0 := @parameter0: org.apache.zookeeper.server.Request;

        $i0 = r0.<org.apache.zookeeper.server.Request: int type>;

        if $i0 == 9 goto label7;

        $r1 = new org.apache.zookeeper.server.quorum.QuorumPacket;

        $r2 = r0.<org.apache.zookeeper.server.Request: org.apache.zookeeper.txn.TxnHeader hdr>;

        $l1 = virtualinvoke $r2.<org.apache.zookeeper.txn.TxnHeader: long getZxid()>();

        specialinvoke $r1.<org.apache.zookeeper.server.quorum.QuorumPacket: void <init>(int,long,byte[],java.util.List)>(3, $l1, null, null);

     label1:
        $r4 = r3.<org.apache.zookeeper.server.quorum.SendAckRequestProcessor: org.apache.zookeeper.server.quorum.Learner learner>;

        virtualinvoke $r4.<org.apache.zookeeper.server.quorum.Learner: void writePacket(org.apache.zookeeper.server.quorum.QuorumPacket,boolean)>($r1, 0);

     label2:
        goto label7;

     label3:
        $r7 := @caughtexception;

        $r8 = <org.apache.zookeeper.server.quorum.SendAckRequestProcessor: org.slf4j.Logger LOG>;

        interfaceinvoke $r8.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Closing connection to leader, exception during packet send", $r7);

     label4:
        $r9 = r3.<org.apache.zookeeper.server.quorum.SendAckRequestProcessor: org.apache.zookeeper.server.quorum.Learner learner>;

        $r10 = $r9.<org.apache.zookeeper.server.quorum.Learner: java.net.Socket sock>;

        $z0 = virtualinvoke $r10.<java.net.Socket: boolean isClosed()>();

        if $z0 != 0 goto label5;

        $r11 = r3.<org.apache.zookeeper.server.quorum.SendAckRequestProcessor: org.apache.zookeeper.server.quorum.Learner learner>;

        $r12 = $r11.<org.apache.zookeeper.server.quorum.Learner: java.net.Socket sock>;

        virtualinvoke $r12.<java.net.Socket: void close()>();

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        $r6 = <org.apache.zookeeper.server.quorum.SendAckRequestProcessor: org.slf4j.Logger LOG>;

        interfaceinvoke $r6.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>("Ignoring error closing the connection", $r5);

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    public void flush() throws java.io.IOException
    {
        java.net.Socket $r7, $r9;
        org.slf4j.Logger $r3, $r5;
        org.apache.zookeeper.server.quorum.SendAckRequestProcessor r0;
        java.io.IOException $r2, $r4;
        org.apache.zookeeper.server.quorum.Learner $r1, $r6, $r8;
        boolean $z0;

        r0 := @this: org.apache.zookeeper.server.quorum.SendAckRequestProcessor;

     label1:
        $r1 = r0.<org.apache.zookeeper.server.quorum.SendAckRequestProcessor: org.apache.zookeeper.server.quorum.Learner learner>;

        virtualinvoke $r1.<org.apache.zookeeper.server.quorum.Learner: void writePacket(org.apache.zookeeper.server.quorum.QuorumPacket,boolean)>(null, 1);

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $r5 = <org.apache.zookeeper.server.quorum.SendAckRequestProcessor: org.slf4j.Logger LOG>;

        interfaceinvoke $r5.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Closing connection to leader, exception during packet send", $r4);

     label4:
        $r6 = r0.<org.apache.zookeeper.server.quorum.SendAckRequestProcessor: org.apache.zookeeper.server.quorum.Learner learner>;

        $r7 = $r6.<org.apache.zookeeper.server.quorum.Learner: java.net.Socket sock>;

        $z0 = virtualinvoke $r7.<java.net.Socket: boolean isClosed()>();

        if $z0 != 0 goto label5;

        $r8 = r0.<org.apache.zookeeper.server.quorum.SendAckRequestProcessor: org.apache.zookeeper.server.quorum.Learner learner>;

        $r9 = $r8.<org.apache.zookeeper.server.quorum.Learner: java.net.Socket sock>;

        virtualinvoke $r9.<java.net.Socket: void close()>();

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        $r3 = <org.apache.zookeeper.server.quorum.SendAckRequestProcessor: org.slf4j.Logger LOG>;

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Throwable)>("Ignoring error closing the connection", $r2);

     label7:
        return;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    public void shutdown()
    {
        org.apache.zookeeper.server.quorum.SendAckRequestProcessor r0;

        r0 := @this: org.apache.zookeeper.server.quorum.SendAckRequestProcessor;

        return;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/server/quorum/SendAckRequestProcessor;");

        <org.apache.zookeeper.server.quorum.SendAckRequestProcessor: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
