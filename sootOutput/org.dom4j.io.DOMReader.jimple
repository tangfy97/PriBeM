public class org.dom4j.io.DOMReader extends java.lang.Object
{
    private org.dom4j.DocumentFactory factory;
    private org.dom4j.tree.NamespaceStack namespaceStack;

    public void <init>()
    {
        org.dom4j.tree.NamespaceStack $r2;
        org.dom4j.io.DOMReader r0;
        org.dom4j.DocumentFactory $r1, $r3;

        r0 := @this: org.dom4j.io.DOMReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.dom4j.DocumentFactory: org.dom4j.DocumentFactory getInstance()>();

        r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory factory> = $r1;

        $r2 = new org.dom4j.tree.NamespaceStack;

        $r3 = r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory factory>;

        specialinvoke $r2.<org.dom4j.tree.NamespaceStack: void <init>(org.dom4j.DocumentFactory)>($r3);

        r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack> = $r2;

        return;
    }

    public void <init>(org.dom4j.DocumentFactory)
    {
        org.dom4j.tree.NamespaceStack $r2;
        org.dom4j.io.DOMReader r0;
        org.dom4j.DocumentFactory r1;

        r0 := @this: org.dom4j.io.DOMReader;

        r1 := @parameter0: org.dom4j.DocumentFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory factory> = r1;

        $r2 = new org.dom4j.tree.NamespaceStack;

        specialinvoke $r2.<org.dom4j.tree.NamespaceStack: void <init>(org.dom4j.DocumentFactory)>(r1);

        r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack> = $r2;

        return;
    }

    public org.dom4j.DocumentFactory getDocumentFactory()
    {
        org.dom4j.io.DOMReader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.DOMReader;

        $r1 = r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory factory>;

        return $r1;
    }

    public void setDocumentFactory(org.dom4j.DocumentFactory)
    {
        org.dom4j.tree.NamespaceStack $r3;
        org.dom4j.io.DOMReader r0;
        org.dom4j.DocumentFactory r1, $r2;

        r0 := @this: org.dom4j.io.DOMReader;

        r1 := @parameter0: org.dom4j.DocumentFactory;

        r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory factory> = r1;

        $r3 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r2 = r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory factory>;

        virtualinvoke $r3.<org.dom4j.tree.NamespaceStack: void setDocumentFactory(org.dom4j.DocumentFactory)>($r2);

        return;
    }

    public org.dom4j.Document read(org.w3c.dom.Document)
    {
        org.dom4j.Document $r2, $r5;
        org.w3c.dom.NodeList $r3;
        org.dom4j.io.DOMReader r1;
        org.w3c.dom.Document r0;
        org.w3c.dom.Node $r4;
        int $i0, i1;
        boolean $z0;

        r1 := @this: org.dom4j.io.DOMReader;

        r0 := @parameter0: org.w3c.dom.Document;

        $z0 = r0 instanceof org.dom4j.Document;

        if $z0 == 0 goto label1;

        $r5 = (org.dom4j.Document) r0;

        return $r5;

     label1:
        $r2 = virtualinvoke r1.<org.dom4j.io.DOMReader: org.dom4j.Document createDocument()>();

        virtualinvoke r1.<org.dom4j.io.DOMReader: void clearNamespaceStack()>();

        $r3 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.NodeList getChildNodes()>();

        i1 = 0;

        $i0 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

     label2:
        if i1 >= $i0 goto label3;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i1);

        virtualinvoke r1.<org.dom4j.io.DOMReader: void readTree(org.w3c.dom.Node,org.dom4j.Branch)>($r4, $r2);

        i1 = i1 + 1;

        goto label2;

     label3:
        return $r2;
    }

    protected void readTree(org.w3c.dom.Node, org.dom4j.Branch)
    {
        boolean $z0, $z1, $z2;
        org.dom4j.Document $r5, r28, r30;
        short $s0, $s1;
        java.lang.StringBuffer $r24, $r25, $r32;
        org.w3c.dom.Node r1, $r15;
        int $i2, $i3;
        java.lang.String $r2, $r3, $r4, $r6, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r26;
        java.io.PrintStream $r23;
        org.dom4j.Branch r0;
        org.dom4j.io.DOMReader r21;
        org.w3c.dom.DocumentType r31;
        org.dom4j.Element $r7, r27, r29;

        r21 := @this: org.dom4j.io.DOMReader;

        r1 := @parameter0: org.w3c.dom.Node;

        r0 := @parameter1: org.dom4j.Branch;

        r27 = null;

        r28 = null;

        $z0 = r0 instanceof org.dom4j.Element;

        if $z0 == 0 goto label01;

        r27 = (org.dom4j.Element) r0;

        goto label02;

     label01:
        r28 = (org.dom4j.Document) r0;

     label02:
        $s0 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s0;

        tableswitch($i2)
        {
            case 1: goto label03;
            case 2: goto label14;
            case 3: goto label09;
            case 4: goto label10;
            case 5: goto label11;
            case 6: goto label13;
            case 7: goto label04;
            case 8: goto label06;
            case 9: goto label14;
            case 10: goto label08;
            default: goto label14;
        };

     label03:
        virtualinvoke r21.<org.dom4j.io.DOMReader: void readElement(org.w3c.dom.Node,org.dom4j.Branch)>(r1, r0);

        goto label15;

     label04:
        $z2 = r0 instanceof org.dom4j.Element;

        if $z2 == 0 goto label05;

        r29 = (org.dom4j.Element) r0;

        $r11 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r12 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r29.<org.dom4j.Element: org.dom4j.Element addProcessingInstruction(java.lang.String,java.lang.String)>($r11, $r12);

        goto label15;

     label05:
        r30 = (org.dom4j.Document) r0;

        $r9 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r10 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r30.<org.dom4j.Document: org.dom4j.Document addProcessingInstruction(java.lang.String,java.lang.String)>($r9, $r10);

        goto label15;

     label06:
        $z1 = r0 instanceof org.dom4j.Element;

        if $z1 == 0 goto label07;

        $r7 = (org.dom4j.Element) r0;

        $r8 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke $r7.<org.dom4j.Element: org.dom4j.Element addComment(java.lang.String)>($r8);

        goto label15;

     label07:
        $r5 = (org.dom4j.Document) r0;

        $r6 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke $r5.<org.dom4j.Document: org.dom4j.Document addComment(java.lang.String)>($r6);

        goto label15;

     label08:
        r31 = (org.w3c.dom.DocumentType) r1;

        $r2 = interfaceinvoke r31.<org.w3c.dom.DocumentType: java.lang.String getName()>();

        $r3 = interfaceinvoke r31.<org.w3c.dom.DocumentType: java.lang.String getPublicId()>();

        $r4 = interfaceinvoke r31.<org.w3c.dom.DocumentType: java.lang.String getSystemId()>();

        interfaceinvoke r28.<org.dom4j.Document: org.dom4j.Document addDocType(java.lang.String,java.lang.String,java.lang.String)>($r2, $r3, $r4);

        goto label15;

     label09:
        $r20 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r27.<org.dom4j.Element: org.dom4j.Element addText(java.lang.String)>($r20);

        goto label15;

     label10:
        $r19 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r27.<org.dom4j.Element: org.dom4j.Element addCDATA(java.lang.String)>($r19);

        goto label15;

     label11:
        $r15 = interfaceinvoke r1.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        if $r15 == null goto label12;

        $r17 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r18 = interfaceinvoke $r15.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r27.<org.dom4j.Element: org.dom4j.Element addEntity(java.lang.String,java.lang.String)>($r17, $r18);

        goto label15;

     label12:
        $r16 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        interfaceinvoke r27.<org.dom4j.Element: org.dom4j.Element addEntity(java.lang.String,java.lang.String)>($r16, "");

        goto label15;

     label13:
        $r13 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r14 = interfaceinvoke r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r27.<org.dom4j.Element: org.dom4j.Element addEntity(java.lang.String,java.lang.String)>($r13, $r14);

        goto label15;

     label14:
        $r23 = <java.lang.System: java.io.PrintStream out>;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("WARNING: Unknown DOM node type: ");

        $s1 = interfaceinvoke r1.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s1;

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r26);

     label15:
        return;
    }

    protected void readElement(org.w3c.dom.Node, org.dom4j.Branch)
    {
        org.dom4j.tree.NamespaceStack $r1, $r8, $r9, $r13, $r23, $r27;
        boolean $z0;
        org.dom4j.Namespace $r24;
        java.util.ArrayList $r11;
        org.w3c.dom.Node r2, $r10, $r19, $r25, r32;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        org.w3c.dom.NamedNodeMap $r5;
        java.lang.String $r3, $r4, $r14, $r15, $r16, $r18, $r20, $r21, $r22, r26, $r28, $r29;
        org.w3c.dom.NodeList $r7;
        org.dom4j.Branch r6;
        org.dom4j.io.DOMReader r0;
        java.lang.Object $r12;
        org.dom4j.QName $r17, $r30;
        org.dom4j.Element $r31;

        r0 := @this: org.dom4j.io.DOMReader;

        r2 := @parameter0: org.w3c.dom.Node;

        r6 := @parameter1: org.dom4j.Branch;

        $r1 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $i0 = virtualinvoke $r1.<org.dom4j.tree.NamespaceStack: int size()>();

        $r3 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        r26 = $r3;

        $r4 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        if $r4 != null goto label01;

     label01:
        $r5 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NamedNodeMap getAttributes()>();

        if $r5 == null goto label02;

        if $r3 != null goto label02;

        $r25 = interfaceinvoke $r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>("xmlns");

        if $r25 == null goto label02;

        r26 = interfaceinvoke $r25.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

     label02:
        $r27 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r28 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r29 = interfaceinvoke r2.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r30 = virtualinvoke $r27.<org.dom4j.tree.NamespaceStack: org.dom4j.QName getQName(java.lang.String,java.lang.String,java.lang.String)>(r26, $r28, $r29);

        $r31 = interfaceinvoke r6.<org.dom4j.Branch: org.dom4j.Element addElement(org.dom4j.QName)>($r30);

        if $r5 == null goto label08;

        $i3 = interfaceinvoke $r5.<org.w3c.dom.NamedNodeMap: int getLength()>();

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i3);

        i5 = 0;

     label03:
        if i5 >= $i3 goto label06;

        $r19 = interfaceinvoke $r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i5);

        $r20 = interfaceinvoke $r19.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $z0 = virtualinvoke $r20.<java.lang.String: boolean startsWith(java.lang.String)>("xmlns");

        if $z0 == 0 goto label04;

        $r21 = specialinvoke r0.<org.dom4j.io.DOMReader: java.lang.String getPrefix(java.lang.String)>($r20);

        $r22 = interfaceinvoke $r19.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $r23 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r24 = virtualinvoke $r23.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace addNamespace(java.lang.String,java.lang.String)>($r21, $r22);

        interfaceinvoke $r31.<org.dom4j.Element: void add(org.dom4j.Namespace)>($r24);

        goto label05;

     label04:
        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r19);

     label05:
        i5 = i5 + 1;

        goto label03;

     label06:
        $i4 = interfaceinvoke $r11.<java.util.List: int size()>();

        i6 = 0;

     label07:
        if i6 >= $i4 goto label08;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i6);

        r32 = (org.w3c.dom.Node) $r12;

        $r13 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r14 = interfaceinvoke r32.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r15 = interfaceinvoke r32.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $r16 = interfaceinvoke r32.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r17 = virtualinvoke $r13.<org.dom4j.tree.NamespaceStack: org.dom4j.QName getQName(java.lang.String,java.lang.String,java.lang.String)>($r14, $r15, $r16);

        $r18 = interfaceinvoke r32.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke $r31.<org.dom4j.Element: org.dom4j.Element addAttribute(org.dom4j.QName,java.lang.String)>($r17, $r18);

        i6 = i6 + 1;

        goto label07;

     label08:
        $r7 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.NodeList getChildNodes()>();

        i7 = 0;

        $i1 = interfaceinvoke $r7.<org.w3c.dom.NodeList: int getLength()>();

     label09:
        if i7 >= $i1 goto label10;

        $r10 = interfaceinvoke $r7.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i7);

        virtualinvoke r0.<org.dom4j.io.DOMReader: void readTree(org.w3c.dom.Node,org.dom4j.Branch)>($r10, $r31);

        i7 = i7 + 1;

        goto label09;

     label10:
        $r8 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $i2 = virtualinvoke $r8.<org.dom4j.tree.NamespaceStack: int size()>();

        if $i2 <= $i0 goto label11;

        $r9 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r9.<org.dom4j.tree.NamespaceStack: org.dom4j.Namespace pop()>();

        goto label10;

     label11:
        return;
    }

    protected org.dom4j.Namespace getNamespace(java.lang.String, java.lang.String)
    {
        org.dom4j.Namespace $r4;
        java.lang.String r2, r3;
        org.dom4j.io.DOMReader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.DOMReader;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r4 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Namespace createNamespace(java.lang.String,java.lang.String)>(r2, r3);

        return $r4;
    }

    protected org.dom4j.Document createDocument()
    {
        org.dom4j.Document $r2;
        org.dom4j.io.DOMReader r0;
        org.dom4j.DocumentFactory $r1;

        r0 := @this: org.dom4j.io.DOMReader;

        $r1 = virtualinvoke r0.<org.dom4j.io.DOMReader: org.dom4j.DocumentFactory getDocumentFactory()>();

        $r2 = virtualinvoke $r1.<org.dom4j.DocumentFactory: org.dom4j.Document createDocument()>();

        return $r2;
    }

    protected void clearNamespaceStack()
    {
        org.dom4j.tree.NamespaceStack $r1, $r3, $r5;
        org.dom4j.Namespace $r2, $r4;
        org.dom4j.io.DOMReader r0;
        boolean $z0;

        r0 := @this: org.dom4j.io.DOMReader;

        $r1 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        virtualinvoke $r1.<org.dom4j.tree.NamespaceStack: void clear()>();

        $r3 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r2 = <org.dom4j.Namespace: org.dom4j.Namespace XML_NAMESPACE>;

        $z0 = virtualinvoke $r3.<org.dom4j.tree.NamespaceStack: boolean contains(org.dom4j.Namespace)>($r2);

        if $z0 != 0 goto label1;

        $r5 = r0.<org.dom4j.io.DOMReader: org.dom4j.tree.NamespaceStack namespaceStack>;

        $r4 = <org.dom4j.Namespace: org.dom4j.Namespace XML_NAMESPACE>;

        virtualinvoke $r5.<org.dom4j.tree.NamespaceStack: void push(org.dom4j.Namespace)>($r4);

     label1:
        return;
    }

    private java.lang.String getPrefix(java.lang.String)
    {
        int $i0, $i1, $i3;
        java.lang.String r0, $r1;
        org.dom4j.io.DOMReader r2;

        r2 := @this: org.dom4j.io.DOMReader;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(58, 5);

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r1;

     label1:
        return "";
    }
}
