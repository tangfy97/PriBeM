class org.tukaani.xz.BCJDecoder extends org.tukaani.xz.BCJCoder implements org.tukaani.xz.FilterDecoder
{
    private final long filterID;
    private final int startOffset;
    static final boolean $assertionsDisabled;
    static java.lang.Class class$org$tukaani$xz$BCJDecoder;

    void <init>(long, byte[]) throws org.tukaani.xz.UnsupportedOptionsException
    {
        byte[] r1;
        long l0;
        java.lang.AssertionError $r4;
        short $s5, $s9;
        byte $b3;
        int $i1, $i2, $i4, $i6, i7, i8, $i10;
        boolean $z0, $z1;
        org.tukaani.xz.UnsupportedOptionsException $r5;
        org.tukaani.xz.BCJDecoder r0;

        r0 := @this: org.tukaani.xz.BCJDecoder;

        l0 := @parameter0: long;

        r1 := @parameter1: byte[];

        specialinvoke r0.<org.tukaani.xz.BCJCoder: void <init>()>();

        $z0 = <org.tukaani.xz.BCJDecoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.tukaani.xz.BCJDecoder: boolean isBCJFilterID(long)>(l0);

        if $z1 != 0 goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label1:
        r0.<org.tukaani.xz.BCJDecoder: long filterID> = l0;

        $i1 = lengthof r1;

        if $i1 != 0 goto label2;

        r0.<org.tukaani.xz.BCJDecoder: int startOffset> = 0;

        goto label6;

     label2:
        $i2 = lengthof r1;

        if $i2 != 4 goto label5;

        i7 = 0;

        i8 = 0;

     label3:
        if i8 >= 4 goto label4;

        $b3 = r1[i8];

        $s9 = (short) $b3;

        $s5 = $s9 & 255;

        $i4 = i8 * 8;

        $i10 = (int) $s5;

        $i6 = $i10 << $i4;

        i7 = i7 | $i6;

        i8 = i8 + 1;

        goto label3;

     label4:
        r0.<org.tukaani.xz.BCJDecoder: int startOffset> = i7;

        goto label6;

     label5:
        $r5 = new org.tukaani.xz.UnsupportedOptionsException;

        specialinvoke $r5.<org.tukaani.xz.UnsupportedOptionsException: void <init>(java.lang.String)>("Unsupported BCJ filter properties");

        throw $r5;

     label6:
        return;
    }

    public int getMemoryUsage()
    {
        int $i0;
        org.tukaani.xz.BCJDecoder r0;

        r0 := @this: org.tukaani.xz.BCJDecoder;

        $i0 = staticinvoke <org.tukaani.xz.SimpleInputStream: int getMemoryUsage()>();

        return $i0;
    }

    public java.io.InputStream getInputStream(java.io.InputStream)
    {
        org.tukaani.xz.SimpleInputStream $r10;
        long $l0, $l2, $l4, $l6, $l8, $l10;
        org.tukaani.xz.simple.ARMThumb $r4;
        java.lang.AssertionError $r2;
        byte $b1, $b3, $b5, $b7, $b9, $b11;
        org.tukaani.xz.simple.ARM $r5;
        org.tukaani.xz.simple.SimpleFilter r9;
        int $i12, $i13, $i14, $i15, $i16, $i17;
        org.tukaani.xz.simple.SPARC $r3;
        org.tukaani.xz.simple.PowerPC $r7;
        boolean $z0;
        org.tukaani.xz.simple.IA64 $r6;
        org.tukaani.xz.BCJDecoder r0;
        java.io.InputStream r1;
        org.tukaani.xz.simple.X86 $r8;

        r0 := @this: org.tukaani.xz.BCJDecoder;

        r1 := @parameter0: java.io.InputStream;

        r9 = null;

        $l0 = r0.<org.tukaani.xz.BCJDecoder: long filterID>;

        $b1 = $l0 cmp 4L;

        if $b1 != 0 goto label1;

        $r8 = new org.tukaani.xz.simple.X86;

        $i17 = r0.<org.tukaani.xz.BCJDecoder: int startOffset>;

        specialinvoke $r8.<org.tukaani.xz.simple.X86: void <init>(boolean,int)>(0, $i17);

        r9 = $r8;

        goto label7;

     label1:
        $l2 = r0.<org.tukaani.xz.BCJDecoder: long filterID>;

        $b3 = $l2 cmp 5L;

        if $b3 != 0 goto label2;

        $r7 = new org.tukaani.xz.simple.PowerPC;

        $i16 = r0.<org.tukaani.xz.BCJDecoder: int startOffset>;

        specialinvoke $r7.<org.tukaani.xz.simple.PowerPC: void <init>(boolean,int)>(0, $i16);

        r9 = $r7;

        goto label7;

     label2:
        $l4 = r0.<org.tukaani.xz.BCJDecoder: long filterID>;

        $b5 = $l4 cmp 6L;

        if $b5 != 0 goto label3;

        $r6 = new org.tukaani.xz.simple.IA64;

        $i15 = r0.<org.tukaani.xz.BCJDecoder: int startOffset>;

        specialinvoke $r6.<org.tukaani.xz.simple.IA64: void <init>(boolean,int)>(0, $i15);

        r9 = $r6;

        goto label7;

     label3:
        $l6 = r0.<org.tukaani.xz.BCJDecoder: long filterID>;

        $b7 = $l6 cmp 7L;

        if $b7 != 0 goto label4;

        $r5 = new org.tukaani.xz.simple.ARM;

        $i14 = r0.<org.tukaani.xz.BCJDecoder: int startOffset>;

        specialinvoke $r5.<org.tukaani.xz.simple.ARM: void <init>(boolean,int)>(0, $i14);

        r9 = $r5;

        goto label7;

     label4:
        $l8 = r0.<org.tukaani.xz.BCJDecoder: long filterID>;

        $b9 = $l8 cmp 8L;

        if $b9 != 0 goto label5;

        $r4 = new org.tukaani.xz.simple.ARMThumb;

        $i13 = r0.<org.tukaani.xz.BCJDecoder: int startOffset>;

        specialinvoke $r4.<org.tukaani.xz.simple.ARMThumb: void <init>(boolean,int)>(0, $i13);

        r9 = $r4;

        goto label7;

     label5:
        $l10 = r0.<org.tukaani.xz.BCJDecoder: long filterID>;

        $b11 = $l10 cmp 9L;

        if $b11 != 0 goto label6;

        $r3 = new org.tukaani.xz.simple.SPARC;

        $i12 = r0.<org.tukaani.xz.BCJDecoder: int startOffset>;

        specialinvoke $r3.<org.tukaani.xz.simple.SPARC: void <init>(boolean,int)>(0, $i12);

        r9 = $r3;

        goto label7;

     label6:
        $z0 = <org.tukaani.xz.BCJDecoder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label7;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label7:
        $r10 = new org.tukaani.xz.SimpleInputStream;

        specialinvoke $r10.<org.tukaani.xz.SimpleInputStream: void <init>(java.io.InputStream,org.tukaani.xz.simple.SimpleFilter)>(r1, r9);

        return $r10;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r1;
        boolean $z0, $z1;

        $r0 = <org.tukaani.xz.BCJDecoder: java.lang.Class class$org$tukaani$xz$BCJDecoder>;

        if $r0 != null goto label1;

        $r1 = staticinvoke <org.tukaani.xz.BCJDecoder: java.lang.Class class$(java.lang.String)>("org.tukaani.xz.BCJDecoder");

        <org.tukaani.xz.BCJDecoder: java.lang.Class class$org$tukaani$xz$BCJDecoder> = $r1;

        goto label2;

     label1:
        $r1 = <org.tukaani.xz.BCJDecoder: java.lang.Class class$org$tukaani$xz$BCJDecoder>;

     label2:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        <org.tukaani.xz.BCJDecoder: boolean $assertionsDisabled> = $z1;

        return;
    }
}
