public class org.bouncycastle.crypto.modes.CTSBlockCipher extends org.bouncycastle.crypto.BufferedBlockCipher
{
    private int blockSize;

    public void <init>(org.bouncycastle.crypto.BlockCipher)
    {
        byte[] $r3;
        org.bouncycastle.crypto.modes.CTSBlockCipher r0;
        java.lang.IllegalArgumentException $r2;
        org.bouncycastle.crypto.BlockCipher r1;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: org.bouncycastle.crypto.modes.CTSBlockCipher;

        r1 := @parameter0: org.bouncycastle.crypto.BlockCipher;

        specialinvoke r0.<org.bouncycastle.crypto.BufferedBlockCipher: void <init>()>();

        $z0 = r1 instanceof org.bouncycastle.crypto.modes.OFBBlockCipher;

        if $z0 != 0 goto label1;

        $z1 = r1 instanceof org.bouncycastle.crypto.modes.CFBBlockCipher;

        if $z1 == 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CTSBlockCipher can only accept ECB, or CBC ciphers");

        throw $r2;

     label2:
        r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: org.bouncycastle.crypto.BlockCipher cipher> = r1;

        $i0 = interfaceinvoke r1.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int blockSize> = $i0;

        $i1 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int blockSize>;

        $i2 = $i1 * 2;

        $r3 = newarray (byte)[$i2];

        r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf> = $r3;

        r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff> = 0;

        return;
    }

    public int getUpdateOutputSize(int)
    {
        byte[] $r1, $r2;
        org.bouncycastle.crypto.modes.CTSBlockCipher r0;
        int i0, $i1, i2, $i3, i4, $i5, $i6, $i7;

        r0 := @this: org.bouncycastle.crypto.modes.CTSBlockCipher;

        i0 := @parameter0: int;

        $i1 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        i2 = i0 + $i1;

        $r1 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $i3 = lengthof $r1;

        i4 = i2 % $i3;

        if i4 != 0 goto label1;

        $r2 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $i6 = lengthof $r2;

        $i7 = i2 - $i6;

        return $i7;

     label1:
        $i5 = i2 - i4;

        return $i5;
    }

    public int getOutputSize(int)
    {
        int i0, $i1, $i2;
        org.bouncycastle.crypto.modes.CTSBlockCipher r0;

        r0 := @this: org.bouncycastle.crypto.modes.CTSBlockCipher;

        i0 := @parameter0: int;

        $i1 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        $i2 = i0 + $i1;

        return $i2;
    }

    public int processByte(byte, byte[], int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        byte[] $r1, $r2, r3, $r4, $r6, $r7;
        org.bouncycastle.crypto.modes.CTSBlockCipher r0;
        byte b4;
        int $i0, $i1, $i2, $i3, i5, $i6, $i7, $i8, i9;
        org.bouncycastle.crypto.BlockCipher $r5;

        r0 := @this: org.bouncycastle.crypto.modes.CTSBlockCipher;

        b4 := @parameter0: byte;

        r3 := @parameter1: byte[];

        i5 := @parameter2: int;

        i9 = 0;

        $i1 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        $r1 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label1;

        $r5 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r4 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        i9 = interfaceinvoke $r5.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r4, 0, r3, i5);

        $r7 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $i7 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int blockSize>;

        $r6 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $i6 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int blockSize>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i7, $r6, 0, $i6);

        $i8 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int blockSize>;

        r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff> = $i8;

     label1:
        $r2 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $i2 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        $i3 = $i2 + 1;

        r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff> = $i3;

        $r2[$i2] = b4;

        return i9;
    }

    public int processBytes(byte[], int, int, byte[], int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException
    {
        byte[] $r1, r2, $r3, $r4, r5, $r6, $r8, $r9, $r10, $r11, $r13, $r14;
        org.bouncycastle.crypto.modes.CTSBlockCipher r0;
        org.bouncycastle.crypto.DataLengthException $r15;
        org.bouncycastle.crypto.BlockCipher $r7, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: org.bouncycastle.crypto.modes.CTSBlockCipher;

        r2 := @parameter0: byte[];

        i16 := @parameter1: int;

        i17 := @parameter2: int;

        r5 := @parameter3: byte[];

        i8 := @parameter4: int;

        if i17 >= 0 goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t have a negative input length!");

        throw $r16;

     label1:
        $i0 = virtualinvoke r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int getBlockSize()>();

        $i1 = virtualinvoke r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int getUpdateOutputSize(int)>(i17);

        if $i1 <= 0 goto label2;

        $i14 = i8 + $i1;

        $i13 = lengthof r5;

        if $i14 <= $i13 goto label2;

        $r15 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r15.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r15;

     label2:
        i18 = 0;

        $r1 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $i3 = lengthof $r1;

        $i2 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        $i15 = $i3 - $i2;

        if i17 <= $i15 goto label4;

        $r4 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $i7 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i16, $r4, $i7, $i15);

        $r7 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r6 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $i9 = interfaceinvoke $r7.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r6, 0, r5, i8);

        i18 = 0 + $i9;

        $r9 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $r8 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, $i0, $r8, 0, $i0);

        r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff> = $i0;

        i17 = i17 - $i15;

        i16 = i16 + $i15;

     label3:
        if i17 <= $i0 goto label4;

        $r10 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $i10 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i16, $r10, $i10, $i0);

        $r12 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r11 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $i11 = i8 + i18;

        $i12 = interfaceinvoke $r12.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r11, 0, r5, $i11);

        i18 = i18 + $i12;

        $r14 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $r13 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, $i0, $r13, 0, $i0);

        i17 = i17 - $i0;

        i16 = i16 + $i0;

        goto label3;

     label4:
        $r3 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $i4 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, i16, $r3, $i4, i17);

        $i5 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        $i6 = $i5 + i17;

        r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff> = $i6;

        return i18;
    }

    public int doFinal(byte[], int) throws org.bouncycastle.crypto.DataLengthException, java.lang.IllegalStateException, org.bouncycastle.crypto.InvalidCipherTextException
    {
        byte[] r1, r3, $r5, $r7, $r9, $r13, $r14, $r16, $r18, $r23, $r24, $r25, r28;
        org.bouncycastle.crypto.modes.CTSBlockCipher r0;
        org.bouncycastle.crypto.DataLengthException $r26, $r27;
        byte $b9, $b10, $b11, $b12, $b20, $b21, $b22, $b23, $b25;
        boolean $z0, $z1, $z2;
        org.bouncycastle.crypto.BlockCipher $r2, $r4, $r6, $r8, $r10, $r12, $r15, $r17, $r19, $r20, $r22;
        org.bouncycastle.crypto.modes.CBCBlockCipher $r11, $r21;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i24, i26, i27, i28, $i29;

        r0 := @this: org.bouncycastle.crypto.modes.CTSBlockCipher;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        $i3 = $i1 + i0;

        $i2 = lengthof r1;

        if $i3 <= $i2 goto label01;

        $r27 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r27.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer to small in doFinal");

        throw $r27;

     label01:
        $r2 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $i4 = interfaceinvoke $r2.<org.bouncycastle.crypto.BlockCipher: int getBlockSize()>();

        $i5 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        i6 = $i5 - $i4;

        r3 = newarray (byte)[$i4];

        $z0 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: boolean forEncryption>;

        if $z0 == 0 goto label09;

        $r15 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r14 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        interfaceinvoke $r15.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r14, 0, r3, 0);

        $i14 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        if $i14 >= $i4 goto label02;

        $r26 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r26.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("need at least one block of input for CTS");

        throw $r26;

     label02:
        i26 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

     label03:
        $r16 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $i15 = lengthof $r16;

        if i26 == $i15 goto label04;

        $r25 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $i24 = i26 - $i4;

        $b25 = r3[$i24];

        $r25[i26] = $b25;

        i26 = i26 + 1;

        goto label03;

     label04:
        i27 = $i4;

     label05:
        $i16 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        if i27 == $i16 goto label06;

        $r24 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $b21 = $r24[i27];

        $i19 = i27 - $i4;

        $b20 = r3[$i19];

        $b22 = $b21 ^ $b20;

        $b23 = (byte) $b22;

        $r24[i27] = $b23;

        i27 = i27 + 1;

        goto label05;

     label06:
        $r17 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $z2 = $r17 instanceof org.bouncycastle.crypto.modes.CBCBlockCipher;

        if $z2 == 0 goto label07;

        $r20 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r21 = (org.bouncycastle.crypto.modes.CBCBlockCipher) $r20;

        $r22 = virtualinvoke $r21.<org.bouncycastle.crypto.modes.CBCBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r23 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        interfaceinvoke $r22.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r23, $i4, r1, i0);

        goto label08;

     label07:
        $r19 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r18 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        interfaceinvoke $r19.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r18, $i4, r1, i0);

     label08:
        $i17 = i0 + $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r1, $i17, i6);

        goto label14;

     label09:
        r28 = newarray (byte)[$i4];

        $r4 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $z1 = $r4 instanceof org.bouncycastle.crypto.modes.CBCBlockCipher;

        if $z1 == 0 goto label10;

        $r10 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r11 = (org.bouncycastle.crypto.modes.CBCBlockCipher) $r10;

        $r12 = virtualinvoke $r11.<org.bouncycastle.crypto.modes.CBCBlockCipher: org.bouncycastle.crypto.BlockCipher getUnderlyingCipher()>();

        $r13 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        interfaceinvoke $r12.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r13, 0, r3, 0);

        goto label11;

     label10:
        $r6 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        $r5 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        interfaceinvoke $r6.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>($r5, 0, r3, 0);

     label11:
        i28 = $i4;

     label12:
        $i29 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        if i28 == $i29 goto label13;

        $i13 = i28 - $i4;

        $i8 = i28 - $i4;

        $b10 = r3[$i8];

        $r9 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        $b9 = $r9[i28];

        $b11 = $b10 ^ $b9;

        $b12 = (byte) $b11;

        r28[$i13] = $b12;

        i28 = i28 + 1;

        goto label12;

     label13:
        $r7 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: byte[] buf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, $i4, r3, 0, i6);

        $r8 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: org.bouncycastle.crypto.BlockCipher cipher>;

        interfaceinvoke $r8.<org.bouncycastle.crypto.BlockCipher: int processBlock(byte[],int,byte[],int)>(r3, 0, r1, i0);

        $i7 = i0 + $i4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r28, 0, r1, $i7, i6);

     label14:
        $i18 = r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: int bufOff>;

        virtualinvoke r0.<org.bouncycastle.crypto.modes.CTSBlockCipher: void reset()>();

        return $i18;
    }
}
