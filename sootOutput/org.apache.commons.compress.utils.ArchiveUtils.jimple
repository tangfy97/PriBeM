public class org.apache.commons.compress.utils.ArchiveUtils extends java.lang.Object
{

    private void <init>()
    {
        org.apache.commons.compress.utils.ArchiveUtils r0;

        r0 := @this: org.apache.commons.compress.utils.ArchiveUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String toString(org.apache.commons.compress.archivers.ArchiveEntry)
    {
        org.apache.commons.compress.archivers.ArchiveEntry r1;
        long $l0;
        char $c1;
        int i2, $i3, $i5;
        java.lang.StringBuilder $r3, $r6;
        java.lang.String $r2, $r4, $r5;
        boolean $z0;

        r1 := @parameter0: org.apache.commons.compress.archivers.ArchiveEntry;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $z0 = interfaceinvoke r1.<org.apache.commons.compress.archivers.ArchiveEntry: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        $c1 = 100;

        goto label2;

     label1:
        $c1 = 45;

     label2:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $l0 = interfaceinvoke r1.<org.apache.commons.compress.archivers.ArchiveEntry: long getSize()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i2 = 7;

     label3:
        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        if i2 <= $i3 goto label4;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i5 = (int) -1;

        i2 = i2 + $i5;

        goto label3;

     label4:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $r4 = interfaceinvoke r1.<org.apache.commons.compress.archivers.ArchiveEntry: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static boolean matchAsciiBuffer(java.lang.String, byte[], int, int)
    {
        byte[] $r1, r2;
        java.lang.RuntimeException $r4;
        int i0, i1, $i2;
        java.lang.String r0;
        java.io.UnsupportedEncodingException $r3;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        $i2 = lengthof $r1;

        $z0 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean isEqual(byte[],int,int,byte[],int,int,boolean)>($r1, 0, $i2, r2, i0, i1, 0);

        return $z0;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static boolean matchAsciiBuffer(java.lang.String, byte[])
    {
        byte[] r1;
        int $i0;
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        $i0 = lengthof r1;

        $z0 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean matchAsciiBuffer(java.lang.String,byte[],int,int)>(r0, r1, 0, $i0);

        return $z0;
    }

    public static byte[] toAsciiBytes(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;
        java.lang.RuntimeException $r3;
        java.io.UnsupportedEncodingException $r2;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("US-ASCII");

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String toAsciiString(byte[])
    {
        byte[] r1;
        java.lang.String $r0;
        java.lang.RuntimeException $r3;
        java.io.UnsupportedEncodingException $r2;

        r1 := @parameter0: byte[];

     label1:
        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>(r1, "US-ASCII");

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String toAsciiString(byte[], int, int)
    {
        byte[] r1;
        int i0, i1;
        java.lang.String $r0;
        java.lang.RuntimeException $r3;
        java.io.UnsupportedEncodingException $r2;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[],int,int,java.lang.String)>(r1, i0, i1, "US-ASCII");

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static boolean isEqual(byte[], int, int, byte[], int, int, boolean)
    {
        byte[] r0, r1;
        byte $b5, $b8, $b11, $b12;
        int i0, i1, i2, i3, $i4, i6, $i7, $i9, $i10, $i13, i14, i15, i16, $i17, $i18;
        boolean z0;

        r1 := @parameter0: byte[];

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        r0 := @parameter3: byte[];

        i3 := @parameter4: int;

        i1 := @parameter5: int;

        z0 := @parameter6: boolean;

        if i0 >= i1 goto label01;

        $i13 = i0;

        goto label02;

     label01:
        $i13 = i1;

     label02:
        i2 = $i13;

        i14 = 0;

     label03:
        if i14 >= i2 goto label05;

        $i9 = i6 + i14;

        $b12 = r1[$i9];

        $i10 = i3 + i14;

        $b11 = r0[$i10];

        $i17 = (int) $b12;

        $i18 = (int) $b11;

        if $i17 == $i18 goto label04;

        return 0;

     label04:
        i14 = i14 + 1;

        goto label03;

     label05:
        if i0 != i1 goto label06;

        return 1;

     label06:
        if z0 == 0 goto label14;

        if i0 <= i1 goto label10;

        i15 = i1;

     label07:
        if i15 >= i0 goto label09;

        $i7 = i6 + i15;

        $b8 = r1[$i7];

        if $b8 == 0 goto label08;

        return 0;

     label08:
        i15 = i15 + 1;

        goto label07;

     label09:
        goto label13;

     label10:
        i16 = i0;

     label11:
        if i16 >= i1 goto label13;

        $i4 = i3 + i16;

        $b5 = r0[$i4];

        if $b5 == 0 goto label12;

        return 0;

     label12:
        i16 = i16 + 1;

        goto label11;

     label13:
        return 1;

     label14:
        return 0;
    }

    public static boolean isEqual(byte[], int, int, byte[], int, int)
    {
        byte[] r0, r1;
        int i0, i1, i2, i3;
        boolean $z0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: byte[];

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $z0 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean isEqual(byte[],int,int,byte[],int,int,boolean)>(r0, i0, i1, r1, i2, i3, 0);

        return $z0;
    }

    public static boolean isEqual(byte[], byte[])
    {
        byte[] r0, r1;
        int $i0, $i1;
        boolean $z0;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $z0 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean isEqual(byte[],int,int,byte[],int,int,boolean)>(r0, 0, $i1, r1, 0, $i0, 0);

        return $z0;
    }

    public static boolean isEqual(byte[], byte[], boolean)
    {
        byte[] r0, r1;
        int $i0, $i1;
        boolean z0, $z1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        z0 := @parameter2: boolean;

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $z1 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean isEqual(byte[],int,int,byte[],int,int,boolean)>(r0, 0, $i1, r1, 0, $i0, z0);

        return $z1;
    }

    public static boolean isEqualWithNull(byte[], int, int, byte[], int, int)
    {
        byte[] r0, r1;
        int i0, i1, i2, i3;
        boolean $z0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: byte[];

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $z0 = staticinvoke <org.apache.commons.compress.utils.ArchiveUtils: boolean isEqual(byte[],int,int,byte[],int,int,boolean)>(r0, i0, i1, r1, i2, i3, 1);

        return $z0;
    }

    public static boolean isArrayZero(byte[], int)
    {
        byte[] r0;
        byte $b1;
        int i0, i2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $b1 = r0[i2];

        if $b1 == 0 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 1;
    }
}
