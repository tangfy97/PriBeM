public class com.hp.hpl.jena.sparql.resultset.CSVInputIterator extends com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorBase
{
    private java.io.BufferedReader reader;
    private com.hp.hpl.jena.sparql.engine.binding.BindingMap binding;
    private int expectedItems;
    private java.util.List vars;
    private long lineNum;

    public void <init>(java.io.BufferedReader, java.util.List)
    {
        java.util.List r2;
        com.hp.hpl.jena.sparql.resultset.CSVInputIterator r0;
        int $i0;
        java.io.BufferedReader r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.CSVInputIterator;

        r1 := @parameter0: java.io.BufferedReader;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: long lineNum> = 1L;

        r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: java.io.BufferedReader reader> = r1;

        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: int expectedItems> = $i0;

        r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: java.util.List vars> = r2;

        return;
    }

    public void output(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        com.hp.hpl.jena.sparql.resultset.CSVInputIterator r1;
        org.apache.jena.atlas.io.IndentedWriter r0;
        com.hp.hpl.jena.sparql.serializer.SerializationContext r2;

        r1 := @this: com.hp.hpl.jena.sparql.resultset.CSVInputIterator;

        r0 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r2 := @parameter1: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        virtualinvoke r0.<org.apache.jena.atlas.io.IndentedWriter: void println(java.lang.String)>("CSVInputIterator");

        return;
    }

    protected boolean hasNextBinding()
    {
        com.hp.hpl.jena.sparql.resultset.CSVInputIterator r0;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r2;
        java.io.BufferedReader $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.CSVInputIterator;

        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: java.io.BufferedReader reader>;

        if $r1 == null goto label2;

        $r2 = r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: com.hp.hpl.jena.sparql.engine.binding.BindingMap binding>;

        if $r2 != null goto label1;

        $z0 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: boolean parseNextBinding()>();

        return $z0;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean parseNextBinding()
    {
        java.lang.Object[] $r12;
        com.hp.hpl.jena.query.QueryException $r11, $r17;
        long $l0, $l1, $l4;
        com.hp.hpl.jena.graph.Node $r9;
        java.lang.Integer $r14;
        java.lang.Long $r13;
        int $i2, $i3, $i5;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r4, $r5, $r7;
        java.lang.String $r2, $r15, $r20, $r22;
        boolean $z0;
        java.io.IOException $r16;
        com.hp.hpl.jena.sparql.core.Var $r10;
        java.util.List $r3, $r6;
        com.hp.hpl.jena.sparql.resultset.CSVInputIterator r0;
        java.lang.Object $r8;
        java.lang.StringBuilder $r18, $r19, $r21;
        java.io.BufferedReader $r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.CSVInputIterator;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: java.io.BufferedReader reader>;

        $r2 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r2 != null goto label3;

     label2:
        return 0;

     label3:
        $l0 = r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: long lineNum>;

        $l1 = $l0 + 1L;

        r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: long lineNum> = $l1;

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        $r17 = new com.hp.hpl.jena.query.QueryException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing CSV results - ");

        $r20 = virtualinvoke $r16.<java.io.IOException: java.lang.String getMessage()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label6:
        $z0 = virtualinvoke $r2.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label9;

        $i2 = r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: int expectedItems>;

        if $i2 <= 1 goto label7;

        $r11 = new com.hp.hpl.jena.query.QueryException;

        $r12 = newarray (java.lang.Object)[2];

        $l4 = r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: long lineNum>;

        $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r12[0] = $r13;

        $i5 = r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: int expectedItems>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r12[1] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error Parsing CSV results at Line %d - The result row had 0/1 values when %d were expected", $r12);

        specialinvoke $r11.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r15);

        throw $r11;

     label7:
        $r5 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create()>();

        r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: com.hp.hpl.jena.sparql.engine.binding.BindingMap binding> = $r5;

        $i3 = r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: int expectedItems>;

        if $i3 != 1 goto label8;

        $r7 = r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: com.hp.hpl.jena.sparql.engine.binding.BindingMap binding>;

        $r6 = r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: java.util.List vars>;

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (com.hp.hpl.jena.sparql.core.Var) $r8;

        $r9 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node emptyString>;

        interfaceinvoke $r7.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r10, $r9);

     label8:
        return 1;

     label9:
        $r3 = r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: java.util.List vars>;

        $r4 = specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: com.hp.hpl.jena.sparql.engine.binding.BindingMap parseLine(java.util.List,java.lang.String)>($r3, $r2);

        r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: com.hp.hpl.jena.sparql.engine.binding.BindingMap binding> = $r4;

        return 1;

        catch java.io.IOException from label1 to label2 with label5;
        catch java.io.IOException from label3 to label4 with label5;
    }

    private com.hp.hpl.jena.sparql.engine.binding.BindingMap parseLine(java.util.List, java.lang.String)
    {
        com.hp.hpl.jena.graph.Node $r8;
        java.lang.Integer $r13, $r14;
        java.lang.Long $r12, $r19, $r23;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap $r0;
        java.util.List r3;
        java.lang.StringBuilder $r27;
        java.lang.Object[] $r10, $r18, $r22;
        com.hp.hpl.jena.query.QueryException $r28, $r29, $r30;
        long $l4, $l12, $l13;
        java.util.ArrayList $r26;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8, $i9, $i10, $i15, i17, $i19, i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29;
        java.lang.String r2, $r7, $r15, $r20, $r24, $r25;
        char $c7, $c11, $c14, $c16, c18;
        com.hp.hpl.jena.sparql.core.Var $r5;
        com.hp.hpl.jena.sparql.resultset.CSVInputIterator r11;
        java.lang.Object $r4, $r6;

        r11 := @this: com.hp.hpl.jena.sparql.resultset.CSVInputIterator;

        r3 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.String;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.engine.binding.BindingFactory: com.hp.hpl.jena.sparql.engine.binding.BindingMap create()>();

        $r26 = new java.util.ArrayList;

        specialinvoke $r26.<java.util.ArrayList: void <init>()>();

        i17 = 0;

     label01:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if i17 >= $i0 goto label12;

        $c7 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i17);

        c18 = $c7;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $i21 = (int) $c7;

        if $i21 == 34 goto label02;

        $i22 = (int) $c7;

        if $i22 != 39 goto label08;

     label02:
        i17 = i17 + 1;

     label03:
        $i19 = virtualinvoke r2.<java.lang.String: int length()>();

        if i17 >= $i19 goto label05;

        $c14 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i17);

        c18 = $c14;

        i17 = i17 + 1;

        $i23 = (int) $c14;

        $i24 = (int) $c7;

        if $i23 != $i24 goto label04;

        goto label05;

     label04:
        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c14);

        goto label03;

     label05:
        $i25 = (int) c18;

        $i26 = (int) $c7;

        if $i25 == $i26 goto label06;

        $r28 = new com.hp.hpl.jena.query.QueryException;

        $r22 = newarray (java.lang.Object)[1];

        $l13 = r11.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: long lineNum>;

        $r23 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l13);

        $r22[0] = $r23;

        $r24 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error Parsing CSV results at Line %d  - Unterminated quoted string", $r22);

        specialinvoke $r28.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r24);

        throw $r28;

     label06:
        $i8 = virtualinvoke r2.<java.lang.String: int length()>();

        if i17 >= $i8 goto label07;

        $c11 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i17);

        c18 = $c11;

        $i27 = (int) $c11;

        if $i27 == 44 goto label07;

        $r29 = new com.hp.hpl.jena.query.QueryException;

        $r18 = newarray (java.lang.Object)[1];

        $l12 = r11.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: long lineNum>;

        $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l12);

        $r18[0] = $r19;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error Parsing CSV results at Line %d - Expected comma after quote", $r18);

        specialinvoke $r29.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r20);

        throw $r29;

     label07:
        goto label10;

     label08:
        $i15 = virtualinvoke r2.<java.lang.String: int length()>();

        if i17 >= $i15 goto label10;

        $c16 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i17);

        c18 = $c16;

        $i28 = (int) $c16;

        if $i28 != 44 goto label09;

        goto label10;

     label09:
        i17 = i17 + 1;

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c16);

        goto label08;

     label10:
        $r25 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>($r25);

        $i29 = (int) c18;

        if $i29 != 44 goto label11;

        $i9 = virtualinvoke r2.<java.lang.String: int length()>();

        $i10 = $i9 - 1;

        if i17 != $i10 goto label11;

        interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>("");

        goto label12;

     label11:
        i17 = i17 + 1;

        goto label01;

     label12:
        $i1 = interfaceinvoke $r26.<java.util.List: int size()>();

        $i2 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i1 == $i2 goto label13;

        $r30 = new com.hp.hpl.jena.query.QueryException;

        $r10 = newarray (java.lang.Object)[4];

        $l4 = r11.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: long lineNum>;

        $r12 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r10[0] = $r12;

        $r10[1] = r2;

        $i5 = interfaceinvoke $r26.<java.util.List: int size()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r10[2] = $r13;

        $i6 = interfaceinvoke r3.<java.util.List: int size()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r10[3] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Error Parsing CSV results at Line %d - The result row \'%s\' has %d items when %d was expected", $r10);

        specialinvoke $r30.<com.hp.hpl.jena.query.QueryException: void <init>(java.lang.String)>($r15);

        throw $r30;

     label13:
        i20 = 0;

     label14:
        $i3 = interfaceinvoke r3.<java.util.List: int size()>();

        if i20 >= $i3 goto label15;

        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i20);

        $r5 = (com.hp.hpl.jena.sparql.core.Var) $r4;

        $r6 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>(i20);

        $r7 = (java.lang.String) $r6;

        $r8 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)>($r7);

        interfaceinvoke $r0.<com.hp.hpl.jena.sparql.engine.binding.BindingMap: void add(com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node)>($r5, $r8);

        i20 = i20 + 1;

        goto label14;

     label15:
        return $r0;
    }

    protected com.hp.hpl.jena.sparql.engine.binding.Binding moveToNextBinding()
    {
        com.hp.hpl.jena.sparql.resultset.CSVInputIterator r0;
        com.hp.hpl.jena.sparql.engine.binding.BindingMap r1;
        java.util.NoSuchElementException $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.CSVInputIterator;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r2 = new java.util.NoSuchElementException;

        specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>();

        throw $r2;

     label1:
        r1 = r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: com.hp.hpl.jena.sparql.engine.binding.BindingMap binding>;

        r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: com.hp.hpl.jena.sparql.engine.binding.BindingMap binding> = null;

        return r1;
    }

    protected void closeIterator()
    {
        com.hp.hpl.jena.sparql.resultset.CSVInputIterator r0;
        java.io.BufferedReader $r1;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.CSVInputIterator;

        $r1 = r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: java.io.BufferedReader reader>;

        staticinvoke <org.apache.jena.atlas.io.IO: void close(java.io.Closeable)>($r1);

        r0.<com.hp.hpl.jena.sparql.resultset.CSVInputIterator: java.io.BufferedReader reader> = null;

        return;
    }

    protected void requestCancel()
    {
        com.hp.hpl.jena.sparql.resultset.CSVInputIterator r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.CSVInputIterator;

        return;
    }
}
