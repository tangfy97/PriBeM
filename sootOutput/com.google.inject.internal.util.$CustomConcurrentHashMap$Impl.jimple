class com.google.inject.internal.util.$CustomConcurrentHashMap$Impl extends java.util.AbstractMap implements java.util.concurrent.ConcurrentMap, java.io.Serializable
{
    static final int MAXIMUM_CAPACITY;
    static final int MAX_SEGMENTS;
    static final int RETRIES_BEFORE_LOCK;
    final com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy;
    final int segmentMask;
    final int segmentShift;
    final com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] segments;
    final float loadFactor;
    java.util.Set keySet;
    java.util.Collection values;
    java.util.Set entrySet;
    private static final long serialVersionUID;

    void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy, com.google.inject.internal.util.$CustomConcurrentHashMap$Builder)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Builder r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$InternalsImpl $r5;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] $r2, $r3, $r7;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy r4;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r6;
        float $f0;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r4 := @parameter0: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy;

        r1 := @parameter1: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder;

        specialinvoke r0.<java.util.AbstractMap: void <init>()>();

        $f0 = r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Builder: float loadFactor>;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: float loadFactor> = $f0;

        i5 = r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Builder: int concurrencyLevel>;

        i6 = r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Builder: int initialCapacity>;

        if i5 <= 65536 goto label1;

        i5 = 65536;

     label1:
        i7 = 0;

        i8 = 1;

     label2:
        if i8 >= i5 goto label3;

        i7 = i7 + 1;

        i8 = i8 << 1;

        goto label2;

     label3:
        $i0 = 32 - i7;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int segmentShift> = $i0;

        $i1 = i8 - 1;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int segmentMask> = $i1;

        $r2 = virtualinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] newSegmentArray(int)>(i8);

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] segments> = $r2;

        if i6 <= 1073741824 goto label4;

        i6 = 1073741824;

     label4:
        $i4 = i6 / i8;

        i9 = $i4;

        $i2 = $i4 * i8;

        if $i2 >= i6 goto label5;

        i9 = $i4 + 1;

     label5:
        i10 = 1;

     label6:
        if i10 >= i9 goto label7;

        i10 = i10 << 1;

        goto label6;

     label7:
        i11 = 0;

     label8:
        $r3 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] segments>;

        $i3 = lengthof $r3;

        if i11 >= $i3 goto label9;

        $r7 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] segments>;

        $r6 = new com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        specialinvoke $r6.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$Impl,int)>(r0, i10);

        $r7[i11] = $r6;

        i11 = i11 + 1;

        goto label8;

     label9:
        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy> = r4;

        $r5 = new com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$InternalsImpl;

        specialinvoke $r5.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$InternalsImpl: void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$Impl)>(r0);

        interfaceinvoke r4.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: void setInternals(com.google.inject.internal.util.$CustomConcurrentHashMap$Internals)>($r5);

        return;
    }

    int hash(java.lang.Object)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy $r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r0;
        int $i0, $i1;
        java.lang.Object r1;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        $i0 = interfaceinvoke $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy: int hashKey(java.lang.Object)>(r1);

        $i1 = staticinvoke <com.google.inject.internal.util.$CustomConcurrentHashMap: int access$000(int)>($i0);

        return $i1;
    }

    com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] newSegmentArray(int)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] $r1, $r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r3;
        int i0;
        java.lang.Object $r0;

        r3 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(class "Lcom/google/inject/internal/util/$CustomConcurrentHashMap$Impl$Segment;", i0);

        $r1 = (com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[]) $r0;

        $r2 = (com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[]) $r1;

        return $r2;
    }

    com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment segmentFor(int)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] $r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r0;
        int i0, $i1, $i2, $i3, $i4;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r2;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        i0 := @parameter0: int;

        $r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] segments>;

        $i1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int segmentShift>;

        $i3 = i0 >>> $i1;

        $i2 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int segmentMask>;

        $i4 = $i3 & $i2;

        $r2 = $r1[$i4];

        return $r2;
    }

    public boolean isEmpty()
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r0;
        int[] r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r3, $r4, $r5, $r6;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] segments>;

        $i0 = lengthof r1;

        r2 = newarray (int)[$i0];

        i8 = 0;

        i9 = 0;

     label1:
        $i1 = lengthof r1;

        if i9 >= $i1 goto label3;

        $r5 = r1[i9];

        $i6 = $r5.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        if $i6 == 0 goto label2;

        return 0;

     label2:
        $r6 = r1[i9];

        $i7 = $r6.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount>;

        r2[i9] = $i7;

        i8 = i8 + $i7;

        i9 = i9 + 1;

        goto label1;

     label3:
        if i8 == 0 goto label7;

        i10 = 0;

     label4:
        $i2 = lengthof r1;

        if i10 >= $i2 goto label7;

        $r3 = r1[i10];

        $i3 = $r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        if $i3 != 0 goto label5;

        $i5 = r2[i10];

        $r4 = r1[i10];

        $i4 = $r4.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount>;

        if $i5 == $i4 goto label6;

     label5:
        return 0;

     label6:
        i10 = i10 + 1;

        goto label4;

     label7:
        return 1;
    }

    public int size()
    {
        byte $b1, $b2, $b21;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r0;
        int[] r2;
        long $l5, $l9, $l13, l15, l16;
        int $i0, $i3, $i4, $i6, $i7, $i8, $i10, $i11, $i12, $i14, i17, i18, i19, i20, i22, i23, i24, i25, i26, i27, $i28;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r3, $r4, $r5, $r6, r7, r8, r9;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] segments>;

        l15 = 0L;

        l16 = 0L;

        $i0 = lengthof r1;

        r2 = newarray (int)[$i0];

        i17 = 0;

     label01:
        if i17 >= 2 goto label08;

        l16 = 0L;

        l15 = 0L;

        i18 = 0;

        i19 = 0;

     label02:
        $i6 = lengthof r1;

        if i19 >= $i6 goto label03;

        $r5 = r1[i19];

        $i12 = $r5.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        $l13 = (long) $i12;

        l15 = l15 + $l13;

        $r6 = r1[i19];

        $i14 = $r6.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount>;

        r2[i19] = $i14;

        i18 = i18 + $i14;

        i19 = i19 + 1;

        goto label02;

     label03:
        if i18 == 0 goto label06;

        i20 = 0;

     label04:
        $i7 = lengthof r1;

        if i20 >= $i7 goto label06;

        $r3 = r1[i20];

        $i8 = $r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        $l9 = (long) $i8;

        l16 = l16 + $l9;

        $i11 = r2[i20];

        $r4 = r1[i20];

        $i10 = $r4.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount>;

        if $i11 == $i10 goto label05;

        l16 = -1L;

        goto label06;

     label05:
        i20 = i20 + 1;

        goto label04;

     label06:
        $b21 = l16 cmp l15;

        if $b21 != 0 goto label07;

        goto label08;

     label07:
        i17 = i17 + 1;

        goto label01;

     label08:
        $b1 = l16 cmp l15;

        if $b1 == 0 goto label14;

        l15 = 0L;

        i22 = lengthof r1;

        i23 = 0;

     label09:
        if i23 >= i22 goto label10;

        r7 = r1[i23];

        virtualinvoke r7.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void lock()>();

        i23 = i23 + 1;

        goto label09;

     label10:
        i24 = lengthof r1;

        i25 = 0;

     label11:
        if i25 >= i24 goto label12;

        r8 = r1[i25];

        $i4 = r8.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        $l5 = (long) $i4;

        l15 = l15 + $l5;

        i25 = i25 + 1;

        goto label11;

     label12:
        i26 = lengthof r1;

        i27 = 0;

     label13:
        if i27 >= i26 goto label14;

        r9 = r1[i27];

        virtualinvoke r9.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        i27 = i27 + 1;

        goto label13;

     label14:
        $b2 = l15 cmp 2147483647L;

        $i28 = (int) $b2;

        if $i28 <= 0 goto label15;

        return 2147483647;

     label15:
        $i3 = (int) l15;

        return $i3;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r1;
        int $i0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r2;
        java.lang.Object r0, $r3;
        java.lang.NullPointerException $r4;

        r1 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("key");

        throw $r4;

     label1:
        $i0 = virtualinvoke r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int hash(java.lang.Object)>(r0);

        $r2 = virtualinvoke r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment segmentFor(int)>($i0);

        $r3 = virtualinvoke $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.lang.Object get(java.lang.Object,int)>(r0, $i0);

        return $r3;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r1;
        int $i0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r2;
        java.lang.Object r0;
        java.lang.NullPointerException $r3;
        boolean $z0;

        r1 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("key");

        throw $r3;

     label1:
        $i0 = virtualinvoke r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int hash(java.lang.Object)>(r0);

        $r2 = virtualinvoke r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment segmentFor(int)>($i0);

        $z0 = virtualinvoke $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: boolean containsKey(java.lang.Object,int)>(r0, $i0);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        java.lang.NullPointerException $r9;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r1;
        int[] r3;
        boolean $z0, $z1, z2, z3;
        java.lang.Throwable $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r4, $r5, $r6, $r7, $r8, r11, r12, r13, r14;
        java.lang.Object r0;

        r1 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("value");

        throw $r9;

     label01:
        r2 = r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] segments>;

        $i0 = lengthof r2;

        r3 = newarray (int)[$i0];

        i8 = 0;

     label02:
        if i8 >= 2 goto label10;

        i9 = 0;

        i10 = 0;

     label03:
        $i2 = lengthof r2;

        if i10 >= $i2 goto label05;

        $r6 = r2[i10];

        i11 = $r6.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        $r7 = r2[i10];

        $i6 = $r7.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount>;

        r3[i10] = $i6;

        i9 = i9 + $i6;

        $r8 = r2[i10];

        $z1 = virtualinvoke $r8.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: boolean containsValue(java.lang.Object)>(r0);

        if $z1 == 0 goto label04;

        return 1;

     label04:
        i10 = i10 + 1;

        goto label03;

     label05:
        z2 = 1;

        if i9 == 0 goto label08;

        i12 = 0;

     label06:
        $i3 = lengthof r2;

        if i12 >= $i3 goto label08;

        $r4 = r2[i12];

        i13 = $r4.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        $i5 = r3[i12];

        $r5 = r2[i12];

        $i4 = $r5.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount>;

        if $i5 == $i4 goto label07;

        z2 = 0;

        goto label08;

     label07:
        i12 = i12 + 1;

        goto label06;

     label08:
        if z2 == 0 goto label09;

        return 0;

     label09:
        i8 = i8 + 1;

        goto label02;

     label10:
        i14 = lengthof r2;

        i15 = 0;

     label11:
        if i15 >= i14 goto label12;

        r12 = r2[i15];

        virtualinvoke r12.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void lock()>();

        i15 = i15 + 1;

        goto label11;

     label12:
        z3 = 0;

     label13:
        i16 = lengthof r2;

        i17 = 0;

     label14:
        if i17 >= i16 goto label16;

        r13 = r2[i17];

        $z0 = virtualinvoke r13.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: boolean containsValue(java.lang.Object)>(r0);

        if $z0 == 0 goto label15;

        z3 = 1;

        goto label16;

     label15:
        i17 = i17 + 1;

        goto label14;

     label16:
        $i1 = lengthof r2;

        i18 = 0;

     label17:
        if i18 >= $i1 goto label18;

        r14 = r2[i18];

        virtualinvoke r14.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        i18 = i18 + 1;

        goto label17;

     label18:
        goto label23;

     label19:
        $r10 := @caughtexception;

     label20:
        i7 = lengthof r2;

        i19 = 0;

     label21:
        if i19 >= i7 goto label22;

        r11 = r2[i19];

        virtualinvoke r11.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        i19 = i19 + 1;

        goto label21;

     label22:
        throw $r10;

     label23:
        return z3;

        catch java.lang.Throwable from label13 to label16 with label19;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    public java.lang.Object put(java.lang.Object, java.lang.Object)
    {
        java.lang.NullPointerException $r5, $r6;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r2;
        int $i0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r3;
        java.lang.Object r0, r1, $r4;

        r2 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("key");

        throw $r6;

     label1:
        if r1 != null goto label2;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("value");

        throw $r5;

     label2:
        $i0 = virtualinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int hash(java.lang.Object)>(r0);

        $r3 = virtualinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment segmentFor(int)>($i0);

        $r4 = virtualinvoke $r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>(r0, $i0, r1, 0);

        return $r4;
    }

    public java.lang.Object putIfAbsent(java.lang.Object, java.lang.Object)
    {
        java.lang.NullPointerException $r5, $r6;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r2;
        int $i0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r3;
        java.lang.Object r0, r1, $r4;

        r2 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("key");

        throw $r6;

     label1:
        if r1 != null goto label2;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("value");

        throw $r5;

     label2:
        $i0 = virtualinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int hash(java.lang.Object)>(r0);

        $r3 = virtualinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment segmentFor(int)>($i0);

        $r4 = virtualinvoke $r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>(r0, $i0, r1, 1);

        return $r4;
    }

    public void putAll(java.util.Map)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r5;
        java.util.Map r0;
        java.lang.Object $r3, $r6, $r7;
        boolean $z0;

        r5 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r0 := @parameter0: java.util.Map;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r5.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        goto label1;

     label2:
        return;
    }

    public java.lang.Object remove(java.lang.Object)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r1;
        int $i0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r2;
        java.lang.Object r0, $r3;
        java.lang.NullPointerException $r4;

        r1 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("key");

        throw $r4;

     label1:
        $i0 = virtualinvoke r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int hash(java.lang.Object)>(r0);

        $r2 = virtualinvoke r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment segmentFor(int)>($i0);

        $r3 = virtualinvoke $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.lang.Object remove(java.lang.Object,int)>(r0, $i0);

        return $r3;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r1;
        int $i0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r2;
        java.lang.Object r0, r3;
        java.lang.NullPointerException $r4;
        boolean $z0;

        r1 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r0 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new java.lang.NullPointerException;

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("key");

        throw $r4;

     label1:
        $i0 = virtualinvoke r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int hash(java.lang.Object)>(r0);

        $r2 = virtualinvoke r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment segmentFor(int)>($i0);

        $z0 = virtualinvoke $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: boolean remove(java.lang.Object,int,java.lang.Object)>(r0, $i0, r3);

        return $z0;
    }

    public boolean replace(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.NullPointerException $r5, $r6, $r7;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r3;
        int $i0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r4;
        java.lang.Object r0, r1, r2;
        boolean $z0;

        r3 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        if r0 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>("key");

        throw $r7;

     label1:
        if r1 != null goto label2;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("oldValue");

        throw $r6;

     label2:
        if r2 != null goto label3;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("newValue");

        throw $r5;

     label3:
        $i0 = virtualinvoke r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int hash(java.lang.Object)>(r0);

        $r4 = virtualinvoke r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment segmentFor(int)>($i0);

        $z0 = virtualinvoke $r4.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)>(r0, $i0, r1, r2);

        return $z0;
    }

    public java.lang.Object replace(java.lang.Object, java.lang.Object)
    {
        java.lang.NullPointerException $r5, $r6;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r2;
        int $i0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r3;
        java.lang.Object r0, r1, $r4;

        r2 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r6 = new java.lang.NullPointerException;

        specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("key");

        throw $r6;

     label1:
        if r1 != null goto label2;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>("value");

        throw $r5;

     label2:
        $i0 = virtualinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int hash(java.lang.Object)>(r0);

        $r3 = virtualinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment segmentFor(int)>($i0);

        $r4 = virtualinvoke $r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.lang.Object replace(java.lang.Object,int,java.lang.Object)>(r0, $i0, r1);

        return $r4;
    }

    public void clear()
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] r1;
        int i0, i1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment r2;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] segments>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        virtualinvoke r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void clear()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public java.util.Set keySet()
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$KeySet $r3;
        java.util.Set r1, $r2;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: java.util.Set keySet>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$KeySet;

        $r2 = $r3;

        specialinvoke $r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$KeySet: void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$Impl)>(r0);

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: java.util.Set keySet> = $r3;

     label2:
        return $r2;
    }

    public java.util.Collection values()
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r0;
        java.util.Collection r1, $r2;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Values $r3;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: java.util.Collection values>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Values;

        $r2 = $r3;

        specialinvoke $r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Values: void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$Impl)>(r0);

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: java.util.Collection values> = $r3;

     label2:
        return $r2;
    }

    public java.util.Set entrySet()
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r0;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet $r3;
        java.util.Set r1, $r2;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r1 = r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: java.util.Set entrySet>;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet;

        $r2 = $r3;

        specialinvoke $r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$EntrySet: void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$Impl)>(r0);

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: java.util.Set entrySet> = $r3;

     label2:
        return $r2;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.util.Map$Entry r7;
        java.util.Iterator $r5;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] $r2;
        java.util.Set $r4;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy $r3;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r1;
        int $i0, $i1;
        float $f0;
        java.io.ObjectOutputStream r0;
        java.lang.Object $r6, $r8, $r9;
        boolean $z0;

        r1 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r0 := @parameter0: java.io.ObjectOutputStream;

        $i0 = virtualinvoke r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int size()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i0);

        $f0 = r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: float loadFactor>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeFloat(float)>($f0);

        $r2 = r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] segments>;

        $i1 = lengthof $r2;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeInt(int)>($i1);

        $r3 = r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy strategy>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        $r4 = virtualinvoke r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r8);

        $r9 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r9);

        goto label1;

     label2:
        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(null);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Float $r5;
        java.io.ObjectInputStream r0;
        java.lang.Integer $r7, $r9;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl r3;
        java.lang.IllegalAccessException $r18;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy r2;
        float $f0;
        java.lang.AssertionError $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12, i13;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] $r11, $r12, $r17;
        java.lang.reflect.Field $r4, $r6, $r8, $r10, $r13;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r16;
        java.lang.Object $r1, $r14, $r15;

        r3 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl;

        r0 := @parameter0: java.io.ObjectInputStream;

     label01:
        $i0 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        i7 = $i0;

        $f0 = virtualinvoke r0.<java.io.ObjectInputStream: float readFloat()>();

        $i1 = virtualinvoke r0.<java.io.ObjectInputStream: int readInt()>();

        i8 = $i1;

        $r1 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r2 = (com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy) $r1;

        $r4 = <com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Fields: java.lang.reflect.Field loadFactor>;

        $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0);

        virtualinvoke $r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r3, $r5);

        if $i1 <= 65536 goto label02;

        i8 = 65536;

     label02:
        i9 = 0;

        i10 = 1;

     label03:
        if i10 >= i8 goto label04;

        i9 = i9 + 1;

        i10 = i10 << 1;

        goto label03;

     label04:
        $r6 = <com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Fields: java.lang.reflect.Field segmentShift>;

        $i2 = 32 - i9;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r6.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r3, $r7);

        $r8 = <com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Fields: java.lang.reflect.Field segmentMask>;

        $i3 = i10 - 1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r8.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r3, $r9);

        $r10 = <com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Fields: java.lang.reflect.Field segments>;

        $r11 = virtualinvoke r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] newSegmentArray(int)>(i10);

        virtualinvoke $r10.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r3, $r11);

        if $i0 <= 1073741824 goto label05;

        i7 = 1073741824;

     label05:
        $i6 = i7 / i10;

        i11 = $i6;

        $i4 = $i6 * i10;

        if $i4 >= i7 goto label06;

        i11 = $i6 + 1;

     label06:
        i12 = 1;

     label07:
        if i12 >= i11 goto label08;

        i12 = i12 << 1;

        goto label07;

     label08:
        i13 = 0;

     label09:
        $r12 = r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] segments>;

        $i5 = lengthof $r12;

        if i13 >= $i5 goto label10;

        $r17 = r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment[] segments>;

        $r16 = new com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment;

        specialinvoke $r16.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$Impl,int)>(r3, i12);

        $r17[i13] = $r16;

        i13 = i13 + 1;

        goto label09;

     label10:
        $r13 = <com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Fields: java.lang.reflect.Field strategy>;

        virtualinvoke $r13.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r3, r2);

     label11:
        $r14 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        if $r14 != null goto label12;

        goto label13;

     label12:
        $r15 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        virtualinvoke r3.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

        goto label11;

     label13:
        goto label15;

     label14:
        $r18 := @caughtexception;

        $r19 = new java.lang.AssertionError;

        specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>($r18);

        throw $r19;

     label15:
        return;

        catch java.lang.IllegalAccessException from label01 to label13 with label14;
    }

    public static void <clinit>()
    {
        <com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: long serialVersionUID> = 0L;

        <com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int RETRIES_BEFORE_LOCK> = 2;

        <com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int MAX_SEGMENTS> = 65536;

        <com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: int MAXIMUM_CAPACITY> = 1073741824;

        return;
    }
}
