class org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter extends org.apache.lucene.search.Filter
{
    protected final org.apache.lucene.search.MultiTermQuery query;
    static final boolean $assertionsDisabled;

    protected void <init>(org.apache.lucene.search.MultiTermQuery)
    {
        org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter r0;
        org.apache.lucene.search.MultiTermQuery r1;

        r0 := @this: org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter;

        r1 := @parameter0: org.apache.lucene.search.MultiTermQuery;

        specialinvoke r0.<org.apache.lucene.search.Filter: void <init>()>();

        r0.<org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter: org.apache.lucene.search.MultiTermQuery query> = r1;

        return;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter r0;
        java.lang.String $r2;
        org.apache.lucene.search.MultiTermQuery $r1;

        r0 := @this: org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter;

        $r1 = r0.<org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter: org.apache.lucene.search.MultiTermQuery query>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.search.MultiTermQuery: java.lang.String toString()>();

        return $r2;
    }

    public final boolean equals(java.lang.Object)
    {
        org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter r1, $r4;
        org.apache.lucene.search.MultiTermQuery $r5, $r6;
        java.lang.Object r0;
        java.lang.Class $r2, $r3;
        boolean $z0, $z1;

        r1 := @this: org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        if r0 != null goto label2;

        return 0;

     label2:
        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $r6 = r1.<org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter: org.apache.lucene.search.MultiTermQuery query>;

        $r4 = (org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter) r0;

        $r5 = $r4.<org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter: org.apache.lucene.search.MultiTermQuery query>;

        $z1 = virtualinvoke $r6.<org.apache.lucene.search.MultiTermQuery: boolean equals(java.lang.Object)>($r5);

        return $z1;

     label3:
        return 0;
    }

    public final int hashCode()
    {
        org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter r0;
        int $i0;
        org.apache.lucene.search.MultiTermQuery $r1;

        r0 := @this: org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter;

        $r1 = r0.<org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter: org.apache.lucene.search.MultiTermQuery query>;

        $i0 = virtualinvoke $r1.<org.apache.lucene.search.MultiTermQuery: int hashCode()>();

        return $i0;
    }

    public final java.lang.String getField()
    {
        org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter r0;
        java.lang.String $r2;
        org.apache.lucene.search.MultiTermQuery $r1;

        r0 := @this: org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter;

        $r1 = r0.<org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter: org.apache.lucene.search.MultiTermQuery query>;

        $r2 = virtualinvoke $r1.<org.apache.lucene.search.MultiTermQuery: java.lang.String getField()>();

        return $r2;
    }

    public org.apache.lucene.search.DocIdSet getDocIdSet(org.apache.lucene.index.AtomicReaderContext, org.apache.lucene.util.Bits) throws java.io.IOException
    {
        long $l1, $l2;
        java.lang.AssertionError $r20;
        org.apache.lucene.search.DocIdSet $r12;
        org.apache.lucene.search.MultiTermQuery $r4, $r9;
        byte $b3;
        org.apache.lucene.index.TermsEnum $r10;
        int $i0, $i4, $i5;
        java.lang.String $r5;
        org.apache.lucene.index.SortedDocValues $r6;
        org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter$1 $r19;
        org.apache.lucene.util.Bits r16;
        org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter$2 $r21;
        boolean $z0;
        org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter r3;
        org.apache.lucene.search.FieldCache $r1;
        org.apache.lucene.util.BytesRef $r11, $r13;
        org.apache.lucene.util.OpenBitSet $r18;
        org.apache.lucene.index.AtomicReaderContext r0;
        org.apache.lucene.index.AtomicReader $r2, $r15;

        r3 := @this: org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter;

        r0 := @parameter0: org.apache.lucene.index.AtomicReaderContext;

        r16 := @parameter1: org.apache.lucene.util.Bits;

        $r1 = <org.apache.lucene.search.FieldCache: org.apache.lucene.search.FieldCache DEFAULT>;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $r4 = r3.<org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter: org.apache.lucene.search.MultiTermQuery query>;

        $r5 = $r4.<org.apache.lucene.search.MultiTermQuery: java.lang.String field>;

        $r6 = interfaceinvoke $r1.<org.apache.lucene.search.FieldCache: org.apache.lucene.index.SortedDocValues getTermsIndex(org.apache.lucene.index.AtomicReader,java.lang.String)>($r2, $r5);

        $r18 = new org.apache.lucene.util.OpenBitSet;

        $i0 = virtualinvoke $r6.<org.apache.lucene.index.SortedDocValues: int getValueCount()>();

        $l1 = (long) $i0;

        specialinvoke $r18.<org.apache.lucene.util.OpenBitSet: void <init>(long)>($l1);

        $r9 = r3.<org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter: org.apache.lucene.search.MultiTermQuery query>;

        $r19 = new org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter$1;

        specialinvoke $r19.<org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter$1: void <init>(org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter,org.apache.lucene.index.SortedDocValues)>(r3, $r6);

        $r10 = virtualinvoke $r9.<org.apache.lucene.search.MultiTermQuery: org.apache.lucene.index.TermsEnum getTermsEnum(org.apache.lucene.index.Terms)>($r19);

        $z0 = <org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if $r10 != null goto label1;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label1:
        $r11 = virtualinvoke $r10.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        if $r11 == null goto label4;

     label2:
        $l2 = virtualinvoke $r10.<org.apache.lucene.index.TermsEnum: long ord()>();

        $b3 = $l2 cmp 0L;

        $i5 = (int) $b3;

        if $i5 < 0 goto label3;

        virtualinvoke $r18.<org.apache.lucene.util.OpenBitSet: void set(long)>($l2);

     label3:
        $r13 = virtualinvoke $r10.<org.apache.lucene.index.TermsEnum: org.apache.lucene.util.BytesRef next()>();

        if $r13 != null goto label2;

        goto label5;

     label4:
        $r12 = <org.apache.lucene.search.DocIdSet: org.apache.lucene.search.DocIdSet EMPTY_DOCIDSET>;

        return $r12;

     label5:
        $r21 = new org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter$2;

        $r15 = virtualinvoke r0.<org.apache.lucene.index.AtomicReaderContext: org.apache.lucene.index.AtomicReader reader()>();

        $i4 = virtualinvoke $r15.<org.apache.lucene.index.AtomicReader: int maxDoc()>();

        specialinvoke $r21.<org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter$2: void <init>(org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter,int,org.apache.lucene.util.Bits,org.apache.lucene.index.SortedDocValues,org.apache.lucene.util.OpenBitSet)>(r3, $i4, r16, $r6, $r18);

        return $r21;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/search/FieldCacheRewriteMethod;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.search.FieldCacheRewriteMethod$MultiTermQueryFieldCacheWrapperFilter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
