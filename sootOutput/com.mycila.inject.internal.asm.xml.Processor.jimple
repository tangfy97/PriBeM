public class com.mycila.inject.internal.asm.xml.Processor extends java.lang.Object
{
    public static final int BYTECODE;
    public static final int MULTI_XML;
    public static final int SINGLE_XML;
    private static final java.lang.String SINGLE_XML_NAME;
    private final int inRepresentation;
    private final int outRepresentation;
    private final java.io.InputStream input;
    private final java.io.OutputStream output;
    private final javax.xml.transform.Source xslt;
    private final boolean computeMax;
    private int n;

    public void <init>(int, int, java.io.InputStream, java.io.OutputStream, javax.xml.transform.Source)
    {
        java.io.OutputStream r2;
        int i0, i1;
        javax.xml.transform.Source r3;
        com.mycila.inject.internal.asm.xml.Processor r0;
        java.io.InputStream r1;

        r0 := @this: com.mycila.inject.internal.asm.xml.Processor;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.io.InputStream;

        r2 := @parameter3: java.io.OutputStream;

        r3 := @parameter4: javax.xml.transform.Source;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.asm.xml.Processor: int n> = 0;

        r0.<com.mycila.inject.internal.asm.xml.Processor: int inRepresentation> = i0;

        r0.<com.mycila.inject.internal.asm.xml.Processor: int outRepresentation> = i1;

        r0.<com.mycila.inject.internal.asm.xml.Processor: java.io.InputStream input> = r1;

        r0.<com.mycila.inject.internal.asm.xml.Processor: java.io.OutputStream output> = r2;

        r0.<com.mycila.inject.internal.asm.xml.Processor: javax.xml.transform.Source xslt> = r3;

        r0.<com.mycila.inject.internal.asm.xml.Processor: boolean computeMax> = 1;

        return;
    }

    public int process() throws javax.xml.transform.TransformerException, java.io.IOException, org.xml.sax.SAXException
    {
        javax.xml.transform.Templates r27;
        com.mycila.inject.internal.asm.xml.Processor$SAXWriter $r14;
        java.lang.Thread $r6;
        java.util.zip.ZipEntry $r13, $r30;
        boolean $z0, $z1, $z2, $z3;
        org.xml.sax.helpers.AttributesImpl $r21;
        com.mycila.inject.internal.asm.xml.Processor$SAXWriterFactory $r23;
        com.mycila.inject.internal.asm.xml.Processor$ASMContentHandlerFactory $r25;
        java.lang.ClassLoader $r8;
        com.mycila.inject.internal.asm.xml.Processor$InputSlicingHandler $r15;
        java.util.zip.ZipOutputStream $r3;
        com.mycila.inject.internal.asm.xml.Processor$EntryElement $r12;
        java.util.zip.ZipInputStream $r0;
        javax.xml.transform.Source $r11, $r26;
        javax.xml.transform.sax.SAXTransformerFactory r10;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6;
        java.io.OutputStreamWriter $r5;
        java.lang.String $r18, $r19;
        com.mycila.inject.internal.asm.xml.Processor$OutputSlicingHandler $r22, $r24;
        com.mycila.inject.internal.asm.xml.Processor r1;
        java.io.OutputStream $r4, $r20;
        com.mycila.inject.internal.asm.xml.Processor$SubdocumentHandlerFactory $r17;
        com.mycila.inject.internal.asm.xml.Processor$TransformerHandlerFactory $r16;
        org.xml.sax.helpers.DefaultHandler r28, r29;
        java.lang.Class $r7;
        javax.xml.transform.TransformerFactory $r9;
        java.io.InputStream $r2;

        r1 := @this: com.mycila.inject.internal.asm.xml.Processor;

        $r0 = new java.util.zip.ZipInputStream;

        $r2 = r1.<com.mycila.inject.internal.asm.xml.Processor: java.io.InputStream input>;

        specialinvoke $r0.<java.util.zip.ZipInputStream: void <init>(java.io.InputStream)>($r2);

        $r3 = new java.util.zip.ZipOutputStream;

        $r4 = r1.<com.mycila.inject.internal.asm.xml.Processor: java.io.OutputStream output>;

        specialinvoke $r3.<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)>($r4);

        $r5 = new java.io.OutputStreamWriter;

        specialinvoke $r5.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r3);

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        virtualinvoke $r6.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>($r8);

        $r9 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

        $z0 = virtualinvoke $r9.<javax.xml.transform.TransformerFactory: boolean getFeature(java.lang.String)>("http://javax.xml.transform.sax.SAXSource/feature");

        if $z0 == 0 goto label01;

        $z1 = virtualinvoke $r9.<javax.xml.transform.TransformerFactory: boolean getFeature(java.lang.String)>("http://javax.xml.transform.sax.SAXResult/feature");

        if $z1 != 0 goto label02;

     label01:
        return 0;

     label02:
        r10 = (javax.xml.transform.sax.SAXTransformerFactory) $r9;

        r27 = null;

        $r11 = r1.<com.mycila.inject.internal.asm.xml.Processor: javax.xml.transform.Source xslt>;

        if $r11 == null goto label03;

        $r26 = r1.<com.mycila.inject.internal.asm.xml.Processor: javax.xml.transform.Source xslt>;

        r27 = virtualinvoke r10.<javax.xml.transform.sax.SAXTransformerFactory: javax.xml.transform.Templates newTemplates(javax.xml.transform.Source)>($r26);

     label03:
        $r12 = specialinvoke r1.<com.mycila.inject.internal.asm.xml.Processor: com.mycila.inject.internal.asm.xml.Processor$EntryElement getEntryElement(java.util.zip.ZipOutputStream)>($r3);

        r28 = null;

        $i0 = r1.<com.mycila.inject.internal.asm.xml.Processor: int outRepresentation>;

        tableswitch($i0)
        {
            case 1: goto label04;
            case 2: goto label05;
            case 3: goto label06;
            default: goto label07;
        };

     label04:
        $r24 = new com.mycila.inject.internal.asm.xml.Processor$OutputSlicingHandler;

        $r25 = new com.mycila.inject.internal.asm.xml.Processor$ASMContentHandlerFactory;

        $z3 = r1.<com.mycila.inject.internal.asm.xml.Processor: boolean computeMax>;

        specialinvoke $r25.<com.mycila.inject.internal.asm.xml.Processor$ASMContentHandlerFactory: void <init>(java.io.OutputStream,boolean)>($r3, $z3);

        specialinvoke $r24.<com.mycila.inject.internal.asm.xml.Processor$OutputSlicingHandler: void <init>(com.mycila.inject.internal.asm.xml.Processor$ContentHandlerFactory,com.mycila.inject.internal.asm.xml.Processor$EntryElement,boolean)>($r25, $r12, 0);

        r28 = $r24;

        goto label07;

     label05:
        $r22 = new com.mycila.inject.internal.asm.xml.Processor$OutputSlicingHandler;

        $r23 = new com.mycila.inject.internal.asm.xml.Processor$SAXWriterFactory;

        specialinvoke $r23.<com.mycila.inject.internal.asm.xml.Processor$SAXWriterFactory: void <init>(java.io.Writer,boolean)>($r5, 1);

        specialinvoke $r22.<com.mycila.inject.internal.asm.xml.Processor$OutputSlicingHandler: void <init>(com.mycila.inject.internal.asm.xml.Processor$ContentHandlerFactory,com.mycila.inject.internal.asm.xml.Processor$EntryElement,boolean)>($r23, $r12, 1);

        r28 = $r22;

        goto label07;

     label06:
        $r13 = new java.util.zip.ZipEntry;

        specialinvoke $r13.<java.util.zip.ZipEntry: void <init>(java.lang.String)>("classes.xml");

        virtualinvoke $r3.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r13);

        $r14 = new com.mycila.inject.internal.asm.xml.Processor$SAXWriter;

        specialinvoke $r14.<com.mycila.inject.internal.asm.xml.Processor$SAXWriter: void <init>(java.io.Writer,boolean)>($r5, 0);

        r28 = $r14;

     label07:
        if r27 != null goto label08;

        r29 = r28;

        goto label09;

     label08:
        $r15 = new com.mycila.inject.internal.asm.xml.Processor$InputSlicingHandler;

        $r16 = new com.mycila.inject.internal.asm.xml.Processor$TransformerHandlerFactory;

        specialinvoke $r16.<com.mycila.inject.internal.asm.xml.Processor$TransformerHandlerFactory: void <init>(javax.xml.transform.sax.SAXTransformerFactory,javax.xml.transform.Templates,org.xml.sax.ContentHandler)>(r10, r27, r28);

        specialinvoke $r15.<com.mycila.inject.internal.asm.xml.Processor$InputSlicingHandler: void <init>(java.lang.String,org.xml.sax.ContentHandler,com.mycila.inject.internal.asm.xml.Processor$ContentHandlerFactory)>("class", r28, $r16);

        r29 = $r15;

     label09:
        $r17 = new com.mycila.inject.internal.asm.xml.Processor$SubdocumentHandlerFactory;

        specialinvoke $r17.<com.mycila.inject.internal.asm.xml.Processor$SubdocumentHandlerFactory: void <init>(org.xml.sax.ContentHandler)>(r29);

        if r29 == null goto label10;

        $i4 = r1.<com.mycila.inject.internal.asm.xml.Processor: int inRepresentation>;

        if $i4 == 3 goto label10;

        interfaceinvoke r29.<org.xml.sax.ContentHandler: void startDocument()>();

        $r21 = new org.xml.sax.helpers.AttributesImpl;

        specialinvoke $r21.<org.xml.sax.helpers.AttributesImpl: void <init>()>();

        interfaceinvoke r29.<org.xml.sax.ContentHandler: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>("", "classes", "classes", $r21);

     label10:
        i5 = 0;

     label11:
        $r30 = virtualinvoke $r0.<java.util.zip.ZipInputStream: java.util.zip.ZipEntry getNextEntry()>();

        if $r30 == null goto label14;

        $r18 = virtualinvoke $r30.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $i2 = r1.<com.mycila.inject.internal.asm.xml.Processor: int n>;

        $i3 = $i2 + 1;

        r1.<com.mycila.inject.internal.asm.xml.Processor: int n> = $i3;

        virtualinvoke r1.<com.mycila.inject.internal.asm.xml.Processor: void update(java.lang.Object,int)>($r18, $i2);

        $z2 = specialinvoke r1.<com.mycila.inject.internal.asm.xml.Processor: boolean isClassEntry(java.util.zip.ZipEntry)>($r30);

        if $z2 == 0 goto label12;

        specialinvoke r1.<com.mycila.inject.internal.asm.xml.Processor: void processEntry(java.util.zip.ZipInputStream,java.util.zip.ZipEntry,com.mycila.inject.internal.asm.xml.Processor$ContentHandlerFactory)>($r0, $r30, $r17);

        goto label13;

     label12:
        $r19 = specialinvoke r1.<com.mycila.inject.internal.asm.xml.Processor: java.lang.String getName(java.util.zip.ZipEntry)>($r30);

        $r20 = interfaceinvoke $r12.<com.mycila.inject.internal.asm.xml.Processor$EntryElement: java.io.OutputStream openEntry(java.lang.String)>($r19);

        specialinvoke r1.<com.mycila.inject.internal.asm.xml.Processor: void copyEntry(java.io.InputStream,java.io.OutputStream)>($r0, $r20);

        interfaceinvoke $r12.<com.mycila.inject.internal.asm.xml.Processor$EntryElement: void closeEntry()>();

     label13:
        i5 = i5 + 1;

        goto label11;

     label14:
        if r29 == null goto label15;

        $i1 = r1.<com.mycila.inject.internal.asm.xml.Processor: int inRepresentation>;

        if $i1 == 3 goto label15;

        interfaceinvoke r29.<org.xml.sax.ContentHandler: void endElement(java.lang.String,java.lang.String,java.lang.String)>("", "classes", "classes");

        interfaceinvoke r29.<org.xml.sax.ContentHandler: void endDocument()>();

     label15:
        $i6 = r1.<com.mycila.inject.internal.asm.xml.Processor: int outRepresentation>;

        if $i6 != 3 goto label16;

        virtualinvoke $r3.<java.util.zip.ZipOutputStream: void closeEntry()>();

     label16:
        virtualinvoke $r3.<java.util.zip.ZipOutputStream: void flush()>();

        virtualinvoke $r3.<java.util.zip.ZipOutputStream: void close()>();

        return i5;
    }

    private void copyEntry(java.io.InputStream, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r3;
        byte[] r1;
        int $i0, $i1, $i3;
        com.mycila.inject.internal.asm.xml.Processor r0;
        java.io.InputStream r2;

        r0 := @this: com.mycila.inject.internal.asm.xml.Processor;

        r2 := @parameter0: java.io.InputStream;

        r3 := @parameter1: java.io.OutputStream;

        $i0 = r0.<com.mycila.inject.internal.asm.xml.Processor: int outRepresentation>;

        if $i0 != 3 goto label1;

        return;

     label1:
        r1 = newarray (byte)[2048];

     label2:
        $i1 = virtualinvoke r2.<java.io.InputStream: int read(byte[])>(r1);

        $i3 = (int) -1;

        if $i1 == $i3 goto label3;

        virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>(r1, 0, $i1);

        goto label2;

     label3:
        return;
    }

    private boolean isClassEntry(java.util.zip.ZipEntry)
    {
        int $i0;
        java.lang.String $r1;
        java.util.zip.ZipEntry r0;
        com.mycila.inject.internal.asm.xml.Processor r2;
        boolean $z0, $z1, $z2, $z3;

        r2 := @this: com.mycila.inject.internal.asm.xml.Processor;

        r0 := @parameter0: java.util.zip.ZipEntry;

        $r1 = virtualinvoke r0.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $i0 = r2.<com.mycila.inject.internal.asm.xml.Processor: int inRepresentation>;

        if $i0 != 3 goto label1;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("classes.xml");

        if $z2 != 0 goto label2;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".class.xml");

        if $z1 == 0 goto label3;

     label2:
        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    private void processEntry(java.util.zip.ZipInputStream, java.util.zip.ZipEntry, com.mycila.inject.internal.asm.xml.Processor$ContentHandlerFactory)
    {
        byte[] $r7, $r9;
        java.util.zip.ZipInputStream r5;
        com.mycila.inject.internal.asm.ClassReader $r14;
        org.xml.sax.XMLReader $r3;
        java.io.ByteArrayInputStream $r17;
        com.mycila.inject.internal.asm.xml.Processor$ContentHandlerFactory r0;
        int $i0, $i1;
        org.xml.sax.ContentHandler $r1;
        java.lang.String $r12;
        java.util.zip.ZipEntry r6;
        com.mycila.inject.internal.asm.xml.Processor r2;
        boolean $z1, $z2;
        org.xml.sax.InputSource $r18;
        java.lang.Exception $r11;
        com.mycila.inject.internal.asm.xml.SAXClassAdapter $r15;
        com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream $r16;
        java.io.InputStream $r13;

        r2 := @this: com.mycila.inject.internal.asm.xml.Processor;

        r5 := @parameter0: java.util.zip.ZipInputStream;

        r6 := @parameter1: java.util.zip.ZipEntry;

        r0 := @parameter2: com.mycila.inject.internal.asm.xml.Processor$ContentHandlerFactory;

        $r1 = interfaceinvoke r0.<com.mycila.inject.internal.asm.xml.Processor$ContentHandlerFactory: org.xml.sax.ContentHandler createContentHandler()>();

     label1:
        $i0 = r2.<com.mycila.inject.internal.asm.xml.Processor: int inRepresentation>;

        if $i0 != 3 goto label2;

        $z2 = 1;

        $z1 = 1;

        goto label3;

     label2:
        $z2 = 0;

        $z1 = 0;

     label3:
        $i1 = r2.<com.mycila.inject.internal.asm.xml.Processor: int inRepresentation>;

        if $i1 != 1 goto label4;

        $r14 = new com.mycila.inject.internal.asm.ClassReader;

        $r9 = staticinvoke <com.mycila.inject.internal.asm.xml.Processor: byte[] readEntry(java.io.InputStream,java.util.zip.ZipEntry)>(r5, r6);

        specialinvoke $r14.<com.mycila.inject.internal.asm.ClassReader: void <init>(byte[])>($r9);

        $r15 = new com.mycila.inject.internal.asm.xml.SAXClassAdapter;

        specialinvoke $r15.<com.mycila.inject.internal.asm.xml.SAXClassAdapter: void <init>(org.xml.sax.ContentHandler,boolean)>($r1, $z2);

        virtualinvoke $r14.<com.mycila.inject.internal.asm.ClassReader: void accept(com.mycila.inject.internal.asm.ClassVisitor,int)>($r15, 0);

        goto label7;

     label4:
        $r3 = staticinvoke <org.xml.sax.helpers.XMLReaderFactory: org.xml.sax.XMLReader createXMLReader()>();

        interfaceinvoke $r3.<org.xml.sax.XMLReader: void setContentHandler(org.xml.sax.ContentHandler)>($r1);

        $r18 = new org.xml.sax.InputSource;

        if $z1 == 0 goto label5;

        $r16 = new com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream;

        $r13 = $r16;

        specialinvoke $r16.<com.mycila.inject.internal.asm.xml.Processor$ProtectedInputStream: void <init>(java.io.InputStream)>(r5);

        goto label6;

     label5:
        $r17 = new java.io.ByteArrayInputStream;

        $r13 = $r17;

        $r7 = staticinvoke <com.mycila.inject.internal.asm.xml.Processor: byte[] readEntry(java.io.InputStream,java.util.zip.ZipEntry)>(r5, r6);

        specialinvoke $r17.<java.io.ByteArrayInputStream: void <init>(byte[])>($r7);

     label6:
        specialinvoke $r18.<org.xml.sax.InputSource: void <init>(java.io.InputStream)>($r13);

        interfaceinvoke $r3.<org.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)>($r18);

     label7:
        goto label9;

     label8:
        $r11 := @caughtexception;

        $r12 = virtualinvoke r6.<java.util.zip.ZipEntry: java.lang.String getName()>();

        virtualinvoke r2.<com.mycila.inject.internal.asm.xml.Processor: void update(java.lang.Object,int)>($r12, 0);

        virtualinvoke r2.<com.mycila.inject.internal.asm.xml.Processor: void update(java.lang.Object,int)>($r11, 0);

     label9:
        return;

        catch java.lang.Exception from label1 to label7 with label8;
    }

    private com.mycila.inject.internal.asm.xml.Processor$EntryElement getEntryElement(java.util.zip.ZipOutputStream)
    {
        java.util.zip.ZipOutputStream r2;
        com.mycila.inject.internal.asm.xml.Processor$SingleDocElement $r3;
        com.mycila.inject.internal.asm.xml.Processor$ZipEntryElement $r1;
        int $i0;
        com.mycila.inject.internal.asm.xml.Processor r0;

        r0 := @this: com.mycila.inject.internal.asm.xml.Processor;

        r2 := @parameter0: java.util.zip.ZipOutputStream;

        $i0 = r0.<com.mycila.inject.internal.asm.xml.Processor: int outRepresentation>;

        if $i0 != 3 goto label1;

        $r3 = new com.mycila.inject.internal.asm.xml.Processor$SingleDocElement;

        specialinvoke $r3.<com.mycila.inject.internal.asm.xml.Processor$SingleDocElement: void <init>(java.io.OutputStream)>(r2);

        return $r3;

     label1:
        $r1 = new com.mycila.inject.internal.asm.xml.Processor$ZipEntryElement;

        specialinvoke $r1.<com.mycila.inject.internal.asm.xml.Processor$ZipEntryElement: void <init>(java.util.zip.ZipOutputStream)>(r2);

        return $r1;
    }

    private java.lang.String getName(java.util.zip.ZipEntry)
    {
        java.lang.StringBuffer $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r1, r6;
        java.util.zip.ZipEntry r0;
        com.mycila.inject.internal.asm.xml.Processor r2;
        boolean $z0;

        r2 := @this: com.mycila.inject.internal.asm.xml.Processor;

        r0 := @parameter0: java.util.zip.ZipEntry;

        $r1 = virtualinvoke r0.<java.util.zip.ZipEntry: java.lang.String getName()>();

        r6 = $r1;

        $z0 = specialinvoke r2.<com.mycila.inject.internal.asm.xml.Processor: boolean isClassEntry(java.util.zip.ZipEntry)>(r0);

        if $z0 == 0 goto label2;

        $i0 = r2.<com.mycila.inject.internal.asm.xml.Processor: int inRepresentation>;

        if $i0 == 1 goto label1;

        $i3 = r2.<com.mycila.inject.internal.asm.xml.Processor: int outRepresentation>;

        if $i3 != 1 goto label1;

        $i4 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i5 = $i4 - 4;

        r6 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

        goto label2;

     label1:
        $i1 = r2.<com.mycila.inject.internal.asm.xml.Processor: int inRepresentation>;

        if $i1 != 1 goto label2;

        $i2 = r2.<com.mycila.inject.internal.asm.xml.Processor: int outRepresentation>;

        if $i2 == 1 goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".xml");

        r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        return r6;
    }

    private static byte[] readEntry(java.io.InputStream, java.util.zip.ZipEntry) throws java.io.IOException
    {
        byte[] $r3, r4, r5;
        java.io.ByteArrayOutputStream $r6;
        long $l0;
        byte $b1;
        int $i2, $i3, $i4, $i5, $i6, i7, $i8, $i10;
        java.util.zip.ZipEntry r0;
        java.io.InputStream r2;

        r2 := @parameter0: java.io.InputStream;

        r0 := @parameter1: java.util.zip.ZipEntry;

        $l0 = virtualinvoke r0.<java.util.zip.ZipEntry: long getSize()>();

        $b1 = $l0 cmp -1L;

        $i8 = (int) $b1;

        if $i8 <= 0 goto label3;

        $i3 = (int) $l0;

        r4 = newarray (byte)[$i3];

        i7 = 0;

     label1:
        $i4 = lengthof r4;

        $i5 = $i4 - i7;

        $i6 = virtualinvoke r2.<java.io.InputStream: int read(byte[],int,int)>(r4, i7, $i5);

        if $i6 <= 0 goto label2;

        i7 = i7 + $i6;

        goto label1;

     label2:
        return r4;

     label3:
        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        r5 = newarray (byte)[4096];

     label4:
        $i2 = virtualinvoke r2.<java.io.InputStream: int read(byte[])>(r5);

        $i10 = (int) -1;

        if $i2 == $i10 goto label5;

        virtualinvoke $r6.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r5, 0, $i2);

        goto label4;

     label5:
        $r3 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r3;
    }

    protected void update(java.lang.Object, int)
    {
        java.io.PrintStream $r2;
        java.lang.Throwable $r7;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        int i0, $i1;
        java.lang.Object r0;
        java.lang.String $r6;
        com.mycila.inject.internal.asm.xml.Processor r8;
        boolean $z0;

        r8 := @this: com.mycila.inject.internal.asm.xml.Processor;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        $z0 = r0 instanceof java.lang.Throwable;

        if $z0 == 0 goto label1;

        $r7 = (java.lang.Throwable) r0;

        virtualinvoke $r7.<java.lang.Throwable: void printStackTrace()>();

        goto label2;

     label1:
        $i1 = i0 % 100;

        if $i1 != 0 goto label2;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label2:
        return;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        boolean $z0, $z1, $z2;
        float $f0, $f1, $f2, $f3;
        javax.xml.transform.stream.StreamSource $r20, r30;
        java.lang.String[] r0;
        long $l4, $l6, $l7, $l8;
        java.io.BufferedOutputStream $r3, $r23, r29;
        java.lang.StringBuffer $r7, $r9, $r10, $r11, $r12;
        int $i0, $i1, $i2, $i3, $i5, i9, i10;
        java.lang.String $r1, $r2, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r25, $r27;
        com.mycila.inject.internal.asm.xml.Processor $r5;
        java.io.PrintStream $r4, $r6, $r8;
        java.io.FileOutputStream $r24;
        java.io.FileInputStream $r21, $r26;
        java.io.InputStream r28;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 >= 2 goto label1;

        staticinvoke <com.mycila.inject.internal.asm.xml.Processor: void showUsage()>();

        return;

     label1:
        $r1 = r0[0];

        $i1 = staticinvoke <com.mycila.inject.internal.asm.xml.Processor: int getRepresentation(java.lang.String)>($r1);

        $r2 = r0[1];

        $i2 = staticinvoke <com.mycila.inject.internal.asm.xml.Processor: int getRepresentation(java.lang.String)>($r2);

        r28 = <java.lang.System: java.io.InputStream in>;

        $r3 = new java.io.BufferedOutputStream;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r3.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r4);

        r29 = $r3;

        r30 = null;

        i9 = 2;

     label2:
        $i3 = lengthof r0;

        if i9 >= $i3 goto label7;

        $r15 = "-in";

        $r14 = r0[i9];

        $z0 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z0 == 0 goto label3;

        $r26 = new java.io.FileInputStream;

        i10 = i9 + 1;

        $r27 = r0[i10];

        specialinvoke $r26.<java.io.FileInputStream: void <init>(java.lang.String)>($r27);

        r28 = $r26;

        goto label6;

     label3:
        $r17 = "-out";

        $r16 = r0[i9];

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z1 == 0 goto label4;

        $r23 = new java.io.BufferedOutputStream;

        $r24 = new java.io.FileOutputStream;

        i10 = i9 + 1;

        $r25 = r0[i10];

        specialinvoke $r24.<java.io.FileOutputStream: void <init>(java.lang.String)>($r25);

        specialinvoke $r23.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r24);

        r29 = $r23;

        goto label6;

     label4:
        $r19 = "-xslt";

        $r18 = r0[i9];

        $z2 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z2 == 0 goto label5;

        $r20 = new javax.xml.transform.stream.StreamSource;

        $r21 = new java.io.FileInputStream;

        i10 = i9 + 1;

        $r22 = r0[i10];

        specialinvoke $r21.<java.io.FileInputStream: void <init>(java.lang.String)>($r22);

        specialinvoke $r20.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r21);

        r30 = $r20;

        goto label6;

     label5:
        staticinvoke <com.mycila.inject.internal.asm.xml.Processor: void showUsage()>();

        return;

     label6:
        i9 = i10 + 1;

        goto label2;

     label7:
        if $i1 == 0 goto label8;

        if $i2 != 0 goto label9;

     label8:
        staticinvoke <com.mycila.inject.internal.asm.xml.Processor: void showUsage()>();

        return;

     label9:
        $r5 = new com.mycila.inject.internal.asm.xml.Processor;

        specialinvoke $r5.<com.mycila.inject.internal.asm.xml.Processor: void <init>(int,int,java.io.InputStream,java.io.OutputStream,javax.xml.transform.Source)>($i1, $i2, r28, r29, r30);

        $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $i5 = virtualinvoke $r5.<com.mycila.inject.internal.asm.xml.Processor: int process()>();

        $l6 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(int)>($i5);

        $r8 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $l7 = $l6 - $l4;

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(long)>($l7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ms  ");

        $f0 = (float) $i5;

        $f2 = 1000.0F * $f0;

        $l8 = $l6 - $l4;

        $f1 = (float) $l8;

        $f3 = $f2 / $f1;

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(float)>($f3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" resources/sec");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r13);

        return;
    }

    private static int getRepresentation(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String;

        $r1 = "code";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = "xml";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        return 2;

     label2:
        $r3 = "singlexml";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label3;

        return 3;

     label3:
        return 0;
    }

    private static void showUsage()
    {
        java.io.PrintStream $r0, $r1, $r2;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Usage: Main <in format> <out format> [-in <input jar>] [-out <output jar>] [-xslt <xslt fiel>]");

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("  when -in or -out is omitted sysin and sysout would be used");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("  <in format> and <out format> - code | xml | singlexml");

        return;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.asm.xml.Processor: java.lang.String SINGLE_XML_NAME> = "classes.xml";

        <com.mycila.inject.internal.asm.xml.Processor: int SINGLE_XML> = 3;

        <com.mycila.inject.internal.asm.xml.Processor: int MULTI_XML> = 2;

        <com.mycila.inject.internal.asm.xml.Processor: int BYTECODE> = 1;

        return;
    }
}
