class org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator extends java.lang.Object implements java.util.Comparator
{
    private static final int HIGHER_PRECEDENCE;
    private static final int SAME_PRECEDENCE;
    private static final int LOWER_PRECEDENCE;
    private static final int NOT_COMPARABLE;
    private final java.util.Comparator advisorComparator;

    public void <init>()
    {
        org.springframework.core.OrderComparator $r1;
        org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator r0;

        r0 := @this: org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = <org.springframework.core.OrderComparator: org.springframework.core.OrderComparator INSTANCE>;

        r0.<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: java.util.Comparator advisorComparator> = $r1;

        return;
    }

    public void <init>(java.util.Comparator)
    {
        java.util.Comparator r1;
        org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator r0;

        r0 := @this: org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator;

        r1 := @parameter0: java.util.Comparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Advisor comparator must not be null");

        r0.<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: java.util.Comparator advisorComparator> = r1;

        return;
    }

    public int compare(java.lang.Object, java.lang.Object)
    {
        int $i0, i1;
        java.lang.String $r8;
        org.springframework.aop.Advisor r9, r10;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator r11;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object r0, r5;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7;
        java.util.Comparator $r12;

        r11 := @this: org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator;

        r0 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof org.springframework.aop.Advisor;

        if $z0 == 0 goto label1;

        $z1 = r5 instanceof org.springframework.aop.Advisor;

        if $z1 != 0 goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("AspectJPrecedenceComparator can only compare the order of Advisors, but was passed [");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] and [");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r1;

     label2:
        r9 = (org.springframework.aop.Advisor) r0;

        r10 = (org.springframework.aop.Advisor) r5;

        $z2 = staticinvoke <org.springframework.aop.aspectj.AspectJAopUtils: boolean isAfterAdvice(org.springframework.aop.Advisor)>(r9);

        if $z2 != 0 goto label3;

        $z6 = staticinvoke <org.springframework.aop.aspectj.AspectJAopUtils: boolean isAfterAdvice(org.springframework.aop.Advisor)>(r10);

        if $z6 != 0 goto label3;

        $z7 = 0;

        goto label4;

     label3:
        $z7 = 1;

     label4:
        z3 = $z7;

        $z8 = staticinvoke <org.springframework.aop.aspectj.AspectJAopUtils: boolean isBeforeAdvice(org.springframework.aop.Advisor)>(r9);

        if $z8 != 0 goto label5;

        $z5 = staticinvoke <org.springframework.aop.aspectj.AspectJAopUtils: boolean isBeforeAdvice(org.springframework.aop.Advisor)>(r10);

        if $z5 != 0 goto label5;

        $z9 = 0;

        goto label6;

     label5:
        $z9 = 1;

     label6:
        if z3 == 0 goto label7;

        if $z9 == 0 goto label7;

        return 0;

     label7:
        $r12 = r11.<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: java.util.Comparator advisorComparator>;

        $i0 = interfaceinvoke $r12.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r9, r10);

        i1 = $i0;

        if $i0 != 0 goto label8;

        $z4 = specialinvoke r11.<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: boolean declaredInSameAspect(org.springframework.aop.Advisor,org.springframework.aop.Advisor)>(r9, r10);

        if $z4 == 0 goto label8;

        i1 = specialinvoke r11.<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: int comparePrecedenceWithinAspect(org.springframework.aop.Advisor,org.springframework.aop.Advisor)>(r9, r10);

     label8:
        return i1;
    }

    private int comparePrecedenceWithinAspect(org.springframework.aop.Advisor, org.springframework.aop.Advisor)
    {
        org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator r1;
        int $i0, $i1, $i2, $i4, $i6;
        org.springframework.aop.Advisor r0, r2;
        boolean $z0, $z1, $z2;

        r1 := @this: org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator;

        r0 := @parameter0: org.springframework.aop.Advisor;

        r2 := @parameter1: org.springframework.aop.Advisor;

        $z0 = staticinvoke <org.springframework.aop.aspectj.AspectJAopUtils: boolean isAfterAdvice(org.springframework.aop.Advisor)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.springframework.aop.aspectj.AspectJAopUtils: boolean isAfterAdvice(org.springframework.aop.Advisor)>(r2);

        if $z1 != 0 goto label1;

        $z2 = 0;

        goto label2;

     label1:
        $z2 = 1;

     label2:
        $i0 = specialinvoke r1.<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: int getAspectDeclarationOrder(org.springframework.aop.Advisor)>(r0);

        $i1 = specialinvoke r1.<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: int getAspectDeclarationOrder(org.springframework.aop.Advisor)>(r2);

        $i2 = $i0 - $i1;

        if $z2 == 0 goto label5;

        if $i2 >= 0 goto label3;

        return 1;

     label3:
        if $i2 != 0 goto label4;

        return 0;

     label4:
        $i4 = (int) -1;

        return $i4;

     label5:
        if $i2 >= 0 goto label6;

        $i6 = (int) -1;

        return $i6;

     label6:
        if $i2 != 0 goto label7;

        return 0;

     label7:
        return 1;
    }

    private boolean declaredInSameAspect(org.springframework.aop.Advisor, org.springframework.aop.Advisor)
    {
        org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator r0;
        java.lang.String $r3, $r4;
        org.springframework.aop.Advisor r1, r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator;

        r1 := @parameter0: org.springframework.aop.Advisor;

        r2 := @parameter1: org.springframework.aop.Advisor;

        $z0 = specialinvoke r0.<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: boolean hasAspectName(org.springframework.aop.Advisor)>(r1);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: boolean hasAspectName(org.springframework.aop.Advisor)>(r2);

        if $z1 == 0 goto label1;

        $r3 = specialinvoke r0.<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: java.lang.String getAspectName(org.springframework.aop.Advisor)>(r1);

        $r4 = specialinvoke r0.<org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: java.lang.String getAspectName(org.springframework.aop.Advisor)>(r2);

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean hasAspectName(org.springframework.aop.Advisor)
    {
        org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator r2;
        org.aopalliance.aop.Advice $r1;
        org.springframework.aop.Advisor r0;
        boolean $z0, $z1;

        r2 := @this: org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator;

        r0 := @parameter0: org.springframework.aop.Advisor;

        $z0 = r0 instanceof org.springframework.aop.aspectj.AspectJPrecedenceInformation;

        if $z0 != 0 goto label1;

        $r1 = interfaceinvoke r0.<org.springframework.aop.Advisor: org.aopalliance.aop.Advice getAdvice()>();

        $z1 = $r1 instanceof org.springframework.aop.aspectj.AspectJPrecedenceInformation;

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    private java.lang.String getAspectName(org.springframework.aop.Advisor)
    {
        org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator r3;
        org.springframework.aop.aspectj.AspectJPrecedenceInformation $r1;
        java.lang.String $r2;
        org.springframework.aop.Advisor r0;

        r3 := @this: org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator;

        r0 := @parameter0: org.springframework.aop.Advisor;

        $r1 = staticinvoke <org.springframework.aop.aspectj.AspectJAopUtils: org.springframework.aop.aspectj.AspectJPrecedenceInformation getAspectJPrecedenceInformationFor(org.springframework.aop.Advisor)>(r0);

        $r2 = interfaceinvoke $r1.<org.springframework.aop.aspectj.AspectJPrecedenceInformation: java.lang.String getAspectName()>();

        return $r2;
    }

    private int getAspectDeclarationOrder(org.springframework.aop.Advisor)
    {
        org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator r2;
        org.springframework.aop.aspectj.AspectJPrecedenceInformation $r1;
        int $i0;
        org.springframework.aop.Advisor r0;

        r2 := @this: org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator;

        r0 := @parameter0: org.springframework.aop.Advisor;

        $r1 = staticinvoke <org.springframework.aop.aspectj.AspectJAopUtils: org.springframework.aop.aspectj.AspectJPrecedenceInformation getAspectJPrecedenceInformationFor(org.springframework.aop.Advisor)>(r0);

        if $r1 == null goto label1;

        $i0 = interfaceinvoke $r1.<org.springframework.aop.aspectj.AspectJPrecedenceInformation: int getDeclarationOrder()>();

        return $i0;

     label1:
        return 0;
    }

    public static void <clinit>()
    {
        <org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: int NOT_COMPARABLE> = 0;

        <org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: int LOWER_PRECEDENCE> = 1;

        <org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: int SAME_PRECEDENCE> = 0;

        <org.springframework.aop.aspectj.autoproxy.AspectJPrecedenceComparator: int HIGHER_PRECEDENCE> = -1;

        return;
    }
}
