public class arq.sse extends arq.cmdline.CmdARQ_SSE
{
    protected final arq.cmdline.ArgDecl numberDecl;
    protected final arq.cmdline.ArgDecl noPrintDecl;
    protected final arq.cmdline.ArgDecl noResolveDecl;
    private boolean print;
    private boolean structural;
    private boolean lineNumbers;
    static final java.lang.String divider;
    boolean needDivider;

    public static transient void main(java.lang.String[])
    {
        java.lang.String[] r1;
        arq.sse $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new arq.sse;

        specialinvoke $r0.<arq.sse: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<arq.sse: void mainRun()>();

        return;
    }

    public void <init>(java.lang.String[])
    {
        arq.sse r0;
        arq.cmdline.ArgDecl $r2, $r4, $r6, $r8, $r9, $r10;
        java.lang.String[] r1, $r3, $r5, $r7;

        r0 := @this: arq.sse;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CmdARQ_SSE: void <init>(java.lang.String[])>(r1);

        $r2 = new arq.cmdline.ArgDecl;

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = "number";

        specialinvoke $r2.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "num", $r3);

        r0.<arq.sse: arq.cmdline.ArgDecl numberDecl> = $r2;

        $r4 = new arq.cmdline.ArgDecl;

        $r5 = newarray (java.lang.String)[0];

        specialinvoke $r4.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "n", $r5);

        r0.<arq.sse: arq.cmdline.ArgDecl noPrintDecl> = $r4;

        $r6 = new arq.cmdline.ArgDecl;

        $r7 = newarray (java.lang.String)[0];

        specialinvoke $r6.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "raw", $r7);

        r0.<arq.sse: arq.cmdline.ArgDecl noResolveDecl> = $r6;

        r0.<arq.sse: boolean print> = 1;

        r0.<arq.sse: boolean structural> = 1;

        r0.<arq.sse: boolean lineNumbers> = 0;

        r0.<arq.sse: boolean needDivider> = 0;

        $r8 = r0.<arq.sse: arq.cmdline.ArgDecl noPrintDecl>;

        specialinvoke r0.<arq.cmdline.CmdARQ_SSE: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r8, "-n", "Don\'t print the expression");

        $r9 = r0.<arq.sse: arq.cmdline.ArgDecl numberDecl>;

        specialinvoke r0.<arq.cmdline.CmdARQ_SSE: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r9, "--num [on|off]", "Numbers");

        $r10 = r0.<arq.sse: arq.cmdline.ArgDecl noResolveDecl>;

        specialinvoke r0.<arq.cmdline.CmdARQ_SSE: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r10, "--raw", "Don\'t handle base or prefix names specially");

        return;
    }

    protected void processModulesAndArgs()
    {
        arq.sse r0;
        arq.cmdline.ArgDecl $r1, $r2, $r3, $r4;
        java.lang.String $r5;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: arq.sse;

        specialinvoke r0.<arq.cmdline.CmdARQ_SSE: void processModulesAndArgs()>();

        $r1 = r0.<arq.sse: arq.cmdline.ArgDecl noPrintDecl>;

        $z0 = virtualinvoke r0.<arq.sse: boolean contains(arq.cmdline.ArgDecl)>($r1);

        if $z0 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        r0.<arq.sse: boolean print> = $z4;

        $r2 = r0.<arq.sse: arq.cmdline.ArgDecl numberDecl>;

        $z1 = virtualinvoke r0.<arq.sse: boolean contains(arq.cmdline.ArgDecl)>($r2);

        if $z1 == 0 goto label3;

        $r4 = r0.<arq.sse: arq.cmdline.ArgDecl numberDecl>;

        $r5 = virtualinvoke r0.<arq.sse: java.lang.String getValue(arq.cmdline.ArgDecl)>($r4);

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("on");

        r0.<arq.sse: boolean lineNumbers> = $z3;

     label3:
        $r3 = r0.<arq.sse: arq.cmdline.ArgDecl noResolveDecl>;

        $z2 = virtualinvoke r0.<arq.sse: boolean contains(arq.cmdline.ArgDecl)>($r3);

        if $z2 == 0 goto label4;

        staticinvoke <com.hp.hpl.jena.sparql.sse.SSE: void setUseResolver(boolean)>(0);

     label4:
        return;
    }

    protected java.lang.String getCommandName()
    {
        java.lang.String $r1;
        arq.sse r0;

        r0 := @this: arq.sse;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r0);

        return $r1;
    }

    protected java.lang.String getSummary()
    {
        java.lang.String $r1;
        arq.sse r0;

        r0 := @this: arq.sse;

        $r1 = virtualinvoke r0.<arq.sse: java.lang.String getCommandName()>();

        return $r1;
    }

    private void divider()
    {
        java.io.PrintStream $r1;
        arq.sse r0;
        boolean $z0;

        r0 := @this: arq.sse;

        $z0 = r0.<arq.sse: boolean needDivider>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");

     label1:
        r0.<arq.sse: boolean needDivider> = 1;

        return;
    }

    protected void exec(com.hp.hpl.jena.sparql.sse.Item)
    {
        java.io.PrintStream $r3, $r5;
        arq.sse r0;
        com.hp.hpl.jena.sparql.serializer.SerializationContext $r4;
        com.hp.hpl.jena.sparql.sse.Item r1;
        org.apache.jena.atlas.io.IndentedWriter $r2;
        boolean $z0, $z1;
        arq.cmd.TerminationException $r6;

        r0 := @this: arq.sse;

        r1 := @parameter0: com.hp.hpl.jena.sparql.sse.Item;

        $z0 = r0.<arq.sse: boolean print>;

        if $z0 != 0 goto label1;

        return;

     label1:
        if r1 != null goto label2;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("No expression");

        $r6 = new arq.cmd.TerminationException;

        specialinvoke $r6.<arq.cmd.TerminationException: void <init>(int)>(9);

        throw $r6;

     label2:
        specialinvoke r0.<arq.sse: void divider()>();

        $r2 = new org.apache.jena.atlas.io.IndentedWriter;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $z1 = r0.<arq.sse: boolean lineNumbers>;

        specialinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void <init>(java.io.OutputStream,boolean)>($r3, $z1);

        $r4 = new com.hp.hpl.jena.sparql.serializer.SerializationContext;

        specialinvoke $r4.<com.hp.hpl.jena.sparql.serializer.SerializationContext: void <init>(com.hp.hpl.jena.shared.PrefixMapping)>(null);

        staticinvoke <com.hp.hpl.jena.sparql.sse.ItemWriter: void write(org.apache.jena.atlas.io.IndentedWriter,com.hp.hpl.jena.sparql.sse.Item,com.hp.hpl.jena.sparql.serializer.SerializationContext)>($r2, r1, $r4);

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void ensureStartOfLine()>();

        virtualinvoke $r2.<org.apache.jena.atlas.io.IndentedWriter: void flush()>();

        return;
    }

    public static void <clinit>()
    {
        <arq.sse: java.lang.String divider> = "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -";

        return;
    }
}
