public class bsh.CallStack extends java.lang.Object
{
    private java.util.Vector stack;

    public void <init>()
    {
        java.util.Vector $r1;
        bsh.CallStack r0;

        r0 := @this: bsh.CallStack;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>(int)>(2);

        r0.<bsh.CallStack: java.util.Vector stack> = $r1;

        return;
    }

    public void <init>(bsh.NameSpace)
    {
        java.util.Vector $r1;
        bsh.CallStack r0;
        bsh.NameSpace r2;

        r0 := @this: bsh.CallStack;

        r2 := @parameter0: bsh.NameSpace;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>(int)>(2);

        r0.<bsh.CallStack: java.util.Vector stack> = $r1;

        virtualinvoke r0.<bsh.CallStack: void push(bsh.NameSpace)>(r2);

        return;
    }

    public void clear()
    {
        java.util.Vector $r1;
        bsh.CallStack r0;

        r0 := @this: bsh.CallStack;

        $r1 = r0.<bsh.CallStack: java.util.Vector stack>;

        virtualinvoke $r1.<java.util.Vector: void removeAllElements()>();

        return;
    }

    public void push(bsh.NameSpace)
    {
        java.util.Vector $r2;
        bsh.CallStack r0;
        bsh.NameSpace r1;

        r0 := @this: bsh.CallStack;

        r1 := @parameter0: bsh.NameSpace;

        $r2 = r0.<bsh.CallStack: java.util.Vector stack>;

        virtualinvoke $r2.<java.util.Vector: void insertElementAt(java.lang.Object,int)>(r1, 0);

        return;
    }

    public bsh.NameSpace top()
    {
        bsh.CallStack r0;
        bsh.NameSpace $r1;

        r0 := @this: bsh.CallStack;

        $r1 = virtualinvoke r0.<bsh.CallStack: bsh.NameSpace get(int)>(0);

        return $r1;
    }

    public bsh.NameSpace get(int)
    {
        java.util.Vector $r1;
        bsh.NameSpace $r3, $r4;
        int i0, $i1;
        java.lang.Object $r2;
        bsh.CallStack r0;

        r0 := @this: bsh.CallStack;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<bsh.CallStack: int depth()>();

        if i0 < $i1 goto label1;

        $r4 = <bsh.NameSpace: bsh.NameSpace JAVACODE>;

        return $r4;

     label1:
        $r1 = r0.<bsh.CallStack: java.util.Vector stack>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(i0);

        $r3 = (bsh.NameSpace) $r2;

        return $r3;
    }

    public void set(int, bsh.NameSpace)
    {
        java.util.Vector $r2;
        bsh.NameSpace r1;
        int i0;
        bsh.CallStack r0;

        r0 := @this: bsh.CallStack;

        i0 := @parameter0: int;

        r1 := @parameter1: bsh.NameSpace;

        $r2 = r0.<bsh.CallStack: java.util.Vector stack>;

        virtualinvoke $r2.<java.util.Vector: void setElementAt(java.lang.Object,int)>(r1, i0);

        return;
    }

    public bsh.NameSpace pop()
    {
        java.util.Vector $r2;
        bsh.NameSpace $r1;
        int $i0;
        bsh.InterpreterError $r3;
        bsh.CallStack r0;

        r0 := @this: bsh.CallStack;

        $i0 = virtualinvoke r0.<bsh.CallStack: int depth()>();

        if $i0 >= 1 goto label1;

        $r3 = new bsh.InterpreterError;

        specialinvoke $r3.<bsh.InterpreterError: void <init>(java.lang.String)>("pop on empty CallStack");

        throw $r3;

     label1:
        $r1 = virtualinvoke r0.<bsh.CallStack: bsh.NameSpace top()>();

        $r2 = r0.<bsh.CallStack: java.util.Vector stack>;

        virtualinvoke $r2.<java.util.Vector: void removeElementAt(int)>(0);

        return $r1;
    }

    public bsh.NameSpace swap(bsh.NameSpace)
    {
        java.util.Vector $r1, $r5;
        bsh.NameSpace r3, r4;
        java.lang.Object $r2;
        bsh.CallStack r0;

        r0 := @this: bsh.CallStack;

        r4 := @parameter0: bsh.NameSpace;

        $r1 = r0.<bsh.CallStack: java.util.Vector stack>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object elementAt(int)>(0);

        r3 = (bsh.NameSpace) $r2;

        $r5 = r0.<bsh.CallStack: java.util.Vector stack>;

        virtualinvoke $r5.<java.util.Vector: void setElementAt(java.lang.Object,int)>(r4, 0);

        return r3;
    }

    public int depth()
    {
        int $i0;
        java.util.Vector $r1;
        bsh.CallStack r0;

        r0 := @this: bsh.CallStack;

        $r1 = r0.<bsh.CallStack: java.util.Vector stack>;

        $i0 = virtualinvoke $r1.<java.util.Vector: int size()>();

        return $i0;
    }

    public bsh.NameSpace[] toArray()
    {
        java.util.Vector $r2;
        bsh.NameSpace[] r1;
        int $i0;
        bsh.CallStack r0;

        r0 := @this: bsh.CallStack;

        $i0 = virtualinvoke r0.<bsh.CallStack: int depth()>();

        r1 = newarray (bsh.NameSpace)[$i0];

        $r2 = r0.<bsh.CallStack: java.util.Vector stack>;

        virtualinvoke $r2.<java.util.Vector: void copyInto(java.lang.Object[])>(r1);

        return r1;
    }

    public java.lang.String toString()
    {
        bsh.NameSpace $r5;
        bsh.CallStack r1;
        bsh.NameSpace[] $r2;
        java.lang.StringBuffer $r0, $r3, $r4, $r6, $r7;
        int $i0, i1;
        java.lang.String $r8, $r9;

        r1 := @this: bsh.CallStack;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CallStack:\n");

        $r2 = virtualinvoke r1.<bsh.CallStack: bsh.NameSpace[] toArray()>();

        i1 = 0;

        goto label2;

     label1:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t");

        $r5 = $r2[i1];

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        i1 = i1 + 1;

     label2:
        $i0 = lengthof $r2;

        if i1 < $i0 goto label1;

        $r9 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;
    }

    public bsh.CallStack copy()
    {
        java.util.Vector $r2, $r4;
        java.lang.Object $r3;
        bsh.CallStack $r0, r1;

        r1 := @this: bsh.CallStack;

        $r0 = new bsh.CallStack;

        specialinvoke $r0.<bsh.CallStack: void <init>()>();

        $r2 = r1.<bsh.CallStack: java.util.Vector stack>;

        $r3 = virtualinvoke $r2.<java.util.Vector: java.lang.Object clone()>();

        $r4 = (java.util.Vector) $r3;

        $r0.<bsh.CallStack: java.util.Vector stack> = $r4;

        return $r0;
    }
}
