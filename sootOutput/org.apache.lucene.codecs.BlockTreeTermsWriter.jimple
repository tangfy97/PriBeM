public class org.apache.lucene.codecs.BlockTreeTermsWriter extends org.apache.lucene.codecs.FieldsConsumer
{
    public static final int DEFAULT_MIN_BLOCK_SIZE;
    public static final int DEFAULT_MAX_BLOCK_SIZE;
    static final int OUTPUT_FLAGS_NUM_BITS;
    static final int OUTPUT_FLAGS_MASK;
    static final int OUTPUT_FLAG_IS_FLOOR;
    static final int OUTPUT_FLAG_HAS_TERMS;
    static final java.lang.String TERMS_EXTENSION;
    static final java.lang.String TERMS_CODEC_NAME;
    public static final int TERMS_VERSION_START;
    public static final int TERMS_VERSION_APPEND_ONLY;
    public static final int TERMS_VERSION_CURRENT;
    static final java.lang.String TERMS_INDEX_EXTENSION;
    static final java.lang.String TERMS_INDEX_CODEC_NAME;
    public static final int TERMS_INDEX_VERSION_START;
    public static final int TERMS_INDEX_VERSION_APPEND_ONLY;
    public static final int TERMS_INDEX_VERSION_CURRENT;
    private final org.apache.lucene.store.IndexOutput out;
    private final org.apache.lucene.store.IndexOutput indexOut;
    final int minItemsInBlock;
    final int maxItemsInBlock;
    final org.apache.lucene.codecs.PostingsWriterBase postingsWriter;
    final org.apache.lucene.index.FieldInfos fieldInfos;
    org.apache.lucene.index.FieldInfo currentField;
    private final java.util.List fields;
    final org.apache.lucene.store.RAMOutputStream scratchBytes;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.index.SegmentWriteState, org.apache.lucene.codecs.PostingsWriterBase, int, int) throws java.io.IOException
    {
        org.apache.lucene.store.Directory $r9, $r18;
        java.io.Closeable[] $r22, $r49;
        org.apache.lucene.codecs.PostingsWriterBase r20;
        org.apache.lucene.index.FieldInfos $r11;
        org.apache.lucene.store.IOContext $r8, $r17;
        org.apache.lucene.index.SegmentInfo $r4, $r13;
        org.apache.lucene.codecs.BlockTreeTermsWriter r0;
        java.lang.StringBuilder $r25, $r26, $r27, $r28, $r29, $r32, $r33, $r34, $r35, $r36, $r39, $r40, $r41, $r44, $r45, $r46;
        java.lang.Throwable $r48;
        java.util.ArrayList $r1;
        int i0, i1, $i2, $i3;
        org.apache.lucene.index.SegmentWriteState r3;
        java.lang.String $r5, $r6, $r7, $r14, $r15, $r16, $r30, $r37, $r42, $r47;
        org.apache.lucene.store.IndexOutput $r10, $r12, $r19, $r21, $r23, $r50, r51;
        java.lang.IllegalArgumentException $r24, $r31, $r38, $r43;
        org.apache.lucene.store.RAMOutputStream $r2;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter;

        r3 := @parameter0: org.apache.lucene.index.SegmentWriteState;

        r20 := @parameter1: org.apache.lucene.codecs.PostingsWriterBase;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<org.apache.lucene.codecs.FieldsConsumer: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: java.util.List fields> = $r1;

        $r2 = new org.apache.lucene.store.RAMOutputStream;

        specialinvoke $r2.<org.apache.lucene.store.RAMOutputStream: void <init>()>();

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.RAMOutputStream scratchBytes> = $r2;

        if i0 > 1 goto label01;

        $r43 = new java.lang.IllegalArgumentException;

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minItemsInBlock must be >= 2; got ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r43.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r47);

        throw $r43;

     label01:
        if i1 > 0 goto label02;

        $r38 = new java.lang.IllegalArgumentException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxItemsInBlock must be >= 1; got ");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r42);

        throw $r38;

     label02:
        if i0 <= i1 goto label03;

        $r31 = new java.lang.IllegalArgumentException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxItemsInBlock must be >= minItemsInBlock; got maxItemsInBlock=");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" minItemsInBlock=");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r37);

        throw $r31;

     label03:
        $i2 = i0 - 1;

        $i3 = 2 * $i2;

        if $i3 <= i1 goto label04;

        $r24 = new java.lang.IllegalArgumentException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maxItemsInBlock must be at least 2*(minItemsInBlock-1); got maxItemsInBlock=");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" minItemsInBlock=");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r30);

        throw $r24;

     label04:
        $r4 = r3.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.SegmentInfo segmentInfo>;

        $r6 = $r4.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r5 = r3.<org.apache.lucene.index.SegmentWriteState: java.lang.String segmentSuffix>;

        $r7 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r6, $r5, "tim");

        $r9 = r3.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.store.Directory directory>;

        $r8 = r3.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.store.IOContext context>;

        $r10 = virtualinvoke $r9.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String,org.apache.lucene.store.IOContext)>($r7, $r8);

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out> = $r10;

        r51 = null;

     label05:
        $r11 = r3.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.FieldInfos fieldInfos>;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.index.FieldInfos fieldInfos> = $r11;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: int minItemsInBlock> = i0;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: int maxItemsInBlock> = i1;

        $r12 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        virtualinvoke r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: void writeHeader(org.apache.lucene.store.IndexOutput)>($r12);

        $r13 = r3.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.index.SegmentInfo segmentInfo>;

        $r15 = $r13.<org.apache.lucene.index.SegmentInfo: java.lang.String name>;

        $r14 = r3.<org.apache.lucene.index.SegmentWriteState: java.lang.String segmentSuffix>;

        $r16 = staticinvoke <org.apache.lucene.index.IndexFileNames: java.lang.String segmentFileName(java.lang.String,java.lang.String,java.lang.String)>($r15, $r14, "tip");

        $r18 = r3.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.store.Directory directory>;

        $r17 = r3.<org.apache.lucene.index.SegmentWriteState: org.apache.lucene.store.IOContext context>;

        $r19 = virtualinvoke $r18.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String,org.apache.lucene.store.IOContext)>($r16, $r17);

        r51 = $r19;

        virtualinvoke r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: void writeIndexHeader(org.apache.lucene.store.IndexOutput)>($r19);

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.index.FieldInfo currentField> = null;

        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.codecs.PostingsWriterBase postingsWriter> = r20;

        $r21 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        virtualinvoke r20.<org.apache.lucene.codecs.PostingsWriterBase: void start(org.apache.lucene.store.IndexOutput)>($r21);

     label06:
        if 1 != 0 goto label10;

        $r22 = newarray (java.io.Closeable)[2];

        $r23 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        $r22[0] = $r23;

        $r22[1] = $r19;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r22);

        goto label10;

     label07:
        $r48 := @caughtexception;

     label08:
        if 0 != 0 goto label09;

        $r49 = newarray (java.io.Closeable)[2];

        $r50 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        $r49[0] = $r50;

        $r49[1] = r51;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.io.Closeable[])>($r49);

     label09:
        throw $r48;

     label10:
        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput indexOut> = $r19;

        return;

        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label07 to label08 with label07;
    }

    protected void writeHeader(org.apache.lucene.store.IndexOutput) throws java.io.IOException
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter r1;
        org.apache.lucene.store.IndexOutput r0;

        r1 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter;

        r0 := @parameter0: org.apache.lucene.store.IndexOutput;

        staticinvoke <org.apache.lucene.codecs.CodecUtil: void writeHeader(org.apache.lucene.store.DataOutput,java.lang.String,int)>(r0, "BLOCK_TREE_TERMS_DICT", 1);

        return;
    }

    protected void writeIndexHeader(org.apache.lucene.store.IndexOutput) throws java.io.IOException
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter r1;
        org.apache.lucene.store.IndexOutput r0;

        r1 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter;

        r0 := @parameter0: org.apache.lucene.store.IndexOutput;

        staticinvoke <org.apache.lucene.codecs.CodecUtil: void writeHeader(org.apache.lucene.store.DataOutput,java.lang.String,int)>(r0, "BLOCK_TREE_TERMS_INDEX", 1);

        return;
    }

    protected void writeTrailer(org.apache.lucene.store.IndexOutput, long) throws java.io.IOException
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter r1;
        long l0;
        org.apache.lucene.store.IndexOutput r0;

        r1 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter;

        r0 := @parameter0: org.apache.lucene.store.IndexOutput;

        l0 := @parameter1: long;

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeLong(long)>(l0);

        return;
    }

    protected void writeIndexTrailer(org.apache.lucene.store.IndexOutput, long) throws java.io.IOException
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter r1;
        long l0;
        org.apache.lucene.store.IndexOutput r0;

        r1 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter;

        r0 := @parameter0: org.apache.lucene.store.IndexOutput;

        l0 := @parameter1: long;

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeLong(long)>(l0);

        return;
    }

    public org.apache.lucene.codecs.TermsConsumer addField(org.apache.lucene.index.FieldInfo) throws java.io.IOException
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter r0;
        java.lang.AssertionError $r6;
        org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter $r7;
        int $i0;
        org.apache.lucene.index.FieldInfo r1, $r2, $r3;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter;

        r1 := @parameter0: org.apache.lucene.index.FieldInfo;

        $z0 = <org.apache.lucene.codecs.BlockTreeTermsWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r2 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.index.FieldInfo currentField>;

        if $r2 == null goto label1;

        $r3 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.index.FieldInfo currentField>;

        $r5 = $r3.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $r4 = r1.<org.apache.lucene.index.FieldInfo: java.lang.String name>;

        $i0 = virtualinvoke $r5.<java.lang.String: int compareTo(java.lang.String)>($r4);

        if $i0 < 0 goto label1;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;

     label1:
        r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.index.FieldInfo currentField> = r1;

        $r7 = new org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter;

        specialinvoke $r7.<org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter: void <init>(org.apache.lucene.codecs.BlockTreeTermsWriter,org.apache.lucene.index.FieldInfo)>(r0, r1);

        return $r7;
    }

    static long encodeOutput(long, boolean, boolean)
    {
        long l0, $l1, $l2, $l3, $l4, $l5;
        java.lang.AssertionError $r1;
        byte $b6, $b7;
        int $i8;
        boolean $z0, z1, z2, $z3;

        l0 := @parameter0: long;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        $z0 = <org.apache.lucene.codecs.BlockTreeTermsWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $b6 = l0 cmp 4611686018427387904L;

        $i8 = (int) $b6;

        if $i8 < 0 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        $l2 = l0 << 2;

        if z1 == 0 goto label2;

        $b7 = 2;

        goto label3;

     label2:
        $b7 = 0;

     label3:
        $l1 = (long) $b7;

        $l4 = $l2 | $l1;

        if z2 == 0 goto label4;

        $z3 = 1;

        goto label5;

     label4:
        $z3 = 0;

     label5:
        $l3 = (long) $z3;

        $l5 = $l4 | $l3;

        return $l5;
    }

    public void close() throws java.io.IOException
    {
        byte[] $r23;
        org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData r14;
        java.io.Closeable[] $r9, $r33, $r38;
        org.apache.lucene.codecs.PostingsWriterBase $r12, $r36, $r41;
        boolean $z0;
        org.apache.lucene.index.FieldInfo$IndexOptions $r26, $r27;
        org.apache.lucene.util.BytesRef $r18, $r20, $r21, $r22;
        org.apache.lucene.codecs.BlockTreeTermsWriter r0;
        java.util.List $r3, $r5;
        java.lang.Throwable $r32;
        long $l0, $l1, $l4, $l8, $l10, $l11;
        int $i2, $i3, $i5, $i6, $i7, $i9;
        org.apache.lucene.store.IndexOutput $r1, $r2, $r4, $r7, $r8, $r10, $r11, $r16, $r17, $r19, $r24, $r28, $r29, $r30, $r31, $r34, $r35, $r39, $r40;
        java.util.Iterator $r6;
        java.io.IOException $r37;
        org.apache.lucene.index.FieldInfo $r15, $r25;
        java.lang.Object $r13;

        r0 := @this: org.apache.lucene.codecs.BlockTreeTermsWriter;

     label01:
        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        $l0 = virtualinvoke $r1.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        $r2 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput indexOut>;

        $l1 = virtualinvoke $r2.<org.apache.lucene.store.IndexOutput: long getFilePointer()>();

        $r4 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        $r3 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: java.util.List fields>;

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        virtualinvoke $r4.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i2);

        $r5 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: java.util.List fields>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r13 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r14 = (org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData) $r13;

        $r16 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        $r15 = r14.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: org.apache.lucene.index.FieldInfo fieldInfo>;

        $i3 = $r15.<org.apache.lucene.index.FieldInfo: int number>;

        virtualinvoke $r16.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i3);

        $r17 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        $l4 = r14.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: long numTerms>;

        virtualinvoke $r17.<org.apache.lucene.store.IndexOutput: void writeVLong(long)>($l4);

        $r19 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        $r18 = r14.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: org.apache.lucene.util.BytesRef rootCode>;

        $i5 = $r18.<org.apache.lucene.util.BytesRef: int length>;

        virtualinvoke $r19.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i5);

        $r24 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        $r20 = r14.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: org.apache.lucene.util.BytesRef rootCode>;

        $r23 = $r20.<org.apache.lucene.util.BytesRef: byte[] bytes>;

        $r21 = r14.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: org.apache.lucene.util.BytesRef rootCode>;

        $i7 = $r21.<org.apache.lucene.util.BytesRef: int offset>;

        $r22 = r14.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: org.apache.lucene.util.BytesRef rootCode>;

        $i6 = $r22.<org.apache.lucene.util.BytesRef: int length>;

        virtualinvoke $r24.<org.apache.lucene.store.IndexOutput: void writeBytes(byte[],int,int)>($r23, $i7, $i6);

        $r25 = r14.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: org.apache.lucene.index.FieldInfo fieldInfo>;

        $r26 = virtualinvoke $r25.<org.apache.lucene.index.FieldInfo: org.apache.lucene.index.FieldInfo$IndexOptions getIndexOptions()>();

        $r27 = <org.apache.lucene.index.FieldInfo$IndexOptions: org.apache.lucene.index.FieldInfo$IndexOptions DOCS_ONLY>;

        if $r26 == $r27 goto label03;

        $r31 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        $l11 = r14.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: long sumTotalTermFreq>;

        virtualinvoke $r31.<org.apache.lucene.store.IndexOutput: void writeVLong(long)>($l11);

     label03:
        $r28 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        $l8 = r14.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: long sumDocFreq>;

        virtualinvoke $r28.<org.apache.lucene.store.IndexOutput: void writeVLong(long)>($l8);

        $r29 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        $i9 = r14.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: int docCount>;

        virtualinvoke $r29.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i9);

        $r30 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput indexOut>;

        $l10 = r14.<org.apache.lucene.codecs.BlockTreeTermsWriter$FieldMetaData: long indexStartFP>;

        virtualinvoke $r30.<org.apache.lucene.store.IndexOutput: void writeVLong(long)>($l10);

        goto label02;

     label04:
        $r7 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        virtualinvoke r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: void writeTrailer(org.apache.lucene.store.IndexOutput,long)>($r7, $l0);

        $r8 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput indexOut>;

        virtualinvoke r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: void writeIndexTrailer(org.apache.lucene.store.IndexOutput,long)>($r8, $l1);

     label05:
        $r9 = newarray (java.io.Closeable)[3];

        $r10 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        $r9[0] = $r10;

        $r11 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput indexOut>;

        $r9[1] = $r11;

        $r12 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.codecs.PostingsWriterBase postingsWriter>;

        $r9[2] = $r12;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>(null, $r9);

        goto label10;

     label06:
        $r37 := @caughtexception;

     label07:
        $r38 = newarray (java.io.Closeable)[3];

        $r39 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        $r38[0] = $r39;

        $r40 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput indexOut>;

        $r38[1] = $r40;

        $r41 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.codecs.PostingsWriterBase postingsWriter>;

        $r38[2] = $r41;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>($r37, $r38);

        goto label10;

     label08:
        $r32 := @caughtexception;

     label09:
        $r33 = newarray (java.io.Closeable)[3];

        $r34 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        $r33[0] = $r34;

        $r35 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput indexOut>;

        $r33[1] = $r35;

        $r36 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.codecs.PostingsWriterBase postingsWriter>;

        $r33[2] = $r36;

        staticinvoke <org.apache.lucene.util.IOUtils: void closeWhileHandlingException(java.lang.Exception,java.io.Closeable[])>(null, $r33);

        throw $r32;

     label10:
        return;

        catch java.io.IOException from label01 to label05 with label06;
        catch java.lang.Throwable from label01 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    static org.apache.lucene.store.IndexOutput access$100(org.apache.lucene.codecs.BlockTreeTermsWriter)
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter r0;
        org.apache.lucene.store.IndexOutput $r1;

        r0 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsWriter;

        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput out>;

        return $r1;
    }

    static org.apache.lucene.store.IndexOutput access$300(org.apache.lucene.codecs.BlockTreeTermsWriter)
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter r0;
        org.apache.lucene.store.IndexOutput $r1;

        r0 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsWriter;

        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: org.apache.lucene.store.IndexOutput indexOut>;

        return $r1;
    }

    static java.util.List access$400(org.apache.lucene.codecs.BlockTreeTermsWriter)
    {
        org.apache.lucene.codecs.BlockTreeTermsWriter r0;
        java.util.List $r1;

        r0 := @parameter0: org.apache.lucene.codecs.BlockTreeTermsWriter;

        $r1 = r0.<org.apache.lucene.codecs.BlockTreeTermsWriter: java.util.List fields>;

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.codecs.BlockTreeTermsWriter: int TERMS_INDEX_VERSION_CURRENT> = 1;

        <org.apache.lucene.codecs.BlockTreeTermsWriter: int TERMS_INDEX_VERSION_APPEND_ONLY> = 1;

        <org.apache.lucene.codecs.BlockTreeTermsWriter: int TERMS_INDEX_VERSION_START> = 0;

        <org.apache.lucene.codecs.BlockTreeTermsWriter: java.lang.String TERMS_INDEX_CODEC_NAME> = "BLOCK_TREE_TERMS_INDEX";

        <org.apache.lucene.codecs.BlockTreeTermsWriter: java.lang.String TERMS_INDEX_EXTENSION> = "tip";

        <org.apache.lucene.codecs.BlockTreeTermsWriter: int TERMS_VERSION_CURRENT> = 1;

        <org.apache.lucene.codecs.BlockTreeTermsWriter: int TERMS_VERSION_APPEND_ONLY> = 1;

        <org.apache.lucene.codecs.BlockTreeTermsWriter: int TERMS_VERSION_START> = 0;

        <org.apache.lucene.codecs.BlockTreeTermsWriter: java.lang.String TERMS_CODEC_NAME> = "BLOCK_TREE_TERMS_DICT";

        <org.apache.lucene.codecs.BlockTreeTermsWriter: java.lang.String TERMS_EXTENSION> = "tim";

        <org.apache.lucene.codecs.BlockTreeTermsWriter: int OUTPUT_FLAG_HAS_TERMS> = 2;

        <org.apache.lucene.codecs.BlockTreeTermsWriter: int OUTPUT_FLAG_IS_FLOOR> = 1;

        <org.apache.lucene.codecs.BlockTreeTermsWriter: int OUTPUT_FLAGS_MASK> = 3;

        <org.apache.lucene.codecs.BlockTreeTermsWriter: int OUTPUT_FLAGS_NUM_BITS> = 2;

        <org.apache.lucene.codecs.BlockTreeTermsWriter: int DEFAULT_MAX_BLOCK_SIZE> = 48;

        <org.apache.lucene.codecs.BlockTreeTermsWriter: int DEFAULT_MIN_BLOCK_SIZE> = 25;

        $r0 = class "Lorg/apache/lucene/codecs/BlockTreeTermsWriter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.codecs.BlockTreeTermsWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
