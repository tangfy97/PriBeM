public class org.eclipse.jetty.io.PooledBuffers extends org.eclipse.jetty.io.AbstractBuffers
{
    private final java.util.Queue _headers;
    private final java.util.Queue _buffers;
    private final java.util.Queue _others;
    private final java.util.concurrent.atomic.AtomicInteger _size;
    private final int _maxSize;
    private final boolean _otherHeaders;
    private final boolean _otherBuffers;

    public void <init>(org.eclipse.jetty.io.Buffers$Type, int, org.eclipse.jetty.io.Buffers$Type, int, org.eclipse.jetty.io.Buffers$Type, int)
    {
        org.eclipse.jetty.io.Buffers$Type r1, r2, r3;
        java.util.concurrent.atomic.AtomicInteger $r4;
        org.eclipse.jetty.io.PooledBuffers r0;
        int i0, i1, i2;
        java.util.concurrent.ConcurrentLinkedQueue $r5, $r6, $r7;
        boolean $z0, $z1;

        r0 := @this: org.eclipse.jetty.io.PooledBuffers;

        r1 := @parameter0: org.eclipse.jetty.io.Buffers$Type;

        i0 := @parameter1: int;

        r2 := @parameter2: org.eclipse.jetty.io.Buffers$Type;

        i1 := @parameter3: int;

        r3 := @parameter4: org.eclipse.jetty.io.Buffers$Type;

        i2 := @parameter5: int;

        specialinvoke r0.<org.eclipse.jetty.io.AbstractBuffers: void <init>(org.eclipse.jetty.io.Buffers$Type,int,org.eclipse.jetty.io.Buffers$Type,int,org.eclipse.jetty.io.Buffers$Type)>(r1, i0, r2, i1, r3);

        $r4 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<org.eclipse.jetty.io.PooledBuffers: java.util.concurrent.atomic.AtomicInteger _size> = $r4;

        $r5 = new java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke $r5.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        r0.<org.eclipse.jetty.io.PooledBuffers: java.util.Queue _headers> = $r5;

        $r6 = new java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke $r6.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        r0.<org.eclipse.jetty.io.PooledBuffers: java.util.Queue _buffers> = $r6;

        $r7 = new java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke $r7.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        r0.<org.eclipse.jetty.io.PooledBuffers: java.util.Queue _others> = $r7;

        if r1 != r3 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        r0.<org.eclipse.jetty.io.PooledBuffers: boolean _otherHeaders> = $z0;

        if r2 != r3 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        r0.<org.eclipse.jetty.io.PooledBuffers: boolean _otherBuffers> = $z1;

        r0.<org.eclipse.jetty.io.PooledBuffers: int _maxSize> = i2;

        return;
    }

    public org.eclipse.jetty.io.Buffer getHeader()
    {
        java.util.concurrent.atomic.AtomicInteger $r3;
        org.eclipse.jetty.io.PooledBuffers r0;
        java.lang.Object $r2;
        java.util.Queue $r1;
        org.eclipse.jetty.io.Buffer r4;

        r0 := @this: org.eclipse.jetty.io.PooledBuffers;

        $r1 = r0.<org.eclipse.jetty.io.PooledBuffers: java.util.Queue _headers>;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object poll()>();

        r4 = (org.eclipse.jetty.io.Buffer) $r2;

        if r4 != null goto label1;

        r4 = virtualinvoke r0.<org.eclipse.jetty.io.PooledBuffers: org.eclipse.jetty.io.Buffer newHeader()>();

        goto label2;

     label1:
        $r3 = r0.<org.eclipse.jetty.io.PooledBuffers: java.util.concurrent.atomic.AtomicInteger _size>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

     label2:
        return r4;
    }

    public org.eclipse.jetty.io.Buffer getBuffer()
    {
        java.util.concurrent.atomic.AtomicInteger $r3;
        org.eclipse.jetty.io.PooledBuffers r0;
        java.lang.Object $r2;
        java.util.Queue $r1;
        org.eclipse.jetty.io.Buffer r4;

        r0 := @this: org.eclipse.jetty.io.PooledBuffers;

        $r1 = r0.<org.eclipse.jetty.io.PooledBuffers: java.util.Queue _buffers>;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object poll()>();

        r4 = (org.eclipse.jetty.io.Buffer) $r2;

        if r4 != null goto label1;

        r4 = virtualinvoke r0.<org.eclipse.jetty.io.PooledBuffers: org.eclipse.jetty.io.Buffer newBuffer()>();

        goto label2;

     label1:
        $r3 = r0.<org.eclipse.jetty.io.PooledBuffers: java.util.concurrent.atomic.AtomicInteger _size>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

     label2:
        return r4;
    }

    public org.eclipse.jetty.io.Buffer getBuffer(int)
    {
        java.util.concurrent.atomic.AtomicInteger $r3, $r4;
        int i0, $i1, $i2, $i3;
        org.eclipse.jetty.io.Buffer $r7, $r8, r9;
        boolean $z0, $z1;
        org.eclipse.jetty.io.PooledBuffers r0;
        java.lang.Object $r2, $r6;
        java.util.Queue $r1, $r5;

        r0 := @this: org.eclipse.jetty.io.PooledBuffers;

        i0 := @parameter0: int;

        $z0 = r0.<org.eclipse.jetty.io.PooledBuffers: boolean _otherHeaders>;

        if $z0 == 0 goto label1;

        $i3 = virtualinvoke r0.<org.eclipse.jetty.io.PooledBuffers: int getHeaderSize()>();

        if i0 != $i3 goto label1;

        $r8 = virtualinvoke r0.<org.eclipse.jetty.io.PooledBuffers: org.eclipse.jetty.io.Buffer getHeader()>();

        return $r8;

     label1:
        $z1 = r0.<org.eclipse.jetty.io.PooledBuffers: boolean _otherBuffers>;

        if $z1 == 0 goto label2;

        $i2 = virtualinvoke r0.<org.eclipse.jetty.io.PooledBuffers: int getBufferSize()>();

        if i0 != $i2 goto label2;

        $r7 = virtualinvoke r0.<org.eclipse.jetty.io.PooledBuffers: org.eclipse.jetty.io.Buffer getBuffer()>();

        return $r7;

     label2:
        $r1 = r0.<org.eclipse.jetty.io.PooledBuffers: java.util.Queue _others>;

        $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object poll()>();

        r9 = (org.eclipse.jetty.io.Buffer) $r2;

     label3:
        if r9 == null goto label4;

        $i1 = interfaceinvoke r9.<org.eclipse.jetty.io.Buffer: int capacity()>();

        if $i1 == i0 goto label4;

        $r4 = r0.<org.eclipse.jetty.io.PooledBuffers: java.util.concurrent.atomic.AtomicInteger _size>;

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        $r5 = r0.<org.eclipse.jetty.io.PooledBuffers: java.util.Queue _others>;

        $r6 = interfaceinvoke $r5.<java.util.Queue: java.lang.Object poll()>();

        r9 = (org.eclipse.jetty.io.Buffer) $r6;

        goto label3;

     label4:
        if r9 != null goto label5;

        r9 = virtualinvoke r0.<org.eclipse.jetty.io.PooledBuffers: org.eclipse.jetty.io.Buffer newBuffer(int)>(i0);

        goto label6;

     label5:
        $r3 = r0.<org.eclipse.jetty.io.PooledBuffers: java.util.concurrent.atomic.AtomicInteger _size>;

        virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

     label6:
        return r9;
    }

    public void returnBuffer(org.eclipse.jetty.io.Buffer)
    {
        java.util.concurrent.atomic.AtomicInteger $r2, $r6;
        org.eclipse.jetty.io.PooledBuffers r1;
        int $i0, $i1;
        java.util.Queue $r3, $r4, $r5;
        org.eclipse.jetty.io.Buffer r0;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.eclipse.jetty.io.PooledBuffers;

        r0 := @parameter0: org.eclipse.jetty.io.Buffer;

        interfaceinvoke r0.<org.eclipse.jetty.io.Buffer: void clear()>();

        $z0 = interfaceinvoke r0.<org.eclipse.jetty.io.Buffer: boolean isVolatile()>();

        if $z0 != 0 goto label1;

        $z1 = interfaceinvoke r0.<org.eclipse.jetty.io.Buffer: boolean isImmutable()>();

        if $z1 == 0 goto label2;

     label1:
        return;

     label2:
        $r2 = r1.<org.eclipse.jetty.io.PooledBuffers: java.util.concurrent.atomic.AtomicInteger _size>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $i1 = r1.<org.eclipse.jetty.io.PooledBuffers: int _maxSize>;

        if $i0 <= $i1 goto label3;

        $r6 = r1.<org.eclipse.jetty.io.PooledBuffers: java.util.concurrent.atomic.AtomicInteger _size>;

        virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>();

        goto label6;

     label3:
        $z2 = virtualinvoke r1.<org.eclipse.jetty.io.PooledBuffers: boolean isHeader(org.eclipse.jetty.io.Buffer)>(r0);

        if $z2 == 0 goto label4;

        $r5 = r1.<org.eclipse.jetty.io.PooledBuffers: java.util.Queue _headers>;

        interfaceinvoke $r5.<java.util.Queue: boolean add(java.lang.Object)>(r0);

        goto label6;

     label4:
        $z3 = virtualinvoke r1.<org.eclipse.jetty.io.PooledBuffers: boolean isBuffer(org.eclipse.jetty.io.Buffer)>(r0);

        if $z3 == 0 goto label5;

        $r4 = r1.<org.eclipse.jetty.io.PooledBuffers: java.util.Queue _buffers>;

        interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>(r0);

        goto label6;

     label5:
        $r3 = r1.<org.eclipse.jetty.io.PooledBuffers: java.util.Queue _others>;

        interfaceinvoke $r3.<java.util.Queue: boolean add(java.lang.Object)>(r0);

     label6:
        return;
    }

    public java.lang.String toString()
    {
        java.lang.Object[] $r0;
        java.lang.Integer $r5, $r6, $r7, $r9, $r10, $r11, $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r3, $r15;
        org.eclipse.jetty.io.PooledBuffers r1;
        java.lang.Class $r2;
        java.util.Queue $r4, $r8, $r12;

        r1 := @this: org.eclipse.jetty.io.PooledBuffers;

        $r0 = newarray (java.lang.Object)[9];

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        $r0[0] = $r3;

        $r4 = r1.<org.eclipse.jetty.io.PooledBuffers: java.util.Queue _headers>;

        $i0 = interfaceinvoke $r4.<java.util.Queue: int size()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0[1] = $r5;

        $i1 = r1.<org.eclipse.jetty.io.PooledBuffers: int _maxSize>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r0[2] = $r6;

        $i2 = r1.<org.eclipse.jetty.io.PooledBuffers: int _headerSize>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r0[3] = $r7;

        $r8 = r1.<org.eclipse.jetty.io.PooledBuffers: java.util.Queue _buffers>;

        $i3 = interfaceinvoke $r8.<java.util.Queue: int size()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r0[4] = $r9;

        $i4 = r1.<org.eclipse.jetty.io.PooledBuffers: int _maxSize>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r0[5] = $r10;

        $i5 = r1.<org.eclipse.jetty.io.PooledBuffers: int _bufferSize>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r0[6] = $r11;

        $r12 = r1.<org.eclipse.jetty.io.PooledBuffers: java.util.Queue _others>;

        $i6 = interfaceinvoke $r12.<java.util.Queue: int size()>();

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r0[7] = $r13;

        $i7 = r1.<org.eclipse.jetty.io.PooledBuffers: int _maxSize>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $r0[8] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s [%d/%d@%d,%d/%d@%d,%d/%d@-]", $r0);

        return $r15;
    }
}
