public class org.apache.lucene.index.SegmentInfoPerCommit extends java.lang.Object
{
    public final org.apache.lucene.index.SegmentInfo info;
    private int delCount;
    private long delGen;
    private long nextWriteDelGen;
    private volatile long sizeInBytes;
    private long bufferedDeletesGen;
    static final boolean $assertionsDisabled;

    public void <init>(org.apache.lucene.index.SegmentInfo, int, long)
    {
        byte $b2;
        org.apache.lucene.index.SegmentInfo r1;
        int i0;
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        long l1, $l3;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        r1 := @parameter0: org.apache.lucene.index.SegmentInfo;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long sizeInBytes> = -1L;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info> = r1;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: int delCount> = i0;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long delGen> = l1;

        $b2 = l1 cmp -1L;

        if $b2 != 0 goto label1;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long nextWriteDelGen> = 1L;

        goto label2;

     label1:
        $l3 = l1 + 1L;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long nextWriteDelGen> = $l3;

     label2:
        return;
    }

    void advanceDelGen()
    {
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        long $l0, $l1, $l2;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        $l0 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: long nextWriteDelGen>;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long delGen> = $l0;

        $l1 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: long delGen>;

        $l2 = $l1 + 1L;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long nextWriteDelGen> = $l2;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long sizeInBytes> = -1L;

        return;
    }

    void advanceNextWriteDelGen()
    {
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        long $l0, $l1;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        $l0 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: long nextWriteDelGen>;

        $l1 = $l0 + 1L;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long nextWriteDelGen> = $l1;

        return;
    }

    public long sizeInBytes() throws java.io.IOException
    {
        java.util.Iterator $r2;
        java.util.Collection $r1;
        org.apache.lucene.index.SegmentInfo $r5;
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        long $l0, $l2, $l3, l4;
        byte $b1;
        org.apache.lucene.store.Directory $r6;
        java.lang.Object $r3;
        java.lang.String r4;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        $l0 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: long sizeInBytes>;

        $b1 = $l0 cmp -1L;

        if $b1 != 0 goto label3;

        l4 = 0L;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfoPerCommit: java.util.Collection files()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r6 = $r5.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        $l3 = virtualinvoke $r6.<org.apache.lucene.store.Directory: long fileLength(java.lang.String)>(r4);

        l4 = l4 + $l3;

        goto label1;

     label2:
        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long sizeInBytes> = l4;

     label3:
        $l2 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: long sizeInBytes>;

        return $l2;
    }

    public java.util.Collection files() throws java.io.IOException
    {
        java.util.HashSet $r0;
        org.apache.lucene.index.SegmentInfo $r2, $r4;
        org.apache.lucene.codecs.Codec $r5;
        org.apache.lucene.index.SegmentInfoPerCommit r1;
        java.util.Set $r3;
        org.apache.lucene.codecs.LiveDocsFormat $r6;

        r1 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        $r0 = new java.util.HashSet;

        $r2 = r1.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.SegmentInfo: java.util.Set files()>();

        specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>($r3);

        $r4 = r1.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.codecs.Codec getCodec()>();

        $r6 = virtualinvoke $r5.<org.apache.lucene.codecs.Codec: org.apache.lucene.codecs.LiveDocsFormat liveDocsFormat()>();

        virtualinvoke $r6.<org.apache.lucene.codecs.LiveDocsFormat: void files(org.apache.lucene.index.SegmentInfoPerCommit,java.util.Collection)>(r1, $r0);

        return $r0;
    }

    long getBufferedDeletesGen()
    {
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        long $l0;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        $l0 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: long bufferedDeletesGen>;

        return $l0;
    }

    void setBufferedDeletesGen(long)
    {
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        long l0;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        l0 := @parameter0: long;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long bufferedDeletesGen> = l0;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long sizeInBytes> = -1L;

        return;
    }

    void clearDelGen()
    {
        org.apache.lucene.index.SegmentInfoPerCommit r0;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long delGen> = -1L;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long sizeInBytes> = -1L;

        return;
    }

    public void setDelGen(long)
    {
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        long l0;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        l0 := @parameter0: long;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long delGen> = l0;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: long sizeInBytes> = -1L;

        return;
    }

    public boolean hasDeletions()
    {
        byte $b1;
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        long $l0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        $l0 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: long delGen>;

        $b1 = $l0 cmp -1L;

        if $b1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long getNextDelGen()
    {
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        long $l0;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        $l0 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: long nextWriteDelGen>;

        return $l0;
    }

    public long getDelGen()
    {
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        long $l0;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        $l0 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: long delGen>;

        return $l0;
    }

    public int getDelCount()
    {
        int $i0;
        org.apache.lucene.index.SegmentInfoPerCommit r0;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        $i0 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: int delCount>;

        return $i0;
    }

    void setDelCount(int)
    {
        org.apache.lucene.index.SegmentInfo $r1;
        int i0, $i1;
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        java.lang.AssertionError $r2;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.index.SegmentInfoPerCommit: int delCount> = i0;

        $z0 = <org.apache.lucene.index.SegmentInfoPerCommit: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i1 = virtualinvoke $r1.<org.apache.lucene.index.SegmentInfo: int getDocCount()>();

        if i0 <= $i1 goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        return;
    }

    public java.lang.String toString(org.apache.lucene.store.Directory, int)
    {
        org.apache.lucene.store.Directory r1;
        org.apache.lucene.index.SegmentInfo $r2;
        int i0, $i1, $i2;
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        java.lang.String $r3;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        r1 := @parameter0: org.apache.lucene.store.Directory;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i1 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: int delCount>;

        $i2 = $i1 + i0;

        $r3 = virtualinvoke $r2.<org.apache.lucene.index.SegmentInfo: java.lang.String toString(org.apache.lucene.store.Directory,int)>(r1, $i2);

        return $r3;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.index.SegmentInfo $r1, $r3;
        org.apache.lucene.index.SegmentInfoPerCommit r0;
        long $l1, $l3;
        byte $b2;
        org.apache.lucene.store.Directory $r2;
        int $i0;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r4, r9;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        $r3 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r1 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $r2 = $r1.<org.apache.lucene.index.SegmentInfo: org.apache.lucene.store.Directory dir>;

        $i0 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: int delCount>;

        $r4 = virtualinvoke $r3.<org.apache.lucene.index.SegmentInfo: java.lang.String toString(org.apache.lucene.store.Directory,int)>($r2, $i0);

        r9 = $r4;

        $l1 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: long delGen>;

        $b2 = $l1 cmp -1L;

        if $b2 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":delGen=");

        $l3 = r0.<org.apache.lucene.index.SegmentInfoPerCommit: long delGen>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        return r9;
    }

    public org.apache.lucene.index.SegmentInfoPerCommit clone()
    {
        org.apache.lucene.index.SegmentInfo $r2;
        int $i1;
        org.apache.lucene.index.SegmentInfoPerCommit $r0, r1;
        long $l0, $l2;

        r1 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        $r0 = new org.apache.lucene.index.SegmentInfoPerCommit;

        $r2 = r1.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfo info>;

        $i1 = r1.<org.apache.lucene.index.SegmentInfoPerCommit: int delCount>;

        $l0 = r1.<org.apache.lucene.index.SegmentInfoPerCommit: long delGen>;

        specialinvoke $r0.<org.apache.lucene.index.SegmentInfoPerCommit: void <init>(org.apache.lucene.index.SegmentInfo,int,long)>($r2, $i1, $l0);

        $l2 = r1.<org.apache.lucene.index.SegmentInfoPerCommit: long nextWriteDelGen>;

        $r0.<org.apache.lucene.index.SegmentInfoPerCommit: long nextWriteDelGen> = $l2;

        return $r0;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.index.SegmentInfoPerCommit r0, $r1;

        r0 := @this: org.apache.lucene.index.SegmentInfoPerCommit;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.SegmentInfoPerCommit: org.apache.lucene.index.SegmentInfoPerCommit clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/SegmentInfoPerCommit;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.SegmentInfoPerCommit: boolean $assertionsDisabled> = $z1;

        return;
    }
}
