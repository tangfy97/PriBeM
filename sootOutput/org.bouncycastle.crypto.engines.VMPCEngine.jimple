public class org.bouncycastle.crypto.engines.VMPCEngine extends java.lang.Object implements org.bouncycastle.crypto.StreamCipher
{
    protected byte n;
    protected byte[] P;
    protected byte s;
    protected byte[] workingIV;
    protected byte[] workingKey;

    public void <init>()
    {
        org.bouncycastle.crypto.engines.VMPCEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.VMPCEngine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte n> = 0;

        r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P> = null;

        r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s> = 0;

        return;
    }

    public java.lang.String getAlgorithmName()
    {
        org.bouncycastle.crypto.engines.VMPCEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.VMPCEngine;

        return "VMPC";
    }

    public void init(boolean, org.bouncycastle.crypto.CipherParameters)
    {
        byte[] $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        org.bouncycastle.crypto.params.ParametersWithIV r1;
        int $i0, $i1;
        org.bouncycastle.crypto.params.KeyParameter r3;
        org.bouncycastle.crypto.CipherParameters r0, $r2, $r4;
        boolean $z0, $z1, z2;
        java.lang.IllegalArgumentException $r13, $r14, $r15;
        org.bouncycastle.crypto.engines.VMPCEngine r5;

        r5 := @this: org.bouncycastle.crypto.engines.VMPCEngine;

        z2 := @parameter0: boolean;

        r0 := @parameter1: org.bouncycastle.crypto.CipherParameters;

        $z0 = r0 instanceof org.bouncycastle.crypto.params.ParametersWithIV;

        if $z0 != 0 goto label1;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("VMPC init parameters must include an IV");

        throw $r14;

     label1:
        r1 = (org.bouncycastle.crypto.params.ParametersWithIV) r0;

        $r2 = virtualinvoke r1.<org.bouncycastle.crypto.params.ParametersWithIV: org.bouncycastle.crypto.CipherParameters getParameters()>();

        r3 = (org.bouncycastle.crypto.params.KeyParameter) $r2;

        $r4 = virtualinvoke r1.<org.bouncycastle.crypto.params.ParametersWithIV: org.bouncycastle.crypto.CipherParameters getParameters()>();

        $z1 = $r4 instanceof org.bouncycastle.crypto.params.KeyParameter;

        if $z1 != 0 goto label2;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("VMPC init parameters must include a key");

        throw $r13;

     label2:
        $r6 = virtualinvoke r1.<org.bouncycastle.crypto.params.ParametersWithIV: byte[] getIV()>();

        r5.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] workingIV> = $r6;

        $r7 = r5.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] workingIV>;

        if $r7 == null goto label3;

        $r8 = r5.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] workingIV>;

        $i0 = lengthof $r8;

        if $i0 < 1 goto label3;

        $r9 = r5.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] workingIV>;

        $i1 = lengthof $r9;

        if $i1 <= 768 goto label4;

     label3:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("VMPC requires 1 to 768 bytes of IV");

        throw $r15;

     label4:
        $r10 = virtualinvoke r3.<org.bouncycastle.crypto.params.KeyParameter: byte[] getKey()>();

        r5.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] workingKey> = $r10;

        $r12 = r5.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] workingKey>;

        $r11 = r5.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] workingIV>;

        virtualinvoke r5.<org.bouncycastle.crypto.engines.VMPCEngine: void initKey(byte[],byte[])>($r12, $r11);

        return;
    }

    protected void initKey(byte[], byte[])
    {
        byte[] $r1, $r2, r3, $r4, $r5, $r6, $r7, $r8, $r9, r10, $r11, $r12, $r13, $r14, $r15, $r16;
        byte $b1, $b2, $b5, $b9, $b11, $b13, $b15, $b18, $b19, $b22, $b26, $b28, $b30, $b32, $b34, b37, b39;
        short $s12, $s16, $s29, $s33, $s43, $s45, $s50, $s52;
        org.bouncycastle.crypto.engines.VMPCEngine r0;
        int $i0, $i3, $i4, $i6, $i7, $i8, $i10, $i14, $i17, $i20, $i21, $i23, $i24, $i25, $i27, $i31, i35, i36, i38, $i40, $i41, $i42, $i44, $i46, $i47, $i48, $i49, $i51, $i53;

        r0 := @this: org.bouncycastle.crypto.engines.VMPCEngine;

        r10 := @parameter0: byte[];

        r3 := @parameter1: byte[];

        r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s> = 0;

        $r1 = newarray (byte)[256];

        r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P> = $r1;

        i35 = 0;

     label1:
        if i35 >= 256 goto label2;

        $r16 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b34 = (byte) i35;

        $r16[i35] = $b34;

        i35 = i35 + 1;

        goto label1;

     label2:
        i36 = 0;

     label3:
        if i36 >= 768 goto label4;

        $r11 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b19 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s>;

        $r9 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $i17 = i36 & 255;

        $b18 = $r9[$i17];

        $i40 = (int) $b19;

        $i41 = (int) $b18;

        $i23 = $i40 + $i41;

        $i20 = lengthof r10;

        $i21 = i36 % $i20;

        $b22 = r10[$i21];

        $i42 = (int) $b22;

        $i24 = $i23 + $i42;

        $i25 = $i24 & 255;

        $b26 = $r11[$i25];

        r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s> = $b26;

        $r12 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $i27 = i36 & 255;

        b37 = $r12[$i27];

        $r14 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $i31 = i36 & 255;

        $r13 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b28 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s>;

        $s43 = (short) $b28;

        $s29 = $s43 & 255;

        $i44 = (int) $s29;

        $b30 = $r13[$i44];

        $r14[$i31] = $b30;

        $r15 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b32 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s>;

        $s45 = (short) $b32;

        $s33 = $s45 & 255;

        $i46 = (int) $s33;

        $r15[$i46] = b37;

        i36 = i36 + 1;

        goto label3;

     label4:
        i38 = 0;

     label5:
        if i38 >= 768 goto label6;

        $r4 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b2 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s>;

        $r2 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $i0 = i38 & 255;

        $b1 = $r2[$i0];

        $i47 = (int) $b2;

        $i48 = (int) $b1;

        $i6 = $i47 + $i48;

        $i3 = lengthof r3;

        $i4 = i38 % $i3;

        $b5 = r3[$i4];

        $i49 = (int) $b5;

        $i7 = $i6 + $i49;

        $i8 = $i7 & 255;

        $b9 = $r4[$i8];

        r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s> = $b9;

        $r5 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $i10 = i38 & 255;

        b39 = $r5[$i10];

        $r7 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $i14 = i38 & 255;

        $r6 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b11 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s>;

        $s50 = (short) $b11;

        $s12 = $s50 & 255;

        $i51 = (int) $s12;

        $b13 = $r6[$i51];

        $r7[$i14] = $b13;

        $r8 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b15 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s>;

        $s52 = (short) $b15;

        $s16 = $s52 & 255;

        $i53 = (int) $s16;

        $r8[$i53] = b39;

        i38 = i38 + 1;

        goto label5;

     label6:
        r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte n> = 0;

        return;
    }

    public void processBytes(byte[], int, int, byte[], int)
    {
        byte[] r0, r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        org.bouncycastle.crypto.DataLengthException $r14, $r15;
        byte $b7, $b9, $b10, $b13, $b14, $b16, $b18, b21, $b22, b24, $b25, $b26, $b28, $b30, $b32, $b35, $b37, $b38, $b39;
        short $s8, $s15, $s17, $s23, $s27, $s29, $s31, $s42, $s46, $s48, $s51, $s53, $s54, $s57;
        org.bouncycastle.crypto.engines.VMPCEngine r2;
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i11, $i12, $i19, $i20, $i33, $i34, $i36, $i40, i41, $i43, $i44, $i45, $i47, $i49, $i50, $i52, $i55, $i56, $i58, $i59;

        r2 := @this: org.bouncycastle.crypto.engines.VMPCEngine;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: byte[];

        i4 := @parameter4: int;

        $i3 = i0 + i1;

        $i2 = lengthof r0;

        if $i3 <= $i2 goto label1;

        $r14 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r14.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("input buffer too short");

        throw $r14;

     label1:
        $i6 = i4 + i1;

        $i5 = lengthof r1;

        if $i6 <= $i5 goto label2;

        $r15 = new org.bouncycastle.crypto.DataLengthException;

        specialinvoke $r15.<org.bouncycastle.crypto.DataLengthException: void <init>(java.lang.String)>("output buffer too short");

        throw $r15;

     label2:
        i41 = 0;

     label3:
        if i41 >= i1 goto label4;

        $r4 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b10 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte s>;

        $r3 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b7 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte n>;

        $s42 = (short) $b7;

        $s8 = $s42 & 255;

        $i43 = (int) $s8;

        $b9 = $r3[$i43];

        $i44 = (int) $b10;

        $i45 = (int) $b9;

        $i11 = $i44 + $i45;

        $i12 = $i11 & 255;

        $b13 = $r4[$i12];

        r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte s> = $b13;

        $r7 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $r6 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $r5 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b14 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte s>;

        $s46 = (short) $b14;

        $s15 = $s46 & 255;

        $i47 = (int) $s15;

        $b16 = $r5[$i47];

        $s48 = (short) $b16;

        $s17 = $s48 & 255;

        $i49 = (int) $s17;

        $b18 = $r6[$i49];

        $i50 = (int) $b18;

        $i19 = $i50 + 1;

        $i20 = $i19 & 255;

        b21 = $r7[$i20];

        $r8 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b22 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte n>;

        $s51 = (short) $b22;

        $s23 = $s51 & 255;

        $i52 = (int) $s23;

        b24 = $r8[$i52];

        $r10 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b25 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte n>;

        $s53 = (short) $b25;

        $s29 = $s53 & 255;

        $r9 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b26 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte s>;

        $s54 = (short) $b26;

        $s27 = $s54 & 255;

        $i55 = (int) $s27;

        $b28 = $r9[$i55];

        $i56 = (int) $s29;

        $r10[$i56] = $b28;

        $r11 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b30 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte s>;

        $s57 = (short) $b30;

        $s31 = $s57 & 255;

        $i58 = (int) $s31;

        $r11[$i58] = b24;

        $b32 = r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte n>;

        $i59 = (int) $b32;

        $i33 = $i59 + 1;

        $i34 = $i33 & 255;

        $b35 = (byte) $i34;

        r2.<org.bouncycastle.crypto.engines.VMPCEngine: byte n> = $b35;

        $i40 = i41 + i4;

        $i36 = i41 + i0;

        $b37 = r0[$i36];

        $b38 = $b37 ^ b21;

        $b39 = (byte) $b38;

        r1[$i40] = $b39;

        i41 = i41 + 1;

        goto label3;

     label4:
        return;
    }

    public void reset()
    {
        byte[] $r1, $r2;
        org.bouncycastle.crypto.engines.VMPCEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.VMPCEngine;

        $r2 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] workingKey>;

        $r1 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] workingIV>;

        virtualinvoke r0.<org.bouncycastle.crypto.engines.VMPCEngine: void initKey(byte[],byte[])>($r2, $r1);

        return;
    }

    public byte returnByte(byte)
    {
        byte[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        byte $b0, $b2, $b3, $b6, $b7, $b9, $b11, b14, $b15, b17, $b18, $b19, $b21, $b23, $b25, $b28, b29, $b30, $b31;
        short $s1, $s8, $s10, $s16, $s20, $s22, $s24, $s32, $s36, $s38, $s41, $s43, $s44, $s47;
        int $i4, $i5, $i12, $i13, $i26, $i27, $i33, $i34, $i35, $i37, $i39, $i40, $i42, $i45, $i46, $i48, $i49;
        org.bouncycastle.crypto.engines.VMPCEngine r0;

        r0 := @this: org.bouncycastle.crypto.engines.VMPCEngine;

        b29 := @parameter0: byte;

        $r2 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b3 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s>;

        $r1 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b0 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte n>;

        $s32 = (short) $b0;

        $s1 = $s32 & 255;

        $i33 = (int) $s1;

        $b2 = $r1[$i33];

        $i34 = (int) $b3;

        $i35 = (int) $b2;

        $i4 = $i34 + $i35;

        $i5 = $i4 & 255;

        $b6 = $r2[$i5];

        r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s> = $b6;

        $r5 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $r4 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $r3 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b7 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s>;

        $s36 = (short) $b7;

        $s8 = $s36 & 255;

        $i37 = (int) $s8;

        $b9 = $r3[$i37];

        $s38 = (short) $b9;

        $s10 = $s38 & 255;

        $i39 = (int) $s10;

        $b11 = $r4[$i39];

        $i40 = (int) $b11;

        $i12 = $i40 + 1;

        $i13 = $i12 & 255;

        b14 = $r5[$i13];

        $r6 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b15 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte n>;

        $s41 = (short) $b15;

        $s16 = $s41 & 255;

        $i42 = (int) $s16;

        b17 = $r6[$i42];

        $r8 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b18 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte n>;

        $s43 = (short) $b18;

        $s22 = $s43 & 255;

        $r7 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b19 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s>;

        $s44 = (short) $b19;

        $s20 = $s44 & 255;

        $i45 = (int) $s20;

        $b21 = $r7[$i45];

        $i46 = (int) $s22;

        $r8[$i46] = $b21;

        $r9 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte[] P>;

        $b23 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte s>;

        $s47 = (short) $b23;

        $s24 = $s47 & 255;

        $i48 = (int) $s24;

        $r9[$i48] = b17;

        $b25 = r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte n>;

        $i49 = (int) $b25;

        $i26 = $i49 + 1;

        $i27 = $i26 & 255;

        $b28 = (byte) $i27;

        r0.<org.bouncycastle.crypto.engines.VMPCEngine: byte n> = $b28;

        $b30 = b29 ^ b14;

        $b31 = (byte) $b30;

        return $b31;
    }
}
