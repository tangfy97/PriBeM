final class org.apache.commons.collections.DoubleOrderedMap$Node extends java.lang.Object implements java.util.Map$Entry, org.apache.commons.collections.KeyValue
{
    private java.lang.Comparable[] data;
    private org.apache.commons.collections.DoubleOrderedMap$Node[] leftNode;
    private org.apache.commons.collections.DoubleOrderedMap$Node[] rightNode;
    private org.apache.commons.collections.DoubleOrderedMap$Node[] parentNode;
    private boolean[] blackColor;
    private int hashcodeValue;
    private boolean calculatedHashCode;

    void <init>(java.lang.Comparable, java.lang.Comparable)
    {
        boolean[] $r7;
        java.lang.Comparable[] $r1;
        org.apache.commons.collections.DoubleOrderedMap$Node r0;
        java.lang.Comparable r2, r3;
        org.apache.commons.collections.DoubleOrderedMap$Node[] $r4, $r5, $r6;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        r2 := @parameter0: java.lang.Comparable;

        r3 := @parameter1: java.lang.Comparable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (java.lang.Comparable)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        r0.<org.apache.commons.collections.DoubleOrderedMap$Node: java.lang.Comparable[] data> = $r1;

        $r4 = newarray (org.apache.commons.collections.DoubleOrderedMap$Node)[2];

        $r4[0] = null;

        $r4[1] = null;

        r0.<org.apache.commons.collections.DoubleOrderedMap$Node: org.apache.commons.collections.DoubleOrderedMap$Node[] leftNode> = $r4;

        $r5 = newarray (org.apache.commons.collections.DoubleOrderedMap$Node)[2];

        $r5[0] = null;

        $r5[1] = null;

        r0.<org.apache.commons.collections.DoubleOrderedMap$Node: org.apache.commons.collections.DoubleOrderedMap$Node[] rightNode> = $r5;

        $r6 = newarray (org.apache.commons.collections.DoubleOrderedMap$Node)[2];

        $r6[0] = null;

        $r6[1] = null;

        r0.<org.apache.commons.collections.DoubleOrderedMap$Node: org.apache.commons.collections.DoubleOrderedMap$Node[] parentNode> = $r6;

        $r7 = newarray (boolean)[2];

        $r7[0] = 1;

        $r7[1] = 1;

        r0.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean[] blackColor> = $r7;

        r0.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean calculatedHashCode> = 0;

        return;
    }

    private java.lang.Comparable getData(int)
    {
        org.apache.commons.collections.DoubleOrderedMap$Node r0;
        int i0;
        java.lang.Comparable $r2;
        java.lang.Comparable[] $r1;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: java.lang.Comparable[] data>;

        $r2 = $r1[i0];

        return $r2;
    }

    private void setLeft(org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        org.apache.commons.collections.DoubleOrderedMap$Node r0, r1;
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node[] $r2;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        r1 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: org.apache.commons.collections.DoubleOrderedMap$Node[] leftNode>;

        $r2[i0] = r1;

        return;
    }

    private org.apache.commons.collections.DoubleOrderedMap$Node getLeft(int)
    {
        org.apache.commons.collections.DoubleOrderedMap$Node r0, $r2;
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node[] $r1;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: org.apache.commons.collections.DoubleOrderedMap$Node[] leftNode>;

        $r2 = $r1[i0];

        return $r2;
    }

    private void setRight(org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        org.apache.commons.collections.DoubleOrderedMap$Node r0, r1;
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node[] $r2;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        r1 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: org.apache.commons.collections.DoubleOrderedMap$Node[] rightNode>;

        $r2[i0] = r1;

        return;
    }

    private org.apache.commons.collections.DoubleOrderedMap$Node getRight(int)
    {
        org.apache.commons.collections.DoubleOrderedMap$Node r0, $r2;
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node[] $r1;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: org.apache.commons.collections.DoubleOrderedMap$Node[] rightNode>;

        $r2 = $r1[i0];

        return $r2;
    }

    private void setParent(org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        org.apache.commons.collections.DoubleOrderedMap$Node r0, r1;
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node[] $r2;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        r1 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter1: int;

        $r2 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: org.apache.commons.collections.DoubleOrderedMap$Node[] parentNode>;

        $r2[i0] = r1;

        return;
    }

    private org.apache.commons.collections.DoubleOrderedMap$Node getParent(int)
    {
        org.apache.commons.collections.DoubleOrderedMap$Node r0, $r2;
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node[] $r1;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: org.apache.commons.collections.DoubleOrderedMap$Node[] parentNode>;

        $r2 = $r1[i0];

        return $r2;
    }

    private void swapColors(org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        boolean[] $r1, $r3, $r4, $r5, $r6, $r7;
        org.apache.commons.collections.DoubleOrderedMap$Node r0, r2;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        r2 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter1: int;

        $r1 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean[] blackColor>;

        $z1 = $r1[i0];

        $r3 = r2.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean[] blackColor>;

        $z0 = $r3[i0];

        $z2 = $z1 ^ $z0;

        $r1[i0] = $z2;

        $r4 = r2.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean[] blackColor>;

        $z4 = $r4[i0];

        $r5 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean[] blackColor>;

        $z3 = $r5[i0];

        $z5 = $z4 ^ $z3;

        $r4[i0] = $z5;

        $r6 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean[] blackColor>;

        $z7 = $r6[i0];

        $r7 = r2.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean[] blackColor>;

        $z6 = $r7[i0];

        $z8 = $z7 ^ $z6;

        $r6[i0] = $z8;

        return;
    }

    private boolean isBlack(int)
    {
        org.apache.commons.collections.DoubleOrderedMap$Node r0;
        int i0;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean[] blackColor>;

        $z0 = $r1[i0];

        return $z0;
    }

    private boolean isRed(int)
    {
        org.apache.commons.collections.DoubleOrderedMap$Node r0;
        int i0;
        boolean[] $r1;
        boolean $z0, $z1;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean[] blackColor>;

        $z0 = $r1[i0];

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    private void setBlack(int)
    {
        int i0;
        boolean[] $r1;
        org.apache.commons.collections.DoubleOrderedMap$Node r0;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean[] blackColor>;

        $r1[i0] = 1;

        return;
    }

    private void setRed(int)
    {
        int i0;
        boolean[] $r1;
        org.apache.commons.collections.DoubleOrderedMap$Node r0;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean[] blackColor>;

        $r1[i0] = 0;

        return;
    }

    private void copyColor(org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        org.apache.commons.collections.DoubleOrderedMap$Node r0, r1;
        int i0;
        boolean[] $r2, $r3;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        r1 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter1: int;

        $r3 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean[] blackColor>;

        $r2 = r1.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean[] blackColor>;

        $z0 = $r2[i0];

        $r3[i0] = $z0;

        return;
    }

    public java.lang.Object getKey()
    {
        org.apache.commons.collections.DoubleOrderedMap$Node r0;
        java.lang.Comparable $r2;
        java.lang.Comparable[] $r1;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        $r1 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: java.lang.Comparable[] data>;

        $r2 = $r1[0];

        return $r2;
    }

    public java.lang.Object getValue()
    {
        org.apache.commons.collections.DoubleOrderedMap$Node r0;
        java.lang.Comparable $r2;
        java.lang.Comparable[] $r1;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        $r1 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: java.lang.Comparable[] data>;

        $r2 = $r1[1];

        return $r2;
    }

    public java.lang.Object setValue(java.lang.Object) throws java.lang.UnsupportedOperationException
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.commons.collections.DoubleOrderedMap$Node r1;
        java.lang.Object r2;

        r1 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Map.Entry.setValue is not supported");

        throw $r0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.Map$Entry r2;
        java.lang.Comparable[] $r3, $r6;
        org.apache.commons.collections.DoubleOrderedMap$Node r0;
        java.lang.Object r1, $r5, $r8;
        java.lang.Comparable $r4, $r7;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof java.util.Map$Entry;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (java.util.Map$Entry) r1;

        $r3 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: java.lang.Comparable[] data>;

        $r4 = $r3[0];

        $r5 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label3;

        $r6 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: java.lang.Comparable[] data>;

        $r7 = $r6[1];

        $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z2 = virtualinvoke $r7.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z2 == 0 goto label3;

        $z3 = 1;

        goto label4;

     label3:
        $z3 = 0;

     label4:
        return $z3;
    }

    public int hashCode()
    {
        java.lang.Comparable[] $r1, $r3;
        org.apache.commons.collections.DoubleOrderedMap$Node r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Comparable $r2, $r4;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.DoubleOrderedMap$Node;

        $z0 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean calculatedHashCode>;

        if $z0 != 0 goto label1;

        $r1 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: java.lang.Comparable[] data>;

        $r2 = $r1[0];

        $i1 = virtualinvoke $r2.<java.lang.Object: int hashCode()>();

        $r3 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: java.lang.Comparable[] data>;

        $r4 = $r3[1];

        $i2 = virtualinvoke $r4.<java.lang.Object: int hashCode()>();

        $i3 = $i1 ^ $i2;

        r0.<org.apache.commons.collections.DoubleOrderedMap$Node: int hashcodeValue> = $i3;

        r0.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean calculatedHashCode> = 1;

     label1:
        $i0 = r0.<org.apache.commons.collections.DoubleOrderedMap$Node: int hashcodeValue>;

        return $i0;
    }

    static java.lang.Comparable access$200(org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node r0;
        java.lang.Comparable $r1;

        r0 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.apache.commons.collections.DoubleOrderedMap$Node: java.lang.Comparable getData(int)>(i0);

        return $r1;
    }

    static org.apache.commons.collections.DoubleOrderedMap$Node access$700(org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node r0, $r1;

        r0 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.apache.commons.collections.DoubleOrderedMap$Node: org.apache.commons.collections.DoubleOrderedMap$Node getLeft(int)>(i0);

        return $r1;
    }

    static org.apache.commons.collections.DoubleOrderedMap$Node access$800(org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node r0, $r1;

        r0 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.apache.commons.collections.DoubleOrderedMap$Node: org.apache.commons.collections.DoubleOrderedMap$Node getRight(int)>(i0);

        return $r1;
    }

    static org.apache.commons.collections.DoubleOrderedMap$Node access$900(org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node r0, $r1;

        r0 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<org.apache.commons.collections.DoubleOrderedMap$Node: org.apache.commons.collections.DoubleOrderedMap$Node getParent(int)>(i0);

        return $r1;
    }

    static void access$1000(org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node r0;

        r0 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.collections.DoubleOrderedMap$Node: void setBlack(int)>(i0);

        return;
    }

    static void access$1100(org.apache.commons.collections.DoubleOrderedMap$Node, org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node r0, r1;

        r0 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        r1 := @parameter1: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.collections.DoubleOrderedMap$Node: void copyColor(org.apache.commons.collections.DoubleOrderedMap$Node,int)>(r1, i0);

        return;
    }

    static boolean access$1200(org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node r0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean isRed(int)>(i0);

        return $z0;
    }

    static boolean access$1300(org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node r0;
        boolean $z0;

        r0 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<org.apache.commons.collections.DoubleOrderedMap$Node: boolean isBlack(int)>(i0);

        return $z0;
    }

    static void access$1400(org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node r0;

        r0 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.collections.DoubleOrderedMap$Node: void setRed(int)>(i0);

        return;
    }

    static void access$1500(org.apache.commons.collections.DoubleOrderedMap$Node, org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node r0, r1;

        r0 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        r1 := @parameter1: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.collections.DoubleOrderedMap$Node: void setRight(org.apache.commons.collections.DoubleOrderedMap$Node,int)>(r1, i0);

        return;
    }

    static void access$1600(org.apache.commons.collections.DoubleOrderedMap$Node, org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node r0, r1;

        r0 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        r1 := @parameter1: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.collections.DoubleOrderedMap$Node: void setParent(org.apache.commons.collections.DoubleOrderedMap$Node,int)>(r1, i0);

        return;
    }

    static void access$1700(org.apache.commons.collections.DoubleOrderedMap$Node, org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node r0, r1;

        r0 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        r1 := @parameter1: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.collections.DoubleOrderedMap$Node: void setLeft(org.apache.commons.collections.DoubleOrderedMap$Node,int)>(r1, i0);

        return;
    }

    static void access$1800(org.apache.commons.collections.DoubleOrderedMap$Node, org.apache.commons.collections.DoubleOrderedMap$Node, int)
    {
        int i0;
        org.apache.commons.collections.DoubleOrderedMap$Node r0, r1;

        r0 := @parameter0: org.apache.commons.collections.DoubleOrderedMap$Node;

        r1 := @parameter1: org.apache.commons.collections.DoubleOrderedMap$Node;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.commons.collections.DoubleOrderedMap$Node: void swapColors(org.apache.commons.collections.DoubleOrderedMap$Node,int)>(r1, i0);

        return;
    }
}
