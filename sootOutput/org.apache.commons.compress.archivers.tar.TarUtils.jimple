public class org.apache.commons.compress.archivers.tar.TarUtils extends java.lang.Object
{
    private static final int BYTE_MASK;
    static final org.apache.commons.compress.archivers.zip.ZipEncoding DEFAULT_ENCODING;
    static final org.apache.commons.compress.archivers.zip.ZipEncoding FALLBACK_ENCODING;

    private void <init>()
    {
        org.apache.commons.compress.archivers.tar.TarUtils r0;

        r0 := @this: org.apache.commons.compress.archivers.tar.TarUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long parseOctal(byte[], int, int)
    {
        byte[] r0;
        long $l6, $l7, l10;
        byte $b2, b4, $b9, b13;
        int i0, i1, $i3, $i5, $i8, i11, i12, $i14, $i15, $i17, $i18, $i19, $i20;
        java.lang.String $r2, $r8;
        java.lang.IllegalArgumentException $r10, $r11;
        java.lang.StringBuilder $r5, $r6, $r7, $r9;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        l10 = 0L;

        i11 = i0 + i1;

        i12 = i0;

        if i1 >= 2 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Length ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be at least 2");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r10;

     label1:
        $b2 = r0[i0];

        if $b2 != 0 goto label2;

        return 0L;

     label2:
        if i12 >= i11 goto label3;

        $b9 = r0[i12];

        $i14 = (int) $b9;

        if $i14 != 32 goto label3;

        i12 = i12 + 1;

        goto label2;

     label3:
        $i3 = i11 - 1;

        b13 = r0[$i3];

     label4:
        if i12 >= i11 goto label6;

        if b13 == 0 goto label5;

        $i15 = (int) b13;

        if $i15 != 32 goto label6;

     label5:
        $i17 = (int) -1;

        i11 = i11 + $i17;

        $i8 = i11 - 1;

        b13 = r0[$i8];

        goto label4;

     label6:
        if i12 >= i11 goto label9;

        b4 = r0[i12];

        $i18 = (int) b4;

        if $i18 < 48 goto label7;

        $i19 = (int) b4;

        if $i19 <= 55 goto label8;

     label7:
        $r11 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String exceptionMessage(byte[],int,int,int,byte)>(r0, i0, i1, i12, b4);

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r11;

     label8:
        $l7 = l10 << 3;

        $i20 = (int) b4;

        $i5 = $i20 - 48;

        $l6 = (long) $i5;

        l10 = $l7 + $l6;

        i12 = i12 + 1;

        goto label6;

     label9:
        return l10;
    }

    public static long parseOctalOrBinary(byte[], int, int)
    {
        byte[] r0;
        long $l5, $l6, $l7;
        short $s2, $s8;
        byte $b1, $b3;
        int i0, i4, $i9, $i11;
        boolean $z1, $z2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        $b1 = r0[i0];

        $s8 = (short) $b1;

        $s2 = $s8 & 128;

        if $s2 != 0 goto label1;

        $l7 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: long parseOctal(byte[],int,int)>(r0, i0, i4);

        return $l7;

     label1:
        $b3 = r0[i0];

        $i9 = (int) $b3;

        $i11 = (int) -1;

        if $i9 != $i11 goto label2;

        $z2 = 1;

        $z1 = 1;

        goto label3;

     label2:
        $z2 = 0;

        $z1 = 0;

     label3:
        if i4 >= 9 goto label4;

        $l6 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: long parseBinaryLong(byte[],int,int,boolean)>(r0, i0, i4, $z2);

        return $l6;

     label4:
        $l5 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: long parseBinaryBigInteger(byte[],int,int,boolean)>(r0, i0, i4, $z1);

        return $l5;
    }

    private static long parseBinaryLong(byte[], int, int, boolean)
    {
        byte[] r0;
        long $l3, $l4, $l9, $l10, l11, l13, $l14;
        short $s8, $s15;
        byte $b7;
        int i0, $i1, $i2, i5, $i6, i12;
        java.lang.String $r10;
        boolean z0;
        double $d0, $d1;
        java.lang.IllegalArgumentException $r12;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11;

        r0 := @parameter0: byte[];

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        if i0 < 9 goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("At offset ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" byte binary number");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds maximum signed long");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r12;

     label1:
        l11 = 0L;

        i12 = 1;

     label2:
        if i12 >= i0 goto label3;

        $l10 = l11 << 8;

        $i6 = i5 + i12;

        $b7 = r0[$i6];

        $s15 = (short) $b7;

        $s8 = $s15 & 255;

        $l9 = (long) $s8;

        l11 = $l10 + $l9;

        i12 = i12 + 1;

        goto label2;

     label3:
        if z0 == 0 goto label4;

        l13 = l11 - 1L;

        $i1 = i0 - 1;

        $i2 = $i1 * 8;

        $d0 = (double) $i2;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d0);

        $l3 = (long) $d1;

        $l4 = $l3 - 1L;

        l11 = l13 ^ $l4;

     label4:
        if z0 == 0 goto label5;

        $l14 = neg l11;

        goto label6;

     label5:
        $l14 = l11;

     label6:
        return $l14;
    }

    private static long parseBinaryBigInteger(byte[], int, int, boolean)
    {
        byte[] r0, r1;
        long $l6, $l7;
        int i0, $i1, i2, $i3, $i4, $i5;
        java.math.BigInteger $r2, $r13, $r14, r15;
        java.lang.String $r12;
        boolean z0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;

        r1 := @parameter0: byte[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $i1 = i0 - 1;

        r0 = newarray (byte)[$i1];

        $i4 = i2 + 1;

        $i3 = i0 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i4, r0, 0, $i3);

        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(byte[])>(r0);

        r15 = $r2;

        if z0 == 0 goto label1;

        $r13 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(-1L);

        $r14 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r13);

        r15 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger not()>();

     label1:
        $i5 = virtualinvoke r15.<java.math.BigInteger: int bitLength()>();

        if $i5 <= 63 goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("At offset ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" byte binary number");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" exceeds maximum signed long");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r3;

     label2:
        if z0 == 0 goto label3;

        $l6 = virtualinvoke r15.<java.math.BigInteger: long longValue()>();

        $l7 = neg $l6;

        goto label4;

     label3:
        $l7 = virtualinvoke r15.<java.math.BigInteger: long longValue()>();

     label4:
        return $l7;
    }

    public static boolean parseBoolean(byte[], int)
    {
        byte[] r0;
        byte $b1;
        int i0;
        boolean $z0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b1 = r0[i0];

        if $b1 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static java.lang.String exceptionMessage(byte[], int, int, int, byte)
    {
        byte[] r1;
        byte b2;
        int i0, i1, i3, $i4, $i5;
        java.lang.String $r2, $r12, $r13;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r14;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i3 := @parameter3: int;

        b2 := @parameter4: byte;

        $r13 = new java.lang.String;

        specialinvoke $r13.<java.lang.String: void <init>(byte[],int,int)>(r1, i0, i1);

        $r2 = virtualinvoke $r13.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\u0000", "{NUL}");

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid byte ");

        $i5 = (int) b2;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at offset ");

        $i4 = i3 - i0;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in \'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' len=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    public static java.lang.String parseName(byte[], int, int)
    {
        byte[] r0;
        java.io.IOException $r3, $r5;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r1, $r6;
        java.lang.RuntimeException $r4;
        int i0, i1;
        java.lang.String $r2, $r7;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

     label1:
        $r1 = <org.apache.commons.compress.archivers.tar.TarUtils: org.apache.commons.compress.archivers.zip.ZipEncoding DEFAULT_ENCODING>;

        $r2 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String parseName(byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)>(r0, i0, i1, $r1);

     label2:
        return $r2;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = <org.apache.commons.compress.archivers.tar.TarUtils: org.apache.commons.compress.archivers.zip.ZipEncoding FALLBACK_ENCODING>;

        $r7 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: java.lang.String parseName(byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)>(r0, i0, i1, $r6);

     label5:
        return $r7;

     label6:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    public static java.lang.String parseName(byte[], int, int, org.apache.commons.compress.archivers.zip.ZipEncoding) throws java.io.IOException
    {
        byte[] r0, r1;
        org.apache.commons.compress.archivers.zip.ZipEncoding r2;
        byte $b4;
        int i0, i1, $i2, $i3, i5, $i7;
        java.lang.String $r3;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r2 := @parameter3: org.apache.commons.compress.archivers.zip.ZipEncoding;

        i5 = i0;

     label1:
        if i5 <= 0 goto label3;

        $i2 = i1 + i5;

        $i3 = $i2 - 1;

        $b4 = r1[$i3];

        if $b4 == 0 goto label2;

        goto label3;

     label2:
        $i7 = (int) -1;

        i5 = i5 + $i7;

        goto label1;

     label3:
        if i5 <= 0 goto label4;

        r0 = newarray (byte)[i5];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, r0, 0, i5);

        $r3 = interfaceinvoke r2.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.lang.String decode(byte[])>(r0);

        return $r3;

     label4:
        return "";
    }

    public static int formatNameBytes(java.lang.String, byte[], int, int)
    {
        byte[] r1;
        java.io.IOException $r3, $r5;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r2, $r6;
        java.lang.RuntimeException $r4;
        int i0, i1, $i2, $i3;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

     label1:
        $r2 = <org.apache.commons.compress.archivers.tar.TarUtils: org.apache.commons.compress.archivers.zip.ZipEncoding DEFAULT_ENCODING>;

        $i2 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: int formatNameBytes(java.lang.String,byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)>(r0, r1, i0, i1, $r2);

     label2:
        return $i2;

     label3:
        $r5 := @caughtexception;

     label4:
        $r6 = <org.apache.commons.compress.archivers.tar.TarUtils: org.apache.commons.compress.archivers.zip.ZipEncoding FALLBACK_ENCODING>;

        $i3 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: int formatNameBytes(java.lang.String,byte[],int,int,org.apache.commons.compress.archivers.zip.ZipEncoding)>(r0, r1, i0, i1, $r6);

     label5:
        return $i3;

     label6:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
        catch java.io.IOException from label4 to label5 with label6;
    }

    public static int formatNameBytes(java.lang.String, byte[], int, int, org.apache.commons.compress.archivers.zip.ZipEncoding) throws java.io.IOException
    {
        byte[] $r2, r3;
        java.nio.ByteBuffer r5;
        int $i0, i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, i9, i10, $i12;
        java.lang.String r0, $r4;
        org.apache.commons.compress.archivers.zip.ZipEncoding r1;

        r0 := @parameter0: java.lang.String;

        r3 := @parameter1: byte[];

        i5 := @parameter2: int;

        i1 := @parameter3: int;

        r1 := @parameter4: org.apache.commons.compress.archivers.zip.ZipEncoding;

        i9 = virtualinvoke r0.<java.lang.String: int length()>();

        r5 = interfaceinvoke r1.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.nio.ByteBuffer encode(java.lang.String)>(r0);

     label1:
        $i0 = virtualinvoke r5.<java.nio.ByteBuffer: int limit()>();

        if $i0 <= i1 goto label2;

        if i9 <= 0 goto label2;

        $i12 = (int) -1;

        i9 = i9 + $i12;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i9);

        r5 = interfaceinvoke r1.<org.apache.commons.compress.archivers.zip.ZipEncoding: java.nio.ByteBuffer encode(java.lang.String)>($r4);

        goto label1;

     label2:
        $i2 = virtualinvoke r5.<java.nio.ByteBuffer: int limit()>();

        $i3 = virtualinvoke r5.<java.nio.ByteBuffer: int position()>();

        $i8 = $i2 - $i3;

        $r2 = virtualinvoke r5.<java.nio.ByteBuffer: byte[] array()>();

        $i4 = virtualinvoke r5.<java.nio.ByteBuffer: int arrayOffset()>();

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i4, r3, i5, $i8);

        i10 = $i8;

     label3:
        if i10 >= i1 goto label4;

        $i7 = i5 + i10;

        r3[$i7] = 0;

        i10 = i10 + 1;

        goto label3;

     label4:
        $i6 = i5 + i1;

        return $i6;
    }

    public static void formatUnsignedOctalString(long, byte[], int, int)
    {
        byte[] r0;
        byte $b2, $b3, $b6, $b9, $b11;
        java.lang.StringBuilder $r3, $r4, $r6, $r7, $r8, $r10;
        long l1, $l7, l16;
        int i0, i4, $i5, $i8, $i10, $i12, $i13, $i14, i15, $i18, $i20, $i21, $i23, $i25;
        java.lang.String $r5, $r9;
        java.lang.IllegalArgumentException $r11;

        l1 := @parameter0: long;

        r0 := @parameter1: byte[];

        i4 := @parameter2: int;

        i0 := @parameter3: int;

        $i18 = (int) -1;

        i15 = i0 + $i18;

        $b2 = l1 cmp 0L;

        if $b2 != 0 goto label1;

        $i13 = i15;

        $i20 = (int) -1;

        i15 = i15 + $i20;

        $i14 = i4 + $i13;

        r0[$i14] = 48;

        goto label4;

     label1:
        l16 = l1;

     label2:
        if i15 < 0 goto label3;

        $b6 = l16 cmp 0L;

        if $b6 == 0 goto label3;

        $i12 = i4 + i15;

        $l7 = l16 & 7L;

        $i8 = (int) $l7;

        $b9 = (byte) $i8;

        $i21 = (int) $b9;

        $i10 = 48 + $i21;

        $b11 = (byte) $i10;

        r0[$i12] = $b11;

        l16 = l16 >>> 3;

        $i23 = (int) -1;

        i15 = i15 + $i23;

        goto label2;

     label3:
        $b3 = l16 cmp 0L;

        if $b3 == 0 goto label4;

        $r11 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r5 = staticinvoke <java.lang.Long: java.lang.String toOctalString(long)>(l1);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" will not fit in octal number buffer of length ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label4:
        if i15 < 0 goto label5;

        $i5 = i4 + i15;

        r0[$i5] = 48;

        $i25 = (int) -1;

        i15 = i15 + $i25;

        goto label4;

     label5:
        return;
    }

    public static int formatOctalBytes(long, byte[], int, int)
    {
        byte[] r0;
        long l1;
        int i0, i2, $i3, $i4, $i5, i6, i7;

        l1 := @parameter0: long;

        r0 := @parameter1: byte[];

        i2 := @parameter2: int;

        i0 := @parameter3: int;

        i6 = i0 - 2;

        staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: void formatUnsignedOctalString(long,byte[],int,int)>(l1, r0, i2, i6);

        i7 = i6 + 1;

        $i3 = i2 + i6;

        r0[$i3] = 32;

        $i4 = i2 + i7;

        r0[$i4] = 0;

        $i5 = i2 + i0;

        return $i5;
    }

    public static int formatLongOctalBytes(long, byte[], int, int)
    {
        byte[] r0;
        int i0, i1, i3, $i4, $i5;
        long l2;

        l2 := @parameter0: long;

        r0 := @parameter1: byte[];

        i3 := @parameter2: int;

        i0 := @parameter3: int;

        i1 = i0 - 1;

        staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: void formatUnsignedOctalString(long,byte[],int,int)>(l2, r0, i3, i1);

        $i4 = i3 + i1;

        r0[$i4] = 32;

        $i5 = i3 + i0;

        return $i5;
    }

    public static int formatLongOctalOrBinaryBytes(long, byte[], int, int)
    {
        byte[] r0;
        long l1, l2, $l9;
        short $s10;
        byte $b3, $b5, $b7;
        int i0, i4, $i6, $i8, $i11, $i12;
        boolean z0, $z2, $z3;

        l2 := @parameter0: long;

        r0 := @parameter1: byte[];

        i4 := @parameter2: int;

        i0 := @parameter3: int;

        if i0 != 8 goto label1;

        $l9 = 2097151L;

        goto label2;

     label1:
        $l9 = 8589934591L;

     label2:
        l1 = $l9;

        $b3 = l2 cmp 0L;

        $i11 = (int) $b3;

        if $i11 >= 0 goto label3;

        $z3 = 1;

        $z2 = 1;

        goto label4;

     label3:
        $z3 = 0;

        $z2 = 0;

     label4:
        z0 = $z3;

        if $z2 != 0 goto label5;

        $b7 = l2 cmp l1;

        $i12 = (int) $b7;

        if $i12 > 0 goto label5;

        $i8 = staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: int formatLongOctalBytes(long,byte[],int,int)>(l2, r0, i4, i0);

        return $i8;

     label5:
        if i0 >= 9 goto label6;

        staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: void formatLongBinary(long,byte[],int,int,boolean)>(l2, r0, i4, i0, z0);

     label6:
        staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: void formatBigIntegerBinary(long,byte[],int,int,boolean)>(l2, r0, i4, i0, z0);

        if z0 == 0 goto label7;

        $s10 = 255;

        goto label8;

     label7:
        $s10 = 128;

     label8:
        $b5 = (byte) $s10;

        r0[i4] = $b5;

        $i6 = i4 + i0;

        return $i6;
    }

    private static void formatLongBinary(long, byte[], int, int, boolean)
    {
        byte[] r0;
        long l3, l4, $l5, $l11, $l13, l14, l15, l16;
        byte $b6, $b10;
        int i0, $i1, i2, i7, $i8, $i9, $i12, i17, $i18, $i20;
        java.lang.String $r8;
        boolean z0;
        java.lang.IllegalArgumentException $r10;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r9;

        l4 := @parameter0: long;

        r0 := @parameter1: byte[];

        i7 := @parameter2: int;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        $i1 = i0 - 1;

        i2 = $i1 * 8;

        l3 = 1L << i2;

        $l5 = staticinvoke <java.lang.Math: long abs(long)>(l4);

        l14 = $l5;

        $b6 = $l5 cmp l3;

        $i18 = (int) $b6;

        if $i18 < 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is too large for ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" byte field.");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r10;

     label1:
        if z0 == 0 goto label2;

        $l11 = l3 - 1L;

        l15 = $l5 ^ $l11;

        $i12 = 255 << i2;

        $l13 = (long) $i12;

        l16 = l15 | $l13;

        l14 = l16 + 1L;

     label2:
        $i8 = i7 + i0;

        i17 = $i8 - 1;

     label3:
        if i17 < i7 goto label4;

        $i9 = (int) l14;

        $b10 = (byte) $i9;

        r0[i17] = $b10;

        l14 = l14 >> 8;

        $i20 = (int) -1;

        i17 = i17 + $i20;

        goto label3;

     label4:
        return;
    }

    private static void formatBigIntegerBinary(long, byte[], int, int, boolean)
    {
        byte[] $r1, r2;
        long l0;
        short $s7;
        byte $b6;
        int i1, i2, i3, $i4, i5, i8;
        java.math.BigInteger $r0;
        boolean z0;

        l0 := @parameter0: long;

        r2 := @parameter1: byte[];

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        z0 := @parameter4: boolean;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(l0);

        $r1 = virtualinvoke $r0.<java.math.BigInteger: byte[] toByteArray()>();

        i1 = lengthof $r1;

        $i4 = i2 + i3;

        i5 = $i4 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, r2, i5, i1);

        if z0 == 0 goto label1;

        $s7 = 255;

        goto label2;

     label1:
        $s7 = 0;

     label2:
        $b6 = (byte) $s7;

        i8 = i2 + 1;

     label3:
        if i8 >= i5 goto label4;

        r2[i8] = $b6;

        i8 = i8 + 1;

        goto label3;

     label4:
        return;
    }

    public static int formatCheckSumOctalBytes(long, byte[], int, int)
    {
        byte[] r0;
        long l1;
        int i0, i2, $i3, $i4, $i5, i6, i7;

        l1 := @parameter0: long;

        r0 := @parameter1: byte[];

        i2 := @parameter2: int;

        i0 := @parameter3: int;

        i6 = i0 - 2;

        staticinvoke <org.apache.commons.compress.archivers.tar.TarUtils: void formatUnsignedOctalString(long,byte[],int,int)>(l1, r0, i2, i6);

        i7 = i6 + 1;

        $i3 = i2 + i6;

        r0[$i3] = 0;

        $i4 = i2 + i7;

        r0[$i4] = 32;

        $i5 = i2 + i0;

        return $i5;
    }

    public static long computeCheckSum(byte[])
    {
        byte[] r0;
        long $l3, l4;
        short $s2, $s6;
        byte b1;
        int i0, i5;

        r0 := @parameter0: byte[];

        l4 = 0L;

        i0 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        b1 = r0[i5];

        $s6 = (short) b1;

        $s2 = 255 & $s6;

        $l3 = (long) $s2;

        l4 = l4 + $l3;

        i5 = i5 + 1;

        goto label1;

     label2:
        return l4;
    }

    public static boolean verifyCheckSum(byte[])
    {
        byte[] r0;
        long $l5, $l6, $l7, l8, l9, l10, $l15, $l16;
        short $s14;
        byte $b1, $b2, $b3, b13;
        int $i0, $i4, i11, i12, $i17;
        boolean $z0;

        r0 := @parameter0: byte[];

        l8 = 0L;

        l9 = 0L;

        l10 = 0L;

        i11 = 0;

        i12 = 0;

     label1:
        $i0 = lengthof r0;

        if i12 >= $i0 goto label5;

        b13 = r0[i12];

        if 148 > i12 goto label4;

        if i12 >= 156 goto label4;

        if 48 > b13 goto label2;

        if b13 > 55 goto label2;

        $i4 = i11;

        i11 = i11 + 1;

        if $i4 >= 6 goto label2;

        $l6 = l8 * 8L;

        $l5 = (long) b13;

        $l7 = $l6 + $l5;

        l8 = $l7 - 48L;

        goto label3;

     label2:
        if i11 <= 0 goto label3;

        i11 = 6;

     label3:
        b13 = 32;

     label4:
        $s14 = 255 & b13;

        $l15 = (long) $s14;

        l9 = l9 + $l15;

        $l16 = (long) b13;

        l10 = l10 + $l16;

        i12 = i12 + 1;

        goto label1;

     label5:
        $b1 = l8 cmp l9;

        if $b1 == 0 goto label6;

        $b2 = l8 cmp l10;

        if $b2 == 0 goto label6;

        $b3 = l8 cmp l9;

        $i17 = (int) $b3;

        if $i17 <= 0 goto label7;

     label6:
        $z0 = 1;

        goto label8;

     label7:
        $z0 = 0;

     label8:
        return $z0;
    }

    static void <clinit>()
    {
        org.apache.commons.compress.archivers.tar.TarUtils$1 $r1;
        org.apache.commons.compress.archivers.zip.ZipEncoding $r0;

        <org.apache.commons.compress.archivers.tar.TarUtils: int BYTE_MASK> = 255;

        $r0 = staticinvoke <org.apache.commons.compress.archivers.zip.ZipEncodingHelper: org.apache.commons.compress.archivers.zip.ZipEncoding getZipEncoding(java.lang.String)>(null);

        <org.apache.commons.compress.archivers.tar.TarUtils: org.apache.commons.compress.archivers.zip.ZipEncoding DEFAULT_ENCODING> = $r0;

        $r1 = new org.apache.commons.compress.archivers.tar.TarUtils$1;

        specialinvoke $r1.<org.apache.commons.compress.archivers.tar.TarUtils$1: void <init>()>();

        <org.apache.commons.compress.archivers.tar.TarUtils: org.apache.commons.compress.archivers.zip.ZipEncoding FALLBACK_ENCODING> = $r1;

        return;
    }
}
