class groovyjarjarantlr.DefaultToolErrorHandler extends java.lang.Object implements groovyjarjarantlr.ToolErrorHandler
{
    private final groovyjarjarantlr.Tool antlrTool;
    groovyjarjarantlr.CharFormatter javaCharFormatter;

    void <init>(groovyjarjarantlr.Tool)
    {
        groovyjarjarantlr.DefaultToolErrorHandler r0;
        groovyjarjarantlr.JavaCharFormatter $r1;
        groovyjarjarantlr.Tool r2;

        r0 := @this: groovyjarjarantlr.DefaultToolErrorHandler;

        r2 := @parameter0: groovyjarjarantlr.Tool;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new groovyjarjarantlr.JavaCharFormatter;

        specialinvoke $r1.<groovyjarjarantlr.JavaCharFormatter: void <init>()>();

        r0.<groovyjarjarantlr.DefaultToolErrorHandler: groovyjarjarantlr.CharFormatter javaCharFormatter> = $r1;

        r0.<groovyjarjarantlr.DefaultToolErrorHandler: groovyjarjarantlr.Tool antlrTool> = r2;

        return;
    }

    private void dumpSets(java.lang.String[], int, groovyjarjarantlr.Grammar, boolean, int, groovyjarjarantlr.Lookahead[])
    {
        groovyjarjarantlr.Lookahead[] r3;
        groovyjarjarantlr.DefaultToolErrorHandler r13;
        java.lang.String[] r10;
        groovyjarjarantlr.Grammar r5;
        groovyjarjarantlr.CharFormatter $r14;
        java.lang.StringBuffer $r0, $r1, $r2;
        int i0, $i1, $i2, i3, i4;
        java.lang.String $r9, $r11, $r16;
        groovyjarjarantlr.TokenManager $r6;
        groovyjarjarantlr.collections.impl.Vector $r8;
        boolean z0, $z1;
        groovyjarjarantlr.collections.impl.BitSet $r7, $r15;
        groovyjarjarantlr.Lookahead $r4, $r12, $r17;

        r13 := @this: groovyjarjarantlr.DefaultToolErrorHandler;

        r10 := @parameter0: java.lang.String[];

        i3 := @parameter1: int;

        r5 := @parameter2: groovyjarjarantlr.Grammar;

        z0 := @parameter3: boolean;

        i0 := @parameter4: int;

        r3 := @parameter5: groovyjarjarantlr.Lookahead[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(100);

        i4 = 1;

     label1:
        if i4 > i0 goto label5;

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("k==");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i4);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(58);

        if z0 == 0 goto label3;

        $r12 = r3[i4];

        $r15 = $r12.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $r14 = r13.<groovyjarjarantlr.DefaultToolErrorHandler: groovyjarjarantlr.CharFormatter javaCharFormatter>;

        $r16 = virtualinvoke $r15.<groovyjarjarantlr.collections.impl.BitSet: java.lang.String toStringWithRanges(java.lang.String,groovyjarjarantlr.CharFormatter)>(",", $r14);

        $r17 = r3[i4];

        $z1 = virtualinvoke $r17.<groovyjarjarantlr.Lookahead: boolean containsEpsilon()>();

        if $z1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<end-of-token>");

        $i2 = virtualinvoke $r16.<java.lang.String: int length()>();

        if $i2 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(44);

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        goto label4;

     label3:
        $r4 = r3[i4];

        $r7 = $r4.<groovyjarjarantlr.Lookahead: groovyjarjarantlr.collections.impl.BitSet fset>;

        $r6 = r5.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r8 = interfaceinvoke $r6.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.collections.impl.Vector getVocabulary()>();

        $r9 = virtualinvoke $r7.<groovyjarjarantlr.collections.impl.BitSet: java.lang.String toString(java.lang.String,groovyjarjarantlr.collections.impl.Vector)>(",", $r8);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

     label4:
        $i1 = i3;

        i3 = i3 + 1;

        $r11 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        r10[$i1] = $r11;

        virtualinvoke $r0.<java.lang.StringBuffer: void setLength(int)>(0);

        i4 = i4 + 1;

        goto label1;

     label5:
        return;
    }

    public void warnAltAmbiguity(groovyjarjarantlr.Grammar, groovyjarjarantlr.AlternativeBlock, boolean, int, groovyjarjarantlr.Lookahead[], int, int)
    {
        groovyjarjarantlr.Lookahead[] r6;
        groovyjarjarantlr.DefaultToolErrorHandler r4;
        groovyjarjarantlr.Grammar r5;
        groovyjarjarantlr.RuleRefElement r11, r13;
        boolean $z0, z1, $z2;
        groovyjarjarantlr.RuleBlock $r7;
        groovyjarjarantlr.Alternative $r8, $r9;
        groovyjarjarantlr.AlternativeElement $r10, $r12;
        groovyjarjarantlr.AlternativeBlock r1;
        java.lang.String[] $r21;
        groovyjarjarantlr.Tool $r23;
        java.lang.StringBuffer $r0, $r2, $r3, $r18, $r19, $r20;
        int i0, $i1, i2, $i3, i4, $i5, $i6, $i7;
        java.lang.String $r14, $r15, $r16, $r17, $r22, $r24;

        r4 := @this: groovyjarjarantlr.DefaultToolErrorHandler;

        r5 := @parameter0: groovyjarjarantlr.Grammar;

        r1 := @parameter1: groovyjarjarantlr.AlternativeBlock;

        z1 := @parameter2: boolean;

        i4 := @parameter3: int;

        r6 := @parameter4: groovyjarjarantlr.Lookahead[];

        i0 := @parameter5: int;

        i2 := @parameter6: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(100);

        $z0 = r1 instanceof groovyjarjarantlr.RuleBlock;

        if $z0 == 0 goto label1;

        $r7 = (groovyjarjarantlr.RuleBlock) r1;

        $z2 = virtualinvoke $r7.<groovyjarjarantlr.RuleBlock: boolean isLexerAutoGenRule()>();

        if $z2 == 0 goto label1;

        $r8 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i0);

        $r9 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.Alternative getAlternativeAt(int)>(i2);

        $r10 = $r8.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        r11 = (groovyjarjarantlr.RuleRefElement) $r10;

        $r12 = $r9.<groovyjarjarantlr.Alternative: groovyjarjarantlr.AlternativeElement head>;

        r13 = (groovyjarjarantlr.RuleRefElement) $r12;

        $r14 = r11.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r15 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String reverseLexerRuleName(java.lang.String)>($r14);

        $r16 = r13.<groovyjarjarantlr.RuleRefElement: java.lang.String targetRule>;

        $r17 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String reverseLexerRuleName(java.lang.String)>($r16);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lexical nondeterminism between rules ");

        $r18 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" upon");

        goto label3;

     label1:
        if z1 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("lexical ");

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("nondeterminism between alts ");

        $i1 = i0 + 1;

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and ");

        $i3 = i2 + 1;

        $r3 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" of block upon");

     label3:
        $i5 = i4 + 1;

        $r21 = newarray (java.lang.String)[$i5];

        $r22 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        $r21[0] = $r22;

        specialinvoke r4.<groovyjarjarantlr.DefaultToolErrorHandler: void dumpSets(java.lang.String[],int,groovyjarjarantlr.Grammar,boolean,int,groovyjarjarantlr.Lookahead[])>($r21, 1, r5, z1, i4, r6);

        $r23 = r4.<groovyjarjarantlr.DefaultToolErrorHandler: groovyjarjarantlr.Tool antlrTool>;

        $r24 = virtualinvoke r5.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i6 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        $i7 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: int getColumn()>();

        virtualinvoke $r23.<groovyjarjarantlr.Tool: void warning(java.lang.String[],java.lang.String,int,int)>($r21, $r24, $i6, $i7);

        return;
    }

    public void warnAltExitAmbiguity(groovyjarjarantlr.Grammar, groovyjarjarantlr.BlockWithImpliedExitPath, boolean, int, groovyjarjarantlr.Lookahead[], int)
    {
        groovyjarjarantlr.Lookahead[] r7;
        groovyjarjarantlr.DefaultToolErrorHandler r5;
        java.lang.String[] r0;
        groovyjarjarantlr.Grammar r6;
        groovyjarjarantlr.Tool $r13;
        java.lang.StringBuffer $r1, $r2, $r3, $r8, $r9, $r10, $r11;
        int i0, $i1, $i2, i3, $i4, $i5, $i6;
        java.lang.String $r4, $r12, $r14, $r16;
        boolean z0;
        groovyjarjarantlr.BlockWithImpliedExitPath r15;

        r5 := @this: groovyjarjarantlr.DefaultToolErrorHandler;

        r6 := @parameter0: groovyjarjarantlr.Grammar;

        r15 := @parameter1: groovyjarjarantlr.BlockWithImpliedExitPath;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        r7 := @parameter4: groovyjarjarantlr.Lookahead[];

        i3 := @parameter5: int;

        $i1 = i0 + 2;

        r0 = newarray (java.lang.String)[$i1];

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        if z0 == 0 goto label1;

        $r16 = "lexical ";

        goto label2;

     label1:
        $r16 = "";

     label2:
        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("nondeterminism upon");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        r0[0] = $r4;

        specialinvoke r5.<groovyjarjarantlr.DefaultToolErrorHandler: void dumpSets(java.lang.String[],int,groovyjarjarantlr.Grammar,boolean,int,groovyjarjarantlr.Lookahead[])>(r0, 1, r6, z0, i0, r7);

        $i2 = i0 + 1;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("between alt ");

        $i4 = i3 + 1;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and exit branch of block");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        r0[$i2] = $r12;

        $r13 = r5.<groovyjarjarantlr.DefaultToolErrorHandler: groovyjarjarantlr.Tool antlrTool>;

        $r14 = virtualinvoke r6.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i5 = virtualinvoke r15.<groovyjarjarantlr.BlockWithImpliedExitPath: int getLine()>();

        $i6 = virtualinvoke r15.<groovyjarjarantlr.BlockWithImpliedExitPath: int getColumn()>();

        virtualinvoke $r13.<groovyjarjarantlr.Tool: void warning(java.lang.String[],java.lang.String,int,int)>(r0, $r14, $i5, $i6);

        return;
    }
}
