public class org.apache.zookeeper.common.AtomicFileOutputStream extends java.io.FilterOutputStream
{
    private static final java.lang.String TMP_EXTENSION;
    private static final org.slf4j.Logger LOG;
    private final java.io.File origFile;
    private final java.io.File tmpFile;

    public void <init>(java.io.File) throws java.io.FileNotFoundException
    {
        java.lang.String $r6, $r9, $r14, $r17;
        java.io.FileOutputStream $r1;
        java.io.File $r2, r3, $r4, $r10, $r11, $r12, $r18;
        org.apache.zookeeper.common.AtomicFileOutputStream r0;
        java.lang.StringBuilder $r5, $r7, $r8, $r13, $r15, $r16;

        r0 := @this: org.apache.zookeeper.common.AtomicFileOutputStream;

        r3 := @parameter0: java.io.File;

        $r1 = new java.io.FileOutputStream;

        $r2 = new java.io.File;

        $r4 = virtualinvoke r3.<java.io.File: java.io.File getParentFile()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r3.<java.io.File: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r9);

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>($r2);

        specialinvoke r0.<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>($r1);

        $r10 = virtualinvoke r3.<java.io.File: java.io.File getAbsoluteFile()>();

        r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File origFile> = $r10;

        $r11 = new java.io.File;

        $r12 = virtualinvoke r3.<java.io.File: java.io.File getParentFile()>();

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke r3.<java.io.File: java.lang.String getName()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".tmp");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.io.File: void <init>(java.io.File,java.lang.String)>($r12, $r17);

        $r18 = virtualinvoke $r11.<java.io.File: java.io.File getAbsoluteFile()>();

        r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File tmpFile> = $r18;

        return;
    }

    public void close() throws java.io.IOException
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9;
        org.apache.zookeeper.common.AtomicFileOutputStream r0;
        java.lang.StringBuilder $r5, $r7, $r9, $r16, $r17, $r19, $r20, $r22, $r28, $r30, $r32, $r39, $r40, $r42, $r43, $r45;
        java.lang.Throwable $r26;
        java.lang.String $r10, $r23, $r33, $r46;
        java.io.OutputStream $r1, $r11, $r34;
        org.slf4j.Logger $r6, $r29;
        java.io.FileOutputStream $r2;
        java.io.IOException $r15, $r38;
        java.io.File $r4, $r8, $r12, $r13, $r14, $r18, $r21, $r24, $r25, $r27, $r31, $r35, $r36, $r37, $r41, $r44, $r47, $r48;
        java.nio.channels.FileChannel $r3;

        r0 := @this: org.apache.zookeeper.common.AtomicFileOutputStream;

        z8 = 0;

        z9 = 0;

     label01:
        virtualinvoke r0.<org.apache.zookeeper.common.AtomicFileOutputStream: void flush()>();

        $r1 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.OutputStream out>;

        $r2 = (java.io.FileOutputStream) $r1;

        $r3 = virtualinvoke $r2.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        virtualinvoke $r3.<java.nio.channels.FileChannel: void force(boolean)>(1);

        z8 = 1;

        specialinvoke r0.<java.io.FilterOutputStream: void close()>();

        z9 = 1;

        goto label06;

     label02:
        goto label05;

     label03:
        $r26 := @caughtexception;

        goto label12;

     label04:
        throw $r26;

     label05:
        return;

     label06:
        if 1 == 0 goto label09;

        $r13 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File tmpFile>;

        $r12 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File origFile>;

        $z1 = virtualinvoke $r13.<java.io.File: boolean renameTo(java.io.File)>($r12);

        if $z1 != 0 goto label08;

        $r14 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File origFile>;

        $z2 = virtualinvoke $r14.<java.io.File: boolean delete()>();

        if $z2 == 0 goto label07;

        $r25 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File tmpFile>;

        $r24 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File origFile>;

        $z3 = virtualinvoke $r25.<java.io.File: boolean renameTo(java.io.File)>($r24);

        if $z3 != 0 goto label08;

     label07:
        $r15 = new java.io.IOException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not rename temporary file ");

        $r18 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File tmpFile>;

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r21 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File origFile>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<java.io.IOException: void <init>(java.lang.String)>($r23);

        throw $r15;

     label08:
        goto label11;

     label09:
        if 1 != 0 goto label10;

        $r11 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.OutputStream out>;

        staticinvoke <org.apache.zookeeper.common.IOUtils: void closeStream(java.io.Closeable)>($r11);

     label10:
        $r4 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File tmpFile>;

        $z0 = virtualinvoke $r4.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label11;

        $r6 = <org.apache.zookeeper.common.AtomicFileOutputStream: org.slf4j.Logger LOG>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete tmp file ");

        $r8 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File tmpFile>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String)>($r10);

     label11:
        goto label02;

     label12:
        if z9 == 0 goto label15;

        $r36 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File tmpFile>;

        $r35 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File origFile>;

        $z5 = virtualinvoke $r36.<java.io.File: boolean renameTo(java.io.File)>($r35);

        if $z5 != 0 goto label14;

        $r37 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File origFile>;

        $z6 = virtualinvoke $r37.<java.io.File: boolean delete()>();

        if $z6 == 0 goto label13;

        $r48 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File tmpFile>;

        $r47 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File origFile>;

        $z7 = virtualinvoke $r48.<java.io.File: boolean renameTo(java.io.File)>($r47);

        if $z7 != 0 goto label14;

     label13:
        $r38 = new java.io.IOException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not rename temporary file ");

        $r41 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File tmpFile>;

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r44 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File origFile>;

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.io.IOException: void <init>(java.lang.String)>($r46);

        throw $r38;

     label14:
        goto label17;

     label15:
        if z8 != 0 goto label16;

        $r34 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.OutputStream out>;

        staticinvoke <org.apache.zookeeper.common.IOUtils: void closeStream(java.io.Closeable)>($r34);

     label16:
        $r27 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File tmpFile>;

        $z4 = virtualinvoke $r27.<java.io.File: boolean delete()>();

        if $z4 != 0 goto label17;

        $r29 = <org.apache.zookeeper.common.AtomicFileOutputStream: org.slf4j.Logger LOG>;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete tmp file ");

        $r31 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File tmpFile>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r29.<org.slf4j.Logger: void warn(java.lang.String)>($r33);

     label17:
        goto label04;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label03 to label04 with label03;
    }

    public void abort()
    {
        java.lang.String $r7, $r14;
        boolean $z0;
        org.slf4j.Logger $r3, $r10;
        java.io.IOException $r8;
        java.io.File $r1, $r5, $r12;
        org.apache.zookeeper.common.AtomicFileOutputStream r0;
        java.lang.StringBuilder $r2, $r4, $r6, $r9, $r11, $r13;

        r0 := @this: org.apache.zookeeper.common.AtomicFileOutputStream;

     label1:
        specialinvoke r0.<java.io.FilterOutputStream: void close()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r10 = <org.apache.zookeeper.common.AtomicFileOutputStream: org.slf4j.Logger LOG>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to abort file ");

        $r12 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File tmpFile>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>($r14, $r8);

     label4:
        $r1 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File tmpFile>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean delete()>();

        if $z0 != 0 goto label5;

        $r3 = <org.apache.zookeeper.common.AtomicFileOutputStream: org.slf4j.Logger LOG>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to delete tmp file during abort ");

        $r5 = r0.<org.apache.zookeeper.common.AtomicFileOutputStream: java.io.File tmpFile>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String)>($r7);

     label5:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <org.apache.zookeeper.common.AtomicFileOutputStream: java.lang.String TMP_EXTENSION> = ".tmp";

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lorg/apache/zookeeper/common/AtomicFileOutputStream;");

        <org.apache.zookeeper.common.AtomicFileOutputStream: org.slf4j.Logger LOG> = $r0;

        return;
    }
}
