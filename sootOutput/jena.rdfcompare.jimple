public class jena.rdfcompare extends java.lang.Object
{

    public void <init>()
    {
        jena.rdfcompare r0;

        r0 := @this: jena.rdfcompare;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient void main(java.lang.String[])
    {
        boolean $z0;
        java.lang.Exception $r17;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r21, $r23, $r29, $r30;
        java.lang.String[] r0;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        java.lang.String $r10, $r22, $r24, $r25, $r26, r27, r28;
        java.io.PrintStream $r2, $r13, $r14, $r15, $r16, $r18, $r20;
        com.hp.hpl.jena.rdf.model.Model $r11, $r12;

        r0 := @parameter0: java.lang.String[];

        $i0 = lengthof r0;

        if $i0 < 2 goto label1;

        $i2 = lengthof r0;

        if $i2 <= 4 goto label2;

     label1:
        staticinvoke <jena.rdfcompare: void usage()>();

        $i5 = (int) -1;

        staticinvoke <java.lang.System: void exit(int)>($i5);

     label2:
        $r25 = r0[0];

        $r26 = r0[1];

        r27 = "RDF/XML";

        $i3 = lengthof r0;

        if $i3 <= 2 goto label3;

        r27 = r0[2];

     label3:
        r28 = "N-TRIPLE";

        $i1 = lengthof r0;

        if $i1 != 4 goto label4;

        r28 = r0[3];

     label4:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r28);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label5:
        $r11 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        $r12 = staticinvoke <com.hp.hpl.jena.rdf.model.ModelFactory: com.hp.hpl.jena.rdf.model.Model createDefaultModel()>();

        staticinvoke <jena.rdfcompare: void read(com.hp.hpl.jena.rdf.model.Model,java.lang.String,java.lang.String)>($r11, $r25, r27);

        staticinvoke <jena.rdfcompare: void read(com.hp.hpl.jena.rdf.model.Model,java.lang.String,java.lang.String)>($r12, $r26, r28);

        $z0 = interfaceinvoke $r11.<com.hp.hpl.jena.rdf.model.Model: boolean isIsomorphicWith(com.hp.hpl.jena.rdf.model.Model)>($r12);

        if $z0 == 0 goto label6;

        $r15 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>("models are equal");

        $r16 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r16.<java.io.PrintStream: void println()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

        goto label7;

     label6:
        $r13 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("models are unequal");

        $r14 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r14.<java.io.PrintStream: void println()>();

        staticinvoke <java.lang.System: void exit(int)>(1);

     label7:
        goto label9;

     label8:
        $r17 := @caughtexception;

        $r18 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("Unhandled exception:");

        $r20 = <java.lang.System: java.io.PrintStream err>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r22 = virtualinvoke $r17.<java.lang.Exception: java.lang.String toString()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>($r24);

        $i7 = (int) -1;

        staticinvoke <java.lang.System: void exit(int)>($i7);

     label9:
        return;

        catch java.lang.Exception from label5 to label7 with label8;
    }

    protected static void usage()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("usage:");

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("    java jena.rdfcompare source1 source2 [lang1 [lang2]]");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println()>();

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("    source1 and source2 can be URL\'s or filenames");

        $r4 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("    lang1 and lang2 can take values:");

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("      RDF/XML");

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("      N-TRIPLE");

        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("      N3");

        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("    lang1 defaults to RDF/XML, lang2 to N-TRIPLE");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println()>();

        return;
    }

    protected static void read(com.hp.hpl.jena.rdf.model.Model, java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        java.net.MalformedURLException $r4;
        java.net.URL $r0;
        com.hp.hpl.jena.rdf.model.Model r2;
        java.lang.String r1, r3;
        java.io.FileInputStream $r5;

        r2 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

     label1:
        $r0 = new java.net.URL;

        specialinvoke $r0.<java.net.URL: void <init>(java.lang.String)>(r1);

        interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model read(java.lang.String,java.lang.String)>(r1, r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.io.FileInputStream;

        specialinvoke $r5.<java.io.FileInputStream: void <init>(java.lang.String)>(r1);

        interfaceinvoke r2.<com.hp.hpl.jena.rdf.model.Model: com.hp.hpl.jena.rdf.model.Model read(java.io.InputStream,java.lang.String,java.lang.String)>($r5, "", r3);

     label4:
        return;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        staticinvoke <jena.cmdline.CmdLineUtils: void setLog4jConfiguration()>();

        return;
    }
}
