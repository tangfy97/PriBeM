public class org.apache.commons.httpclient.methods.OptionsMethod extends org.apache.commons.httpclient.HttpMethodBase
{
    private static final org.apache.commons.logging.Log LOG;
    private java.util.Vector methodsAllowed;
    static java.lang.Class class$org$apache$commons$httpclient$methods$OptionsMethod;

    public void <init>()
    {
        java.util.Vector $r1;
        org.apache.commons.httpclient.methods.OptionsMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.OptionsMethod;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<org.apache.commons.httpclient.methods.OptionsMethod: java.util.Vector methodsAllowed> = $r1;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        java.util.Vector $r2;
        org.apache.commons.httpclient.methods.OptionsMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.OptionsMethod;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.commons.httpclient.HttpMethodBase: void <init>(java.lang.String)>(r1);

        $r2 = new java.util.Vector;

        specialinvoke $r2.<java.util.Vector: void <init>()>();

        r0.<org.apache.commons.httpclient.methods.OptionsMethod: java.util.Vector methodsAllowed> = $r2;

        return;
    }

    public java.lang.String getName()
    {
        org.apache.commons.httpclient.methods.OptionsMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.OptionsMethod;

        return "OPTIONS";
    }

    public boolean isAllowed(java.lang.String)
    {
        java.util.Vector $r2;
        java.lang.String r1;
        org.apache.commons.httpclient.methods.OptionsMethod r0;
        boolean $z0;

        r0 := @this: org.apache.commons.httpclient.methods.OptionsMethod;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.commons.httpclient.methods.OptionsMethod: void checkUsed()>();

        $r2 = r0.<org.apache.commons.httpclient.methods.OptionsMethod: java.util.Vector methodsAllowed>;

        $z0 = virtualinvoke $r2.<java.util.Vector: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public java.util.Enumeration getAllowedMethods()
    {
        java.util.Vector $r1;
        java.util.Enumeration $r2;
        org.apache.commons.httpclient.methods.OptionsMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.OptionsMethod;

        virtualinvoke r0.<org.apache.commons.httpclient.methods.OptionsMethod: void checkUsed()>();

        $r1 = r0.<org.apache.commons.httpclient.methods.OptionsMethod: java.util.Vector methodsAllowed>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.util.Enumeration elements()>();

        return $r2;
    }

    protected void processResponseHeaders(org.apache.commons.httpclient.HttpState, org.apache.commons.httpclient.HttpConnection)
    {
        org.apache.commons.httpclient.HttpConnection r10;
        org.apache.commons.httpclient.methods.OptionsMethod r1;
        org.apache.commons.httpclient.Header $r2;
        java.util.Vector $r8;
        java.util.StringTokenizer $r4;
        org.apache.commons.httpclient.HttpState r9;
        org.apache.commons.logging.Log $r0;
        java.lang.String $r3, $r5, $r6, $r7;
        boolean $z0;

        r1 := @this: org.apache.commons.httpclient.methods.OptionsMethod;

        r9 := @parameter0: org.apache.commons.httpclient.HttpState;

        r10 := @parameter1: org.apache.commons.httpclient.HttpConnection;

        $r0 = <org.apache.commons.httpclient.methods.OptionsMethod: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r0.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter OptionsMethod.processResponseHeaders(HttpState, HttpConnection)");

        $r2 = virtualinvoke r1.<org.apache.commons.httpclient.methods.OptionsMethod: org.apache.commons.httpclient.Header getResponseHeader(java.lang.String)>("allow");

        if $r2 == null goto label2;

        $r3 = virtualinvoke $r2.<org.apache.commons.httpclient.Header: java.lang.String getValue()>();

        $r4 = new java.util.StringTokenizer;

        specialinvoke $r4.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r3, ",");

     label1:
        $z0 = virtualinvoke $r4.<java.util.StringTokenizer: boolean hasMoreElements()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke $r4.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toUpperCase()>();

        $r8 = r1.<org.apache.commons.httpclient.methods.OptionsMethod: java.util.Vector methodsAllowed>;

        virtualinvoke $r8.<java.util.Vector: void addElement(java.lang.Object)>($r7);

        goto label1;

     label2:
        return;
    }

    public boolean needContentLength()
    {
        org.apache.commons.httpclient.methods.OptionsMethod r0;

        r0 := @this: org.apache.commons.httpclient.methods.OptionsMethod;

        return 0;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.commons.httpclient.methods.OptionsMethod: java.lang.Class class$org$apache$commons$httpclient$methods$OptionsMethod>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.methods.OptionsMethod: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.methods.OptionsMethod");

        <org.apache.commons.httpclient.methods.OptionsMethod: java.lang.Class class$org$apache$commons$httpclient$methods$OptionsMethod> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.methods.OptionsMethod: java.lang.Class class$org$apache$commons$httpclient$methods$OptionsMethod>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.methods.OptionsMethod: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
