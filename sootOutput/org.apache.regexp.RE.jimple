public class org.apache.regexp.RE extends java.lang.Object implements java.io.Serializable
{
    public static final int MATCH_NORMAL;
    public static final int MATCH_CASEINDEPENDENT;
    public static final int MATCH_MULTILINE;
    public static final int MATCH_SINGLELINE;
    static final char OP_END;
    static final char OP_BOL;
    static final char OP_EOL;
    static final char OP_ANY;
    static final char OP_ANYOF;
    static final char OP_BRANCH;
    static final char OP_ATOM;
    static final char OP_STAR;
    static final char OP_PLUS;
    static final char OP_MAYBE;
    static final char OP_ESCAPE;
    static final char OP_OPEN;
    static final char OP_OPEN_CLUSTER;
    static final char OP_CLOSE;
    static final char OP_CLOSE_CLUSTER;
    static final char OP_BACKREF;
    static final char OP_GOTO;
    static final char OP_NOTHING;
    static final char OP_RELUCTANTSTAR;
    static final char OP_RELUCTANTPLUS;
    static final char OP_RELUCTANTMAYBE;
    static final char OP_POSIXCLASS;
    static final char E_ALNUM;
    static final char E_NALNUM;
    static final char E_BOUND;
    static final char E_NBOUND;
    static final char E_SPACE;
    static final char E_NSPACE;
    static final char E_DIGIT;
    static final char E_NDIGIT;
    static final char POSIX_CLASS_ALNUM;
    static final char POSIX_CLASS_ALPHA;
    static final char POSIX_CLASS_BLANK;
    static final char POSIX_CLASS_CNTRL;
    static final char POSIX_CLASS_DIGIT;
    static final char POSIX_CLASS_GRAPH;
    static final char POSIX_CLASS_LOWER;
    static final char POSIX_CLASS_PRINT;
    static final char POSIX_CLASS_PUNCT;
    static final char POSIX_CLASS_SPACE;
    static final char POSIX_CLASS_UPPER;
    static final char POSIX_CLASS_XDIGIT;
    static final char POSIX_CLASS_JSTART;
    static final char POSIX_CLASS_JPART;
    static final int maxNode;
    static final int MAX_PAREN;
    static final int offsetOpcode;
    static final int offsetOpdata;
    static final int offsetNext;
    static final int nodeSize;
    org.apache.regexp.REProgram program;
    transient org.apache.regexp.CharacterIterator search;
    int matchFlags;
    int maxParen;
    transient int parenCount;
    transient int start0;
    transient int end0;
    transient int start1;
    transient int end1;
    transient int start2;
    transient int end2;
    transient int[] startn;
    transient int[] endn;
    transient int[] startBackref;
    transient int[] endBackref;
    public static final int REPLACE_ALL;
    public static final int REPLACE_FIRSTONLY;
    public static final int REPLACE_BACKREFERENCES;

    public void <init>(java.lang.String) throws org.apache.regexp.RESyntaxException
    {
        java.lang.String r1;
        org.apache.regexp.RE r0;

        r0 := @this: org.apache.regexp.RE;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.apache.regexp.RE: void <init>(java.lang.String,int)>(r1, 0);

        return;
    }

    public void <init>(java.lang.String, int) throws org.apache.regexp.RESyntaxException
    {
        org.apache.regexp.RECompiler $r1;
        org.apache.regexp.REProgram $r3;
        int i0;
        java.lang.String r2;
        org.apache.regexp.RE r0;

        r0 := @this: org.apache.regexp.RE;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = new org.apache.regexp.RECompiler;

        specialinvoke $r1.<org.apache.regexp.RECompiler: void <init>()>();

        $r3 = virtualinvoke $r1.<org.apache.regexp.RECompiler: org.apache.regexp.REProgram compile(java.lang.String)>(r2);

        specialinvoke r0.<org.apache.regexp.RE: void <init>(org.apache.regexp.REProgram)>($r3);

        virtualinvoke r0.<org.apache.regexp.RE: void setMatchFlags(int)>(i0);

        return;
    }

    public void <init>(org.apache.regexp.REProgram, int)
    {
        int i0;
        org.apache.regexp.RE r0;
        org.apache.regexp.REProgram r1;

        r0 := @this: org.apache.regexp.RE;

        r1 := @parameter0: org.apache.regexp.REProgram;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.regexp.RE: int maxParen> = 16;

        virtualinvoke r0.<org.apache.regexp.RE: void setProgram(org.apache.regexp.REProgram)>(r1);

        virtualinvoke r0.<org.apache.regexp.RE: void setMatchFlags(int)>(i0);

        return;
    }

    public void <init>(org.apache.regexp.REProgram)
    {
        org.apache.regexp.RE r0;
        org.apache.regexp.REProgram r1;

        r0 := @this: org.apache.regexp.RE;

        r1 := @parameter0: org.apache.regexp.REProgram;

        specialinvoke r0.<org.apache.regexp.RE: void <init>(org.apache.regexp.REProgram,int)>(r1, 0);

        return;
    }

    public void <init>()
    {
        org.apache.regexp.RE r0;

        r0 := @this: org.apache.regexp.RE;

        specialinvoke r0.<org.apache.regexp.RE: void <init>(org.apache.regexp.REProgram,int)>(null, 0);

        return;
    }

    public static java.lang.String simplePatternToFullRegularExpression(java.lang.String)
    {
        java.lang.StringBuffer $r3;
        int i1, $i2, $i3;
        char $c0;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i1 = 0;

        goto label6;

     label1:
        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);

        $i3 = (int) $c0;

        lookupswitch($i3)
        {
            case 36: goto label3;
            case 40: goto label3;
            case 41: goto label3;
            case 42: goto label2;
            case 43: goto label3;
            case 46: goto label3;
            case 63: goto label3;
            case 91: goto label3;
            case 92: goto label3;
            case 93: goto label3;
            case 94: goto label3;
            case 123: goto label3;
            case 124: goto label3;
            case 125: goto label3;
            default: goto label4;
        };

     label2:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".*");

        goto label5;

     label3:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

     label4:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

     label5:
        i1 = i1 + 1;

     label6:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        if i1 < $i2 goto label1;

        $r2 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public void setMatchFlags(int)
    {
        int i0;
        org.apache.regexp.RE r0;

        r0 := @this: org.apache.regexp.RE;

        i0 := @parameter0: int;

        r0.<org.apache.regexp.RE: int matchFlags> = i0;

        return;
    }

    public int getMatchFlags()
    {
        int $i0;
        org.apache.regexp.RE r0;

        r0 := @this: org.apache.regexp.RE;

        $i0 = r0.<org.apache.regexp.RE: int matchFlags>;

        return $i0;
    }

    public void setProgram(org.apache.regexp.REProgram)
    {
        org.apache.regexp.REProgram r1;
        int $i0, $i1, $i3;
        org.apache.regexp.RE r0;

        r0 := @this: org.apache.regexp.RE;

        r1 := @parameter0: org.apache.regexp.REProgram;

        r0.<org.apache.regexp.RE: org.apache.regexp.REProgram program> = r1;

        if r1 == null goto label1;

        $i0 = r1.<org.apache.regexp.REProgram: int maxParens>;

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        $i1 = r1.<org.apache.regexp.REProgram: int maxParens>;

        r0.<org.apache.regexp.RE: int maxParen> = $i1;

        goto label2;

     label1:
        r0.<org.apache.regexp.RE: int maxParen> = 16;

     label2:
        return;
    }

    public org.apache.regexp.REProgram getProgram()
    {
        org.apache.regexp.RE r0;
        org.apache.regexp.REProgram $r1;

        r0 := @this: org.apache.regexp.RE;

        $r1 = r0.<org.apache.regexp.RE: org.apache.regexp.REProgram program>;

        return $r1;
    }

    public int getParenCount()
    {
        int $i0;
        org.apache.regexp.RE r0;

        r0 := @this: org.apache.regexp.RE;

        $i0 = r0.<org.apache.regexp.RE: int parenCount>;

        return $i0;
    }

    public java.lang.String getParen(int)
    {
        int i0, $i1, $i2, $i3;
        java.lang.String $r2;
        org.apache.regexp.CharacterIterator $r1;
        org.apache.regexp.RE r0;

        r0 := @this: org.apache.regexp.RE;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.regexp.RE: int parenCount>;

        if i0 >= $i1 goto label1;

        $i2 = virtualinvoke r0.<org.apache.regexp.RE: int getParenStart(int)>(i0);

        if $i2 < 0 goto label1;

        $r1 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $i3 = virtualinvoke r0.<org.apache.regexp.RE: int getParenEnd(int)>(i0);

        $r2 = interfaceinvoke $r1.<org.apache.regexp.CharacterIterator: java.lang.String substring(int,int)>($i2, $i3);

        return $r2;

     label1:
        return null;
    }

    public final int getParenStart(int)
    {
        org.apache.regexp.RE r0;
        int[] $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7;

        r0 := @this: org.apache.regexp.RE;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.regexp.RE: int parenCount>;

        if i0 >= $i1 goto label6;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $i4 = r0.<org.apache.regexp.RE: int start0>;

        return $i4;

     label2:
        $i3 = r0.<org.apache.regexp.RE: int start1>;

        return $i3;

     label3:
        $i2 = r0.<org.apache.regexp.RE: int start2>;

        return $i2;

     label4:
        $r1 = r0.<org.apache.regexp.RE: int[] startn>;

        if $r1 != null goto label5;

        specialinvoke r0.<org.apache.regexp.RE: void allocParens()>();

     label5:
        $r2 = r0.<org.apache.regexp.RE: int[] startn>;

        $i5 = $r2[i0];

        return $i5;

     label6:
        $i7 = (int) -1;

        return $i7;
    }

    public final int getParenEnd(int)
    {
        org.apache.regexp.RE r0;
        int[] $r1, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7;

        r0 := @this: org.apache.regexp.RE;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.regexp.RE: int parenCount>;

        if i0 >= $i1 goto label6;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        $i4 = r0.<org.apache.regexp.RE: int end0>;

        return $i4;

     label2:
        $i3 = r0.<org.apache.regexp.RE: int end1>;

        return $i3;

     label3:
        $i2 = r0.<org.apache.regexp.RE: int end2>;

        return $i2;

     label4:
        $r1 = r0.<org.apache.regexp.RE: int[] endn>;

        if $r1 != null goto label5;

        specialinvoke r0.<org.apache.regexp.RE: void allocParens()>();

     label5:
        $r2 = r0.<org.apache.regexp.RE: int[] endn>;

        $i5 = $r2[i0];

        return $i5;

     label6:
        $i7 = (int) -1;

        return $i7;
    }

    public final int getParenLength(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i6;
        org.apache.regexp.RE r0;

        r0 := @this: org.apache.regexp.RE;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.regexp.RE: int parenCount>;

        if i0 >= $i1 goto label1;

        $i2 = virtualinvoke r0.<org.apache.regexp.RE: int getParenEnd(int)>(i0);

        $i3 = virtualinvoke r0.<org.apache.regexp.RE: int getParenStart(int)>(i0);

        $i4 = $i2 - $i3;

        return $i4;

     label1:
        $i6 = (int) -1;

        return $i6;
    }

    protected final void setParenStart(int, int)
    {
        int[] $r1, $r2;
        int i0, $i1, i2;
        org.apache.regexp.RE r0;

        r0 := @this: org.apache.regexp.RE;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $i1 = r0.<org.apache.regexp.RE: int parenCount>;

        if i0 >= $i1 goto label6;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        r0.<org.apache.regexp.RE: int start0> = i2;

        goto label6;

     label2:
        r0.<org.apache.regexp.RE: int start1> = i2;

        goto label6;

     label3:
        r0.<org.apache.regexp.RE: int start2> = i2;

        goto label6;

     label4:
        $r1 = r0.<org.apache.regexp.RE: int[] startn>;

        if $r1 != null goto label5;

        specialinvoke r0.<org.apache.regexp.RE: void allocParens()>();

     label5:
        $r2 = r0.<org.apache.regexp.RE: int[] startn>;

        $r2[i0] = i2;

     label6:
        return;
    }

    protected final void setParenEnd(int, int)
    {
        int[] $r1, $r2;
        int i0, $i1, i2;
        org.apache.regexp.RE r0;

        r0 := @this: org.apache.regexp.RE;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $i1 = r0.<org.apache.regexp.RE: int parenCount>;

        if i0 >= $i1 goto label6;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            default: goto label4;
        };

     label1:
        r0.<org.apache.regexp.RE: int end0> = i2;

        goto label6;

     label2:
        r0.<org.apache.regexp.RE: int end1> = i2;

        goto label6;

     label3:
        r0.<org.apache.regexp.RE: int end2> = i2;

        goto label6;

     label4:
        $r1 = r0.<org.apache.regexp.RE: int[] endn>;

        if $r1 != null goto label5;

        specialinvoke r0.<org.apache.regexp.RE: void allocParens()>();

     label5:
        $r2 = r0.<org.apache.regexp.RE: int[] endn>;

        $r2[i0] = i2;

     label6:
        return;
    }

    protected void internalError(java.lang.String) throws java.lang.Error
    {
        java.lang.StringBuffer $r1, $r2, $r4;
        java.lang.Error $r0;
        java.lang.String r3, $r5;
        org.apache.regexp.RE r6;

        r6 := @this: org.apache.regexp.RE;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.lang.Error;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("RE internal error: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.Error: void <init>(java.lang.String)>($r5);

        throw $r0;
    }

    private final void allocParens()
    {
        org.apache.regexp.RE r0;
        int[] $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, i3, $i5, $i7;

        r0 := @this: org.apache.regexp.RE;

        $i0 = r0.<org.apache.regexp.RE: int maxParen>;

        $r1 = newarray (int)[$i0];

        r0.<org.apache.regexp.RE: int[] startn> = $r1;

        $i1 = r0.<org.apache.regexp.RE: int maxParen>;

        $r2 = newarray (int)[$i1];

        r0.<org.apache.regexp.RE: int[] endn> = $r2;

        i3 = 0;

        goto label2;

     label1:
        $r3 = r0.<org.apache.regexp.RE: int[] startn>;

        $i5 = (int) -1;

        $r3[i3] = $i5;

        $r4 = r0.<org.apache.regexp.RE: int[] endn>;

        $i7 = (int) -1;

        $r4[i3] = $i7;

        i3 = i3 + 1;

     label2:
        $i2 = r0.<org.apache.regexp.RE: int maxParen>;

        if i3 < $i2 goto label1;

        return;
    }

    protected int matchNodes(int, int, int)
    {
        java.lang.StringBuffer $r9, $r10, $r11, $r52, $r53, $r54, $r56, $r57;
        int[] $r41, $r43, $r46, $r47;
        int i0, i1, i2, $i3, $i5, i8, $i9, $i11, $i13, $i14, $i15, $i17, $i19, $i20, $i21, $i23, $i25, $i26, $i27, $i30, $i31, $i32, $i33, $i42, $i45, $i47, $i51, $i54, $i58, $i59, $i60, $i61, $i62, $i63, $i65, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i103, $i105, i106, i107, i108, i109, i110, i111, i112, i116, i117, i118, i119, $i121, $i122, $i124, $i126, $i128, $i130, $i132, $i134, $i136, $i138, $i140, $i141, $i143, $i144, $i145, $i146, $i148, $i149, $i150, $i152, $i153, $i154, $i155, $i157, $i158, $i159, $i160, $i162, $i164, $i166, $i168, $i170, $i172, $i174, $i176, $i178, $i179, $i180, $i182, $i184, $i185, $i186, $i187, $i189, $i190, $i192, $i193, $i195, $i196, $i198, $i200, $i202, $i203, $i205, $i207, $i208, $i210, $i211, $i213, $i215, $i217, $i219, $i221, $i223, $i225, $i227, $i229, $i231, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i241, $i243, $i245, $i247, $i248, $i250, $i251, $i253, $i254, $i255, $i257, $i258, $i260;
        java.lang.String $r12, $r55;
        char[] r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, z35, $z36, $z37, z38, z39, $z40;
        short $s7, s120;
        org.apache.regexp.RE r0;
        org.apache.regexp.CharacterIterator $r3, $r4, $r5, $r6, $r7, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r44, $r45, $r48, $r49, $r50;
        org.apache.regexp.REProgram $r1, $r40, $r42;
        char c4, $c6, c10, $c12, $c16, $c18, $c22, $c24, c28, c29, $c34, $c35, $c36, $c37, $c38, $c39, $c40, $c41, $c43, $c44, $c46, $c48, $c49, $c50, $c52, $c53, $c55, $c56, $c57, $c64, $c66, $c102, $c104, $c113, c114, $c115;

        r0 := @this: org.apache.regexp.RE;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        i106 = i0;

        $r1 = r0.<org.apache.regexp.RE: org.apache.regexp.REProgram program>;

        r2 = $r1.<org.apache.regexp.REProgram: char[] instruction>;

        i107 = i1;

        goto label118;

     label001:
        $i3 = i107 + 0;

        c4 = r2[$i3];

        $i5 = i107 + 2;

        $c6 = r2[$i5];

        $s7 = (short) $c6;

        $i121 = (int) $s7;

        i8 = i107 + $i121;

        $i9 = i107 + 1;

        c10 = r2[$i9];

        $i122 = (int) c4;

        lookupswitch($i122)
        {
            case 35: goto label020;
            case 36: goto label033;
            case 40: goto label011;
            case 41: goto label015;
            case 46: goto label061;
            case 47: goto label002;
            case 56: goto label009;
            case 60: goto label019;
            case 61: goto label006;
            case 62: goto label019;
            case 65: goto label065;
            case 69: goto label115;
            case 71: goto label114;
            case 78: goto label114;
            case 80: goto label073;
            case 91: goto label100;
            case 92: goto label035;
            case 94: goto label030;
            case 124: goto label110;
            default: goto label116;
        };

     label002:
        i108 = 0;

     label003:
        $i75 = virtualinvoke r0.<org.apache.regexp.RE: int matchNodes(int,int,int)>(i8, 65536, i106);

        $i124 = (int) -1;

        if $i75 == $i124 goto label004;

        return $i75;

     label004:
        $i76 = i108;

        i108 = i108 + 1;

        if $i76 != 0 goto label005;

        $i77 = i107 + 3;

        $i78 = virtualinvoke r0.<org.apache.regexp.RE: int matchNodes(int,int,int)>($i77, i8, i106);

        i106 = $i78;

        $i126 = (int) -1;

        if $i78 != $i126 goto label003;

     label005:
        $i128 = (int) -1;

        return $i128;

     label006:
        goto label008;

     label007:
        $i70 = virtualinvoke r0.<org.apache.regexp.RE: int matchNodes(int,int,int)>(i8, 65536, $i69);

        $i130 = (int) -1;

        if $i70 == $i130 goto label008;

        return $i70;

     label008:
        $i68 = i107 + 3;

        $i69 = virtualinvoke r0.<org.apache.regexp.RE: int matchNodes(int,int,int)>($i68, i8, i106);

        i106 = $i69;

        $i132 = (int) -1;

        if $i69 != $i132 goto label007;

        $i134 = (int) -1;

        return $i134;

     label009:
        $i72 = virtualinvoke r0.<org.apache.regexp.RE: int matchNodes(int,int,int)>(i8, 65536, i106);

        $i136 = (int) -1;

        if $i72 == $i136 goto label010;

        return $i72;

     label010:
        $i73 = i107 + 3;

        $i74 = virtualinvoke r0.<org.apache.regexp.RE: int matchNodes(int,int,int)>($i73, i8, i106);

        i106 = $i74;

        $i138 = (int) -1;

        if $i74 != $i138 goto label009;

        $i140 = (int) -1;

        return $i140;

     label011:
        $r42 = r0.<org.apache.regexp.RE: org.apache.regexp.REProgram program>;

        $i88 = $r42.<org.apache.regexp.REProgram: int flags>;

        $i89 = $i88 & 1;

        if $i89 == 0 goto label012;

        $r43 = r0.<org.apache.regexp.RE: int[] startBackref>;

        $i141 = (int) c10;

        $r43[$i141] = i106;

     label012:
        $i90 = virtualinvoke r0.<org.apache.regexp.RE: int matchNodes(int,int,int)>(i8, 65536, i106);

        $i143 = (int) -1;

        if $i90 == $i143 goto label014;

        $i144 = (int) c10;

        $i92 = $i144 + 1;

        $i91 = r0.<org.apache.regexp.RE: int parenCount>;

        if $i92 <= $i91 goto label013;

        $i145 = (int) c10;

        $i94 = $i145 + 1;

        r0.<org.apache.regexp.RE: int parenCount> = $i94;

     label013:
        $i146 = (int) c10;

        $i93 = virtualinvoke r0.<org.apache.regexp.RE: int getParenStart(int)>($i146);

        $i148 = (int) -1;

        if $i93 != $i148 goto label014;

        $i149 = (int) c10;

        virtualinvoke r0.<org.apache.regexp.RE: void setParenStart(int,int)>($i149, i106);

     label014:
        return $i90;

     label015:
        $r40 = r0.<org.apache.regexp.RE: org.apache.regexp.REProgram program>;

        $i81 = $r40.<org.apache.regexp.REProgram: int flags>;

        $i82 = $i81 & 1;

        if $i82 == 0 goto label016;

        $r41 = r0.<org.apache.regexp.RE: int[] endBackref>;

        $i150 = (int) c10;

        $r41[$i150] = i106;

     label016:
        $i83 = virtualinvoke r0.<org.apache.regexp.RE: int matchNodes(int,int,int)>(i8, 65536, i106);

        $i152 = (int) -1;

        if $i83 == $i152 goto label018;

        $i153 = (int) c10;

        $i85 = $i153 + 1;

        $i84 = r0.<org.apache.regexp.RE: int parenCount>;

        if $i85 <= $i84 goto label017;

        $i154 = (int) c10;

        $i87 = $i154 + 1;

        r0.<org.apache.regexp.RE: int parenCount> = $i87;

     label017:
        $i155 = (int) c10;

        $i86 = virtualinvoke r0.<org.apache.regexp.RE: int getParenEnd(int)>($i155);

        $i157 = (int) -1;

        if $i86 != $i157 goto label018;

        $i158 = (int) c10;

        virtualinvoke r0.<org.apache.regexp.RE: void setParenEnd(int,int)>($i158, i106);

     label018:
        return $i83;

     label019:
        $i71 = virtualinvoke r0.<org.apache.regexp.RE: int matchNodes(int,int,int)>(i8, 65536, i106);

        return $i71;

     label020:
        $r46 = r0.<org.apache.regexp.RE: int[] startBackref>;

        $i159 = (int) c10;

        i109 = $r46[$i159];

        $r47 = r0.<org.apache.regexp.RE: int[] endBackref>;

        $i160 = (int) c10;

        i110 = $r47[$i160];

        $i162 = (int) -1;

        if i109 == $i162 goto label021;

        $i164 = (int) -1;

        if i110 != $i164 goto label022;

     label021:
        $i166 = (int) -1;

        return $i166;

     label022:
        if i109 != i110 goto label023;

        goto label117;

     label023:
        i111 = i110 - i109;

        $r48 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $i97 = i106 + i111;

        $i98 = $i97 - 1;

        $z25 = interfaceinvoke $r48.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>($i98);

        if $z25 == 0 goto label024;

        $i168 = (int) -1;

        return $i168;

     label024:
        $i99 = r0.<org.apache.regexp.RE: int matchFlags>;

        $i100 = $i99 & 1;

        if $i100 == 0 goto label025;

        $z26 = 1;

        goto label026;

     label025:
        $z26 = 0;

     label026:
        z27 = $z26;

        i112 = 0;

        goto label029;

     label027:
        $r49 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $i101 = i106;

        i106 = i106 + 1;

        $c102 = interfaceinvoke $r49.<org.apache.regexp.CharacterIterator: char charAt(int)>($i101);

        $r50 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $i103 = i109 + i112;

        $c104 = interfaceinvoke $r50.<org.apache.regexp.CharacterIterator: char charAt(int)>($i103);

        $i105 = specialinvoke r0.<org.apache.regexp.RE: int compareChars(char,char,boolean)>($c102, $c104, z27);

        if $i105 == 0 goto label028;

        $i170 = (int) -1;

        return $i170;

     label028:
        i112 = i112 + 1;

     label029:
        if i112 < i111 goto label027;

        goto label117;

     label030:
        if i106 == 0 goto label117;

        $i19 = r0.<org.apache.regexp.RE: int matchFlags>;

        $i20 = $i19 & 2;

        if $i20 != 2 goto label032;

        if i106 <= 0 goto label031;

        $i21 = i106 - 1;

        $z0 = specialinvoke r0.<org.apache.regexp.RE: boolean isNewline(int)>($i21);

        if $z0 != 0 goto label117;

     label031:
        $i172 = (int) -1;

        return $i172;

     label032:
        $i174 = (int) -1;

        return $i174;

     label033:
        $r44 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $z22 = interfaceinvoke $r44.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>(0);

        if $z22 != 0 goto label117;

        $r45 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $z23 = interfaceinvoke $r45.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>(i106);

        if $z23 != 0 goto label117;

        $i95 = r0.<org.apache.regexp.RE: int matchFlags>;

        $i96 = $i95 & 2;

        if $i96 != 2 goto label034;

        $z24 = specialinvoke r0.<org.apache.regexp.RE: boolean isNewline(int)>(i106);

        if $z24 != 0 goto label117;

        $i176 = (int) -1;

        return $i176;

     label034:
        $i178 = (int) -1;

        return $i178;

     label035:
        $i179 = (int) c10;

        lookupswitch($i179)
        {
            case 66: goto label036;
            case 68: goto label045;
            case 83: goto label045;
            case 87: goto label045;
            case 98: goto label036;
            case 100: goto label045;
            case 115: goto label045;
            case 119: goto label045;
            default: goto label060;
        };

     label036:
        if i106 != 0 goto label037;

        $c113 = 10;

        goto label038;

     label037:
        $r5 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $i23 = i106 - 1;

        $c113 = interfaceinvoke $r5.<org.apache.regexp.CharacterIterator: char charAt(int)>($i23);

     label038:
        c114 = $c113;

        $r6 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $z5 = interfaceinvoke $r6.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>(i106);

        if $z5 == 0 goto label039;

        $c115 = 10;

        goto label040;

     label039:
        $r7 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c115 = interfaceinvoke $r7.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

     label040:
        $z6 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>(c114);

        $z7 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c115);

        if $z6 != $z7 goto label041;

        $z28 = 1;

        goto label042;

     label041:
        $z28 = 0;

     label042:
        $i180 = (int) c10;

        if $i180 != 98 goto label043;

        $z29 = 1;

        goto label044;

     label043:
        $z29 = 0;

     label044:
        if $z28 != $z29 goto label117;

        $i182 = (int) -1;

        return $i182;

     label045:
        $r3 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $z1 = interfaceinvoke $r3.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>(i106);

        if $z1 == 0 goto label046;

        $i184 = (int) -1;

        return $i184;

     label046:
        $r4 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c22 = interfaceinvoke $r4.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $i185 = (int) c10;

        lookupswitch($i185)
        {
            case 68: goto label053;
            case 83: goto label056;
            case 87: goto label047;
            case 100: goto label053;
            case 115: goto label056;
            case 119: goto label047;
            default: goto label059;
        };

     label047:
        $z2 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c22);

        if $z2 != 0 goto label048;

        $i186 = (int) $c22;

        if $i186 != 95 goto label049;

     label048:
        $z30 = 1;

        goto label050;

     label049:
        $z30 = 0;

     label050:
        $i187 = (int) c10;

        if $i187 != 119 goto label051;

        $z31 = 1;

        goto label052;

     label051:
        $z31 = 0;

     label052:
        if $z30 == $z31 goto label059;

        $i189 = (int) -1;

        return $i189;

     label053:
        $z4 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c22);

        $i190 = (int) c10;

        if $i190 != 100 goto label054;

        $z32 = 1;

        goto label055;

     label054:
        $z32 = 0;

     label055:
        if $z4 == $z32 goto label059;

        $i192 = (int) -1;

        return $i192;

     label056:
        $z3 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c22);

        $i193 = (int) c10;

        if $i193 != 115 goto label057;

        $z33 = 1;

        goto label058;

     label057:
        $z33 = 0;

     label058:
        if $z3 == $z33 goto label059;

        $i195 = (int) -1;

        return $i195;

     label059:
        i106 = i106 + 1;

        goto label117;

     label060:
        $r56 = new java.lang.StringBuffer;

        specialinvoke $r56.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r56.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unrecognized escape \'");

        $i196 = (int) c10;

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i196);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.regexp.RE: void internalError(java.lang.String)>($r12);

        goto label117;

     label061:
        $i79 = r0.<org.apache.regexp.RE: int matchFlags>;

        $i80 = $i79 & 4;

        if $i80 != 4 goto label062;

        $r39 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $z21 = interfaceinvoke $r39.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>(i106);

        if $z21 == 0 goto label064;

        $i198 = (int) -1;

        return $i198;

     label062:
        $r38 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $z19 = interfaceinvoke $r38.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>(i106);

        if $z19 != 0 goto label063;

        $z20 = specialinvoke r0.<org.apache.regexp.RE: boolean isNewline(int)>(i106);

        if $z20 == 0 goto label064;

     label063:
        $i200 = (int) -1;

        return $i200;

     label064:
        i106 = i106 + 1;

        goto label117;

     label065:
        $r35 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $z17 = interfaceinvoke $r35.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>(i106);

        if $z17 == 0 goto label066;

        $i202 = (int) -1;

        return $i202;

     label066:
        i116 = i107 + 3;

        $r36 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $i203 = (int) c10;

        $i59 = $i203 + i106;

        $i60 = $i59 - 1;

        $z18 = interfaceinvoke $r36.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>($i60);

        if $z18 == 0 goto label067;

        $i205 = (int) -1;

        return $i205;

     label067:
        $i61 = r0.<org.apache.regexp.RE: int matchFlags>;

        $i62 = $i61 & 1;

        if $i62 == 0 goto label068;

        $z34 = 1;

        goto label069;

     label068:
        $z34 = 0;

     label069:
        z35 = $z34;

        i117 = 0;

        goto label072;

     label070:
        $r37 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $i63 = i106;

        i106 = i106 + 1;

        $c64 = interfaceinvoke $r37.<org.apache.regexp.CharacterIterator: char charAt(int)>($i63);

        $i65 = i116 + i117;

        $c66 = r2[$i65];

        $i67 = specialinvoke r0.<org.apache.regexp.RE: int compareChars(char,char,boolean)>($c64, $c66, z35);

        if $i67 == 0 goto label071;

        $i207 = (int) -1;

        return $i207;

     label071:
        i117 = i117 + 1;

     label072:
        $i208 = (int) c10;

        if i117 < $i208 goto label070;

        goto label117;

     label073:
        $r15 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $z9 = interfaceinvoke $r15.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>(i106);

        if $z9 == 0 goto label074;

        $i210 = (int) -1;

        return $i210;

     label074:
        $i211 = (int) c10;

        lookupswitch($i211)
        {
            case 33: goto label087;
            case 97: goto label076;
            case 98: goto label078;
            case 99: goto label080;
            case 100: goto label077;
            case 103: goto label081;
            case 106: goto label096;
            case 107: goto label097;
            case 108: goto label084;
            case 112: goto label086;
            case 115: goto label079;
            case 117: goto label085;
            case 119: goto label075;
            case 120: goto label090;
            default: goto label098;
        };

     label075:
        $r22 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c40 = interfaceinvoke $r22.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $z10 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c40);

        if $z10 != 0 goto label099;

        $i213 = (int) -1;

        return $i213;

     label076:
        $r33 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c56 = interfaceinvoke $r33.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $z16 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c56);

        if $z16 != 0 goto label099;

        $i215 = (int) -1;

        return $i215;

     label077:
        $r30 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c52 = interfaceinvoke $r30.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $z14 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c52);

        if $z14 != 0 goto label099;

        $i217 = (int) -1;

        return $i217;

     label078:
        $r32 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c55 = interfaceinvoke $r32.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $z15 = staticinvoke <java.lang.Character: boolean isSpaceChar(char)>($c55);

        if $z15 != 0 goto label099;

        $i219 = (int) -1;

        return $i219;

     label079:
        $r24 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c43 = interfaceinvoke $r24.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $z11 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c43);

        if $z11 != 0 goto label099;

        $i221 = (int) -1;

        return $i221;

     label080:
        $r31 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c53 = interfaceinvoke $r31.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $i54 = staticinvoke <java.lang.Character: int getType(char)>($c53);

        if $i54 == 15 goto label099;

        $i223 = (int) -1;

        return $i223;

     label081:
        $r29 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c50 = interfaceinvoke $r29.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $i51 = staticinvoke <java.lang.Character: int getType(char)>($c50);

        tableswitch($i51)
        {
            case 25: goto label082;
            case 26: goto label082;
            case 27: goto label082;
            case 28: goto label082;
            default: goto label083;
        };

     label082:
        goto label099;

     label083:
        $i225 = (int) -1;

        return $i225;

     label084:
        $r26 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c46 = interfaceinvoke $r26.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $i47 = staticinvoke <java.lang.Character: int getType(char)>($c46);

        if $i47 == 2 goto label099;

        $i227 = (int) -1;

        return $i227;

     label085:
        $r23 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c41 = interfaceinvoke $r23.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $i42 = staticinvoke <java.lang.Character: int getType(char)>($c41);

        if $i42 == 1 goto label099;

        $i229 = (int) -1;

        return $i229;

     label086:
        $r25 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c44 = interfaceinvoke $r25.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $i45 = staticinvoke <java.lang.Character: int getType(char)>($c44);

        if $i45 != 15 goto label099;

        $i231 = (int) -1;

        return $i231;

     label087:
        $r34 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c57 = interfaceinvoke $r34.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $i58 = staticinvoke <java.lang.Character: int getType(char)>($c57);

        tableswitch($i58)
        {
            case 20: goto label088;
            case 21: goto label088;
            case 22: goto label088;
            case 23: goto label088;
            case 24: goto label088;
            default: goto label089;
        };

     label088:
        goto label099;

     label089:
        $i233 = (int) -1;

        return $i233;

     label090:
        $r16 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c34 = interfaceinvoke $r16.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $i234 = (int) $c34;

        if $i234 < 48 goto label091;

        $r21 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c39 = interfaceinvoke $r21.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $i235 = (int) $c39;

        if $i235 <= 57 goto label093;

     label091:
        $r17 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c35 = interfaceinvoke $r17.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $i236 = (int) $c35;

        if $i236 < 97 goto label092;

        $r20 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c38 = interfaceinvoke $r20.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $i237 = (int) $c38;

        if $i237 <= 102 goto label093;

     label092:
        $r18 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c36 = interfaceinvoke $r18.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $i238 = (int) $c36;

        if $i238 < 65 goto label094;

        $r19 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c37 = interfaceinvoke $r19.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $i239 = (int) $c37;

        if $i239 > 70 goto label094;

     label093:
        $z36 = 1;

        goto label095;

     label094:
        $z36 = 0;

     label095:
        if $z36 != 0 goto label099;

        $i241 = (int) -1;

        return $i241;

     label096:
        $r28 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c49 = interfaceinvoke $r28.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $z13 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(char)>($c49);

        if $z13 != 0 goto label099;

        $i243 = (int) -1;

        return $i243;

     label097:
        $r27 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c48 = interfaceinvoke $r27.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $z12 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(char)>($c48);

        if $z12 != 0 goto label099;

        $i245 = (int) -1;

        return $i245;

     label098:
        virtualinvoke r0.<org.apache.regexp.RE: void internalError(java.lang.String)>("Bad posix class");

     label099:
        i106 = i106 + 1;

        goto label117;

     label100:
        $r13 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $z8 = interfaceinvoke $r13.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>(i106);

        if $z8 == 0 goto label101;

        $i247 = (int) -1;

        return $i247;

     label101:
        $r14 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c24 = interfaceinvoke $r14.<org.apache.regexp.CharacterIterator: char charAt(int)>(i106);

        $i25 = r0.<org.apache.regexp.RE: int matchFlags>;

        $i26 = $i25 & 1;

        if $i26 == 0 goto label102;

        $z37 = 1;

        goto label103;

     label102:
        $z37 = 0;

     label103:
        z38 = $z37;

        $i32 = i107 + 3;

        $i248 = (int) c10;

        $i27 = $i248 * 2;

        $i33 = $i32 + $i27;

        z39 = 0;

        i118 = $i32;

        goto label107;

     label104:
        i119 = i118 + 1;

        c28 = r2[i118];

        i118 = i119 + 1;

        c29 = r2[i119];

        $i30 = specialinvoke r0.<org.apache.regexp.RE: int compareChars(char,char,boolean)>($c24, c28, z38);

        if $i30 < 0 goto label105;

        $i31 = specialinvoke r0.<org.apache.regexp.RE: int compareChars(char,char,boolean)>($c24, c29, z38);

        if $i31 > 0 goto label105;

        $z40 = 1;

        goto label106;

     label105:
        $z40 = 0;

     label106:
        z39 = $z40;

     label107:
        if z39 != 0 goto label108;

        if i118 < $i33 goto label104;

     label108:
        if z39 != 0 goto label109;

        $i250 = (int) -1;

        return $i250;

     label109:
        i106 = i106 + 1;

        goto label117;

     label110:
        $i11 = i8 + 0;

        $c12 = r2[$i11];

        $i251 = (int) $c12;

        if $i251 == 124 goto label111;

        i107 = i107 + 3;

        goto label118;

     label111:
        $i13 = i107 + 3;

        $i14 = virtualinvoke r0.<org.apache.regexp.RE: int matchNodes(int,int,int)>($i13, 65536, i106);

        $i253 = (int) -1;

        if $i14 == $i253 goto label112;

        return $i14;

     label112:
        $i15 = i107 + 2;

        $c16 = r2[$i15];

        s120 = (short) $c16;

        $i254 = (int) s120;

        i107 = i107 + $i254;

        if s120 == 0 goto label113;

        $i17 = i107 + 0;

        $c18 = r2[$i17];

        $i255 = (int) $c18;

        if $i255 == 124 goto label111;

     label113:
        $i257 = (int) -1;

        return $i257;

     label114:
        goto label117;

     label115:
        virtualinvoke r0.<org.apache.regexp.RE: void setParenEnd(int,int)>(0, i106);

        return i106;

     label116:
        $r57 = new java.lang.StringBuffer;

        specialinvoke $r57.<java.lang.StringBuffer: void <init>()>();

        $r52 = virtualinvoke $r57.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid opcode \'");

        $i258 = (int) c4;

        $r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i258);

        $r54 = virtualinvoke $r53.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $r55 = virtualinvoke $r54.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.regexp.RE: void internalError(java.lang.String)>($r55);

     label117:
        i107 = i8;

     label118:
        if i107 < i2 goto label001;

        virtualinvoke r0.<org.apache.regexp.RE: void internalError(java.lang.String)>("Corrupt program");

        $i260 = (int) -1;

        return $i260;
    }

    protected boolean matchAt(int)
    {
        org.apache.regexp.RE r0;
        int[] $r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i9, $i11, $i13, $i15, $i17, $i19;
        org.apache.regexp.REProgram $r1;

        r0 := @this: org.apache.regexp.RE;

        i0 := @parameter0: int;

        $i7 = (int) -1;

        r0.<org.apache.regexp.RE: int start0> = $i7;

        $i9 = (int) -1;

        r0.<org.apache.regexp.RE: int end0> = $i9;

        $i11 = (int) -1;

        r0.<org.apache.regexp.RE: int start1> = $i11;

        $i13 = (int) -1;

        r0.<org.apache.regexp.RE: int end1> = $i13;

        $i15 = (int) -1;

        r0.<org.apache.regexp.RE: int start2> = $i15;

        $i17 = (int) -1;

        r0.<org.apache.regexp.RE: int end2> = $i17;

        r0.<org.apache.regexp.RE: int[] startn> = null;

        r0.<org.apache.regexp.RE: int[] endn> = null;

        r0.<org.apache.regexp.RE: int parenCount> = 1;

        virtualinvoke r0.<org.apache.regexp.RE: void setParenStart(int,int)>(0, i0);

        $r1 = r0.<org.apache.regexp.RE: org.apache.regexp.REProgram program>;

        $i1 = $r1.<org.apache.regexp.REProgram: int flags>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        $i4 = r0.<org.apache.regexp.RE: int maxParen>;

        $r2 = newarray (int)[$i4];

        r0.<org.apache.regexp.RE: int[] startBackref> = $r2;

        $i5 = r0.<org.apache.regexp.RE: int maxParen>;

        $r3 = newarray (int)[$i5];

        r0.<org.apache.regexp.RE: int[] endBackref> = $r3;

     label1:
        $i3 = virtualinvoke r0.<org.apache.regexp.RE: int matchNodes(int,int,int)>(0, 65536, i0);

        $i19 = (int) -1;

        if $i3 == $i19 goto label2;

        virtualinvoke r0.<org.apache.regexp.RE: void setParenEnd(int,int)>(0, $i3);

        return 1;

     label2:
        r0.<org.apache.regexp.RE: int parenCount> = 0;

        return 0;
    }

    public boolean match(java.lang.String, int)
    {
        int i0;
        java.lang.String r2;
        org.apache.regexp.StringCharacterIterator $r1;
        org.apache.regexp.RE r0;
        boolean $z0;

        r0 := @this: org.apache.regexp.RE;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = new org.apache.regexp.StringCharacterIterator;

        specialinvoke $r1.<org.apache.regexp.StringCharacterIterator: void <init>(java.lang.String)>(r2);

        $z0 = virtualinvoke r0.<org.apache.regexp.RE: boolean match(org.apache.regexp.CharacterIterator,int)>($r1, i0);

        return $z0;
    }

    public boolean match(org.apache.regexp.CharacterIterator, int)
    {
        org.apache.regexp.RE r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        org.apache.regexp.CharacterIterator r2;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, $i17, $i18, $i19;
        org.apache.regexp.REProgram $r1, $r3, $r4, $r6;
        char $c5, $c7;
        char[] $r5, $r7;

        r0 := @this: org.apache.regexp.RE;

        r2 := @parameter0: org.apache.regexp.CharacterIterator;

        i14 := @parameter1: int;

        $r1 = r0.<org.apache.regexp.RE: org.apache.regexp.REProgram program>;

        if $r1 != null goto label01;

        virtualinvoke r0.<org.apache.regexp.RE: void internalError(java.lang.String)>("No RE program to run!");

     label01:
        r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search> = r2;

        $r3 = r0.<org.apache.regexp.RE: org.apache.regexp.REProgram program>;

        $i0 = $r3.<org.apache.regexp.REProgram: int flags>;

        $i1 = $i0 & 2;

        if $i1 != 2 goto label11;

        $i12 = r0.<org.apache.regexp.RE: int matchFlags>;

        $i13 = $i12 & 2;

        if $i13 != 0 goto label10;

        if i14 != 0 goto label02;

        $z8 = virtualinvoke r0.<org.apache.regexp.RE: boolean matchAt(int)>(i14);

        if $z8 == 0 goto label02;

        $z9 = 1;

        goto label03;

     label02:
        $z9 = 0;

     label03:
        return $z9;

     label04:
        $z4 = specialinvoke r0.<org.apache.regexp.RE: boolean isNewline(int)>(i14);

        if $z4 == 0 goto label05;

        goto label09;

     label05:
        $z5 = virtualinvoke r0.<org.apache.regexp.RE: boolean matchAt(int)>(i14);

        if $z5 == 0 goto label08;

        return 1;

     label06:
        $z7 = specialinvoke r0.<org.apache.regexp.RE: boolean isNewline(int)>(i14);

        if $z7 == 0 goto label07;

        goto label09;

     label07:
        i14 = i14 + 1;

     label08:
        $z6 = interfaceinvoke r2.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>(i14);

        if $z6 == 0 goto label06;

     label09:
        i14 = i14 + 1;

     label10:
        $z10 = interfaceinvoke r2.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>(i14);

        if $z10 == 0 goto label04;

        return 0;

     label11:
        $r4 = r0.<org.apache.regexp.RE: org.apache.regexp.REProgram program>;

        $r5 = $r4.<org.apache.regexp.REProgram: char[] prefix>;

        if $r5 != null goto label15;

        goto label14;

     label12:
        $z3 = virtualinvoke r0.<org.apache.regexp.RE: boolean matchAt(int)>(i14);

        if $z3 == 0 goto label13;

        return 1;

     label13:
        i14 = i14 + 1;

     label14:
        $i11 = i14 - 1;

        $z2 = interfaceinvoke r2.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>($i11);

        if $z2 == 0 goto label12;

        return 0;

     label15:
        $i2 = r0.<org.apache.regexp.RE: int matchFlags>;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label16;

        $z11 = 1;

        goto label17;

     label16:
        $z11 = 0;

     label17:
        z0 = $z11;

        $r6 = r0.<org.apache.regexp.RE: org.apache.regexp.REProgram program>;

        $r7 = $r6.<org.apache.regexp.REProgram: char[] prefix>;

        goto label24;

     label18:
        i15 = i14;

        i16 = 0;

     label19:
        $i4 = i15;

        i15 = i15 + 1;

        $c5 = interfaceinvoke r2.<org.apache.regexp.CharacterIterator: char charAt(int)>($i4);

        $i6 = i16;

        i16 = i16 + 1;

        $c7 = $r7[$i6];

        $i8 = specialinvoke r0.<org.apache.regexp.RE: int compareChars(char,char,boolean)>($c5, $c7, z0);

        if $i8 != 0 goto label20;

        $z12 = 1;

        goto label21;

     label20:
        $z12 = 0;

     label21:
        if $z12 == 0 goto label22;

        $i10 = lengthof $r7;

        if i16 < $i10 goto label19;

     label22:
        $i9 = lengthof $r7;

        if i16 != $i9 goto label23;

        $z1 = virtualinvoke r0.<org.apache.regexp.RE: boolean matchAt(int)>(i14);

        if $z1 == 0 goto label23;

        return 1;

     label23:
        i14 = i14 + 1;

     label24:
        $i17 = lengthof $r7;

        $i18 = i14 + $i17;

        $i19 = $i18 - 1;

        $z13 = interfaceinvoke r2.<org.apache.regexp.CharacterIterator: boolean isEnd(int)>($i19);

        if $z13 == 0 goto label18;

        return 0;
    }

    public boolean match(java.lang.String)
    {
        java.lang.String r1;
        org.apache.regexp.RE r0;
        boolean $z0;

        r0 := @this: org.apache.regexp.RE;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.regexp.RE: boolean match(java.lang.String,int)>(r1, 0);

        return $z0;
    }

    public java.lang.String[] split(java.lang.String)
    {
        java.lang.String[] $r3;
        org.apache.regexp.RE r4;
        java.util.Vector $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.lang.String r1, $r2, $r5, $r6;
        boolean $z0;

        r4 := @this: org.apache.regexp.RE;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        i6 = 0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        goto label4;

     label1:
        $i3 = virtualinvoke r4.<org.apache.regexp.RE: int getParenStart(int)>(0);

        $i4 = virtualinvoke r4.<org.apache.regexp.RE: int getParenEnd(int)>(0);

        i7 = $i4;

        if $i4 != i6 goto label2;

        $i5 = $i3 + 1;

        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i6, $i5);

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r6);

        i7 = $i4 + 1;

        goto label3;

     label2:
        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i6, $i3);

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r5);

     label3:
        i6 = i7;

     label4:
        if i6 >= $i0 goto label5;

        $z0 = virtualinvoke r4.<org.apache.regexp.RE: boolean match(java.lang.String,int)>(r1, i6);

        if $z0 != 0 goto label1;

     label5:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i6);

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 == 0 goto label6;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r2);

     label6:
        $i2 = virtualinvoke $r0.<java.util.Vector: int size()>();

        $r3 = newarray (java.lang.String)[$i2];

        virtualinvoke $r0.<java.util.Vector: void copyInto(java.lang.Object[])>($r3);

        return $r3;
    }

    public java.lang.String subst(java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2, $r3;
        org.apache.regexp.RE r0;

        r0 := @this: org.apache.regexp.RE;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = virtualinvoke r0.<org.apache.regexp.RE: java.lang.String subst(java.lang.String,java.lang.String,int)>(r1, r2, 0);

        return $r3;
    }

    public java.lang.String subst(java.lang.String, java.lang.String, int)
    {
        org.apache.regexp.RE r4;
        boolean $z0, z1;
        java.lang.StringBuffer $r11;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11, $i12, $i14, i15, i16, i17, $i18, i19, $i21, $i22, $i23, $i24, $i25;
        java.lang.String r1, $r2, $r3, $r5, r6, $r7, $r8, $r9, $r10;
        char $c9, $c13;

        r4 := @this: org.apache.regexp.RE;

        r1 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        i2 := @parameter2: int;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        i15 = 0;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        goto label11;

     label01:
        $i1 = virtualinvoke r4.<org.apache.regexp.RE: int getParenStart(int)>(0);

        $r5 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i15, $i1);

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $i3 = i2 & 2;

        if $i3 == 0 goto label08;

        i16 = 0;

        $i21 = (int) -2;

        i17 = $i21;

        $i6 = virtualinvoke r6.<java.lang.String: int length()>();

        z1 = 0;

        goto label07;

     label02:
        if $i18 == 0 goto label03;

        $i12 = $i18 - 1;

        $c13 = virtualinvoke r6.<java.lang.String: char charAt(int)>($i12);

        $i22 = (int) $c13;

        if $i22 == 92 goto label06;

     label03:
        $i7 = $i18 + 1;

        if $i7 >= $i6 goto label06;

        $i8 = $i18 + 1;

        $c9 = virtualinvoke r6.<java.lang.String: char charAt(int)>($i8);

        $i23 = (int) $c9;

        if $i23 < 48 goto label06;

        $i24 = (int) $c9;

        if $i24 > 57 goto label06;

        if z1 != 0 goto label04;

        $r9 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i18);

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        z1 = 1;

        goto label05;

     label04:
        $i10 = i17 + 2;

        $r7 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i10, $i18);

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

     label05:
        $i25 = (int) $c9;

        $i11 = $i25 - 48;

        $r8 = virtualinvoke r4.<org.apache.regexp.RE: java.lang.String getParen(int)>($i11);

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        i17 = $i18;

     label06:
        i16 = $i18 + 1;

     label07:
        $i18 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String,int)>("$", i16);

        if $i18 >= 0 goto label02;

        $i14 = i17 + 2;

        $r10 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i14, $i6);

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        goto label09;

     label08:
        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

     label09:
        $i4 = virtualinvoke r4.<org.apache.regexp.RE: int getParenEnd(int)>(0);

        i19 = $i4;

        if $i4 != i15 goto label10;

        i19 = $i4 + 1;

     label10:
        i15 = i19;

        $i5 = i2 & 1;

        if $i5 == 0 goto label11;

        goto label12;

     label11:
        if i15 >= $i0 goto label12;

        $z0 = virtualinvoke r4.<org.apache.regexp.RE: boolean match(java.lang.String,int)>(r1, i15);

        if $z0 != 0 goto label01;

     label12:
        if i15 >= $i0 goto label13;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i15);

        virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label13:
        $r2 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String[] grep(java.lang.Object[])
    {
        java.lang.Object[] r1;
        java.lang.String[] r5;
        org.apache.regexp.RE r4;
        java.util.Vector $r0;
        int $i0, i1, $i2;
        java.lang.Object $r2;
        java.lang.String $r3;
        boolean $z0;

        r4 := @this: org.apache.regexp.RE;

        r1 := @parameter0: java.lang.Object[];

        $r0 = new java.util.Vector;

        specialinvoke $r0.<java.util.Vector: void <init>()>();

        i1 = 0;

        goto label3;

     label1:
        $r2 = r1[i1];

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $z0 = virtualinvoke r4.<org.apache.regexp.RE: boolean match(java.lang.String)>($r3);

        if $z0 == 0 goto label2;

        virtualinvoke $r0.<java.util.Vector: void addElement(java.lang.Object)>($r3);

     label2:
        i1 = i1 + 1;

     label3:
        $i2 = lengthof r1;

        if i1 < $i2 goto label1;

        $i0 = virtualinvoke $r0.<java.util.Vector: int size()>();

        r5 = newarray (java.lang.String)[$i0];

        virtualinvoke $r0.<java.util.Vector: void copyInto(java.lang.Object[])>(r5);

        return r5;
    }

    private boolean isNewline(int)
    {
        char $c1;
        org.apache.regexp.RE r0;
        int i0, $i2, $i3, $i4, $i5, $i6;
        org.apache.regexp.CharacterIterator $r1;

        r0 := @this: org.apache.regexp.RE;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.regexp.RE: org.apache.regexp.CharacterIterator search>;

        $c1 = interfaceinvoke $r1.<org.apache.regexp.CharacterIterator: char charAt(int)>(i0);

        $i2 = (int) $c1;

        if $i2 == 10 goto label1;

        $i3 = (int) $c1;

        if $i3 == 13 goto label1;

        $i4 = (int) $c1;

        if $i4 == 133 goto label1;

        $i5 = (int) $c1;

        if $i5 == 8232 goto label1;

        $i6 = (int) $c1;

        if $i6 != 8233 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private int compareChars(char, char, boolean)
    {
        int $i0, $i3, $i4;
        char c1, c2;
        boolean z0;
        org.apache.regexp.RE r0;

        r0 := @this: org.apache.regexp.RE;

        c1 := @parameter0: char;

        c2 := @parameter1: char;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c1);

        c2 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c2);

     label1:
        $i3 = (int) c1;

        $i4 = (int) c2;

        $i0 = $i3 - $i4;

        return $i0;
    }

    public static void <clinit>()
    {
        <org.apache.regexp.RE: int REPLACE_BACKREFERENCES> = 2;

        <org.apache.regexp.RE: int REPLACE_FIRSTONLY> = 1;

        <org.apache.regexp.RE: int REPLACE_ALL> = 0;

        <org.apache.regexp.RE: int nodeSize> = 3;

        <org.apache.regexp.RE: int offsetNext> = 2;

        <org.apache.regexp.RE: int offsetOpdata> = 1;

        <org.apache.regexp.RE: int offsetOpcode> = 0;

        <org.apache.regexp.RE: int MAX_PAREN> = 16;

        <org.apache.regexp.RE: int maxNode> = 65536;

        <org.apache.regexp.RE: char POSIX_CLASS_JPART> = 107;

        <org.apache.regexp.RE: char POSIX_CLASS_JSTART> = 106;

        <org.apache.regexp.RE: char POSIX_CLASS_XDIGIT> = 120;

        <org.apache.regexp.RE: char POSIX_CLASS_UPPER> = 117;

        <org.apache.regexp.RE: char POSIX_CLASS_SPACE> = 115;

        <org.apache.regexp.RE: char POSIX_CLASS_PUNCT> = 33;

        <org.apache.regexp.RE: char POSIX_CLASS_PRINT> = 112;

        <org.apache.regexp.RE: char POSIX_CLASS_LOWER> = 108;

        <org.apache.regexp.RE: char POSIX_CLASS_GRAPH> = 103;

        <org.apache.regexp.RE: char POSIX_CLASS_DIGIT> = 100;

        <org.apache.regexp.RE: char POSIX_CLASS_CNTRL> = 99;

        <org.apache.regexp.RE: char POSIX_CLASS_BLANK> = 98;

        <org.apache.regexp.RE: char POSIX_CLASS_ALPHA> = 97;

        <org.apache.regexp.RE: char POSIX_CLASS_ALNUM> = 119;

        <org.apache.regexp.RE: char E_NDIGIT> = 68;

        <org.apache.regexp.RE: char E_DIGIT> = 100;

        <org.apache.regexp.RE: char E_NSPACE> = 83;

        <org.apache.regexp.RE: char E_SPACE> = 115;

        <org.apache.regexp.RE: char E_NBOUND> = 66;

        <org.apache.regexp.RE: char E_BOUND> = 98;

        <org.apache.regexp.RE: char E_NALNUM> = 87;

        <org.apache.regexp.RE: char E_ALNUM> = 119;

        <org.apache.regexp.RE: char OP_POSIXCLASS> = 80;

        <org.apache.regexp.RE: char OP_RELUCTANTMAYBE> = 47;

        <org.apache.regexp.RE: char OP_RELUCTANTPLUS> = 61;

        <org.apache.regexp.RE: char OP_RELUCTANTSTAR> = 56;

        <org.apache.regexp.RE: char OP_NOTHING> = 78;

        <org.apache.regexp.RE: char OP_GOTO> = 71;

        <org.apache.regexp.RE: char OP_BACKREF> = 35;

        <org.apache.regexp.RE: char OP_CLOSE_CLUSTER> = 62;

        <org.apache.regexp.RE: char OP_CLOSE> = 41;

        <org.apache.regexp.RE: char OP_OPEN_CLUSTER> = 60;

        <org.apache.regexp.RE: char OP_OPEN> = 40;

        <org.apache.regexp.RE: char OP_ESCAPE> = 92;

        <org.apache.regexp.RE: char OP_MAYBE> = 63;

        <org.apache.regexp.RE: char OP_PLUS> = 43;

        <org.apache.regexp.RE: char OP_STAR> = 42;

        <org.apache.regexp.RE: char OP_ATOM> = 65;

        <org.apache.regexp.RE: char OP_BRANCH> = 124;

        <org.apache.regexp.RE: char OP_ANYOF> = 91;

        <org.apache.regexp.RE: char OP_ANY> = 46;

        <org.apache.regexp.RE: char OP_EOL> = 36;

        <org.apache.regexp.RE: char OP_BOL> = 94;

        <org.apache.regexp.RE: char OP_END> = 69;

        <org.apache.regexp.RE: int MATCH_SINGLELINE> = 4;

        <org.apache.regexp.RE: int MATCH_MULTILINE> = 2;

        <org.apache.regexp.RE: int MATCH_CASEINDEPENDENT> = 1;

        <org.apache.regexp.RE: int MATCH_NORMAL> = 0;

        return;
    }
}
