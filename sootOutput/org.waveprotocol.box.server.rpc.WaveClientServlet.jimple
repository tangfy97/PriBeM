public class org.waveprotocol.box.server.rpc.WaveClientServlet extends javax.servlet.http.HttpServlet
{
    private static final org.waveprotocol.wave.util.logging.Log LOG;
    private static final java.util.HashMap FLAG_MAP;
    private final java.lang.String domain;
    private final java.lang.Boolean useSocketIO;
    private final java.lang.String analyticsAccount;
    private final org.waveprotocol.box.server.authentication.SessionManager sessionManager;

    public void <init>(java.lang.String, java.lang.Boolean, java.lang.String, org.waveprotocol.box.server.authentication.SessionManager)
    {
        org.waveprotocol.box.server.authentication.SessionManager r4;
        java.lang.Boolean r2;
        java.lang.String r1, r3;
        org.waveprotocol.box.server.rpc.WaveClientServlet r0;

        r0 := @this: org.waveprotocol.box.server.rpc.WaveClientServlet;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Boolean;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.waveprotocol.box.server.authentication.SessionManager;

        specialinvoke r0.<javax.servlet.http.HttpServlet: void <init>()>();

        r0.<org.waveprotocol.box.server.rpc.WaveClientServlet: java.lang.String domain> = r1;

        r0.<org.waveprotocol.box.server.rpc.WaveClientServlet: java.lang.Boolean useSocketIO> = r2;

        r0.<org.waveprotocol.box.server.rpc.WaveClientServlet: java.lang.String analyticsAccount> = r3;

        r0.<org.waveprotocol.box.server.rpc.WaveClientServlet: org.waveprotocol.box.server.authentication.SessionManager sessionManager> = r4;

        return;
    }

    protected void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        java.lang.String[] $r16;
        org.waveprotocol.wave.model.wave.ParticipantId $r4;
        com.google.gxp.html.HtmlClosure $r12;
        org.waveprotocol.box.server.authentication.SessionManager $r2, $r17;
        javax.servlet.http.HttpServletRequest r1;
        org.json.JSONObject $r10, $r11;
        java.util.Locale $r8;
        java.lang.Boolean $r13;
        org.waveprotocol.wave.util.logging.Log $r21;
        java.lang.String $r14, $r15, $r18, $r24, r25, r26;
        org.waveprotocol.box.server.rpc.WaveClientServlet r0;
        boolean $z0;
        javax.servlet.http.HttpSession $r3, $r9;
        java.io.PrintWriter $r6;
        javax.servlet.http.HttpServletResponse r5;
        java.io.IOException $r19;
        com.google.gxp.base.GxpContext $r7;
        java.lang.StringBuilder $r20, $r22, $r23;

        r0 := @this: org.waveprotocol.box.server.rpc.WaveClientServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r5 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r2 = r0.<org.waveprotocol.box.server.rpc.WaveClientServlet: org.waveprotocol.box.server.authentication.SessionManager sessionManager>;

        $r3 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)>(0);

        $r4 = interfaceinvoke $r2.<org.waveprotocol.box.server.authentication.SessionManager: org.waveprotocol.wave.model.wave.ParticipantId getLoggedInUser(javax.servlet.http.HttpSession)>($r3);

        if $r4 != null goto label1;

        $r17 = r0.<org.waveprotocol.box.server.rpc.WaveClientServlet: org.waveprotocol.box.server.authentication.SessionManager sessionManager>;

        $r18 = interfaceinvoke $r17.<org.waveprotocol.box.server.authentication.SessionManager: java.lang.String getLoginUrl(java.lang.String)>("/");

        interfaceinvoke r5.<javax.servlet.http.HttpServletResponse: void sendRedirect(java.lang.String)>($r18);

        return;

     label1:
        r25 = null;

        r26 = null;

        if $r4 == null goto label2;

        $r15 = virtualinvoke $r4.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String[] split(java.lang.String)>("@");

        r25 = $r16[0];

        r26 = virtualinvoke $r4.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getDomain()>();

     label2:
        $r6 = interfaceinvoke r5.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>();

        $r7 = new com.google.gxp.base.GxpContext;

        $r8 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.util.Locale getLocale()>();

        specialinvoke $r7.<com.google.gxp.base.GxpContext: void <init>(java.util.Locale)>($r8);

        $r9 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: javax.servlet.http.HttpSession getSession(boolean)>(0);

        $r10 = specialinvoke r0.<org.waveprotocol.box.server.rpc.WaveClientServlet: org.json.JSONObject getSessionJson(javax.servlet.http.HttpSession)>($r9);

        $r11 = specialinvoke r0.<org.waveprotocol.box.server.rpc.WaveClientServlet: org.json.JSONObject getClientFlags(javax.servlet.http.HttpServletRequest)>(r1);

        $r12 = staticinvoke <org.waveprotocol.box.server.gxp.TopBar: com.google.gxp.html.HtmlClosure getGxpClosure(java.lang.String,java.lang.String)>(r25, r26);

        $r13 = r0.<org.waveprotocol.box.server.rpc.WaveClientServlet: java.lang.Boolean useSocketIO>;

        $z0 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>();

        $r14 = r0.<org.waveprotocol.box.server.rpc.WaveClientServlet: java.lang.String analyticsAccount>;

        staticinvoke <org.waveprotocol.box.server.gxp.WaveClientPage: void write(java.lang.Appendable,com.google.gxp.base.GxpContext,org.json.JSONObject,org.json.JSONObject,com.google.gxp.html.HtmlClosure,boolean,java.lang.String)>($r6, $r7, $r10, $r11, $r12, $z0, $r14);

     label3:
        goto label5;

     label4:
        $r19 := @caughtexception;

        $r21 = <org.waveprotocol.box.server.rpc.WaveClientServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write GXP for request ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r21.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String,java.lang.Throwable)>($r24, $r19);

        interfaceinvoke r5.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(500);

        return;

     label5:
        interfaceinvoke r5.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>("text/html");

        interfaceinvoke r5.<javax.servlet.http.HttpServletResponse: void setStatus(int)>(200);

        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    private org.json.JSONObject getClientFlags(javax.servlet.http.HttpServletRequest)
    {
        java.util.Enumeration $r2;
        java.lang.NoSuchMethodException $r37;
        org.json.JSONException $r33;
        org.json.JSONObject $r0, $r35;
        org.waveprotocol.wave.util.logging.Log $r12, $r34, $r39;
        java.lang.SecurityException $r44;
        java.lang.reflect.Method $r9;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        float $f0;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r16, $r38, $r40, $r41, $r42;
        java.util.HashMap $r6, $r18, $r21, $r24, $r27, $r30;
        javax.servlet.http.HttpServletRequest r1;
        int $i0;
        java.lang.String r4, $r5, $r17, $r20, $r23, $r26, $r29, $r32, $r43;
        org.waveprotocol.box.server.rpc.WaveClientServlet r45;
        double $d0, $d1;
        java.lang.Class[] $r7;
        java.lang.NumberFormatException $r36;
        java.lang.Object $r3, $r19, $r22, $r25, $r28, $r31;
        java.lang.Class $r8, $r10;

        r45 := @this: org.waveprotocol.box.server.rpc.WaveClientServlet;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

     label01:
        $r0 = new org.json.JSONObject;

        specialinvoke $r0.<org.json.JSONObject: void <init>()>();

        $r2 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.util.Enumeration getParameterNames()>();

     label02:
        $z0 = interfaceinvoke $r2.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label14;

        $r3 = interfaceinvoke $r2.<java.util.Enumeration: java.lang.Object nextElement()>();

        r4 = (java.lang.String) $r3;

        $r5 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: java.lang.String getParameter(java.lang.String)>(r4);

        $r6 = <org.waveprotocol.box.server.rpc.WaveClientServlet: java.util.HashMap FLAG_MAP>;

        $z1 = virtualinvoke $r6.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label13;

     label03:
        $r8 = class "Lorg/waveprotocol/wave/client/util/ClientFlagsBase;";

        $r7 = newarray (java.lang.Class)[0];

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r4, $r7);

        $r10 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z2 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/String;");

        if $z2 == 0 goto label04;

        $r30 = <org.waveprotocol.box.server.rpc.WaveClientServlet: java.util.HashMap FLAG_MAP>;

        $r31 = virtualinvoke $r30.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        $r32 = (java.lang.String) $r31;

        virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>($r32, $r5);

        goto label09;

     label04:
        $z3 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Integer;");

        if $z3 == 0 goto label05;

        $r27 = <org.waveprotocol.box.server.rpc.WaveClientServlet: java.util.HashMap FLAG_MAP>;

        $r28 = virtualinvoke $r27.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        $r29 = (java.lang.String) $r28;

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5);

        virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)>($r29, $i0);

        goto label09;

     label05:
        $z4 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Boolean;");

        if $z4 == 0 goto label06;

        $r24 = <org.waveprotocol.box.server.rpc.WaveClientServlet: java.util.HashMap FLAG_MAP>;

        $r25 = virtualinvoke $r24.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        $r26 = (java.lang.String) $r25;

        $z7 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r5);

        virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)>($r26, $z7);

        goto label09;

     label06:
        $z5 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Float;");

        if $z5 == 0 goto label07;

        $r21 = <org.waveprotocol.box.server.rpc.WaveClientServlet: java.util.HashMap FLAG_MAP>;

        $r22 = virtualinvoke $r21.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        $r23 = (java.lang.String) $r22;

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r5);

        $d1 = (double) $f0;

        virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>($r23, $d1);

        goto label09;

     label07:
        $z6 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(class "Ljava/lang/Double;");

        if $z6 == 0 goto label08;

        $r18 = <org.waveprotocol.box.server.rpc.WaveClientServlet: java.util.HashMap FLAG_MAP>;

        $r19 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r4);

        $r20 = (java.lang.String) $r19;

        $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>($r5);

        virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)>($r20, $d0);

        goto label09;

     label08:
        $r12 = <org.waveprotocol.box.server.rpc.WaveClientServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring flag [");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] with unknown return type: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r17);

     label09:
        goto label13;

     label10:
        $r44 := @caughtexception;

        goto label13;

     label11:
        $r37 := @caughtexception;

        $r39 = <org.waveprotocol.box.server.rpc.WaveClientServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find the flag [");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] in ClientFlagsBase.");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r39.<org.waveprotocol.wave.util.logging.Log: void warning(java.lang.String)>($r43);

        goto label13;

     label12:
        $r36 := @caughtexception;

     label13:
        goto label02;

     label14:
        return $r0;

     label15:
        $r33 := @caughtexception;

        $r34 = <org.waveprotocol.box.server.rpc.WaveClientServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r34.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String)>("Failed to create flags JSON");

        $r35 = new org.json.JSONObject;

        specialinvoke $r35.<org.json.JSONObject: void <init>()>();

        return $r35;

        catch java.lang.SecurityException from label03 to label09 with label10;
        catch java.lang.NoSuchMethodException from label03 to label09 with label11;
        catch java.lang.NumberFormatException from label03 to label09 with label12;
        catch org.json.JSONException from label01 to label14 with label15;
    }

    private org.json.JSONObject getSessionJson(javax.servlet.http.HttpSession)
    {
        javax.servlet.http.HttpSession r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;
        org.waveprotocol.box.server.authentication.SessionManager $r2;
        org.json.JSONException $r11;
        org.json.JSONObject $r6, $r8, $r9, $r10, $r13;
        org.waveprotocol.box.server.util.RandomBase64Generator $r4;
        org.waveprotocol.wave.util.logging.Log $r12;
        java.lang.String $r5, $r7, $r14;
        org.waveprotocol.box.server.rpc.WaveClientServlet r0;

        r0 := @this: org.waveprotocol.box.server.rpc.WaveClientServlet;

        r1 := @parameter0: javax.servlet.http.HttpSession;

     label1:
        $r2 = r0.<org.waveprotocol.box.server.rpc.WaveClientServlet: org.waveprotocol.box.server.authentication.SessionManager sessionManager>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.box.server.authentication.SessionManager: org.waveprotocol.wave.model.wave.ParticipantId getLoggedInUser(javax.servlet.http.HttpSession)>(r1);

        if $r3 == null goto label2;

        $r14 = virtualinvoke $r3.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        goto label3;

     label2:
        $r14 = null;

     label3:
        $r4 = new org.waveprotocol.box.server.util.RandomBase64Generator;

        specialinvoke $r4.<org.waveprotocol.box.server.util.RandomBase64Generator: void <init>()>();

        $r5 = virtualinvoke $r4.<org.waveprotocol.box.server.util.RandomBase64Generator: java.lang.String next(int)>(10);

        $r6 = new org.json.JSONObject;

        specialinvoke $r6.<org.json.JSONObject: void <init>()>();

        $r7 = r0.<org.waveprotocol.box.server.rpc.WaveClientServlet: java.lang.String domain>;

        $r8 = virtualinvoke $r6.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("domain", $r7);

        $r9 = virtualinvoke $r8.<org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)>("address", $r14);

        $r10 = virtualinvoke $r9.<org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)>("id", $r5);

     label4:
        return $r10;

     label5:
        $r11 := @caughtexception;

        $r12 = <org.waveprotocol.box.server.rpc.WaveClientServlet: org.waveprotocol.wave.util.logging.Log LOG>;

        virtualinvoke $r12.<org.waveprotocol.wave.util.logging.Log: void severe(java.lang.String)>("Failed to create session JSON");

        $r13 = new org.json.JSONObject;

        specialinvoke $r13.<org.json.JSONObject: void <init>()>();

        return $r13;

        catch org.json.JSONException from label1 to label4 with label5;
    }

    static void <clinit>()
    {
        java.util.HashMap $r1, $r7;
        java.lang.String[] $r2, $r3, $r4;
        int $i0, $i1, i2;
        org.waveprotocol.wave.util.logging.Log $r0;
        java.lang.String $r5, $r6;

        $r0 = staticinvoke <org.waveprotocol.wave.util.logging.Log: org.waveprotocol.wave.util.logging.Log get(java.lang.Class)>(class "Lorg/waveprotocol/box/server/rpc/WaveClientServlet;");

        <org.waveprotocol.box.server.rpc.WaveClientServlet: org.waveprotocol.wave.util.logging.Log LOG> = $r0;

        $r1 = staticinvoke <com.google.common.collect.Maps: java.util.HashMap newHashMap()>();

        <org.waveprotocol.box.server.rpc.WaveClientServlet: java.util.HashMap FLAG_MAP> = $r1;

        i2 = 0;

     label1:
        $r2 = <org.waveprotocol.wave.common.bootstrap.FlagConstants: java.lang.String[] __NAME_MAPPING__>;

        $i0 = lengthof $r2;

        if i2 >= $i0 goto label2;

        $r7 = <org.waveprotocol.box.server.rpc.WaveClientServlet: java.util.HashMap FLAG_MAP>;

        $r3 = <org.waveprotocol.wave.common.bootstrap.FlagConstants: java.lang.String[] __NAME_MAPPING__>;

        $r6 = $r3[i2];

        $r4 = <org.waveprotocol.wave.common.bootstrap.FlagConstants: java.lang.String[] __NAME_MAPPING__>;

        $i1 = i2 + 1;

        $r5 = $r4[$i1];

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

        i2 = i2 + 2;

        goto label1;

     label2:
        return;
    }
}
