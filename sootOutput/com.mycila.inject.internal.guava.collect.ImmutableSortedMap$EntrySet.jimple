class com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet extends com.mycila.inject.internal.guava.collect.ImmutableSet
{
    final transient com.mycila.inject.internal.guava.collect.ImmutableSortedMap map;

    void <init>(com.mycila.inject.internal.guava.collect.ImmutableSortedMap)
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedMap r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ImmutableSortedMap;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSet: void <init>()>();

        r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet: com.mycila.inject.internal.guava.collect.ImmutableSortedMap map> = r1;

        return;
    }

    boolean isPartialView()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedMap $r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet: com.mycila.inject.internal.guava.collect.ImmutableSortedMap map>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableSortedMap: boolean isPartialView()>();

        return $z0;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMap $r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet: com.mycila.inject.internal.guava.collect.ImmutableSortedMap map>;

        $i0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableSortedMap: int size()>();

        return $i0;
    }

    public com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedMap $r1;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r3;
        com.mycila.inject.internal.guava.collect.ImmutableList $r2;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet: com.mycila.inject.internal.guava.collect.ImmutableSortedMap map>;

        $r2 = $r1.<com.mycila.inject.internal.guava.collect.ImmutableSortedMap: com.mycila.inject.internal.guava.collect.ImmutableList entries>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()>();

        return $r3;
    }

    public boolean contains(java.lang.Object)
    {
        java.util.Map$Entry r1;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMap $r3;
        java.lang.Object r0, $r4, $r5, $r6;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet r2;
        boolean $z0, $z1, $z2;

        r2 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.util.Map$Entry;

        if $z0 == 0 goto label3;

        r1 = (java.util.Map$Entry) r0;

        $r3 = r2.<com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet: com.mycila.inject.internal.guava.collect.ImmutableSortedMap map>;

        $r4 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r5 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.ImmutableSortedMap: java.lang.Object get(java.lang.Object)>($r4);

        if $r5 == null goto label1;

        $r6 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z1 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        return 0;
    }

    java.lang.Object writeReplace()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySetSerializedForm $r0;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMap $r2;
        com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySetSerializedForm;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet: com.mycila.inject.internal.guava.collect.ImmutableSortedMap map>;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySetSerializedForm: void <init>(com.mycila.inject.internal.guava.collect.ImmutableSortedMap)>($r2);

        return $r0;
    }

    public volatile java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet r0;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSortedMap$EntrySet: com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }
}
