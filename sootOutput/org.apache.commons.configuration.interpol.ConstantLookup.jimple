public class org.apache.commons.configuration.interpol.ConstantLookup extends org.apache.commons.lang.text.StrLookup
{
    private static final char FIELD_SEPRATOR;
    private static java.util.Map constantCache;
    private org.apache.commons.logging.Log log;

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.apache.commons.configuration.interpol.ConstantLookup r0;

        r0 := @this: org.apache.commons.configuration.interpol.ConstantLookup;

        specialinvoke r0.<org.apache.commons.lang.text.StrLookup: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.apache.commons.configuration.interpol.ConstantLookup: org.apache.commons.logging.Log log> = $r2;

        return;
    }

    public java.lang.String lookup(java.lang.String)
    {
        java.lang.Throwable $r17, $r18;
        org.apache.commons.configuration.interpol.ConstantLookup r4;
        java.lang.StringBuffer $r12, $r14, $r15;
        java.util.Map $r1, $r2, $r8, $r9;
        int $i0, $i1;
        java.lang.String r0, $r5, $r6, $r10, $r16, r19;
        java.lang.Exception $r11;
        java.lang.Object $r3, $r7;
        org.apache.commons.logging.Log $r13;

        r4 := @this: org.apache.commons.configuration.interpol.ConstantLookup;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label01;

        return null;

     label01:
        $r1 = <org.apache.commons.configuration.interpol.ConstantLookup: java.util.Map constantCache>;

        entermonitor $r1;

     label02:
        $r2 = <org.apache.commons.configuration.interpol.ConstantLookup: java.util.Map constantCache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r19 = (java.lang.String) $r3;

        exitmonitor $r1;

     label03:
        goto label06;

     label04:
        $r18 := @caughtexception;

        exitmonitor $r1;

     label05:
        throw $r18;

     label06:
        if r19 == null goto label07;

        return r19;

     label07:
        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 >= 0 goto label08;

        return null;

     label08:
        $r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        $r7 = virtualinvoke r4.<org.apache.commons.configuration.interpol.ConstantLookup: java.lang.Object resolveField(java.lang.String,java.lang.String)>($r5, $r6);

        if $r7 == null goto label14;

        $r8 = <org.apache.commons.configuration.interpol.ConstantLookup: java.util.Map constantCache>;

        entermonitor $r8;

     label09:
        $r9 = <org.apache.commons.configuration.interpol.ConstantLookup: java.util.Map constantCache>;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r7);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r10);

        exitmonitor $r8;

     label10:
        goto label13;

     label11:
        $r17 := @caughtexception;

        exitmonitor $r8;

     label12:
        throw $r17;

     label13:
        r19 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

     label14:
        goto label16;

     label15:
        $r11 := @caughtexception;

        $r13 = r4.<org.apache.commons.configuration.interpol.ConstantLookup: org.apache.commons.logging.Log log>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Could not obtain value for variable ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r16, $r11);

     label16:
        return r19;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Exception from label08 to label14 with label15;
    }

    public static void clear()
    {
        java.lang.Throwable $r2;
        java.util.Map $r0, $r1;

        $r0 = <org.apache.commons.configuration.interpol.ConstantLookup: java.util.Map constantCache>;

        entermonitor $r0;

     label1:
        $r1 = <org.apache.commons.configuration.interpol.ConstantLookup: java.util.Map constantCache>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        exitmonitor $r0;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r0;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected java.lang.Object resolveField(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.apache.commons.configuration.interpol.ConstantLookup r0;
        java.lang.Class $r2;
        java.lang.Object $r5;
        java.lang.String r1, r3;
        java.lang.reflect.Field $r4;

        r0 := @this: org.apache.commons.configuration.interpol.ConstantLookup;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.commons.configuration.interpol.ConstantLookup: java.lang.Class fetchClass(java.lang.String)>(r1);

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        return $r5;
    }

    protected java.lang.Class fetchClass(java.lang.String) throws java.lang.ClassNotFoundException
    {
        java.lang.Class $r1;
        java.lang.String r0;
        org.apache.commons.configuration.interpol.ConstantLookup r2;

        r2 := @this: org.apache.commons.configuration.interpol.ConstantLookup;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.commons.lang.ClassUtils: java.lang.Class getClass(java.lang.String)>(r0);

        return $r1;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        <org.apache.commons.configuration.interpol.ConstantLookup: char FIELD_SEPRATOR> = 46;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.commons.configuration.interpol.ConstantLookup: java.util.Map constantCache> = $r0;

        return;
    }
}
