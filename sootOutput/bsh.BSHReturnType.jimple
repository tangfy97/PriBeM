class bsh.BSHReturnType extends bsh.SimpleNode
{
    public boolean isVoid;

    void <init>(int)
    {
        int i0;
        bsh.BSHReturnType r0;

        r0 := @this: bsh.BSHReturnType;

        i0 := @parameter0: int;

        specialinvoke r0.<bsh.SimpleNode: void <init>(int)>(i0);

        return;
    }

    bsh.BSHType getTypeNode()
    {
        bsh.BSHReturnType r0;
        bsh.BSHType $r2;
        bsh.Node $r1;

        r0 := @this: bsh.BSHReturnType;

        $r1 = virtualinvoke r0.<bsh.BSHReturnType: bsh.Node jjtGetChild(int)>(0);

        $r2 = (bsh.BSHType) $r1;

        return $r2;
    }

    public java.lang.String getTypeDescriptor(bsh.CallStack, bsh.Interpreter, java.lang.String)
    {
        bsh.BSHType $r1;
        bsh.Interpreter r3;
        bsh.BSHReturnType r0;
        java.lang.String r4, $r5;
        bsh.CallStack r2;
        boolean $z0;

        r0 := @this: bsh.BSHReturnType;

        r2 := @parameter0: bsh.CallStack;

        r3 := @parameter1: bsh.Interpreter;

        r4 := @parameter2: java.lang.String;

        $z0 = r0.<bsh.BSHReturnType: boolean isVoid>;

        if $z0 == 0 goto label1;

        return "V";

     label1:
        $r1 = virtualinvoke r0.<bsh.BSHReturnType: bsh.BSHType getTypeNode()>();

        $r5 = virtualinvoke $r1.<bsh.BSHType: java.lang.String getTypeDescriptor(bsh.CallStack,bsh.Interpreter,java.lang.String)>(r2, r3, r4);

        return $r5;
    }

    public java.lang.Class evalReturnType(bsh.CallStack, bsh.Interpreter) throws bsh.EvalError
    {
        bsh.BSHType $r1;
        bsh.Interpreter r3;
        bsh.BSHReturnType r0;
        java.lang.Class $r4, $r5;
        bsh.CallStack r2;
        boolean $z0;

        r0 := @this: bsh.BSHReturnType;

        r2 := @parameter0: bsh.CallStack;

        r3 := @parameter1: bsh.Interpreter;

        $z0 = r0.<bsh.BSHReturnType: boolean isVoid>;

        if $z0 == 0 goto label1;

        $r5 = <java.lang.Void: java.lang.Class TYPE>;

        return $r5;

     label1:
        $r1 = virtualinvoke r0.<bsh.BSHReturnType: bsh.BSHType getTypeNode()>();

        $r4 = virtualinvoke $r1.<bsh.BSHType: java.lang.Class getType(bsh.CallStack,bsh.Interpreter)>(r2, r3);

        return $r4;
    }
}
