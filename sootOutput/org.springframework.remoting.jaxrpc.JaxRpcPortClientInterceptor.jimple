public class org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor extends org.springframework.remoting.jaxrpc.LocalJaxRpcServiceFactory implements org.aopalliance.intercept.MethodInterceptor, org.springframework.beans.factory.InitializingBean
{
    private javax.xml.rpc.Service jaxRpcService;
    private javax.xml.rpc.Service serviceToUse;
    private java.lang.String portName;
    private java.lang.String username;
    private java.lang.String password;
    private java.lang.String endpointAddress;
    private boolean maintainSession;
    private final java.util.Map customPropertyMap;
    private java.lang.Class serviceInterface;
    private java.lang.Class portInterface;
    private boolean lookupServiceOnStartup;
    private boolean refreshServiceAfterConnectFailure;
    private javax.xml.namespace.QName portQName;
    private java.rmi.Remote portStub;
    private final java.lang.Object preparationMonitor;

    public void <init>()
    {
        java.util.HashMap $r1;
        java.lang.Object $r2;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        specialinvoke r0.<org.springframework.remoting.jaxrpc.LocalJaxRpcServiceFactory: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.util.Map customPropertyMap> = $r1;

        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean lookupServiceOnStartup> = 1;

        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean refreshServiceAfterConnectFailure> = 0;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Object preparationMonitor> = $r2;

        return;
    }

    public void setJaxRpcService(javax.xml.rpc.Service)
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        javax.xml.rpc.Service r1;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r1 := @parameter0: javax.xml.rpc.Service;

        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.rpc.Service jaxRpcService> = r1;

        return;
    }

    public javax.xml.rpc.Service getJaxRpcService()
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        javax.xml.rpc.Service $r1;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.rpc.Service jaxRpcService>;

        return $r1;
    }

    public void setPortName(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String portName> = r1;

        return;
    }

    public java.lang.String getPortName()
    {
        java.lang.String $r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String portName>;

        return $r1;
    }

    public void setUsername(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String username> = r1;

        return;
    }

    public java.lang.String getUsername()
    {
        java.lang.String $r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String username>;

        return $r1;
    }

    public void setPassword(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String password> = r1;

        return;
    }

    public java.lang.String getPassword()
    {
        java.lang.String $r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String password>;

        return $r1;
    }

    public void setEndpointAddress(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String endpointAddress> = r1;

        return;
    }

    public java.lang.String getEndpointAddress()
    {
        java.lang.String $r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String endpointAddress>;

        return $r1;
    }

    public void setMaintainSession(boolean)
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean maintainSession> = z0;

        return;
    }

    public boolean isMaintainSession()
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        boolean $z0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $z0 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean maintainSession>;

        return $z0;
    }

    public void setCustomProperties(java.util.Properties)
    {
        java.util.Properties r0;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r1;
        java.util.Map $r2;

        r1 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r0 := @parameter0: java.util.Properties;

        $r2 = r1.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.util.Map customPropertyMap>;

        staticinvoke <org.springframework.util.CollectionUtils: void mergePropertiesIntoMap(java.util.Properties,java.util.Map)>(r0, $r2);

        return;
    }

    public void setCustomPropertyMap(java.util.Map)
    {
        java.util.Map$Entry r4;
        java.util.Iterator $r2;
        java.util.Set $r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r5;
        java.util.Map r0;
        java.lang.Object $r3, $r6, $r8;
        java.lang.String $r7;
        boolean $z0;

        r5 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r0 := @parameter0: java.util.Map;

        if r0 == null goto label3;

        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r6 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke r5.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: void addCustomProperty(java.lang.String,java.lang.Object)>($r7, $r8);

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label3:
        return;
    }

    public java.util.Map getCustomPropertyMap()
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        java.util.Map $r1;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.util.Map customPropertyMap>;

        return $r1;
    }

    public void addCustomProperty(java.lang.String, java.lang.Object)
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        java.util.Map $r3;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.util.Map customPropertyMap>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    public void setServiceInterface(java.lang.Class)
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r1;
        java.lang.Class r0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r1 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'serviceInterface\' must be an interface");

        throw $r2;

     label1:
        r1.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Class serviceInterface> = r0;

        return;
    }

    public java.lang.Class getServiceInterface()
    {
        java.lang.Class $r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Class serviceInterface>;

        return $r1;
    }

    public void setPortInterface(java.lang.Class)
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r1;
        java.lang.Class r0, $r3;
        java.lang.IllegalArgumentException $r2;
        boolean $z0, $z1;

        r1 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $r3 = class "Ljava/rmi/Remote;";

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z1 != 0 goto label2;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("\'portInterface\' must be an interface derived from [java.rmi.Remote]");

        throw $r2;

     label2:
        r1.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Class portInterface> = r0;

        return;
    }

    public java.lang.Class getPortInterface()
    {
        java.lang.Class $r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Class portInterface>;

        return $r1;
    }

    public void setLookupServiceOnStartup(boolean)
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean lookupServiceOnStartup> = z0;

        return;
    }

    public void setRefreshServiceAfterConnectFailure(boolean)
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        boolean z0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        z0 := @parameter0: boolean;

        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean refreshServiceAfterConnectFailure> = z0;

        return;
    }

    public void afterPropertiesSet()
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        boolean $z0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $z0 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean lookupServiceOnStartup>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: void prepare()>();

     label1:
        return;
    }

    public void prepare() throws org.springframework.remoting.RemoteLookupFailureException
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        java.lang.StringBuilder $r8, $r11, $r12, $r19, $r22, $r23, $r26, $r29, $r30, $r32, $r33, $r34, $r35, $r37, $r40, $r41, $r43, $r44, $r50, $r52, $r53;
        javax.xml.namespace.QName $r4, $r10, $r15, $r31, $r39, $r51;
        java.lang.Throwable $r47, $r48;
        java.lang.String $r1, $r3, $r13, $r21, $r24, $r28, $r36, $r42, $r45, $r54, $r56;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        javax.xml.rpc.Stub r57;
        org.springframework.remoting.RemoteLookupFailureException $r18, $r49;
        java.rmi.Remote $r16;
        java.lang.IllegalArgumentException $r46;
        javax.xml.rpc.Service $r5, r55;
        java.lang.Object $r2;
        java.lang.Class $r6, $r20, $r25;
        org.apache.commons.logging.Log $r7, $r9, $r14, $r17, $r27, $r38;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $r1 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String getPortName()>();

        if $r1 != null goto label01;

        $r46 = new java.lang.IllegalArgumentException;

        specialinvoke $r46.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Property \'portName\' is required");

        throw $r46;

     label01:
        $r2 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Object preparationMonitor>;

        entermonitor $r2;

     label02:
        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.rpc.Service serviceToUse> = null;

        $r3 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String getPortName()>();

        $r4 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.namespace.QName getQName(java.lang.String)>($r3);

        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.namespace.QName portQName> = $r4;

     label03:
        $r5 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.rpc.Service getJaxRpcService()>();

        r55 = $r5;

        if $r5 != null goto label04;

        r55 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.rpc.Service createJaxRpcService()>();

        goto label05;

     label04:
        virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: void postProcessJaxRpcService(javax.xml.rpc.Service)>($r5);

     label05:
        $r6 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Class getPortInterface()>();

        if $r6 == null goto label11;

        $z1 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean alwaysUseJaxRpcCall()>();

        if $z1 != 0 goto label11;

        $r14 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r14.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label06;

        $r38 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: org.apache.commons.logging.Log logger>;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>("Creating JAX-RPC proxy for JAX-RPC port [");

        $r39 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.namespace.QName portQName>;

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], using port interface [");

        $r42 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r38.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r45);

     label06:
        $r15 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.namespace.QName portQName>;

        $r16 = interfaceinvoke r55.<javax.xml.rpc.Service: java.rmi.Remote getPort(javax.xml.namespace.QName,java.lang.Class)>($r15, $r6);

        $r17 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r17.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label09;

        $r25 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Class getServiceInterface()>();

        if $r25 == null goto label09;

        $z4 = virtualinvoke $r25.<java.lang.Class: boolean isInstance(java.lang.Object)>($r16);

        $r27 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: org.apache.commons.logging.Log logger>;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("Using service interface [");

        $r28 = virtualinvoke $r25.<java.lang.Class: java.lang.String getName()>();

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] for JAX-RPC port [");

        $r31 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.namespace.QName portQName>;

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] - ");

        if $z4 != 0 goto label07;

        $r56 = "not";

        goto label08;

     label07:
        $r56 = "";

     label08:
        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" directly implemented");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r36);

     label09:
        $z5 = $r16 instanceof javax.xml.rpc.Stub;

        if $z5 != 0 goto label10;

        $r18 = new org.springframework.remoting.RemoteLookupFailureException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("Port stub of class [");

        $r20 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] is not a valid JAX-RPC stub: it does not implement interface [javax.xml.rpc.Stub]");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.springframework.remoting.RemoteLookupFailureException: void <init>(java.lang.String)>($r24);

        throw $r18;

     label10:
        r57 = (javax.xml.rpc.Stub) $r16;

        virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: void preparePortStub(javax.xml.rpc.Stub)>(r57);

        virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: void postProcessPortStub(javax.xml.rpc.Stub)>(r57);

        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.rmi.Remote portStub> = $r16;

        goto label12;

     label11:
        $r7 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label12;

        $r9 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: org.apache.commons.logging.Log logger>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Using JAX-RPC dynamic calls for JAX-RPC port [");

        $r10 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.namespace.QName portQName>;

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r9.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r13);

     label12:
        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.rpc.Service serviceToUse> = r55;

     label13:
        goto label15;

     label14:
        $r48 := @caughtexception;

        $r49 = new org.springframework.remoting.RemoteLookupFailureException;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to initialize service for JAX-RPC port [");

        $r51 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.namespace.QName portQName>;

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<org.springframework.remoting.RemoteLookupFailureException: void <init>(java.lang.String,java.lang.Throwable)>($r54, $r48);

        throw $r49;

     label15:
        exitmonitor $r2;

     label16:
        goto label19;

     label17:
        $r47 := @caughtexception;

        exitmonitor $r2;

     label18:
        throw $r47;

     label19:
        return;

        catch javax.xml.rpc.ServiceException from label03 to label13 with label14;
        catch java.lang.Throwable from label02 to label16 with label17;
        catch java.lang.Throwable from label17 to label18 with label17;
    }

    protected boolean alwaysUseJaxRpcCall()
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        return 0;
    }

    protected void reset()
    {
        java.lang.Throwable $r2;
        java.lang.Object $r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Object preparationMonitor>;

        entermonitor $r1;

     label1:
        r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.rpc.Service serviceToUse> = null;

        exitmonitor $r1;

     label2:
        goto label5;

     label3:
        $r2 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r2;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected boolean isPrepared()
    {
        java.lang.Throwable $r3;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        javax.xml.rpc.Service $r2;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Object preparationMonitor>;

        entermonitor $r1;

     label1:
        $r2 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.rpc.Service serviceToUse>;

        if $r2 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        exitmonitor $r1;

     label4:
        return $z0;

     label5:
        $r3 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected final javax.xml.namespace.QName getPortQName()
    {
        javax.xml.namespace.QName $r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.namespace.QName portQName>;

        return $r1;
    }

    protected void preparePortStub(javax.xml.rpc.Stub)
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        java.util.Map $r4, $r5;
        java.lang.Boolean $r14;
        java.lang.String $r1, $r2, $r3, $r12;
        boolean $z0, $z1;
        java.util.Map$Entry r9;
        java.util.Iterator $r7;
        java.util.Set $r6;
        javax.xml.rpc.Stub r10;
        java.lang.Object $r8, $r11, $r13;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r10 := @parameter0: javax.xml.rpc.Stub;

        $r1 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String getUsername()>();

        if $r1 == null goto label1;

        interfaceinvoke r10.<javax.xml.rpc.Stub: void _setProperty(java.lang.String,java.lang.Object)>("javax.xml.rpc.security.auth.username", $r1);

     label1:
        $r2 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String getPassword()>();

        if $r2 == null goto label2;

        interfaceinvoke r10.<javax.xml.rpc.Stub: void _setProperty(java.lang.String,java.lang.Object)>("javax.xml.rpc.security.auth.password", $r2);

     label2:
        $r3 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String getEndpointAddress()>();

        if $r3 == null goto label3;

        interfaceinvoke r10.<javax.xml.rpc.Stub: void _setProperty(java.lang.String,java.lang.Object)>("javax.xml.rpc.service.endpoint.address", $r3);

     label3:
        $z0 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean isMaintainSession()>();

        if $z0 == 0 goto label4;

        $r14 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r10.<javax.xml.rpc.Stub: void _setProperty(java.lang.String,java.lang.Object)>("javax.xml.rpc.session.maintain", $r14);

     label4:
        $r4 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.util.Map customPropertyMap>;

        if $r4 == null goto label7;

        $r5 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.util.Map customPropertyMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        goto label6;

     label5:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r11 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.String) $r11;

        $r13 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r10.<javax.xml.rpc.Stub: void _setProperty(java.lang.String,java.lang.Object)>($r12, $r13);

     label6:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label5;

     label7:
        return;
    }

    protected void postProcessPortStub(javax.xml.rpc.Stub)
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        javax.xml.rpc.Stub r1;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r1 := @parameter0: javax.xml.rpc.Stub;

        return;
    }

    protected java.rmi.Remote getPortStub()
    {
        java.rmi.Remote $r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        $r1 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.rmi.Remote portStub>;

        return $r1;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Throwable $r13;
        org.aopalliance.intercept.MethodInvocation r0;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r2;
        java.lang.String $r6, $r9, $r12;
        java.lang.reflect.Method $r1;
        boolean $z0, $z1;
        java.lang.Object $r3, $r4;
        java.lang.StringBuilder $r5, $r7, $r8, $r10, $r11;

        r2 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $z0 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isToStringMethod(java.lang.reflect.Method)>($r1);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("JAX-RPC proxy for port [");

        $r6 = virtualinvoke r2.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String getPortName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] of service [");

        $r9 = virtualinvoke r2.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String getServiceName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;

     label1:
        $r3 = r2.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Object preparationMonitor>;

        entermonitor $r3;

     label2:
        $z1 = virtualinvoke r2.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean isPrepared()>();

        if $z1 != 0 goto label3;

        virtualinvoke r2.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: void prepare()>();

     label3:
        exitmonitor $r3;

     label4:
        goto label7;

     label5:
        $r13 := @caughtexception;

        exitmonitor $r3;

     label6:
        throw $r13;

     label7:
        $r4 = virtualinvoke r2.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation)>(r0);

        return $r4;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    protected java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        org.aopalliance.intercept.MethodInvocation r3;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        org.springframework.remoting.RemoteProxyFailureException $r32;
        org.springframework.remoting.jaxrpc.JaxRpcSoapFaultException $r31;
        java.lang.reflect.Method $r8, $r17, $r27;
        boolean $z0, $z1;
        java.rmi.RemoteException $r26;
        java.lang.StringBuilder $r10, $r11, $r19, $r20, $r29, $r30;
        java.lang.Throwable $r22, $r24, $r28;
        java.lang.String $r9, $r12, $r18, $r21;
        java.rmi.Remote $r1;
        javax.xml.rpc.soap.SOAPFaultException $r33;
        javax.xml.rpc.Service $r4;
        org.apache.commons.logging.Log $r2, $r7, $r13, $r16;
        java.lang.Object $r5, $r14;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r3 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.rmi.Remote getPortStub()>();

     label1:
        if $r1 == null goto label4;

        $r13 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r13.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z1 == 0 goto label2;

        $r16 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: org.apache.commons.logging.Log logger>;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invoking operation \'");

        $r17 = interfaceinvoke r3.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r18 = virtualinvoke $r17.<java.lang.reflect.Method: java.lang.String getName()>();

        $r19 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on JAX-RPC port stub");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r21);

     label2:
        $r14 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation,java.rmi.Remote)>(r3, $r1);

     label3:
        return $r14;

     label4:
        $r2 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isTraceEnabled()>();

        if $z0 == 0 goto label5;

        $r7 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: org.apache.commons.logging.Log logger>;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invoking operation \'");

        $r8 = interfaceinvoke r3.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r9 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.String getName()>();

        $r10 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as JAX-RPC dynamic call");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r7.<org.apache.commons.logging.Log: void trace(java.lang.Object)>($r12);

     label5:
        $r4 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.rpc.Service serviceToUse>;

        $r5 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Object performJaxRpcCall(org.aopalliance.intercept.MethodInvocation,javax.xml.rpc.Service)>(r3, $r4);

     label6:
        return $r5;

     label7:
        $r26 := @caughtexception;

        $r27 = interfaceinvoke r3.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r28 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.Throwable handleRemoteException(java.lang.reflect.Method,java.rmi.RemoteException)>($r27, $r26);

        throw $r28;

     label8:
        $r24 := @caughtexception;

        $r31 = new org.springframework.remoting.jaxrpc.JaxRpcSoapFaultException;

        $r33 = (javax.xml.rpc.soap.SOAPFaultException) $r24;

        specialinvoke $r31.<org.springframework.remoting.jaxrpc.JaxRpcSoapFaultException: void <init>(javax.xml.rpc.soap.SOAPFaultException)>($r33);

        throw $r31;

     label9:
        $r22 := @caughtexception;

        $r32 = new org.springframework.remoting.RemoteProxyFailureException;

        specialinvoke $r32.<org.springframework.remoting.RemoteProxyFailureException: void <init>(java.lang.String,java.lang.Throwable)>("Invalid JAX-RPC call configuration", $r22);

        throw $r32;

        catch java.rmi.RemoteException from label1 to label3 with label7;
        catch java.rmi.RemoteException from label4 to label6 with label7;
        catch javax.xml.rpc.soap.SOAPFaultException from label1 to label3 with label8;
        catch javax.xml.rpc.soap.SOAPFaultException from label4 to label6 with label8;
        catch javax.xml.rpc.JAXRPCException from label1 to label3 with label9;
        catch javax.xml.rpc.JAXRPCException from label4 to label6 with label9;
    }

    protected java.lang.Object doInvoke(org.aopalliance.intercept.MethodInvocation, java.rmi.Remote) throws java.lang.Throwable
    {
        java.lang.Throwable $r4;
        org.aopalliance.intercept.MethodInvocation r0;
        java.rmi.Remote r1;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r5;
        java.lang.Object $r2;
        java.lang.reflect.InvocationTargetException $r3;

        r5 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r1 := @parameter1: java.rmi.Remote;

     label1:
        $r2 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: java.lang.Object invokeRemoteMethod(org.aopalliance.intercept.MethodInvocation,java.lang.Object)>(r0, r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r4;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
    }

    protected java.lang.Object performJaxRpcCall(org.aopalliance.intercept.MethodInvocation, javax.xml.rpc.Service) throws java.lang.Throwable
    {
        java.lang.Throwable $r9;
        java.lang.Object[] $r7;
        org.aopalliance.intercept.MethodInvocation r0;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r2;
        javax.xml.rpc.Service r4;
        java.lang.Object $r8;
        javax.xml.namespace.QName r3;
        java.lang.String $r5;
        java.lang.reflect.Method $r1;
        javax.xml.rpc.Call $r6;

        r2 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        r4 := @parameter1: javax.xml.rpc.Service;

        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        r3 = r2.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.namespace.QName portQName>;

        entermonitor r4;

     label1:
        $r5 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.String getName()>();

        $r6 = interfaceinvoke r4.<javax.xml.rpc.Service: javax.xml.rpc.Call createCall(javax.xml.namespace.QName,java.lang.String)>(r3, $r5);

        exitmonitor r4;

     label2:
        goto label5;

     label3:
        $r9 := @caughtexception;

        exitmonitor r4;

     label4:
        throw $r9;

     label5:
        virtualinvoke r2.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: void prepareJaxRpcCall(javax.xml.rpc.Call)>($r6);

        virtualinvoke r2.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: void postProcessJaxRpcCall(javax.xml.rpc.Call,org.aopalliance.intercept.MethodInvocation)>($r6, r0);

        $r7 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.Object[] getArguments()>();

        $r8 = interfaceinvoke $r6.<javax.xml.rpc.Call: java.lang.Object invoke(java.lang.Object[])>($r7);

        return $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    protected void prepareJaxRpcCall(javax.xml.rpc.Call)
    {
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        java.util.Map $r4, $r5;
        java.lang.Boolean $r14;
        java.lang.String $r1, $r2, $r3, $r12;
        javax.xml.rpc.Call r10;
        boolean $z0, $z1;
        java.util.Map$Entry r9;
        java.util.Iterator $r7;
        java.util.Set $r6;
        java.lang.Object $r8, $r11, $r13;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r10 := @parameter0: javax.xml.rpc.Call;

        $r1 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String getUsername()>();

        if $r1 == null goto label1;

        interfaceinvoke r10.<javax.xml.rpc.Call: void setProperty(java.lang.String,java.lang.Object)>("javax.xml.rpc.security.auth.username", $r1);

     label1:
        $r2 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String getPassword()>();

        if $r2 == null goto label2;

        interfaceinvoke r10.<javax.xml.rpc.Call: void setProperty(java.lang.String,java.lang.Object)>("javax.xml.rpc.security.auth.password", $r2);

     label2:
        $r3 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.lang.String getEndpointAddress()>();

        if $r3 == null goto label3;

        interfaceinvoke r10.<javax.xml.rpc.Call: void setTargetEndpointAddress(java.lang.String)>($r3);

     label3:
        $z0 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean isMaintainSession()>();

        if $z0 == 0 goto label4;

        $r14 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        interfaceinvoke r10.<javax.xml.rpc.Call: void setProperty(java.lang.String,java.lang.Object)>("javax.xml.rpc.session.maintain", $r14);

     label4:
        $r4 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.util.Map customPropertyMap>;

        if $r4 == null goto label7;

        $r5 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: java.util.Map customPropertyMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        goto label6;

     label5:
        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (java.util.Map$Entry) $r8;

        $r11 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r12 = (java.lang.String) $r11;

        $r13 = interfaceinvoke r9.<java.util.Map$Entry: java.lang.Object getValue()>();

        interfaceinvoke r10.<javax.xml.rpc.Call: void setProperty(java.lang.String,java.lang.Object)>($r12, $r13);

     label6:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label5;

     label7:
        return;
    }

    protected void postProcessJaxRpcCall(javax.xml.rpc.Call, org.aopalliance.intercept.MethodInvocation)
    {
        org.aopalliance.intercept.MethodInvocation r2;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        javax.xml.rpc.Call r1;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r1 := @parameter0: javax.xml.rpc.Call;

        r2 := @parameter1: org.aopalliance.intercept.MethodInvocation;

        return;
    }

    protected java.lang.Throwable handleRemoteException(java.lang.reflect.Method, java.rmi.RemoteException)
    {
        java.lang.Throwable $r8, $r16;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r0;
        java.lang.String $r4, $r12, $r15;
        java.lang.reflect.Method r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Exception $r5;
        java.rmi.RemoteException r1;
        java.lang.Class $r6, $r11;
        org.apache.commons.logging.Log $r7, $r10;
        java.lang.StringBuilder $r9, $r13, $r14;
        javax.xml.namespace.QName $r3;

        r0 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r2 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.rmi.RemoteException;

        $z0 = virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean isConnectFailure(java.rmi.RemoteException)>(r1);

        if $z0 == 0 goto label1;

        $z3 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: boolean refreshServiceAfterConnectFailure>;

        if $z3 == 0 goto label1;

        virtualinvoke r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: void reset()>();

     label1:
        $r16 = virtualinvoke r1.<java.rmi.RemoteException: java.lang.Throwable getCause()>();

        if $r16 == null goto label3;

        $r6 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = staticinvoke <org.springframework.util.ReflectionUtils: boolean declaresException(java.lang.reflect.Method,java.lang.Class)>(r2, $r6);

        if $z1 == 0 goto label3;

        $r7 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: org.apache.commons.logging.Log logger>;

        $z2 = interfaceinvoke $r7.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z2 == 0 goto label2;

        $r10 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: org.apache.commons.logging.Log logger>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Rethrowing wrapped exception of type [");

        $r11 = virtualinvoke $r16.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] as-is");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r10.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r15);

     label2:
        $r8 = virtualinvoke r1.<java.rmi.RemoteException: java.lang.Throwable getCause()>();

        return $r8;

     label3:
        $r3 = r0.<org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor: javax.xml.namespace.QName portQName>;

        $r4 = virtualinvoke $r3.<javax.xml.namespace.QName: java.lang.String toString()>();

        $r5 = staticinvoke <org.springframework.remoting.rmi.RmiClientInterceptorUtils: java.lang.Exception convertRmiAccessException(java.lang.reflect.Method,java.rmi.RemoteException,boolean,java.lang.String)>(r2, r1, $z0, $r4);

        return $r5;
    }

    protected boolean isConnectFailure(java.rmi.RemoteException)
    {
        java.rmi.RemoteException r0;
        org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor r6;
        java.lang.Class $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        boolean $z0, $z1;

        r6 := @this: org.springframework.remoting.jaxrpc.JaxRpcPortClientInterceptor;

        r0 := @parameter0: java.rmi.RemoteException;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("Fault");

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean contains(java.lang.CharSequence)>("Fault");

        if $z1 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
