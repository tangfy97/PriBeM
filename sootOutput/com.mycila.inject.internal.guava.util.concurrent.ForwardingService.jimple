public abstract class com.mycila.inject.internal.guava.util.concurrent.ForwardingService extends com.mycila.inject.internal.guava.collect.ForwardingObject implements com.mycila.inject.internal.guava.util.concurrent.Service
{

    protected void <init>()
    {
        com.mycila.inject.internal.guava.util.concurrent.ForwardingService r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingService;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ForwardingObject: void <init>()>();

        return;
    }

    protected abstract com.mycila.inject.internal.guava.util.concurrent.Service delegate();

    public com.mycila.inject.internal.guava.util.concurrent.ListenableFuture start()
    {
        com.mycila.inject.internal.guava.util.concurrent.ListenableFuture $r2;
        com.mycila.inject.internal.guava.util.concurrent.Service $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingService r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingService: com.mycila.inject.internal.guava.util.concurrent.Service delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.Service: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture start()>();

        return $r2;
    }

    public com.mycila.inject.internal.guava.util.concurrent.Service$State state()
    {
        com.mycila.inject.internal.guava.util.concurrent.Service$State $r2;
        com.mycila.inject.internal.guava.util.concurrent.Service $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingService r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingService: com.mycila.inject.internal.guava.util.concurrent.Service delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.Service: com.mycila.inject.internal.guava.util.concurrent.Service$State state()>();

        return $r2;
    }

    public com.mycila.inject.internal.guava.util.concurrent.ListenableFuture stop()
    {
        com.mycila.inject.internal.guava.util.concurrent.ListenableFuture $r2;
        com.mycila.inject.internal.guava.util.concurrent.Service $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingService r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingService: com.mycila.inject.internal.guava.util.concurrent.Service delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.Service: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture stop()>();

        return $r2;
    }

    public com.mycila.inject.internal.guava.util.concurrent.Service$State startAndWait()
    {
        com.mycila.inject.internal.guava.util.concurrent.Service$State $r2;
        com.mycila.inject.internal.guava.util.concurrent.Service $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingService r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingService: com.mycila.inject.internal.guava.util.concurrent.Service delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.Service: com.mycila.inject.internal.guava.util.concurrent.Service$State startAndWait()>();

        return $r2;
    }

    public com.mycila.inject.internal.guava.util.concurrent.Service$State stopAndWait()
    {
        com.mycila.inject.internal.guava.util.concurrent.Service$State $r2;
        com.mycila.inject.internal.guava.util.concurrent.Service $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingService r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingService: com.mycila.inject.internal.guava.util.concurrent.Service delegate()>();

        $r2 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.Service: com.mycila.inject.internal.guava.util.concurrent.Service$State stopAndWait()>();

        return $r2;
    }

    public boolean isRunning()
    {
        com.mycila.inject.internal.guava.util.concurrent.Service $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingService r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingService: com.mycila.inject.internal.guava.util.concurrent.Service delegate()>();

        $z0 = interfaceinvoke $r1.<com.mycila.inject.internal.guava.util.concurrent.Service: boolean isRunning()>();

        return $z0;
    }

    protected com.mycila.inject.internal.guava.util.concurrent.Service$State standardStartAndWait()
    {
        com.mycila.inject.internal.guava.util.concurrent.ListenableFuture $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingService r0;
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.util.concurrent.Service$State $r3;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingService: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture start()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.Futures: java.lang.Object getUnchecked(java.util.concurrent.Future)>($r1);

        $r3 = (com.mycila.inject.internal.guava.util.concurrent.Service$State) $r2;

        return $r3;
    }

    protected com.mycila.inject.internal.guava.util.concurrent.Service$State standardStopAndWait()
    {
        com.mycila.inject.internal.guava.util.concurrent.ListenableFuture $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingService r0;
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.util.concurrent.Service$State $r3;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingService: com.mycila.inject.internal.guava.util.concurrent.ListenableFuture stop()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.Futures: java.lang.Object getUnchecked(java.util.concurrent.Future)>($r1);

        $r3 = (com.mycila.inject.internal.guava.util.concurrent.Service$State) $r2;

        return $r3;
    }

    protected volatile java.lang.Object delegate()
    {
        com.mycila.inject.internal.guava.util.concurrent.Service $r1;
        com.mycila.inject.internal.guava.util.concurrent.ForwardingService r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ForwardingService;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.util.concurrent.ForwardingService: com.mycila.inject.internal.guava.util.concurrent.Service delegate()>();

        return $r1;
    }
}
