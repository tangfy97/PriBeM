public class org.bson.BSON extends java.lang.Object
{
    public static final byte EOO;
    public static final byte NUMBER;
    public static final byte STRING;
    public static final byte OBJECT;
    public static final byte ARRAY;
    public static final byte BINARY;
    public static final byte UNDEFINED;
    public static final byte OID;
    public static final byte BOOLEAN;
    public static final byte DATE;
    public static final byte NULL;
    public static final byte REGEX;
    public static final byte REF;
    public static final byte CODE;
    public static final byte SYMBOL;
    public static final byte CODE_W_SCOPE;
    public static final byte NUMBER_INT;
    public static final byte TIMESTAMP;
    public static final byte NUMBER_LONG;
    public static final byte MINKEY;
    public static final byte MAXKEY;
    public static final byte B_GENERAL;
    public static final byte B_FUNC;
    public static final byte B_BINARY;
    public static final byte B_UUID;
    private static final int GLOBAL_FLAG;
    private static boolean _anyHooks;
    static org.bson.util.ClassMap _encodingHooks;
    static org.bson.util.ClassMap _decodingHooks;
    protected static java.nio.charset.Charset _utf8;
    static java.lang.ThreadLocal _staticEncoder;
    static java.lang.ThreadLocal _staticDecoder;

    public void <init>()
    {
        org.bson.BSON r0;

        r0 := @this: org.bson.BSON;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int regexFlags(java.lang.String)
    {
        int $i0, $i3, i4, i5;
        org.bson.BSON$RegexFlag $r1;
        java.lang.String $r0, $r6, $r7, $r8, r9;
        char $c1, $c2;
        java.lang.IllegalArgumentException $r2;
        java.lang.StringBuilder $r3, $r4, $r5;

        r9 := @parameter0: java.lang.String;

        $r0 = virtualinvoke r9.<java.lang.String: java.lang.String toLowerCase()>();

        i4 = 0;

        i5 = 0;

     label1:
        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if i5 >= $i0 goto label4;

        $c1 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i5);

        $r1 = staticinvoke <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag getByCharacter(char)>($c1);

        if $r1 == null goto label2;

        $i3 = $r1.<org.bson.BSON$RegexFlag: int javaFlag>;

        i4 = i4 | $i3;

        $r7 = $r1.<org.bson.BSON$RegexFlag: java.lang.String unsupported>;

        if $r7 == null goto label3;

        $r8 = $r1.<org.bson.BSON$RegexFlag: java.lang.String unsupported>;

        staticinvoke <org.bson.BSON: void _warnUnsupportedRegex(java.lang.String)>($r8);

        goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unrecognized flag: ");

        $c2 = virtualinvoke $r0.<java.lang.String: char charAt(int)>(i5);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return i4;
    }

    public static int regexFlag(char)
    {
        char c0;
        java.lang.IllegalArgumentException $r3;
        int $i1;
        org.bson.BSON$RegexFlag $r0;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r1, $r2, $r7;

        c0 := @parameter0: char;

        $r0 = staticinvoke <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag getByCharacter(char)>(c0);

        if $r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unrecognized flag: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        $r1 = $r0.<org.bson.BSON$RegexFlag: java.lang.String unsupported>;

        if $r1 == null goto label2;

        $r2 = $r0.<org.bson.BSON$RegexFlag: java.lang.String unsupported>;

        staticinvoke <org.bson.BSON: void _warnUnsupportedRegex(java.lang.String)>($r2);

        return 0;

     label2:
        $i1 = $r0.<org.bson.BSON$RegexFlag: int javaFlag>;

        return $i1;
    }

    public static java.lang.String regexFlags(int)
    {
        org.bson.BSON$RegexFlag[] $r1;
        char $c3;
        java.lang.IllegalArgumentException $r3;
        int i0, $i1, $i2, $i4, i5, i6;
        java.lang.StringBuilder $r0;
        org.bson.BSON$RegexFlag r4;
        java.lang.String $r2;

        i5 := @parameter0: int;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = staticinvoke <org.bson.BSON$RegexFlag: org.bson.BSON$RegexFlag[] values()>();

        i0 = lengthof $r1;

        i6 = 0;

     label1:
        if i6 >= i0 goto label3;

        r4 = $r1[i6];

        $i1 = r4.<org.bson.BSON$RegexFlag: int javaFlag>;

        $i2 = i5 & $i1;

        if $i2 <= 0 goto label2;

        $c3 = r4.<org.bson.BSON$RegexFlag: char flagChar>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $i4 = r4.<org.bson.BSON$RegexFlag: int javaFlag>;

        i5 = i5 - $i4;

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        if i5 <= 0 goto label4;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("some flags could not be recognized.");

        throw $r3;

     label4:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private static void _warnUnsupportedRegex(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.StringBuilder $r0, $r2, $r4, $r5;
        java.lang.String r3, $r6;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("flag ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not supported by db.");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r6);

        return;
    }

    public static void addEncodingHook(java.lang.Class, org.bson.Transformer)
    {
        java.util.List r6;
        java.util.Vector $r4;
        java.lang.Class r0;
        java.lang.Object $r2;
        org.bson.Transformer r3;
        org.bson.util.ClassMap $r1, $r5;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.bson.Transformer;

        <org.bson.BSON: boolean _anyHooks> = 1;

        $r1 = <org.bson.BSON: org.bson.util.ClassMap _encodingHooks>;

        $r2 = virtualinvoke $r1.<org.bson.util.ClassMap: java.lang.Object get(java.lang.Object)>(r0);

        r6 = (java.util.List) $r2;

        if r6 != null goto label1;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r6 = $r4;

        $r5 = <org.bson.BSON: org.bson.util.ClassMap _encodingHooks>;

        virtualinvoke $r5.<org.bson.util.ClassMap: java.lang.Object put(java.lang.Class,java.lang.Object)>(r0, $r4);

     label1:
        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;
    }

    public static void addDecodingHook(java.lang.Class, org.bson.Transformer)
    {
        java.util.List r6;
        java.util.Vector $r4;
        java.lang.Class r0;
        java.lang.Object $r2;
        org.bson.Transformer r3;
        org.bson.util.ClassMap $r1, $r5;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.bson.Transformer;

        <org.bson.BSON: boolean _anyHooks> = 1;

        $r1 = <org.bson.BSON: org.bson.util.ClassMap _decodingHooks>;

        $r2 = virtualinvoke $r1.<org.bson.util.ClassMap: java.lang.Object get(java.lang.Object)>(r0);

        r6 = (java.util.List) $r2;

        if r6 != null goto label1;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<java.util.Vector: void <init>()>();

        r6 = $r4;

        $r5 = <org.bson.BSON: org.bson.util.ClassMap _decodingHooks>;

        virtualinvoke $r5.<org.bson.util.ClassMap: java.lang.Object put(java.lang.Class,java.lang.Object)>(r0, $r4);

     label1:
        interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r3);

        return;
    }

    public static java.lang.Object applyEncodingHooks(java.lang.Object)
    {
        java.util.Iterator $r5;
        org.bson.Transformer r7;
        org.bson.util.ClassMap $r0, $r1;
        java.util.List r4;
        int $i0;
        java.lang.Class $r2;
        java.lang.Object $r3, $r6, r8;
        boolean $z0, $z1;

        r8 := @parameter0: java.lang.Object;

        $z0 = <org.bson.BSON: boolean _anyHooks>;

        if $z0 != 0 goto label1;

        return r8;

     label1:
        $r0 = <org.bson.BSON: org.bson.util.ClassMap _encodingHooks>;

        $i0 = virtualinvoke $r0.<org.bson.util.ClassMap: int size()>();

        if $i0 == 0 goto label2;

        if r8 != null goto label3;

     label2:
        return r8;

     label3:
        $r1 = <org.bson.BSON: org.bson.util.ClassMap _encodingHooks>;

        $r2 = virtualinvoke r8.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r1.<org.bson.util.ClassMap: java.lang.Object get(java.lang.Object)>($r2);

        r4 = (java.util.List) $r3;

        if r4 == null goto label5;

        $r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.bson.Transformer) $r6;

        r8 = interfaceinvoke r7.<org.bson.Transformer: java.lang.Object transform(java.lang.Object)>(r8);

        goto label4;

     label5:
        return r8;
    }

    public static java.lang.Object applyDecodingHooks(java.lang.Object)
    {
        java.util.Iterator $r4;
        org.bson.Transformer r6;
        org.bson.util.ClassMap $r0;
        java.util.List r3;
        java.lang.Class $r1;
        java.lang.Object $r2, $r5, r7;
        boolean $z0, $z1;

        r7 := @parameter0: java.lang.Object;

        $z0 = <org.bson.BSON: boolean _anyHooks>;

        if $z0 == 0 goto label1;

        if r7 != null goto label2;

     label1:
        return r7;

     label2:
        $r0 = <org.bson.BSON: org.bson.util.ClassMap _decodingHooks>;

        $r1 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r0.<org.bson.util.ClassMap: java.lang.Object get(java.lang.Object)>($r1);

        r3 = (java.util.List) $r2;

        if r3 == null goto label4;

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.bson.Transformer) $r5;

        r7 = interfaceinvoke r6.<org.bson.Transformer: java.lang.Object transform(java.lang.Object)>(r7);

        goto label3;

     label4:
        return r7;
    }

    public static void clearAllHooks()
    {
        org.bson.util.ClassMap $r0, $r1;

        <org.bson.BSON: boolean _anyHooks> = 0;

        $r0 = <org.bson.BSON: org.bson.util.ClassMap _encodingHooks>;

        virtualinvoke $r0.<org.bson.util.ClassMap: void clear()>();

        $r1 = <org.bson.BSON: org.bson.util.ClassMap _decodingHooks>;

        virtualinvoke $r1.<org.bson.util.ClassMap: void clear()>();

        return;
    }

    public static byte[] encode(org.bson.BSONObject)
    {
        java.lang.Throwable $r5;
        byte[] $r4;
        java.lang.ThreadLocal $r0;
        org.bson.BSONObject r3;
        java.lang.Object $r1;
        org.bson.BSONEncoder r2;

        r3 := @parameter0: org.bson.BSONObject;

        $r0 = <org.bson.BSON: java.lang.ThreadLocal _staticEncoder>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.bson.BSONEncoder) $r1;

     label1:
        $r4 = virtualinvoke r2.<org.bson.BSONEncoder: byte[] encode(org.bson.BSONObject)>(r3);

     label2:
        virtualinvoke r2.<org.bson.BSONEncoder: void done()>();

        return $r4;

     label3:
        $r5 := @caughtexception;

     label4:
        virtualinvoke r2.<org.bson.BSONEncoder: void done()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static org.bson.BSONObject decode(byte[])
    {
        byte[] r3;
        java.lang.ThreadLocal $r0;
        org.bson.BSONDecoder r2;
        org.bson.BSONObject $r4;
        java.lang.Object $r1;

        r3 := @parameter0: byte[];

        $r0 = <org.bson.BSON: java.lang.ThreadLocal _staticDecoder>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (org.bson.BSONDecoder) $r1;

        $r4 = virtualinvoke r2.<org.bson.BSONDecoder: org.bson.BSONObject readObject(byte[])>(r3);

        return $r4;
    }

    public static int toInt(java.lang.Object)
    {
        java.lang.NullPointerException $r11;
        byte $b1;
        int $i0;
        java.lang.Boolean $r9;
        java.lang.String $r5, $r8;
        java.lang.Number $r10;
        boolean $z0, $z1, $z2;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r3, $r6, $r7;
        java.lang.Class $r4;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>(java.lang.String)>("can\'t be null");

        throw $r11;

     label1:
        $z0 = r0 instanceof java.lang.Number;

        if $z0 == 0 goto label2;

        $r10 = (java.lang.Number) r0;

        $i0 = virtualinvoke $r10.<java.lang.Number: int intValue()>();

        return $i0;

     label2:
        $z1 = r0 instanceof java.lang.Boolean;

        if $z1 == 0 goto label5;

        $r9 = (java.lang.Boolean) r0;

        $z2 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 == 0 goto label3;

        $b1 = 1;

        goto label4;

     label3:
        $b1 = 0;

     label4:
        return $b1;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t convert: ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to int");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r1;
    }

    static void <clinit>()
    {
        java.nio.charset.Charset $r2;
        org.bson.BSON$2 $r4;
        org.bson.BSON$1 $r3;
        org.bson.util.ClassMap $r0, $r1;

        <org.bson.BSON: int GLOBAL_FLAG> = 256;

        <org.bson.BSON: byte B_UUID> = 3;

        <org.bson.BSON: byte B_BINARY> = 2;

        <org.bson.BSON: byte B_FUNC> = 1;

        <org.bson.BSON: byte B_GENERAL> = 0;

        <org.bson.BSON: byte MAXKEY> = 127;

        <org.bson.BSON: byte MINKEY> = -1;

        <org.bson.BSON: byte NUMBER_LONG> = 18;

        <org.bson.BSON: byte TIMESTAMP> = 17;

        <org.bson.BSON: byte NUMBER_INT> = 16;

        <org.bson.BSON: byte CODE_W_SCOPE> = 15;

        <org.bson.BSON: byte SYMBOL> = 14;

        <org.bson.BSON: byte CODE> = 13;

        <org.bson.BSON: byte REF> = 12;

        <org.bson.BSON: byte REGEX> = 11;

        <org.bson.BSON: byte NULL> = 10;

        <org.bson.BSON: byte DATE> = 9;

        <org.bson.BSON: byte BOOLEAN> = 8;

        <org.bson.BSON: byte OID> = 7;

        <org.bson.BSON: byte UNDEFINED> = 6;

        <org.bson.BSON: byte BINARY> = 5;

        <org.bson.BSON: byte ARRAY> = 4;

        <org.bson.BSON: byte OBJECT> = 3;

        <org.bson.BSON: byte STRING> = 2;

        <org.bson.BSON: byte NUMBER> = 1;

        <org.bson.BSON: byte EOO> = 0;

        <org.bson.BSON: boolean _anyHooks> = 0;

        $r0 = new org.bson.util.ClassMap;

        specialinvoke $r0.<org.bson.util.ClassMap: void <init>()>();

        <org.bson.BSON: org.bson.util.ClassMap _encodingHooks> = $r0;

        $r1 = new org.bson.util.ClassMap;

        specialinvoke $r1.<org.bson.util.ClassMap: void <init>()>();

        <org.bson.BSON: org.bson.util.ClassMap _decodingHooks> = $r1;

        $r2 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        <org.bson.BSON: java.nio.charset.Charset _utf8> = $r2;

        $r3 = new org.bson.BSON$1;

        specialinvoke $r3.<org.bson.BSON$1: void <init>()>();

        <org.bson.BSON: java.lang.ThreadLocal _staticEncoder> = $r3;

        $r4 = new org.bson.BSON$2;

        specialinvoke $r4.<org.bson.BSON$2: void <init>()>();

        <org.bson.BSON: java.lang.ThreadLocal _staticDecoder> = $r4;

        return;
    }
}
