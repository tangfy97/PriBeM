class ucar.nc2.iosp.hdf4.H4header$DataChunk extends java.lang.Object
{
    int[] origin;
    ucar.nc2.iosp.hdf4.H4header$TagData data;
    static final boolean $assertionsDisabled;
    final ucar.nc2.iosp.hdf4.H4header this$0;

    void <init>(ucar.nc2.iosp.hdf4.H4header, int[], int[], ucar.nc2.iosp.hdf4.H4header$TagData)
    {
        ucar.nc2.iosp.hdf4.H4header$DataChunk r0;
        ucar.nc2.iosp.hdf4.H4header r1;
        java.lang.AssertionError $r17;
        int[] r2, r16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, i9;
        java.lang.String $r8, $r10, $r15;
        ucar.nc2.iosp.hdf4.H4header$TagData r3;
        boolean $z0, $z1;
        java.io.PrintStream $r4, $r6, $r12;
        java.lang.StringBuilder $r5, $r7, $r9, $r11, $r13, $r14;

        r0 := @this: ucar.nc2.iosp.hdf4.H4header$DataChunk;

        r1 := @parameter0: ucar.nc2.iosp.hdf4.H4header;

        r2 := @parameter1: int[];

        r16 := @parameter2: int[];

        r3 := @parameter3: ucar.nc2.iosp.hdf4.H4header$TagData;

        r0.<ucar.nc2.iosp.hdf4.H4header$DataChunk: ucar.nc2.iosp.hdf4.H4header this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <ucar.nc2.iosp.hdf4.H4header$DataChunk: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $i6 = lengthof r2;

        $i5 = lengthof r16;

        if $i6 == $i5 goto label1;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label1:
        i7 = 0;

     label2:
        $i8 = lengthof r2;

        if i7 >= $i8 goto label3;

        $i3 = r2[i7];

        $i2 = r16[i7];

        $i4 = $i3 * $i2;

        r2[i7] = $i4;

        i7 = i7 + 1;

        goto label2;

     label3:
        r0.<ucar.nc2.iosp.hdf4.H4header$DataChunk: int[] origin> = r2;

        r0.<ucar.nc2.iosp.hdf4.H4header$DataChunk: ucar.nc2.iosp.hdf4.H4header$TagData data> = r3;

        $z1 = staticinvoke <ucar.nc2.iosp.hdf4.H4header: boolean access$600()>();

        if $z1 == 0 goto label6;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void print(java.lang.String)>(" Chunk origin=");

        i9 = 0;

     label4:
        $i0 = lengthof r2;

        if i9 >= $i0 goto label5;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $i1 = r2[i9];

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r12.<java.io.PrintStream: void print(java.lang.String)>($r15);

        i9 = i9 + 1;

        goto label4;

     label5:
        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data=");

        $r8 = virtualinvoke r3.<ucar.nc2.iosp.hdf4.H4header$TagData: java.lang.String detail()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10);

     label6:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/iosp/hdf4/H4header;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.iosp.hdf4.H4header$DataChunk: boolean $assertionsDisabled> = $z1;

        return;
    }
}
