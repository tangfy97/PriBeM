public final class org.apache.lucene.util.BitVector extends java.lang.Object implements java.lang.Cloneable, org.apache.lucene.util.Bits
{
    private byte[] bits;
    private int size;
    private int count;
    private static final byte[] BYTE_COUNTS;
    private static java.lang.String CODEC;
    private static final int VERSION_PRE;
    private static final int VERSION_START;
    private static final int VERSION_CURRENT;
    static final boolean $assertionsDisabled;

    public void <init>(int)
    {
        byte[] $r1;
        int i0, $i1, $i2;
        org.apache.lucene.util.BitVector r0;

        r0 := @this: org.apache.lucene.util.BitVector;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.BitVector: int size> = i0;

        $i1 = r0.<org.apache.lucene.util.BitVector: int size>;

        $i2 = specialinvoke r0.<org.apache.lucene.util.BitVector: int getNumBytes(int)>($i1);

        $r1 = newarray (byte)[$i2];

        r0.<org.apache.lucene.util.BitVector: byte[] bits> = $r1;

        r0.<org.apache.lucene.util.BitVector: int count> = 0;

        return;
    }

    void <init>(byte[], int)
    {
        byte[] r1;
        int i0, $i2;
        org.apache.lucene.util.BitVector r0;

        r0 := @this: org.apache.lucene.util.BitVector;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.lucene.util.BitVector: byte[] bits> = r1;

        r0.<org.apache.lucene.util.BitVector: int size> = i0;

        $i2 = (int) -1;

        r0.<org.apache.lucene.util.BitVector: int count> = $i2;

        return;
    }

    private int getNumBytes(int)
    {
        int i0, $i1, i2;
        org.apache.lucene.util.BitVector r0;

        r0 := @this: org.apache.lucene.util.BitVector;

        i0 := @parameter0: int;

        i2 = i0 >>> 3;

        $i1 = i0 & 7;

        if $i1 == 0 goto label1;

        i2 = i2 + 1;

     label1:
        return i2;
    }

    public java.lang.Object clone()
    {
        byte[] $r1, r2, $r3, $r4;
        org.apache.lucene.util.BitVector r0, $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.util.BitVector;

        $r1 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        $i0 = lengthof $r1;

        r2 = newarray (byte)[$i0];

        $r4 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        $r3 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i1);

        $r5 = new org.apache.lucene.util.BitVector;

        $i2 = r0.<org.apache.lucene.util.BitVector: int size>;

        specialinvoke $r5.<org.apache.lucene.util.BitVector: void <init>(byte[],int)>(r2, $i2);

        $i3 = r0.<org.apache.lucene.util.BitVector: int count>;

        $r5.<org.apache.lucene.util.BitVector: int count> = $i3;

        return $r5;
    }

    public final void set(int)
    {
        byte[] $r1;
        org.apache.lucene.util.BitVector r0;
        byte $b5, $b7;
        int i0, $i1, $i2, $i3, $i4, $i6, $i8, $i9, $i11;
        java.lang.String $r8;
        java.lang.ArrayIndexOutOfBoundsException $r10;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9;

        r0 := @this: org.apache.lucene.util.BitVector;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.util.BitVector: int size>;

        if i0 < $i1 goto label1;

        $r10 = new java.lang.ArrayIndexOutOfBoundsException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bit=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size=");

        $i8 = r0.<org.apache.lucene.util.BitVector: int size>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r10;

     label1:
        $r1 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        $i2 = i0 >> 3;

        $b5 = $r1[$i2];

        $i3 = i0 & 7;

        $i4 = 1 << $i3;

        $i9 = (int) $b5;

        $i6 = $i9 | $i4;

        $b7 = (byte) $i6;

        $r1[$i2] = $b7;

        $i11 = (int) -1;

        r0.<org.apache.lucene.util.BitVector: int count> = $i11;

        return;
    }

    public final boolean getAndSet(int)
    {
        byte[] $r1, $r2;
        org.apache.lucene.util.BitVector r0;
        byte b3, $b8;
        int i0, $i1, i2, $i4, i5, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i16;
        java.lang.String $r9;
        java.lang.ArrayIndexOutOfBoundsException $r11;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r10;

        r0 := @this: org.apache.lucene.util.BitVector;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.util.BitVector: int size>;

        if i0 < $i1 goto label1;

        $r11 = new java.lang.ArrayIndexOutOfBoundsException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bit=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size=");

        $i12 = r0.<org.apache.lucene.util.BitVector: int size>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r11;

     label1:
        i2 = i0 >> 3;

        $r1 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        b3 = $r1[i2];

        $i4 = i0 & 7;

        i5 = 1 << $i4;

        $i13 = (int) b3;

        $i6 = i5 & $i13;

        if $i6 == 0 goto label2;

        return 1;

     label2:
        $r2 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        $i14 = (int) b3;

        $i7 = $i14 | i5;

        $b8 = (byte) $i7;

        $r2[i2] = $b8;

        $i9 = r0.<org.apache.lucene.util.BitVector: int count>;

        $i16 = (int) -1;

        if $i9 == $i16 goto label3;

        $i10 = r0.<org.apache.lucene.util.BitVector: int count>;

        $i11 = $i10 + 1;

        r0.<org.apache.lucene.util.BitVector: int count> = $i11;

     label3:
        return 0;
    }

    public final void clear(int)
    {
        byte[] $r1;
        java.lang.ArrayIndexOutOfBoundsException $r3;
        org.apache.lucene.util.BitVector r0;
        byte $b6, $b8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i7, $i10, $i11, $i13;

        r0 := @this: org.apache.lucene.util.BitVector;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.lucene.util.BitVector: int size>;

        if i0 < $i1 goto label1;

        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>(i0);

        throw $r3;

     label1:
        $r1 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        $i2 = i0 >> 3;

        $b6 = $r1[$i2];

        $i3 = i0 & 7;

        $i4 = 1 << $i3;

        $i10 = (int) -1;

        $i5 = $i4 ^ $i10;

        $i11 = (int) $b6;

        $i7 = $i11 & $i5;

        $b8 = (byte) $i7;

        $r1[$i2] = $b8;

        $i13 = (int) -1;

        r0.<org.apache.lucene.util.BitVector: int count> = $i13;

        return;
    }

    public final boolean get(int)
    {
        byte[] $r1;
        java.lang.AssertionError $r10;
        org.apache.lucene.util.BitVector r0;
        byte $b4;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r8;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r9;

        r0 := @this: org.apache.lucene.util.BitVector;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.BitVector: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $i8 = r0.<org.apache.lucene.util.BitVector: int size>;

        if i0 < $i8 goto label2;

     label1:
        $r10 = new java.lang.AssertionError;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bit ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is out of bounds 0..");

        $i6 = r0.<org.apache.lucene.util.BitVector: int size>;

        $i7 = $i6 - 1;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r10;

     label2:
        $r1 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        $i1 = i0 >> 3;

        $b4 = $r1[$i1];

        $i2 = i0 & 7;

        $i3 = 1 << $i2;

        $i9 = (int) $b4;

        $i5 = $i9 & $i3;

        if $i5 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public final int size()
    {
        int $i0;
        org.apache.lucene.util.BitVector r0;

        r0 := @this: org.apache.lucene.util.BitVector;

        $i0 = r0.<org.apache.lucene.util.BitVector: int size>;

        return $i0;
    }

    public final int length()
    {
        int $i0;
        org.apache.lucene.util.BitVector r0;

        r0 := @this: org.apache.lucene.util.BitVector;

        $i0 = r0.<org.apache.lucene.util.BitVector: int size>;

        return $i0;
    }

    public final int count()
    {
        byte[] $r1, $r2, $r3;
        org.apache.lucene.util.BitVector r0;
        short $s4, $s10;
        byte $b3, $b5;
        int $i0, $i1, i2, i6, i7, $i9, $i11, $i12;

        r0 := @this: org.apache.lucene.util.BitVector;

        $i0 = r0.<org.apache.lucene.util.BitVector: int count>;

        $i9 = (int) -1;

        if $i0 != $i9 goto label3;

        i6 = 0;

        $r1 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        i2 = lengthof $r1;

        i7 = 0;

     label1:
        if i7 >= i2 goto label2;

        $r3 = <org.apache.lucene.util.BitVector: byte[] BYTE_COUNTS>;

        $r2 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        $b3 = $r2[i7];

        $s10 = (short) $b3;

        $s4 = $s10 & 255;

        $i11 = (int) $s4;

        $b5 = $r3[$i11];

        $i12 = (int) $b5;

        i6 = i6 + $i12;

        i7 = i7 + 1;

        goto label1;

     label2:
        r0.<org.apache.lucene.util.BitVector: int count> = i6;

     label3:
        $i1 = r0.<org.apache.lucene.util.BitVector: int count>;

        return $i1;
    }

    public final int getRecomputedCount()
    {
        byte[] $r1, $r2, $r3;
        org.apache.lucene.util.BitVector r0;
        short $s2, $s6;
        byte $b1, $b3;
        int i0, i4, i5, $i7, $i8;

        r0 := @this: org.apache.lucene.util.BitVector;

        i4 = 0;

        $r1 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        i0 = lengthof $r1;

        i5 = 0;

     label1:
        if i5 >= i0 goto label2;

        $r3 = <org.apache.lucene.util.BitVector: byte[] BYTE_COUNTS>;

        $r2 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        $b1 = $r2[i5];

        $s6 = (short) $b1;

        $s2 = $s6 & 255;

        $i7 = (int) $s2;

        $b3 = $r3[$i7];

        $i8 = (int) $b3;

        i4 = i4 + $i8;

        i5 = i5 + 1;

        goto label1;

     label2:
        return i4;
    }

    public final void write(org.apache.lucene.store.Directory, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        org.apache.lucene.util.BitVector r4;
        org.apache.lucene.store.Directory r0;
        int $i1;
        java.lang.String r1, $r3;
        org.apache.lucene.store.IndexOutput $r2;
        boolean $z0;

        r4 := @this: org.apache.lucene.util.BitVector;

        r0 := @parameter0: org.apache.lucene.store.Directory;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexOutput createOutput(java.lang.String)>(r1);

     label1:
        $i1 = (int) -2;

        virtualinvoke $r2.<org.apache.lucene.store.IndexOutput: void writeInt(int)>($i1);

        $r3 = <org.apache.lucene.util.BitVector: java.lang.String CODEC>;

        staticinvoke <org.apache.lucene.util.CodecUtil: org.apache.lucene.store.DataOutput writeHeader(org.apache.lucene.store.DataOutput,java.lang.String,int)>($r2, $r3, 0);

        $z0 = specialinvoke r4.<org.apache.lucene.util.BitVector: boolean isSparse()>();

        if $z0 == 0 goto label2;

        specialinvoke r4.<org.apache.lucene.util.BitVector: void writeDgaps(org.apache.lucene.store.IndexOutput)>($r2);

        goto label3;

     label2:
        specialinvoke r4.<org.apache.lucene.util.BitVector: void writeBits(org.apache.lucene.store.IndexOutput)>($r2);

     label3:
        virtualinvoke $r2.<org.apache.lucene.store.IndexOutput: void close()>();

        goto label6;

     label4:
        $r5 := @caughtexception;

     label5:
        virtualinvoke $r2.<org.apache.lucene.store.IndexOutput: void close()>();

        throw $r5;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private void writeBits(org.apache.lucene.store.IndexOutput) throws java.io.IOException
    {
        byte[] $r2, $r3;
        int $i0, $i1, $i2;
        org.apache.lucene.store.IndexOutput r0;
        org.apache.lucene.util.BitVector r1;

        r1 := @this: org.apache.lucene.util.BitVector;

        r0 := @parameter0: org.apache.lucene.store.IndexOutput;

        $i0 = virtualinvoke r1.<org.apache.lucene.util.BitVector: int size()>();

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeInt(int)>($i0);

        $i1 = virtualinvoke r1.<org.apache.lucene.util.BitVector: int count()>();

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeInt(int)>($i1);

        $r3 = r1.<org.apache.lucene.util.BitVector: byte[] bits>;

        $r2 = r1.<org.apache.lucene.util.BitVector: byte[] bits>;

        $i2 = lengthof $r2;

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeBytes(byte[],int)>($r3, $i2);

        return;
    }

    private void writeDgaps(org.apache.lucene.store.IndexOutput) throws java.io.IOException
    {
        byte[] $r2, $r3, $r4, $r5, $r6;
        org.apache.lucene.util.BitVector r1;
        short $s7, $s14;
        byte $b3, $b5, $b6, $b8;
        int $i0, $i1, i2, $i4, i9, i10, i11, $i13, $i15, $i16;
        org.apache.lucene.store.IndexOutput r0;

        r1 := @this: org.apache.lucene.util.BitVector;

        r0 := @parameter0: org.apache.lucene.store.IndexOutput;

        $i13 = (int) -1;

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeInt(int)>($i13);

        $i0 = virtualinvoke r1.<org.apache.lucene.util.BitVector: int size()>();

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeInt(int)>($i0);

        $i1 = virtualinvoke r1.<org.apache.lucene.util.BitVector: int count()>();

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeInt(int)>($i1);

        i9 = 0;

        i10 = virtualinvoke r1.<org.apache.lucene.util.BitVector: int count()>();

        $r2 = r1.<org.apache.lucene.util.BitVector: byte[] bits>;

        i2 = lengthof $r2;

        i11 = 0;

     label1:
        if i11 >= i2 goto label3;

        if i10 <= 0 goto label3;

        $r3 = r1.<org.apache.lucene.util.BitVector: byte[] bits>;

        $b3 = $r3[i11];

        if $b3 == 0 goto label2;

        $i4 = i11 - i9;

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeVInt(int)>($i4);

        $r4 = r1.<org.apache.lucene.util.BitVector: byte[] bits>;

        $b5 = $r4[i11];

        virtualinvoke r0.<org.apache.lucene.store.IndexOutput: void writeByte(byte)>($b5);

        i9 = i11;

        $r6 = <org.apache.lucene.util.BitVector: byte[] BYTE_COUNTS>;

        $r5 = r1.<org.apache.lucene.util.BitVector: byte[] bits>;

        $b6 = $r5[i11];

        $s14 = (short) $b6;

        $s7 = $s14 & 255;

        $i15 = (int) $s7;

        $b8 = $r6[$i15];

        $i16 = (int) $b8;

        i10 = i10 - $i16;

     label2:
        i11 = i11 + 1;

        goto label1;

     label3:
        return;
    }

    private boolean isSparse()
    {
        byte[] $r1;
        long $l9, $l10, $l12;
        org.apache.lucene.util.BitVector r0;
        byte b3, $b13;
        int $i0, $i1, i2, $i4, $i5, $i6, $i7, $i8, $i11, $i14;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.BitVector;

        $i0 = virtualinvoke r0.<org.apache.lucene.util.BitVector: int count()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        $i1 = lengthof $r1;

        i2 = $i1 / $i0;

        if i2 > 128 goto label2;

        b3 = 1;

        goto label6;

     label2:
        if i2 > 16384 goto label3;

        b3 = 2;

        goto label6;

     label3:
        if i2 > 2097152 goto label4;

        b3 = 3;

        goto label6;

     label4:
        if i2 > 268435456 goto label5;

        b3 = 4;

        goto label6;

     label5:
        b3 = 5;

     label6:
        $i4 = b3 + 1;

        $i5 = 8 * $i4;

        $i6 = virtualinvoke r0.<org.apache.lucene.util.BitVector: int count()>();

        $i7 = $i5 * $i6;

        $i8 = 32 + $i7;

        $l9 = (long) $i8;

        $l10 = 10L * $l9;

        $i11 = virtualinvoke r0.<org.apache.lucene.util.BitVector: int size()>();

        $l12 = (long) $i11;

        $b13 = $l10 cmp $l12;

        $i14 = (int) $b13;

        if $i14 >= 0 goto label7;

        $z0 = 1;

        goto label8;

     label7:
        $z0 = 0;

     label8:
        return $z0;
    }

    public void <init>(org.apache.lucene.store.Directory, java.lang.String) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        org.apache.lucene.store.IndexInput $r3;
        org.apache.lucene.util.BitVector r0;
        org.apache.lucene.store.Directory r1;
        int $i0, $i1, $i2, $i4, $i6;
        java.lang.String r2, $r4;

        r0 := @this: org.apache.lucene.util.BitVector;

        r1 := @parameter0: org.apache.lucene.store.Directory;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = virtualinvoke r1.<org.apache.lucene.store.Directory: org.apache.lucene.store.IndexInput openInput(java.lang.String)>(r2);

     label1:
        $i0 = virtualinvoke $r3.<org.apache.lucene.store.IndexInput: int readInt()>();

        $i4 = (int) -2;

        if $i0 != $i4 goto label2;

        $r4 = <org.apache.lucene.util.BitVector: java.lang.String CODEC>;

        staticinvoke <org.apache.lucene.util.CodecUtil: int checkHeader(org.apache.lucene.store.DataInput,java.lang.String,int,int)>($r3, $r4, 0, 0);

        $i2 = virtualinvoke $r3.<org.apache.lucene.store.IndexInput: int readInt()>();

        r0.<org.apache.lucene.util.BitVector: int size> = $i2;

        goto label3;

     label2:
        r0.<org.apache.lucene.util.BitVector: int size> = $i0;

     label3:
        $i1 = r0.<org.apache.lucene.util.BitVector: int size>;

        $i6 = (int) -1;

        if $i1 != $i6 goto label4;

        specialinvoke r0.<org.apache.lucene.util.BitVector: void readDgaps(org.apache.lucene.store.IndexInput)>($r3);

        goto label5;

     label4:
        specialinvoke r0.<org.apache.lucene.util.BitVector: void readBits(org.apache.lucene.store.IndexInput)>($r3);

     label5:
        virtualinvoke $r3.<org.apache.lucene.store.IndexInput: void close()>();

        goto label8;

     label6:
        $r5 := @caughtexception;

     label7:
        virtualinvoke $r3.<org.apache.lucene.store.IndexInput: void close()>();

        throw $r5;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private void readBits(org.apache.lucene.store.IndexInput) throws java.io.IOException
    {
        byte[] $r2, $r3, $r4;
        org.apache.lucene.store.IndexInput r1;
        org.apache.lucene.util.BitVector r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.util.BitVector;

        r1 := @parameter0: org.apache.lucene.store.IndexInput;

        $i0 = virtualinvoke r1.<org.apache.lucene.store.IndexInput: int readInt()>();

        r0.<org.apache.lucene.util.BitVector: int count> = $i0;

        $i1 = r0.<org.apache.lucene.util.BitVector: int size>;

        $i2 = specialinvoke r0.<org.apache.lucene.util.BitVector: int getNumBytes(int)>($i1);

        $r2 = newarray (byte)[$i2];

        r0.<org.apache.lucene.util.BitVector: byte[] bits> = $r2;

        $r4 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        $r3 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        $i3 = lengthof $r3;

        virtualinvoke r1.<org.apache.lucene.store.IndexInput: void readBytes(byte[],int,int)>($r4, 0, $i3);

        return;
    }

    private void readDgaps(org.apache.lucene.store.IndexInput) throws java.io.IOException
    {
        byte[] $r2, $r3, $r4, $r5;
        org.apache.lucene.util.BitVector r0;
        short $s8, $s12;
        byte $b6, $b7, $b9;
        int $i0, $i1, $i2, $i3, $i4, $i5, i10, i11, $i13, $i14;
        org.apache.lucene.store.IndexInput r1;

        r0 := @this: org.apache.lucene.util.BitVector;

        r1 := @parameter0: org.apache.lucene.store.IndexInput;

        $i0 = virtualinvoke r1.<org.apache.lucene.store.IndexInput: int readInt()>();

        r0.<org.apache.lucene.util.BitVector: int size> = $i0;

        $i1 = virtualinvoke r1.<org.apache.lucene.store.IndexInput: int readInt()>();

        r0.<org.apache.lucene.util.BitVector: int count> = $i1;

        $i2 = r0.<org.apache.lucene.util.BitVector: int size>;

        $i3 = $i2 >> 3;

        $i4 = $i3 + 1;

        $r2 = newarray (byte)[$i4];

        r0.<org.apache.lucene.util.BitVector: byte[] bits> = $r2;

        i10 = 0;

        i11 = virtualinvoke r0.<org.apache.lucene.util.BitVector: int count()>();

     label1:
        if i11 <= 0 goto label2;

        $i5 = virtualinvoke r1.<org.apache.lucene.store.IndexInput: int readVInt()>();

        i10 = i10 + $i5;

        $r3 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        $b6 = virtualinvoke r1.<org.apache.lucene.store.IndexInput: byte readByte()>();

        $r3[i10] = $b6;

        $r5 = <org.apache.lucene.util.BitVector: byte[] BYTE_COUNTS>;

        $r4 = r0.<org.apache.lucene.util.BitVector: byte[] bits>;

        $b7 = $r4[i10];

        $s12 = (short) $b7;

        $s8 = $s12 & 255;

        $i13 = (int) $s8;

        $b9 = $r5[$i13];

        $i14 = (int) $b9;

        i11 = i11 - $i14;

        goto label1;

     label2:
        return;
    }

    static void <clinit>()
    {
        byte[] $r1;
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.util.BitVector: int VERSION_CURRENT> = 0;

        <org.apache.lucene.util.BitVector: int VERSION_START> = 0;

        <org.apache.lucene.util.BitVector: int VERSION_PRE> = -1;

        $r0 = class "Lorg/apache/lucene/util/BitVector;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.BitVector: boolean $assertionsDisabled> = $z1;

        $r1 = newarray (byte)[256];

        $r1[0] = 0;

        $r1[1] = 1;

        $r1[2] = 1;

        $r1[3] = 2;

        $r1[4] = 1;

        $r1[5] = 2;

        $r1[6] = 2;

        $r1[7] = 3;

        $r1[8] = 1;

        $r1[9] = 2;

        $r1[10] = 2;

        $r1[11] = 3;

        $r1[12] = 2;

        $r1[13] = 3;

        $r1[14] = 3;

        $r1[15] = 4;

        $r1[16] = 1;

        $r1[17] = 2;

        $r1[18] = 2;

        $r1[19] = 3;

        $r1[20] = 2;

        $r1[21] = 3;

        $r1[22] = 3;

        $r1[23] = 4;

        $r1[24] = 2;

        $r1[25] = 3;

        $r1[26] = 3;

        $r1[27] = 4;

        $r1[28] = 3;

        $r1[29] = 4;

        $r1[30] = 4;

        $r1[31] = 5;

        $r1[32] = 1;

        $r1[33] = 2;

        $r1[34] = 2;

        $r1[35] = 3;

        $r1[36] = 2;

        $r1[37] = 3;

        $r1[38] = 3;

        $r1[39] = 4;

        $r1[40] = 2;

        $r1[41] = 3;

        $r1[42] = 3;

        $r1[43] = 4;

        $r1[44] = 3;

        $r1[45] = 4;

        $r1[46] = 4;

        $r1[47] = 5;

        $r1[48] = 2;

        $r1[49] = 3;

        $r1[50] = 3;

        $r1[51] = 4;

        $r1[52] = 3;

        $r1[53] = 4;

        $r1[54] = 4;

        $r1[55] = 5;

        $r1[56] = 3;

        $r1[57] = 4;

        $r1[58] = 4;

        $r1[59] = 5;

        $r1[60] = 4;

        $r1[61] = 5;

        $r1[62] = 5;

        $r1[63] = 6;

        $r1[64] = 1;

        $r1[65] = 2;

        $r1[66] = 2;

        $r1[67] = 3;

        $r1[68] = 2;

        $r1[69] = 3;

        $r1[70] = 3;

        $r1[71] = 4;

        $r1[72] = 2;

        $r1[73] = 3;

        $r1[74] = 3;

        $r1[75] = 4;

        $r1[76] = 3;

        $r1[77] = 4;

        $r1[78] = 4;

        $r1[79] = 5;

        $r1[80] = 2;

        $r1[81] = 3;

        $r1[82] = 3;

        $r1[83] = 4;

        $r1[84] = 3;

        $r1[85] = 4;

        $r1[86] = 4;

        $r1[87] = 5;

        $r1[88] = 3;

        $r1[89] = 4;

        $r1[90] = 4;

        $r1[91] = 5;

        $r1[92] = 4;

        $r1[93] = 5;

        $r1[94] = 5;

        $r1[95] = 6;

        $r1[96] = 2;

        $r1[97] = 3;

        $r1[98] = 3;

        $r1[99] = 4;

        $r1[100] = 3;

        $r1[101] = 4;

        $r1[102] = 4;

        $r1[103] = 5;

        $r1[104] = 3;

        $r1[105] = 4;

        $r1[106] = 4;

        $r1[107] = 5;

        $r1[108] = 4;

        $r1[109] = 5;

        $r1[110] = 5;

        $r1[111] = 6;

        $r1[112] = 3;

        $r1[113] = 4;

        $r1[114] = 4;

        $r1[115] = 5;

        $r1[116] = 4;

        $r1[117] = 5;

        $r1[118] = 5;

        $r1[119] = 6;

        $r1[120] = 4;

        $r1[121] = 5;

        $r1[122] = 5;

        $r1[123] = 6;

        $r1[124] = 5;

        $r1[125] = 6;

        $r1[126] = 6;

        $r1[127] = 7;

        $r1[128] = 1;

        $r1[129] = 2;

        $r1[130] = 2;

        $r1[131] = 3;

        $r1[132] = 2;

        $r1[133] = 3;

        $r1[134] = 3;

        $r1[135] = 4;

        $r1[136] = 2;

        $r1[137] = 3;

        $r1[138] = 3;

        $r1[139] = 4;

        $r1[140] = 3;

        $r1[141] = 4;

        $r1[142] = 4;

        $r1[143] = 5;

        $r1[144] = 2;

        $r1[145] = 3;

        $r1[146] = 3;

        $r1[147] = 4;

        $r1[148] = 3;

        $r1[149] = 4;

        $r1[150] = 4;

        $r1[151] = 5;

        $r1[152] = 3;

        $r1[153] = 4;

        $r1[154] = 4;

        $r1[155] = 5;

        $r1[156] = 4;

        $r1[157] = 5;

        $r1[158] = 5;

        $r1[159] = 6;

        $r1[160] = 2;

        $r1[161] = 3;

        $r1[162] = 3;

        $r1[163] = 4;

        $r1[164] = 3;

        $r1[165] = 4;

        $r1[166] = 4;

        $r1[167] = 5;

        $r1[168] = 3;

        $r1[169] = 4;

        $r1[170] = 4;

        $r1[171] = 5;

        $r1[172] = 4;

        $r1[173] = 5;

        $r1[174] = 5;

        $r1[175] = 6;

        $r1[176] = 3;

        $r1[177] = 4;

        $r1[178] = 4;

        $r1[179] = 5;

        $r1[180] = 4;

        $r1[181] = 5;

        $r1[182] = 5;

        $r1[183] = 6;

        $r1[184] = 4;

        $r1[185] = 5;

        $r1[186] = 5;

        $r1[187] = 6;

        $r1[188] = 5;

        $r1[189] = 6;

        $r1[190] = 6;

        $r1[191] = 7;

        $r1[192] = 2;

        $r1[193] = 3;

        $r1[194] = 3;

        $r1[195] = 4;

        $r1[196] = 3;

        $r1[197] = 4;

        $r1[198] = 4;

        $r1[199] = 5;

        $r1[200] = 3;

        $r1[201] = 4;

        $r1[202] = 4;

        $r1[203] = 5;

        $r1[204] = 4;

        $r1[205] = 5;

        $r1[206] = 5;

        $r1[207] = 6;

        $r1[208] = 3;

        $r1[209] = 4;

        $r1[210] = 4;

        $r1[211] = 5;

        $r1[212] = 4;

        $r1[213] = 5;

        $r1[214] = 5;

        $r1[215] = 6;

        $r1[216] = 4;

        $r1[217] = 5;

        $r1[218] = 5;

        $r1[219] = 6;

        $r1[220] = 5;

        $r1[221] = 6;

        $r1[222] = 6;

        $r1[223] = 7;

        $r1[224] = 3;

        $r1[225] = 4;

        $r1[226] = 4;

        $r1[227] = 5;

        $r1[228] = 4;

        $r1[229] = 5;

        $r1[230] = 5;

        $r1[231] = 6;

        $r1[232] = 4;

        $r1[233] = 5;

        $r1[234] = 5;

        $r1[235] = 6;

        $r1[236] = 5;

        $r1[237] = 6;

        $r1[238] = 6;

        $r1[239] = 7;

        $r1[240] = 4;

        $r1[241] = 5;

        $r1[242] = 5;

        $r1[243] = 6;

        $r1[244] = 5;

        $r1[245] = 6;

        $r1[246] = 6;

        $r1[247] = 7;

        $r1[248] = 5;

        $r1[249] = 6;

        $r1[250] = 6;

        $r1[251] = 7;

        $r1[252] = 6;

        $r1[253] = 7;

        $r1[254] = 7;

        $r1[255] = 8;

        <org.apache.lucene.util.BitVector: byte[] BYTE_COUNTS> = $r1;

        <org.apache.lucene.util.BitVector: java.lang.String CODEC> = "BitVector";

        return;
    }
}
