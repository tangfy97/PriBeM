class com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl extends com.google.inject.internal.util.$CustomConcurrentHashMap$Impl
{
    static final long serialVersionUID;
    final com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingStrategy computingStrategy;
    final com.google.inject.internal.util.$Function computer;

    void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingStrategy, com.google.inject.internal.util.$CustomConcurrentHashMap$Builder, com.google.inject.internal.util.$Function)
    {
        com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl r0;
        com.google.inject.internal.util.$Function r3;
        com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingStrategy r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Builder r2;

        r0 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl;

        r1 := @parameter0: com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingStrategy;

        r2 := @parameter1: com.google.inject.internal.util.$CustomConcurrentHashMap$Builder;

        r3 := @parameter2: com.google.inject.internal.util.$Function;

        specialinvoke r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl: void <init>(com.google.inject.internal.util.$CustomConcurrentHashMap$Strategy,com.google.inject.internal.util.$CustomConcurrentHashMap$Builder)>(r1, r2);

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl: com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingStrategy computingStrategy> = r1;

        r0.<com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl: com.google.inject.internal.util.$Function computer> = r3;

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.NullPointerException $r9, $r14;
        java.util.concurrent.atomic.AtomicReferenceArray $r13;
        java.lang.Thread $r3, $r4, $r16;
        boolean z0, z1, z2, z3, z4, z5;
        com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl r1;
        com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingStrategy $r7, $r11, $r22;
        java.lang.Throwable $r15, $r18, $r19;
        com.google.inject.internal.util.$Function $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.InterruptedException $r17;
        com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment $r2;
        java.lang.Object r0, $r5, $r8, $r10, $r12, $r20, r21, $r23;

        r1 := @this: com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label01;

        $r14 = new java.lang.NullPointerException;

        specialinvoke $r14.<java.lang.NullPointerException: void <init>(java.lang.String)>("key");

        throw $r14;

     label01:
        $i0 = virtualinvoke r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl: int hash(java.lang.Object)>(r0);

        $r2 = virtualinvoke r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl: com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment segmentFor(int)>($i0);

     label02:
        $r20 = virtualinvoke $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.lang.Object getEntry(java.lang.Object,int)>(r0, $i0);

        r21 = $r20;

        if $r20 != null goto label16;

        z0 = 0;

        virtualinvoke $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void lock()>();

     label03:
        $r5 = virtualinvoke $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.lang.Object getEntry(java.lang.Object,int)>(r0, $i0);

        r21 = $r5;

        if $r5 != null goto label05;

        z0 = 1;

        i7 = $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count>;

        i8 = i7 + 1;

        $i1 = $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int threshold>;

        if i7 <= $i1 goto label04;

        virtualinvoke $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void expand()>();

     label04:
        $r13 = $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: java.util.concurrent.atomic.AtomicReferenceArray table>;

        $i2 = virtualinvoke $r13.<java.util.concurrent.atomic.AtomicReferenceArray: int length()>();

        $i3 = $i2 - 1;

        $i6 = $i0 & $i3;

        $r10 = virtualinvoke $r13.<java.util.concurrent.atomic.AtomicReferenceArray: java.lang.Object get(int)>($i6);

        $i4 = $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount>;

        $i5 = $i4 + 1;

        $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int modCount> = $i5;

        $r11 = r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl: com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingStrategy computingStrategy>;

        $r12 = interfaceinvoke $r11.<com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingStrategy: java.lang.Object newEntry(java.lang.Object,int,java.lang.Object)>(r0, $i0, $r10);

        r21 = $r12;

        virtualinvoke $r13.<java.util.concurrent.atomic.AtomicReferenceArray: void set(int,java.lang.Object)>($i6, $r12);

        $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: int count> = i8;

     label05:
        virtualinvoke $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        goto label08;

     label06:
        $r19 := @caughtexception;

     label07:
        virtualinvoke $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: void unlock()>();

        throw $r19;

     label08:
        if z0 == 0 goto label16;

        z1 = 0;

     label09:
        $r7 = r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl: com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingStrategy computingStrategy>;

        $r6 = r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl: com.google.inject.internal.util.$Function computer>;

        $r8 = interfaceinvoke $r7.<com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingStrategy: java.lang.Object compute(java.lang.Object,java.lang.Object,com.google.inject.internal.util.$Function)>(r0, r21, $r6);

        if $r8 != null goto label10;

        $r9 = new java.lang.NullPointerException;

        specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("compute() returned null unexpectedly");

        throw $r9;

     label10:
        z1 = 1;

     label11:
        if 1 != 0 goto label12;

        virtualinvoke $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: boolean removeEntry(java.lang.Object,int)>(r21, $i0);

     label12:
        return $r8;

     label13:
        $r18 := @caughtexception;

     label14:
        if 0 != 0 goto label15;

        virtualinvoke $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: boolean removeEntry(java.lang.Object,int)>(r21, $i0);

     label15:
        throw $r18;

     label16:
        z2 = 0;

        z5 = 0;

        z4 = 0;

        z3 = 0;

     label17:
        $r22 = r1.<com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl: com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingStrategy computingStrategy>;

        $r23 = interfaceinvoke $r22.<com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingStrategy: java.lang.Object waitForValue(java.lang.Object)>(r21);

        if $r23 != null goto label19;

        virtualinvoke $r2.<com.google.inject.internal.util.$CustomConcurrentHashMap$Impl$Segment: boolean removeEntry(java.lang.Object,int)>(r21, $i0);

     label18:
        if z3 == 0 goto label02;

        $r4 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r4.<java.lang.Thread: void interrupt()>();

        goto label02;

     label19:
        if z4 == 0 goto label20;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label20:
        return $r23;

     label21:
        $r17 := @caughtexception;

        z2 = 1;

        z5 = 1;

        z4 = 1;

        z3 = 1;

        goto label17;

     label22:
        $r15 := @caughtexception;

     label23:
        if z5 == 0 goto label24;

        $r16 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r16.<java.lang.Thread: void interrupt()>();

     label24:
        throw $r15;

        catch java.lang.Throwable from label03 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.lang.Throwable from label09 to label11 with label13;
        catch java.lang.Throwable from label13 to label14 with label13;
        catch java.lang.InterruptedException from label17 to label18 with label21;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label21 to label23 with label22;
    }

    public static void <clinit>()
    {
        <com.google.inject.internal.util.$CustomConcurrentHashMap$ComputingImpl: long serialVersionUID> = 0L;

        return;
    }
}
