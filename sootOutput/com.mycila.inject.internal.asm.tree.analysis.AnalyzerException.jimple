public class com.mycila.inject.internal.asm.tree.analysis.AnalyzerException extends java.lang.Exception
{
    public final com.mycila.inject.internal.asm.tree.AbstractInsnNode node;

    public void <init>(com.mycila.inject.internal.asm.tree.AbstractInsnNode, java.lang.String)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r2;
        com.mycila.inject.internal.asm.tree.analysis.AnalyzerException r0;
        java.lang.String r1;

        r0 := @this: com.mycila.inject.internal.asm.tree.analysis.AnalyzerException;

        r2 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1);

        r0.<com.mycila.inject.internal.asm.tree.analysis.AnalyzerException: com.mycila.inject.internal.asm.tree.AbstractInsnNode node> = r2;

        return;
    }

    public void <init>(com.mycila.inject.internal.asm.tree.AbstractInsnNode, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r3;
        com.mycila.inject.internal.asm.tree.analysis.AnalyzerException r0;
        java.lang.String r1;

        r0 := @this: com.mycila.inject.internal.asm.tree.analysis.AnalyzerException;

        r3 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2);

        r0.<com.mycila.inject.internal.asm.tree.analysis.AnalyzerException: com.mycila.inject.internal.asm.tree.AbstractInsnNode node> = r3;

        return;
    }

    public void <init>(com.mycila.inject.internal.asm.tree.AbstractInsnNode, java.lang.String, java.lang.Object, com.mycila.inject.internal.asm.tree.analysis.Value)
    {
        com.mycila.inject.internal.asm.tree.AbstractInsnNode r13;
        com.mycila.inject.internal.asm.tree.analysis.AnalyzerException r0;
        java.lang.StringBuffer $r1, $r3, $r4, $r5, $r6, $r8, $r9, $r11;
        com.mycila.inject.internal.asm.tree.analysis.Value r10;
        java.lang.Object r7;
        java.lang.String r2, $r12, $r14;

        r0 := @this: com.mycila.inject.internal.asm.tree.analysis.AnalyzerException;

        r13 := @parameter0: com.mycila.inject.internal.asm.tree.AbstractInsnNode;

        r2 := @parameter1: java.lang.String;

        r7 := @parameter2: java.lang.Object;

        r10 := @parameter3: com.mycila.inject.internal.asm.tree.analysis.Value;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        if r2 != null goto label1;

        $r14 = "Expected ";

        goto label2;

     label1:
        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": expected ");

        $r14 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r6 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", but found ");

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>($r12);

        r0.<com.mycila.inject.internal.asm.tree.analysis.AnalyzerException: com.mycila.inject.internal.asm.tree.AbstractInsnNode node> = r13;

        return;
    }
}
