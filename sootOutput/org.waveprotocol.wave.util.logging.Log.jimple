public class org.waveprotocol.wave.util.logging.Log extends java.lang.Object
{
    private static final java.lang.ThreadLocal context;
    private final java.util.logging.Logger logger;

    public static org.waveprotocol.wave.util.logging.Log get(java.lang.Class)
    {
        org.waveprotocol.wave.util.logging.Log $r0;
        java.lang.Class r1;

        r1 := @parameter0: java.lang.Class;

        $r0 = new org.waveprotocol.wave.util.logging.Log;

        specialinvoke $r0.<org.waveprotocol.wave.util.logging.Log: void <init>(java.lang.Class)>(r1);

        return $r0;
    }

    private void <init>(java.lang.Class)
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.Class r1;
        java.lang.String $r2;
        java.util.logging.Logger $r3;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.Class;

        $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r2);

        specialinvoke r0.<org.waveprotocol.wave.util.logging.Log: void <init>(java.util.logging.Logger)>($r3);

        return;
    }

    public void <init>(java.util.logging.Logger)
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.util.logging.Logger r1;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.util.logging.Logger;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.util.logging.Log: java.util.logging.Logger logger> = r1;

        return;
    }

    public void config(java.lang.String)
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r1;
        java.util.logging.Level $r2;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.logging.Level: java.util.logging.Level CONFIG>;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, r1, null);

        return;
    }

    public void config(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r1;
        java.util.logging.Level $r3;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = <java.util.logging.Level: java.util.logging.Level CONFIG>;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, r1, r2);

        return;
    }

    private java.lang.String contextualiseMessage(java.lang.String)
    {
        java.lang.ThreadLocal $r0;
        java.util.Map r2;
        java.lang.Object $r1;
        java.lang.StringBuilder $r3;
        org.waveprotocol.wave.util.logging.Log r6;
        java.lang.String r4, $r5;
        boolean $z0;

        r6 := @this: org.waveprotocol.wave.util.logging.Log;

        r4 := @parameter0: java.lang.String;

        $r0 = <org.waveprotocol.wave.util.logging.Log: java.lang.ThreadLocal context>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (java.util.Map) $r1;

        $z0 = interfaceinvoke r2.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return r4;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public void fine(java.lang.String)
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r1;
        java.util.logging.Level $r2;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, r1, null);

        return;
    }

    public void fine(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r1;
        java.util.logging.Level $r3;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, r1, r2);

        return;
    }

    public void finer(java.lang.String)
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r1;
        java.util.logging.Level $r2;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, r1, null);

        return;
    }

    public void finer(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r1;
        java.util.logging.Level $r3;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINER>;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, r1, r2);

        return;
    }

    public void finest(java.lang.String)
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r1;
        java.util.logging.Level $r2;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, r1, null);

        return;
    }

    public void finest(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r1;
        java.util.logging.Level $r3;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, r1, r2);

        return;
    }

    public java.util.logging.Logger getLogger()
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.util.logging.Logger $r1;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        $r1 = r0.<org.waveprotocol.wave.util.logging.Log: java.util.logging.Logger logger>;

        return $r1;
    }

    public void info(java.lang.String)
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r1;
        java.util.logging.Level $r2;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, r1, null);

        return;
    }

    public void info(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r1;
        java.util.logging.Level $r3;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = <java.util.logging.Level: java.util.logging.Level INFO>;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, r1, r2);

        return;
    }

    public boolean isConfigLoggable()
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        $r2 = r0.<org.waveprotocol.wave.util.logging.Log: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level CONFIG>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    public boolean isFineLoggable()
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        $r2 = r0.<org.waveprotocol.wave.util.logging.Log: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    public boolean isFinerLoggable()
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        $r2 = r0.<org.waveprotocol.wave.util.logging.Log: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINER>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    public boolean isFinestLoggable()
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        $r2 = r0.<org.waveprotocol.wave.util.logging.Log: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINEST>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    public boolean isInfoLoggable()
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        $r2 = r0.<org.waveprotocol.wave.util.logging.Log: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    public boolean isSevereLoggable()
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        $r2 = r0.<org.waveprotocol.wave.util.logging.Log: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    public boolean isWarningLoggable()
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.util.logging.Logger $r2;
        java.util.logging.Level $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        $r2 = r0.<org.waveprotocol.wave.util.logging.Log: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        return $z0;
    }

    public void log(java.util.logging.Level, java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r6;
        java.util.logging.Logger $r2, $r7;
        org.waveprotocol.wave.util.logging.Log$MyLogRecord $r3;
        java.util.logging.Level r1;
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r4, $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.util.logging.Level;

        r4 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.Throwable;

        $r2 = r0.<org.waveprotocol.wave.util.logging.Log: java.util.logging.Logger logger>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = new org.waveprotocol.wave.util.logging.Log$MyLogRecord;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.util.logging.Log: java.lang.String contextualiseMessage(java.lang.String)>(r4);

        specialinvoke $r3.<org.waveprotocol.wave.util.logging.Log$MyLogRecord: void <init>(java.util.logging.Level,java.lang.String,java.lang.Throwable)>(r1, $r5, r6);

        $r7 = r0.<org.waveprotocol.wave.util.logging.Log: java.util.logging.Logger logger>;

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.LogRecord)>($r3);

        return;
    }

    public void putContext(java.lang.String, java.lang.String)
    {
        java.lang.ThreadLocal $r0;
        java.util.Map $r4;
        java.lang.Object $r1;
        org.waveprotocol.wave.util.logging.Log r5;
        java.lang.String r2, r3;

        r5 := @this: org.waveprotocol.wave.util.logging.Log;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = <org.waveprotocol.wave.util.logging.Log: java.lang.ThreadLocal context>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r4 = (java.util.Map) $r1;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

        return;
    }

    public boolean removeContext(java.lang.String)
    {
        java.lang.ThreadLocal $r0;
        java.util.Map $r3;
        java.lang.Object $r1, $r4;
        org.waveprotocol.wave.util.logging.Log r5;
        java.lang.String r2;
        boolean $z0;

        r5 := @this: org.waveprotocol.wave.util.logging.Log;

        r2 := @parameter0: java.lang.String;

        $r0 = <org.waveprotocol.wave.util.logging.Log: java.lang.ThreadLocal context>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r3 = (java.util.Map) $r1;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r2);

        if $r4 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void severe(java.lang.String)
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r1;
        java.util.logging.Level $r2;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, r1, null);

        return;
    }

    public void severe(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r1;
        java.util.logging.Level $r3;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, r1, r2);

        return;
    }

    public void warning(java.lang.String)
    {
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r1;
        java.util.logging.Level $r2;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.String;

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r2, r1, null);

        return;
    }

    public void warning(java.lang.String, java.lang.Throwable)
    {
        java.lang.Throwable r2;
        org.waveprotocol.wave.util.logging.Log r0;
        java.lang.String r1;
        java.util.logging.Level $r3;

        r0 := @this: org.waveprotocol.wave.util.logging.Log;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke r0.<org.waveprotocol.wave.util.logging.Log: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r3, r1, r2);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.util.logging.Log$1 $r0;

        $r0 = new org.waveprotocol.wave.util.logging.Log$1;

        specialinvoke $r0.<org.waveprotocol.wave.util.logging.Log$1: void <init>()>();

        <org.waveprotocol.wave.util.logging.Log: java.lang.ThreadLocal context> = $r0;

        return;
    }
}
