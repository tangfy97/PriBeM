class com.mycila.inject.internal.guava.collect.BstNode extends java.lang.Object
{
    private final java.lang.Object key;
    private final com.mycila.inject.internal.guava.collect.BstNode left;
    private final com.mycila.inject.internal.guava.collect.BstNode right;

    void <init>(java.lang.Object, com.mycila.inject.internal.guava.collect.BstNode, com.mycila.inject.internal.guava.collect.BstNode)
    {
        java.lang.Object r1, $r2;
        com.mycila.inject.internal.guava.collect.BstNode r0, r3, r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstNode;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: com.mycila.inject.internal.guava.collect.BstNode;

        r4 := @parameter2: com.mycila.inject.internal.guava.collect.BstNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        r0.<com.mycila.inject.internal.guava.collect.BstNode: java.lang.Object key> = $r2;

        r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode left> = r3;

        r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode right> = r4;

        return;
    }

    public final java.lang.Object getKey()
    {
        java.lang.Object $r1;
        com.mycila.inject.internal.guava.collect.BstNode r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstNode;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.BstNode: java.lang.Object key>;

        return $r1;
    }

    public final com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)
    {
        java.lang.AssertionError $r5;
        com.mycila.inject.internal.guava.collect.BstNode r2, $r3, $r4;
        int[] $r1;
        com.mycila.inject.internal.guava.collect.BstSide r0;
        int $i0, $i1;

        r2 := @this: com.mycila.inject.internal.guava.collect.BstNode;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.BstSide;

        $r1 = <com.mycila.inject.internal.guava.collect.BstNode$1: int[] $SwitchMap$com$google$common$collect$BstSide>;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstSide: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = r2.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode left>;

        return $r4;

     label2:
        $r3 = r2.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode right>;

        return $r3;

     label3:
        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;
    }

    public final boolean hasChild(com.mycila.inject.internal.guava.collect.BstSide)
    {
        com.mycila.inject.internal.guava.collect.BstSide r1;
        com.mycila.inject.internal.guava.collect.BstNode r0, $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstNode;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.BstSide;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final com.mycila.inject.internal.guava.collect.BstNode getChild(com.mycila.inject.internal.guava.collect.BstSide)
    {
        com.mycila.inject.internal.guava.collect.BstSide r1;
        com.mycila.inject.internal.guava.collect.BstNode r0, $r2;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.BstNode;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.BstSide;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode childOrNull(com.mycila.inject.internal.guava.collect.BstSide)>(r1);

        if $r2 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkState(boolean)>($z0);

        return $r2;
    }

    protected final boolean orderingInvariantHolds(java.util.Comparator)
    {
        int $i0, $i1;
        boolean $z0, $z1, z2, $z3, $z4, $z5;
        com.mycila.inject.internal.guava.collect.BstNode r1, $r4, $r8;
        com.mycila.inject.internal.guava.collect.BstSide $r2, $r3, $r7, $r11;
        java.lang.Object $r5, $r6, $r9, $r10;
        java.util.Comparator r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.BstNode;

        r0 := @parameter0: java.util.Comparator;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        z2 = 1;

        $r2 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $z0 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.BstNode: boolean hasChild(com.mycila.inject.internal.guava.collect.BstSide)>($r2);

        if $z0 == 0 goto label3;

        $r7 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide LEFT>;

        $r8 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode getChild(com.mycila.inject.internal.guava.collect.BstSide)>($r7);

        $r9 = virtualinvoke $r8.<com.mycila.inject.internal.guava.collect.BstNode: java.lang.Object getKey()>();

        $r10 = r1.<com.mycila.inject.internal.guava.collect.BstNode: java.lang.Object key>;

        $i1 = interfaceinvoke r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r9, $r10);

        if $i1 >= 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        z2 = 1 & $z3;

     label3:
        $r11 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $z4 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.BstNode: boolean hasChild(com.mycila.inject.internal.guava.collect.BstSide)>($r11);

        if $z4 == 0 goto label6;

        $z1 = z2;

        $r3 = <com.mycila.inject.internal.guava.collect.BstSide: com.mycila.inject.internal.guava.collect.BstSide RIGHT>;

        $r4 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.BstNode: com.mycila.inject.internal.guava.collect.BstNode getChild(com.mycila.inject.internal.guava.collect.BstSide)>($r3);

        $r5 = virtualinvoke $r4.<com.mycila.inject.internal.guava.collect.BstNode: java.lang.Object getKey()>();

        $r6 = r1.<com.mycila.inject.internal.guava.collect.BstNode: java.lang.Object key>;

        $i0 = interfaceinvoke r0.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r5, $r6);

        if $i0 <= 0 goto label4;

        $z5 = 1;

        goto label5;

     label4:
        $z5 = 0;

     label5:
        z2 = $z1 & $z5;

     label6:
        return z2;
    }
}
