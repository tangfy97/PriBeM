public class javax.ws.rs.NotAllowedException extends javax.ws.rs.ClientErrorException
{
    private static final long serialVersionUID;

    public transient void <init>(java.lang.String[])
    {
        javax.ws.rs.core.Response $r5, $r6;
        javax.ws.rs.core.Response$ResponseBuilder $r2, $r4;
        javax.ws.rs.core.Response$Status $r1;
        java.lang.String[] r3;
        javax.ws.rs.NotAllowedException r0;

        r0 := @this: javax.ws.rs.NotAllowedException;

        r3 := @parameter0: java.lang.String[];

        $r1 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status METHOD_NOT_ALLOWED>;

        $r2 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status)>($r1);

        $r4 = virtualinvoke $r2.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder allow(java.lang.String[])>(r3);

        $r5 = virtualinvoke $r4.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>();

        $r6 = staticinvoke <javax.ws.rs.NotAllowedException: javax.ws.rs.core.Response validateAllow(javax.ws.rs.core.Response)>($r5);

        specialinvoke r0.<javax.ws.rs.ClientErrorException: void <init>(javax.ws.rs.core.Response)>($r6);

        return;
    }

    public void <init>(javax.ws.rs.core.Response) throws java.lang.IllegalArgumentException
    {
        javax.ws.rs.core.Response r1, $r3, $r4;
        javax.ws.rs.core.Response$Status $r2;
        javax.ws.rs.NotAllowedException r0;

        r0 := @this: javax.ws.rs.NotAllowedException;

        r1 := @parameter0: javax.ws.rs.core.Response;

        $r2 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status METHOD_NOT_ALLOWED>;

        $r3 = staticinvoke <javax.ws.rs.NotAllowedException: javax.ws.rs.core.Response validate(javax.ws.rs.core.Response,javax.ws.rs.core.Response$Status)>(r1, $r2);

        $r4 = staticinvoke <javax.ws.rs.NotAllowedException: javax.ws.rs.core.Response validateAllow(javax.ws.rs.core.Response)>($r3);

        specialinvoke r0.<javax.ws.rs.ClientErrorException: void <init>(javax.ws.rs.core.Response)>($r4);

        return;
    }

    public transient void <init>(java.lang.Throwable, java.lang.String[])
    {
        java.lang.Throwable r7;
        java.lang.String[] r3;
        javax.ws.rs.NotAllowedException r0;
        javax.ws.rs.core.Response $r5, $r6;
        javax.ws.rs.core.Response$ResponseBuilder $r2, $r4;
        javax.ws.rs.core.Response$Status $r1;

        r0 := @this: javax.ws.rs.NotAllowedException;

        r7 := @parameter0: java.lang.Throwable;

        r3 := @parameter1: java.lang.String[];

        $r1 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status METHOD_NOT_ALLOWED>;

        $r2 = staticinvoke <javax.ws.rs.core.Response: javax.ws.rs.core.Response$ResponseBuilder status(javax.ws.rs.core.Response$Status)>($r1);

        $r4 = virtualinvoke $r2.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response$ResponseBuilder allow(java.lang.String[])>(r3);

        $r5 = virtualinvoke $r4.<javax.ws.rs.core.Response$ResponseBuilder: javax.ws.rs.core.Response build()>();

        $r6 = staticinvoke <javax.ws.rs.NotAllowedException: javax.ws.rs.core.Response validateAllow(javax.ws.rs.core.Response)>($r5);

        specialinvoke r0.<javax.ws.rs.ClientErrorException: void <init>(javax.ws.rs.core.Response,java.lang.Throwable)>($r6, r7);

        return;
    }

    public void <init>(javax.ws.rs.core.Response, java.lang.Throwable) throws java.lang.IllegalArgumentException
    {
        java.lang.Throwable r5;
        javax.ws.rs.core.Response r1, $r3, $r4;
        javax.ws.rs.core.Response$Status $r2;
        javax.ws.rs.NotAllowedException r0;

        r0 := @this: javax.ws.rs.NotAllowedException;

        r1 := @parameter0: javax.ws.rs.core.Response;

        r5 := @parameter1: java.lang.Throwable;

        $r2 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status METHOD_NOT_ALLOWED>;

        $r3 = staticinvoke <javax.ws.rs.NotAllowedException: javax.ws.rs.core.Response validate(javax.ws.rs.core.Response,javax.ws.rs.core.Response$Status)>(r1, $r2);

        $r4 = staticinvoke <javax.ws.rs.NotAllowedException: javax.ws.rs.core.Response validateAllow(javax.ws.rs.core.Response)>($r3);

        specialinvoke r0.<javax.ws.rs.ClientErrorException: void <init>(javax.ws.rs.core.Response,java.lang.Throwable)>($r4, r5);

        return;
    }

    private static javax.ws.rs.core.Response validateAllow(javax.ws.rs.core.Response) throws java.lang.IllegalArgumentException
    {
        javax.ws.rs.core.MultivaluedMap $r1;
        javax.ws.rs.core.Response r0;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @parameter0: javax.ws.rs.core.Response;

        $r1 = virtualinvoke r0.<javax.ws.rs.core.Response: javax.ws.rs.core.MultivaluedMap getHeaders()>();

        $z0 = interfaceinvoke $r1.<javax.ws.rs.core.MultivaluedMap: boolean containsKey(java.lang.Object)>("Allow");

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Response does not contain required \'Allow\' HTTP header.");

        throw $r2;

     label1:
        return r0;
    }

    public static void <clinit>()
    {
        <javax.ws.rs.NotAllowedException: long serialVersionUID> = -586776054369626119L;

        return;
    }
}
