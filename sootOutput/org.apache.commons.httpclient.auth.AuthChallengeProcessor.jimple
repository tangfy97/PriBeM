public final class org.apache.commons.httpclient.auth.AuthChallengeProcessor extends java.lang.Object
{
    private static final org.apache.commons.logging.Log LOG;
    private org.apache.commons.httpclient.params.HttpParams params;
    static java.lang.Class class$org$apache$commons$httpclient$auth$AuthChallengeProcessor;

    public void <init>(org.apache.commons.httpclient.params.HttpParams)
    {
        org.apache.commons.httpclient.auth.AuthChallengeProcessor r0;
        org.apache.commons.httpclient.params.HttpParams r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: org.apache.commons.httpclient.auth.AuthChallengeProcessor;

        r1 := @parameter0: org.apache.commons.httpclient.params.HttpParams;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.params.HttpParams params> = null;

        if r1 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parameter collection may not be null");

        throw $r2;

     label1:
        r0.<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.params.HttpParams params> = r1;

        return;
    }

    public org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map) throws org.apache.commons.httpclient.auth.AuthChallengeException
    {
        java.lang.IllegalStateException $r33;
        org.apache.commons.httpclient.auth.AuthChallengeException $r5, $r34;
        java.util.Map r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Collection r36;
        org.apache.commons.httpclient.auth.AuthScheme r38;
        org.apache.commons.httpclient.params.HttpParams $r2;
        org.apache.commons.httpclient.auth.AuthChallengeProcessor r1;
        java.lang.StringBuffer $r6, $r7, $r8, $r15, $r17, $r18, $r19, $r22, $r24, $r25, $r27, $r29, $r30;
        java.lang.String $r9, r11, $r12, $r20, $r26, $r31, $r35, r39;
        java.util.Iterator $r4;
        java.lang.IllegalArgumentException $r32;
        java.lang.Object $r3, $r10, $r13;
        org.apache.commons.logging.Log $r14, $r16, $r21, $r23, $r28, $r37;

        r1 := @this: org.apache.commons.httpclient.auth.AuthChallengeProcessor;

        r0 := @parameter0: java.util.Map;

        if r0 != null goto label01;

        $r32 = new java.lang.IllegalArgumentException;

        specialinvoke $r32.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Challenge map may not be null");

        throw $r32;

     label01:
        $r2 = r1.<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.params.HttpParams params>;

        $r3 = interfaceinvoke $r2.<org.apache.commons.httpclient.params.HttpParams: java.lang.Object getParameter(java.lang.String)>("http.auth.scheme-priority");

        r36 = (java.util.Collection) $r3;

        if r36 == null goto label02;

        $z2 = interfaceinvoke r36.<java.util.Collection: boolean isEmpty()>();

        if $z2 == 0 goto label03;

     label02:
        r36 = staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: java.util.List getDefaultAuthPrefs()>();

     label03:
        $r37 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $z3 = interfaceinvoke $r37.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label04;

        $r28 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Supported authentication schemes in the order of preference: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r36);

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r28.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r31);

     label04:
        r38 = null;

        $r4 = interfaceinvoke r36.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z4 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        $r10 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r10;

        $r12 = virtualinvoke r11.<java.lang.String: java.lang.String toLowerCase()>();

        $r13 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        r39 = (java.lang.String) $r13;

        if r39 == null goto label09;

        $r21 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $z1 = interfaceinvoke $r21.<org.apache.commons.logging.Log: boolean isInfoEnabled()>();

        if $z1 == 0 goto label06;

        $r23 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $r22 = new java.lang.StringBuffer;

        specialinvoke $r22.<java.lang.StringBuffer: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" authentication scheme selected");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r23.<org.apache.commons.logging.Log: void info(java.lang.Object)>($r26);

     label06:
        r38 = staticinvoke <org.apache.commons.httpclient.auth.AuthPolicy: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme(java.lang.String)>(r11);

     label07:
        goto label11;

     label08:
        $r33 := @caughtexception;

        $r34 = new org.apache.commons.httpclient.auth.AuthChallengeException;

        $r35 = virtualinvoke $r33.<java.lang.IllegalStateException: java.lang.String getMessage()>();

        specialinvoke $r34.<org.apache.commons.httpclient.auth.AuthChallengeException: void <init>(java.lang.String)>($r35);

        throw $r34;

     label09:
        $r14 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $z0 = interfaceinvoke $r14.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label10;

        $r16 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Challenge for ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" authentication scheme not available");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r16.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r20);

     label10:
        goto label05;

     label11:
        if r38 != null goto label12;

        $r5 = new org.apache.commons.httpclient.auth.AuthChallengeException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Unable to respond to any of these challenges: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.commons.httpclient.auth.AuthChallengeException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label12:
        return r38;

        catch java.lang.IllegalStateException from label06 to label07 with label08;
    }

    public org.apache.commons.httpclient.auth.AuthScheme processChallenge(org.apache.commons.httpclient.auth.AuthState, java.util.Map) throws org.apache.commons.httpclient.auth.MalformedChallengeException, org.apache.commons.httpclient.auth.AuthenticationException
    {
        org.apache.commons.httpclient.auth.AuthChallengeProcessor r2;
        java.lang.StringBuffer $r8, $r9, $r10, $r12, $r14, $r15;
        java.util.Map r1;
        java.lang.String $r4, $r11, $r16, $r17, $r22;
        boolean $z0, $z1;
        org.apache.commons.httpclient.auth.AuthScheme $r3, $r18, $r21;
        java.lang.IllegalArgumentException $r19, $r20;
        org.apache.commons.httpclient.auth.AuthenticationException $r7;
        java.lang.Object $r5;
        org.apache.commons.logging.Log $r6, $r13, $r23;
        org.apache.commons.httpclient.auth.AuthState r0;

        r2 := @this: org.apache.commons.httpclient.auth.AuthChallengeProcessor;

        r0 := @parameter0: org.apache.commons.httpclient.auth.AuthState;

        r1 := @parameter1: java.util.Map;

        if r0 != null goto label1;

        $r20 = new java.lang.IllegalArgumentException;

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Authentication state may not be null");

        throw $r20;

     label1:
        if r1 != null goto label2;

        $r19 = new java.lang.IllegalArgumentException;

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Challenge map may not be null");

        throw $r19;

     label2:
        $z0 = virtualinvoke r0.<org.apache.commons.httpclient.auth.AuthState: boolean isPreemptive()>();

        if $z0 != 0 goto label3;

        $r18 = virtualinvoke r0.<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>();

        if $r18 != null goto label4;

     label3:
        $r3 = virtualinvoke r2.<org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.httpclient.auth.AuthScheme selectAuthScheme(java.util.Map)>(r1);

        virtualinvoke r0.<org.apache.commons.httpclient.auth.AuthState: void setAuthScheme(org.apache.commons.httpclient.auth.AuthScheme)>($r3);

     label4:
        $r21 = virtualinvoke r0.<org.apache.commons.httpclient.auth.AuthState: org.apache.commons.httpclient.auth.AuthScheme getAuthScheme()>();

        $r22 = interfaceinvoke $r21.<org.apache.commons.httpclient.auth.AuthScheme: java.lang.String getSchemeName()>();

        $r23 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $z1 = interfaceinvoke $r23.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label5;

        $r13 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        $r12 = new java.lang.StringBuffer;

        specialinvoke $r12.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Using authentication scheme: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke $r13.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r16);

     label5:
        $r4 = virtualinvoke $r22.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r17 = (java.lang.String) $r5;

        if $r17 != null goto label6;

        $r7 = new org.apache.commons.httpclient.auth.AuthenticationException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" authorization challenge expected, but not found");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.apache.commons.httpclient.auth.AuthenticationException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label6:
        interfaceinvoke $r21.<org.apache.commons.httpclient.auth.AuthScheme: void processChallenge(java.lang.String)>($r17);

        $r6 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void debug(java.lang.Object)>("Authorization challenge processed");

        return $r21;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Class $r0, $r2;
        org.apache.commons.logging.Log $r1;

        $r0 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: java.lang.Class class$org$apache$commons$httpclient$auth$AuthChallengeProcessor>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.apache.commons.httpclient.auth.AuthChallengeProcessor: java.lang.Class class$(java.lang.String)>("org.apache.commons.httpclient.auth.AuthChallengeProcessor");

        <org.apache.commons.httpclient.auth.AuthChallengeProcessor: java.lang.Class class$org$apache$commons$httpclient$auth$AuthChallengeProcessor> = $r2;

        goto label2;

     label1:
        $r2 = <org.apache.commons.httpclient.auth.AuthChallengeProcessor: java.lang.Class class$org$apache$commons$httpclient$auth$AuthChallengeProcessor>;

     label2:
        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r2);

        <org.apache.commons.httpclient.auth.AuthChallengeProcessor: org.apache.commons.logging.Log LOG> = $r1;

        return;
    }
}
