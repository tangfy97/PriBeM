public class org.apache.log4j.config.PropertyGetter extends java.lang.Object
{
    protected static final java.lang.Object[] NULL_ARG;
    protected java.lang.Object obj;
    protected java.beans.PropertyDescriptor[] props;
    static java.lang.Class class$java$lang$String;
    static java.lang.Class class$org$apache$log4j$Priority;

    public void <init>(java.lang.Object) throws java.beans.IntrospectionException
    {
        java.beans.BeanInfo $r3;
        java.beans.PropertyDescriptor[] $r4;
        java.lang.Object r1;
        java.lang.Class $r2;
        org.apache.log4j.config.PropertyGetter r0;

        r0 := @this: org.apache.log4j.config.PropertyGetter;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = staticinvoke <java.beans.Introspector: java.beans.BeanInfo getBeanInfo(java.lang.Class)>($r2);

        $r4 = interfaceinvoke $r3.<java.beans.BeanInfo: java.beans.PropertyDescriptor[] getPropertyDescriptors()>();

        r0.<org.apache.log4j.config.PropertyGetter: java.beans.PropertyDescriptor[] props> = $r4;

        r0.<org.apache.log4j.config.PropertyGetter: java.lang.Object obj> = r1;

        return;
    }

    public static void getProperties(java.lang.Object, org.apache.log4j.config.PropertyGetter$PropertyCallback, java.lang.String)
    {
        org.apache.log4j.config.PropertyGetter $r0;
        java.beans.IntrospectionException $r4;
        java.lang.StringBuffer $r5, $r6, $r7;
        org.apache.log4j.config.PropertyGetter$PropertyCallback r2;
        java.lang.Object r1;
        java.lang.String r3, $r8;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: org.apache.log4j.config.PropertyGetter$PropertyCallback;

        r3 := @parameter2: java.lang.String;

     label1:
        $r0 = new org.apache.log4j.config.PropertyGetter;

        specialinvoke $r0.<org.apache.log4j.config.PropertyGetter: void <init>(java.lang.Object)>(r1);

        virtualinvoke $r0.<org.apache.log4j.config.PropertyGetter: void getProperties(org.apache.log4j.config.PropertyGetter$PropertyCallback,java.lang.String)>(r2, r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to introspect object ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void error(java.lang.String,java.lang.Throwable)>($r8, $r4);

     label4:
        return;

        catch java.beans.IntrospectionException from label1 to label2 with label3;
    }

    public void getProperties(org.apache.log4j.config.PropertyGetter$PropertyCallback, java.lang.String)
    {
        java.beans.PropertyDescriptor[] $r1, $r2, $r6;
        java.lang.Thread $r22;
        org.apache.log4j.config.PropertyGetter$PropertyCallback r12;
        java.lang.reflect.Method $r4;
        boolean $z0, $z1, $z2;
        java.lang.IllegalAccessException $r24;
        java.lang.reflect.InvocationTargetException $r20;
        java.beans.PropertyDescriptor $r3, $r7;
        java.lang.Throwable $r21, $r23;
        java.lang.Object[] $r9;
        org.apache.log4j.config.PropertyGetter r0;
        java.lang.StringBuffer $r16, $r17, $r18, $r25, $r26, $r27, $r29, $r30, $r31;
        int $i0, i1;
        java.lang.String $r8, r13, $r19, $r28, $r32;
        java.lang.RuntimeException $r15;
        java.lang.Class $r5;
        java.lang.Object $r10, $r11, $r14;

        r0 := @this: org.apache.log4j.config.PropertyGetter;

        r12 := @parameter0: org.apache.log4j.config.PropertyGetter$PropertyCallback;

        r13 := @parameter1: java.lang.String;

        i1 = 0;

     label01:
        $r1 = r0.<org.apache.log4j.config.PropertyGetter: java.beans.PropertyDescriptor[] props>;

        $i0 = lengthof $r1;

        if i1 >= $i0 goto label12;

        $r2 = r0.<org.apache.log4j.config.PropertyGetter: java.beans.PropertyDescriptor[] props>;

        $r3 = $r2[i1];

        $r4 = virtualinvoke $r3.<java.beans.PropertyDescriptor: java.lang.reflect.Method getReadMethod()>();

        if $r4 != null goto label02;

        goto label11;

     label02:
        $r5 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z0 = virtualinvoke r0.<org.apache.log4j.config.PropertyGetter: boolean isHandledType(java.lang.Class)>($r5);

        if $z0 != 0 goto label03;

        goto label11;

     label03:
        $r6 = r0.<org.apache.log4j.config.PropertyGetter: java.beans.PropertyDescriptor[] props>;

        $r7 = $r6[i1];

        $r8 = virtualinvoke $r7.<java.beans.FeatureDescriptor: java.lang.String getName()>();

     label04:
        $r10 = r0.<org.apache.log4j.config.PropertyGetter: java.lang.Object obj>;

        $r9 = <org.apache.log4j.config.PropertyGetter: java.lang.Object[] NULL_ARG>;

        $r11 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r10, $r9);

        if $r11 == null goto label05;

        $r14 = r0.<org.apache.log4j.config.PropertyGetter: java.lang.Object obj>;

        interfaceinvoke r12.<org.apache.log4j.config.PropertyGetter$PropertyCallback: void foundProperty(java.lang.Object,java.lang.String,java.lang.String,java.lang.Object)>($r14, r13, $r8, $r11);

     label05:
        goto label11;

     label06:
        $r24 := @caughtexception;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to get value of property ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r28);

        goto label11;

     label07:
        $r20 := @caughtexception;

        $r21 = virtualinvoke $r20.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z1 = $r21 instanceof java.lang.InterruptedException;

        if $z1 != 0 goto label08;

        $r23 = virtualinvoke $r20.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $z2 = $r23 instanceof java.io.InterruptedIOException;

        if $z2 == 0 goto label09;

     label08:
        $r22 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r22.<java.lang.Thread: void interrupt()>();

     label09:
        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to get value of property ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r32);

        goto label11;

     label10:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Failed to get value of property ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <org.apache.log4j.helpers.LogLog: void warn(java.lang.String)>($r19);

     label11:
        i1 = i1 + 1;

        goto label01;

     label12:
        return;

        catch java.lang.IllegalAccessException from label04 to label05 with label06;
        catch java.lang.reflect.InvocationTargetException from label04 to label05 with label07;
        catch java.lang.RuntimeException from label04 to label05 with label10;
    }

    protected boolean isHandledType(java.lang.Class)
    {
        org.apache.log4j.config.PropertyGetter r6;
        java.lang.Class $r0, r1, $r2, $r3, $r4, $r5, $r7, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r6 := @this: org.apache.log4j.config.PropertyGetter;

        r1 := @parameter0: java.lang.Class;

        $r0 = <org.apache.log4j.config.PropertyGetter: java.lang.Class class$java$lang$String>;

        if $r0 != null goto label1;

        $r7 = staticinvoke <org.apache.log4j.config.PropertyGetter: java.lang.Class class$(java.lang.String)>("java.lang.String");

        <org.apache.log4j.config.PropertyGetter: java.lang.Class class$java$lang$String> = $r7;

        goto label2;

     label1:
        $r7 = <org.apache.log4j.config.PropertyGetter: java.lang.Class class$java$lang$String>;

     label2:
        $z0 = virtualinvoke $r7.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z0 != 0 goto label5;

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z1 != 0 goto label5;

        $r3 = <java.lang.Long: java.lang.Class TYPE>;

        $z2 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z2 != 0 goto label5;

        $r4 = <java.lang.Boolean: java.lang.Class TYPE>;

        $z3 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z3 != 0 goto label5;

        $r5 = <org.apache.log4j.config.PropertyGetter: java.lang.Class class$org$apache$log4j$Priority>;

        if $r5 != null goto label3;

        $r8 = staticinvoke <org.apache.log4j.config.PropertyGetter: java.lang.Class class$(java.lang.String)>("org.apache.log4j.Priority");

        <org.apache.log4j.config.PropertyGetter: java.lang.Class class$org$apache$log4j$Priority> = $r8;

        goto label4;

     label3:
        $r8 = <org.apache.log4j.config.PropertyGetter: java.lang.Class class$org$apache$log4j$Priority>;

     label4:
        $z4 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z4 == 0 goto label6;

     label5:
        $z5 = 1;

        goto label7;

     label6:
        $z5 = 0;

     label7:
        return $z5;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.Object[] $r0;

        $r0 = newarray (java.lang.Object)[0];

        <org.apache.log4j.config.PropertyGetter: java.lang.Object[] NULL_ARG> = $r0;

        return;
    }
}
