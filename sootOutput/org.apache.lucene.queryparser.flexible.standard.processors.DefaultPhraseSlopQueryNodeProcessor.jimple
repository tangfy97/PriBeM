public class org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor extends org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl
{
    private boolean processChildren;
    private int defaultPhraseSlop;

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor: boolean processChildren> = 1;

        return;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode process(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey $r3;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;
        java.lang.Integer r5;
        org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor r0;
        int $i0;
        java.lang.Object $r4;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r2, $r6;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor;

        r2 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()>();

        if $r1 == null goto label1;

        $r3 = <org.apache.lucene.queryparser.flexible.standard.config.StandardQueryConfigHandler$ConfigurationKeys: org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey PHRASE_SLOP>;

        $r4 = virtualinvoke $r1.<org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler: java.lang.Object get(org.apache.lucene.queryparser.flexible.core.config.ConfigurationKey)>($r3);

        r5 = (java.lang.Integer) $r4;

        if r5 == null goto label1;

        $i0 = virtualinvoke r5.<java.lang.Integer: int intValue()>();

        r0.<org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor: int defaultPhraseSlop> = $i0;

        $r6 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode process(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r2);

        return $r6;

     label1:
        return r2;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor r2;
        org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode $r1;
        int $i0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        boolean $z0, $z1;

        r2 := @this: org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.TokenizedPhraseQueryNode;

        if $z0 != 0 goto label1;

        $z1 = r0 instanceof org.apache.lucene.queryparser.flexible.standard.nodes.MultiPhraseQueryNode;

        if $z1 == 0 goto label2;

     label1:
        $r1 = new org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode;

        $i0 = r2.<org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor: int defaultPhraseSlop>;

        specialinvoke $r1.<org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode: void <init>(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode,int)>(r0, $i0);

        return $r1;

     label2:
        return r0;
    }

    protected org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor r1;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        boolean $z0;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0 instanceof org.apache.lucene.queryparser.flexible.core.nodes.SlopQueryNode;

        if $z0 == 0 goto label1;

        r1.<org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor: boolean processChildren> = 0;

     label1:
        return r0;
    }

    protected void processChildren(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor r0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1;
        boolean $z0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $z0 = r0.<org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor: boolean processChildren>;

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void processChildren(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r1);

        goto label2;

     label1:
        r0.<org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor: boolean processChildren> = 1;

     label2:
        return;
    }

    protected java.util.List setChildrenOrder(java.util.List) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor r1;
        java.util.List r0;

        r1 := @this: org.apache.lucene.queryparser.flexible.standard.processors.DefaultPhraseSlopQueryNodeProcessor;

        r0 := @parameter0: java.util.List;

        return r0;
    }
}
