final class com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$2 extends java.util.AbstractQueue
{

    void <init>()
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$2 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$2;

        specialinvoke r0.<java.util.AbstractQueue: void <init>()>();

        return;
    }

    public boolean offer(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$2 r0;
        java.lang.Object r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$2;

        r1 := @parameter0: java.lang.Object;

        return 1;
    }

    public java.lang.Object peek()
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$2 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$2;

        return null;
    }

    public java.lang.Object poll()
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$2 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$2;

        return null;
    }

    public int size()
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$2 r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$2;

        return 0;
    }

    public java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$2 r1;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$2;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.Iterators: com.mycila.inject.internal.guava.collect.UnmodifiableIterator emptyIterator()>();

        return $r0;
    }
}
