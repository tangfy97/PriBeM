public abstract class org.apache.neethi.builders.converters.AbstractStaxConverter extends java.lang.Object
{

    public void <init>()
    {
        org.apache.neethi.builders.converters.AbstractStaxConverter r0;

        r0 := @this: org.apache.neethi.builders.converters.AbstractStaxConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public javax.xml.namespace.QName getQName(javax.xml.stream.XMLStreamReader)
    {
        javax.xml.stream.XMLStreamReader r0;
        javax.xml.stream.XMLStreamException $r1;
        int $i0;
        org.apache.neethi.builders.converters.AbstractStaxConverter r2;
        javax.xml.namespace.QName $r3;
        java.lang.String $r4, $r5;

        r2 := @this: org.apache.neethi.builders.converters.AbstractStaxConverter;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        $i0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        if $i0 != 7 goto label4;

     label1:
        interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int nextTag()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        $r3 = new javax.xml.namespace.QName;

        $r4 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI()>();

        $r5 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        specialinvoke $r3.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r4, $r5);

        return $r3;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
    }

    public java.util.Map getAttributes(javax.xml.stream.XMLStreamReader)
    {
        org.apache.neethi.builders.converters.AbstractStaxConverter r6;
        java.util.HashMap $r0;
        javax.xml.stream.XMLStreamReader r1;
        int $i0, i1;
        javax.xml.namespace.QName $r2;
        java.lang.String $r3, $r4, $r5;

        r6 := @this: org.apache.neethi.builders.converters.AbstractStaxConverter;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        i1 = 0;

     label1:
        $i0 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: int getAttributeCount()>();

        if i1 >= $i0 goto label2;

        $r2 = new javax.xml.namespace.QName;

        $r3 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeNamespace(int)>(i1);

        $r4 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeLocalName(int)>(i1);

        specialinvoke $r2.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>($r3, $r4);

        $r5 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>(i1);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public java.util.Iterator getChildren(javax.xml.stream.XMLStreamReader)
    {
        org.apache.neethi.builders.converters.AbstractStaxConverter$1 $r2;
        org.apache.neethi.builders.converters.AbstractStaxConverter r3;
        java.lang.Exception $r4;
        javax.xml.stream.XMLStreamReader r0;
        int i0;
        javax.xml.namespace.QName $r1;
        boolean $z0, $z1;

        r3 := @this: org.apache.neethi.builders.converters.AbstractStaxConverter;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.QName getName()>();

     label1:
        i0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        $z0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z0 == 0 goto label2;

        i0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int next()>();

     label2:
        $z1 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z1 == 0 goto label3;

        if i0 == 2 goto label3;

        if i0 == 1 goto label3;

        i0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int next()>();

        goto label2;

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        return null;

     label5:
        $r2 = new org.apache.neethi.builders.converters.AbstractStaxConverter$1;

        specialinvoke $r2.<org.apache.neethi.builders.converters.AbstractStaxConverter$1: void <init>(org.apache.neethi.builders.converters.AbstractStaxConverter,javax.xml.stream.XMLStreamReader,javax.xml.namespace.QName)>(r3, r0, $r1);

        return $r2;

        catch java.lang.Exception from label1 to label3 with label4;
    }
}
