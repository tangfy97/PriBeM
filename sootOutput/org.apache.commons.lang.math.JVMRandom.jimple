public final class org.apache.commons.lang.math.JVMRandom extends java.util.Random
{
    private static final long serialVersionUID;
    private boolean constructed;

    public void <init>()
    {
        org.apache.commons.lang.math.JVMRandom r0;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        specialinvoke r0.<java.util.Random: void <init>()>();

        r0.<org.apache.commons.lang.math.JVMRandom: boolean constructed> = 0;

        r0.<org.apache.commons.lang.math.JVMRandom: boolean constructed> = 1;

        return;
    }

    public synchronized void setSeed(long)
    {
        java.lang.UnsupportedOperationException $r1;
        org.apache.commons.lang.math.JVMRandom r0;
        long l0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        l0 := @parameter0: long;

        $z0 = r0.<org.apache.commons.lang.math.JVMRandom: boolean constructed>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public synchronized double nextGaussian()
    {
        org.apache.commons.lang.math.JVMRandom r1;
        java.lang.UnsupportedOperationException $r0;

        r1 := @this: org.apache.commons.lang.math.JVMRandom;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void nextBytes(byte[])
    {
        org.apache.commons.lang.math.JVMRandom r1;
        java.lang.UnsupportedOperationException $r0;
        byte[] r2;

        r1 := @this: org.apache.commons.lang.math.JVMRandom;

        r2 := @parameter0: byte[];

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int nextInt()
    {
        org.apache.commons.lang.math.JVMRandom r0;
        int $i0;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        $i0 = virtualinvoke r0.<org.apache.commons.lang.math.JVMRandom: int nextInt(int)>(2147483647);

        return $i0;
    }

    public int nextInt(int)
    {
        int i0, $i1;
        org.apache.commons.lang.math.JVMRandom r1;
        java.lang.IllegalArgumentException $r0;
        double $d0, $d1, $d2;

        r1 := @this: org.apache.commons.lang.math.JVMRandom;

        i0 := @parameter0: int;

        if i0 > 0 goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Upper bound for nextInt must be positive");

        throw $r0;

     label1:
        $d0 = staticinvoke <java.lang.Math: double random()>();

        $d1 = (double) i0;

        $d2 = $d0 * $d1;

        $i1 = (int) $d2;

        return $i1;
    }

    public long nextLong()
    {
        org.apache.commons.lang.math.JVMRandom r0;
        long $l0;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        $l0 = staticinvoke <org.apache.commons.lang.math.JVMRandom: long nextLong(long)>(9223372036854775807L);

        return $l0;
    }

    public static long nextLong(long)
    {
        long l0, $l2;
        java.lang.IllegalArgumentException $r1;
        byte $b1;
        int $i3;
        double $d0, $d1, $d2;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 > 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Upper bound for nextInt must be positive");

        throw $r1;

     label1:
        $d0 = staticinvoke <java.lang.Math: double random()>();

        $d1 = (double) l0;

        $d2 = $d0 * $d1;

        $l2 = (long) $d2;

        return $l2;
    }

    public boolean nextBoolean()
    {
        byte $b0;
        org.apache.commons.lang.math.JVMRandom r0;
        int $i1;
        double $d0;
        boolean $z0;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        $b0 = $d0 cmpl 0.5;

        $i1 = (int) $b0;

        if $i1 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public float nextFloat()
    {
        org.apache.commons.lang.math.JVMRandom r0;
        float $f0;
        double $d0;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public double nextDouble()
    {
        org.apache.commons.lang.math.JVMRandom r0;
        double $d0;

        r0 := @this: org.apache.commons.lang.math.JVMRandom;

        $d0 = staticinvoke <java.lang.Math: double random()>();

        return $d0;
    }

    public static void <clinit>()
    {
        <org.apache.commons.lang.math.JVMRandom: long serialVersionUID> = 1L;

        return;
    }
}
