public class com.sun.xml.bind.v2.util.XmlFactory extends java.lang.Object
{
    public static final java.util.logging.Logger logger;
    public static final boolean DISABLE_SECURE_PROCESSING;
    public static java.lang.Exception er;

    public void <init>()
    {
        com.sun.xml.bind.v2.util.XmlFactory r0;

        r0 := @this: com.sun.xml.bind.v2.util.XmlFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean xmlFeatureValue(boolean)
    {
        boolean $z0, $z1, z2, $z3;

        z2 := @parameter0: boolean;

        $z0 = <com.sun.xml.bind.v2.util.XmlFactory: boolean DISABLE_SECURE_PROCESSING>;

        if $z0 != 0 goto label2;

        $z1 = <com.sun.xml.bind.v2.util.XmlFactory: boolean DISABLE_SECURE_PROCESSING>;

        if $z1 != 0 goto label1;

        if z2 != 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static final javax.xml.validation.SchemaFactory createSchemaFactory(java.lang.String, boolean) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r9, $r16, $r20;
        org.xml.sax.SAXNotSupportedException $r13;
        java.lang.Object[] $r10;
        com.sun.xml.bind.v2.Messages $r11;
        java.lang.AbstractMethodError $r6;
        java.util.logging.Level $r2, $r4, $r7, $r14, $r18;
        org.xml.sax.SAXNotRecognizedException $r17;
        java.lang.String r0, $r12;
        boolean $z0, z1, $z2;
        javax.xml.validation.SchemaFactory $r1;
        java.util.logging.Logger $r3, $r5, $r8, $r15, $r19;

        r0 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

     label1:
        $r1 = staticinvoke <javax.xml.validation.SchemaFactory: javax.xml.validation.SchemaFactory newInstance(java.lang.String)>(r0);

        $r3 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r2 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r3.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r2);

        if $z0 == 0 goto label2;

        $r5 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r5.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r4, "SchemaFactory instance: {0}", $r1);

     label2:
        $z2 = staticinvoke <com.sun.xml.bind.v2.util.XmlFactory: boolean xmlFeatureValue(boolean)>(z1);

        virtualinvoke $r1.<javax.xml.validation.SchemaFactory: void setFeature(java.lang.String,boolean)>("http://javax.xml.XMLConstants/feature/secure-processing", $z2);

     label3:
        return $r1;

     label4:
        $r17 := @caughtexception;

        $r19 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r18 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r19.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r18, null, $r17);

        $r20 = new java.lang.IllegalStateException;

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r17);

        throw $r20;

     label5:
        $r13 := @caughtexception;

        $r15 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r14 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r15.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r14, null, $r13);

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r13);

        throw $r16;

     label6:
        $r6 := @caughtexception;

        $r8 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r7 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r8.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r7, null, $r6);

        $r9 = new java.lang.IllegalStateException;

        $r11 = <com.sun.xml.bind.v2.Messages: com.sun.xml.bind.v2.Messages INVALID_JAXP_IMPLEMENTATION>;

        $r10 = newarray (java.lang.Object)[0];

        $r12 = virtualinvoke $r11.<com.sun.xml.bind.v2.Messages: java.lang.String format(java.lang.Object[])>($r10);

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r6);

        throw $r9;

        catch org.xml.sax.SAXNotRecognizedException from label1 to label3 with label4;
        catch org.xml.sax.SAXNotSupportedException from label1 to label3 with label5;
        catch java.lang.AbstractMethodError from label1 to label3 with label6;
    }

    public static final javax.xml.parsers.SAXParserFactory createParserFactory(boolean) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r8, $r15, $r19, $r23;
        org.xml.sax.SAXNotSupportedException $r12;
        java.lang.Object[] $r9;
        com.sun.xml.bind.v2.Messages $r10;
        javax.xml.parsers.SAXParserFactory $r0;
        java.lang.AbstractMethodError $r5;
        java.util.logging.Level $r1, $r3, $r6, $r13, $r17, $r21;
        org.xml.sax.SAXNotRecognizedException $r16;
        java.lang.String $r11;
        boolean $z0, z1, $z2;
        java.util.logging.Logger $r2, $r4, $r7, $r14, $r18, $r22;
        javax.xml.parsers.ParserConfigurationException $r20;

        z1 := @parameter0: boolean;

     label1:
        $r0 = staticinvoke <javax.xml.parsers.SAXParserFactory: javax.xml.parsers.SAXParserFactory newInstance()>();

        $r2 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label2;

        $r4 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r3, "SAXParserFactory instance: {0}", $r0);

     label2:
        virtualinvoke $r0.<javax.xml.parsers.SAXParserFactory: void setNamespaceAware(boolean)>(1);

        $z2 = staticinvoke <com.sun.xml.bind.v2.util.XmlFactory: boolean xmlFeatureValue(boolean)>(z1);

        virtualinvoke $r0.<javax.xml.parsers.SAXParserFactory: void setFeature(java.lang.String,boolean)>("http://javax.xml.XMLConstants/feature/secure-processing", $z2);

     label3:
        return $r0;

     label4:
        $r20 := @caughtexception;

        $r22 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r21 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r22.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r21, null, $r20);

        $r23 = new java.lang.IllegalStateException;

        specialinvoke $r23.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r20);

        throw $r23;

     label5:
        $r16 := @caughtexception;

        $r18 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r17 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r18.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r17, null, $r16);

        $r19 = new java.lang.IllegalStateException;

        specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r16);

        throw $r19;

     label6:
        $r12 := @caughtexception;

        $r14 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r13 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, null, $r12);

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r12);

        throw $r15;

     label7:
        $r5 := @caughtexception;

        $r7 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r6 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r6, null, $r5);

        $r8 = new java.lang.IllegalStateException;

        $r10 = <com.sun.xml.bind.v2.Messages: com.sun.xml.bind.v2.Messages INVALID_JAXP_IMPLEMENTATION>;

        $r9 = newarray (java.lang.Object)[0];

        $r11 = virtualinvoke $r10.<com.sun.xml.bind.v2.Messages: java.lang.String format(java.lang.Object[])>($r9);

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r5);

        throw $r8;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label3 with label4;
        catch org.xml.sax.SAXNotRecognizedException from label1 to label3 with label5;
        catch org.xml.sax.SAXNotSupportedException from label1 to label3 with label6;
        catch java.lang.AbstractMethodError from label1 to label3 with label7;
    }

    public static final javax.xml.xpath.XPathFactory createXPathFactory(boolean) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r8, $r15;
        java.lang.Object[] $r9;
        com.sun.xml.bind.v2.Messages $r10;
        java.lang.AbstractMethodError $r5;
        java.util.logging.Level $r1, $r3, $r6, $r13;
        javax.xml.xpath.XPathFactoryConfigurationException $r12;
        java.lang.String $r11;
        boolean $z0, z1, $z2;
        java.util.logging.Logger $r2, $r4, $r7, $r14;
        javax.xml.xpath.XPathFactory $r0;

        z1 := @parameter0: boolean;

     label1:
        $r0 = staticinvoke <javax.xml.xpath.XPathFactory: javax.xml.xpath.XPathFactory newInstance()>();

        $r2 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label2;

        $r4 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r3, "XPathFactory instance: {0}", $r0);

     label2:
        $z2 = staticinvoke <com.sun.xml.bind.v2.util.XmlFactory: boolean xmlFeatureValue(boolean)>(z1);

        virtualinvoke $r0.<javax.xml.xpath.XPathFactory: void setFeature(java.lang.String,boolean)>("http://javax.xml.XMLConstants/feature/secure-processing", $z2);

     label3:
        return $r0;

     label4:
        $r12 := @caughtexception;

        $r14 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r13 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, null, $r12);

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r12);

        throw $r15;

     label5:
        $r5 := @caughtexception;

        $r7 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r6 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r6, null, $r5);

        $r8 = new java.lang.IllegalStateException;

        $r10 = <com.sun.xml.bind.v2.Messages: com.sun.xml.bind.v2.Messages INVALID_JAXP_IMPLEMENTATION>;

        $r9 = newarray (java.lang.Object)[0];

        $r11 = virtualinvoke $r10.<com.sun.xml.bind.v2.Messages: java.lang.String format(java.lang.Object[])>($r9);

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r5);

        throw $r8;

        catch javax.xml.xpath.XPathFactoryConfigurationException from label1 to label3 with label4;
        catch java.lang.AbstractMethodError from label1 to label3 with label5;
    }

    public static final javax.xml.transform.TransformerFactory createTransformerFactory(boolean) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r8, $r15;
        java.lang.Object[] $r9;
        com.sun.xml.bind.v2.Messages $r10;
        java.lang.AbstractMethodError $r5;
        java.util.logging.Level $r1, $r3, $r6, $r13;
        java.lang.String $r11;
        boolean $z0, z1, $z2;
        javax.xml.transform.TransformerConfigurationException $r12;
        java.util.logging.Logger $r2, $r4, $r7, $r14;
        javax.xml.transform.TransformerFactory $r0;

        z1 := @parameter0: boolean;

     label1:
        $r0 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>();

        $r2 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label2;

        $r4 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r3, "TransformerFactory instance: {0}", $r0);

     label2:
        $z2 = staticinvoke <com.sun.xml.bind.v2.util.XmlFactory: boolean xmlFeatureValue(boolean)>(z1);

        virtualinvoke $r0.<javax.xml.transform.TransformerFactory: void setFeature(java.lang.String,boolean)>("http://javax.xml.XMLConstants/feature/secure-processing", $z2);

     label3:
        return $r0;

     label4:
        $r12 := @caughtexception;

        $r14 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r13 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, null, $r12);

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r12);

        throw $r15;

     label5:
        $r5 := @caughtexception;

        $r7 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r6 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r6, null, $r5);

        $r8 = new java.lang.IllegalStateException;

        $r10 = <com.sun.xml.bind.v2.Messages: com.sun.xml.bind.v2.Messages INVALID_JAXP_IMPLEMENTATION>;

        $r9 = newarray (java.lang.Object)[0];

        $r11 = virtualinvoke $r10.<com.sun.xml.bind.v2.Messages: java.lang.String format(java.lang.Object[])>($r9);

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r5);

        throw $r8;

        catch javax.xml.transform.TransformerConfigurationException from label1 to label3 with label4;
        catch java.lang.AbstractMethodError from label1 to label3 with label5;
    }

    public static final javax.xml.parsers.DocumentBuilderFactory createDocumentBuilderFactory(boolean) throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r8, $r15;
        java.lang.Object[] $r9;
        com.sun.xml.bind.v2.Messages $r10;
        java.lang.AbstractMethodError $r5;
        java.util.logging.Level $r1, $r3, $r6, $r13;
        java.lang.String $r11;
        boolean $z0, z1, $z2;
        java.util.logging.Logger $r2, $r4, $r7, $r14;
        javax.xml.parsers.ParserConfigurationException $r12;
        javax.xml.parsers.DocumentBuilderFactory $r0;

        z1 := @parameter0: boolean;

     label1:
        $r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        $r2 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r1 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z0 = virtualinvoke $r2.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r1);

        if $z0 == 0 goto label2;

        $r4 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke $r4.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r3, "DocumentBuilderFactory instance: {0}", $r0);

     label2:
        virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1);

        $z2 = staticinvoke <com.sun.xml.bind.v2.util.XmlFactory: boolean xmlFeatureValue(boolean)>(z1);

        virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: void setFeature(java.lang.String,boolean)>("http://javax.xml.XMLConstants/feature/secure-processing", $z2);

     label3:
        return $r0;

     label4:
        $r12 := @caughtexception;

        $r14 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r13 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r13, null, $r12);

        $r15 = new java.lang.IllegalStateException;

        specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r12);

        throw $r15;

     label5:
        $r5 := @caughtexception;

        $r7 = <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger>;

        $r6 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>($r6, null, $r5);

        $r8 = new java.lang.IllegalStateException;

        $r10 = <com.sun.xml.bind.v2.Messages: com.sun.xml.bind.v2.Messages INVALID_JAXP_IMPLEMENTATION>;

        $r9 = newarray (java.lang.Object)[0];

        $r11 = virtualinvoke $r10.<com.sun.xml.bind.v2.Messages: java.lang.String format(java.lang.Object[])>($r9);

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r5);

        throw $r8;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label3 with label4;
        catch java.lang.AbstractMethodError from label1 to label3 with label5;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1, $r3;
        java.util.logging.Logger $r2;
        java.lang.Exception $r4;
        boolean $z0;

        $r0 = class "Lcom/sun/xml/bind/v2/util/XmlFactory;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <com.sun.xml.bind.v2.util.XmlFactory: java.util.logging.Logger logger> = $r2;

        $r3 = staticinvoke <com.sun.xml.bind.Util: java.lang.String getSystemProperty(java.lang.String)>("com.sun.xml.bind.disableXmlSecurity");

        $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r3);

        <com.sun.xml.bind.v2.util.XmlFactory: boolean DISABLE_SECURE_PROCESSING> = $z0;

        $r4 = new java.lang.Exception;

        specialinvoke $r4.<java.lang.Exception: void <init>()>();

        <com.sun.xml.bind.v2.util.XmlFactory: java.lang.Exception er> = $r4;

        return;
    }
}
