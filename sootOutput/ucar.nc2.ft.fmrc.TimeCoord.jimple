public class ucar.nc2.ft.fmrc.TimeCoord extends java.lang.Object implements java.lang.Comparable
{
    public static final ucar.nc2.ft.fmrc.TimeCoord EMPTY;
    private java.util.Date runDate;
    private java.util.List gridInv;
    private int id;
    private java.lang.String axisName;
    private boolean isInterval;
    private double[] offset;
    private double[] bound1;
    private double[] bound2;

    void <init>(java.util.Date)
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        java.util.Date r1;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        r1 := @parameter0: java.util.Date;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval> = 0;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: java.util.Date runDate> = r1;

        return;
    }

    void <init>(java.util.Date, double[])
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        double[] r2;
        java.util.Date r1;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        r1 := @parameter0: java.util.Date;

        r2 := @parameter1: double[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval> = 0;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: java.util.Date runDate> = r1;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] offset> = r2;

        return;
    }

    void <init>(ucar.nc2.ft.fmrc.TimeCoord)
    {
        ucar.nc2.ft.fmrc.TimeCoord r0, r1;
        java.util.Date $r2;
        double[] $r4, $r5, $r6;
        int $i0;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        r1 := @parameter0: ucar.nc2.ft.fmrc.TimeCoord;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval> = 0;

        $r2 = r1.<ucar.nc2.ft.fmrc.TimeCoord: java.util.Date runDate>;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: java.util.Date runDate> = $r2;

        $r3 = r1.<ucar.nc2.ft.fmrc.TimeCoord: java.lang.String axisName>;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: java.lang.String axisName> = $r3;

        $r4 = r1.<ucar.nc2.ft.fmrc.TimeCoord: double[] offset>;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] offset> = $r4;

        $z0 = r1.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval>;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval> = $z0;

        $r5 = r1.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1>;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1> = $r5;

        $r6 = r1.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound2>;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound2> = $r6;

        $i0 = r1.<ucar.nc2.ft.fmrc.TimeCoord: int id>;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: int id> = $i0;

        return;
    }

    void <init>(java.util.Date, ucar.nc2.dataset.CoordinateAxis1DTime)
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        java.util.Date r1, $r7;
        double[] $r6, $r8, $r9, $r10;
        long $l0, $l1, $l2;
        byte $b3;
        int i4, i5, $i6;
        java.lang.String $r3, $r5, $r15, $r17;
        boolean $z0;
        double $d0, $d1;
        ucar.nc2.dataset.CoordinateAxis1DTime r2;
        ucar.nc2.units.DateUnit $r18;
        java.lang.IllegalArgumentException $r20;
        java.lang.Exception $r11;
        java.lang.StringBuilder $r14, $r16, $r19;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        r1 := @parameter0: java.util.Date;

        r2 := @parameter1: ucar.nc2.dataset.CoordinateAxis1DTime;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval> = 0;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: java.util.Date runDate> = r1;

        $r3 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis1DTime: java.lang.String getName()>();

        r0.<ucar.nc2.ft.fmrc.TimeCoord: java.lang.String axisName> = $r3;

     label1:
        $r18 = new ucar.nc2.units.DateUnit;

        $r5 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis1DTime: java.lang.String getUnitsString()>();

        specialinvoke $r18.<ucar.nc2.units.DateUnit: void <init>(java.lang.String)>($r5);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r20 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a unit of time ");

        $r15 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis1DTime: java.lang.String getUnitsString()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r20;

     label4:
        $l0 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis1DTime: long getSize()>();

        i4 = (int) $l0;

        $z0 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis1DTime: boolean isInterval()>();

        if $z0 == 0 goto label5;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval> = 1;

        $r9 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis1DTime: double[] getBound1()>();

        r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1> = $r9;

        $r10 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis1DTime: double[] getBound2()>();

        r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound2> = $r10;

        goto label7;

     label5:
        $r6 = newarray (double)[i4];

        r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] offset> = $r6;

        i5 = 0;

     label6:
        $l1 = (long) i5;

        $l2 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis1DTime: long getSize()>();

        $b3 = $l1 cmp $l2;

        $i6 = (int) $b3;

        if $i6 >= 0 goto label7;

        $d0 = virtualinvoke r2.<ucar.nc2.dataset.CoordinateAxis1DTime: double getCoordValue(int)>(i5);

        $r7 = virtualinvoke $r18.<ucar.nc2.units.DateUnit: java.util.Date makeDate(double)>($d0);

        $r8 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] offset>;

        $d1 = staticinvoke <ucar.nc2.ft.fmrc.FmrcInv: double getOffsetInHours(java.util.Date,java.util.Date)>(r1, $r7);

        $r8[i5] = $d1;

        i5 = i5 + 1;

        goto label6;

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    void addGridInventory(ucar.nc2.ft.fmrc.GridDatasetInv$Grid)
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        java.util.List $r1, $r3;
        ucar.nc2.ft.fmrc.GridDatasetInv$Grid r2;
        java.util.ArrayList $r4;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        r2 := @parameter0: ucar.nc2.ft.fmrc.GridDatasetInv$Grid;

        $r1 = r0.<ucar.nc2.ft.fmrc.TimeCoord: java.util.List gridInv>;

        if $r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.ft.fmrc.TimeCoord: java.util.List gridInv> = $r4;

     label1:
        $r3 = r0.<ucar.nc2.ft.fmrc.TimeCoord: java.util.List gridInv>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        return;
    }

    public java.util.Date getRunDate()
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        java.util.Date $r1;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        $r1 = r0.<ucar.nc2.ft.fmrc.TimeCoord: java.util.Date runDate>;

        return $r1;
    }

    public boolean isInterval()
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        $z0 = r0.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval>;

        return $z0;
    }

    public java.util.List getGridInventory()
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        java.util.List $r1, $r2;
        java.util.ArrayList $r3;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        $r1 = r0.<ucar.nc2.ft.fmrc.TimeCoord: java.util.List gridInv>;

        if $r1 != null goto label1;

        $r3 = new java.util.ArrayList;

        $r2 = $r3;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        goto label2;

     label1:
        $r2 = r0.<ucar.nc2.ft.fmrc.TimeCoord: java.util.List gridInv>;

     label2:
        return $r2;
    }

    public int getId()
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        int $i0;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        $i0 = r0.<ucar.nc2.ft.fmrc.TimeCoord: int id>;

        return $i0;
    }

    public void setId(int)
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        int i0;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        i0 := @parameter0: int;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: int id> = i0;

        return;
    }

    public java.lang.String getName()
    {
        ucar.nc2.ft.fmrc.TimeCoord r0, $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        $r1 = <ucar.nc2.ft.fmrc.TimeCoord: ucar.nc2.ft.fmrc.TimeCoord EMPTY>;

        if r0 != $r1 goto label1;

        return "EMPTY";

     label1:
        $i0 = r0.<ucar.nc2.ft.fmrc.TimeCoord: int id>;

        if $i0 != 0 goto label2;

        $r5 = "time";

        goto label3;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("time");

        $i1 = r0.<ucar.nc2.ft.fmrc.TimeCoord: int id>;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return $r5;
    }

    public java.lang.String getAxisName()
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        java.lang.String $r1;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        $r1 = r0.<ucar.nc2.ft.fmrc.TimeCoord: java.lang.String axisName>;

        return $r1;
    }

    public int getNCoords()
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        double[] $r1, $r2;
        int $i0;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        $z0 = r0.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval>;

        if $z0 == 0 goto label1;

        $r2 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1>;

        $i0 = lengthof $r2;

        goto label2;

     label1:
        $r1 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] offset>;

        $i0 = lengthof $r1;

     label2:
        return $i0;
    }

    public double[] getOffsetTimes()
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        double[] $r1;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        $z0 = r0.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval>;

        if $z0 == 0 goto label1;

        $r1 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound2>;

        goto label2;

     label1:
        $r1 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] offset>;

     label2:
        return $r1;
    }

    public double[] getBound1()
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        double[] $r1;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        $r1 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1>;

        return $r1;
    }

    public double[] getBound2()
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        double[] $r1;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        $r1 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound2>;

        return $r1;
    }

    public void setOffsetTimes(double[])
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        double[] r1;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        r1 := @parameter0: double[];

        r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] offset> = r1;

        return;
    }

    public void setBounds(double[], double[])
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        double[] r1, r2;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        r1 := @parameter0: double[];

        r2 := @parameter1: double[];

        r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1> = r1;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound2> = r2;

        r0.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval> = 1;

        return;
    }

    public void setBounds(java.util.List)
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        java.util.Iterator $r4;
        double[] $r2, $r3, $r7, $r8;
        java.util.List r1;
        ucar.nc2.ft.fmrc.TimeCoord$Tinv r6;
        int $i0, $i1, i2;
        java.lang.Object $r5;
        boolean $z0;
        double $d0, $d1;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        r1 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = newarray (double)[$i0];

        r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1> = $r2;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        $r3 = newarray (double)[$i1];

        r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound2> = $r3;

        i2 = 0;

        $r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (ucar.nc2.ft.fmrc.TimeCoord$Tinv) $r5;

        $r7 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1>;

        $d0 = staticinvoke <ucar.nc2.ft.fmrc.TimeCoord$Tinv: double access$000(ucar.nc2.ft.fmrc.TimeCoord$Tinv)>(r6);

        $r7[i2] = $d0;

        $r8 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound2>;

        $d1 = staticinvoke <ucar.nc2.ft.fmrc.TimeCoord$Tinv: double access$100(ucar.nc2.ft.fmrc.TimeCoord$Tinv)>(r6);

        $r8[i2] = $d1;

        i2 = i2 + 1;

        goto label1;

     label2:
        r0.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval> = 1;

        return;
    }

    public java.lang.String toString()
    {
        ucar.nc2.ft.fmrc.TimeCoord r3;
        java.lang.Object[] $r2, $r8, $r11;
        java.lang.Double $r9, $r13, $r15;
        java.util.Date $r5;
        double[] $r10, $r12, $r14, r16;
        java.util.Formatter $r1;
        int i0, $i1, i2, i3;
        java.lang.String $r4, $r6, $r7;
        boolean $z0;
        double d0, $d1, $d2;
        ucar.nc2.units.DateFormatter $r0;

        r3 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        $r0 = new ucar.nc2.units.DateFormatter;

        specialinvoke $r0.<ucar.nc2.units.DateFormatter: void <init>()>();

        $r1 = new java.util.Formatter;

        specialinvoke $r1.<java.util.Formatter: void <init>()>();

        $r2 = newarray (java.lang.Object)[2];

        $r4 = virtualinvoke r3.<ucar.nc2.ft.fmrc.TimeCoord: java.lang.String getName()>();

        $r2[0] = $r4;

        $r5 = r3.<ucar.nc2.ft.fmrc.TimeCoord: java.util.Date runDate>;

        $r6 = virtualinvoke $r0.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeString(java.util.Date)>($r5);

        $r2[1] = $r6;

        virtualinvoke $r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%-10s %-26s offsets=", $r2);

        $z0 = r3.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval>;

        if $z0 == 0 goto label3;

        i2 = 0;

     label1:
        $r10 = r3.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1>;

        $i1 = lengthof $r10;

        if i2 >= $i1 goto label2;

        $r11 = newarray (java.lang.Object)[2];

        $r12 = r3.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1>;

        $d1 = $r12[i2];

        $r13 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r11[0] = $r13;

        $r14 = r3.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound2>;

        $d2 = $r14[i2];

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d2);

        $r11[1] = $r15;

        virtualinvoke $r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("(%3.1f,%3.1f) ", $r11);

        i2 = i2 + 1;

        goto label1;

     label2:
        goto label5;

     label3:
        r16 = r3.<ucar.nc2.ft.fmrc.TimeCoord: double[] offset>;

        i0 = lengthof r16;

        i3 = 0;

     label4:
        if i3 >= i0 goto label5;

        d0 = r16[i3];

        $r8 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d0);

        $r8[0] = $r9;

        virtualinvoke $r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%3.1f, ", $r8);

        i3 = i3 + 1;

        goto label4;

     label5:
        $r7 = virtualinvoke $r1.<java.util.Formatter: java.lang.String toString()>();

        return $r7;
    }

    public boolean equalsData(ucar.nc2.ft.fmrc.TimeCoord)
    {
        java.util.Date $r1, $r15, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        ucar.nc2.ft.fmrc.TimeCoord r0, r2;
        double[] $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        double $d0, $d1, $d2, $d3, $d4, $d5;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        r2 := @parameter0: ucar.nc2.ft.fmrc.TimeCoord;

        $r1 = virtualinvoke r0.<ucar.nc2.ft.fmrc.TimeCoord: java.util.Date getRunDate()>();

        if $r1 == null goto label01;

        $r15 = virtualinvoke r0.<ucar.nc2.ft.fmrc.TimeCoord: java.util.Date getRunDate()>();

        $r16 = virtualinvoke r2.<ucar.nc2.ft.fmrc.TimeCoord: java.util.Date getRunDate()>();

        $z6 = virtualinvoke $r15.<java.util.Date: boolean equals(java.lang.Object)>($r16);

        if $z6 != 0 goto label01;

        return 0;

     label01:
        $z1 = r0.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval>;

        $z0 = r2.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval>;

        if $z1 == $z0 goto label02;

        return 0;

     label02:
        $z2 = r0.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval>;

        if $z2 == 0 goto label08;

        $r8 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1>;

        $i4 = lengthof $r8;

        $r9 = r2.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1>;

        $i3 = lengthof $r9;

        if $i4 == $i3 goto label03;

        return 0;

     label03:
        i6 = 0;

     label04:
        $r10 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1>;

        $i5 = lengthof $r10;

        if i6 >= $i5 goto label07;

        $r11 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1>;

        $d3 = $r11[i6];

        $r12 = r2.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1>;

        $d2 = $r12[i6];

        $z4 = staticinvoke <ucar.nc2.util.Misc: boolean closeEnough(double,double)>($d3, $d2);

        if $z4 != 0 goto label05;

        return 0;

     label05:
        $r13 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound2>;

        $d5 = $r13[i6];

        $r14 = r2.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound2>;

        $d4 = $r14[i6];

        $z5 = staticinvoke <ucar.nc2.util.Misc: boolean closeEnough(double,double)>($d5, $d4);

        if $z5 != 0 goto label06;

        return 0;

     label06:
        i6 = i6 + 1;

        goto label04;

     label07:
        return 1;

     label08:
        $r3 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] offset>;

        $i1 = lengthof $r3;

        $r4 = r2.<ucar.nc2.ft.fmrc.TimeCoord: double[] offset>;

        $i0 = lengthof $r4;

        if $i1 == $i0 goto label09;

        return 0;

     label09:
        i7 = 0;

     label10:
        $r5 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] offset>;

        $i2 = lengthof $r5;

        if i7 >= $i2 goto label12;

        $r6 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] offset>;

        $d1 = $r6[i7];

        $r7 = r2.<ucar.nc2.ft.fmrc.TimeCoord: double[] offset>;

        $d0 = $r7[i7];

        $z3 = staticinvoke <ucar.nc2.util.Misc: boolean closeEnough(double,double)>($d1, $d0);

        if $z3 != 0 goto label11;

        return 0;

     label11:
        i7 = i7 + 1;

        goto label10;

     label12:
        return 1;
    }

    public int findInterval(double, double)
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        double[] $r1, $r2;
        int $i0, i1, $i3;
        double d0, $d1, d2, $d3;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        d0 := @parameter0: double;

        d2 := @parameter1: double;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<ucar.nc2.ft.fmrc.TimeCoord: int getNCoords()>();

        if i1 >= $i0 goto label3;

        $r1 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1>;

        $d1 = $r1[i1];

        $z0 = staticinvoke <ucar.nc2.util.Misc: boolean closeEnough(double,double)>($d1, d0);

        if $z0 == 0 goto label2;

        $r2 = r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound2>;

        $d3 = $r2[i1];

        $z1 = staticinvoke <ucar.nc2.util.Misc: boolean closeEnough(double,double)>($d3, d2);

        if $z1 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i3 = (int) -1;

        return $i3;
    }

    public int findIndex(double)
    {
        ucar.nc2.ft.fmrc.TimeCoord r0;
        double[] $r1;
        int $i0, i1, $i3;
        double d0, $d1;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        d0 := @parameter0: double;

        $r1 = virtualinvoke r0.<ucar.nc2.ft.fmrc.TimeCoord: double[] getOffsetTimes()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r1;

        if i1 >= $i0 goto label3;

        $d1 = $r1[i1];

        $z0 = staticinvoke <ucar.nc2.util.Misc: boolean closeEnough(double,double)>($d1, d0);

        if $z0 == 0 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i3 = (int) -1;

        return $i3;
    }

    public int compareTo(java.lang.Object)
    {
        ucar.nc2.ft.fmrc.TimeCoord r1, r2;
        int $i0, $i1, $i2;
        java.lang.Object r0;

        r2 := @this: ucar.nc2.ft.fmrc.TimeCoord;

        r0 := @parameter0: java.lang.Object;

        r1 = (ucar.nc2.ft.fmrc.TimeCoord) r0;

        $i1 = r2.<ucar.nc2.ft.fmrc.TimeCoord: int id>;

        $i0 = r1.<ucar.nc2.ft.fmrc.TimeCoord: int id>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public static ucar.nc2.ft.fmrc.TimeCoord findTimeCoord(java.util.List, ucar.nc2.ft.fmrc.TimeCoord)
    {
        ucar.nc2.ft.fmrc.TimeCoord r0, $r3, r5;
        java.util.Iterator $r2;
        java.util.List r1;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r1 := @parameter0: java.util.List;

        r0 := @parameter1: ucar.nc2.ft.fmrc.TimeCoord;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r5 = (ucar.nc2.ft.fmrc.TimeCoord) $r4;

        $z1 = virtualinvoke r0.<ucar.nc2.ft.fmrc.TimeCoord: boolean equalsData(ucar.nc2.ft.fmrc.TimeCoord)>(r5);

        if $z1 == 0 goto label3;

        return r5;

     label3:
        goto label2;

     label4:
        $r3 = new ucar.nc2.ft.fmrc.TimeCoord;

        specialinvoke $r3.<ucar.nc2.ft.fmrc.TimeCoord: void <init>(ucar.nc2.ft.fmrc.TimeCoord)>(r0);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r3);

        return $r3;
    }

    public static ucar.nc2.ft.fmrc.TimeCoord makeUnion(java.util.List, java.util.Date)
    {
        ucar.nc2.ft.fmrc.TimeCoord $r2, $r4, $r5, $r7, $r8;
        java.util.Date r3;
        java.util.List r0;
        int $i0, $i1;
        java.lang.Object $r1, $r6;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r3 := @parameter1: java.util.Date;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $r8 = new ucar.nc2.ft.fmrc.TimeCoord;

        specialinvoke $r8.<ucar.nc2.ft.fmrc.TimeCoord: void <init>(java.util.Date)>(r3);

        return $r8;

     label1:
        $i1 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i1 != 1 goto label2;

        $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (ucar.nc2.ft.fmrc.TimeCoord) $r6;

        return $r7;

     label2:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (ucar.nc2.ft.fmrc.TimeCoord) $r1;

        $z0 = $r2.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval>;

        if $z0 == 0 goto label3;

        $r5 = staticinvoke <ucar.nc2.ft.fmrc.TimeCoord: ucar.nc2.ft.fmrc.TimeCoord makeUnionIntv(java.util.List,java.util.Date)>(r0, r3);

        return $r5;

     label3:
        $r4 = staticinvoke <ucar.nc2.ft.fmrc.TimeCoord: ucar.nc2.ft.fmrc.TimeCoord makeUnionReg(java.util.List,java.util.Date)>(r0, r3);

        return $r4;
    }

    private static ucar.nc2.ft.fmrc.TimeCoord makeUnionReg(java.util.List, java.util.Date)
    {
        ucar.nc2.ft.fmrc.TimeCoord $r9, r17;
        java.lang.Object[] $r4;
        java.lang.Double $r12, $r15;
        java.util.Date r10;
        double[] $r14, r18;
        java.util.HashSet $r0;
        int $i0, $i1, $i2, i3, i4, i5;
        boolean $z0, $z1, $z2;
        double $d0, d1;
        java.util.Iterator $r2, $r8;
        java.lang.Double[] $r3, $r5, $r6;
        java.lang.IllegalArgumentException $r16;
        java.util.List r1, $r7;
        java.lang.Object $r11, $r13;

        r1 := @parameter0: java.util.List;

        r10 := @parameter1: java.util.Date;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r13 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r17 = (ucar.nc2.ft.fmrc.TimeCoord) $r13;

        $z2 = r17.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval>;

        if $z2 == 0 goto label2;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cant mix interval coordinates");

        throw $r16;

     label2:
        $r14 = virtualinvoke r17.<ucar.nc2.ft.fmrc.TimeCoord: double[] getOffsetTimes()>();

        i3 = lengthof $r14;

        i4 = 0;

     label3:
        if i4 >= i3 goto label4;

        d1 = $r14[i4];

        $r15 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(d1);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r15);

        i4 = i4 + 1;

        goto label3;

     label4:
        goto label1;

     label5:
        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $r3 = newarray (java.lang.Double)[$i0];

        $r4 = interfaceinvoke $r0.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (java.lang.Double[]) $r4;

        $r6 = (java.lang.Double[]) $r5;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r7);

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        r18 = newarray (double)[$i1];

        i5 = 0;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r11 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (java.lang.Double) $r11;

        $d0 = virtualinvoke $r12.<java.lang.Double: double doubleValue()>();

        $i2 = i5;

        i5 = i5 + 1;

        r18[$i2] = $d0;

        goto label6;

     label7:
        $r9 = new ucar.nc2.ft.fmrc.TimeCoord;

        specialinvoke $r9.<ucar.nc2.ft.fmrc.TimeCoord: void <init>(java.util.Date)>(r10);

        virtualinvoke $r9.<ucar.nc2.ft.fmrc.TimeCoord: void setOffsetTimes(double[])>(r18);

        return $r9;
    }

    private static ucar.nc2.ft.fmrc.TimeCoord makeUnionIntv(java.util.List, java.util.Date)
    {
        java.util.Date r10;
        boolean $z0, $z1;
        java.util.List r1, $r7;
        ucar.nc2.ft.fmrc.TimeCoord$Tinv r12, $r15;
        ucar.nc2.ft.fmrc.TimeCoord$Tinv[] $r3, $r5, $r6;
        ucar.nc2.ft.fmrc.TimeCoord $r9, r19;
        java.lang.Object[] $r4;
        double[] r8, $r14, $r16, $r17, r20;
        java.util.HashSet $r0;
        int $i0, $i1, $i2, i3, i4;
        double $d0, $d1, $d2, $d3;
        java.util.Iterator $r2;
        java.lang.IllegalArgumentException $r18;
        java.lang.Object $r11, $r13;

        r1 := @parameter0: java.util.List;

        r10 := @parameter1: java.util.Date;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r13 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r19 = (ucar.nc2.ft.fmrc.TimeCoord) $r13;

        $z1 = r19.<ucar.nc2.ft.fmrc.TimeCoord: boolean isInterval>;

        if $z1 != 0 goto label2;

        $r18 = new java.lang.IllegalArgumentException;

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cant mix non-interval coordinates");

        throw $r18;

     label2:
        i3 = 0;

     label3:
        $r14 = r19.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1>;

        $i2 = lengthof $r14;

        if i3 >= $i2 goto label4;

        $r15 = new ucar.nc2.ft.fmrc.TimeCoord$Tinv;

        $r16 = r19.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound1>;

        $d3 = $r16[i3];

        $r17 = r19.<ucar.nc2.ft.fmrc.TimeCoord: double[] bound2>;

        $d2 = $r17[i3];

        specialinvoke $r15.<ucar.nc2.ft.fmrc.TimeCoord$Tinv: void <init>(double,double)>($d3, $d2);

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r15);

        i3 = i3 + 1;

        goto label3;

     label4:
        goto label1;

     label5:
        $i0 = interfaceinvoke $r0.<java.util.Set: int size()>();

        $r3 = newarray (ucar.nc2.ft.fmrc.TimeCoord$Tinv)[$i0];

        $r4 = interfaceinvoke $r0.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (ucar.nc2.ft.fmrc.TimeCoord$Tinv[]) $r4;

        $r6 = (ucar.nc2.ft.fmrc.TimeCoord$Tinv[]) $r5;

        $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6);

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r7);

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        r20 = newarray (double)[$i1];

        r8 = newarray (double)[$i1];

        i4 = 0;

     label6:
        if i4 >= $i1 goto label7;

        $r11 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(i4);

        r12 = (ucar.nc2.ft.fmrc.TimeCoord$Tinv) $r11;

        $d0 = staticinvoke <ucar.nc2.ft.fmrc.TimeCoord$Tinv: double access$000(ucar.nc2.ft.fmrc.TimeCoord$Tinv)>(r12);

        r20[i4] = $d0;

        $d1 = staticinvoke <ucar.nc2.ft.fmrc.TimeCoord$Tinv: double access$100(ucar.nc2.ft.fmrc.TimeCoord$Tinv)>(r12);

        r8[i4] = $d1;

        i4 = i4 + 1;

        goto label6;

     label7:
        $r9 = new ucar.nc2.ft.fmrc.TimeCoord;

        specialinvoke $r9.<ucar.nc2.ft.fmrc.TimeCoord: void <init>(java.util.Date)>(r10);

        virtualinvoke $r9.<ucar.nc2.ft.fmrc.TimeCoord: void setBounds(double[],double[])>(r20, r8);

        return $r9;
    }

    static void <clinit>()
    {
        ucar.nc2.ft.fmrc.TimeCoord $r0;
        double[] $r2;
        java.util.Date $r1;

        $r0 = new ucar.nc2.ft.fmrc.TimeCoord;

        $r1 = new java.util.Date;

        specialinvoke $r1.<java.util.Date: void <init>()>();

        $r2 = newarray (double)[0];

        specialinvoke $r0.<ucar.nc2.ft.fmrc.TimeCoord: void <init>(java.util.Date,double[])>($r1, $r2);

        <ucar.nc2.ft.fmrc.TimeCoord: ucar.nc2.ft.fmrc.TimeCoord EMPTY> = $r0;

        return;
    }
}
