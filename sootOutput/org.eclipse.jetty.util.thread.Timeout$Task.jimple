public class org.eclipse.jetty.util.thread.Timeout$Task extends java.lang.Object
{
    org.eclipse.jetty.util.thread.Timeout$Task _next;
    org.eclipse.jetty.util.thread.Timeout$Task _prev;
    org.eclipse.jetty.util.thread.Timeout _timeout;
    long _delay;
    long _timestamp;
    boolean _expired;

    protected void <init>()
    {
        org.eclipse.jetty.util.thread.Timeout$Task r0;

        r0 := @this: org.eclipse.jetty.util.thread.Timeout$Task;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.eclipse.jetty.util.thread.Timeout$Task: long _timestamp> = 0L;

        r0.<org.eclipse.jetty.util.thread.Timeout$Task: boolean _expired> = 0;

        r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _prev> = r0;

        r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _next> = r0;

        return;
    }

    public long getTimestamp()
    {
        long $l0;
        org.eclipse.jetty.util.thread.Timeout$Task r0;

        r0 := @this: org.eclipse.jetty.util.thread.Timeout$Task;

        $l0 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: long _timestamp>;

        return $l0;
    }

    public long getAge()
    {
        org.eclipse.jetty.util.thread.Timeout r1;
        long $l0, $l2, $l4, $l5;
        org.eclipse.jetty.util.thread.Timeout$Task r0;
        byte $b1, $b3;

        r0 := @this: org.eclipse.jetty.util.thread.Timeout$Task;

        r1 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout _timeout>;

        if r1 == null goto label1;

        $l0 = staticinvoke <org.eclipse.jetty.util.thread.Timeout: long access$200(org.eclipse.jetty.util.thread.Timeout)>(r1);

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $l2 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: long _timestamp>;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label1;

        $l4 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: long _timestamp>;

        $l5 = $l0 - $l4;

        return $l5;

     label1:
        return 0L;
    }

    private void unlink()
    {
        org.eclipse.jetty.util.thread.Timeout$Task r0, $r1, $r2, $r3, $r4;

        r0 := @this: org.eclipse.jetty.util.thread.Timeout$Task;

        $r2 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _next>;

        $r1 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _prev>;

        $r2.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _prev> = $r1;

        $r4 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _prev>;

        $r3 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _next>;

        $r4.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _next> = $r3;

        r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _prev> = r0;

        r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _next> = r0;

        r0.<org.eclipse.jetty.util.thread.Timeout$Task: boolean _expired> = 0;

        return;
    }

    private void link(org.eclipse.jetty.util.thread.Timeout$Task)
    {
        org.eclipse.jetty.util.thread.Timeout$Task r0, r1, r2, $r3, $r4, $r5;

        r0 := @this: org.eclipse.jetty.util.thread.Timeout$Task;

        r2 := @parameter0: org.eclipse.jetty.util.thread.Timeout$Task;

        r1 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _next>;

        $r3 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _next>;

        $r3.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _prev> = r2;

        r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _next> = r2;

        $r4 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _next>;

        $r4.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _next> = r1;

        $r5 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _next>;

        $r5.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _prev> = r0;

        return;
    }

    public void schedule(org.eclipse.jetty.util.thread.Timeout)
    {
        org.eclipse.jetty.util.thread.Timeout$Task r1;
        org.eclipse.jetty.util.thread.Timeout r0;

        r1 := @this: org.eclipse.jetty.util.thread.Timeout$Task;

        r0 := @parameter0: org.eclipse.jetty.util.thread.Timeout;

        virtualinvoke r0.<org.eclipse.jetty.util.thread.Timeout: void schedule(org.eclipse.jetty.util.thread.Timeout$Task)>(r1);

        return;
    }

    public void schedule(org.eclipse.jetty.util.thread.Timeout, long)
    {
        long l0;
        org.eclipse.jetty.util.thread.Timeout$Task r1;
        org.eclipse.jetty.util.thread.Timeout r0;

        r1 := @this: org.eclipse.jetty.util.thread.Timeout$Task;

        r0 := @parameter0: org.eclipse.jetty.util.thread.Timeout;

        l0 := @parameter1: long;

        virtualinvoke r0.<org.eclipse.jetty.util.thread.Timeout: void schedule(org.eclipse.jetty.util.thread.Timeout$Task,long)>(r1, l0);

        return;
    }

    public void reschedule()
    {
        long $l0;
        org.eclipse.jetty.util.thread.Timeout$Task r0;
        org.eclipse.jetty.util.thread.Timeout r1;

        r0 := @this: org.eclipse.jetty.util.thread.Timeout$Task;

        r1 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout _timeout>;

        if r1 == null goto label1;

        $l0 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: long _delay>;

        virtualinvoke r1.<org.eclipse.jetty.util.thread.Timeout: void schedule(org.eclipse.jetty.util.thread.Timeout$Task,long)>(r0, $l0);

     label1:
        return;
    }

    public void cancel()
    {
        java.lang.Throwable $r3;
        org.eclipse.jetty.util.thread.Timeout$Task r0;
        org.eclipse.jetty.util.thread.Timeout r1;
        java.lang.Object $r2;

        r0 := @this: org.eclipse.jetty.util.thread.Timeout$Task;

        r1 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout _timeout>;

        if r1 == null goto label5;

        $r2 = staticinvoke <org.eclipse.jetty.util.thread.Timeout: java.lang.Object access$300(org.eclipse.jetty.util.thread.Timeout)>(r1);

        entermonitor $r2;

     label1:
        specialinvoke r0.<org.eclipse.jetty.util.thread.Timeout$Task: void unlink()>();

        r0.<org.eclipse.jetty.util.thread.Timeout$Task: long _timestamp> = 0L;

        exitmonitor $r2;

     label2:
        goto label5;

     label3:
        $r3 := @caughtexception;

        exitmonitor $r2;

     label4:
        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public boolean isExpired()
    {
        org.eclipse.jetty.util.thread.Timeout$Task r0;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.thread.Timeout$Task;

        $z0 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: boolean _expired>;

        return $z0;
    }

    public boolean isScheduled()
    {
        org.eclipse.jetty.util.thread.Timeout$Task r0, $r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.util.thread.Timeout$Task;

        $r1 = r0.<org.eclipse.jetty.util.thread.Timeout$Task: org.eclipse.jetty.util.thread.Timeout$Task _next>;

        if $r1 == r0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected void expire()
    {
        org.eclipse.jetty.util.thread.Timeout$Task r0;

        r0 := @this: org.eclipse.jetty.util.thread.Timeout$Task;

        return;
    }

    public void expired()
    {
        org.eclipse.jetty.util.thread.Timeout$Task r0;

        r0 := @this: org.eclipse.jetty.util.thread.Timeout$Task;

        return;
    }

    static void access$000(org.eclipse.jetty.util.thread.Timeout$Task)
    {
        org.eclipse.jetty.util.thread.Timeout$Task r0;

        r0 := @parameter0: org.eclipse.jetty.util.thread.Timeout$Task;

        specialinvoke r0.<org.eclipse.jetty.util.thread.Timeout$Task: void unlink()>();

        return;
    }

    static void access$100(org.eclipse.jetty.util.thread.Timeout$Task, org.eclipse.jetty.util.thread.Timeout$Task)
    {
        org.eclipse.jetty.util.thread.Timeout$Task r0, r1;

        r0 := @parameter0: org.eclipse.jetty.util.thread.Timeout$Task;

        r1 := @parameter1: org.eclipse.jetty.util.thread.Timeout$Task;

        specialinvoke r0.<org.eclipse.jetty.util.thread.Timeout$Task: void link(org.eclipse.jetty.util.thread.Timeout$Task)>(r1);

        return;
    }
}
