final class kodkod.util.ints.RangeSequence$Point extends kodkod.util.ints.RangeSequence$Entry
{

    void <init>(int, java.lang.Object)
    {
        int i0;
        java.lang.Object r1;
        kodkod.util.ints.RangeSequence$Point r0;

        r0 := @this: kodkod.util.ints.RangeSequence$Point;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<kodkod.util.ints.RangeSequence$Entry: void <init>(int,java.lang.Object)>(i0, r1);

        return;
    }

    int min()
    {
        int $i0;
        kodkod.util.ints.RangeSequence$Point r0;

        r0 := @this: kodkod.util.ints.RangeSequence$Point;

        $i0 = r0.<kodkod.util.ints.RangeSequence$Point: int key>;

        return $i0;
    }

    boolean isPoint()
    {
        kodkod.util.ints.RangeSequence$Point r0;

        r0 := @this: kodkod.util.ints.RangeSequence$Point;

        return 1;
    }

    protected kodkod.util.ints.RangeSequence$Point clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.RangeSequence$Entry $r1;
        kodkod.util.ints.RangeSequence$Point r0, $r2, $r3;

        r0 := @this: kodkod.util.ints.RangeSequence$Point;

        $r1 = specialinvoke r0.<kodkod.util.ints.RangeSequence$Entry: kodkod.util.ints.RangeSequence$Entry clone()>();

        $r2 = (kodkod.util.ints.RangeSequence$Point) $r1;

        $r3 = (kodkod.util.ints.RangeSequence$Point) $r2;

        return $r3;
    }

    protected volatile kodkod.util.ints.RangeSequence$Entry clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.RangeSequence$Point r0, $r1;
        kodkod.util.ints.RangeSequence$Entry $r2;

        r0 := @this: kodkod.util.ints.RangeSequence$Point;

        $r1 = virtualinvoke r0.<kodkod.util.ints.RangeSequence$Point: kodkod.util.ints.RangeSequence$Point clone()>();

        $r2 = (kodkod.util.ints.RangeSequence$Entry) $r1;

        return $r2;
    }
}
