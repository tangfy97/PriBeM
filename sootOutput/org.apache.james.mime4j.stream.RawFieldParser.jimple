public class org.apache.james.mime4j.stream.RawFieldParser extends java.lang.Object
{
    static final java.util.BitSet COLON;
    static final java.util.BitSet EQUAL_OR_SEMICOLON;
    static final java.util.BitSet SEMICOLON;
    public static final org.apache.james.mime4j.stream.RawFieldParser DEFAULT;

    public void <init>()
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient java.util.BitSet INIT_BITSET(int[])
    {
        int[] r1;
        int $i0, $i1, $i2, i3;
        java.util.BitSet $r0;

        r1 := @parameter0: int[];

        $r0 = new java.util.BitSet;

        $i0 = lengthof r1;

        specialinvoke $r0.<java.util.BitSet: void <init>(int)>($i0);

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label2;

        $i2 = r1[i3];

        virtualinvoke $r0.<java.util.BitSet: void set(int)>($i2);

        i3 = i3 + 1;

        goto label1;

     label2:
        return $r0;
    }

    public org.apache.james.mime4j.stream.RawField parseField(org.apache.james.mime4j.util.ByteSequence) throws org.apache.james.mime4j.MimeException
    {
        org.apache.james.mime4j.stream.RawFieldParser r2;
        org.apache.james.mime4j.util.ByteSequence r0;
        org.apache.james.mime4j.MimeException $r6;
        org.apache.james.mime4j.stream.RawField $r5;
        org.apache.james.mime4j.stream.ParserCursor $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r7, $r8, $r10;
        java.util.BitSet $r3;
        java.lang.String $r4, $r9, $r11;
        boolean $z0;

        r2 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        r0 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new org.apache.james.mime4j.stream.ParserCursor;

        $i0 = interfaceinvoke r0.<org.apache.james.mime4j.util.ByteSequence: int length()>();

        specialinvoke $r1.<org.apache.james.mime4j.stream.ParserCursor: void <init>(int,int)>(0, $i0);

        $r3 = <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet COLON>;

        $r4 = virtualinvoke r2.<org.apache.james.mime4j.stream.RawFieldParser: java.lang.String parseToken(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor,java.util.BitSet)>(r0, $r1, $r3);

        $z0 = virtualinvoke $r1.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label2;

        $r6 = new org.apache.james.mime4j.MimeException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid MIME field: no name/value separator found: ");

        $r9 = virtualinvoke r0.<java.lang.Object: java.lang.String toString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<org.apache.james.mime4j.MimeException: void <init>(java.lang.String)>($r11);

        throw $r6;

     label2:
        $r5 = new org.apache.james.mime4j.stream.RawField;

        $i1 = virtualinvoke $r1.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        specialinvoke $r5.<org.apache.james.mime4j.stream.RawField: void <init>(org.apache.james.mime4j.util.ByteSequence,int,java.lang.String,java.lang.String)>(r0, $i1, $r4, null);

        return $r5;
    }

    public org.apache.james.mime4j.stream.RawBody parseRawBody(org.apache.james.mime4j.stream.RawField)
    {
        org.apache.james.mime4j.stream.RawFieldParser r3;
        org.apache.james.mime4j.util.ByteSequence $r1, r7;
        org.apache.james.mime4j.stream.RawField r0;
        org.apache.james.mime4j.stream.RawBody $r4, $r6;
        org.apache.james.mime4j.stream.ParserCursor $r2;
        int $i0, $i1, i2;
        java.lang.String $r5;

        r3 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        r0 := @parameter0: org.apache.james.mime4j.stream.RawField;

        $r1 = virtualinvoke r0.<org.apache.james.mime4j.stream.RawField: org.apache.james.mime4j.util.ByteSequence getRaw()>();

        r7 = $r1;

        $i0 = virtualinvoke r0.<org.apache.james.mime4j.stream.RawField: int getDelimiterIdx()>();

        i2 = $i0 + 1;

        if $r1 != null goto label2;

        $r5 = virtualinvoke r0.<org.apache.james.mime4j.stream.RawField: java.lang.String getBody()>();

        if $r5 != null goto label1;

        $r6 = new org.apache.james.mime4j.stream.RawBody;

        specialinvoke $r6.<org.apache.james.mime4j.stream.RawBody: void <init>(java.lang.String,java.util.List)>("", null);

        return $r6;

     label1:
        r7 = staticinvoke <org.apache.james.mime4j.util.ContentUtil: org.apache.james.mime4j.util.ByteSequence encode(java.lang.String)>($r5);

        i2 = 0;

     label2:
        $r2 = new org.apache.james.mime4j.stream.ParserCursor;

        $i1 = interfaceinvoke r7.<org.apache.james.mime4j.util.ByteSequence: int length()>();

        specialinvoke $r2.<org.apache.james.mime4j.stream.ParserCursor: void <init>(int,int)>(i2, $i1);

        $r4 = virtualinvoke r3.<org.apache.james.mime4j.stream.RawFieldParser: org.apache.james.mime4j.stream.RawBody parseRawBody(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>(r7, $r2);

        return $r4;
    }

    public org.apache.james.mime4j.stream.RawBody parseRawBody(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor)
    {
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.util.ByteSequence r1;
        org.apache.james.mime4j.stream.RawBody $r6, $r7;
        java.util.ArrayList $r8;
        java.util.List $r5;
        org.apache.james.mime4j.stream.ParserCursor r2;
        int $i0, $i1;
        java.util.BitSet $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        r2 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        $r3 = <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet SEMICOLON>;

        $r4 = virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: java.lang.String parseToken(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor,java.util.BitSet)>(r1, r2, $r3);

        $z0 = virtualinvoke r2.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label1;

        $r7 = new org.apache.james.mime4j.stream.RawBody;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        specialinvoke $r7.<org.apache.james.mime4j.stream.RawBody: void <init>(java.lang.String,java.util.List)>($r4, $r8);

        return $r7;

     label1:
        $i0 = virtualinvoke r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i1 = $i0 + 1;

        virtualinvoke r2.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>($i1);

        $r5 = virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: java.util.List parseParameters(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>(r1, r2);

        $r6 = new org.apache.james.mime4j.stream.RawBody;

        specialinvoke $r6.<org.apache.james.mime4j.stream.RawBody: void <init>(java.lang.String,java.util.List)>($r4, $r5);

        return $r6;
    }

    public java.util.List parseParameters(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor)
    {
        org.apache.james.mime4j.stream.NameValuePair $r4;
        org.apache.james.mime4j.stream.RawFieldParser r1;
        org.apache.james.mime4j.util.ByteSequence r2;
        org.apache.james.mime4j.stream.ParserCursor r3;
        java.util.ArrayList $r0;
        boolean $z0;

        r1 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        r2 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        r3 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        virtualinvoke r1.<org.apache.james.mime4j.stream.RawFieldParser: void skipWhiteSpace(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>(r2, r3);

     label1:
        $z0 = virtualinvoke r3.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r1.<org.apache.james.mime4j.stream.RawFieldParser: org.apache.james.mime4j.stream.NameValuePair parseParameter(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>(r2, r3);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r4);

        goto label1;

     label2:
        return $r0;
    }

    public org.apache.james.mime4j.stream.NameValuePair parseParameter(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor)
    {
        org.apache.james.mime4j.util.ByteSequence r1;
        byte $b1;
        int $i0, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r4, $r6;
        boolean $z0, $z1;
        org.apache.james.mime4j.stream.RawFieldParser r0;
        org.apache.james.mime4j.stream.NameValuePair $r10, $r11, $r12;
        org.apache.james.mime4j.stream.ParserCursor r2;
        java.util.BitSet $r3, $r5;

        r0 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        r2 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        $r3 = <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet EQUAL_OR_SEMICOLON>;

        $r4 = virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: java.lang.String parseToken(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor,java.util.BitSet)>(r1, r2, $r3);

        $z0 = virtualinvoke r2.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label1;

        $r10 = new org.apache.james.mime4j.stream.NameValuePair;

        specialinvoke $r10.<org.apache.james.mime4j.stream.NameValuePair: void <init>(java.lang.String,java.lang.String)>($r4, null);

        return $r10;

     label1:
        $i0 = virtualinvoke r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $b1 = interfaceinvoke r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i0);

        $i2 = virtualinvoke r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i3 = $i2 + 1;

        virtualinvoke r2.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>($i3);

        $i6 = (int) $b1;

        if $i6 != 59 goto label2;

        $r11 = new org.apache.james.mime4j.stream.NameValuePair;

        specialinvoke $r11.<org.apache.james.mime4j.stream.NameValuePair: void <init>(java.lang.String,java.lang.String)>($r4, null);

        return $r11;

     label2:
        $r5 = <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet SEMICOLON>;

        $r6 = virtualinvoke r0.<org.apache.james.mime4j.stream.RawFieldParser: java.lang.String parseValue(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor,java.util.BitSet)>(r1, r2, $r5);

        $z1 = virtualinvoke r2.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z1 != 0 goto label3;

        $i4 = virtualinvoke r2.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i5 = $i4 + 1;

        virtualinvoke r2.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>($i5);

     label3:
        $r12 = new org.apache.james.mime4j.stream.NameValuePair;

        specialinvoke $r12.<org.apache.james.mime4j.stream.NameValuePair: void <init>(java.lang.String,java.lang.String)>($r4, $r6);

        return $r12;
    }

    public java.lang.String parseToken(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor, java.util.BitSet)
    {
        org.apache.james.mime4j.util.ByteSequence r3;
        short $s2, $s5;
        byte $b1;
        int $i0, $i4, $i6, $i7;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, z3;
        org.apache.james.mime4j.stream.RawFieldParser r5;
        char c3;
        org.apache.james.mime4j.stream.ParserCursor r1;
        java.lang.StringBuilder $r6;
        java.util.BitSet r4;

        r5 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        r3 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        r1 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        r4 := @parameter2: java.util.BitSet;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        z3 = 0;

     label1:
        $z0 = virtualinvoke r1.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label7;

        $i0 = virtualinvoke r1.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $b1 = interfaceinvoke r3.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i0);

        $s5 = (short) $b1;

        $s2 = $s5 & 255;

        c3 = (char) $s2;

        if r4 == null goto label2;

        $i6 = (int) c3;

        $z2 = virtualinvoke r4.<java.util.BitSet: boolean get(int)>($i6);

        if $z2 == 0 goto label2;

        goto label7;

     label2:
        $z1 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>(c3);

        if $z1 == 0 goto label3;

        virtualinvoke r5.<org.apache.james.mime4j.stream.RawFieldParser: void skipWhiteSpace(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>(r3, r1);

        z3 = 1;

        goto label6;

     label3:
        $i7 = (int) c3;

        if $i7 != 40 goto label4;

        virtualinvoke r5.<org.apache.james.mime4j.stream.RawFieldParser: void skipComment(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>(r3, r1);

        goto label6;

     label4:
        $i4 = virtualinvoke $r6.<java.lang.StringBuilder: int length()>();

        if $i4 <= 0 goto label5;

        if z3 == 0 goto label5;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label5:
        virtualinvoke r5.<org.apache.james.mime4j.stream.RawFieldParser: void copyContent(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor,java.util.BitSet,java.lang.StringBuilder)>(r3, r1, r4, $r6);

        z3 = 0;

     label6:
        goto label1;

     label7:
        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String parseValue(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor, java.util.BitSet)
    {
        org.apache.james.mime4j.util.ByteSequence r3;
        short $s2, $s6;
        byte $b1;
        int $i0, $i4, $i5, $i7, $i8, $i9;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, z3, z4, z5;
        org.apache.james.mime4j.stream.RawFieldParser r5;
        char c3;
        org.apache.james.mime4j.stream.ParserCursor r1;
        java.lang.StringBuilder $r6;
        java.util.BitSet r4;

        r5 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        r3 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        r1 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        r4 := @parameter2: java.util.BitSet;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        z3 = 0;

        z5 = 0;

        z4 = 0;

     label1:
        $z0 = virtualinvoke r1.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label9;

        $i0 = virtualinvoke r1.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $b1 = interfaceinvoke r3.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i0);

        $s6 = (short) $b1;

        $s2 = $s6 & 255;

        c3 = (char) $s2;

        if r4 == null goto label2;

        $i7 = (int) c3;

        $z2 = virtualinvoke r4.<java.util.BitSet: boolean get(int)>($i7);

        if $z2 == 0 goto label2;

        goto label9;

     label2:
        $z1 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>(c3);

        if $z1 == 0 goto label3;

        virtualinvoke r5.<org.apache.james.mime4j.stream.RawFieldParser: void skipWhiteSpace(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>(r3, r1);

        z3 = 1;

        z5 = 1;

        z4 = 1;

        goto label8;

     label3:
        $i8 = (int) c3;

        if $i8 != 40 goto label4;

        virtualinvoke r5.<org.apache.james.mime4j.stream.RawFieldParser: void skipComment(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>(r3, r1);

        goto label8;

     label4:
        $i9 = (int) c3;

        if $i9 != 34 goto label6;

        $i5 = virtualinvoke $r6.<java.lang.StringBuilder: int length()>();

        if $i5 <= 0 goto label5;

        if z4 == 0 goto label5;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label5:
        virtualinvoke r5.<org.apache.james.mime4j.stream.RawFieldParser: void copyQuotedContent(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor,java.lang.StringBuilder)>(r3, r1, $r6);

        z3 = 0;

        z5 = 0;

        z4 = 0;

        goto label8;

     label6:
        $i4 = virtualinvoke $r6.<java.lang.StringBuilder: int length()>();

        if $i4 <= 0 goto label7;

        if z5 == 0 goto label7;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label7:
        virtualinvoke r5.<org.apache.james.mime4j.stream.RawFieldParser: void copyContent(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor,java.util.BitSet,java.lang.StringBuilder)>(r3, r1, r4, $r6);

        z3 = 0;

        z5 = 0;

        z4 = 0;

     label8:
        goto label1;

     label9:
        $r2 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public void skipWhiteSpace(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor)
    {
        org.apache.james.mime4j.stream.RawFieldParser r2;
        org.apache.james.mime4j.util.ByteSequence r1;
        char c4;
        short $s3, $s7;
        byte $b2;
        org.apache.james.mime4j.stream.ParserCursor r0;
        int $i0, $i1, i5, i6;
        boolean $z0;

        r2 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        r0 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        i5 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i0 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i1 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: int getUpperBound()>();

        i6 = $i0;

     label1:
        if i6 >= $i1 goto label3;

        $b2 = interfaceinvoke r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>(i6);

        $s7 = (short) $b2;

        $s3 = $s7 & 255;

        c4 = (char) $s3;

        $z0 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>(c4);

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        i5 = i5 + 1;

        i6 = i6 + 1;

        goto label1;

     label3:
        virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>(i5);

        return;
    }

    public void skipComment(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor)
    {
        org.apache.james.mime4j.util.ByteSequence r1;
        short $s4, $s6, $s13, $s15;
        byte $b3, $b5;
        int $i0, $i1, $i2, i8, i9, i10, i11, $i14, $i16, $i17, $i18, $i20;
        boolean $z0, z1;
        org.apache.james.mime4j.stream.RawFieldParser r2;
        char c7, c12;
        org.apache.james.mime4j.stream.ParserCursor r0;

        r2 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        r0 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        $z0 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i1 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i2 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: int getUpperBound()>();

        $b3 = interfaceinvoke r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i0);

        $s13 = (short) $b3;

        $s4 = $s13 & 255;

        c7 = (char) $s4;

        $i14 = (int) c7;

        if $i14 == 40 goto label2;

        return;

     label2:
        i8 = $i0 + 1;

        i9 = $i1 + 1;

        i10 = 1;

        z1 = 0;

        i11 = i9;

     label3:
        if i11 >= $i2 goto label9;

        $b5 = interfaceinvoke r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>(i11);

        $s15 = (short) $b5;

        $s6 = $s15 & 255;

        c12 = (char) $s6;

        if z1 == 0 goto label4;

        z1 = 0;

        goto label7;

     label4:
        $i16 = (int) c12;

        if $i16 != 92 goto label5;

        z1 = 1;

        goto label7;

     label5:
        $i17 = (int) c12;

        if $i17 != 40 goto label6;

        i10 = i10 + 1;

        goto label7;

     label6:
        $i18 = (int) c12;

        if $i18 != 41 goto label7;

        $i20 = (int) -1;

        i10 = i10 + $i20;

     label7:
        if i10 > 0 goto label8;

        i8 = i8 + 1;

        goto label9;

     label8:
        i11 = i11 + 1;

        i8 = i8 + 1;

        goto label3;

     label9:
        virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>(i8);

        return;
    }

    public void skipAllWhiteSpace(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor)
    {
        org.apache.james.mime4j.stream.RawFieldParser r2;
        org.apache.james.mime4j.util.ByteSequence r1;
        char c3;
        short $s2, $s4;
        byte $b1;
        org.apache.james.mime4j.stream.ParserCursor r0;
        int $i0, $i5;
        boolean $z0, $z1;

        r2 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        r0 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

     label1:
        $z0 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 != 0 goto label4;

        $i0 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $b1 = interfaceinvoke r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i0);

        $s4 = (short) $b1;

        $s2 = $s4 & 255;

        c3 = (char) $s2;

        $z1 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>(c3);

        if $z1 == 0 goto label2;

        virtualinvoke r2.<org.apache.james.mime4j.stream.RawFieldParser: void skipWhiteSpace(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>(r1, r0);

        goto label3;

     label2:
        $i5 = (int) c3;

        if $i5 != 40 goto label4;

        virtualinvoke r2.<org.apache.james.mime4j.stream.RawFieldParser: void skipComment(org.apache.james.mime4j.util.ByteSequence,org.apache.james.mime4j.stream.ParserCursor)>(r1, r0);

     label3:
        goto label1;

     label4:
        return;
    }

    public void copyContent(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor, java.util.BitSet, java.lang.StringBuilder)
    {
        org.apache.james.mime4j.util.ByteSequence r1;
        short $s3, $s7;
        byte $b2;
        int $i0, $i1, i5, i6, $i8, $i9;
        boolean $z0, $z1;
        org.apache.james.mime4j.stream.RawFieldParser r4;
        char c4;
        org.apache.james.mime4j.stream.ParserCursor r0;
        java.lang.StringBuilder r3;
        java.util.BitSet r2;

        r4 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        r0 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        r2 := @parameter2: java.util.BitSet;

        r3 := @parameter3: java.lang.StringBuilder;

        i5 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i0 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i1 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: int getUpperBound()>();

        i6 = $i0;

     label1:
        if i6 >= $i1 goto label4;

        $b2 = interfaceinvoke r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>(i6);

        $s7 = (short) $b2;

        $s3 = $s7 & 255;

        c4 = (char) $s3;

        if r2 == null goto label2;

        $i8 = (int) c4;

        $z1 = virtualinvoke r2.<java.util.BitSet: boolean get(int)>($i8);

        if $z1 != 0 goto label4;

     label2:
        $z0 = staticinvoke <org.apache.james.mime4j.util.CharsetUtil: boolean isWhitespace(char)>(c4);

        if $z0 != 0 goto label4;

        $i9 = (int) c4;

        if $i9 != 40 goto label3;

        goto label4;

     label3:
        i5 = i5 + 1;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4);

        i6 = i6 + 1;

        goto label1;

     label4:
        virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>(i5);

        return;
    }

    public void copyQuotedContent(org.apache.james.mime4j.util.ByteSequence, org.apache.james.mime4j.stream.ParserCursor, java.lang.StringBuilder)
    {
        org.apache.james.mime4j.util.ByteSequence r1;
        short $s4, $s6, $s12, $s14;
        byte $b3, $b5;
        int $i0, $i1, $i2, i8, i9, i10, $i13, $i15, $i16, $i17, $i18, $i19, $i20;
        boolean $z0, z1;
        org.apache.james.mime4j.stream.RawFieldParser r3;
        char c7, c11;
        org.apache.james.mime4j.stream.ParserCursor r0;
        java.lang.StringBuilder r2;

        r3 := @this: org.apache.james.mime4j.stream.RawFieldParser;

        r1 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        r0 := @parameter1: org.apache.james.mime4j.stream.ParserCursor;

        r2 := @parameter2: java.lang.StringBuilder;

        $z0 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: boolean atEnd()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $i0 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i1 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: int getPos()>();

        $i2 = virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: int getUpperBound()>();

        $b3 = interfaceinvoke r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>($i0);

        $s12 = (short) $b3;

        $s4 = $s12 & 255;

        c7 = (char) $s4;

        $i13 = (int) c7;

        if $i13 == 34 goto label2;

        return;

     label2:
        i8 = $i0 + 1;

        i9 = $i1 + 1;

        z1 = 0;

        i10 = i9;

     label3:
        if i10 >= $i2 goto label9;

        $b5 = interfaceinvoke r1.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>(i10);

        $s14 = (short) $b5;

        $s6 = $s14 & 255;

        c11 = (char) $s6;

        if z1 == 0 goto label5;

        $i15 = (int) c11;

        if $i15 == 34 goto label4;

        $i16 = (int) c11;

        if $i16 == 92 goto label4;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(92);

     label4:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c11);

        z1 = 0;

        goto label8;

     label5:
        $i17 = (int) c11;

        if $i17 != 34 goto label6;

        i8 = i8 + 1;

        goto label9;

     label6:
        $i18 = (int) c11;

        if $i18 != 92 goto label7;

        z1 = 1;

        goto label8;

     label7:
        $i19 = (int) c11;

        if $i19 == 13 goto label8;

        $i20 = (int) c11;

        if $i20 == 10 goto label8;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c11);

     label8:
        i10 = i10 + 1;

        i8 = i8 + 1;

        goto label3;

     label9:
        virtualinvoke r0.<org.apache.james.mime4j.stream.ParserCursor: void updatePos(int)>(i8);

        return;
    }

    static void <clinit>()
    {
        org.apache.james.mime4j.stream.RawFieldParser $r6;
        int[] $r0, $r2, $r4;
        java.util.BitSet $r1, $r3, $r5;

        $r0 = newarray (int)[1];

        $r0[0] = 58;

        $r1 = staticinvoke <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet INIT_BITSET(int[])>($r0);

        <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet COLON> = $r1;

        $r2 = newarray (int)[2];

        $r2[0] = 61;

        $r2[1] = 59;

        $r3 = staticinvoke <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet INIT_BITSET(int[])>($r2);

        <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet EQUAL_OR_SEMICOLON> = $r3;

        $r4 = newarray (int)[1];

        $r4[0] = 59;

        $r5 = staticinvoke <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet INIT_BITSET(int[])>($r4);

        <org.apache.james.mime4j.stream.RawFieldParser: java.util.BitSet SEMICOLON> = $r5;

        $r6 = new org.apache.james.mime4j.stream.RawFieldParser;

        specialinvoke $r6.<org.apache.james.mime4j.stream.RawFieldParser: void <init>()>();

        <org.apache.james.mime4j.stream.RawFieldParser: org.apache.james.mime4j.stream.RawFieldParser DEFAULT> = $r6;

        return;
    }
}
