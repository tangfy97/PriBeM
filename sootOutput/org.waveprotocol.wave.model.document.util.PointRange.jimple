public class org.waveprotocol.wave.model.document.util.PointRange extends java.lang.Object
{
    private final org.waveprotocol.wave.model.document.util.Point first;
    private final org.waveprotocol.wave.model.document.util.Point second;
    private final boolean isCollapsed;
    static final boolean $assertionsDisabled;

    public void <init>(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.PointRange r0;
        java.lang.AssertionError $r2;
        org.waveprotocol.wave.model.document.util.Point r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.PointRange;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.waveprotocol.wave.model.document.util.PointRange: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point first> = r1;

        r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point second> = r1;

        r0.<org.waveprotocol.wave.model.document.util.PointRange: boolean isCollapsed> = 1;

        return;
    }

    public void <init>(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.PointRange r0;
        java.lang.AssertionError $r3, $r4;
        org.waveprotocol.wave.model.document.util.Point r1, r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.document.util.PointRange;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = <org.waveprotocol.wave.model.document.util.PointRange: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("First must not be null.");

        throw $r4;

     label1:
        $z1 = <org.waveprotocol.wave.model.document.util.PointRange: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        if r2 != null goto label2;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("Second must not be null.");

        throw $r3;

     label2:
        r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point first> = r1;

        r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point second> = r2;

        $z2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: boolean equals(java.lang.Object)>(r2);

        r0.<org.waveprotocol.wave.model.document.util.PointRange: boolean isCollapsed> = $z2;

        return;
    }

    public boolean isCollapsed()
    {
        org.waveprotocol.wave.model.document.util.PointRange r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.document.util.PointRange;

        $z0 = r0.<org.waveprotocol.wave.model.document.util.PointRange: boolean isCollapsed>;

        return $z0;
    }

    public org.waveprotocol.wave.model.document.util.Point getFirst()
    {
        org.waveprotocol.wave.model.document.util.PointRange r0;
        org.waveprotocol.wave.model.document.util.Point $r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.PointRange;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point first>;

        return $r1;
    }

    public org.waveprotocol.wave.model.document.util.Point getSecond()
    {
        org.waveprotocol.wave.model.document.util.PointRange r0;
        org.waveprotocol.wave.model.document.util.Point $r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.PointRange;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point second>;

        return $r1;
    }

    public final int hashCode()
    {
        org.waveprotocol.wave.model.document.util.PointRange r0;
        int $i0, $i1, $i2, $i3, $i4;
        org.waveprotocol.wave.model.document.util.Point $r1, $r2, $r3, $r4;

        r0 := @this: org.waveprotocol.wave.model.document.util.PointRange;

        $r1 = r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point first>;

        if $r1 != null goto label1;

        $i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point first>;

        $i3 = virtualinvoke $r2.<org.waveprotocol.wave.model.document.util.Point: int hashCode()>();

     label2:
        $i2 = 31 + $i3;

        $i0 = 31 * $i2;

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point second>;

        if $r3 != null goto label3;

        $i4 = 0;

        goto label4;

     label3:
        $r4 = r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point second>;

        $i4 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.Point: int hashCode()>();

     label4:
        $i1 = $i0 + $i4;

        return $i1;
    }

    public final boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.model.document.util.PointRange r0, r2;
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.util.Point $r3, $r4, $r5, $r6;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.waveprotocol.wave.model.document.util.PointRange;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.waveprotocol.wave.model.document.util.PointRange;

        if $z0 == 0 goto label4;

        r2 = (org.waveprotocol.wave.model.document.util.PointRange) r1;

        $r4 = r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point first>;

        $r3 = r2.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point first>;

        $z1 = virtualinvoke $r4.<org.waveprotocol.wave.model.document.util.Point: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        $r6 = r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point second>;

        $r5 = r2.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point second>;

        $z2 = virtualinvoke $r6.<org.waveprotocol.wave.model.document.util.Point: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;

     label4:
        return 0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r14;
        org.waveprotocol.wave.model.document.util.Point $r3, $r6, $r11;
        boolean $z0;
        org.waveprotocol.wave.model.document.util.PointRange r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r9, $r10, $r12, $r13;

        r0 := @this: org.waveprotocol.wave.model.document.util.PointRange;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.PointRange: boolean isCollapsed()>();

        if $z0 == 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Collapsed:[");

        $r11 = r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point first>;

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Range:[");

        $r3 = r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point first>;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r6 = r0.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point second>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return $r14;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/util/PointRange;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.util.PointRange: boolean $assertionsDisabled> = $z1;

        return;
    }
}
