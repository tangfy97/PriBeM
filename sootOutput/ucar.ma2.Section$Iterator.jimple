public class ucar.ma2.Section$Iterator extends java.lang.Object
{
    private int[] odo;
    private int[] stride;
    private long done;
    private long total;
    static final boolean $assertionsDisabled;
    final ucar.ma2.Section this$0;

    void <init>(ucar.ma2.Section, int[])
    {
        ucar.ma2.Section r1, $r2, $r4;
        long $l3;
        int[] $r3, $r5, $r6, $r7, $r9, r10;
        int $i0, $i1, $i2, $i4, $i5, i6, i7, $i9;
        ucar.ma2.Range $r8;
        ucar.ma2.Section$Iterator r0;

        r0 := @this: ucar.ma2.Section$Iterator;

        r1 := @parameter0: ucar.ma2.Section;

        r10 := @parameter1: int[];

        r0.<ucar.ma2.Section$Iterator: ucar.ma2.Section this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = r0.<ucar.ma2.Section$Iterator: ucar.ma2.Section this$0>;

        $i0 = virtualinvoke $r2.<ucar.ma2.Section: int getRank()>();

        $r3 = newarray (int)[$i0];

        r0.<ucar.ma2.Section$Iterator: int[] odo> = $r3;

        $r4 = r0.<ucar.ma2.Section$Iterator: ucar.ma2.Section this$0>;

        $i1 = virtualinvoke $r4.<ucar.ma2.Section: int getRank()>();

        $r5 = newarray (int)[$i1];

        r0.<ucar.ma2.Section$Iterator: int[] stride> = $r5;

        i6 = 1;

        $i2 = virtualinvoke r1.<ucar.ma2.Section: int getRank()>();

        i7 = $i2 - 1;

     label1:
        if i7 < 0 goto label2;

        $r7 = r0.<ucar.ma2.Section$Iterator: int[] odo>;

        $r8 = virtualinvoke r1.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(i7);

        $i4 = virtualinvoke $r8.<ucar.ma2.Range: int first()>();

        $r7[i7] = $i4;

        $r9 = r0.<ucar.ma2.Section$Iterator: int[] stride>;

        $r9[i7] = i6;

        $i5 = r10[i7];

        i6 = i6 * $i5;

        $i9 = (int) -1;

        i7 = i7 + $i9;

        goto label1;

     label2:
        r0.<ucar.ma2.Section$Iterator: long done> = 0L;

        $r6 = virtualinvoke r1.<ucar.ma2.Section: int[] getShape()>();

        $l3 = staticinvoke <ucar.ma2.Index: long computeSize(int[])>($r6);

        r0.<ucar.ma2.Section$Iterator: long total> = $l3;

        return;
    }

    public boolean hasNext()
    {
        byte $b2;
        int $i3;
        long $l0, $l1;
        ucar.ma2.Section$Iterator r0;
        boolean $z0;

        r0 := @this: ucar.ma2.Section$Iterator;

        $l1 = r0.<ucar.ma2.Section$Iterator: long done>;

        $l0 = r0.<ucar.ma2.Section$Iterator: long total>;

        $b2 = $l1 cmp $l0;

        $i3 = (int) $b2;

        if $i3 >= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int next()
    {
        long $l1, $l2, $l3, $l4;
        ucar.ma2.Section$Iterator r0;
        byte $b5;
        int $i0, $i6;

        r0 := @this: ucar.ma2.Section$Iterator;

        $i0 = specialinvoke r0.<ucar.ma2.Section$Iterator: int currentElement()>();

        $l1 = r0.<ucar.ma2.Section$Iterator: long done>;

        $l2 = $l1 + 1L;

        r0.<ucar.ma2.Section$Iterator: long done> = $l2;

        $l4 = r0.<ucar.ma2.Section$Iterator: long done>;

        $l3 = r0.<ucar.ma2.Section$Iterator: long total>;

        $b5 = $l4 cmp $l3;

        $i6 = (int) $b5;

        if $i6 >= 0 goto label1;

        specialinvoke r0.<ucar.ma2.Section$Iterator: void incr()>();

     label1:
        return $i0;
    }

    private void incr()
    {
        ucar.ma2.Section $r1, $r2;
        java.lang.AssertionError $r8;
        int[] $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i9;
        boolean $z0;
        ucar.ma2.Range $r3;
        ucar.ma2.Section$Iterator r0;

        r0 := @this: ucar.ma2.Section$Iterator;

        $r1 = r0.<ucar.ma2.Section$Iterator: ucar.ma2.Section this$0>;

        $i0 = virtualinvoke $r1.<ucar.ma2.Section: int getRank()>();

        i7 = $i0 - 1;

     label1:
        if i7 < 0 goto label4;

        $r2 = r0.<ucar.ma2.Section$Iterator: ucar.ma2.Section this$0>;

        $r3 = virtualinvoke $r2.<ucar.ma2.Section: ucar.ma2.Range getRange(int)>(i7);

        $r4 = r0.<ucar.ma2.Section$Iterator: int[] odo>;

        $i1 = $r4[i7];

        $i2 = virtualinvoke $r3.<ucar.ma2.Range: int stride()>();

        $i3 = $i1 + $i2;

        $r4[i7] = $i3;

        $r5 = r0.<ucar.ma2.Section$Iterator: int[] odo>;

        $i4 = $r5[i7];

        $i5 = virtualinvoke $r3.<ucar.ma2.Range: int last()>();

        if $i4 > $i5 goto label2;

        goto label4;

     label2:
        $r6 = r0.<ucar.ma2.Section$Iterator: int[] odo>;

        $i6 = virtualinvoke $r3.<ucar.ma2.Range: int first()>();

        $r6[i7] = $i6;

        $i9 = (int) -1;

        i7 = i7 + $i9;

        $z0 = <ucar.ma2.Section$Iterator: boolean $assertionsDisabled>;

        if $z0 != 0 goto label3;

        if i7 >= 0 goto label3;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>()>();

        throw $r8;

     label3:
        goto label1;

     label4:
        return;
    }

    private int currentElement()
    {
        ucar.ma2.Section $r1;
        ucar.ma2.Section$Iterator r0;
        int[] $r2, $r3;
        int $i0, $i1, $i2, $i3, i4, i5;

        r0 := @this: ucar.ma2.Section$Iterator;

        i4 = 0;

        i5 = 0;

     label1:
        $r1 = r0.<ucar.ma2.Section$Iterator: ucar.ma2.Section this$0>;

        $i0 = virtualinvoke $r1.<ucar.ma2.Section: int getRank()>();

        if i5 >= $i0 goto label2;

        $r2 = r0.<ucar.ma2.Section$Iterator: int[] odo>;

        $i2 = $r2[i5];

        $r3 = r0.<ucar.ma2.Section$Iterator: int[] stride>;

        $i1 = $r3[i5];

        $i3 = $i2 * $i1;

        i4 = i4 + $i3;

        i5 = i5 + 1;

        goto label1;

     label2:
        return i4;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/ma2/Section;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.ma2.Section$Iterator: boolean $assertionsDisabled> = $z1;

        return;
    }
}
