public class org.waveprotocol.box.server.rpc.GadgetProviderServlet extends javax.servlet.http.HttpServlet
{
    private static final java.util.logging.Logger LOG;
    private final java.util.concurrent.ConcurrentMap jsonCache;

    public void <init>()
    {
        java.util.concurrent.TimeUnit $r2;
        com.google.common.collect.MapMaker $r1, $r3;
        org.waveprotocol.box.server.rpc.GadgetProviderServlet$1 $r4;
        org.waveprotocol.box.server.rpc.GadgetProviderServlet r0;
        java.util.concurrent.ConcurrentMap $r5;

        r0 := @this: org.waveprotocol.box.server.rpc.GadgetProviderServlet;

        specialinvoke r0.<javax.servlet.http.HttpServlet: void <init>()>();

        $r1 = new com.google.common.collect.MapMaker;

        specialinvoke $r1.<com.google.common.collect.MapMaker: void <init>()>();

        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $r3 = virtualinvoke $r1.<com.google.common.collect.MapMaker: com.google.common.collect.MapMaker expireAfterWrite(long,java.util.concurrent.TimeUnit)>(5L, $r2);

        $r4 = new org.waveprotocol.box.server.rpc.GadgetProviderServlet$1;

        specialinvoke $r4.<org.waveprotocol.box.server.rpc.GadgetProviderServlet$1: void <init>(org.waveprotocol.box.server.rpc.GadgetProviderServlet)>(r0);

        $r5 = virtualinvoke $r3.<com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeComputingMap(com.google.common.base.Function)>($r4);

        r0.<org.waveprotocol.box.server.rpc.GadgetProviderServlet: java.util.concurrent.ConcurrentMap jsonCache> = $r5;

        return;
    }

    protected void doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws java.io.IOException
    {
        java.io.PrintWriter $r5;
        javax.servlet.http.HttpServletResponse r4;
        java.util.concurrent.ConcurrentMap $r1, $r6;
        javax.servlet.http.HttpServletRequest r9;
        java.lang.Object $r2, $r7;
        java.lang.String r3, $r8;
        org.waveprotocol.box.server.rpc.GadgetProviderServlet r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.box.server.rpc.GadgetProviderServlet;

        r9 := @parameter0: javax.servlet.http.HttpServletRequest;

        r4 := @parameter1: javax.servlet.http.HttpServletResponse;

        $r1 = r0.<org.waveprotocol.box.server.rpc.GadgetProviderServlet: java.util.concurrent.ConcurrentMap jsonCache>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>("");

        r3 = (java.lang.String) $r2;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        interfaceinvoke r4.<javax.servlet.http.HttpServletResponse: void sendError(int,java.lang.String)>(500, "Error loading json data from file");

        goto label2;

     label1:
        $r5 = interfaceinvoke r4.<javax.servlet.http.HttpServletResponse: java.io.PrintWriter getWriter()>();

        $r6 = r0.<org.waveprotocol.box.server.rpc.GadgetProviderServlet: java.util.concurrent.ConcurrentMap jsonCache>;

        $r7 = interfaceinvoke $r6.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>("");

        $r8 = (java.lang.String) $r7;

        virtualinvoke $r5.<java.io.PrintWriter: void print(java.lang.String)>($r8);

        virtualinvoke $r5.<java.io.PrintWriter: void flush()>();

     label2:
        return;
    }

    static java.util.logging.Logger access$000()
    {
        java.util.logging.Logger $r0;

        $r0 = <org.waveprotocol.box.server.rpc.GadgetProviderServlet: java.util.logging.Logger LOG>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        $r0 = class "Lorg/waveprotocol/box/server/persistence/file/FileAccountStore;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <org.waveprotocol.box.server.rpc.GadgetProviderServlet: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
