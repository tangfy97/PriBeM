class org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3 extends java.lang.Object implements org.waveprotocol.wave.federation.WaveletFederationProvider$SubmitResultListener
{
    final org.waveprotocol.wave.federation.xmpp.PacketCallback val$responseCallback;
    final org.xmpp.packet.IQ val$request;
    final org.waveprotocol.wave.federation.xmpp.XmppFederationHost this$0;

    void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationHost, org.waveprotocol.wave.federation.xmpp.PacketCallback, org.xmpp.packet.IQ)
    {
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3 r0;
        org.waveprotocol.wave.federation.xmpp.PacketCallback r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost r1;
        org.xmpp.packet.IQ r3;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationHost;

        r2 := @parameter1: org.waveprotocol.wave.federation.xmpp.PacketCallback;

        r3 := @parameter2: org.xmpp.packet.IQ;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3: org.waveprotocol.wave.federation.xmpp.XmppFederationHost this$0> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3: org.waveprotocol.wave.federation.xmpp.PacketCallback val$responseCallback> = r2;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3: org.xmpp.packet.IQ val$request> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)
    {
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3 r0;
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r1;
        org.waveprotocol.wave.federation.xmpp.PacketCallback $r2;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3;

        r1 := @parameter0: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        $r2 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3: org.waveprotocol.wave.federation.xmpp.PacketCallback val$responseCallback>;

        interfaceinvoke $r2.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void error(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)>(r1);

        return;
    }

    public void onSuccess(int, org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion, long)
    {
        long l0, $l2;
        int i1;
        java.lang.String $r7, $r8, $r12, $r13;
        org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3 r0;
        com.google.protobuf.ByteString $r11;
        org.waveprotocol.wave.federation.xmpp.PacketCallback $r14;
        org.dom4j.Element $r3, $r4, $r5, $r6, $r9;
        org.xmpp.packet.IQ $r1, $r2;
        org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion r10;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3;

        i1 := @parameter0: int;

        r10 := @parameter1: org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion;

        l0 := @parameter2: long;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3: org.xmpp.packet.IQ val$request>;

        $r2 = staticinvoke <org.xmpp.packet.IQ: org.xmpp.packet.IQ createResultIQ(org.xmpp.packet.IQ)>($r1);

        $r3 = virtualinvoke $r2.<org.xmpp.packet.IQ: org.dom4j.Element setChildElement(java.lang.String,java.lang.String)>("pubsub", "http://jabber.org/protocol/pubsub");

        $r4 = interfaceinvoke $r3.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("publish");

        $r5 = interfaceinvoke $r4.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("item");

        $r6 = interfaceinvoke $r5.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String,java.lang.String)>("submit-response", "http://waveprotocol.org/protocol/0.2/waveserver");

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0);

        interfaceinvoke $r6.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("application-timestamp", $r7);

        $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        interfaceinvoke $r6.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("operations-applied", $r8);

        $r9 = interfaceinvoke $r6.<org.dom4j.Element: org.dom4j.Element addElement(java.lang.String)>("hashed-version");

        $r11 = virtualinvoke r10.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: com.google.protobuf.ByteString getHistoryHash()>();

        $r12 = staticinvoke <org.waveprotocol.wave.federation.xmpp.Base64Util: java.lang.String encode(com.google.protobuf.ByteString)>($r11);

        interfaceinvoke $r9.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("history-hash", $r12);

        $l2 = virtualinvoke r10.<org.waveprotocol.wave.federation.Proto$ProtocolHashedVersion: long getVersion()>();

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l2);

        interfaceinvoke $r9.<org.dom4j.Element: org.dom4j.Element addAttribute(java.lang.String,java.lang.String)>("version", $r13);

        $r14 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationHost$3: org.waveprotocol.wave.federation.xmpp.PacketCallback val$responseCallback>;

        interfaceinvoke $r14.<org.waveprotocol.wave.federation.xmpp.PacketCallback: void run(org.xmpp.packet.Packet)>($r2);

        return;
    }
}
