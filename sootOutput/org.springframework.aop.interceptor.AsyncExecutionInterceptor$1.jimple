final class org.springframework.aop.interceptor.AsyncExecutionInterceptor$1 extends java.lang.Object implements java.util.concurrent.Callable
{
    final org.springframework.aop.interceptor.AsyncExecutionInterceptor this$0;
    private final org.aopalliance.intercept.MethodInvocation val$invocation;

    void <init>(org.springframework.aop.interceptor.AsyncExecutionInterceptor, org.aopalliance.intercept.MethodInvocation)
    {
        org.aopalliance.intercept.MethodInvocation r2;
        org.springframework.aop.interceptor.AsyncExecutionInterceptor r1;
        org.springframework.aop.interceptor.AsyncExecutionInterceptor$1 r0;

        r0 := @this: org.springframework.aop.interceptor.AsyncExecutionInterceptor$1;

        r1 := @parameter0: org.springframework.aop.interceptor.AsyncExecutionInterceptor;

        r2 := @parameter1: org.aopalliance.intercept.MethodInvocation;

        r0.<org.springframework.aop.interceptor.AsyncExecutionInterceptor$1: org.springframework.aop.interceptor.AsyncExecutionInterceptor this$0> = r1;

        r0.<org.springframework.aop.interceptor.AsyncExecutionInterceptor$1: org.aopalliance.intercept.MethodInvocation val$invocation> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Object call() throws java.lang.Exception
    {
        java.lang.Throwable $r5;
        java.util.concurrent.Future $r3;
        org.aopalliance.intercept.MethodInvocation $r1;
        java.lang.Object $r2, $r4;
        org.springframework.aop.interceptor.AsyncExecutionInterceptor$1 r0;
        boolean $z0;

        r0 := @this: org.springframework.aop.interceptor.AsyncExecutionInterceptor$1;

     label1:
        $r1 = r0.<org.springframework.aop.interceptor.AsyncExecutionInterceptor$1: org.aopalliance.intercept.MethodInvocation val$invocation>;

        $r2 = interfaceinvoke $r1.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

        $z0 = $r2 instanceof java.util.concurrent.Future;

        if $z0 == 0 goto label4;

        $r3 = (java.util.concurrent.Future) $r2;

        $r4 = interfaceinvoke $r3.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        return $r4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <org.springframework.util.ReflectionUtils: void rethrowException(java.lang.Throwable)>($r5);

     label4:
        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
