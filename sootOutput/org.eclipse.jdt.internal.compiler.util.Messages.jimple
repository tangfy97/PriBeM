public final class org.eclipse.jdt.internal.compiler.util.Messages extends java.lang.Object
{
    private static java.lang.String[] nlSuffixes;
    private static final java.lang.String EXTENSION;
    private static final java.lang.String BUNDLE_NAME;
    public static java.lang.String compilation_unresolvedProblem;
    public static java.lang.String compilation_unresolvedProblems;
    public static java.lang.String compilation_request;
    public static java.lang.String compilation_loadBinary;
    public static java.lang.String compilation_process;
    public static java.lang.String compilation_write;
    public static java.lang.String compilation_done;
    public static java.lang.String compilation_units;
    public static java.lang.String compilation_unit;
    public static java.lang.String compilation_internalError;
    public static java.lang.String compilation_beginningToCompile;
    public static java.lang.String compilation_processing;
    public static java.lang.String output_isFile;
    public static java.lang.String output_notValidAll;
    public static java.lang.String output_notValid;
    public static java.lang.String problem_noSourceInformation;
    public static java.lang.String problem_atLine;
    public static java.lang.String abort_invalidAttribute;
    public static java.lang.String abort_invalidExceptionAttribute;
    public static java.lang.String abort_invalidOpcode;
    public static java.lang.String abort_missingCode;
    public static java.lang.String abort_againstSourceModel;
    public static java.lang.String accept_cannot;
    public static java.lang.String parser_incorrectPath;
    public static java.lang.String parser_moveFiles;
    public static java.lang.String parser_syntaxRecovery;
    public static java.lang.String parser_regularParse;
    public static java.lang.String parser_missingFile;
    public static java.lang.String parser_corruptedFile;
    public static java.lang.String parser_endOfFile;
    public static java.lang.String parser_endOfConstructor;
    public static java.lang.String parser_endOfMethod;
    public static java.lang.String parser_endOfInitializer;
    public static java.lang.String ast_missingCode;
    public static java.lang.String constant_cannotCastedInto;
    public static java.lang.String constant_cannotConvertedTo;
    static java.lang.Class class$0;

    static void <clinit>()
    {
        java.lang.ClassNotFoundException $r0;
        java.lang.Class $r3;
        java.lang.String $r2;
        java.lang.NoClassDefFoundError $r1;

        <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String BUNDLE_NAME> = "org.eclipse.jdt.internal.compiler.messages";

        <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String EXTENSION> = ".properties";

        $r3 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.Class class$0>;

        if $r3 != null goto label4;

     label1:
        $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.eclipse.jdt.internal.compiler.util.Messages");

     label2:
        <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.Class class$0> = $r3;

        goto label4;

     label3:
        $r0 := @caughtexception;

        $r1 = new java.lang.NoClassDefFoundError;

        $r2 = virtualinvoke $r0.<java.lang.Throwable: java.lang.String getMessage()>();

        specialinvoke $r1.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r2);

        throw $r1;

     label4:
        staticinvoke <org.eclipse.jdt.internal.compiler.util.Messages: void initializeMessages(java.lang.String,java.lang.Class)>("org.eclipse.jdt.internal.compiler.messages", $r3);

        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private void <init>()
    {
        org.eclipse.jdt.internal.compiler.util.Messages r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.util.Messages;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String bind(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String bind(java.lang.String,java.lang.Object[])>(r0, null);

        return $r1;
    }

    public static java.lang.String bind(java.lang.String, java.lang.Object)
    {
        java.lang.Object[] $r1;
        java.lang.Object r2;
        java.lang.String r0, $r3;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String bind(java.lang.String,java.lang.Object[])>(r0, $r1);

        return $r3;
    }

    public static java.lang.String bind(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r1;
        java.lang.Object r2, r3;
        java.lang.String r0, $r4;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = r2;

        $r1[1] = r3;

        $r4 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String bind(java.lang.String,java.lang.Object[])>(r0, $r1);

        return $r4;
    }

    public static java.lang.String bind(java.lang.String, java.lang.Object[])
    {
        java.lang.String r0, $r2;
        java.lang.Object[] r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object[];

        $r2 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, r1);

        return $r2;
    }

    private static java.lang.String[] buildVariants(java.lang.String)
    {
        java.lang.Object[] $r17;
        java.lang.String[] $r0, $r2, $r5, $r16, $r18, $r19;
        java.util.ArrayList $r22;
        java.lang.StringBuffer $r7, $r13, $r14, $r23, $r24;
        java.util.Locale $r9;
        int $i0, $i1, $i2, $i3, i4, $i6;
        java.lang.String $r1, $r4, $r6, $r8, $r12, $r15, r20, r21;

        r20 := @parameter0: java.lang.String;

        $r0 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String[] nlSuffixes>;

        if $r0 != null goto label4;

        $r9 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r21 = virtualinvoke $r9.<java.util.Locale: java.lang.String toString()>();

        $r22 = new java.util.ArrayList;

        specialinvoke $r22.<java.util.ArrayList: void <init>(int)>(4);

     label1:
        $r23 = new java.lang.StringBuffer;

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>(95);

        specialinvoke $r23.<java.lang.StringBuffer: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r21);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".properties");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r22.<java.util.ArrayList: boolean add(java.lang.Object)>($r15);

        $i2 = virtualinvoke r21.<java.lang.String: int lastIndexOf(int)>(95);

        $i6 = (int) -1;

        if $i2 != $i6 goto label2;

        goto label3;

     label2:
        r21 = virtualinvoke r21.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        goto label1;

     label3:
        virtualinvoke $r22.<java.util.ArrayList: boolean add(java.lang.Object)>(".properties");

        $i3 = virtualinvoke $r22.<java.util.ArrayList: int size()>();

        $r16 = newarray (java.lang.String)[$i3];

        $r17 = virtualinvoke $r22.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r16);

        $r18 = (java.lang.String[]) $r17;

        <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String[] nlSuffixes> = $r18;

     label4:
        $r1 = virtualinvoke r20.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r2 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String[] nlSuffixes>;

        $i0 = lengthof $r2;

        $r19 = newarray (java.lang.String)[$i0];

        i4 = 0;

        goto label6;

     label5:
        $r24 = new java.lang.StringBuffer;

        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r1);

        specialinvoke $r24.<java.lang.StringBuffer: void <init>(java.lang.String)>($r4);

        $r5 = <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String[] nlSuffixes>;

        $r6 = $r5[i4];

        $r7 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r19[i4] = $r8;

        i4 = i4 + 1;

     label6:
        $i1 = lengthof $r19;

        if i4 < $i1 goto label5;

        return $r19;
    }

    public static void initializeMessages(java.lang.String, java.lang.Class)
    {
        java.lang.StringBuffer $r6, $r8, $r9, $r10;
        int i0, $i1, $i2, i3;
        java.lang.String r2, $r7, $r11;
        java.lang.IllegalAccessException $r12;
        java.lang.reflect.Field r4;
        java.lang.IllegalArgumentException $r13;
        java.lang.reflect.Field[] $r1;
        java.lang.Class r0;
        java.lang.Object $r5;
        java.lang.ClassLoader $r3;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $r3 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <org.eclipse.jdt.internal.compiler.util.Messages: void load(java.lang.String,java.lang.ClassLoader,java.lang.reflect.Field[])>(r2, $r3, $r1);

        i0 = lengthof $r1;

        i3 = 0;

        goto label7;

     label1:
        r4 = $r1[i3];

        $i1 = virtualinvoke r4.<java.lang.reflect.Field: int getModifiers()>();

        $i2 = $i1 & 25;

        if $i2 == 9 goto label2;

        goto label6;

     label2:
        $r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r0);

        if $r5 != null goto label6;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(java.lang.String)>("Missing message: ");

        $r7 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" in: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(null, $r11);

     label3:
        goto label6;

     label4:
        $r13 := @caughtexception;

        goto label6;

     label5:
        $r12 := @caughtexception;

     label6:
        i3 = i3 + 1;

     label7:
        if i3 < i0 goto label1;

        return;

        catch java.lang.IllegalArgumentException from label2 to label3 with label4;
        catch java.lang.IllegalAccessException from label2 to label3 with label5;
    }

    public static void load(java.lang.String, java.lang.ClassLoader, java.lang.reflect.Field[])
    {
        java.lang.Throwable $r10;
        java.lang.String[] $r1;
        int i0, $i2;
        java.lang.String r0, $r3, $r7;
        java.io.IOException $r8, $r9, $r11, $r12;
        org.eclipse.jdt.internal.compiler.util.Messages$MessagesProperties $r14;
        java.lang.reflect.Field[] r6;
        java.lang.ClassLoader r2;
        java.io.InputStream r4, $r13;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.ClassLoader;

        r6 := @parameter2: java.lang.reflect.Field[];

        $r1 = staticinvoke <org.eclipse.jdt.internal.compiler.util.Messages: java.lang.String[] buildVariants(java.lang.String)>(r0);

        i0 = lengthof $r1;

        goto label18;

     label01:
        if r2 != null goto label02;

        $r7 = $r1[i0];

        $r13 = staticinvoke <java.lang.ClassLoader: java.io.InputStream getSystemResourceAsStream(java.lang.String)>($r7);

        goto label03;

     label02:
        $r3 = $r1[i0];

        $r13 = virtualinvoke r2.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r3);

     label03:
        r4 = $r13;

        if $r13 != null goto label04;

        goto label18;

     label04:
        $r14 = new org.eclipse.jdt.internal.compiler.util.Messages$MessagesProperties;

        specialinvoke $r14.<org.eclipse.jdt.internal.compiler.util.Messages$MessagesProperties: void <init>(java.lang.reflect.Field[],java.lang.String)>(r6, r0);

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.util.Messages$MessagesProperties: void load(java.io.InputStream)>($r13);

     label05:
        goto label15;

     label06:
        $r12 := @caughtexception;

     label07:
        virtualinvoke r4.<java.io.InputStream: void close()>();

     label08:
        goto label18;

     label09:
        $r11 := @caughtexception;

        goto label18;

     label10:
        $r10 := @caughtexception;

     label11:
        virtualinvoke r4.<java.io.InputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r9 := @caughtexception;

     label14:
        throw $r10;

     label15:
        virtualinvoke $r13.<java.io.InputStream: void close()>();

     label16:
        goto label18;

     label17:
        $r8 := @caughtexception;

     label18:
        $i2 = (int) -1;

        i0 = i0 + $i2;

        if i0 >= 0 goto label01;

        return;

        catch java.io.IOException from label04 to label05 with label06;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.lang.Throwable from label04 to label07 with label10;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label15 to label16 with label17;
    }
}
