public class arq.qparse extends arq.cmdline.CmdARQ
{
    protected arq.cmdline.ModQueryIn modQuery;
    protected arq.cmdline.ModQueryOut modOutput;
    protected arq.cmdline.ModEngine modEngine;
    protected final arq.cmdline.ArgDecl argDeclPrint;
    protected final arq.cmdline.ArgDecl argDeclOpt;
    protected final arq.cmdline.ArgDecl argDeclExplain;
    protected boolean printNone;
    protected boolean printQuery;
    protected boolean printOp;
    protected boolean printOpt;
    protected boolean printQuad;
    protected boolean printQuadOpt;
    protected boolean printPlan;
    static java.lang.String usage;
    static final java.lang.String divider;
    boolean needDivider;

    public static transient void main(java.lang.String[])
    {
        java.lang.String[] r1;
        arq.qparse $r0;

        r1 := @parameter0: java.lang.String[];

        $r0 = new arq.qparse;

        specialinvoke $r0.<arq.qparse: void <init>(java.lang.String[])>(r1);

        virtualinvoke $r0.<arq.qparse: void mainRun()>();

        return;
    }

    public void <init>(java.lang.String[])
    {
        arq.cmdline.Usage $r14;
        arq.cmdline.ArgDecl $r5, $r7, $r9, $r15, $r16, $r17;
        java.lang.String[] r1, $r6, $r8, $r10;
        arq.qparse r0;
        arq.cmdline.ModQueryIn $r2, $r11;
        arq.cmdline.ModEngine $r4, $r13;
        arq.cmdline.ModQueryOut $r3, $r12;

        r0 := @this: arq.qparse;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CmdARQ: void <init>(java.lang.String[])>(r1);

        $r2 = new arq.cmdline.ModQueryIn;

        specialinvoke $r2.<arq.cmdline.ModQueryIn: void <init>()>();

        r0.<arq.qparse: arq.cmdline.ModQueryIn modQuery> = $r2;

        $r3 = new arq.cmdline.ModQueryOut;

        specialinvoke $r3.<arq.cmdline.ModQueryOut: void <init>()>();

        r0.<arq.qparse: arq.cmdline.ModQueryOut modOutput> = $r3;

        $r4 = new arq.cmdline.ModEngine;

        specialinvoke $r4.<arq.cmdline.ModEngine: void <init>()>();

        r0.<arq.qparse: arq.cmdline.ModEngine modEngine> = $r4;

        $r5 = new arq.cmdline.ArgDecl;

        $r6 = newarray (java.lang.String)[0];

        specialinvoke $r5.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(1, "print", $r6);

        r0.<arq.qparse: arq.cmdline.ArgDecl argDeclPrint> = $r5;

        $r7 = new arq.cmdline.ArgDecl;

        $r8 = newarray (java.lang.String)[1];

        $r8[0] = "optimize";

        specialinvoke $r7.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "opt", $r8);

        r0.<arq.qparse: arq.cmdline.ArgDecl argDeclOpt> = $r7;

        $r9 = new arq.cmdline.ArgDecl;

        $r10 = newarray (java.lang.String)[0];

        specialinvoke $r9.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "explain", $r10);

        r0.<arq.qparse: arq.cmdline.ArgDecl argDeclExplain> = $r9;

        r0.<arq.qparse: boolean printNone> = 0;

        r0.<arq.qparse: boolean printQuery> = 0;

        r0.<arq.qparse: boolean printOp> = 0;

        r0.<arq.qparse: boolean printOpt> = 0;

        r0.<arq.qparse: boolean printQuad> = 0;

        r0.<arq.qparse: boolean printQuadOpt> = 0;

        r0.<arq.qparse: boolean printPlan> = 0;

        r0.<arq.qparse: boolean needDivider> = 0;

        $r11 = r0.<arq.qparse: arq.cmdline.ModQueryIn modQuery>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r11);

        $r12 = r0.<arq.qparse: arq.cmdline.ModQueryOut modOutput>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r12);

        $r13 = r0.<arq.qparse: arq.cmdline.ModEngine modEngine>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r13);

        $r14 = specialinvoke r0.<arq.cmdline.CmdARQ: arq.cmdline.Usage getUsage()>();

        virtualinvoke $r14.<arq.cmdline.Usage: void startCategory(java.lang.String)>(null);

        $r15 = r0.<arq.qparse: arq.cmdline.ArgDecl argDeclPrint>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r15, "--print", "Print in various forms [query, op, quad, plan]");

        $r16 = r0.<arq.qparse: arq.cmdline.ArgDecl argDeclExplain>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r16, "--explain", "Print with algebra-level optimization");

        $r17 = r0.<arq.qparse: arq.cmdline.ArgDecl argDeclOpt>;

        specialinvoke r0.<arq.cmdline.CmdARQ: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r17, "--opt", "[deprecated]");

        return;
    }

    protected void processModulesAndArgs()
    {
        arq.cmdline.ArgDecl $r1, $r2, $r3;
        arq.qparse r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20;
        java.util.List $r4;
        arq.cmd.CmdException $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12;
        java.lang.String r7, $r13;
        java.util.Iterator $r5;
        java.lang.Object $r6;

        r0 := @this: arq.qparse;

        specialinvoke r0.<arq.cmdline.CmdARQ: void processModulesAndArgs()>();

        $r1 = r0.<arq.qparse: arq.cmdline.ArgDecl argDeclOpt>;

        $z0 = virtualinvoke r0.<arq.qparse: boolean contains(arq.cmdline.ArgDecl)>($r1);

        if $z0 == 0 goto label01;

        r0.<arq.qparse: boolean printOpt> = 1;

     label01:
        $r2 = r0.<arq.qparse: arq.cmdline.ArgDecl argDeclExplain>;

        $z1 = virtualinvoke r0.<arq.qparse: boolean contains(arq.cmdline.ArgDecl)>($r2);

        if $z1 == 0 goto label02;

        r0.<arq.qparse: boolean printQuery> = 1;

        r0.<arq.qparse: boolean printOpt> = 1;

     label02:
        $r3 = r0.<arq.qparse: arq.cmdline.ArgDecl argDeclPrint>;

        $r4 = virtualinvoke r0.<arq.qparse: java.util.List getValues(arq.cmdline.ArgDecl)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z20 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z20 == 0 goto label15;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.lang.String) $r6;

        $z9 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("query");

        if $z9 == 0 goto label04;

        r0.<arq.qparse: boolean printQuery> = 1;

        goto label14;

     label04:
        $z10 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("op");

        if $z10 != 0 goto label05;

        $z11 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("alg");

        if $z11 != 0 goto label05;

        $z12 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("algebra");

        if $z12 == 0 goto label06;

     label05:
        r0.<arq.qparse: boolean printOp> = 1;

        goto label14;

     label06:
        $z13 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("quad");

        if $z13 == 0 goto label07;

        r0.<arq.qparse: boolean printQuad> = 1;

        goto label14;

     label07:
        $z14 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("quads");

        if $z14 == 0 goto label08;

        r0.<arq.qparse: boolean printQuad> = 1;

        goto label14;

     label08:
        $z15 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("plan");

        if $z15 == 0 goto label09;

        r0.<arq.qparse: boolean printPlan> = 1;

        goto label14;

     label09:
        $z16 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("opt");

        if $z16 == 0 goto label10;

        r0.<arq.qparse: boolean printOpt> = 1;

        goto label14;

     label10:
        $z17 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("optquad");

        if $z17 == 0 goto label11;

        r0.<arq.qparse: boolean printQuadOpt> = 1;

        goto label14;

     label11:
        $z18 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("quadopt");

        if $z18 == 0 goto label12;

        r0.<arq.qparse: boolean printQuadOpt> = 1;

        goto label14;

     label12:
        $z19 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("none");

        if $z19 == 0 goto label13;

        r0.<arq.qparse: boolean printNone> = 1;

        goto label14;

     label13:
        $r8 = new arq.cmd.CmdException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a recognized print form: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : Choices are: query, op, quad, opt, optquad");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<arq.cmd.CmdException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label14:
        goto label03;

     label15:
        $z2 = r0.<arq.qparse: boolean printQuery>;

        if $z2 != 0 goto label16;

        $z3 = r0.<arq.qparse: boolean printOp>;

        if $z3 != 0 goto label16;

        $z4 = r0.<arq.qparse: boolean printQuad>;

        if $z4 != 0 goto label16;

        $z5 = r0.<arq.qparse: boolean printPlan>;

        if $z5 != 0 goto label16;

        $z6 = r0.<arq.qparse: boolean printOpt>;

        if $z6 != 0 goto label16;

        $z7 = r0.<arq.qparse: boolean printQuadOpt>;

        if $z7 != 0 goto label16;

        $z8 = r0.<arq.qparse: boolean printNone>;

        if $z8 != 0 goto label16;

        r0.<arq.qparse: boolean printQuery> = 1;

     label16:
        return;
    }

    protected java.lang.String getSummary()
    {
        java.lang.String $r0;
        arq.qparse r1;

        r1 := @this: arq.qparse;

        $r0 = <arq.qparse: java.lang.String usage>;

        return $r0;
    }

    private void divider()
    {
        java.io.PrintStream $r1;
        arq.qparse r0;
        boolean $z0;

        r0 := @this: arq.qparse;

        $z0 = r0.<arq.qparse: boolean needDivider>;

        if $z0 == 0 goto label1;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -");

     label1:
        r0.<arq.qparse: boolean needDivider> = 1;

        return;
    }

    protected void exec()
    {
        arq.qparse r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Exception $r10;
        com.hp.hpl.jena.sparql.ARQInternalErrorException $r20;
        arq.cmd.CmdException $r11, $r12, $r15;
        com.hp.hpl.jena.query.Dataset $r3;
        java.lang.StringBuilder $r31, $r33, $r35;
        com.hp.hpl.jena.query.QueryExecution $r4;
        java.lang.Throwable $r23, $r26, $r37, $r38;
        com.hp.hpl.jena.query.Query $r2;
        com.hp.hpl.jena.shared.JenaException $r13;
        com.hp.hpl.jena.query.QueryException $r14;
        arq.cmdline.ModQueryIn $r1;
        java.lang.String $r18, $r22, $r34, $r36;
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r16;
        java.io.PrintStream $r17, $r19, $r21, $r24, $r25, $r27, $r28, $r30, $r32, $r39;
        arq.cmdline.ModQueryOut $r5, $r6, $r7, $r8, $r9;
        com.hp.hpl.jena.sparql.core.QueryCheckException $r29;

        r0 := @this: arq.qparse;

     label01:
        $r1 = r0.<arq.qparse: arq.cmdline.ModQueryIn modQuery>;

        $r2 = virtualinvoke $r1.<arq.cmdline.ModQueryIn: com.hp.hpl.jena.query.Query getQuery()>();

     label02:
        staticinvoke <com.hp.hpl.jena.sparql.util.QueryUtils: void checkQuery(com.hp.hpl.jena.query.Query,boolean)>($r2, 1);

     label03:
        goto label05;

     label04:
        $r29 := @caughtexception;

        $r30 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r30.<java.io.PrintStream: void println()>();

        $r32 = <java.lang.System: java.io.PrintStream err>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("**** Check failure: ");

        $r34 = virtualinvoke $r29.<com.hp.hpl.jena.sparql.core.QueryCheckException: java.lang.String getMessage()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r32.<java.io.PrintStream: void println(java.lang.String)>($r36);

        $r37 = virtualinvoke $r29.<com.hp.hpl.jena.sparql.core.QueryCheckException: java.lang.Throwable getCause()>();

        if $r37 == null goto label05;

        $r38 = virtualinvoke $r29.<com.hp.hpl.jena.sparql.core.QueryCheckException: java.lang.Throwable getCause()>();

        $r39 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r38.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r39);

     label05:
        $z5 = r0.<arq.qparse: boolean printQuery>;

        if $z5 == 0 goto label06;

        specialinvoke r0.<arq.qparse: void divider()>();

        $r9 = r0.<arq.qparse: arq.cmdline.ModQueryOut modOutput>;

        virtualinvoke $r9.<arq.cmdline.ModQueryOut: void output(com.hp.hpl.jena.query.Query)>($r2);

     label06:
        $z0 = r0.<arq.qparse: boolean printOp>;

        if $z0 == 0 goto label07;

        specialinvoke r0.<arq.qparse: void divider()>();

        $r8 = r0.<arq.qparse: arq.cmdline.ModQueryOut modOutput>;

        virtualinvoke $r8.<arq.cmdline.ModQueryOut: void outputOp(com.hp.hpl.jena.query.Query,boolean)>($r2, 0);

     label07:
        $z1 = r0.<arq.qparse: boolean printQuad>;

        if $z1 == 0 goto label08;

        specialinvoke r0.<arq.qparse: void divider()>();

        $r7 = r0.<arq.qparse: arq.cmdline.ModQueryOut modOutput>;

        virtualinvoke $r7.<arq.cmdline.ModQueryOut: void outputQuad(com.hp.hpl.jena.query.Query,boolean)>($r2, 0);

     label08:
        $z2 = r0.<arq.qparse: boolean printOpt>;

        if $z2 == 0 goto label09;

        specialinvoke r0.<arq.qparse: void divider()>();

        $r6 = r0.<arq.qparse: arq.cmdline.ModQueryOut modOutput>;

        virtualinvoke $r6.<arq.cmdline.ModQueryOut: void outputOp(com.hp.hpl.jena.query.Query,boolean)>($r2, 1);

     label09:
        $z3 = r0.<arq.qparse: boolean printQuadOpt>;

        if $z3 == 0 goto label10;

        specialinvoke r0.<arq.qparse: void divider()>();

        $r5 = r0.<arq.qparse: arq.cmdline.ModQueryOut modOutput>;

        virtualinvoke $r5.<arq.cmdline.ModQueryOut: void outputQuad(com.hp.hpl.jena.query.Query,boolean)>($r2, 1);

     label10:
        $z4 = r0.<arq.qparse: boolean printPlan>;

        if $z4 == 0 goto label11;

        specialinvoke r0.<arq.qparse: void divider()>();

        $r3 = staticinvoke <com.hp.hpl.jena.query.DatasetFactory: com.hp.hpl.jena.query.Dataset createMem()>();

        $r4 = staticinvoke <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.query.QueryExecution create(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.Dataset)>($r2, $r3);

        staticinvoke <com.hp.hpl.jena.sparql.util.QueryOutputUtils: void printPlan(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.query.QueryExecution)>($r2, $r4);

     label11:
        goto label19;

     label12:
        $r20 := @caughtexception;

        $r21 = <java.lang.System: java.io.PrintStream err>;

        $r22 = virtualinvoke $r20.<com.hp.hpl.jena.sparql.ARQInternalErrorException: java.lang.String getMessage()>();

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r22);

        $r23 = virtualinvoke $r20.<com.hp.hpl.jena.sparql.ARQInternalErrorException: java.lang.Throwable getCause()>();

        if $r23 == null goto label13;

        $r25 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>("Cause:");

        $r26 = virtualinvoke $r20.<com.hp.hpl.jena.sparql.ARQInternalErrorException: java.lang.Throwable getCause()>();

        $r27 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r26.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r27);

        $r28 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r28.<java.io.PrintStream: void println()>();

     label13:
        $r24 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r20.<com.hp.hpl.jena.sparql.ARQInternalErrorException: void printStackTrace(java.io.PrintStream)>($r24);

        goto label19;

     label14:
        $r16 := @caughtexception;

        $r17 = <java.lang.System: java.io.PrintStream err>;

        $r18 = virtualinvoke $r16.<com.hp.hpl.jena.sparql.resultset.ResultSetException: java.lang.String getMessage()>();

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r18);

        $r19 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r16.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void printStackTrace(java.io.PrintStream)>($r19);

        goto label19;

     label15:
        $r14 := @caughtexception;

        $r15 = new arq.cmd.CmdException;

        specialinvoke $r15.<arq.cmd.CmdException: void <init>(java.lang.String,java.lang.Throwable)>("Query Exeception", $r14);

        throw $r15;

     label16:
        $r13 := @caughtexception;

        virtualinvoke $r13.<com.hp.hpl.jena.shared.JenaException: void printStackTrace()>();

        throw $r13;

     label17:
        $r12 := @caughtexception;

        throw $r12;

     label18:
        $r10 := @caughtexception;

        $r11 = new arq.cmd.CmdException;

        specialinvoke $r11.<arq.cmd.CmdException: void <init>(java.lang.String,java.lang.Throwable)>("Exception", $r10);

        throw $r11;

     label19:
        return;

        catch com.hp.hpl.jena.sparql.core.QueryCheckException from label02 to label03 with label04;
        catch com.hp.hpl.jena.sparql.ARQInternalErrorException from label01 to label11 with label12;
        catch com.hp.hpl.jena.sparql.resultset.ResultSetException from label01 to label11 with label14;
        catch com.hp.hpl.jena.query.QueryException from label01 to label11 with label15;
        catch com.hp.hpl.jena.shared.JenaException from label01 to label11 with label16;
        catch arq.cmd.CmdException from label01 to label11 with label17;
        catch java.lang.Exception from label01 to label11 with label18;
    }

    protected java.lang.String getCommandName()
    {
        java.lang.String $r1;
        arq.qparse r0;

        r0 := @this: arq.qparse;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r0);

        return $r1;
    }

    static void writeSyntaxes(java.lang.String, java.io.PrintStream)
    {
        java.io.PrintStream r6;
        com.hp.hpl.jena.query.Syntax $r4;
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.util.TranslationTable $r1;
        java.lang.Object $r3;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r11;
        java.lang.String r0, $r5, $r12, r13;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: java.io.PrintStream;

        if r0 == null goto label1;

        virtualinvoke r6.<java.io.PrintStream: void println(java.lang.String)>(r0);

     label1:
        $r1 = <com.hp.hpl.jena.query.Syntax: com.hp.hpl.jena.sparql.util.TranslationTable querySyntaxNames>;

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.sparql.util.TranslationTable: java.util.Iterator keys()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.lang.String) $r3;

        $r4 = staticinvoke <com.hp.hpl.jena.query.Syntax: com.hp.hpl.jena.query.Syntax lookup(java.lang.String)>(r13);

        $r5 = staticinvoke <arq.qparse: java.lang.String padOut(java.lang.String,int)>(r13, 10);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r6.<java.io.PrintStream: void println(java.lang.String)>($r12);

        goto label2;

     label3:
        return;
    }

    static java.lang.String padOut(java.lang.String, int)
    {
        java.lang.StringBuffer $r0;
        int i0, i1;
        java.lang.String r1, $r2;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(java.lang.String)>(r1);

        i1 = virtualinvoke r1.<java.lang.String: int length()>();

     label1:
        if i1 > i0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        i1 = i1 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.StringBuilder $r0, $r3, $r4;
        java.lang.Class $r1;
        java.lang.String $r2, $r5;

        <arq.qparse: java.lang.String divider> = "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = class "Larq/qparse;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [--in syntax] [--out syntax] [--print=FORM] [\"query\"] | --query <file>");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        <arq.qparse: java.lang.String usage> = $r5;

        return;
    }
}
