public class com.googlecode.mp4parser.authoring.builder.ByteBufferHelper extends java.lang.Object
{

    public void <init>()
    {
        com.googlecode.mp4parser.authoring.builder.ByteBufferHelper r0;

        r0 := @this: com.googlecode.mp4parser.authoring.builder.ByteBufferHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List mergeAdjacentBuffers(java.util.List)
    {
        byte[] $r13, $r16, $r22;
        java.nio.ByteBuffer r4, $r7, $r9, $r12, $r15, $r18, $r20, $r23, $r24, r25, r26;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List r1;
        java.util.ArrayList $r0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.util.Iterator $r2;
        java.lang.Object $r3, $r5, $r6, $r8, $r10, $r11, $r14, $r17, $r19, $r21;

        r1 := @parameter0: java.util.List;

        $r0 = new java.util.ArrayList;

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.nio.ByteBuffer) $r3;

        $i1 = virtualinvoke $r0.<java.util.ArrayList: int size()>();

        i2 = $i1 - 1;

        if i2 < 0 goto label2;

        $z2 = virtualinvoke r4.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z2 == 0 goto label2;

        $r11 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r12 = (java.nio.ByteBuffer) $r11;

        $z3 = virtualinvoke $r12.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z3 == 0 goto label2;

        $r13 = virtualinvoke r4.<java.nio.ByteBuffer: byte[] array()>();

        $r14 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r15 = (java.nio.ByteBuffer) $r14;

        $r16 = virtualinvoke $r15.<java.nio.ByteBuffer: byte[] array()>();

        if $r13 != $r16 goto label2;

        $r17 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r18 = (java.nio.ByteBuffer) $r17;

        $i10 = virtualinvoke $r18.<java.nio.ByteBuffer: int arrayOffset()>();

        $r19 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r20 = (java.nio.ByteBuffer) $r19;

        $i11 = virtualinvoke $r20.<java.nio.ByteBuffer: int limit()>();

        $i12 = $i10 + $i11;

        $i13 = virtualinvoke r4.<java.nio.ByteBuffer: int arrayOffset()>();

        if $i12 != $i13 goto label2;

        $r21 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object remove(int)>(i2);

        r25 = (java.nio.ByteBuffer) $r21;

        $r22 = virtualinvoke r4.<java.nio.ByteBuffer: byte[] array()>();

        $i14 = virtualinvoke r25.<java.nio.ByteBuffer: int arrayOffset()>();

        $i15 = virtualinvoke r25.<java.nio.ByteBuffer: int limit()>();

        $i16 = virtualinvoke r4.<java.nio.ByteBuffer: int limit()>();

        $i17 = $i15 + $i16;

        $r23 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r22, $i14, $i17);

        $r24 = virtualinvoke $r23.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r24);

        goto label4;

     label2:
        if i2 < 0 goto label3;

        $z0 = r4 instanceof java.nio.MappedByteBuffer;

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $z1 = $r5 instanceof java.nio.MappedByteBuffer;

        if $z1 == 0 goto label3;

        $r6 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r7 = (java.nio.ByteBuffer) $r6;

        $i3 = virtualinvoke $r7.<java.nio.ByteBuffer: int limit()>();

        $r8 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r9 = (java.nio.ByteBuffer) $r8;

        $i4 = virtualinvoke $r9.<java.nio.ByteBuffer: int capacity()>();

        $i5 = virtualinvoke r4.<java.nio.ByteBuffer: int capacity()>();

        $i6 = $i4 - $i5;

        if $i3 != $i6 goto label3;

        $r10 = virtualinvoke $r0.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r26 = (java.nio.ByteBuffer) $r10;

        $i7 = virtualinvoke r4.<java.nio.ByteBuffer: int limit()>();

        $i8 = virtualinvoke r26.<java.nio.ByteBuffer: int limit()>();

        $i9 = $i7 + $i8;

        virtualinvoke r26.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i9);

        goto label4;

     label3:
        virtualinvoke r4.<java.nio.ByteBuffer: java.nio.Buffer reset()>();

        virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

     label4:
        $z4 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label1;

        return $r0;
    }
}
