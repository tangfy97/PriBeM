public class org.apache.jena.atlas.data.DefaultDataBag extends org.apache.jena.atlas.data.AbstractDataBag
{
    private final org.apache.jena.atlas.data.ThresholdPolicy policy;
    private final org.apache.jena.atlas.data.SerializationFactory serializationFactory;
    protected boolean finishedAdding;
    protected boolean spilled;
    protected boolean closed;
    private org.apache.jena.atlas.lib.Sink serializer;
    private java.io.OutputStream out;

    public void <init>(org.apache.jena.atlas.data.ThresholdPolicy, org.apache.jena.atlas.data.SerializationFactory)
    {
        org.apache.jena.atlas.data.DefaultDataBag r0;
        org.apache.jena.atlas.data.ThresholdPolicy r1;
        org.apache.jena.atlas.data.SerializationFactory r2;

        r0 := @this: org.apache.jena.atlas.data.DefaultDataBag;

        r1 := @parameter0: org.apache.jena.atlas.data.ThresholdPolicy;

        r2 := @parameter1: org.apache.jena.atlas.data.SerializationFactory;

        specialinvoke r0.<org.apache.jena.atlas.data.AbstractDataBag: void <init>()>();

        r0.<org.apache.jena.atlas.data.DefaultDataBag: boolean finishedAdding> = 0;

        r0.<org.apache.jena.atlas.data.DefaultDataBag: boolean spilled> = 0;

        r0.<org.apache.jena.atlas.data.DefaultDataBag: boolean closed> = 0;

        r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.data.ThresholdPolicy policy> = r1;

        r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.data.SerializationFactory serializationFactory> = r2;

        return;
    }

    private void checkClosed()
    {
        org.apache.jena.atlas.data.DefaultDataBag r0;
        org.apache.jena.atlas.AtlasException $r1;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.data.DefaultDataBag;

        $z0 = r0.<org.apache.jena.atlas.data.DefaultDataBag: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new org.apache.jena.atlas.AtlasException;

        specialinvoke $r1.<org.apache.jena.atlas.AtlasException: void <init>(java.lang.String)>("DefaultDataBag is closed, no operations can be performed on it.");

        throw $r1;

     label1:
        return;
    }

    public void add(java.lang.Object)
    {
        org.apache.jena.atlas.lib.Sink $r3;
        java.util.Collection $r4;
        long $l0, $l1;
        org.apache.jena.atlas.AtlasException $r5;
        org.apache.jena.atlas.data.ThresholdPolicy $r1, $r6;
        org.apache.jena.atlas.data.DefaultDataBag r0;
        java.lang.Object r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.apache.jena.atlas.data.DefaultDataBag;

        r2 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.apache.jena.atlas.data.DefaultDataBag: void checkClosed()>();

        $z0 = r0.<org.apache.jena.atlas.data.DefaultDataBag: boolean finishedAdding>;

        if $z0 == 0 goto label1;

        $r5 = new org.apache.jena.atlas.AtlasException;

        specialinvoke $r5.<org.apache.jena.atlas.AtlasException: void <init>(java.lang.String)>("DefaultDataBag: Cannot add any more items after the writing phase is complete.");

        throw $r5;

     label1:
        $r1 = r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.data.ThresholdPolicy policy>;

        $z1 = interfaceinvoke $r1.<org.apache.jena.atlas.data.ThresholdPolicy: boolean isThresholdExceeded()>();

        if $z1 != 0 goto label2;

        $r4 = r0.<org.apache.jena.atlas.data.DefaultDataBag: java.util.Collection memory>;

        interfaceinvoke $r4.<java.util.Collection: boolean add(java.lang.Object)>(r2);

        goto label4;

     label2:
        $z2 = r0.<org.apache.jena.atlas.data.DefaultDataBag: boolean spilled>;

        if $z2 != 0 goto label3;

        specialinvoke r0.<org.apache.jena.atlas.data.DefaultDataBag: void spill()>();

        r0.<org.apache.jena.atlas.data.DefaultDataBag: boolean spilled> = 1;

     label3:
        $r3 = r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.lib.Sink serializer>;

        interfaceinvoke $r3.<org.apache.jena.atlas.lib.Sink: void send(java.lang.Object)>(r2);

     label4:
        $r6 = r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.data.ThresholdPolicy policy>;

        interfaceinvoke $r6.<org.apache.jena.atlas.data.ThresholdPolicy: void increment(java.lang.Object)>(r2);

        $l0 = r0.<org.apache.jena.atlas.data.DefaultDataBag: long size>;

        $l1 = $l0 + 1L;

        r0.<org.apache.jena.atlas.data.DefaultDataBag: long size> = $l1;

        return;
    }

    private void spill()
    {
        java.io.OutputStream $r1, $r2;
        org.apache.jena.atlas.lib.Sink $r4, $r8;
        java.util.Iterator $r6;
        org.apache.jena.atlas.data.SerializationFactory $r3;
        java.util.Collection $r5;
        java.io.IOException $r9;
        org.apache.jena.atlas.AtlasException $r10;
        org.apache.jena.atlas.data.DefaultDataBag r0;
        java.lang.Object $r7;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.data.DefaultDataBag;

     label1:
        $r1 = virtualinvoke r0.<org.apache.jena.atlas.data.DefaultDataBag: java.io.OutputStream getSpillStream()>();

        r0.<org.apache.jena.atlas.data.DefaultDataBag: java.io.OutputStream out> = $r1;

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        $r10 = new org.apache.jena.atlas.AtlasException;

        specialinvoke $r10.<org.apache.jena.atlas.AtlasException: void <init>(java.lang.Throwable)>($r9);

        throw $r10;

     label4:
        $r3 = r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.data.SerializationFactory serializationFactory>;

        $r2 = r0.<org.apache.jena.atlas.data.DefaultDataBag: java.io.OutputStream out>;

        $r4 = interfaceinvoke $r3.<org.apache.jena.atlas.data.SerializationFactory: org.apache.jena.atlas.lib.Sink createSerializer(java.io.OutputStream)>($r2);

        r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.lib.Sink serializer> = $r4;

        $r5 = r0.<org.apache.jena.atlas.data.DefaultDataBag: java.util.Collection memory>;

        $r6 = interfaceinvoke $r5.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r8 = r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.lib.Sink serializer>;

        interfaceinvoke $r8.<org.apache.jena.atlas.lib.Sink: void send(java.lang.Object)>($r7);

        goto label5;

     label6:
        r0.<org.apache.jena.atlas.data.DefaultDataBag: java.util.Collection memory> = null;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public boolean isSorted()
    {
        org.apache.jena.atlas.data.DefaultDataBag r0;

        r0 := @this: org.apache.jena.atlas.data.DefaultDataBag;

        return 0;
    }

    public boolean isDistinct()
    {
        org.apache.jena.atlas.data.DefaultDataBag r0;

        r0 := @this: org.apache.jena.atlas.data.DefaultDataBag;

        return 0;
    }

    public void flush()
    {
        org.apache.jena.atlas.lib.Sink $r2, $r3;
        org.apache.jena.atlas.data.ThresholdPolicy $r1;
        org.apache.jena.atlas.data.DefaultDataBag r0;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.data.DefaultDataBag;

        $r1 = r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.data.ThresholdPolicy policy>;

        $z0 = interfaceinvoke $r1.<org.apache.jena.atlas.data.ThresholdPolicy: boolean isThresholdExceeded()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.lib.Sink serializer>;

        if null == $r2 goto label1;

        $r3 = r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.lib.Sink serializer>;

        interfaceinvoke $r3.<org.apache.jena.atlas.lib.Sink: void flush()>();

     label1:
        return;
    }

    public java.util.Iterator iterator()
    {
        org.apache.jena.atlas.iterator.IteratorResourceClosing $r10;
        java.io.BufferedInputStream $r6;
        java.util.Iterator $r9, r13;
        org.apache.jena.atlas.data.SerializationFactory $r8;
        java.util.Collection $r2;
        java.io.FileInputStream $r7;
        java.io.File r5;
        java.io.FileNotFoundException $r11;
        org.apache.jena.atlas.AtlasException $r12;
        java.util.List $r3;
        org.apache.jena.atlas.data.ThresholdPolicy $r1;
        org.apache.jena.atlas.data.DefaultDataBag r0;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.data.DefaultDataBag;

        specialinvoke r0.<org.apache.jena.atlas.data.DefaultDataBag: void checkClosed()>();

        virtualinvoke r0.<org.apache.jena.atlas.data.DefaultDataBag: void closeWriter()>();

        $r1 = r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.data.ThresholdPolicy policy>;

        $z0 = interfaceinvoke $r1.<org.apache.jena.atlas.data.ThresholdPolicy: boolean isThresholdExceeded()>();

        if $z0 == 0 goto label5;

        $r3 = virtualinvoke r0.<org.apache.jena.atlas.data.DefaultDataBag: java.util.List getSpillFiles()>();

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0);

        r5 = (java.io.File) $r4;

     label1:
        $r6 = new java.io.BufferedInputStream;

        $r7 = new java.io.FileInputStream;

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>(r5);

        specialinvoke $r6.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>($r7);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new org.apache.jena.atlas.AtlasException;

        specialinvoke $r12.<org.apache.jena.atlas.AtlasException: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label4:
        $r8 = r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.data.SerializationFactory serializationFactory>;

        $r9 = interfaceinvoke $r8.<org.apache.jena.atlas.data.SerializationFactory: java.util.Iterator createDeserializer(java.io.InputStream)>($r6);

        $r10 = new org.apache.jena.atlas.iterator.IteratorResourceClosing;

        specialinvoke $r10.<org.apache.jena.atlas.iterator.IteratorResourceClosing: void <init>(java.util.Iterator,java.io.Closeable)>($r9, $r6);

        virtualinvoke r0.<org.apache.jena.atlas.data.DefaultDataBag: void registerCloseableIterator(org.apache.jena.atlas.lib.Closeable)>($r10);

        r13 = $r10;

        goto label6;

     label5:
        $r2 = r0.<org.apache.jena.atlas.data.DefaultDataBag: java.util.Collection memory>;

        r13 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        return r13;

        catch java.io.FileNotFoundException from label1 to label2 with label3;
    }

    protected void closeWriter()
    {
        java.io.OutputStream $r3, $r4;
        org.apache.jena.atlas.lib.Sink $r2, $r5;
        org.apache.jena.atlas.data.ThresholdPolicy $r1;
        org.apache.jena.atlas.data.DefaultDataBag r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.jena.atlas.data.DefaultDataBag;

        $z0 = r0.<org.apache.jena.atlas.data.DefaultDataBag: boolean finishedAdding>;

        if $z0 != 0 goto label3;

        $r1 = r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.data.ThresholdPolicy policy>;

        $z1 = interfaceinvoke $r1.<org.apache.jena.atlas.data.ThresholdPolicy: boolean isThresholdExceeded()>();

        if $z1 == 0 goto label2;

        $r2 = r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.lib.Sink serializer>;

        if null == $r2 goto label1;

        $r5 = r0.<org.apache.jena.atlas.data.DefaultDataBag: org.apache.jena.atlas.lib.Sink serializer>;

        interfaceinvoke $r5.<org.apache.jena.atlas.lib.Sink: void close()>();

     label1:
        $r3 = r0.<org.apache.jena.atlas.data.DefaultDataBag: java.io.OutputStream out>;

        if null == $r3 goto label2;

        $r4 = r0.<org.apache.jena.atlas.data.DefaultDataBag: java.io.OutputStream out>;

        staticinvoke <org.apache.jena.atlas.io.IO: void close(java.io.Closeable)>($r4);

     label2:
        r0.<org.apache.jena.atlas.data.DefaultDataBag: boolean finishedAdding> = 1;

     label3:
        return;
    }

    public void close()
    {
        org.apache.jena.atlas.data.DefaultDataBag r0;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.data.DefaultDataBag;

        $z0 = r0.<org.apache.jena.atlas.data.DefaultDataBag: boolean closed>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<org.apache.jena.atlas.data.DefaultDataBag: void closeWriter()>();

        virtualinvoke r0.<org.apache.jena.atlas.data.DefaultDataBag: void closeIterators()>();

        virtualinvoke r0.<org.apache.jena.atlas.data.DefaultDataBag: void deleteSpillFiles()>();

        r0.<org.apache.jena.atlas.data.DefaultDataBag: java.util.Collection memory> = null;

        r0.<org.apache.jena.atlas.data.DefaultDataBag: boolean closed> = 1;

     label1:
        return;
    }
}
