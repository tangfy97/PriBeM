public class org.apache.pdfbox.pdfparser.ConformingPDFParser extends org.apache.pdfbox.pdfparser.BaseParser
{
    protected org.apache.pdfbox.io.RandomAccess inputFile;
    java.util.List xrefEntries;
    private long currentOffset;
    private org.apache.pdfbox.pdmodel.ConformingPDDocument doc;
    private boolean throwNonConformingException;
    private boolean recursivlyRead;

    public void <init>(java.io.File) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        org.apache.pdfbox.io.RandomAccessFile $r1;
        java.io.File r2;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        r2 := @parameter0: java.io.File;

        specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void <init>()>();

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.pdmodel.ConformingPDDocument doc> = null;

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean throwNonConformingException> = 1;

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean recursivlyRead> = 1;

        $r1 = new org.apache.pdfbox.io.RandomAccessFile;

        specialinvoke $r1.<org.apache.pdfbox.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r2, "r");

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile> = $r1;

        return;
    }

    public void parse() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        long $l0, $l1, $l2, $l3, $l4;
        org.apache.pdfbox.io.RandomAccess $r4;
        boolean z0, $z1;
        org.apache.pdfbox.cos.COSDocument $r1, $r3;
        java.util.Iterator $r7;
        org.apache.pdfbox.persistence.util.COSObjectKey r9;
        org.apache.pdfbox.pdmodel.ConformingPDDocument $r2, $r5;
        java.util.List $r6;
        java.lang.Object $r8;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r1 = new org.apache.pdfbox.cos.COSDocument;

        specialinvoke $r1.<org.apache.pdfbox.cos.COSDocument: void <init>()>();

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSDocument document> = $r1;

        $r2 = new org.apache.pdfbox.pdmodel.ConformingPDDocument;

        $r3 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSDocument document>;

        specialinvoke $r2.<org.apache.pdfbox.pdmodel.ConformingPDDocument: void <init>(org.apache.pdfbox.cos.COSDocument)>($r3);

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.pdmodel.ConformingPDDocument doc> = $r2;

        $r4 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $l0 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccess: long length()>();

        $l1 = $l0 - 1L;

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = $l1;

        $l2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long parseTrailerInformation()>();

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = $l2;

        specialinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean parseXrefTable()>();

        z0 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean recursivlyRead>;

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean recursivlyRead> = 0;

        $r5 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.pdmodel.ConformingPDDocument doc>;

        $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.ConformingPDDocument: java.util.List getObjectKeysFromPool()>();

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (org.apache.pdfbox.persistence.util.COSObjectKey) $r8;

        $l3 = virtualinvoke r9.<org.apache.pdfbox.persistence.util.COSObjectKey: long getNumber()>();

        $l4 = virtualinvoke r9.<org.apache.pdfbox.persistence.util.COSObjectKey: long getGeneration()>();

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSBase getObject(long,long)>($l3, $l4);

        goto label1;

     label2:
        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean recursivlyRead> = z0;

        return;
    }

    public org.apache.pdfbox.cos.COSDocument getDocument() throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSDocument $r1, $r2;
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        java.io.IOException $r3;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSDocument document>;

        if $r1 != null goto label1;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("You must call parse() before calling getDocument()");

        throw $r3;

     label1:
        $r2 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSDocument document>;

        return $r2;
    }

    public org.apache.pdfbox.pdmodel.PDDocument getPDDocument() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        org.apache.pdfbox.pdmodel.ConformingPDDocument $r1;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.pdmodel.ConformingPDDocument doc>;

        return $r1;
    }

    private boolean parseXrefTable() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        java.lang.AssertionError $r7;
        java.util.ArrayList $r2;
        org.apache.pdfbox.pdmodel.common.XrefEntry $r3;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.lang.String $r1, $r5, $r6, $r11;
        boolean $z0, $z1;
        java.util.List $r4;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readLine()>();

        $z0 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean throwNonConformingException>;

        if $z0 == 0 goto label1;

        $r6 = "xref";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 != 0 goto label1;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xref table not found.\nExpected: xref\nFound: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r7;

     label1:
        i4 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: int readInt()>();

        $i0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: int readInt()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i0);

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.util.List xrefEntries> = $r2;

        i5 = 0;

     label2:
        if i5 >= $i0 goto label3;

        $r4 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.util.List xrefEntries>;

        $r3 = new org.apache.pdfbox.pdmodel.common.XrefEntry;

        $i1 = i4;

        i4 = i4 + 1;

        $i2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: int readInt()>();

        $i3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: int readInt()>();

        $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readLine()>();

        specialinvoke $r3.<org.apache.pdfbox.pdmodel.common.XrefEntry: void <init>(int,int,int,java.lang.String)>($i1, $i2, $i3, $r5);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        i5 = i5 + 1;

        goto label2;

     label3:
        return 1;
    }

    protected long parseTrailerInformation() throws java.io.IOException, java.lang.NumberFormatException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        long $l0;
        java.lang.AssertionError $r7, $r13, $r19;
        java.lang.String $r1, $r2, $r5, $r6, $r11, $r12, $r17, $r18, $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.apache.pdfbox.cos.COSDocument $r3;
        org.apache.pdfbox.cos.COSDictionary $r4;
        java.lang.StringBuilder $r8, $r9, $r10, $r14, $r15, $r16, $r20, $r21, $r22;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespaceBackwards()>();

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readLineBackwards()>();

        $z0 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean throwNonConformingException>;

        if $z0 == 0 goto label1;

        $r18 = "%%EOF";

        $z5 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z5 != 0 goto label1;

        $r19 = new java.lang.AssertionError;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid EOF marker.\nExpected: %%EOF\nFound: ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.AssertionError: void <init>(java.lang.Object)>($r23);

        throw $r19;

     label1:
        $l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long readLongBackwards()>();

        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readLineBackwards()>();

        $z1 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean throwNonConformingException>;

        if $z1 == 0 goto label2;

        $r12 = "startxref";

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z4 != 0 goto label2;

        $r13 = new java.lang.AssertionError;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid trailer.\nExpected: startxref\nFound: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>($r17);

        throw $r13;

     label2:
        $r3 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSDocument document>;

        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSDictionary readDictionaryBackwards()>();

        virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: void setTrailer(org.apache.pdfbox.cos.COSDictionary)>($r4);

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespaceBackwards()>();

        $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readLineBackwards()>();

        $z2 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean throwNonConformingException>;

        if $z2 == 0 goto label3;

        $r6 = "trailer";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z3 != 0 goto label3;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid trailer.\nExpected: trailer\nFound: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r11);

        throw $r7;

     label3:
        return $l0;
    }

    protected byte readByteBackwards() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        long $l0, $l3, $l4;
        byte b2;
        org.apache.pdfbox.io.RandomAccess $r1, $r2;
        int $i1;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $l0 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccess: void seek(long)>($l0);

        $r2 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $i1 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccess: int read()>();

        b2 = (byte) $i1;

        $l3 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $l4 = $l3 - 1L;

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = $l4;

        return b2;
    }

    protected byte readByte() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        long $l0, $l3, $l4;
        byte b2;
        org.apache.pdfbox.io.RandomAccess $r1, $r2;
        int $i1;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $l0 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccess: void seek(long)>($l0);

        $r2 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $i1 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccess: int read()>();

        b2 = (byte) $i1;

        $l3 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $l4 = $l3 + 1L;

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = $l4;

        return b2;
    }

    protected java.lang.String readBackwardUntilWhitespace() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r1;
        byte b1;
        int $i2;
        char $c0;
        java.lang.StringBuilder $r3;
        java.lang.String $r2;
        boolean $z0;

        r1 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        b1 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByteBackwards()>();

     label1:
        $i2 = (int) b1;

        $z0 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean isWhitespace(int)>($i2);

        if $z0 != 0 goto label2;

        $c0 = (char) b1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, $c0);

        b1 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByteBackwards()>();

        goto label1;

     label2:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    protected byte consumeWhitespaceBackwards() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        long $l0, $l2, $l3;
        byte b4;
        org.apache.pdfbox.io.RandomAccess $r1, $r2;
        int $i1, $i5, $i6;
        boolean $z0, $z1;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $l0 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccess: void seek(long)>($l0);

        $r2 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $i1 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccess: int read()>();

        b4 = (byte) $i1;

        $i5 = (int) b4;

        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean isWhitespace(int)>($i5);

        if $z0 != 0 goto label1;

        return b4;

     label1:
        $i6 = (int) b4;

        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean isWhitespace(int)>($i6);

        if $z1 == 0 goto label2;

        b4 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByteBackwards()>();

        goto label1;

     label2:
        $l2 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $l3 = $l2 + 1L;

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = $l3;

        return b4;
    }

    protected byte consumeWhitespace() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        long $l0, $l2, $l3;
        byte b4;
        org.apache.pdfbox.io.RandomAccess $r1, $r2;
        int $i1, $i5, $i6;
        boolean $z0, $z1;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $l0 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccess: void seek(long)>($l0);

        $r2 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $i1 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccess: int read()>();

        b4 = (byte) $i1;

        $i5 = (int) b4;

        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean isWhitespace(int)>($i5);

        if $z0 != 0 goto label1;

        return b4;

     label1:
        $i6 = (int) b4;

        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean isWhitespace(int)>($i6);

        if $z1 == 0 goto label2;

        b4 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByte()>();

        goto label1;

     label2:
        $l2 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $l3 = $l2 - 1L;

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = $l3;

        return b4;
    }

    protected long readLongBackwards() throws java.io.IOException, java.lang.NumberFormatException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r1;
        long $l1, $l2;
        char $c3;
        java.lang.AssertionError $r10;
        byte b4;
        int $i0, $i5;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        java.lang.String $r2, $r7;
        boolean $z0;

        r1 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespaceBackwards()>();

        b4 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByteBackwards()>();

     label1:
        $i5 = (int) b4;

        $z0 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean isWhitespace(int)>($i5);

        if $z0 != 0 goto label2;

        $c3 = (char) b4;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, $c3);

        b4 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByteBackwards()>();

        goto label1;

     label2:
        $i0 = virtualinvoke $r8.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label3;

        $r10 = new java.lang.AssertionError;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number not found.  Expected number at offset: ");

        $l2 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r10;

     label3:
        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

        return $l1;
    }

    protected int readInt() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r1;
        long $l2;
        char $c3;
        java.lang.AssertionError $r10;
        byte b4;
        int $i0, $i1, $i5;
        java.lang.StringBuilder $r5, $r6, $r8, $r9;
        java.lang.String $r2, $r7;
        boolean $z0;

        r1 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespace()>();

        b4 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByte()>();

     label1:
        $i5 = (int) b4;

        $z0 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean isWhitespace(int)>($i5);

        if $z0 != 0 goto label2;

        $c3 = (char) b4;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        b4 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByte()>();

        goto label1;

     label2:
        $i0 = virtualinvoke $r8.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label3;

        $r10 = new java.lang.AssertionError;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number not found.  Expected number at offset: ");

        $l2 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>($r7);

        throw $r10;

     label3:
        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        return $i1;
    }

    protected org.apache.pdfbox.cos.COSNumber readNumber() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r1;
        long $l1;
        char $c2;
        java.lang.AssertionError $r11;
        byte b3;
        org.apache.pdfbox.cos.COSNumber $r3;
        int $i0, $i4;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        java.lang.String $r2, $r8;
        boolean $z0;

        r1 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespace()>();

        b3 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByte()>();

     label1:
        $i4 = (int) b3;

        $z0 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean isWhitespace(int)>($i4);

        if $z0 != 0 goto label2;

        $c2 = (char) b3;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        b3 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByte()>();

        goto label1;

     label2:
        $i0 = virtualinvoke $r9.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label3;

        $r11 = new java.lang.AssertionError;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number not found.  Expected number at offset: ");

        $l1 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.AssertionError: void <init>(java.lang.Object)>($r8);

        throw $r11;

     label3:
        $r2 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSNumber parseNumber(java.lang.String)>($r2);

        return $r3;
    }

    protected org.apache.pdfbox.cos.COSNumber parseNumber(java.lang.String) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r3;
        org.apache.pdfbox.cos.COSFloat $r1;
        org.apache.pdfbox.cos.COSNumber $r2;
        float $f0;
        java.lang.String r0;
        boolean $z0;

        r3 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^[0-9]+$");

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSNumber get(java.lang.String)>(r0);

        return $r2;

     label1:
        $r1 = new org.apache.pdfbox.cos.COSFloat;

        $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r0);

        specialinvoke $r1.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>($f0);

        return $r1;
    }

    protected org.apache.pdfbox.cos.COSBase processCosObject(java.lang.String) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r4;
        java.lang.String r0, $r1, $r2;
        org.apache.pdfbox.cos.COSString $r3;
        boolean $z0;

        r4 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(">");

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("^<", "");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(">$", "");

        $r3 = staticinvoke <org.apache.pdfbox.cos.COSString: org.apache.pdfbox.cos.COSString createFromHexString(java.lang.String)>($r2);

        return $r3;

     label1:
        return null;
    }

    protected org.apache.pdfbox.cos.COSBase readObjectBackwards() throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSUnread $r13, $r15;
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        org.apache.pdfbox.cos.COSArray $r4;
        long $l0, $l1;
        org.apache.pdfbox.cos.COSString $r8, $r11;
        java.lang.String $r1, $r2, $r3, $r5, $r6, $r7, $r9, $r10, r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.NumberFormatException $r16;
        java.lang.RuntimeException $r12, $r17;
        org.apache.pdfbox.pdmodel.ConformingPDDocument $r14;
        org.apache.pdfbox.cos.COSBase r18;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespaceBackwards()>();

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readBackwardUntilWhitespace()>();

        $r2 = "R";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label01;

        $l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long readLongBackwards()>();

        $l1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long readLongBackwards()>();

        $r14 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.pdmodel.ConformingPDDocument doc>;

        $r13 = new org.apache.pdfbox.cos.COSUnread;

        specialinvoke $r13.<org.apache.pdfbox.cos.COSUnread: void <init>()>();

        virtualinvoke $r14.<org.apache.pdfbox.pdmodel.ConformingPDDocument: void putObjectInPool(org.apache.pdfbox.cos.COSBase,long,long)>($r13, $l1, $l0);

        $r15 = new org.apache.pdfbox.cos.COSUnread;

        specialinvoke $r15.<org.apache.pdfbox.cos.COSUnread: void <init>(long,long,org.apache.pdfbox.pdfparser.ConformingPDFParser)>($l1, $l0, r0);

        r18 = $r15;

        goto label11;

     label01:
        $r3 = ">>";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label02;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not yet implemented");

        throw $r12;

     label02:
        if $r1 == null goto label07;

        $z3 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z3 == 0 goto label07;

        $r4 = new org.apache.pdfbox.cos.COSArray;

        specialinvoke $r4.<org.apache.pdfbox.cos.COSArray: void <init>()>();

        r19 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("]$", "");

     label03:
        $z4 = virtualinvoke r19.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z4 != 0 goto label05;

        $z6 = virtualinvoke r19.<java.lang.String: boolean matches(java.lang.String)>("^\\s*<.*>\\s*$");

        if $z6 == 0 goto label04;

        $r9 = virtualinvoke r19.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("^\\s*<", "");

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(">\\s*$", "");

        $r11 = staticinvoke <org.apache.pdfbox.cos.COSString: org.apache.pdfbox.cos.COSString createFromHexString(java.lang.String)>($r10);

        virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r11);

     label04:
        r19 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readBackwardUntilWhitespace()>();

        goto label03;

     label05:
        $r5 = virtualinvoke r19.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("^\\[", "");

        $z5 = virtualinvoke $r5.<java.lang.String: boolean matches(java.lang.String)>("^\\s*<.*>\\s*$");

        if $z5 == 0 goto label06;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("^\\s*<", "");

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(">\\s*$", "");

        $r8 = staticinvoke <org.apache.pdfbox.cos.COSString: org.apache.pdfbox.cos.COSString createFromHexString(java.lang.String)>($r7);

        virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r8);

     label06:
        r18 = $r4;

        goto label11;

     label07:
        if $r1 == null goto label08;

        $z2 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(">");

        if $z2 == 0 goto label08;

        r18 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSBase processCosObject(java.lang.String)>($r1);

        goto label11;

     label08:
        staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

        r18 = staticinvoke <org.apache.pdfbox.cos.COSNumber: org.apache.pdfbox.cos.COSNumber get(java.lang.String)>($r1);

     label09:
        goto label11;

     label10:
        $r16 := @caughtexception;

        $r17 = new java.lang.RuntimeException;

        specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not yet implemented");

        throw $r17;

     label11:
        return r18;

        catch java.lang.NumberFormatException from label08 to label09 with label10;
    }

    protected org.apache.pdfbox.cos.COSName readNameBackwards() throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSName $r3;
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        java.lang.String $r1, $r2;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readBackwardUntilWhitespace()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("^/", "");

        $r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>($r2);

        return $r3;
    }

    public org.apache.pdfbox.cos.COSBase getObject(long, long) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        long l0, $l3, l4;
        java.util.List $r1;
        org.apache.pdfbox.cos.COSBase $r4;
        org.apache.pdfbox.pdmodel.common.XrefEntry r3;
        int $i1, $i2;
        java.lang.Object $r2;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        l0 := @parameter0: long;

        l4 := @parameter1: long;

        $r1 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.util.List xrefEntries>;

        $i1 = (int) l0;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        r3 = (org.apache.pdfbox.pdmodel.common.XrefEntry) $r2;

        $i2 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.XrefEntry: int getByteOffset()>();

        $l3 = (long) $i2;

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = $l3;

        $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSBase readObject(long,long)>(l0, l4);

        return $r4;
    }

    public org.apache.pdfbox.cos.COSBase readObject(long, long) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        byte $b4, $b7;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.pdfbox.pdmodel.ConformingPDDocument $r5, $r7, $r27;
        org.apache.pdfbox.cos.COSBase $r6, $r28;
        java.lang.StringBuilder $r9, $r10, $r11, $r14, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24, $r25;
        org.apache.pdfbox.cos.COSObject $r4;
        long l0, l2, $l3, $l6;
        java.lang.AssertionError $r8, $r13, $r20;
        int $i1, $i5;
        java.lang.String $r2, $r3, $r12, $r19, $r26;
        org.apache.pdfbox.cos.COSDocument $r1;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        l0 := @parameter0: long;

        l2 := @parameter1: long;

        $r1 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSDocument document>;

        if $r1 == null goto label1;

        $z4 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean recursivlyRead>;

        if $z4 == 0 goto label1;

        $r27 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.pdmodel.ConformingPDDocument doc>;

        $r28 = virtualinvoke $r27.<org.apache.pdfbox.pdmodel.ConformingPDDocument: org.apache.pdfbox.cos.COSBase getObjectFromPool(long,long)>(l0, l2);

        if $r28 == null goto label1;

        return $r28;

     label1:
        $i5 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: int readInt()>();

        $l6 = (long) $i5;

        $b7 = l0 cmp $l6;

        if $b7 == 0 goto label2;

        $z3 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean throwNonConformingException>;

        if $z3 == 0 goto label2;

        $r20 = new java.lang.AssertionError;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object numer expected was ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but actual was ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>($r26);

        throw $r20;

     label2:
        virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespace()>();

        $i1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: int readInt()>();

        $l3 = (long) $i1;

        $b4 = l2 cmp $l3;

        if $b4 == 0 goto label3;

        $z2 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean throwNonConformingException>;

        if $z2 == 0 goto label3;

        $r13 = new java.lang.AssertionError;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Generation expected was ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but actual was ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.AssertionError: void <init>(java.lang.Object)>($r19);

        throw $r13;

     label3:
        virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespace()>();

        $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readWord()>();

        $r3 = "obj";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label4;

        $z1 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean throwNonConformingException>;

        if $z1 == 0 goto label4;

        $r8 = new java.lang.AssertionError;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected keyword \'obj\' but found ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>($r12);

        throw $r8;

     label4:
        $r5 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.pdmodel.ConformingPDDocument doc>;

        $r4 = new org.apache.pdfbox.cos.COSObject;

        specialinvoke $r4.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null);

        virtualinvoke $r5.<org.apache.pdfbox.pdmodel.ConformingPDDocument: void putObjectInPool(org.apache.pdfbox.cos.COSBase,long,long)>($r4, l0, l2);

        $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSBase readObject()>();

        $r7 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.pdmodel.ConformingPDDocument doc>;

        virtualinvoke $r7.<org.apache.pdfbox.pdmodel.ConformingPDDocument: void putObjectInPool(org.apache.pdfbox.cos.COSBase,long,long)>($r6, l0, l2);

        return $r6;
    }

    protected org.apache.pdfbox.cos.COSBase readObject() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        byte $b23, b26;
        org.apache.pdfbox.pdmodel.common.XrefEntry $r27;
        org.apache.pdfbox.cos.COSBase $r28, $r42, r46;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r31, $r32, $r48, $r53, $r55;
        org.apache.pdfbox.cos.COSUnread $r50;
        long $l1, $l4, $l8, $l9, $l11, $l12, $l13, $l17, $l18, $l20, $l21, $l22, l24, l25;
        java.lang.AssertionError $r49;
        org.apache.pdfbox.cos.COSString $r54;
        java.lang.String $r1, $r8, $r10, $r12, $r14, $r15, $r17, $r18, $r19, $r20, $r33, $r38, $r39, $r40, $r43, r44, r45;
        java.lang.RuntimeException $r56;
        org.apache.pdfbox.cos.COSNumber $r16, $r34, $r35;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, z15, z16;
        org.apache.pdfbox.cos.COSDictionary $r47;
        java.util.List $r25;
        org.apache.pdfbox.cos.COSArray $r52;
        org.apache.pdfbox.cos.COSObject $r51;
        org.apache.pdfbox.cos.COSInteger $r23, $r24;
        int $i3, $i5, $i6, $i7, $i10, $i15, $i16, $i19, $i27, $i28, $i29, $i30;
        org.apache.pdfbox.cos.COSName $r36, $r41;
        char $c0, $c2, $c14;
        java.lang.Object $r26;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespace()>();

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readWord()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("<<");

        if $z0 == 0 goto label06;

        $r47 = new org.apache.pdfbox.cos.COSDictionary;

        specialinvoke $r47.<org.apache.pdfbox.cos.COSDictionary: void <init>()>();

        z14 = 0;

        z16 = 0;

        z15 = 0;

        $r38 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("^<<", "");

        r44 = $r38;

        $r39 = "";

        $z12 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>($r38);

        if $z12 != 0 goto label01;

        $z13 = virtualinvoke $r38.<java.lang.String: boolean matches(java.lang.String)>("^\\w$");

        if $z13 == 0 goto label02;

     label01:
        $r40 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readWord()>();

        r44 = virtualinvoke $r40.<java.lang.String: java.lang.String trim()>();

     label02:
        if z16 != 0 goto label05;

        $r41 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r44);

        $r42 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSBase readObject()>();

        virtualinvoke $r47.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r41, $r42);

        $b23 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespace()>();

        $i27 = (int) $b23;

        if $i27 != 62 goto label03;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByte()>();

        z14 = 1;

        z16 = 1;

        z15 = 1;

     label03:
        if z15 != 0 goto label04;

        $r43 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readWord()>();

        r44 = virtualinvoke $r43.<java.lang.String: java.lang.String trim()>();

     label04:
        goto label02;

     label05:
        return $r47;

     label06:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z1 == 0 goto label07;

        $r36 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>($r1);

        return $r36;

     label07:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z2 == 0 goto label08;

        $r35 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSNumber parseNumber(java.lang.String)>($r1);

        return $r35;

     label08:
        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $i28 = (int) $c0;

        if $i28 < 48 goto label13;

        $c14 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(0);

        $i29 = (int) $c14;

        if $i29 > 57 goto label13;

        l24 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespace()>();

        $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readWord()>();

        $z7 = virtualinvoke $r15.<java.lang.String: boolean matches(java.lang.String)>("^[0-9]+$");

        if $z7 == 0 goto label09;

        $r17 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readWord()>();

        $r18 = "R";

        $z8 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>($r17);

        if $z8 != 0 goto label10;

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = l24;

        $r34 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSNumber parseNumber(java.lang.String)>($r1);

        return $r34;

     label09:
        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = l24;

        $r16 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSNumber parseNumber(java.lang.String)>($r1);

        return $r16;

     label10:
        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = l24;

        $i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        $i16 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: int readInt()>();

        $r19 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.lang.String readWord()>();

        $r20 = "R";

        $z9 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r19);

        if $z9 != 0 goto label11;

        $z11 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean throwNonConformingException>;

        if $z11 == 0 goto label11;

        $r49 = new java.lang.AssertionError;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected keyword \'R\' but found ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r49.<java.lang.AssertionError: void <init>(java.lang.Object)>($r33);

        throw $r49;

     label11:
        $z10 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean recursivlyRead>;

        if $z10 == 0 goto label12;

        l25 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $r25 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: java.util.List xrefEntries>;

        $r26 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>($i15);

        $r27 = (org.apache.pdfbox.pdmodel.common.XrefEntry) $r26;

        $i19 = virtualinvoke $r27.<org.apache.pdfbox.pdmodel.common.XrefEntry: int getByteOffset()>();

        $l20 = (long) $i19;

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = $l20;

        $l22 = (long) $i15;

        $l21 = (long) $i16;

        $r28 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSBase readObject(long,long)>($l22, $l21);

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = l25;

        return $r28;

     label12:
        $r51 = new org.apache.pdfbox.cos.COSObject;

        $r50 = new org.apache.pdfbox.cos.COSUnread;

        specialinvoke $r50.<org.apache.pdfbox.cos.COSUnread: void <init>()>();

        specialinvoke $r51.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>($r50);

        $l17 = (long) $i15;

        $r23 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l17);

        virtualinvoke $r51.<org.apache.pdfbox.cos.COSObject: void setObjectNumber(org.apache.pdfbox.cos.COSInteger)>($r23);

        $l18 = (long) $i16;

        $r24 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l18);

        virtualinvoke $r51.<org.apache.pdfbox.cos.COSObject: void setGenerationNumber(org.apache.pdfbox.cos.COSInteger)>($r24);

        return $r51;

     label13:
        $z3 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("]");

        if $z3 == 0 goto label15;

        $r14 = "]";

        $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z6 == 0 goto label14;

        return null;

     label14:
        $i10 = virtualinvoke $r1.<java.lang.String: int length()>();

        $l12 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $l11 = (long) $i10;

        $l13 = $l12 - $l11;

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = $l13;

        return null;

     label15:
        $z4 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z4 == 0 goto label18;

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        r45 = "[";

        $l4 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $i5 = virtualinvoke r45.<java.lang.String: int length()>();

        $i6 = $i3 - $i5;

        $i7 = $i6 + 1;

        $l8 = (long) $i7;

        $l9 = $l4 - $l8;

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = $l9;

        $r52 = new org.apache.pdfbox.cos.COSArray;

        specialinvoke $r52.<org.apache.pdfbox.cos.COSArray: void <init>()>();

        r46 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSBase readObject()>();

     label16:
        if r46 == null goto label17;

        virtualinvoke $r52.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(r46);

        r46 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSBase readObject()>();

        goto label16;

     label17:
        return $r52;

     label18:
        $z5 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("(");

        if $z5 == 0 goto label21;

        $r53 = new java.lang.StringBuilder;

        $r10 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(1);

        specialinvoke $r53.<java.lang.StringBuilder: void <init>(java.lang.String)>($r10);

        b26 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByte()>();

     label19:
        $i30 = (int) b26;

        if $i30 == 41 goto label20;

        $c2 = (char) b26;

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        b26 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByte()>();

        goto label19;

     label20:
        $r54 = new org.apache.pdfbox.cos.COSString;

        $r12 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r54.<org.apache.pdfbox.cos.COSString: void <init>(java.lang.String)>($r12);

        return $r54;

     label21:
        $r56 = new java.lang.RuntimeException;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not yet implemented: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" loation=");

        $l1 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r56.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8);

        throw $r56;
    }

    protected java.lang.String readString() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        org.apache.pdfbox.io.PushBackInputStream $r2, $r4, $r5;
        char $c0, $c1;
        int i2, $i4, $i6;
        java.lang.StringBuilder $r6;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespace()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i2 = virtualinvoke $r2.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

     label1:
        $c0 = (char) i2;

        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean isEndOfName(char)>($c0);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean isClosing(int)>(i2);

        if $z1 != 0 goto label2;

        $i4 = (int) -1;

        if i2 == $i4 goto label2;

        $c1 = (char) i2;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r5 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i2 = virtualinvoke $r5.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        goto label1;

     label2:
        $i6 = (int) -1;

        if i2 == $i6 goto label3;

        $r4 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r4.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(i2);

     label3:
        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    protected org.apache.pdfbox.cos.COSDictionary readDictionaryBackwards() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r1;
        byte $b0, $b1, $b2, $b4, $b8, $b12;
        org.apache.pdfbox.io.RandomAccess $r12, $r13, $r14, $r15;
        boolean $z0, $z1, z2, $z3, $z4;
        java.util.Set $r2;
        org.apache.pdfbox.cos.COSDictionary $r19, $r22;
        org.apache.pdfbox.cos.COSBase $r9, $r10;
        java.lang.Object[] $r3, $r6;
        long $l5, $l6, $l9, $l10;
        java.lang.AssertionError $r20, $r21;
        int $i3, $i7, $i11, i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21;
        org.apache.pdfbox.cos.COSName $r5, $r8, $r11;
        java.lang.Object $r4, $r7;

        r1 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r19 = new org.apache.pdfbox.cos.COSDictionary;

        specialinvoke $r19.<org.apache.pdfbox.cos.COSDictionary: void <init>()>();

        virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespaceBackwards()>();

        $b0 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByteBackwards()>();

        $z0 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean throwNonConformingException>;

        if $z0 == 0 goto label01;

        $i14 = (int) $b0;

        if $i14 == 62 goto label01;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>(java.lang.Object)>("");

        throw $r20;

     label01:
        $b1 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByteBackwards()>();

        $z1 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean throwNonConformingException>;

        if $z1 == 0 goto label02;

        $i15 = (int) $b1;

        if $i15 == 62 goto label02;

        $r21 = new java.lang.AssertionError;

        specialinvoke $r21.<java.lang.AssertionError: void <init>(java.lang.Object)>("");

        throw $r21;

     label02:
        z2 = 0;

        $b2 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespaceBackwards()>();

        $i16 = (int) $b2;

        if $i16 != 60 goto label05;

        $r14 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $l9 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $l10 = $l9 - 1L;

        interfaceinvoke $r14.<org.apache.pdfbox.io.RandomAccess: void seek(long)>($l10);

        $r15 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $i11 = interfaceinvoke $r15.<org.apache.pdfbox.io.RandomAccess: int read()>();

        $b12 = (byte) $i11;

        $i17 = (int) $b12;

        if $i17 != 60 goto label03;

        $z3 = 1;

        goto label04;

     label03:
        $z3 = 0;

     label04:
        z2 = $z3;

     label05:
        $r22 = new org.apache.pdfbox.cos.COSDictionary;

        specialinvoke $r22.<org.apache.pdfbox.cos.COSDictionary: void <init>()>();

     label06:
        if z2 != 0 goto label10;

        $r10 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSBase readObjectBackwards()>();

        $r11 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.cos.COSName readNameBackwards()>();

        virtualinvoke $r22.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r11, $r10);

        $b4 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte consumeWhitespaceBackwards()>();

        $i18 = (int) $b4;

        if $i18 != 60 goto label09;

        $r12 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $l5 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $l6 = $l5 - 1L;

        interfaceinvoke $r12.<org.apache.pdfbox.io.RandomAccess: void seek(long)>($l6);

        $r13 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $i7 = interfaceinvoke $r13.<org.apache.pdfbox.io.RandomAccess: int read()>();

        $b8 = (byte) $i7;

        $i19 = (int) $b8;

        if $i19 != 60 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        z2 = $z4;

     label09:
        goto label06;

     label10:
        $r2 = virtualinvoke $r22.<org.apache.pdfbox.cos.COSDictionary: java.util.Set keySet()>();

        $i3 = interfaceinvoke $r2.<java.util.Set: int size()>();

        i13 = $i3 - 1;

     label11:
        if i13 < 0 goto label12;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray()>();

        $r4 = $r3[i13];

        $r5 = (org.apache.pdfbox.cos.COSName) $r4;

        $r6 = interfaceinvoke $r2.<java.util.Set: java.lang.Object[] toArray()>();

        $r7 = $r6[i13];

        $r8 = (org.apache.pdfbox.cos.COSName) $r7;

        $r9 = virtualinvoke $r22.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r8);

        virtualinvoke $r19.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r5, $r9);

        $i21 = (int) -1;

        i13 = i13 + $i21;

        goto label11;

     label12:
        virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByteBackwards()>();

        virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByteBackwards()>();

        return $r19;
    }

    protected java.lang.String readLineBackwards() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r1;
        long $l2, $l5, $l6;
        byte $b0, $b4;
        org.apache.pdfbox.io.RandomAccess $r3, $r4;
        int $i3, $i7, $i8, $i9;
        java.lang.String $r2;
        boolean z0;
        char $c1;
        java.lang.StringBuilder $r5;

        r1 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        z0 = 0;

     label1:
        $b0 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByteBackwards()>();

        $i7 = (int) $b0;

        if $i7 != 10 goto label3;

        $r3 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $l2 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccess: void seek(long)>($l2);

        $r4 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $i3 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccess: int read()>();

        $b4 = (byte) $i3;

        $i8 = (int) $b4;

        if $i8 != 13 goto label2;

        $l5 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $l6 = $l5 - 1L;

        r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = $l6;

     label2:
        z0 = 1;

        goto label5;

     label3:
        $i9 = (int) $b0;

        if $i9 != 13 goto label4;

        z0 = 1;

        goto label5;

     label4:
        $c1 = (char) $b0;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, $c1);

     label5:
        if z0 == 0 goto label1;

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    protected java.lang.String readLine() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r1;
        long $l2, $l5, $l6;
        byte $b0, $b4;
        org.apache.pdfbox.io.RandomAccess $r3, $r4;
        int $i3, $i7, $i8, $i9;
        java.lang.String $r2;
        boolean z0;
        char $c1;
        java.lang.StringBuilder $r5;

        r1 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        z0 = 0;

     label1:
        $b0 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByte()>();

        $i7 = (int) $b0;

        if $i7 != 10 goto label3;

        $r3 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $l2 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccess: void seek(long)>($l2);

        $r4 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: org.apache.pdfbox.io.RandomAccess inputFile>;

        $i3 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccess: int read()>();

        $b4 = (byte) $i3;

        $i8 = (int) $b4;

        if $i8 != 13 goto label2;

        $l5 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $l6 = $l5 + 1L;

        r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = $l6;

     label2:
        z0 = 1;

        goto label5;

     label3:
        $i9 = (int) $b0;

        if $i9 != 13 goto label4;

        z0 = 1;

        goto label5;

     label4:
        $c1 = (char) $b0;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

     label5:
        if z0 == 0 goto label1;

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    protected java.lang.String readWord() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r1;
        long $l3, $l4;
        byte $b0;
        int $i2, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r2, $r3, $r4;
        boolean $z0, $z1, z2, $z4, $z5;
        char $c1;
        java.lang.StringBuilder $r5;

        r1 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

     label1:
        $b0 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: byte readByte()>();

        $i5 = (int) $b0;

        $z0 = virtualinvoke r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean isWhitespace(int)>($i5);

        z2 = $z0;

        if $z0 != 0 goto label5;

        $i2 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label5;

        $i6 = (int) $b0;

        if $i6 == 47 goto label2;

        $i7 = (int) $b0;

        if $i7 == 91 goto label2;

        $i8 = (int) $b0;

        if $i8 == 93 goto label2;

        $i9 = (int) $b0;

        if $i9 != 62 goto label3;

        $r3 = ">";

        $r4 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label3;

     label2:
        $z5 = 1;

        $z4 = 1;

        goto label4;

     label3:
        $z5 = 0;

        $z4 = 0;

     label4:
        z2 = $z5;

        if $z4 == 0 goto label5;

        $l3 = r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset>;

        $l4 = $l3 - 1L;

        r1.<org.apache.pdfbox.pdfparser.ConformingPDFParser: long currentOffset> = $l4;

     label5:
        if z2 != 0 goto label6;

        $c1 = (char) $b0;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

     label6:
        if z2 == 0 goto label1;

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public boolean isRecursivlyRead()
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        $z0 = r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean recursivlyRead>;

        return $z0;
    }

    public void setRecursivlyRead(boolean)
    {
        org.apache.pdfbox.pdfparser.ConformingPDFParser r0;
        boolean z0;

        r0 := @this: org.apache.pdfbox.pdfparser.ConformingPDFParser;

        z0 := @parameter0: boolean;

        r0.<org.apache.pdfbox.pdfparser.ConformingPDFParser: boolean recursivlyRead> = z0;

        return;
    }
}
