public class org.apache.poi.xslf.usermodel.XSLFTable extends org.apache.poi.xslf.usermodel.XSLFGraphicFrame implements java.lang.Iterable
{
    static java.lang.String TABLE_URI;
    private org.openxmlformats.schemas.drawingml.x2006.main.CTTable _table;
    private java.util.List _rows;

    void <init>(org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame, org.apache.poi.xslf.usermodel.XSLFSheet)
    {
        java.lang.IllegalStateException $r21;
        org.apache.poi.xslf.usermodel.XSLFTable r0;
        org.apache.poi.xslf.usermodel.XSLFSheet r2;
        boolean $z0, $z1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObjectData $r4, $r25;
        java.util.List $r12, $r17;
        org.apache.xmlbeans.XmlObject[] $r5;
        java.lang.StringBuilder $r22, $r23, $r26;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame r1;
        java.util.ArrayList $r9;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTableRow r15;
        int $i0, $i1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTable $r8, $r10, $r11, $r20;
        org.apache.xmlbeans.XmlObject $r6, $r7, $r18;
        java.lang.String $r19, $r27;
        org.apache.poi.POIXMLException $r29;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObject $r3, $r24;
        java.util.Iterator $r13;
        org.apache.poi.xslf.usermodel.XSLFTableRow $r16;
        org.apache.xmlbeans.XmlException $r28;
        java.lang.Object $r14;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTable;

        r1 := @parameter0: org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame;

        r2 := @parameter1: org.apache.poi.xslf.usermodel.XSLFSheet;

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFGraphicFrame: void <init>(org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame,org.apache.poi.xslf.usermodel.XSLFSheet)>(r1, r2);

        $r3 = interfaceinvoke r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame: org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObject getGraphic()>();

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObject: org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObjectData getGraphicData()>();

        $r5 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObjectData: org.apache.xmlbeans.XmlObject[] selectPath(java.lang.String)>("declare namespace a=\'http://schemas.openxmlformats.org/drawingml/2006/main\' ./a:tbl");

        $i0 = lengthof $r5;

        if $i0 != 0 goto label1;

        $r21 = new java.lang.IllegalStateException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a:tbl element was not found in\n ");

        $r24 = interfaceinvoke r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame: org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObject getGraphic()>();

        $r25 = interfaceinvoke $r24.<org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObject: org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObjectData getGraphicData()>();

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r27);

        throw $r21;

     label1:
        $r6 = $r5[0];

        $z0 = $r6 instanceof org.apache.xmlbeans.impl.values.XmlAnyTypeImpl;

        if $z0 == 0 goto label5;

     label2:
        $r18 = $r5[0];

        $r19 = virtualinvoke $r18.<java.lang.Object: java.lang.String toString()>();

        $r20 = staticinvoke <org.openxmlformats.schemas.drawingml.x2006.main.CTTable$Factory: org.openxmlformats.schemas.drawingml.x2006.main.CTTable parse(java.lang.String)>($r19);

        $r5[0] = $r20;

     label3:
        goto label5;

     label4:
        $r28 := @caughtexception;

        $r29 = new org.apache.poi.POIXMLException;

        specialinvoke $r29.<org.apache.poi.POIXMLException: void <init>(java.lang.Throwable)>($r28);

        throw $r29;

     label5:
        $r7 = $r5[0];

        $r8 = (org.openxmlformats.schemas.drawingml.x2006.main.CTTable) $r7;

        r0.<org.apache.poi.xslf.usermodel.XSLFTable: org.openxmlformats.schemas.drawingml.x2006.main.CTTable _table> = $r8;

        $r9 = new java.util.ArrayList;

        $r10 = r0.<org.apache.poi.xslf.usermodel.XSLFTable: org.openxmlformats.schemas.drawingml.x2006.main.CTTable _table>;

        $i1 = interfaceinvoke $r10.<org.openxmlformats.schemas.drawingml.x2006.main.CTTable: int sizeOfTrArray()>();

        specialinvoke $r9.<java.util.ArrayList: void <init>(int)>($i1);

        r0.<org.apache.poi.xslf.usermodel.XSLFTable: java.util.List _rows> = $r9;

        $r11 = r0.<org.apache.poi.xslf.usermodel.XSLFTable: org.openxmlformats.schemas.drawingml.x2006.main.CTTable _table>;

        $r12 = interfaceinvoke $r11.<org.openxmlformats.schemas.drawingml.x2006.main.CTTable: java.util.List getTrList()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.openxmlformats.schemas.drawingml.x2006.main.CTTableRow) $r14;

        $r17 = r0.<org.apache.poi.xslf.usermodel.XSLFTable: java.util.List _rows>;

        $r16 = new org.apache.poi.xslf.usermodel.XSLFTableRow;

        specialinvoke $r16.<org.apache.poi.xslf.usermodel.XSLFTableRow: void <init>(org.openxmlformats.schemas.drawingml.x2006.main.CTTableRow,org.apache.poi.xslf.usermodel.XSLFTable)>(r15, r0);

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r16);

        goto label6;

     label7:
        return;

        catch org.apache.xmlbeans.XmlException from label2 to label3 with label4;
    }

    public org.openxmlformats.schemas.drawingml.x2006.main.CTTable getCTTable()
    {
        org.apache.poi.xslf.usermodel.XSLFTable r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTable $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTable;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTable: org.openxmlformats.schemas.drawingml.x2006.main.CTTable _table>;

        return $r1;
    }

    public int getNumberOfColumns()
    {
        org.apache.poi.xslf.usermodel.XSLFTable r0;
        int $i0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTable $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTableGrid $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTable;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTable: org.openxmlformats.schemas.drawingml.x2006.main.CTTable _table>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTable: org.openxmlformats.schemas.drawingml.x2006.main.CTTableGrid getTblGrid()>();

        $i0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTTableGrid: int sizeOfGridColArray()>();

        return $i0;
    }

    public int getNumberOfRows()
    {
        org.apache.poi.xslf.usermodel.XSLFTable r0;
        int $i0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTable $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTable;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTable: org.openxmlformats.schemas.drawingml.x2006.main.CTTable _table>;

        $i0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTable: int sizeOfTrArray()>();

        return $i0;
    }

    public double getColumnWidth(int)
    {
        org.apache.poi.xslf.usermodel.XSLFTable r0;
        int i0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTable $r1;
        long $l1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTableGrid $r2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTableCol $r3;
        double $d0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTable;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTable: org.openxmlformats.schemas.drawingml.x2006.main.CTTable _table>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTable: org.openxmlformats.schemas.drawingml.x2006.main.CTTableGrid getTblGrid()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTTableGrid: org.openxmlformats.schemas.drawingml.x2006.main.CTTableCol getGridColArray(int)>(i0);

        $l1 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTTableCol: long getW()>();

        $d0 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l1);

        return $d0;
    }

    public void setColumnWidth(int, double)
    {
        long $l2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTableCol $r3;
        org.apache.poi.xslf.usermodel.XSLFTable r0;
        int i0, $i1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTable $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTableGrid $r2;
        double d0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTable;

        i0 := @parameter0: int;

        d0 := @parameter1: double;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTable: org.openxmlformats.schemas.drawingml.x2006.main.CTTable _table>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTable: org.openxmlformats.schemas.drawingml.x2006.main.CTTableGrid getTblGrid()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTTableGrid: org.openxmlformats.schemas.drawingml.x2006.main.CTTableCol getGridColArray(int)>(i0);

        $i1 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>(d0);

        $l2 = (long) $i1;

        interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTTableCol: void setW(long)>($l2);

        return;
    }

    public java.util.Iterator iterator()
    {
        org.apache.poi.xslf.usermodel.XSLFTable r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTable;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTable: java.util.List _rows>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public java.util.List getRows()
    {
        org.apache.poi.xslf.usermodel.XSLFTable r0;
        java.util.List $r1, $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTable;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTable: java.util.List _rows>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    public org.apache.poi.xslf.usermodel.XSLFTableRow addRow()
    {
        org.apache.poi.xslf.usermodel.XSLFTable r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTableRow $r2;
        org.apache.poi.xslf.usermodel.XSLFTableRow $r3;
        java.util.List $r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTTable $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTable;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTable: org.openxmlformats.schemas.drawingml.x2006.main.CTTable _table>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTTable: org.openxmlformats.schemas.drawingml.x2006.main.CTTableRow addNewTr()>();

        $r3 = new org.apache.poi.xslf.usermodel.XSLFTableRow;

        specialinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFTableRow: void <init>(org.openxmlformats.schemas.drawingml.x2006.main.CTTableRow,org.apache.poi.xslf.usermodel.XSLFTable)>($r2, r0);

        virtualinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFTableRow: void setHeight(double)>(20.0);

        $r4 = r0.<org.apache.poi.xslf.usermodel.XSLFTable: java.util.List _rows>;

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r3);

        return $r3;
    }

    static org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame prototype(int)
    {
        org.apache.xmlbeans.XmlCursor $r11;
        long $l2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObjectFrameLocking $r8;
        int i0, $i1;
        java.lang.String $r6, $r15;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObject $r9;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrameNonVisual $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualGraphicFrameProperties $r7;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObjectData $r10;
        org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps $r2;
        java.lang.StringBuilder $r3, $r4, $r5;
        javax.xml.namespace.QName $r12, $r13, $r14;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame$Factory: org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame newInstance()>();

        $r1 = interfaceinvoke $r0.<org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame: org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrameNonVisual addNewNvGraphicFramePr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrameNonVisual: org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps addNewCNvPr()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Table ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps: void setName(java.lang.String)>($r6);

        $i1 = i0 + 1;

        $l2 = (long) $i1;

        interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps: void setId(long)>($l2);

        $r7 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrameNonVisual: org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualGraphicFrameProperties addNewCNvGraphicFramePr()>();

        $r8 = interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualGraphicFrameProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObjectFrameLocking addNewGraphicFrameLocks()>();

        interfaceinvoke $r8.<org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObjectFrameLocking: void setNoGrp(boolean)>(1);

        interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrameNonVisual: org.openxmlformats.schemas.presentationml.x2006.main.CTApplicationNonVisualDrawingProps addNewNvPr()>();

        interfaceinvoke $r0.<org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame: org.openxmlformats.schemas.drawingml.x2006.main.CTTransform2D addNewXfrm()>();

        $r9 = interfaceinvoke $r0.<org.openxmlformats.schemas.presentationml.x2006.main.CTGraphicalObjectFrame: org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObject addNewGraphic()>();

        $r10 = interfaceinvoke $r9.<org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObject: org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObjectData addNewGraphicData()>();

        $r11 = interfaceinvoke $r10.<org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObjectData: org.apache.xmlbeans.XmlCursor newCursor()>();

        interfaceinvoke $r11.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlCursor$TokenType toNextToken()>();

        $r12 = new javax.xml.namespace.QName;

        specialinvoke $r12.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://schemas.openxmlformats.org/drawingml/2006/main", "tbl");

        interfaceinvoke $r11.<org.apache.xmlbeans.XmlCursor: void beginElement(javax.xml.namespace.QName)>($r12);

        $r13 = new javax.xml.namespace.QName;

        specialinvoke $r13.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://schemas.openxmlformats.org/drawingml/2006/main", "tblPr");

        interfaceinvoke $r11.<org.apache.xmlbeans.XmlCursor: void beginElement(javax.xml.namespace.QName)>($r13);

        interfaceinvoke $r11.<org.apache.xmlbeans.XmlCursor: org.apache.xmlbeans.XmlCursor$TokenType toNextToken()>();

        $r14 = new javax.xml.namespace.QName;

        specialinvoke $r14.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String)>("http://schemas.openxmlformats.org/drawingml/2006/main", "tblGrid");

        interfaceinvoke $r11.<org.apache.xmlbeans.XmlCursor: void beginElement(javax.xml.namespace.QName)>($r14);

        interfaceinvoke $r11.<org.apache.xmlbeans.XmlCursor: void dispose()>();

        $r15 = <org.apache.poi.xslf.usermodel.XSLFTable: java.lang.String TABLE_URI>;

        interfaceinvoke $r10.<org.openxmlformats.schemas.drawingml.x2006.main.CTGraphicalObjectData: void setUri(java.lang.String)>($r15);

        return $r0;
    }

    public void mergeCells(int, int, int, int)
    {
        org.apache.poi.xslf.usermodel.XSLFTable r0;
        boolean z0, z1, $z2, $z3;
        org.apache.poi.xslf.usermodel.XSLFTableCell r6;
        java.util.List $r1, $r4;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r15, $r16, $r17, $r18, $r19;
        int i0, i1, i2, i3, $i4, i5, $i6, $i7, i8, i9;
        java.lang.String $r13, $r20;
        java.lang.IllegalArgumentException $r7, $r14;
        org.apache.poi.xslf.usermodel.XSLFTableRow r3;
        java.lang.Object $r2, $r5;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFTable;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        if i0 <= i1 goto label01;

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot merge, first row > last row : ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r14;

     label01:
        if i2 <= i3 goto label02;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot merge, first column > last column : ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label02:
        $i4 = i1 - i0;

        i5 = $i4 + 1;

        if i5 <= 1 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        z0 = $z2;

        $i6 = i3 - i2;

        $i7 = $i6 + 1;

        if $i7 <= 1 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        z1 = $z3;

        i8 = i0;

     label07:
        if i8 > i1 goto label14;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFTable: java.util.List _rows>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i8);

        r3 = (org.apache.poi.xslf.usermodel.XSLFTableRow) $r2;

        i9 = i2;

     label08:
        if i9 > i3 goto label13;

        $r4 = virtualinvoke r3.<org.apache.poi.xslf.usermodel.XSLFTableRow: java.util.List getCells()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i9);

        r6 = (org.apache.poi.xslf.usermodel.XSLFTableCell) $r5;

        if z0 == 0 goto label10;

        if i8 != i0 goto label09;

        virtualinvoke r6.<org.apache.poi.xslf.usermodel.XSLFTableCell: void setRowSpan(int)>(i5);

        goto label10;

     label09:
        virtualinvoke r6.<org.apache.poi.xslf.usermodel.XSLFTableCell: void setVMerge(boolean)>(1);

     label10:
        if z1 == 0 goto label12;

        if i9 != i2 goto label11;

        virtualinvoke r6.<org.apache.poi.xslf.usermodel.XSLFTableCell: void setGridSpan(int)>($i7);

        goto label12;

     label11:
        virtualinvoke r6.<org.apache.poi.xslf.usermodel.XSLFTableCell: void setHMerge(boolean)>(1);

     label12:
        i9 = i9 + 1;

        goto label08;

     label13:
        i8 = i8 + 1;

        goto label07;

     label14:
        return;
    }

    static void <clinit>()
    {
        <org.apache.poi.xslf.usermodel.XSLFTable: java.lang.String TABLE_URI> = "http://schemas.openxmlformats.org/drawingml/2006/table";

        return;
    }
}
