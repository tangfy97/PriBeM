public class org.apache.lucene.util.OpenBitSet extends org.apache.lucene.search.DocIdSet implements org.apache.lucene.util.Bits, java.lang.Cloneable
{
    protected long[] bits;
    protected int wlen;
    private long numBits;
    static final boolean $assertionsDisabled;

    public void <init>(long)
    {
        long[] $r1, $r2;
        org.apache.lucene.util.OpenBitSet r0;
        int $i1, $i2;
        long l0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        specialinvoke r0.<org.apache.lucene.search.DocIdSet: void <init>()>();

        r0.<org.apache.lucene.util.OpenBitSet: long numBits> = l0;

        $i1 = staticinvoke <org.apache.lucene.util.OpenBitSet: int bits2words(long)>(l0);

        $r1 = newarray (long)[$i1];

        r0.<org.apache.lucene.util.OpenBitSet: long[] bits> = $r1;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i2 = lengthof $r2;

        r0.<org.apache.lucene.util.OpenBitSet: int wlen> = $i2;

        return;
    }

    public void <init>()
    {
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        specialinvoke r0.<org.apache.lucene.util.OpenBitSet: void <init>(long)>(64L);

        return;
    }

    public void <init>(long[], int)
    {
        long[] r1;
        org.apache.lucene.util.OpenBitSet r0;
        int i0, $i1, $i2;
        long $l3;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter0: long[];

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.search.DocIdSet: void <init>()>();

        r0.<org.apache.lucene.util.OpenBitSet: long[] bits> = r1;

        r0.<org.apache.lucene.util.OpenBitSet: int wlen> = i0;

        $i1 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i2 = $i1 * 64;

        $l3 = (long) $i2;

        r0.<org.apache.lucene.util.OpenBitSet: long numBits> = $l3;

        return;
    }

    public org.apache.lucene.search.DocIdSetIterator iterator()
    {
        long[] $r2;
        org.apache.lucene.util.OpenBitSetIterator $r0;
        org.apache.lucene.util.OpenBitSet r1;
        int $i0;

        r1 := @this: org.apache.lucene.util.OpenBitSet;

        $r0 = new org.apache.lucene.util.OpenBitSetIterator;

        $r2 = r1.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i0 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        specialinvoke $r0.<org.apache.lucene.util.OpenBitSetIterator: void <init>(long[],int)>($r2, $i0);

        return $r0;
    }

    public org.apache.lucene.util.Bits bits()
    {
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        return r0;
    }

    public boolean isCacheable()
    {
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        return 1;
    }

    public long capacity()
    {
        long[] $r1;
        org.apache.lucene.util.OpenBitSet r0;
        int $i0, $i1;
        long $l2;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i0 = lengthof $r1;

        $i1 = $i0 << 6;

        $l2 = (long) $i1;

        return $l2;
    }

    public long size()
    {
        org.apache.lucene.util.OpenBitSet r0;
        long $l0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        $l0 = virtualinvoke r0.<org.apache.lucene.util.OpenBitSet: long capacity()>();

        return $l0;
    }

    public int length()
    {
        long[] $r1;
        org.apache.lucene.util.OpenBitSet r0;
        int $i0, $i1;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i0 = lengthof $r1;

        $i1 = $i0 << 6;

        return $i1;
    }

    public boolean isEmpty()
    {
        byte $b1;
        org.apache.lucene.util.OpenBitSet r0;
        long $l0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        $l0 = virtualinvoke r0.<org.apache.lucene.util.OpenBitSet: long cardinality()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public long[] getBits()
    {
        org.apache.lucene.util.OpenBitSet r0;
        long[] $r1;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        return $r1;
    }

    public void setBits(long[])
    {
        org.apache.lucene.util.OpenBitSet r0;
        long[] r1;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter0: long[];

        r0.<org.apache.lucene.util.OpenBitSet: long[] bits> = r1;

        return;
    }

    public int getNumWords()
    {
        org.apache.lucene.util.OpenBitSet r0;
        int $i0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        $i0 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        return $i0;
    }

    public void setNumWords(int)
    {
        org.apache.lucene.util.OpenBitSet r0;
        int i0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.util.OpenBitSet: int wlen> = i0;

        return;
    }

    public boolean get(int)
    {
        long l4, $l5, $l6;
        long[] $r1, $r2;
        byte $b7;
        int i0, i1, $i2, i3;
        org.apache.lucene.util.OpenBitSet r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        i0 := @parameter0: int;

        i1 = i0 >> 6;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i2 = lengthof $r1;

        if i1 < $i2 goto label1;

        return 0;

     label1:
        i3 = i0 & 63;

        l4 = 1L << i3;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l5 = $r2[i1];

        $l6 = $l5 & l4;

        $b7 = $l6 cmp 0L;

        if $b7 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean fastGet(int)
    {
        long $l1, $l2, $l4, $l5, $l9;
        java.lang.AssertionError $r3;
        long[] $r1;
        byte $b3, $b6;
        int i0, $i7, $i8, $i10;
        boolean $z0, $z1;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $l5 = (long) i0;

        $l4 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $b6 = $l5 cmp $l4;

        $i10 = (int) $b6;

        if $i10 < 0 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $i7 = i0 >> 6;

        $i8 = i0 & 63;

        $l9 = 1L << $i8;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l1 = $r1[$i7];

        $l2 = $l1 & $l9;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public boolean get(long)
    {
        long l0, $l1, l6, $l7, $l8;
        long[] $r1, $r2;
        byte $b9;
        int i2, $i3, $i4, i5;
        org.apache.lucene.util.OpenBitSet r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        $l1 = l0 >> 6;

        i2 = (int) $l1;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i3 = lengthof $r1;

        if i2 < $i3 goto label1;

        return 0;

     label1:
        $i4 = (int) l0;

        i5 = $i4 & 63;

        l6 = 1L << i5;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l7 = $r2[i2];

        $l8 = $l7 & l6;

        $b9 = $l8 cmp 0L;

        if $b9 == 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public boolean fastGet(long)
    {
        long l0, $l1, $l3, $l4, $l7, $l11;
        java.lang.AssertionError $r3;
        long[] $r1;
        byte $b5, $b6, $b8;
        int $i2, $i9, $i10, $i12, $i13;
        boolean $z0, $z1;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $b6 = l0 cmp 0L;

        $i12 = (int) $b6;

        if $i12 < 0 goto label1;

        $l7 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $b8 = l0 cmp $l7;

        $i13 = (int) $b8;

        if $i13 < 0 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $l1 = l0 >> 6;

        $i9 = (int) $l1;

        $i2 = (int) l0;

        $i10 = $i2 & 63;

        $l11 = 1L << $i10;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l3 = $r1[$i9];

        $l4 = $l3 & $l11;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public int getBit(int)
    {
        long $l1, $l2, $l5, $l6;
        java.lang.AssertionError $r3;
        long[] $r1;
        byte $b7;
        int i0, $i3, $i4, $i8, $i9, $i10;
        org.apache.lucene.util.OpenBitSet r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $l6 = (long) i0;

        $l5 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $b7 = $l6 cmp $l5;

        $i10 = (int) $b7;

        if $i10 < 0 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $i8 = i0 >> 6;

        $i9 = i0 & 63;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l1 = $r1[$i8];

        $l2 = $l1 >>> $i9;

        $i3 = (int) $l2;

        $i4 = $i3 & 1;

        return $i4;
    }

    public void set(long)
    {
        long l0, l4, $l5, $l6;
        long[] $r1;
        org.apache.lucene.util.OpenBitSet r0;
        int $i1, $i2, i3;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.apache.lucene.util.OpenBitSet: int expandingWordNum(long)>(l0);

        $i2 = (int) l0;

        i3 = $i2 & 63;

        l4 = 1L << i3;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l5 = $r1[$i1];

        $l6 = $l5 | l4;

        $r1[$i1] = $l6;

        return;
    }

    public void fastSet(int)
    {
        long $l1, $l2, $l3, $l4, $l8;
        java.lang.AssertionError $r3;
        long[] $r1;
        byte $b5;
        int i0, $i6, $i7, $i9;
        org.apache.lucene.util.OpenBitSet r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $l4 = (long) i0;

        $l3 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $b5 = $l4 cmp $l3;

        $i9 = (int) $b5;

        if $i9 < 0 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $i6 = i0 >> 6;

        $i7 = i0 & 63;

        $l8 = 1L << $i7;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l1 = $r1[$i6];

        $l2 = $l1 | $l8;

        $r1[$i6] = $l2;

        return;
    }

    public void fastSet(long)
    {
        long l0, $l1, $l3, $l4, $l6, $l10;
        java.lang.AssertionError $r3;
        long[] $r1;
        byte $b5, $b7;
        int $i2, $i8, $i9, $i11, $i12;
        boolean $z0;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $b5 = l0 cmp 0L;

        $i11 = (int) $b5;

        if $i11 < 0 goto label1;

        $l6 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $b7 = l0 cmp $l6;

        $i12 = (int) $b7;

        if $i12 < 0 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $l1 = l0 >> 6;

        $i8 = (int) $l1;

        $i2 = (int) l0;

        $i9 = $i2 & 63;

        $l10 = 1L << $i9;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l3 = $r1[$i8];

        $l4 = $l3 | $l10;

        $r1[$i8] = $l4;

        return;
    }

    public void set(long, long)
    {
        long l0, l1, $l3, $l5, l8, $l9, l11, $l12, $l13, $l15, $l16, $l17, $l18, $l19;
        long[] $r1, $r2, $r3, $r4;
        byte $b2;
        int i4, $i6, $i7, $i10, $i14, $i20;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l1 := @parameter0: long;

        l0 := @parameter1: long;

        $b2 = l0 cmp l1;

        $i20 = (int) $b2;

        if $i20 > 0 goto label1;

        return;

     label1:
        $l3 = l1 >> 6;

        i4 = (int) $l3;

        $l5 = l0 - 1L;

        $i6 = virtualinvoke r0.<org.apache.lucene.util.OpenBitSet: int expandingWordNum(long)>($l5);

        $i7 = (int) l1;

        l8 = -1L << $i7;

        $l9 = neg l0;

        $i10 = (int) $l9;

        l11 = -1L >>> $i10;

        if i4 != $i6 goto label2;

        $r4 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l18 = $r4[i4];

        $l17 = l8 & l11;

        $l19 = $l18 | $l17;

        $r4[i4] = $l19;

        return;

     label2:
        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l12 = $r1[i4];

        $l13 = $l12 | l8;

        $r1[i4] = $l13;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i14 = i4 + 1;

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>($r2, $i14, $i6, -1L);

        $r3 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l15 = $r3[$i6];

        $l16 = $l15 | l11;

        $r3[$i6] = $l16;

        return;
    }

    protected int expandingWordNum(long)
    {
        long l0, $l1, $l4, $l5, $l6, $l8;
        java.lang.AssertionError $r2;
        byte $b7;
        int i2, $i3, $i9, $i10;
        org.apache.lucene.util.OpenBitSet r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        $l1 = l0 >> 6;

        i2 = (int) $l1;

        $i3 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if i2 < $i3 goto label1;

        $l8 = l0 + 1L;

        virtualinvoke r0.<org.apache.lucene.util.OpenBitSet: void ensureCapacity(long)>($l8);

        $i9 = i2 + 1;

        r0.<org.apache.lucene.util.OpenBitSet: int wlen> = $i9;

     label1:
        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $l5 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $l4 = l0 + 1L;

        $l6 = staticinvoke <java.lang.Math: long max(long,long)>($l5, $l4);

        r0.<org.apache.lucene.util.OpenBitSet: long numBits> = $l6;

        $b7 = $l6 cmp 0L;

        $i10 = (int) $b7;

        if $i10 >= 0 goto label2;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label2:
        return i2;
    }

    public void fastClear(int)
    {
        long $l1, $l2, $l3, $l4, $l5, $l9;
        java.lang.AssertionError $r3;
        long[] $r1;
        byte $b6;
        int i0, $i7, $i8, $i10;
        org.apache.lucene.util.OpenBitSet r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $l5 = (long) i0;

        $l4 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $b6 = $l5 cmp $l4;

        $i10 = (int) $b6;

        if $i10 < 0 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $i7 = i0 >> 6;

        $i8 = i0 & 63;

        $l9 = 1L << $i8;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l2 = $r1[$i7];

        $l1 = $l9 ^ -1L;

        $l3 = $l2 & $l1;

        $r1[$i7] = $l3;

        return;
    }

    public void fastClear(long)
    {
        long l0, $l1, $l3, $l4, $l5, $l7, $l11;
        java.lang.AssertionError $r3;
        long[] $r1;
        byte $b6, $b8;
        int $i2, $i9, $i10, $i12, $i13;
        boolean $z0;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $b6 = l0 cmp 0L;

        $i12 = (int) $b6;

        if $i12 < 0 goto label1;

        $l7 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $b8 = l0 cmp $l7;

        $i13 = (int) $b8;

        if $i13 < 0 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $l1 = l0 >> 6;

        $i9 = (int) $l1;

        $i2 = (int) l0;

        $i10 = $i2 & 63;

        $l11 = 1L << $i10;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l4 = $r1[$i9];

        $l3 = $l11 ^ -1L;

        $l5 = $l4 & $l3;

        $r1[$i9] = $l5;

        return;
    }

    public void clear(long)
    {
        long l0, $l1, l6, $l7, $l8, $l9;
        long[] $r1;
        int i2, $i3, $i4, i5;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        $l1 = l0 >> 6;

        i2 = (int) $l1;

        $i3 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if i2 < $i3 goto label1;

        return;

     label1:
        $i4 = (int) l0;

        i5 = $i4 & 63;

        l6 = 1L << i5;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l8 = $r1[i2];

        $l7 = l6 ^ -1L;

        $l9 = $l8 & $l7;

        $r1[i2] = $l9;

        return;
    }

    public void clear(int, int)
    {
        long $l7, $l8, $l13, $l14, $l15, $l16, $l17, l18, l19, l20, l21;
        long[] $r1, $r2, $r3, $r4;
        int i0, i1, i2, $i3, $i4, i5, $i6, $i9, $i10, $i11, $i12;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 > i1 goto label1;

        return;

     label1:
        i2 = i1 >> 6;

        $i3 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if i2 < $i3 goto label2;

        return;

     label2:
        $i4 = i0 - 1;

        i5 = $i4 >> 6;

        l18 = -1L << i1;

        $i6 = neg i0;

        l19 = -1L >>> $i6;

        l20 = l18 ^ -1L;

        l21 = l19 ^ -1L;

        if i2 != i5 goto label3;

        $r4 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l16 = $r4[i2];

        $l15 = l20 | l21;

        $l17 = $l16 & $l15;

        $r4[i2] = $l17;

        return;

     label3:
        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l7 = $r1[i2];

        $l8 = $l7 & l20;

        $r1[i2] = $l8;

        $i9 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i10 = staticinvoke <java.lang.Math: int min(int,int)>($i9, i5);

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i11 = i2 + 1;

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>($r2, $i11, $i10, 0L);

        $i12 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if i5 >= $i12 goto label4;

        $r3 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l13 = $r3[i5];

        $l14 = $l13 & l21;

        $r3[i5] = $l14;

     label4:
        return;
    }

    public void clear(long, long)
    {
        byte $b2;
        org.apache.lucene.util.OpenBitSet r0;
        long l0, l1, $l3, $l6, $l7, $l10, $l12, $l13, $l18, $l19, $l20, $l21, $l22, l23, l24, l25, l26;
        long[] $r1, $r2, $r3, $r4;
        int i4, $i5, i8, $i9, $i11, $i14, $i15, $i16, $i17, $i27;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l1 := @parameter0: long;

        l0 := @parameter1: long;

        $b2 = l0 cmp l1;

        $i27 = (int) $b2;

        if $i27 > 0 goto label1;

        return;

     label1:
        $l3 = l1 >> 6;

        i4 = (int) $l3;

        $i5 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if i4 < $i5 goto label2;

        return;

     label2:
        $l6 = l0 - 1L;

        $l7 = $l6 >> 6;

        i8 = (int) $l7;

        $i9 = (int) l1;

        l23 = -1L << $i9;

        $l10 = neg l0;

        $i11 = (int) $l10;

        l24 = -1L >>> $i11;

        l25 = l23 ^ -1L;

        l26 = l24 ^ -1L;

        if i4 != i8 goto label3;

        $r4 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l21 = $r4[i4];

        $l20 = l25 | l26;

        $l22 = $l21 & $l20;

        $r4[i4] = $l22;

        return;

     label3:
        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l12 = $r1[i4];

        $l13 = $l12 & l25;

        $r1[i4] = $l13;

        $i14 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i15 = staticinvoke <java.lang.Math: int min(int,int)>($i14, i8);

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i16 = i4 + 1;

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>($r2, $i16, $i15, 0L);

        $i17 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if i8 >= $i17 goto label4;

        $r3 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l18 = $r3[i8];

        $l19 = $l18 & l26;

        $r3[i8] = $l19;

     label4:
        return;
    }

    public boolean getAndSet(int)
    {
        long $l1, $l2, $l4, $l5, $l6, $l7, $l11;
        java.lang.AssertionError $r4;
        long[] $r1, $r2;
        byte $b3, $b8;
        int i0, $i9, $i10, $i12;
        boolean $z0, $z1;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $l7 = (long) i0;

        $l6 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $b8 = $l7 cmp $l6;

        $i12 = (int) $b8;

        if $i12 < 0 goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $i9 = i0 >> 6;

        $i10 = i0 & 63;

        $l11 = 1L << $i10;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l1 = $r1[$i9];

        $l2 = $l1 & $l11;

        $b3 = $l2 cmp 0L;

        if $b3 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l4 = $r2[$i9];

        $l5 = $l4 | $l11;

        $r2[$i9] = $l5;

        return $z1;
    }

    public boolean getAndSet(long)
    {
        long l0, $l1, $l3, $l4, $l6, $l7, $l9, $l13;
        java.lang.AssertionError $r4;
        long[] $r1, $r2;
        byte $b5, $b8, $b10;
        int $i2, $i11, $i12, $i14, $i15;
        boolean $z0, $z1;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $b8 = l0 cmp 0L;

        $i14 = (int) $b8;

        if $i14 < 0 goto label1;

        $l9 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $b10 = l0 cmp $l9;

        $i15 = (int) $b10;

        if $i15 < 0 goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $l1 = l0 >> 6;

        $i11 = (int) $l1;

        $i2 = (int) l0;

        $i12 = $i2 & 63;

        $l13 = 1L << $i12;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l3 = $r1[$i11];

        $l4 = $l3 & $l13;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l6 = $r2[$i11];

        $l7 = $l6 | $l13;

        $r2[$i11] = $l7;

        return $z1;
    }

    public void fastFlip(int)
    {
        long $l1, $l2, $l3, $l4, $l8;
        java.lang.AssertionError $r3;
        long[] $r1;
        byte $b5;
        int i0, $i6, $i7, $i9;
        org.apache.lucene.util.OpenBitSet r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $l4 = (long) i0;

        $l3 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $b5 = $l4 cmp $l3;

        $i9 = (int) $b5;

        if $i9 < 0 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $i6 = i0 >> 6;

        $i7 = i0 & 63;

        $l8 = 1L << $i7;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l1 = $r1[$i6];

        $l2 = $l1 ^ $l8;

        $r1[$i6] = $l2;

        return;
    }

    public void fastFlip(long)
    {
        long l0, $l1, $l3, $l4, $l6, $l10;
        java.lang.AssertionError $r3;
        long[] $r1;
        byte $b5, $b7;
        int $i2, $i8, $i9, $i11, $i12;
        boolean $z0;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $b5 = l0 cmp 0L;

        $i11 = (int) $b5;

        if $i11 < 0 goto label1;

        $l6 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $b7 = l0 cmp $l6;

        $i12 = (int) $b7;

        if $i12 < 0 goto label2;

     label1:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label2:
        $l1 = l0 >> 6;

        $i8 = (int) $l1;

        $i2 = (int) l0;

        $i9 = $i2 & 63;

        $l10 = 1L << $i9;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l3 = $r1[$i8];

        $l4 = $l3 ^ $l10;

        $r1[$i8] = $l4;

        return;
    }

    public void flip(long)
    {
        long l0, l4, $l5, $l6;
        long[] $r1;
        org.apache.lucene.util.OpenBitSet r0;
        int $i1, $i2, i3;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<org.apache.lucene.util.OpenBitSet: int expandingWordNum(long)>(l0);

        $i2 = (int) l0;

        i3 = $i2 & 63;

        l4 = 1L << i3;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l5 = $r1[$i1];

        $l6 = $l5 ^ l4;

        $r1[$i1] = $l6;

        return;
    }

    public boolean flipAndGet(int)
    {
        long $l1, $l2, $l3, $l4, $l6, $l7, $l11;
        java.lang.AssertionError $r4;
        long[] $r1, $r2;
        byte $b5, $b8;
        int i0, $i9, $i10, $i12;
        boolean $z0, $z1;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        i0 := @parameter0: int;

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        if i0 < 0 goto label1;

        $l7 = (long) i0;

        $l6 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $b8 = $l7 cmp $l6;

        $i12 = (int) $b8;

        if $i12 < 0 goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $i9 = i0 >> 6;

        $i10 = i0 & 63;

        $l11 = 1L << $i10;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l1 = $r1[$i9];

        $l2 = $l1 ^ $l11;

        $r1[$i9] = $l2;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l3 = $r2[$i9];

        $l4 = $l3 & $l11;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public boolean flipAndGet(long)
    {
        long l0, $l1, $l3, $l4, $l5, $l6, $l9, $l13;
        java.lang.AssertionError $r4;
        long[] $r1, $r2;
        byte $b7, $b8, $b10;
        int $i2, $i11, $i12, $i14, $i15;
        boolean $z0, $z1;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $b8 = l0 cmp 0L;

        $i14 = (int) $b8;

        if $i14 < 0 goto label1;

        $l9 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $b10 = l0 cmp $l9;

        $i15 = (int) $b10;

        if $i15 < 0 goto label2;

     label1:
        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label2:
        $l1 = l0 >> 6;

        $i11 = (int) $l1;

        $i2 = (int) l0;

        $i12 = $i2 & 63;

        $l13 = 1L << $i12;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l3 = $r1[$i11];

        $l4 = $l3 ^ $l13;

        $r1[$i11] = $l4;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l5 = $r2[$i11];

        $l6 = $l5 & $l13;

        $b7 = $l6 cmp 0L;

        if $b7 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public void flip(long, long)
    {
        long l0, l1, $l3, $l5, l8, $l9, l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20;
        long[] $r1, $r2, $r3, $r4, $r5;
        byte $b2;
        int i4, $i6, $i7, $i10, i21, $i22;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l1 := @parameter0: long;

        l0 := @parameter1: long;

        $b2 = l0 cmp l1;

        $i22 = (int) $b2;

        if $i22 > 0 goto label1;

        return;

     label1:
        $l3 = l1 >> 6;

        i4 = (int) $l3;

        $l5 = l0 - 1L;

        $i6 = virtualinvoke r0.<org.apache.lucene.util.OpenBitSet: int expandingWordNum(long)>($l5);

        $i7 = (int) l1;

        l8 = -1L << $i7;

        $l9 = neg l0;

        $i10 = (int) $l9;

        l11 = -1L >>> $i10;

        if i4 != $i6 goto label2;

        $r5 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l19 = $r5[i4];

        $l18 = l8 & l11;

        $l20 = $l19 ^ $l18;

        $r5[i4] = $l20;

        return;

     label2:
        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l12 = $r1[i4];

        $l13 = $l12 ^ l8;

        $r1[i4] = $l13;

        i21 = i4 + 1;

     label3:
        if i21 >= $i6 goto label4;

        $r4 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $r3 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l16 = $r3[i21];

        $l17 = $l16 ^ -1L;

        $r4[i21] = $l17;

        i21 = i21 + 1;

        goto label3;

     label4:
        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l14 = $r2[$i6];

        $l15 = $l14 ^ l11;

        $r2[$i6] = $l15;

        return;
    }

    public long cardinality()
    {
        long[] $r1;
        org.apache.lucene.util.OpenBitSet r0;
        int $i0;
        long $l1;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i0 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $l1 = staticinvoke <org.apache.lucene.util.BitUtil: long pop_array(long[],int,int)>($r1, 0, $i0);

        return $l1;
    }

    public static long intersectionCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)
    {
        long $l3;
        long[] $r2, $r3;
        org.apache.lucene.util.OpenBitSet r0, r1;
        int $i0, $i1, $i2;

        r0 := @parameter0: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter1: org.apache.lucene.util.OpenBitSet;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $r3 = r1.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i1 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i0 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $l3 = staticinvoke <org.apache.lucene.util.BitUtil: long pop_intersect(long[],long[],int,int)>($r2, $r3, 0, $i2);

        return $l3;
    }

    public static long unionCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)
    {
        long $l3, $l12, $l17, l18;
        long[] $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16;
        org.apache.lucene.util.OpenBitSet r0, r1;

        r0 := @parameter0: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter1: org.apache.lucene.util.OpenBitSet;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $r3 = r1.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i1 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i0 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $l3 = staticinvoke <org.apache.lucene.util.BitUtil: long pop_union(long[],long[],int,int)>($r2, $r3, 0, $i2);

        l18 = $l3;

        $i5 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i4 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if $i5 >= $i4 goto label1;

        $r5 = r1.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i16 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i14 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i13 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i15 = $i14 - $i13;

        $l17 = staticinvoke <org.apache.lucene.util.BitUtil: long pop_array(long[],int,int)>($r5, $i16, $i15);

        l18 = $l3 + $l17;

        goto label2;

     label1:
        $i7 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i6 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if $i7 <= $i6 goto label2;

        $r4 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i11 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i9 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i8 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i10 = $i9 - $i8;

        $l12 = staticinvoke <org.apache.lucene.util.BitUtil: long pop_array(long[],int,int)>($r4, $i11, $i10);

        l18 = $l3 + $l12;

     label2:
        return l18;
    }

    public static long andNotCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)
    {
        long $l3, $l10, l11;
        long[] $r2, $r3, $r4;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.lucene.util.OpenBitSet r0, r1;

        r0 := @parameter0: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter1: org.apache.lucene.util.OpenBitSet;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $r3 = r1.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i1 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i0 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $l3 = staticinvoke <org.apache.lucene.util.BitUtil: long pop_andnot(long[],long[],int,int)>($r2, $r3, 0, $i2);

        l11 = $l3;

        $i5 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i4 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if $i5 <= $i4 goto label1;

        $r4 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i9 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i7 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i6 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i8 = $i7 - $i6;

        $l10 = staticinvoke <org.apache.lucene.util.BitUtil: long pop_array(long[],int,int)>($r4, $i9, $i8);

        l11 = $l3 + $l10;

     label1:
        return l11;
    }

    public static long xorCount(org.apache.lucene.util.OpenBitSet, org.apache.lucene.util.OpenBitSet)
    {
        long $l3, $l12, $l17, l18;
        long[] $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16;
        org.apache.lucene.util.OpenBitSet r0, r1;

        r0 := @parameter0: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter1: org.apache.lucene.util.OpenBitSet;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $r3 = r1.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i1 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i0 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        $l3 = staticinvoke <org.apache.lucene.util.BitUtil: long pop_xor(long[],long[],int,int)>($r2, $r3, 0, $i2);

        l18 = $l3;

        $i5 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i4 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if $i5 >= $i4 goto label1;

        $r5 = r1.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i16 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i14 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i13 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i15 = $i14 - $i13;

        $l17 = staticinvoke <org.apache.lucene.util.BitUtil: long pop_array(long[],int,int)>($r5, $i16, $i15);

        l18 = $l3 + $l17;

        goto label2;

     label1:
        $i7 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i6 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if $i7 <= $i6 goto label2;

        $r4 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i11 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i9 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i8 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i10 = $i9 - $i8;

        $l12 = staticinvoke <org.apache.lucene.util.BitUtil: long pop_array(long[],int,int)>($r4, $i11, $i10);

        l18 = $l3 + $l12;

     label2:
        return l18;
    }

    public int nextSetBit(int)
    {
        long $l3, l15, l16;
        long[] $r1, $r2;
        byte $b4, $b6;
        int i0, $i1, i2, $i5, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i18, $i20;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        i0 := @parameter0: int;

        i14 = i0 >> 6;

        $i1 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if i14 < $i1 goto label1;

        $i18 = (int) -1;

        return $i18;

     label1:
        i2 = i0 & 63;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l3 = $r1[i14];

        l15 = $l3 >> i2;

        $b4 = l15 cmp 0L;

        if $b4 == 0 goto label2;

        $i10 = i14 << 6;

        $i11 = $i10 + i2;

        $i12 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l15);

        $i13 = $i11 + $i12;

        return $i13;

     label2:
        i14 = i14 + 1;

        $i5 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if i14 >= $i5 goto label3;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        l16 = $r2[i14];

        $b6 = l16 cmp 0L;

        if $b6 == 0 goto label2;

        $i7 = i14 << 6;

        $i8 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l16);

        $i9 = $i7 + $i8;

        return $i9;

     label3:
        $i20 = (int) -1;

        return $i20;
    }

    public long nextSetBit(long)
    {
        long l0, $l1, $l5, $l9, $l10, $l12, $l13, $l14, $l15, $l18, $l19, l21, l22;
        long[] $r1, $r2;
        byte $b6, $b8;
        int $i2, $i3, i4, $i7, $i11, $i16, $i17, i20;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        $l1 = l0 >>> 6;

        i20 = (int) $l1;

        $i2 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if i20 < $i2 goto label1;

        return -1L;

     label1:
        $i3 = (int) l0;

        i4 = $i3 & 63;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l5 = $r1[i20];

        l21 = $l5 >>> i4;

        $b6 = l21 cmp 0L;

        if $b6 == 0 goto label2;

        $l14 = (long) i20;

        $l15 = $l14 << 6;

        $i16 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l21);

        $i17 = i4 + $i16;

        $l18 = (long) $i17;

        $l19 = $l15 + $l18;

        return $l19;

     label2:
        i20 = i20 + 1;

        $i7 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if i20 >= $i7 goto label3;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        l22 = $r2[i20];

        $b8 = l22 cmp 0L;

        if $b8 == 0 goto label2;

        $l9 = (long) i20;

        $l10 = $l9 << 6;

        $i11 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l22);

        $l12 = (long) $i11;

        $l13 = $l10 + $l12;

        return $l13;

     label3:
        return -1L;
    }

    public int prevSetBit(int)
    {
        long $l3, l17, l18;
        long[] $r1, $r2, $r3;
        byte $b4, $b5;
        int i0, $i1, $i2, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, $i20, $i22, $i24, $i26;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        i0 := @parameter0: int;

        i15 = i0 >> 6;

        $i1 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if i15 < $i1 goto label2;

        $i14 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        i15 = $i14 - 1;

        if i15 >= 0 goto label1;

        $i20 = (int) -1;

        return $i20;

     label1:
        i16 = 63;

        $r3 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        l17 = $r3[i15];

        goto label4;

     label2:
        if i15 >= 0 goto label3;

        $i22 = (int) -1;

        return $i22;

     label3:
        i16 = i0 & 63;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l3 = $r1[i15];

        $i2 = 63 - i16;

        l17 = $l3 << $i2;

     label4:
        $b4 = l17 cmp 0L;

        if $b4 == 0 goto label5;

        $i10 = i15 << 6;

        $i11 = $i10 + i16;

        $i12 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l17);

        $i13 = $i11 - $i12;

        return $i13;

     label5:
        $i24 = (int) -1;

        i15 = i15 + $i24;

        if i15 < 0 goto label6;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        l18 = $r2[i15];

        $b5 = l18 cmp 0L;

        if $b5 == 0 goto label5;

        $i6 = i15 << 6;

        $i7 = $i6 + 63;

        $i8 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l18);

        $i9 = $i7 - $i8;

        return $i9;

     label6:
        $i26 = (int) -1;

        return $i26;
    }

    public long prevSetBit(long)
    {
        long l0, $l1, $l5, $l8, $l9, $l10, $l12, $l13, $l14, $l15, $l16, $l17, $l19, $l20, l24, l25;
        long[] $r1, $r2, $r3;
        byte $b6, $b7;
        int $i2, $i3, $i4, $i11, $i18, $i21, i22, i23, $i27;
        org.apache.lucene.util.OpenBitSet r0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        $l1 = l0 >> 6;

        i22 = (int) $l1;

        $i2 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if i22 < $i2 goto label2;

        $i21 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        i22 = $i21 - 1;

        if i22 >= 0 goto label1;

        return -1L;

     label1:
        i23 = 63;

        $r3 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        l24 = $r3[i22];

        goto label4;

     label2:
        if i22 >= 0 goto label3;

        return -1L;

     label3:
        $i3 = (int) l0;

        i23 = $i3 & 63;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l5 = $r1[i22];

        $i4 = 63 - i23;

        l24 = $l5 << $i4;

     label4:
        $b6 = l24 cmp 0L;

        if $b6 == 0 goto label5;

        $l14 = (long) i22;

        $l16 = $l14 << 6;

        $l15 = (long) i23;

        $l17 = $l16 + $l15;

        $i18 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l24);

        $l19 = (long) $i18;

        $l20 = $l17 - $l19;

        return $l20;

     label5:
        $i27 = (int) -1;

        i22 = i22 + $i27;

        if i22 < 0 goto label6;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        l25 = $r2[i22];

        $b7 = l25 cmp 0L;

        if $b7 == 0 goto label5;

        $l8 = (long) i22;

        $l9 = $l8 << 6;

        $l10 = $l9 + 63L;

        $i11 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l25);

        $l12 = (long) $i11;

        $l13 = $l10 - $l12;

        return $l13;

     label6:
        return -1L;
    }

    public org.apache.lucene.util.OpenBitSet clone()
    {
        java.lang.RuntimeException $r6;
        java.lang.CloneNotSupportedException $r5;
        long[] $r2, $r4;
        org.apache.lucene.util.OpenBitSet r0, r7;
        java.lang.Object $r1, $r3;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r7 = (org.apache.lucene.util.OpenBitSet) $r1;

        $r2 = r7.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (long[]) $r3;

        r7.<org.apache.lucene.util.OpenBitSet: long[] bits> = $r4;

     label2:
        return r7;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public void intersect(org.apache.lucene.util.OpenBitSet)
    {
        long $l5, $l6, $l7;
        long[] r2, r3, $r4;
        org.apache.lucene.util.OpenBitSet r0, r1;
        int $i0, $i1, $i2, $i3, $i4, i8, $i10;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter0: org.apache.lucene.util.OpenBitSet;

        $i1 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i0 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        r3 = r1.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        i8 = $i2;

     label1:
        $i10 = (int) -1;

        i8 = i8 + $i10;

        if i8 < 0 goto label2;

        $l6 = r2[i8];

        $l5 = r3[i8];

        $l7 = $l6 & $l5;

        r2[i8] = $l7;

        goto label1;

     label2:
        $i3 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if $i3 <= $i2 goto label3;

        $r4 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i4 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        staticinvoke <java.util.Arrays: void fill(long[],int,int,long)>($r4, $i2, $i4, 0L);

     label3:
        r0.<org.apache.lucene.util.OpenBitSet: int wlen> = $i2;

        return;
    }

    public void union(org.apache.lucene.util.OpenBitSet)
    {
        long $l10, $l11, $l12, $l13, $l14, $l15;
        java.lang.AssertionError $r5;
        long[] $r2, $r3;
        byte $b16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i17, $i18, $i20;
        boolean $z0;
        org.apache.lucene.util.OpenBitSet r0, r1;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter0: org.apache.lucene.util.OpenBitSet;

        $i1 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i0 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        virtualinvoke r0.<org.apache.lucene.util.OpenBitSet: void ensureCapacityWords(int)>($i2);

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $l14 = r1.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $l13 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $l15 = staticinvoke <java.lang.Math: long max(long,long)>($l14, $l13);

        r0.<org.apache.lucene.util.OpenBitSet: long numBits> = $l15;

        $b16 = $l15 cmp 0L;

        $i18 = (int) $b16;

        if $i18 >= 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $r3 = r1.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i4 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i3 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        i17 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

     label2:
        $i20 = (int) -1;

        i17 = i17 + $i20;

        if i17 < 0 goto label3;

        $l11 = $r2[i17];

        $l10 = $r3[i17];

        $l12 = $l11 | $l10;

        $r2[i17] = $l12;

        goto label2;

     label3:
        $i5 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if $i5 >= $i2 goto label4;

        $i9 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i8 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i6 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i7 = $i2 - $i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i9, $r2, $i8, $i7);

     label4:
        r0.<org.apache.lucene.util.OpenBitSet: int wlen> = $i2;

        return;
    }

    public void remove(org.apache.lucene.util.OpenBitSet)
    {
        long $l2, $l3, $l4, $l5;
        long[] r2, r3;
        org.apache.lucene.util.OpenBitSet r0, r1;
        int $i0, $i1, i6, $i8;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter0: org.apache.lucene.util.OpenBitSet;

        $i1 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i0 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        r3 = r1.<org.apache.lucene.util.OpenBitSet: long[] bits>;

     label1:
        $i8 = (int) -1;

        i6 = i6 + $i8;

        if i6 < 0 goto label2;

        $l4 = r2[i6];

        $l2 = r3[i6];

        $l3 = $l2 ^ -1L;

        $l5 = $l4 & $l3;

        r2[i6] = $l5;

        goto label1;

     label2:
        return;
    }

    public void xor(org.apache.lucene.util.OpenBitSet)
    {
        long $l10, $l11, $l12, $l13, $l14, $l15;
        java.lang.AssertionError $r5;
        long[] $r2, $r3;
        byte $b16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i17, $i18, $i20;
        boolean $z0;
        org.apache.lucene.util.OpenBitSet r0, r1;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter0: org.apache.lucene.util.OpenBitSet;

        $i1 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i0 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0);

        virtualinvoke r0.<org.apache.lucene.util.OpenBitSet: void ensureCapacityWords(int)>($i2);

        $z0 = <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $l14 = r1.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $l13 = r0.<org.apache.lucene.util.OpenBitSet: long numBits>;

        $l15 = staticinvoke <java.lang.Math: long max(long,long)>($l14, $l13);

        r0.<org.apache.lucene.util.OpenBitSet: long numBits> = $l15;

        $b16 = $l15 cmp 0L;

        $i18 = (int) $b16;

        if $i18 >= 0 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $r3 = r1.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i4 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i3 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        i17 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i3);

     label2:
        $i20 = (int) -1;

        i17 = i17 + $i20;

        if i17 < 0 goto label3;

        $l11 = $r2[i17];

        $l10 = $r3[i17];

        $l12 = $l11 ^ $l10;

        $r2[i17] = $l12;

        goto label2;

     label3:
        $i5 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if $i5 >= $i2 goto label4;

        $i9 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i8 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i6 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i7 = $i2 - $i6;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i9, $r2, $i8, $i7);

     label4:
        r0.<org.apache.lucene.util.OpenBitSet: int wlen> = $i2;

        return;
    }

    public void and(org.apache.lucene.util.OpenBitSet)
    {
        org.apache.lucene.util.OpenBitSet r0, r1;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter0: org.apache.lucene.util.OpenBitSet;

        virtualinvoke r0.<org.apache.lucene.util.OpenBitSet: void intersect(org.apache.lucene.util.OpenBitSet)>(r1);

        return;
    }

    public void or(org.apache.lucene.util.OpenBitSet)
    {
        org.apache.lucene.util.OpenBitSet r0, r1;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter0: org.apache.lucene.util.OpenBitSet;

        virtualinvoke r0.<org.apache.lucene.util.OpenBitSet: void union(org.apache.lucene.util.OpenBitSet)>(r1);

        return;
    }

    public void andNot(org.apache.lucene.util.OpenBitSet)
    {
        org.apache.lucene.util.OpenBitSet r0, r1;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter0: org.apache.lucene.util.OpenBitSet;

        virtualinvoke r0.<org.apache.lucene.util.OpenBitSet: void remove(org.apache.lucene.util.OpenBitSet)>(r1);

        return;
    }

    public boolean intersects(org.apache.lucene.util.OpenBitSet)
    {
        long $l2, $l3, $l4;
        long[] r2, r3;
        byte $b5;
        org.apache.lucene.util.OpenBitSet r0, r1;
        int $i0, $i1, i6, $i8;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter0: org.apache.lucene.util.OpenBitSet;

        $i1 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i0 = r1.<org.apache.lucene.util.OpenBitSet: int wlen>;

        i6 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        r3 = r1.<org.apache.lucene.util.OpenBitSet: long[] bits>;

     label1:
        $i8 = (int) -1;

        i6 = i6 + $i8;

        if i6 < 0 goto label2;

        $l3 = r2[i6];

        $l2 = r3[i6];

        $l4 = $l3 & $l2;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public void ensureCapacityWords(int)
    {
        long[] $r1, $r2, $r3;
        org.apache.lucene.util.OpenBitSet r0;
        int i0, $i1;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $i1 = lengthof $r1;

        if $i1 >= i0 goto label1;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $r3 = staticinvoke <org.apache.lucene.util.ArrayUtil: long[] grow(long[],int)>($r2, i0);

        r0.<org.apache.lucene.util.OpenBitSet: long[] bits> = $r3;

     label1:
        return;
    }

    public void ensureCapacity(long)
    {
        org.apache.lucene.util.OpenBitSet r0;
        int $i1;
        long l0;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l0 := @parameter0: long;

        $i1 = staticinvoke <org.apache.lucene.util.OpenBitSet: int bits2words(long)>(l0);

        virtualinvoke r0.<org.apache.lucene.util.OpenBitSet: void ensureCapacityWords(int)>($i1);

        return;
    }

    public void trimTrailingZeros()
    {
        long $l2;
        long[] $r1;
        byte $b3;
        org.apache.lucene.util.OpenBitSet r0;
        int $i0, $i1, i4, $i6;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        $i0 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        i4 = $i0 - 1;

     label1:
        if i4 < 0 goto label2;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l2 = $r1[i4];

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label2;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label1;

     label2:
        $i1 = i4 + 1;

        r0.<org.apache.lucene.util.OpenBitSet: int wlen> = $i1;

        return;
    }

    public static int bits2words(long)
    {
        int $i4;
        long l0, $l1, $l2, $l3;

        l0 := @parameter0: long;

        $l1 = l0 - 1L;

        $l2 = $l1 >>> 6;

        $l3 = $l2 + 1L;

        $i4 = (int) $l3;

        return $i4;
    }

    public boolean equals(java.lang.Object)
    {
        long $l4, $l5, $l7;
        long[] $r2, $r3, $r4;
        byte $b6, $b8;
        int $i0, $i1, $i2, $i3, i9, $i10, i11, $i13, $i15;
        boolean $z0;
        org.apache.lucene.util.OpenBitSet r0, r5, r6;
        java.lang.Object r1;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = r1 instanceof org.apache.lucene.util.OpenBitSet;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r5 = (org.apache.lucene.util.OpenBitSet) r1;

        $i1 = r5.<org.apache.lucene.util.OpenBitSet: int wlen>;

        $i0 = r0.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if $i1 <= $i0 goto label03;

        r6 = r5;

        r5 = r0;

        goto label04;

     label03:
        r6 = r0;

     label04:
        $i2 = r6.<org.apache.lucene.util.OpenBitSet: int wlen>;

        i9 = $i2 - 1;

     label05:
        $i10 = r5.<org.apache.lucene.util.OpenBitSet: int wlen>;

        if i9 < $i10 goto label07;

        $r4 = r6.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l7 = $r4[i9];

        $b8 = $l7 cmp 0L;

        if $b8 == 0 goto label06;

        return 0;

     label06:
        $i13 = (int) -1;

        i9 = i9 + $i13;

        goto label05;

     label07:
        $i3 = r5.<org.apache.lucene.util.OpenBitSet: int wlen>;

        i11 = $i3 - 1;

     label08:
        if i11 < 0 goto label10;

        $r2 = r6.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l5 = $r2[i11];

        $r3 = r5.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l4 = $r3[i11];

        $b6 = $l5 cmp $l4;

        if $b6 == 0 goto label09;

        return 0;

     label09:
        $i15 = (int) -1;

        i11 = i11 + $i15;

        goto label08;

     label10:
        return 1;
    }

    public int hashCode()
    {
        long $l0, $l1, $l4, $l5, $l6, l7, l9;
        long[] $r1, $r2;
        org.apache.lucene.util.OpenBitSet r0;
        int $i2, $i3, i8, $i11;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        l7 = 0L;

        $r1 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        i8 = lengthof $r1;

     label1:
        $i11 = (int) -1;

        i8 = i8 + $i11;

        if i8 < 0 goto label2;

        $r2 = r0.<org.apache.lucene.util.OpenBitSet: long[] bits>;

        $l4 = $r2[i8];

        l9 = l7 ^ $l4;

        $l6 = l9 << 1;

        $l5 = l9 >>> 63;

        l7 = $l6 | $l5;

        goto label1;

     label2:
        $l0 = l7 >> 32;

        $l1 = $l0 ^ l7;

        $i2 = (int) $l1;

        $i3 = $i2 + -1737092556;

        return $i3;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.apache.lucene.util.OpenBitSet r0, $r1;

        r0 := @this: org.apache.lucene.util.OpenBitSet;

        $r1 = virtualinvoke r0.<org.apache.lucene.util.OpenBitSet: org.apache.lucene.util.OpenBitSet clone()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/OpenBitSet;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.OpenBitSet: boolean $assertionsDisabled> = $z1;

        return;
    }
}
