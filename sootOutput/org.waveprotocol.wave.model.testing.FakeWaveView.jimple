public final class org.waveprotocol.wave.model.testing.FakeWaveView extends java.lang.Object implements org.waveprotocol.wave.model.wave.opbased.ObservableWaveView, org.waveprotocol.wave.model.testing.Factory
{
    private static final org.waveprotocol.wave.model.wave.ParticipantId FAKE_PARTICIPANT;
    private final org.waveprotocol.wave.model.testing.OpBasedWaveletFactory factory;
    private final org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view;

    private void <init>(org.waveprotocol.wave.model.testing.OpBasedWaveletFactory, org.waveprotocol.wave.model.wave.opbased.WaveViewImpl)
    {
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r2;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory factory> = r1;

        r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view> = r2;

        return;
    }

    public static org.waveprotocol.wave.model.testing.FakeWaveView$Builder builder(org.waveprotocol.wave.model.schema.SchemaProvider)
    {
        org.waveprotocol.wave.model.schema.SchemaProvider r1;
        org.waveprotocol.wave.model.testing.FakeWaveView$Builder $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.schema.SchemaProvider;

        $r0 = new org.waveprotocol.wave.model.testing.FakeWaveView$Builder;

        specialinvoke $r0.<org.waveprotocol.wave.model.testing.FakeWaveView$Builder: void <init>(org.waveprotocol.wave.model.schema.SchemaProvider,org.waveprotocol.wave.model.testing.FakeWaveView$1)>(r1, null);

        return $r0;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet create()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet createWavelet()>();

        return $r1;
    }

    public org.waveprotocol.wave.model.testing.MockParticipationHelper getLastAuthoriser()
    {
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory $r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.testing.MockParticipationHelper $r2;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory factory>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.testing.MockParticipationHelper getLastAuthoriser()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory getLastContextFactory()
    {
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory $r1;
        org.waveprotocol.wave.model.testing.MockWaveletOperationContextFactory $r2;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory factory>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.testing.OpBasedWaveletFactory: org.waveprotocol.wave.model.testing.MockWaveletOperationContextFactory getLastContextFactory()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet createWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r2;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r3;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r4;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet createWavelet(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r4 = (org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet) $r3;

        return $r4;
    }

    public void removeWavelet(org.waveprotocol.wave.model.wave.ObservableWavelet)
    {
        org.waveprotocol.wave.model.wave.ObservableWavelet r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r2;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        $r2 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: void removeWavelet(org.waveprotocol.wave.model.wave.ObservableWavelet)>(r1);

        return;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet createRoot()
    {
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r1;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r3;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet createRoot()>();

        $r3 = (org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet) $r2;

        return $r3;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet createUserData()
    {
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r1;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r3;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet createUserData()>();

        $r3 = (org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet) $r2;

        return $r3;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet createWavelet()
    {
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r1;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r3;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet createWavelet()>();

        $r3 = (org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet) $r2;

        return $r3;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet getRoot()
    {
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r1;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r3;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet getRoot()>();

        $r3 = (org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet) $r2;

        return $r3;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet getUserData()
    {
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r1;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r3;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet getUserData()>();

        $r3 = (org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet) $r2;

        return $r3;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r2;
        org.waveprotocol.wave.model.wave.ObservableWavelet $r3;
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r4;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        $r4 = (org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet) $r3;

        return $r4;
    }

    public java.lang.Iterable getWavelets()
    {
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r1;
        java.lang.Iterable $r2;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: java.lang.Iterable getWavelets()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.id.WaveId getWaveId()
    {
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        return $r2;
    }

    public void addListener(org.waveprotocol.wave.model.wave.WaveViewListener)
    {
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r2;
        org.waveprotocol.wave.model.wave.WaveViewListener r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.WaveViewListener;

        $r2 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: void addListener(org.waveprotocol.wave.model.wave.WaveViewListener)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.wave.WaveViewListener)
    {
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl $r2;
        org.waveprotocol.wave.model.wave.WaveViewListener r1;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.WaveViewListener;

        $r2 = r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl view>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.WaveViewImpl: void removeListener(org.waveprotocol.wave.model.wave.WaveViewListener)>(r1);

        return;
    }

    public volatile org.waveprotocol.wave.model.wave.ObservableWavelet createUserData()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet createUserData()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.ObservableWavelet createRoot()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet createRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.ObservableWavelet createWavelet()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet createWavelet()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.ObservableWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.wave.ObservableWavelet getUserData()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet getUserData()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.ObservableWavelet getRoot()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet getRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet createUserData()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet createUserData()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet getUserData()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet getUserData()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet createRoot()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet createRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet getRoot()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet getRoot()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet createWavelet()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet createWavelet()>();

        return $r1;
    }

    public volatile org.waveprotocol.wave.model.wave.Wavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)
    {
        org.waveprotocol.wave.model.id.WaveletId r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r2;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletId;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet getWavelet(org.waveprotocol.wave.model.id.WaveletId)>(r1);

        return $r2;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.WaveViewListener $r2;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.WaveViewListener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: void removeListener(org.waveprotocol.wave.model.wave.WaveViewListener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.WaveViewListener $r2;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.WaveViewListener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: void addListener(org.waveprotocol.wave.model.wave.WaveViewListener)>($r2);

        return;
    }

    public volatile java.lang.Object create()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet create()>();

        return $r1;
    }

    static org.waveprotocol.wave.model.wave.ParticipantId access$000()
    {
        org.waveprotocol.wave.model.wave.ParticipantId $r0;

        $r0 = <org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.ParticipantId FAKE_PARTICIPANT>;

        return $r0;
    }

    void <init>(org.waveprotocol.wave.model.testing.OpBasedWaveletFactory, org.waveprotocol.wave.model.wave.opbased.WaveViewImpl, org.waveprotocol.wave.model.testing.FakeWaveView$1)
    {
        org.waveprotocol.wave.model.testing.OpBasedWaveletFactory r1;
        org.waveprotocol.wave.model.testing.FakeWaveView r0;
        org.waveprotocol.wave.model.wave.opbased.WaveViewImpl r2;
        org.waveprotocol.wave.model.testing.FakeWaveView$1 r3;

        r0 := @this: org.waveprotocol.wave.model.testing.FakeWaveView;

        r1 := @parameter0: org.waveprotocol.wave.model.testing.OpBasedWaveletFactory;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.opbased.WaveViewImpl;

        r3 := @parameter2: org.waveprotocol.wave.model.testing.FakeWaveView$1;

        specialinvoke r0.<org.waveprotocol.wave.model.testing.FakeWaveView: void <init>(org.waveprotocol.wave.model.testing.OpBasedWaveletFactory,org.waveprotocol.wave.model.wave.opbased.WaveViewImpl)>(r1, r2);

        return;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.wave.ParticipantId $r0;

        $r0 = new org.waveprotocol.wave.model.wave.ParticipantId;

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.ParticipantId: void <init>(java.lang.String)>("fake@example.com");

        <org.waveprotocol.wave.model.testing.FakeWaveView: org.waveprotocol.wave.model.wave.ParticipantId FAKE_PARTICIPANT> = $r0;

        return;
    }
}
