public class ucar.nc2.ft.point.standard.TableAnalyzer extends java.lang.Object
{
    private static org.slf4j.Logger log;
    private static java.util.List conventionList;
    private static boolean userMode;
    private static boolean debug;
    private static boolean loadWarnings;
    private ucar.nc2.ft.point.standard.TableConfigurer tc;
    private ucar.nc2.dataset.NetcdfDataset ds;
    private java.util.Map tableFind;
    private java.util.Set tableSet;
    private java.util.List leaves;
    private ucar.nc2.constants.FeatureType ft;
    private ucar.nc2.ft.point.standard.TableConfig configResult;
    private java.util.Formatter userAdvice;
    private java.util.Formatter errlog;
    private java.lang.String conventionName;

    public static void registerAnalyzer(java.lang.String, java.lang.Class, ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)
    {
        ucar.nc2.ft.point.standard.TableConfigurer r3;
        java.lang.InstantiationException $r24;
        boolean $z0, $z1;
        java.lang.IllegalAccessException $r16;
        java.util.List $r7, $r8;
        java.lang.StringBuilder $r10, $r11, $r13, $r14, $r18, $r19, $r21, $r22, $r26, $r27, $r29, $r30;
        ucar.nc2.ft.point.standard.TableAnalyzer$Configurator $r4;
        java.lang.String r5, $r12, $r15, $r20, $r23, $r28, $r31;
        java.lang.IllegalArgumentException $r9, $r17, $r25;
        ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk r6;
        java.lang.Class r0, $r1;
        java.lang.Object $r2;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Class;

        r6 := @parameter2: ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk;

        $r1 = class "Lucar/nc2/ft/point/standard/TableConfigurer;";

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ");

        $r12 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must implement TableConfigurer");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r9;

     label1:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.Object newInstance()>();

        r3 = (ucar.nc2.ft.point.standard.TableConfigurer) $r2;

     label2:
        goto label5;

     label3:
        $r24 := @caughtexception;

        $r25 = new java.lang.IllegalArgumentException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TableConfigurer Class ");

        $r28 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot instantiate, probably need default Constructor");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r31);

        throw $r25;

     label4:
        $r16 := @caughtexception;

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TableConfigurer Class ");

        $r20 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not accessible");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23);

        throw $r17;

     label5:
        $r4 = new ucar.nc2.ft.point.standard.TableAnalyzer$Configurator;

        specialinvoke $r4.<ucar.nc2.ft.point.standard.TableAnalyzer$Configurator: void <init>(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableConfigurer,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>(r5, r0, r3, r6);

        $z1 = <ucar.nc2.ft.point.standard.TableAnalyzer: boolean userMode>;

        if $z1 == 0 goto label6;

        $r8 = <ucar.nc2.ft.point.standard.TableAnalyzer: java.util.List conventionList>;

        interfaceinvoke $r8.<java.util.List: void add(int,java.lang.Object)>(0, $r4);

        goto label7;

     label6:
        $r7 = <ucar.nc2.ft.point.standard.TableAnalyzer: java.util.List conventionList>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r4);

     label7:
        return;

        catch java.lang.InstantiationException from label1 to label2 with label3;
        catch java.lang.IllegalAccessException from label1 to label2 with label4;
    }

    private static ucar.nc2.ft.point.standard.TableAnalyzer$Configurator matchConfigurator(java.lang.String)
    {
        java.util.Iterator $r1;
        ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk $r4, $r5, $r8;
        java.util.List $r0;
        java.lang.Object $r2;
        java.lang.String r6, $r7, $r9;
        ucar.nc2.ft.point.standard.TableAnalyzer$Configurator r3;
        boolean $z0, $z1, $z2;

        r6 := @parameter0: java.lang.String;

        $r0 = <ucar.nc2.ft.point.standard.TableAnalyzer: java.util.List conventionList>;

        $r1 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (ucar.nc2.ft.point.standard.TableAnalyzer$Configurator) $r2;

        $r4 = r3.<ucar.nc2.ft.point.standard.TableAnalyzer$Configurator: ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk match>;

        if $r4 != null goto label2;

        $r9 = r3.<ucar.nc2.ft.point.standard.TableAnalyzer$Configurator: java.lang.String convName>;

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6);

        if $z2 == 0 goto label2;

        return r3;

     label2:
        $r5 = r3.<ucar.nc2.ft.point.standard.TableAnalyzer$Configurator: ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk match>;

        if $r5 == null goto label3;

        $r8 = r3.<ucar.nc2.ft.point.standard.TableAnalyzer$Configurator: ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk match>;

        $r7 = r3.<ucar.nc2.ft.point.standard.TableAnalyzer$Configurator: java.lang.String convName>;

        $z1 = interfaceinvoke $r8.<ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk: boolean isMatch(java.lang.String,java.lang.String)>(r6, $r7);

        if $z1 == 0 goto label3;

        return r3;

     label3:
        goto label1;

     label4:
        return null;
    }

    public static ucar.nc2.ft.point.standard.TableConfigurer getTableConfigurer(ucar.nc2.constants.FeatureType, ucar.nc2.dataset.NetcdfDataset) throws java.io.IOException
    {
        ucar.nc2.constants.FeatureType r10;
        java.lang.Exception $r50;
        java.lang.StringBuilder $r13, $r15, $r17, $r18, $r19, $r31, $r33, $r34, $r41, $r43, $r44, $r51, $r53, $r55, $r56, $r57;
        java.lang.Object[] $r9;
        java.util.ArrayList $r23;
        java.util.StringTokenizer $r24, $r38;
        java.lang.String $r1, $r16, $r20, $r21, $r30, $r35, $r36, $r37, $r39, $r40, $r45, $r54, $r58, r60, r61, r64;
        java.lang.Class[] $r7;
        ucar.nc2.dataset.NetcdfDataset r0;
        ucar.nc2.ft.point.standard.TableConfigurer $r11, r68;
        java.lang.NoSuchMethodException $r59;
        java.lang.InstantiationException $r48;
        java.lang.reflect.Method $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.IllegalAccessException $r46;
        java.util.List $r4, $r25;
        ucar.nc2.ft.point.standard.TableAnalyzer$Configurator $r22, r62, r63, r65;
        int $i0, $i1, $i2, $i3;
        java.lang.Boolean r67;
        java.io.PrintStream $r14, $r32, $r42, $r52;
        org.slf4j.Logger $r47, $r49;
        java.util.Iterator $r5, $r26, $r28;
        java.lang.Class $r2, r66;
        java.lang.Object $r3, $r6, $r12, $r27, $r29;

        r10 := @parameter0: ucar.nc2.constants.FeatureType;

        r0 := @parameter1: ucar.nc2.dataset.NetcdfDataset;

        r60 = null;

        $r1 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "Conventions", null);

        r61 = $r1;

        if $r1 != null goto label01;

        r61 = virtualinvoke r0.<ucar.nc2.dataset.NetcdfDataset: java.lang.String findAttValueIgnoreCase(ucar.nc2.Variable,java.lang.String,java.lang.String)>(null, "Convention", null);

     label01:
        r62 = null;

        if r61 == null goto label14;

        $r21 = virtualinvoke r61.<java.lang.String: java.lang.String trim()>();

        r61 = $r21;

        $r22 = staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableAnalyzer$Configurator matchConfigurator(java.lang.String)>($r21);

        r62 = $r22;

        if $r22 == null goto label02;

        r60 = $r21;

        $z7 = <ucar.nc2.ft.point.standard.TableAnalyzer: boolean debug>;

        if $z7 == 0 goto label02;

        $r42 = <java.lang.System: java.io.PrintStream out>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  TableConfigurer found using convName ");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r42.<java.io.PrintStream: void println(java.lang.String)>($r45);

     label02:
        if $r22 != null goto label14;

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        $i0 = virtualinvoke $r21.<java.lang.String: int indexOf(int)>(44);

        if $i0 > 0 goto label03;

        $i1 = virtualinvoke $r21.<java.lang.String: int indexOf(int)>(59);

        if $i1 <= 0 goto label06;

     label03:
        $r24 = new java.util.StringTokenizer;

        specialinvoke $r24.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r21, ",;");

     label04:
        $z8 = virtualinvoke $r24.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z8 == 0 goto label05;

        $r36 = virtualinvoke $r24.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r37 = virtualinvoke $r36.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r37);

        goto label04;

     label05:
        goto label08;

     label06:
        $i2 = virtualinvoke $r21.<java.lang.String: int indexOf(int)>(47);

        if $i2 <= 0 goto label08;

        $r38 = new java.util.StringTokenizer;

        specialinvoke $r38.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r21, "/");

     label07:
        $z6 = virtualinvoke $r38.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z6 == 0 goto label08;

        $r39 = virtualinvoke $r38.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r40 = virtualinvoke $r39.<java.lang.String: java.lang.String trim()>();

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r40);

        goto label07;

     label08:
        $i3 = interfaceinvoke $r23.<java.util.List: int size()>();

        if $i3 <= 0 goto label14;

        $r25 = <ucar.nc2.ft.point.standard.TableAnalyzer: java.util.List conventionList>;

        $r26 = interfaceinvoke $r25.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z2 = interfaceinvoke $r26.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label14;

        $r27 = interfaceinvoke $r26.<java.util.Iterator: java.lang.Object next()>();

        r63 = (ucar.nc2.ft.point.standard.TableAnalyzer$Configurator) $r27;

        $r28 = interfaceinvoke $r23.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z3 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r29 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r64 = (java.lang.String) $r29;

        $r30 = r63.<ucar.nc2.ft.point.standard.TableAnalyzer$Configurator: java.lang.String convName>;

        $z4 = virtualinvoke r64.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r30);

        if $z4 == 0 goto label11;

        r62 = r63;

        r60 = r64;

        $z5 = <ucar.nc2.ft.point.standard.TableAnalyzer: boolean debug>;

        if $z5 == 0 goto label11;

        $r32 = <java.lang.System: java.io.PrintStream out>;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  TableConfigurer found using convName ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r32.<java.io.PrintStream: void println(java.lang.String)>($r35);

     label11:
        goto label10;

     label12:
        if r62 == null goto label13;

        goto label14;

     label13:
        goto label09;

     label14:
        if r62 != null goto label25;

        $r4 = <ucar.nc2.ft.point.standard.TableAnalyzer: java.util.List conventionList>;

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label15:
        $z9 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label25;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r65 = (ucar.nc2.ft.point.standard.TableAnalyzer$Configurator) $r6;

        r66 = r65.<ucar.nc2.ft.point.standard.TableAnalyzer$Configurator: java.lang.Class confClass>;

     label16:
        $r7 = newarray (java.lang.Class)[2];

        $r7[0] = class "Lucar/nc2/constants/FeatureType;";

        $r7[1] = class "Lucar/nc2/dataset/NetcdfDataset;";

        $r8 = virtualinvoke r66.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("isMine", $r7);

     label17:
        goto label19;

     label18:
        $r59 := @caughtexception;

        goto label15;

     label19:
        $r11 = r65.<ucar.nc2.ft.point.standard.TableAnalyzer$Configurator: ucar.nc2.ft.point.standard.TableConfigurer confInstance>;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r10;

        $r9[1] = r0;

        $r12 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r11, $r9);

        r67 = (java.lang.Boolean) $r12;

        $z0 = <ucar.nc2.ft.point.standard.TableAnalyzer: boolean debug>;

        if $z0 == 0 goto label20;

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  TableConfigurer.isMine ");

        $r16 = virtualinvoke r66.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" result = ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r67);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r20);

     label20:
        $z1 = virtualinvoke r67.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 == 0 goto label22;

        r62 = r65;

        r60 = r65.<ucar.nc2.ft.point.standard.TableAnalyzer$Configurator: java.lang.String convName>;

     label21:
        goto label25;

     label22:
        goto label24;

     label23:
        $r50 := @caughtexception;

        $r52 = <java.lang.System: java.io.PrintStream out>;

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ERROR: Class ");

        $r54 = virtualinvoke r66.<java.lang.Class: java.lang.String getName()>();

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Exception invoking isMine method\n");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r50);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r52.<java.io.PrintStream: void println(java.lang.String)>($r58);

     label24:
        goto label15;

     label25:
        r68 = null;

        if r62 == null goto label30;

     label26:
        $r2 = r62.<ucar.nc2.ft.point.standard.TableAnalyzer$Configurator: java.lang.Class confClass>;

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object newInstance()>();

        r68 = (ucar.nc2.ft.point.standard.TableConfigurer) $r3;

        interfaceinvoke r68.<ucar.nc2.ft.point.standard.TableConfigurer: void setConvName(java.lang.String)>(r61);

        interfaceinvoke r68.<ucar.nc2.ft.point.standard.TableConfigurer: void setConvUsed(java.lang.String)>(r60);

     label27:
        goto label30;

     label28:
        $r48 := @caughtexception;

        $r49 = <ucar.nc2.ft.point.standard.TableAnalyzer: org.slf4j.Logger log>;

        interfaceinvoke $r49.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("TableConfigurer create failed", $r48);

        goto label30;

     label29:
        $r46 := @caughtexception;

        $r47 = <ucar.nc2.ft.point.standard.TableAnalyzer: org.slf4j.Logger log>;

        interfaceinvoke $r47.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("TableConfigurer create failed", $r46);

     label30:
        return r68;

        catch java.lang.NoSuchMethodException from label16 to label17 with label18;
        catch java.lang.Exception from label19 to label21 with label23;
        catch java.lang.InstantiationException from label26 to label27 with label28;
        catch java.lang.IllegalAccessException from label26 to label27 with label29;
    }

    public static ucar.nc2.ft.point.standard.TableAnalyzer factory(ucar.nc2.ft.point.standard.TableConfigurer, ucar.nc2.constants.FeatureType, ucar.nc2.dataset.NetcdfDataset) throws java.io.IOException
    {
        ucar.nc2.ft.point.standard.TableConfigurer r2;
        java.lang.Object[] $r3, $r7, $r21, $r22;
        ucar.nc2.ft.point.standard.TableAnalyzer $r0;
        java.util.Formatter $r4, $r8, $r15, $r23;
        java.lang.String $r6, $r9, $r10, $r11, $r12, $r13, $r17, $r20;
        ucar.nc2.constants.FeatureType r5;
        boolean $z0;
        java.lang.StringBuilder $r14, $r16, $r18, $r19;
        ucar.nc2.dataset.NetcdfDataset r1;

        r2 := @parameter0: ucar.nc2.ft.point.standard.TableConfigurer;

        r5 := @parameter1: ucar.nc2.constants.FeatureType;

        r1 := @parameter2: ucar.nc2.dataset.NetcdfDataset;

        $r0 = new ucar.nc2.ft.point.standard.TableAnalyzer;

        specialinvoke $r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfigurer)>(r1, r2);

        if r2 == null goto label3;

        $r6 = interfaceinvoke r2.<ucar.nc2.ft.point.standard.TableConfigurer: java.lang.String getConvName()>();

        if $r6 != null goto label1;

        $r23 = $r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Formatter userAdvice>;

        $r22 = newarray (java.lang.Object)[0];

        virtualinvoke $r23.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" No \'Conventions\' global attribute.\n", $r22);

        goto label2;

     label1:
        $r8 = $r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Formatter userAdvice>;

        $r7 = newarray (java.lang.Object)[1];

        $r9 = interfaceinvoke r2.<ucar.nc2.ft.point.standard.TableConfigurer: java.lang.String getConvName()>();

        $r7[0] = $r9;

        virtualinvoke $r8.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" Conventions global attribute = %s %n", $r7);

     label2:
        $r10 = interfaceinvoke r2.<ucar.nc2.ft.point.standard.TableConfigurer: java.lang.String getConvUsed()>();

        if $r10 == null goto label4;

        $r11 = interfaceinvoke r2.<ucar.nc2.ft.point.standard.TableConfigurer: java.lang.String getConvUsed()>();

        specialinvoke $r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void setConventionUsed(java.lang.String)>($r11);

        $r12 = interfaceinvoke r2.<ucar.nc2.ft.point.standard.TableConfigurer: java.lang.String getConvUsed()>();

        $r13 = interfaceinvoke r2.<ucar.nc2.ft.point.standard.TableConfigurer: java.lang.String getConvName()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 != 0 goto label4;

        $r15 = $r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Formatter userAdvice>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" TableConfigurer used = ");

        $r17 = interfaceinvoke r2.<ucar.nc2.ft.point.standard.TableConfigurer: java.lang.String getConvUsed()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".\n");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = newarray (java.lang.Object)[0];

        virtualinvoke $r15.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>($r20, $r21);

        goto label4;

     label3:
        $r4 = $r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Formatter userAdvice>;

        $r3 = newarray (java.lang.Object)[0];

        virtualinvoke $r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" No TableConfigurer found, using default analysis.\n", $r3);

     label4:
        specialinvoke $r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void analyze(ucar.nc2.constants.FeatureType)>(r5);

        return $r0;
    }

    private void <init>(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.ft.point.standard.TableConfigurer)
    {
        ucar.nc2.ft.point.standard.TableConfigurer r6;
        java.lang.Object[] $r8;
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        java.util.HashMap $r1;
        java.util.ArrayList $r3;
        java.util.Formatter $r4, $r5, $r9;
        java.util.HashSet $r2;
        ucar.nc2.dataset.NetcdfDataset r7;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r7 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r6 := @parameter1: ucar.nc2.ft.point.standard.TableConfigurer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Map tableFind> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Set tableSet> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.List leaves> = $r3;

        $r4 = new java.util.Formatter;

        specialinvoke $r4.<java.util.Formatter: void <init>()>();

        r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Formatter userAdvice> = $r4;

        $r5 = new java.util.Formatter;

        specialinvoke $r5.<java.util.Formatter: void <init>()>();

        r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Formatter errlog> = $r5;

        r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfigurer tc> = r6;

        r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds> = r7;

        if r6 != null goto label1;

        $r9 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Formatter userAdvice>;

        $r8 = newarray (java.lang.Object)[0];

        virtualinvoke $r9.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("Using default TableConfigurer.\n", $r8);

     label1:
        return;
    }

    public java.util.List getFlatTables()
    {
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        java.util.List $r1;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        $r1 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.List leaves>;

        return $r1;
    }

    public boolean featureTypeOk(ucar.nc2.constants.FeatureType, java.util.Formatter)
    {
        java.lang.Object[] $r9, $r12;
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        java.util.Formatter r8;
        java.lang.String $r10, $r13;
        ucar.nc2.constants.FeatureType r5, $r6, $r7, $r11, $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r2;
        java.util.List $r1;
        java.lang.Object $r3;
        ucar.nc2.ft.point.standard.NestedTable r4;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r5 := @parameter0: ucar.nc2.constants.FeatureType;

        r8 := @parameter1: java.util.Formatter;

        $r1 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.List leaves>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.ft.point.standard.NestedTable) $r3;

        $z1 = virtualinvoke r4.<ucar.nc2.ft.point.standard.NestedTable: boolean hasCoords()>();

        if $z1 != 0 goto label2;

        $r12 = newarray (java.lang.Object)[2];

        $r13 = virtualinvoke r4.<ucar.nc2.ft.point.standard.NestedTable: java.lang.String getName()>();

        $r12[0] = $r13;

        $r14 = virtualinvoke r4.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.constants.FeatureType getFeatureType()>();

        $r12[1] = $r14;

        virtualinvoke r8.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("Table %s featureType %s: lat/lon/time coord not found%n", $r12);

     label2:
        $r6 = virtualinvoke r4.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.constants.FeatureType getFeatureType()>();

        $z2 = staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean featureTypeOk(ucar.nc2.constants.FeatureType,ucar.nc2.constants.FeatureType)>(r5, $r6);

        if $z2 != 0 goto label3;

        $r9 = newarray (java.lang.Object)[3];

        $r10 = virtualinvoke r4.<ucar.nc2.ft.point.standard.NestedTable: java.lang.String getName()>();

        $r9[0] = $r10;

        $r11 = virtualinvoke r4.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.constants.FeatureType getFeatureType()>();

        $r9[1] = $r11;

        $r9[2] = r5;

        virtualinvoke r8.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("Table %s featureType %s doesnt match desired type %s%n", $r9);

     label3:
        $z3 = virtualinvoke r4.<ucar.nc2.ft.point.standard.NestedTable: boolean hasCoords()>();

        if $z3 == 0 goto label4;

        $r7 = virtualinvoke r4.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.constants.FeatureType getFeatureType()>();

        $z4 = staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: boolean featureTypeOk(ucar.nc2.constants.FeatureType,ucar.nc2.constants.FeatureType)>(r5, $r7);

        if $z4 == 0 goto label4;

        return 1;

     label4:
        goto label1;

     label5:
        return 0;
    }

    public java.lang.String getName()
    {
        ucar.nc2.ft.point.standard.TableConfigurer $r1, $r2;
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        java.lang.Class $r3;
        java.lang.String $r4;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        $r1 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfigurer tc>;

        if $r1 == null goto label1;

        $r2 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfigurer tc>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        return $r4;

     label1:
        return "Default";
    }

    public ucar.nc2.constants.FeatureType getFirstFeatureType()
    {
        java.util.Iterator $r2;
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        java.util.List $r1;
        java.lang.Object $r3;
        ucar.nc2.ft.point.standard.NestedTable r4;
        ucar.nc2.constants.FeatureType $r5;
        boolean $z0, $z1;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        $r1 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.List leaves>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.ft.point.standard.NestedTable) $r3;

        $z1 = virtualinvoke r4.<ucar.nc2.ft.point.standard.NestedTable: boolean hasCoords()>();

        if $z1 == 0 goto label2;

        $r5 = virtualinvoke r4.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.constants.FeatureType getFeatureType()>();

        return $r5;

     label2:
        goto label1;

     label3:
        return null;
    }

    public ucar.nc2.dataset.NetcdfDataset getNetcdfDataset()
    {
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        $r1 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        return $r1;
    }

    public java.lang.String getUserAdvice()
    {
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        java.lang.String $r2;
        java.util.Formatter $r1;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        $r1 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Formatter userAdvice>;

        $r2 = virtualinvoke $r1.<java.util.Formatter: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.String getErrlog()
    {
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        java.lang.String $r2;
        java.util.Formatter $r1;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        $r1 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Formatter errlog>;

        $r2 = virtualinvoke $r1.<java.util.Formatter: java.lang.String toString()>();

        return $r2;
    }

    private void setConventionUsed(java.lang.String)
    {
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        java.lang.String r1;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r1 := @parameter0: java.lang.String;

        r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.lang.String conventionName> = r1;

        return;
    }

    ucar.nc2.ft.point.standard.TableConfig getTableConfig()
    {
        ucar.nc2.ft.point.standard.TableConfig $r1;
        ucar.nc2.ft.point.standard.TableAnalyzer r0;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        $r1 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfig configResult>;

        return $r1;
    }

    ucar.nc2.ft.point.standard.TableConfigurer getTableConfigurer()
    {
        ucar.nc2.ft.point.standard.TableConfigurer $r1;
        ucar.nc2.ft.point.standard.TableAnalyzer r0;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        $r1 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfigurer tc>;

        return $r1;
    }

    private void analyze(ucar.nc2.constants.FeatureType) throws java.io.IOException
    {
        ucar.nc2.ft.point.standard.TableConfigurer $r4, $r8;
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        java.util.Formatter $r6, $r11, $r17;
        ucar.nc2.ft.point.standard.TableConfig $r9, $r10, r14, $r20;
        java.lang.Boolean $r3;
        ucar.nc2.constants.FeatureType r5;
        boolean $z0, $z1, $z2;
        java.io.PrintStream $r12;
        java.util.Iterator $r22;
        java.util.Set $r21;
        java.util.List $r15, $r19;
        java.lang.Object $r2, $r13;
        ucar.nc2.dataset.NetcdfDataset $r1, $r7, $r18;
        ucar.nc2.ft.point.standard.NestedTable $r16;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r5 := @parameter0: ucar.nc2.constants.FeatureType;

        $r1 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        $r2 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: java.lang.Object sendIospMessage(java.lang.Object)>("AddRecordStructure");

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        $r4 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfigurer tc>;

        if $r4 != null goto label1;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void makeTablesDefault(boolean)>($z0);

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void makeNestedTables()>();

        goto label3;

     label1:
        $r8 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfigurer tc>;

        $r7 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        $r6 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Formatter errlog>;

        $r9 = interfaceinvoke $r8.<ucar.nc2.ft.point.standard.TableConfigurer: ucar.nc2.ft.point.standard.TableConfig getConfig(ucar.nc2.constants.FeatureType,ucar.nc2.dataset.NetcdfDataset,java.util.Formatter)>(r5, $r7, $r6);

        r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfig configResult> = $r9;

        $r10 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfig configResult>;

        if $r10 == null goto label2;

        $r20 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfig configResult>;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void addTableRecurse(ucar.nc2.ft.point.standard.TableConfig)>($r20);

        goto label3;

     label2:
        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void makeTablesDefault(boolean)>($z0);

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void makeNestedTables()>();

     label3:
        $r21 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Set tableSet>;

        $r22 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r22.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r13 = interfaceinvoke $r22.<java.util.Iterator: java.lang.Object next()>();

        r14 = (ucar.nc2.ft.point.standard.TableConfig) $r13;

        $r15 = r14.<ucar.nc2.ft.point.standard.TableConfig: java.util.List children>;

        if $r15 != null goto label5;

        $r16 = new ucar.nc2.ft.point.standard.NestedTable;

        $r18 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        $r17 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Formatter errlog>;

        specialinvoke $r16.<ucar.nc2.ft.point.standard.NestedTable: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.ft.point.standard.TableConfig,java.util.Formatter)>($r18, r14, $r17);

        $r19 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.List leaves>;

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r16);

     label5:
        goto label4;

     label6:
        $z1 = <ucar.nc2.ft.point.standard.PointDatasetStandardFactory: boolean showTables>;

        if $z1 == 0 goto label7;

        $r11 = new java.util.Formatter;

        $r12 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r11.<java.util.Formatter: void <init>(java.io.PrintStream)>($r12);

        virtualinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void getDetailInfo(java.util.Formatter)>($r11);

     label7:
        return;
    }

    private void addTable(ucar.nc2.ft.point.standard.TableConfig)
    {
        java.util.Set $r5;
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        ucar.nc2.ft.point.standard.TableConfig r1;
        java.util.Map $r3, $r7;
        java.lang.String $r2, $r4, $r6;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r1 := @parameter0: ucar.nc2.ft.point.standard.TableConfig;

        $r3 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Map tableFind>;

        $r2 = r1.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String name>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1);

        $r4 = r1.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String dimName>;

        if $r4 == null goto label1;

        $r7 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Map tableFind>;

        $r6 = r1.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String dimName>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r1);

     label1:
        $r5 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Set tableSet>;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void addTableRecurse(ucar.nc2.ft.point.standard.TableConfig)
    {
        java.util.Iterator $r4;
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        ucar.nc2.ft.point.standard.TableConfig r1, r6;
        java.util.List $r2, $r3;
        java.lang.Object $r5;
        boolean $z0;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r1 := @parameter0: ucar.nc2.ft.point.standard.TableConfig;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void addTable(ucar.nc2.ft.point.standard.TableConfig)>(r1);

        $r2 = r1.<ucar.nc2.ft.point.standard.TableConfig: java.util.List children>;

        if $r2 == null goto label2;

        $r3 = r1.<ucar.nc2.ft.point.standard.TableConfig: java.util.List children>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (ucar.nc2.ft.point.standard.TableConfig) $r5;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void addTableRecurse(ucar.nc2.ft.point.standard.TableConfig)>(r6);

        goto label1;

     label2:
        return;
    }

    private void makeTablesDefault(boolean) throws java.io.IOException
    {
        ucar.nc2.ft.point.standard.TableConfig $r14, $r25, $r35, $r49;
        ucar.nc2.dataset.CoordinateAxis $r32, r57, r68, r69;
        ucar.nc2.ft.point.standard.TableConfig$StructureType $r17, $r62;
        ucar.nc2.constants.AxisType $r21, $r22, $r30, $r41, $r42, $r44, $r45, $r46, $r47;
        ucar.nc2.constants.FeatureType $r33, $r34, $r65, $r66;
        java.util.Set $r5, $r67;
        ucar.nc2.ft.point.standard.JoinArray$Type $r38;
        java.lang.Object[] $r23;
        ucar.nc2.Structure $r55;
        java.util.ArrayList $r0;
        java.lang.String $r16, $r18, $r27, $r28, $r39, $r51, $r53, $r54, $r63;
        ucar.nc2.Dimension $r13, r60, r61;
        ucar.nc2.dataset.NetcdfDataset $r2, $r7, $r10, $r19, $r29, $r31, $r52, $r64;
        ucar.nc2.ft.point.standard.JoinArray $r37;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, $z8, $z9;
        java.util.List $r3, $r8, $r11, $r58;
        ucar.nc2.ft.point.standard.TableAnalyzer r1;
        java.util.HashSet $r6;
        ucar.nc2.ft.point.standard.Table$Type $r15, $r26, $r36, $r50;
        int $i0, $i1, $i2, $i3;
        ucar.nc2.Variable r56;
        java.util.Iterator $r4, $r9, $r12, $r59;
        java.lang.Object $r20, $r24, $r40, $r43, $r48;

        r1 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        z7 := @parameter0: boolean;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        $r3 = virtualinvoke $r2.<ucar.nc2.dataset.NetcdfDataset: java.util.List getVariables()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        $r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r48 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r56 = (ucar.nc2.Variable) $r48;

        $z6 = r56 instanceof ucar.nc2.Structure;

        if $z6 == 0 goto label02;

        $r49 = new ucar.nc2.ft.point.standard.TableConfig;

        $r50 = <ucar.nc2.ft.point.standard.Table$Type: ucar.nc2.ft.point.standard.Table$Type Structure>;

        $r51 = virtualinvoke r56.<ucar.nc2.Variable: java.lang.String getName()>();

        specialinvoke $r49.<ucar.nc2.ft.point.standard.TableConfig: void <init>(ucar.nc2.ft.point.standard.Table$Type,java.lang.String)>($r50, $r51);

        $r52 = r1.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        staticinvoke <ucar.nc2.ft.point.standard.CoordSysEvaluator: void findCoords(ucar.nc2.ft.point.standard.TableConfig,ucar.nc2.dataset.NetcdfDataset)>($r49, $r52);

        $r53 = virtualinvoke r56.<ucar.nc2.Variable: java.lang.String getName()>();

        $r49.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String structName> = $r53;

        $r54 = virtualinvoke r56.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r49.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String nestedTableName> = $r54;

        specialinvoke r1.<ucar.nc2.ft.point.standard.TableAnalyzer: void addTable(ucar.nc2.ft.point.standard.TableConfig)>($r49);

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

        $r55 = (ucar.nc2.Structure) r56;

        specialinvoke r1.<ucar.nc2.ft.point.standard.TableAnalyzer: void findNestedStructures(ucar.nc2.Structure,ucar.nc2.ft.point.standard.TableConfig)>($r55, $r49);

        goto label03;

     label02:
        if z7 == 0 goto label03;

        $z8 = virtualinvoke r56.<ucar.nc2.Variable: boolean isUnlimited()>();

        if $z8 == 0 goto label03;

        interfaceinvoke $r4.<java.util.Iterator: void remove()>();

     label03:
        goto label01;

     label04:
        $r5 = r1.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Set tableSet>;

        $i0 = interfaceinvoke $r5.<java.util.Set: int size()>();

        if $i0 <= 0 goto label05;

        return;

     label05:
        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>(int)>(10);

        $r7 = r1.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        $r8 = virtualinvoke $r7.<ucar.nc2.dataset.NetcdfDataset: java.util.List getCoordinateAxes()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r40 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r57 = (ucar.nc2.dataset.CoordinateAxis) $r40;

        $r41 = virtualinvoke r57.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType getAxisType()>();

        $r42 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lat>;

        if $r41 == $r42 goto label07;

        $r44 = virtualinvoke r57.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType getAxisType()>();

        $r45 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Lon>;

        if $r44 == $r45 goto label07;

        $r46 = virtualinvoke r57.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType getAxisType()>();

        $r47 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        if $r46 != $r47 goto label09;

     label07:
        $r58 = virtualinvoke r57.<ucar.nc2.dataset.CoordinateAxis: java.util.List getDimensions()>();

        $r59 = interfaceinvoke $r58.<java.util.List: java.util.Iterator iterator()>();

     label08:
        $z9 = interfaceinvoke $r59.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label09;

        $r43 = interfaceinvoke $r59.<java.util.Iterator: java.lang.Object next()>();

        r60 = (ucar.nc2.Dimension) $r43;

        interfaceinvoke $r6.<java.util.Set: boolean add(java.lang.Object)>(r60);

        goto label08;

     label09:
        goto label06;

     label10:
        $i1 = interfaceinvoke $r6.<java.util.Set: int size()>();

        if $i1 != 1 goto label17;

        $r23 = interfaceinvoke $r6.<java.util.Set: java.lang.Object[] toArray()>();

        $r24 = $r23[0];

        r61 = (ucar.nc2.Dimension) $r24;

        $r25 = new ucar.nc2.ft.point.standard.TableConfig;

        $r26 = <ucar.nc2.ft.point.standard.Table$Type: ucar.nc2.ft.point.standard.Table$Type Structure>;

        $r27 = virtualinvoke r61.<ucar.nc2.Dimension: java.lang.String getName()>();

        specialinvoke $r25.<ucar.nc2.ft.point.standard.TableConfig: void <init>(ucar.nc2.ft.point.standard.Table$Type,java.lang.String)>($r26, $r27);

        $z4 = virtualinvoke r61.<ucar.nc2.Dimension: boolean isUnlimited()>();

        if $z4 == 0 goto label11;

        $r62 = <ucar.nc2.ft.point.standard.TableConfig$StructureType: ucar.nc2.ft.point.standard.TableConfig$StructureType Structure>;

        goto label12;

     label11:
        $r62 = <ucar.nc2.ft.point.standard.TableConfig$StructureType: ucar.nc2.ft.point.standard.TableConfig$StructureType PsuedoStructure>;

     label12:
        $r25.<ucar.nc2.ft.point.standard.TableConfig: ucar.nc2.ft.point.standard.TableConfig$StructureType structureType> = $r62;

        $z5 = virtualinvoke r61.<ucar.nc2.Dimension: boolean isUnlimited()>();

        if $z5 == 0 goto label13;

        $r63 = "record";

        goto label14;

     label13:
        $r63 = virtualinvoke r61.<ucar.nc2.Dimension: java.lang.String getName()>();

     label14:
        $r25.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String structName> = $r63;

        $r28 = virtualinvoke r61.<ucar.nc2.Dimension: java.lang.String getName()>();

        $r25.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String dimName> = $r28;

        $r29 = r1.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        staticinvoke <ucar.nc2.ft.point.standard.CoordSysEvaluator: void findCoordWithDimension(ucar.nc2.ft.point.standard.TableConfig,ucar.nc2.dataset.NetcdfDataset,ucar.nc2.Dimension)>($r25, $r29, r61);

        $r31 = r1.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        $r30 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        $r32 = staticinvoke <ucar.nc2.ft.point.standard.CoordSysEvaluator: ucar.nc2.dataset.CoordinateAxis findCoordByType(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.constants.AxisType)>($r31, $r30);

        if $r32 == null goto label15;

        $i2 = virtualinvoke $r32.<ucar.nc2.dataset.CoordinateAxis: int getRank()>();

        if $i2 != 0 goto label15;

        $r37 = new ucar.nc2.ft.point.standard.JoinArray;

        $r38 = <ucar.nc2.ft.point.standard.JoinArray$Type: ucar.nc2.ft.point.standard.JoinArray$Type scalar>;

        specialinvoke $r37.<ucar.nc2.ft.point.standard.JoinArray: void <init>(ucar.nc2.dataset.VariableDS,ucar.nc2.ft.point.standard.JoinArray$Type,int)>($r32, $r38, 0);

        virtualinvoke $r25.<ucar.nc2.ft.point.standard.TableConfig: void addJoin(ucar.nc2.ft.point.standard.Join)>($r37);

        $r39 = virtualinvoke $r32.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getShortName()>();

        $r25.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String time> = $r39;

     label15:
        specialinvoke r1.<ucar.nc2.ft.point.standard.TableAnalyzer: void addTable(ucar.nc2.ft.point.standard.TableConfig)>($r25);

        $r64 = r1.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        $r65 = staticinvoke <ucar.nc2.ft.FeatureDatasetFactoryManager: ucar.nc2.constants.FeatureType findFeatureType(ucar.nc2.dataset.NetcdfDataset)>($r64);

        $r66 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType TRAJECTORY>;

        if $r65 != $r66 goto label16;

        $r34 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType TRAJECTORY>;

        $r25.<ucar.nc2.ft.point.standard.TableConfig: ucar.nc2.constants.FeatureType featureType> = $r34;

        $r35 = new ucar.nc2.ft.point.standard.TableConfig;

        $r36 = <ucar.nc2.ft.point.standard.Table$Type: ucar.nc2.ft.point.standard.Table$Type Top>;

        specialinvoke $r35.<ucar.nc2.ft.point.standard.TableConfig: void <init>(ucar.nc2.ft.point.standard.Table$Type,java.lang.String)>($r36, "single");

        $r25.<ucar.nc2.ft.point.standard.TableConfig: ucar.nc2.ft.point.standard.TableConfig parent> = $r35;

        virtualinvoke $r35.<ucar.nc2.ft.point.standard.TableConfig: void addChild(ucar.nc2.ft.point.standard.TableConfig)>($r25);

        goto label17;

     label16:
        $r33 = <ucar.nc2.constants.FeatureType: ucar.nc2.constants.FeatureType POINT>;

        $r25.<ucar.nc2.ft.point.standard.TableConfig: ucar.nc2.constants.FeatureType featureType> = $r33;

     label17:
        $r67 = r1.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Set tableSet>;

        $i3 = interfaceinvoke $r67.<java.util.Set: int size()>();

        if $i3 <= 0 goto label18;

        return;

     label18:
        r68 = null;

        $r10 = r1.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        $r11 = virtualinvoke $r10.<ucar.nc2.dataset.NetcdfDataset: java.util.List getCoordinateAxes()>();

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label19:
        $z2 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label21;

        $r20 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r69 = (ucar.nc2.dataset.CoordinateAxis) $r20;

        $r21 = virtualinvoke r69.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType getAxisType()>();

        $r22 = <ucar.nc2.constants.AxisType: ucar.nc2.constants.AxisType Time>;

        if $r21 != $r22 goto label20;

        $z3 = virtualinvoke r69.<ucar.nc2.dataset.CoordinateAxis: boolean isCoordinateVariable()>();

        if $z3 == 0 goto label20;

        r68 = r69;

        goto label21;

     label20:
        goto label19;

     label21:
        if r68 == null goto label22;

        $r13 = virtualinvoke r68.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.Dimension getDimension(int)>(0);

        $r14 = new ucar.nc2.ft.point.standard.TableConfig;

        $r15 = <ucar.nc2.ft.point.standard.Table$Type: ucar.nc2.ft.point.standard.Table$Type Structure>;

        $r16 = virtualinvoke $r13.<ucar.nc2.Dimension: java.lang.String getName()>();

        specialinvoke $r14.<ucar.nc2.ft.point.standard.TableConfig: void <init>(ucar.nc2.ft.point.standard.Table$Type,java.lang.String)>($r15, $r16);

        $r17 = <ucar.nc2.ft.point.standard.TableConfig$StructureType: ucar.nc2.ft.point.standard.TableConfig$StructureType PsuedoStructure>;

        $r14.<ucar.nc2.ft.point.standard.TableConfig: ucar.nc2.ft.point.standard.TableConfig$StructureType structureType> = $r17;

        $r18 = virtualinvoke $r13.<ucar.nc2.Dimension: java.lang.String getName()>();

        $r14.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String dimName> = $r18;

        $r19 = r1.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        staticinvoke <ucar.nc2.ft.point.standard.CoordSysEvaluator: void findCoords(ucar.nc2.ft.point.standard.TableConfig,ucar.nc2.dataset.NetcdfDataset)>($r14, $r19);

        specialinvoke r1.<ucar.nc2.ft.point.standard.TableAnalyzer: void addTable(ucar.nc2.ft.point.standard.TableConfig)>($r14);

     label22:
        return;
    }

    private void findNestedStructures(ucar.nc2.Structure, ucar.nc2.ft.point.standard.TableConfig)
    {
        java.util.Iterator $r2;
        ucar.nc2.ft.point.standard.TableAnalyzer r10;
        ucar.nc2.Structure r0, $r12;
        ucar.nc2.ft.point.standard.TableConfig $r5, r11;
        ucar.nc2.ft.point.standard.Table$Type $r6;
        java.util.List $r1;
        java.lang.Object $r3;
        ucar.nc2.Variable r4;
        java.lang.String $r7, $r8, $r9;
        boolean $z0, $z1;

        r10 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r0 := @parameter0: ucar.nc2.Structure;

        r11 := @parameter1: ucar.nc2.ft.point.standard.TableConfig;

        $r1 = virtualinvoke r0.<ucar.nc2.Structure: java.util.List getVariables()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.Variable) $r3;

        $z1 = r4 instanceof ucar.nc2.Structure;

        if $z1 == 0 goto label2;

        $r5 = new ucar.nc2.ft.point.standard.TableConfig;

        $r6 = <ucar.nc2.ft.point.standard.Table$Type: ucar.nc2.ft.point.standard.Table$Type NestedStructure>;

        $r7 = virtualinvoke r4.<ucar.nc2.Variable: java.lang.String getName()>();

        specialinvoke $r5.<ucar.nc2.ft.point.standard.TableConfig: void <init>(ucar.nc2.ft.point.standard.Table$Type,java.lang.String)>($r6, $r7);

        $r8 = virtualinvoke r4.<ucar.nc2.Variable: java.lang.String getName()>();

        $r5.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String structName> = $r8;

        $r9 = virtualinvoke r4.<ucar.nc2.Variable: java.lang.String getShortName()>();

        $r5.<ucar.nc2.ft.point.standard.TableConfig: java.lang.String nestedTableName> = $r9;

        specialinvoke r10.<ucar.nc2.ft.point.standard.TableAnalyzer: void addTable(ucar.nc2.ft.point.standard.TableConfig)>($r5);

        virtualinvoke r11.<ucar.nc2.ft.point.standard.TableConfig: void addChild(ucar.nc2.ft.point.standard.TableConfig)>($r5);

        $r12 = (ucar.nc2.Structure) r4;

        specialinvoke r10.<ucar.nc2.ft.point.standard.TableAnalyzer: void findNestedStructures(ucar.nc2.Structure,ucar.nc2.ft.point.standard.TableConfig)>($r12, $r5);

     label2:
        goto label1;

     label3:
        return;
    }

    private void makeNestedTables()
    {
        ucar.nc2.ft.point.standard.TableAnalyzer r0;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        return;
    }

    public void showCoordSys(java.util.Formatter)
    {
        java.lang.Object[] $r1, $r8;
        java.util.Iterator $r5;
        ucar.nc2.ft.point.standard.TableAnalyzer r2;
        java.util.Formatter r0;
        java.util.List $r4;
        java.lang.Object $r6;
        ucar.nc2.dataset.CoordinateSystem r7;
        ucar.nc2.dataset.NetcdfDataset $r3;
        boolean $z0;

        r2 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r0 := @parameter0: java.util.Formatter;

        $r1 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("\nCoordinate Systems\n", $r1);

        $r3 = r2.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        $r4 = virtualinvoke $r3.<ucar.nc2.dataset.NetcdfDataset: java.util.List getCoordinateSystems()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (ucar.nc2.dataset.CoordinateSystem) $r6;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r7;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" %s\n", $r8);

        goto label1;

     label2:
        return;
    }

    public void showCoordAxes(java.util.Formatter)
    {
        java.lang.Object[] $r1, $r8;
        java.util.Iterator $r5;
        ucar.nc2.ft.point.standard.TableAnalyzer r2;
        java.util.Formatter r0;
        ucar.nc2.dataset.CoordinateAxis r7;
        java.util.List $r4;
        ucar.nc2.constants.AxisType $r9;
        java.lang.Object $r6;
        java.lang.String $r10;
        ucar.nc2.dataset.NetcdfDataset $r3;
        boolean $z0;

        r2 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r0 := @parameter0: java.util.Formatter;

        $r1 = newarray (java.lang.Object)[0];

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("\nAxes\n", $r1);

        $r3 = r2.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        $r4 = virtualinvoke $r3.<ucar.nc2.dataset.NetcdfDataset: java.util.List getCoordinateAxes()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (ucar.nc2.dataset.CoordinateAxis) $r6;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = virtualinvoke r7.<ucar.nc2.dataset.CoordinateAxis: ucar.nc2.constants.AxisType getAxisType()>();

        $r8[0] = $r9;

        $r10 = virtualinvoke r7.<ucar.nc2.dataset.CoordinateAxis: java.lang.String getNameAndDimensions()>();

        $r8[1] = $r10;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" %s %s\n", $r8);

        goto label1;

     label2:
        return;
    }

    public void showNestedTables(java.util.Formatter)
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        java.lang.Object $r3;
        ucar.nc2.ft.point.standard.NestedTable r4;
        boolean $z0;
        java.util.Formatter r5;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r5 := @parameter0: java.util.Formatter;

        $r1 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.List leaves>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.nc2.ft.point.standard.NestedTable) $r3;

        virtualinvoke r4.<ucar.nc2.ft.point.standard.NestedTable: void show(java.util.Formatter)>(r5);

        goto label1;

     label2:
        return;
    }

    public java.lang.String getImplementationName()
    {
        ucar.nc2.ft.point.standard.TableConfigurer $r1, $r2;
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        java.lang.Class $r3;
        java.lang.String $r4;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        $r1 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfigurer tc>;

        if $r1 == null goto label1;

        $r2 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfigurer tc>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        goto label2;

     label1:
        $r4 = "defaultAnalyser";

     label2:
        return $r4;
    }

    public void getDetailInfo(java.util.Formatter)
    {
        ucar.nc2.ft.point.standard.TableConfigurer $r5, $r13;
        java.lang.Object[] $r1, $r10, $r11, $r12;
        ucar.nc2.ft.point.standard.TableAnalyzer r2;
        java.util.Formatter r0, $r6, $r8;
        int $i0, $i1;
        java.lang.String $r4, $r7, $r9, $r15;
        java.io.IOException $r16;
        java.lang.Class $r14;
        ucar.nc2.dataset.NetcdfDataset $r3;

        r2 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r0 := @parameter0: java.util.Formatter;

        $r1 = newarray (java.lang.Object)[1];

        $r3 = r2.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        $r4 = virtualinvoke $r3.<ucar.nc2.dataset.NetcdfDataset: java.lang.String getLocation()>();

        $r1[0] = $r4;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("\nTableAnalyzer on Dataset %s\n", $r1);

        $r5 = r2.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfigurer tc>;

        if $r5 == null goto label1;

        $r12 = newarray (java.lang.Object)[1];

        $r13 = r2.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfigurer tc>;

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getName()>();

        $r12[0] = $r15;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>(" TableAnalyser = %s\n", $r12);

     label1:
        virtualinvoke r2.<ucar.nc2.ft.point.standard.TableAnalyzer: void showNestedTables(java.util.Formatter)>(r0);

        $r6 = r2.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Formatter errlog>;

        $r7 = virtualinvoke $r6.<java.util.Formatter: java.lang.String toString()>();

        $i0 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = $r7;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("\n Errlog=\n%s", $r11);

     label2:
        $r8 = r2.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.Formatter userAdvice>;

        $r9 = virtualinvoke $r8.<java.util.Formatter: java.lang.String toString()>();

        $i1 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i1 <= 0 goto label3;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = $r9;

        virtualinvoke r0.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("\n userAdvice=\n%s\n", $r10);

     label3:
        specialinvoke r2.<ucar.nc2.ft.point.standard.TableAnalyzer: void writeConfigXML(java.util.Formatter)>(r0);

     label4:
        goto label6;

     label5:
        $r16 := @caughtexception;

        virtualinvoke $r16.<java.io.IOException: void printStackTrace()>();

     label6:
        return;

        catch java.io.IOException from label3 to label4 with label5;
    }

    private void writeConfigXML(java.util.Formatter) throws java.io.IOException
    {
        ucar.nc2.ft.point.standard.TableConfigurer $r9;
        java.lang.Object[] $r5;
        ucar.nc2.ft.point.standard.PointConfigXML $r8;
        org.jdom.output.Format $r3;
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        org.jdom.output.XMLOutputter $r2;
        java.util.Formatter r4;
        ucar.nc2.ft.point.standard.TableConfig $r1, $r10;
        org.jdom.Document $r6;
        java.lang.Class $r11;
        java.lang.String $r7, $r12;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r4 := @parameter0: java.util.Formatter;

        $r1 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfig configResult>;

        if $r1 == null goto label1;

        $r8 = new ucar.nc2.ft.point.standard.PointConfigXML;

        specialinvoke $r8.<ucar.nc2.ft.point.standard.PointConfigXML: void <init>()>();

        $r10 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfig configResult>;

        $r9 = r0.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfigurer tc>;

        $r11 = virtualinvoke $r9.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r8.<ucar.nc2.ft.point.standard.PointConfigXML: void writeConfigXML(ucar.nc2.ft.point.standard.TableConfig,java.lang.String,java.util.Formatter)>($r10, $r12, r4);

        return;

     label1:
        $r2 = new org.jdom.output.XMLOutputter;

        $r3 = staticinvoke <org.jdom.output.Format: org.jdom.output.Format getPrettyFormat()>();

        specialinvoke $r2.<org.jdom.output.XMLOutputter: void <init>(org.jdom.output.Format)>($r3);

        $r5 = newarray (java.lang.Object)[1];

        $r6 = specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: org.jdom.Document makeDocument()>();

        $r7 = virtualinvoke $r2.<org.jdom.output.XMLOutputter: java.lang.String outputString(org.jdom.Document)>($r6);

        $r5[0] = $r7;

        virtualinvoke r4.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s", $r5);

        return;
    }

    private org.jdom.Document makeDocument()
    {
        ucar.nc2.ft.point.standard.TableConfigurer $r5, $r15;
        ucar.nc2.ft.point.standard.TableAnalyzer r2;
        org.jdom.Document $r1;
        java.lang.String $r4, $r13, $r17;
        ucar.nc2.constants.FeatureType $r6, $r12;
        boolean $z0;
        java.util.Iterator $r8;
        java.util.List $r7;
        ucar.nc2.ft.point.standard.Table $r11;
        java.lang.Object $r9;
        java.lang.Class $r16;
        org.jdom.Element $r0, $r14, $r18;
        ucar.nc2.dataset.NetcdfDataset $r3;
        ucar.nc2.ft.point.standard.NestedTable r10;

        r2 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        $r0 = new org.jdom.Element;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String)>("featureDataset");

        $r1 = new org.jdom.Document;

        specialinvoke $r1.<org.jdom.Document: void <init>(org.jdom.Element)>($r0);

        $r3 = r2.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.dataset.NetcdfDataset ds>;

        $r4 = virtualinvoke $r3.<ucar.nc2.dataset.NetcdfDataset: java.lang.String getLocation()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("location", $r4);

        $r5 = r2.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfigurer tc>;

        if $r5 == null goto label1;

        $r14 = new org.jdom.Element;

        specialinvoke $r14.<org.jdom.Element: void <init>(java.lang.String)>("analyser");

        $r15 = r2.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableConfigurer tc>;

        $r16 = virtualinvoke $r15.<java.lang.Object: java.lang.Class getClass()>();

        $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r18 = virtualinvoke $r14.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("class", $r17);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r18);

     label1:
        $r6 = r2.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.constants.FeatureType ft>;

        if $r6 == null goto label2;

        $r12 = r2.<ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.constants.FeatureType ft>;

        $r13 = virtualinvoke $r12.<ucar.nc2.constants.FeatureType: java.lang.String toString()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("featureType", $r13);

     label2:
        $r7 = r2.<ucar.nc2.ft.point.standard.TableAnalyzer: java.util.List leaves>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (ucar.nc2.ft.point.standard.NestedTable) $r9;

        $r11 = virtualinvoke r10.<ucar.nc2.ft.point.standard.NestedTable: ucar.nc2.ft.point.standard.Table getLeaf()>();

        specialinvoke r2.<ucar.nc2.ft.point.standard.TableAnalyzer: org.jdom.Element writeTable(org.jdom.Element,ucar.nc2.ft.point.standard.Table)>($r0, $r11);

        goto label3;

     label4:
        return $r1;
    }

    private org.jdom.Element writeTable(org.jdom.Element, ucar.nc2.ft.point.standard.Table)
    {
        ucar.nc2.ft.point.standard.JoinArray $r18;
        ucar.nc2.ft.point.standard.JoinMuiltdimStructure $r16;
        ucar.nc2.constants.FeatureType $r4, $r26;
        ucar.nc2.ft.point.standard.JoinParentIndex $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r8, $r10, $r11, $r21;
        ucar.nc2.ft.point.standard.Join r32;
        ucar.nc2.ft.point.standard.Table r0, $r1, $r29;
        ucar.nc2.VariableSimpleIF r31;
        ucar.nc2.ft.point.standard.TableAnalyzer r7;
        java.lang.String $r3, $r6, $r22, $r24, $r27, $r28;
        java.util.Iterator $r9, $r12;
        java.lang.Class $r5;
        java.lang.Object $r13, $r20;
        org.jdom.Element $r2, $r15, $r17, $r19, $r23, $r25, r30;

        r7 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r30 := @parameter0: org.jdom.Element;

        r0 := @parameter1: ucar.nc2.ft.point.standard.Table;

        $r1 = r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        if $r1 == null goto label01;

        $r29 = r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.ft.point.standard.Table parent>;

        r30 = specialinvoke r7.<ucar.nc2.ft.point.standard.TableAnalyzer: org.jdom.Element writeTable(org.jdom.Element,ucar.nc2.ft.point.standard.Table)>(r30, $r29);

     label01:
        $r2 = new org.jdom.Element;

        specialinvoke $r2.<org.jdom.Element: void <init>(java.lang.String)>("table");

        virtualinvoke r30.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r2);

        $r3 = virtualinvoke r0.<ucar.nc2.ft.point.standard.Table: java.lang.String getName()>();

        if $r3 == null goto label02;

        $r28 = virtualinvoke r0.<ucar.nc2.ft.point.standard.Table: java.lang.String getName()>();

        virtualinvoke $r2.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r28);

     label02:
        $r4 = virtualinvoke r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.constants.FeatureType getFeatureType()>();

        if $r4 == null goto label03;

        $r26 = virtualinvoke r0.<ucar.nc2.ft.point.standard.Table: ucar.nc2.constants.FeatureType getFeatureType()>();

        $r27 = virtualinvoke $r26.<ucar.nc2.constants.FeatureType: java.lang.String toString()>();

        virtualinvoke $r2.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("featureType", $r27);

     label03:
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String toString()>();

        virtualinvoke $r2.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("class", $r6);

        specialinvoke r7.<ucar.nc2.ft.point.standard.TableAnalyzer: void addCoordinates(org.jdom.Element,ucar.nc2.ft.point.standard.Table)>($r2, r0);

        $r8 = r0.<ucar.nc2.ft.point.standard.Table: java.util.List cols>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z5 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label06;

        $r20 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r31 = (ucar.nc2.VariableSimpleIF) $r20;

        $r21 = r0.<ucar.nc2.ft.point.standard.Table: java.util.List nondataVars>;

        $r22 = interfaceinvoke r31.<ucar.nc2.VariableSimpleIF: java.lang.String getShortName()>();

        $z4 = interfaceinvoke $r21.<java.util.List: boolean contains(java.lang.Object)>($r22);

        if $z4 != 0 goto label05;

        $r23 = new org.jdom.Element;

        specialinvoke $r23.<org.jdom.Element: void <init>(java.lang.String)>("variable");

        $r24 = interfaceinvoke r31.<ucar.nc2.VariableSimpleIF: java.lang.String getName()>();

        $r25 = virtualinvoke $r23.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>($r24);

        virtualinvoke $r2.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r25);

     label05:
        goto label04;

     label06:
        $r10 = r0.<ucar.nc2.ft.point.standard.Table: java.util.List extraJoins>;

        if $r10 == null goto label11;

        $r11 = r0.<ucar.nc2.ft.point.standard.Table: java.util.List extraJoins>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z0 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r32 = (ucar.nc2.ft.point.standard.Join) $r13;

        $z1 = r32 instanceof ucar.nc2.ft.point.standard.JoinArray;

        if $z1 == 0 goto label08;

        $r18 = (ucar.nc2.ft.point.standard.JoinArray) r32;

        $r19 = specialinvoke r7.<ucar.nc2.ft.point.standard.TableAnalyzer: org.jdom.Element writeJoinArray(ucar.nc2.ft.point.standard.JoinArray)>($r18);

        virtualinvoke $r2.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r19);

        goto label10;

     label08:
        $z2 = r32 instanceof ucar.nc2.ft.point.standard.JoinMuiltdimStructure;

        if $z2 == 0 goto label09;

        $r16 = (ucar.nc2.ft.point.standard.JoinMuiltdimStructure) r32;

        $r17 = specialinvoke r7.<ucar.nc2.ft.point.standard.TableAnalyzer: org.jdom.Element writeJoinMuiltdimStructure(ucar.nc2.ft.point.standard.JoinMuiltdimStructure)>($r16);

        virtualinvoke $r2.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r17);

        goto label10;

     label09:
        $z3 = r32 instanceof ucar.nc2.ft.point.standard.JoinParentIndex;

        if $z3 == 0 goto label10;

        $r14 = (ucar.nc2.ft.point.standard.JoinParentIndex) r32;

        $r15 = specialinvoke r7.<ucar.nc2.ft.point.standard.TableAnalyzer: org.jdom.Element writeJoinParentIndex(ucar.nc2.ft.point.standard.JoinParentIndex)>($r14);

        virtualinvoke $r2.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r15);

     label10:
        goto label07;

     label11:
        return $r2;
    }

    private void addCoordinates(org.jdom.Element, ucar.nc2.ft.point.standard.Table)
    {
        ucar.nc2.ft.point.standard.TableAnalyzer r0;
        ucar.nc2.ft.point.standard.Table r2;
        java.lang.String $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        org.jdom.Element r1;

        r0 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r1 := @parameter0: org.jdom.Element;

        r2 := @parameter1: ucar.nc2.ft.point.standard.Table;

        $r3 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String lat>;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void addCoord(org.jdom.Element,java.lang.String,java.lang.String)>(r1, $r3, "lat");

        $r4 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String lon>;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void addCoord(org.jdom.Element,java.lang.String,java.lang.String)>(r1, $r4, "lon");

        $r5 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String elev>;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void addCoord(org.jdom.Element,java.lang.String,java.lang.String)>(r1, $r5, "elev");

        $r6 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String time>;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void addCoord(org.jdom.Element,java.lang.String,java.lang.String)>(r1, $r6, "time");

        $r7 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String timeNominal>;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void addCoord(org.jdom.Element,java.lang.String,java.lang.String)>(r1, $r7, "timeNominal");

        $r8 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String stnId>;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void addCoord(org.jdom.Element,java.lang.String,java.lang.String)>(r1, $r8, "stnId");

        $r9 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String stnDesc>;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void addCoord(org.jdom.Element,java.lang.String,java.lang.String)>(r1, $r9, "stnDesc");

        $r10 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String stnNpts>;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void addCoord(org.jdom.Element,java.lang.String,java.lang.String)>(r1, $r10, "stnNpts");

        $r11 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String stnWmoId>;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void addCoord(org.jdom.Element,java.lang.String,java.lang.String)>(r1, $r11, "stnWmoId");

        $r12 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String stnAlt>;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void addCoord(org.jdom.Element,java.lang.String,java.lang.String)>(r1, $r12, "stnAlt");

        $r13 = r2.<ucar.nc2.ft.point.standard.Table: java.lang.String limit>;

        specialinvoke r0.<ucar.nc2.ft.point.standard.TableAnalyzer: void addCoord(org.jdom.Element,java.lang.String,java.lang.String)>(r1, $r13, "limit");

        return;
    }

    private void addCoord(org.jdom.Element, java.lang.String, java.lang.String)
    {
        ucar.nc2.ft.point.standard.TableAnalyzer r5;
        java.lang.String r0, r2;
        org.jdom.Element $r1, $r3, r4;

        r5 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r4 := @parameter0: org.jdom.Element;

        r0 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        $r1 = new org.jdom.Element;

        specialinvoke $r1.<org.jdom.Element: void <init>(java.lang.String)>("coordinate");

        $r3 = virtualinvoke $r1.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("kind", r2);

        virtualinvoke $r3.<org.jdom.Element: org.jdom.Element addContent(java.lang.String)>(r0);

        virtualinvoke r4.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r3);

     label1:
        return;
    }

    private org.jdom.Element writeJoinArray(ucar.nc2.ft.point.standard.JoinArray)
    {
        ucar.nc2.ft.point.standard.TableAnalyzer r15;
        ucar.nc2.ft.point.standard.JoinArray r1;
        int $i0;
        java.lang.String $r3, $r7, $r11, $r14;
        ucar.nc2.dataset.VariableDS $r5, $r10;
        ucar.nc2.ft.point.standard.JoinArray$Type $r4, $r13;
        java.lang.Class $r2;
        org.jdom.Element $r0, $r6, $r8, $r9, $r12;

        r15 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r1 := @parameter0: ucar.nc2.ft.point.standard.JoinArray;

        $r0 = new org.jdom.Element;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String)>("join");

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String toString()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("class", $r3);

        $r4 = r1.<ucar.nc2.ft.point.standard.JoinArray: ucar.nc2.ft.point.standard.JoinArray$Type type>;

        if $r4 == null goto label1;

        $r13 = r1.<ucar.nc2.ft.point.standard.JoinArray: ucar.nc2.ft.point.standard.JoinArray$Type type>;

        $r14 = virtualinvoke $r13.<ucar.nc2.ft.point.standard.JoinArray$Type: java.lang.String toString()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("type", $r14);

     label1:
        $r5 = r1.<ucar.nc2.ft.point.standard.JoinArray: ucar.nc2.dataset.VariableDS v>;

        if $r5 == null goto label2;

        $r9 = new org.jdom.Element;

        specialinvoke $r9.<org.jdom.Element: void <init>(java.lang.String)>("variable");

        $r10 = r1.<ucar.nc2.ft.point.standard.JoinArray: ucar.nc2.dataset.VariableDS v>;

        $r11 = virtualinvoke $r10.<ucar.nc2.dataset.VariableDS: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r11);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r12);

     label2:
        $r6 = new org.jdom.Element;

        specialinvoke $r6.<org.jdom.Element: void <init>(java.lang.String)>("param");

        $i0 = r1.<ucar.nc2.ft.point.standard.JoinArray: int param>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r8 = virtualinvoke $r6.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("value", $r7);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r8);

        return $r0;
    }

    private org.jdom.Element writeJoinMuiltdimStructure(ucar.nc2.ft.point.standard.JoinMuiltdimStructure)
    {
        ucar.nc2.ft.point.standard.TableAnalyzer r12;
        ucar.nc2.dataset.StructureDS $r4, $r9;
        int $i0;
        ucar.nc2.ft.point.standard.JoinMuiltdimStructure r1;
        java.lang.Class $r2;
        java.lang.String $r3, $r6, $r10;
        org.jdom.Element $r0, $r5, $r7, $r8, $r11;

        r12 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r1 := @parameter0: ucar.nc2.ft.point.standard.JoinMuiltdimStructure;

        $r0 = new org.jdom.Element;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String)>("join");

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String toString()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("class", $r3);

        $r4 = r1.<ucar.nc2.ft.point.standard.JoinMuiltdimStructure: ucar.nc2.dataset.StructureDS parentStructure>;

        if $r4 == null goto label1;

        $r8 = new org.jdom.Element;

        specialinvoke $r8.<org.jdom.Element: void <init>(java.lang.String)>("parentStructure");

        $r9 = r1.<ucar.nc2.ft.point.standard.JoinMuiltdimStructure: ucar.nc2.dataset.StructureDS parentStructure>;

        $r10 = virtualinvoke $r9.<ucar.nc2.dataset.StructureDS: java.lang.String getName()>();

        $r11 = virtualinvoke $r8.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r10);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r11);

     label1:
        $r5 = new org.jdom.Element;

        specialinvoke $r5.<org.jdom.Element: void <init>(java.lang.String)>("dimLength");

        $i0 = r1.<ucar.nc2.ft.point.standard.JoinMuiltdimStructure: int dimLength>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r7 = virtualinvoke $r5.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("value", $r6);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r7);

        return $r0;
    }

    private org.jdom.Element writeJoinParentIndex(ucar.nc2.ft.point.standard.JoinParentIndex)
    {
        ucar.nc2.ft.point.standard.TableAnalyzer r13;
        ucar.nc2.dataset.StructureDS $r4, $r10;
        java.lang.Class $r2;
        java.lang.String $r3, $r5, $r7, $r11;
        org.jdom.Element $r0, $r6, $r8, $r9, $r12;
        ucar.nc2.ft.point.standard.JoinParentIndex r1;

        r13 := @this: ucar.nc2.ft.point.standard.TableAnalyzer;

        r1 := @parameter0: ucar.nc2.ft.point.standard.JoinParentIndex;

        $r0 = new org.jdom.Element;

        specialinvoke $r0.<org.jdom.Element: void <init>(java.lang.String)>("join");

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String toString()>();

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("class", $r3);

        $r4 = r1.<ucar.nc2.ft.point.standard.JoinParentIndex: ucar.nc2.dataset.StructureDS parentStructure>;

        if $r4 == null goto label1;

        $r9 = new org.jdom.Element;

        specialinvoke $r9.<org.jdom.Element: void <init>(java.lang.String)>("parentStructure");

        $r10 = r1.<ucar.nc2.ft.point.standard.JoinParentIndex: ucar.nc2.dataset.StructureDS parentStructure>;

        $r11 = virtualinvoke $r10.<ucar.nc2.dataset.StructureDS: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r11);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r12);

     label1:
        $r5 = r1.<ucar.nc2.ft.point.standard.JoinParentIndex: java.lang.String parentIndex>;

        if $r5 == null goto label2;

        $r6 = new org.jdom.Element;

        specialinvoke $r6.<org.jdom.Element: void <init>(java.lang.String)>("parentIndex");

        $r7 = r1.<ucar.nc2.ft.point.standard.JoinParentIndex: java.lang.String parentIndex>;

        $r8 = virtualinvoke $r6.<org.jdom.Element: org.jdom.Element setAttribute(java.lang.String,java.lang.String)>("name", $r7);

        virtualinvoke $r0.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r8);

     label2:
        return $r0;
    }

    static void doit(java.lang.String) throws java.io.IOException
    {
        java.io.PrintStream $r1, $r5, $r6;
        ucar.nc2.ft.point.standard.TableAnalyzer $r3;
        java.lang.String r0;
        ucar.nc2.dataset.NetcdfDataset $r2;
        java.util.Formatter $r4;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        $r2 = staticinvoke <ucar.nc2.dataset.NetcdfDataset: ucar.nc2.dataset.NetcdfDataset openDataset(java.lang.String)>(r0);

        $r3 = staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: ucar.nc2.ft.point.standard.TableAnalyzer factory(ucar.nc2.ft.point.standard.TableConfigurer,ucar.nc2.constants.FeatureType,ucar.nc2.dataset.NetcdfDataset)>(null, null, $r2);

        $r4 = new java.util.Formatter;

        $r5 = <java.lang.System: java.io.PrintStream out>;

        specialinvoke $r4.<java.util.Formatter: void <init>(java.io.PrintStream)>($r5);

        virtualinvoke $r3.<ucar.nc2.ft.point.standard.TableAnalyzer: void getDetailInfo(java.util.Formatter)>($r4);

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("\n-----------------");

        return;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void doit(java.lang.String)>("D:/datasets/metars/Surface_METAR_20070513_0000.nc");

        return;
    }

    static void <clinit>()
    {
        java.lang.Throwable $r6;
        org.slf4j.Logger $r0, $r8;
        java.util.ArrayList $r1;
        ucar.nc2.ft.point.standard.TableAnalyzer$1 $r2;
        java.lang.Class $r3, $r5;
        java.lang.StringBuilder $r7, $r9, $r10;
        java.lang.ClassLoader $r4;
        java.lang.String $r11;
        boolean $z0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/ft/point/standard/TableAnalyzer;");

        <ucar.nc2.ft.point.standard.TableAnalyzer: org.slf4j.Logger log> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <ucar.nc2.ft.point.standard.TableAnalyzer: java.util.List conventionList> = $r1;

        <ucar.nc2.ft.point.standard.TableAnalyzer: boolean userMode> = 0;

        <ucar.nc2.ft.point.standard.TableAnalyzer: boolean debug> = 0;

        <ucar.nc2.ft.point.standard.TableAnalyzer: boolean loadWarnings> = 0;

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("CDM", class "Lucar/nc2/ft/point/standard/plug/CdmDirect;", null);

        $r2 = new ucar.nc2.ft.point.standard.TableAnalyzer$1;

        specialinvoke $r2.<ucar.nc2.ft.point.standard.TableAnalyzer$1: void <init>()>();

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("CF-1.", class "Lucar/nc2/ft/point/standard/plug/CFpointObs;", $r2);

     label1:
        $r3 = class "Lucar/nc2/ft/point/standard/TableAnalyzer;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r5 = virtualinvoke $r4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("ucar.nc2.ft.point.standard.plug.BufrCdm");

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("BUFR/CDM", $r5, null);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $z0 = <ucar.nc2.ft.point.standard.TableAnalyzer: boolean loadWarnings>;

        if $z0 == 0 goto label4;

        $r8 = <ucar.nc2.ft.point.standard.TableAnalyzer: org.slf4j.Logger log>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cant load class: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String)>($r11);

     label4:
        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("GEMPAK/CDM", class "Lucar/nc2/ft/point/standard/plug/GempakCdm;", null);

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("Unidata Observation Dataset v1.0", class "Lucar/nc2/ft/point/standard/plug/UnidataPointObs;", null);

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("Cosmic", class "Lucar/nc2/ft/point/standard/plug/Cosmic;", null);

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("Jason", class "Lucar/nc2/ft/point/standard/plug/Jason;", null);

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("FslWindProfiler", class "Lucar/nc2/ft/point/standard/plug/FslWindProfiler;", null);

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("MADIS-ACARS", class "Lucar/nc2/ft/point/standard/plug/MadisAcars;", null);

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("MADIS surface observations, v1.0", class "Lucar/nc2/ft/point/standard/plug/Madis;", null);

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("FSL Raobs", class "Lucar/nc2/ft/point/standard/plug/FslRaob;", null);

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("IRIDL", class "Lucar/nc2/ft/point/standard/plug/Iridl;", null);

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("Ndbc", class "Lucar/nc2/ft/point/standard/plug/Ndbc;", null);

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("Suomi-Station-CDM", class "Lucar/nc2/ft/point/standard/plug/Suomi;", null);

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("BuoyShip-NetCDF", class "Lucar/nc2/ft/point/standard/plug/BuoyShipSynop;", null);

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("NCAR-RAF/nimbus", class "Lucar/nc2/ft/point/standard/plug/RafNimbus;", null);

        staticinvoke <ucar.nc2.ft.point.standard.TableAnalyzer: void registerAnalyzer(java.lang.String,java.lang.Class,ucar.nc2.ft.point.standard.TableAnalyzer$ConventionNameOk)>("NLDN-CDM", class "Lucar/nc2/ft/point/standard/plug/Nldn;", null);

        <ucar.nc2.ft.point.standard.TableAnalyzer: boolean userMode> = 1;

        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
