public final class org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.ResponseStatus, org.waveprotocol.wave.communication.gson.GsonSerializable, org.waveprotocol.wave.communication.proto.ProtoWrapper
{
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto;
    private org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder protoBuilder;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder protoBuilder> = $r1;

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder protoBuilder> = $r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto> = r2;

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus r2;
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder protoBuilder> = $r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>(r2);

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getPB()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto>;

        return $r1;
    }

    public void setPB(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto> = r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder protoBuilder> = null;

        return;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode $r2;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus r1;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode getStatus()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode)>($r2);

        $z0 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus: boolean hasFailureReason()>();

        if $z0 == 0 goto label1;

        $r3 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus: java.lang.String getFailureReason()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void setFailureReason(java.lang.String)>($r3);

        goto label2;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void clearFailureReason()>();

     label2:
        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode getStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r1;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode $r3;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode getStatus()>();

        $r3 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode toPojoEnumResponseCode(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode)>($r2);

        return $r3;
    }

    public void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode $r3;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder protoBuilder>;

        $r3 = specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode toProtoEnumResponseCode(org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode)>(r1);

        virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder setStatus(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode)>($r3);

        return;
    }

    public boolean hasFailureReason()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: boolean hasFailureReason()>();

        return $z0;
    }

    public void clearFailureReason()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void switchToProtoBuilder()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder protoBuilder>;

        virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder clearFailureReason()>();

        return;
    }

    public java.lang.String getFailureReason()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        java.lang.String $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void switchToProto()>();

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: java.lang.String getFailureReason()>();

        return $r2;
    }

    public void setFailureReason(java.lang.String)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        java.lang.String r1;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void switchToProtoBuilder()>();

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder protoBuilder>;

        virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder setFailureReason(java.lang.String)>(r1);

        return;
    }

    private org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode toProtoEnumResponseCode(org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode $r1;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode r0;
        int $i0;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: int getValue()>();

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode valueOf(int)>($i0);

        return $r1;
    }

    private org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode toPojoEnumResponseCode(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r4;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode r0;
        java.lang.Enum $r2;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode $r3;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode[] $r1;
        int $i0;

        r4 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$ResponseCode: int getNumber()>();

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode[] values()>();

        $r2 = staticinvoke <org.waveprotocol.wave.communication.ProtoEnums: java.lang.Enum valOf(int,java.lang.Enum[])>($i0, $r1);

        $r3 = (org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode) $r2;

        return $r3;
    }

    private void switchToProto()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r1, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto>;

        if $r1 != null goto label1;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder protoBuilder>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus build()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto> = $r3;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder protoBuilder> = null;

     label1:
        return;
    }

    private void switchToProtoBuilder()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r2, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r1, $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder protoBuilder>;

        if $r1 != null goto label3;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto>;

        if $r2 != null goto label1;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        goto label2;

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto>;

        $r4 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r3);

     label2:
        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder protoBuilder> = $r4;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto> = null;

     label3:
        return;
    }

    private void invalidateAll()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus proto> = null;

        $r1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder newBuilder()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus$Builder protoBuilder> = $r1;

        return;
    }

    public com.google.gson.JsonElement toGson(org.waveprotocol.wave.communication.json.RawStringData, com.google.gson.Gson)
    {
        com.google.gson.JsonObject $r0;
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r2;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode $r3;
        org.waveprotocol.wave.communication.json.RawStringData r7;
        java.lang.Integer $r4;
        com.google.gson.Gson r8;
        int $i0;
        com.google.gson.JsonPrimitive $r1, $r5;
        java.lang.String $r6;
        boolean $z0;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        r7 := @parameter0: org.waveprotocol.wave.communication.json.RawStringData;

        r8 := @parameter1: com.google.gson.Gson;

        $r0 = new com.google.gson.JsonObject;

        specialinvoke $r0.<com.google.gson.JsonObject: void <init>()>();

        $r1 = new com.google.gson.JsonPrimitive;

        $r3 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode getStatus()>();

        $i0 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: int getValue()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        specialinvoke $r1.<com.google.gson.JsonPrimitive: void <init>(java.lang.Number)>($r4);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("1", $r1);

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: boolean hasFailureReason()>();

        if $z0 == 0 goto label1;

        $r5 = new com.google.gson.JsonPrimitive;

        $r6 = virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: java.lang.String getFailureReason()>();

        specialinvoke $r5.<com.google.gson.JsonPrimitive: void <init>(java.lang.String)>($r6);

        virtualinvoke $r0.<com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)>("2", $r5);

     label1:
        return $r0;
    }

    public void fromGson(com.google.gson.JsonElement, com.google.gson.Gson, org.waveprotocol.wave.communication.json.RawStringData) throws org.waveprotocol.wave.communication.gson.GsonException
    {
        com.google.gson.JsonObject $r1;
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r2;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode $r8;
        org.waveprotocol.wave.communication.json.RawStringData r10;
        com.google.gson.JsonElement r0, $r3, $r5;
        java.lang.Enum $r7;
        com.google.gson.Gson r9;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode[] $r6;
        int $i0;
        java.lang.String $r4;
        boolean $z0, $z1, $z2;

        r2 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        r0 := @parameter0: com.google.gson.JsonElement;

        r9 := @parameter1: com.google.gson.Gson;

        r10 := @parameter2: org.waveprotocol.wave.communication.json.RawStringData;

        $r1 = virtualinvoke r0.<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>();

        specialinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void invalidateAll()>();

        $z0 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("1");

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("1");

        $i0 = virtualinvoke $r5.<com.google.gson.JsonElement: int getAsInt()>();

        $r6 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode: org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode[] values()>();

        $r7 = staticinvoke <org.waveprotocol.wave.communication.ProtoEnums: java.lang.Enum valOf(int,java.lang.Enum[])>($i0, $r6);

        $r8 = (org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode) $r7;

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus$ResponseCode)>($r8);

     label1:
        $z1 = virtualinvoke $r1.<com.google.gson.JsonObject: boolean has(java.lang.String)>("2");

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke $r1.<com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)>("2");

        $z2 = virtualinvoke $r3.<com.google.gson.JsonElement: boolean isJsonNull()>();

        if $z2 != 0 goto label2;

        $r4 = virtualinvoke $r3.<com.google.gson.JsonElement: java.lang.String getAsString()>();

        virtualinvoke r2.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void setFailureReason(java.lang.String)>($r4);

     label2:
        return;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0, $r3;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r2, $r4;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        if $z0 == 0 goto label2;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getPB()>();

        $r3 = (org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl) r1;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getPB()>();

        $z1 = virtualinvoke $r2.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label2:
        return 0;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        java.lang.Object r1;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r1 instanceof org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        if $z1 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.ResponseStatus) r1;

        $z2 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.ResponseStatusUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.ResponseStatus,org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>(r0, $r2);

        return $z2;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getPB()>();

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        java.lang.String $r2;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getPB()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus: java.lang.String toString()>();

        return $r2;
    }

    public volatile com.google.protobuf.MessageLite getPB()
    {
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r1;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus getPB()>();

        return $r1;
    }

    public volatile void setPB(com.google.protobuf.MessageLite)
    {
        com.google.protobuf.MessageLite r1;
        org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl r0;
        org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus $r2;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl;

        r1 := @parameter0: com.google.protobuf.MessageLite;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus) r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.proto.ResponseStatusProtoImpl: void setPB(org.waveprotocol.wave.concurrencycontrol.ClientServer$ResponseStatus)>($r2);

        return;
    }
}
