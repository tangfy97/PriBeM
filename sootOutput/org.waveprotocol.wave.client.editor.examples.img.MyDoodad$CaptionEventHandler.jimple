class org.waveprotocol.wave.client.editor.examples.img.MyDoodad$CaptionEventHandler extends org.waveprotocol.wave.client.editor.content.misc.LinoTextEventHandler
{

    void <init>()
    {
        org.waveprotocol.wave.client.editor.examples.img.MyDoodad$CaptionEventHandler r0;

        r0 := @this: org.waveprotocol.wave.client.editor.examples.img.MyDoodad$CaptionEventHandler;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.LinoTextEventHandler: void <init>()>();

        return;
    }

    public void onActivated(org.waveprotocol.wave.client.editor.content.ContentElement)
    {
        org.waveprotocol.wave.client.editor.examples.img.MyDoodad$CaptionEventHandler r0;
        org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler$EditModeListener $r2;
        org.waveprotocol.wave.client.editor.content.ContentElement r1;

        r0 := @this: org.waveprotocol.wave.client.editor.examples.img.MyDoodad$CaptionEventHandler;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.content.ContentElement;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.content.misc.LinoTextEventHandler: void onActivated(org.waveprotocol.wave.client.editor.content.ContentElement)>(r1);

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.content.misc.UpdateContentEditable: org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler$EditModeListener get()>();

        staticinvoke <org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler: void setEditModeListener(org.waveprotocol.wave.client.editor.content.ContentElement,org.waveprotocol.wave.client.editor.content.misc.DisplayEditModeHandler$EditModeListener)>(r1, $r2);

        return;
    }
}
