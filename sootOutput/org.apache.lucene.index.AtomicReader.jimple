public abstract class org.apache.lucene.index.AtomicReader extends org.apache.lucene.index.IndexReader
{
    private final org.apache.lucene.index.AtomicReaderContext readerContext;
    static final boolean $assertionsDisabled;

    protected void <init>()
    {
        org.apache.lucene.index.AtomicReader r0;
        org.apache.lucene.index.AtomicReaderContext $r1;

        r0 := @this: org.apache.lucene.index.AtomicReader;

        specialinvoke r0.<org.apache.lucene.index.IndexReader: void <init>()>();

        $r1 = new org.apache.lucene.index.AtomicReaderContext;

        specialinvoke $r1.<org.apache.lucene.index.AtomicReaderContext: void <init>(org.apache.lucene.index.AtomicReader)>(r0);

        r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.AtomicReaderContext readerContext> = $r1;

        return;
    }

    public final org.apache.lucene.index.AtomicReaderContext getContext()
    {
        org.apache.lucene.index.AtomicReader r0;
        org.apache.lucene.index.AtomicReaderContext $r1;

        r0 := @this: org.apache.lucene.index.AtomicReader;

        virtualinvoke r0.<org.apache.lucene.index.AtomicReader: void ensureOpen()>();

        $r1 = r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.AtomicReaderContext readerContext>;

        return $r1;
    }

    public final boolean hasNorms(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.FieldInfo $r3;
        java.lang.String r2;
        org.apache.lucene.index.FieldInfos $r1;
        org.apache.lucene.index.AtomicReader r0;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.index.AtomicReader;

        r2 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.lucene.index.AtomicReader: void ensureOpen()>();

        $r1 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.FieldInfos getFieldInfos()>();

        $r3 = virtualinvoke $r1.<org.apache.lucene.index.FieldInfos: org.apache.lucene.index.FieldInfo fieldInfo(java.lang.String)>(r2);

        if $r3 == null goto label1;

        $z0 = virtualinvoke $r3.<org.apache.lucene.index.FieldInfo: boolean hasNorms()>();

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public abstract org.apache.lucene.index.Fields fields() throws java.io.IOException;

    public final int docFreq(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.Terms $r4;
        org.apache.lucene.util.BytesRef $r6;
        org.apache.lucene.index.Fields $r1;
        org.apache.lucene.index.Term r2;
        org.apache.lucene.index.TermsEnum $r5;
        int $i0;
        java.lang.String $r3;
        org.apache.lucene.index.AtomicReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.AtomicReader;

        r2 := @parameter0: org.apache.lucene.index.Term;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields fields()>();

        if $r1 != null goto label1;

        return 0;

     label1:
        $r3 = virtualinvoke r2.<org.apache.lucene.index.Term: java.lang.String field()>();

        $r4 = virtualinvoke $r1.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>($r3);

        if $r4 != null goto label2;

        return 0;

     label2:
        $r5 = virtualinvoke $r4.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        $r6 = virtualinvoke r2.<org.apache.lucene.index.Term: org.apache.lucene.util.BytesRef bytes()>();

        $z0 = virtualinvoke $r5.<org.apache.lucene.index.TermsEnum: boolean seekExact(org.apache.lucene.util.BytesRef,boolean)>($r6, 1);

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke $r5.<org.apache.lucene.index.TermsEnum: int docFreq()>();

        return $i0;

     label3:
        return 0;
    }

    public final long totalTermFreq(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.Terms $r4;
        org.apache.lucene.util.BytesRef $r6;
        org.apache.lucene.index.Fields $r1;
        org.apache.lucene.index.Term r2;
        long $l0;
        org.apache.lucene.index.TermsEnum $r5;
        java.lang.String $r3;
        org.apache.lucene.index.AtomicReader r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.index.AtomicReader;

        r2 := @parameter0: org.apache.lucene.index.Term;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields fields()>();

        if $r1 != null goto label1;

        return 0L;

     label1:
        $r3 = virtualinvoke r2.<org.apache.lucene.index.Term: java.lang.String field()>();

        $r4 = virtualinvoke $r1.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>($r3);

        if $r4 != null goto label2;

        return 0L;

     label2:
        $r5 = virtualinvoke $r4.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        $r6 = virtualinvoke r2.<org.apache.lucene.index.Term: org.apache.lucene.util.BytesRef bytes()>();

        $z0 = virtualinvoke $r5.<org.apache.lucene.index.TermsEnum: boolean seekExact(org.apache.lucene.util.BytesRef,boolean)>($r6, 1);

        if $z0 == 0 goto label3;

        $l0 = virtualinvoke $r5.<org.apache.lucene.index.TermsEnum: long totalTermFreq()>();

        return $l0;

     label3:
        return 0L;
    }

    public final long getSumDocFreq(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.Terms $r2;
        long $l0;
        java.lang.String r1;
        org.apache.lucene.index.AtomicReader r0;

        r0 := @this: org.apache.lucene.index.AtomicReader;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Terms terms(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return 0L;

     label1:
        $l0 = virtualinvoke $r2.<org.apache.lucene.index.Terms: long getSumDocFreq()>();

        return $l0;
    }

    public final int getDocCount(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.Terms $r2;
        int $i0;
        java.lang.String r1;
        org.apache.lucene.index.AtomicReader r0;

        r0 := @this: org.apache.lucene.index.AtomicReader;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Terms terms(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke $r2.<org.apache.lucene.index.Terms: int getDocCount()>();

        return $i0;
    }

    public final long getSumTotalTermFreq(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.Terms $r2;
        long $l0;
        java.lang.String r1;
        org.apache.lucene.index.AtomicReader r0;

        r0 := @this: org.apache.lucene.index.AtomicReader;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Terms terms(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return 0L;

     label1:
        $l0 = virtualinvoke $r2.<org.apache.lucene.index.Terms: long getSumTotalTermFreq()>();

        return $l0;
    }

    public final org.apache.lucene.index.Terms terms(java.lang.String) throws java.io.IOException
    {
        org.apache.lucene.index.Terms $r3;
        org.apache.lucene.index.Fields $r1;
        java.lang.String r2;
        org.apache.lucene.index.AtomicReader r0;

        r0 := @this: org.apache.lucene.index.AtomicReader;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields fields()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r1.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>(r2);

        return $r3;
    }

    public final org.apache.lucene.index.DocsEnum termDocsEnum(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.Fields $r1;
        org.apache.lucene.index.Term r2;
        java.lang.AssertionError $r10, $r12;
        org.apache.lucene.index.TermsEnum $r5;
        java.lang.String $r3, $r11;
        org.apache.lucene.util.Bits $r7;
        boolean $z0, $z1, $z2;
        org.apache.lucene.index.Terms $r4;
        org.apache.lucene.util.BytesRef $r6, $r9;
        org.apache.lucene.index.DocsEnum $r8;
        org.apache.lucene.index.AtomicReader r0;

        r0 := @this: org.apache.lucene.index.AtomicReader;

        r2 := @parameter0: org.apache.lucene.index.Term;

        $z0 = <org.apache.lucene.index.AtomicReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r11 = virtualinvoke r2.<org.apache.lucene.index.Term: java.lang.String field()>();

        if $r11 != null goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $z1 = <org.apache.lucene.index.AtomicReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r9 = virtualinvoke r2.<org.apache.lucene.index.Term: org.apache.lucene.util.BytesRef bytes()>();

        if $r9 != null goto label2;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label2:
        $r1 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields fields()>();

        if $r1 == null goto label3;

        $r3 = virtualinvoke r2.<org.apache.lucene.index.Term: java.lang.String field()>();

        $r4 = virtualinvoke $r1.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>($r3);

        if $r4 == null goto label3;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        $r6 = virtualinvoke r2.<org.apache.lucene.index.Term: org.apache.lucene.util.BytesRef bytes()>();

        $z2 = virtualinvoke $r5.<org.apache.lucene.index.TermsEnum: boolean seekExact(org.apache.lucene.util.BytesRef,boolean)>($r6, 1);

        if $z2 == 0 goto label3;

        $r7 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.util.Bits getLiveDocs()>();

        $r8 = virtualinvoke $r5.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.DocsEnum docs(org.apache.lucene.util.Bits,org.apache.lucene.index.DocsEnum)>($r7, null);

        return $r8;

     label3:
        return null;
    }

    public final org.apache.lucene.index.DocsAndPositionsEnum termPositionsEnum(org.apache.lucene.index.Term) throws java.io.IOException
    {
        org.apache.lucene.index.Fields $r1;
        org.apache.lucene.index.Term r2;
        java.lang.AssertionError $r10, $r12;
        org.apache.lucene.index.DocsAndPositionsEnum $r8;
        org.apache.lucene.index.TermsEnum $r5;
        java.lang.String $r3, $r11;
        org.apache.lucene.util.Bits $r7;
        boolean $z0, $z1, $z2;
        org.apache.lucene.index.Terms $r4;
        org.apache.lucene.util.BytesRef $r6, $r9;
        org.apache.lucene.index.AtomicReader r0;

        r0 := @this: org.apache.lucene.index.AtomicReader;

        r2 := @parameter0: org.apache.lucene.index.Term;

        $z0 = <org.apache.lucene.index.AtomicReader: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r11 = virtualinvoke r2.<org.apache.lucene.index.Term: java.lang.String field()>();

        if $r11 != null goto label1;

        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label1:
        $z1 = <org.apache.lucene.index.AtomicReader: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r9 = virtualinvoke r2.<org.apache.lucene.index.Term: org.apache.lucene.util.BytesRef bytes()>();

        if $r9 != null goto label2;

        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;

     label2:
        $r1 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.Fields fields()>();

        if $r1 == null goto label3;

        $r3 = virtualinvoke r2.<org.apache.lucene.index.Term: java.lang.String field()>();

        $r4 = virtualinvoke $r1.<org.apache.lucene.index.Fields: org.apache.lucene.index.Terms terms(java.lang.String)>($r3);

        if $r4 == null goto label3;

        $r5 = virtualinvoke $r4.<org.apache.lucene.index.Terms: org.apache.lucene.index.TermsEnum iterator(org.apache.lucene.index.TermsEnum)>(null);

        $r6 = virtualinvoke r2.<org.apache.lucene.index.Term: org.apache.lucene.util.BytesRef bytes()>();

        $z2 = virtualinvoke $r5.<org.apache.lucene.index.TermsEnum: boolean seekExact(org.apache.lucene.util.BytesRef,boolean)>($r6, 1);

        if $z2 == 0 goto label3;

        $r7 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.util.Bits getLiveDocs()>();

        $r8 = virtualinvoke $r5.<org.apache.lucene.index.TermsEnum: org.apache.lucene.index.DocsAndPositionsEnum docsAndPositions(org.apache.lucene.util.Bits,org.apache.lucene.index.DocsAndPositionsEnum)>($r7, null);

        return $r8;

     label3:
        return null;
    }

    public abstract org.apache.lucene.index.NumericDocValues getNumericDocValues(java.lang.String) throws java.io.IOException;

    public abstract org.apache.lucene.index.BinaryDocValues getBinaryDocValues(java.lang.String) throws java.io.IOException;

    public abstract org.apache.lucene.index.SortedDocValues getSortedDocValues(java.lang.String) throws java.io.IOException;

    public abstract org.apache.lucene.index.SortedSetDocValues getSortedSetDocValues(java.lang.String) throws java.io.IOException;

    public abstract org.apache.lucene.index.NumericDocValues getNormValues(java.lang.String) throws java.io.IOException;

    public abstract org.apache.lucene.index.FieldInfos getFieldInfos();

    public abstract org.apache.lucene.util.Bits getLiveDocs();

    public volatile org.apache.lucene.index.IndexReaderContext getContext()
    {
        org.apache.lucene.index.AtomicReader r0;
        org.apache.lucene.index.AtomicReaderContext $r1;

        r0 := @this: org.apache.lucene.index.AtomicReader;

        $r1 = virtualinvoke r0.<org.apache.lucene.index.AtomicReader: org.apache.lucene.index.AtomicReaderContext getContext()>();

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/index/AtomicReader;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.index.AtomicReader: boolean $assertionsDisabled> = $z1;

        return;
    }
}
