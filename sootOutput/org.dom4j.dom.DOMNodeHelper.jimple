public class org.dom4j.dom.DOMNodeHelper extends java.lang.Object
{
    public static final org.w3c.dom.NodeList EMPTY_NODE_LIST;

    protected void <init>()
    {
        org.dom4j.dom.DOMNodeHelper r0;

        r0 := @this: org.dom4j.dom.DOMNodeHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean supports(org.dom4j.Node, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.dom4j.Node r0;

        r0 := @parameter0: org.dom4j.Node;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        return 0;
    }

    public static java.lang.String getNamespaceURI(org.dom4j.Node)
    {
        org.dom4j.Node r0;

        r0 := @parameter0: org.dom4j.Node;

        return null;
    }

    public static java.lang.String getPrefix(org.dom4j.Node)
    {
        org.dom4j.Node r0;

        r0 := @parameter0: org.dom4j.Node;

        return null;
    }

    public static java.lang.String getLocalName(org.dom4j.Node)
    {
        org.dom4j.Node r0;

        r0 := @parameter0: org.dom4j.Node;

        return null;
    }

    public static void setPrefix(org.dom4j.Node, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.String r1;
        org.dom4j.Node r0;

        r0 := @parameter0: org.dom4j.Node;

        r1 := @parameter1: java.lang.String;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return;
    }

    public static java.lang.String getNodeValue(org.dom4j.Node) throws org.w3c.dom.DOMException
    {
        java.lang.String $r1;
        org.dom4j.Node r0;

        r0 := @parameter0: org.dom4j.Node;

        $r1 = interfaceinvoke r0.<org.dom4j.Node: java.lang.String getText()>();

        return $r1;
    }

    public static void setNodeValue(org.dom4j.Node, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.String r1;
        org.dom4j.Node r0;

        r0 := @parameter0: org.dom4j.Node;

        r1 := @parameter1: java.lang.String;

        interfaceinvoke r0.<org.dom4j.Node: void setText(java.lang.String)>(r1);

        return;
    }

    public static org.w3c.dom.Node getParentNode(org.dom4j.Node)
    {
        org.dom4j.Element $r1;
        org.dom4j.Node r0;
        org.w3c.dom.Node $r2;

        r0 := @parameter0: org.dom4j.Node;

        $r1 = interfaceinvoke r0.<org.dom4j.Node: org.dom4j.Element getParent()>();

        $r2 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node asDOMNode(org.dom4j.Node)>($r1);

        return $r2;
    }

    public static org.w3c.dom.NodeList getChildNodes(org.dom4j.Node)
    {
        org.w3c.dom.NodeList $r0;
        org.dom4j.Node r1;

        r1 := @parameter0: org.dom4j.Node;

        $r0 = <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.NodeList EMPTY_NODE_LIST>;

        return $r0;
    }

    public static org.w3c.dom.Node getFirstChild(org.dom4j.Node)
    {
        org.dom4j.Node r0;

        r0 := @parameter0: org.dom4j.Node;

        return null;
    }

    public static org.w3c.dom.Node getLastChild(org.dom4j.Node)
    {
        org.dom4j.Node r0;

        r0 := @parameter0: org.dom4j.Node;

        return null;
    }

    public static org.w3c.dom.Node getPreviousSibling(org.dom4j.Node)
    {
        org.dom4j.Node r0, $r2;
        org.w3c.dom.Node $r3;
        int $i0, $i1;
        org.dom4j.Element $r1;

        r0 := @parameter0: org.dom4j.Node;

        $r1 = interfaceinvoke r0.<org.dom4j.Node: org.dom4j.Element getParent()>();

        if $r1 == null goto label1;

        $i0 = interfaceinvoke $r1.<org.dom4j.Element: int indexOf(org.dom4j.Node)>(r0);

        if $i0 <= 0 goto label1;

        $i1 = $i0 - 1;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Node node(int)>($i1);

        $r3 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node asDOMNode(org.dom4j.Node)>($r2);

        return $r3;

     label1:
        return null;
    }

    public static org.w3c.dom.Node getNextSibling(org.dom4j.Node)
    {
        org.dom4j.Node r0, $r2;
        org.w3c.dom.Node $r3;
        int $i0, $i1, i2;
        org.dom4j.Element $r1;

        r0 := @parameter0: org.dom4j.Node;

        $r1 = interfaceinvoke r0.<org.dom4j.Node: org.dom4j.Element getParent()>();

        if $r1 == null goto label1;

        $i0 = interfaceinvoke $r1.<org.dom4j.Element: int indexOf(org.dom4j.Node)>(r0);

        if $i0 < 0 goto label1;

        i2 = $i0 + 1;

        $i1 = interfaceinvoke $r1.<org.dom4j.Element: int nodeCount()>();

        if i2 >= $i1 goto label1;

        $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Node node(int)>(i2);

        $r3 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node asDOMNode(org.dom4j.Node)>($r2);

        return $r3;

     label1:
        return null;
    }

    public static org.w3c.dom.NamedNodeMap getAttributes(org.dom4j.Node)
    {
        org.dom4j.Node r0;

        r0 := @parameter0: org.dom4j.Node;

        return null;
    }

    public static org.w3c.dom.Document getOwnerDocument(org.dom4j.Node)
    {
        org.dom4j.Document $r1;
        org.dom4j.Node r0;
        org.w3c.dom.Document $r2;

        r0 := @parameter0: org.dom4j.Node;

        $r1 = interfaceinvoke r0.<org.dom4j.Node: org.dom4j.Document getDocument()>();

        $r2 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Document asDOMDocument(org.dom4j.Document)>($r1);

        return $r2;
    }

    public static org.w3c.dom.Node insertBefore(org.dom4j.Node, org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.Node r0, $r10;
        org.dom4j.Branch r6;
        java.util.List $r7;
        java.lang.StringBuffer $r2, $r3, $r4;
        org.w3c.dom.DOMException $r1;
        org.w3c.dom.Node r8, r9;
        int $i0;
        java.lang.String $r5;
        boolean $z0;

        r0 := @parameter0: org.dom4j.Node;

        r9 := @parameter1: org.w3c.dom.Node;

        r8 := @parameter2: org.w3c.dom.Node;

        $z0 = r0 instanceof org.dom4j.Branch;

        if $z0 == 0 goto label3;

        r6 = (org.dom4j.Branch) r0;

        $r7 = interfaceinvoke r6.<org.dom4j.Branch: java.util.List content()>();

        $i0 = interfaceinvoke $r7.<java.util.List: int indexOf(java.lang.Object)>(r8);

        if $i0 >= 0 goto label1;

        $r10 = (org.dom4j.Node) r9;

        interfaceinvoke r6.<org.dom4j.Branch: void add(org.dom4j.Node)>($r10);

        goto label2;

     label1:
        interfaceinvoke $r7.<java.util.List: void add(int,java.lang.Object)>($i0, r9);

     label2:
        return r9;

     label3:
        $r1 = new org.w3c.dom.DOMException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Children not allowed for this node: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, $r5);

        throw $r1;
    }

    public static org.w3c.dom.Node replaceChild(org.dom4j.Node, org.w3c.dom.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.Node r0;
        java.lang.StringBuffer $r2, $r3, $r4, $r11, $r12, $r13;
        org.w3c.dom.DOMException $r1, $r10;
        org.w3c.dom.Node r8, r9;
        int $i0;
        java.lang.String $r5, $r14;
        boolean $z0;
        org.dom4j.Branch r6;
        java.util.List $r7;

        r0 := @parameter0: org.dom4j.Node;

        r9 := @parameter1: org.w3c.dom.Node;

        r8 := @parameter2: org.w3c.dom.Node;

        $z0 = r0 instanceof org.dom4j.Branch;

        if $z0 == 0 goto label2;

        r6 = (org.dom4j.Branch) r0;

        $r7 = interfaceinvoke r6.<org.dom4j.Branch: java.util.List content()>();

        $i0 = interfaceinvoke $r7.<java.util.List: int indexOf(java.lang.Object)>(r8);

        if $i0 >= 0 goto label1;

        $r10 = new org.w3c.dom.DOMException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Tried to replace a non existing child for node: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(8, $r14);

        throw $r10;

     label1:
        interfaceinvoke $r7.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i0, r9);

        return r8;

     label2:
        $r1 = new org.w3c.dom.DOMException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Children not allowed for this node: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, $r5);

        throw $r1;
    }

    public static org.w3c.dom.Node removeChild(org.dom4j.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.Node r0, $r8;
        org.dom4j.Branch r6;
        java.lang.StringBuffer $r2, $r3, $r4;
        org.w3c.dom.DOMException $r1;
        org.w3c.dom.Node r7;
        java.lang.String $r5;
        boolean $z0;

        r0 := @parameter0: org.dom4j.Node;

        r7 := @parameter1: org.w3c.dom.Node;

        $z0 = r0 instanceof org.dom4j.Branch;

        if $z0 == 0 goto label1;

        r6 = (org.dom4j.Branch) r0;

        $r8 = (org.dom4j.Node) r7;

        interfaceinvoke r6.<org.dom4j.Branch: boolean remove(org.dom4j.Node)>($r8);

        return r7;

     label1:
        $r1 = new org.w3c.dom.DOMException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Children not allowed for this node: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, $r5);

        throw $r1;
    }

    public static org.w3c.dom.Node appendChild(org.dom4j.Node, org.w3c.dom.Node) throws org.w3c.dom.DOMException
    {
        org.dom4j.Node r0, $r9;
        org.dom4j.Branch r6;
        java.lang.StringBuffer $r2, $r3, $r4;
        org.w3c.dom.DOMException $r1;
        org.w3c.dom.Node r7, $r8;
        java.lang.String $r5;
        boolean $z0;

        r0 := @parameter0: org.dom4j.Node;

        r7 := @parameter1: org.w3c.dom.Node;

        $z0 = r0 instanceof org.dom4j.Branch;

        if $z0 == 0 goto label2;

        r6 = (org.dom4j.Branch) r0;

        $r8 = interfaceinvoke r7.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        if $r8 == null goto label1;

        interfaceinvoke $r8.<org.w3c.dom.Node: org.w3c.dom.Node removeChild(org.w3c.dom.Node)>(r7);

     label1:
        $r9 = (org.dom4j.Node) r7;

        interfaceinvoke r6.<org.dom4j.Branch: void add(org.dom4j.Node)>($r9);

        return r7;

     label2:
        $r1 = new org.w3c.dom.DOMException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Children not allowed for this node: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(3, $r5);

        throw $r1;
    }

    public static boolean hasChildNodes(org.dom4j.Node)
    {
        org.dom4j.Node r0;

        r0 := @parameter0: org.dom4j.Node;

        return 0;
    }

    public static org.w3c.dom.Node cloneNode(org.dom4j.Node, boolean)
    {
        org.dom4j.Node r0, $r2;
        org.w3c.dom.Node $r3;
        java.lang.Object $r1;
        boolean z0;

        r0 := @parameter0: org.dom4j.Node;

        z0 := @parameter1: boolean;

        $r1 = interfaceinvoke r0.<org.dom4j.Node: java.lang.Object clone()>();

        $r2 = (org.dom4j.Node) $r1;

        $r3 = staticinvoke <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.Node asDOMNode(org.dom4j.Node)>($r2);

        return $r3;
    }

    public static void normalize(org.dom4j.Node)
    {
        org.dom4j.Node r0;

        r0 := @parameter0: org.dom4j.Node;

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return;
    }

    public static boolean isSupported(org.dom4j.Node, java.lang.String, java.lang.String)
    {
        java.lang.String r1, r2;
        org.dom4j.Node r0;

        r0 := @parameter0: org.dom4j.Node;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        return 0;
    }

    public static boolean hasAttributes(org.dom4j.Node)
    {
        org.dom4j.Node r0;
        int $i0;
        org.dom4j.Element $r1;
        boolean $z0, $z1;

        r0 := @parameter0: org.dom4j.Node;

        if r0 == null goto label3;

        $z0 = r0 instanceof org.dom4j.Element;

        if $z0 == 0 goto label3;

        $r1 = (org.dom4j.Element) r0;

        $i0 = interfaceinvoke $r1.<org.dom4j.Element: int attributeCount()>();

        if $i0 <= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;

     label3:
        return 0;
    }

    public static java.lang.String getData(org.dom4j.CharacterData) throws org.w3c.dom.DOMException
    {
        java.lang.String $r1;
        org.dom4j.CharacterData r0;

        r0 := @parameter0: org.dom4j.CharacterData;

        $r1 = interfaceinvoke r0.<org.dom4j.CharacterData: java.lang.String getText()>();

        return $r1;
    }

    public static void setData(org.dom4j.CharacterData, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.String r1;
        org.dom4j.CharacterData r0;

        r0 := @parameter0: org.dom4j.CharacterData;

        r1 := @parameter1: java.lang.String;

        interfaceinvoke r0.<org.dom4j.CharacterData: void setText(java.lang.String)>(r1);

        return;
    }

    public static int getLength(org.dom4j.CharacterData)
    {
        int $i0;
        java.lang.String $r1;
        org.dom4j.CharacterData r0;

        r0 := @parameter0: org.dom4j.CharacterData;

        $r1 = interfaceinvoke r0.<org.dom4j.CharacterData: java.lang.String getText()>();

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public static java.lang.String substringData(org.dom4j.CharacterData, int, int) throws org.w3c.dom.DOMException
    {
        java.lang.StringBuffer $r3, $r4, $r5, $r10, $r11, $r12;
        org.w3c.dom.DOMException $r2, $r9;
        int i0, i1, $i2, $i3, $i4;
        java.lang.String $r1, $r6, $r7, $r8, $r13;
        org.dom4j.CharacterData r0;

        r0 := @parameter0: org.dom4j.CharacterData;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 >= 0 goto label1;

        $r9 = new org.w3c.dom.DOMException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal value for count: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r13);

        throw $r9;

     label1:
        $r1 = interfaceinvoke r0.<org.dom4j.CharacterData: java.lang.String getText()>();

        if $r1 == null goto label2;

        $i4 = virtualinvoke $r1.<java.lang.String: int length()>();

        goto label3;

     label2:
        $i4 = 0;

     label3:
        if i1 < 0 goto label4;

        if i1 < $i4 goto label5;

     label4:
        $r2 = new org.w3c.dom.DOMException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No text at offset: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r6);

        throw $r2;

     label5:
        $i2 = i1 + i0;

        if $i2 <= $i4 goto label6;

        $r8 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>(i1);

        return $r8;

     label6:
        $i3 = i1 + i0;

        $r7 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(i1, $i3);

        return $r7;
    }

    public static void appendData(org.dom4j.CharacterData, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.StringBuffer $r2, $r3, $r5, $r8, $r9, $r10;
        org.w3c.dom.DOMException $r7;
        java.lang.String $r1, r4, $r6, $r11;
        org.dom4j.CharacterData r0;
        boolean $z0;

        r0 := @parameter0: org.dom4j.CharacterData;

        r4 := @parameter1: java.lang.String;

        $z0 = interfaceinvoke r0.<org.dom4j.CharacterData: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r7 = new org.w3c.dom.DOMException;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CharacterData node is read only: ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(7, $r11);

        throw $r7;

     label1:
        $r1 = interfaceinvoke r0.<org.dom4j.CharacterData: java.lang.String getText()>();

        if $r1 != null goto label2;

        interfaceinvoke r0.<org.dom4j.CharacterData: void setText(java.lang.String)>($r1);

        goto label3;

     label2:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r1);

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r0.<org.dom4j.CharacterData: void setText(java.lang.String)>($r6);

     label3:
        return;
    }

    public static void insertData(org.dom4j.CharacterData, int, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.StringBuffer $r3, $r4, $r5, $r7, $r11, $r12, $r13;
        org.w3c.dom.DOMException $r2, $r10;
        int $i0, i1;
        java.lang.String $r1, $r6, r8, $r9, $r14;
        org.dom4j.CharacterData r0;
        boolean $z0;

        r0 := @parameter0: org.dom4j.CharacterData;

        i1 := @parameter1: int;

        r8 := @parameter2: java.lang.String;

        $z0 = interfaceinvoke r0.<org.dom4j.CharacterData: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r10 = new org.w3c.dom.DOMException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CharacterData node is read only: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(7, $r14);

        throw $r10;

     label1:
        $r1 = interfaceinvoke r0.<org.dom4j.CharacterData: java.lang.String getText()>();

        if $r1 != null goto label2;

        interfaceinvoke r0.<org.dom4j.CharacterData: void setText(java.lang.String)>(r8);

        goto label5;

     label2:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i1 < 0 goto label3;

        if i1 <= $i0 goto label4;

     label3:
        $r2 = new org.w3c.dom.DOMException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No text at offset: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r6);

        throw $r2;

     label4:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(java.lang.String)>($r1);

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)>(i1, r8);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r0.<org.dom4j.CharacterData: void setText(java.lang.String)>($r9);

     label5:
        return;
    }

    public static void deleteData(org.dom4j.CharacterData, int, int) throws org.w3c.dom.DOMException
    {
        java.lang.StringBuffer $r3, $r4, $r5, $r7, $r10, $r11, $r12, $r15, $r16, $r17;
        org.w3c.dom.DOMException $r2, $r9, $r14;
        int i0, $i1, i2, $i3;
        java.lang.String $r1, $r6, $r8, $r13, $r18;
        org.dom4j.CharacterData r0;
        boolean $z0;

        r0 := @parameter0: org.dom4j.CharacterData;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        $z0 = interfaceinvoke r0.<org.dom4j.CharacterData: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r14 = new org.w3c.dom.DOMException;

        $r15 = new java.lang.StringBuffer;

        specialinvoke $r15.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CharacterData node is read only: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r14.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(7, $r18);

        throw $r14;

     label1:
        if i0 >= 0 goto label2;

        $r9 = new org.w3c.dom.DOMException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal value for count: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r13);

        throw $r9;

     label2:
        $r1 = interfaceinvoke r0.<org.dom4j.CharacterData: java.lang.String getText()>();

        if $r1 == null goto label5;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i2 < 0 goto label3;

        if i2 < $i1 goto label4;

     label3:
        $r2 = new org.w3c.dom.DOMException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No text at offset: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r6);

        throw $r2;

     label4:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(java.lang.String)>($r1);

        $i3 = i2 + i0;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)>(i2, $i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r0.<org.dom4j.CharacterData: void setText(java.lang.String)>($r8);

     label5:
        return;
    }

    public static void replaceData(org.dom4j.CharacterData, int, int, java.lang.String) throws org.w3c.dom.DOMException
    {
        java.lang.StringBuffer $r3, $r4, $r5, $r7, $r11, $r12, $r13, $r16, $r17, $r18;
        org.w3c.dom.DOMException $r2, $r10, $r15;
        int i0, $i1, i2, $i3;
        java.lang.String $r1, $r6, r8, $r9, $r14, $r19;
        org.dom4j.CharacterData r0;
        boolean $z0;

        r0 := @parameter0: org.dom4j.CharacterData;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r8 := @parameter3: java.lang.String;

        $z0 = interfaceinvoke r0.<org.dom4j.CharacterData: boolean isReadOnly()>();

        if $z0 == 0 goto label1;

        $r15 = new org.w3c.dom.DOMException;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CharacterData node is read only: ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(7, $r19);

        throw $r15;

     label1:
        if i0 >= 0 goto label2;

        $r10 = new org.w3c.dom.DOMException;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal value for count: ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r14);

        throw $r10;

     label2:
        $r1 = interfaceinvoke r0.<org.dom4j.CharacterData: java.lang.String getText()>();

        if $r1 == null goto label5;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if i2 < 0 goto label3;

        if i2 < $i1 goto label4;

     label3:
        $r2 = new org.w3c.dom.DOMException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("No text at offset: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i2);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(1, $r6);

        throw $r2;

     label4:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(java.lang.String)>($r1);

        $i3 = i2 + i0;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>(i2, $i3, r8);

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        interfaceinvoke r0.<org.dom4j.CharacterData: void setText(java.lang.String)>($r9);

     label5:
        return;
    }

    public static void appendElementsByTagName(java.util.List, org.dom4j.Branch, java.lang.String)
    {
        org.dom4j.Branch r2;
        org.dom4j.Node $r3;
        java.util.List r5;
        int $i0, i1;
        org.dom4j.Element r4;
        java.lang.String r0, $r1, $r6;
        boolean $z0, $z1, $z2;

        r5 := @parameter0: java.util.List;

        r2 := @parameter1: org.dom4j.Branch;

        r0 := @parameter2: java.lang.String;

        $r1 = "*";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        i1 = 0;

        $i0 = interfaceinvoke r2.<org.dom4j.Branch: int nodeCount()>();

     label1:
        if i1 >= $i0 goto label5;

        $r3 = interfaceinvoke r2.<org.dom4j.Branch: org.dom4j.Node node(int)>(i1);

        $z1 = $r3 instanceof org.dom4j.Element;

        if $z1 == 0 goto label4;

        r4 = (org.dom4j.Element) $r3;

        if $z0 != 0 goto label2;

        $r6 = interfaceinvoke r4.<org.dom4j.Element: java.lang.String getName()>();

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z2 == 0 goto label3;

     label2:
        interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r4);

     label3:
        staticinvoke <org.dom4j.dom.DOMNodeHelper: void appendElementsByTagName(java.util.List,org.dom4j.Branch,java.lang.String)>(r5, r4, r0);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return;
    }

    public static void appendElementsByTagNameNS(java.util.List, org.dom4j.Branch, java.lang.String, java.lang.String)
    {
        org.dom4j.Node $r5;
        int $i0, $i1, $i2, i3;
        java.lang.String r0, $r1, r2, $r3, $r8, $r9, $r10, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.dom4j.Branch r4;
        java.util.List r7;
        org.dom4j.Element r6;

        r7 := @parameter0: java.util.List;

        r4 := @parameter1: org.dom4j.Branch;

        r0 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        $r1 = "*";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        $r3 = "*";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        i3 = 0;

        $i0 = interfaceinvoke r4.<org.dom4j.Branch: int nodeCount()>();

     label1:
        if i3 >= $i0 goto label8;

        $r5 = interfaceinvoke r4.<org.dom4j.Branch: org.dom4j.Node node(int)>(i3);

        $z2 = $r5 instanceof org.dom4j.Element;

        if $z2 == 0 goto label7;

        r6 = (org.dom4j.Element) $r5;

        if $z0 != 0 goto label4;

        if r0 == null goto label2;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 != 0 goto label3;

     label2:
        $r9 = interfaceinvoke r6.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        if $r9 == null goto label4;

        $r10 = interfaceinvoke r6.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        $i1 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i1 == 0 goto label4;

     label3:
        if r0 == null goto label6;

        $r11 = interfaceinvoke r6.<org.dom4j.Element: java.lang.String getNamespaceURI()>();

        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z4 == 0 goto label6;

     label4:
        if $z1 != 0 goto label5;

        $r8 = interfaceinvoke r6.<org.dom4j.Element: java.lang.String getName()>();

        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z3 == 0 goto label6;

     label5:
        interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r6);

     label6:
        staticinvoke <org.dom4j.dom.DOMNodeHelper: void appendElementsByTagNameNS(java.util.List,org.dom4j.Branch,java.lang.String,java.lang.String)>(r7, r6, r0, r2);

     label7:
        i3 = i3 + 1;

        goto label1;

     label8:
        return;
    }

    public static org.w3c.dom.NodeList createNodeList(java.util.List)
    {
        java.util.List r1;
        org.dom4j.dom.DOMNodeHelper$1 $r0;

        r1 := @parameter0: java.util.List;

        $r0 = new org.dom4j.dom.DOMNodeHelper$1;

        specialinvoke $r0.<org.dom4j.dom.DOMNodeHelper$1: void <init>(java.util.List)>(r1);

        return $r0;
    }

    public static org.w3c.dom.Node asDOMNode(org.dom4j.Node)
    {
        java.io.PrintStream $r2;
        org.dom4j.Node r0;
        java.lang.StringBuffer $r1, $r3, $r4, $r5;
        org.w3c.dom.Node $r7;
        java.lang.String $r6;
        boolean $z0;

        r0 := @parameter0: org.dom4j.Node;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.w3c.dom.Node;

        if $z0 == 0 goto label2;

        $r7 = (org.w3c.dom.Node) r0;

        return $r7;

     label2:
        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot convert: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" into a W3C DOM Node");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return null;
    }

    public static org.w3c.dom.Document asDOMDocument(org.dom4j.Document)
    {
        org.dom4j.Document r0;
        org.w3c.dom.Document $r1;
        boolean $z0;

        r0 := @parameter0: org.dom4j.Document;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.w3c.dom.Document;

        if $z0 == 0 goto label2;

        $r1 = (org.w3c.dom.Document) r0;

        return $r1;

     label2:
        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return null;
    }

    public static org.w3c.dom.DocumentType asDOMDocumentType(org.dom4j.DocumentType)
    {
        org.dom4j.DocumentType r0;
        boolean $z0;
        org.w3c.dom.DocumentType $r1;

        r0 := @parameter0: org.dom4j.DocumentType;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.w3c.dom.DocumentType;

        if $z0 == 0 goto label2;

        $r1 = (org.w3c.dom.DocumentType) r0;

        return $r1;

     label2:
        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return null;
    }

    public static org.w3c.dom.Text asDOMText(org.dom4j.CharacterData)
    {
        org.w3c.dom.Text $r1;
        org.dom4j.CharacterData r0;
        boolean $z0;

        r0 := @parameter0: org.dom4j.CharacterData;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.w3c.dom.Text;

        if $z0 == 0 goto label2;

        $r1 = (org.w3c.dom.Text) r0;

        return $r1;

     label2:
        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return null;
    }

    public static org.w3c.dom.Element asDOMElement(org.dom4j.Node)
    {
        org.w3c.dom.Element $r1;
        org.dom4j.Node r0;
        boolean $z0;

        r0 := @parameter0: org.dom4j.Node;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label2;

        $r1 = (org.w3c.dom.Element) r0;

        return $r1;

     label2:
        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return null;
    }

    public static org.w3c.dom.Attr asDOMAttr(org.dom4j.Node)
    {
        org.w3c.dom.Attr $r1;
        org.dom4j.Node r0;
        boolean $z0;

        r0 := @parameter0: org.dom4j.Node;

        if r0 != null goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.w3c.dom.Attr;

        if $z0 == 0 goto label2;

        $r1 = (org.w3c.dom.Attr) r0;

        return $r1;

     label2:
        staticinvoke <org.dom4j.dom.DOMNodeHelper: void notSupported()>();

        return null;
    }

    public static void notSupported()
    {
        org.w3c.dom.DOMException $r0;

        $r0 = new org.w3c.dom.DOMException;

        specialinvoke $r0.<org.w3c.dom.DOMException: void <init>(short,java.lang.String)>(9, "Not supported yet");

        throw $r0;
    }

    static void <clinit>()
    {
        org.dom4j.dom.DOMNodeHelper$EmptyNodeList $r0;

        $r0 = new org.dom4j.dom.DOMNodeHelper$EmptyNodeList;

        specialinvoke $r0.<org.dom4j.dom.DOMNodeHelper$EmptyNodeList: void <init>()>();

        <org.dom4j.dom.DOMNodeHelper: org.w3c.dom.NodeList EMPTY_NODE_LIST> = $r0;

        return;
    }
}
