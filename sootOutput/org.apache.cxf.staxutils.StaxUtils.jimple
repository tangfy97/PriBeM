public final class org.apache.cxf.staxutils.StaxUtils extends java.lang.Object
{
    public static final java.lang.String MAX_CHILD_ELEMENTS;
    public static final java.lang.String MAX_ELEMENT_DEPTH;
    public static final java.lang.String MAX_ATTRIBUTE_COUNT;
    public static final java.lang.String MAX_ATTRIBUTE_SIZE;
    public static final java.lang.String MAX_TEXT_LENGTH;
    public static final java.lang.String MAX_ELEMENT_COUNT;
    public static final java.lang.String MAX_XML_CHARACTERS;
    public static final java.lang.String ALLOW_INSECURE_PARSER;
    private static final java.lang.String INNER_ELEMENT_COUNT_SYSTEM_PROP;
    private static final java.lang.String INNER_ELEMENT_LEVEL_SYSTEM_PROP;
    private static final java.util.logging.Logger LOG;
    private static final java.util.concurrent.BlockingQueue NS_AWARE_INPUT_FACTORY_POOL;
    private static final javax.xml.stream.XMLInputFactory SAFE_INPUT_FACTORY;
    private static final java.util.concurrent.BlockingQueue OUTPUT_FACTORY_POOL;
    private static final javax.xml.stream.XMLOutputFactory SAFE_OUTPUT_FACTORY;
    private static final java.lang.String XML_NS;
    private static final java.lang.String[] DEF_PREFIXES;
    private static int innerElementLevelThreshold;
    private static int innerElementCountThreshold;
    private static int maxAttributeCount;
    private static int maxAttributeSize;
    private static int maxTextLength;
    private static long maxElementCount;
    private static long maxXMLCharacters;
    private static boolean allowInsecureParser;

    private void <init>()
    {
        org.apache.cxf.staxutils.StaxUtils r0;

        r0 := @this: org.apache.cxf.staxutils.StaxUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int getInteger(java.lang.String, int)
    {
        java.lang.Throwable $r2;
        int $i0, i1, i2;
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

     label1:
        $r1 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>(r0);

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r1);

        if $z0 == 0 goto label3;

     label2:
        return i1;

     label3:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1);

        i2 = $i0;

        if $i0 >= 0 goto label4;

        i2 = i1;

     label4:
        return i2;

     label5:
        $r2 := @caughtexception;

        return i1;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private static long getLong(java.lang.String, long)
    {
        java.lang.Throwable $r2;
        long $l0, l2, l3;
        byte $b1;
        int $i4;
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        l2 := @parameter1: long;

     label1:
        $r1 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>(r0);

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r1);

        if $z0 == 0 goto label3;

     label2:
        return l2;

     label3:
        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1);

        l3 = $l0;

        $b1 = $l0 cmp 0L;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label4;

        l3 = l2;

     label4:
        return l3;

     label5:
        $r2 := @caughtexception;

        return l2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    public static void setInnerElementLevelThreshold(int)
    {
        int i0;

        i0 := @parameter0: int;

        <org.apache.cxf.staxutils.StaxUtils: int innerElementLevelThreshold> = i0;

        return;
    }

    public static void setInnerElementCountThreshold(int)
    {
        int i0;

        i0 := @parameter0: int;

        <org.apache.cxf.staxutils.StaxUtils: int innerElementCountThreshold> = i0;

        return;
    }

    public static boolean isWoodstox()
    {
        java.lang.ClassNotFoundException $r0;

     label1:
        staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>("org.codehaus.stax2.XMLStreamReader2", class "Lorg/apache/cxf/staxutils/StaxUtils;");

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        return 0;

     label4:
        return 1;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private static javax.xml.stream.XMLInputFactory getXMLInputFactory()
    {
        javax.xml.stream.XMLInputFactory $r0, $r3, r4;
        java.util.concurrent.BlockingQueue $r1;
        java.lang.Object $r2;

        $r0 = <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLInputFactory SAFE_INPUT_FACTORY>;

        if $r0 == null goto label1;

        $r3 = <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLInputFactory SAFE_INPUT_FACTORY>;

        return $r3;

     label1:
        $r1 = <org.apache.cxf.staxutils.StaxUtils: java.util.concurrent.BlockingQueue NS_AWARE_INPUT_FACTORY_POOL>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: java.lang.Object poll()>();

        r4 = (javax.xml.stream.XMLInputFactory) $r2;

        if r4 != null goto label2;

        r4 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLInputFactory createXMLInputFactory(boolean)>(1);

     label2:
        return r4;
    }

    private static void returnXMLInputFactory(javax.xml.stream.XMLInputFactory)
    {
        java.util.concurrent.BlockingQueue $r2;
        javax.xml.stream.XMLInputFactory r0, $r1;

        r0 := @parameter0: javax.xml.stream.XMLInputFactory;

        $r1 = <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLInputFactory SAFE_INPUT_FACTORY>;

        if $r1 == r0 goto label1;

        $r2 = <org.apache.cxf.staxutils.StaxUtils: java.util.concurrent.BlockingQueue NS_AWARE_INPUT_FACTORY_POOL>;

        interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>(r0);

     label1:
        return;
    }

    private static javax.xml.stream.XMLOutputFactory getXMLOutputFactory()
    {
        javax.xml.stream.XMLOutputFactory $r0, $r3, r4;
        java.util.concurrent.BlockingQueue $r1;
        java.lang.Object $r2;

        $r0 = <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLOutputFactory SAFE_OUTPUT_FACTORY>;

        if $r0 == null goto label1;

        $r3 = <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLOutputFactory SAFE_OUTPUT_FACTORY>;

        return $r3;

     label1:
        $r1 = <org.apache.cxf.staxutils.StaxUtils: java.util.concurrent.BlockingQueue OUTPUT_FACTORY_POOL>;

        $r2 = interfaceinvoke $r1.<java.util.concurrent.BlockingQueue: java.lang.Object poll()>();

        r4 = (javax.xml.stream.XMLOutputFactory) $r2;

        if r4 != null goto label2;

        r4 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>();

     label2:
        return r4;
    }

    private static void returnXMLOutputFactory(javax.xml.stream.XMLOutputFactory)
    {
        javax.xml.stream.XMLOutputFactory r0, $r1;
        java.util.concurrent.BlockingQueue $r2;

        r0 := @parameter0: javax.xml.stream.XMLOutputFactory;

        $r1 = <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLOutputFactory SAFE_OUTPUT_FACTORY>;

        if $r1 == r0 goto label1;

        $r2 = <org.apache.cxf.staxutils.StaxUtils: java.util.concurrent.BlockingQueue OUTPUT_FACTORY_POOL>;

        interfaceinvoke $r2.<java.util.concurrent.BlockingQueue: boolean offer(java.lang.Object)>(r0);

     label1:
        return;
    }

    public static javax.xml.stream.XMLInputFactory createXMLInputFactory(boolean)
    {
        java.lang.Throwable $r5, $r6;
        javax.xml.stream.XMLInputFactory r7;
        java.util.logging.Level $r2;
        java.lang.Boolean $r8, $r9, $r10, $r11;
        java.lang.String $r4;
        boolean $z0, z1, $z2, $z3;
        java.lang.RuntimeException $r0;
        java.util.logging.Logger $r1;
        org.apache.cxf.staxutils.StaxUtils$1 $r12;
        java.lang.Class $r3;

        z1 := @parameter0: boolean;

     label01:
        r7 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>();

     label02:
        goto label04;

     label03:
        $r6 := @caughtexception;

        r7 = null;

     label04:
        if r7 == null goto label05;

        $z3 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean setRestrictionProperties(javax.xml.stream.XMLInputFactory)>(r7);

        if $z3 != 0 goto label10;

     label05:
        r7 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLInputFactory createWoodstoxFactory()>();

     label06:
        goto label08;

     label07:
        $r5 := @caughtexception;

     label08:
        $z0 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean setRestrictionProperties(javax.xml.stream.XMLInputFactory)>(r7);

        if $z0 != 0 goto label10;

        $z2 = <org.apache.cxf.staxutils.StaxUtils: boolean allowInsecureParser>;

        if $z2 == 0 goto label09;

        $r1 = <org.apache.cxf.staxutils.StaxUtils: java.util.logging.Logger LOG>;

        $r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r3 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r1.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r2, "INSECURE_PARSER_DETECTED", $r4);

        goto label10;

     label09:
        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot create a secure XMLInputFactory");

        throw $r0;

     label10:
        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean setProperty(javax.xml.stream.XMLInputFactory,java.lang.String,java.lang.Object)>(r7, "javax.xml.stream.isNamespaceAware", $r8);

        $r9 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean setProperty(javax.xml.stream.XMLInputFactory,java.lang.String,java.lang.Object)>(r7, "javax.xml.stream.supportDTD", $r9);

        $r10 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean setProperty(javax.xml.stream.XMLInputFactory,java.lang.String,java.lang.Object)>(r7, "javax.xml.stream.isReplacingEntityReferences", $r10);

        $r11 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean setProperty(javax.xml.stream.XMLInputFactory,java.lang.String,java.lang.Object)>(r7, "javax.xml.stream.isSupportingExternalEntities", $r11);

        $r12 = new org.apache.cxf.staxutils.StaxUtils$1;

        specialinvoke $r12.<org.apache.cxf.staxutils.StaxUtils$1: void <init>()>();

        virtualinvoke r7.<javax.xml.stream.XMLInputFactory: void setXMLResolver(javax.xml.stream.XMLResolver)>($r12);

        return r7;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label07;
    }

    private static javax.xml.stream.XMLInputFactory createWoodstoxFactory()
    {
        javax.xml.stream.XMLInputFactory $r0;

        $r0 = staticinvoke <org.apache.cxf.staxutils.WoodstoxHelper: javax.xml.stream.XMLInputFactory createInputFactory()>();

        return $r0;
    }

    private static boolean setRestrictionProperties(javax.xml.stream.XMLInputFactory)
    {
        javax.xml.stream.XMLInputFactory r0;
        long $l3, $l5;
        java.lang.Integer $r1, $r2, $r3, $r5, $r7;
        java.lang.Long $r4, $r6;
        int $i0, $i1, $i2, $i4, $i6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        r0 := @parameter0: javax.xml.stream.XMLInputFactory;

        $i0 = <org.apache.cxf.staxutils.StaxUtils: int maxAttributeCount>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $z0 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean setProperty(javax.xml.stream.XMLInputFactory,java.lang.String,java.lang.Object)>(r0, "com.ctc.wstx.maxAttributesPerElement", $r1);

        if $z0 == 0 goto label1;

        $i1 = <org.apache.cxf.staxutils.StaxUtils: int maxAttributeSize>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $z1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean setProperty(javax.xml.stream.XMLInputFactory,java.lang.String,java.lang.Object)>(r0, "com.ctc.wstx.maxAttributeSize", $r2);

        if $z1 == 0 goto label1;

        $i2 = <org.apache.cxf.staxutils.StaxUtils: int innerElementCountThreshold>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $z2 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean setProperty(javax.xml.stream.XMLInputFactory,java.lang.String,java.lang.Object)>(r0, "com.ctc.wstx.maxChildrenPerElement", $r3);

        if $z2 == 0 goto label1;

        $l3 = <org.apache.cxf.staxutils.StaxUtils: long maxElementCount>;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $z3 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean setProperty(javax.xml.stream.XMLInputFactory,java.lang.String,java.lang.Object)>(r0, "com.ctc.wstx.maxElementCount", $r4);

        if $z3 == 0 goto label1;

        $i4 = <org.apache.cxf.staxutils.StaxUtils: int innerElementLevelThreshold>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $z4 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean setProperty(javax.xml.stream.XMLInputFactory,java.lang.String,java.lang.Object)>(r0, "com.ctc.wstx.maxElementDepth", $r5);

        if $z4 == 0 goto label1;

        $l5 = <org.apache.cxf.staxutils.StaxUtils: long maxXMLCharacters>;

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $z5 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean setProperty(javax.xml.stream.XMLInputFactory,java.lang.String,java.lang.Object)>(r0, "com.ctc.wstx.maxCharacters", $r6);

        if $z5 == 0 goto label1;

        $i6 = <org.apache.cxf.staxutils.StaxUtils: int maxTextLength>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $z6 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean setProperty(javax.xml.stream.XMLInputFactory,java.lang.String,java.lang.Object)>(r0, "com.ctc.wstx.maxTextLength", $r7);

        if $z6 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private static boolean setProperty(javax.xml.stream.XMLInputFactory, java.lang.String, java.lang.Object)
    {
        java.lang.Throwable $r3;
        javax.xml.stream.XMLInputFactory r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @parameter0: javax.xml.stream.XMLInputFactory;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

     label1:
        virtualinvoke r0.<javax.xml.stream.XMLInputFactory: void setProperty(java.lang.String,java.lang.Object)>(r1, r2);

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer)
    {
        javax.xml.stream.XMLOutputFactory $r0;
        java.lang.Throwable $r3;
        javax.xml.stream.XMLStreamException $r4;
        java.io.Writer r1;
        javax.xml.stream.XMLStreamWriter $r2;
        java.lang.RuntimeException $r5;

        r1 := @parameter0: java.io.Writer;

        $r0 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLOutputFactory getXMLOutputFactory()>();

     label1:
        $r2 = virtualinvoke $r0.<javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer)>(r1);

     label2:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLOutputFactory(javax.xml.stream.XMLOutputFactory)>($r0);

        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cant\' create XMLStreamWriter", $r4);

        throw $r5;

     label4:
        $r3 := @caughtexception;

     label5:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLOutputFactory(javax.xml.stream.XMLOutputFactory)>($r0);

        throw $r3;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public static javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream)
    {
        java.io.OutputStream r0;
        javax.xml.stream.XMLStreamWriter $r1;

        r0 := @parameter0: java.io.OutputStream;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream,java.lang.String)>(r0, null);

        return $r1;
    }

    public static javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream, java.lang.String)
    {
        javax.xml.stream.XMLOutputFactory $r0;
        java.io.OutputStream r1;
        java.lang.Throwable $r3;
        javax.xml.stream.XMLStreamException $r4;
        javax.xml.stream.XMLStreamWriter $r2;
        java.lang.RuntimeException $r5;
        java.lang.String r6;

        r1 := @parameter0: java.io.OutputStream;

        r6 := @parameter1: java.lang.String;

        if r6 != null goto label1;

        r6 = "UTF-8";

     label1:
        $r0 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLOutputFactory getXMLOutputFactory()>();

     label2:
        $r2 = virtualinvoke $r0.<javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream,java.lang.String)>(r1, r6);

     label3:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLOutputFactory(javax.xml.stream.XMLOutputFactory)>($r0);

        return $r2;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cant\' create XMLStreamWriter", $r4);

        throw $r5;

     label5:
        $r3 := @caughtexception;

     label6:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLOutputFactory(javax.xml.stream.XMLOutputFactory)>($r0);

        throw $r3;

        catch javax.xml.stream.XMLStreamException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public static javax.xml.stream.XMLStreamWriter createXMLStreamWriter(javax.xml.transform.Result)
    {
        java.lang.Throwable $r10;
        javax.xml.transform.Result r0;
        org.w3c.dom.Document $r9;
        org.w3c.dom.Node $r3;
        javax.xml.stream.XMLStreamException $r11;
        javax.xml.stream.XMLStreamWriter $r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.RuntimeException $r12;
        javax.xml.stream.XMLOutputFactory $r1;
        org.apache.cxf.staxutils.W3CDOMStreamWriter $r4, $r6, $r8;
        org.w3c.dom.DocumentFragment $r5;
        org.w3c.dom.Element $r7;
        javax.xml.transform.dom.DOMResult r13;

        r0 := @parameter0: javax.xml.transform.Result;

        $z0 = r0 instanceof javax.xml.transform.dom.DOMResult;

        if $z0 == 0 goto label3;

        r13 = (javax.xml.transform.dom.DOMResult) r0;

        $r3 = virtualinvoke r13.<javax.xml.transform.dom.DOMResult: org.w3c.dom.Node getNode()>();

        $z1 = $r3 instanceof org.w3c.dom.Document;

        if $z1 == 0 goto label1;

        $r8 = new org.apache.cxf.staxutils.W3CDOMStreamWriter;

        $r9 = (org.w3c.dom.Document) $r3;

        specialinvoke $r8.<org.apache.cxf.staxutils.W3CDOMStreamWriter: void <init>(org.w3c.dom.Document)>($r9);

        return $r8;

     label1:
        $z2 = $r3 instanceof org.w3c.dom.Element;

        if $z2 == 0 goto label2;

        $r6 = new org.apache.cxf.staxutils.W3CDOMStreamWriter;

        $r7 = (org.w3c.dom.Element) $r3;

        specialinvoke $r6.<org.apache.cxf.staxutils.W3CDOMStreamWriter: void <init>(org.w3c.dom.Element)>($r7);

        return $r6;

     label2:
        $z3 = $r3 instanceof org.w3c.dom.DocumentFragment;

        if $z3 == 0 goto label3;

        $r4 = new org.apache.cxf.staxutils.W3CDOMStreamWriter;

        $r5 = (org.w3c.dom.DocumentFragment) $r3;

        specialinvoke $r4.<org.apache.cxf.staxutils.W3CDOMStreamWriter: void <init>(org.w3c.dom.DocumentFragment)>($r5);

        return $r4;

     label3:
        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLOutputFactory getXMLOutputFactory()>();

     label4:
        $r2 = virtualinvoke $r1.<javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(javax.xml.transform.Result)>(r0);

     label5:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLOutputFactory(javax.xml.stream.XMLOutputFactory)>($r1);

        return $r2;

     label6:
        $r11 := @caughtexception;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cant\' create XMLStreamWriter", $r11);

        throw $r12;

     label7:
        $r10 := @caughtexception;

     label8:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLOutputFactory(javax.xml.stream.XMLOutputFactory)>($r1);

        throw $r10;

        catch javax.xml.stream.XMLStreamException from label4 to label5 with label6;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label6 to label8 with label7;
    }

    public static javax.xml.stream.XMLStreamReader createFilteredReader(javax.xml.stream.XMLStreamReader, javax.xml.stream.StreamFilter)
    {
        java.lang.Throwable $r4;
        javax.xml.stream.XMLStreamReader r1, $r3;
        javax.xml.stream.XMLInputFactory $r0;
        javax.xml.stream.XMLStreamException $r5;
        javax.xml.stream.StreamFilter r2;
        java.lang.RuntimeException $r6;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        r2 := @parameter1: javax.xml.stream.StreamFilter;

        $r0 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLInputFactory getXMLInputFactory()>();

     label1:
        $r3 = virtualinvoke $r0.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createFilteredReader(javax.xml.stream.XMLStreamReader,javax.xml.stream.StreamFilter)>(r1, r2);

     label2:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLInputFactory(javax.xml.stream.XMLInputFactory)>($r0);

        return $r3;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Cant\' create XMLStreamReader", $r5);

        throw $r6;

     label4:
        $r4 := @caughtexception;

     label5:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLInputFactory(javax.xml.stream.XMLInputFactory)>($r0);

        throw $r4;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public static void nextEvent(javax.xml.stream.XMLStreamReader)
    {
        java.lang.RuntimeException $r2;
        javax.xml.stream.XMLStreamReader r0;
        javax.xml.stream.XMLStreamException $r1;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

     label1:
        interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int next()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t parse stream.", $r1);

        throw $r2;

     label4:
        return;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
    }

    public static boolean toNextText(org.apache.cxf.staxutils.DepthXMLStreamReader)
    {
        java.lang.RuntimeException $r2;
        org.apache.cxf.staxutils.DepthXMLStreamReader r0;
        javax.xml.stream.XMLStreamException $r1;
        int $i0, $i1, $i2, $i3, $i4, i5;
        boolean $z0;

        r0 := @parameter0: org.apache.cxf.staxutils.DepthXMLStreamReader;

        $i0 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getEventType()>();

        if $i0 != 4 goto label1;

        return 1;

     label1:
        $i1 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getDepth()>();

        i5 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getEventType()>();

     label2:
        $i2 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getDepth()>();

        if $i2 < $i1 goto label5;

        $z0 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: boolean hasNext()>();

        if $z0 == 0 goto label5;

        if i5 != 4 goto label4;

        $i3 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getDepth()>();

        $i4 = $i1 + 1;

        if $i3 != $i4 goto label4;

     label3:
        return 1;

     label4:
        i5 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int next()>();

        goto label2;

     label5:
        return 0;

     label6:
        $r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t parse stream.", $r1);

        throw $r2;

        catch javax.xml.stream.XMLStreamException from label1 to label3 with label6;
        catch javax.xml.stream.XMLStreamException from label4 to label5 with label6;
    }

    public static boolean toNextTag(javax.xml.stream.XMLStreamReader)
    {
        javax.xml.stream.XMLStreamReader r0;
        javax.xml.stream.XMLStreamException $r1;
        int i0;
        java.lang.RuntimeException $r2;
        boolean $z0;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

     label1:
        i0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getEventType()>();

     label2:
        if i0 == 1 goto label3;

        if i0 == 2 goto label3;

        $z0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z0 == 0 goto label3;

        i0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int next()>();

        goto label2;

     label3:
        goto label5;

     label4:
        $r1 := @caughtexception;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t parse stream.", $r1);

        throw $r2;

     label5:
        return 1;

        catch javax.xml.stream.XMLStreamException from label1 to label3 with label4;
    }

    public static boolean toNextTag(org.apache.cxf.staxutils.DepthXMLStreamReader, javax.xml.namespace.QName)
    {
        java.lang.RuntimeException $r4;
        org.apache.cxf.staxutils.DepthXMLStreamReader r0;
        javax.xml.stream.XMLStreamException $r3;
        int $i0, $i1, $i2, $i3, i4;
        javax.xml.namespace.QName $r1, r2;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.cxf.staxutils.DepthXMLStreamReader;

        r2 := @parameter1: javax.xml.namespace.QName;

     label1:
        $i0 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getDepth()>();

        i4 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getEventType()>();

     label2:
        $i1 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getDepth()>();

        if $i1 < $i0 goto label5;

        $z0 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: boolean hasNext()>();

        if $z0 == 0 goto label5;

        if i4 != 1 goto label4;

        $r1 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: javax.xml.namespace.QName getName()>();

        $z1 = virtualinvoke $r1.<javax.xml.namespace.QName: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label4;

        $i2 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getDepth()>();

        $i3 = $i0 + 1;

        if $i2 != $i3 goto label4;

     label3:
        return 1;

     label4:
        i4 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int next()>();

        goto label2;

     label5:
        return 0;

     label6:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t parse stream.", $r3);

        throw $r4;

        catch javax.xml.stream.XMLStreamException from label1 to label3 with label6;
        catch javax.xml.stream.XMLStreamException from label4 to label5 with label6;
    }

    public static void writeStartElement(javax.xml.stream.XMLStreamWriter, java.lang.String, java.lang.String, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        int $i0, $i1;
        javax.xml.stream.XMLStreamWriter r1;
        java.lang.String r0, r2, r3;

        r1 := @parameter0: javax.xml.stream.XMLStreamWriter;

        r3 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r0 := @parameter3: java.lang.String;

        if r3 != null goto label1;

        r3 = "";

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>(r3, r2, r0);

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i1 <= 0 goto label2;

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>(r3, r0);

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void setPrefix(java.lang.String,java.lang.String)>(r3, r0);

        goto label4;

     label2:
        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeDefaultNamespace(java.lang.String)>(r0);

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void setDefaultNamespace(java.lang.String)>(r0);

        goto label4;

     label3:
        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>(r2);

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeDefaultNamespace(java.lang.String)>("");

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void setDefaultNamespace(java.lang.String)>("");

     label4:
        return;
    }

    public static boolean skipToStartOfElement(javax.xml.stream.XMLStreamReader) throws javax.xml.stream.XMLStreamException
    {
        int i0;
        javax.xml.stream.XMLStreamReader r0;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        i0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getEventType()>();

     label1:
        if i0 == 8 goto label3;

        if i0 != 1 goto label2;

        return 1;

     label2:
        i0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int next()>();

        goto label1;

     label3:
        return 0;
    }

    public static boolean toNextElement(org.apache.cxf.staxutils.DepthXMLStreamReader)
    {
        java.lang.RuntimeException $r3;
        org.apache.cxf.staxutils.DepthXMLStreamReader r0;
        javax.xml.stream.XMLStreamException $r1;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i8;
        boolean $z0;

        r0 := @parameter0: org.apache.cxf.staxutils.DepthXMLStreamReader;

        $i0 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getEventType()>();

        if $i0 != 1 goto label1;

        return 1;

     label1:
        $i1 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getEventType()>();

        if $i1 != 2 goto label2;

        return 0;

     label2:
        i5 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getDepth()>();

        i6 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getEventType()>();

     label3:
        $i2 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getDepth()>();

        if $i2 < i5 goto label7;

        $z0 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: boolean hasNext()>();

        if $z0 == 0 goto label7;

        if i6 != 1 goto label5;

        $i3 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getDepth()>();

        $i4 = i5 + 1;

        if $i3 != $i4 goto label5;

     label4:
        return 1;

     label5:
        if i6 != 2 goto label6;

        $i8 = (int) -1;

        i5 = i5 + $i8;

     label6:
        i6 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int next()>();

        goto label3;

     label7:
        return 0;

     label8:
        $r1 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t parse stream.", $r1);

        throw $r3;

        catch javax.xml.stream.XMLStreamException from label2 to label4 with label8;
        catch javax.xml.stream.XMLStreamException from label5 to label7 with label8;
    }

    public static boolean skipToStartOfElement(org.apache.cxf.staxutils.DepthXMLStreamReader) throws javax.xml.stream.XMLStreamException
    {
        int i0;
        org.apache.cxf.staxutils.DepthXMLStreamReader r0;

        r0 := @parameter0: org.apache.cxf.staxutils.DepthXMLStreamReader;

        i0 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int getEventType()>();

     label1:
        if i0 == 8 goto label3;

        if i0 != 1 goto label2;

        return 1;

     label2:
        i0 = virtualinvoke r0.<org.apache.cxf.staxutils.DepthXMLStreamReader: int next()>();

        goto label1;

     label3:
        return 0;
    }

    public static void copy(javax.xml.transform.Source, java.io.OutputStream) throws javax.xml.stream.XMLStreamException
    {
        java.io.OutputStream r0;
        java.lang.Throwable $r4;
        javax.xml.stream.XMLStreamException $r3, $r5;
        javax.xml.stream.XMLStreamWriter $r1;
        javax.xml.transform.Source r2;

        r2 := @parameter0: javax.xml.transform.Source;

        r0 := @parameter1: java.io.OutputStream;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream)>(r0);

     label01:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.transform.Source,javax.xml.stream.XMLStreamWriter)>(r2, $r1);

     label02:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

     label03:
        goto label05;

     label04:
        $r5 := @caughtexception;

     label05:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void close(javax.xml.stream.XMLStreamWriter)>($r1);

        goto label11;

     label06:
        $r4 := @caughtexception;

     label07:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

     label08:
        goto label10;

     label09:
        $r3 := @caughtexception;

     label10:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void close(javax.xml.stream.XMLStreamWriter)>($r1);

        throw $r4;

     label11:
        return;

        catch javax.xml.stream.XMLStreamException from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch javax.xml.stream.XMLStreamException from label07 to label08 with label09;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public static void copy(javax.xml.transform.Source, javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Throwable $r19, $r20;
        org.apache.cxf.staxutils.StaxSource r21;
        javax.xml.transform.stream.StreamSource r24;
        javax.xml.transform.Source r0;
        org.xml.sax.XMLReader $r6, $r10;
        javax.xml.stream.XMLStreamReader $r15, $r16, $r25;
        javax.xml.stream.XMLStreamException $r18;
        javax.xml.stream.XMLStreamWriter r1;
        java.lang.String $r4, $r13, $r14;
        boolean $z0, $z1, $z2, $z3;
        org.xml.sax.InputSource $r5, $r7, $r12;
        java.io.Reader $r3;
        java.lang.Exception $r17;
        javax.xml.transform.sax.SAXSource $r9, $r11, r23;
        javax.xml.transform.stax.StAXSource r22;
        org.apache.cxf.staxutils.StreamWriterContentHandler $r8;
        java.io.InputStream $r2;

        r0 := @parameter0: javax.xml.transform.Source;

        r1 := @parameter1: javax.xml.stream.XMLStreamWriter;

        $z0 = r0 instanceof org.apache.cxf.staxutils.StaxSource;

        if $z0 == 0 goto label02;

        r21 = (org.apache.cxf.staxutils.StaxSource) r0;

        $r16 = virtualinvoke r21.<org.apache.cxf.staxutils.StaxSource: javax.xml.stream.XMLStreamReader getXMLStreamReader()>();

        if $r16 != null goto label01;

        return;

     label01:
        goto label18;

     label02:
        $z1 = r0 instanceof javax.xml.transform.stax.StAXSource;

        if $z1 == 0 goto label04;

        r22 = (javax.xml.transform.stax.StAXSource) r0;

        $r15 = virtualinvoke r22.<javax.xml.transform.stax.StAXSource: javax.xml.stream.XMLStreamReader getXMLStreamReader()>();

        if $r15 != null goto label03;

        return;

     label03:
        goto label18;

     label04:
        $z2 = r0 instanceof javax.xml.transform.sax.SAXSource;

        if $z2 == 0 goto label17;

        r23 = (javax.xml.transform.sax.SAXSource) r0;

        $r5 = virtualinvoke r23.<javax.xml.transform.sax.SAXSource: org.xml.sax.InputSource getInputSource()>();

        if $r5 == null goto label05;

        $r13 = virtualinvoke $r5.<org.xml.sax.InputSource: java.lang.String getSystemId()>();

        if $r13 != null goto label16;

        $r14 = virtualinvoke $r5.<org.xml.sax.InputSource: java.lang.String getPublicId()>();

        if $r14 != null goto label16;

     label05:
        $r6 = virtualinvoke r23.<javax.xml.transform.sax.SAXSource: org.xml.sax.XMLReader getXMLReader()>();

        if $r6 == null goto label15;

        $r8 = new org.apache.cxf.staxutils.StreamWriterContentHandler;

        specialinvoke $r8.<org.apache.cxf.staxutils.StreamWriterContentHandler: void <init>(javax.xml.stream.XMLStreamWriter)>(r1);

        $r9 = (javax.xml.transform.sax.SAXSource) r0;

        $r10 = virtualinvoke $r9.<javax.xml.transform.sax.SAXSource: org.xml.sax.XMLReader getXMLReader()>();

        interfaceinvoke $r10.<org.xml.sax.XMLReader: void setContentHandler(org.xml.sax.ContentHandler)>($r8);

     label06:
        interfaceinvoke $r10.<org.xml.sax.XMLReader: void setFeature(java.lang.String,boolean)>("http://xml.org/sax/features/namespaces", 1);

     label07:
        goto label09;

     label08:
        $r20 := @caughtexception;

     label09:
        interfaceinvoke $r10.<org.xml.sax.XMLReader: void setProperty(java.lang.String,java.lang.Object)>("http://xml.org/sax/properties/lexical-handler", $r8);

     label10:
        goto label12;

     label11:
        $r19 := @caughtexception;

     label12:
        $r11 = (javax.xml.transform.sax.SAXSource) r0;

        $r12 = virtualinvoke $r11.<javax.xml.transform.sax.SAXSource: org.xml.sax.InputSource getInputSource()>();

        interfaceinvoke $r10.<org.xml.sax.XMLReader: void parse(org.xml.sax.InputSource)>($r12);

     label13:
        return;

     label14:
        $r17 := @caughtexception;

        $r18 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r18.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r17);

        throw $r18;

     label15:
        $r7 = virtualinvoke r23.<javax.xml.transform.sax.SAXSource: org.xml.sax.InputSource getInputSource()>();

        if $r7 != null goto label16;

        return;

     label16:
        goto label18;

     label17:
        $z3 = r0 instanceof javax.xml.transform.stream.StreamSource;

        if $z3 == 0 goto label18;

        r24 = (javax.xml.transform.stream.StreamSource) r0;

        $r2 = virtualinvoke r24.<javax.xml.transform.stream.StreamSource: java.io.InputStream getInputStream()>();

        if $r2 != null goto label18;

        $r3 = virtualinvoke r24.<javax.xml.transform.stream.StreamSource: java.io.Reader getReader()>();

        if $r3 != null goto label18;

        $r4 = virtualinvoke r24.<javax.xml.transform.stream.StreamSource: java.lang.String getSystemId()>();

        if $r4 != null goto label18;

        return;

     label18:
        $r25 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(javax.xml.transform.Source)>(r0);

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.stream.XMLStreamReader,javax.xml.stream.XMLStreamWriter)>($r25, r1);

        interfaceinvoke $r25.<javax.xml.stream.XMLStreamReader: void close()>();

        return;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Exception from label06 to label13 with label14;
    }

    public static org.w3c.dom.Document copy(org.w3c.dom.Document) throws javax.xml.stream.XMLStreamException, javax.xml.parsers.ParserConfigurationException
    {
        org.apache.cxf.staxutils.W3CDOMStreamWriter $r2;
        javax.xml.stream.XMLStreamReader $r1;
        org.w3c.dom.Document r0, $r3;
        java.lang.String $r4;
        java.lang.Exception $r5;

        r0 := @parameter0: org.w3c.dom.Document;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(org.w3c.dom.Document)>(r0);

        $r2 = new org.apache.cxf.staxutils.W3CDOMStreamWriter;

        specialinvoke $r2.<org.apache.cxf.staxutils.W3CDOMStreamWriter: void <init>()>();

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.stream.XMLStreamReader,javax.xml.stream.XMLStreamWriter)>($r1, $r2);

        $r3 = virtualinvoke $r2.<org.apache.cxf.staxutils.W3CDOMStreamWriter: org.w3c.dom.Document getDocument()>();

     label1:
        $r4 = interfaceinvoke r0.<org.w3c.dom.Document: java.lang.String getDocumentURI()>();

        interfaceinvoke $r3.<org.w3c.dom.Document: void setDocumentURI(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return $r3;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void copy(org.w3c.dom.Document, javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamWriter r2;
        javax.xml.stream.XMLStreamReader $r1;
        org.w3c.dom.Document r0;

        r0 := @parameter0: org.w3c.dom.Document;

        r2 := @parameter1: javax.xml.stream.XMLStreamWriter;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(org.w3c.dom.Document)>(r0);

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.stream.XMLStreamReader,javax.xml.stream.XMLStreamWriter)>($r1, r2);

        return;
    }

    public static void copy(org.w3c.dom.Element, javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamWriter r2;
        org.w3c.dom.Element r0;
        javax.xml.stream.XMLStreamReader $r1;

        r0 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: javax.xml.stream.XMLStreamWriter;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(org.w3c.dom.Element)>(r0);

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.stream.XMLStreamReader,javax.xml.stream.XMLStreamWriter)>($r1, r2);

        return;
    }

    public static void copy(javax.xml.stream.XMLStreamReader, java.io.OutputStream) throws javax.xml.stream.XMLStreamException
    {
        java.io.OutputStream r0;
        javax.xml.stream.XMLStreamWriter $r1;
        javax.xml.stream.XMLStreamReader r2;

        r2 := @parameter0: javax.xml.stream.XMLStreamReader;

        r0 := @parameter1: java.io.OutputStream;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream)>(r0);

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.stream.XMLStreamReader,javax.xml.stream.XMLStreamWriter)>(r2, $r1);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void close()>();

        return;
    }

    public static void writeTo(org.w3c.dom.Node, java.io.OutputStream) throws javax.xml.stream.XMLStreamException
    {
        java.io.OutputStream r2;
        javax.xml.transform.dom.DOMSource $r0;
        org.w3c.dom.Node r1;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: java.io.OutputStream;

        $r0 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r0.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r1);

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.transform.Source,java.io.OutputStream)>($r0, r2);

        return;
    }

    public static void writeTo(org.w3c.dom.Node, java.io.OutputStream, int) throws javax.xml.stream.XMLStreamException
    {
        java.io.OutputStream r2;
        java.lang.Throwable $r6;
        javax.xml.transform.dom.DOMSource $r0, $r5;
        org.w3c.dom.Node r1;
        int i0;
        javax.xml.stream.XMLStreamWriter $r4;
        org.apache.cxf.staxutils.PrettyPrintXMLStreamWriter $r3;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: java.io.OutputStream;

        i0 := @parameter2: int;

        if i0 <= 0 goto label6;

        $r3 = new org.apache.cxf.staxutils.PrettyPrintXMLStreamWriter;

        $r4 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream)>(r2);

        specialinvoke $r3.<org.apache.cxf.staxutils.PrettyPrintXMLStreamWriter: void <init>(javax.xml.stream.XMLStreamWriter,int)>($r4, i0);

     label1:
        $r5 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r5.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r1);

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.transform.Source,javax.xml.stream.XMLStreamWriter)>($r5, $r3);

     label2:
        interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void close()>();

        goto label5;

     label3:
        $r6 := @caughtexception;

     label4:
        interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void close()>();

        throw $r6;

     label5:
        goto label7;

     label6:
        $r0 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r0.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r1);

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.transform.Source,java.io.OutputStream)>($r0, r2);

     label7:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void writeTo(org.w3c.dom.Node, java.io.Writer) throws javax.xml.stream.XMLStreamException
    {
        java.io.Writer r1;
        org.w3c.dom.Node r0;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: java.io.Writer;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void writeTo(org.w3c.dom.Node,java.io.Writer,int)>(r0, r1, 0);

        return;
    }

    public static void writeTo(org.w3c.dom.Node, java.io.Writer, int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Throwable $r5;
        javax.xml.transform.dom.DOMSource $r2;
        org.w3c.dom.Node r3;
        java.io.Writer r0;
        int i0;
        javax.xml.stream.XMLStreamWriter $r1, r6;
        org.apache.cxf.staxutils.PrettyPrintXMLStreamWriter $r4;

        r3 := @parameter0: org.w3c.dom.Node;

        r0 := @parameter1: java.io.Writer;

        i0 := @parameter2: int;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer)>(r0);

        r6 = $r1;

        if i0 <= 0 goto label1;

        $r4 = new org.apache.cxf.staxutils.PrettyPrintXMLStreamWriter;

        specialinvoke $r4.<org.apache.cxf.staxutils.PrettyPrintXMLStreamWriter: void <init>(javax.xml.stream.XMLStreamWriter,int)>($r1, i0);

        r6 = $r4;

     label1:
        $r2 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r2.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r3);

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.transform.Source,javax.xml.stream.XMLStreamWriter)>($r2, r6);

     label2:
        interfaceinvoke r6.<javax.xml.stream.XMLStreamWriter: void close()>();

        goto label5;

     label3:
        $r5 := @caughtexception;

     label4:
        interfaceinvoke r6.<javax.xml.stream.XMLStreamWriter: void close()>();

        throw $r5;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static void copy(javax.xml.stream.XMLStreamReader, javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamWriter r1;
        javax.xml.stream.XMLStreamReader r0;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        r1 := @parameter1: javax.xml.stream.XMLStreamWriter;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.stream.XMLStreamReader,javax.xml.stream.XMLStreamWriter,boolean)>(r0, r1, 0);

        return;
    }

    public static void copy(javax.xml.stream.XMLStreamReader, javax.xml.stream.XMLStreamWriter, boolean) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamReader r0;
        int i0, i1, $i3;
        javax.xml.stream.XMLStreamWriter r1;
        java.lang.String $r2, $r3, $r4;
        boolean $z0, z1;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        r1 := @parameter1: javax.xml.stream.XMLStreamWriter;

        z1 := @parameter2: boolean;

        i0 = 0;

        i1 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getEventType()>();

     label1:
        $z0 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z0 == 0 goto label9;

        tableswitch(i1)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label8;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label8;
            case 7: goto label7;
            case 8: goto label7;
            case 9: goto label8;
            case 10: goto label7;
            case 11: goto label8;
            case 12: goto label6;
            case 13: goto label7;
            default: goto label8;
        };

     label2:
        i0 = i0 + 1;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void writeStartElement(javax.xml.stream.XMLStreamReader,javax.xml.stream.XMLStreamWriter)>(r0, r1);

        goto label8;

     label3:
        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        $i3 = (int) -1;

        i0 = i0 + $i3;

        if i0 > 0 goto label8;

        if z1 != 0 goto label8;

        return;

     label4:
        $r4 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        if $r4 == null goto label8;

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r4);

        goto label8;

     label5:
        $r3 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeComment(java.lang.String)>($r3);

        goto label8;

     label6:
        $r2 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeCData(java.lang.String)>($r2);

        goto label8;

     label7:
        goto label8;

     label8:
        i1 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int next()>();

        goto label1;

     label9:
        return;
    }

    private static void writeStartElement(javax.xml.stream.XMLStreamReader, javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamReader r0;
        javax.xml.stream.XMLStreamWriter r4;
        javax.xml.namespace.NamespaceContext $r12, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7, $i8;
        java.lang.String $r1, $r2, $r3, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r15, $r16, $r17, $r18, $r20, $r21, r26, r27, r28, r29, r30;
        java.util.Iterator $r13, $r14, $r23, $r24;
        java.lang.Object $r19, $r25;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        r4 := @parameter1: javax.xml.stream.XMLStreamWriter;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI()>();

        $r2 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getPrefix()>();

        r26 = $r2;

        $r3 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        if $r2 != null goto label01;

        r26 = "";

     label01:
        z7 = 0;

        if $r1 == null goto label05;

        z7 = 1;

        $r22 = interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: javax.xml.namespace.NamespaceContext getNamespaceContext()>();

        $r23 = interfaceinvoke $r22.<javax.xml.namespace.NamespaceContext: java.util.Iterator getPrefixes(java.lang.String)>($r1);

        $r24 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Iterator cast(java.util.Iterator)>($r23);

     label02:
        if $r24 == null goto label05;

        $z5 = interfaceinvoke $r24.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label05;

        $r25 = interfaceinvoke $r24.<java.util.Iterator: java.lang.Object next()>();

        r27 = (java.lang.String) $r25;

        if r27 != null goto label03;

        r27 = "";

     label03:
        $z6 = virtualinvoke r27.<java.lang.String: boolean equals(java.lang.Object)>(r26);

        if $z6 == 0 goto label04;

        z7 = 0;

     label04:
        goto label02;

     label05:
        if $r1 == null goto label07;

        $i4 = virtualinvoke r26.<java.lang.String: int length()>();

        if $i4 != 0 goto label06;

        $z4 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r1);

        if $z4 == 0 goto label06;

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>($r3);

        goto label08;

     label06:
        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>(r26, $r3, $r1);

        goto label08;

     label07:
        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>($r3);

     label08:
        i5 = 0;

     label09:
        $i6 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getNamespaceCount()>();

        if i5 >= $i6 goto label15;

        $r20 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI(int)>(i5);

        r28 = $r20;

        $r21 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespacePrefix(int)>(i5);

        r29 = $r21;

        if $r21 != null goto label10;

        r29 = "";

     label10:
        if $r20 != null goto label11;

        r28 = "";

     label11:
        $i3 = virtualinvoke r29.<java.lang.String: int length()>();

        if $i3 != 0 goto label12;

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeDefaultNamespace(java.lang.String)>(r28);

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void setDefaultNamespace(java.lang.String)>(r28);

        goto label13;

     label12:
        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>(r29, r28);

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void setPrefix(java.lang.String,java.lang.String)>(r29, r28);

     label13:
        $z2 = virtualinvoke r28.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z2 == 0 goto label14;

        $z3 = virtualinvoke r29.<java.lang.String: boolean equals(java.lang.Object)>(r26);

        if $z3 == 0 goto label14;

        z7 = 0;

     label14:
        i5 = i5 + 1;

        goto label09;

     label15:
        if z7 == 0 goto label17;

        $i2 = virtualinvoke r26.<java.lang.String: int length()>();

        if $i2 != 0 goto label16;

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeDefaultNamespace(java.lang.String)>($r1);

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void setDefaultNamespace(java.lang.String)>($r1);

        goto label17;

     label16:
        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>(r26, $r1);

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void setPrefix(java.lang.String,java.lang.String)>(r26, $r1);

     label17:
        i7 = 0;

     label18:
        $i8 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: int getAttributeCount()>();

        if i7 >= $i8 goto label29;

        $r5 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeNamespace(int)>(i7);

        $r6 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributePrefix(int)>(i7);

        if $r5 == null goto label19;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label20;

     label19:
        $r7 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeLocalName(int)>(i7);

        $r8 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>(i7);

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String)>($r7, $r8);

        goto label28;

     label20:
        if $r6 == null goto label21;

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        if $i1 != 0 goto label22;

     label21:
        $r9 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeNamespace(int)>(i7);

        $r10 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeLocalName(int)>(i7);

        $r11 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>(i7);

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String)>($r9, $r10, $r11);

        goto label28;

     label22:
        $r12 = interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: javax.xml.namespace.NamespaceContext getNamespaceContext()>();

        $r13 = interfaceinvoke $r12.<javax.xml.namespace.NamespaceContext: java.util.Iterator getPrefixes(java.lang.String)>($r5);

        $r14 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Iterator cast(java.util.Iterator)>($r13);

        z8 = 1;

     label23:
        if $r14 == null goto label26;

        $z0 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label26;

        $r19 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        r30 = (java.lang.String) $r19;

        if r30 != null goto label24;

        r30 = "";

     label24:
        $z1 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label25;

        z8 = 0;

     label25:
        goto label23;

     label26:
        if z8 == 0 goto label27;

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>($r6, $r5);

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void setPrefix(java.lang.String,java.lang.String)>($r6, $r5);

     label27:
        $r15 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributePrefix(int)>(i7);

        $r16 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeNamespace(int)>(i7);

        $r17 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeLocalName(int)>(i7);

        $r18 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>(i7);

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r15, $r16, $r17, $r18);

     label28:
        i7 = i7 + 1;

        goto label18;

     label29:
        return;
    }

    public static void writeDocument(org.w3c.dom.Document, javax.xml.stream.XMLStreamWriter, boolean) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamWriter r1;
        org.w3c.dom.Document r0;
        boolean z0;

        r0 := @parameter0: org.w3c.dom.Document;

        r1 := @parameter1: javax.xml.stream.XMLStreamWriter;

        z0 := @parameter2: boolean;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void writeDocument(org.w3c.dom.Document,javax.xml.stream.XMLStreamWriter,boolean,boolean)>(r0, r1, 1, z0);

        return;
    }

    public static void writeDocument(org.w3c.dom.Document, javax.xml.stream.XMLStreamWriter, boolean, boolean) throws javax.xml.stream.XMLStreamException
    {
        short $s0;
        org.w3c.dom.Document r0;
        org.w3c.dom.Node r2;
        javax.xml.stream.XMLStreamWriter r1;
        boolean z0, z1;

        r0 := @parameter0: org.w3c.dom.Document;

        r1 := @parameter1: javax.xml.stream.XMLStreamWriter;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        if z0 == 0 goto label1;

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeStartDocument()>();

     label1:
        r2 = interfaceinvoke r0.<org.w3c.dom.Document: org.w3c.dom.Node getFirstChild()>();

     label2:
        if r2 == null goto label5;

        if z0 != 0 goto label3;

        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label4;

     label3:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void writeNode(org.w3c.dom.Node,javax.xml.stream.XMLStreamWriter,boolean)>(r2, r1, z1);

     label4:
        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label2;

     label5:
        if z0 == 0 goto label6;

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeEndDocument()>();

     label6:
        return;
    }

    public static void writeElement(org.w3c.dom.Element, javax.xml.stream.XMLStreamWriter, boolean) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamWriter r1;
        org.w3c.dom.Element r0;
        boolean z0;

        r0 := @parameter0: org.w3c.dom.Element;

        r1 := @parameter1: javax.xml.stream.XMLStreamWriter;

        z0 := @parameter2: boolean;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void writeElement(org.w3c.dom.Element,javax.xml.stream.XMLStreamWriter,boolean,boolean)>(r0, r1, z0, 1);

        return;
    }

    public static void writeElement(org.w3c.dom.Element, javax.xml.stream.XMLStreamWriter, boolean, boolean) throws javax.xml.stream.XMLStreamException
    {
        java.lang.IllegalStateException $r26;
        javax.xml.stream.XMLStreamWriter r4;
        javax.xml.namespace.NamespaceContext $r5, $r15;
        boolean $z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, $z14;
        java.util.List $r30;
        org.w3c.dom.Node r8, r34;
        int $i0, $i1, $i2;
        org.w3c.dom.NamedNodeMap $r29;
        java.lang.String $r1, $r2, $r3, $r6, $r9, $r10, $r11, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, r27, r28, r32, r33;
        java.util.Iterator $r31;
        org.w3c.dom.Element r0;
        java.lang.Object $r7;

        r0 := @parameter0: org.w3c.dom.Element;

        r4 := @parameter1: javax.xml.stream.XMLStreamWriter;

        z2 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r1 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getPrefix()>();

        r27 = $r1;

        $r2 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getNamespaceURI()>();

        $r3 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getLocalName()>();

        r28 = $r3;

        if $r1 != null goto label01;

        r27 = "";

     label01:
        if $r3 != null goto label02;

        $r25 = interfaceinvoke r0.<org.w3c.dom.Element: java.lang.String getNodeName()>();

        r28 = $r25;

        if $r25 != null goto label02;

        $r26 = new java.lang.IllegalStateException;

        specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Element\'s local name cannot be null!");

        throw $r26;

     label02:
        $r5 = interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: javax.xml.namespace.NamespaceContext getNamespaceContext()>();

        $r6 = interfaceinvoke $r5.<javax.xml.namespace.NamespaceContext: java.lang.String getNamespaceURI(java.lang.String)>(r27);

        if $r6 == null goto label03;

        $z11 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z11 != 0 goto label04;

     label03:
        $z12 = 1;

        goto label05;

     label04:
        $z12 = 0;

     label05:
        z13 = $z12;

        if $r2 == null goto label06;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i2 != 0 goto label07;

     label06:
        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>(r28);

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r6);

        if $z0 == 0 goto label08;

        z13 = 0;

        goto label08;

     label07:
        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>(r27, r28, $r2);

     label08:
        $r29 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.NamedNodeMap getAttributes()>();

        $r30 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: java.util.List sortElementAttributes(org.w3c.dom.NamedNodeMap)>($r29);

        $r31 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z14 = interfaceinvoke $r31.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label20;

        $r7 = interfaceinvoke $r31.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.w3c.dom.Node) $r7;

        $r9 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        r32 = $r9;

        $r10 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        r33 = $r10;

        if $r10 != null goto label10;

        r33 = "";

     label10:
        if $r9 != null goto label11;

        r32 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getNodeName()>();

     label11:
        $r11 = "xmlns";

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r33);

        if $z3 == 0 goto label12;

        $r22 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>(r32, $r22);

        $r23 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void setPrefix(java.lang.String,java.lang.String)>(r32, $r23);

        $z9 = virtualinvoke r32.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z9 == 0 goto label19;

        $r24 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z10 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z10 == 0 goto label19;

        z13 = 0;

        goto label19;

     label12:
        $r12 = "xmlns";

        $z4 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r32);

        if $z4 == 0 goto label14;

        $r17 = "";

        $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r33);

        if $z5 == 0 goto label14;

        $r18 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeDefaultNamespace(java.lang.String)>($r18);

        $r19 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void setDefaultNamespace(java.lang.String)>($r19);

        $r20 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z6 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z6 == 0 goto label13;

        z13 = 0;

        goto label19;

     label13:
        $r21 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $z7 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r21);

        if $z7 == 0 goto label19;

        $z8 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r2);

        if $z8 == 0 goto label19;

        z13 = 0;

        goto label19;

     label14:
        $r13 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r14 = interfaceinvoke r8.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        if $r13 == null goto label15;

        $i0 = virtualinvoke $r13.<java.lang.String: int length()>();

        if $i0 != 0 goto label16;

     label15:
        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String)>(r32, $r14);

        goto label19;

     label16:
        $i1 = virtualinvoke r33.<java.lang.String: int length()>();

        if $i1 != 0 goto label17;

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String)>($r13, r32, $r14);

        goto label19;

     label17:
        if z2 == 0 goto label18;

        $r15 = interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: javax.xml.namespace.NamespaceContext getNamespaceContext()>();

        $r16 = interfaceinvoke $r15.<javax.xml.namespace.NamespaceContext: java.lang.String getNamespaceURI(java.lang.String)>(r33);

        if $r16 != null goto label18;

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>(r33, $r13);

     label18:
        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r33, $r13, r32, $r14);

     label19:
        goto label09;

     label20:
        if z13 == 0 goto label22;

        if z2 == 0 goto label22;

        if $r2 != null goto label21;

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>(r27, "");

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void setPrefix(java.lang.String,java.lang.String)>(r27, "");

        goto label22;

     label21:
        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>(r27, $r2);

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void setPrefix(java.lang.String,java.lang.String)>(r27, $r2);

     label22:
        r34 = interfaceinvoke r0.<org.w3c.dom.Element: org.w3c.dom.Node getFirstChild()>();

     label23:
        if r34 == null goto label24;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void writeNode(org.w3c.dom.Node,javax.xml.stream.XMLStreamWriter,boolean)>(r34, r4, z2);

        r34 = interfaceinvoke r34.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label23;

     label24:
        if z1 == 0 goto label25;

        interfaceinvoke r4.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

     label25:
        return;
    }

    private static java.util.List sortElementAttributes(org.w3c.dom.NamedNodeMap)
    {
        java.util.List $r7;
        org.w3c.dom.Node $r2;
        int $i0, $i1, i2;
        org.w3c.dom.NamedNodeMap r0;
        java.lang.String $r3, $r4, $r5, $r6, r8;
        java.util.LinkedList $r1;
        boolean $z0, $z1;

        r0 := @parameter0: org.w3c.dom.NamedNodeMap;

        $i0 = interfaceinvoke r0.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if $i0 != 0 goto label1;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r7;

     label1:
        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        i2 = 0;

     label2:
        $i1 = interfaceinvoke r0.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if i2 >= $i1 goto label7;

        $r2 = interfaceinvoke r0.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i2);

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        r8 = $r3;

        if $r3 != null goto label3;

        r8 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getNodeName()>();

     label3:
        $r4 = "xmlns";

        $r5 = interfaceinvoke $r2.<org.w3c.dom.Node: java.lang.String getPrefix()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label4;

        $r6 = "xmlns";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z1 == 0 goto label5;

     label4:
        interfaceinvoke $r1.<java.util.List: void add(int,java.lang.Object)>(0, $r2);

        goto label6;

     label5:
        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2);

     label6:
        i2 = i2 + 1;

        goto label2;

     label7:
        return $r1;
    }

    public static void writeNode(org.w3c.dom.Node, javax.xml.stream.XMLStreamWriter, boolean) throws javax.xml.stream.XMLStreamException
    {
        org.w3c.dom.Text $r16;
        java.lang.IllegalStateException $r30;
        org.w3c.dom.EntityReference $r12;
        org.w3c.dom.Document $r6;
        org.w3c.dom.CDATASection $r14;
        javax.xml.stream.XMLStreamWriter r1;
        boolean z0;
        org.w3c.dom.Comment $r7;
        org.w3c.dom.DocumentFragment r27;
        java.lang.StringBuilder $r21, $r24, $r29;
        org.w3c.dom.ProcessingInstruction r9;
        short $s0;
        org.w3c.dom.Node r0, r28;
        int $i1;
        java.lang.String $r3, $r5, $r8, $r10, $r11, $r13, $r15, $r17, $r23, $r25;
        java.lang.UnsupportedOperationException $r26;
        org.w3c.dom.DocumentType $r2, $r4;
        org.w3c.dom.Element $r18;
        java.lang.Class $r22;

        r0 := @parameter0: org.w3c.dom.Node;

        r1 := @parameter1: javax.xml.stream.XMLStreamWriter;

        z0 := @parameter2: boolean;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i1 = (int) $s0;

        tableswitch($i1)
        {
            case 1: goto label01;
            case 2: goto label13;
            case 3: goto label02;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label13;
            case 7: goto label06;
            case 8: goto label03;
            case 9: goto label07;
            case 10: goto label10;
            case 11: goto label08;
            default: goto label13;
        };

     label01:
        $r18 = (org.w3c.dom.Element) r0;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void writeElement(org.w3c.dom.Element,javax.xml.stream.XMLStreamWriter,boolean)>($r18, r1, z0);

        goto label14;

     label02:
        $r16 = (org.w3c.dom.Text) r0;

        $r17 = interfaceinvoke $r16.<org.w3c.dom.Text: java.lang.String getNodeValue()>();

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r17);

        goto label14;

     label03:
        $r7 = (org.w3c.dom.Comment) r0;

        $r8 = interfaceinvoke $r7.<org.w3c.dom.Comment: java.lang.String getData()>();

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeComment(java.lang.String)>($r8);

        goto label14;

     label04:
        $r14 = (org.w3c.dom.CDATASection) r0;

        $r15 = interfaceinvoke $r14.<org.w3c.dom.CDATASection: java.lang.String getData()>();

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeCData(java.lang.String)>($r15);

        goto label14;

     label05:
        $r12 = (org.w3c.dom.EntityReference) r0;

        $r13 = interfaceinvoke $r12.<org.w3c.dom.EntityReference: java.lang.String getNodeValue()>();

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeEntityRef(java.lang.String)>($r13);

        goto label14;

     label06:
        r9 = (org.w3c.dom.ProcessingInstruction) r0;

        $r10 = interfaceinvoke r9.<org.w3c.dom.ProcessingInstruction: java.lang.String getTarget()>();

        $r11 = interfaceinvoke r9.<org.w3c.dom.ProcessingInstruction: java.lang.String getData()>();

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeProcessingInstruction(java.lang.String,java.lang.String)>($r10, $r11);

        goto label14;

     label07:
        $r6 = (org.w3c.dom.Document) r0;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void writeDocument(org.w3c.dom.Document,javax.xml.stream.XMLStreamWriter,boolean)>($r6, r1, z0);

        goto label14;

     label08:
        r27 = (org.w3c.dom.DocumentFragment) r0;

        r28 = interfaceinvoke r27.<org.w3c.dom.DocumentFragment: org.w3c.dom.Node getFirstChild()>();

     label09:
        if r28 == null goto label14;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void writeNode(org.w3c.dom.Node,javax.xml.stream.XMLStreamWriter,boolean)>(r28, r1, z0);

        r28 = interfaceinvoke r28.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

        goto label09;

     label10:
        $r2 = (org.w3c.dom.DocumentType) r0;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.DocumentType: java.lang.String getTextContent()>();

        if $r3 == null goto label11;

        $r4 = (org.w3c.dom.DocumentType) r0;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.DocumentType: java.lang.String getTextContent()>();

        interfaceinvoke r1.<javax.xml.stream.XMLStreamWriter: void writeDTD(java.lang.String)>($r5);

     label11:
        goto label14;

     label12:
        $r26 := @caughtexception;

        goto label14;

     label13:
        $r30 = new java.lang.IllegalStateException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found type: ");

        $r22 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r23 = virtualinvoke $r22.<java.lang.Class: java.lang.String getName()>();

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r30;

     label14:
        return;

        catch java.lang.UnsupportedOperationException from label10 to label11 with label12;
    }

    public static org.w3c.dom.Document read(javax.xml.transform.Source) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Throwable $r4;
        javax.xml.stream.XMLStreamReader $r1;
        org.w3c.dom.Document $r2;
        javax.xml.transform.Source r0;
        java.lang.Exception $r3, $r5;

        r0 := @parameter0: javax.xml.transform.Source;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(javax.xml.transform.Source)>(r0);

     label01:
        $r2 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document read(javax.xml.stream.XMLStreamReader)>($r1);

     label02:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: void close()>();

     label03:
        goto label05;

     label04:
        $r5 := @caughtexception;

     label05:
        return $r2;

     label06:
        $r4 := @caughtexception;

     label07:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: void close()>();

     label08:
        goto label10;

     label09:
        $r3 := @caughtexception;

     label10:
        throw $r4;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public static org.w3c.dom.Document read(java.io.InputStream) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Throwable $r4;
        javax.xml.stream.XMLStreamReader $r1;
        org.w3c.dom.Document $r2;
        java.lang.Exception $r3, $r5;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream)>(r0);

     label01:
        $r2 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document read(javax.xml.stream.XMLStreamReader)>($r1);

     label02:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: void close()>();

     label03:
        goto label05;

     label04:
        $r5 := @caughtexception;

     label05:
        return $r2;

     label06:
        $r4 := @caughtexception;

     label07:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: void close()>();

     label08:
        goto label10;

     label09:
        $r3 := @caughtexception;

     label10:
        throw $r4;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public static org.w3c.dom.Document read(java.io.Reader) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Throwable $r4;
        javax.xml.stream.XMLStreamReader $r1;
        org.w3c.dom.Document $r2;
        java.io.Reader r0;
        java.lang.Exception $r3, $r5;

        r0 := @parameter0: java.io.Reader;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)>(r0);

     label01:
        $r2 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document read(javax.xml.stream.XMLStreamReader)>($r1);

     label02:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: void close()>();

     label03:
        goto label05;

     label04:
        $r5 := @caughtexception;

     label05:
        return $r2;

     label06:
        $r4 := @caughtexception;

     label07:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: void close()>();

     label08:
        goto label10;

     label09:
        $r3 := @caughtexception;

     label10:
        throw $r4;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public static org.w3c.dom.Document read(java.io.File) throws javax.xml.stream.XMLStreamException, java.io.IOException
    {
        java.lang.Throwable $r3;
        org.w3c.dom.Document $r2;
        java.io.FileInputStream $r0;
        java.io.File r1;

        r1 := @parameter0: java.io.File;

        $r0 = new java.io.FileInputStream;

        specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>(r1);

     label1:
        $r2 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document read(java.io.InputStream)>($r0);

     label2:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

        return $r2;

     label3:
        $r3 := @caughtexception;

     label4:
        virtualinvoke $r0.<java.io.InputStream: void close()>();

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static org.w3c.dom.Document read(org.xml.sax.InputSource) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Throwable $r4;
        org.xml.sax.InputSource r0;
        javax.xml.stream.XMLStreamReader $r1;
        org.w3c.dom.Document $r2;
        java.lang.Exception $r3, $r5;

        r0 := @parameter0: org.xml.sax.InputSource;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(org.xml.sax.InputSource)>(r0);

     label01:
        $r2 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document read(javax.xml.stream.XMLStreamReader)>($r1);

     label02:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: void close()>();

     label03:
        goto label05;

     label04:
        $r5 := @caughtexception;

     label05:
        return $r2;

     label06:
        $r4 := @caughtexception;

     label07:
        interfaceinvoke $r1.<javax.xml.stream.XMLStreamReader: void close()>();

     label08:
        goto label10;

     label09:
        $r3 := @caughtexception;

     label10:
        throw $r4;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Throwable from label06 to label07 with label06;
    }

    public static org.w3c.dom.Document read(javax.xml.stream.XMLStreamReader) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamReader r0;
        org.w3c.dom.Document $r1;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document read(javax.xml.stream.XMLStreamReader,boolean)>(r0, 0);

        return $r1;
    }

    public static org.w3c.dom.Document read(javax.xml.stream.XMLStreamReader, boolean) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Exception $r7;
        javax.xml.stream.XMLStreamReader r1;
        org.w3c.dom.Document $r0;
        javax.xml.stream.Location $r2, $r5;
        java.lang.String $r3, $r4, $r6;
        boolean z0;

        r1 := @parameter0: javax.xml.stream.XMLStreamReader;

        z0 := @parameter1: boolean;

        $r0 = staticinvoke <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Document createDocument()>();

        $r2 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        $r3 = interfaceinvoke $r2.<javax.xml.stream.Location: java.lang.String getSystemId()>();

        if $r3 == null goto label4;

     label1:
        $r4 = new java.lang.String;

        $r5 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        $r6 = interfaceinvoke $r5.<javax.xml.stream.Location: java.lang.String getSystemId()>();

        specialinvoke $r4.<java.lang.String: void <init>(java.lang.String)>($r6);

        interfaceinvoke $r0.<org.w3c.dom.Document: void setDocumentURI(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

     label4:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void readDocElements(org.w3c.dom.Document,org.w3c.dom.Node,javax.xml.stream.XMLStreamReader,boolean,boolean)>($r0, $r0, r1, 1, z0);

        return $r0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static org.w3c.dom.Document read(javax.xml.parsers.DocumentBuilder, javax.xml.stream.XMLStreamReader, boolean) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Exception $r8;
        javax.xml.stream.XMLStreamReader r2;
        org.w3c.dom.Document r1, $r9;
        javax.xml.parsers.DocumentBuilder r0;
        javax.xml.stream.Location $r3, $r6;
        java.lang.String $r4, $r5, $r7;
        boolean z0;

        r0 := @parameter0: javax.xml.parsers.DocumentBuilder;

        r2 := @parameter1: javax.xml.stream.XMLStreamReader;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        $r9 = staticinvoke <org.apache.cxf.helpers.DOMUtils: org.w3c.dom.Document createDocument()>();

        goto label2;

     label1:
        $r9 = virtualinvoke r0.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document newDocument()>();

     label2:
        r1 = $r9;

        $r3 = interfaceinvoke r2.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        $r4 = interfaceinvoke $r3.<javax.xml.stream.Location: java.lang.String getSystemId()>();

        if $r4 == null goto label6;

     label3:
        $r5 = new java.lang.String;

        $r6 = interfaceinvoke r2.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        $r7 = interfaceinvoke $r6.<javax.xml.stream.Location: java.lang.String getSystemId()>();

        specialinvoke $r5.<java.lang.String: void <init>(java.lang.String)>($r7);

        interfaceinvoke $r9.<org.w3c.dom.Document: void setDocumentURI(java.lang.String)>($r5);

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

     label6:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void readDocElements(org.w3c.dom.Node,javax.xml.stream.XMLStreamReader,boolean)>(r1, r2, z0);

        return r1;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private static org.w3c.dom.Document getDocument(org.w3c.dom.Node)
    {
        org.w3c.dom.Document $r1;
        org.w3c.dom.Node r0;
        boolean $z0;

        r0 := @parameter0: org.w3c.dom.Node;

        $z0 = r0 instanceof org.w3c.dom.Document;

        if $z0 == 0 goto label1;

        $r1 = (org.w3c.dom.Document) r0;

        goto label2;

     label1:
        $r1 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

     label2:
        return $r1;
    }

    private static boolean isDeclared(org.w3c.dom.Element, java.lang.String, java.lang.String)
    {
        org.w3c.dom.Attr r6;
        org.w3c.dom.Element r5;
        org.w3c.dom.Node $r1, $r3;
        int $i0;
        java.lang.String r0, r2, $r4;
        boolean $z0, $z1, $z2, $z3;

        r5 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

     label1:
        if r5 == null goto label8;

        if r0 == null goto label2;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        r6 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", r0);

        goto label3;

     label2:
        r6 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.Attr getAttributeNode(java.lang.String)>("xmlns");

     label3:
        if r6 == null goto label4;

        $r4 = interfaceinvoke r6.<org.w3c.dom.Attr: java.lang.String getNodeValue()>();

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        $r1 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.Node getParentNode()>();

        $z0 = $r1 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke r5.<org.w3c.dom.Element: org.w3c.dom.Node getParentNode()>();

        r5 = (org.w3c.dom.Element) $r3;

        goto label7;

     label5:
        $z1 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r0);

        if $z1 == 0 goto label6;

        $z2 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r2);

        if $z2 == 0 goto label6;

        return 1;

     label6:
        r5 = null;

     label7:
        goto label1;

     label8:
        return 0;
    }

    public static void readDocElements(org.w3c.dom.Node, javax.xml.stream.XMLStreamReader, boolean) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamReader r2;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Node r0;
        boolean z0;

        r0 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: javax.xml.stream.XMLStreamReader;

        z0 := @parameter2: boolean;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document getDocument(org.w3c.dom.Node)>(r0);

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void readDocElements(org.w3c.dom.Document,org.w3c.dom.Node,javax.xml.stream.XMLStreamReader,boolean,boolean)>($r1, r0, r2, z0, 0);

        return;
    }

    public static void readDocElements(org.w3c.dom.Node, javax.xml.stream.XMLStreamReader, boolean, boolean) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamReader r2;
        org.w3c.dom.Document $r1;
        org.w3c.dom.Node r0;
        boolean z0, z1;

        r0 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: javax.xml.stream.XMLStreamReader;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: org.w3c.dom.Document getDocument(org.w3c.dom.Node)>(r0);

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void readDocElements(org.w3c.dom.Document,org.w3c.dom.Node,javax.xml.stream.XMLStreamReader,boolean,boolean,boolean)>($r1, r0, r2, z0, 0, z1);

        return;
    }

    public static void readDocElements(org.w3c.dom.Document, org.w3c.dom.Node, javax.xml.stream.XMLStreamReader, boolean, boolean) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamReader r2;
        org.w3c.dom.Document r0;
        org.w3c.dom.Node r1;
        boolean z0, z1;

        r0 := @parameter0: org.w3c.dom.Document;

        r1 := @parameter1: org.w3c.dom.Node;

        r2 := @parameter2: javax.xml.stream.XMLStreamReader;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void readDocElements(org.w3c.dom.Document,org.w3c.dom.Node,javax.xml.stream.XMLStreamReader,boolean,boolean,boolean)>(r0, r1, r2, z0, z1, 0);

        return;
    }

    public static void readDocElements(org.w3c.dom.Document, org.w3c.dom.Node, javax.xml.stream.XMLStreamReader, boolean, boolean, boolean) throws javax.xml.stream.XMLStreamException
    {
        org.w3c.dom.Text $r12;
        org.w3c.dom.Document r2;
        org.w3c.dom.CDATASection $r4;
        java.lang.StringBuilder $r24, $r25, $r29, $r30, $r39, $r40, $r41, $r47, $r48, $r50, $r60, $r61, $r62, $r64;
        java.lang.String $r3, $r6, $r7, $r9, $r11, $r14, $r15, $r18, $r19, $r20, $r26, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r42, $r43, $r44, $r46, $r49, $r51, r55, $r56, $r58;
        javax.xml.stream.XMLStreamReader r1;
        boolean $z0, $z1, $z2, z3, z4, $z5, z6, $z7, $z8;
        org.w3c.dom.Comment $r10;
        org.w3c.dom.ProcessingInstruction $r8, $r16;
        org.w3c.dom.Attr $r57;
        java.util.Stack $r59;
        org.w3c.dom.Node $r5, $r13, $r21, r53;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, $i12, i13, $i15, $i17;
        org.w3c.dom.Element $r52, r54;
        java.lang.Object $r17;
        org.apache.cxf.staxutils.DepthExceededStaxException $r63, $r65;

        r2 := @parameter0: org.w3c.dom.Document;

        r53 := @parameter1: org.w3c.dom.Node;

        r1 := @parameter2: javax.xml.stream.XMLStreamReader;

        z3 := @parameter3: boolean;

        z6 := @parameter4: boolean;

        z4 := @parameter5: boolean;

        $r59 = new java.util.Stack;

        specialinvoke $r59.<java.util.Stack: void <init>()>();

        i9 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: int getEventType()>();

        i10 = 0;

     label01:
        $z7 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z7 == 0 goto label23;

        tableswitch(i9)
        {
            case 1: goto label02;
            case 2: goto label13;
            case 3: goto label20;
            case 4: goto label17;
            case 5: goto label18;
            case 6: goto label22;
            case 7: goto label22;
            case 8: goto label22;
            case 9: goto label21;
            case 10: goto label16;
            case 11: goto label22;
            case 12: goto label19;
            case 13: goto label15;
            default: goto label22;
        };

     label02:
        i10 = i10 + 1;

        $r18 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPrefix()>();

        $z2 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r18);

        if $z2 != 0 goto label03;

        $r44 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI()>();

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r46 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPrefix()>();

        $r47 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r49 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r49);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        r54 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>($r44, $r51);

        goto label04;

     label03:
        $r19 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI()>();

        $r20 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getLocalName()>();

        r54 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.Element createElementNS(java.lang.String,java.lang.String)>($r19, $r20);

     label04:
        $r21 = interfaceinvoke r53.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r54);

        $r52 = (org.w3c.dom.Element) $r21;

        z6 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean addLocation(org.w3c.dom.Document,org.w3c.dom.Node,javax.xml.stream.XMLStreamReader,boolean)>(r2, $r52, r1, z6);

        i11 = 0;

     label05:
        $i12 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: int getNamespaceCount()>();

        if i11 >= $i12 goto label06;

        $r42 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI(int)>(i11);

        $r43 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespacePrefix(int)>(i11);

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void declare(org.w3c.dom.Element,java.lang.String,java.lang.String)>($r52, $r42, $r43);

        i11 = i11 + 1;

        goto label05;

     label06:
        i13 = 0;

     label07:
        $i0 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: int getAttributeCount()>();

        if i13 >= $i0 goto label09;

        $r36 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeLocalName(int)>(i13);

        r55 = $r36;

        $r37 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributePrefix(int)>(i13);

        if $r37 == null goto label08;

        $i8 = virtualinvoke $r37.<java.lang.String: int length()>();

        if $i8 <= 0 goto label08;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        r55 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $r56 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeNamespace(int)>(i13);

        $r57 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)>($r56, r55);

        $r58 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(int)>(i13);

        interfaceinvoke $r57.<org.w3c.dom.Attr: void setValue(java.lang.String)>($r58);

        interfaceinvoke $r52.<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)>($r57);

        i13 = i13 + 1;

        goto label07;

     label09:
        if z3 == 0 goto label10;

        $r32 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI()>();

        $r33 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPrefix()>();

        $z5 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean isDeclared(org.w3c.dom.Element,java.lang.String,java.lang.String)>($r52, $r32, $r33);

        if $z5 != 0 goto label10;

        $r34 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI()>();

        $r35 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPrefix()>();

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void declare(org.w3c.dom.Element,java.lang.String,java.lang.String)>($r52, $r34, $r35);

     label10:
        virtualinvoke $r59.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r53);

        if z4 == 0 goto label11;

        $i4 = <org.apache.cxf.staxutils.StaxUtils: int innerElementLevelThreshold>;

        $i15 = (int) -1;

        if $i4 == $i15 goto label11;

        $i5 = virtualinvoke $r59.<java.util.Stack: int size()>();

        $i6 = <org.apache.cxf.staxutils.StaxUtils: int innerElementLevelThreshold>;

        if $i5 < $i6 goto label11;

        $r63 = new org.apache.cxf.staxutils.DepthExceededStaxException;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reach the innerElementLevelThreshold:");

        $i7 = <org.apache.cxf.staxutils.StaxUtils: int innerElementLevelThreshold>;

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r63.<org.apache.cxf.staxutils.DepthExceededStaxException: void <init>(java.lang.String)>($r31);

        throw $r63;

     label11:
        if z4 == 0 goto label12;

        $i1 = <org.apache.cxf.staxutils.StaxUtils: int innerElementCountThreshold>;

        $i17 = (int) -1;

        if $i1 == $i17 goto label12;

        $i2 = <org.apache.cxf.staxutils.StaxUtils: int innerElementCountThreshold>;

        if i10 < $i2 goto label12;

        $r65 = new org.apache.cxf.staxutils.DepthExceededStaxException;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reach the innerElementCountThreshold:");

        $i3 = <org.apache.cxf.staxutils.StaxUtils: int innerElementCountThreshold>;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r65.<org.apache.cxf.staxutils.DepthExceededStaxException: void <init>(java.lang.String)>($r26);

        throw $r65;

     label12:
        r53 = $r52;

        goto label22;

     label13:
        $z0 = virtualinvoke $r59.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label14;

        return;

     label14:
        $r17 = virtualinvoke $r59.<java.util.Stack: java.lang.Object pop()>();

        r53 = (org.w3c.dom.Node) $r17;

        $z1 = r53 instanceof org.w3c.dom.Document;

        if $z1 == 0 goto label22;

        return;

     label15:
        goto label22;

     label16:
        goto label22;

     label17:
        if r53 == null goto label22;

        $r11 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r12 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r11);

        $r13 = interfaceinvoke r53.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r12);

        z6 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean addLocation(org.w3c.dom.Document,org.w3c.dom.Node,javax.xml.stream.XMLStreamReader,boolean)>(r2, $r13, r1, z6);

        goto label22;

     label18:
        if r53 == null goto label22;

        $r9 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r10 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.Comment createComment(java.lang.String)>($r9);

        interfaceinvoke r53.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r10);

        goto label22;

     label19:
        $r3 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getText()>();

        $r4 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.CDATASection createCDATASection(java.lang.String)>($r3);

        $r5 = interfaceinvoke r53.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r4);

        z6 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: boolean addLocation(org.w3c.dom.Document,org.w3c.dom.Node,javax.xml.stream.XMLStreamReader,boolean)>(r2, $r5, r1, z6);

        goto label22;

     label20:
        $r14 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPITarget()>();

        $r15 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPIData()>();

        $r16 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>($r14, $r15);

        interfaceinvoke r53.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r16);

        goto label22;

     label21:
        $r6 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPITarget()>();

        $r7 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: java.lang.String getPIData()>();

        $r8 = interfaceinvoke r2.<org.w3c.dom.Document: org.w3c.dom.ProcessingInstruction createProcessingInstruction(java.lang.String,java.lang.String)>($r6, $r7);

        interfaceinvoke r53.<org.w3c.dom.Node: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r8);

        goto label22;

     label22:
        $z8 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: boolean hasNext()>();

        if $z8 == 0 goto label01;

        i9 = interfaceinvoke r1.<javax.xml.stream.XMLStreamReader: int next()>();

        goto label01;

     label23:
        return;
    }

    private static boolean addLocation(org.w3c.dom.Document, org.w3c.dom.Node, javax.xml.stream.XMLStreamReader, boolean)
    {
        java.lang.Throwable $r9;
        org.apache.cxf.staxutils.StaxUtils$LocationUserDataHandler $r7;
        javax.xml.stream.XMLStreamReader r0;
        org.w3c.dom.Document r8;
        org.w3c.dom.Node r6;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r2, r3, $r4, $r10, $r11;
        boolean z0;
        javax.xml.stream.Location $r1;
        org.apache.cxf.staxutils.StaxUtils$2 $r5;

        r8 := @parameter0: org.w3c.dom.Document;

        r6 := @parameter1: org.w3c.dom.Node;

        r0 := @parameter2: javax.xml.stream.XMLStreamReader;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label8;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: javax.xml.stream.Location getLocation()>();

        if $r1 == null goto label8;

        $i0 = interfaceinvoke $r1.<javax.xml.stream.Location: int getColumnNumber()>();

        if $i0 != 0 goto label1;

        $i4 = interfaceinvoke $r1.<javax.xml.stream.Location: int getLineNumber()>();

        if $i4 == 0 goto label8;

     label1:
        $i1 = interfaceinvoke $r1.<javax.xml.stream.Location: int getCharacterOffset()>();

        $i2 = interfaceinvoke $r1.<javax.xml.stream.Location: int getColumnNumber()>();

        $i3 = interfaceinvoke $r1.<javax.xml.stream.Location: int getLineNumber()>();

        $r2 = interfaceinvoke $r1.<javax.xml.stream.Location: java.lang.String getPublicId()>();

        if $r2 != null goto label2;

        $r10 = interfaceinvoke r8.<org.w3c.dom.Document: java.lang.String getDocumentURI()>();

        goto label3;

     label2:
        $r10 = interfaceinvoke $r1.<javax.xml.stream.Location: java.lang.String getPublicId()>();

     label3:
        r3 = $r10;

        $r4 = interfaceinvoke $r1.<javax.xml.stream.Location: java.lang.String getSystemId()>();

        if $r4 != null goto label4;

        $r11 = interfaceinvoke r8.<org.w3c.dom.Document: java.lang.String getDocumentURI()>();

        goto label5;

     label4:
        $r11 = interfaceinvoke $r1.<javax.xml.stream.Location: java.lang.String getSystemId()>();

     label5:
        $r5 = new org.apache.cxf.staxutils.StaxUtils$2;

        specialinvoke $r5.<org.apache.cxf.staxutils.StaxUtils$2: void <init>(int,int,int,java.lang.String,java.lang.String)>($i1, $i2, $i3, r3, $r11);

        $r7 = <org.apache.cxf.staxutils.StaxUtils$LocationUserDataHandler: org.apache.cxf.staxutils.StaxUtils$LocationUserDataHandler INSTANCE>;

        interfaceinvoke r6.<org.w3c.dom.Node: java.lang.Object setUserData(java.lang.String,java.lang.Object,org.w3c.dom.UserDataHandler)>("location", $r5, $r7);

     label6:
        goto label8;

     label7:
        $r9 := @caughtexception;

        return 0;

     label8:
        return z0;

        catch java.lang.Throwable from label1 to label6 with label7;
    }

    private static void declare(org.w3c.dom.Element, java.lang.String, java.lang.String)
    {
        org.w3c.dom.Attr $r8;
        org.w3c.dom.Element r1;
        org.w3c.dom.Document $r7;
        int $i0;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String r0, r2, r6;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("xmlns:");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        r6 = "xmlns";

     label2:
        $r7 = interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.Document getOwnerDocument()>();

        $r8 = interfaceinvoke $r7.<org.w3c.dom.Document: org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", r6);

        interfaceinvoke $r8.<org.w3c.dom.Attr: void setValue(java.lang.String)>(r2);

        interfaceinvoke r1.<org.w3c.dom.Element: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>($r8);

        return;
    }

    public static javax.xml.stream.XMLStreamReader createXMLStreamReader(org.xml.sax.InputSource)
    {
        java.net.URL $r8;
        javax.xml.transform.stream.StreamSource $r9, $r12, $r19;
        javax.xml.stream.XMLStreamReader $r11, $r14, $r18, $r21;
        java.lang.String $r1, $r2, r3, $r4, $r5, $r15, $r17, $r24, $r25;
        org.xml.sax.InputSource r0;
        java.io.Reader $r7, $r13;
        java.lang.IllegalArgumentException $r23;
        java.lang.Exception $r22;
        java.io.InputStream $r6, $r10, $r16, $r20;

        r0 := @parameter0: org.xml.sax.InputSource;

        $r1 = virtualinvoke r0.<org.xml.sax.InputSource: java.lang.String getSystemId()>();

        if $r1 != null goto label1;

        $r24 = null;

        goto label2;

     label1:
        $r24 = new java.lang.String;

        $r2 = virtualinvoke r0.<org.xml.sax.InputSource: java.lang.String getSystemId()>();

        specialinvoke $r24.<java.lang.String: void <init>(java.lang.String)>($r2);

     label2:
        r3 = $r24;

        $r4 = virtualinvoke r0.<org.xml.sax.InputSource: java.lang.String getPublicId()>();

        if $r4 != null goto label3;

        $r25 = null;

        goto label4;

     label3:
        $r25 = new java.lang.String;

        $r5 = virtualinvoke r0.<org.xml.sax.InputSource: java.lang.String getPublicId()>();

        specialinvoke $r25.<java.lang.String: void <init>(java.lang.String)>($r5);

     label4:
        $r6 = virtualinvoke r0.<org.xml.sax.InputSource: java.io.InputStream getByteStream()>();

        if $r6 == null goto label6;

        $r15 = virtualinvoke r0.<org.xml.sax.InputSource: java.lang.String getEncoding()>();

        if $r15 != null goto label5;

        $r19 = new javax.xml.transform.stream.StreamSource;

        $r20 = virtualinvoke r0.<org.xml.sax.InputSource: java.io.InputStream getByteStream()>();

        specialinvoke $r19.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream,java.lang.String)>($r20, r3);

        virtualinvoke $r19.<javax.xml.transform.stream.StreamSource: void setPublicId(java.lang.String)>($r25);

        $r21 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(javax.xml.transform.Source)>($r19);

        return $r21;

     label5:
        $r16 = virtualinvoke r0.<org.xml.sax.InputSource: java.io.InputStream getByteStream()>();

        $r17 = virtualinvoke r0.<org.xml.sax.InputSource: java.lang.String getEncoding()>();

        $r18 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream,java.lang.String)>($r16, $r17);

        return $r18;

     label6:
        $r7 = virtualinvoke r0.<org.xml.sax.InputSource: java.io.Reader getCharacterStream()>();

        if $r7 == null goto label7;

        $r12 = new javax.xml.transform.stream.StreamSource;

        $r13 = virtualinvoke r0.<org.xml.sax.InputSource: java.io.Reader getCharacterStream()>();

        specialinvoke $r12.<javax.xml.transform.stream.StreamSource: void <init>(java.io.Reader,java.lang.String)>($r13, r3);

        virtualinvoke $r12.<javax.xml.transform.stream.StreamSource: void setPublicId(java.lang.String)>($r25);

        $r14 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(javax.xml.transform.Source)>($r12);

        return $r14;

     label7:
        $r8 = new java.net.URL;

        specialinvoke $r8.<java.net.URL: void <init>(java.lang.String)>(r3);

        $r9 = new javax.xml.transform.stream.StreamSource;

        $r10 = virtualinvoke $r8.<java.net.URL: java.io.InputStream openStream()>();

        specialinvoke $r9.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream,java.lang.String)>($r10, r3);

        virtualinvoke $r9.<javax.xml.transform.stream.StreamSource: void setPublicId(java.lang.String)>($r25);

        $r11 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(javax.xml.transform.Source)>($r9);

     label8:
        return $r11;

     label9:
        $r22 := @caughtexception;

        $r23 = new java.lang.IllegalArgumentException;

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("InputSource must have a ByteStream or CharacterStream");

        throw $r23;

        catch java.lang.Exception from label7 to label8 with label9;
    }

    public static javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream, java.lang.String)
    {
        java.lang.Throwable $r3;
        javax.xml.stream.XMLStreamReader $r2;
        javax.xml.stream.XMLInputFactory $r0;
        javax.xml.stream.XMLStreamException $r4;
        java.lang.RuntimeException $r5;
        java.lang.String r6;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        r6 := @parameter1: java.lang.String;

        if r6 != null goto label1;

        r6 = "UTF-8";

     label1:
        $r0 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLInputFactory getXMLInputFactory()>();

     label2:
        $r2 = virtualinvoke $r0.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream,java.lang.String)>(r1, r6);

     label3:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLInputFactory(javax.xml.stream.XMLInputFactory)>($r0);

        return $r2;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t parse stream.", $r4);

        throw $r5;

     label5:
        $r3 := @caughtexception;

     label6:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLInputFactory(javax.xml.stream.XMLInputFactory)>($r0);

        throw $r3;

        catch javax.xml.stream.XMLStreamException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public static javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream)
    {
        java.lang.Throwable $r3;
        javax.xml.stream.XMLStreamReader $r2;
        javax.xml.stream.XMLInputFactory $r0;
        javax.xml.stream.XMLStreamException $r4;
        java.lang.RuntimeException $r5;
        java.io.InputStream r1;

        r1 := @parameter0: java.io.InputStream;

        $r0 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLInputFactory getXMLInputFactory()>();

     label1:
        $r2 = virtualinvoke $r0.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream)>(r1);

     label2:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLInputFactory(javax.xml.stream.XMLInputFactory)>($r0);

        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t parse stream.", $r4);

        throw $r5;

     label4:
        $r3 := @caughtexception;

     label5:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLInputFactory(javax.xml.stream.XMLInputFactory)>($r0);

        throw $r3;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public static javax.xml.stream.XMLStreamReader createXMLStreamReader(java.lang.String, java.io.InputStream)
    {
        java.lang.Throwable $r4;
        javax.xml.stream.XMLStreamReader $r3;
        javax.xml.stream.XMLInputFactory $r0;
        javax.xml.stream.XMLStreamException $r5;
        java.lang.String r1;
        java.lang.RuntimeException $r6;
        java.io.InputStream r2;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.InputStream;

        $r0 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLInputFactory getXMLInputFactory()>();

     label1:
        $r3 = virtualinvoke $r0.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.lang.String,java.io.InputStream)>(r1, r2);

     label2:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLInputFactory(javax.xml.stream.XMLInputFactory)>($r0);

        return $r3;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t parse stream.", $r5);

        throw $r6;

     label4:
        $r4 := @caughtexception;

     label5:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLInputFactory(javax.xml.stream.XMLInputFactory)>($r0);

        throw $r4;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public static javax.xml.stream.XMLStreamReader createXMLStreamReader(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r1;
        org.apache.cxf.staxutils.W3CDOMStreamReader $r0;

        r1 := @parameter0: org.w3c.dom.Element;

        $r0 = new org.apache.cxf.staxutils.W3CDOMStreamReader;

        specialinvoke $r0.<org.apache.cxf.staxutils.W3CDOMStreamReader: void <init>(org.w3c.dom.Element)>(r1);

        return $r0;
    }

    public static javax.xml.stream.XMLStreamReader createXMLStreamReader(org.w3c.dom.Document)
    {
        org.w3c.dom.Element $r2;
        org.apache.cxf.staxutils.W3CDOMStreamReader $r0;
        org.w3c.dom.Document r1;

        r1 := @parameter0: org.w3c.dom.Document;

        $r0 = new org.apache.cxf.staxutils.W3CDOMStreamReader;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        specialinvoke $r0.<org.apache.cxf.staxutils.W3CDOMStreamReader: void <init>(org.w3c.dom.Element)>($r2);

        return $r0;
    }

    public static javax.xml.stream.XMLStreamReader createXMLStreamReader(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element r1;
        java.lang.String r2;
        org.apache.cxf.staxutils.W3CDOMStreamReader $r0;

        r1 := @parameter0: org.w3c.dom.Element;

        r2 := @parameter1: java.lang.String;

        $r0 = new org.apache.cxf.staxutils.W3CDOMStreamReader;

        specialinvoke $r0.<org.apache.cxf.staxutils.W3CDOMStreamReader: void <init>(org.w3c.dom.Element,java.lang.String)>(r1, r2);

        return $r0;
    }

    public static javax.xml.stream.XMLStreamReader createXMLStreamReader(org.w3c.dom.Document, java.lang.String)
    {
        org.w3c.dom.Element $r2;
        org.apache.cxf.staxutils.W3CDOMStreamReader $r0;
        org.w3c.dom.Document r1;
        java.lang.String r3;

        r1 := @parameter0: org.w3c.dom.Document;

        r3 := @parameter1: java.lang.String;

        $r0 = new org.apache.cxf.staxutils.W3CDOMStreamReader;

        $r2 = interfaceinvoke r1.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        specialinvoke $r0.<org.apache.cxf.staxutils.W3CDOMStreamReader: void <init>(org.w3c.dom.Element,java.lang.String)>($r2, r3);

        return $r0;
    }

    public static javax.xml.stream.XMLStreamReader createXMLStreamReader(javax.xml.transform.Source)
    {
        org.apache.cxf.staxutils.W3CDOMStreamReader $r15;
        javax.xml.stream.XMLInputFactory $r1;
        javax.xml.stream.XMLStreamReader $r9, $r11, $r13, r24;
        org.w3c.dom.Document $r17;
        javax.xml.stream.XMLStreamException $r18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.io.Reader $r4;
        java.lang.Throwable $r20;
        javax.xml.transform.dom.DOMSource r22;
        org.apache.cxf.staxutils.StaxSource $r10;
        javax.xml.transform.stream.StreamSource r25;
        javax.xml.transform.Source r0;
        org.w3c.dom.Node $r14;
        java.lang.String $r3, $r5, $r16;
        org.xml.sax.InputSource $r8;
        java.lang.UnsupportedOperationException $r21;
        java.lang.RuntimeException $r19;
        javax.xml.transform.sax.SAXSource $r7;
        org.w3c.dom.Element r23;
        javax.xml.transform.stax.StAXSource $r12;
        java.io.InputStream $r2, $r6;

        r0 := @parameter0: javax.xml.transform.Source;

     label01:
        $z0 = r0 instanceof javax.xml.transform.dom.DOMSource;

        if $z0 == 0 goto label06;

        r22 = (javax.xml.transform.dom.DOMSource) r0;

        $r14 = virtualinvoke r22.<javax.xml.transform.dom.DOMSource: org.w3c.dom.Node getNode()>();

        r23 = null;

        $z5 = $r14 instanceof org.w3c.dom.Document;

        if $z5 == 0 goto label02;

        $r17 = (org.w3c.dom.Document) $r14;

        r23 = interfaceinvoke $r17.<org.w3c.dom.Document: org.w3c.dom.Element getDocumentElement()>();

        goto label03;

     label02:
        $z6 = $r14 instanceof org.w3c.dom.Element;

        if $z6 == 0 goto label03;

        r23 = (org.w3c.dom.Element) $r14;

     label03:
        if null == r23 goto label05;

        $r15 = new org.apache.cxf.staxutils.W3CDOMStreamReader;

        $r16 = interfaceinvoke r0.<javax.xml.transform.Source: java.lang.String getSystemId()>();

        specialinvoke $r15.<org.apache.cxf.staxutils.W3CDOMStreamReader: void <init>(org.w3c.dom.Element,java.lang.String)>(r23, $r16);

     label04:
        return $r15;

     label05:
        goto label12;

     label06:
        $z1 = r0 instanceof javax.xml.transform.stax.StAXSource;

        if $z1 == 0 goto label08;

        $r12 = (javax.xml.transform.stax.StAXSource) r0;

        $r13 = virtualinvoke $r12.<javax.xml.transform.stax.StAXSource: javax.xml.stream.XMLStreamReader getXMLStreamReader()>();

     label07:
        return $r13;

     label08:
        $z2 = r0 instanceof org.apache.cxf.staxutils.StaxSource;

        if $z2 == 0 goto label10;

        $r10 = (org.apache.cxf.staxutils.StaxSource) r0;

        $r11 = virtualinvoke $r10.<org.apache.cxf.staxutils.StaxSource: javax.xml.stream.XMLStreamReader getXMLStreamReader()>();

     label09:
        return $r11;

     label10:
        $z3 = r0 instanceof javax.xml.transform.sax.SAXSource;

        if $z3 == 0 goto label12;

        $r7 = (javax.xml.transform.sax.SAXSource) r0;

        $r8 = virtualinvoke $r7.<javax.xml.transform.sax.SAXSource: org.xml.sax.InputSource getInputSource()>();

        $r9 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamReader createXMLStreamReader(org.xml.sax.InputSource)>($r8);

     label11:
        return $r9;

     label12:
        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLInputFactory getXMLInputFactory()>();

     label13:
        r24 = null;

     label14:
        r24 = virtualinvoke $r1.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(javax.xml.transform.Source)>(r0);

     label15:
        goto label17;

     label16:
        $r21 := @caughtexception;

     label17:
        if r24 != null goto label19;

        $z4 = r0 instanceof javax.xml.transform.stream.StreamSource;

        if $z4 == 0 goto label19;

        r25 = (javax.xml.transform.stream.StreamSource) r0;

        $r2 = virtualinvoke r25.<javax.xml.transform.stream.StreamSource: java.io.InputStream getInputStream()>();

        if $r2 == null goto label18;

        $r5 = virtualinvoke r25.<javax.xml.transform.stream.StreamSource: java.lang.String getSystemId()>();

        $r6 = virtualinvoke r25.<javax.xml.transform.stream.StreamSource: java.io.InputStream getInputStream()>();

        r24 = virtualinvoke $r1.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.lang.String,java.io.InputStream)>($r5, $r6);

        goto label19;

     label18:
        $r3 = virtualinvoke r25.<javax.xml.transform.stream.StreamSource: java.lang.String getSystemId()>();

        $r4 = virtualinvoke r25.<javax.xml.transform.stream.StreamSource: java.io.Reader getReader()>();

        r24 = virtualinvoke $r1.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.lang.String,java.io.Reader)>($r3, $r4);

     label19:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLInputFactory(javax.xml.stream.XMLInputFactory)>($r1);

     label20:
        return r24;

     label21:
        $r20 := @caughtexception;

     label22:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLInputFactory(javax.xml.stream.XMLInputFactory)>($r1);

        throw $r20;

     label23:
        $r18 := @caughtexception;

        $r19 = new java.lang.RuntimeException;

        specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t parse stream.", $r18);

        throw $r19;

        catch java.lang.UnsupportedOperationException from label14 to label15 with label16;
        catch java.lang.Throwable from label13 to label19 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
        catch javax.xml.stream.XMLStreamException from label01 to label04 with label23;
        catch javax.xml.stream.XMLStreamException from label05 to label07 with label23;
        catch javax.xml.stream.XMLStreamException from label08 to label09 with label23;
        catch javax.xml.stream.XMLStreamException from label10 to label11 with label23;
        catch javax.xml.stream.XMLStreamException from label12 to label20 with label23;
        catch javax.xml.stream.XMLStreamException from label21 to label23 with label23;
    }

    public static javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)
    {
        java.lang.Throwable $r3;
        javax.xml.stream.XMLStreamReader $r2;
        javax.xml.stream.XMLInputFactory $r0;
        javax.xml.stream.XMLStreamException $r4;
        java.io.Reader r1;
        java.lang.RuntimeException $r5;

        r1 := @parameter0: java.io.Reader;

        $r0 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLInputFactory getXMLInputFactory()>();

     label1:
        $r2 = virtualinvoke $r0.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)>(r1);

     label2:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLInputFactory(javax.xml.stream.XMLInputFactory)>($r0);

        return $r2;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t parse stream.", $r4);

        throw $r5;

     label4:
        $r3 := @caughtexception;

     label5:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void returnXMLInputFactory(javax.xml.stream.XMLInputFactory)>($r0);

        throw $r3;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public static javax.xml.namespace.QName readQName(javax.xml.stream.XMLStreamReader) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamReader r0;
        int $i0, $i1, $i3;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r12;
        boolean $z0;
        java.lang.RuntimeException $r16;
        java.lang.StringBuilder $r10, $r11, $r15;
        javax.xml.namespace.QName $r14, $r17, $r18;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getElementText()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>(":");

        $i3 = (int) -1;

        if $i0 != $i3 goto label2;

        $r14 = new javax.xml.namespace.QName;

        specialinvoke $r14.<javax.xml.namespace.QName: void <init>(java.lang.String)>($r2);

        return $r14;

     label2:
        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i1);

        $r5 = interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: java.lang.String getNamespaceURI(java.lang.String)>($r3);

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r3);

        if $z0 != 0 goto label3;

        if $r5 == null goto label4;

     label3:
        if $r4 != null goto label5;

     label4:
        $r16 = new java.lang.RuntimeException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid QName in mapping: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw $r16;

     label5:
        if $r5 != null goto label6;

        $r17 = new javax.xml.namespace.QName;

        specialinvoke $r17.<javax.xml.namespace.QName: void <init>(java.lang.String)>($r4);

        return $r17;

     label6:
        $r18 = new javax.xml.namespace.QName;

        specialinvoke $r18.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r5, $r4, $r3);

        return $r18;
    }

    public static java.lang.String getUniquePrefix(javax.xml.stream.XMLStreamWriter, java.lang.String, boolean) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamWriter r0;
        java.lang.String r1, $r2, $r3, r4;
        boolean z0;

        r0 := @parameter0: javax.xml.stream.XMLStreamWriter;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r2 = interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: java.lang.String getPrefix(java.lang.String)>(r1);

        r4 = $r2;

        if $r2 != null goto label1;

        $r3 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: java.lang.String getUniquePrefix(javax.xml.stream.XMLStreamWriter)>(r0);

        r4 = $r3;

        if z0 == 0 goto label1;

        interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: void setPrefix(java.lang.String,java.lang.String)>($r3, r1);

        interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>($r3, r1);

     label1:
        return r4;
    }

    public static java.lang.String getUniquePrefix(javax.xml.stream.XMLStreamWriter, java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.XMLStreamWriter r0;
        java.lang.String r1, $r2;

        r0 := @parameter0: javax.xml.stream.XMLStreamWriter;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: java.lang.String getUniquePrefix(javax.xml.stream.XMLStreamWriter,java.lang.String,boolean)>(r0, r1, 0);

        return $r2;
    }

    public static java.lang.String getUniquePrefix(javax.xml.stream.XMLStreamWriter)
    {
        java.lang.String[] $r9, r11;
        int i0, i1, i2;
        javax.xml.stream.XMLStreamWriter r0;
        javax.xml.namespace.NamespaceContext $r1;
        java.lang.String $r5, $r6, r7, $r8, $r10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: javax.xml.stream.XMLStreamWriter;

        $r1 = interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: javax.xml.namespace.NamespaceContext getNamespaceContext()>();

        if $r1 != null goto label1;

        $r9 = <org.apache.cxf.staxutils.StaxUtils: java.lang.String[] DEF_PREFIXES>;

        $r10 = $r9[0];

        return $r10;

     label1:
        r11 = <org.apache.cxf.staxutils.StaxUtils: java.lang.String[] DEF_PREFIXES>;

        i0 = lengthof r11;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r7 = r11[i1];

        $r8 = interfaceinvoke $r1.<javax.xml.namespace.NamespaceContext: java.lang.String getNamespaceURI(java.lang.String)>(r7);

        $z1 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r8);

        if $z1 == 0 goto label3;

        return r7;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        i2 = 10;

     label5:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ns");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = interfaceinvoke $r1.<javax.xml.namespace.NamespaceContext: java.lang.String getNamespaceURI(java.lang.String)>($r5);

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r6);

        if $z0 == 0 goto label6;

        return $r5;

     label6:
        i2 = i2 + 1;

        goto label5;
    }

    public static void printXmlFragment(javax.xml.stream.XMLStreamReader)
    {
        java.lang.Throwable $r9;
        java.io.StringWriter $r0;
        java.util.logging.Logger $r4, $r7;
        javax.xml.stream.XMLStreamReader r3;
        javax.xml.stream.XMLStreamException $r6;
        javax.xml.stream.XMLStreamWriter $r2;
        java.lang.String $r5, $r8;
        org.apache.cxf.staxutils.PrettyPrintXMLStreamWriter $r1, r10;

        r3 := @parameter0: javax.xml.stream.XMLStreamReader;

     label1:
        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>(int)>(1024);

        r10 = null;

     label2:
        $r1 = new org.apache.cxf.staxutils.PrettyPrintXMLStreamWriter;

        $r2 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer)>($r0);

        specialinvoke $r1.<org.apache.cxf.staxutils.PrettyPrintXMLStreamWriter: void <init>(javax.xml.stream.XMLStreamWriter,int)>($r2, 4);

        r10 = $r1;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.stream.XMLStreamReader,javax.xml.stream.XMLStreamWriter)>(r3, $r1);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

     label3:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void close(javax.xml.stream.XMLStreamWriter)>($r1);

        goto label6;

     label4:
        $r9 := @caughtexception;

     label5:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void close(javax.xml.stream.XMLStreamWriter)>(r10);

        throw $r9;

     label6:
        $r4 = <org.apache.cxf.staxutils.StaxUtils: java.util.logging.Logger LOG>;

        $r5 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        virtualinvoke $r4.<java.util.logging.Logger: void info(java.lang.String)>($r5);

     label7:
        goto label9;

     label8:
        $r6 := @caughtexception;

        $r7 = <org.apache.cxf.staxutils.StaxUtils: java.util.logging.Logger LOG>;

        $r8 = virtualinvoke $r6.<javax.xml.stream.XMLStreamException: java.lang.String getMessage()>();

        virtualinvoke $r7.<java.util.logging.Logger: void severe(java.lang.String)>($r8);

     label9:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
        catch javax.xml.stream.XMLStreamException from label1 to label7 with label8;
    }

    private static void writeStartElementEvent(javax.xml.stream.events.XMLEvent, javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.XMLEvent r0, $r10, $r12;
        javax.xml.stream.XMLStreamWriter r6;
        javax.xml.stream.events.StartElement $r1;
        java.lang.String $r3, $r4, $r5;
        boolean $z0, $z1;
        java.util.Iterator $r7, $r8, $r13, $r14;
        java.lang.Object $r9, $r11;
        javax.xml.namespace.QName $r2;

        r0 := @parameter0: javax.xml.stream.events.XMLEvent;

        r6 := @parameter1: javax.xml.stream.XMLStreamWriter;

        $r1 = interfaceinvoke r0.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.StartElement asStartElement()>();

        $r2 = interfaceinvoke $r1.<javax.xml.stream.events.StartElement: javax.xml.namespace.QName getName()>();

        $r3 = virtualinvoke $r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r4 = virtualinvoke $r2.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r5 = virtualinvoke $r2.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        if $r5 == null goto label1;

        interfaceinvoke r6.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>($r5, $r4, $r3);

        goto label3;

     label1:
        if $r3 == null goto label2;

        interfaceinvoke r6.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String)>($r4, $r3);

        goto label3;

     label2:
        interfaceinvoke r6.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String)>($r4);

     label3:
        $r13 = interfaceinvoke $r1.<javax.xml.stream.events.StartElement: java.util.Iterator getNamespaces()>();

        $r14 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Iterator cast(java.util.Iterator)>($r13);

     label4:
        if $r14 == null goto label5;

        $z1 = interfaceinvoke $r14.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r11 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>();

        $r12 = (javax.xml.stream.events.XMLEvent) $r11;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void writeEvent(javax.xml.stream.events.XMLEvent,javax.xml.stream.XMLStreamWriter)>($r12, r6);

        goto label4;

     label5:
        $r7 = interfaceinvoke $r1.<javax.xml.stream.events.StartElement: java.util.Iterator getAttributes()>();

        $r8 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Iterator cast(java.util.Iterator)>($r7);

     label6:
        if $r8 == null goto label7;

        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (javax.xml.stream.events.XMLEvent) $r9;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void writeAttributeEvent(javax.xml.stream.events.XMLEvent,javax.xml.stream.XMLStreamWriter)>($r10, r6);

        goto label6;

     label7:
        return;
    }

    private static void writeAttributeEvent(javax.xml.stream.events.XMLEvent, javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.Attribute r1;
        javax.xml.stream.events.XMLEvent r0;
        javax.xml.stream.XMLStreamWriter r7;
        javax.xml.namespace.QName $r2;
        java.lang.String $r3, $r4, $r5, $r6;

        r0 := @parameter0: javax.xml.stream.events.XMLEvent;

        r7 := @parameter1: javax.xml.stream.XMLStreamWriter;

        r1 = (javax.xml.stream.events.Attribute) r0;

        $r2 = interfaceinvoke r1.<javax.xml.stream.events.Attribute: javax.xml.namespace.QName getName()>();

        $r3 = virtualinvoke $r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        $r4 = virtualinvoke $r2.<javax.xml.namespace.QName: java.lang.String getLocalPart()>();

        $r5 = virtualinvoke $r2.<javax.xml.namespace.QName: java.lang.String getPrefix()>();

        $r6 = interfaceinvoke r1.<javax.xml.stream.events.Attribute: java.lang.String getValue()>();

        if $r5 == null goto label1;

        interfaceinvoke r7.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r5, $r3, $r4, $r6);

        goto label3;

     label1:
        if $r3 == null goto label2;

        interfaceinvoke r7.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r6);

        goto label3;

     label2:
        interfaceinvoke r7.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String)>($r4, $r6);

     label3:
        return;
    }

    public static void writeEvent(javax.xml.stream.events.XMLEvent, javax.xml.stream.XMLStreamWriter) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.XMLEvent r0;
        javax.xml.stream.XMLStreamWriter r2;
        boolean $z0, $z1;
        javax.xml.stream.events.Namespace $r1, $r3, $r5, $r7, $r9, $r11, $r13;
        javax.xml.stream.events.StartDocument $r21, $r22, $r24, $r26;
        javax.xml.stream.events.Comment $r28;
        javax.xml.stream.events.EntityReference $r19;
        javax.xml.stream.events.ProcessingInstruction $r32, $r34, $r36, $r38;
        int $i0;
        java.lang.String $r4, $r6, $r8, $r10, $r12, $r14, $r16, $r18, $r20, $r23, $r25, $r27, $r29, $r31, $r33, $r35, $r37, $r39;
        javax.xml.stream.events.Characters $r15, $r30;
        javax.xml.stream.events.DTD $r17;

        r0 := @parameter0: javax.xml.stream.events.XMLEvent;

        r2 := @parameter1: javax.xml.stream.XMLStreamWriter;

        $i0 = interfaceinvoke r0.<javax.xml.stream.events.XMLEvent: int getEventType()>();

        tableswitch($i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label06;
            case 4: goto label11;
            case 5: goto label10;
            case 6: goto label11;
            case 7: goto label13;
            case 8: goto label15;
            case 9: goto label04;
            case 10: goto label03;
            case 11: goto label05;
            case 12: goto label12;
            case 13: goto label08;
            default: goto label16;
        };

     label01:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void writeStartElementEvent(javax.xml.stream.events.XMLEvent,javax.xml.stream.XMLStreamWriter)>(r0, r2);

        goto label16;

     label02:
        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>();

        goto label16;

     label03:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void writeAttributeEvent(javax.xml.stream.events.XMLEvent,javax.xml.stream.XMLStreamWriter)>(r0, r2);

        goto label16;

     label04:
        $r19 = (javax.xml.stream.events.EntityReference) r0;

        $r20 = interfaceinvoke $r19.<javax.xml.stream.events.EntityReference: java.lang.String getName()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeEntityRef(java.lang.String)>($r20);

        goto label16;

     label05:
        $r17 = (javax.xml.stream.events.DTD) r0;

        $r18 = interfaceinvoke $r17.<javax.xml.stream.events.DTD: java.lang.String getDocumentTypeDeclaration()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeDTD(java.lang.String)>($r18);

        goto label16;

     label06:
        $r32 = (javax.xml.stream.events.ProcessingInstruction) r0;

        $r33 = interfaceinvoke $r32.<javax.xml.stream.events.ProcessingInstruction: java.lang.String getData()>();

        if $r33 == null goto label07;

        $r36 = (javax.xml.stream.events.ProcessingInstruction) r0;

        $r37 = interfaceinvoke $r36.<javax.xml.stream.events.ProcessingInstruction: java.lang.String getTarget()>();

        $r38 = (javax.xml.stream.events.ProcessingInstruction) r0;

        $r39 = interfaceinvoke $r38.<javax.xml.stream.events.ProcessingInstruction: java.lang.String getData()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeProcessingInstruction(java.lang.String,java.lang.String)>($r37, $r39);

        goto label16;

     label07:
        $r34 = (javax.xml.stream.events.ProcessingInstruction) r0;

        $r35 = interfaceinvoke $r34.<javax.xml.stream.events.ProcessingInstruction: java.lang.String getTarget()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeProcessingInstruction(java.lang.String)>($r35);

        goto label16;

     label08:
        $r1 = (javax.xml.stream.events.Namespace) r0;

        $z0 = interfaceinvoke $r1.<javax.xml.stream.events.Namespace: boolean isDefaultNamespaceDeclaration()>();

        if $z0 == 0 goto label09;

        $r11 = (javax.xml.stream.events.Namespace) r0;

        $r12 = interfaceinvoke $r11.<javax.xml.stream.events.Namespace: java.lang.String getNamespaceURI()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeDefaultNamespace(java.lang.String)>($r12);

        $r13 = (javax.xml.stream.events.Namespace) r0;

        $r14 = interfaceinvoke $r13.<javax.xml.stream.events.Namespace: java.lang.String getNamespaceURI()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void setDefaultNamespace(java.lang.String)>($r14);

        goto label16;

     label09:
        $r3 = (javax.xml.stream.events.Namespace) r0;

        $r4 = interfaceinvoke $r3.<javax.xml.stream.events.Namespace: java.lang.String getPrefix()>();

        $r5 = (javax.xml.stream.events.Namespace) r0;

        $r6 = interfaceinvoke $r5.<javax.xml.stream.events.Namespace: java.lang.String getNamespaceURI()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeNamespace(java.lang.String,java.lang.String)>($r4, $r6);

        $r7 = (javax.xml.stream.events.Namespace) r0;

        $r8 = interfaceinvoke $r7.<javax.xml.stream.events.Namespace: java.lang.String getPrefix()>();

        $r9 = (javax.xml.stream.events.Namespace) r0;

        $r10 = interfaceinvoke $r9.<javax.xml.stream.events.Namespace: java.lang.String getNamespaceURI()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void setPrefix(java.lang.String,java.lang.String)>($r8, $r10);

        goto label16;

     label10:
        $r28 = (javax.xml.stream.events.Comment) r0;

        $r29 = interfaceinvoke $r28.<javax.xml.stream.events.Comment: java.lang.String getText()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeComment(java.lang.String)>($r29);

        goto label16;

     label11:
        $r30 = interfaceinvoke r0.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.Characters asCharacters()>();

        $r31 = interfaceinvoke $r30.<javax.xml.stream.events.Characters: java.lang.String getData()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>($r31);

        goto label16;

     label12:
        $r15 = interfaceinvoke r0.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.Characters asCharacters()>();

        $r16 = interfaceinvoke $r15.<javax.xml.stream.events.Characters: java.lang.String getData()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeCData(java.lang.String)>($r16);

        goto label16;

     label13:
        $r21 = (javax.xml.stream.events.StartDocument) r0;

        $z1 = interfaceinvoke $r21.<javax.xml.stream.events.StartDocument: boolean encodingSet()>();

        if $z1 == 0 goto label14;

        $r24 = (javax.xml.stream.events.StartDocument) r0;

        $r25 = interfaceinvoke $r24.<javax.xml.stream.events.StartDocument: java.lang.String getCharacterEncodingScheme()>();

        $r26 = (javax.xml.stream.events.StartDocument) r0;

        $r27 = interfaceinvoke $r26.<javax.xml.stream.events.StartDocument: java.lang.String getVersion()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeStartDocument(java.lang.String,java.lang.String)>($r25, $r27);

        goto label16;

     label14:
        $r22 = (javax.xml.stream.events.StartDocument) r0;

        $r23 = interfaceinvoke $r22.<javax.xml.stream.events.StartDocument: java.lang.String getVersion()>();

        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeStartDocument(java.lang.String)>($r23);

        goto label16;

     label15:
        interfaceinvoke r2.<javax.xml.stream.XMLStreamWriter: void writeEndDocument()>();

        goto label16;

     label16:
        return;
    }

    public static void print(org.w3c.dom.Node)
    {
        java.io.PrintStream $r0;
        java.lang.Throwable $r4;
        javax.xml.transform.dom.DOMSource $r2;
        java.lang.RuntimeException $r6;
        org.w3c.dom.Node r3;
        javax.xml.stream.XMLStreamException $r5;
        javax.xml.stream.XMLStreamWriter $r1, r7;

        r3 := @parameter0: org.w3c.dom.Node;

        r7 = null;

     label1:
        $r0 = <java.lang.System: java.io.PrintStream out>;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.OutputStream)>($r0);

        r7 = $r1;

        $r2 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r2.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r3);

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.transform.Source,javax.xml.stream.XMLStreamWriter)>($r2, $r1);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

     label2:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void close(javax.xml.stream.XMLStreamWriter)>($r1);

        goto label6;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label4:
        $r4 := @caughtexception;

     label5:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void close(javax.xml.stream.XMLStreamWriter)>(r7);

        throw $r4;

     label6:
        return;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public static java.lang.String toString(javax.xml.transform.Source) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Throwable $r4;
        java.io.StringWriter $r0;
        javax.xml.stream.XMLStreamWriter $r1, r5;
        javax.xml.transform.Source r2;
        java.lang.String $r3;

        r2 := @parameter0: javax.xml.transform.Source;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>(int)>(1024);

        r5 = null;

     label1:
        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer)>($r0);

        r5 = $r1;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(javax.xml.transform.Source,javax.xml.stream.XMLStreamWriter)>(r2, $r1);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

     label2:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void close(javax.xml.stream.XMLStreamWriter)>($r1);

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void close(javax.xml.stream.XMLStreamWriter)>(r5);

        throw $r4;

     label5:
        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public static java.lang.String toString(org.w3c.dom.Node) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.transform.dom.DOMSource $r0;
        java.lang.String $r2;
        org.w3c.dom.Node r1;

        r1 := @parameter0: org.w3c.dom.Node;

        $r0 = new javax.xml.transform.dom.DOMSource;

        specialinvoke $r0.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>(r1);

        $r2 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: java.lang.String toString(javax.xml.transform.Source)>($r0);

        return $r2;
    }

    public static java.lang.String toString(org.w3c.dom.Document) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Throwable $r4;
        java.io.StringWriter $r0;
        java.lang.RuntimeException $r6;
        org.w3c.dom.Document r2;
        javax.xml.stream.XMLStreamException $r5;
        javax.xml.stream.XMLStreamWriter $r1, r7;
        java.lang.String $r3;

        r2 := @parameter0: org.w3c.dom.Document;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>(int)>(1024);

        r7 = null;

     label1:
        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer)>($r0);

        r7 = $r1;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(org.w3c.dom.Document,javax.xml.stream.XMLStreamWriter)>(r2, $r1);

        interfaceinvoke $r1.<javax.xml.stream.XMLStreamWriter: void flush()>();

     label2:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void close(javax.xml.stream.XMLStreamWriter)>($r1);

        goto label6;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label4:
        $r4 := @caughtexception;

     label5:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void close(javax.xml.stream.XMLStreamWriter)>(r7);

        throw $r4;

     label6:
        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public static java.lang.String toString(org.w3c.dom.Element) throws javax.xml.stream.XMLStreamException
    {
        org.w3c.dom.Element r0;
        java.lang.String $r1;

        r0 := @parameter0: org.w3c.dom.Element;

        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: java.lang.String toString(org.w3c.dom.Element,int)>(r0, 0);

        return $r1;
    }

    public static java.lang.String toString(org.w3c.dom.Element, int)
    {
        java.lang.Throwable $r5;
        java.io.StringWriter $r0;
        java.lang.RuntimeException $r7;
        org.w3c.dom.Element r2;
        javax.xml.stream.XMLStreamException $r6;
        int i0;
        javax.xml.stream.XMLStreamWriter $r1, r8;
        java.lang.String $r3;
        org.apache.cxf.staxutils.PrettyPrintXMLStreamWriter $r4;

        r2 := @parameter0: org.w3c.dom.Element;

        i0 := @parameter1: int;

        $r0 = new java.io.StringWriter;

        specialinvoke $r0.<java.io.StringWriter: void <init>(int)>(1024);

        r8 = null;

     label1:
        $r1 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLStreamWriter createXMLStreamWriter(java.io.Writer)>($r0);

        r8 = $r1;

        if i0 <= 0 goto label2;

        $r4 = new org.apache.cxf.staxutils.PrettyPrintXMLStreamWriter;

        specialinvoke $r4.<org.apache.cxf.staxutils.PrettyPrintXMLStreamWriter: void <init>(javax.xml.stream.XMLStreamWriter,int)>($r1, i0);

        r8 = $r4;

     label2:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void copy(org.w3c.dom.Element,javax.xml.stream.XMLStreamWriter)>(r2, r8);

        interfaceinvoke r8.<javax.xml.stream.XMLStreamWriter: void flush()>();

     label3:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void close(javax.xml.stream.XMLStreamWriter)>(r8);

        goto label7;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6);

        throw $r7;

     label5:
        $r5 := @caughtexception;

     label6:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void close(javax.xml.stream.XMLStreamWriter)>(r8);

        throw $r5;

     label7:
        $r3 = virtualinvoke $r0.<java.io.StringWriter: java.lang.String toString()>();

        return $r3;

        catch javax.xml.stream.XMLStreamException from label1 to label3 with label4;
        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    public static void close(javax.xml.stream.XMLStreamReader)
    {
        javax.xml.stream.XMLStreamReader r0;
        java.lang.Exception $r1;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        if r0 == null goto label4;

     label1:
        interfaceinvoke r0.<javax.xml.stream.XMLStreamReader: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void close(javax.xml.stream.XMLStreamWriter)
    {
        javax.xml.stream.XMLStreamWriter r0;
        java.lang.Exception $r1;

        r0 := @parameter0: javax.xml.stream.XMLStreamWriter;

        if r0 == null goto label4;

     label1:
        interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: void close()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static javax.xml.stream.XMLStreamReader configureReader(javax.xml.stream.XMLStreamReader, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.Long, java.lang.Long) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Throwable $r16, $r18, $r20;
        java.lang.Integer r0, r1, r2, r3, r4;
        java.lang.ClassCastException $r13;
        java.util.logging.Level $r11;
        java.lang.Long r5, r6;
        javax.xml.stream.XMLStreamReader r22;
        javax.xml.stream.XMLStreamException $r9, $r14;
        int $i0, $i1, $i2;
        java.lang.String $r12;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r8;
        java.util.logging.Logger $r10, $r15;
        org.apache.cxf.staxutils.DocumentDepthProperties $r17, $r19, $r21, r23;
        org.apache.cxf.staxutils.DepthRestrictingStreamReader $r7;

        r22 := @parameter0: javax.xml.stream.XMLStreamReader;

        r0 := @parameter1: java.lang.Integer;

        r1 := @parameter2: java.lang.Integer;

        r2 := @parameter3: java.lang.Integer;

        r3 := @parameter4: java.lang.Integer;

        r4 := @parameter5: java.lang.Integer;

        r5 := @parameter6: java.lang.Long;

        r6 := @parameter7: java.lang.Long;

     label01:
        r23 = null;

        if r0 == null goto label05;

     label02:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void setProperty(javax.xml.stream.XMLStreamReader,java.lang.String,java.lang.Object)>(r22, "com.ctc.wstx.maxChildrenPerElement", r0);

     label03:
        goto label05;

     label04:
        $r20 := @caughtexception;

        $r21 = new org.apache.cxf.staxutils.DocumentDepthProperties;

        specialinvoke $r21.<org.apache.cxf.staxutils.DocumentDepthProperties: void <init>()>();

        r23 = $r21;

        $i2 = virtualinvoke r0.<java.lang.Integer: int intValue()>();

        virtualinvoke $r21.<org.apache.cxf.staxutils.DocumentDepthProperties: void setInnerElementCountThreshold(int)>($i2);

     label05:
        if r1 == null goto label10;

     label06:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void setProperty(javax.xml.stream.XMLStreamReader,java.lang.String,java.lang.Object)>(r22, "com.ctc.wstx.maxElementDepth", r1);

     label07:
        goto label10;

     label08:
        $r18 := @caughtexception;

        if r23 != null goto label09;

        $r19 = new org.apache.cxf.staxutils.DocumentDepthProperties;

        specialinvoke $r19.<org.apache.cxf.staxutils.DocumentDepthProperties: void <init>()>();

        r23 = $r19;

     label09:
        $i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        virtualinvoke r23.<org.apache.cxf.staxutils.DocumentDepthProperties: void setInnerElementLevelThreshold(int)>($i1);

     label10:
        if r2 == null goto label11;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void setProperty(javax.xml.stream.XMLStreamReader,java.lang.String,java.lang.Object)>(r22, "com.ctc.wstx.maxAttributeCount", r2);

     label11:
        if r3 == null goto label12;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void setProperty(javax.xml.stream.XMLStreamReader,java.lang.String,java.lang.Object)>(r22, "com.ctc.wstx.maxAttributeSize", r3);

     label12:
        if r4 == null goto label13;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void setProperty(javax.xml.stream.XMLStreamReader,java.lang.String,java.lang.Object)>(r22, "com.ctc.wstx.maxTextLength", r4);

     label13:
        if r5 == null goto label18;

     label14:
        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void setProperty(javax.xml.stream.XMLStreamReader,java.lang.String,java.lang.Object)>(r22, "com.ctc.wstx.maxElementCount", r5);

     label15:
        goto label18;

     label16:
        $r16 := @caughtexception;

        if r23 != null goto label17;

        $r17 = new org.apache.cxf.staxutils.DocumentDepthProperties;

        specialinvoke $r17.<org.apache.cxf.staxutils.DocumentDepthProperties: void <init>()>();

        r23 = $r17;

     label17:
        $i0 = virtualinvoke r5.<java.lang.Long: int intValue()>();

        virtualinvoke r23.<org.apache.cxf.staxutils.DocumentDepthProperties: void setElementCountThreshold(int)>($i0);

     label18:
        if r6 == null goto label19;

        staticinvoke <org.apache.cxf.staxutils.StaxUtils: void setProperty(javax.xml.stream.XMLStreamReader,java.lang.String,java.lang.Object)>(r22, "com.ctc.wstx.maxCharacters", r6);

     label19:
        if r23 == null goto label20;

        $r7 = new org.apache.cxf.staxutils.DepthRestrictingStreamReader;

        specialinvoke $r7.<org.apache.cxf.staxutils.DepthRestrictingStreamReader: void <init>(javax.xml.stream.XMLStreamReader,org.apache.cxf.staxutils.DocumentDepthProperties)>(r22, r23);

        r22 = $r7;

     label20:
        goto label26;

     label21:
        $r13 := @caughtexception;

        $z1 = <org.apache.cxf.staxutils.StaxUtils: boolean allowInsecureParser>;

        if $z1 == 0 goto label22;

        $r15 = <org.apache.cxf.staxutils.StaxUtils: java.util.logging.Logger LOG>;

        virtualinvoke $r15.<java.util.logging.Logger: void warning(java.lang.String)>("INSTANCE_NOT_XMLSTREAMREADER2");

        goto label23;

     label22:
        $r14 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r14.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r13);

        throw $r14;

     label23:
        goto label26;

     label24:
        $r8 := @caughtexception;

        $z0 = <org.apache.cxf.staxutils.StaxUtils: boolean allowInsecureParser>;

        if $z0 == 0 goto label25;

        $r10 = <org.apache.cxf.staxutils.StaxUtils: java.util.logging.Logger LOG>;

        $r11 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r12 = virtualinvoke $r8.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        virtualinvoke $r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>($r11, "SECURE_PROPERTY_NOT_SUPPORTED", $r12);

        goto label26;

     label25:
        $r9 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r9.<javax.xml.stream.XMLStreamException: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label26:
        return r22;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.ClassCastException from label01 to label20 with label21;
        catch java.lang.IllegalArgumentException from label01 to label20 with label24;
    }

    private static void setProperty(javax.xml.stream.XMLStreamReader, java.lang.String, java.lang.Object)
    {
        java.lang.Object r2;
        java.lang.String r1;
        javax.xml.stream.XMLStreamReader r0;

        r0 := @parameter0: javax.xml.stream.XMLStreamReader;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object;

        staticinvoke <org.apache.cxf.staxutils.WoodstoxHelper: void setProperty(javax.xml.stream.XMLStreamReader,java.lang.String,java.lang.Object)>(r0, r1, r2);

        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.ArrayBlockingQueue $r34, $r35;
        java.lang.Throwable $r27, $r28;
        long $l15, $l16, $l17, $l18;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r22, $r25, $r26, $r32;
        javax.xml.stream.XMLInputFactory $r29, r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.util.logging.Logger $r0;
        java.lang.String[] $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i20;
        javax.xml.stream.XMLOutputFactory $r23, r33;
        java.lang.Class $r24, $r31;

        <org.apache.cxf.staxutils.StaxUtils: java.lang.String XML_NS> = "http://www.w3.org/2000/xmlns/";

        <org.apache.cxf.staxutils.StaxUtils: java.lang.String INNER_ELEMENT_LEVEL_SYSTEM_PROP> = "org.apache.cxf.staxutils.innerElementLevelThreshold";

        <org.apache.cxf.staxutils.StaxUtils: java.lang.String INNER_ELEMENT_COUNT_SYSTEM_PROP> = "org.apache.cxf.staxutils.innerElementCountThreshold";

        <org.apache.cxf.staxutils.StaxUtils: java.lang.String ALLOW_INSECURE_PARSER> = "org.apache.cxf.stax.allowInsecureParser";

        <org.apache.cxf.staxutils.StaxUtils: java.lang.String MAX_XML_CHARACTERS> = "org.apache.cxf.stax.maxXMLCharacters";

        <org.apache.cxf.staxutils.StaxUtils: java.lang.String MAX_ELEMENT_COUNT> = "org.apache.cxf.stax.maxElementCount";

        <org.apache.cxf.staxutils.StaxUtils: java.lang.String MAX_TEXT_LENGTH> = "org.apache.cxf.stax.maxTextLength";

        <org.apache.cxf.staxutils.StaxUtils: java.lang.String MAX_ATTRIBUTE_SIZE> = "org.apache.cxf.stax.maxAttributeSize";

        <org.apache.cxf.staxutils.StaxUtils: java.lang.String MAX_ATTRIBUTE_COUNT> = "org.apache.cxf.stax.maxAttributeCount";

        <org.apache.cxf.staxutils.StaxUtils: java.lang.String MAX_ELEMENT_DEPTH> = "org.apache.cxf.stax.maxElementDepth";

        <org.apache.cxf.staxutils.StaxUtils: java.lang.String MAX_CHILD_ELEMENTS> = "org.apache.cxf.stax.maxChildElements";

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/staxutils/StaxUtils;");

        <org.apache.cxf.staxutils.StaxUtils: java.util.logging.Logger LOG> = $r0;

        $r1 = newarray (java.lang.String)[9];

        $r2 = "ns1";

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String intern()>();

        $r1[0] = $r3;

        $r4 = "ns2";

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String intern()>();

        $r1[1] = $r5;

        $r6 = "ns3";

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String intern()>();

        $r1[2] = $r7;

        $r8 = "ns4";

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String intern()>();

        $r1[3] = $r9;

        $r10 = "ns5";

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String intern()>();

        $r1[4] = $r11;

        $r12 = "ns6";

        $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String intern()>();

        $r1[5] = $r13;

        $r14 = "ns7";

        $r15 = virtualinvoke $r14.<java.lang.String: java.lang.String intern()>();

        $r1[6] = $r15;

        $r16 = "ns8";

        $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String intern()>();

        $r1[7] = $r17;

        $r18 = "ns9";

        $r19 = virtualinvoke $r18.<java.lang.String: java.lang.String intern()>();

        $r1[8] = $r19;

        <org.apache.cxf.staxutils.StaxUtils: java.lang.String[] DEF_PREFIXES> = $r1;

        <org.apache.cxf.staxutils.StaxUtils: int innerElementLevelThreshold> = 100;

        $i20 = (int) 50000;

        <org.apache.cxf.staxutils.StaxUtils: int innerElementCountThreshold> = $i20;

        <org.apache.cxf.staxutils.StaxUtils: int maxAttributeCount> = 500;

        <org.apache.cxf.staxutils.StaxUtils: int maxAttributeSize> = 65536;

        <org.apache.cxf.staxutils.StaxUtils: int maxTextLength> = 134217728;

        <org.apache.cxf.staxutils.StaxUtils: long maxElementCount> = 9223372036854775807L;

        <org.apache.cxf.staxutils.StaxUtils: long maxXMLCharacters> = 9223372036854775807L;

        $i0 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: int getInteger(java.lang.String,int)>("org.apache.cxf.staxutils.pool-size", 20);

        $r34 = new java.util.concurrent.ArrayBlockingQueue;

        specialinvoke $r34.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>($i0);

        <org.apache.cxf.staxutils.StaxUtils: java.util.concurrent.BlockingQueue NS_AWARE_INPUT_FACTORY_POOL> = $r34;

        $r35 = new java.util.concurrent.ArrayBlockingQueue;

        specialinvoke $r35.<java.util.concurrent.ArrayBlockingQueue: void <init>(int)>($i0);

        <org.apache.cxf.staxutils.StaxUtils: java.util.concurrent.BlockingQueue OUTPUT_FACTORY_POOL> = $r35;

        $i1 = <org.apache.cxf.staxutils.StaxUtils: int innerElementCountThreshold>;

        $i2 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: int getInteger(java.lang.String,int)>("org.apache.cxf.staxutils.innerElementCountThreshold", $i1);

        <org.apache.cxf.staxutils.StaxUtils: int innerElementCountThreshold> = $i2;

        $i3 = <org.apache.cxf.staxutils.StaxUtils: int innerElementLevelThreshold>;

        $i4 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: int getInteger(java.lang.String,int)>("org.apache.cxf.staxutils.innerElementLevelThreshold", $i3);

        <org.apache.cxf.staxutils.StaxUtils: int innerElementLevelThreshold> = $i4;

        $i5 = <org.apache.cxf.staxutils.StaxUtils: int innerElementCountThreshold>;

        $i6 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: int getInteger(java.lang.String,int)>("org.apache.cxf.stax.maxChildElements", $i5);

        <org.apache.cxf.staxutils.StaxUtils: int innerElementCountThreshold> = $i6;

        $i7 = <org.apache.cxf.staxutils.StaxUtils: int innerElementLevelThreshold>;

        $i8 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: int getInteger(java.lang.String,int)>("org.apache.cxf.stax.maxElementDepth", $i7);

        <org.apache.cxf.staxutils.StaxUtils: int innerElementLevelThreshold> = $i8;

        $i9 = <org.apache.cxf.staxutils.StaxUtils: int maxAttributeCount>;

        $i10 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: int getInteger(java.lang.String,int)>("org.apache.cxf.stax.maxAttributeCount", $i9);

        <org.apache.cxf.staxutils.StaxUtils: int maxAttributeCount> = $i10;

        $i11 = <org.apache.cxf.staxutils.StaxUtils: int maxAttributeSize>;

        $i12 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: int getInteger(java.lang.String,int)>("org.apache.cxf.stax.maxAttributeSize", $i11);

        <org.apache.cxf.staxutils.StaxUtils: int maxAttributeSize> = $i12;

        $i13 = <org.apache.cxf.staxutils.StaxUtils: int maxTextLength>;

        $i14 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: int getInteger(java.lang.String,int)>("org.apache.cxf.stax.maxTextLength", $i13);

        <org.apache.cxf.staxutils.StaxUtils: int maxTextLength> = $i14;

        $l15 = <org.apache.cxf.staxutils.StaxUtils: long maxElementCount>;

        $l16 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: long getLong(java.lang.String,long)>("org.apache.cxf.stax.maxElementCount", $l15);

        <org.apache.cxf.staxutils.StaxUtils: long maxElementCount> = $l16;

        $l17 = <org.apache.cxf.staxutils.StaxUtils: long maxXMLCharacters>;

        $l18 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: long getLong(java.lang.String,long)>("org.apache.cxf.stax.maxXMLCharacters", $l17);

        <org.apache.cxf.staxutils.StaxUtils: long maxXMLCharacters> = $l18;

        $r22 = staticinvoke <org.apache.cxf.common.util.SystemPropertyAction: java.lang.String getPropertyOrNull(java.lang.String)>("org.apache.cxf.stax.allowInsecureParser");

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>($r22);

        if $z0 != 0 goto label04;

        $r26 = "1";

        $z8 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r22);

        if $z8 != 0 goto label01;

        $z9 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r22);

        if $z9 == 0 goto label02;

     label01:
        $z10 = 1;

        goto label03;

     label02:
        $z10 = 0;

     label03:
        <org.apache.cxf.staxutils.StaxUtils: boolean allowInsecureParser> = $z10;

     label04:
        $r29 = staticinvoke <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLInputFactory createXMLInputFactory(boolean)>(1);

        r30 = $r29;

        $r31 = virtualinvoke $r29.<java.lang.Object: java.lang.Class getClass()>();

        $r32 = virtualinvoke $r31.<java.lang.Class: java.lang.String getName()>();

        $z11 = virtualinvoke $r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("ctc.wstx");

        if $z11 != 0 goto label05;

        $z5 = virtualinvoke $r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("xml.xlxp");

        if $z5 != 0 goto label05;

        $z6 = virtualinvoke $r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("xml.xlxp2");

        if $z6 != 0 goto label05;

        $z7 = virtualinvoke $r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("bea.core");

        if $z7 != 0 goto label05;

        r30 = null;

     label05:
        goto label07;

     label06:
        $r28 := @caughtexception;

        r30 = null;

     label07:
        <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLInputFactory SAFE_INPUT_FACTORY> = r30;

        r33 = null;

     label08:
        $r23 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>();

        r33 = $r23;

        $r24 = virtualinvoke $r23.<java.lang.Object: java.lang.Class getClass()>();

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>();

        $z1 = virtualinvoke $r25.<java.lang.String: boolean contains(java.lang.CharSequence)>("ctc.wstx");

        if $z1 != 0 goto label09;

        $z2 = virtualinvoke $r25.<java.lang.String: boolean contains(java.lang.CharSequence)>("xml.xlxp");

        if $z2 != 0 goto label09;

        $z3 = virtualinvoke $r25.<java.lang.String: boolean contains(java.lang.CharSequence)>("xml.xlxp2");

        if $z3 != 0 goto label09;

        $z4 = virtualinvoke $r25.<java.lang.String: boolean contains(java.lang.CharSequence)>("bea.core");

        if $z4 != 0 goto label09;

        r33 = null;

     label09:
        goto label11;

     label10:
        $r27 := @caughtexception;

     label11:
        <org.apache.cxf.staxutils.StaxUtils: javax.xml.stream.XMLOutputFactory SAFE_OUTPUT_FACTORY> = r33;

        return;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label10;
    }
}
