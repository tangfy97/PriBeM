public class com.jidesoft.utils.ColorUtils extends java.lang.Object
{
    static final float OFFSET_180;
    static final float OFFSET_100;

    public void <init>()
    {
        com.jidesoft.utils.ColorUtils r0;

        r0 := @this: com.jidesoft.utils.ColorUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.Color getDerivedColor(java.awt.Color, float)
    {
        java.awt.Color r0;
        byte $b0, $b1;
        javax.swing.plaf.ColorUIResource $r3;
        float $f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;
        float[] $r1;
        int $i2, $i3, $i4;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13;

        r0 := @parameter0: java.awt.Color;

        f1 := @parameter1: float;

        if r0 == null goto label4;

        $r1 = staticinvoke <com.jidesoft.utils.ColorUtils: float[] RGBtoHSL(java.awt.Color)>(r0);

        $f0 = $r1[2];

        $d0 = (double) $f0;

        $b0 = $d0 cmpg 0.4;

        $i3 = (int) $b0;

        if $i3 >= 0 goto label1;

        $r1[2] = 0.4F;

     label1:
        $d1 = (double) f1;

        $b1 = $d1 cmpl 0.5;

        $i4 = (int) $b1;

        if $i4 <= 0 goto label2;

        $f6 = $r1[2];

        $d12 = (double) $f6;

        $f7 = $r1[2];

        $f8 = 1.0F - $f7;

        $f9 = $f8 * 2.0F;

        $d10 = (double) $f9;

        $d8 = (double) f1;

        $d9 = $d8 - 0.5;

        $d11 = $d10 * $d9;

        $d13 = $d12 + $d11;

        $f10 = (float) $d13;

        $r1[2] = $f10;

        goto label3;

     label2:
        $f2 = $r1[2];

        $d6 = (double) $f2;

        $f3 = $r1[2];

        $f4 = $f3 * 2.0F;

        $d4 = (double) $f4;

        $d2 = (double) f1;

        $d3 = 0.5 - $d2;

        $d5 = $d4 * $d3;

        $d7 = $d6 - $d5;

        $f5 = (float) $d7;

        $r1[2] = $f5;

     label3:
        $i2 = staticinvoke <com.jidesoft.utils.ColorUtils: int HSLtoRGB(float[])>($r1);

        $r3 = new javax.swing.plaf.ColorUIResource;

        specialinvoke $r3.<javax.swing.plaf.ColorUIResource: void <init>(int)>($i2);

        return $r3;

     label4:
        return null;
    }

    public static float[] RGBtoHSL(java.awt.Color)
    {
        java.awt.Color r0;
        byte $b3, $b4, $b5, $b6, $b7, $b8;
        float $f0, f1, $f2, f3, $f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, f25, f26, f27, f28, $f29;
        float[] $r1;
        int $i0, $i1, $i2, $i9, $i10;
        double $d0;

        r0 := @parameter0: java.awt.Color;

        $i0 = virtualinvoke r0.<java.awt.Color: int getRed()>();

        $f0 = (float) $i0;

        f1 = $f0 / 256.0F;

        $i1 = virtualinvoke r0.<java.awt.Color: int getGreen()>();

        $f2 = (float) $i1;

        f3 = $f2 / 256.0F;

        $i2 = virtualinvoke r0.<java.awt.Color: int getBlue()>();

        $f4 = (float) $i2;

        f5 = $f4 / 256.0F;

        $f6 = staticinvoke <java.lang.Math: float max(float,float)>(f3, f5);

        $f7 = staticinvoke <java.lang.Math: float max(float,float)>(f1, $f6);

        $f8 = staticinvoke <java.lang.Math: float min(float,float)>(f3, f5);

        $f9 = staticinvoke <java.lang.Math: float min(float,float)>(f1, $f8);

        $b3 = f1 cmpl f3;

        if $b3 != 0 goto label1;

        $b7 = f3 cmpl f5;

        if $b7 != 0 goto label1;

        f25 = 0.0F;

        f26 = 0.0F;

        f27 = f1;

        goto label7;

     label1:
        $f10 = $f9 + $f7;

        $f24 = $f10 / 2.0F;

        f27 = $f24;

        $d0 = (double) $f24;

        $b4 = $d0 cmpg 0.5;

        $i9 = (int) $b4;

        if $i9 >= 0 goto label2;

        $f23 = $f7 - $f9;

        $f22 = $f7 + $f9;

        f26 = $f23 / $f22;

        goto label3;

     label2:
        $f13 = $f7 - $f9;

        $f11 = 2.0F - $f7;

        $f12 = $f11 - $f9;

        f26 = $f13 / $f12;

     label3:
        $b5 = f1 cmpl $f7;

        if $b5 != 0 goto label4;

        $f21 = f3 - f5;

        $f20 = $f7 - $f9;

        f28 = $f21 / $f20;

        goto label6;

     label4:
        $b6 = f3 cmpl $f7;

        if $b6 != 0 goto label5;

        $f18 = f5 - f1;

        $f17 = $f7 - $f9;

        $f19 = $f18 / $f17;

        f28 = 2.0F + $f19;

        goto label6;

     label5:
        $f15 = f1 - f3;

        $f14 = $f7 - $f9;

        $f16 = $f15 / $f14;

        f28 = 4.0F + $f16;

     label6:
        $f29 = f28 / 6.0F;

        f25 = $f29;

        $b8 = $f29 cmpg 0.0F;

        $i10 = (int) $b8;

        if $i10 >= 0 goto label7;

        f25 = $f29 + 1.0F;

     label7:
        $r1 = newarray (float)[3];

        $r1[0] = f25;

        $r1[1] = f26;

        $r1[2] = f27;

        return $r1;
    }

    public static int HSLtoRGB(float[])
    {
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7, $b8, $b9, $b10, $b11, $b12;
        float[] r0;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, f31, f32, f33, f34, f35, f36, $f37, $f38, $f39;
        int $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9;

        r0 := @parameter0: float[];

        f0 = r0[0];

        f1 = r0[1];

        f2 = r0[2];

        $b0 = f1 cmpl 0.0F;

        if $b0 != 0 goto label01;

        f31 = f2;

        f32 = f2;

        f33 = f2;

        goto label17;

     label01:
        $d0 = (double) f2;

        $b1 = $d0 cmpg 0.5;

        $i24 = (int) $b1;

        if $i24 >= 0 goto label02;

        $f28 = 1.0F + f1;

        f34 = f2 * $f28;

        goto label03;

     label02:
        $f4 = f2 + f1;

        $f3 = f2 * f1;

        f34 = $f4 - $f3;

     label03:
        $f5 = 2.0F * f2;

        $f29 = $f5 - f34;

        $f30 = f0 + 0.33333334F;

        f35 = $f30;

        $b2 = $f30 cmpl 1.0F;

        $i25 = (int) $b2;

        if $i25 <= 0 goto label04;

        f35 = $f30 - 1.0F;

     label04:
        $f27 = f0 - 0.33333334F;

        f36 = $f27;

        $b3 = $f27 cmpg 0.0F;

        $i26 = (int) $b3;

        if $i26 >= 0 goto label05;

        f36 = $f27 + 1.0F;

     label05:
        $d1 = (double) f35;

        $b4 = $d1 cmpg 0.16666666666666666;

        $i27 = (int) $b4;

        if $i27 >= 0 goto label06;

        $f24 = f34 - $f29;

        $f25 = $f24 * 6.0F;

        $f26 = $f25 * f35;

        f33 = $f29 + $f26;

        goto label09;

     label06:
        $d2 = (double) f35;

        $b5 = $d2 cmpg 0.5;

        $i28 = (int) $b5;

        if $i28 >= 0 goto label07;

        f33 = f34;

        goto label09;

     label07:
        $d3 = (double) f35;

        $b6 = $d3 cmpg 0.6666666666666666;

        $i29 = (int) $b6;

        if $i29 >= 0 goto label08;

        $f21 = f34 - $f29;

        $f20 = 0.6666667F - f35;

        $f22 = $f21 * $f20;

        $f23 = $f22 * 6.0F;

        f33 = $f29 + $f23;

        goto label09;

     label08:
        f33 = $f29;

     label09:
        $d8 = (double) f0;

        $b11 = $d8 cmpg 0.16666666666666666;

        $i30 = (int) $b11;

        if $i30 >= 0 goto label10;

        $f17 = f34 - $f29;

        $f18 = $f17 * 6.0F;

        $f19 = $f18 * f0;

        f32 = $f29 + $f19;

        goto label13;

     label10:
        $d4 = (double) f0;

        $b7 = $d4 cmpg 0.5;

        $i31 = (int) $b7;

        if $i31 >= 0 goto label11;

        f32 = f34;

        goto label13;

     label11:
        $d5 = (double) f0;

        $b8 = $d5 cmpg 0.6666666666666666;

        $i32 = (int) $b8;

        if $i32 >= 0 goto label12;

        $f14 = f34 - $f29;

        $f13 = 0.6666667F - f0;

        $f15 = $f14 * $f13;

        $f16 = $f15 * 6.0F;

        f32 = $f29 + $f16;

        goto label13;

     label12:
        f32 = $f29;

     label13:
        $d9 = (double) f36;

        $b12 = $d9 cmpg 0.16666666666666666;

        $i33 = (int) $b12;

        if $i33 >= 0 goto label14;

        $f10 = f34 - $f29;

        $f11 = $f10 * 6.0F;

        $f12 = $f11 * f36;

        f31 = $f29 + $f12;

        goto label17;

     label14:
        $d6 = (double) f36;

        $b9 = $d6 cmpg 0.5;

        $i34 = (int) $b9;

        if $i34 >= 0 goto label15;

        f31 = f34;

        goto label17;

     label15:
        $d7 = (double) f36;

        $b10 = $d7 cmpg 0.6666666666666666;

        $i35 = (int) $b10;

        if $i35 >= 0 goto label16;

        $f7 = f34 - $f29;

        $f6 = 0.6666667F - f36;

        $f8 = $f7 * $f6;

        $f9 = $f8 * 6.0F;

        f31 = $f29 + $f9;

        goto label17;

     label16:
        f31 = $f29;

     label17:
        $f37 = f33 * 255.0F;

        $i13 = (int) $f37;

        $i14 = $i13 & 255;

        $i15 = $i14 << 16;

        $i16 = 0 + $i15;

        $f38 = f32 * 255.0F;

        $i17 = (int) $f38;

        $i18 = $i17 & 255;

        $i19 = $i18 << 8;

        $i20 = $i16 + $i19;

        $f39 = f31 * 255.0F;

        $i21 = (int) $f39;

        $i22 = $i21 & 255;

        $i23 = $i20 + $i22;

        return $i23;
    }

    public static int[] calculateDifferent(float[], float[])
    {
        float[] r1, r2;
        int[] r0;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r1 := @parameter0: float[];

        r2 := @parameter1: float[];

        r0 = newarray (int)[3];

        $f1 = r1[0];

        $f0 = r2[0];

        $i0 = staticinvoke <com.jidesoft.utils.ColorUtils: int floatToInteger(float,float,float,boolean)>($f1, $f0, 180.0F, 1);

        r0[0] = $i0;

        $f3 = r1[1];

        $f2 = r2[1];

        $i1 = staticinvoke <com.jidesoft.utils.ColorUtils: int floatToInteger(float,float,float,boolean)>($f3, $f2, 100.0F, 0);

        r0[1] = $i1;

        $f5 = r1[2];

        $f4 = r2[2];

        $i2 = staticinvoke <com.jidesoft.utils.ColorUtils: int floatToInteger(float,float,float,boolean)>($f5, $f4, 100.0F, 0);

        r0[2] = $i2;

        return r0;
    }

    public static float[] applyDifference(float[], int[])
    {
        float[] r0, r1;
        int[] r2;
        int $i0, $i1, $i2;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r1 := @parameter0: float[];

        r2 := @parameter1: int[];

        r0 = newarray (float)[3];

        $f0 = r1[0];

        $i0 = r2[0];

        $f1 = staticinvoke <com.jidesoft.utils.ColorUtils: float integerToFloat(float,int,float,boolean)>($f0, $i0, 180.0F, 1);

        r0[0] = $f1;

        $f2 = r1[1];

        $i1 = r2[1];

        $f3 = staticinvoke <com.jidesoft.utils.ColorUtils: float integerToFloat(float,int,float,boolean)>($f2, $i1, 100.0F, 0);

        r0[1] = $f3;

        $f4 = r1[2];

        $i2 = r2[2];

        $f5 = staticinvoke <com.jidesoft.utils.ColorUtils: float integerToFloat(float,int,float,boolean)>($f4, $i2, 100.0F, 0);

        r0[2] = $f5;

        return r0;
    }

    private static int floatToInteger(float, float, float, boolean)
    {
        byte $b0, $b4, $b5;
        int $i1, $i2, i3, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean z0;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label3;

        $f8 = f1 - f0;

        $f9 = $f8 * 2.0F;

        $f10 = $f9 * f2;

        i3 = (int) $f10;

        $f11 = (float) i3;

        $b4 = $f11 cmpl f2;

        $i10 = (int) $b4;

        if $i10 <= 0 goto label1;

        $f15 = 2.0F * f2;

        $i8 = (int) $f15;

        $i9 = i3 - $i8;

        return $i9;

     label1:
        $f13 = (float) i3;

        $f12 = neg f2;

        $b5 = $f13 cmpg $f12;

        $i11 = (int) $b5;

        if $i11 >= 0 goto label2;

        $f14 = 2.0F * f2;

        $i6 = (int) $f14;

        $i7 = i3 + $i6;

        return $i7;

     label2:
        return i3;

     label3:
        $b0 = f0 cmpl 0.0F;

        if $b0 == 0 goto label4;

        $f5 = f1 - f0;

        $f6 = $f5 * f2;

        $f7 = $f6 / f0;

        $i2 = (int) $f7;

        return $i2;

     label4:
        $f3 = f1 - f0;

        $f4 = $f3 * f2;

        $i1 = (int) $f4;

        return $i1;
    }

    private static float integerToFloat(float, int, float, boolean)
    {
        byte $b1, $b2;
        int i0, $i3, $i4;
        boolean z0;
        float f0, $f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, f14, $f15, $f16;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        f2 := @parameter2: float;

        z0 := @parameter3: boolean;

        if z0 == 0 goto label3;

        $f12 = (float) i0;

        $f11 = 2.0F * f2;

        $f13 = $f12 / $f11;

        f14 = f0 + $f13;

        $b1 = f14 cmpg 0.0F;

        $i3 = (int) $b1;

        if $i3 >= 0 goto label1;

        $f16 = f14 + 1.0F;

        return $f16;

     label1:
        $b2 = f14 cmpl 1.0F;

        $i4 = (int) $b2;

        if $i4 <= 0 goto label2;

        $f15 = f14 - 1.0F;

        return $f15;

     label2:
        return f14;

     label3:
        if i0 <= 0 goto label4;

        $f7 = 1.0F - f0;

        $f6 = (float) i0;

        $f8 = $f7 * $f6;

        $f9 = $f8 / f2;

        $f10 = f0 + $f9;

        return $f10;

     label4:
        $f1 = (float) i0;

        $f3 = f0 * $f1;

        $f4 = $f3 / f2;

        $f5 = f0 + $f4;

        return $f5;
    }

    public static transient java.awt.Color[] toColors(boolean, int[])
    {
        java.awt.Color $r2;
        int[] r0;
        int $i0, $i1, $i2, i3;
        java.awt.Color[] r1;
        boolean z0;

        z0 := @parameter0: boolean;

        r0 := @parameter1: int[];

        $i0 = lengthof r0;

        r1 = newarray (java.awt.Color)[$i0];

        i3 = 0;

     label1:
        $i1 = lengthof r0;

        if i3 >= $i1 goto label2;

        $r2 = new java.awt.Color;

        $i2 = r0[i3];

        specialinvoke $r2.<java.awt.Color: void <init>(int,boolean)>($i2, z0);

        r1[i3] = $r2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return r1;
    }

    public static java.awt.Color toGrayscale(java.awt.Color)
    {
        java.awt.Color r0, $r1;
        int $i0, $i1, $i2, i3;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @parameter0: java.awt.Color;

        $i0 = virtualinvoke r0.<java.awt.Color: int getRed()>();

        $d0 = (double) $i0;

        $d1 = $d0 * 0.3;

        $i1 = virtualinvoke r0.<java.awt.Color: int getGreen()>();

        $d2 = (double) $i1;

        $d3 = $d2 * 0.59;

        $d4 = $d1 + $d3;

        $i2 = virtualinvoke r0.<java.awt.Color: int getBlue()>();

        $d5 = (double) $i2;

        $d6 = $d5 * 0.11;

        $d7 = $d4 + $d6;

        i3 = (int) $d7;

        $r1 = new java.awt.Color;

        specialinvoke $r1.<java.awt.Color: void <init>(int,int,int)>(i3, i3, i3);

        return $r1;
    }

    public static void <clinit>()
    {
        <com.jidesoft.utils.ColorUtils: float OFFSET_100> = 100.0F;

        <com.jidesoft.utils.ColorUtils: float OFFSET_180> = 180.0F;

        return;
    }
}
