public class org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter extends org.springframework.remoting.rmi.RemoteInvocationSerializingExporter implements org.springframework.web.HttpRequestHandler
{

    public void <init>()
    {
        org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter r0;

        r0 := @this: org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter;

        specialinvoke r0.<org.springframework.remoting.rmi.RemoteInvocationSerializingExporter: void <init>()>();

        return;
    }

    public void handleRequest(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) throws javax.servlet.ServletException, java.io.IOException
    {
        javax.servlet.http.HttpServletResponse r5;
        org.springframework.remoting.support.RemoteInvocation $r2;
        javax.servlet.http.HttpServletRequest r1;
        org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter r0;
        org.springframework.web.util.NestedServletException $r7;
        org.springframework.remoting.support.RemoteInvocationResult $r4;
        java.lang.Object $r3;
        java.lang.ClassNotFoundException $r6;

        r0 := @this: org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r5 := @parameter1: javax.servlet.http.HttpServletResponse;

     label1:
        $r2 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter: org.springframework.remoting.support.RemoteInvocation readRemoteInvocation(javax.servlet.http.HttpServletRequest)>(r1);

        $r3 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter: java.lang.Object getProxy()>();

        $r4 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter: org.springframework.remoting.support.RemoteInvocationResult invokeAndCreateResult(org.springframework.remoting.support.RemoteInvocation,java.lang.Object)>($r2, $r3);

        virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter: void writeRemoteInvocationResult(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.remoting.support.RemoteInvocationResult)>(r1, r5, $r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.springframework.web.util.NestedServletException;

        specialinvoke $r7.<org.springframework.web.util.NestedServletException: void <init>(java.lang.String,java.lang.Throwable)>("Class not found during deserialization", $r6);

        throw $r7;

     label4:
        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    protected org.springframework.remoting.support.RemoteInvocation readRemoteInvocation(javax.servlet.http.HttpServletRequest) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        javax.servlet.http.HttpServletRequest r1;
        org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter r0;
        javax.servlet.ServletInputStream $r2;
        org.springframework.remoting.support.RemoteInvocation $r3;

        r0 := @this: org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r2 = interfaceinvoke r1.<javax.servlet.http.HttpServletRequest: javax.servlet.ServletInputStream getInputStream()>();

        $r3 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter: org.springframework.remoting.support.RemoteInvocation readRemoteInvocation(javax.servlet.http.HttpServletRequest,java.io.InputStream)>(r1, $r2);

        return $r3;
    }

    protected org.springframework.remoting.support.RemoteInvocation readRemoteInvocation(javax.servlet.http.HttpServletRequest, java.io.InputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.Throwable $r6;
        javax.servlet.http.HttpServletRequest r1;
        org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter r0;
        java.io.ObjectInputStream $r4;
        org.springframework.remoting.support.RemoteInvocation $r5;
        java.io.InputStream r2, $r3;

        r0 := @this: org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: java.io.InputStream;

        $r3 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter: java.io.InputStream decorateInputStream(javax.servlet.http.HttpServletRequest,java.io.InputStream)>(r1, r2);

        $r4 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter: java.io.ObjectInputStream createObjectInputStream(java.io.InputStream)>($r3);

     label1:
        $r5 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter: org.springframework.remoting.support.RemoteInvocation doReadRemoteInvocation(java.io.ObjectInputStream)>($r4);

     label2:
        virtualinvoke $r4.<java.io.ObjectInputStream: void close()>();

        return $r5;

     label3:
        $r6 := @caughtexception;

        virtualinvoke $r4.<java.io.ObjectInputStream: void close()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected java.io.InputStream decorateInputStream(javax.servlet.http.HttpServletRequest, java.io.InputStream) throws java.io.IOException
    {
        javax.servlet.http.HttpServletRequest r2;
        org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter r1;
        java.io.InputStream r0;

        r1 := @this: org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter;

        r2 := @parameter0: javax.servlet.http.HttpServletRequest;

        r0 := @parameter1: java.io.InputStream;

        return r0;
    }

    protected void writeRemoteInvocationResult(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.remoting.support.RemoteInvocationResult) throws java.io.IOException
    {
        javax.servlet.http.HttpServletRequest r3;
        org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter r1;
        javax.servlet.ServletOutputStream $r5;
        org.springframework.remoting.support.RemoteInvocationResult r4;
        javax.servlet.http.HttpServletResponse r0;
        java.lang.String $r2;

        r1 := @this: org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter;

        r3 := @parameter0: javax.servlet.http.HttpServletRequest;

        r0 := @parameter1: javax.servlet.http.HttpServletResponse;

        r4 := @parameter2: org.springframework.remoting.support.RemoteInvocationResult;

        $r2 = virtualinvoke r1.<org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter: java.lang.String getContentType()>();

        interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r2);

        $r5 = interfaceinvoke r0.<javax.servlet.http.HttpServletResponse: javax.servlet.ServletOutputStream getOutputStream()>();

        virtualinvoke r1.<org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter: void writeRemoteInvocationResult(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.remoting.support.RemoteInvocationResult,java.io.OutputStream)>(r3, r0, r4, $r5);

        return;
    }

    protected void writeRemoteInvocationResult(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, org.springframework.remoting.support.RemoteInvocationResult, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r3, $r4;
        java.lang.Throwable $r7;
        javax.servlet.http.HttpServletResponse r2;
        javax.servlet.http.HttpServletRequest r1;
        org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter r0;
        org.springframework.remoting.support.RemoteInvocationResult r6;
        java.io.ObjectOutputStream $r5;

        r0 := @this: org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter;

        r1 := @parameter0: javax.servlet.http.HttpServletRequest;

        r2 := @parameter1: javax.servlet.http.HttpServletResponse;

        r6 := @parameter2: org.springframework.remoting.support.RemoteInvocationResult;

        r3 := @parameter3: java.io.OutputStream;

        $r4 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter: java.io.OutputStream decorateOutputStream(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.io.OutputStream)>(r1, r2, r3);

        $r5 = virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter: java.io.ObjectOutputStream createObjectOutputStream(java.io.OutputStream)>($r4);

     label1:
        virtualinvoke r0.<org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter: void doWriteRemoteInvocationResult(org.springframework.remoting.support.RemoteInvocationResult,java.io.ObjectOutputStream)>(r6, $r5);

        goto label3;

     label2:
        $r7 := @caughtexception;

        virtualinvoke $r5.<java.io.ObjectOutputStream: void close()>();

        throw $r7;

     label3:
        virtualinvoke $r5.<java.io.ObjectOutputStream: void close()>();

        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    protected java.io.OutputStream decorateOutputStream(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        javax.servlet.http.HttpServletRequest r2;
        org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter r1;
        javax.servlet.http.HttpServletResponse r3;

        r1 := @this: org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter;

        r2 := @parameter0: javax.servlet.http.HttpServletRequest;

        r3 := @parameter1: javax.servlet.http.HttpServletResponse;

        r0 := @parameter2: java.io.OutputStream;

        return r0;
    }
}
