class groovyjarjarantlr.ParserGrammar extends groovyjarjarantlr.Grammar
{

    void <init>(java.lang.String, groovyjarjarantlr.Tool, java.lang.String)
    {
        groovyjarjarantlr.Tool r2;
        java.lang.String r1, r3;
        groovyjarjarantlr.ParserGrammar r0;

        r0 := @this: groovyjarjarantlr.ParserGrammar;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: groovyjarjarantlr.Tool;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<groovyjarjarantlr.Grammar: void <init>(java.lang.String,groovyjarjarantlr.Tool,java.lang.String)>(r1, r2, r3);

        return;
    }

    public void generate() throws java.io.IOException
    {
        groovyjarjarantlr.CodeGenerator $r1;
        groovyjarjarantlr.ParserGrammar r0;

        r0 := @this: groovyjarjarantlr.ParserGrammar;

        $r1 = r0.<groovyjarjarantlr.ParserGrammar: groovyjarjarantlr.CodeGenerator generator>;

        virtualinvoke $r1.<groovyjarjarantlr.CodeGenerator: void gen(groovyjarjarantlr.ParserGrammar)>(r0);

        return;
    }

    protected java.lang.String getSuperClass()
    {
        groovyjarjarantlr.ParserGrammar r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.ParserGrammar;

        $z0 = r0.<groovyjarjarantlr.ParserGrammar: boolean debuggingOutput>;

        if $z0 == 0 goto label1;

        return "debug.LLkDebuggingParser";

     label1:
        return "LLkParser";
    }

    public void processArguments(java.lang.String[])
    {
        java.lang.String[] r0;
        groovyjarjarantlr.ParserGrammar r4;
        groovyjarjarantlr.Tool $r5, $r6, $r7;
        int $i0, i1;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r4 := @this: groovyjarjarantlr.ParserGrammar;

        r0 := @parameter0: java.lang.String[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label5;

        $r1 = r0[i1];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("-trace");

        if $z0 == 0 goto label2;

        r4.<groovyjarjarantlr.ParserGrammar: boolean traceRules> = 1;

        $r7 = r4.<groovyjarjarantlr.ParserGrammar: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r7.<groovyjarjarantlr.Tool: void setArgOK(int)>(i1);

        goto label4;

     label2:
        $r2 = r0[i1];

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-traceParser");

        if $z1 == 0 goto label3;

        r4.<groovyjarjarantlr.ParserGrammar: boolean traceRules> = 1;

        $r6 = r4.<groovyjarjarantlr.ParserGrammar: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r6.<groovyjarjarantlr.Tool: void setArgOK(int)>(i1);

        goto label4;

     label3:
        $r3 = r0[i1];

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("-debug");

        if $z2 == 0 goto label4;

        r4.<groovyjarjarantlr.ParserGrammar: boolean debuggingOutput> = 1;

        $r5 = r4.<groovyjarjarantlr.ParserGrammar: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r5.<groovyjarjarantlr.Tool: void setArgOK(int)>(i1);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return;
    }

    public boolean setOption(java.lang.String, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.Tool $r5, $r10, $r12;
        java.lang.StringBuffer $r4, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r1, r2, $r8, $r9, $r11, $r13;
        groovyjarjarantlr.Token r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        groovyjarjarantlr.ParserGrammar r3;

        r3 := @this: groovyjarjarantlr.ParserGrammar;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: groovyjarjarantlr.Token;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("buildAST");

        if $z0 == 0 goto label04;

        $z7 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z7 == 0 goto label01;

        r3.<groovyjarjarantlr.ParserGrammar: boolean buildAST> = 1;

        goto label03;

     label01:
        $z8 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z8 == 0 goto label02;

        r3.<groovyjarjarantlr.ParserGrammar: boolean buildAST> = 0;

        goto label03;

     label02:
        $r12 = r3.<groovyjarjarantlr.ParserGrammar: groovyjarjarantlr.Tool antlrTool>;

        $r13 = virtualinvoke r3.<groovyjarjarantlr.ParserGrammar: java.lang.String getFilename()>();

        $i4 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i5 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r12.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("buildAST option must be true or false", $r13, $i4, $i5);

     label03:
        return 1;

     label04:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("interactive");

        if $z1 == 0 goto label08;

        $z5 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z5 == 0 goto label05;

        r3.<groovyjarjarantlr.ParserGrammar: boolean interactive> = 1;

        goto label07;

     label05:
        $z6 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z6 == 0 goto label06;

        r3.<groovyjarjarantlr.ParserGrammar: boolean interactive> = 0;

        goto label07;

     label06:
        $r10 = r3.<groovyjarjarantlr.ParserGrammar: groovyjarjarantlr.Tool antlrTool>;

        $r11 = virtualinvoke r3.<groovyjarjarantlr.ParserGrammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i3 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r10.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("interactive option must be true or false", $r11, $i2, $i3);

     label07:
        return 1;

     label08:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("ASTLabelType");

        if $z2 == 0 goto label09;

        specialinvoke r3.<groovyjarjarantlr.Grammar: boolean setOption(java.lang.String,groovyjarjarantlr.Token)>(r2, r0);

        return 1;

     label09:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("className");

        if $z3 == 0 goto label10;

        specialinvoke r3.<groovyjarjarantlr.Grammar: boolean setOption(java.lang.String,groovyjarjarantlr.Token)>(r2, r0);

        return 1;

     label10:
        $z4 = specialinvoke r3.<groovyjarjarantlr.Grammar: boolean setOption(java.lang.String,groovyjarjarantlr.Token)>(r2, r0);

        if $z4 == 0 goto label11;

        return 1;

     label11:
        $r5 = r3.<groovyjarjarantlr.ParserGrammar: groovyjarjarantlr.Tool antlrTool>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid option: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = virtualinvoke r3.<groovyjarjarantlr.ParserGrammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i1 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r5.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r8, $r9, $i0, $i1);

        return 0;
    }
}
