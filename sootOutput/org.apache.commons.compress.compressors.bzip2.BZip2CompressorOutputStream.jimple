public class org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream extends org.apache.commons.compress.compressors.CompressorOutputStream implements org.apache.commons.compress.compressors.bzip2.BZip2Constants
{
    public static final int MIN_BLOCKSIZE;
    public static final int MAX_BLOCKSIZE;
    private static final int GREATER_ICOST;
    private static final int LESSER_ICOST;
    private int last;
    private final int blockSize100k;
    private int bsBuff;
    private int bsLive;
    private final org.apache.commons.compress.compressors.bzip2.CRC crc;
    private int nInUse;
    private int nMTF;
    private int currentChar;
    private int runLength;
    private int blockCRC;
    private int combinedCRC;
    private final int allowableBlockSize;
    private org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data;
    private org.apache.commons.compress.compressors.bzip2.BlockSort blockSorter;
    private java.io.OutputStream out;

    private static void hbMakeCodeLengths(byte[], int[], org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data, int, int)
    {
        byte[] r4;
        byte $b5;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data r0;
        int[] r1, r2, r3, r5;
        boolean z0, z1, z2;
        int i0, $i1, $i2, $i3, $i4, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, i48, $i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, $i60, $i61, $i62, i63, i64, $i65, i66, $i67, $i68, $i69, $i70, i71, $i72, $i73, $i74, i75, i76, i77, i78, i79, i80, $i82, $i84, $i86, $i88, $i90, $i92, $i94, $i96;

        r4 := @parameter0: byte[];

        r5 := @parameter1: int[];

        r0 := @parameter2: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data;

        i0 := @parameter3: int;

        i7 := @parameter4: int;

        r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: int[] heap>;

        r2 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: int[] weight>;

        r3 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: int[] parent>;

        i48 = i0;

     label01:
        $i82 = (int) -1;

        i48 = i48 + $i82;

        if i48 < 0 goto label04;

        $i47 = i48 + 1;

        $i45 = r5[i48];

        if $i45 != 0 goto label02;

        $i49 = 1;

        goto label03;

     label02:
        $i49 = r5[i48];

     label03:
        $i46 = $i49 << 8;

        r2[$i47] = $i46;

        goto label01;

     label04:
        z0 = 1;

        z2 = 1;

     label05:
        if z2 == 0 goto label32;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        i50 = i0;

        i51 = 0;

        r1[0] = 0;

        r2[0] = 0;

        $i84 = (int) -2;

        r3[0] = $i84;

        i52 = 1;

     label06:
        if i52 > i0 goto label09;

        $i86 = (int) -1;

        r3[i52] = $i86;

        i51 = i51 + 1;

        r1[i51] = i52;

        i53 = i51;

        i54 = r1[i51];

     label07:
        $i42 = r2[i54];

        $i39 = i53 >> 1;

        $i40 = r1[$i39];

        $i41 = r2[$i40];

        if $i42 >= $i41 goto label08;

        $i43 = i53 >> 1;

        $i44 = r1[$i43];

        r1[i53] = $i44;

        i53 = i53 >> 1;

        goto label07;

     label08:
        r1[i53] = i54;

        i52 = i52 + 1;

        goto label06;

     label09:
        if i51 <= 1 goto label24;

        i55 = r1[1];

        $i8 = r1[i51];

        r1[1] = $i8;

        $i88 = (int) -1;

        i56 = i51 + $i88;

        i57 = 1;

        i58 = r1[1];

     label10:
        $i10 = i57 << 1;

        i59 = $i10;

        if $i10 <= i56 goto label11;

        goto label14;

     label11:
        if $i10 >= i56 goto label12;

        $i32 = $i10 + 1;

        $i33 = r1[$i32];

        $i36 = r2[$i33];

        $i34 = r1[$i10];

        $i35 = r2[$i34];

        if $i36 >= $i35 goto label12;

        i59 = $i10 + 1;

     label12:
        $i60 = r2[i58];

        $i61 = r1[i59];

        $i62 = r2[$i61];

        if $i60 >= $i62 goto label13;

        goto label14;

     label13:
        $i9 = r1[i59];

        r1[i57] = $i9;

        i57 = i59;

        goto label10;

     label14:
        r1[i57] = i58;

        $i37 = r1[1];

        $i11 = r1[i56];

        r1[1] = $i11;

        $i90 = (int) -1;

        i63 = i56 + $i90;

        i64 = 1;

        $i38 = r1[1];

     label15:
        $i65 = i64 << 1;

        i66 = $i65;

        if $i65 <= i63 goto label16;

        goto label19;

     label16:
        if $i65 >= i63 goto label17;

        $i25 = $i65 + 1;

        $i26 = r1[$i25];

        $i29 = r2[$i26];

        $i27 = r1[$i65];

        $i28 = r2[$i27];

        if $i29 >= $i28 goto label17;

        i66 = $i65 + 1;

     label17:
        $i67 = r2[$i38];

        $i68 = r1[i66];

        $i69 = r2[$i68];

        if $i67 >= $i69 goto label18;

        goto label19;

     label18:
        $i12 = r1[i66];

        r1[i64] = $i12;

        i64 = i66;

        goto label15;

     label19:
        r1[i64] = $i38;

        i50 = i50 + 1;

        r3[$i37] = i50;

        r3[i55] = i50;

        $i30 = r2[i55];

        $i31 = r2[$i37];

        $i22 = i50;

        $i92 = (int) -256;

        $i14 = $i30 & $i92;

        $i94 = (int) -256;

        $i13 = $i31 & $i94;

        $i18 = $i14 + $i13;

        $i16 = $i30 & 255;

        $i15 = $i31 & 255;

        if $i16 <= $i15 goto label20;

        $i70 = $i30 & 255;

        goto label21;

     label20:
        $i70 = $i31 & 255;

     label21:
        $i17 = 1 + $i70;

        $i19 = $i18 | $i17;

        r2[$i22] = $i19;

        $i96 = (int) -1;

        r3[i50] = $i96;

        i51 = i63 + 1;

        r1[i51] = i50;

        i71 = i51;

        $i23 = r1[i51];

        $i24 = r2[$i23];

     label22:
        $i72 = i71 >> 1;

        $i73 = r1[$i72];

        $i74 = r2[$i73];

        if $i24 >= $i74 goto label23;

        $i20 = i71 >> 1;

        $i21 = r1[$i20];

        r1[i71] = $i21;

        i71 = i71 >> 1;

        goto label22;

     label23:
        r1[i71] = $i23;

        goto label09;

     label24:
        i75 = 1;

     label25:
        if i75 > i0 goto label29;

        i76 = 0;

        i77 = i75;

     label26:
        $i4 = r3[i77];

        if $i4 < 0 goto label27;

        i77 = $i4;

        i76 = i76 + 1;

        goto label26;

     label27:
        $i6 = i75 - 1;

        $b5 = (byte) i76;

        r4[$i6] = $b5;

        if i76 <= i7 goto label28;

        z0 = 1;

        z2 = 1;

        z1 = 1;

     label28:
        i75 = i75 + 1;

        goto label25;

     label29:
        if z1 == 0 goto label31;

        i78 = 1;

     label30:
        if i78 >= i0 goto label31;

        $i1 = r2[i78];

        i79 = $i1 >> 8;

        $i2 = i79 >> 1;

        i80 = 1 + $i2;

        $i3 = i80 << 8;

        r2[i78] = $i3;

        i78 = i78 + 1;

        goto label30;

     label31:
        goto label05;

     label32:
        return;
    }

    public static int chooseBlockSize(long)
    {
        byte $b1;
        int $i5, $i6;
        long l0, $l2, $l3, $l4;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        $i6 = (int) $b1;

        if $i6 <= 0 goto label1;

        $l2 = l0 / 132000L;

        $l3 = $l2 + 1L;

        $l4 = staticinvoke <java.lang.Math: long min(long,long)>($l3, 9L);

        $i5 = (int) $l4;

        goto label2;

     label1:
        $i5 = 9;

     label2:
        return $i5;
    }

    public void <init>(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void <init>(java.io.OutputStream,int)>(r1, 9);

        return;
    }

    public void <init>(java.io.OutputStream, int) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        org.apache.commons.compress.compressors.bzip2.CRC $r15;
        int i0, $i1, $i2, $i3, $i5;
        java.lang.String $r8, $r14;
        java.io.OutputStream r2;
        java.lang.IllegalArgumentException $r17, $r19;
        java.lang.StringBuilder $r5, $r6, $r7, $r11, $r12, $r13, $r16, $r18;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        r2 := @parameter0: java.io.OutputStream;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.compress.compressors.CompressorOutputStream: void <init>()>();

        $r15 = new org.apache.commons.compress.compressors.bzip2.CRC;

        specialinvoke $r15.<org.apache.commons.compress.compressors.bzip2.CRC: void <init>()>();

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.CRC crc> = $r15;

        $i5 = (int) -1;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int currentChar> = $i5;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int runLength> = 0;

        if i0 >= 1 goto label1;

        $r17 = new java.lang.IllegalArgumentException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("blockSize(");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") < 1");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r17;

     label1:
        if i0 <= 9 goto label2;

        $r19 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("blockSize(");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") > 9");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r19;

     label2:
        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int blockSize100k> = i0;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out> = r2;

        $i1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int blockSize100k>;

        $i2 = $i1 * 100000;

        $i3 = $i2 - 20;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int allowableBlockSize> = $i3;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void init()>();

        return;
    }

    public void write(int) throws java.io.IOException
    {
        java.io.OutputStream $r1;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        int i0;
        java.io.IOException $r2;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out>;

        if $r1 == null goto label1;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void write0(int)>(i0);

        goto label2;

     label1:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("closed");

        throw $r2;

     label2:
        return;
    }

    private void writeRun() throws java.io.IOException
    {
        byte[] $r4, $r5, $r6, r8, r9;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        byte b3, $b17;
        org.apache.commons.compress.compressors.bzip2.CRC $r3;
        int i0, $i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i19, i20, i21, $i23;
        boolean[] $r2, $r7;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data r1;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        i0 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int last>;

        $i1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int allowableBlockSize>;

        if i0 >= $i1 goto label6;

        i2 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int currentChar>;

        r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        $r2 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: boolean[] inUse>;

        $r2[i2] = 1;

        b3 = (byte) i2;

        i20 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int runLength>;

        $r3 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.CRC crc>;

        virtualinvoke $r3.<org.apache.commons.compress.compressors.bzip2.CRC: void updateCRC(int,int)>(i2, i20);

        tableswitch(i20)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            default: goto label4;
        };

     label1:
        $r6 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[] block>;

        $i11 = i0 + 2;

        $r6[$i11] = b3;

        $i12 = i0 + 1;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int last> = $i12;

        goto label5;

     label2:
        $r4 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[] block>;

        $i8 = i0 + 2;

        $r4[$i8] = b3;

        $r5 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[] block>;

        $i9 = i0 + 3;

        $r5[$i9] = b3;

        $i10 = i0 + 2;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int last> = $i10;

        goto label5;

     label3:
        r8 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[] block>;

        $i4 = i0 + 2;

        r8[$i4] = b3;

        $i5 = i0 + 3;

        r8[$i5] = b3;

        $i6 = i0 + 4;

        r8[$i6] = b3;

        $i7 = i0 + 3;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int last> = $i7;

        goto label5;

     label4:
        $i23 = (int) -4;

        i21 = i20 + $i23;

        $r7 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: boolean[] inUse>;

        $r7[i21] = 1;

        r9 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[] block>;

        $i13 = i0 + 2;

        r9[$i13] = b3;

        $i14 = i0 + 3;

        r9[$i14] = b3;

        $i15 = i0 + 4;

        r9[$i15] = b3;

        $i16 = i0 + 5;

        r9[$i16] = b3;

        $i18 = i0 + 6;

        $b17 = (byte) i21;

        r9[$i18] = $b17;

        $i19 = i0 + 5;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int last> = $i19;

     label5:
        goto label7;

     label6:
        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void endBlock()>();

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void initBlock()>();

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void writeRun()>();

     label7:
        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        virtualinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void finish()>();

        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;
    }

    public void finish() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        java.lang.Throwable $r2;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        int $i0, $i2;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out>;

        if $r1 == null goto label6;

     label1:
        $i0 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int runLength>;

        if $i0 <= 0 goto label2;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void writeRun()>();

     label2:
        $i2 = (int) -1;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int currentChar> = $i2;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void endBlock()>();

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void endCompression()>();

     label3:
        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out> = null;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data> = null;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BlockSort blockSorter> = null;

        goto label6;

     label4:
        $r2 := @caughtexception;

     label5:
        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out> = null;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data> = null;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BlockSort blockSorter> = null;

        throw $r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public void close() throws java.io.IOException
    {
        java.io.OutputStream $r1, r2;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out>;

        if $r1 == null goto label1;

        r2 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out>;

        virtualinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void finish()>();

        virtualinvoke r2.<java.io.OutputStream: void close()>();

     label1:
        return;
    }

    public void flush() throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out>;

        if r1 == null goto label1;

        virtualinvoke r1.<java.io.OutputStream: void flush()>();

     label1:
        return;
    }

    private void init() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        int $i0, $i1, $i2;
        org.apache.commons.compress.compressors.bzip2.BlockSort $r2;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data $r1, $r3;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(66);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(90);

        $r1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data;

        $i0 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int blockSize100k>;

        specialinvoke $r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: void <init>(int)>($i0);

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data> = $r1;

        $r2 = new org.apache.commons.compress.compressors.bzip2.BlockSort;

        $r3 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        specialinvoke $r2.<org.apache.commons.compress.compressors.bzip2.BlockSort: void <init>(org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data)>($r3);

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BlockSort blockSorter> = $r2;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(104);

        $i1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int blockSize100k>;

        $i2 = 48 + $i1;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>($i2);

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int combinedCRC> = 0;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void initBlock()>();

        return;
    }

    private void initBlock()
    {
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        org.apache.commons.compress.compressors.bzip2.CRC $r1;
        boolean[] r3;
        int i0, $i2, $i4;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data $r2;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.CRC crc>;

        virtualinvoke $r1.<org.apache.commons.compress.compressors.bzip2.CRC: void initialiseCRC()>();

        $i2 = (int) -1;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int last> = $i2;

        $r2 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        r3 = $r2.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: boolean[] inUse>;

        i0 = 256;

     label1:
        $i4 = (int) -1;

        i0 = i0 + $i4;

        if i0 < 0 goto label2;

        r3[i0] = 0;

        goto label1;

     label2:
        return;
    }

    private void endBlock() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        org.apache.commons.compress.compressors.bzip2.CRC $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.CRC crc>;

        $i0 = virtualinvoke $r1.<org.apache.commons.compress.compressors.bzip2.CRC: int getFinalCRC()>();

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int blockCRC> = $i0;

        $i1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int combinedCRC>;

        $i4 = $i1 << 1;

        $i2 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int combinedCRC>;

        $i3 = $i2 >>> 31;

        $i5 = $i4 | $i3;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int combinedCRC> = $i5;

        $i7 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int combinedCRC>;

        $i6 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int blockCRC>;

        $i8 = $i7 ^ $i6;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int combinedCRC> = $i8;

        $i9 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int last>;

        $i12 = (int) -1;

        if $i9 != $i12 goto label1;

        return;

     label1:
        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void blockSort()>();

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(49);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(65);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(89);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(38);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(83);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(89);

        $i10 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int blockCRC>;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutInt(int)>($i10);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsW(int,int)>(1, 0);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void moveToFrontCodeAndSend()>();

        return;
    }

    private void endCompression() throws java.io.IOException
    {
        int $i0;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(23);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(114);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(69);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(56);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(80);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutUByte(int)>(144);

        $i0 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int combinedCRC>;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsPutInt(int)>($i0);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsFinishedWithStream()>();

        return;
    }

    public final int getBlockSize()
    {
        int $i0;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        $i0 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int blockSize100k>;

        return $i0;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r0;
        java.lang.IndexOutOfBoundsException $r27, $r29, $r31;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r1;
        byte $b5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r16, $r17, $r18, $r22, $r23, $r24, $r26, $r28, $r30;
        int i0, $i1, $i2, i3, $i4, $i6, i7, $i8;
        java.lang.String $r13, $r19, $r25;
        java.io.OutputStream $r2;
        java.io.IOException $r32;

        r1 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        r0 := @parameter0: byte[];

        i7 := @parameter1: int;

        i0 := @parameter2: int;

        if i7 >= 0 goto label1;

        $r27 = new java.lang.IndexOutOfBoundsException;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("offs(");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") < 0.");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r25);

        throw $r27;

     label1:
        if i0 >= 0 goto label2;

        $r29 = new java.lang.IndexOutOfBoundsException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("len(");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") < 0.");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r29.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r19);

        throw $r29;

     label2:
        $i2 = i7 + i0;

        $i1 = lengthof r0;

        if $i2 <= $i1 goto label3;

        $r31 = new java.lang.IndexOutOfBoundsException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("offs(");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") + len(");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") > buf.length(");

        $i6 = lengthof r0;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r13);

        throw $r31;

     label3:
        $r2 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out>;

        if $r2 != null goto label4;

        $r32 = new java.io.IOException;

        specialinvoke $r32.<java.io.IOException: void <init>(java.lang.String)>("stream closed");

        throw $r32;

     label4:
        i3 = i7 + i0;

     label5:
        if i7 >= i3 goto label6;

        $i4 = i7;

        i7 = i7 + 1;

        $b5 = r0[$i4];

        $i8 = (int) $b5;

        specialinvoke r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void write0(int)>($i8);

        goto label5;

     label6:
        return;
    }

    private void write0(int) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i10, $i12;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        i7 := @parameter0: int;

        $i0 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int currentChar>;

        $i10 = (int) -1;

        if $i0 == $i10 goto label2;

        i8 = i7 & 255;

        $i4 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int currentChar>;

        if $i4 != i8 goto label1;

        $i5 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int runLength>;

        $i6 = $i5 + 1;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int runLength> = $i6;

        if $i6 <= 254 goto label3;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void writeRun()>();

        $i12 = (int) -1;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int currentChar> = $i12;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int runLength> = 0;

        goto label3;

     label1:
        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void writeRun()>();

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int runLength> = 1;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int currentChar> = i8;

        goto label3;

     label2:
        $i1 = i7 & 255;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int currentChar> = $i1;

        $i2 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int runLength>;

        $i3 = $i2 + 1;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int runLength> = $i3;

     label3:
        return;
    }

    private static void hbAssignCodes(int[], byte[], int, int, int)
    {
        byte[] r0;
        short $s4, $s8;
        byte $b3;
        int[] r1;
        int i0, i1, i2, i5, i6, i7, $i9;

        r1 := @parameter0: int[];

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i5 = 0;

        i6 = i0;

     label1:
        if i6 > i1 goto label5;

        i7 = 0;

     label2:
        if i7 >= i2 goto label4;

        $b3 = r0[i7];

        $s8 = (short) $b3;

        $s4 = $s8 & 255;

        $i9 = (int) $s4;

        if $i9 != i6 goto label3;

        r1[i7] = i5;

        i5 = i5 + 1;

     label3:
        i7 = i7 + 1;

        goto label2;

     label4:
        i5 = i5 << 1;

        i6 = i6 + 1;

        goto label1;

     label5:
        return;
    }

    private void bsFinishedWithStream() throws java.io.IOException
    {
        java.io.OutputStream $r1;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

     label1:
        $i0 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsLive>;

        if $i0 <= 0 goto label2;

        $i1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsBuff>;

        i2 = $i1 >> 24;

        $r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out>;

        virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i2);

        $i3 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsBuff>;

        $i4 = $i3 << 8;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsBuff> = $i4;

        $i5 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsLive>;

        $i6 = $i5 - 8;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsLive> = $i6;

        goto label1;

     label2:
        return;
    }

    private void bsW(int, int) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i11;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out>;

        i8 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsLive>;

        i9 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsBuff>;

     label1:
        if i8 < 8 goto label2;

        $i7 = i9 >> 24;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i7);

        i9 = i9 << 8;

        $i11 = (int) -8;

        i8 = i8 + $i11;

        goto label1;

     label2:
        $i2 = 32 - i8;

        $i3 = $i2 - i1;

        $i4 = i0 << $i3;

        $i5 = i9 | $i4;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsBuff> = $i5;

        $i6 = i8 + i1;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsLive> = $i6;

        return;
    }

    private void bsPutUByte(int) throws java.io.IOException
    {
        int i0;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        i0 := @parameter0: int;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsW(int,int)>(8, i0);

        return;
    }

    private void bsPutInt(int) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        i0 := @parameter0: int;

        $i1 = i0 >> 24;

        $i2 = $i1 & 255;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsW(int,int)>(8, $i2);

        $i3 = i0 >> 16;

        $i4 = $i3 & 255;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsW(int,int)>(8, $i4);

        $i5 = i0 >> 8;

        $i6 = $i5 & 255;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsW(int,int)>(8, $i6);

        $i7 = i0 & 255;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsW(int,int)>(8, $i7);

        return;
    }

    private void sendMTFValues() throws java.io.IOException
    {
        byte[] r3;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        byte $b10, $b11, $b12, $b13, $b14, $b15;
        int $i0, i1, $i2, $i3, $i4, $i5, i6, i7, $i9, $i17, $i19;
        byte[][] r2;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data $r1;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        r2 = $r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[][] sendMTFValues_len>;

        $i0 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int nInUse>;

        i1 = $i0 + 2;

        i6 = 6;

     label1:
        $i17 = (int) -1;

        i6 = i6 + $i17;

        if i6 < 0 goto label4;

        r3 = r2[i6];

        i7 = i1;

     label2:
        $i19 = (int) -1;

        i7 = i7 + $i19;

        if i7 < 0 goto label3;

        r3[i7] = 15;

        goto label2;

     label3:
        goto label1;

     label4:
        $i2 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int nMTF>;

        if $i2 >= 200 goto label5;

        $b15 = 2;

        $b14 = 2;

        $b13 = 2;

        $b12 = 2;

        $b11 = 2;

        $b10 = 2;

        goto label9;

     label5:
        $i3 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int nMTF>;

        if $i3 >= 600 goto label6;

        $b15 = 3;

        $b14 = 3;

        $b13 = 3;

        $b12 = 3;

        $b11 = 3;

        $b10 = 3;

        goto label9;

     label6:
        $i4 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int nMTF>;

        if $i4 >= 1200 goto label7;

        $b15 = 4;

        $b14 = 4;

        $b13 = 4;

        $b12 = 4;

        $b11 = 4;

        $b10 = 4;

        goto label9;

     label7:
        $i5 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int nMTF>;

        if $i5 >= 2400 goto label8;

        $b15 = 5;

        $b14 = 5;

        $b13 = 5;

        $b12 = 5;

        $b11 = 5;

        $b10 = 5;

        goto label9;

     label8:
        $b15 = 6;

        $b14 = 6;

        $b13 = 6;

        $b12 = 6;

        $b11 = 6;

        $b10 = 6;

     label9:
        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void sendMTFValues0(int,int)>($b14, i1);

        $i9 = specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int sendMTFValues1(int,int)>($b10, i1);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void sendMTFValues2(int,int)>($b12, $i9);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void sendMTFValues3(int,int)>($b13, i1);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void sendMTFValues4()>();

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void sendMTFValues5(int,int)>($b15, $i9);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void sendMTFValues6(int,int)>($b11, i1);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void sendMTFValues7()>();

        return;
    }

    private void sendMTFValues0(int, int)
    {
        byte[] $r5;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        int[] r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13, $i14, i15, $i17, $i19, $i21;
        byte[][] r2;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data $r1, $r3;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        r2 = $r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[][] sendMTFValues_len>;

        $r3 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        r4 = $r3.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: int[] mtfFreq>;

        i8 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int nMTF>;

        i9 = 0;

        i10 = i0;

     label1:
        if i10 <= 0 goto label8;

        i1 = i8 / i10;

        i11 = i9 - 1;

        i12 = 0;

        i13 = i2 - 1;

     label2:
        if i12 >= i1 goto label3;

        if i11 >= i13 goto label3;

        i11 = i11 + 1;

        $i7 = r4[i11];

        i12 = i12 + $i7;

        goto label2;

     label3:
        if i11 <= i9 goto label4;

        if i10 == i0 goto label4;

        if i10 == 1 goto label4;

        $i3 = i0 - i10;

        $i4 = $i3 & 1;

        if $i4 == 0 goto label4;

        $i5 = i11;

        $i17 = (int) -1;

        i11 = i11 + $i17;

        $i6 = r4[$i5];

        i12 = i12 - $i6;

     label4:
        $i14 = i10 - 1;

        $r5 = r2[$i14];

        i15 = i2;

     label5:
        $i19 = (int) -1;

        i15 = i15 + $i19;

        if i15 < 0 goto label7;

        if i15 < i9 goto label6;

        if i15 > i11 goto label6;

        $r5[i15] = 0;

        goto label5;

     label6:
        $r5[i15] = 15;

        goto label5;

     label7:
        i9 = i11 + 1;

        i8 = i8 - i12;

        $i21 = (int) -1;

        i10 = i10 + $i21;

        goto label1;

     label8:
        return;
    }

    private int sendMTFValues1(int, int)
    {
        byte[] r6, r8, r9, r10, r11, r12, r13, $r16, $r17;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        byte $b10, $b14, $b20, $b23, $b26, $b29, $b32, $b35;
        byte[][] r7;
        short $s15, $s16, $s18, $s21, $s24, $s27, $s30, $s33, $s36, s43, s44, s45, s46, s47, s48, s57, $s65, $s68, $s71, $s74, $s77, $s80, $s87;
        char[] r5;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data r1, $r14;
        int[][] r2;
        int[] r3, $r15, r18, r19;
        short[] r4;
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i12, $i13, $i17, $i22, $i25, $i28, $i31, $i34, $i37, i38, i39, i40, i41, i42, i49, i50, i51, i53, i54, i55, i56, i58, i59, $i61, $i63, $i64, $i66, $i67, $i69, $i70, $i72, $i73, $i75, $i76, $i78, $i79, $i81, $i83, $i85, $i86, $i88, $i89, $i91, $i93, $i94, $i95, $i96, $i97;
        char $c11, c19, c52;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        i1 := @parameter0: int;

        i3 := @parameter1: int;

        r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        r2 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: int[][] sendMTFValues_rfreq>;

        r3 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: int[] sendMTFValues_fave>;

        r4 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: short[] sendMTFValues_cost>;

        r5 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: char[] sfmap>;

        r6 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[] selector>;

        r7 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[][] sendMTFValues_len>;

        r8 = r7[0];

        r9 = r7[1];

        r10 = r7[2];

        r11 = r7[3];

        r12 = r7[4];

        r13 = r7[5];

        i0 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int nMTF>;

        i38 = 0;

        i39 = 0;

     label01:
        if i39 >= 4 goto label24;

        i40 = i1;

     label02:
        $i61 = (int) -1;

        i40 = i40 + $i61;

        if i40 < 0 goto label05;

        r3[i40] = 0;

        r18 = r2[i40];

        i41 = i3;

     label03:
        $i63 = (int) -1;

        i41 = i41 + $i63;

        if i41 < 0 goto label04;

        r18[i41] = 0;

        goto label03;

     label04:
        goto label02;

     label05:
        i38 = 0;

        i42 = 0;

     label06:
        $i2 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int nMTF>;

        if i42 >= $i2 goto label21;

        $i4 = i42 + 50;

        $i6 = $i4 - 1;

        $i5 = i0 - 1;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i5);

        if i1 != 6 goto label09;

        s43 = 0;

        s44 = 0;

        s45 = 0;

        s46 = 0;

        s47 = 0;

        s48 = 0;

        i49 = i42;

     label07:
        if i49 > $i7 goto label08;

        c19 = r5[i49];

        $i64 = (int) c19;

        $b20 = r8[$i64];

        $s65 = (short) $b20;

        $s21 = $s65 & 255;

        $i66 = (int) $s21;

        $i22 = s43 + $i66;

        s43 = (short) $i22;

        $i67 = (int) c19;

        $b23 = r9[$i67];

        $s68 = (short) $b23;

        $s24 = $s68 & 255;

        $i69 = (int) $s24;

        $i25 = s44 + $i69;

        s44 = (short) $i25;

        $i70 = (int) c19;

        $b26 = r10[$i70];

        $s71 = (short) $b26;

        $s27 = $s71 & 255;

        $i72 = (int) $s27;

        $i28 = s45 + $i72;

        s45 = (short) $i28;

        $i73 = (int) c19;

        $b29 = r11[$i73];

        $s74 = (short) $b29;

        $s30 = $s74 & 255;

        $i75 = (int) $s30;

        $i31 = s46 + $i75;

        s46 = (short) $i31;

        $i76 = (int) c19;

        $b32 = r12[$i76];

        $s77 = (short) $b32;

        $s33 = $s77 & 255;

        $i78 = (int) $s33;

        $i34 = s47 + $i78;

        s47 = (short) $i34;

        $i79 = (int) c19;

        $b35 = r13[$i79];

        $s80 = (short) $b35;

        $s36 = $s80 & 255;

        $i81 = (int) $s36;

        $i37 = s48 + $i81;

        s48 = (short) $i37;

        i49 = i49 + 1;

        goto label07;

     label08:
        r4[0] = s43;

        r4[1] = s44;

        r4[2] = s45;

        r4[3] = s46;

        r4[4] = s47;

        r4[5] = s48;

        goto label15;

     label09:
        i50 = i1;

     label10:
        $i83 = (int) -1;

        i50 = i50 + $i83;

        if i50 < 0 goto label11;

        r4[i50] = 0;

        goto label10;

     label11:
        i51 = i42;

     label12:
        if i51 > $i7 goto label15;

        c52 = r5[i51];

        i53 = i1;

     label13:
        $i85 = (int) -1;

        i53 = i53 + $i85;

        if i53 < 0 goto label14;

        $s16 = r4[i53];

        $r17 = r7[i53];

        $i86 = (int) c52;

        $b14 = $r17[$i86];

        $s87 = (short) $b14;

        $s15 = $s87 & 255;

        $i88 = (int) $s16;

        $i89 = (int) $s15;

        $i17 = $i88 + $i89;

        $s18 = (short) $i17;

        r4[i53] = $s18;

        goto label13;

     label14:
        i51 = i51 + 1;

        goto label12;

     label15:
        $i91 = (int) -1;

        i54 = $i91;

        i55 = i1;

        i56 = 999999999;

     label16:
        $i93 = (int) -1;

        i55 = i55 + $i93;

        if i55 < 0 goto label18;

        s57 = r4[i55];

        $i94 = (int) s57;

        if $i94 >= i56 goto label17;

        $i95 = (int) s57;

        i56 = $i95;

        i54 = i55;

     label17:
        goto label16;

     label18:
        $i8 = r3[i54];

        $i9 = $i8 + 1;

        r3[i54] = $i9;

        $b10 = (byte) i54;

        r6[i38] = $b10;

        i38 = i38 + 1;

        r19 = r2[i54];

        i58 = i42;

     label19:
        if i58 > $i7 goto label20;

        $c11 = r5[i58];

        $i96 = (int) $c11;

        $i12 = r19[$i96];

        $i13 = $i12 + 1;

        $i97 = (int) $c11;

        r19[$i97] = $i13;

        i58 = i58 + 1;

        goto label19;

     label20:
        i42 = $i7 + 1;

        goto label06;

     label21:
        i59 = 0;

     label22:
        if i59 >= i1 goto label23;

        $r16 = r7[i59];

        $r15 = r2[i59];

        $r14 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        staticinvoke <org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void hbMakeCodeLengths(byte[],int[],org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data,int,int)>($r16, $r15, $r14, i3, 20);

        i59 = i59 + 1;

        goto label22;

     label23:
        i39 = i39 + 1;

        goto label01;

     label24:
        return i38;
    }

    private void sendMTFValues2(int, int)
    {
        byte[] r2, $r3, $r4;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        byte b2, $b3, b4, $b5, b8;
        int i0, i1, i6, i7, i9, $i11, $i12, $i13;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data r1;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        r2 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[] sendMTFValues2_pos>;

        i6 = i0;

     label1:
        $i11 = (int) -1;

        i6 = i6 + $i11;

        if i6 < 0 goto label2;

        $b5 = (byte) i6;

        r2[i6] = $b5;

        goto label1;

     label2:
        i7 = 0;

     label3:
        if i7 >= i1 goto label6;

        $r3 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[] selector>;

        b2 = $r3[i7];

        b8 = r2[0];

        i9 = 0;

     label4:
        $i12 = (int) b2;

        $i13 = (int) b8;

        if $i12 == $i13 goto label5;

        i9 = i9 + 1;

        b4 = b8;

        b8 = r2[i9];

        r2[i9] = b4;

        goto label4;

     label5:
        r2[0] = b8;

        $r4 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[] selectorMtf>;

        $b3 = (byte) i9;

        $r4[i7] = $b3;

        i7 = i7 + 1;

        goto label3;

     label6:
        return;
    }

    private void sendMTFValues3(int, int)
    {
        byte[] r5, $r6;
        int[][] r2;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        short s3, s5, s6, $s10;
        byte $b2;
        int[] $r7;
        int i0, i1, i4, i7, $i9, $i11, $i12;
        byte[][] r4;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data $r1, $r3;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        r2 = $r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: int[][] sendMTFValues_code>;

        $r3 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        r4 = $r3.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[][] sendMTFValues_len>;

        i4 = 0;

     label1:
        if i4 >= i0 goto label6;

        s5 = 32;

        s6 = 0;

        r5 = r4[i4];

        i7 = i1;

     label2:
        $i9 = (int) -1;

        i7 = i7 + $i9;

        if i7 < 0 goto label5;

        $b2 = r5[i7];

        $s10 = (short) $b2;

        s3 = $s10 & 255;

        $i11 = (int) s3;

        if $i11 <= s6 goto label3;

        s6 = s3;

     label3:
        $i12 = (int) s3;

        if $i12 >= s5 goto label4;

        s5 = s3;

     label4:
        goto label2;

     label5:
        $r7 = r2[i4];

        $r6 = r4[i4];

        staticinvoke <org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void hbAssignCodes(int[],byte[],int,int,int)>($r7, $r6, s5, s6, i1);

        i4 = i4 + 1;

        goto label1;

     label6:
        return;
    }

    private void sendMTFValues4() throws java.io.IOException
    {
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        byte $b11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i12, i13, i14, i15, $i17, $i19, $i21;
        boolean $z0, $z1, $z2, $z3;
        java.io.OutputStream r5;
        boolean[] r2, r4;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data $r1, $r3;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        r2 = $r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: boolean[] inUse>;

        $r3 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        r4 = $r3.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: boolean[] sentMTFValues4_inUse16>;

        i7 = 16;

     label01:
        $i17 = (int) -1;

        i7 = i7 + $i17;

        if i7 < 0 goto label04;

        r4[i7] = 0;

        i8 = i7 * 16;

        i9 = 16;

     label02:
        $i19 = (int) -1;

        i9 = i9 + $i19;

        if i9 < 0 goto label03;

        $i6 = i8 + i9;

        $z3 = r2[$i6];

        if $z3 == 0 goto label02;

        r4[i7] = 1;

        goto label02;

     label03:
        goto label01;

     label04:
        i10 = 0;

     label05:
        if i10 >= 16 goto label08;

        $z2 = r4[i10];

        if $z2 == 0 goto label06;

        $b11 = 1;

        goto label07;

     label06:
        $b11 = 0;

     label07:
        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsW(int,int)>(1, $b11);

        i10 = i10 + 1;

        goto label05;

     label08:
        r5 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out>;

        i12 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsLive>;

        i13 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsBuff>;

        i14 = 0;

     label09:
        if i14 >= 16 goto label15;

        $z0 = r4[i14];

        if $z0 == 0 goto label14;

        i0 = i14 * 16;

        i15 = 0;

     label10:
        if i15 >= 16 goto label14;

     label11:
        if i12 < 8 goto label12;

        $i5 = i13 >> 24;

        virtualinvoke r5.<java.io.OutputStream: void write(int)>($i5);

        i13 = i13 << 8;

        $i21 = (int) -8;

        i12 = i12 + $i21;

        goto label11;

     label12:
        $i1 = i0 + i15;

        $z1 = r2[$i1];

        if $z1 == 0 goto label13;

        $i2 = 32 - i12;

        $i3 = $i2 - 1;

        $i4 = 1 << $i3;

        i13 = i13 | $i4;

     label13:
        i12 = i12 + 1;

        i15 = i15 + 1;

        goto label10;

     label14:
        i14 = i14 + 1;

        goto label09;

     label15:
        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsBuff> = i13;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsLive> = i12;

        return;
    }

    private void sendMTFValues5(int, int) throws java.io.IOException
    {
        byte[] r3;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        short s3, $s13;
        byte $b2;
        int i0, i1, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, $i14, $i16, $i18;
        java.io.OutputStream r1;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data $r2;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsW(int,int)>(3, i0);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsW(int,int)>(15, i1);

        r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out>;

        $r2 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        r3 = $r2.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[] selectorMtf>;

        i9 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsLive>;

        i10 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsBuff>;

        i11 = 0;

     label1:
        if i11 >= i1 goto label7;

        i12 = 0;

        $b2 = r3[i11];

        $s13 = (short) $b2;

        s3 = $s13 & 255;

     label2:
        $i14 = (int) s3;

        if i12 >= $i14 goto label5;

     label3:
        if i9 < 8 goto label4;

        $i8 = i10 >> 24;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i8);

        i10 = i10 << 8;

        $i16 = (int) -8;

        i9 = i9 + $i16;

        goto label3;

     label4:
        $i5 = 32 - i9;

        $i6 = $i5 - 1;

        $i7 = 1 << $i6;

        i10 = i10 | $i7;

        i9 = i9 + 1;

        i12 = i12 + 1;

        goto label2;

     label5:
        if i9 < 8 goto label6;

        $i4 = i10 >> 24;

        virtualinvoke r1.<java.io.OutputStream: void write(int)>($i4);

        i10 = i10 << 8;

        $i18 = (int) -8;

        i9 = i9 + $i18;

        goto label5;

     label6:
        i9 = i9 + 1;

        i11 = i11 + 1;

        goto label1;

     label7:
        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsBuff> = i10;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsLive> = i9;

        return;
    }

    private void sendMTFValues6(int, int) throws java.io.IOException
    {
        byte[] r4;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        byte $b1, $b6;
        byte[][] r2;
        short s7, $s26;
        int i0, $i2, $i3, $i4, i5, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, i22, $i23, $i25, $i27, $i29, $i30, $i32, $i34, $i36;
        java.io.OutputStream r3;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data $r1;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        $r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        r2 = $r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[][] sendMTFValues_len>;

        r3 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out>;

        i18 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsLive>;

        i19 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsBuff>;

        i20 = 0;

     label01:
        if i20 >= i0 goto label14;

        r4 = r2[i20];

        $b1 = r4[0];

        $i23 = (int) $b1;

        i21 = $i23 & 255;

     label02:
        if i18 < 8 goto label03;

        $i17 = i19 >> 24;

        virtualinvoke r3.<java.io.OutputStream: void write(int)>($i17);

        i19 = i19 << 8;

        $i25 = (int) -8;

        i18 = i18 + $i25;

        goto label02;

     label03:
        $i2 = 32 - i18;

        $i3 = $i2 - 5;

        $i4 = i21 << $i3;

        i19 = i19 | $i4;

        i18 = i18 + 5;

        i22 = 0;

     label04:
        if i22 >= i5 goto label13;

        $b6 = r4[i22];

        $s26 = (short) $b6;

        s7 = $s26 & 255;

     label05:
        $i27 = (int) s7;

        if i21 >= $i27 goto label08;

     label06:
        if i18 < 8 goto label07;

        $i16 = i19 >> 24;

        virtualinvoke r3.<java.io.OutputStream: void write(int)>($i16);

        i19 = i19 << 8;

        $i29 = (int) -8;

        i18 = i18 + $i29;

        goto label06;

     label07:
        $i13 = 32 - i18;

        $i14 = $i13 - 2;

        $i15 = 2 << $i14;

        i19 = i19 | $i15;

        i18 = i18 + 2;

        i21 = i21 + 1;

        goto label05;

     label08:
        $i30 = (int) s7;

        if i21 <= $i30 goto label11;

     label09:
        if i18 < 8 goto label10;

        $i12 = i19 >> 24;

        virtualinvoke r3.<java.io.OutputStream: void write(int)>($i12);

        i19 = i19 << 8;

        $i32 = (int) -8;

        i18 = i18 + $i32;

        goto label09;

     label10:
        $i9 = 32 - i18;

        $i10 = $i9 - 2;

        $i11 = 3 << $i10;

        i19 = i19 | $i11;

        i18 = i18 + 2;

        $i34 = (int) -1;

        i21 = i21 + $i34;

        goto label08;

     label11:
        if i18 < 8 goto label12;

        $i8 = i19 >> 24;

        virtualinvoke r3.<java.io.OutputStream: void write(int)>($i8);

        i19 = i19 << 8;

        $i36 = (int) -8;

        i18 = i18 + $i36;

        goto label11;

     label12:
        i18 = i18 + 1;

        i22 = i22 + 1;

        goto label04;

     label13:
        i20 = i20 + 1;

        goto label01;

     label14:
        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsBuff> = i19;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsLive> = i18;

        return;
    }

    private void sendMTFValues7() throws java.io.IOException
    {
        byte[] r5, r8;
        int[][] r3;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        byte $b5, $b8;
        int[] r7;
        byte[][] r2;
        short s6, s9, $s19, $s25;
        int i0, $i1, $i2, $i3, $i4, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, $i20, $i21, $i23, $i24, $i26, $i27, $i28;
        java.io.OutputStream r4;
        char c7;
        char[] r6;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data r1;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        r2 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[][] sendMTFValues_len>;

        r3 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: int[][] sendMTFValues_code>;

        r4 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: java.io.OutputStream out>;

        r5 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[] selector>;

        r6 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: char[] sfmap>;

        i0 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int nMTF>;

        i15 = 0;

        i16 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsLive>;

        i17 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsBuff>;

        i18 = 0;

     label1:
        if i18 >= i0 goto label6;

        $i1 = i18 + 50;

        $i3 = $i1 - 1;

        $i2 = i0 - 1;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i2);

        $b5 = r5[i15];

        $s19 = (short) $b5;

        s6 = $s19 & 255;

        $i20 = (int) s6;

        r7 = r3[$i20];

        $i21 = (int) s6;

        r8 = r2[$i21];

     label2:
        if i18 > $i4 goto label5;

        c7 = r6[i18];

     label3:
        if i16 < 8 goto label4;

        $i14 = i17 >> 24;

        virtualinvoke r4.<java.io.OutputStream: void write(int)>($i14);

        i17 = i17 << 8;

        $i23 = (int) -8;

        i16 = i16 + $i23;

        goto label3;

     label4:
        $i24 = (int) c7;

        $b8 = r8[$i24];

        $s25 = (short) $b8;

        s9 = $s25 & 255;

        $i26 = (int) c7;

        $i12 = r7[$i26];

        $i10 = 32 - i16;

        $i27 = (int) s9;

        $i11 = $i10 - $i27;

        $i13 = $i12 << $i11;

        i17 = i17 | $i13;

        $i28 = (int) s9;

        i16 = i16 + $i28;

        i18 = i18 + 1;

        goto label2;

     label5:
        i18 = $i4 + 1;

        i15 = i15 + 1;

        goto label1;

     label6:
        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsBuff> = i17;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int bsLive> = i16;

        return;
    }

    private void moveToFrontCodeAndSend() throws java.io.IOException
    {
        int $i0;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data $r1;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        $i0 = $r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: int origPtr>;

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void bsW(int,int)>(24, $i0);

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void generateMTFValues()>();

        specialinvoke r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: void sendMTFValues()>();

        return;
    }

    private void blockSort()
    {
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        int $i0;
        org.apache.commons.compress.compressors.bzip2.BlockSort $r2;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data $r1;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        $r2 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BlockSort blockSorter>;

        $r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        $i0 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int last>;

        virtualinvoke $r2.<org.apache.commons.compress.compressors.bzip2.BlockSort: void blockSort(org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data,int)>($r1, $i0);

        return;
    }

    private void generateMTFValues()
    {
        byte[] r3, r7, r8;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream r0;
        byte $b12, b14, b26, $b27, $b28, b37;
        int[] r4, r6;
        boolean $z0;
        short $s13, $s45;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i15, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i29, i30, i31, i32, i33, i34, i35, i36, i38, i39, i40, $i42, $i44, $i46, $i47, $i48, $i50, $i52;
        boolean[] r2;
        char $c1, $c16;
        char[] r5;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data r1;

        r0 := @this: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;

        i0 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int last>;

        r1 = r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data data>;

        r2 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: boolean[] inUse>;

        r3 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[] block>;

        r4 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: int[] fmap>;

        r5 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: char[] sfmap>;

        r6 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: int[] mtfFreq>;

        r7 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[] unseqToSeq>;

        r8 = r1.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream$Data: byte[] generateMTFValues_yy>;

        i29 = 0;

        i30 = 0;

     label01:
        if i30 >= 256 goto label03;

        $z0 = r2[i30];

        if $z0 == 0 goto label02;

        $b28 = (byte) i29;

        r7[i30] = $b28;

        i29 = i29 + 1;

     label02:
        i30 = i30 + 1;

        goto label01;

     label03:
        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int nInUse> = i29;

        i31 = i29 + 1;

        i32 = i31;

     label04:
        if i32 < 0 goto label05;

        r6[i32] = 0;

        $i42 = (int) -1;

        i32 = i32 + $i42;

        goto label04;

     label05:
        i33 = i29;

     label06:
        $i44 = (int) -1;

        i33 = i33 + $i44;

        if i33 < 0 goto label07;

        $b27 = (byte) i33;

        r8[i33] = $b27;

        goto label06;

     label07:
        i34 = 0;

        i35 = 0;

        i36 = 0;

     label08:
        if i36 > i0 goto label18;

        $i11 = r4[i36];

        $b12 = r3[$i11];

        $s45 = (short) $b12;

        $s13 = $s45 & 255;

        $i46 = (int) $s13;

        b14 = r7[$i46];

        b37 = r8[0];

        i38 = 0;

     label09:
        $i47 = (int) b14;

        $i48 = (int) b37;

        if $i47 == $i48 goto label10;

        i38 = i38 + 1;

        b26 = b37;

        b37 = r8[i38];

        r8[i38] = b26;

        goto label09;

     label10:
        r8[0] = b37;

        if i38 != 0 goto label11;

        i35 = i35 + 1;

        goto label17;

     label11:
        if i35 <= 0 goto label16;

        $i50 = (int) -1;

        i39 = i35 + $i50;

     label12:
        $i20 = i39 & 1;

        if $i20 != 0 goto label13;

        r5[i34] = 0;

        i34 = i34 + 1;

        $i24 = r6[0];

        $i25 = $i24 + 1;

        r6[0] = $i25;

        goto label14;

     label13:
        r5[i34] = 1;

        i34 = i34 + 1;

        $i21 = r6[1];

        $i22 = $i21 + 1;

        r6[1] = $i22;

     label14:
        if i39 < 2 goto label15;

        $i23 = i39 - 2;

        i39 = $i23 >> 1;

        goto label12;

     label15:
        i35 = 0;

     label16:
        $i15 = i38 + 1;

        $c16 = (char) $i15;

        r5[i34] = $c16;

        i34 = i34 + 1;

        $i17 = i38 + 1;

        $i18 = r6[$i17];

        $i19 = $i18 + 1;

        r6[$i17] = $i19;

     label17:
        i36 = i36 + 1;

        goto label08;

     label18:
        if i35 <= 0 goto label22;

        $i52 = (int) -1;

        i40 = i35 + $i52;

     label19:
        $i5 = i40 & 1;

        if $i5 != 0 goto label20;

        r5[i34] = 0;

        i34 = i34 + 1;

        $i9 = r6[0];

        $i10 = $i9 + 1;

        r6[0] = $i10;

        goto label21;

     label20:
        r5[i34] = 1;

        i34 = i34 + 1;

        $i6 = r6[1];

        $i7 = $i6 + 1;

        r6[1] = $i7;

     label21:
        if i40 < 2 goto label22;

        $i8 = i40 - 2;

        i40 = $i8 >> 1;

        goto label19;

     label22:
        $c1 = (char) i31;

        r5[i34] = $c1;

        $i2 = r6[i31];

        $i3 = $i2 + 1;

        r6[i31] = $i3;

        $i4 = i34 + 1;

        r0.<org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int nMTF> = $i4;

        return;
    }

    public static void <clinit>()
    {
        <org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int LESSER_ICOST> = 0;

        <org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int GREATER_ICOST> = 15;

        <org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int MAX_BLOCKSIZE> = 9;

        <org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream: int MIN_BLOCKSIZE> = 1;

        return;
    }
}
