public class com.jhlabs.image.FBMFilter extends com.jhlabs.image.PointFilter implements java.lang.Cloneable
{
    public static final int NOISE;
    public static final int RIDGED;
    public static final int VLNOISE;
    public static final int SCNOISE;
    public static final int CELLULAR;
    private float scale;
    private float stretch;
    private float angle;
    private float amount;
    private float H;
    private float octaves;
    private float lacunarity;
    private float gain;
    private float bias;
    private int operation;
    private float m00;
    private float m01;
    private float m10;
    private float m11;
    private float min;
    private float max;
    private com.jhlabs.image.Colormap colormap;
    private boolean ridged;
    private com.jhlabs.math.FBM fBm;
    protected java.util.Random random;
    private int basisType;
    private com.jhlabs.math.Function2D basis;

    public void <init>()
    {
        com.jhlabs.image.FBMFilter r0;
        java.util.Random $r2;
        com.jhlabs.image.Gradient $r1;

        r0 := @this: com.jhlabs.image.FBMFilter;

        specialinvoke r0.<com.jhlabs.image.PointFilter: void <init>()>();

        r0.<com.jhlabs.image.FBMFilter: float scale> = 32.0F;

        r0.<com.jhlabs.image.FBMFilter: float stretch> = 1.0F;

        r0.<com.jhlabs.image.FBMFilter: float angle> = 0.0F;

        r0.<com.jhlabs.image.FBMFilter: float amount> = 1.0F;

        r0.<com.jhlabs.image.FBMFilter: float H> = 1.0F;

        r0.<com.jhlabs.image.FBMFilter: float octaves> = 4.0F;

        r0.<com.jhlabs.image.FBMFilter: float lacunarity> = 2.0F;

        r0.<com.jhlabs.image.FBMFilter: float gain> = 0.5F;

        r0.<com.jhlabs.image.FBMFilter: float bias> = 0.5F;

        r0.<com.jhlabs.image.FBMFilter: float m00> = 1.0F;

        r0.<com.jhlabs.image.FBMFilter: float m01> = 0.0F;

        r0.<com.jhlabs.image.FBMFilter: float m10> = 0.0F;

        r0.<com.jhlabs.image.FBMFilter: float m11> = 1.0F;

        $r1 = new com.jhlabs.image.Gradient;

        specialinvoke $r1.<com.jhlabs.image.Gradient: void <init>()>();

        r0.<com.jhlabs.image.FBMFilter: com.jhlabs.image.Colormap colormap> = $r1;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>()>();

        r0.<com.jhlabs.image.FBMFilter: java.util.Random random> = $r2;

        r0.<com.jhlabs.image.FBMFilter: int basisType> = 0;

        virtualinvoke r0.<com.jhlabs.image.FBMFilter: void setBasisType(int)>(0);

        return;
    }

    public void setAmount(float)
    {
        com.jhlabs.image.FBMFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FBMFilter: float amount> = f0;

        return;
    }

    public float getAmount()
    {
        com.jhlabs.image.FBMFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        $f0 = r0.<com.jhlabs.image.FBMFilter: float amount>;

        return $f0;
    }

    public void setOperation(int)
    {
        int i0;
        com.jhlabs.image.FBMFilter r0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.FBMFilter: int operation> = i0;

        return;
    }

    public int getOperation()
    {
        int $i0;
        com.jhlabs.image.FBMFilter r0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        $i0 = r0.<com.jhlabs.image.FBMFilter: int operation>;

        return $i0;
    }

    public void setScale(float)
    {
        com.jhlabs.image.FBMFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FBMFilter: float scale> = f0;

        return;
    }

    public float getScale()
    {
        com.jhlabs.image.FBMFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        $f0 = r0.<com.jhlabs.image.FBMFilter: float scale>;

        return $f0;
    }

    public void setStretch(float)
    {
        com.jhlabs.image.FBMFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FBMFilter: float stretch> = f0;

        return;
    }

    public float getStretch()
    {
        com.jhlabs.image.FBMFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        $f0 = r0.<com.jhlabs.image.FBMFilter: float stretch>;

        return $f0;
    }

    public void setAngle(float)
    {
        com.jhlabs.image.FBMFilter r0;
        float f0, $f1, f2, $f3, f4, $f5;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.jhlabs.image.FBMFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FBMFilter: float angle> = f0;

        $f1 = r0.<com.jhlabs.image.FBMFilter: float angle>;

        $d0 = (double) $f1;

        $d1 = staticinvoke <java.lang.Math: double cos(double)>($d0);

        f2 = (float) $d1;

        $f3 = r0.<com.jhlabs.image.FBMFilter: float angle>;

        $d2 = (double) $f3;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        f4 = (float) $d3;

        r0.<com.jhlabs.image.FBMFilter: float m00> = f2;

        r0.<com.jhlabs.image.FBMFilter: float m01> = f4;

        $f5 = neg f4;

        r0.<com.jhlabs.image.FBMFilter: float m10> = $f5;

        r0.<com.jhlabs.image.FBMFilter: float m11> = f2;

        return;
    }

    public float getAngle()
    {
        com.jhlabs.image.FBMFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        $f0 = r0.<com.jhlabs.image.FBMFilter: float angle>;

        return $f0;
    }

    public void setOctaves(float)
    {
        com.jhlabs.image.FBMFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FBMFilter: float octaves> = f0;

        return;
    }

    public float getOctaves()
    {
        com.jhlabs.image.FBMFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        $f0 = r0.<com.jhlabs.image.FBMFilter: float octaves>;

        return $f0;
    }

    public void setH(float)
    {
        com.jhlabs.image.FBMFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FBMFilter: float H> = f0;

        return;
    }

    public float getH()
    {
        com.jhlabs.image.FBMFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        $f0 = r0.<com.jhlabs.image.FBMFilter: float H>;

        return $f0;
    }

    public void setLacunarity(float)
    {
        com.jhlabs.image.FBMFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FBMFilter: float lacunarity> = f0;

        return;
    }

    public float getLacunarity()
    {
        com.jhlabs.image.FBMFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        $f0 = r0.<com.jhlabs.image.FBMFilter: float lacunarity>;

        return $f0;
    }

    public void setGain(float)
    {
        com.jhlabs.image.FBMFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FBMFilter: float gain> = f0;

        return;
    }

    public float getGain()
    {
        com.jhlabs.image.FBMFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        $f0 = r0.<com.jhlabs.image.FBMFilter: float gain>;

        return $f0;
    }

    public void setBias(float)
    {
        com.jhlabs.image.FBMFilter r0;
        float f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        f0 := @parameter0: float;

        r0.<com.jhlabs.image.FBMFilter: float bias> = f0;

        return;
    }

    public float getBias()
    {
        com.jhlabs.image.FBMFilter r0;
        float $f0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        $f0 = r0.<com.jhlabs.image.FBMFilter: float bias>;

        return $f0;
    }

    public void setColormap(com.jhlabs.image.Colormap)
    {
        com.jhlabs.image.FBMFilter r0;
        com.jhlabs.image.Colormap r1;

        r0 := @this: com.jhlabs.image.FBMFilter;

        r1 := @parameter0: com.jhlabs.image.Colormap;

        r0.<com.jhlabs.image.FBMFilter: com.jhlabs.image.Colormap colormap> = r1;

        return;
    }

    public com.jhlabs.image.Colormap getColormap()
    {
        com.jhlabs.image.FBMFilter r0;
        com.jhlabs.image.Colormap $r1;

        r0 := @this: com.jhlabs.image.FBMFilter;

        $r1 = r0.<com.jhlabs.image.FBMFilter: com.jhlabs.image.Colormap colormap>;

        return $r1;
    }

    public void setBasisType(int)
    {
        com.jhlabs.math.RidgedFBM $r4;
        com.jhlabs.math.Noise $r5;
        com.jhlabs.math.CellularFunction2D $r1;
        int i0;
        com.jhlabs.image.FBMFilter r0;
        com.jhlabs.math.SCNoise $r2;
        com.jhlabs.math.VLNoise $r3;

        r0 := @this: com.jhlabs.image.FBMFilter;

        i0 := @parameter0: int;

        r0.<com.jhlabs.image.FBMFilter: int basisType> = i0;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label1;
        };

     label1:
        $r5 = new com.jhlabs.math.Noise;

        specialinvoke $r5.<com.jhlabs.math.Noise: void <init>()>();

        r0.<com.jhlabs.image.FBMFilter: com.jhlabs.math.Function2D basis> = $r5;

        goto label6;

     label2:
        $r4 = new com.jhlabs.math.RidgedFBM;

        specialinvoke $r4.<com.jhlabs.math.RidgedFBM: void <init>()>();

        r0.<com.jhlabs.image.FBMFilter: com.jhlabs.math.Function2D basis> = $r4;

        goto label6;

     label3:
        $r3 = new com.jhlabs.math.VLNoise;

        specialinvoke $r3.<com.jhlabs.math.VLNoise: void <init>()>();

        r0.<com.jhlabs.image.FBMFilter: com.jhlabs.math.Function2D basis> = $r3;

        goto label6;

     label4:
        $r2 = new com.jhlabs.math.SCNoise;

        specialinvoke $r2.<com.jhlabs.math.SCNoise: void <init>()>();

        r0.<com.jhlabs.image.FBMFilter: com.jhlabs.math.Function2D basis> = $r2;

        goto label6;

     label5:
        $r1 = new com.jhlabs.math.CellularFunction2D;

        specialinvoke $r1.<com.jhlabs.math.CellularFunction2D: void <init>()>();

        r0.<com.jhlabs.image.FBMFilter: com.jhlabs.math.Function2D basis> = $r1;

     label6:
        return;
    }

    public int getBasisType()
    {
        int $i0;
        com.jhlabs.image.FBMFilter r0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        $i0 = r0.<com.jhlabs.image.FBMFilter: int basisType>;

        return $i0;
    }

    public void setBasis(com.jhlabs.math.Function2D)
    {
        com.jhlabs.image.FBMFilter r0;
        com.jhlabs.math.Function2D r1;

        r0 := @this: com.jhlabs.image.FBMFilter;

        r1 := @parameter0: com.jhlabs.math.Function2D;

        r0.<com.jhlabs.image.FBMFilter: com.jhlabs.math.Function2D basis> = r1;

        return;
    }

    public com.jhlabs.math.Function2D getBasis()
    {
        com.jhlabs.image.FBMFilter r0;
        com.jhlabs.math.Function2D $r1;

        r0 := @this: com.jhlabs.image.FBMFilter;

        $r1 = r0.<com.jhlabs.image.FBMFilter: com.jhlabs.math.Function2D basis>;

        return $r1;
    }

    protected com.jhlabs.math.FBM makeFBM(float, float, float)
    {
        com.jhlabs.math.Function2D $r2;
        com.jhlabs.math.FBM $r0;
        com.jhlabs.image.FBMFilter r1;
        float[] $r3;
        float f0, f1, f2, $f3, $f4;

        r1 := @this: com.jhlabs.image.FBMFilter;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $r0 = new com.jhlabs.math.FBM;

        $r2 = r1.<com.jhlabs.image.FBMFilter: com.jhlabs.math.Function2D basis>;

        specialinvoke $r0.<com.jhlabs.math.FBM: void <init>(float,float,float,com.jhlabs.math.Function2D)>(f0, f1, f2, $r2);

        $r3 = staticinvoke <com.jhlabs.math.Noise: float[] findRange(com.jhlabs.math.Function2D,float[])>($r0, null);

        $f3 = $r3[0];

        r1.<com.jhlabs.image.FBMFilter: float min> = $f3;

        $f4 = $r3[1];

        r1.<com.jhlabs.image.FBMFilter: float max> = $f4;

        return $r0;
    }

    public java.awt.image.BufferedImage filter(java.awt.image.BufferedImage, java.awt.image.BufferedImage)
    {
        com.jhlabs.math.FBM $r1;
        java.awt.image.BufferedImage r2, r3, $r4;
        com.jhlabs.image.FBMFilter r0;
        float $f0, $f1, $f2;

        r0 := @this: com.jhlabs.image.FBMFilter;

        r2 := @parameter0: java.awt.image.BufferedImage;

        r3 := @parameter1: java.awt.image.BufferedImage;

        $f2 = r0.<com.jhlabs.image.FBMFilter: float H>;

        $f1 = r0.<com.jhlabs.image.FBMFilter: float lacunarity>;

        $f0 = r0.<com.jhlabs.image.FBMFilter: float octaves>;

        $r1 = virtualinvoke r0.<com.jhlabs.image.FBMFilter: com.jhlabs.math.FBM makeFBM(float,float,float)>($f2, $f1, $f0);

        r0.<com.jhlabs.image.FBMFilter: com.jhlabs.math.FBM fBm> = $r1;

        $r4 = specialinvoke r0.<com.jhlabs.image.PointFilter: java.awt.image.BufferedImage filter(java.awt.image.BufferedImage,java.awt.image.BufferedImage)>(r2, r3);

        return $r4;
    }

    public int filterRGB(int, int, int)
    {
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, f28, f29, f30, f31, f32, f33;
        com.jhlabs.math.FBM $r1;
        com.jhlabs.image.FBMFilter r0;
        int i0, i1, i2, i3, $i4, $i5, i6, i7, $i8, $i9, $i10, $i11, i12;
        com.jhlabs.image.Colormap $r2, $r3;

        r0 := @this: com.jhlabs.image.FBMFilter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        $f1 = r0.<com.jhlabs.image.FBMFilter: float m00>;

        $f0 = (float) i0;

        $f5 = $f1 * $f0;

        $f3 = r0.<com.jhlabs.image.FBMFilter: float m01>;

        $f2 = (float) i1;

        $f4 = $f3 * $f2;

        f28 = $f5 + $f4;

        $f7 = r0.<com.jhlabs.image.FBMFilter: float m10>;

        $f6 = (float) i0;

        $f11 = $f7 * $f6;

        $f9 = r0.<com.jhlabs.image.FBMFilter: float m11>;

        $f8 = (float) i1;

        $f10 = $f9 * $f8;

        f29 = $f11 + $f10;

        $f12 = r0.<com.jhlabs.image.FBMFilter: float scale>;

        f30 = f28 / $f12;

        $f14 = r0.<com.jhlabs.image.FBMFilter: float scale>;

        $f13 = r0.<com.jhlabs.image.FBMFilter: float stretch>;

        $f15 = $f14 * $f13;

        f31 = f29 / $f15;

        $r1 = r0.<com.jhlabs.image.FBMFilter: com.jhlabs.math.FBM fBm>;

        $f16 = virtualinvoke $r1.<com.jhlabs.math.FBM: float evaluate(float,float)>(f30, f31);

        $f17 = r0.<com.jhlabs.image.FBMFilter: float min>;

        $f21 = $f16 - $f17;

        $f19 = r0.<com.jhlabs.image.FBMFilter: float max>;

        $f18 = r0.<com.jhlabs.image.FBMFilter: float min>;

        $f20 = $f19 - $f18;

        f32 = $f21 / $f20;

        $f22 = r0.<com.jhlabs.image.FBMFilter: float gain>;

        $f23 = staticinvoke <com.jhlabs.image.ImageMath: float gain(float,float)>(f32, $f22);

        $f24 = r0.<com.jhlabs.image.FBMFilter: float bias>;

        $f25 = staticinvoke <com.jhlabs.image.ImageMath: float bias(float,float)>($f23, $f24);

        $f26 = r0.<com.jhlabs.image.FBMFilter: float amount>;

        f33 = $f25 * $f26;

        i3 = i2 & -16777216;

        $r2 = r0.<com.jhlabs.image.FBMFilter: com.jhlabs.image.Colormap colormap>;

        if $r2 == null goto label1;

        $r3 = r0.<com.jhlabs.image.FBMFilter: com.jhlabs.image.Colormap colormap>;

        i12 = interfaceinvoke $r3.<com.jhlabs.image.Colormap: int getColor(float)>(f33);

        goto label2;

     label1:
        $f27 = f33 * 255.0F;

        $i4 = (int) $f27;

        $i5 = staticinvoke <com.jhlabs.image.PixelUtils: int clamp(int)>($i4);

        i6 = $i5 << 16;

        i7 = $i5 << 8;

        $i8 = i3 | i6;

        $i9 = $i8 | i7;

        i12 = $i9 | $i5;

     label2:
        $i10 = r0.<com.jhlabs.image.FBMFilter: int operation>;

        if $i10 == 0 goto label3;

        $i11 = r0.<com.jhlabs.image.FBMFilter: int operation>;

        i12 = staticinvoke <com.jhlabs.image.PixelUtils: int combinePixels(int,int,int)>(i2, i12, $i11);

     label3:
        return i12;
    }

    public java.lang.String toString()
    {
        com.jhlabs.image.FBMFilter r0;

        r0 := @this: com.jhlabs.image.FBMFilter;

        return "Texture/Fractal Brownian Motion...";
    }

    public static void <clinit>()
    {
        <com.jhlabs.image.FBMFilter: int CELLULAR> = 4;

        <com.jhlabs.image.FBMFilter: int SCNOISE> = 3;

        <com.jhlabs.image.FBMFilter: int VLNOISE> = 2;

        <com.jhlabs.image.FBMFilter: int RIDGED> = 1;

        <com.jhlabs.image.FBMFilter: int NOISE> = 0;

        return;
    }
}
