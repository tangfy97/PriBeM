public abstract class org.codehaus.jackson.impl.JsonNumericParserBase extends org.codehaus.jackson.impl.JsonParserBase
{
    protected static final int NR_UNKNOWN;
    protected static final int NR_INT;
    protected static final int NR_LONG;
    protected static final int NR_BIGINT;
    protected static final int NR_DOUBLE;
    protected static final int NR_BIGDECIMAL;
    static final java.math.BigDecimal BD_MIN_LONG;
    static final java.math.BigDecimal BD_MAX_LONG;
    static final java.math.BigDecimal BD_MIN_INT;
    static final java.math.BigDecimal BD_MAX_INT;
    static final long MIN_INT_L;
    static final long MAX_INT_L;
    static final double MIN_LONG_D;
    static final double MAX_LONG_D;
    static final double MIN_INT_D;
    static final double MAX_INT_D;
    protected static final int INT_0;
    protected static final int INT_1;
    protected static final int INT_2;
    protected static final int INT_3;
    protected static final int INT_4;
    protected static final int INT_5;
    protected static final int INT_6;
    protected static final int INT_7;
    protected static final int INT_8;
    protected static final int INT_9;
    protected static final int INT_MINUS;
    protected static final int INT_PLUS;
    protected static final int INT_DECIMAL_POINT;
    protected static final int INT_e;
    protected static final int INT_E;
    protected static final char CHAR_NULL;
    protected int _numTypesValid;
    protected int _numberInt;
    protected long _numberLong;
    protected double _numberDouble;
    protected java.math.BigInteger _numberBigInt;
    protected java.math.BigDecimal _numberBigDecimal;
    protected boolean _numberNegative;
    protected int mIntLength;
    protected int mFractLength;
    protected int mExpLength;

    protected void <init>(org.codehaus.jackson.io.IOContext, int)
    {
        int i0;
        org.codehaus.jackson.io.IOContext r1;
        org.codehaus.jackson.impl.JsonNumericParserBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        r1 := @parameter0: org.codehaus.jackson.io.IOContext;

        i0 := @parameter1: int;

        specialinvoke r0.<org.codehaus.jackson.impl.JsonParserBase: void <init>(org.codehaus.jackson.io.IOContext,int)>(r1, i0);

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = 0;

        return;
    }

    protected final org.codehaus.jackson.JsonToken reset(boolean, int, int, int)
    {
        org.codehaus.jackson.impl.JsonNumericParserBase r0;
        org.codehaus.jackson.JsonToken $r1, $r2;
        int i0, i1, i2;
        boolean z0;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: boolean _numberNegative> = z0;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int mIntLength> = i0;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int mFractLength> = i1;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int mExpLength> = i2;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = 0;

        if i1 >= 1 goto label1;

        if i2 >= 1 goto label1;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        return $r2;

     label1:
        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_FLOAT>;

        return $r1;
    }

    protected abstract org.codehaus.jackson.JsonToken parseNumberText(int) throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public java.lang.Number getNumberValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2;
        java.lang.Double $r3;
        long $l11;
        java.lang.Integer $r8;
        java.math.BigDecimal $r4, $r5;
        java.lang.Long $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12;
        java.math.BigInteger $r6;
        double $d0;
        org.codehaus.jackson.impl.JsonNumericParserBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $i0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        if $i0 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void parseNumericValue(int)>(0);

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r2 != $r1 goto label5;

        $i5 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i6 = $i5 & 1;

        if $i6 == 0 goto label2;

        $i12 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numberInt>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i12);

        return $r8;

     label2:
        $i7 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i8 = $i7 & 2;

        if $i8 == 0 goto label3;

        $l11 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: long _numberLong>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l11);

        return $r7;

     label3:
        $i9 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i10 = $i9 & 4;

        if $i10 == 0 goto label4;

        $r6 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigInteger _numberBigInt>;

        return $r6;

     label4:
        $r5 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal>;

        return $r5;

     label5:
        $i1 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i2 = $i1 & 16;

        if $i2 == 0 goto label6;

        $r4 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal>;

        return $r4;

     label6:
        $i3 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i4 = $i3 & 8;

        if $i4 != 0 goto label7;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void _throwInternal()>();

     label7:
        $d0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double _numberDouble>;

        $r3 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        return $r3;
    }

    public org.codehaus.jackson.JsonParser$NumberType getNumberType() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonNumericParserBase r0;
        org.codehaus.jackson.JsonToken $r1, $r2;
        org.codehaus.jackson.JsonParser$NumberType $r3, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $i0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        if $i0 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void parseNumericValue(int)>(0);

     label1:
        $r2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r2 != $r1 goto label4;

        $i3 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i4 = $i3 & 1;

        if $i4 == 0 goto label2;

        $r7 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType INT>;

        return $r7;

     label2:
        $i5 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i6 = $i5 & 2;

        if $i6 == 0 goto label3;

        $r6 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType LONG>;

        return $r6;

     label3:
        $r5 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType BIG_INTEGER>;

        return $r5;

     label4:
        $i1 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i2 = $i1 & 16;

        if $i2 == 0 goto label5;

        $r4 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType BIG_DECIMAL>;

        return $r4;

     label5:
        $r3 = <org.codehaus.jackson.JsonParser$NumberType: org.codehaus.jackson.JsonParser$NumberType DOUBLE>;

        return $r3;
    }

    public int getIntValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonNumericParserBase r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $i0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i1 = $i0 & 1;

        if $i1 != 0 goto label2;

        $i2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        if $i2 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void parseNumericValue(int)>(1);

     label1:
        $i3 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i4 = $i3 & 1;

        if $i4 != 0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void convertNumberToInt()>();

     label2:
        $i5 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numberInt>;

        return $i5;
    }

    public long getLongValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonNumericParserBase r0;
        int $i0, $i1, $i2, $i3, $i4;
        long $l5;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $i0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i1 = $i0 & 2;

        if $i1 != 0 goto label2;

        $i2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        if $i2 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void parseNumericValue(int)>(2);

     label1:
        $i3 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i4 = $i3 & 2;

        if $i4 != 0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void convertNumberToLong()>();

     label2:
        $l5 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: long _numberLong>;

        return $l5;
    }

    public java.math.BigInteger getBigIntegerValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonNumericParserBase r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.math.BigInteger $r1;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $i0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i1 = $i0 & 4;

        if $i1 != 0 goto label2;

        $i2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        if $i2 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void parseNumericValue(int)>(4);

     label1:
        $i3 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i4 = $i3 & 4;

        if $i4 != 0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void convertNumberToBigInteger()>();

     label2:
        $r1 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigInteger _numberBigInt>;

        return $r1;
    }

    public float getFloatValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        float $f0;
        org.codehaus.jackson.impl.JsonNumericParserBase r0;
        double $d0;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $d0 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double getDoubleValue()>();

        $f0 = (float) $d0;

        return $f0;
    }

    public double getDoubleValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonNumericParserBase r0;
        int $i0, $i1, $i2, $i3, $i4;
        double $d0;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $i0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i1 = $i0 & 8;

        if $i1 != 0 goto label2;

        $i2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        if $i2 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void parseNumericValue(int)>(8);

     label1:
        $i3 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i4 = $i3 & 8;

        if $i4 != 0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void convertNumberToDouble()>();

     label2:
        $d0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double _numberDouble>;

        return $d0;
    }

    public java.math.BigDecimal getDecimalValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        java.math.BigDecimal $r1;
        org.codehaus.jackson.impl.JsonNumericParserBase r0;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $i0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i1 = $i0 & 16;

        if $i1 != 0 goto label2;

        $i2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        if $i2 != 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void parseNumericValue(int)>(16);

     label1:
        $i3 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i4 = $i3 & 16;

        if $i4 != 0 goto label2;

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void convertNumberToBigDecimal()>();

     label2:
        $r1 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal>;

        return $r1;
    }

    protected final void parseNumericValue(int) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r4, $r17, $r26, $r27;
        java.math.BigDecimal $r10;
        byte $b5, $b7;
        java.math.BigInteger $r29;
        org.codehaus.jackson.util.TextBuffer $r8, $r9, $r11, $r13, $r14, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.codehaus.jackson.impl.JsonNumericParserBase r0;
        java.lang.StringBuilder $r3, $r5, $r6, $r20, $r23, $r24, $r28, $r30;
        long $l3, $l4, l12;
        int i0, $i1, i2, $i6, $i8, $i9, i10, $i11, $i13, $i14;
        java.lang.String $r7, $r15, $r22, $r25;
        double $d0;
        java.lang.NumberFormatException $r18;
        char[] $r12;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        i0 := @parameter0: int;

        $r1 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label01;

        $r17 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $z6 = virtualinvoke $r17.<org.codehaus.jackson.JsonToken: boolean isNumeric()>();

        if $z6 != 0 goto label02;

     label01:
        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current token (");

        $r4 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not numeric, can not use numeric value accessors");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void _reportError(java.lang.String)>($r7);

     label02:
        $r26 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.JsonToken _currToken>;

        $r27 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_NUMBER_INT>;

        if $r26 != $r27 goto label18;

        $r11 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r12 = virtualinvoke $r11.<org.codehaus.jackson.util.TextBuffer: char[] getTextBuffer()>();

        $r13 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $i1 = virtualinvoke $r13.<org.codehaus.jackson.util.TextBuffer: int getTextOffset()>();

        i10 = $i1;

        i2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int mIntLength>;

        $z0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: boolean _numberNegative>;

        if $z0 == 0 goto label03;

        i10 = $i1 + 1;

     label03:
        if i2 > 9 goto label07;

        $i9 = staticinvoke <org.codehaus.jackson.io.NumberInput: int parseInt(char[],int,int)>($r12, i10, i2);

        $z5 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: boolean _numberNegative>;

        if $z5 == 0 goto label04;

        $i11 = neg $i9;

        goto label05;

     label04:
        $i11 = $i9;

     label05:
        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numberInt> = $i11;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = 1;

     label06:
        return;

     label07:
        if i2 > 18 goto label14;

        $l4 = staticinvoke <org.codehaus.jackson.io.NumberInput: long parseLong(char[],int,int)>($r12, i10, i2);

        l12 = $l4;

        $z3 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: boolean _numberNegative>;

        if $z3 == 0 goto label08;

        l12 = neg $l4;

     label08:
        if i2 != 10 goto label12;

        $z4 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: boolean _numberNegative>;

        if $z4 == 0 goto label10;

        $b7 = l12 cmp -2147483648L;

        $i13 = (int) $b7;

        if $i13 < 0 goto label12;

        $i8 = (int) l12;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numberInt> = $i8;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = 1;

     label09:
        return;

     label10:
        $b5 = l12 cmp 2147483647L;

        $i14 = (int) $b5;

        if $i14 > 0 goto label12;

        $i6 = (int) l12;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numberInt> = $i6;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = 1;

     label11:
        return;

     label12:
        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: long _numberLong> = l12;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = 2;

     label13:
        return;

     label14:
        $r14 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r15 = virtualinvoke $r14.<org.codehaus.jackson.util.TextBuffer: java.lang.String contentsAsString()>();

        $z1 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: boolean _numberNegative>;

        $z2 = staticinvoke <org.codehaus.jackson.io.NumberInput: boolean inLongRange(char[],int,int,boolean)>($r12, i10, i2, $z1);

        if $z2 == 0 goto label16;

        $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r15);

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: long _numberLong> = $l3;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = 2;

     label15:
        return;

     label16:
        $r29 = new java.math.BigInteger;

        specialinvoke $r29.<java.math.BigInteger: void <init>(java.lang.String)>($r15);

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigInteger _numberBigInt> = $r29;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = 4;

     label17:
        return;

     label18:
        if i0 != 16 goto label19;

        $r9 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r10 = virtualinvoke $r9.<org.codehaus.jackson.util.TextBuffer: java.math.BigDecimal contentsAsDecimal()>();

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal> = $r10;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = 16;

        goto label20;

     label19:
        $r8 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $d0 = virtualinvoke $r8.<org.codehaus.jackson.util.TextBuffer: double contentsAsDouble()>();

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double _numberDouble> = $d0;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = 8;

     label20:
        goto label22;

     label21:
        $r18 := @caughtexception;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed numeric value \'");

        $r21 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: org.codehaus.jackson.util.TextBuffer _textBuffer>;

        $r22 = virtualinvoke $r21.<org.codehaus.jackson.util.TextBuffer: java.lang.String contentsAsString()>();

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void _wrapError(java.lang.String,java.lang.Throwable)>($r25, $r18);

     label22:
        return;

        catch java.lang.NumberFormatException from label02 to label06 with label21;
        catch java.lang.NumberFormatException from label07 to label09 with label21;
        catch java.lang.NumberFormatException from label10 to label11 with label21;
        catch java.lang.NumberFormatException from label12 to label13 with label21;
        catch java.lang.NumberFormatException from label14 to label15 with label21;
        catch java.lang.NumberFormatException from label16 to label17 with label21;
        catch java.lang.NumberFormatException from label18 to label20 with label21;
    }

    protected void convertNumberToInt() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        java.math.BigDecimal $r1, $r2, $r3, $r4, $r12;
        byte $b10, $b11, $b17;
        java.math.BigInteger $r5;
        org.codehaus.jackson.impl.JsonNumericParserBase r0;
        java.lang.StringBuilder $r7, $r9, $r10, $r13;
        long $l13, $l15, $l16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i12, i14, $i18, $i19, $i20, $i21, $i22, $i23;
        java.lang.String $r8, $r11;
        double $d0, $d1, $d2;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $i0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label02;

        $l13 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: long _numberLong>;

        i14 = (int) $l13;

        $l16 = (long) i14;

        $l15 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: long _numberLong>;

        $b17 = $l16 cmp $l15;

        if $b17 == 0 goto label01;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Numeric value (");

        $r8 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.lang.String getText()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range of int");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void _reportError(java.lang.String)>($r11);

     label01:
        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numberInt> = i14;

        goto label10;

     label02:
        $i2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i3 = $i2 & 4;

        if $i3 == 0 goto label03;

        $r5 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigInteger _numberBigInt>;

        $i12 = virtualinvoke $r5.<java.math.BigInteger: int intValue()>();

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numberInt> = $i12;

        goto label10;

     label03:
        $i4 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i5 = $i4 & 8;

        if $i5 == 0 goto label06;

        $d0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double _numberDouble>;

        $b10 = $d0 cmpg -2.147483648E9;

        $i22 = (int) $b10;

        if $i22 < 0 goto label04;

        $d1 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double _numberDouble>;

        $b11 = $d1 cmpl 2.147483647E9;

        $i23 = (int) $b11;

        if $i23 <= 0 goto label05;

     label04:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void reportOverflowInt()>();

     label05:
        $d2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double _numberDouble>;

        $i18 = (int) $d2;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numberInt> = $i18;

        goto label10;

     label06:
        $i6 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i7 = $i6 & 16;

        if $i7 == 0 goto label09;

        $r2 = <org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal BD_MIN_INT>;

        $r1 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i8 = virtualinvoke $r2.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r1);

        if $i8 > 0 goto label07;

        $r4 = <org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal BD_MAX_INT>;

        $r3 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i9 = virtualinvoke $r4.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r3);

        if $i9 >= 0 goto label08;

     label07:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void reportOverflowInt()>();

     label08:
        $r12 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i19 = virtualinvoke $r12.<java.math.BigDecimal: int intValue()>();

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numberInt> = $i19;

        goto label10;

     label09:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void _throwInternal()>();

     label10:
        $i20 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i21 = $i20 | 1;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = $i21;

        return;
    }

    protected void convertNumberToLong() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        long $l12, $l14, $l15, $l16;
        java.math.BigDecimal $r1, $r2, $r3, $r4, $r6;
        byte $b10, $b11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i13, $i17, $i18, $i19, $i20;
        java.math.BigInteger $r5;
        double $d0, $d1, $d2;
        org.codehaus.jackson.impl.JsonNumericParserBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $i0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $i13 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numberInt>;

        $l14 = (long) $i13;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: long _numberLong> = $l14;

        goto label9;

     label1:
        $i2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i3 = $i2 & 4;

        if $i3 == 0 goto label2;

        $r5 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigInteger _numberBigInt>;

        $l12 = virtualinvoke $r5.<java.math.BigInteger: long longValue()>();

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: long _numberLong> = $l12;

        goto label9;

     label2:
        $i4 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i5 = $i4 & 8;

        if $i5 == 0 goto label5;

        $d0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double _numberDouble>;

        $b10 = $d0 cmpg -9.223372036854776E18;

        $i19 = (int) $b10;

        if $i19 < 0 goto label3;

        $d1 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double _numberDouble>;

        $b11 = $d1 cmpl 9.223372036854776E18;

        $i20 = (int) $b11;

        if $i20 <= 0 goto label4;

     label3:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void reportOverflowLong()>();

     label4:
        $d2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double _numberDouble>;

        $l15 = (long) $d2;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: long _numberLong> = $l15;

        goto label9;

     label5:
        $i6 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i7 = $i6 & 16;

        if $i7 == 0 goto label8;

        $r2 = <org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal BD_MIN_LONG>;

        $r1 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i8 = virtualinvoke $r2.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r1);

        if $i8 > 0 goto label6;

        $r4 = <org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal BD_MAX_LONG>;

        $r3 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal>;

        $i9 = virtualinvoke $r4.<java.math.BigDecimal: int compareTo(java.math.BigDecimal)>($r3);

        if $i9 >= 0 goto label7;

     label6:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void reportOverflowLong()>();

     label7:
        $r6 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal>;

        $l16 = virtualinvoke $r6.<java.math.BigDecimal: long longValue()>();

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: long _numberLong> = $l16;

        goto label9;

     label8:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void _throwInternal()>();

     label9:
        $i17 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i18 = $i17 | 2;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = $i18;

        return;
    }

    protected void convertNumberToBigInteger() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        long $l9, $l10;
        java.math.BigDecimal $r1, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12;
        java.math.BigInteger $r2, $r3, $r4, $r6;
        double $d0;
        org.codehaus.jackson.impl.JsonNumericParserBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $i0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        $r5 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal>;

        $r6 = virtualinvoke $r5.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigInteger _numberBigInt> = $r6;

        goto label5;

     label1:
        $i2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i3 = $i2 & 2;

        if $i3 == 0 goto label2;

        $l10 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: long _numberLong>;

        $r4 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l10);

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigInteger _numberBigInt> = $r4;

        goto label5;

     label2:
        $i4 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i5 = $i4 & 1;

        if $i5 == 0 goto label3;

        $i8 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numberInt>;

        $l9 = (long) $i8;

        $r3 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>($l9);

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigInteger _numberBigInt> = $r3;

        goto label5;

     label3:
        $i6 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i7 = $i6 & 8;

        if $i7 == 0 goto label4;

        $d0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double _numberDouble>;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>($d0);

        $r2 = virtualinvoke $r1.<java.math.BigDecimal: java.math.BigInteger toBigInteger()>();

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigInteger _numberBigInt> = $r2;

        goto label5;

     label4:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void _throwInternal()>();

     label5:
        $i11 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i12 = $i11 | 4;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = $i12;

        return;
    }

    protected void convertNumberToDouble() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        long $l9;
        java.math.BigDecimal $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i11;
        java.math.BigInteger $r1;
        double $d0, $d1, $d2, $d3;
        org.codehaus.jackson.impl.JsonNumericParserBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $i0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        $r2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal>;

        $d3 = virtualinvoke $r2.<java.math.BigDecimal: double doubleValue()>();

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double _numberDouble> = $d3;

        goto label5;

     label1:
        $i2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i3 = $i2 & 4;

        if $i3 == 0 goto label2;

        $r1 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigInteger _numberBigInt>;

        $d2 = virtualinvoke $r1.<java.math.BigInteger: double doubleValue()>();

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double _numberDouble> = $d2;

        goto label5;

     label2:
        $i4 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label3;

        $l9 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: long _numberLong>;

        $d1 = (double) $l9;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double _numberDouble> = $d1;

        goto label5;

     label3:
        $i6 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i7 = $i6 & 1;

        if $i7 == 0 goto label4;

        $i8 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numberInt>;

        $d0 = (double) $i8;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: double _numberDouble> = $d0;

        goto label5;

     label4:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void _throwInternal()>();

     label5:
        $i10 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i11 = $i10 | 8;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = $i11;

        return;
    }

    protected void convertNumberToBigDecimal() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        long $l9, $l10;
        java.math.BigDecimal $r1, $r2, $r3, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i11, $i12;
        java.math.BigInteger $r4;
        java.lang.String $r6;
        org.codehaus.jackson.impl.JsonNumericParserBase r0;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $i0 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $r5 = new java.math.BigDecimal;

        $r6 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.lang.String getText()>();

        specialinvoke $r5.<java.math.BigDecimal: void <init>(java.lang.String)>($r6);

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal> = $r5;

        goto label5;

     label1:
        $i2 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i3 = $i2 & 4;

        if $i3 == 0 goto label2;

        $r3 = new java.math.BigDecimal;

        $r4 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigInteger _numberBigInt>;

        specialinvoke $r3.<java.math.BigDecimal: void <init>(java.math.BigInteger)>($r4);

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal> = $r3;

        goto label5;

     label2:
        $i4 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label3;

        $l10 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: long _numberLong>;

        $r2 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l10);

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal> = $r2;

        goto label5;

     label3:
        $i6 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i7 = $i6 & 1;

        if $i7 == 0 goto label4;

        $i8 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numberInt>;

        $l9 = (long) $i8;

        $r1 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(long)>($l9);

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal _numberBigDecimal> = $r1;

        goto label5;

     label4:
        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void _throwInternal()>();

     label5:
        $i11 = r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid>;

        $i12 = $i11 | 16;

        r0.<org.codehaus.jackson.impl.JsonNumericParserBase: int _numTypesValid> = $i12;

        return;
    }

    protected void reportUnexpectedNumberChar(int, java.lang.String) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonNumericParserBase r7;
        int i0;
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r8, $r9, $r10, $r11;
        java.lang.String $r2, $r5, r6, r12;

        r7 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        i0 := @parameter0: int;

        r6 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected character (");

        $r2 = staticinvoke <org.codehaus.jackson.impl.JsonNumericParserBase: java.lang.String _getCharDesc(int)>(i0);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") in numeric value");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r12 = $r5;

        if r6 == null goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        virtualinvoke r7.<org.codehaus.jackson.impl.JsonNumericParserBase: void _reportError(java.lang.String)>(r12);

        return;
    }

    protected void reportInvalidNumber(java.lang.String) throws org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonNumericParserBase r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String r3, $r5;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        r3 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid numeric value: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void _reportError(java.lang.String)>($r5);

        return;
    }

    protected void reportOverflowInt() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonNumericParserBase r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r3, $r10;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Numeric value (");

        $r3 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.lang.String getText()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range of int (");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(-2147483648);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(2147483647);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void _reportError(java.lang.String)>($r10);

        return;
    }

    protected void reportOverflowLong() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.impl.JsonNumericParserBase r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r6, $r7, $r8, $r9;
        java.lang.String $r3, $r10;

        r0 := @this: org.codehaus.jackson.impl.JsonNumericParserBase;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Numeric value (");

        $r3 = virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: java.lang.String getText()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range of long (");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(-9223372036854775808L);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(9223372036854775807L);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.codehaus.jackson.impl.JsonNumericParserBase: void _reportError(java.lang.String)>($r10);

        return;
    }

    static void <clinit>()
    {
        java.math.BigDecimal $r0, $r1, $r2, $r3;

        <org.codehaus.jackson.impl.JsonNumericParserBase: char CHAR_NULL> = 0;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_E> = 69;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_e> = 101;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_DECIMAL_POINT> = 46;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_PLUS> = 43;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_MINUS> = 45;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_9> = 57;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_8> = 56;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_7> = 55;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_6> = 54;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_5> = 53;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_4> = 52;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_3> = 51;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_2> = 50;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_1> = 49;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int INT_0> = 48;

        <org.codehaus.jackson.impl.JsonNumericParserBase: double MAX_INT_D> = 2.147483647E9;

        <org.codehaus.jackson.impl.JsonNumericParserBase: double MIN_INT_D> = -2.147483648E9;

        <org.codehaus.jackson.impl.JsonNumericParserBase: double MAX_LONG_D> = 9.223372036854776E18;

        <org.codehaus.jackson.impl.JsonNumericParserBase: double MIN_LONG_D> = -9.223372036854776E18;

        <org.codehaus.jackson.impl.JsonNumericParserBase: long MAX_INT_L> = 2147483647L;

        <org.codehaus.jackson.impl.JsonNumericParserBase: long MIN_INT_L> = -2147483648L;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int NR_BIGDECIMAL> = 16;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int NR_DOUBLE> = 8;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int NR_BIGINT> = 4;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int NR_LONG> = 2;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int NR_INT> = 1;

        <org.codehaus.jackson.impl.JsonNumericParserBase: int NR_UNKNOWN> = 0;

        $r0 = new java.math.BigDecimal;

        specialinvoke $r0.<java.math.BigDecimal: void <init>(long)>(-9223372036854775808L);

        <org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal BD_MIN_LONG> = $r0;

        $r1 = new java.math.BigDecimal;

        specialinvoke $r1.<java.math.BigDecimal: void <init>(long)>(9223372036854775807L);

        <org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal BD_MAX_LONG> = $r1;

        $r2 = new java.math.BigDecimal;

        specialinvoke $r2.<java.math.BigDecimal: void <init>(long)>(-9223372036854775808L);

        <org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal BD_MIN_INT> = $r2;

        $r3 = new java.math.BigDecimal;

        specialinvoke $r3.<java.math.BigDecimal: void <init>(long)>(9223372036854775807L);

        <org.codehaus.jackson.impl.JsonNumericParserBase: java.math.BigDecimal BD_MAX_INT> = $r3;

        return;
    }
}
