public class org.apache.batik.gvt.font.MultiGlyphVector extends java.lang.Object implements org.apache.batik.gvt.font.GVTGlyphVector
{
    org.apache.batik.gvt.font.GVTGlyphVector[] gvs;
    int[] nGlyphs;
    int[] off;
    int nGlyph;

    public void <init>(java.util.List)
    {
        int[] $r3, $r4, $r6, $r10, $r11, $r12;
        org.apache.batik.gvt.font.GVTGlyphVector r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        boolean $z0;
        org.apache.batik.gvt.font.GVTGlyphVector[] $r2, $r9;
        java.util.Iterator $r5;
        java.util.List r1;
        java.lang.Object $r7;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        $r2 = newarray (org.apache.batik.gvt.font.GVTGlyphVector)[$i0];

        r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs> = $r2;

        $r3 = newarray (int)[$i0];

        r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] nGlyphs> = $r3;

        $r4 = newarray (int)[$i0];

        r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off> = $r4;

        $r5 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>();

        i9 = 0;

        goto label2;

     label1:
        $r6 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int nGlyph>;

        $r6[i9] = $i1;

        $r7 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.batik.gvt.font.GVTGlyphVector) $r7;

        $r9 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r9[i9] = r8;

        $r10 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] nGlyphs>;

        $i2 = interfaceinvoke r8.<org.apache.batik.gvt.font.GVTGlyphVector: int getNumGlyphs()>();

        $r10[i9] = $i2;

        $i4 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int nGlyph>;

        $r11 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] nGlyphs>;

        $i3 = $r11[i9];

        $i5 = $i4 + $i3;

        r0.<org.apache.batik.gvt.font.MultiGlyphVector: int nGlyph> = $i5;

        i9 = i9 + 1;

     label2:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r12 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] nGlyphs>;

        $i6 = i9 - 1;

        $i7 = $r12[$i6];

        $i8 = $i7 + 1;

        $r12[$i6] = $i8;

        return;
    }

    public int getNumGlyphs()
    {
        int $i0;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        $i0 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int nGlyph>;

        return $i0;
    }

    int getGVIdx(int)
    {
        int[] $r1, $r2, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i11, $i13;
        org.apache.batik.gvt.font.GVTGlyphVector[] $r4;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        $i1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int nGlyph>;

        if i0 <= $i1 goto label1;

        $i11 = (int) -1;

        return $i11;

     label1:
        $i2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int nGlyph>;

        if i0 != $i2 goto label2;

        $r4 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $i7 = lengthof $r4;

        $i8 = $i7 - 1;

        return $i8;

     label2:
        i9 = 0;

        goto label5;

     label3:
        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i4 = $r2[i9];

        $i6 = i0 - $i4;

        $r3 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] nGlyphs>;

        $i5 = $r3[i9];

        if $i6 >= $i5 goto label4;

        return i9;

     label4:
        i9 = i9 + 1;

     label5:
        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] nGlyphs>;

        $i3 = lengthof $r1;

        if i9 < $i3 goto label3;

        $i13 = (int) -1;

        return $i13;
    }

    public org.apache.batik.gvt.font.GVTFont getFont()
    {
        java.lang.IllegalArgumentException $r0;
        org.apache.batik.gvt.font.MultiGlyphVector r1;

        r1 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t be correctly Implemented");

        throw $r0;
    }

    public java.awt.font.FontRenderContext getFontRenderContext()
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1;
        java.awt.font.FontRenderContext $r3;
        org.apache.batik.gvt.font.GVTGlyphVector $r2;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r2 = $r1[0];

        $r3 = interfaceinvoke $r2.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.font.FontRenderContext getFontRenderContext()>();

        return $r3;
    }

    public int getGlyphCode(int)
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1;
        int[] $r2;
        org.apache.batik.gvt.font.GVTGlyphVector $r3;
        int i0, $i1, $i2, $i3, $i4;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i0);

        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r3 = $r1[$i1];

        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i2 = $r2[$i1];

        $i3 = i0 - $i2;

        $i4 = interfaceinvoke $r3.<org.apache.batik.gvt.font.GVTGlyphVector: int getGlyphCode(int)>($i3);

        return $i4;
    }

    public java.awt.font.GlyphJustificationInfo getGlyphJustificationInfo(int)
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1;
        java.awt.font.GlyphJustificationInfo $r4;
        int[] $r2;
        org.apache.batik.gvt.font.GVTGlyphVector $r3;
        int i0, $i1, $i2, $i3;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i0);

        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r3 = $r1[$i1];

        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i2 = $r2[$i1];

        $i3 = i0 - $i2;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.font.GlyphJustificationInfo getGlyphJustificationInfo(int)>($i3);

        return $r4;
    }

    public java.awt.Shape getGlyphLogicalBounds(int)
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1;
        java.awt.Shape $r4;
        int[] $r2;
        org.apache.batik.gvt.font.GVTGlyphVector $r3;
        int i0, $i1, $i2, $i3;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i0);

        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r3 = $r1[$i1];

        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i2 = $r2[$i1];

        $i3 = i0 - $i2;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.Shape getGlyphLogicalBounds(int)>($i3);

        return $r4;
    }

    public org.apache.batik.gvt.font.GVTGlyphMetrics getGlyphMetrics(int)
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1;
        org.apache.batik.gvt.font.GVTGlyphMetrics $r4;
        int[] $r2;
        org.apache.batik.gvt.font.GVTGlyphVector $r3;
        int i0, $i1, $i2, $i3;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i0);

        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r3 = $r1[$i1];

        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i2 = $r2[$i1];

        $i3 = i0 - $i2;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.font.GVTGlyphVector: org.apache.batik.gvt.font.GVTGlyphMetrics getGlyphMetrics(int)>($i3);

        return $r4;
    }

    public java.awt.Shape getGlyphOutline(int)
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1;
        java.awt.Shape $r4;
        int[] $r2;
        org.apache.batik.gvt.font.GVTGlyphVector $r3;
        int i0, $i1, $i2, $i3;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i0);

        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r3 = $r1[$i1];

        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i2 = $r2[$i1];

        $i3 = i0 - $i2;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.Shape getGlyphOutline(int)>($i3);

        return $r4;
    }

    public java.awt.geom.Rectangle2D getGlyphCellBounds(int)
    {
        java.awt.Shape $r1;
        java.awt.geom.Rectangle2D $r2;
        int i0;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: java.awt.Shape getGlyphLogicalBounds(int)>(i0);

        $r2 = interfaceinvoke $r1.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r2;
    }

    public java.awt.geom.Point2D getGlyphPosition(int)
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1;
        java.awt.geom.Point2D $r4;
        int[] $r2;
        org.apache.batik.gvt.font.GVTGlyphVector $r3;
        int i0, $i1, $i2, $i3;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i0);

        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r3 = $r1[$i1];

        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i2 = $r2[$i1];

        $i3 = i0 - $i2;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.geom.Point2D getGlyphPosition(int)>($i3);

        return $r4;
    }

    public java.awt.geom.AffineTransform getGlyphTransform(int)
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1;
        java.awt.geom.AffineTransform $r4;
        int[] $r2;
        org.apache.batik.gvt.font.GVTGlyphVector $r3;
        int i0, $i1, $i2, $i3;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i0);

        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r3 = $r1[$i1];

        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i2 = $r2[$i1];

        $i3 = i0 - $i2;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.geom.AffineTransform getGlyphTransform(int)>($i3);

        return $r4;
    }

    public java.awt.Shape getGlyphVisualBounds(int)
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1;
        java.awt.Shape $r4;
        int[] $r2;
        org.apache.batik.gvt.font.GVTGlyphVector $r3;
        int i0, $i1, $i2, $i3;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i0);

        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r3 = $r1[$i1];

        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i2 = $r2[$i1];

        $i3 = i0 - $i2;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.Shape getGlyphVisualBounds(int)>($i3);

        return $r4;
    }

    public void setGlyphPosition(int, java.awt.geom.Point2D)
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1;
        java.awt.geom.Point2D r3;
        int[] $r2;
        org.apache.batik.gvt.font.GVTGlyphVector $r4;
        int i0, $i1, $i2, $i3;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        r3 := @parameter1: java.awt.geom.Point2D;

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i0);

        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r4 = $r1[$i1];

        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i2 = $r2[$i1];

        $i3 = i0 - $i2;

        interfaceinvoke $r4.<org.apache.batik.gvt.font.GVTGlyphVector: void setGlyphPosition(int,java.awt.geom.Point2D)>($i3, r3);

        return;
    }

    public void setGlyphTransform(int, java.awt.geom.AffineTransform)
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1;
        java.awt.geom.AffineTransform r3;
        int[] $r2;
        org.apache.batik.gvt.font.GVTGlyphVector $r4;
        int i0, $i1, $i2, $i3;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        r3 := @parameter1: java.awt.geom.AffineTransform;

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i0);

        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r4 = $r1[$i1];

        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i2 = $r2[$i1];

        $i3 = i0 - $i2;

        interfaceinvoke $r4.<org.apache.batik.gvt.font.GVTGlyphVector: void setGlyphTransform(int,java.awt.geom.AffineTransform)>($i3, r3);

        return;
    }

    public void setGlyphVisible(int, boolean)
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1;
        int[] $r2;
        org.apache.batik.gvt.font.GVTGlyphVector $r3;
        int i0, $i1, $i2, $i3;
        org.apache.batik.gvt.font.MultiGlyphVector r0;
        boolean z0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i0);

        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r3 = $r1[$i1];

        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i2 = $r2[$i1];

        $i3 = i0 - $i2;

        interfaceinvoke $r3.<org.apache.batik.gvt.font.GVTGlyphVector: void setGlyphVisible(int,boolean)>($i3, z0);

        return;
    }

    public boolean isGlyphVisible(int)
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1;
        int[] $r2;
        org.apache.batik.gvt.font.GVTGlyphVector $r3;
        int i0, $i1, $i2, $i3;
        org.apache.batik.gvt.font.MultiGlyphVector r0;
        boolean $z0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i0);

        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r3 = $r1[$i1];

        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i2 = $r2[$i1];

        $i3 = i0 - $i2;

        $z0 = interfaceinvoke $r3.<org.apache.batik.gvt.font.GVTGlyphVector: boolean isGlyphVisible(int)>($i3);

        return $z0;
    }

    public int[] getGlyphCodes(int, int, int[])
    {
        int[] r0, $r2, $r3, $r5, r7, r8;
        org.apache.batik.gvt.font.GVTGlyphVector $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11;
        org.apache.batik.gvt.font.GVTGlyphVector[] $r4;
        org.apache.batik.gvt.font.MultiGlyphVector r1;

        r1 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        i7 := @parameter1: int;

        r0 := @parameter2: int[];

        r7 = r0;

        if r0 != null goto label1;

        r7 = newarray (int)[i7];

     label1:
        r8 = null;

        $i1 = virtualinvoke r1.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i0);

        i8 = $i1;

        $r2 = r1.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i2 = $r2[$i1];

        i9 = i0 - $i2;

        i10 = 0;

        goto label8;

     label2:
        i11 = i7;

        $i4 = i9 + i7;

        $r3 = r1.<org.apache.batik.gvt.font.MultiGlyphVector: int[] nGlyphs>;

        $i3 = $r3[i8];

        if $i4 <= $i3 goto label3;

        $r5 = r1.<org.apache.batik.gvt.font.MultiGlyphVector: int[] nGlyphs>;

        $i6 = $r5[i8];

        i11 = $i6 - i9;

     label3:
        $r4 = r1.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r6 = $r4[i8];

        if i10 != 0 goto label4;

        interfaceinvoke $r6.<org.apache.batik.gvt.font.GVTGlyphVector: int[] getGlyphCodes(int,int,int[])>(i9, i11, r7);

        goto label7;

     label4:
        if r8 == null goto label5;

        $i5 = lengthof r8;

        if $i5 >= i11 goto label6;

     label5:
        r8 = newarray (int)[i11];

     label6:
        interfaceinvoke $r6.<org.apache.batik.gvt.font.GVTGlyphVector: int[] getGlyphCodes(int,int,int[])>(i9, i11, r8);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r7, i10, i11);

     label7:
        i9 = 0;

        i8 = i8 + 1;

        i7 = i7 - i11;

        i10 = i10 + i11;

     label8:
        if i7 != 0 goto label2;

        return r7;
    }

    public float[] getGlyphPositions(int, int, float[])
    {
        float[] r0, r7, r8;
        int[] $r2, $r3, $r5;
        org.apache.batik.gvt.font.GVTGlyphVector $r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, i14, $i15, $i16;
        org.apache.batik.gvt.font.GVTGlyphVector[] $r4;
        org.apache.batik.gvt.font.MultiGlyphVector r1;

        r1 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i0 := @parameter0: int;

        i10 := @parameter1: int;

        r0 := @parameter2: float[];

        r7 = r0;

        if r0 != null goto label1;

        $i9 = i10 * 2;

        r7 = newarray (float)[$i9];

     label1:
        r8 = null;

        $i1 = virtualinvoke r1.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i0);

        i11 = $i1;

        $r2 = r1.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i2 = $r2[$i1];

        i12 = i0 - $i2;

        i13 = 0;

        goto label8;

     label2:
        i14 = i10;

        $i4 = i12 + i10;

        $r3 = r1.<org.apache.batik.gvt.font.MultiGlyphVector: int[] nGlyphs>;

        $i3 = $r3[i11];

        if $i4 <= $i3 goto label3;

        $r5 = r1.<org.apache.batik.gvt.font.MultiGlyphVector: int[] nGlyphs>;

        $i8 = $r5[i11];

        i14 = $i8 - i12;

     label3:
        $r4 = r1.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r6 = $r4[i11];

        if i13 != 0 goto label4;

        interfaceinvoke $r6.<org.apache.batik.gvt.font.GVTGlyphVector: float[] getGlyphPositions(int,int,float[])>(i12, i14, r7);

        goto label7;

     label4:
        if r8 == null goto label5;

        $i7 = lengthof r8;

        $i6 = i14 * 2;

        if $i7 >= $i6 goto label6;

     label5:
        $i5 = i14 * 2;

        r8 = newarray (float)[$i5];

     label6:
        interfaceinvoke $r6.<org.apache.batik.gvt.font.GVTGlyphVector: float[] getGlyphPositions(int,int,float[])>(i12, i14, r8);

        $i15 = i14 * 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r8, 0, r7, i13, $i15);

     label7:
        i12 = 0;

        i11 = i11 + 1;

        i10 = i10 - i14;

        $i16 = i14 * 2;

        i13 = i13 + $i16;

     label8:
        if i10 != 0 goto label2;

        return r7;
    }

    public java.awt.geom.Rectangle2D getLogicalBounds()
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1, $r5;
        java.awt.geom.Rectangle2D $r3, r4;
        org.apache.batik.gvt.font.GVTGlyphVector $r2;
        int i0, $i1;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        r4 = null;

        i0 = 0;

        goto label4;

     label1:
        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r2 = $r1[i0];

        $r3 = interfaceinvoke $r2.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.geom.Rectangle2D getLogicalBounds()>();

        if r4 != null goto label2;

        r4 = $r3;

        goto label3;

     label2:
        virtualinvoke r4.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r3);

     label3:
        i0 = i0 + 1;

     label4:
        $r5 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $i1 = lengthof $r5;

        if i0 < $i1 goto label1;

        return r4;
    }

    public java.awt.Shape getOutline()
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1, $r6;
        java.awt.Shape $r3;
        org.apache.batik.gvt.font.GVTGlyphVector $r2;
        int i0, $i1;
        java.awt.geom.GeneralPath $r4, r5;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        r5 = null;

        i0 = 0;

        goto label4;

     label1:
        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r2 = $r1[i0];

        $r3 = interfaceinvoke $r2.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.Shape getOutline()>();

        if r5 != null goto label2;

        $r4 = new java.awt.geom.GeneralPath;

        specialinvoke $r4.<java.awt.geom.GeneralPath: void <init>(java.awt.Shape)>($r3);

        r5 = $r4;

        goto label3;

     label2:
        virtualinvoke r5.<java.awt.geom.GeneralPath: void append(java.awt.Shape,boolean)>($r3, 0);

     label3:
        i0 = i0 + 1;

     label4:
        $r6 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $i1 = lengthof $r6;

        if i0 < $i1 goto label1;

        return r5;
    }

    public java.awt.Shape getOutline(float, float)
    {
        java.awt.Shape $r1, $r3;
        java.awt.geom.AffineTransform $r2;
        float f0, f1;
        org.apache.batik.gvt.font.MultiGlyphVector r0;
        double $d0, $d1;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: java.awt.Shape getOutline()>();

        $d1 = (double) f0;

        $d0 = (double) f1;

        $r2 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d1, $d0);

        $r3 = virtualinvoke $r2.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r1);

        return $r3;
    }

    public java.awt.geom.Rectangle2D getBounds2D(java.text.AttributedCharacterIterator)
    {
        java.awt.geom.Rectangle2D $r7, r8;
        org.apache.batik.gvt.font.GVTGlyphVector r3, $r6;
        int $i0, $i1, i2, i3, i4, $i5;
        org.apache.batik.gvt.font.GVTGlyphVector[] $r2, $r4, $r9;
        org.apache.batik.gvt.text.AttributedCharacterSpanIterator $r5;
        java.text.AttributedCharacterIterator r0;
        org.apache.batik.gvt.font.MultiGlyphVector r1;

        r1 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        r0 := @parameter0: java.text.AttributedCharacterIterator;

        r8 = null;

        i3 = interfaceinvoke r0.<java.text.CharacterIterator: int getBeginIndex()>();

        i4 = 0;

        goto label4;

     label1:
        $r2 = r1.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        r3 = $r2[i4];

        $i0 = interfaceinvoke r3.<org.apache.batik.gvt.font.GVTGlyphVector: int getNumGlyphs()>();

        $i1 = interfaceinvoke r3.<org.apache.batik.gvt.font.GVTGlyphVector: int getCharacterCount(int,int)>(0, $i0);

        i2 = $i1 + 1;

        $r4 = r1.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r6 = $r4[i4];

        $r5 = new org.apache.batik.gvt.text.AttributedCharacterSpanIterator;

        specialinvoke $r5.<org.apache.batik.gvt.text.AttributedCharacterSpanIterator: void <init>(java.text.AttributedCharacterIterator,int,int)>(r0, i3, i2);

        $r7 = interfaceinvoke $r6.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.geom.Rectangle2D getBounds2D(java.text.AttributedCharacterIterator)>($r5);

        if r8 != null goto label2;

        r8 = $r7;

        goto label3;

     label2:
        virtualinvoke r8.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r7);

     label3:
        i3 = i2;

        i4 = i4 + 1;

     label4:
        $r9 = r1.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $i5 = lengthof $r9;

        if i4 < $i5 goto label1;

        return r8;
    }

    public java.awt.geom.Rectangle2D getGeometricBounds()
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1, $r5;
        java.awt.geom.Rectangle2D $r3, r4;
        org.apache.batik.gvt.font.GVTGlyphVector $r2;
        int i0, $i1;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        r4 = null;

        i0 = 0;

        goto label4;

     label1:
        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r2 = $r1[i0];

        $r3 = interfaceinvoke $r2.<org.apache.batik.gvt.font.GVTGlyphVector: java.awt.geom.Rectangle2D getGeometricBounds()>();

        if r4 != null goto label2;

        r4 = $r3;

        goto label3;

     label2:
        virtualinvoke r4.<java.awt.geom.Rectangle2D: void add(java.awt.geom.Rectangle2D)>($r3);

     label3:
        i0 = i0 + 1;

     label4:
        $r5 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $i1 = lengthof $r5;

        if i0 < $i1 goto label1;

        return r4;
    }

    public void performDefaultLayout()
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r1, $r2;
        org.apache.batik.gvt.font.GVTGlyphVector $r3;
        int $i0, i1;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i1 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r3 = $r2[i1];

        interfaceinvoke $r3.<org.apache.batik.gvt.font.GVTGlyphVector: void performDefaultLayout()>();

        i1 = i1 + 1;

     label2:
        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $i0 = lengthof $r1;

        if i1 < $i0 goto label1;

        return;
    }

    public int getCharacterCount(int, int)
    {
        int[] $r1, $r2, $r3, $r6;
        org.apache.batik.gvt.font.GVTGlyphVector $r5;
        int $i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        org.apache.batik.gvt.font.GVTGlyphVector[] $r4;
        org.apache.batik.gvt.font.MultiGlyphVector r0;

        r0 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        i11 := @parameter0: int;

        i1 := @parameter1: int;

        $i0 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i11);

        $i2 = virtualinvoke r0.<org.apache.batik.gvt.font.MultiGlyphVector: int getGVIdx(int)>(i1);

        i12 = 0;

        i13 = $i0;

        goto label3;

     label1:
        $r1 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i3 = $r1[i13];

        i4 = i11 - $i3;

        $r2 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] off>;

        $i5 = $r2[i13];

        i14 = i1 - $i5;

        $r3 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] nGlyphs>;

        $i6 = $r3[i13];

        if i14 < $i6 goto label2;

        $r6 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: int[] nGlyphs>;

        $i10 = $r6[i13];

        i14 = $i10 - 1;

     label2:
        $r4 = r0.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $r5 = $r4[i13];

        $i7 = interfaceinvoke $r5.<org.apache.batik.gvt.font.GVTGlyphVector: int getCharacterCount(int,int)>(i4, i14);

        i12 = i12 + $i7;

        $i8 = i14 - i4;

        $i9 = $i8 + 1;

        i11 = i11 + $i9;

        i13 = i13 + 1;

     label3:
        if i13 <= $i2 goto label1;

        return i12;
    }

    public void draw(java.awt.Graphics2D, java.text.AttributedCharacterIterator)
    {
        org.apache.batik.gvt.font.GVTGlyphVector[] $r2, $r3;
        org.apache.batik.gvt.text.AttributedCharacterSpanIterator $r6;
        java.text.AttributedCharacterIterator r0;
        org.apache.batik.gvt.font.GVTGlyphVector r4;
        java.awt.Graphics2D r5;
        int $i0, $i1, $i2, i3, i4, i5;
        org.apache.batik.gvt.font.MultiGlyphVector r1;

        r1 := @this: org.apache.batik.gvt.font.MultiGlyphVector;

        r5 := @parameter0: java.awt.Graphics2D;

        r0 := @parameter1: java.text.AttributedCharacterIterator;

        i4 = interfaceinvoke r0.<java.text.CharacterIterator: int getBeginIndex()>();

        i5 = 0;

        goto label2;

     label1:
        $r3 = r1.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        r4 = $r3[i5];

        $i1 = interfaceinvoke r4.<org.apache.batik.gvt.font.GVTGlyphVector: int getNumGlyphs()>();

        $i2 = interfaceinvoke r4.<org.apache.batik.gvt.font.GVTGlyphVector: int getCharacterCount(int,int)>(0, $i1);

        i3 = $i2 + 1;

        $r6 = new org.apache.batik.gvt.text.AttributedCharacterSpanIterator;

        specialinvoke $r6.<org.apache.batik.gvt.text.AttributedCharacterSpanIterator: void <init>(java.text.AttributedCharacterIterator,int,int)>(r0, i4, i3);

        interfaceinvoke r4.<org.apache.batik.gvt.font.GVTGlyphVector: void draw(java.awt.Graphics2D,java.text.AttributedCharacterIterator)>(r5, $r6);

        i4 = i3;

        i5 = i5 + 1;

     label2:
        $r2 = r1.<org.apache.batik.gvt.font.MultiGlyphVector: org.apache.batik.gvt.font.GVTGlyphVector[] gvs>;

        $i0 = lengthof $r2;

        if i5 < $i0 goto label1;

        return;
    }
}
