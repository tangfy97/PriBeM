final class org.apache.poi.ss.formula.functions.MathX extends java.lang.Object
{

    private void <init>()
    {
        org.apache.poi.ss.formula.functions.MathX r0;

        r0 := @this: org.apache.poi.ss.formula.functions.MathX;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double round(double, int)
    {
        java.math.BigDecimal $r0, $r3;
        int i0;
        java.lang.String $r1;
        double d0, d1;
        boolean $z0, $z1;
        java.math.RoundingMode $r2;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        d1 = #NaN;

        goto label3;

     label2:
        $r0 = new java.math.BigDecimal;

        $r1 = staticinvoke <org.apache.poi.ss.util.NumberToTextConverter: java.lang.String toText(double)>(d0);

        specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>($r1);

        $r2 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;

        $r3 = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal setScale(int,java.math.RoundingMode)>(i0, $r2);

        d1 = virtualinvoke $r3.<java.math.BigDecimal: double doubleValue()>();

     label3:
        return d1;
    }

    public static double roundUp(double, int)
    {
        java.math.BigDecimal $r0, $r2;
        int i0;
        double d0, d1;
        boolean $z0, $z1;
        java.math.RoundingMode $r1;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        d1 = #NaN;

        goto label3;

     label2:
        $r0 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(d0);

        $r1 = <java.math.RoundingMode: java.math.RoundingMode UP>;

        $r2 = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal setScale(int,java.math.RoundingMode)>(i0, $r1);

        d1 = virtualinvoke $r2.<java.math.BigDecimal: double doubleValue()>();

     label3:
        return d1;
    }

    public static double roundDown(double, int)
    {
        java.math.BigDecimal $r0, $r2;
        int i0;
        double d0, d1;
        boolean $z0, $z1;
        java.math.RoundingMode $r1;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>(d0);

        if $z1 == 0 goto label2;

     label1:
        d1 = #NaN;

        goto label3;

     label2:
        $r0 = staticinvoke <java.math.BigDecimal: java.math.BigDecimal valueOf(double)>(d0);

        $r1 = <java.math.RoundingMode: java.math.RoundingMode DOWN>;

        $r2 = virtualinvoke $r0.<java.math.BigDecimal: java.math.BigDecimal setScale(int,java.math.RoundingMode)>(i0, $r1);

        d1 = virtualinvoke $r2.<java.math.BigDecimal: double doubleValue()>();

     label3:
        return d1;
    }

    public static short sign(double)
    {
        short $s3;
        byte $b0, $b1, $b2;
        int $i4;
        double d0;

        d0 := @parameter0: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $b2 = 0;

        goto label3;

     label1:
        $b1 = d0 cmpg 0.0;

        $i4 = (int) $b1;

        if $i4 >= 0 goto label2;

        $b2 = -1;

        goto label3;

     label2:
        $b2 = 1;

     label3:
        $s3 = (short) $b2;

        return $s3;
    }

    public static double average(double[])
    {
        double[] r0;
        int i0, $i1, i2;
        double $d0, $d1, d2, d3;

        r0 := @parameter0: double[];

        d2 = 0.0;

        i2 = 0;

        i0 = lengthof r0;

     label1:
        if i2 >= i0 goto label2;

        $d1 = r0[i2];

        d2 = d2 + $d1;

        i2 = i2 + 1;

        goto label1;

     label2:
        $i1 = lengthof r0;

        $d0 = (double) $i1;

        d3 = d2 / $d0;

        return d3;
    }

    public static double sum(double[])
    {
        double[] r0;
        int i0, i1;
        double $d0, d1;

        r0 := @parameter0: double[];

        d1 = 0.0;

        i1 = 0;

        i0 = lengthof r0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = r0[i1];

        d1 = d1 + $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d1;
    }

    public static double sumsq(double[])
    {
        double[] r0;
        int i0, i1;
        double $d0, $d1, $d2, d3;

        r0 := @parameter0: double[];

        d3 = 0.0;

        i1 = 0;

        i0 = lengthof r0;

     label1:
        if i1 >= i0 goto label2;

        $d1 = r0[i1];

        $d0 = r0[i1];

        $d2 = $d1 * $d0;

        d3 = d3 + $d2;

        i1 = i1 + 1;

        goto label1;

     label2:
        return d3;
    }

    public static double product(double[])
    {
        double[] r0;
        int $i0, i1, i2;
        double $d0, d1;

        r0 := @parameter0: double[];

        d1 = 0.0;

        if r0 == null goto label2;

        $i0 = lengthof r0;

        if $i0 <= 0 goto label2;

        d1 = 1.0;

        i2 = 0;

        i1 = lengthof r0;

     label1:
        if i2 >= i1 goto label2;

        $d0 = r0[i2];

        d1 = d1 * $d0;

        i2 = i2 + 1;

        goto label1;

     label2:
        return d1;
    }

    public static double min(double[])
    {
        double[] r0;
        int i0, i1;
        double $d0, d1;

        r0 := @parameter0: double[];

        d1 = #Infinity;

        i1 = 0;

        i0 = lengthof r0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = r0[i1];

        d1 = staticinvoke <java.lang.Math: double min(double,double)>(d1, $d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return d1;
    }

    public static double max(double[])
    {
        double[] r0;
        int i0, i1;
        double $d0, d1;

        r0 := @parameter0: double[];

        d1 = #-Infinity;

        i1 = 0;

        i0 = lengthof r0;

     label1:
        if i1 >= i0 goto label2;

        $d0 = r0[i1];

        d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, $d0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return d1;
    }

    public static double floor(double, double)
    {
        byte $b0, $b1, $b2, $b3, $b4, $b5, $b6, $b7;
        int $i8, $i9, $i10, $i11;
        double d0, d1, $d2, $d3, d4, $d5;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg 0.0;

        $i8 = (int) $b0;

        if $i8 >= 0 goto label1;

        $b7 = d1 cmpl 0.0;

        $i9 = (int) $b7;

        if $i9 > 0 goto label3;

     label1:
        $b1 = d0 cmpl 0.0;

        $i10 = (int) $b1;

        if $i10 <= 0 goto label2;

        $b6 = d1 cmpg 0.0;

        $i11 = (int) $b6;

        if $i11 < 0 goto label3;

     label2:
        $b2 = d1 cmpl 0.0;

        if $b2 != 0 goto label4;

        $b5 = d0 cmpl 0.0;

        if $b5 == 0 goto label4;

     label3:
        d4 = #NaN;

        goto label8;

     label4:
        $b3 = d0 cmpl 0.0;

        if $b3 == 0 goto label5;

        $b4 = d1 cmpl 0.0;

        if $b4 != 0 goto label6;

     label5:
        $d5 = 0.0;

        goto label7;

     label6:
        $d2 = d0 / d1;

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        $d5 = $d3 * d1;

     label7:
        d4 = $d5;

     label8:
        return d4;
    }

    public static double ceiling(double, double)
    {
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        int $i6, $i7, $i8, $i9;
        double d0, d1, $d2, $d3, d4, $d5;

        d0 := @parameter0: double;

        d1 := @parameter1: double;

        $b0 = d0 cmpg 0.0;

        $i6 = (int) $b0;

        if $i6 >= 0 goto label1;

        $b5 = d1 cmpl 0.0;

        $i7 = (int) $b5;

        if $i7 > 0 goto label2;

     label1:
        $b1 = d0 cmpl 0.0;

        $i8 = (int) $b1;

        if $i8 <= 0 goto label3;

        $b4 = d1 cmpg 0.0;

        $i9 = (int) $b4;

        if $i9 >= 0 goto label3;

     label2:
        d4 = #NaN;

        goto label7;

     label3:
        $b2 = d0 cmpl 0.0;

        if $b2 == 0 goto label4;

        $b3 = d1 cmpl 0.0;

        if $b3 != 0 goto label5;

     label4:
        $d5 = 0.0;

        goto label6;

     label5:
        $d2 = d0 / d1;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        $d5 = $d3 * d1;

     label6:
        d4 = $d5;

     label7:
        return d4;
    }

    public static double factorial(int)
    {
        int i0, i1;
        double $d0, d1;

        i0 := @parameter0: int;

        d1 = 1.0;

        if i0 < 0 goto label4;

        if i0 > 170 goto label3;

        i1 = 1;

     label1:
        if i1 > i0 goto label2;

        $d0 = (double) i1;

        d1 = d1 * $d0;

        i1 = i1 + 1;

        goto label1;

     label2:
        goto label5;

     label3:
        d1 = #Infinity;

        goto label5;

     label4:
        d1 = #NaN;

     label5:
        return d1;
    }

    public static double mod(double, double)
    {
        short $s1, $s2;
        byte $b0;
        int $i3, $i4;
        double d0, d1, $d2, $d3, d4;

        d1 := @parameter0: double;

        d0 := @parameter1: double;

        $b0 = d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        d4 = #NaN;

        goto label3;

     label1:
        $s1 = staticinvoke <org.apache.poi.ss.formula.functions.MathX: short sign(double)>(d1);

        $s2 = staticinvoke <org.apache.poi.ss.formula.functions.MathX: short sign(double)>(d0);

        $i3 = (int) $s1;

        $i4 = (int) $s2;

        if $i3 != $i4 goto label2;

        d4 = d1 % d0;

        goto label3;

     label2:
        $d2 = d1 % d0;

        $d3 = $d2 + d0;

        d4 = $d3 % d0;

     label3:
        return d4;
    }

    public static double acosh(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(d0, 2.0);

        $d2 = $d1 - 1.0;

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        $d4 = $d3 + d0;

        $d5 = staticinvoke <java.lang.Math: double log(double)>($d4);

        return $d5;
    }

    public static double asinh(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5;

        d0 := @parameter0: double;

        $d1 = d0 * d0;

        $d2 = $d1 + 1.0;

        $d3 = staticinvoke <java.lang.Math: double sqrt(double)>($d2);

        $d4 = $d3 + d0;

        $d5 = staticinvoke <java.lang.Math: double log(double)>($d4);

        return $d5;
    }

    public static double atanh(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5;

        d0 := @parameter0: double;

        $d2 = 1.0 + d0;

        $d1 = 1.0 - d0;

        $d3 = $d2 / $d1;

        $d4 = staticinvoke <java.lang.Math: double log(double)>($d3);

        $d5 = $d4 / 2.0;

        return $d5;
    }

    public static double cosh(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.718281828459045, d0);

        $d2 = neg d0;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>(2.718281828459045, $d2);

        $d4 = $d1 + $d3;

        $d5 = $d4 / 2.0;

        return $d5;
    }

    public static double sinh(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.718281828459045, d0);

        $d2 = neg d0;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>(2.718281828459045, $d2);

        $d4 = $d1 - $d3;

        $d5 = $d4 / 2.0;

        return $d5;
    }

    public static double tanh(double)
    {
        double d0, $d1, $d2, $d3, $d4, $d5, $d6;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.718281828459045, d0);

        $d2 = neg d0;

        $d3 = staticinvoke <java.lang.Math: double pow(double,double)>(2.718281828459045, $d2);

        $d5 = $d1 - $d3;

        $d4 = $d1 + $d3;

        $d6 = $d5 / $d4;

        return $d6;
    }

    public static double nChooseK(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        double $d0, $d1, d2, d3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        d2 = 1.0;

        if i0 < 0 goto label1;

        if i1 < 0 goto label1;

        if i0 >= i1 goto label2;

     label1:
        d3 = #NaN;

        goto label5;

     label2:
        $i2 = i0 - i1;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, i1);

        $i4 = i0 - i1;

        i6 = staticinvoke <java.lang.Math: int max(int,int)>($i4, i1);

     label3:
        if i6 >= i0 goto label4;

        $i5 = i6 + 1;

        $d1 = (double) $i5;

        d2 = d2 * $d1;

        i6 = i6 + 1;

        goto label3;

     label4:
        $d0 = staticinvoke <org.apache.poi.ss.formula.functions.MathX: double factorial(int)>($i3);

        d3 = d2 / $d0;

     label5:
        return d3;
    }
}
