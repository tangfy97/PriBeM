public class org.springframework.aop.support.DelegatingIntroductionInterceptor extends org.springframework.aop.support.IntroductionInfoSupport implements org.springframework.aop.IntroductionInterceptor
{
    private java.lang.Object delegate;

    public void <init>(java.lang.Object)
    {
        org.springframework.aop.support.DelegatingIntroductionInterceptor r0;
        java.lang.Object r1;

        r0 := @this: org.springframework.aop.support.DelegatingIntroductionInterceptor;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.springframework.aop.support.IntroductionInfoSupport: void <init>()>();

        specialinvoke r0.<org.springframework.aop.support.DelegatingIntroductionInterceptor: void init(java.lang.Object)>(r1);

        return;
    }

    protected void <init>()
    {
        org.springframework.aop.support.DelegatingIntroductionInterceptor r0;

        r0 := @this: org.springframework.aop.support.DelegatingIntroductionInterceptor;

        specialinvoke r0.<org.springframework.aop.support.IntroductionInfoSupport: void <init>()>();

        specialinvoke r0.<org.springframework.aop.support.DelegatingIntroductionInterceptor: void init(java.lang.Object)>(r0);

        return;
    }

    private void init(java.lang.Object)
    {
        org.springframework.aop.support.DelegatingIntroductionInterceptor r1;
        java.lang.Object r0;

        r1 := @this: org.springframework.aop.support.DelegatingIntroductionInterceptor;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Delegate must not be null");

        r1.<org.springframework.aop.support.DelegatingIntroductionInterceptor: java.lang.Object delegate> = r0;

        virtualinvoke r1.<org.springframework.aop.support.DelegatingIntroductionInterceptor: void implementInterfacesOnObject(java.lang.Object)>(r0);

        virtualinvoke r1.<org.springframework.aop.support.DelegatingIntroductionInterceptor: void suppressInterface(java.lang.Class)>(class "Lorg/springframework/aop/IntroductionInterceptor;");

        virtualinvoke r1.<org.springframework.aop.support.DelegatingIntroductionInterceptor: void suppressInterface(java.lang.Class)>(class "Lorg/springframework/aop/DynamicIntroductionAdvice;");

        return;
    }

    public java.lang.Object invoke(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        java.lang.Object[] $r5;
        org.springframework.aop.support.DelegatingIntroductionInterceptor r0;
        org.aopalliance.intercept.MethodInvocation r1;
        java.lang.reflect.Method $r4, $r10;
        boolean $z0, $z1, $z2;
        java.lang.Object $r2, $r3, $r6, $r7, $r9, r12;
        java.lang.Class $r11;
        org.springframework.aop.ProxyMethodInvocation $r8;

        r0 := @this: org.springframework.aop.support.DelegatingIntroductionInterceptor;

        r1 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $z0 = virtualinvoke r0.<org.springframework.aop.support.DelegatingIntroductionInterceptor: boolean isMethodOnIntroducedInterface(org.aopalliance.intercept.MethodInvocation)>(r1);

        if $z0 == 0 goto label2;

        $r3 = r0.<org.springframework.aop.support.DelegatingIntroductionInterceptor: java.lang.Object delegate>;

        $r4 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r5 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.Object[] getArguments()>();

        $r6 = staticinvoke <org.springframework.aop.support.AopUtils: java.lang.Object invokeJoinpointUsingReflection(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])>($r3, $r4, $r5);

        r12 = $r6;

        $r7 = r0.<org.springframework.aop.support.DelegatingIntroductionInterceptor: java.lang.Object delegate>;

        if $r6 != $r7 goto label1;

        $z1 = r1 instanceof org.springframework.aop.ProxyMethodInvocation;

        if $z1 == 0 goto label1;

        $r8 = (org.springframework.aop.ProxyMethodInvocation) r1;

        $r9 = interfaceinvoke $r8.<org.springframework.aop.ProxyMethodInvocation: java.lang.Object getProxy()>();

        $r10 = interfaceinvoke r1.<org.aopalliance.intercept.MethodInvocation: java.lang.reflect.Method getMethod()>();

        $r11 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $z2 = virtualinvoke $r11.<java.lang.Class: boolean isInstance(java.lang.Object)>($r9);

        if $z2 == 0 goto label1;

        r12 = $r9;

     label1:
        return r12;

     label2:
        $r2 = virtualinvoke r0.<org.springframework.aop.support.DelegatingIntroductionInterceptor: java.lang.Object doProceed(org.aopalliance.intercept.MethodInvocation)>(r1);

        return $r2;
    }

    protected java.lang.Object doProceed(org.aopalliance.intercept.MethodInvocation) throws java.lang.Throwable
    {
        org.springframework.aop.support.DelegatingIntroductionInterceptor r2;
        java.lang.Object $r1;
        org.aopalliance.intercept.MethodInvocation r0;

        r2 := @this: org.springframework.aop.support.DelegatingIntroductionInterceptor;

        r0 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = interfaceinvoke r0.<org.aopalliance.intercept.MethodInvocation: java.lang.Object proceed()>();

        return $r1;
    }
}
