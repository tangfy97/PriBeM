public final class com.hp.hpl.jena.tdb.base.file.BlockAccessMapped extends com.hp.hpl.jena.tdb.base.file.BlockAccessBase
{
    private static org.slf4j.Logger log;
    private final int GrowthFactor;
    private final int SegmentSize;
    private final int blocksPerSegment;
    private int initialNumSegements;
    private java.nio.MappedByteBuffer[] segments;
    private int segmentDirtyCount;
    private boolean[] segmentDirty;

    public void <init>(java.lang.String, int)
    {
        java.lang.Object[] $r6, $r13;
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;
        java.lang.Integer $r7, $r8, $r9, $r14, $r15;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, $i7;
        java.lang.String r1, $r10, $r16;
        boolean $z0;
        org.slf4j.Logger $r4, $r5, $r12;
        boolean[] $r3, $r11;
        java.nio.MappedByteBuffer[] $r2;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: void <init>(java.lang.String,int)>(r1, i0);

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int SegmentSize> = 8388608;

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int GrowthFactor> = 2;

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int GrowthFactor> = 2;

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int SegmentSize> = 8388608;

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int initialNumSegements> = 1;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int initialNumSegements>;

        $r2 = newarray (java.nio.MappedByteBuffer)[$i1];

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.MappedByteBuffer[] segments> = $r2;

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int segmentDirtyCount> = 0;

        $i2 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int initialNumSegements>;

        $r3 = newarray (boolean)[$i2];

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: boolean[] segmentDirty> = $r3;

        $i3 = 8388608 / i0;

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int blocksPerSegment> = $i3;

        $i4 = 8388608 % i0;

        if $i4 == 0 goto label1;

        $r12 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger getLog()>();

        $r13 = newarray (java.lang.Object)[3];

        $r13[0] = r1;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8388608);

        $r13[1] = $r14;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r13[2] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s: Segement size(%d) not a multiple of blocksize (%d)", $r13);

        interfaceinvoke $r12.<org.slf4j.Logger: void warn(java.lang.String)>($r16);

     label1:
        i6 = 0;

     label2:
        $i7 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int initialNumSegements>;

        if i6 >= $i7 goto label3;

        $r11 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: boolean[] segmentDirty>;

        $r11[i6] = 0;

        i6 = i6 + 1;

        goto label2;

     label3:
        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int segmentDirtyCount> = 0;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger getLog()>();

        $z0 = interfaceinvoke $r4.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label4;

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger getLog()>();

        $r6 = newarray (java.lang.Object)[3];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8388608);

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[1] = $r8;

        $i5 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int blocksPerSegment>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r6[2] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Segment:%d  BlockSize=%d  blocksPerSegment=%d", $r6);

        interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String)>($r10);

     label4:
        return;
    }

    public com.hp.hpl.jena.tdb.base.block.Block allocate(int)
    {
        long $l2, $l3;
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;
        java.nio.ByteBuffer $r1;
        int i0, $i1, $i4, $i5;
        java.lang.String $r9;
        com.hp.hpl.jena.tdb.base.block.Block $r2;
        com.hp.hpl.jena.tdb.base.file.FileException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        i0 := @parameter0: int;

        if i0 <= 0 goto label1;

        $i4 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int blockSize>;

        if i0 == $i4 goto label1;

        $r3 = new com.hp.hpl.jena.tdb.base.file.FileException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fixed blocksize only: request= ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("fixed size=");

        $i5 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int blockSize>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.tdb.base.file.FileException: void <init>(java.lang.String)>($r9);

        throw $r3;

     label1:
        $i1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int allocateId()>();

        $l2 = (long) $i1;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.ByteBuffer getByteBuffer(long)>($l2);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $r2 = new com.hp.hpl.jena.tdb.base.block.Block;

        $l3 = (long) $i1;

        specialinvoke $r2.<com.hp.hpl.jena.tdb.base.block.Block: void <init>(long,java.nio.ByteBuffer)>($l3, $r1);

        return $r2;
    }

    public com.hp.hpl.jena.tdb.base.block.Block read(long)
    {
        com.hp.hpl.jena.tdb.base.block.Block $r2;
        long l0;
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        l0 := @parameter0: long;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: void check(long)>(l0);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: void checkIfClosed()>();

        $r1 = specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.ByteBuffer getByteBuffer(long)>(l0);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $r2 = new com.hp.hpl.jena.tdb.base.block.Block;

        specialinvoke $r2.<com.hp.hpl.jena.tdb.base.block.Block: void <init>(long,java.nio.ByteBuffer)>(l0, $r1);

        return $r2;
    }

    public void write(com.hp.hpl.jena.tdb.base.block.Block)
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;
        com.hp.hpl.jena.tdb.base.block.Block r1;
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped$CopyContents $r2;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        $r2 = <com.hp.hpl.jena.tdb.base.file.BlockAccessMapped$CopyContents: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped$CopyContents NoCopy>;

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: void write(com.hp.hpl.jena.tdb.base.block.Block,com.hp.hpl.jena.tdb.base.file.BlockAccessMapped$CopyContents)>(r1, $r2);

        return;
    }

    public void overwrite(com.hp.hpl.jena.tdb.base.block.Block)
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;
        com.hp.hpl.jena.tdb.base.block.Block r1;
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped$CopyContents $r2;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: void overwriteNotification(com.hp.hpl.jena.tdb.base.block.Block)>(r1);

        $r2 = <com.hp.hpl.jena.tdb.base.file.BlockAccessMapped$CopyContents: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped$CopyContents Overwrite>;

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: void write(com.hp.hpl.jena.tdb.base.block.Block,com.hp.hpl.jena.tdb.base.file.BlockAccessMapped$CopyContents)>(r1, $r2);

        return;
    }

    private void write(com.hp.hpl.jena.tdb.base.block.Block, com.hp.hpl.jena.tdb.base.file.BlockAccessMapped$CopyContents)
    {
        boolean[] $r5;
        long $l2;
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;
        java.nio.ByteBuffer $r6, $r7;
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped$CopyContents r3, $r4;
        java.lang.Long $r2;
        com.hp.hpl.jena.tdb.base.block.Block r1;
        int $i0, $i1;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        r1 := @parameter0: com.hp.hpl.jena.tdb.base.block.Block;

        r3 := @parameter1: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped$CopyContents;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: void check(com.hp.hpl.jena.tdb.base.block.Block)>(r1);

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: void checkIfClosed()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.block.Block: java.lang.Long getId()>();

        $i0 = virtualinvoke $r2.<java.lang.Long: int intValue()>();

        $r4 = <com.hp.hpl.jena.tdb.base.file.BlockAccessMapped$CopyContents: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped$CopyContents Overwrite>;

        if r3 != $r4 goto label1;

        $l2 = (long) $i0;

        $r6 = specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.ByteBuffer getByteBuffer(long)>($l2);

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.tdb.base.block.Block: java.nio.ByteBuffer getByteBuffer()>();

        virtualinvoke $r7.<java.nio.ByteBuffer: java.nio.Buffer rewind()>();

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>($r7);

     label1:
        $r5 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: boolean[] segmentDirty>;

        $i1 = specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int segment(int)>($i0);

        $r5[$i1] = 1;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: void writeNotification(com.hp.hpl.jena.tdb.base.block.Block)>(r1);

        return;
    }

    public void sync()
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: void checkIfClosed()>();

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: void force()>();

        return;
    }

    private java.nio.ByteBuffer getByteBuffer(long)
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;
        java.lang.Integer $r6, $r7, $r8;
        java.nio.ByteBuffer $r3;
        boolean $z0;
        java.lang.StringBuilder $r12, $r14, $r15, $r17, $r19, $r20, $r22, $r24, $r25;
        java.lang.Throwable $r10;
        java.lang.Object[] $r5;
        long l0, $l8, $l9, $l10;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r9, $r16, $r21, $r26, $r28;
        org.slf4j.Logger $r1, $r4, $r13, $r18, $r23, $r27;
        java.lang.IllegalArgumentException $r11;
        java.nio.MappedByteBuffer $r2;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        l0 := @parameter0: long;

        i1 = (int) l0;

        $i2 = specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int segment(int)>(i1);

        $i3 = specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int byteOffset(int)>(i1);

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger getLog()>();

        $z0 = interfaceinvoke $r1.<org.slf4j.Logger: boolean isTraceEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger getLog()>();

        $r5 = newarray (java.lang.Object)[3];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[0] = $r6;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r5[1] = $r7;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r5[2] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d => [%d, %d]", $r5);

        interfaceinvoke $r4.<org.slf4j.Logger: void trace(java.lang.String)>($r9);

     label1:
        entermonitor r0;

     label2:
        $r2 = specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.MappedByteBuffer allocSegment(int)>($i2);

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i3);

        $i4 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int blockSize>;

        $i5 = $i3 + $i4;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i5);

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        $i6 = virtualinvoke $r2.<java.nio.ByteBuffer: int capacity()>();

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer limit(int)>($i6);

        $l9 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: long numFileBlocks>;

        $i7 = i1 + 1;

        $l8 = (long) $i7;

        $l10 = staticinvoke <java.lang.Math: long max(long,long)>($l9, $l8);

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: long numFileBlocks> = $l10;

     label3:
        exitmonitor r0;

     label4:
        return $r3;

     label5:
        $r11 := @caughtexception;

        $r13 = <com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger log>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Id: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String)>($r16);

        $r18 = <com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger log>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Seg=");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r18.<org.slf4j.Logger: void error(java.lang.String)>($r21);

        $r23 = <com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger log>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Segoff=");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r23.<org.slf4j.Logger: void error(java.lang.String)>($r26);

        $r27 = <com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger log>;

        $r28 = virtualinvoke $r11.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        interfaceinvoke $r27.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r28, $r11);

        throw $r11;

     label6:
        $r10 := @caughtexception;

        exitmonitor r0;

     label7:
        throw $r10;

        catch java.lang.IllegalArgumentException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label4 with label6;
        catch java.lang.Throwable from label5 to label7 with label6;
    }

    private final int segment(int)
    {
        int i0, $i1, $i2;
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        i0 := @parameter0: int;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int blocksPerSegment>;

        $i2 = i0 / $i1;

        return $i2;
    }

    private final int byteOffset(int)
    {
        int i0, $i1, $i2, $i3, $i4;
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        i0 := @parameter0: int;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int blocksPerSegment>;

        $i3 = i0 % $i1;

        $i2 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int blockSize>;

        $i4 = $i3 * $i2;

        return $i4;
    }

    private final long fileLocation(long)
    {
        long l0, $l1;
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        l0 := @parameter0: long;

        $l1 = l0 * 8388608L;

        return $l1;
    }

    private java.nio.MappedByteBuffer allocSegment(int)
    {
        java.nio.channels.FileChannel$MapMode $r5;
        java.lang.Integer $r11;
        byte $b4;
        java.lang.StringBuilder $r15, $r16, $r20, $r21, $r32, $r33, $r37, $r38, $r44, $r45, $r49, $r50, $r51, $r52, $r56, $r57, $r59, $r60, $r62, $r64;
        java.lang.Throwable $r41;
        java.lang.Object[] $r10;
        long $l2, $l3;
        java.lang.String $r12, $r17, $r22, $r34, $r39, $r46, $r53;
        boolean[] $r26, r27, $r28, $r29;
        java.io.IOException $r40;
        java.nio.MappedByteBuffer[] $r1, $r2, $r8, $r23, $r24, $r25, r54;
        com.hp.hpl.jena.tdb.base.file.FileException $r58, $r61, $r63, $r65;
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;
        boolean $z0, $z1;
        int i0, $i1, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        com.hp.hpl.jena.tdb.base.file.FileBase $r3;
        org.slf4j.Logger $r7, $r9, $r13, $r30;
        java.nio.channels.FileChannel $r4;
        java.nio.MappedByteBuffer $r6, r55;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r30 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger getLog()>();

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Segment negative: ");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r30.<org.slf4j.Logger: void error(java.lang.String)>($r34);

        $r58 = new com.hp.hpl.jena.tdb.base.file.FileException;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative segment: ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r58.<com.hp.hpl.jena.tdb.base.file.FileException: void <init>(java.lang.String)>($r39);

        throw $r58;

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.MappedByteBuffer[] segments>;

        $i1 = lengthof $r1;

        if i0 < $i1 goto label2;

        $r23 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.MappedByteBuffer[] segments>;

        $i5 = lengthof $r23;

        $i6 = 2 * $i5;

        r54 = newarray (java.nio.MappedByteBuffer)[$i6];

        $r25 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.MappedByteBuffer[] segments>;

        $r24 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.MappedByteBuffer[] segments>;

        $i7 = lengthof $r24;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r25, 0, r54, 0, $i7);

        $r26 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: boolean[] segmentDirty>;

        $i8 = lengthof $r26;

        $i9 = 2 * $i8;

        r27 = newarray (boolean)[$i9];

        $r29 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: boolean[] segmentDirty>;

        $r28 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: boolean[] segmentDirty>;

        $i10 = lengthof $r28;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r29, 0, r27, 0, $i10);

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: boolean[] segmentDirty> = r27;

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.MappedByteBuffer[] segments> = r54;

        goto label1;

     label2:
        $l2 = (long) i0;

        $l3 = specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: long fileLocation(long)>($l2);

        $b4 = $l3 cmp 0L;

        $i11 = (int) $b4;

        if $i11 >= 0 goto label3;

        $r13 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger getLog()>();

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Segment offset gone negative: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r13.<org.slf4j.Logger: void error(java.lang.String)>($r17);

        $r61 = new com.hp.hpl.jena.tdb.base.file.FileException;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative segment offset: ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r61.<com.hp.hpl.jena.tdb.base.file.FileException: void <init>(java.lang.String)>($r22);

        throw $r61;

     label3:
        $r2 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.MappedByteBuffer[] segments>;

        r55 = $r2[i0];

        if r55 != null goto label9;

     label4:
        $r3 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: com.hp.hpl.jena.tdb.base.file.FileBase file>;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.tdb.base.file.FileBase: java.nio.channels.FileChannel channel()>();

        $r5 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_WRITE>;

        $r6 = virtualinvoke $r4.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r5, $l3, 8388608L);

        r55 = $r6;

        $r7 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger getLog()>();

        $z0 = interfaceinvoke $r7.<org.slf4j.Logger: boolean isDebugEnabled()>();

        if $z0 == 0 goto label5;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger getLog()>();

        $r10 = newarray (java.lang.Object)[1];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10[0] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Segment: %d", $r10);

        interfaceinvoke $r9.<org.slf4j.Logger: void debug(java.lang.String)>($r12);

     label5:
        $r8 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.MappedByteBuffer[] segments>;

        $r8[i0] = $r6;

     label6:
        goto label9;

     label7:
        $r40 := @caughtexception;

        $r41 = virtualinvoke $r40.<java.io.IOException: java.lang.Throwable getCause()>();

        $z1 = $r41 instanceof java.lang.OutOfMemoryError;

        if $z1 == 0 goto label8;

        $r63 = new com.hp.hpl.jena.tdb.base.file.FileException;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BlockMgrMapped.segmentAllocate: Segment = ");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : Offset = ");

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r63.<com.hp.hpl.jena.tdb.base.file.FileException: void <init>(java.lang.String)>($r53);

        throw $r63;

     label8:
        $r65 = new com.hp.hpl.jena.tdb.base.file.FileException;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BlockMgrMapped.segmentAllocate: Segment = ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r65.<com.hp.hpl.jena.tdb.base.file.FileException: void <init>(java.lang.String,java.lang.Throwable)>($r46, $r40);

        throw $r65;

     label9:
        return r55;

        catch java.io.IOException from label4 to label6 with label7;
    }

    private synchronized void flushDirtySegments()
    {
        boolean[] $r4, $r7;
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;
        java.nio.MappedByteBuffer[] $r1, $r2, $r5;
        int $i0, $i1, $i2, i3;
        java.nio.MappedByteBuffer $r3, $r6;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: void force()>();

        i3 = 0;

     label1:
        $r1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.MappedByteBuffer[] segments>;

        $i0 = lengthof $r1;

        if i3 >= $i0 goto label3;

        $r2 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.MappedByteBuffer[] segments>;

        $r3 = $r2[i3];

        if $r3 == null goto label2;

        $r4 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: boolean[] segmentDirty>;

        $z0 = $r4[i3];

        if $z0 == 0 goto label2;

        $r5 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.MappedByteBuffer[] segments>;

        $r6 = $r5[i3];

        virtualinvoke $r6.<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer force()>();

        $r7 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: boolean[] segmentDirty>;

        $r7[i3] = 0;

        $i1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int segmentDirtyCount>;

        $i2 = $i1 - 1;

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int segmentDirtyCount> = $i2;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    protected void _close()
    {
        boolean[] $r2;
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;
        java.nio.MappedByteBuffer[] $r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: void force()>();

        $r1 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: java.nio.MappedByteBuffer[] segments>;

        staticinvoke <java.util.Arrays: void fill(java.lang.Object[],java.lang.Object)>($r1, null);

        $r2 = r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: boolean[] segmentDirty>;

        staticinvoke <java.util.Arrays: void fill(boolean[],boolean)>($r2, 0);

        r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: int segmentDirtyCount> = 0;

        return;
    }

    protected void force()
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: void flushDirtySegments()>();

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: void force()>();

        return;
    }

    protected org.slf4j.Logger getLog()
    {
        org.slf4j.Logger $r0;
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r1;

        r1 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        $r0 = <com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger log>;

        return $r0;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.tdb.base.file.BlockAccessMapped r0;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.BlockAccessMapped;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.BlockAccessBase: java.lang.String getLabel()>();

        return $r1;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/tdb/base/file/BlockAccessMapped;");

        <com.hp.hpl.jena.tdb.base.file.BlockAccessMapped: org.slf4j.Logger log> = $r0;

        return;
    }
}
