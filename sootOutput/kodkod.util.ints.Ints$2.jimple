final class kodkod.util.ints.Ints$2 extends kodkod.util.ints.AbstractIntVector
{
    private final int[] val$ints;

    void <init>(int[])
    {
        int[] r1;
        kodkod.util.ints.Ints$2 r0;

        r0 := @this: kodkod.util.ints.Ints$2;

        r1 := @parameter0: int[];

        r0.<kodkod.util.ints.Ints$2: int[] val$ints> = r1;

        specialinvoke r0.<kodkod.util.ints.AbstractIntVector: void <init>()>();

        return;
    }

    public int get(int)
    {
        int[] $r1;
        kodkod.util.ints.Ints$2 r0;
        int i0, $i1;

        r0 := @this: kodkod.util.ints.Ints$2;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.util.ints.Ints$2: int[] val$ints>;

        $i1 = $r1[i0];

        return $i1;
    }

    public int size()
    {
        int $i0;
        int[] $r1;
        kodkod.util.ints.Ints$2 r0;

        r0 := @this: kodkod.util.ints.Ints$2;

        $r1 = r0.<kodkod.util.ints.Ints$2: int[] val$ints>;

        $i0 = lengthof $r1;

        return $i0;
    }

    public int[] toArray(int[])
    {
        kodkod.util.ints.Ints$2 r0;
        int[] $r1, $r2, $r3, $r4, r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: kodkod.util.ints.Ints$2;

        r5 := @parameter0: int[];

        $i1 = lengthof r5;

        $r1 = r0.<kodkod.util.ints.Ints$2: int[] val$ints>;

        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label1;

        $r4 = r0.<kodkod.util.ints.Ints$2: int[] val$ints>;

        $i3 = lengthof $r4;

        r5 = newarray (int)[$i3];

     label1:
        $r3 = r0.<kodkod.util.ints.Ints$2: int[] val$ints>;

        $r2 = r0.<kodkod.util.ints.Ints$2: int[] val$ints>;

        $i2 = lengthof $r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r5, 0, $i2);

        return r5;
    }
}
