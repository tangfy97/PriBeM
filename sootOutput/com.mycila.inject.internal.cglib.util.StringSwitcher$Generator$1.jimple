class com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1 extends java.lang.Object implements com.mycila.inject.internal.cglib.core.ObjectSwitchCallback
{
    private final com.mycila.inject.internal.cglib.core.CodeEmitter val$e;
    private final java.util.List val$stringList;
    private final com.mycila.inject.internal.cglib.util.StringSwitcher$Generator this$0;

    void <init>(com.mycila.inject.internal.cglib.util.StringSwitcher$Generator, com.mycila.inject.internal.cglib.core.CodeEmitter, java.util.List)
    {
        java.util.List r3;
        com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1 r0;
        com.mycila.inject.internal.cglib.util.StringSwitcher$Generator r1;
        com.mycila.inject.internal.cglib.core.CodeEmitter r2;

        r0 := @this: com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1;

        r1 := @parameter0: com.mycila.inject.internal.cglib.util.StringSwitcher$Generator;

        r2 := @parameter1: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter2: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1: com.mycila.inject.internal.cglib.util.StringSwitcher$Generator this$0> = r1;

        r0.<com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e> = r2;

        r0.<com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1: java.util.List val$stringList> = r3;

        return;
    }

    public void processCase(java.lang.Object, com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2, $r6;
        java.util.List $r5;
        com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1 r0;
        int[] $r3;
        int $i0, $i1;
        com.mycila.inject.internal.asm.Label r7;
        com.mycila.inject.internal.cglib.util.StringSwitcher$Generator $r1;
        java.lang.Object r4;

        r0 := @this: com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1;

        r4 := @parameter0: java.lang.Object;

        r7 := @parameter1: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $r1 = r0.<com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1: com.mycila.inject.internal.cglib.util.StringSwitcher$Generator this$0>;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.util.StringSwitcher$Generator: int[] access$300(com.mycila.inject.internal.cglib.util.StringSwitcher$Generator)>($r1);

        $r5 = r0.<com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1: java.util.List val$stringList>;

        $i0 = interfaceinvoke $r5.<java.util.List: int indexOf(java.lang.Object)>(r4);

        $i1 = $r3[$i0];

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>($i1);

        $r6 = r0.<com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r6.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        return;
    }

    public void processDefault()
    {
        com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1 r0;
        int $i1;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r1, $r2;

        r0 := @this: com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1;

        $r1 = r0.<com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $i1 = (int) -1;

        virtualinvoke $r1.<com.mycila.inject.internal.cglib.core.CodeEmitter: void push(int)>($i1);

        $r2 = r0.<com.mycila.inject.internal.cglib.util.StringSwitcher$Generator$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void return_value()>();

        return;
    }
}
