public class com.hp.hpl.jena.sparql.pfunction.library.concat extends com.hp.hpl.jena.sparql.pfunction.PFuncSimpleAndList
{

    public void <init>()
    {
        com.hp.hpl.jena.sparql.pfunction.library.concat r0;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.library.concat;

        specialinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PFuncSimpleAndList: void <init>()>();

        return;
    }

    public com.hp.hpl.jena.sparql.engine.QueryIterator execEvaluated(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.sparql.pfunction.PropFuncArg, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        com.hp.hpl.jena.graph.Node r0, $r6, r10, r23;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r1;
        com.hp.hpl.jena.sparql.expr.ExprEvalException $r16;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r7;
        java.lang.String $r11, $r21, r24;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3;
        com.hp.hpl.jena.sparql.core.Var $r5;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.engine.binding.Binding r4;
        com.hp.hpl.jena.sparql.pfunction.library.concat r22;
        java.lang.Object $r9;
        java.lang.StringBuilder $r12, $r13, $r14, $r17, $r18, $r19, $r20;
        com.hp.hpl.jena.sparql.engine.QueryIterator $r8, $r15;

        r22 := @this: com.hp.hpl.jena.sparql.pfunction.library.concat;

        r4 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r0 := @parameter1: com.hp.hpl.jena.graph.Node;

        r23 := @parameter2: com.hp.hpl.jena.graph.Node;

        r1 := @parameter3: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r7 := @parameter4: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 != 0 goto label1;

        $r16 = new com.hp.hpl.jena.sparql.expr.ExprEvalException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Subject is not a variable (");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<com.hp.hpl.jena.sparql.expr.ExprEvalException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label1:
        r24 = "";

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.hp.hpl.jena.graph.Node) $r9;

        $z2 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r10);

        if $z2 == 0 goto label3;

        $r15 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator noResults(com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r7);

        return $r15;

     label3:
        $r11 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.NodeFunctions: java.lang.String str(com.hp.hpl.jena.graph.Node)>(r10);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        r24 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label4:
        $r5 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>(r0);

        $r6 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)>(r24);

        $r8 = staticinvoke <com.hp.hpl.jena.sparql.util.IterLib: com.hp.hpl.jena.sparql.engine.QueryIterator oneResult(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.core.Var,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.engine.ExecutionContext)>(r4, $r5, $r6, r7);

        return $r8;
    }
}
