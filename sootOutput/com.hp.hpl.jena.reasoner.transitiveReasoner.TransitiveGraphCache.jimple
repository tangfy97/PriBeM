public class com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache extends java.lang.Object implements com.hp.hpl.jena.reasoner.Finder
{
    protected boolean cacheTriples;
    protected java.util.HashMap nodeMap;
    protected com.hp.hpl.jena.graph.Node directPredicate;
    protected com.hp.hpl.jena.graph.Node closedPredicate;
    protected java.util.Set deletesPending;
    protected java.util.Set originalTriples;

    public void <init>(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.util.HashSet $r2;
        java.util.HashMap $r1;
        com.hp.hpl.jena.graph.Node r3, r4;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r0;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: boolean cacheTriples> = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.Set originalTriples> = $r2;

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node directPredicate> = r3;

        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node closedPredicate> = r4;

        return;
    }

    public com.hp.hpl.jena.graph.Node getClosedPredicate()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r0;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node closedPredicate>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.Node getDirectPredicate()
    {
        com.hp.hpl.jena.graph.Node $r1;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r0;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node directPredicate>;

        return $r1;
    }

    public synchronized void addRelation(com.hp.hpl.jena.graph.Triple)
    {
        java.util.Set $r2;
        com.hp.hpl.jena.graph.Node $r3, $r4;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r2 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.Set originalTriples>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r4 = virtualinvoke r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        specialinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: void addRelation(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r4);

        return;
    }

    private void addRelation(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode $r3, $r4;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$1 $r6;
        com.hp.hpl.jena.graph.Node r0, r1;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r2;
        java.util.HashSet $r5;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = specialinvoke r2.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode getLead(com.hp.hpl.jena.graph.Node)>(r0);

        $r4 = specialinvoke r2.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode getLead(com.hp.hpl.jena.graph.Node)>(r1);

        $z1 = virtualinvoke $r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: boolean pathTo(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>($r4);

        if $z1 == 0 goto label2;

        return;

     label2:
        $z2 = virtualinvoke $r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: boolean pathTo(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>($r3);

        if $z2 == 0 goto label3;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>($r4);

        $r6 = new com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$1;

        specialinvoke $r6.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$1: void <init>(com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache)>(r2);

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void visitPredecessors(com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$Visitor,java.lang.Object,java.lang.Object)>($r6, $r5, $r4);

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void makeLeadNodeFor(java.util.Set)>($r5);

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void propagateSCC()>();

        goto label4;

     label3:
        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void propagateAdd(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>($r4);

        virtualinvoke $r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void assertLinkTo(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>($r4);

     label4:
        if $z2 == 0 goto label5;

     label5:
        return;
    }

    public void removeRelation(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode $r4, $r5;
        java.util.Set $r6, $r7;
        com.hp.hpl.jena.graph.Node $r1, $r2;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r3;
        com.hp.hpl.jena.graph.Triple r0;
        java.util.HashSet $r8;
        boolean $z0;

        r3 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        r0 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        if $r1 != $r2 goto label1;

        return;

     label1:
        $r4 = specialinvoke r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode getLead(com.hp.hpl.jena.graph.Node)>($r1);

        $r5 = specialinvoke r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode getLead(com.hp.hpl.jena.graph.Node)>($r2);

        if $r4 == $r5 goto label2;

        $z0 = virtualinvoke $r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: boolean directPathTo(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>($r5);

        if $z0 != 0 goto label2;

        return;

     label2:
        $r6 = r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.Set deletesPending>;

        if $r6 != null goto label3;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.Set deletesPending> = $r8;

     label3:
        $r7 = r3.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.Set deletesPending>;

        interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r0);

        return;
    }

    private void processDeletes()
    {
        com.hp.hpl.jena.graph.Node $r16, $r31;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.Collection $r6;
        java.util.Set $r2, $r9, $r10, $r11, $r12, $r19, $r21, $r22, $r23, $r25;
        com.hp.hpl.jena.graph.Triple r33, r39;
        java.util.HashMap $r5, $r15, $r30;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r1;
        java.util.HashSet $r0, $r4;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r34, r35, r36, r37, r38, r40;
        java.util.Iterator $r3, $r7, $r8, $r13, $r20, $r27;
        java.lang.Object $r14, $r17, $r18, $r24, $r26, $r28, $r29, $r32;

        r1 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.Set deletesPending>;

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label02;

        $r29 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r33 = (com.hp.hpl.jena.graph.Triple) $r29;

        $r30 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap>;

        $r31 = virtualinvoke r33.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r32 = virtualinvoke $r30.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r31);

        r34 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r32;

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r34);

        goto label01;

     label02:
        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>($r0);

        $r5 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r26 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r35 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r26;

        $r27 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z7 = interfaceinvoke $r27.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label06;

        $r28 = interfaceinvoke $r27.<java.util.Iterator: java.lang.Object next()>();

        r36 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r28;

        $z8 = virtualinvoke r35.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: boolean pathTo(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>(r36);

        if $z8 == 0 goto label05;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r35);

        goto label06;

     label05:
        goto label04;

     label06:
        goto label03;

     label07:
        $r8 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label08:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label12;

        $r18 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r37 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r18;

        $r19 = r37.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succ>;

        $r20 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label09:
        $z5 = interfaceinvoke $r20.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label11;

        $r24 = interfaceinvoke $r20.<java.util.Iterator: java.lang.Object next()>();

        r38 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r24;

        $z6 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r38);

        if $z6 != 0 goto label10;

        $r25 = r38.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        interfaceinvoke $r25.<java.util.Set: boolean remove(java.lang.Object)>(r37);

     label10:
        goto label09;

     label11:
        $r21 = r37.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succ>;

        interfaceinvoke $r21.<java.util.Set: void clear()>();

        $r22 = r37.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set succClosed>;

        interfaceinvoke $r22.<java.util.Set: void clear()>();

        $r23 = r37.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.util.Set pred>;

        interfaceinvoke $r23.<java.util.Set: void clear()>();

        goto label08;

     label12:
        $r10 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.Set originalTriples>;

        $r9 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.Set deletesPending>;

        interfaceinvoke $r10.<java.util.Set: boolean removeAll(java.util.Collection)>($r9);

        $r11 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.Set deletesPending>;

        interfaceinvoke $r11.<java.util.Set: void clear()>();

        $r12 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.Set originalTriples>;

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z3 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label15;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r39 = (com.hp.hpl.jena.graph.Triple) $r14;

        $r15 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap>;

        $r16 = virtualinvoke r39.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r17 = virtualinvoke $r15.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r16);

        r40 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r17;

        $z4 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r40);

        if $z4 == 0 goto label14;

        virtualinvoke r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: void addRelation(com.hp.hpl.jena.graph.Triple)>(r39);

     label14:
        goto label13;

     label15:
        return;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator findWithContinuation(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.reasoner.Finder)
    {
        com.hp.hpl.jena.graph.Node $r1, $r3, $r5;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4, $r7, $r8, $r9, $r10;
        com.hp.hpl.jena.reasoner.Finder r6;
        com.hp.hpl.jena.reasoner.TriplePattern r0;
        boolean $z0, $z1, $z2;

        r2 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        r6 := @parameter1: com.hp.hpl.jena.reasoner.Finder;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z0 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label1;

        $r8 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r0);

        $r9 = interfaceinvoke r6.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r0);

        $r10 = interfaceinvoke $r8.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator andThen(java.util.Iterator)>($r9);

        return $r10;

     label1:
        $r3 = r2.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node directPredicate>;

        $z1 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r3);

        if $z1 != 0 goto label2;

        $r5 = r2.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node closedPredicate>;

        $z2 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label3;

     label2:
        $r4 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r0);

        return $r4;

     label3:
        $r7 = interfaceinvoke r6.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r0);

        return $r7;
    }

    public boolean contains(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r2;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>(r1);

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: boolean hasNext()>();

        interfaceinvoke $r2.<com.hp.hpl.jena.util.iterator.ClosableIterator: void close()>();

        return $z0;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator listAllSubjects()
    {
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r4;
        java.util.Iterator $r3;
        java.util.Set $r2;
        java.util.HashMap $r1;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r0;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r3);

        return $r4;
    }

    public boolean isSubject(com.hp.hpl.jena.graph.Node)
    {
        java.util.Set $r2;
        java.util.HashMap $r1;
        com.hp.hpl.jena.graph.Node r3;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        r3 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        return $z0;
    }

    public boolean cacheAll(com.hp.hpl.jena.reasoner.Finder, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r4;
        com.hp.hpl.jena.graph.Triple $r6;
        com.hp.hpl.jena.reasoner.Finder r0;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r3;
        com.hp.hpl.jena.reasoner.TriplePattern $r1;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r4 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.Finder;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        $r1 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, r2, null);

        $r3 = interfaceinvoke r0.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>($r1);

        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

     label1:
        $z1 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: java.lang.Object next()>();

        $r6 = (com.hp.hpl.jena.graph.Triple) $r5;

        virtualinvoke r4.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: void addRelation(com.hp.hpl.jena.graph.Triple)>($r6);

        goto label1;

     label2:
        interfaceinvoke $r3.<com.hp.hpl.jena.util.iterator.ExtendedIterator: void close()>();

        return $z0;
    }

    public com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)
    {
        com.hp.hpl.jena.graph.Node $r21, $r22, $r23, $r24, $r27, $r28, $r29, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z10, $z11, $z12, $z13;
        java.util.Set $r1, $r26;
        com.hp.hpl.jena.graph.Triple $r11;
        com.hp.hpl.jena.util.iterator.SingletonIterator $r10;
        com.hp.hpl.jena.reasoner.TriplePattern r2;
        com.hp.hpl.jena.util.iterator.NullIterator $r9, $r12, $r14, $r18, $r25;
        java.util.HashMap $r3, $r5, $r15, $r20;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r0;
        int $i0;
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode $r7, $r8, r31, r32, r33;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$FullGraphWalker $r19;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r13, $r17;
        java.lang.Object $r4, $r6, $r16;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        r2 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.Set deletesPending>;

        if $r1 == null goto label01;

        $r26 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.Set deletesPending>;

        $i0 = interfaceinvoke $r26.<java.util.Set: int size()>();

        if $i0 <= 0 goto label01;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: void processDeletes()>();

     label01:
        $r27 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $r28 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r29 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $z7 = virtualinvoke $r28.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z7 != 0 goto label02;

        $r23 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node directPredicate>;

        $z5 = virtualinvoke $r28.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r23);

        if $z5 != 0 goto label02;

        $r24 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node closedPredicate>;

        $z6 = virtualinvoke $r28.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r24);

        if $z6 == 0 goto label14;

     label02:
        $r30 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node directPredicate>;

        $z8 = virtualinvoke $r28.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r30);

        if $z8 != 0 goto label03;

        $z13 = 1;

        $z12 = 1;

        $z11 = 1;

        $z10 = 1;

        goto label04;

     label03:
        $z13 = 0;

        $z12 = 0;

        $z11 = 0;

        $z10 = 0;

     label04:
        $r22 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node closedPredicate>;

        $z0 = virtualinvoke $r27.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z0 == 0 goto label07;

        $z4 = virtualinvoke $r29.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z4 == 0 goto label05;

        $r19 = new com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$FullGraphWalker;

        $r21 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node closedPredicate>;

        $r20 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap>;

        specialinvoke $r19.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache$FullGraphWalker: void <init>(boolean,com.hp.hpl.jena.graph.Node,java.util.HashMap)>($z12, $r21, $r20);

        return $r19;

     label05:
        $r15 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap>;

        $r16 = virtualinvoke $r15.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r29);

        r31 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r16;

        if r31 != null goto label06;

        $r18 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        return $r18;

     label06:
        $r17 = virtualinvoke r31.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.util.iterator.ExtendedIterator listPredecessorTriples(boolean,com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache)>($z10, r0);

        return $r17;

     label07:
        $r3 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r27);

        r32 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r4;

        if r32 != null goto label08;

        $r14 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        return $r14;

     label08:
        $z1 = virtualinvoke $r29.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 == 0 goto label09;

        $r13 = virtualinvoke r32.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.util.iterator.ExtendedIterator listTriples(boolean,com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache)>($z11, r0);

        return $r13;

     label09:
        $r5 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r29);

        r33 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r6;

        $r7 = virtualinvoke r32.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode leadNode()>();

        if r33 != null goto label10;

        $r12 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        return $r12;

     label10:
        $r8 = virtualinvoke r33.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode leadNode()>();

        if $z13 == 0 goto label11;

        $z3 = virtualinvoke $r7.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: boolean pathTo(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>($r8);

        if $z3 == 0 goto label13;

        goto label12;

     label11:
        $z2 = virtualinvoke $r7.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: boolean directPathTo(com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode)>($r8);

        if $z2 == 0 goto label13;

     label12:
        $r10 = new com.hp.hpl.jena.util.iterator.SingletonIterator;

        $r11 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r11.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r27, $r22, $r29);

        specialinvoke $r10.<com.hp.hpl.jena.util.iterator.SingletonIterator: void <init>(java.lang.Object)>($r11);

        return $r10;

     label13:
        $r9 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        return $r9;

     label14:
        $r25 = staticinvoke <com.hp.hpl.jena.util.iterator.NullIterator: com.hp.hpl.jena.util.iterator.NullIterator instance()>();

        return $r25;
    }

    public com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache deepCopy()
    {
        com.hp.hpl.jena.graph.Node $r2, $r3, $r5, $r9, $r10;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache $r0, r1;
        com.hp.hpl.jena.graph.Triple r8;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r6;
        com.hp.hpl.jena.reasoner.TriplePattern $r4;
        java.lang.Object $r7;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        $r0 = new com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        $r3 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node directPredicate>;

        $r2 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node closedPredicate>;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r3, $r2);

        $r4 = new com.hp.hpl.jena.reasoner.TriplePattern;

        $r5 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.graph.Node directPredicate>;

        specialinvoke $r4.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, $r5, null);

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>($r4);

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (com.hp.hpl.jena.graph.Triple) $r7;

        $r9 = virtualinvoke r8.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $r10 = virtualinvoke r8.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: void addRelation(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r9, $r10);

        goto label1;

     label2:
        return $r0;
    }

    public void clear()
    {
        java.util.HashMap $r1;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r0;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap>;

        virtualinvoke $r1.<java.util.HashMap: void clear()>();

        return;
    }

    public void setCaching(boolean)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode $r5;
        java.util.Iterator $r3;
        java.util.Collection $r2;
        java.util.HashMap $r1;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r0;
        java.lang.Object $r4;
        boolean z0, $z1, $z2;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label2;

        $z1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: boolean cacheTriples>;

        if $z1 == 0 goto label2;

        $r1 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r4;

        virtualinvoke $r5.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void clearTripleCache()>();

        goto label1;

     label2:
        r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: boolean cacheTriples> = z0;

        return;
    }

    public java.lang.String dump()
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode r7;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        java.util.HashMap $r2;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r1;
        java.lang.StringBuffer $r0;
        java.lang.Object $r6;
        java.lang.String $r5, $r8;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r6;

        $r8 = virtualinvoke r7.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: java.lang.String dump()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n");

        goto label1;

     label2:
        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r5;
    }

    private com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode getLead(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode $r4, $r5, r7;
        java.util.HashMap $r2, $r6;
        com.hp.hpl.jena.graph.Node r1;
        com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache r0;
        java.lang.Object $r3;

        r0 := @this: com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r2 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode) $r3;

        if r7 != null goto label1;

        $r5 = new com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode;

        specialinvoke $r5.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: void <init>(com.hp.hpl.jena.graph.Node)>(r1);

        $r6 = r0.<com.hp.hpl.jena.reasoner.transitiveReasoner.TransitiveGraphCache: java.util.HashMap nodeMap>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5);

        return $r5;

     label1:
        $r4 = virtualinvoke r7.<com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode: com.hp.hpl.jena.reasoner.transitiveReasoner.GraphNode leadNode()>();

        return $r4;
    }
}
