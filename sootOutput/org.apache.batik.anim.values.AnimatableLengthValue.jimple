public class org.apache.batik.anim.values.AnimatableLengthValue extends org.apache.batik.anim.values.AnimatableValue
{
    protected static final java.lang.String[] UNITS;
    protected short lengthType;
    protected float lengthValue;
    protected short percentageInterpretation;

    protected void <init>(org.apache.batik.dom.anim.AnimationTarget)
    {
        org.apache.batik.dom.anim.AnimationTarget r1;
        org.apache.batik.anim.values.AnimatableLengthValue r0;

        r0 := @this: org.apache.batik.anim.values.AnimatableLengthValue;

        r1 := @parameter0: org.apache.batik.dom.anim.AnimationTarget;

        specialinvoke r0.<org.apache.batik.anim.values.AnimatableValue: void <init>(org.apache.batik.dom.anim.AnimationTarget)>(r1);

        return;
    }

    public void <init>(org.apache.batik.dom.anim.AnimationTarget, short, float, short)
    {
        org.apache.batik.dom.anim.AnimationTarget r1;
        short s0, s1;
        float f0;
        org.apache.batik.anim.values.AnimatableLengthValue r0;

        r0 := @this: org.apache.batik.anim.values.AnimatableLengthValue;

        r1 := @parameter0: org.apache.batik.dom.anim.AnimationTarget;

        s0 := @parameter1: short;

        f0 := @parameter2: float;

        s1 := @parameter3: short;

        specialinvoke r0.<org.apache.batik.anim.values.AnimatableValue: void <init>(org.apache.batik.dom.anim.AnimationTarget)>(r1);

        r0.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType> = s0;

        r0.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue> = f0;

        r0.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation> = s1;

        return;
    }

    public org.apache.batik.anim.values.AnimatableValue interpolate(org.apache.batik.anim.values.AnimatableValue, org.apache.batik.anim.values.AnimatableValue, float, org.apache.batik.anim.values.AnimatableValue, int)
    {
        byte $b3;
        short $s0, $s1, $s2, $s4, $s5, $s6, $s7, $s9, $s10, $s11, $s12, $s13, $s14, $s15, $s16, $s17, $s18, $s19, $s20, $s21, $s22, $s23;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, f19, f20;
        org.apache.batik.anim.values.AnimatableValue r0, r2, r3;
        org.apache.batik.dom.anim.AnimationTarget $r4, $r5, $r6, $r7, $r9;
        int i8, $i24, $i25, $i26, $i27;
        org.apache.batik.anim.values.AnimatableLengthValue r1, r10, r11, r12, $r13;

        r1 := @this: org.apache.batik.anim.values.AnimatableLengthValue;

        r0 := @parameter0: org.apache.batik.anim.values.AnimatableValue;

        r2 := @parameter1: org.apache.batik.anim.values.AnimatableValue;

        f9 := @parameter2: float;

        r3 := @parameter3: org.apache.batik.anim.values.AnimatableValue;

        i8 := @parameter4: int;

        if r0 != null goto label01;

        $r13 = new org.apache.batik.anim.values.AnimatableLengthValue;

        $r9 = r1.<org.apache.batik.anim.values.AnimatableValue: org.apache.batik.dom.anim.AnimationTarget target>;

        specialinvoke $r13.<org.apache.batik.anim.values.AnimatableLengthValue: void <init>(org.apache.batik.dom.anim.AnimationTarget)>($r9);

        r10 = $r13;

        goto label02;

     label01:
        r10 = (org.apache.batik.anim.values.AnimatableLengthValue) r0;

     label02:
        $s21 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        $f18 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

        $s22 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation>;

        $s0 = r1.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        r10.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType> = $s0;

        $f0 = r1.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

        r10.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue> = $f0;

        $s1 = r1.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation>;

        r10.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation> = $s1;

        if r2 == null goto label05;

        r11 = (org.apache.batik.anim.values.AnimatableLengthValue) r2;

        $s16 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        $s15 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation>;

        $s14 = r11.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        $s13 = r11.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation>;

        $z1 = staticinvoke <org.apache.batik.anim.values.AnimatableLengthValue: boolean compatibleTypes(short,short,short,short)>($s16, $s15, $s14, $s13);

        if $z1 != 0 goto label03;

        $r6 = r1.<org.apache.batik.anim.values.AnimatableValue: org.apache.batik.dom.anim.AnimationTarget target>;

        $f15 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

        $s18 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        $s17 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation>;

        $f16 = interfaceinvoke $r6.<org.apache.batik.dom.anim.AnimationTarget: float svgToUserSpace(float,short,short)>($f15, $s18, $s17);

        r10.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue> = $f16;

        r10.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType> = 1;

        $r7 = r11.<org.apache.batik.anim.values.AnimatableValue: org.apache.batik.dom.anim.AnimationTarget target>;

        $f17 = r11.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

        $s20 = r11.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        $s19 = r11.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation>;

        f19 = interfaceinvoke $r7.<org.apache.batik.dom.anim.AnimationTarget: float svgToUserSpace(float,short,short)>($f17, $s20, $s19);

        goto label04;

     label03:
        f19 = r11.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

     label04:
        $f13 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

        $f10 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

        $f11 = f19 - $f10;

        $f12 = f9 * $f11;

        $f14 = $f13 + $f12;

        r10.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue> = $f14;

     label05:
        if r3 == null goto label08;

        r12 = (org.apache.batik.anim.values.AnimatableLengthValue) r3;

        $s7 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        $s6 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation>;

        $s5 = r12.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        $s4 = r12.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation>;

        $z0 = staticinvoke <org.apache.batik.anim.values.AnimatableLengthValue: boolean compatibleTypes(short,short,short,short)>($s7, $s6, $s5, $s4);

        if $z0 != 0 goto label06;

        $r4 = r1.<org.apache.batik.anim.values.AnimatableValue: org.apache.batik.dom.anim.AnimationTarget target>;

        $f6 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

        $s10 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        $s9 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation>;

        $f7 = interfaceinvoke $r4.<org.apache.batik.dom.anim.AnimationTarget: float svgToUserSpace(float,short,short)>($f6, $s10, $s9);

        r10.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue> = $f7;

        r10.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType> = 1;

        $r5 = r12.<org.apache.batik.anim.values.AnimatableValue: org.apache.batik.dom.anim.AnimationTarget target>;

        $f8 = r12.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

        $s12 = r12.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        $s11 = r12.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation>;

        f20 = interfaceinvoke $r5.<org.apache.batik.dom.anim.AnimationTarget: float svgToUserSpace(float,short,short)>($f8, $s12, $s11);

        goto label07;

     label06:
        f20 = r12.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

     label07:
        $f4 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

        $f2 = (float) i8;

        $f3 = $f2 * f20;

        $f5 = $f4 + $f3;

        r10.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue> = $f5;

     label08:
        $s23 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation>;

        $i24 = (int) $s22;

        $i25 = (int) $s23;

        if $i24 != $i25 goto label09;

        $s2 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        $i26 = (int) $s21;

        $i27 = (int) $s2;

        if $i26 != $i27 goto label09;

        $f1 = r10.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

        $b3 = $f18 cmpl $f1;

        if $b3 == 0 goto label10;

     label09:
        r10.<org.apache.batik.anim.values.AnimatableValue: boolean hasChanged> = 1;

     label10:
        return r10;
    }

    public static boolean compatibleTypes(short, short, short, short)
    {
        short s0, s1, s2, s3;
        int $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0;

        s0 := @parameter0: short;

        s2 := @parameter1: short;

        s1 := @parameter2: short;

        s3 := @parameter3: short;

        $i4 = (int) s0;

        $i5 = (int) s1;

        if $i4 != $i5 goto label1;

        $i6 = (int) s0;

        if $i6 != 2 goto label3;

        $i7 = (int) s2;

        $i8 = (int) s3;

        if $i7 == $i8 goto label3;

     label1:
        if s0 != 1 goto label2;

        $i9 = (int) s1;

        if $i9 == 5 goto label3;

     label2:
        $i10 = (int) s0;

        if $i10 != 5 goto label4;

        if s1 != 1 goto label4;

     label3:
        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    public int getLengthType()
    {
        int $i1;
        short $s0;
        org.apache.batik.anim.values.AnimatableLengthValue r0;

        r0 := @this: org.apache.batik.anim.values.AnimatableLengthValue;

        $s0 = r0.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        $i1 = (int) $s0;

        return $i1;
    }

    public float getLengthValue()
    {
        float $f0;
        org.apache.batik.anim.values.AnimatableLengthValue r0;

        r0 := @this: org.apache.batik.anim.values.AnimatableLengthValue;

        $f0 = r0.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

        return $f0;
    }

    public boolean canPace()
    {
        org.apache.batik.anim.values.AnimatableLengthValue r0;

        r0 := @this: org.apache.batik.anim.values.AnimatableLengthValue;

        return 1;
    }

    public float distanceTo(org.apache.batik.anim.values.AnimatableValue)
    {
        org.apache.batik.dom.anim.AnimationTarget $r3, $r4;
        org.apache.batik.anim.values.AnimatableLengthValue r1, r2;
        short $s0, $s1, $s2, $s3;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        org.apache.batik.anim.values.AnimatableValue r0;

        r2 := @this: org.apache.batik.anim.values.AnimatableLengthValue;

        r0 := @parameter0: org.apache.batik.anim.values.AnimatableValue;

        r1 = (org.apache.batik.anim.values.AnimatableLengthValue) r0;

        $r3 = r2.<org.apache.batik.anim.values.AnimatableValue: org.apache.batik.dom.anim.AnimationTarget target>;

        $f0 = r2.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

        $s1 = r2.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        $s0 = r2.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation>;

        $f1 = interfaceinvoke $r3.<org.apache.batik.dom.anim.AnimationTarget: float svgToUserSpace(float,short,short)>($f0, $s1, $s0);

        $r4 = r2.<org.apache.batik.anim.values.AnimatableValue: org.apache.batik.dom.anim.AnimationTarget target>;

        $f2 = r1.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

        $s3 = r1.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        $s2 = r1.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation>;

        $f3 = interfaceinvoke $r4.<org.apache.batik.dom.anim.AnimationTarget: float svgToUserSpace(float,short,short)>($f2, $s3, $s2);

        $f4 = $f1 - $f3;

        $f5 = staticinvoke <java.lang.Math: float abs(float)>($f4);

        return $f5;
    }

    public org.apache.batik.anim.values.AnimatableValue getZeroValue()
    {
        org.apache.batik.dom.anim.AnimationTarget $r2;
        short $s0;
        org.apache.batik.anim.values.AnimatableLengthValue $r0, r1;

        r1 := @this: org.apache.batik.anim.values.AnimatableLengthValue;

        $r0 = new org.apache.batik.anim.values.AnimatableLengthValue;

        $r2 = r1.<org.apache.batik.anim.values.AnimatableValue: org.apache.batik.dom.anim.AnimationTarget target>;

        $s0 = r1.<org.apache.batik.anim.values.AnimatableLengthValue: short percentageInterpretation>;

        specialinvoke $r0.<org.apache.batik.anim.values.AnimatableLengthValue: void <init>(org.apache.batik.dom.anim.AnimationTarget,short,float,short)>($r2, 1, 0.0F, $s0);

        return $r0;
    }

    public java.lang.String getCssText()
    {
        java.lang.String[] $r4;
        org.apache.batik.anim.values.AnimatableLengthValue r1;
        short $s0;
        java.lang.StringBuffer $r3, $r6, $r8;
        int $i1, $i2;
        float $f0;
        java.lang.String $r2, $r5, $r7;

        r1 := @this: org.apache.batik.anim.values.AnimatableLengthValue;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $f0 = r1.<org.apache.batik.anim.values.AnimatableLengthValue: float lengthValue>;

        $r2 = staticinvoke <org.apache.batik.anim.values.AnimatableValue: java.lang.String formatNumber(float)>($f0);

        $r3 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r2);

        $r4 = <org.apache.batik.anim.values.AnimatableLengthValue: java.lang.String[] UNITS>;

        $s0 = r1.<org.apache.batik.anim.values.AnimatableLengthValue: short lengthType>;

        $i2 = (int) $s0;

        $i1 = $i2 - 1;

        $r5 = $r4[$i1];

        $r6 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[10];

        $r0[0] = "";

        $r0[1] = "%";

        $r0[2] = "em";

        $r0[3] = "ex";

        $r0[4] = "px";

        $r0[5] = "cm";

        $r0[6] = "mm";

        $r0[7] = "in";

        $r0[8] = "pt";

        $r0[9] = "pc";

        <org.apache.batik.anim.values.AnimatableLengthValue: java.lang.String[] UNITS> = $r0;

        return;
    }
}
