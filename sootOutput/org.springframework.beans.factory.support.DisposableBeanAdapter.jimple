class org.springframework.beans.factory.support.DisposableBeanAdapter extends java.lang.Object implements org.springframework.beans.factory.DisposableBean, java.lang.Runnable, java.io.Serializable
{
    private static final org.apache.commons.logging.Log logger;
    private final java.lang.Object bean;
    private final java.lang.String beanName;
    private final boolean invokeDisposableBean;
    private final boolean nonPublicAccessAllowed;
    private java.lang.String destroyMethodName;
    private transient java.lang.reflect.Method destroyMethod;
    private java.util.List beanPostProcessors;
    private final java.security.AccessControlContext acc;

    static void <clinit>()
    {
        org.apache.commons.logging.Log $r0;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/springframework/beans/factory/support/DisposableBeanAdapter;");

        <org.springframework.beans.factory.support.DisposableBeanAdapter: org.apache.commons.logging.Log logger> = $r0;

        return;
    }

    public void <init>(java.lang.Object, java.lang.String, org.springframework.beans.factory.support.RootBeanDefinition, java.util.List, java.security.AccessControlContext)
    {
        java.security.AccessControlContext r5;
        org.springframework.beans.factory.support.BeanDefinitionValidationException $r13, $r20, $r27;
        java.lang.reflect.Method $r7, $r8, $r9;
        org.springframework.beans.factory.support.DisposableBeanAdapter r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.util.List r6, $r36;
        java.lang.StringBuilder $r14, $r15, $r16, $r17, $r18, $r21, $r22, $r23, $r24, $r25, $r28, $r29, $r30, $r31, $r32;
        org.springframework.beans.factory.support.RootBeanDefinition r4;
        int $i0, $i1;
        java.lang.String r2, $r19, $r26, $r33, $r34, $r35;
        java.lang.Class[] $r10;
        java.lang.Object r1, $r3;
        java.lang.Class $r11, $r12;

        r0 := @this: org.springframework.beans.factory.support.DisposableBeanAdapter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: org.springframework.beans.factory.support.RootBeanDefinition;

        r6 := @parameter3: java.util.List;

        r5 := @parameter4: java.security.AccessControlContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r1, "Disposable bean must not be null");

        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object bean> = r1;

        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String beanName> = r2;

        $r3 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object bean>;

        $z0 = $r3 instanceof org.springframework.beans.factory.DisposableBean;

        if $z0 == 0 goto label1;

        $z6 = virtualinvoke r4.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isExternallyManagedDestroyMethod(java.lang.String)>("destroy");

        if $z6 != 0 goto label1;

        $z7 = 1;

        goto label2;

     label1:
        $z7 = 0;

     label2:
        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: boolean invokeDisposableBean> = $z7;

        $z8 = virtualinvoke r4.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isNonPublicAccessAllowed()>();

        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: boolean nonPublicAccessAllowed> = $z8;

        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.security.AccessControlContext acc> = r5;

        $r35 = virtualinvoke r4.<org.springframework.beans.factory.support.RootBeanDefinition: java.lang.String getDestroyMethodName()>();

        if $r35 == null goto label6;

        $z1 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: boolean invokeDisposableBean>;

        if $z1 == 0 goto label3;

        $r34 = "destroy";

        $z5 = virtualinvoke $r34.<java.lang.String: boolean equals(java.lang.Object)>($r35);

        if $z5 != 0 goto label6;

     label3:
        $z2 = virtualinvoke r4.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isExternallyManagedDestroyMethod(java.lang.String)>($r35);

        if $z2 != 0 goto label6;

        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String destroyMethodName> = $r35;

        $r7 = specialinvoke r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.reflect.Method determineDestroyMethod()>();

        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.reflect.Method destroyMethod> = $r7;

        $r8 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.reflect.Method destroyMethod>;

        if $r8 != null goto label4;

        $z4 = virtualinvoke r4.<org.springframework.beans.factory.support.RootBeanDefinition: boolean isEnforceDestroyMethod()>();

        if $z4 == 0 goto label6;

        $r27 = new org.springframework.beans.factory.support.BeanDefinitionValidationException;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("Couldn\'t find a destroy method named \'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on bean with name \'");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<org.springframework.beans.factory.support.BeanDefinitionValidationException: void <init>(java.lang.String)>($r33);

        throw $r27;

     label4:
        $r9 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.reflect.Method destroyMethod>;

        $r10 = virtualinvoke $r9.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r10;

        if $i0 <= 1 goto label5;

        $r20 = new org.springframework.beans.factory.support.BeanDefinitionValidationException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Method \'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of bean \'");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has more than one parameter - not supported as destroy method");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<org.springframework.beans.factory.support.BeanDefinitionValidationException: void <init>(java.lang.String)>($r26);

        throw $r20;

     label5:
        $i1 = lengthof $r10;

        if $i1 != 1 goto label6;

        $r12 = $r10[0];

        $r11 = <java.lang.Boolean: java.lang.Class TYPE>;

        $z3 = virtualinvoke $r12.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z3 != 0 goto label6;

        $r13 = new org.springframework.beans.factory.support.BeanDefinitionValidationException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Method \'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' of bean \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has a non-boolean parameter - not supported as destroy method");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<org.springframework.beans.factory.support.BeanDefinitionValidationException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label6:
        $r36 = specialinvoke r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.util.List filterPostProcessors(java.util.List)>(r6);

        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.util.List beanPostProcessors> = $r36;

        return;
    }

    private void <init>(java.lang.Object, java.lang.String, boolean, boolean, java.lang.String, java.util.List)
    {
        java.util.List r4;
        java.lang.Object r1;
        java.lang.String r2, r3;
        org.springframework.beans.factory.support.DisposableBeanAdapter r0;
        boolean z0, z1;

        r0 := @this: org.springframework.beans.factory.support.DisposableBeanAdapter;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object bean> = r1;

        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String beanName> = r2;

        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: boolean invokeDisposableBean> = z0;

        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: boolean nonPublicAccessAllowed> = z1;

        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String destroyMethodName> = r3;

        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.util.List beanPostProcessors> = r4;

        r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.security.AccessControlContext acc> = null;

        return;
    }

    private java.util.List filterPostProcessors(java.util.List)
    {
        java.util.Iterator $r2;
        org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor $r5;
        java.util.ArrayList $r1, r7;
        org.springframework.beans.factory.config.BeanPostProcessor r4;
        java.util.List r0;
        int $i0;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2;
        org.springframework.beans.factory.support.DisposableBeanAdapter r6;

        r6 := @this: org.springframework.beans.factory.support.DisposableBeanAdapter;

        r0 := @parameter0: java.util.List;

        r7 = null;

        if r0 == null goto label3;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r1 = new java.util.ArrayList;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>($i0);

        r7 = $r1;

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.springframework.beans.factory.config.BeanPostProcessor) $r3;

        $z1 = r4 instanceof org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;

        if $z1 == 0 goto label2;

        $r5 = (org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor) r4;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r5);

     label2:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

     label3:
        return r7;
    }

    public void run()
    {
        org.springframework.beans.factory.support.DisposableBeanAdapter r0;

        r0 := @this: org.springframework.beans.factory.support.DisposableBeanAdapter;

        virtualinvoke r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: void destroy()>();

        return;
    }

    public void destroy()
    {
        java.security.AccessControlContext $r10;
        org.springframework.beans.factory.support.DisposableBeanAdapter$1 $r9;
        java.lang.reflect.Method $r3, $r4, $r38;
        org.springframework.beans.factory.support.DisposableBeanAdapter r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.List $r1, $r17, $r18;
        org.springframework.beans.factory.DisposableBean $r8;
        java.lang.StringBuilder $r11, $r14, $r15, $r24, $r26, $r27, $r30, $r33, $r34;
        java.lang.Throwable $r23;
        org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor r37;
        java.lang.String $r2, $r13, $r16, $r21, $r25, $r28, $r32, $r35;
        java.util.Iterator $r19;
        java.lang.SecurityManager $r6;
        org.apache.commons.logging.Log $r5, $r12, $r29, $r31, $r36;
        java.lang.Object $r7, $r20, $r22;

        r0 := @this: org.springframework.beans.factory.support.DisposableBeanAdapter;

        $r1 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.util.List beanPostProcessors>;

        if $r1 == null goto label03;

        $r17 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.util.List beanPostProcessors>;

        $z1 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label03;

        $r18 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.util.List beanPostProcessors>;

        $r19 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

        goto label02;

     label01:
        $r20 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r37 = (org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor) $r20;

        $r22 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object bean>;

        $r21 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String beanName>;

        interfaceinvoke r37.<org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor: void postProcessBeforeDestruction(java.lang.Object,java.lang.String)>($r22, $r21);

     label02:
        $z2 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label01;

     label03:
        $z4 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: boolean invokeDisposableBean>;

        if $z4 == 0 goto label09;

        $r5 = <org.springframework.beans.factory.support.DisposableBeanAdapter: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r5.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label04;

        $r12 = <org.springframework.beans.factory.support.DisposableBeanAdapter: org.apache.commons.logging.Log logger>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invoking destroy() on bean with name \'");

        $r13 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String beanName>;

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r16);

     label04:
        $r6 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r6 == null goto label05;

        $r9 = new org.springframework.beans.factory.support.DisposableBeanAdapter$1;

        specialinvoke $r9.<org.springframework.beans.factory.support.DisposableBeanAdapter$1: void <init>(org.springframework.beans.factory.support.DisposableBeanAdapter)>(r0);

        $r10 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.security.AccessControlContext acc>;

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>($r9, $r10);

        goto label09;

     label05:
        $r7 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object bean>;

        $r8 = (org.springframework.beans.factory.DisposableBean) $r7;

        interfaceinvoke $r8.<org.springframework.beans.factory.DisposableBean: void destroy()>();

     label06:
        goto label09;

     label07:
        $r23 := @caughtexception;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invocation of destroy method failed on bean with name \'");

        $r25 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String beanName>;

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = <org.springframework.beans.factory.support.DisposableBeanAdapter: org.apache.commons.logging.Log logger>;

        $z3 = interfaceinvoke $r29.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z3 == 0 goto label08;

        $r36 = <org.springframework.beans.factory.support.DisposableBeanAdapter: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r36.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r28, $r23);

        goto label09;

     label08:
        $r31 = <org.springframework.beans.factory.support.DisposableBeanAdapter: org.apache.commons.logging.Log logger>;

        $r30 = new java.lang.StringBuilder;

        $r32 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r28);

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>($r32);

        $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r31.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r35);

     label09:
        $r38 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.reflect.Method destroyMethod>;

        if $r38 == null goto label10;

        $r4 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.reflect.Method destroyMethod>;

        specialinvoke r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: void invokeCustomDestroyMethod(java.lang.reflect.Method)>($r4);

        goto label11;

     label10:
        $r2 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String destroyMethodName>;

        if $r2 == null goto label11;

        $r3 = specialinvoke r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.reflect.Method determineDestroyMethod()>();

        if $r3 == null goto label11;

        specialinvoke r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: void invokeCustomDestroyMethod(java.lang.reflect.Method)>($r3);

     label11:
        return;

        catch java.lang.Throwable from label04 to label06 with label07;
    }

    private java.lang.reflect.Method determineDestroyMethod()
    {
        org.springframework.beans.factory.support.BeanDefinitionValidationException $r7;
        java.lang.IllegalArgumentException $r6;
        java.lang.SecurityManager $r0;
        org.springframework.beans.factory.support.DisposableBeanAdapter$2 $r3;
        java.lang.Object $r4;
        java.lang.StringBuilder $r8, $r10, $r11, $r13;
        java.lang.String $r9, $r12, $r14;
        java.lang.reflect.Method $r2, $r5;
        org.springframework.beans.factory.support.DisposableBeanAdapter r1;

        r1 := @this: org.springframework.beans.factory.support.DisposableBeanAdapter;

     label1:
        $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r0 == null goto label3;

        $r3 = new org.springframework.beans.factory.support.DisposableBeanAdapter$2;

        specialinvoke $r3.<org.springframework.beans.factory.support.DisposableBeanAdapter$2: void <init>(org.springframework.beans.factory.support.DisposableBeanAdapter)>(r1);

        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r3);

        $r5 = (java.lang.reflect.Method) $r4;

     label2:
        return $r5;

     label3:
        $r2 = specialinvoke r1.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.reflect.Method findDestroyMethod()>();

     label4:
        return $r2;

     label5:
        $r6 := @caughtexception;

        $r7 = new org.springframework.beans.factory.support.BeanDefinitionValidationException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("Couldn\'t find a unique destroy method on bean with name \'");

        $r9 = r1.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String beanName>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r12 = virtualinvoke $r6.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<org.springframework.beans.factory.support.BeanDefinitionValidationException: void <init>(java.lang.String)>($r14);

        throw $r7;

        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    private java.lang.reflect.Method findDestroyMethod()
    {
        java.lang.reflect.Method[] $r3;
        java.lang.Object $r1, $r5;
        java.lang.Class $r2, $r6;
        java.lang.String $r4, $r7;
        java.lang.reflect.Method $r8;
        org.springframework.beans.factory.support.DisposableBeanAdapter r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.DisposableBeanAdapter;

        $z0 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: boolean nonPublicAccessAllowed>;

        if $z0 == 0 goto label1;

        $r5 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object bean>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String destroyMethodName>;

        $r8 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.reflect.Method findMethodWithMinimalParameters(java.lang.Class,java.lang.String)>($r6, $r7);

        goto label2;

     label1:
        $r1 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object bean>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $r4 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String destroyMethodName>;

        $r8 = staticinvoke <org.springframework.beans.BeanUtils: java.lang.reflect.Method findMethodWithMinimalParameters(java.lang.reflect.Method[],java.lang.String)>($r3, $r4);

     label2:
        return $r8;
    }

    private void invokeCustomDestroyMethod(java.lang.reflect.Method)
    {
        java.security.AccessControlContext $r9;
        org.springframework.beans.factory.support.DisposableBeanAdapter$4 $r8;
        org.springframework.beans.factory.support.DisposableBeanAdapter$3 $r7;
        java.lang.reflect.Method r0;
        boolean $z0, $z1;
        org.springframework.beans.factory.support.DisposableBeanAdapter r5;
        java.lang.Exception $r50;
        java.lang.reflect.InvocationTargetException $r30, $r51;
        java.lang.StringBuilder $r10, $r13, $r14, $r16, $r17, $r21, $r24, $r25, $r27, $r28, $r31, $r33, $r34, $r36, $r37, $r40, $r43, $r45;
        java.lang.Throwable $r20, $r44, $r48;
        java.lang.Object[] r2;
        int $i0, $i1;
        java.lang.Boolean $r19;
        java.lang.String $r12, $r15, $r18, $r23, $r26, $r29, $r32, $r35, $r38, $r42, $r46;
        java.security.PrivilegedActionException $r49;
        java.lang.Class[] $r1;
        java.lang.SecurityManager $r4;
        org.apache.commons.logging.Log $r3, $r11, $r22, $r39, $r41, $r47;
        java.lang.Object $r6;

        r5 := @this: org.springframework.beans.factory.support.DisposableBeanAdapter;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        r2 = newarray (java.lang.Object)[$i0];

        $i1 = lengthof $r1;

        if $i1 != 1 goto label01;

        $r19 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        r2[0] = $r19;

     label01:
        $r3 = <org.springframework.beans.factory.support.DisposableBeanAdapter: org.apache.commons.logging.Log logger>;

        $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z0 == 0 goto label02;

        $r11 = <org.springframework.beans.factory.support.DisposableBeanAdapter: org.apache.commons.logging.Log logger>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invoking destroy method \'");

        $r12 = r5.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String destroyMethodName>;

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on bean with name \'");

        $r15 = r5.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String beanName>;

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r11.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r18);

     label02:
        $r4 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r4 == null goto label06;

        $r7 = new org.springframework.beans.factory.support.DisposableBeanAdapter$3;

        specialinvoke $r7.<org.springframework.beans.factory.support.DisposableBeanAdapter$3: void <init>(org.springframework.beans.factory.support.DisposableBeanAdapter,java.lang.reflect.Method)>(r5, r0);

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r7);

     label03:
        $r8 = new org.springframework.beans.factory.support.DisposableBeanAdapter$4;

        specialinvoke $r8.<org.springframework.beans.factory.support.DisposableBeanAdapter$4: void <init>(org.springframework.beans.factory.support.DisposableBeanAdapter,java.lang.reflect.Method,java.lang.Object[])>(r5, r0, r2);

        $r9 = r5.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.security.AccessControlContext acc>;

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>($r8, $r9);

     label04:
        goto label11;

     label05:
        $r49 := @caughtexception;

        $r50 = virtualinvoke $r49.<java.security.PrivilegedActionException: java.lang.Exception getException()>();

        $r51 = (java.lang.reflect.InvocationTargetException) $r50;

        throw $r51;

     label06:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>(r0);

        $r6 = r5.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object bean>;

        virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, r2);

     label07:
        goto label11;

     label08:
        $r30 := @caughtexception;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invocation of destroy method \'");

        $r32 = r5.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String destroyMethodName>;

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' failed on bean with name \'");

        $r35 = r5.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String beanName>;

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39 = <org.springframework.beans.factory.support.DisposableBeanAdapter: org.apache.commons.logging.Log logger>;

        $z1 = interfaceinvoke $r39.<org.apache.commons.logging.Log: boolean isDebugEnabled()>();

        if $z1 == 0 goto label09;

        $r47 = <org.springframework.beans.factory.support.DisposableBeanAdapter: org.apache.commons.logging.Log logger>;

        $r48 = virtualinvoke $r30.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        interfaceinvoke $r47.<org.apache.commons.logging.Log: void warn(java.lang.Object,java.lang.Throwable)>($r38, $r48);

        goto label11;

     label09:
        $r41 = <org.springframework.beans.factory.support.DisposableBeanAdapter: org.apache.commons.logging.Log logger>;

        $r40 = new java.lang.StringBuilder;

        $r42 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r38);

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>($r42);

        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r44 = virtualinvoke $r30.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r41.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r46);

        goto label11;

     label10:
        $r20 := @caughtexception;

        $r22 = <org.springframework.beans.factory.support.DisposableBeanAdapter: org.apache.commons.logging.Log logger>;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("Couldn\'t invoke destroy method \'");

        $r23 = r5.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String destroyMethodName>;

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on bean with name \'");

        $r26 = r5.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String beanName>;

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r22.<org.apache.commons.logging.Log: void error(java.lang.Object,java.lang.Throwable)>($r29, $r20);

     label11:
        return;

        catch java.security.PrivilegedActionException from label03 to label04 with label05;
        catch java.lang.reflect.InvocationTargetException from label02 to label07 with label08;
        catch java.lang.Throwable from label02 to label07 with label10;
    }

    protected java.lang.Object writeReplace()
    {
        org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor r10;
        java.util.ArrayList $r6, r11;
        java.lang.String $r3, $r4;
        org.springframework.beans.factory.support.DisposableBeanAdapter r0, $r2;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r8;
        java.util.List $r1, $r7;
        java.lang.Object $r5, $r9;

        r0 := @this: org.springframework.beans.factory.support.DisposableBeanAdapter;

        r11 = null;

        $r1 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.util.List beanPostProcessors>;

        if $r1 == null goto label3;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r11 = $r6;

        $r7 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.util.List beanPostProcessors>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor) $r9;

        $z2 = r10 instanceof java.io.Serializable;

        if $z2 == 0 goto label2;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r10);

     label2:
        $z3 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label1;

     label3:
        $r2 = new org.springframework.beans.factory.support.DisposableBeanAdapter;

        $r5 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object bean>;

        $r4 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String beanName>;

        $z1 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: boolean invokeDisposableBean>;

        $z0 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: boolean nonPublicAccessAllowed>;

        $r3 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.String destroyMethodName>;

        specialinvoke $r2.<org.springframework.beans.factory.support.DisposableBeanAdapter: void <init>(java.lang.Object,java.lang.String,boolean,boolean,java.lang.String,java.util.List)>($r5, $r4, $z1, $z0, $r3, r11);

        return $r2;
    }

    static java.lang.Object access$0(org.springframework.beans.factory.support.DisposableBeanAdapter)
    {
        java.lang.Object $r1;
        org.springframework.beans.factory.support.DisposableBeanAdapter r0;

        r0 := @parameter0: org.springframework.beans.factory.support.DisposableBeanAdapter;

        $r1 = r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.Object bean>;

        return $r1;
    }

    static java.lang.reflect.Method access$1(org.springframework.beans.factory.support.DisposableBeanAdapter)
    {
        java.lang.reflect.Method $r1;
        org.springframework.beans.factory.support.DisposableBeanAdapter r0;

        r0 := @parameter0: org.springframework.beans.factory.support.DisposableBeanAdapter;

        $r1 = specialinvoke r0.<org.springframework.beans.factory.support.DisposableBeanAdapter: java.lang.reflect.Method findDestroyMethod()>();

        return $r1;
    }
}
