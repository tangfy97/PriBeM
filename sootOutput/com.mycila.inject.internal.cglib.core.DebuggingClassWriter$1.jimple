class com.mycila.inject.internal.cglib.core.DebuggingClassWriter$1 extends java.lang.Object implements java.security.PrivilegedAction
{
    private final com.mycila.inject.internal.cglib.core.DebuggingClassWriter this$0;

    void <init>(com.mycila.inject.internal.cglib.core.DebuggingClassWriter)
    {
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter$1 r0;
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter r1;

        r0 := @this: com.mycila.inject.internal.cglib.core.DebuggingClassWriter$1;

        r1 := @parameter0: com.mycila.inject.internal.cglib.core.DebuggingClassWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.core.DebuggingClassWriter$1: com.mycila.inject.internal.cglib.core.DebuggingClassWriter this$0> = r1;

        return;
    }

    public java.lang.Object run()
    {
        byte[] $r2;
        boolean $z0;
        java.io.PrintWriter $r34;
        com.mycila.inject.internal.cglib.core.CodeGenerationException $r38;
        java.lang.Throwable $r39, $r40;
        com.mycila.inject.internal.asm.util.TraceClassVisitor $r36;
        com.mycila.inject.internal.asm.ClassReader $r33;
        java.io.BufferedOutputStream $r22, $r31;
        java.lang.StringBuffer $r8, $r10, $r11, $r12, $r18, $r19, $r20, $r27, $r28, $r29;
        java.io.OutputStreamWriter $r35;
        java.lang.String $r3, $r5, $r6, $r9, $r13, $r17, $r21, $r26, $r30;
        java.io.FileOutputStream $r23, $r32;
        char $c0, $c1;
        java.io.IOException $r37;
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter$1 r0;
        java.io.File $r7, $r14, $r15, $r16, $r24, $r25;
        com.mycila.inject.internal.cglib.core.DebuggingClassWriter $r1, $r4;

        r0 := @this: com.mycila.inject.internal.cglib.core.DebuggingClassWriter$1;

        $r1 = r0.<com.mycila.inject.internal.cglib.core.DebuggingClassWriter$1: com.mycila.inject.internal.cglib.core.DebuggingClassWriter this$0>;

        $r2 = staticinvoke <com.mycila.inject.internal.cglib.core.DebuggingClassWriter: byte[] access$001(com.mycila.inject.internal.cglib.core.DebuggingClassWriter)>($r1);

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String access$100()>();

        if $r3 == null goto label13;

        $r4 = r0.<com.mycila.inject.internal.cglib.core.DebuggingClassWriter$1: com.mycila.inject.internal.cglib.core.DebuggingClassWriter this$0>;

        $r5 = staticinvoke <com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String access$200(com.mycila.inject.internal.cglib.core.DebuggingClassWriter)>($r4);

        $c0 = <java.io.File: char separatorChar>;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(char,char)>(46, $c0);

     label01:
        $r7 = new java.io.File;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = staticinvoke <com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String access$100()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $c1 = <java.io.File: char separatorChar>;

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r7.<java.io.File: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r7.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r14.<java.io.File: boolean mkdirs()>();

        $r15 = new java.io.File;

        $r16 = new java.io.File;

        $r17 = staticinvoke <com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String access$100()>();

        specialinvoke $r16.<java.io.File: void <init>(java.lang.String)>($r17);

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".class");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r15.<java.io.File: void <init>(java.io.File,java.lang.String)>($r16, $r21);

        $r22 = new java.io.BufferedOutputStream;

        $r23 = new java.io.FileOutputStream;

        specialinvoke $r23.<java.io.FileOutputStream: void <init>(java.io.File)>($r15);

        specialinvoke $r22.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r23);

     label02:
        virtualinvoke $r22.<java.io.OutputStream: void write(byte[])>($r2);

     label03:
        virtualinvoke $r22.<java.io.OutputStream: void close()>();

        goto label06;

     label04:
        $r40 := @caughtexception;

     label05:
        virtualinvoke $r22.<java.io.OutputStream: void close()>();

        throw $r40;

     label06:
        $z0 = staticinvoke <com.mycila.inject.internal.cglib.core.DebuggingClassWriter: boolean access$300()>();

        if $z0 == 0 goto label11;

        $r24 = new java.io.File;

        $r25 = new java.io.File;

        $r26 = staticinvoke <com.mycila.inject.internal.cglib.core.DebuggingClassWriter: java.lang.String access$100()>();

        specialinvoke $r25.<java.io.File: void <init>(java.lang.String)>($r26);

        $r27 = new java.lang.StringBuffer;

        specialinvoke $r27.<java.lang.StringBuffer: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".asm");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r24.<java.io.File: void <init>(java.io.File,java.lang.String)>($r25, $r30);

        $r31 = new java.io.BufferedOutputStream;

        $r32 = new java.io.FileOutputStream;

        specialinvoke $r32.<java.io.FileOutputStream: void <init>(java.io.File)>($r24);

        specialinvoke $r31.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r32);

     label07:
        $r33 = new com.mycila.inject.internal.asm.ClassReader;

        specialinvoke $r33.<com.mycila.inject.internal.asm.ClassReader: void <init>(byte[])>($r2);

        $r34 = new java.io.PrintWriter;

        $r35 = new java.io.OutputStreamWriter;

        specialinvoke $r35.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r31);

        specialinvoke $r34.<java.io.PrintWriter: void <init>(java.io.Writer)>($r35);

        $r36 = new com.mycila.inject.internal.asm.util.TraceClassVisitor;

        specialinvoke $r36.<com.mycila.inject.internal.asm.util.TraceClassVisitor: void <init>(com.mycila.inject.internal.asm.ClassVisitor,java.io.PrintWriter)>(null, $r34);

        virtualinvoke $r33.<com.mycila.inject.internal.asm.ClassReader: void accept(com.mycila.inject.internal.asm.ClassVisitor,int)>($r36, 0);

        virtualinvoke $r34.<java.io.PrintWriter: void flush()>();

     label08:
        virtualinvoke $r31.<java.io.OutputStream: void close()>();

        goto label11;

     label09:
        $r39 := @caughtexception;

     label10:
        virtualinvoke $r31.<java.io.OutputStream: void close()>();

        throw $r39;

     label11:
        goto label13;

     label12:
        $r37 := @caughtexception;

        $r38 = new com.mycila.inject.internal.cglib.core.CodeGenerationException;

        specialinvoke $r38.<com.mycila.inject.internal.cglib.core.CodeGenerationException: void <init>(java.lang.Throwable)>($r37);

        throw $r38;

     label13:
        return $r2;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
        catch java.io.IOException from label01 to label11 with label12;
    }
}
