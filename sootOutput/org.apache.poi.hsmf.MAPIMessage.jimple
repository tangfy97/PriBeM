public class org.apache.poi.hsmf.MAPIMessage extends org.apache.poi.POIDocument
{
    private org.apache.poi.util.POILogger logger;
    private org.apache.poi.hsmf.datatypes.Chunks mainChunks;
    private org.apache.poi.hsmf.datatypes.NameIdChunks nameIdChunks;
    private org.apache.poi.hsmf.datatypes.RecipientChunks[] recipientChunks;
    private org.apache.poi.hsmf.datatypes.AttachmentChunks[] attachmentChunks;
    private boolean returnNullOnMissingChunk;

    public void <init>()
    {
        org.apache.poi.util.POILogger $r2;
        org.apache.poi.poifs.filesystem.POIFSFileSystem $r1;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = new org.apache.poi.poifs.filesystem.POIFSFileSystem;

        specialinvoke $r1.<org.apache.poi.poifs.filesystem.POIFSFileSystem: void <init>()>();

        specialinvoke r0.<org.apache.poi.POIDocument: void <init>(org.apache.poi.poifs.filesystem.POIFSFileSystem)>($r1);

        $r2 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/hsmf/MAPIMessage;");

        r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.util.POILogger logger> = $r2;

        r0.<org.apache.poi.hsmf.MAPIMessage: boolean returnNullOnMissingChunk> = 0;

        return;
    }

    public void <init>(java.lang.String) throws java.io.IOException
    {
        java.io.FileInputStream $r1;
        java.lang.String r3;
        org.apache.poi.hsmf.MAPIMessage r0;
        java.io.File $r2;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        r3 := @parameter0: java.lang.String;

        $r1 = new java.io.FileInputStream;

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r3);

        specialinvoke $r1.<java.io.FileInputStream: void <init>(java.io.File)>($r2);

        specialinvoke r0.<org.apache.poi.hsmf.MAPIMessage: void <init>(java.io.InputStream)>($r1);

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.poi.hsmf.MAPIMessage r0;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem $r1;
        java.io.InputStream r2;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        r2 := @parameter0: java.io.InputStream;

        $r1 = new org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        specialinvoke $r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: void <init>(java.io.InputStream)>(r2);

        specialinvoke r0.<org.apache.poi.hsmf.MAPIMessage: void <init>(org.apache.poi.poifs.filesystem.NPOIFSFileSystem)>($r1);

        return;
    }

    public void <init>(org.apache.poi.poifs.filesystem.POIFSFileSystem) throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.DirectoryNode $r2;
        org.apache.poi.poifs.filesystem.POIFSFileSystem r1;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        r1 := @parameter0: org.apache.poi.poifs.filesystem.POIFSFileSystem;

        $r2 = virtualinvoke r1.<org.apache.poi.poifs.filesystem.POIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode getRoot()>();

        specialinvoke r0.<org.apache.poi.hsmf.MAPIMessage: void <init>(org.apache.poi.poifs.filesystem.DirectoryNode)>($r2);

        return;
    }

    public void <init>(org.apache.poi.poifs.filesystem.NPOIFSFileSystem) throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.DirectoryNode $r2;
        org.apache.poi.hsmf.MAPIMessage r0;
        org.apache.poi.poifs.filesystem.NPOIFSFileSystem r1;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        r1 := @parameter0: org.apache.poi.poifs.filesystem.NPOIFSFileSystem;

        $r2 = virtualinvoke r1.<org.apache.poi.poifs.filesystem.NPOIFSFileSystem: org.apache.poi.poifs.filesystem.DirectoryNode getRoot()>();

        specialinvoke r0.<org.apache.poi.hsmf.MAPIMessage: void <init>(org.apache.poi.poifs.filesystem.DirectoryNode)>($r2);

        return;
    }

    public void <init>(org.apache.poi.poifs.filesystem.DirectoryNode, org.apache.poi.poifs.filesystem.POIFSFileSystem) throws java.io.IOException
    {
        org.apache.poi.poifs.filesystem.DirectoryNode r1;
        org.apache.poi.poifs.filesystem.POIFSFileSystem r2;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        r1 := @parameter0: org.apache.poi.poifs.filesystem.DirectoryNode;

        r2 := @parameter1: org.apache.poi.poifs.filesystem.POIFSFileSystem;

        specialinvoke r0.<org.apache.poi.hsmf.MAPIMessage: void <init>(org.apache.poi.poifs.filesystem.DirectoryNode)>(r1);

        return;
    }

    public void <init>(org.apache.poi.poifs.filesystem.DirectoryNode) throws java.io.IOException
    {
        java.lang.Object[] $r7, $r10;
        org.apache.poi.hsmf.datatypes.Chunks $r20;
        org.apache.poi.hsmf.datatypes.ChunkGroup[] $r3;
        org.apache.poi.hsmf.datatypes.AttachmentChunks $r17;
        java.util.ArrayList $r4, $r5;
        org.apache.poi.hsmf.datatypes.AttachmentChunks$AttachmentChunksSorter $r12;
        int i0, $i1, $i2, i3;
        org.apache.poi.hsmf.datatypes.AttachmentChunks[] $r6, $r8, $r13;
        org.apache.poi.hsmf.datatypes.ChunkGroup r16;
        org.apache.poi.hsmf.MAPIMessage r0;
        boolean $z0, $z1, $z2, $z3;
        org.apache.poi.hsmf.datatypes.RecipientChunks $r18;
        org.apache.poi.util.POILogger $r2;
        org.apache.poi.hsmf.datatypes.NameIdChunks $r19;
        org.apache.poi.poifs.filesystem.DirectoryNode r1;
        org.apache.poi.hsmf.datatypes.RecipientChunks[] $r9, $r11, $r15;
        org.apache.poi.hsmf.datatypes.RecipientChunks$RecipientChunksSorter $r14;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        r1 := @parameter0: org.apache.poi.poifs.filesystem.DirectoryNode;

        specialinvoke r0.<org.apache.poi.POIDocument: void <init>(org.apache.poi.poifs.filesystem.DirectoryNode)>(r1);

        $r2 = staticinvoke <org.apache.poi.util.POILogFactory: org.apache.poi.util.POILogger getLogger(java.lang.Class)>(class "Lorg/apache/poi/hsmf/MAPIMessage;");

        r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.util.POILogger logger> = $r2;

        r0.<org.apache.poi.hsmf.MAPIMessage: boolean returnNullOnMissingChunk> = 0;

        $r3 = staticinvoke <org.apache.poi.hsmf.parsers.POIFSChunkParser: org.apache.poi.hsmf.datatypes.ChunkGroup[] parse(org.apache.poi.poifs.filesystem.DirectoryNode)>(r1);

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i0 = lengthof $r3;

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        r16 = $r3[i3];

        $z0 = r16 instanceof org.apache.poi.hsmf.datatypes.Chunks;

        if $z0 == 0 goto label2;

        $r20 = (org.apache.poi.hsmf.datatypes.Chunks) r16;

        r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks> = $r20;

        goto label4;

     label2:
        $z1 = r16 instanceof org.apache.poi.hsmf.datatypes.NameIdChunks;

        if $z1 == 0 goto label3;

        $r19 = (org.apache.poi.hsmf.datatypes.NameIdChunks) r16;

        r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.NameIdChunks nameIdChunks> = $r19;

        goto label4;

     label3:
        $z2 = r16 instanceof org.apache.poi.hsmf.datatypes.RecipientChunks;

        if $z2 == 0 goto label4;

        $r18 = (org.apache.poi.hsmf.datatypes.RecipientChunks) r16;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r18);

     label4:
        $z3 = r16 instanceof org.apache.poi.hsmf.datatypes.AttachmentChunks;

        if $z3 == 0 goto label5;

        $r17 = (org.apache.poi.hsmf.datatypes.AttachmentChunks) r16;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r17);

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        $r6 = newarray (org.apache.poi.hsmf.datatypes.AttachmentChunks)[$i1];

        $r7 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r6);

        $r8 = (org.apache.poi.hsmf.datatypes.AttachmentChunks[]) $r7;

        r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.AttachmentChunks[] attachmentChunks> = $r8;

        $i2 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        $r9 = newarray (org.apache.poi.hsmf.datatypes.RecipientChunks)[$i2];

        $r10 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (org.apache.poi.hsmf.datatypes.RecipientChunks[]) $r10;

        r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.RecipientChunks[] recipientChunks> = $r11;

        $r13 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.AttachmentChunks[] attachmentChunks>;

        $r12 = new org.apache.poi.hsmf.datatypes.AttachmentChunks$AttachmentChunksSorter;

        specialinvoke $r12.<org.apache.poi.hsmf.datatypes.AttachmentChunks$AttachmentChunksSorter: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r13, $r12);

        $r15 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.RecipientChunks[] recipientChunks>;

        $r14 = new org.apache.poi.hsmf.datatypes.RecipientChunks$RecipientChunksSorter;

        specialinvoke $r14.<org.apache.poi.hsmf.datatypes.RecipientChunks$RecipientChunksSorter: void <init>()>();

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>($r15, $r14);

        return;
    }

    public java.lang.String getStringFromChunk(org.apache.poi.hsmf.datatypes.StringChunk) throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        org.apache.poi.hsmf.datatypes.StringChunk r0;
        org.apache.poi.hsmf.exceptions.ChunkNotFoundException $r3;
        java.lang.String $r1;
        org.apache.poi.hsmf.MAPIMessage r2;
        boolean $z0;

        r2 := @this: org.apache.poi.hsmf.MAPIMessage;

        r0 := @parameter0: org.apache.poi.hsmf.datatypes.StringChunk;

        if r0 != null goto label2;

        $z0 = r2.<org.apache.poi.hsmf.MAPIMessage: boolean returnNullOnMissingChunk>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r3 = new org.apache.poi.hsmf.exceptions.ChunkNotFoundException;

        specialinvoke $r3.<org.apache.poi.hsmf.exceptions.ChunkNotFoundException: void <init>()>();

        throw $r3;

     label2:
        $r1 = virtualinvoke r0.<org.apache.poi.hsmf.datatypes.StringChunk: java.lang.String getValue()>();

        return $r1;
    }

    public java.lang.String getTextBody() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        org.apache.poi.hsmf.datatypes.StringChunk $r2;
        org.apache.poi.hsmf.datatypes.Chunks $r1;
        java.lang.String $r3;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r2 = $r1.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.StringChunk textBodyChunk>;

        $r3 = virtualinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String getStringFromChunk(org.apache.poi.hsmf.datatypes.StringChunk)>($r2);

        return $r3;
    }

    public java.lang.String getHtmlBody() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        org.apache.poi.hsmf.datatypes.StringChunk $r4;
        org.apache.poi.hsmf.datatypes.Chunks $r1, $r3, $r6;
        org.apache.poi.hsmf.datatypes.ByteChunk $r2, $r7;
        java.lang.String $r5, $r8;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r2 = $r1.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.ByteChunk htmlBodyChunkBinary>;

        if $r2 == null goto label1;

        $r6 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r7 = $r6.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.ByteChunk htmlBodyChunkBinary>;

        $r8 = virtualinvoke $r7.<org.apache.poi.hsmf.datatypes.ByteChunk: java.lang.String getAs7bitString()>();

        return $r8;

     label1:
        $r3 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r4 = $r3.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.StringChunk htmlBodyChunkString>;

        $r5 = virtualinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String getStringFromChunk(org.apache.poi.hsmf.datatypes.StringChunk)>($r4);

        return $r5;
    }

    public java.lang.String getHmtlBody() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        java.lang.String $r1;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = virtualinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String getHtmlBody()>();

        return $r1;
    }

    public java.lang.String getRtfBody() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        byte[] $r6;
        org.apache.poi.hsmf.datatypes.Chunks $r1;
        org.apache.poi.hsmf.datatypes.MAPIProperty $r5;
        java.io.IOException $r9;
        java.lang.RuntimeException $r10;
        org.apache.poi.hsmf.datatypes.ByteChunk r2;
        int $i0;
        org.apache.poi.hsmf.exceptions.ChunkNotFoundException $r8;
        org.apache.poi.hmef.attribute.MAPIRtfAttribute $r3;
        org.apache.poi.hsmf.datatypes.Types$MAPIType $r4;
        java.lang.String $r7;
        org.apache.poi.hsmf.MAPIMessage r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        r2 = $r1.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.ByteChunk rtfBodyChunk>;

        if r2 != null goto label2;

        $z0 = r0.<org.apache.poi.hsmf.MAPIMessage: boolean returnNullOnMissingChunk>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r8 = new org.apache.poi.hsmf.exceptions.ChunkNotFoundException;

        specialinvoke $r8.<org.apache.poi.hsmf.exceptions.ChunkNotFoundException: void <init>()>();

        throw $r8;

     label2:
        $r3 = new org.apache.poi.hmef.attribute.MAPIRtfAttribute;

        $r5 = <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty RTF_COMPRESSED>;

        $r4 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType BINARY>;

        $i0 = virtualinvoke $r4.<org.apache.poi.hsmf.datatypes.Types$MAPIType: int getId()>();

        $r6 = virtualinvoke r2.<org.apache.poi.hsmf.datatypes.ByteChunk: byte[] getValue()>();

        specialinvoke $r3.<org.apache.poi.hmef.attribute.MAPIRtfAttribute: void <init>(org.apache.poi.hsmf.datatypes.MAPIProperty,int,byte[])>($r5, $i0, $r6);

        $r7 = virtualinvoke $r3.<org.apache.poi.hmef.attribute.MAPIRtfAttribute: java.lang.String getDataString()>();

     label3:
        return $r7;

     label4:
        $r9 := @caughtexception;

        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Shouldn\'t happen", $r9);

        throw $r10;

        catch java.io.IOException from label2 to label3 with label4;
    }

    public java.lang.String getSubject() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        org.apache.poi.hsmf.datatypes.StringChunk $r2;
        org.apache.poi.hsmf.datatypes.Chunks $r1;
        java.lang.String $r3;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r2 = $r1.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.StringChunk subjectChunk>;

        $r3 = virtualinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String getStringFromChunk(org.apache.poi.hsmf.datatypes.StringChunk)>($r2);

        return $r3;
    }

    public java.lang.String getDisplayFrom() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        org.apache.poi.hsmf.datatypes.StringChunk $r2;
        org.apache.poi.hsmf.datatypes.Chunks $r1;
        java.lang.String $r3;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r2 = $r1.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.StringChunk displayFromChunk>;

        $r3 = virtualinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String getStringFromChunk(org.apache.poi.hsmf.datatypes.StringChunk)>($r2);

        return $r3;
    }

    public java.lang.String getDisplayTo() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        org.apache.poi.hsmf.datatypes.StringChunk $r2;
        org.apache.poi.hsmf.datatypes.Chunks $r1;
        java.lang.String $r3;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r2 = $r1.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.StringChunk displayToChunk>;

        $r3 = virtualinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String getStringFromChunk(org.apache.poi.hsmf.datatypes.StringChunk)>($r2);

        return $r3;
    }

    public java.lang.String getDisplayCC() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        org.apache.poi.hsmf.datatypes.StringChunk $r2;
        org.apache.poi.hsmf.datatypes.Chunks $r1;
        java.lang.String $r3;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r2 = $r1.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.StringChunk displayCCChunk>;

        $r3 = virtualinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String getStringFromChunk(org.apache.poi.hsmf.datatypes.StringChunk)>($r2);

        return $r3;
    }

    public java.lang.String getDisplayBCC() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        org.apache.poi.hsmf.datatypes.StringChunk $r2;
        org.apache.poi.hsmf.datatypes.Chunks $r1;
        java.lang.String $r3;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r2 = $r1.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.StringChunk displayBCCChunk>;

        $r3 = virtualinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String getStringFromChunk(org.apache.poi.hsmf.datatypes.StringChunk)>($r2);

        return $r3;
    }

    public java.lang.String getRecipientEmailAddress() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        java.lang.String[] $r1;
        java.lang.String $r2;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = virtualinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String[] getRecipientEmailAddressList()>();

        $r2 = specialinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String toSemicolonList(java.lang.String[])>($r1);

        return $r2;
    }

    public java.lang.String[] getRecipientEmailAddressList() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        java.lang.String[] r5;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r8, $r14;
        org.apache.poi.hsmf.MAPIMessage r0;
        boolean $z0;
        org.apache.poi.hsmf.datatypes.RecipientChunks r7;
        org.apache.poi.hsmf.datatypes.RecipientChunks[] $r1, $r3, $r4, $r6;
        org.apache.poi.hsmf.exceptions.ChunkNotFoundException $r2, $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.RecipientChunks[] recipientChunks>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.RecipientChunks[] recipientChunks>;

        $i0 = lengthof $r3;

        if $i0 != 0 goto label2;

     label1:
        $r2 = new org.apache.poi.hsmf.exceptions.ChunkNotFoundException;

        specialinvoke $r2.<org.apache.poi.hsmf.exceptions.ChunkNotFoundException: void <init>(java.lang.String)>("No recipients section present");

        throw $r2;

     label2:
        $r4 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.RecipientChunks[] recipientChunks>;

        $i1 = lengthof $r4;

        r5 = newarray (java.lang.String)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r5;

        if i4 >= $i2 goto label7;

        $r6 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.RecipientChunks[] recipientChunks>;

        r7 = $r6[i4];

        $r8 = virtualinvoke r7.<org.apache.poi.hsmf.datatypes.RecipientChunks: java.lang.String getRecipientEmailAddress()>();

        if $r8 == null goto label4;

        r5[i4] = $r8;

        goto label6;

     label4:
        $z0 = r0.<org.apache.poi.hsmf.MAPIMessage: boolean returnNullOnMissingChunk>;

        if $z0 == 0 goto label5;

        r5[i4] = null;

        goto label6;

     label5:
        $r9 = new org.apache.poi.hsmf.exceptions.ChunkNotFoundException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No email address holding chunks found for the ");

        $i3 = i4 + 1;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("th recipient");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.poi.hsmf.exceptions.ChunkNotFoundException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label6:
        i4 = i4 + 1;

        goto label3;

     label7:
        return r5;
    }

    public java.lang.String getRecipientNames() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        java.lang.String[] $r1;
        java.lang.String $r2;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = virtualinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String[] getRecipientNamesList()>();

        $r2 = specialinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String toSemicolonList(java.lang.String[])>($r1);

        return $r2;
    }

    public java.lang.String[] getRecipientNamesList() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        java.lang.String[] r5;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r8, $r14;
        org.apache.poi.hsmf.MAPIMessage r0;
        org.apache.poi.hsmf.datatypes.RecipientChunks r7;
        org.apache.poi.hsmf.datatypes.RecipientChunks[] $r1, $r3, $r4, $r6;
        org.apache.poi.hsmf.exceptions.ChunkNotFoundException $r2, $r9;
        java.lang.StringBuilder $r10, $r11, $r12, $r13;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.RecipientChunks[] recipientChunks>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.RecipientChunks[] recipientChunks>;

        $i0 = lengthof $r3;

        if $i0 != 0 goto label2;

     label1:
        $r2 = new org.apache.poi.hsmf.exceptions.ChunkNotFoundException;

        specialinvoke $r2.<org.apache.poi.hsmf.exceptions.ChunkNotFoundException: void <init>(java.lang.String)>("No recipients section present");

        throw $r2;

     label2:
        $r4 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.RecipientChunks[] recipientChunks>;

        $i1 = lengthof $r4;

        r5 = newarray (java.lang.String)[$i1];

        i4 = 0;

     label3:
        $i2 = lengthof r5;

        if i4 >= $i2 goto label6;

        $r6 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.RecipientChunks[] recipientChunks>;

        r7 = $r6[i4];

        $r8 = virtualinvoke r7.<org.apache.poi.hsmf.datatypes.RecipientChunks: java.lang.String getRecipientName()>();

        if $r8 == null goto label4;

        r5[i4] = $r8;

        goto label5;

     label4:
        $r9 = new org.apache.poi.hsmf.exceptions.ChunkNotFoundException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No display name holding chunks found for the ");

        $i3 = i4 + 1;

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("th recipient");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<org.apache.poi.hsmf.exceptions.ChunkNotFoundException: void <init>(java.lang.String)>($r14);

        throw $r9;

     label5:
        i4 = i4 + 1;

        goto label3;

     label6:
        return r5;
    }

    public void guess7BitEncoding()
    {
        org.apache.poi.hsmf.datatypes.PropertyValue$LongPropertyValue $r16;
        org.apache.poi.hsmf.datatypes.Chunks $r12;
        java.lang.Integer $r17, $r23;
        java.util.regex.Matcher $r7, $r10;
        java.util.Map $r13;
        boolean $z0, $z1, $z2, $z3;
        org.apache.poi.hsmf.datatypes.MAPIProperty $r1, $r2, r24;
        org.apache.poi.util.POILogger $r22;
        java.util.List r25;
        org.apache.poi.hsmf.datatypes.MAPIProperty[] $r0;
        org.apache.poi.hsmf.exceptions.ChunkNotFoundException $r19, $r20;
        java.util.regex.Pattern $r6, $r9;
        java.io.UnsupportedEncodingException $r21;
        java.lang.String[] $r4;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7;
        java.lang.String $r5, $r8, $r11, $r18, r26;
        org.apache.poi.hsmf.MAPIMessage r3;
        java.lang.Object $r14, $r15;

        r3 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r0 = newarray (org.apache.poi.hsmf.datatypes.MAPIProperty)[2];

        $r1 = <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty MESSAGE_CODEPAGE>;

        $r0[0] = $r1;

        $r2 = <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty INTERNET_CPID>;

        $r0[1] = $r2;

        i4 = lengthof $r0;

        i5 = 0;

     label01:
        if i5 >= i4 goto label06;

        r24 = $r0[i5];

        $r12 = r3.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r13 = virtualinvoke $r12.<org.apache.poi.hsmf.datatypes.Chunks: java.util.Map getProperties()>();

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r24);

        r25 = (java.util.List) $r14;

        if r25 == null goto label05;

        $i2 = interfaceinvoke r25.<java.util.List: int size()>();

        if $i2 <= 0 goto label05;

        $r15 = interfaceinvoke r25.<java.util.List: java.lang.Object get(int)>(0);

        $r16 = (org.apache.poi.hsmf.datatypes.PropertyValue$LongPropertyValue) $r15;

        $r17 = virtualinvoke $r16.<org.apache.poi.hsmf.datatypes.PropertyValue$LongPropertyValue: java.lang.Integer getValue()>();

        $i3 = virtualinvoke $r17.<java.lang.Integer: int intValue()>();

     label02:
        $r18 = staticinvoke <org.apache.poi.util.CodePageUtil: java.lang.String codepageToEncoding(int,boolean)>($i3, 1);

        virtualinvoke r3.<org.apache.poi.hsmf.MAPIMessage: void set7BitEncoding(java.lang.String)>($r18);

     label03:
        return;

     label04:
        $r21 := @caughtexception;

        $r22 = r3.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.util.POILogger logger>;

        $r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r22.<org.apache.poi.util.POILogger: void log(int,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(5, "Invalid codepage ID ", $r23, " set for the message via ", r24, ", ignoring");

     label05:
        i5 = i5 + 1;

        goto label01;

     label06:
        $r4 = virtualinvoke r3.<org.apache.poi.hsmf.MAPIMessage: java.lang.String[] getHeaders()>();

        if $r4 == null goto label10;

        $i1 = lengthof $r4;

        if $i1 <= 0 goto label10;

        $r9 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("Content-Type:.*?charset=[\"\']?([^;\'\"]+)[\"\']?", 2);

        i6 = lengthof $r4;

        i7 = 0;

     label07:
        if i7 >= i6 goto label10;

        r26 = $r4[i7];

        $z1 = virtualinvoke r26.<java.lang.String: boolean startsWith(java.lang.String)>("Content-Type");

        if $z1 == 0 goto label09;

        $r10 = virtualinvoke $r9.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r26);

        $z2 = virtualinvoke $r10.<java.util.regex.Matcher: boolean matches()>();

        if $z2 == 0 goto label09;

        $r11 = virtualinvoke $r10.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("utf-8");

        if $z3 != 0 goto label08;

        virtualinvoke r3.<org.apache.poi.hsmf.MAPIMessage: void set7BitEncoding(java.lang.String)>($r11);

     label08:
        return;

     label09:
        i7 = i7 + 1;

        goto label07;

     label10:
        goto label12;

     label11:
        $r20 := @caughtexception;

     label12:
        $r5 = virtualinvoke r3.<org.apache.poi.hsmf.MAPIMessage: java.lang.String getHmtlBody()>();

        if $r5 == null goto label14;

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 <= 0 goto label14;

        $r6 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("<META\\s+HTTP-EQUIV=\"Content-Type\"\\s+CONTENT=\"text/html;\\s+charset=(.*?)\"");

        $r7 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r5);

        $z0 = virtualinvoke $r7.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label14;

        $r8 = virtualinvoke $r7.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        virtualinvoke r3.<org.apache.poi.hsmf.MAPIMessage: void set7BitEncoding(java.lang.String)>($r8);

     label13:
        return;

     label14:
        goto label16;

     label15:
        $r19 := @caughtexception;

     label16:
        return;

        catch java.io.UnsupportedEncodingException from label02 to label03 with label04;
        catch org.apache.poi.hsmf.exceptions.ChunkNotFoundException from label06 to label08 with label11;
        catch org.apache.poi.hsmf.exceptions.ChunkNotFoundException from label09 to label10 with label11;
        catch org.apache.poi.hsmf.exceptions.ChunkNotFoundException from label12 to label13 with label15;
    }

    public void set7BitEncoding(java.lang.String)
    {
        org.apache.poi.hsmf.datatypes.Chunks $r1;
        int i0, $i1, i2, i3, i4, i5, i6, i7;
        java.lang.String r6;
        org.apache.poi.hsmf.MAPIMessage r0;
        boolean $z0, $z1, $z2;
        org.apache.poi.hsmf.datatypes.StringChunk $r7, $r11, $r12;
        org.apache.poi.hsmf.datatypes.Chunk r5, r13, r14;
        org.apache.poi.hsmf.datatypes.RecipientChunks r15;
        org.apache.poi.hsmf.datatypes.NameIdChunks $r3, $r8;
        org.apache.poi.hsmf.datatypes.RecipientChunks[] $r10;
        org.apache.poi.hsmf.datatypes.Chunk[] $r2, $r4, $r9;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        r6 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.Chunk[] getChunks()>();

        i2 = lengthof $r2;

        i3 = 0;

     label01:
        if i3 >= i2 goto label03;

        r13 = $r2[i3];

        $z2 = r13 instanceof org.apache.poi.hsmf.datatypes.StringChunk;

        if $z2 == 0 goto label02;

        $r12 = (org.apache.poi.hsmf.datatypes.StringChunk) r13;

        virtualinvoke $r12.<org.apache.poi.hsmf.datatypes.StringChunk: void set7BitEncoding(java.lang.String)>(r6);

     label02:
        i3 = i3 + 1;

        goto label01;

     label03:
        $r3 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.NameIdChunks nameIdChunks>;

        if $r3 == null goto label06;

        $r8 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.NameIdChunks nameIdChunks>;

        $r9 = virtualinvoke $r8.<org.apache.poi.hsmf.datatypes.NameIdChunks: org.apache.poi.hsmf.datatypes.Chunk[] getChunks()>();

        i4 = lengthof $r9;

        i5 = 0;

     label04:
        if i5 >= i4 goto label06;

        r14 = $r9[i5];

        $z1 = r14 instanceof org.apache.poi.hsmf.datatypes.StringChunk;

        if $z1 == 0 goto label05;

        $r11 = (org.apache.poi.hsmf.datatypes.StringChunk) r14;

        virtualinvoke $r11.<org.apache.poi.hsmf.datatypes.StringChunk: void set7BitEncoding(java.lang.String)>(r6);

     label05:
        i5 = i5 + 1;

        goto label04;

     label06:
        $r10 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.RecipientChunks[] recipientChunks>;

        $i1 = lengthof $r10;

        i6 = 0;

     label07:
        if i6 >= $i1 goto label11;

        r15 = $r10[i6];

        $r4 = virtualinvoke r15.<org.apache.poi.hsmf.datatypes.RecipientChunks: org.apache.poi.hsmf.datatypes.Chunk[] getAll()>();

        i0 = lengthof $r4;

        i7 = 0;

     label08:
        if i7 >= i0 goto label10;

        r5 = $r4[i7];

        $z0 = r5 instanceof org.apache.poi.hsmf.datatypes.StringChunk;

        if $z0 == 0 goto label09;

        $r7 = (org.apache.poi.hsmf.datatypes.StringChunk) r5;

        virtualinvoke $r7.<org.apache.poi.hsmf.datatypes.StringChunk: void set7BitEncoding(java.lang.String)>(r6);

     label09:
        i7 = i7 + 1;

        goto label08;

     label10:
        i6 = i6 + 1;

        goto label07;

     label11:
        return;
    }

    public boolean has7BitEncodingStrings()
    {
        org.apache.poi.hsmf.datatypes.Chunks $r1;
        boolean $z0, $z1, $z2;
        org.apache.poi.hsmf.datatypes.StringChunk $r6, $r12, $r15;
        org.apache.poi.hsmf.datatypes.Chunk r5, r18, r19;
        org.apache.poi.hsmf.datatypes.RecipientChunks r20;
        org.apache.poi.hsmf.datatypes.RecipientChunks[] $r11;
        org.apache.poi.hsmf.datatypes.Chunk[] $r2, $r4, $r10;
        int i0, $i1, i2, i3, i4, i5, i6, i7;
        org.apache.poi.hsmf.datatypes.Types$MAPIType $r7, $r8, $r13, $r14, $r16, $r17;
        org.apache.poi.hsmf.MAPIMessage r0;
        org.apache.poi.hsmf.datatypes.NameIdChunks $r3, $r9;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r2 = virtualinvoke $r1.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.Chunk[] getChunks()>();

        i2 = lengthof $r2;

        i3 = 0;

     label01:
        if i3 >= i2 goto label03;

        r18 = $r2[i3];

        $z2 = r18 instanceof org.apache.poi.hsmf.datatypes.StringChunk;

        if $z2 == 0 goto label02;

        $r15 = (org.apache.poi.hsmf.datatypes.StringChunk) r18;

        $r16 = virtualinvoke $r15.<org.apache.poi.hsmf.datatypes.StringChunk: org.apache.poi.hsmf.datatypes.Types$MAPIType getType()>();

        $r17 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType ASCII_STRING>;

        if $r16 != $r17 goto label02;

        return 1;

     label02:
        i3 = i3 + 1;

        goto label01;

     label03:
        $r3 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.NameIdChunks nameIdChunks>;

        if $r3 == null goto label06;

        $r9 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.NameIdChunks nameIdChunks>;

        $r10 = virtualinvoke $r9.<org.apache.poi.hsmf.datatypes.NameIdChunks: org.apache.poi.hsmf.datatypes.Chunk[] getChunks()>();

        i4 = lengthof $r10;

        i5 = 0;

     label04:
        if i5 >= i4 goto label06;

        r19 = $r10[i5];

        $z1 = r19 instanceof org.apache.poi.hsmf.datatypes.StringChunk;

        if $z1 == 0 goto label05;

        $r12 = (org.apache.poi.hsmf.datatypes.StringChunk) r19;

        $r13 = virtualinvoke $r12.<org.apache.poi.hsmf.datatypes.StringChunk: org.apache.poi.hsmf.datatypes.Types$MAPIType getType()>();

        $r14 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType ASCII_STRING>;

        if $r13 != $r14 goto label05;

        return 1;

     label05:
        i5 = i5 + 1;

        goto label04;

     label06:
        $r11 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.RecipientChunks[] recipientChunks>;

        $i1 = lengthof $r11;

        i6 = 0;

     label07:
        if i6 >= $i1 goto label11;

        r20 = $r11[i6];

        $r4 = virtualinvoke r20.<org.apache.poi.hsmf.datatypes.RecipientChunks: org.apache.poi.hsmf.datatypes.Chunk[] getAll()>();

        i0 = lengthof $r4;

        i7 = 0;

     label08:
        if i7 >= i0 goto label10;

        r5 = $r4[i7];

        $z0 = r5 instanceof org.apache.poi.hsmf.datatypes.StringChunk;

        if $z0 == 0 goto label09;

        $r6 = (org.apache.poi.hsmf.datatypes.StringChunk) r5;

        $r7 = virtualinvoke $r6.<org.apache.poi.hsmf.datatypes.StringChunk: org.apache.poi.hsmf.datatypes.Types$MAPIType getType()>();

        $r8 = <org.apache.poi.hsmf.datatypes.Types: org.apache.poi.hsmf.datatypes.Types$MAPIType ASCII_STRING>;

        if $r7 != $r8 goto label09;

        return 1;

     label09:
        i7 = i7 + 1;

        goto label08;

     label10:
        i6 = i6 + 1;

        goto label07;

     label11:
        return 0;
    }

    public java.lang.String[] getHeaders() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        org.apache.poi.hsmf.datatypes.StringChunk $r2;
        org.apache.poi.hsmf.datatypes.Chunks $r1;
        java.lang.String[] $r4;
        java.lang.String $r3;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r2 = $r1.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.StringChunk messageHeaders>;

        $r3 = virtualinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String getStringFromChunk(org.apache.poi.hsmf.datatypes.StringChunk)>($r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\r?\\n");

        return $r4;
    }

    public java.lang.String getConversationTopic() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        org.apache.poi.hsmf.datatypes.StringChunk $r2;
        org.apache.poi.hsmf.datatypes.Chunks $r1;
        java.lang.String $r3;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r2 = $r1.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.StringChunk conversationTopic>;

        $r3 = virtualinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String getStringFromChunk(org.apache.poi.hsmf.datatypes.StringChunk)>($r2);

        return $r3;
    }

    public java.lang.String getMessageClass() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        org.apache.poi.hsmf.datatypes.StringChunk $r2;
        org.apache.poi.hsmf.datatypes.Chunks $r1;
        java.lang.String $r3;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r2 = $r1.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.StringChunk messageClass>;

        $r3 = virtualinvoke r0.<org.apache.poi.hsmf.MAPIMessage: java.lang.String getStringFromChunk(org.apache.poi.hsmf.datatypes.StringChunk)>($r2);

        return $r3;
    }

    public java.util.Calendar getMessageDate() throws org.apache.poi.hsmf.exceptions.ChunkNotFoundException
    {
        org.apache.poi.hsmf.datatypes.PropertyValue$TimePropertyValue $r14;
        org.apache.poi.hsmf.datatypes.Chunks $r1, $r9, $r16;
        java.util.Calendar $r15, $r18;
        java.util.Map $r10;
        int i0, $i1, i2;
        org.apache.poi.hsmf.MAPIMessage r0;
        boolean $z0;
        org.apache.poi.hsmf.datatypes.MAPIProperty $r4, $r5, $r6, r8;
        java.util.List r12;
        org.apache.poi.hsmf.datatypes.MAPIProperty[] $r3;
        org.apache.poi.hsmf.exceptions.ChunkNotFoundException $r7;
        java.lang.Object $r11, $r13;
        org.apache.poi.hsmf.datatypes.MessageSubmissionChunk $r2, $r17;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r2 = $r1.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.MessageSubmissionChunk submissionChunk>;

        if $r2 == null goto label1;

        $r16 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r17 = $r16.<org.apache.poi.hsmf.datatypes.Chunks: org.apache.poi.hsmf.datatypes.MessageSubmissionChunk submissionChunk>;

        $r18 = virtualinvoke $r17.<org.apache.poi.hsmf.datatypes.MessageSubmissionChunk: java.util.Calendar getAcceptedAtTime()>();

        return $r18;

     label1:
        $r3 = newarray (org.apache.poi.hsmf.datatypes.MAPIProperty)[3];

        $r4 = <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty CLIENT_SUBMIT_TIME>;

        $r3[0] = $r4;

        $r5 = <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty LAST_MODIFICATION_TIME>;

        $r3[1] = $r5;

        $r6 = <org.apache.poi.hsmf.datatypes.MAPIProperty: org.apache.poi.hsmf.datatypes.MAPIProperty CREATION_TIME>;

        $r3[2] = $r6;

        i0 = lengthof $r3;

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        r8 = $r3[i2];

        $r9 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        $r10 = virtualinvoke $r9.<org.apache.poi.hsmf.datatypes.Chunks: java.util.Map getProperties()>();

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r12 = (java.util.List) $r11;

        if r12 == null goto label3;

        $i1 = interfaceinvoke r12.<java.util.List: int size()>();

        if $i1 <= 0 goto label3;

        $r13 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(0);

        $r14 = (org.apache.poi.hsmf.datatypes.PropertyValue$TimePropertyValue) $r13;

        $r15 = virtualinvoke $r14.<org.apache.poi.hsmf.datatypes.PropertyValue$TimePropertyValue: java.util.Calendar getValue()>();

        return $r15;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        $z0 = r0.<org.apache.poi.hsmf.MAPIMessage: boolean returnNullOnMissingChunk>;

        if $z0 == 0 goto label5;

        return null;

     label5:
        $r7 = new org.apache.poi.hsmf.exceptions.ChunkNotFoundException;

        specialinvoke $r7.<org.apache.poi.hsmf.exceptions.ChunkNotFoundException: void <init>()>();

        throw $r7;
    }

    public org.apache.poi.hsmf.datatypes.Chunks getMainChunks()
    {
        org.apache.poi.hsmf.datatypes.Chunks $r1;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.Chunks mainChunks>;

        return $r1;
    }

    public org.apache.poi.hsmf.datatypes.RecipientChunks[] getRecipientDetailsChunks()
    {
        org.apache.poi.hsmf.MAPIMessage r0;
        org.apache.poi.hsmf.datatypes.RecipientChunks[] $r1;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.RecipientChunks[] recipientChunks>;

        return $r1;
    }

    public org.apache.poi.hsmf.datatypes.NameIdChunks getNameIdChunks()
    {
        org.apache.poi.hsmf.datatypes.NameIdChunks $r1;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.NameIdChunks nameIdChunks>;

        return $r1;
    }

    public org.apache.poi.hsmf.datatypes.AttachmentChunks[] getAttachmentFiles()
    {
        org.apache.poi.hsmf.datatypes.AttachmentChunks[] $r1;
        org.apache.poi.hsmf.MAPIMessage r0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $r1 = r0.<org.apache.poi.hsmf.MAPIMessage: org.apache.poi.hsmf.datatypes.AttachmentChunks[] attachmentChunks>;

        return $r1;
    }

    public void write(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r2;
        java.lang.UnsupportedOperationException $r0;
        org.apache.poi.hsmf.MAPIMessage r1;

        r1 := @this: org.apache.poi.hsmf.MAPIMessage;

        r2 := @parameter0: java.io.OutputStream;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Writing isn\'t yet supported for HSMF, sorry");

        throw $r0;
    }

    public boolean isReturnNullOnMissingChunk()
    {
        org.apache.poi.hsmf.MAPIMessage r0;
        boolean $z0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        $z0 = r0.<org.apache.poi.hsmf.MAPIMessage: boolean returnNullOnMissingChunk>;

        return $z0;
    }

    public void setReturnNullOnMissingChunk(boolean)
    {
        org.apache.poi.hsmf.MAPIMessage r0;
        boolean z0;

        r0 := @this: org.apache.poi.hsmf.MAPIMessage;

        z0 := @parameter0: boolean;

        r0.<org.apache.poi.hsmf.MAPIMessage: boolean returnNullOnMissingChunk> = z0;

        return;
    }

    private java.lang.String toSemicolonList(java.lang.String[])
    {
        java.lang.String[] r1;
        java.lang.StringBuffer $r0;
        int i0, i1;
        java.lang.String $r2, r3;
        org.apache.poi.hsmf.MAPIMessage r4;
        boolean z0;

        r4 := @this: org.apache.poi.hsmf.MAPIMessage;

        r1 := @parameter0: java.lang.String[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        z0 = 1;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        r3 = r1[i1];

        if r3 != null goto label2;

        goto label5;

     label2:
        if z0 == 0 goto label3;

        z0 = 0;

        goto label4;

     label3:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; ");

     label4:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }
}
