public class org.apache.commons.collections.map.LazyMap extends org.apache.commons.collections.map.AbstractMapDecorator implements java.util.Map, java.io.Serializable
{
    private static final long serialVersionUID;
    protected final org.apache.commons.collections.Transformer factory;

    public static java.util.Map decorate(java.util.Map, org.apache.commons.collections.Factory)
    {
        org.apache.commons.collections.map.LazyMap $r0;
        org.apache.commons.collections.Factory r2;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.commons.collections.Factory;

        $r0 = new org.apache.commons.collections.map.LazyMap;

        specialinvoke $r0.<org.apache.commons.collections.map.LazyMap: void <init>(java.util.Map,org.apache.commons.collections.Factory)>(r1, r2);

        return $r0;
    }

    public static java.util.Map decorate(java.util.Map, org.apache.commons.collections.Transformer)
    {
        org.apache.commons.collections.map.LazyMap $r0;
        org.apache.commons.collections.Transformer r2;
        java.util.Map r1;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.commons.collections.Transformer;

        $r0 = new org.apache.commons.collections.map.LazyMap;

        specialinvoke $r0.<org.apache.commons.collections.map.LazyMap: void <init>(java.util.Map,org.apache.commons.collections.Transformer)>(r1, r2);

        return $r0;
    }

    protected void <init>(java.util.Map, org.apache.commons.collections.Factory)
    {
        org.apache.commons.collections.map.LazyMap r0;
        org.apache.commons.collections.Transformer $r3;
        java.util.Map r1;
        org.apache.commons.collections.Factory r2;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: org.apache.commons.collections.map.LazyMap;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.commons.collections.Factory;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractMapDecorator: void <init>(java.util.Map)>(r1);

        if r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Factory must not be null");

        throw $r4;

     label1:
        $r3 = staticinvoke <org.apache.commons.collections.functors.FactoryTransformer: org.apache.commons.collections.Transformer getInstance(org.apache.commons.collections.Factory)>(r2);

        r0.<org.apache.commons.collections.map.LazyMap: org.apache.commons.collections.Transformer factory> = $r3;

        return;
    }

    protected void <init>(java.util.Map, org.apache.commons.collections.Transformer)
    {
        org.apache.commons.collections.map.LazyMap r0;
        org.apache.commons.collections.Transformer r2;
        java.util.Map r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.collections.map.LazyMap;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: org.apache.commons.collections.Transformer;

        specialinvoke r0.<org.apache.commons.collections.map.AbstractMapDecorator: void <init>(java.util.Map)>(r1);

        if r2 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Factory must not be null");

        throw $r3;

     label1:
        r0.<org.apache.commons.collections.map.LazyMap: org.apache.commons.collections.Transformer factory> = r2;

        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        org.apache.commons.collections.map.LazyMap r1;
        java.io.ObjectOutputStream r0;
        java.util.Map $r2;

        r1 := @this: org.apache.commons.collections.map.LazyMap;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r1.<org.apache.commons.collections.map.LazyMap: java.util.Map map>;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        return;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.apache.commons.collections.map.LazyMap r1;
        java.util.Map $r3;
        java.io.ObjectInputStream r0;
        java.lang.Object $r2;

        r1 := @this: org.apache.commons.collections.map.LazyMap;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r2 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r3 = (java.util.Map) $r2;

        r1.<org.apache.commons.collections.map.LazyMap: java.util.Map map> = $r3;

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        org.apache.commons.collections.Transformer $r5;
        org.apache.commons.collections.map.LazyMap r0;
        java.util.Map $r2, $r3, $r7;
        java.lang.Object r1, $r4, $r6;
        boolean $z0;

        r0 := @this: org.apache.commons.collections.map.LazyMap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<org.apache.commons.collections.map.LazyMap: java.util.Map map>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r5 = r0.<org.apache.commons.collections.map.LazyMap: org.apache.commons.collections.Transformer factory>;

        $r6 = interfaceinvoke $r5.<org.apache.commons.collections.Transformer: java.lang.Object transform(java.lang.Object)>(r1);

        $r7 = r0.<org.apache.commons.collections.map.LazyMap: java.util.Map map>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

        return $r6;

     label1:
        $r3 = r0.<org.apache.commons.collections.map.LazyMap: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        return $r4;
    }

    public static void <clinit>()
    {
        <org.apache.commons.collections.map.LazyMap: long serialVersionUID> = 7990956402564206740L;

        return;
    }
}
