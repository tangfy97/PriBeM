public final class org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter extends org.apache.lucene.analysis.TokenFilter
{
    private final int maxTokenCount;
    private final boolean consumeAllTokens;
    private int tokenCount;
    private boolean exhausted;

    public void <init>(org.apache.lucene.analysis.TokenStream, int)
    {
        int i0;
        org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter r0;
        org.apache.lucene.analysis.TokenStream r1;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        i0 := @parameter1: int;

        specialinvoke r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: void <init>(org.apache.lucene.analysis.TokenStream,int,boolean)>(r1, i0, 0);

        return;
    }

    public void <init>(org.apache.lucene.analysis.TokenStream, int, boolean)
    {
        org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter r0;
        org.apache.lucene.analysis.TokenStream r1;
        int i0;
        boolean z0;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter;

        r1 := @parameter0: org.apache.lucene.analysis.TokenStream;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.lucene.analysis.TokenFilter: void <init>(org.apache.lucene.analysis.TokenStream)>(r1);

        r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: int tokenCount> = 0;

        r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: boolean exhausted> = 0;

        r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: int maxTokenCount> = i0;

        r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: boolean consumeAllTokens> = z0;

        return;
    }

    public boolean incrementToken() throws java.io.IOException
    {
        org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter r0;
        org.apache.lucene.analysis.TokenStream $r1, $r2;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter;

        $z0 = r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: boolean exhausted>;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i1 = r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: int tokenCount>;

        $i0 = r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: int maxTokenCount>;

        if $i1 >= $i0 goto label3;

        $r2 = r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: org.apache.lucene.analysis.TokenStream input>;

        $z3 = virtualinvoke $r2.<org.apache.lucene.analysis.TokenStream: boolean incrementToken()>();

        if $z3 == 0 goto label2;

        $i2 = r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: int tokenCount>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: int tokenCount> = $i3;

        return 1;

     label2:
        r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: boolean exhausted> = 1;

        return 0;

     label3:
        $z1 = r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: boolean consumeAllTokens>;

        if $z1 == 0 goto label4;

        $r1 = r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: org.apache.lucene.analysis.TokenStream input>;

        $z2 = virtualinvoke $r1.<org.apache.lucene.analysis.TokenStream: boolean incrementToken()>();

        if $z2 == 0 goto label4;

        goto label3;

     label4:
        return 0;
    }

    public void reset() throws java.io.IOException
    {
        org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter r0;

        r0 := @this: org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter;

        specialinvoke r0.<org.apache.lucene.analysis.TokenFilter: void reset()>();

        r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: int tokenCount> = 0;

        r0.<org.apache.lucene.analysis.miscellaneous.LimitTokenCountFilter: boolean exhausted> = 0;

        return;
    }
}
