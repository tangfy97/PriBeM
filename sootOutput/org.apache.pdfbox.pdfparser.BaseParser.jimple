public abstract class org.apache.pdfbox.pdfparser.BaseParser extends java.lang.Object
{
    private static final long OBJECT_NUMBER_THRESHOLD;
    private static final long GENERATION_NUMBER_THRESHOLD;
    public static final java.lang.String PROP_PUSHBACK_SIZE;
    private static final org.apache.commons.logging.Log LOG;
    private static final int E;
    private static final int N;
    private static final int D;
    private static final int S;
    private static final int T;
    private static final int R;
    private static final int A;
    private static final int M;
    private static final int O;
    private static final int B;
    private static final int J;
    private final int strmBufLen;
    private final byte[] strmBuf;
    public static final byte[] ENDSTREAM;
    public static final byte[] ENDOBJ;
    public static final java.lang.String DEF;
    private static final java.lang.String ENDOBJ_STRING;
    private static final java.lang.String ENDSTREAM_STRING;
    private static final java.lang.String STREAM_STRING;
    private static final java.lang.String TRUE;
    private static final java.lang.String FALSE;
    private static final java.lang.String NULL;
    static boolean FORCE_PARSING;
    protected org.apache.pdfbox.io.PushBackInputStream pdfSource;
    protected org.apache.pdfbox.cos.COSDocument document;
    protected final boolean forceParsing;

    public void <init>()
    {
        org.apache.pdfbox.pdfparser.BaseParser r0;
        byte[] $r1;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.pdfbox.pdfparser.BaseParser: int strmBufLen> = 2048;

        r0.<org.apache.pdfbox.pdfparser.BaseParser: int strmBufLen> = 2048;

        $r1 = newarray (byte)[2048];

        r0.<org.apache.pdfbox.pdfparser.BaseParser: byte[] strmBuf> = $r1;

        $z0 = <org.apache.pdfbox.pdfparser.BaseParser: boolean FORCE_PARSING>;

        r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean forceParsing> = $z0;

        return;
    }

    public void <init>(java.io.InputStream, boolean) throws java.io.IOException
    {
        byte[] $r1;
        java.io.BufferedInputStream $r4;
        org.apache.pdfbox.io.PushBackInputStream $r3;
        java.lang.Integer $r2;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        int i0;
        java.lang.SecurityException $r6;
        java.io.InputStream r5;
        boolean z0;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        r5 := @parameter0: java.io.InputStream;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.pdfbox.pdfparser.BaseParser: int strmBufLen> = 2048;

        r0.<org.apache.pdfbox.pdfparser.BaseParser: int strmBufLen> = 2048;

        $r1 = newarray (byte)[2048];

        r0.<org.apache.pdfbox.pdfparser.BaseParser: byte[] strmBuf> = $r1;

        i0 = 65536;

     label1:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)>("org.apache.pdfbox.baseParser.pushBackSize", 65536);

        i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        $r3 = new org.apache.pdfbox.io.PushBackInputStream;

        $r4 = new java.io.BufferedInputStream;

        specialinvoke $r4.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>(r5, 16384);

        specialinvoke $r3.<org.apache.pdfbox.io.PushBackInputStream: void <init>(java.io.InputStream,int)>($r4, i0);

        r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource> = $r3;

        r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean forceParsing> = z0;

        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.BaseParser r0;
        java.io.InputStream r1;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        r1 := @parameter0: java.io.InputStream;

        $z0 = <org.apache.pdfbox.pdfparser.BaseParser: boolean FORCE_PARSING>;

        specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void <init>(java.io.InputStream,boolean)>(r1, $z0);

        return;
    }

    protected void <init>(byte[]) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.BaseParser r0;
        byte[] r2;
        java.io.ByteArrayInputStream $r1;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        r2 := @parameter0: byte[];

        $r1 = new java.io.ByteArrayInputStream;

        specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        r0.<org.apache.pdfbox.pdfparser.BaseParser: int strmBufLen> = 2048;

        specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void <init>(java.io.InputStream)>($r1);

        return;
    }

    public void setDocument(org.apache.pdfbox.cos.COSDocument)
    {
        org.apache.pdfbox.pdfparser.BaseParser r0;
        org.apache.pdfbox.cos.COSDocument r1;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        r1 := @parameter0: org.apache.pdfbox.cos.COSDocument;

        r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDocument document> = r1;

        return;
    }

    private static boolean isHexDigit(char)
    {
        char c0;
        int $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 < 48 goto label1;

        $i2 = (int) c0;

        if $i2 <= 57 goto label3;

     label1:
        $i3 = (int) c0;

        if $i3 < 97 goto label2;

        $i4 = (int) c0;

        if $i4 <= 102 goto label3;

     label2:
        $i5 = (int) c0;

        if $i5 < 65 goto label4;

        $i6 = (int) c0;

        if $i6 > 70 goto label4;

     label3:
        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    private org.apache.pdfbox.cos.COSBase parseCOSDictionaryValue() throws java.io.IOException
    {
        long $l5, $l7, $l8;
        org.apache.pdfbox.cos.COSInteger $r6, $r7;
        int $i0, $i2, $i4, $i6, $i9, $i10, $i11;
        java.lang.String $r16;
        org.apache.pdfbox.cos.COSDocument $r8;
        org.apache.pdfbox.io.PushBackInputStream $r2, $r4, $r14;
        char c1, c3;
        java.io.IOException $r19;
        org.apache.pdfbox.persistence.util.COSObjectKey $r20;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        org.apache.pdfbox.cos.COSBase $r1, $r3, r17;
        java.lang.StringBuilder $r11, $r12, $r13, $r15, $r18;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>();

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

        $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r2.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        c1 = (char) $i0;

        $i9 = (int) c1;

        if $i9 < 48 goto label2;

        $i10 = (int) c1;

        if $i10 > 57 goto label2;

        $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>();

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

        $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i2 = virtualinvoke $r4.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        c3 = (char) $i2;

        $i11 = (int) c3;

        if $i11 == 82 goto label1;

        $r19 = new java.io.IOException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected=\'R\' actual=\'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at offset ");

        $r14 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l8 = virtualinvoke $r14.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>($r16);

        throw $r19;

     label1:
        $r20 = new org.apache.pdfbox.persistence.util.COSObjectKey;

        $r6 = (org.apache.pdfbox.cos.COSInteger) $r1;

        $i4 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSInteger: int intValue()>();

        $l5 = (long) $i4;

        $r7 = (org.apache.pdfbox.cos.COSInteger) $r3;

        $i6 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSInteger: int intValue()>();

        $l7 = (long) $i6;

        specialinvoke $r20.<org.apache.pdfbox.persistence.util.COSObjectKey: void <init>(long,long)>($l5, $l7);

        $r8 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDocument document>;

        r17 = virtualinvoke $r8.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectFromPool(org.apache.pdfbox.persistence.util.COSObjectKey)>($r20);

        goto label3;

     label2:
        r17 = $r1;

     label3:
        return r17;
    }

    protected org.apache.pdfbox.cos.COSDictionary parseCOSDictionary() throws java.io.IOException
    {
        byte[] $r34;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        org.apache.pdfbox.cos.COSBase $r24;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r16, $r17, $r18, $r20, $r28, $r30, $r37, $r38, $r39, $r55, $r56, $r57, $r59, $r63, $r64, $r65, $r67, $r70, $r72, $r75, $r76, $r77, $r79;
        long $l4, $l5, $l19, $l20;
        java.lang.String $r13, $r21, $r31, $r32, $r40, $r60, $r68;
        java.io.IOException $r71, $r73, $r78, $r80;
        boolean $z0, z1;
        org.apache.pdfbox.cos.COSDictionary $r74;
        int $i0, $i1, $i2, $i3, $i6, $i7, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i24, $i27, $i28, $i29, $i30, $i32, $i34, $i35, $i36, $i37;
        org.apache.pdfbox.cos.COSName $r23;
        org.apache.pdfbox.io.PushBackInputStream $r1, $r2, $r4, $r5, $r11, $r19, $r22, $r25, $r29, $r33, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r58, $r66, $r69;
        char $c8, c21, c22, c23, c25, c26;
        org.apache.commons.logging.Log $r27, $r36;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        c21 = (char) $i0;

        $i27 = (int) c21;

        if $i27 == 60 goto label01;

        $r71 = new java.io.IOException;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected=\'<\' actual=\'");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c21);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at offset ");

        $r66 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l20 = virtualinvoke $r66.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r67 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l20);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r71.<java.io.IOException: void <init>(java.lang.String)>($r68);

        throw $r71;

     label01:
        $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i1 = virtualinvoke $r2.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        c22 = (char) $i1;

        $i28 = (int) c22;

        if $i28 == 60 goto label02;

        $r73 = new java.io.IOException;

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        $r55 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected=\'<\' actual=\'");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c22);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at offset ");

        $r58 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l19 = virtualinvoke $r58.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l19);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r73.<java.io.IOException: void <init>(java.lang.String)>($r60);

        throw $r73;

     label02:
        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

        $r74 = new org.apache.pdfbox.cos.COSDictionary;

        specialinvoke $r74.<org.apache.pdfbox.cos.COSDictionary: void <init>()>();

        z1 = 0;

     label03:
        if z1 != 0 goto label16;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

        $r22 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i6 = virtualinvoke $r22.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        c23 = (char) $i6;

        $i29 = (int) c23;

        if $i29 != 62 goto label04;

        z1 = 1;

        goto label03;

     label04:
        $i30 = (int) c23;

        if $i30 == 47 goto label11;

        $r36 = <org.apache.pdfbox.pdfparser.BaseParser: org.apache.commons.logging.Log LOG>;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid dictionary, found: \'");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c23);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' but expected: \'/\'");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r36.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r40);

        $r41 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i24 = virtualinvoke $r41.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

     label05:
        $i32 = (int) -1;

        if i24 == $i32 goto label08;

        if i24 == 47 goto label08;

        if i24 == 62 goto label08;

        if i24 != 101 goto label07;

        $r43 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i9 = virtualinvoke $r43.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        if $i9 != 110 goto label07;

        $r44 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i10 = virtualinvoke $r44.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        if $i10 != 100 goto label07;

        $r45 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i11 = virtualinvoke $r45.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        if $i11 != 115 goto label06;

        $r48 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i14 = virtualinvoke $r48.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        if $i14 != 116 goto label07;

        $r49 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i15 = virtualinvoke $r49.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        if $i15 != 114 goto label07;

        $r50 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i16 = virtualinvoke $r50.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        if $i16 != 101 goto label07;

        $r51 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i17 = virtualinvoke $r51.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        if $i17 != 97 goto label07;

        $r52 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i18 = virtualinvoke $r52.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        if $i18 != 109 goto label07;

        return $r74;

     label06:
        if $i11 != 111 goto label07;

        $r46 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i12 = virtualinvoke $r46.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        if $i12 != 98 goto label07;

        $r47 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i13 = virtualinvoke $r47.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        if $i13 != 106 goto label07;

        return $r74;

     label07:
        $r69 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i24 = virtualinvoke $r69.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        goto label05;

     label08:
        $i34 = (int) -1;

        if i24 == $i34 goto label09;

        $r42 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r42.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(i24);

        goto label10;

     label09:
        return $r74;

     label10:
        goto label03;

     label11:
        $r23 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSName parseCOSName()>();

        $r24 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseCOSDictionaryValue()>();

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

        $r25 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i7 = virtualinvoke $r25.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        $c8 = (char) $i7;

        $i35 = (int) $c8;

        if $i35 != 100 goto label13;

        $r32 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.String readString()>();

        $z0 = virtualinvoke $r32.<java.lang.String: boolean equals(java.lang.Object)>("def");

        if $z0 != 0 goto label12;

        $r33 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r34 = virtualinvoke $r32.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r33.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r34);

        goto label13;

     label12:
        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

     label13:
        if $r24 != null goto label14;

        $r27 = <org.apache.pdfbox.pdfparser.BaseParser: org.apache.commons.logging.Log LOG>;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad Dictionary Declaration ");

        $r29 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r27.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r31);

        goto label15;

     label14:
        virtualinvoke $r24.<org.apache.pdfbox.cos.COSBase: void setDirect(boolean)>(1);

        virtualinvoke $r74.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r23, $r24);

     label15:
        goto label03;

     label16:
        $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i2 = virtualinvoke $r4.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        c25 = (char) $i2;

        $i36 = (int) c25;

        if $i36 == 62 goto label17;

        $r78 = new java.io.IOException;

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected=\'>\' actual=\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c25);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at offset ");

        $r19 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l5 = virtualinvoke $r19.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r78.<java.io.IOException: void <init>(java.lang.String)>($r21);

        throw $r78;

     label17:
        $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i3 = virtualinvoke $r5.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        c26 = (char) $i3;

        $i37 = (int) c26;

        if $i37 == 62 goto label18;

        $r80 = new java.io.IOException;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected=\'>\' actual=\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c26);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at offset ");

        $r11 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l4 = virtualinvoke $r11.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r80.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r80;

     label18:
        return $r74;
    }

    protected org.apache.pdfbox.cos.COSStream parseCOSStream(org.apache.pdfbox.cos.COSDictionary, org.apache.pdfbox.io.RandomAccess) throws java.io.IOException
    {
        byte[] $r7, $r20, $r22, $r33, $r36, $r37, $r38, $r39, $r41, $r70;
        byte $b3, $b4;
        org.apache.pdfbox.pdfparser.BaseParser r3;
        org.apache.pdfbox.cos.COSBase $r67;
        java.lang.StringBuilder $r13, $r14, $r15, $r17, $r26, $r27, $r28, $r49, $r50, $r51, $r53, $r59, $r60, $r61, $r62, $r63, $r73, $r76, $r78, $r82;
        java.lang.Throwable $r55;
        java.io.ByteArrayOutputStream $r77;
        long $l1, $l9;
        short s16, $s23;
        java.lang.String $r4, $r10, $r18, $r19, $r29, $r54, $r64, $r71;
        org.apache.pdfbox.pdfparser.EndstreamOutputStream $r75, $r80, $r81;
        java.io.IOException $r56, $r74, $r83;
        org.apache.pdfbox.cos.COSNumber $r43;
        org.apache.pdfbox.io.RandomAccess r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, $z7;
        org.apache.pdfbox.cos.COSDictionary r1;
        int $i0, $i2, $i5, $i6, $i7, $i8, $i10, i11, i12, i13, i14, i15, $i18, $i20, $i22, $i24, $i25, $i26;
        org.apache.pdfbox.cos.COSStream $r72;
        java.io.OutputStream $r34, r65, $r68;
        org.apache.pdfbox.cos.COSName $r66;
        org.apache.pdfbox.io.PushBackInputStream $r5, $r6, $r8, $r16, $r21, $r23, $r32, $r40, $r44, $r45, $r46, $r52, $r69;
        org.apache.pdfbox.exceptions.WrappedIOException $r79;
        org.apache.commons.logging.Log $r25;
        java.io.InputStream $r30;

        r3 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        r1 := @parameter0: org.apache.pdfbox.cos.COSDictionary;

        r2 := @parameter1: org.apache.pdfbox.io.RandomAccess;

        $r72 = new org.apache.pdfbox.cos.COSStream;

        specialinvoke $r72.<org.apache.pdfbox.cos.COSStream: void <init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.io.RandomAccess)>(r1, r2);

        r65 = null;

     label01:
        $r4 = virtualinvoke r3.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.String readString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("stream");

        if $z0 != 0 goto label02;

        $r74 = new java.io.IOException;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected=\'stream\' actual=\'");

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at offset ");

        $r52 = r3.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l9 = virtualinvoke $r52.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r74.<java.io.IOException: void <init>(java.lang.String)>($r54);

        throw $r74;

     label02:
        $r5 = r3.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i11 = virtualinvoke $r5.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

     label03:
        if i11 != 32 goto label04;

        $r46 = r3.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i11 = virtualinvoke $r46.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        goto label03;

     label04:
        if i11 != 13 goto label05;

        $r44 = r3.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i8 = virtualinvoke $r44.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        if $i8 == 10 goto label07;

        $r45 = r3.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r45.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>($i8);

        goto label07;

     label05:
        if i11 != 10 goto label06;

        goto label07;

     label06:
        $r6 = r3.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r6.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(i11);

     label07:
        $r66 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH>;

        $r67 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r66);

        $r68 = virtualinvoke $r72.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createFilteredStream(org.apache.pdfbox.cos.COSBase)>($r67);

        r65 = $r68;

        $i18 = (int) -1;

        i12 = $i18;

        $z5 = $r67 instanceof org.apache.pdfbox.cos.COSNumber;

        if $z5 == 0 goto label08;

        $r43 = (org.apache.pdfbox.cos.COSNumber) $r67;

        i12 = virtualinvoke $r43.<org.apache.pdfbox.cos.COSNumber: int intValue()>();

     label08:
        $i20 = (int) -1;

        if i12 != $i20 goto label09;

        $r75 = new org.apache.pdfbox.pdfparser.EndstreamOutputStream;

        specialinvoke $r75.<org.apache.pdfbox.pdfparser.EndstreamOutputStream: void <init>(java.io.OutputStream)>($r68);

        specialinvoke r3.<org.apache.pdfbox.pdfparser.BaseParser: void readUntilEndStream(java.io.OutputStream)>($r75);

        goto label21;

     label09:
        i13 = i12;

     label10:
        if i13 <= 0 goto label12;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>(i13, 2048);

        $r40 = r3.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r39 = r3.<org.apache.pdfbox.pdfparser.BaseParser: byte[] strmBuf>;

        $i7 = virtualinvoke $r40.<org.apache.pdfbox.io.PushBackInputStream: int read(byte[],int,int)>($r39, 0, $i6);

        $i22 = (int) -1;

        if $i7 != $i22 goto label11;

        goto label12;

     label11:
        $r41 = r3.<org.apache.pdfbox.pdfparser.BaseParser: byte[] strmBuf>;

        virtualinvoke $r68.<java.io.OutputStream: void write(byte[],int,int)>($r41, 0, $i7);

        i13 = i13 - $i7;

        goto label10;

     label12:
        $r8 = r3.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r7 = r3.<org.apache.pdfbox.pdfparser.BaseParser: byte[] strmBuf>;

        $i0 = virtualinvoke $r8.<org.apache.pdfbox.io.PushBackInputStream: int read(byte[],int,int)>($r7, 0, 20);

        if $i0 <= 0 goto label21;

        z6 = 0;

        i14 = 0;

        i15 = 0;

     label13:
        if i15 >= $i0 goto label16;

        $r36 = r3.<org.apache.pdfbox.pdfparser.BaseParser: byte[] strmBuf>;

        $b3 = $r36[i15];

        $s23 = (short) $b3;

        s16 = $s23 & 255;

        $r37 = <org.apache.pdfbox.pdfparser.BaseParser: byte[] ENDSTREAM>;

        $b4 = $r37[i14];

        $i24 = (int) s16;

        $i25 = (int) $b4;

        if $i24 != $i25 goto label14;

        i14 = i14 + 1;

        $r38 = <org.apache.pdfbox.pdfparser.BaseParser: byte[] ENDSTREAM>;

        $i5 = lengthof $r38;

        if i14 < $i5 goto label15;

        z6 = 1;

        goto label16;

     label14:
        if i14 > 0 goto label16;

        $i26 = (int) s16;

        $z4 = virtualinvoke r3.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>($i26);

        if $z4 != 0 goto label15;

        goto label16;

     label15:
        i15 = i15 + 1;

        goto label13;

     label16:
        $r69 = r3.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r70 = r3.<org.apache.pdfbox.pdfparser.BaseParser: byte[] strmBuf>;

        virtualinvoke $r69.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[],int,int)>($r70, 0, $i0);

        if z6 != 0 goto label21;

        $r25 = <org.apache.pdfbox.pdfparser.BaseParser: org.apache.commons.logging.Log LOG>;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Specified stream length ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is wrong. Fall back to reading stream until \'endstream\'.");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r25.<org.apache.commons.logging.Log: void warn(java.lang.Object)>($r29);

        virtualinvoke $r68.<java.io.OutputStream: void flush()>();

        $r30 = virtualinvoke $r72.<org.apache.pdfbox.cos.COSStream: java.io.InputStream getFilteredStream()>();

        $r77 = new java.io.ByteArrayOutputStream;

        specialinvoke $r77.<java.io.ByteArrayOutputStream: void <init>(int)>(i12);

        staticinvoke <org.apache.pdfbox.io.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)>($r30, $r77);

        staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.InputStream)>($r30);

     label17:
        $r32 = r3.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r33 = virtualinvoke $r77.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke $r32.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r33);

     label18:
        goto label20;

     label19:
        $r56 := @caughtexception;

        $r79 = new org.apache.pdfbox.exceptions.WrappedIOException;

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not push back ");

        $i10 = virtualinvoke $r77.<java.io.ByteArrayOutputStream: int size()>();

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes in order to reparse stream. ");

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Try increasing push back buffer using system property ");

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org.apache.pdfbox.baseParser.pushBackSize");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r79.<org.apache.pdfbox.exceptions.WrappedIOException: void <init>(java.lang.String,java.lang.Throwable)>($r64, $r56);

        throw $r79;

     label20:
        staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.OutputStream)>($r68);

        $r34 = virtualinvoke $r72.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createFilteredStream(org.apache.pdfbox.cos.COSBase)>($r67);

        r65 = $r34;

        $r80 = new org.apache.pdfbox.pdfparser.EndstreamOutputStream;

        specialinvoke $r80.<org.apache.pdfbox.pdfparser.EndstreamOutputStream: void <init>(java.io.OutputStream)>($r34);

        specialinvoke r3.<org.apache.pdfbox.pdfparser.BaseParser: void readUntilEndStream(java.io.OutputStream)>($r80);

     label21:
        virtualinvoke r3.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

        $r71 = virtualinvoke r3.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.String readString()>();

        $z7 = virtualinvoke $r71.<java.lang.String: boolean equals(java.lang.Object)>("endstream");

        if $z7 != 0 goto label24;

        $z1 = virtualinvoke $r71.<java.lang.String: boolean startsWith(java.lang.String)>("endobj");

        if $z1 == 0 goto label22;

        $r22 = virtualinvoke $r71.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $r23 = r3.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r23.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r22);

        goto label24;

     label22:
        $z2 = virtualinvoke $r71.<java.lang.String: boolean startsWith(java.lang.String)>("endstream");

        if $z2 == 0 goto label23;

        $i2 = virtualinvoke $r71.<java.lang.String: int length()>();

        $r19 = virtualinvoke $r71.<java.lang.String: java.lang.String substring(int,int)>(9, $i2);

        $r20 = virtualinvoke $r19.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        $r21 = r3.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r21.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r20);

        goto label24;

     label23:
        $r81 = new org.apache.pdfbox.pdfparser.EndstreamOutputStream;

        specialinvoke $r81.<org.apache.pdfbox.pdfparser.EndstreamOutputStream: void <init>(java.io.OutputStream)>(r65);

        specialinvoke r3.<org.apache.pdfbox.pdfparser.BaseParser: void readUntilEndStream(java.io.OutputStream)>($r81);

        $r10 = virtualinvoke r3.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.String readString()>();

        $z3 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>("endstream");

        if $z3 != 0 goto label24;

        $r83 = new java.io.IOException;

        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected=\'endstream\' actual=\'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at offset ");

        $r16 = r3.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l1 = virtualinvoke $r16.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r83.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r83;

     label24:
        if r65 == null goto label28;

        virtualinvoke r65.<java.io.OutputStream: void close()>();

        goto label28;

     label25:
        $r55 := @caughtexception;

     label26:
        if r65 == null goto label27;

        virtualinvoke r65.<java.io.OutputStream: void close()>();

     label27:
        throw $r55;

     label28:
        return $r72;

        catch java.io.IOException from label17 to label18 with label19;
        catch java.lang.Throwable from label01 to label24 with label25;
        catch java.lang.Throwable from label25 to label26 with label25;
    }

    private void readUntilEndStream(java.io.OutputStream) throws java.io.IOException
    {
        byte[] $r1, $r4, $r5, $r7, $r8, $r9, r10, $r11;
        byte $b6, b13, $b14, $b15, $b16;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i8, i9, i10, i11, i12, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.io.OutputStream r3;
        org.apache.pdfbox.io.PushBackInputStream $r2, $r6;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        r3 := @parameter0: java.io.OutputStream;

        i9 = 0;

        r10 = <org.apache.pdfbox.pdfparser.BaseParser: byte[] ENDSTREAM>;

     label01:
        $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: byte[] strmBuf>;

        $i0 = 2048 - i9;

        $i1 = virtualinvoke $r2.<org.apache.pdfbox.io.PushBackInputStream: int read(byte[],int,int)>($r1, i9, $i0);

        if $i1 <= 0 goto label14;

        i10 = $i1 + i9;

        i11 = i9;

        i12 = i10 - 5;

     label02:
        if i11 >= i10 goto label11;

        if i9 != 0 goto label04;

        $i8 = i11 + 5;

        if $i8 >= i12 goto label04;

        $r9 = r0.<org.apache.pdfbox.pdfparser.BaseParser: byte[] strmBuf>;

        b13 = $r9[$i8];

        $i17 = (int) b13;

        if $i17 > 116 goto label03;

        $i18 = (int) b13;

        if $i18 >= 97 goto label04;

     label03:
        i11 = $i8;

        goto label10;

     label04:
        $r11 = r0.<org.apache.pdfbox.pdfparser.BaseParser: byte[] strmBuf>;

        $b14 = $r11[i11];

        $b15 = r10[i9];

        $i19 = (int) $b14;

        $i20 = (int) $b15;

        if $i19 != $i20 goto label05;

        i9 = i9 + 1;

        $i7 = lengthof r10;

        if i9 != $i7 goto label10;

        i11 = i11 + 1;

        goto label11;

     label05:
        if i9 != 3 goto label06;

        $r8 = <org.apache.pdfbox.pdfparser.BaseParser: byte[] ENDOBJ>;

        $b6 = $r8[i9];

        $i21 = (int) $b14;

        $i22 = (int) $b6;

        if $i21 != $i22 goto label06;

        r10 = <org.apache.pdfbox.pdfparser.BaseParser: byte[] ENDOBJ>;

        i9 = i9 + 1;

        goto label10;

     label06:
        $i23 = (int) $b14;

        if $i23 != 101 goto label07;

        $b16 = 1;

        goto label09;

     label07:
        $i24 = (int) $b14;

        if $i24 != 110 goto label08;

        if i9 != 7 goto label08;

        $b16 = 2;

        goto label09;

     label08:
        $b16 = 0;

     label09:
        i9 = $b16;

        r10 = <org.apache.pdfbox.pdfparser.BaseParser: byte[] ENDSTREAM>;

     label10:
        i11 = i11 + 1;

        goto label02;

     label11:
        $i2 = i11 - i9;

        $i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2);

        if $i3 <= 0 goto label12;

        $r7 = r0.<org.apache.pdfbox.pdfparser.BaseParser: byte[] strmBuf>;

        virtualinvoke r3.<java.io.OutputStream: void write(byte[],int,int)>($r7, 0, $i3);

     label12:
        $i4 = lengthof r10;

        if i9 != $i4 goto label13;

        $r6 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: byte[] strmBuf>;

        $i5 = i10 - $i3;

        virtualinvoke $r6.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[],int,int)>($r5, $i3, $i5);

        goto label14;

     label13:
        $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: byte[] strmBuf>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, $r4, 0, i9);

        goto label01;

     label14:
        virtualinvoke r3.<java.io.OutputStream: void flush()>();

        return;
    }

    private int checkForMissingCloseParen(int) throws java.io.IOException
    {
        byte[] r0;
        byte $b2, $b3, $b4, $b5, $b7;
        int i0, $i1, i6, $i8, $i9, $i10, $i11, $i12;
        org.apache.pdfbox.io.PushBackInputStream $r2, $r3;
        org.apache.pdfbox.pdfparser.BaseParser r1;

        r1 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        i0 := @parameter0: int;

        i6 = i0;

        r0 = newarray (byte)[3];

        $r2 = r1.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i1 = virtualinvoke $r2.<org.apache.pdfbox.io.PushBackInputStream: int read(byte[])>(r0);

        if $i1 != 3 goto label3;

        $b2 = r0[0];

        $i8 = (int) $b2;

        if $i8 != 13 goto label1;

        $b4 = r0[1];

        $i9 = (int) $b4;

        if $i9 != 10 goto label1;

        $b5 = r0[2];

        $i10 = (int) $b5;

        if $i10 == 47 goto label2;

     label1:
        $b7 = r0[0];

        $i11 = (int) $b7;

        if $i11 != 13 goto label3;

        $b3 = r0[1];

        $i12 = (int) $b3;

        if $i12 != 47 goto label3;

     label2:
        i6 = 0;

     label3:
        if $i1 <= 0 goto label4;

        $r3 = r1.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r3.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[],int,int)>(r0, 0, $i1);

     label4:
        return i6;
    }

    protected org.apache.pdfbox.cos.COSString parseCOSString(boolean) throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.BaseParser r0;
        org.apache.pdfbox.cos.COSString $r1;
        boolean z0;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        z0 := @parameter0: boolean;

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSString parseCOSString()>();

        return $r1;
    }

    protected org.apache.pdfbox.cos.COSString parseCOSString() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.BaseParser r0;
        java.lang.StringBuilder $r5, $r6, $r7, $r9, $r24, $r25, $r26, $r30, $r33;
        org.apache.pdfbox.cos.COSString $r11, $r29;
        java.lang.StringBuffer $r32;
        java.lang.String $r10, $r27, $r28;
        java.lang.NumberFormatException $r21;
        java.io.IOException $r31, $r34;
        boolean $z0;
        int $i0, $i3, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, $i16, $i17, $i18, $i20, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i44;
        org.apache.pdfbox.io.PushBackInputStream $r1, $r8, $r12, $r13, $r14, $r15, $r17, $r18, $r19, $r20;
        char c1, c2, c4, c14, c15;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        c1 = (char) $i0;

        $r29 = new org.apache.pdfbox.cos.COSString;

        specialinvoke $r29.<org.apache.pdfbox.cos.COSString: void <init>()>();

        $i17 = (int) c1;

        if $i17 != 40 goto label01;

        goto label03;

     label01:
        $i18 = (int) c1;

        if $i18 != 60 goto label02;

        $r11 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSString parseCOSHexString()>();

        return $r11;

     label02:
        $r31 = new java.io.IOException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parseCOSString string should start with \'(\' or \'<\' and not \'");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        $r8 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.io.IOException: void <init>(java.lang.String)>($r10);

        throw $r31;

     label03:
        i9 = 1;

        $r12 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i10 = virtualinvoke $r12.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

     label04:
        if i9 <= 0 goto label31;

        $i20 = (int) -1;

        if i10 == $i20 goto label31;

        c2 = (char) i10;

        $i22 = (int) -2;

        i11 = $i22;

        $i23 = (int) c2;

        if $i23 != 41 goto label05;

        $i25 = (int) -1;

        i12 = i9 + $i25;

        $i8 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: int checkForMissingCloseParen(int)>(i12);

        i9 = $i8;

        if $i8 == 0 goto label28;

        $i26 = (int) c2;

        virtualinvoke $r29.<org.apache.pdfbox.cos.COSString: void append(int)>($i26);

        goto label28;

     label05:
        $i27 = (int) c2;

        if $i27 != 40 goto label06;

        i9 = i9 + 1;

        $i28 = (int) c2;

        virtualinvoke $r29.<org.apache.pdfbox.cos.COSString: void append(int)>($i28);

        goto label28;

     label06:
        $i29 = (int) c2;

        if $i29 != 92 goto label27;

        $r15 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i3 = virtualinvoke $r15.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        c4 = (char) $i3;

        $i30 = (int) c4;

        lookupswitch($i30)
        {
            case 10: goto label15;
            case 13: goto label15;
            case 40: goto label14;
            case 41: goto label12;
            case 48: goto label18;
            case 49: goto label18;
            case 50: goto label18;
            case 51: goto label18;
            case 52: goto label18;
            case 53: goto label18;
            case 54: goto label18;
            case 55: goto label18;
            case 92: goto label14;
            case 98: goto label10;
            case 102: goto label11;
            case 110: goto label07;
            case 114: goto label08;
            case 116: goto label09;
            default: goto label25;
        };

     label07:
        virtualinvoke $r29.<org.apache.pdfbox.cos.COSString: void append(int)>(10);

        goto label26;

     label08:
        virtualinvoke $r29.<org.apache.pdfbox.cos.COSString: void append(int)>(13);

        goto label26;

     label09:
        virtualinvoke $r29.<org.apache.pdfbox.cos.COSString: void append(int)>(9);

        goto label26;

     label10:
        virtualinvoke $r29.<org.apache.pdfbox.cos.COSString: void append(int)>(8);

        goto label26;

     label11:
        virtualinvoke $r29.<org.apache.pdfbox.cos.COSString: void append(int)>(12);

        goto label26;

     label12:
        $i7 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: int checkForMissingCloseParen(int)>(i9);

        i9 = $i7;

        if $i7 == 0 goto label13;

        $i31 = (int) c4;

        virtualinvoke $r29.<org.apache.pdfbox.cos.COSString: void append(int)>($i31);

        goto label26;

     label13:
        virtualinvoke $r29.<org.apache.pdfbox.cos.COSString: void append(int)>(92);

        goto label26;

     label14:
        $i32 = (int) c4;

        virtualinvoke $r29.<org.apache.pdfbox.cos.COSString: void append(int)>($i32);

        goto label26;

     label15:
        $r19 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i13 = virtualinvoke $r19.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

     label16:
        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEOL(int)>(i13);

        if $z0 == 0 goto label17;

        $i34 = (int) -1;

        if i13 == $i34 goto label17;

        $r20 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i13 = virtualinvoke $r20.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        goto label16;

     label17:
        i11 = i13;

        goto label26;

     label18:
        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c4);

        $r17 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i5 = virtualinvoke $r17.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        c14 = (char) $i5;

        $i35 = (int) c14;

        if $i35 < 48 goto label20;

        $i36 = (int) c14;

        if $i36 > 55 goto label20;

        virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c14);

        $r18 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i6 = virtualinvoke $r18.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        c15 = (char) $i6;

        $i37 = (int) c15;

        if $i37 < 48 goto label19;

        $i38 = (int) c15;

        if $i38 > 55 goto label19;

        virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c15);

        goto label21;

     label19:
        i11 = $i6;

        goto label21;

     label20:
        i11 = $i5;

     label21:
        $r28 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        $i16 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r28, 8);

     label22:
        goto label24;

     label23:
        $r21 := @caughtexception;

        $r34 = new java.io.IOException;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected octal character, actual=\'");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String)>($r27);

        throw $r34;

     label24:
        virtualinvoke $r29.<org.apache.pdfbox.cos.COSString: void append(int)>($i16);

        goto label26;

     label25:
        $i39 = (int) c4;

        virtualinvoke $r29.<org.apache.pdfbox.cos.COSString: void append(int)>($i39);

     label26:
        goto label28;

     label27:
        $i40 = (int) c2;

        virtualinvoke $r29.<org.apache.pdfbox.cos.COSString: void append(int)>($i40);

     label28:
        $i42 = (int) -2;

        if i11 == $i42 goto label29;

        i10 = i11;

        goto label30;

     label29:
        $r14 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i10 = virtualinvoke $r14.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

     label30:
        goto label04;

     label31:
        $i44 = (int) -1;

        if i10 == $i44 goto label32;

        $r13 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r13.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(i10);

     label32:
        return $r29;

        catch java.lang.NumberFormatException from label21 to label22 with label23;
    }

    private final org.apache.pdfbox.cos.COSString parseCOSHexString() throws java.io.IOException
    {
        org.apache.pdfbox.cos.COSString $r3;
        int $i0, $i1, $i2, $i3, $i5, $i7;
        java.lang.String $r2;
        boolean $z0, $z1;
        org.apache.pdfbox.io.PushBackInputStream $r6, $r7;
        java.io.IOException $r4, $r5;
        char $c4, $c6;
        org.apache.pdfbox.pdfparser.BaseParser r1;
        java.lang.StringBuilder $r0;

        r1 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r6 = r1.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i5 = virtualinvoke $r6.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        $c6 = (char) $i5;

        $z1 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isHexDigit(char)>($c6);

        if $z1 == 0 goto label2;

        $c4 = (char) $i5;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        goto label8;

     label2:
        if $i5 != 62 goto label3;

        goto label9;

     label3:
        if $i5 >= 0 goto label4;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Missing closing bracket for hex string. Reached EOS.");

        throw $r5;

     label4:
        if $i5 == 32 goto label1;

        if $i5 == 10 goto label1;

        if $i5 == 9 goto label1;

        if $i5 == 13 goto label1;

        if $i5 == 8 goto label1;

        if $i5 != 12 goto label5;

        goto label1;

     label5:
        $i0 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        $i1 = $i0 % 2;

        if $i1 == 0 goto label6;

        $i2 = virtualinvoke $r0.<java.lang.StringBuilder: int length()>();

        $i3 = $i2 - 1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($i3);

     label6:
        $r7 = r1.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i7 = virtualinvoke $r7.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        if $i7 == 62 goto label7;

        if $i7 >= 0 goto label6;

     label7:
        if $i7 >= 0 goto label9;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Missing closing bracket for hex string. Reached EOS.");

        throw $r4;

     label8:
        goto label1;

     label9:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        $z0 = r1.<org.apache.pdfbox.pdfparser.BaseParser: boolean forceParsing>;

        $r3 = staticinvoke <org.apache.pdfbox.cos.COSString: org.apache.pdfbox.cos.COSString createFromHexString(java.lang.String,boolean)>($r2, $z0);

        return $r3;
    }

    protected org.apache.pdfbox.cos.COSArray parseCOSArray() throws java.io.IOException
    {
        byte[] $r9;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.pdfbox.persistence.util.COSObjectKey $r32;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        org.apache.pdfbox.cos.COSBase $r5, $r12, $r13, $r14, $r15, r27;
        java.lang.StringBuilder $r21, $r22, $r23, $r25, $r29;
        org.apache.pdfbox.cos.COSArray $r31;
        long $l13, $l15, $l16;
        org.apache.pdfbox.cos.COSInteger r16, r28;
        int $i0, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i17, $i18;
        java.lang.String $r7, $r10, $r11, $r26;
        org.apache.pdfbox.cos.COSDocument $r18;
        org.apache.pdfbox.io.PushBackInputStream $r1, $r3, $r4, $r8, $r24;
        char c1, $c3;
        java.io.IOException $r30;
        org.apache.commons.logging.Log $r6;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        c1 = (char) $i0;

        $i17 = (int) c1;

        if $i17 == 91 goto label01;

        $r30 = new java.io.IOException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected=\'[\' actual=\'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at offset ");

        $r24 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l16 = virtualinvoke $r24.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l16);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.io.IOException: void <init>(java.lang.String)>($r26);

        throw $r30;

     label01:
        $r31 = new org.apache.pdfbox.cos.COSArray;

        specialinvoke $r31.<org.apache.pdfbox.cos.COSArray: void <init>()>();

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

     label02:
        $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i2 = virtualinvoke $r3.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        if $i2 <= 0 goto label10;

        $c3 = (char) $i2;

        $i18 = (int) $c3;

        if $i18 == 93 goto label10;

        $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>();

        r27 = $r5;

        $z0 = $r5 instanceof org.apache.pdfbox.cos.COSObject;

        if $z0 == 0 goto label06;

        $i4 = virtualinvoke $r31.<org.apache.pdfbox.cos.COSArray: int size()>();

        $i5 = $i4 - 1;

        $r12 = virtualinvoke $r31.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>($i5);

        $z3 = $r12 instanceof org.apache.pdfbox.cos.COSInteger;

        if $z3 == 0 goto label05;

        $i6 = virtualinvoke $r31.<org.apache.pdfbox.cos.COSArray: int size()>();

        $i7 = $i6 - 1;

        $r13 = virtualinvoke $r31.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase remove(int)>($i7);

        r28 = (org.apache.pdfbox.cos.COSInteger) $r13;

        $i8 = virtualinvoke $r31.<org.apache.pdfbox.cos.COSArray: int size()>();

        $i9 = $i8 - 1;

        $r14 = virtualinvoke $r31.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>($i9);

        $z4 = $r14 instanceof org.apache.pdfbox.cos.COSInteger;

        if $z4 == 0 goto label03;

        $i10 = virtualinvoke $r31.<org.apache.pdfbox.cos.COSArray: int size()>();

        $i11 = $i10 - 1;

        $r15 = virtualinvoke $r31.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase remove(int)>($i11);

        r16 = (org.apache.pdfbox.cos.COSInteger) $r15;

        $r32 = new org.apache.pdfbox.persistence.util.COSObjectKey;

        $i12 = virtualinvoke r16.<org.apache.pdfbox.cos.COSInteger: int intValue()>();

        $l13 = (long) $i12;

        $i14 = virtualinvoke r28.<org.apache.pdfbox.cos.COSInteger: int intValue()>();

        $l15 = (long) $i14;

        specialinvoke $r32.<org.apache.pdfbox.persistence.util.COSObjectKey: void <init>(long,long)>($l13, $l15);

        $r18 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDocument document>;

        r27 = virtualinvoke $r18.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectFromPool(org.apache.pdfbox.persistence.util.COSObjectKey)>($r32);

        goto label04;

     label03:
        r27 = null;

     label04:
        goto label06;

     label05:
        r27 = null;

     label06:
        if r27 == null goto label07;

        virtualinvoke $r31.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(r27);

        goto label09;

     label07:
        $r6 = <org.apache.pdfbox.pdfparser.BaseParser: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r6.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Corrupt object reference");

        $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.String readString()>();

        $r8 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r9 = virtualinvoke $r7.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r8.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r9);

        $r10 = "endobj";

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 != 0 goto label08;

        $r11 = "endstream";

        $z2 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label09;

     label08:
        return $r31;

     label09:
        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

        goto label02;

     label10:
        $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r4.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

        return $r31;
    }

    protected boolean isEndOfName(char)
    {
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14;
        boolean $z0;
        char c0;
        org.apache.pdfbox.pdfparser.BaseParser r0;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 == 32 goto label1;

        $i2 = (int) c0;

        if $i2 == 13 goto label1;

        $i3 = (int) c0;

        if $i3 == 10 goto label1;

        $i4 = (int) c0;

        if $i4 == 9 goto label1;

        $i5 = (int) c0;

        if $i5 == 62 goto label1;

        $i6 = (int) c0;

        if $i6 == 60 goto label1;

        $i7 = (int) c0;

        if $i7 == 91 goto label1;

        $i8 = (int) c0;

        if $i8 == 47 goto label1;

        $i9 = (int) c0;

        if $i9 == 93 goto label1;

        $i10 = (int) c0;

        if $i10 == 41 goto label1;

        $i11 = (int) c0;

        if $i11 == 40 goto label1;

        $i12 = (int) c0;

        $i14 = (int) -1;

        if $i12 != $i14 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected org.apache.pdfbox.cos.COSName parseCOSName() throws java.io.IOException
    {
        boolean $z0, $z1, $z2;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        java.lang.StringBuilder $r12, $r13, $r14, $r19, $r20, $r21, $r22, $r23, $r25, $r30, $r31, $r32, $r34, $r36, $r37, $r38;
        long $l10;
        int $i0, $i3, $i5, $i7, i11, $i12, $i14, $i15, $i16, $i17, $i19;
        java.lang.String $r4, $r15, $r26, $r33;
        org.apache.pdfbox.cos.COSName $r5;
        org.apache.pdfbox.io.PushBackInputStream $r1, $r3, $r6, $r7, $r8, $r9, $r10, $r16, $r24;
        char $c1, c2, c4, c6, $c8, $c9;
        java.lang.NumberFormatException $r27;
        java.io.IOException $r35, $r39;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        $c1 = (char) $i0;

        $i12 = (int) $c1;

        if $i12 == 47 goto label01;

        $r35 = new java.io.IOException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected=\'/\' actual=\'");

        $c9 = (char) $i0;

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c9);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'-");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at offset ");

        $r24 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l10 = virtualinvoke $r24.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l10);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.io.IOException: void <init>(java.lang.String)>($r26);

        throw $r35;

     label01:
        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i11 = virtualinvoke $r3.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

     label02:
        $i14 = (int) -1;

        if i11 == $i14 goto label12;

        c2 = (char) i11;

        $i15 = (int) c2;

        if $i15 != 35 goto label09;

        $r8 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i3 = virtualinvoke $r8.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        c4 = (char) $i3;

        $r9 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i5 = virtualinvoke $r9.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        c6 = (char) $i5;

        $z1 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isHexDigit(char)>(c4);

        if $z1 == 0 goto label07;

        $z2 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isHexDigit(char)>(c6);

        if $z2 == 0 goto label07;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c6);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label03:
        $i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r15, 16);

        $c8 = (char) $i7;

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8);

     label04:
        goto label06;

     label05:
        $r27 := @caughtexception;

        $r39 = new java.io.IOException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: expected hex number, actual=\'");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.io.IOException: void <init>(java.lang.String)>($r33);

        throw $r39;

     label06:
        $r16 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i11 = virtualinvoke $r16.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        goto label08;

     label07:
        $r10 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i16 = (int) c6;

        virtualinvoke $r10.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>($i16);

        $i17 = (int) c4;

        i11 = $i17;

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

     label08:
        goto label11;

     label09:
        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEndOfName(char)>(c2);

        if $z0 == 0 goto label10;

        goto label12;

     label10:
        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $r7 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i11 = virtualinvoke $r7.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

     label11:
        goto label02;

     label12:
        $i19 = (int) -1;

        if i11 == $i19 goto label13;

        $r6 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r6.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(i11);

     label13:
        $r4 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>($r4);

        return $r5;

        catch java.lang.NumberFormatException from label03 to label04 with label05;
    }

    protected org.apache.pdfbox.cos.COSBoolean parseBoolean() throws java.io.IOException
    {
        byte[] $r12, $r23;
        boolean $z0, $z1;
        org.apache.pdfbox.cos.COSBoolean r32;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r15, $r16, $r17, $r19, $r26, $r27, $r28, $r30, $r34, $r37, $r39;
        long $l2, $l3, $l4;
        int $i0, $i5, $i6;
        java.lang.String $r9, $r20, $r31, $r33, $r36;
        org.apache.pdfbox.io.PushBackInputStream $r1, $r7, $r11, $r18, $r22, $r29;
        char c1;
        java.io.IOException $r35, $r38, $r40;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        c1 = (char) $i0;

        $i5 = (int) c1;

        if $i5 != 116 goto label2;

        $r33 = new java.lang.String;

        $r22 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r23 = virtualinvoke $r22.<org.apache.pdfbox.io.PushBackInputStream: byte[] readFully(int)>(4);

        specialinvoke $r33.<java.lang.String: void <init>(byte[],java.lang.String)>($r23, "ISO-8859-1");

        $z1 = virtualinvoke $r33.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z1 != 0 goto label1;

        $r35 = new java.io.IOException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing boolean: expected=\'true\' actual=\'");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at offset ");

        $r29 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l4 = virtualinvoke $r29.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r35.<java.io.IOException: void <init>(java.lang.String)>($r31);

        throw $r35;

     label1:
        r32 = <org.apache.pdfbox.cos.COSBoolean: org.apache.pdfbox.cos.COSBoolean TRUE>;

        goto label5;

     label2:
        $i6 = (int) c1;

        if $i6 != 102 goto label4;

        $r36 = new java.lang.String;

        $r11 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r12 = virtualinvoke $r11.<org.apache.pdfbox.io.PushBackInputStream: byte[] readFully(int)>(5);

        specialinvoke $r36.<java.lang.String: void <init>(byte[],java.lang.String)>($r12, "ISO-8859-1");

        $z0 = virtualinvoke $r36.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z0 != 0 goto label3;

        $r38 = new java.io.IOException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing boolean: expected=\'true\' actual=\'");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at offset ");

        $r18 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l3 = virtualinvoke $r18.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.io.IOException: void <init>(java.lang.String)>($r20);

        throw $r38;

     label3:
        r32 = <org.apache.pdfbox.cos.COSBoolean: org.apache.pdfbox.cos.COSBoolean FALSE>;

        goto label5;

     label4:
        $r40 = new java.io.IOException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error parsing boolean expected=\'t or f\' actual=\'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at offset ");

        $r7 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l2 = virtualinvoke $r7.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r40;

     label5:
        return r32;
    }

    protected org.apache.pdfbox.cos.COSBase parseDirObject() throws java.io.IOException
    {
        byte[] $r4, $r24, $r58;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        org.apache.pdfbox.cos.COSBase r60;
        java.lang.StringBuilder $r7, $r8, $r9, $r11, $r16, $r17, $r18, $r20, $r27, $r28, $r29, $r31, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r54, $r64, $r67, $r70, $r73, $r74;
        long $l1, $l6;
        java.lang.String $r12, $r13, $r21, $r32, $r38, $r40, $r55, $r56, $r59, $r66, $r69;
        java.io.IOException $r65, $r68, $r71, $r75;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        org.apache.pdfbox.cos.COSObject $r72;
        int $i0, $i2, $i3, $i4, $i7, $i10, i11, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i25, $i26;
        org.apache.pdfbox.io.PushBackInputStream $r1, $r3, $r10, $r19, $r23, $r30, $r33, $r35, $r36, $r37, $r39, $r41, $r53, $r57, $r62, $r63;
        char $c5, c8, c9, c12;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        r60 = null;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        c8 = (char) $i0;

        $i14 = (int) c8;

        lookupswitch($i14)
        {
            case 40: goto label04;
            case 47: goto label05;
            case 60: goto label01;
            case 82: goto label12;
            case 91: goto label03;
            case 102: goto label10;
            case 110: goto label06;
            case 116: goto label08;
            case 65535: goto label13;
            default: goto label14;
        };

     label01:
        $r35 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i2 = virtualinvoke $r35.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        $r36 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i3 = virtualinvoke $r36.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        c9 = (char) $i3;

        $r37 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r37.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>($i2);

        $i15 = (int) c9;

        if $i15 != 60 goto label02;

        r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDictionary parseCOSDictionary()>();

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

        goto label24;

     label02:
        r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSString parseCOSString()>();

        goto label24;

     label03:
        r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSArray parseCOSArray()>();

        goto label24;

     label04:
        r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSString parseCOSString()>();

        goto label24;

     label05:
        r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSName parseCOSName()>();

        goto label24;

     label06:
        $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.String readString()>();

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("null");

        if $z1 != 0 goto label07;

        $r65 = new java.io.IOException;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected=\'null\' actual=\'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' at offset ");

        $r19 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l1 = virtualinvoke $r19.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r65.<java.io.IOException: void <init>(java.lang.String)>($r21);

        throw $r65;

     label07:
        r60 = <org.apache.pdfbox.cos.COSNull: org.apache.pdfbox.cos.COSNull NULL>;

        goto label24;

     label08:
        $r66 = new java.lang.String;

        $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r4 = virtualinvoke $r3.<org.apache.pdfbox.io.PushBackInputStream: byte[] readFully(int)>(4);

        specialinvoke $r66.<java.lang.String: void <init>(byte[],java.lang.String)>($r4, "ISO-8859-1");

        $z0 = virtualinvoke $r66.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 == 0 goto label09;

        r60 = <org.apache.pdfbox.cos.COSBoolean: org.apache.pdfbox.cos.COSBoolean TRUE>;

        goto label24;

     label09:
        $r68 = new java.io.IOException;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected true actual=\'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r66);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        $r10 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r68.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r68;

     label10:
        $r69 = new java.lang.String;

        $r23 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r24 = virtualinvoke $r23.<org.apache.pdfbox.io.PushBackInputStream: byte[] readFully(int)>(5);

        specialinvoke $r69.<java.lang.String: void <init>(byte[],java.lang.String)>($r24, "ISO-8859-1");

        $z2 = virtualinvoke $r69.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z2 == 0 goto label11;

        r60 = <org.apache.pdfbox.cos.COSBoolean: org.apache.pdfbox.cos.COSBoolean FALSE>;

        goto label24;

     label11:
        $r71 = new java.io.IOException;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected false actual=\'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r69);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' ");

        $r30 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r71.<java.io.IOException: void <init>(java.lang.String)>($r32);

        throw $r71;

     label12:
        $r33 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r33.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        $r72 = new org.apache.pdfbox.cos.COSObject;

        specialinvoke $r72.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null);

        r60 = $r72;

        goto label24;

     label13:
        return null;

     label14:
        $z3 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c8);

        if $z3 != 0 goto label15;

        $i16 = (int) c8;

        if $i16 == 45 goto label15;

        $i17 = (int) c8;

        if $i17 == 43 goto label15;

        $i18 = (int) c8;

        if $i18 != 46 goto label20;

     label15:
        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r62 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i10 = virtualinvoke $r62.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        i11 = $i10;

        c12 = (char) $i10;

     label16:
        $z6 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c12);

        if $z6 != 0 goto label17;

        $i19 = (int) c12;

        if $i19 == 45 goto label17;

        $i20 = (int) c12;

        if $i20 == 43 goto label17;

        $i21 = (int) c12;

        if $i21 == 46 goto label17;

        $i22 = (int) c12;

        if $i22 == 69 goto label17;

        $i23 = (int) c12;

        if $i23 != 101 goto label18;

     label17:
        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c12);

        $r63 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i13 = virtualinvoke $r63.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        i11 = $i13;

        c12 = (char) $i13;

        goto label16;

     label18:
        $i25 = (int) -1;

        if i11 == $i25 goto label19;

        $r39 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r39.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(i11);

     label19:
        $r38 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        r60 = staticinvoke <org.apache.pdfbox.cos.COSNumber: org.apache.pdfbox.cos.COSNumber get(java.lang.String)>($r38);

        goto label24;

     label20:
        $r40 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.String readString()>();

        if $r40 == null goto label21;

        $i7 = virtualinvoke $r40.<java.lang.String: int length()>();

        if $i7 != 0 goto label22;

     label21:
        $r41 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i4 = virtualinvoke $r41.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        $r75 = new java.io.IOException;

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown dir object c=\'");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c8);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cInt=");

        $i26 = (int) c8;

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" peek=\'");

        $c5 = (char) $i4;

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' peekInt=");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r53 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l6 = virtualinvoke $r53.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r75.<java.io.IOException: void <init>(java.lang.String)>($r55);

        throw $r75;

     label22:
        $r56 = "endobj";

        $z4 = virtualinvoke $r56.<java.lang.String: boolean equals(java.lang.Object)>($r40);

        if $z4 != 0 goto label23;

        $r59 = "endstream";

        $z5 = virtualinvoke $r59.<java.lang.String: boolean equals(java.lang.Object)>($r40);

        if $z5 == 0 goto label24;

     label23:
        $r57 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r58 = virtualinvoke $r40.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r57.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r58);

     label24:
        return r60;
    }

    protected java.lang.String readString() throws java.io.IOException
    {
        org.apache.pdfbox.io.PushBackInputStream $r2, $r4, $r5;
        char $c0, $c1;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        int i2, $i4, $i6;
        java.lang.StringBuilder $r6;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i2 = virtualinvoke $r2.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

     label1:
        $c0 = (char) i2;

        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEndOfName(char)>($c0);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isClosing(int)>(i2);

        if $z1 != 0 goto label2;

        $i4 = (int) -1;

        if i2 == $i4 goto label2;

        $c1 = (char) i2;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i2 = virtualinvoke $r5.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        goto label1;

     label2:
        $i6 = (int) -1;

        if i2 == $i6 goto label3;

        $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r4.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(i2);

     label3:
        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    protected java.lang.String readExpectedString(java.lang.String) throws java.io.IOException
    {
        byte[] $r9;
        boolean $z0, $z1, $z2;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        java.lang.StringBuilder $r12, $r13, $r14, $r16, $r17, $r21, $r22;
        int $i0, $i1, i4, i5, $i7, $i9, $i10, $i11, $i13, $i15;
        java.lang.String r3, $r4, $r8, $r15, $r18;
        org.apache.pdfbox.io.PushBackInputStream $r1, $r5, $r6, $r7, $r19, $r20;
        char c2, $c3;
        java.io.IOException $r23;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i4 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

     label1:
        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>(i4);

        if $z0 == 0 goto label2;

        $i7 = (int) -1;

        if i4 == $i7 goto label2;

        $r20 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i4 = virtualinvoke $r20.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        goto label1;

     label2:
        $r21 = new java.lang.StringBuilder;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(int)>($i0);

        i5 = 0;

     label3:
        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEOL(int)>(i4);

        if $z1 != 0 goto label6;

        $i9 = (int) -1;

        if i4 == $i9 goto label6;

        $i1 = virtualinvoke r3.<java.lang.String: int length()>();

        if i5 >= $i1 goto label6;

        c2 = (char) i4;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        $c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i5);

        $i10 = (int) $c3;

        $i11 = (int) c2;

        if $i10 != $i11 goto label4;

        i5 = i5 + 1;

        goto label5;

     label4:
        $r7 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r8 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r7.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r9);

        $r23 = new java.io.IOException;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected to read \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' instead started reading \'");

        $r15 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r18);

        throw $r23;

     label5:
        $r19 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i4 = virtualinvoke $r19.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        goto label3;

     label6:
        $z2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEOL(int)>(i4);

        if $z2 == 0 goto label7;

        $i13 = (int) -1;

        if i4 == $i13 goto label7;

        $r6 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i4 = virtualinvoke $r6.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        goto label6;

     label7:
        $i15 = (int) -1;

        if i4 == $i15 goto label8;

        $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r5.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(i4);

     label8:
        $r4 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    protected java.lang.String readString(int) throws java.io.IOException
    {
        org.apache.pdfbox.io.PushBackInputStream $r1, $r4, $r5;
        char $c2;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        int i0, $i1, i3, $i5, $i7;
        java.lang.StringBuilder $r6;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        i0 := @parameter0: int;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i3 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>(i0);

     label1:
        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>(i3);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isClosing(int)>(i3);

        if $z1 != 0 goto label2;

        $i5 = (int) -1;

        if i3 == $i5 goto label2;

        $i1 = virtualinvoke $r6.<java.lang.StringBuilder: int length()>();

        if $i1 >= i0 goto label2;

        if i3 == 91 goto label2;

        if i3 == 60 goto label2;

        if i3 == 40 goto label2;

        if i3 == 47 goto label2;

        $c2 = (char) i3;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i3 = virtualinvoke $r5.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        goto label1;

     label2:
        $i7 = (int) -1;

        if i3 == $i7 goto label3;

        $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r4.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(i3);

     label3:
        $r3 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    protected boolean isClosing() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.BaseParser r0;
        org.apache.pdfbox.io.PushBackInputStream $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isClosing(int)>($i0);

        return $z0;
    }

    protected boolean isClosing(int)
    {
        int i0;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        i0 := @parameter0: int;

        if i0 != 93 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected java.lang.String readLine() throws java.io.IOException
    {
        org.apache.pdfbox.io.PushBackInputStream $r1, $r3;
        char $c1;
        java.io.IOException $r6;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        int $i0, $i3;
        java.lang.StringBuilder $r7;
        java.lang.String $r4;
        boolean $z0, $z1;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $z0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: boolean isEOF()>();

        if $z0 == 0 goto label1;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("Error: End-of-File, expected line");

        throw $r6;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>(11);

     label2:
        $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r3.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        $i3 = (int) -1;

        if $i0 == $i3 goto label4;

        $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEOL(int)>($i0);

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $c1 = (char) $i0;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label2;

     label4:
        $r4 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    protected boolean isEOL() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.BaseParser r0;
        org.apache.pdfbox.io.PushBackInputStream $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEOL(int)>($i0);

        return $z0;
    }

    protected boolean isEOL(int)
    {
        int i0;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        i0 := @parameter0: int;

        if i0 == 10 goto label1;

        if i0 != 13 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected boolean isWhitespace() throws java.io.IOException
    {
        org.apache.pdfbox.pdfparser.BaseParser r0;
        org.apache.pdfbox.io.PushBackInputStream $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int peek()>();

        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>($i0);

        return $z0;
    }

    protected boolean isWhitespace(int)
    {
        int i0;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 9 goto label1;

        if i0 == 12 goto label1;

        if i0 == 10 goto label1;

        if i0 == 13 goto label1;

        if i0 != 32 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    protected void skipSpaces() throws java.io.IOException
    {
        org.apache.pdfbox.io.PushBackInputStream $r1, $r2, $r3, $r4, $r5;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        int i0, $i2, $i4;
        boolean $z0;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i0 = virtualinvoke $r1.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

     label1:
        if i0 == 0 goto label2;

        if i0 == 9 goto label2;

        if i0 == 12 goto label2;

        if i0 == 10 goto label2;

        if i0 == 13 goto label2;

        if i0 == 32 goto label2;

        if i0 != 37 goto label5;

     label2:
        if i0 != 37 goto label4;

        $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i0 = virtualinvoke $r3.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

     label3:
        $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEOL(int)>(i0);

        if $z0 != 0 goto label1;

        $i2 = (int) -1;

        if i0 == $i2 goto label1;

        $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i0 = virtualinvoke $r4.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        goto label3;

     label4:
        $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        i0 = virtualinvoke $r2.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        goto label1;

     label5:
        $i4 = (int) -1;

        if i0 == $i4 goto label6;

        $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r5.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>(i0);

     label6:
        return;
    }

    protected long readObjectNumber() throws java.io.IOException
    {
        long $l0;
        java.io.IOException $r8;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        byte $b1, $b2;
        int $i3, $i4;
        java.lang.StringBuilder $r3, $r4, $r5, $r7;
        java.lang.String $r6;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: long readLong()>();

        $b1 = $l0 cmp 0L;

        $i3 = (int) $b1;

        if $i3 < 0 goto label1;

        $b2 = $l0 cmp 10000000000L;

        $i4 = (int) $b2;

        if $i4 < 0 goto label2;

     label1:
        $r8 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Object Number \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has more than 10 digits or is negative");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label2:
        return $l0;
    }

    protected int readGenerationNumber() throws java.io.IOException
    {
        long $l1;
        java.io.IOException $r8;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        byte $b2;
        int $i0, $i3;
        java.lang.StringBuilder $r3, $r4, $r5, $r7;
        java.lang.String $r6;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $i0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: int readInt()>();

        if $i0 < 0 goto label1;

        $l1 = (long) $i0;

        $b2 = $l1 cmp 65535L;

        $i3 = (int) $b2;

        if $i3 <= 0 goto label2;

     label1:
        $r8 = new java.io.IOException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Generation Number \'");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' has more than 5 digits");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r6);

        throw $r8;

     label2:
        return $i0;
    }

    protected int readInt() throws java.io.IOException
    {
        byte[] $r6;
        org.apache.pdfbox.io.PushBackInputStream $r4, $r10;
        java.lang.NumberFormatException $r3;
        java.io.IOException $r7;
        long $l1;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        int $i0;
        java.lang.StringBuilder $r1, $r8, $r9, $r11;
        java.lang.String $r2, $r5, $r12;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.StringBuilder readStringNumber()>();

     label1:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r4.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r6);

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected an integer type at offset ");

        $r10 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l1 = virtualinvoke $r10.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label4:
        return $i0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    protected long readLong() throws java.io.IOException
    {
        byte[] $r6;
        long $l0, $l1;
        java.lang.String $r2, $r5, $r15;
        org.apache.pdfbox.io.PushBackInputStream $r4, $r10;
        java.lang.NumberFormatException $r3;
        java.io.IOException $r7;
        org.apache.pdfbox.pdfparser.BaseParser r0;
        java.lang.StringBuilder $r1, $r8, $r9, $r11, $r12, $r13, $r14;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>();

        $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.StringBuilder readStringNumber()>();

     label1:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1");

        virtualinvoke $r4.<org.apache.pdfbox.io.PushBackInputStream: void unread(byte[])>($r6);

        $r7 = new java.io.IOException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Expected a long type at offset ");

        $r10 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $l1 = virtualinvoke $r10.<org.apache.pdfbox.io.PushBackInputStream: long getOffset()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", instead got \'");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String)>($r15);

        throw $r7;

     label4:
        return $l0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    protected final java.lang.StringBuilder readStringNumber() throws java.io.IOException
    {
        org.apache.pdfbox.io.PushBackInputStream $r2, $r3;
        char $c1;
        org.apache.pdfbox.pdfparser.BaseParser r1;
        int $i0, $i3, $i5;
        java.lang.StringBuilder $r4;

        r1 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

     label1:
        $r2 = r1.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        $i0 = virtualinvoke $r2.<org.apache.pdfbox.io.PushBackInputStream: int read()>();

        if $i0 == 32 goto label2;

        if $i0 == 10 goto label2;

        if $i0 == 13 goto label2;

        if $i0 == 60 goto label2;

        if $i0 == 91 goto label2;

        if $i0 == 0 goto label2;

        $i3 = (int) -1;

        if $i0 == $i3 goto label2;

        $c1 = (char) $i0;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        goto label1;

     label2:
        $i5 = (int) -1;

        if $i0 == $i5 goto label3;

        $r3 = r1.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        virtualinvoke $r3.<org.apache.pdfbox.io.PushBackInputStream: void unread(int)>($i0);

     label3:
        return $r4;
    }

    public void clearResources()
    {
        org.apache.pdfbox.pdfparser.BaseParser r0;
        org.apache.pdfbox.io.PushBackInputStream $r1, $r2;

        r0 := @this: org.apache.pdfbox.pdfparser.BaseParser;

        r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDocument document> = null;

        $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource>;

        staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.InputStream)>($r2);

        r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.io.PushBackInputStream pdfSource> = null;

     label1:
        return;
    }

    static void <clinit>()
    {
        byte[] $r1, $r2;
        org.apache.commons.logging.Log $r0;
        java.lang.SecurityException $r3;
        boolean $z0;

        <org.apache.pdfbox.pdfparser.BaseParser: java.lang.String NULL> = "null";

        <org.apache.pdfbox.pdfparser.BaseParser: java.lang.String FALSE> = "false";

        <org.apache.pdfbox.pdfparser.BaseParser: java.lang.String TRUE> = "true";

        <org.apache.pdfbox.pdfparser.BaseParser: java.lang.String STREAM_STRING> = "stream";

        <org.apache.pdfbox.pdfparser.BaseParser: java.lang.String ENDSTREAM_STRING> = "endstream";

        <org.apache.pdfbox.pdfparser.BaseParser: java.lang.String ENDOBJ_STRING> = "endobj";

        <org.apache.pdfbox.pdfparser.BaseParser: java.lang.String DEF> = "def";

        <org.apache.pdfbox.pdfparser.BaseParser: int J> = 106;

        <org.apache.pdfbox.pdfparser.BaseParser: int B> = 98;

        <org.apache.pdfbox.pdfparser.BaseParser: int O> = 111;

        <org.apache.pdfbox.pdfparser.BaseParser: int M> = 109;

        <org.apache.pdfbox.pdfparser.BaseParser: int A> = 97;

        <org.apache.pdfbox.pdfparser.BaseParser: int R> = 114;

        <org.apache.pdfbox.pdfparser.BaseParser: int T> = 116;

        <org.apache.pdfbox.pdfparser.BaseParser: int S> = 115;

        <org.apache.pdfbox.pdfparser.BaseParser: int D> = 100;

        <org.apache.pdfbox.pdfparser.BaseParser: int N> = 110;

        <org.apache.pdfbox.pdfparser.BaseParser: int E> = 101;

        <org.apache.pdfbox.pdfparser.BaseParser: java.lang.String PROP_PUSHBACK_SIZE> = "org.apache.pdfbox.baseParser.pushBackSize";

        <org.apache.pdfbox.pdfparser.BaseParser: long GENERATION_NUMBER_THRESHOLD> = 65535L;

        <org.apache.pdfbox.pdfparser.BaseParser: long OBJECT_NUMBER_THRESHOLD> = 10000000000L;

        $r0 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lorg/apache/pdfbox/pdfparser/BaseParser;");

        <org.apache.pdfbox.pdfparser.BaseParser: org.apache.commons.logging.Log LOG> = $r0;

        $r1 = newarray (byte)[9];

        $r1[0] = 101;

        $r1[1] = 110;

        $r1[2] = 100;

        $r1[3] = 115;

        $r1[4] = 116;

        $r1[5] = 114;

        $r1[6] = 101;

        $r1[7] = 97;

        $r1[8] = 109;

        <org.apache.pdfbox.pdfparser.BaseParser: byte[] ENDSTREAM> = $r1;

        $r2 = newarray (byte)[6];

        $r2[0] = 101;

        $r2[1] = 110;

        $r2[2] = 100;

        $r2[3] = 111;

        $r2[4] = 98;

        $r2[5] = 106;

        <org.apache.pdfbox.pdfparser.BaseParser: byte[] ENDOBJ> = $r2;

        <org.apache.pdfbox.pdfparser.BaseParser: boolean FORCE_PARSING> = 1;

     label1:
        $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("org.apache.pdfbox.forceParsing");

        <org.apache.pdfbox.pdfparser.BaseParser: boolean FORCE_PARSING> = $z0;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }
}
