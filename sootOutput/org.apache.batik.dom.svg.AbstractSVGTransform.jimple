public abstract class org.apache.batik.dom.svg.AbstractSVGTransform extends java.lang.Object implements org.w3c.dom.svg.SVGTransform
{
    protected short type;
    protected java.awt.geom.AffineTransform affineTransform;
    protected float angle;
    protected float x;
    protected float y;

    public void <init>()
    {
        org.apache.batik.dom.svg.AbstractSVGTransform r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransform;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: short type> = 0;

        return;
    }

    protected abstract org.w3c.dom.svg.SVGMatrix createMatrix();

    protected void setType(short)
    {
        short s0;
        org.apache.batik.dom.svg.AbstractSVGTransform r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransform;

        s0 := @parameter0: short;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: short type> = s0;

        return;
    }

    public float getX()
    {
        float $f0;
        org.apache.batik.dom.svg.AbstractSVGTransform r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransform;

        $f0 = r0.<org.apache.batik.dom.svg.AbstractSVGTransform: float x>;

        return $f0;
    }

    public float getY()
    {
        float $f0;
        org.apache.batik.dom.svg.AbstractSVGTransform r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransform;

        $f0 = r0.<org.apache.batik.dom.svg.AbstractSVGTransform: float y>;

        return $f0;
    }

    public void assign(org.apache.batik.dom.svg.AbstractSVGTransform)
    {
        short $s0;
        float $f0, $f1, $f2;
        org.apache.batik.dom.svg.AbstractSVGTransform r0, r1;
        java.awt.geom.AffineTransform $r2;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransform;

        r1 := @parameter0: org.apache.batik.dom.svg.AbstractSVGTransform;

        $s0 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: short type>;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: short type> = $s0;

        $r2 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform>;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform> = $r2;

        $f0 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: float angle>;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: float angle> = $f0;

        $f1 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: float x>;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: float x> = $f1;

        $f2 = r1.<org.apache.batik.dom.svg.AbstractSVGTransform: float y>;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: float y> = $f2;

        return;
    }

    public short getType()
    {
        short $s0;
        org.apache.batik.dom.svg.AbstractSVGTransform r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransform;

        $s0 = r0.<org.apache.batik.dom.svg.AbstractSVGTransform: short type>;

        return $s0;
    }

    public org.w3c.dom.svg.SVGMatrix getMatrix()
    {
        org.apache.batik.dom.svg.AbstractSVGTransform r0;
        org.w3c.dom.svg.SVGMatrix $r1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransform;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.AbstractSVGTransform: org.w3c.dom.svg.SVGMatrix createMatrix()>();

        return $r1;
    }

    public float getAngle()
    {
        float $f0;
        org.apache.batik.dom.svg.AbstractSVGTransform r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransform;

        $f0 = r0.<org.apache.batik.dom.svg.AbstractSVGTransform: float angle>;

        return $f0;
    }

    public void setMatrix(org.w3c.dom.svg.SVGMatrix)
    {
        java.awt.geom.AffineTransform $r1;
        org.w3c.dom.svg.SVGMatrix r2;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        org.apache.batik.dom.svg.AbstractSVGTransform r0;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransform;

        r2 := @parameter0: org.w3c.dom.svg.SVGMatrix;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: short type> = 1;

        $r1 = new java.awt.geom.AffineTransform;

        $f0 = interfaceinvoke r2.<org.w3c.dom.svg.SVGMatrix: float getA()>();

        $f1 = interfaceinvoke r2.<org.w3c.dom.svg.SVGMatrix: float getB()>();

        $f2 = interfaceinvoke r2.<org.w3c.dom.svg.SVGMatrix: float getC()>();

        $f3 = interfaceinvoke r2.<org.w3c.dom.svg.SVGMatrix: float getD()>();

        $f4 = interfaceinvoke r2.<org.w3c.dom.svg.SVGMatrix: float getE()>();

        $f5 = interfaceinvoke r2.<org.w3c.dom.svg.SVGMatrix: float getF()>();

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(float,float,float,float,float,float)>($f0, $f1, $f2, $f3, $f4, $f5);

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform> = $r1;

        return;
    }

    public void setTranslate(float, float)
    {
        float f0, f1;
        org.apache.batik.dom.svg.AbstractSVGTransform r0;
        java.awt.geom.AffineTransform $r1;
        double $d0, $d1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransform;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: short type> = 2;

        $d1 = (double) f0;

        $d0 = (double) f1;

        $r1 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d1, $d0);

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform> = $r1;

        return;
    }

    public void setScale(float, float)
    {
        float f0, f1;
        org.apache.batik.dom.svg.AbstractSVGTransform r0;
        java.awt.geom.AffineTransform $r1;
        double $d0, $d1;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransform;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: short type> = 3;

        $d1 = (double) f0;

        $d0 = (double) f1;

        $r1 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getScaleInstance(double,double)>($d1, $d0);

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform> = $r1;

        return;
    }

    public void setRotate(float, float, float)
    {
        java.awt.geom.AffineTransform $r1;
        float f0, f1, f2;
        org.apache.batik.dom.svg.AbstractSVGTransform r0;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransform;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: short type> = 4;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d3 = (double) f1;

        $d2 = (double) f2;

        $r1 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double,double,double)>($d1, $d3, $d2);

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform> = $r1;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: float angle> = f0;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: float x> = f1;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: float y> = f2;

        return;
    }

    public void setSkewX(float)
    {
        float f0;
        org.apache.batik.dom.svg.AbstractSVGTransform r0;
        java.awt.geom.AffineTransform $r1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransform;

        f0 := @parameter0: float;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: short type> = 5;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double tan(double)>($d1);

        $r1 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getShearInstance(double,double)>($d2, 0.0);

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform> = $r1;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: float angle> = f0;

        return;
    }

    public void setSkewY(float)
    {
        float f0;
        org.apache.batik.dom.svg.AbstractSVGTransform r0;
        java.awt.geom.AffineTransform $r1;
        double $d0, $d1, $d2;

        r0 := @this: org.apache.batik.dom.svg.AbstractSVGTransform;

        f0 := @parameter0: float;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: short type> = 6;

        $d0 = (double) f0;

        $d1 = staticinvoke <java.lang.Math: double toRadians(double)>($d0);

        $d2 = staticinvoke <java.lang.Math: double tan(double)>($d1);

        $r1 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getShearInstance(double,double)>(0.0, $d2);

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: java.awt.geom.AffineTransform affineTransform> = $r1;

        r0.<org.apache.batik.dom.svg.AbstractSVGTransform: float angle> = f0;

        return;
    }
}
