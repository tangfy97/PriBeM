public class org.waveprotocol.wave.model.document.util.TextExtractor extends java.lang.Object
{
    private final org.waveprotocol.wave.model.document.ReadableDocument document;

    public static java.lang.String extractInnerText(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.util.TextExtractor $r0;
        java.lang.String $r3;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter1: java.lang.Object;

        $r0 = new org.waveprotocol.wave.model.document.util.TextExtractor;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.util.TextExtractor: void <init>(org.waveprotocol.wave.model.document.ReadableDocument)>(r1);

        $r3 = virtualinvoke $r0.<org.waveprotocol.wave.model.document.util.TextExtractor: java.lang.String getInnerText(java.lang.Object)>(r2);

        return $r3;
    }

    public void <init>(org.waveprotocol.wave.model.document.ReadableDocument)
    {
        org.waveprotocol.wave.model.document.util.TextExtractor r0;
        org.waveprotocol.wave.model.document.ReadableDocument r1;

        r0 := @this: org.waveprotocol.wave.model.document.util.TextExtractor;

        r1 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.util.TextExtractor: org.waveprotocol.wave.model.document.ReadableDocument document> = r1;

        return;
    }

    public java.lang.String getInnerText(java.lang.Object)
    {
        java.lang.StringBuilder $r0;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.util.TextExtractor r1;
        java.lang.String $r3;

        r1 := @this: org.waveprotocol.wave.model.document.util.TextExtractor;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        specialinvoke r1.<org.waveprotocol.wave.model.document.util.TextExtractor: void getInnerTextOfElement(java.lang.Object,java.lang.StringBuilder)>(r2, $r0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    private void getInnerTextOfNode(java.lang.Object, java.lang.StringBuilder)
    {
        org.waveprotocol.wave.model.document.ReadableDocument $r2, $r4;
        java.lang.Object r1, $r3, $r5;
        java.lang.StringBuilder r6;
        org.waveprotocol.wave.model.document.util.TextExtractor r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.TextExtractor;

        r1 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.StringBuilder;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.TextExtractor: org.waveprotocol.wave.model.document.ReadableDocument document>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asText(java.lang.Object)>(r1);

        if $r3 == null goto label1;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.TextExtractor: void getInnerTextOfText(java.lang.Object,java.lang.StringBuilder)>($r3, r6);

        goto label2;

     label1:
        $r4 = r0.<org.waveprotocol.wave.model.document.util.TextExtractor: org.waveprotocol.wave.model.document.ReadableDocument document>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object asElement(java.lang.Object)>(r1);

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.TextExtractor: void getInnerTextOfElement(java.lang.Object,java.lang.StringBuilder)>($r5, r6);

     label2:
        return;
    }

    private void getInnerTextOfText(java.lang.Object, java.lang.StringBuilder)
    {
        org.waveprotocol.wave.model.document.ReadableDocument $r3;
        java.lang.StringBuilder r0;
        java.lang.Object r2;
        org.waveprotocol.wave.model.document.util.TextExtractor r1;
        java.lang.String $r4;

        r1 := @this: org.waveprotocol.wave.model.document.util.TextExtractor;

        r2 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.StringBuilder;

        $r3 = r1.<org.waveprotocol.wave.model.document.util.TextExtractor: org.waveprotocol.wave.model.document.ReadableDocument document>;

        $r4 = interfaceinvoke $r3.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.String getData(java.lang.Object)>(r2);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        return;
    }

    private void getInnerTextOfElement(java.lang.Object, java.lang.StringBuilder)
    {
        org.waveprotocol.wave.model.document.ReadableDocument $r2, $r4;
        java.lang.Object r1, r5;
        java.lang.StringBuilder r3;
        org.waveprotocol.wave.model.document.util.TextExtractor r0;

        r0 := @this: org.waveprotocol.wave.model.document.util.TextExtractor;

        r1 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.StringBuilder;

        $r2 = r0.<org.waveprotocol.wave.model.document.util.TextExtractor: org.waveprotocol.wave.model.document.ReadableDocument document>;

        r5 = interfaceinvoke $r2.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getFirstChild(java.lang.Object)>(r1);

     label1:
        if r5 == null goto label2;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.TextExtractor: void getInnerTextOfNode(java.lang.Object,java.lang.StringBuilder)>(r5, r3);

        $r4 = r0.<org.waveprotocol.wave.model.document.util.TextExtractor: org.waveprotocol.wave.model.document.ReadableDocument document>;

        r5 = interfaceinvoke $r4.<org.waveprotocol.wave.model.document.ReadableDocument: java.lang.Object getNextSibling(java.lang.Object)>(r5);

        goto label1;

     label2:
        return;
    }
}
