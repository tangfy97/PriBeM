public class com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable extends com.hp.hpl.jena.graph.Node_Variable
{
    protected int index;
    protected com.hp.hpl.jena.graph.Node value;
    protected boolean isRef;
    public static final com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable WILD;

    public void <init>(java.lang.String, int)
    {
        int i0;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r0;
        java.lang.String r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.hp.hpl.jena.graph.Node_Variable: void <init>(java.lang.String)>(r1);

        r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: boolean isRef> = 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int index> = i0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.graph.Node value> = r0;

        return;
    }

    public int getIndex()
    {
        int $i0;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        $i0 = r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int index>;

        return $i0;
    }

    public void setIndex(int)
    {
        int i0;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        i0 := @parameter0: int;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int index> = i0;

        return;
    }

    public void simpleBind(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r0;
        com.hp.hpl.jena.graph.Node r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.graph.Node value> = r1;

        $z0 = r1 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: boolean isRef> = $z0;

        return;
    }

    public com.hp.hpl.jena.graph.Node deref()
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r0, r4;
        com.hp.hpl.jena.graph.Node $r1, $r2, $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        r4 = r0;

     label1:
        $z0 = r4.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: boolean isRef>;

        if $z0 == 0 goto label3;

        $r2 = r4.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.graph.Node value>;

        if $r2 != r4 goto label2;

        return r4;

     label2:
        $r3 = r4.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.graph.Node value>;

        r4 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) $r3;

        goto label1;

     label3:
        $r1 = r4.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.graph.Node value>;

        return $r1;
    }

    public com.hp.hpl.jena.graph.Node getRawBoundValue()
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.graph.Node value>;

        return $r1;
    }

    public void unbind()
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: boolean isRef> = 1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.graph.Node value> = r0;

        return;
    }

    public boolean isUnbound()
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r0;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: boolean isRef>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.graph.Node value>;

        if $r1 != r0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable cloneNode()
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r0, r1;
        int $i0;
        java.lang.String $r2;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: java.lang.String getName()>();

        $i0 = r1.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int index>;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: void <init>(java.lang.String,int)>($r2, $i0);

        return $r0;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r0;
        java.lang.String $r1, $r2;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: java.lang.String getName()>();

        if $r1 != null goto label1;

        return "*";

     label1:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: java.lang.String getName()>();

        return $r2;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r1, $r3;
        java.lang.Object r0;
        java.lang.String $r2, $r4;
        boolean $z0, $z1, $z2;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label4;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: java.lang.String getName()>();

        if $r2 != null goto label3;

        if r1 != r0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;

     label3:
        $r3 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r0;

        $r4 = virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: java.lang.String getName()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label4:
        return 0;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r0;
        int $i0, $i2;
        java.lang.String $r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: java.lang.String getName()>();

        if $r1 != null goto label1;

        $i2 = (int) 50087;

        return $i2;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public boolean sameValueAs(java.lang.Object)
    {
        java.lang.Object r0;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable r1;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        return $z0;
    }

    public static boolean sameNodeAs(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r2, $r3;
        com.hp.hpl.jena.graph.Node r0, r1;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label4;

        $z2 = r1 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z2 == 0 goto label3;

        $r2 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r0;

        $i0 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        $r3 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r1;

        $i1 = virtualinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        if $i0 != $i1 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;

     label4:
        $z1 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r1);

        return $z1;
    }

    static void <clinit>()
    {
        int $i1;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r1;

        $r1 = new com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        $i1 = (int) -1;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: void <init>(java.lang.String,int)>("*", $i1);

        <com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable WILD> = $r1;

        return;
    }
}
