public class org.springframework.remoting.support.RemoteInvocationResult extends java.lang.Object implements java.io.Serializable
{
    private static final long serialVersionUID;
    private java.lang.Object value;
    private java.lang.Throwable exception;

    public void <init>(java.lang.Object)
    {
        java.lang.Object r1;
        org.springframework.remoting.support.RemoteInvocationResult r0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationResult;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.remoting.support.RemoteInvocationResult: java.lang.Object value> = r1;

        return;
    }

    public void <init>(java.lang.Throwable)
    {
        java.lang.Throwable r1;
        org.springframework.remoting.support.RemoteInvocationResult r0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationResult;

        r1 := @parameter0: java.lang.Throwable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.remoting.support.RemoteInvocationResult: java.lang.Throwable exception> = r1;

        return;
    }

    public java.lang.Object getValue()
    {
        java.lang.Object $r1;
        org.springframework.remoting.support.RemoteInvocationResult r0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationResult;

        $r1 = r0.<org.springframework.remoting.support.RemoteInvocationResult: java.lang.Object value>;

        return $r1;
    }

    public java.lang.Throwable getException()
    {
        java.lang.Throwable $r1;
        org.springframework.remoting.support.RemoteInvocationResult r0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationResult;

        $r1 = r0.<org.springframework.remoting.support.RemoteInvocationResult: java.lang.Throwable exception>;

        return $r1;
    }

    public boolean hasException()
    {
        java.lang.Throwable $r1;
        org.springframework.remoting.support.RemoteInvocationResult r0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationResult;

        $r1 = r0.<org.springframework.remoting.support.RemoteInvocationResult: java.lang.Throwable exception>;

        if $r1 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasInvocationTargetException()
    {
        java.lang.Throwable $r1;
        org.springframework.remoting.support.RemoteInvocationResult r0;
        boolean $z0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationResult;

        $r1 = r0.<org.springframework.remoting.support.RemoteInvocationResult: java.lang.Throwable exception>;

        $z0 = $r1 instanceof java.lang.reflect.InvocationTargetException;

        return $z0;
    }

    public java.lang.Object recreate() throws java.lang.Throwable
    {
        java.lang.Throwable $r1, $r3, $r4, r6;
        java.lang.reflect.InvocationTargetException $r5;
        org.springframework.remoting.support.RemoteInvocationResult r0;
        java.lang.Object $r2;
        boolean $z0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationResult;

        $r1 = r0.<org.springframework.remoting.support.RemoteInvocationResult: java.lang.Throwable exception>;

        if $r1 == null goto label2;

        r6 = r0.<org.springframework.remoting.support.RemoteInvocationResult: java.lang.Throwable exception>;

        $r3 = r0.<org.springframework.remoting.support.RemoteInvocationResult: java.lang.Throwable exception>;

        $z0 = $r3 instanceof java.lang.reflect.InvocationTargetException;

        if $z0 == 0 goto label1;

        $r4 = r0.<org.springframework.remoting.support.RemoteInvocationResult: java.lang.Throwable exception>;

        $r5 = (java.lang.reflect.InvocationTargetException) $r4;

        r6 = virtualinvoke $r5.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

     label1:
        staticinvoke <org.springframework.remoting.support.RemoteInvocationUtils: void fillInClientStackTraceIfPossible(java.lang.Throwable)>(r6);

        throw r6;

     label2:
        $r2 = r0.<org.springframework.remoting.support.RemoteInvocationResult: java.lang.Object value>;

        return $r2;
    }

    public static void <clinit>()
    {
        <org.springframework.remoting.support.RemoteInvocationResult: long serialVersionUID> = 2138555143707773549L;

        return;
    }
}
