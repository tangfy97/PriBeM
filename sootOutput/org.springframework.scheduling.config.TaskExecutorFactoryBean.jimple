public class org.springframework.scheduling.config.TaskExecutorFactoryBean extends java.lang.Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    private java.lang.String poolSize;
    private java.lang.Integer queueCapacity;
    private java.lang.Object rejectedExecutionHandler;
    private java.lang.Integer keepAliveSeconds;
    private java.lang.String beanName;
    private org.springframework.core.task.TaskExecutor target;

    public void <init>()
    {
        org.springframework.scheduling.config.TaskExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.config.TaskExecutorFactoryBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void setPoolSize(java.lang.String)
    {
        org.springframework.scheduling.config.TaskExecutorFactoryBean r0;
        java.lang.String r1;

        r0 := @this: org.springframework.scheduling.config.TaskExecutorFactoryBean;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.String poolSize> = r1;

        return;
    }

    public void setQueueCapacity(int)
    {
        int i0;
        org.springframework.scheduling.config.TaskExecutorFactoryBean r0;
        java.lang.Integer $r1;

        r0 := @this: org.springframework.scheduling.config.TaskExecutorFactoryBean;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.Integer queueCapacity> = $r1;

        return;
    }

    public void setRejectedExecutionHandler(java.lang.Object)
    {
        java.lang.Object r1;
        org.springframework.scheduling.config.TaskExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.config.TaskExecutorFactoryBean;

        r1 := @parameter0: java.lang.Object;

        r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.Object rejectedExecutionHandler> = r1;

        return;
    }

    public void setKeepAliveSeconds(int)
    {
        int i0;
        org.springframework.scheduling.config.TaskExecutorFactoryBean r0;
        java.lang.Integer $r1;

        r0 := @this: org.springframework.scheduling.config.TaskExecutorFactoryBean;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.Integer keepAliveSeconds> = $r1;

        return;
    }

    public void setBeanName(java.lang.String)
    {
        org.springframework.scheduling.config.TaskExecutorFactoryBean r0;
        java.lang.String r1;

        r0 := @this: org.springframework.scheduling.config.TaskExecutorFactoryBean;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.String beanName> = r1;

        return;
    }

    public void afterPropertiesSet() throws java.lang.Exception
    {
        org.springframework.beans.BeanWrapperImpl $r1;
        java.lang.Integer $r2, $r3, $r17, $r18;
        org.springframework.beans.factory.InitializingBean $r10;
        org.springframework.core.task.TaskExecutor $r7, $r8, $r9;
        java.lang.String $r5, $r12, $r13, $r15;
        boolean $z0, $z1;
        java.lang.Object $r4, $r6, $r16;
        java.lang.StringBuilder $r11, $r14;
        java.lang.Class $r19, $r21;
        org.springframework.scheduling.config.TaskExecutorFactoryBean r0;
        java.lang.ClassLoader $r20;

        r0 := @this: org.springframework.scheduling.config.TaskExecutorFactoryBean;

        $z0 = specialinvoke r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: boolean shouldUseBackport()>();

        if $z0 == 0 goto label1;

        $r19 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r21 = virtualinvoke $r20.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>("org.springframework.scheduling.backportconcurrent.ThreadPoolTaskExecutor");

        goto label2;

     label1:
        $r21 = class "Lorg/springframework/scheduling/concurrent/ThreadPoolTaskExecutor;";

     label2:
        $r1 = new org.springframework.beans.BeanWrapperImpl;

        specialinvoke $r1.<org.springframework.beans.BeanWrapperImpl: void <init>(java.lang.Class)>($r21);

        specialinvoke r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: void determinePoolSizeRange(org.springframework.beans.BeanWrapper)>($r1);

        $r2 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.Integer queueCapacity>;

        if $r2 == null goto label3;

        $r18 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.Integer queueCapacity>;

        interfaceinvoke $r1.<org.springframework.beans.BeanWrapper: void setPropertyValue(java.lang.String,java.lang.Object)>("queueCapacity", $r18);

     label3:
        $r3 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.Integer keepAliveSeconds>;

        if $r3 == null goto label4;

        $r17 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.Integer keepAliveSeconds>;

        interfaceinvoke $r1.<org.springframework.beans.BeanWrapper: void setPropertyValue(java.lang.String,java.lang.Object)>("keepAliveSeconds", $r17);

     label4:
        $r4 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.Object rejectedExecutionHandler>;

        if $r4 == null goto label5;

        $r16 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.Object rejectedExecutionHandler>;

        interfaceinvoke $r1.<org.springframework.beans.BeanWrapper: void setPropertyValue(java.lang.String,java.lang.Object)>("rejectedExecutionHandler", $r16);

     label5:
        $r5 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.String beanName>;

        if $r5 == null goto label6;

        $r11 = new java.lang.StringBuilder;

        $r12 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.String beanName>;

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r1.<org.springframework.beans.BeanWrapper: void setPropertyValue(java.lang.String,java.lang.Object)>("threadNamePrefix", $r15);

     label6:
        $r6 = interfaceinvoke $r1.<org.springframework.beans.BeanWrapper: java.lang.Object getWrappedInstance()>();

        $r7 = (org.springframework.core.task.TaskExecutor) $r6;

        r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: org.springframework.core.task.TaskExecutor target> = $r7;

        $r8 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: org.springframework.core.task.TaskExecutor target>;

        $z1 = $r8 instanceof org.springframework.beans.factory.InitializingBean;

        if $z1 == 0 goto label7;

        $r9 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: org.springframework.core.task.TaskExecutor target>;

        $r10 = (org.springframework.beans.factory.InitializingBean) $r9;

        interfaceinvoke $r10.<org.springframework.beans.factory.InitializingBean: void afterPropertiesSet()>();

     label7:
        return;
    }

    private boolean shouldUseBackport()
    {
        int $i0;
        org.springframework.scheduling.config.TaskExecutorFactoryBean r0;
        java.lang.String $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: org.springframework.scheduling.config.TaskExecutorFactoryBean;

        $r1 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.String poolSize>;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.String poolSize>;

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("0");

        if $z1 == 0 goto label1;

        $i0 = staticinvoke <org.springframework.core.JdkVersion: int getMajorJavaVersion()>();

        if $i0 >= 3 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void determinePoolSizeRange(org.springframework.beans.BeanWrapper)
    {
        java.lang.Integer $r4, $r8, $r12, $r13, $r25, $r26;
        boolean $z0;
        java.lang.StringBuilder $r21, $r22, $r23, $r29;
        org.springframework.beans.BeanWrapper r5;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i8;
        java.lang.Boolean $r15;
        java.lang.String $r1, $r2, $r3, $r6, $r7, $r9, $r10, $r11, $r20, $r24;
        java.lang.NumberFormatException $r17;
        java.lang.IllegalArgumentException $r27, $r28, $r30;
        org.springframework.scheduling.config.TaskExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.config.TaskExecutorFactoryBean;

        r5 := @parameter0: org.springframework.beans.BeanWrapper;

        $r1 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.String poolSize>;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r1);

        if $z0 == 0 goto label8;

     label1:
        $r2 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.String poolSize>;

        $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(45);

        $i8 = (int) -1;

        if $i0 == $i8 goto label4;

        $r6 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.String poolSize>;

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r7);

        $i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        i5 = $i1;

        $r10 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.String poolSize>;

        $i2 = $i0 + 1;

        $r9 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.String poolSize>;

        $i3 = virtualinvoke $r9.<java.lang.String: int length()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String substring(int,int)>($i2, $i3);

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r11);

        $i4 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        i6 = $i4;

        if $i1 <= $i4 goto label2;

        $r27 = new java.lang.IllegalArgumentException;

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Lower bound of pool-size range must not exceed the upper bound");

        throw $r27;

     label2:
        $r13 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.Integer queueCapacity>;

        if $r13 != null goto label5;

        if $i1 != 0 goto label3;

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r5.<org.springframework.beans.BeanWrapper: void setPropertyValue(java.lang.String,java.lang.Object)>("allowCoreThreadTimeOut", $r15);

        i5 = $i4;

        goto label5;

     label3:
        $r28 = new java.lang.IllegalArgumentException;

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("A non-zero lower bound for the size range requires a queue-capacity value");

        throw $r28;

     label4:
        $r3 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.String poolSize>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r3);

        i5 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        i6 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label5:
        $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        interfaceinvoke r5.<org.springframework.beans.BeanWrapper: void setPropertyValue(java.lang.String,java.lang.Object)>("corePoolSize", $r25);

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        interfaceinvoke r5.<org.springframework.beans.BeanWrapper: void setPropertyValue(java.lang.String,java.lang.Object)>("maxPoolSize", $r26);

     label6:
        goto label8;

     label7:
        $r17 := @caughtexception;

        $r30 = new java.lang.IllegalArgumentException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid pool-size value [");

        $r20 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: java.lang.String poolSize>;

        $r21 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: only single ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("maximum integer (e.g. \"5\") and minimum-maximum range (e.g. \"3-5\") are supported");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r24, $r17);

        throw $r30;

     label8:
        return;

        catch java.lang.NumberFormatException from label1 to label6 with label7;
    }

    public org.springframework.core.task.TaskExecutor getObject()
    {
        org.springframework.core.task.TaskExecutor $r1;
        org.springframework.scheduling.config.TaskExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.config.TaskExecutorFactoryBean;

        $r1 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: org.springframework.core.task.TaskExecutor target>;

        return $r1;
    }

    public java.lang.Class getObjectType()
    {
        org.springframework.core.task.TaskExecutor $r1, $r2;
        java.lang.Class $r3, $r4;
        org.springframework.scheduling.config.TaskExecutorFactoryBean r0;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.config.TaskExecutorFactoryBean;

        $r1 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: org.springframework.core.task.TaskExecutor target>;

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: org.springframework.core.task.TaskExecutor target>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        return $r3;

     label1:
        $z0 = specialinvoke r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: boolean shouldUseBackport()>();

        if $z0 != 0 goto label2;

        $r4 = class "Lorg/springframework/scheduling/concurrent/ThreadPoolTaskExecutor;";

        goto label3;

     label2:
        $r4 = class "Lorg/springframework/core/task/TaskExecutor;";

     label3:
        return $r4;
    }

    public boolean isSingleton()
    {
        org.springframework.scheduling.config.TaskExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.config.TaskExecutorFactoryBean;

        return 1;
    }

    public void destroy() throws java.lang.Exception
    {
        org.springframework.beans.factory.DisposableBean $r3;
        org.springframework.core.task.TaskExecutor $r1, $r2;
        org.springframework.scheduling.config.TaskExecutorFactoryBean r0;
        boolean $z0;

        r0 := @this: org.springframework.scheduling.config.TaskExecutorFactoryBean;

        $r1 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: org.springframework.core.task.TaskExecutor target>;

        $z0 = $r1 instanceof org.springframework.beans.factory.DisposableBean;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: org.springframework.core.task.TaskExecutor target>;

        $r3 = (org.springframework.beans.factory.DisposableBean) $r2;

        interfaceinvoke $r3.<org.springframework.beans.factory.DisposableBean: void destroy()>();

     label1:
        return;
    }

    public volatile java.lang.Object getObject() throws java.lang.Exception
    {
        org.springframework.core.task.TaskExecutor $r1;
        org.springframework.scheduling.config.TaskExecutorFactoryBean r0;

        r0 := @this: org.springframework.scheduling.config.TaskExecutorFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.config.TaskExecutorFactoryBean: org.springframework.core.task.TaskExecutor getObject()>();

        return $r1;
    }
}
