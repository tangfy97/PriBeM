public class org.codehaus.groovy.ast.FieldNode extends org.codehaus.groovy.ast.AnnotatedNode implements groovyjarjarasm.asm.Opcodes, org.codehaus.groovy.ast.Variable
{
    private java.lang.String name;
    private int modifiers;
    private org.codehaus.groovy.ast.ClassNode type;
    private org.codehaus.groovy.ast.ClassNode owner;
    private org.codehaus.groovy.ast.expr.Expression initialValueExpression;
    private boolean dynamicTyped;
    private boolean holder;
    private boolean closureShare;

    public static org.codehaus.groovy.ast.FieldNode newStatic(java.lang.Class, java.lang.String) throws java.lang.SecurityException, java.lang.NoSuchFieldException
    {
        org.codehaus.groovy.ast.ClassNode $r4, $r6;
        org.codehaus.groovy.ast.FieldNode $r5;
        java.lang.Class r0, $r3;
        java.lang.String r1;
        java.lang.reflect.Field $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r4 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>($r3);

        $r5 = new org.codehaus.groovy.ast.FieldNode;

        $r6 = staticinvoke <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode make(java.lang.Class)>(r0);

        specialinvoke $r5.<org.codehaus.groovy.ast.FieldNode: void <init>(java.lang.String,int,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.ClassNode,org.codehaus.groovy.ast.expr.Expression)>(r1, 9, $r4, $r6, null);

        return $r5;
    }

    public void <init>(java.lang.String, int, org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.ClassNode r2, $r3, $r4, r5, $r7;
        org.codehaus.groovy.ast.FieldNode r0;
        int i0;
        java.lang.String r1;
        org.codehaus.groovy.ast.expr.Expression r6;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.codehaus.groovy.ast.ClassNode;

        r5 := @parameter3: org.codehaus.groovy.ast.ClassNode;

        r6 := @parameter4: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.ast.AnnotatedNode: void <init>()>();

        r0.<org.codehaus.groovy.ast.FieldNode: boolean closureShare> = 0;

        r0.<org.codehaus.groovy.ast.FieldNode: java.lang.String name> = r1;

        r0.<org.codehaus.groovy.ast.FieldNode: int modifiers> = i0;

        r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode type> = r2;

        $r4 = r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode type>;

        $r3 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        if $r4 != $r3 goto label1;

        if r6 == null goto label1;

        $r7 = virtualinvoke r6.<org.codehaus.groovy.ast.expr.Expression: org.codehaus.groovy.ast.ClassNode getType()>();

        virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: void setType(org.codehaus.groovy.ast.ClassNode)>($r7);

     label1:
        virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: void setType(org.codehaus.groovy.ast.ClassNode)>(r2);

        r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode owner> = r5;

        r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.expr.Expression initialValueExpression> = r6;

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression getInitialExpression()
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.FieldNode r0;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        $r1 = r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.expr.Expression initialValueExpression>;

        return $r1;
    }

    public int getModifiers()
    {
        int $i0;
        org.codehaus.groovy.ast.FieldNode r0;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        $i0 = r0.<org.codehaus.groovy.ast.FieldNode: int modifiers>;

        return $i0;
    }

    public java.lang.String getName()
    {
        java.lang.String $r1;
        org.codehaus.groovy.ast.FieldNode r0;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        $r1 = r0.<org.codehaus.groovy.ast.FieldNode: java.lang.String name>;

        return $r1;
    }

    public org.codehaus.groovy.ast.ClassNode getType()
    {
        org.codehaus.groovy.ast.FieldNode r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        $r1 = r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode type>;

        return $r1;
    }

    public void setType(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.FieldNode r0;
        org.codehaus.groovy.ast.ClassNode r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode type> = r1;

        $z0 = r0.<org.codehaus.groovy.ast.FieldNode: boolean dynamicTyped>;

        $r2 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode DYNAMIC_TYPE>;

        if r1 != $r2 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        $z1 = $z0 | $z2;

        r0.<org.codehaus.groovy.ast.FieldNode: boolean dynamicTyped> = $z1;

        return;
    }

    public org.codehaus.groovy.ast.ClassNode getOwner()
    {
        org.codehaus.groovy.ast.FieldNode r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        $r1 = r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode owner>;

        return $r1;
    }

    public boolean isHolder()
    {
        org.codehaus.groovy.ast.FieldNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        $z0 = r0.<org.codehaus.groovy.ast.FieldNode: boolean holder>;

        return $z0;
    }

    public void setHolder(boolean)
    {
        org.codehaus.groovy.ast.FieldNode r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.FieldNode: boolean holder> = z0;

        return;
    }

    public boolean isDynamicTyped()
    {
        org.codehaus.groovy.ast.FieldNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        $z0 = r0.<org.codehaus.groovy.ast.FieldNode: boolean dynamicTyped>;

        return $z0;
    }

    public void setModifiers(int)
    {
        int i0;
        org.codehaus.groovy.ast.FieldNode r0;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        i0 := @parameter0: int;

        r0.<org.codehaus.groovy.ast.FieldNode: int modifiers> = i0;

        return;
    }

    public boolean isStatic()
    {
        org.codehaus.groovy.ast.FieldNode r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        $i0 = r0.<org.codehaus.groovy.ast.FieldNode: int modifiers>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setOwner(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.FieldNode r0;
        org.codehaus.groovy.ast.ClassNode r1;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode owner> = r1;

        return;
    }

    public boolean hasInitialExpression()
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.FieldNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        $r1 = r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.expr.Expression initialValueExpression>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isInStaticContext()
    {
        org.codehaus.groovy.ast.FieldNode r0;
        boolean $z0;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        $z0 = virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: boolean isStatic()>();

        return $z0;
    }

    public org.codehaus.groovy.ast.expr.Expression getInitialValueExpression()
    {
        org.codehaus.groovy.ast.expr.Expression $r1;
        org.codehaus.groovy.ast.FieldNode r0;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        $r1 = r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.expr.Expression initialValueExpression>;

        return $r1;
    }

    public void setInitialValueExpression(org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.Expression r1;
        org.codehaus.groovy.ast.FieldNode r0;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.expr.Expression initialValueExpression> = r1;

        return;
    }

    public boolean isClosureSharedVariable()
    {
        org.codehaus.groovy.ast.FieldNode r0;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        return 0;
    }

    public void setClosureSharedVariable(boolean)
    {
        org.codehaus.groovy.ast.FieldNode r0;
        boolean z0;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        z0 := @parameter0: boolean;

        r0.<org.codehaus.groovy.ast.FieldNode: boolean closureShare> = z0;

        return;
    }

    public org.codehaus.groovy.ast.ClassNode getOriginType()
    {
        org.codehaus.groovy.ast.FieldNode r0;
        org.codehaus.groovy.ast.ClassNode $r1;

        r0 := @this: org.codehaus.groovy.ast.FieldNode;

        $r1 = virtualinvoke r0.<org.codehaus.groovy.ast.FieldNode: org.codehaus.groovy.ast.ClassNode getType()>();

        return $r1;
    }
}
