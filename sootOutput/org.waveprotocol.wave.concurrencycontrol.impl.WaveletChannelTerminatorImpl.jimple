public class org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator
{
    private org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl status;

    public void <init>()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)
    {
        org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl: void copyFrom(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)>(r1);

        return;
    }

    public void copyFrom(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)
    {
        org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator r1;
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator: org.waveprotocol.wave.concurrencycontrol.ResponseStatus getStatus()>();

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl: void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>($r2);

        return;
    }

    public org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl getStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl $r0, $r2;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl r1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl;

        $r0 = new org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        $r2 = r1.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl status>;

        specialinvoke $r0.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>($r2);

        return $r0;
    }

    public void setStatus(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)
    {
        org.waveprotocol.wave.concurrencycontrol.ResponseStatus r2;
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.ResponseStatus;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl: void <init>(org.waveprotocol.wave.concurrencycontrol.ResponseStatus)>(r2);

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl status> = $r1;

        return;
    }

    protected void reset()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl;

        r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl status> = null;

        return;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl r1;
        boolean $z0, $z1, $z2;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl;

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl: boolean isEqualTo(java.lang.Object)>(r0);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public boolean isEqualTo(java.lang.Object)
    {
        org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator $r2;
        java.lang.Object r0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl r1;
        boolean $z0, $z1;

        r1 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator;

        if $z0 == 0 goto label2;

        $r2 = (org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator) r0;

        $z1 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorUtil: boolean isEqual(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator,org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)>(r1, $r2);

        return $z1;

     label2:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl;

        $i0 = staticinvoke <org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminatorUtil: int getHashCode(org.waveprotocol.wave.concurrencycontrol.WaveletChannelTerminator)>(r0);

        return $i0;
    }

    public volatile org.waveprotocol.wave.concurrencycontrol.ResponseStatus getStatus()
    {
        org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl $r1;
        org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.impl.WaveletChannelTerminatorImpl: org.waveprotocol.wave.concurrencycontrol.impl.ResponseStatusImpl getStatus()>();

        return $r1;
    }
}
