class com.mongodb.OutMessage extends org.bson.BSONEncoder
{
    static java.util.concurrent.atomic.AtomicInteger ID;
    static java.lang.ThreadLocal TL;
    private org.bson.io.PoolOutputBuffer _buffer;
    private int _id;

    static com.mongodb.OutMessage get(int)
    {
        java.lang.ThreadLocal $r0;
        int i0;
        java.lang.Object $r1;
        com.mongodb.OutMessage r2;

        i0 := @parameter0: int;

        $r0 = <com.mongodb.OutMessage: java.lang.ThreadLocal TL>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (com.mongodb.OutMessage) $r1;

        specialinvoke r2.<com.mongodb.OutMessage: void reset(int)>(i0);

        return r2;
    }

    static void newTL()
    {
        com.mongodb.OutMessage $r0;
        java.lang.ThreadLocal $r1;

        $r1 = <com.mongodb.OutMessage: java.lang.ThreadLocal TL>;

        $r0 = new com.mongodb.OutMessage;

        specialinvoke $r0.<com.mongodb.OutMessage: void <init>()>();

        virtualinvoke $r1.<java.lang.ThreadLocal: void set(java.lang.Object)>($r0);

        return;
    }

    static com.mongodb.OutMessage query(int, java.lang.String, int, int, com.mongodb.DBObject, com.mongodb.DBObject)
    {
        com.mongodb.DBObject r2, r3;
        int i0, i1, i2;
        com.mongodb.OutMessage $r0;
        java.lang.String r1;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: com.mongodb.DBObject;

        r3 := @parameter5: com.mongodb.DBObject;

        $r0 = staticinvoke <com.mongodb.OutMessage: com.mongodb.OutMessage get(int)>(2004);

        specialinvoke $r0.<com.mongodb.OutMessage: void _appendQuery(int,java.lang.String,int,int,com.mongodb.DBObject,com.mongodb.DBObject)>(i0, r1, i1, i2, r2, r3);

        return $r0;
    }

    void <init>()
    {
        com.mongodb.OutMessage r0;
        org.bson.io.PoolOutputBuffer $r1, $r2;

        r0 := @this: com.mongodb.OutMessage;

        specialinvoke r0.<org.bson.BSONEncoder: void <init>()>();

        $r1 = new org.bson.io.PoolOutputBuffer;

        specialinvoke $r1.<org.bson.io.PoolOutputBuffer: void <init>()>();

        r0.<com.mongodb.OutMessage: org.bson.io.PoolOutputBuffer _buffer> = $r1;

        $r2 = r0.<com.mongodb.OutMessage: org.bson.io.PoolOutputBuffer _buffer>;

        virtualinvoke r0.<com.mongodb.OutMessage: void set(org.bson.io.OutputBuffer)>($r2);

        return;
    }

    private void _appendQuery(int, java.lang.String, int, int, com.mongodb.DBObject, com.mongodb.DBObject)
    {
        com.mongodb.DBObject r2, r3;
        int i0, i1, i2;
        com.mongodb.OutMessage r0;
        java.lang.String r1;

        r0 := @this: com.mongodb.OutMessage;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r2 := @parameter4: com.mongodb.DBObject;

        r3 := @parameter5: com.mongodb.DBObject;

        virtualinvoke r0.<com.mongodb.OutMessage: void writeInt(int)>(i0);

        virtualinvoke r0.<com.mongodb.OutMessage: void writeCString(java.lang.String)>(r1);

        virtualinvoke r0.<com.mongodb.OutMessage: void writeInt(int)>(i1);

        virtualinvoke r0.<com.mongodb.OutMessage: void writeInt(int)>(i2);

        virtualinvoke r0.<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>(r2);

        if r3 == null goto label1;

        virtualinvoke r0.<com.mongodb.OutMessage: int putObject(org.bson.BSONObject)>(r3);

     label1:
        return;
    }

    private void reset(int)
    {
        org.bson.io.PoolOutputBuffer $r1, $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        int $i0, $i1, i2;
        com.mongodb.OutMessage r0;

        r0 := @this: com.mongodb.OutMessage;

        i2 := @parameter0: int;

        virtualinvoke r0.<com.mongodb.OutMessage: void done()>();

        $r1 = r0.<com.mongodb.OutMessage: org.bson.io.PoolOutputBuffer _buffer>;

        virtualinvoke $r1.<org.bson.io.PoolOutputBuffer: void reset()>();

        $r2 = r0.<com.mongodb.OutMessage: org.bson.io.PoolOutputBuffer _buffer>;

        virtualinvoke r0.<com.mongodb.OutMessage: void set(org.bson.io.OutputBuffer)>($r2);

        $r3 = <com.mongodb.OutMessage: java.util.concurrent.atomic.AtomicInteger ID>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        r0.<com.mongodb.OutMessage: int _id> = $i0;

        virtualinvoke r0.<com.mongodb.OutMessage: void writeInt(int)>(0);

        $i1 = r0.<com.mongodb.OutMessage: int _id>;

        virtualinvoke r0.<com.mongodb.OutMessage: void writeInt(int)>($i1);

        virtualinvoke r0.<com.mongodb.OutMessage: void writeInt(int)>(0);

        virtualinvoke r0.<com.mongodb.OutMessage: void writeInt(int)>(i2);

        return;
    }

    void prepare()
    {
        org.bson.io.PoolOutputBuffer $r1, $r2;
        int $i0;
        com.mongodb.OutMessage r0;

        r0 := @this: com.mongodb.OutMessage;

        $r2 = r0.<com.mongodb.OutMessage: org.bson.io.PoolOutputBuffer _buffer>;

        $r1 = r0.<com.mongodb.OutMessage: org.bson.io.PoolOutputBuffer _buffer>;

        $i0 = virtualinvoke $r1.<org.bson.io.PoolOutputBuffer: int size()>();

        virtualinvoke $r2.<org.bson.io.PoolOutputBuffer: void writeInt(int,int)>(0, $i0);

        return;
    }

    protected boolean handleSpecialObjects(java.lang.String, org.bson.BSONObject)
    {
        com.mongodb.DBPointer r9;
        com.mongodb.DBCollection r8;
        org.bson.BSONObject r0;
        org.bson.types.ObjectId $r4, $r7;
        com.mongodb.OutMessage r2;
        java.lang.Object $r3;
        java.lang.String r1, $r5, $r6;
        boolean $z0, $z1;

        r2 := @this: com.mongodb.OutMessage;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: org.bson.BSONObject;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof com.mongodb.DBCollection;

        if $z0 == 0 goto label2;

        r8 = (com.mongodb.DBCollection) r0;

        $r6 = virtualinvoke r8.<com.mongodb.DBCollection: java.lang.String getName()>();

        $r7 = <com.mongodb.Bytes: org.bson.types.ObjectId COLLECTION_REF_ID>;

        virtualinvoke r2.<com.mongodb.OutMessage: void putDBPointer(java.lang.String,java.lang.String,org.bson.types.ObjectId)>(r1, $r6, $r7);

        return 1;

     label2:
        if r1 == null goto label3;

        $z1 = r0 instanceof com.mongodb.DBPointer;

        if $z1 == 0 goto label3;

        r9 = (com.mongodb.DBPointer) r0;

        $r5 = r9.<com.mongodb.DBPointer: java.lang.String _ns>;

        $r3 = r9.<com.mongodb.DBPointer: java.lang.Object _id>;

        $r4 = (org.bson.types.ObjectId) $r3;

        virtualinvoke r2.<com.mongodb.OutMessage: void putDBPointer(java.lang.String,java.lang.String,org.bson.types.ObjectId)>(r1, $r5, $r4);

        return 1;

     label3:
        return 0;
    }

    protected boolean putSpecial(java.lang.String, java.lang.Object)
    {
        com.mongodb.DBPointer r4;
        com.mongodb.DBRefBase $r3;
        org.bson.types.ObjectId $r6;
        java.lang.Object r0, $r5;
        com.mongodb.OutMessage r1;
        java.lang.String r2, $r7;
        boolean $z0, $z1;

        r1 := @this: com.mongodb.OutMessage;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof com.mongodb.DBPointer;

        if $z0 == 0 goto label1;

        r4 = (com.mongodb.DBPointer) r0;

        $r7 = r4.<com.mongodb.DBPointer: java.lang.String _ns>;

        $r5 = r4.<com.mongodb.DBPointer: java.lang.Object _id>;

        $r6 = (org.bson.types.ObjectId) $r5;

        virtualinvoke r1.<com.mongodb.OutMessage: void putDBPointer(java.lang.String,java.lang.String,org.bson.types.ObjectId)>(r2, $r7, $r6);

        return 1;

     label1:
        $z1 = r0 instanceof com.mongodb.DBRefBase;

        if $z1 == 0 goto label2;

        $r3 = (com.mongodb.DBRefBase) r0;

        virtualinvoke r1.<com.mongodb.OutMessage: void putDBRef(java.lang.String,com.mongodb.DBRefBase)>(r2, $r3);

        return 1;

     label2:
        return 0;
    }

    protected void putDBPointer(java.lang.String, java.lang.String, org.bson.types.ObjectId)
    {
        org.bson.io.OutputBuffer $r4, $r5, $r6;
        int $i0, $i1, $i2;
        org.bson.types.ObjectId r3;
        com.mongodb.OutMessage r0;
        java.lang.String r1, r2;

        r0 := @this: com.mongodb.OutMessage;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.bson.types.ObjectId;

        virtualinvoke r0.<com.mongodb.OutMessage: void _put(byte,java.lang.String)>(12, r1);

        virtualinvoke r0.<com.mongodb.OutMessage: void _putValueString(java.lang.String)>(r2);

        $r4 = r0.<com.mongodb.OutMessage: org.bson.io.OutputBuffer _buf>;

        $i0 = virtualinvoke r3.<org.bson.types.ObjectId: int _time()>();

        virtualinvoke $r4.<org.bson.io.OutputBuffer: void writeInt(int)>($i0);

        $r5 = r0.<com.mongodb.OutMessage: org.bson.io.OutputBuffer _buf>;

        $i1 = virtualinvoke r3.<org.bson.types.ObjectId: int _machine()>();

        virtualinvoke $r5.<org.bson.io.OutputBuffer: void writeInt(int)>($i1);

        $r6 = r0.<com.mongodb.OutMessage: org.bson.io.OutputBuffer _buf>;

        $i2 = virtualinvoke r3.<org.bson.types.ObjectId: int _inc()>();

        virtualinvoke $r6.<org.bson.io.OutputBuffer: void writeInt(int)>($i2);

        return;
    }

    protected void putDBRef(java.lang.String, com.mongodb.DBRefBase)
    {
        com.mongodb.DBRefBase r4;
        org.bson.io.OutputBuffer $r2, $r3, $r7, $r8, $r9;
        int $i0, $i1, $i2;
        com.mongodb.OutMessage r0;
        java.lang.Object $r6;
        java.lang.String r1, $r5;

        r0 := @this: com.mongodb.OutMessage;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: com.mongodb.DBRefBase;

        virtualinvoke r0.<com.mongodb.OutMessage: void _put(byte,java.lang.String)>(3, r1);

        $r2 = r0.<com.mongodb.OutMessage: org.bson.io.OutputBuffer _buf>;

        $i0 = virtualinvoke $r2.<org.bson.io.OutputBuffer: int getPosition()>();

        $r3 = r0.<com.mongodb.OutMessage: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r3.<org.bson.io.OutputBuffer: void writeInt(int)>(0);

        $r5 = virtualinvoke r4.<com.mongodb.DBRefBase: java.lang.String getRef()>();

        virtualinvoke r0.<com.mongodb.OutMessage: void _putObjectField(java.lang.String,java.lang.Object)>("$ref", $r5);

        $r6 = virtualinvoke r4.<com.mongodb.DBRefBase: java.lang.Object getId()>();

        virtualinvoke r0.<com.mongodb.OutMessage: void _putObjectField(java.lang.String,java.lang.Object)>("$id", $r6);

        $r7 = r0.<com.mongodb.OutMessage: org.bson.io.OutputBuffer _buf>;

        virtualinvoke $r7.<org.bson.io.OutputBuffer: void write(int)>(0);

        $r9 = r0.<com.mongodb.OutMessage: org.bson.io.OutputBuffer _buf>;

        $r8 = r0.<com.mongodb.OutMessage: org.bson.io.OutputBuffer _buf>;

        $i1 = virtualinvoke $r8.<org.bson.io.OutputBuffer: int getPosition()>();

        $i2 = $i1 - $i0;

        virtualinvoke $r9.<org.bson.io.OutputBuffer: void writeInt(int,int)>($i0, $i2);

        return;
    }

    void append(java.lang.String, com.mongodb.WriteConcern)
    {
        java.util.concurrent.atomic.AtomicInteger $r1;
        org.bson.io.OutputBuffer $r9;
        int $i0, $i1, $i2, $i3, $i4, $i6;
        com.mongodb.OutMessage r0;
        java.lang.String r3, $r6;
        com.mongodb.BasicDBObject $r8;
        java.lang.StringBuilder $r4, $r5, $r10;
        com.mongodb.WriteConcern r7;

        r0 := @this: com.mongodb.OutMessage;

        r3 := @parameter0: java.lang.String;

        r7 := @parameter1: com.mongodb.WriteConcern;

        $r1 = <com.mongodb.OutMessage: java.util.concurrent.atomic.AtomicInteger ID>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        r0.<com.mongodb.OutMessage: int _id> = $i0;

        $i1 = virtualinvoke r0.<com.mongodb.OutMessage: int size()>();

        virtualinvoke r0.<com.mongodb.OutMessage: void writeInt(int)>(0);

        $i2 = r0.<com.mongodb.OutMessage: int _id>;

        virtualinvoke r0.<com.mongodb.OutMessage: void writeInt(int)>($i2);

        virtualinvoke r0.<com.mongodb.OutMessage: void writeInt(int)>(0);

        virtualinvoke r0.<com.mongodb.OutMessage: void writeInt(int)>(2004);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".$cmd");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = virtualinvoke r7.<com.mongodb.WriteConcern: com.mongodb.BasicDBObject getCommand()>();

        $i6 = (int) -1;

        specialinvoke r0.<com.mongodb.OutMessage: void _appendQuery(int,java.lang.String,int,int,com.mongodb.DBObject,com.mongodb.DBObject)>(0, $r6, 0, $i6, $r8, null);

        $r9 = r0.<com.mongodb.OutMessage: org.bson.io.OutputBuffer _buf>;

        $i3 = virtualinvoke r0.<com.mongodb.OutMessage: int size()>();

        $i4 = $i3 - $i1;

        virtualinvoke $r9.<org.bson.io.OutputBuffer: void writeInt(int,int)>($i1, $i4);

        return;
    }

    void pipe(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        com.mongodb.OutMessage r0;
        org.bson.io.PoolOutputBuffer $r2;

        r0 := @this: com.mongodb.OutMessage;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = r0.<com.mongodb.OutMessage: org.bson.io.PoolOutputBuffer _buffer>;

        virtualinvoke $r2.<org.bson.io.PoolOutputBuffer: int pipe(java.io.OutputStream)>(r1);

        return;
    }

    int size()
    {
        int $i0;
        com.mongodb.OutMessage r0;
        org.bson.io.PoolOutputBuffer $r1;

        r0 := @this: com.mongodb.OutMessage;

        $r1 = r0.<com.mongodb.OutMessage: org.bson.io.PoolOutputBuffer _buffer>;

        $i0 = virtualinvoke $r1.<org.bson.io.PoolOutputBuffer: int size()>();

        return $i0;
    }

    byte[] toByteArray()
    {
        byte[] $r2;
        com.mongodb.OutMessage r0;
        org.bson.io.PoolOutputBuffer $r1;

        r0 := @this: com.mongodb.OutMessage;

        $r1 = r0.<com.mongodb.OutMessage: org.bson.io.PoolOutputBuffer _buffer>;

        $r2 = virtualinvoke $r1.<org.bson.io.PoolOutputBuffer: byte[] toByteArray()>();

        return $r2;
    }

    static void <clinit>()
    {
        com.mongodb.OutMessage$1 $r1;
        java.util.concurrent.atomic.AtomicInteger $r0;

        $r0 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        <com.mongodb.OutMessage: java.util.concurrent.atomic.AtomicInteger ID> = $r0;

        $r1 = new com.mongodb.OutMessage$1;

        specialinvoke $r1.<com.mongodb.OutMessage$1: void <init>()>();

        <com.mongodb.OutMessage: java.lang.ThreadLocal TL> = $r1;

        return;
    }
}
