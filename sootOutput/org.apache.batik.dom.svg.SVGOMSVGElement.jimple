public class org.apache.batik.dom.svg.SVGOMSVGElement extends org.apache.batik.dom.svg.SVGStylableElement implements org.w3c.dom.svg.SVGSVGElement
{
    protected static org.apache.batik.util.DoublyIndexedTable xmlTraitInformation;
    protected static final org.apache.batik.dom.svg.AttributeInitializer attributeInitializer;
    protected org.apache.batik.dom.svg.SVGOMAnimatedLength x;
    protected org.apache.batik.dom.svg.SVGOMAnimatedLength y;
    protected org.apache.batik.dom.svg.SVGOMAnimatedLength width;
    protected org.apache.batik.dom.svg.SVGOMAnimatedLength height;
    protected org.apache.batik.dom.svg.SVGOMAnimatedBoolean externalResourcesRequired;
    protected org.apache.batik.dom.svg.SVGOMAnimatedPreserveAspectRatio preserveAspectRatio;
    protected org.apache.batik.dom.svg.SVGOMAnimatedRect viewBox;

    protected void <init>()
    {
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        specialinvoke r0.<org.apache.batik.dom.svg.SVGStylableElement: void <init>()>();

        return;
    }

    public void <init>(java.lang.String, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.svg.SVGStylableElement: void <init>(java.lang.String,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        specialinvoke r0.<org.apache.batik.dom.svg.SVGOMSVGElement: void initializeLiveAttributes()>();

        return;
    }

    protected void initializeAllLiveAttributes()
    {
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        specialinvoke r0.<org.apache.batik.dom.svg.SVGStylableElement: void initializeAllLiveAttributes()>();

        specialinvoke r0.<org.apache.batik.dom.svg.SVGOMSVGElement: void initializeLiveAttributes()>();

        return;
    }

    private void initializeLiveAttributes()
    {
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        org.apache.batik.dom.svg.SVGOMAnimatedBoolean $r5;
        org.apache.batik.dom.svg.SVGOMAnimatedPreserveAspectRatio $r6;
        org.apache.batik.dom.svg.SVGOMAnimatedLength $r1, $r2, $r3, $r4;
        org.apache.batik.dom.svg.SVGOMAnimatedRect $r7;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGOMAnimatedLength createLiveAnimatedLength(java.lang.String,java.lang.String,java.lang.String,short,boolean)>(null, "x", "0", 2, 0);

        r0.<org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.SVGOMAnimatedLength x> = $r1;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGOMAnimatedLength createLiveAnimatedLength(java.lang.String,java.lang.String,java.lang.String,short,boolean)>(null, "y", "0", 1, 0);

        r0.<org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.SVGOMAnimatedLength y> = $r2;

        $r3 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGOMAnimatedLength createLiveAnimatedLength(java.lang.String,java.lang.String,java.lang.String,short,boolean)>(null, "width", "100%", 2, 1);

        r0.<org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.SVGOMAnimatedLength width> = $r3;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGOMAnimatedLength createLiveAnimatedLength(java.lang.String,java.lang.String,java.lang.String,short,boolean)>(null, "height", "100%", 1, 1);

        r0.<org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.SVGOMAnimatedLength height> = $r4;

        $r5 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGOMAnimatedBoolean createLiveAnimatedBoolean(java.lang.String,java.lang.String,boolean)>(null, "externalResourcesRequired", 0);

        r0.<org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.SVGOMAnimatedBoolean externalResourcesRequired> = $r5;

        $r6 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGOMAnimatedPreserveAspectRatio createLiveAnimatedPreserveAspectRatio()>();

        r0.<org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.SVGOMAnimatedPreserveAspectRatio preserveAspectRatio> = $r6;

        $r7 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGOMAnimatedRect createLiveAnimatedRect(java.lang.String,java.lang.String,java.lang.String)>(null, "viewBox", null);

        r0.<org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.SVGOMAnimatedRect viewBox> = $r7;

        return;
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        return "svg";
    }

    public org.w3c.dom.svg.SVGAnimatedLength getX()
    {
        org.apache.batik.dom.svg.SVGOMAnimatedLength $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.SVGOMAnimatedLength x>;

        return $r1;
    }

    public org.w3c.dom.svg.SVGAnimatedLength getY()
    {
        org.apache.batik.dom.svg.SVGOMAnimatedLength $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.SVGOMAnimatedLength y>;

        return $r1;
    }

    public org.w3c.dom.svg.SVGAnimatedLength getWidth()
    {
        org.apache.batik.dom.svg.SVGOMAnimatedLength $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.SVGOMAnimatedLength width>;

        return $r1;
    }

    public org.w3c.dom.svg.SVGAnimatedLength getHeight()
    {
        org.apache.batik.dom.svg.SVGOMAnimatedLength $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.SVGOMAnimatedLength height>;

        return $r1;
    }

    public java.lang.String getContentScriptType()
    {
        java.lang.String $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "contentScriptType");

        return $r1;
    }

    public void setContentScriptType(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.batik.dom.AbstractElement: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "contentScriptType", r1);

        return;
    }

    public java.lang.String getContentStyleType()
    {
        java.lang.String $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "contentStyleType");

        return $r1;
    }

    public void setContentStyleType(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.batik.dom.AbstractElement: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>(null, "contentStyleType", r1);

        return;
    }

    public org.w3c.dom.svg.SVGRect getViewport()
    {
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGOMRect $r2;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        float $f0, $f1;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $r2 = new org.apache.batik.dom.svg.SVGOMRect;

        $f0 = interfaceinvoke $r1.<org.apache.batik.dom.svg.SVGContext: float getViewportWidth()>();

        $f1 = interfaceinvoke $r1.<org.apache.batik.dom.svg.SVGContext: float getViewportHeight()>();

        specialinvoke $r2.<org.apache.batik.dom.svg.SVGOMRect: void <init>(float,float,float,float)>(0.0F, 0.0F, $f0, $f1);

        return $r2;
    }

    public float getPixelUnitToMillimeterX()
    {
        float $f0;
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $f0 = interfaceinvoke $r1.<org.apache.batik.dom.svg.SVGContext: float getPixelUnitToMillimeter()>();

        return $f0;
    }

    public float getPixelUnitToMillimeterY()
    {
        float $f0;
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $f0 = interfaceinvoke $r1.<org.apache.batik.dom.svg.SVGContext: float getPixelUnitToMillimeter()>();

        return $f0;
    }

    public float getScreenPixelToMillimeterX()
    {
        float $f0;
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $f0 = interfaceinvoke $r1.<org.apache.batik.dom.svg.SVGContext: float getPixelUnitToMillimeter()>();

        return $f0;
    }

    public float getScreenPixelToMillimeterY()
    {
        float $f0;
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $f0 = interfaceinvoke $r1.<org.apache.batik.dom.svg.SVGContext: float getPixelUnitToMillimeter()>();

        return $f0;
    }

    public boolean getUseCurrentView()
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.batik.dom.svg.SVGOMSVGElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("SVGSVGElement.getUseCurrentView is not implemented");

        throw $r0;
    }

    public void setUseCurrentView(boolean) throws org.w3c.dom.DOMException
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.batik.dom.svg.SVGOMSVGElement r1;
        boolean z0;

        r1 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        z0 := @parameter0: boolean;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("SVGSVGElement.setUseCurrentView is not implemented");

        throw $r0;
    }

    public org.w3c.dom.svg.SVGViewSpec getCurrentView()
    {
        java.lang.UnsupportedOperationException $r0;
        org.apache.batik.dom.svg.SVGOMSVGElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("SVGSVGElement.getCurrentView is not implemented");

        throw $r0;
    }

    public float getCurrentScale()
    {
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        float $f0;
        java.awt.geom.AffineTransform $r2;
        double $d0, $d1;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.svg.SVGContext: java.awt.geom.AffineTransform getScreenTransform()>();

        if $r2 == null goto label1;

        $d0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getDeterminant()>();

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f0 = (float) $d1;

        return $f0;

     label1:
        return 1.0F;
    }

    public void setCurrentScale(float) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.svg.SVGContext $r1;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        java.awt.geom.AffineTransform $r2, $r3;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        float f0, $f1, f2;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $r2 = interfaceinvoke $r1.<org.apache.batik.dom.svg.SVGContext: java.awt.geom.AffineTransform getScreenTransform()>();

        f2 = 1.0F;

        if $r2 == null goto label1;

        $d14 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getDeterminant()>();

        $d15 = staticinvoke <java.lang.Math: double sqrt(double)>($d14);

        f2 = (float) $d15;

     label1:
        $f1 = f0 / f2;

        $r3 = new java.awt.geom.AffineTransform;

        $d0 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleX()>();

        $d1 = (double) $f1;

        $d2 = $d0 * $d1;

        $d3 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getShearY()>();

        $d4 = (double) $f1;

        $d5 = $d3 * $d4;

        $d6 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getShearX()>();

        $d7 = (double) $f1;

        $d8 = $d6 * $d7;

        $d9 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getScaleY()>();

        $d10 = (double) $f1;

        $d11 = $d9 * $d10;

        $d12 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getTranslateX()>();

        $d13 = virtualinvoke $r2.<java.awt.geom.AffineTransform: double getTranslateY()>();

        specialinvoke $r3.<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double)>($d2, $d5, $d8, $d11, $d12, $d13);

        interfaceinvoke $r1.<org.apache.batik.dom.svg.SVGContext: void setScreenTransform(java.awt.geom.AffineTransform)>($r3);

        return;
    }

    public org.w3c.dom.svg.SVGPoint getCurrentTranslate()
    {
        org.apache.batik.dom.svg.SVGOMSVGElement$1 $r0;
        org.apache.batik.dom.svg.SVGOMSVGElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r0 = new org.apache.batik.dom.svg.SVGOMSVGElement$1;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMSVGElement$1: void <init>(org.apache.batik.dom.svg.SVGOMSVGElement)>(r1);

        return $r0;
    }

    public int suspendRedraw(int)
    {
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGSVGContext $r2;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        int i0, $i1, $i3, $i5;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        i0 := @parameter0: int;

        $i3 = (int) 60000;

        if i0 <= $i3 goto label1;

        $i5 = (int) 60000;

        i0 = $i5;

        goto label2;

     label1:
        if i0 >= 0 goto label2;

        i0 = 0;

     label2:
        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $r2 = (org.apache.batik.dom.svg.SVGSVGContext) $r1;

        $i1 = interfaceinvoke $r2.<org.apache.batik.dom.svg.SVGSVGContext: int suspendRedraw(int)>(i0);

        return $i1;
    }

    public void unsuspendRedraw(int) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.svg.SVGSVGContext r2;
        java.lang.Object[] $r3;
        java.lang.Integer $r4;
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        org.w3c.dom.DOMException $r5;
        int i0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        r2 = (org.apache.batik.dom.svg.SVGSVGContext) $r1;

        $z0 = interfaceinvoke r2.<org.apache.batik.dom.svg.SVGSVGContext: boolean unsuspendRedraw(int)>(i0);

        if $z0 != 0 goto label1;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = new java.lang.Integer;

        specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0);

        $r3[0] = $r4;

        $r5 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(8, "invalid.suspend.handle", $r3);

        throw $r5;

     label1:
        return;
    }

    public void unsuspendRedrawAll()
    {
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGSVGContext r2;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        r2 = (org.apache.batik.dom.svg.SVGSVGContext) $r1;

        interfaceinvoke r2.<org.apache.batik.dom.svg.SVGSVGContext: void unsuspendRedrawAll()>();

        return;
    }

    public void forceRedraw()
    {
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGSVGContext r2;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        r2 = (org.apache.batik.dom.svg.SVGSVGContext) $r1;

        interfaceinvoke r2.<org.apache.batik.dom.svg.SVGSVGContext: void forceRedraw()>();

        return;
    }

    public void pauseAnimations()
    {
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGSVGContext r2;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        r2 = (org.apache.batik.dom.svg.SVGSVGContext) $r1;

        interfaceinvoke r2.<org.apache.batik.dom.svg.SVGSVGContext: void pauseAnimations()>();

        return;
    }

    public void unpauseAnimations()
    {
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGSVGContext r2;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        r2 = (org.apache.batik.dom.svg.SVGSVGContext) $r1;

        interfaceinvoke r2.<org.apache.batik.dom.svg.SVGSVGContext: void unpauseAnimations()>();

        return;
    }

    public boolean animationsPaused()
    {
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGSVGContext r2;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        r2 = (org.apache.batik.dom.svg.SVGSVGContext) $r1;

        $z0 = interfaceinvoke r2.<org.apache.batik.dom.svg.SVGSVGContext: boolean animationsPaused()>();

        return $z0;
    }

    public float getCurrentTime()
    {
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGSVGContext r2;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        float $f0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        r2 = (org.apache.batik.dom.svg.SVGSVGContext) $r1;

        $f0 = interfaceinvoke r2.<org.apache.batik.dom.svg.SVGSVGContext: float getCurrentTime()>();

        return $f0;
    }

    public void setCurrentTime(float)
    {
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGSVGContext r2;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        float f0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        r2 = (org.apache.batik.dom.svg.SVGSVGContext) $r1;

        interfaceinvoke r2.<org.apache.batik.dom.svg.SVGSVGContext: void setCurrentTime(float)>(f0);

        return;
    }

    public org.w3c.dom.NodeList getIntersectionList(org.w3c.dom.svg.SVGRect, org.w3c.dom.svg.SVGElement)
    {
        org.w3c.dom.svg.SVGElement r4;
        java.util.List $r5;
        org.apache.batik.dom.util.ListNodeList $r6;
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGSVGContext r2;
        org.w3c.dom.svg.SVGRect r3;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r3 := @parameter0: org.w3c.dom.svg.SVGRect;

        r4 := @parameter1: org.w3c.dom.svg.SVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        r2 = (org.apache.batik.dom.svg.SVGSVGContext) $r1;

        $r5 = interfaceinvoke r2.<org.apache.batik.dom.svg.SVGSVGContext: java.util.List getIntersectionList(org.w3c.dom.svg.SVGRect,org.w3c.dom.Element)>(r3, r4);

        $r6 = new org.apache.batik.dom.util.ListNodeList;

        specialinvoke $r6.<org.apache.batik.dom.util.ListNodeList: void <init>(java.util.List)>($r5);

        return $r6;
    }

    public org.w3c.dom.NodeList getEnclosureList(org.w3c.dom.svg.SVGRect, org.w3c.dom.svg.SVGElement)
    {
        org.w3c.dom.svg.SVGElement r4;
        java.util.List $r5;
        org.apache.batik.dom.util.ListNodeList $r6;
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGSVGContext r2;
        org.w3c.dom.svg.SVGRect r3;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r3 := @parameter0: org.w3c.dom.svg.SVGRect;

        r4 := @parameter1: org.w3c.dom.svg.SVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        r2 = (org.apache.batik.dom.svg.SVGSVGContext) $r1;

        $r5 = interfaceinvoke r2.<org.apache.batik.dom.svg.SVGSVGContext: java.util.List getEnclosureList(org.w3c.dom.svg.SVGRect,org.w3c.dom.Element)>(r3, r4);

        $r6 = new org.apache.batik.dom.util.ListNodeList;

        specialinvoke $r6.<org.apache.batik.dom.util.ListNodeList: void <init>(java.util.List)>($r5);

        return $r6;
    }

    public boolean checkIntersection(org.w3c.dom.svg.SVGElement, org.w3c.dom.svg.SVGRect)
    {
        org.w3c.dom.svg.SVGElement r3;
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGSVGContext r2;
        org.w3c.dom.svg.SVGRect r4;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r3 := @parameter0: org.w3c.dom.svg.SVGElement;

        r4 := @parameter1: org.w3c.dom.svg.SVGRect;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        r2 = (org.apache.batik.dom.svg.SVGSVGContext) $r1;

        $z0 = interfaceinvoke r2.<org.apache.batik.dom.svg.SVGSVGContext: boolean checkIntersection(org.w3c.dom.Element,org.w3c.dom.svg.SVGRect)>(r3, r4);

        return $z0;
    }

    public boolean checkEnclosure(org.w3c.dom.svg.SVGElement, org.w3c.dom.svg.SVGRect)
    {
        org.w3c.dom.svg.SVGElement r3;
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGSVGContext r2;
        org.w3c.dom.svg.SVGRect r4;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r3 := @parameter0: org.w3c.dom.svg.SVGElement;

        r4 := @parameter1: org.w3c.dom.svg.SVGRect;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        r2 = (org.apache.batik.dom.svg.SVGSVGContext) $r1;

        $z0 = interfaceinvoke r2.<org.apache.batik.dom.svg.SVGSVGContext: boolean checkEnclosure(org.w3c.dom.Element,org.w3c.dom.svg.SVGRect)>(r3, r4);

        return $z0;
    }

    public void deselectAll()
    {
        org.apache.batik.dom.svg.SVGContext $r1;
        org.apache.batik.dom.svg.SVGSVGContext $r2;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $r2 = (org.apache.batik.dom.svg.SVGSVGContext) $r1;

        interfaceinvoke $r2.<org.apache.batik.dom.svg.SVGSVGContext: void deselectAll()>();

        return;
    }

    public org.w3c.dom.svg.SVGNumber createSVGNumber()
    {
        org.apache.batik.dom.svg.SVGOMSVGElement$2 $r0;
        org.apache.batik.dom.svg.SVGOMSVGElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r0 = new org.apache.batik.dom.svg.SVGOMSVGElement$2;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMSVGElement$2: void <init>(org.apache.batik.dom.svg.SVGOMSVGElement)>(r1);

        return $r0;
    }

    public org.w3c.dom.svg.SVGLength createSVGLength()
    {
        org.apache.batik.dom.svg.SVGOMLength $r0;
        org.apache.batik.dom.svg.SVGOMSVGElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r0 = new org.apache.batik.dom.svg.SVGOMLength;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMLength: void <init>(org.apache.batik.dom.svg.AbstractElement)>(r1);

        return $r0;
    }

    public org.w3c.dom.svg.SVGAngle createSVGAngle()
    {
        org.apache.batik.dom.svg.SVGOMAngle $r0;
        org.apache.batik.dom.svg.SVGOMSVGElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r0 = new org.apache.batik.dom.svg.SVGOMAngle;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMAngle: void <init>()>();

        return $r0;
    }

    public org.w3c.dom.svg.SVGPoint createSVGPoint()
    {
        org.apache.batik.dom.svg.SVGOMPoint $r0;
        org.apache.batik.dom.svg.SVGOMSVGElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r0 = new org.apache.batik.dom.svg.SVGOMPoint;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMPoint: void <init>(float,float)>(0.0F, 0.0F);

        return $r0;
    }

    public org.w3c.dom.svg.SVGMatrix createSVGMatrix()
    {
        org.apache.batik.dom.svg.SVGOMSVGElement$3 $r0;
        org.apache.batik.dom.svg.SVGOMSVGElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r0 = new org.apache.batik.dom.svg.SVGOMSVGElement$3;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMSVGElement$3: void <init>(org.apache.batik.dom.svg.SVGOMSVGElement)>(r1);

        return $r0;
    }

    public org.w3c.dom.svg.SVGRect createSVGRect()
    {
        org.apache.batik.dom.svg.SVGOMRect $r0;
        org.apache.batik.dom.svg.SVGOMSVGElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r0 = new org.apache.batik.dom.svg.SVGOMRect;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMRect: void <init>(float,float,float,float)>(0.0F, 0.0F, 0.0F, 0.0F);

        return $r0;
    }

    public org.w3c.dom.svg.SVGTransform createSVGTransform()
    {
        org.apache.batik.dom.svg.SVGOMTransform $r0;
        org.apache.batik.dom.svg.SVGOMSVGElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r0 = new org.apache.batik.dom.svg.SVGOMTransform;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMTransform: void <init>()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGTransform: void setType(short)>(1);

        return $r0;
    }

    public org.w3c.dom.svg.SVGTransform createSVGTransformFromMatrix(org.w3c.dom.svg.SVGMatrix)
    {
        org.apache.batik.dom.svg.SVGOMTransform $r0;
        org.w3c.dom.svg.SVGMatrix r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r2;

        r2 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r1 := @parameter0: org.w3c.dom.svg.SVGMatrix;

        $r0 = new org.apache.batik.dom.svg.SVGOMTransform;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMTransform: void <init>()>();

        virtualinvoke $r0.<org.apache.batik.dom.svg.AbstractSVGTransform: void setMatrix(org.w3c.dom.svg.SVGMatrix)>(r1);

        return $r0;
    }

    public org.w3c.dom.Element getElementById(java.lang.String)
    {
        org.w3c.dom.Element $r3;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        org.apache.batik.dom.AbstractDocument $r2;
        java.lang.String r1;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        $r3 = virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.Element getChildElementById(org.w3c.dom.Node,java.lang.String)>(r0, r1);

        return $r3;
    }

    public org.w3c.dom.svg.SVGElement getNearestViewportElement()
    {
        org.w3c.dom.svg.SVGElement $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = staticinvoke <org.apache.batik.dom.svg.SVGLocatableSupport: org.w3c.dom.svg.SVGElement getNearestViewportElement(org.w3c.dom.Element)>(r0);

        return $r1;
    }

    public org.w3c.dom.svg.SVGElement getFarthestViewportElement()
    {
        org.w3c.dom.svg.SVGElement $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = staticinvoke <org.apache.batik.dom.svg.SVGLocatableSupport: org.w3c.dom.svg.SVGElement getFarthestViewportElement(org.w3c.dom.Element)>(r0);

        return $r1;
    }

    public org.w3c.dom.svg.SVGRect getBBox()
    {
        org.w3c.dom.svg.SVGRect $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = staticinvoke <org.apache.batik.dom.svg.SVGLocatableSupport: org.w3c.dom.svg.SVGRect getBBox(org.w3c.dom.Element)>(r0);

        return $r1;
    }

    public org.w3c.dom.svg.SVGMatrix getCTM()
    {
        org.w3c.dom.svg.SVGMatrix $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = staticinvoke <org.apache.batik.dom.svg.SVGLocatableSupport: org.w3c.dom.svg.SVGMatrix getCTM(org.w3c.dom.Element)>(r0);

        return $r1;
    }

    public org.w3c.dom.svg.SVGMatrix getScreenCTM()
    {
        org.w3c.dom.svg.SVGMatrix $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = staticinvoke <org.apache.batik.dom.svg.SVGLocatableSupport: org.w3c.dom.svg.SVGMatrix getScreenCTM(org.w3c.dom.Element)>(r0);

        return $r1;
    }

    public org.w3c.dom.svg.SVGMatrix getTransformToElement(org.w3c.dom.svg.SVGElement) throws org.w3c.dom.svg.SVGException
    {
        org.w3c.dom.svg.SVGElement r1;
        org.w3c.dom.svg.SVGMatrix $r2;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r1 := @parameter0: org.w3c.dom.svg.SVGElement;

        $r2 = staticinvoke <org.apache.batik.dom.svg.SVGLocatableSupport: org.w3c.dom.svg.SVGMatrix getTransformToElement(org.w3c.dom.Element,org.w3c.dom.svg.SVGElement)>(r0, r1);

        return $r2;
    }

    public org.w3c.dom.views.DocumentView getDocument()
    {
        org.w3c.dom.views.DocumentView $r2;
        org.w3c.dom.Document $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r2 = (org.w3c.dom.views.DocumentView) $r1;

        return $r2;
    }

    public org.w3c.dom.css.CSSStyleDeclaration getComputedStyle(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.views.DocumentView $r2;
        org.w3c.dom.views.AbstractView $r3;
        org.w3c.dom.css.ViewCSS $r6;
        org.w3c.dom.Element r4;
        org.w3c.dom.Document $r1;
        org.w3c.dom.css.CSSStyleDeclaration $r7;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        java.lang.String r5;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r4 := @parameter0: org.w3c.dom.Element;

        r5 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r2 = (org.w3c.dom.views.DocumentView) $r1;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.views.DocumentView: org.w3c.dom.views.AbstractView getDefaultView()>();

        $r6 = (org.w3c.dom.css.ViewCSS) $r3;

        $r7 = interfaceinvoke $r6.<org.w3c.dom.css.ViewCSS: org.w3c.dom.css.CSSStyleDeclaration getComputedStyle(org.w3c.dom.Element,java.lang.String)>(r4, r5);

        return $r7;
    }

    public org.w3c.dom.events.Event createEvent(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.Document $r1;
        org.w3c.dom.events.DocumentEvent $r3;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        org.w3c.dom.events.Event $r4;
        java.lang.String r2;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r3 = (org.w3c.dom.events.DocumentEvent) $r1;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.events.DocumentEvent: org.w3c.dom.events.Event createEvent(java.lang.String)>(r2);

        return $r4;
    }

    public boolean canDispatch(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException
    {
        org.w3c.dom.Document $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        org.apache.batik.dom.AbstractDocument r2;
        java.lang.String r3, r4;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r3 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        r2 = (org.apache.batik.dom.AbstractDocument) $r1;

        $z0 = virtualinvoke r2.<org.apache.batik.dom.AbstractDocument: boolean canDispatch(java.lang.String,java.lang.String)>(r3, r4);

        return $z0;
    }

    public org.w3c.dom.stylesheets.StyleSheetList getStyleSheets()
    {
        org.w3c.dom.stylesheets.DocumentStyle $r2;
        org.w3c.dom.Document $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        org.w3c.dom.stylesheets.StyleSheetList $r3;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r2 = (org.w3c.dom.stylesheets.DocumentStyle) $r1;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.stylesheets.DocumentStyle: org.w3c.dom.stylesheets.StyleSheetList getStyleSheets()>();

        return $r3;
    }

    public org.w3c.dom.css.CSSStyleDeclaration getOverrideStyle(org.w3c.dom.Element, java.lang.String)
    {
        org.w3c.dom.Element r2;
        org.w3c.dom.Document $r1;
        org.w3c.dom.css.CSSStyleDeclaration $r5;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        org.w3c.dom.css.DocumentCSS $r4;
        java.lang.String r3;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r2 := @parameter0: org.w3c.dom.Element;

        r3 := @parameter1: java.lang.String;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r4 = (org.w3c.dom.css.DocumentCSS) $r1;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.css.DocumentCSS: org.w3c.dom.css.CSSStyleDeclaration getOverrideStyle(org.w3c.dom.Element,java.lang.String)>(r2, r3);

        return $r5;
    }

    public java.lang.String getXMLlang()
    {
        java.lang.String $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = staticinvoke <org.apache.batik.dom.util.XMLSupport: java.lang.String getXMLLang(org.w3c.dom.Element)>(r0);

        return $r1;
    }

    public void setXMLlang(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.batik.dom.AbstractElement: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "xml:lang", r1);

        return;
    }

    public java.lang.String getXMLspace()
    {
        java.lang.String $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = staticinvoke <org.apache.batik.dom.util.XMLSupport: java.lang.String getXMLSpace(org.w3c.dom.Element)>(r0);

        return $r1;
    }

    public void setXMLspace(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<org.apache.batik.dom.AbstractElement: void setAttributeNS(java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/XML/1998/namespace", "xml:space", r1);

        return;
    }

    public short getZoomAndPan()
    {
        short $s0;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $s0 = staticinvoke <org.apache.batik.dom.svg.SVGZoomAndPanSupport: short getZoomAndPan(org.w3c.dom.Element)>(r0);

        return $s0;
    }

    public void setZoomAndPan(short)
    {
        short s0;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        s0 := @parameter0: short;

        staticinvoke <org.apache.batik.dom.svg.SVGZoomAndPanSupport: void setZoomAndPan(org.w3c.dom.Element,short)>(r0, s0);

        return;
    }

    public org.w3c.dom.svg.SVGAnimatedRect getViewBox()
    {
        org.apache.batik.dom.svg.SVGOMAnimatedRect $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.SVGOMAnimatedRect viewBox>;

        return $r1;
    }

    public org.w3c.dom.svg.SVGAnimatedPreserveAspectRatio getPreserveAspectRatio()
    {
        org.apache.batik.dom.svg.SVGOMAnimatedPreserveAspectRatio $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.SVGOMAnimatedPreserveAspectRatio preserveAspectRatio>;

        return $r1;
    }

    public org.w3c.dom.svg.SVGAnimatedBoolean getExternalResourcesRequired()
    {
        org.apache.batik.dom.svg.SVGOMAnimatedBoolean $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = r0.<org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.SVGOMAnimatedBoolean externalResourcesRequired>;

        return $r1;
    }

    public org.w3c.dom.svg.SVGStringList getRequiredFeatures()
    {
        org.w3c.dom.svg.SVGStringList $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = staticinvoke <org.apache.batik.dom.svg.SVGTestsSupport: org.w3c.dom.svg.SVGStringList getRequiredFeatures(org.w3c.dom.Element)>(r0);

        return $r1;
    }

    public org.w3c.dom.svg.SVGStringList getRequiredExtensions()
    {
        org.w3c.dom.svg.SVGStringList $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = staticinvoke <org.apache.batik.dom.svg.SVGTestsSupport: org.w3c.dom.svg.SVGStringList getRequiredExtensions(org.w3c.dom.Element)>(r0);

        return $r1;
    }

    public org.w3c.dom.svg.SVGStringList getSystemLanguage()
    {
        org.w3c.dom.svg.SVGStringList $r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r1 = staticinvoke <org.apache.batik.dom.svg.SVGTestsSupport: org.w3c.dom.svg.SVGStringList getSystemLanguage(org.w3c.dom.Element)>(r0);

        return $r1;
    }

    public boolean hasExtension(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.dom.svg.SVGOMSVGElement r0;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <org.apache.batik.dom.svg.SVGTestsSupport: boolean hasExtension(org.w3c.dom.Element,java.lang.String)>(r0, r1);

        return $z0;
    }

    protected org.apache.batik.dom.svg.AttributeInitializer getAttributeInitializer()
    {
        org.apache.batik.dom.svg.AttributeInitializer $r0;
        org.apache.batik.dom.svg.SVGOMSVGElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r0 = <org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.AttributeInitializer attributeInitializer>;

        return $r0;
    }

    protected org.w3c.dom.Node newNode()
    {
        org.apache.batik.dom.svg.SVGOMSVGElement $r0, r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r0 = new org.apache.batik.dom.svg.SVGOMSVGElement;

        specialinvoke $r0.<org.apache.batik.dom.svg.SVGOMSVGElement: void <init>()>();

        return $r0;
    }

    protected org.apache.batik.util.DoublyIndexedTable getTraitInformationTable()
    {
        org.apache.batik.util.DoublyIndexedTable $r0;
        org.apache.batik.dom.svg.SVGOMSVGElement r1;

        r1 := @this: org.apache.batik.dom.svg.SVGOMSVGElement;

        $r0 = <org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.util.DoublyIndexedTable xmlTraitInformation>;

        return $r0;
    }

    static void <clinit>()
    {
        org.apache.batik.dom.svg.AttributeInitializer $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16;
        org.apache.batik.dom.svg.TraitInformation $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        org.apache.batik.util.DoublyIndexedTable $r0, $r1;

        $r0 = new org.apache.batik.util.DoublyIndexedTable;

        $r1 = <org.apache.batik.dom.svg.SVGStylableElement: org.apache.batik.util.DoublyIndexedTable xmlTraitInformation>;

        specialinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: void <init>(org.apache.batik.util.DoublyIndexedTable)>($r1);

        $r2 = new org.apache.batik.dom.svg.TraitInformation;

        specialinvoke $r2.<org.apache.batik.dom.svg.TraitInformation: void <init>(boolean,int,short)>(1, 3, 1);

        virtualinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "x", $r2);

        $r3 = new org.apache.batik.dom.svg.TraitInformation;

        specialinvoke $r3.<org.apache.batik.dom.svg.TraitInformation: void <init>(boolean,int,short)>(1, 3, 2);

        virtualinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "y", $r3);

        $r4 = new org.apache.batik.dom.svg.TraitInformation;

        specialinvoke $r4.<org.apache.batik.dom.svg.TraitInformation: void <init>(boolean,int,short)>(1, 3, 1);

        virtualinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "width", $r4);

        $r5 = new org.apache.batik.dom.svg.TraitInformation;

        specialinvoke $r5.<org.apache.batik.dom.svg.TraitInformation: void <init>(boolean,int,short)>(1, 3, 2);

        virtualinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "height", $r5);

        $r6 = new org.apache.batik.dom.svg.TraitInformation;

        specialinvoke $r6.<org.apache.batik.dom.svg.TraitInformation: void <init>(boolean,int)>(1, 32);

        virtualinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "preserveAspectRatio", $r6);

        $r7 = new org.apache.batik.dom.svg.TraitInformation;

        specialinvoke $r7.<org.apache.batik.dom.svg.TraitInformation: void <init>(boolean,int)>(1, 50);

        virtualinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "viewBox", $r7);

        $r8 = new org.apache.batik.dom.svg.TraitInformation;

        specialinvoke $r8.<org.apache.batik.dom.svg.TraitInformation: void <init>(boolean,int)>(1, 49);

        virtualinvoke $r0.<org.apache.batik.util.DoublyIndexedTable: java.lang.Object put(java.lang.Object,java.lang.Object,java.lang.Object)>(null, "externalResourcesRequired", $r8);

        <org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.util.DoublyIndexedTable xmlTraitInformation> = $r0;

        $r9 = new org.apache.batik.dom.svg.AttributeInitializer;

        specialinvoke $r9.<org.apache.batik.dom.svg.AttributeInitializer: void <init>(int)>(7);

        <org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.AttributeInitializer attributeInitializer> = $r9;

        $r10 = <org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.AttributeInitializer attributeInitializer>;

        virtualinvoke $r10.<org.apache.batik.dom.svg.AttributeInitializer: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", null, "xmlns", "http://www.w3.org/2000/svg");

        $r11 = <org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.AttributeInitializer attributeInitializer>;

        virtualinvoke $r11.<org.apache.batik.dom.svg.AttributeInitializer: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("http://www.w3.org/2000/xmlns/", "xmlns", "xlink", "http://www.w3.org/1999/xlink");

        $r12 = <org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.AttributeInitializer attributeInitializer>;

        virtualinvoke $r12.<org.apache.batik.dom.svg.AttributeInitializer: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, null, "preserveAspectRatio", "xMidYMid meet");

        $r13 = <org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.AttributeInitializer attributeInitializer>;

        virtualinvoke $r13.<org.apache.batik.dom.svg.AttributeInitializer: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, null, "zoomAndPan", "magnify");

        $r14 = <org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.AttributeInitializer attributeInitializer>;

        virtualinvoke $r14.<org.apache.batik.dom.svg.AttributeInitializer: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, null, "version", "1.0");

        $r15 = <org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.AttributeInitializer attributeInitializer>;

        virtualinvoke $r15.<org.apache.batik.dom.svg.AttributeInitializer: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, null, "contentScriptType", "text/ecmascript");

        $r16 = <org.apache.batik.dom.svg.SVGOMSVGElement: org.apache.batik.dom.svg.AttributeInitializer attributeInitializer>;

        virtualinvoke $r16.<org.apache.batik.dom.svg.AttributeInitializer: void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(null, null, "contentStyleType", "text/css");

        return;
    }
}
