public class org.codehaus.groovy.ast.expr.MethodPointerExpression extends org.codehaus.groovy.ast.expr.Expression
{
    private org.codehaus.groovy.ast.expr.Expression expression;
    private org.codehaus.groovy.ast.expr.Expression methodName;
    static java.lang.Class class$groovy$lang$Closure;

    public void <init>(org.codehaus.groovy.ast.expr.Expression, org.codehaus.groovy.ast.expr.Expression)
    {
        org.codehaus.groovy.ast.expr.MethodPointerExpression r0;
        org.codehaus.groovy.ast.expr.Expression r1, r2;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodPointerExpression;

        r1 := @parameter0: org.codehaus.groovy.ast.expr.Expression;

        r2 := @parameter1: org.codehaus.groovy.ast.expr.Expression;

        specialinvoke r0.<org.codehaus.groovy.ast.expr.Expression: void <init>()>();

        r0.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression expression> = r1;

        r0.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression methodName> = r2;

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression getExpression()
    {
        org.codehaus.groovy.ast.expr.VariableExpression $r3;
        org.codehaus.groovy.ast.expr.MethodPointerExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1, $r2;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodPointerExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression expression>;

        if $r1 != null goto label1;

        $r3 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        return $r3;

     label1:
        $r2 = r0.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression expression>;

        return $r2;
    }

    public org.codehaus.groovy.ast.expr.Expression getMethodName()
    {
        org.codehaus.groovy.ast.expr.MethodPointerExpression r0;
        org.codehaus.groovy.ast.expr.Expression $r1;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodPointerExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression methodName>;

        return $r1;
    }

    public void visit(org.codehaus.groovy.ast.GroovyCodeVisitor)
    {
        org.codehaus.groovy.ast.expr.MethodPointerExpression r1;
        org.codehaus.groovy.ast.GroovyCodeVisitor r0;

        r1 := @this: org.codehaus.groovy.ast.expr.MethodPointerExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.GroovyCodeVisitor;

        interfaceinvoke r0.<org.codehaus.groovy.ast.GroovyCodeVisitor: void visitMethodPointerExpression(org.codehaus.groovy.ast.expr.MethodPointerExpression)>(r1);

        return;
    }

    public org.codehaus.groovy.ast.expr.Expression transformExpression(org.codehaus.groovy.ast.expr.ExpressionTransformer)
    {
        org.codehaus.groovy.ast.expr.VariableExpression $r9;
        org.codehaus.groovy.ast.expr.ExpressionTransformer r0;
        org.codehaus.groovy.ast.expr.MethodPointerExpression r1, $r5, $r8, r10;
        org.codehaus.groovy.ast.expr.Expression $r2, $r3, $r4, $r6, $r7;

        r1 := @this: org.codehaus.groovy.ast.expr.MethodPointerExpression;

        r0 := @parameter0: org.codehaus.groovy.ast.expr.ExpressionTransformer;

        $r2 = r1.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression methodName>;

        $r3 = interfaceinvoke r0.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r2);

        $r4 = r1.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression expression>;

        if $r4 != null goto label1;

        $r8 = new org.codehaus.groovy.ast.expr.MethodPointerExpression;

        $r9 = <org.codehaus.groovy.ast.expr.VariableExpression: org.codehaus.groovy.ast.expr.VariableExpression THIS_EXPRESSION>;

        specialinvoke $r8.<org.codehaus.groovy.ast.expr.MethodPointerExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r9, $r3);

        r10 = $r8;

        goto label2;

     label1:
        $r5 = new org.codehaus.groovy.ast.expr.MethodPointerExpression;

        $r6 = r1.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression expression>;

        $r7 = interfaceinvoke r0.<org.codehaus.groovy.ast.expr.ExpressionTransformer: org.codehaus.groovy.ast.expr.Expression transform(org.codehaus.groovy.ast.expr.Expression)>($r6);

        specialinvoke $r5.<org.codehaus.groovy.ast.expr.MethodPointerExpression: void <init>(org.codehaus.groovy.ast.expr.Expression,org.codehaus.groovy.ast.expr.Expression)>($r7, $r3);

        r10 = $r5;

     label2:
        virtualinvoke r10.<org.codehaus.groovy.ast.expr.Expression: void setSourcePosition(org.codehaus.groovy.ast.ASTNode)>(r1);

        return r10;
    }

    public java.lang.String getText()
    {
        java.lang.StringBuffer $r2, $r5, $r6, $r9, $r11, $r12, $r14;
        org.codehaus.groovy.ast.expr.Expression $r1, $r3, $r7, $r13;
        java.lang.String $r4, $r8, $r10, $r15;
        org.codehaus.groovy.ast.expr.MethodPointerExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodPointerExpression;

        $r1 = r0.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression expression>;

        if $r1 != null goto label1;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&");

        $r13 = r0.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression methodName>;

        $r14 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r15;

     label1:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = r0.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression expression>;

        $r4 = virtualinvoke $r3.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".&");

        $r7 = r0.<org.codehaus.groovy.ast.expr.MethodPointerExpression: org.codehaus.groovy.ast.expr.Expression methodName>;

        $r8 = virtualinvoke $r7.<org.codehaus.groovy.ast.expr.Expression: java.lang.String getText()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r10;
    }

    public org.codehaus.groovy.ast.ClassNode getType()
    {
        org.codehaus.groovy.ast.expr.MethodPointerExpression r1;
        org.codehaus.groovy.ast.ClassNode $r0;

        r1 := @this: org.codehaus.groovy.ast.expr.MethodPointerExpression;

        $r0 = <org.codehaus.groovy.ast.ClassHelper: org.codehaus.groovy.ast.ClassNode CLOSURE_TYPE>;

        return $r0;
    }

    public boolean isDynamic()
    {
        org.codehaus.groovy.ast.expr.MethodPointerExpression r0;

        r0 := @this: org.codehaus.groovy.ast.expr.MethodPointerExpression;

        return 0;
    }

    public java.lang.Class getTypeClass()
    {
        org.codehaus.groovy.ast.expr.MethodPointerExpression r1;
        java.lang.Class $r0, $r2;

        r1 := @this: org.codehaus.groovy.ast.expr.MethodPointerExpression;

        $r0 = <org.codehaus.groovy.ast.expr.MethodPointerExpression: java.lang.Class class$groovy$lang$Closure>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <org.codehaus.groovy.ast.expr.MethodPointerExpression: java.lang.Class class$(java.lang.String)>("groovy.lang.Closure");

        <org.codehaus.groovy.ast.expr.MethodPointerExpression: java.lang.Class class$groovy$lang$Closure> = $r2;

        goto label2;

     label1:
        $r2 = <org.codehaus.groovy.ast.expr.MethodPointerExpression: java.lang.Class class$groovy$lang$Closure>;

     label2:
        return $r2;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
