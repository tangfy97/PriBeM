abstract class org.apache.http.client.entity.DecompressingEntity extends org.apache.http.entity.HttpEntityWrapper
{
    private static final int BUFFER_SIZE;
    private java.io.InputStream content;

    public void <init>(org.apache.http.HttpEntity)
    {
        org.apache.http.HttpEntity r1;
        org.apache.http.client.entity.DecompressingEntity r0;

        r0 := @this: org.apache.http.client.entity.DecompressingEntity;

        r1 := @parameter0: org.apache.http.HttpEntity;

        specialinvoke r0.<org.apache.http.entity.HttpEntityWrapper: void <init>(org.apache.http.HttpEntity)>(r1);

        return;
    }

    abstract java.io.InputStream decorate(java.io.InputStream) throws java.io.IOException;

    private java.io.InputStream getDecompressingStream() throws java.io.IOException
    {
        org.apache.http.client.entity.DecompressingEntity r0;
        org.apache.http.HttpEntity $r1;
        java.io.IOException $r4;
        java.io.InputStream $r2, $r3;

        r0 := @this: org.apache.http.client.entity.DecompressingEntity;

        $r1 = r0.<org.apache.http.client.entity.DecompressingEntity: org.apache.http.HttpEntity wrappedEntity>;

        $r2 = interfaceinvoke $r1.<org.apache.http.HttpEntity: java.io.InputStream getContent()>();

     label1:
        $r3 = virtualinvoke r0.<org.apache.http.client.entity.DecompressingEntity: java.io.InputStream decorate(java.io.InputStream)>($r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        virtualinvoke $r2.<java.io.InputStream: void close()>();

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.io.InputStream getContent() throws java.io.IOException
    {
        org.apache.http.client.entity.DecompressingEntity r0;
        org.apache.http.HttpEntity $r1;
        boolean $z0;
        java.io.InputStream $r2, $r3, $r4, $r5;

        r0 := @this: org.apache.http.client.entity.DecompressingEntity;

        $r1 = r0.<org.apache.http.client.entity.DecompressingEntity: org.apache.http.HttpEntity wrappedEntity>;

        $z0 = interfaceinvoke $r1.<org.apache.http.HttpEntity: boolean isStreaming()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<org.apache.http.client.entity.DecompressingEntity: java.io.InputStream content>;

        if $r3 != null goto label1;

        $r5 = specialinvoke r0.<org.apache.http.client.entity.DecompressingEntity: java.io.InputStream getDecompressingStream()>();

        r0.<org.apache.http.client.entity.DecompressingEntity: java.io.InputStream content> = $r5;

     label1:
        $r4 = r0.<org.apache.http.client.entity.DecompressingEntity: java.io.InputStream content>;

        return $r4;

     label2:
        $r2 = specialinvoke r0.<org.apache.http.client.entity.DecompressingEntity: java.io.InputStream getDecompressingStream()>();

        return $r2;
    }

    public void writeTo(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        java.lang.Throwable $r5;
        byte[] r3;
        java.lang.IllegalArgumentException $r6;
        org.apache.http.client.entity.DecompressingEntity r1;
        int $i0, $i2;
        java.io.InputStream $r2;

        r1 := @this: org.apache.http.client.entity.DecompressingEntity;

        r0 := @parameter0: java.io.OutputStream;

        if r0 != null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output stream may not be null");

        throw $r6;

     label1:
        $r2 = virtualinvoke r1.<org.apache.http.client.entity.DecompressingEntity: java.io.InputStream getContent()>();

     label2:
        r3 = newarray (byte)[2048];

     label3:
        $i0 = virtualinvoke $r2.<java.io.InputStream: int read(byte[])>(r3);

        $i2 = (int) -1;

        if $i0 == $i2 goto label4;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[],int,int)>(r3, 0, $i0);

        goto label3;

     label4:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

        goto label7;

     label5:
        $r5 := @caughtexception;

     label6:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

        throw $r5;

     label7:
        return;

        catch java.lang.Throwable from label2 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static void <clinit>()
    {
        <org.apache.http.client.entity.DecompressingEntity: int BUFFER_SIZE> = 2048;

        return;
    }
}
