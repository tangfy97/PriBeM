class org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState extends java.lang.Object
{
    private org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper;
    private org.waveprotocol.wave.client.editor.content.ContentTextNode lastWrapper;
    private org.waveprotocol.wave.client.editor.RestrictedRange contentRange;
    private org.waveprotocol.wave.client.editor.RestrictedRange htmlRange;
    private int minpre;
    private com.google.gwt.dom.client.Text lastTextNode;
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0;

    private void <init>(org.waveprotocol.wave.client.editor.extract.TypingExtractor)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r1;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper> = null;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode lastWrapper> = null;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange> = null;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange> = null;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: int minpre> = 0;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: com.google.gwt.dom.client.Text lastTextNode> = null;

        return;
    }

    private void clear()
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange> = null;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper> = null;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode lastWrapper> = null;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange> = null;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: int minpre> = 0;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: com.google.gwt.dom.client.Text lastTextNode> = null;

        return;
    }

    private boolean isClear()
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.client.editor.RestrictedRange $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private boolean isPartOfThisState(org.waveprotocol.wave.model.document.util.Point)
    {
        com.google.gwt.dom.client.Text $r3, $r16;
        org.waveprotocol.wave.client.editor.RestrictedRange $r4, $r10;
        org.waveprotocol.wave.model.document.util.Point r2;
        boolean $z0, $z1, $z2, $z3;
        com.google.gwt.core.client.JavaScriptObject $r15;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        java.lang.Object $r5, $r6, $r7, $r8, $r11, $r12, $r13;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r1;
        com.google.gwt.dom.client.Node $r9, $r14, $r17;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: void access$000(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r1);

        $z0 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: boolean isInTextNode()>();

        if $z0 == 0 goto label1;

        $r13 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r14 = (com.google.gwt.dom.client.Node) $r13;

        $r15 = virtualinvoke $r14.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r16 = (com.google.gwt.dom.client.Text) $r15;

        goto label2;

     label1:
        $r16 = null;

     label2:
        if $r16 != null goto label5;

        $r4 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r5 = virtualinvoke $r4.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeAfter()>();

        $r6 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r5 != $r6 goto label3;

        $r10 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getContainer()>();

        $r12 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        if $r11 != $r12 goto label3;

        return 1;

     label3:
        $r7 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        if $r7 != null goto label4;

        return 0;

     label4:
        $r8 = virtualinvoke r2.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getNodeAfter()>();

        $r9 = (com.google.gwt.dom.client.Node) $r8;

        $z2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean partOfMutatingRange(com.google.gwt.dom.client.Node)>($r9);

        return $z2;

     label5:
        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: com.google.gwt.dom.client.Text lastTextNode>;

        if $r16 == $r3 goto label6;

        $r17 = (com.google.gwt.dom.client.Node) $r16;

        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean partOfMutatingRange(com.google.gwt.dom.client.Node)>($r17);

        if $z1 == 0 goto label7;

     label6:
        $z3 = 1;

        goto label8;

     label7:
        $z3 = 0;

     label8:
        return $z3;
    }

    private boolean partOfMutatingRange(com.google.gwt.dom.client.Node)
    {
        org.waveprotocol.wave.client.editor.RestrictedRange $r2;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r1;
        com.google.gwt.dom.client.Node r4;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r3;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r4 := @parameter0: com.google.gwt.dom.client.Node;

        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.impl.HtmlView access$100(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r1);

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.RestrictedRange: boolean contains(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>($r3, r4);

        return $z0;
    }

    private void startTypingSequence(org.waveprotocol.wave.model.document.util.Point$El)
    {
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.document.util.Point$El r3;
        com.google.gwt.dom.client.Element $r23, $r29, $r35;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r1;
        java.lang.AssertionError $r12, $r18;
        org.waveprotocol.wave.client.editor.RestrictedRange $r4, $r5, $r7, $r9, $r13, $r16, $r19, $r25, $r31, $r37;
        org.waveprotocol.wave.client.editor.content.ContentElement $r24, $r30, $r36;
        com.google.gwt.core.client.JavaScriptObject $r22, $r28, $r34;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r2;
        java.lang.Object $r6, $r8, $r10, $r14, $r17, $r20, $r26, $r32;
        com.google.gwt.dom.client.Node $r11, $r15, $r21, $r27, $r33;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r3 := @parameter0: org.waveprotocol.wave.model.document.util.Point$El;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.impl.HtmlView access$100(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r1);

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.client.editor.RestrictedRange collapsedAt(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$El)>($r2, r3);

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange> = $r4;

        $z0 = <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r16 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r17 = virtualinvoke $r16.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getContainer()>();

        if $r17 != null goto label1;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label1:
        $z1 = <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        $r5 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeBefore()>();

        if $r6 == null goto label2;

        $r13 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeBefore()>();

        $r15 = (com.google.gwt.dom.client.Node) $r14;

        $z3 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r15);

        if $z3 != 0 goto label3;

     label2:
        $r7 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r8 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeAfter()>();

        if $r8 == null goto label4;

        $r9 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeAfter()>();

        $r11 = (com.google.gwt.dom.client.Node) $r10;

        $z2 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>($r11);

        if $z2 == 0 goto label4;

     label3:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label4:
        $r19 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r20 = virtualinvoke $r19.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getContainer()>();

        $r21 = (com.google.gwt.dom.client.Node) $r20;

        $r22 = virtualinvoke $r21.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r23 = (com.google.gwt.dom.client.Element) $r22;

        $r24 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement getBackReference(com.google.gwt.dom.client.Element)>($r23);

        $r25 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r26 = virtualinvoke $r25.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeBefore()>();

        $r27 = (com.google.gwt.dom.client.Node) $r26;

        $r28 = virtualinvoke $r27.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r29 = (com.google.gwt.dom.client.Element) $r28;

        $r30 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement getBackReference(com.google.gwt.dom.client.Element)>($r29);

        $r31 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r32 = virtualinvoke $r31.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeAfter()>();

        $r33 = (com.google.gwt.dom.client.Node) $r32;

        $r34 = virtualinvoke $r33.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r35 = (com.google.gwt.dom.client.Element) $r34;

        $r36 = staticinvoke <org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement getBackReference(com.google.gwt.dom.client.Element)>($r35);

        $r37 = staticinvoke <org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.client.editor.RestrictedRange boundedBy(java.lang.Object,java.lang.Object,java.lang.Object)>($r24, $r30, $r36);

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange> = $r37;

        return;
    }

    private void startTypingSequence(org.waveprotocol.wave.model.document.util.Point$Tx) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted
    {
        com.google.gwt.dom.client.Text $r16, $r29, r60, r63;
        org.waveprotocol.wave.client.editor.content.ContentView $r6;
        com.google.gwt.dom.client.Element $r35;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r5, $r7, $r9;
        org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted $r38;
        java.lang.AssertionError $r32, $r37;
        org.waveprotocol.wave.client.editor.RestrictedRange $r14, $r19, $r23, $r30, $r43, $r44, $r46, $r49, $r51, $r54, $r59;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r8, $r33;
        com.google.gwt.dom.client.Node $r2, r21, $r26, $r34, $r57, $r61, r62, $r64, r65, $r66;
        org.waveprotocol.wave.client.editor.content.ContentNode $r36, $r48, $r53, $r56;
        org.waveprotocol.wave.model.document.util.Point$Tx r0;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.document.util.Point$El $r22, $r39, $r42, $r58;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r11, $r12, $r13, $r15, $r27, $r28;
        int $i0, $i1, $i2;
        com.google.gwt.core.client.JavaScriptObject $r3, $r41;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r4;
        java.lang.Object $r1, $r17, $r18, $r20, $r24, $r25, $r31, $r40, $r45, $r47, $r50, $r52, $r55;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r10;

        r4 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point$Tx;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point$Tx: java.lang.Object getContainer()>();

        $r2 = (com.google.gwt.dom.client.Node) $r1;

        $r3 = virtualinvoke $r2.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r60 = (com.google.gwt.dom.client.Text) $r3;

        $r5 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.content.ContentView access$200(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r5);

        $r7 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r8 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.impl.HtmlView access$100(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r7);

     label01:
        $r9 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r10 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.impl.NodeManager access$300(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r9);

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentTextNode findTextWrapper(com.google.gwt.dom.client.Text,boolean)>(r60, 1);

        r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper> = $r11;

        r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode lastWrapper> = $r11;

        specialinvoke r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void checkNeighbouringTextNodes(org.waveprotocol.wave.model.document.util.Point)>(r0);

        $r13 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        $r12 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode lastWrapper>;

        $r14 = staticinvoke <org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.client.editor.RestrictedRange around(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,java.lang.Object)>($r6, $r13, $r12);

        r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange> = $r14;

        $z0 = <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        $r33 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.ContentTextNode: org.waveprotocol.wave.client.editor.impl.HtmlView getFilteredHtmlView()>();

        if $r33 == $r8 goto label02;

        $r37 = new java.lang.AssertionError;

        specialinvoke $r37.<java.lang.AssertionError: void <init>()>();

        throw $r37;

     label02:
        $r15 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        $r16 = virtualinvoke $r15.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        $r17 = interfaceinvoke $r8.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getPreviousSibling(java.lang.Object)>($r16);

        $r34 = (com.google.gwt.dom.client.Node) $r17;

        $r18 = interfaceinvoke $r8.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getParentElement(java.lang.Object)>(r60);

        $r35 = (com.google.gwt.dom.client.Element) $r18;

        $r19 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange>;

        $r20 = virtualinvoke $r19.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeAfter()>();

        $r36 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r20;

        if $r36 != null goto label03;

        $r61 = null;

        goto label04;

     label03:
        $r61 = virtualinvoke $r36.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

     label04:
        r21 = $r61;

        $r22 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r35, $r61);

        $r23 = staticinvoke <org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.client.editor.RestrictedRange between(java.lang.Object,org.waveprotocol.wave.model.document.util.Point$El)>($r34, $r22);

        r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange> = $r23;

        $r24 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point$Tx: java.lang.Object getContainer()>();

        $r25 = interfaceinvoke $r8.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object asText(java.lang.Object)>($r24);

        $r26 = (com.google.gwt.dom.client.Node) $r25;

        $z1 = specialinvoke r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean partOfMutatingRange(com.google.gwt.dom.client.Node)>($r26);

        if $z1 == 0 goto label06;

        $z2 = <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean $assertionsDisabled>;

        if $z2 != 0 goto label05;

        $r28 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        $r29 = virtualinvoke $r28.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        $r30 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r31 = virtualinvoke $r30.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getStartNode(org.waveprotocol.wave.model.document.ReadableDocument)>($r8);

        if $r29 == $r31 goto label05;

        $r32 = new java.lang.AssertionError;

        specialinvoke $r32.<java.lang.AssertionError: void <init>()>();

        throw $r32;

     label05:
        $i0 = virtualinvoke r0.<org.waveprotocol.wave.model.document.util.Point$Tx: int getTextOffset()>();

        $r27 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        $i1 = virtualinvoke $r27.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getOffset(com.google.gwt.dom.client.Text,com.google.gwt.dom.client.Node)>(r60, r21);

        $i2 = $i0 + $i1;

        r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: int minpre> = $i2;

     label06:
        goto label13;

     label07:
        $r38 := @caughtexception;

        $r39 = virtualinvoke $r38.<org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted: org.waveprotocol.wave.model.document.util.Point$El getHtmlPoint()>();

        $r40 = virtualinvoke $r39.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getNodeAfter()>();

        r62 = (com.google.gwt.dom.client.Node) $r40;

        $z3 = staticinvoke <org.waveprotocol.wave.client.common.util.DomHelper: boolean isTextNode(com.google.gwt.dom.client.Node)>(r62);

        if $z3 != 0 goto label08;

        throw $r38;

     label08:
        $r41 = virtualinvoke r62.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r63 = (com.google.gwt.dom.client.Text) $r41;

        $r42 = virtualinvoke $r38.<org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted: org.waveprotocol.wave.model.document.util.Point$El getContentPoint()>();

        $r43 = staticinvoke <org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.client.editor.RestrictedRange collapsedAt(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.Point$El)>($r6, $r42);

        r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange> = $r43;

        $r44 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange>;

        $r45 = virtualinvoke $r44.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeBefore()>();

        if $r45 != null goto label09;

        $r64 = null;

        goto label10;

     label09:
        $r46 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange>;

        $r47 = virtualinvoke $r46.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeBefore()>();

        $r48 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r47;

        $r64 = virtualinvoke $r48.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

     label10:
        r65 = $r64;

        $r49 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange>;

        $r50 = virtualinvoke $r49.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeAfter()>();

        if $r50 != null goto label11;

        $r66 = null;

        goto label12;

     label11:
        $r51 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange>;

        $r52 = virtualinvoke $r51.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeAfter()>();

        $r53 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r52;

        $r66 = virtualinvoke $r53.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

     label12:
        $r54 = r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange>;

        $r55 = virtualinvoke $r54.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getContainer()>();

        $r56 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r55;

        $r57 = virtualinvoke $r56.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        $r58 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r57, $r66);

        $r59 = staticinvoke <org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.client.editor.RestrictedRange between(java.lang.Object,org.waveprotocol.wave.model.document.util.Point$El)>(r65, $r58);

        r4.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange> = $r59;

     label13:
        return;

        catch org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted from label01 to label06 with label07;
    }

    private void continueTypingSequence(org.waveprotocol.wave.model.document.util.Point) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted
    {
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r1;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.model.document.util.Point r2;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        if $r1 == null goto label1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void updateMinPre(org.waveprotocol.wave.model.document.util.Point)>(r2);

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void checkNeighbouringTextNodes(org.waveprotocol.wave.model.document.util.Point)>(r2);

     label1:
        return;
    }

    private void checkNeighbouringTextNodes(org.waveprotocol.wave.model.document.util.Point) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted
    {
        org.waveprotocol.wave.client.editor.content.ContentNode $r18, r27;
        com.google.gwt.dom.client.Text r11, $r17;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.client.editor.content.ContentView $r6;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r12, $r15, $r16, $r19, $r21, $r22, $r24;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r1, $r2, $r3, $r5, $r26, $r29;
        java.lang.Throwable $r25;
        java.lang.AssertionError $r23;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Point r7;
        com.google.gwt.core.client.JavaScriptObject $r10;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r4;
        java.lang.Object $r8, $r13, $r14, $r20;
        com.google.gwt.dom.client.Node $r9, $r28;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r7 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $z0 = <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean $assertionsDisabled>;

        if $z0 != 0 goto label02;

        $r22 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        if $r22 == null goto label01;

        $r24 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode lastWrapper>;

        if $r24 != null goto label02;

     label01:
        $r23 = new java.lang.AssertionError;

        specialinvoke $r23.<java.lang.AssertionError: void <init>()>();

        throw $r23;

     label02:
        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $z1 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: boolean access$400(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r1);

        if $z1 == 0 goto label03;

        return;

     label03:
        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: boolean access$402(org.waveprotocol.wave.client.editor.extract.TypingExtractor,boolean)>($r2, 1);

        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.impl.HtmlView access$100(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r3);

        $r5 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.content.ContentView access$200(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r5);

        $r8 = virtualinvoke r7.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r9 = (com.google.gwt.dom.client.Node) $r8;

        $r10 = virtualinvoke $r9.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r11 = (com.google.gwt.dom.client.Text) $r10;

        $i0 = virtualinvoke r7.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        if $i0 != 0 goto label05;

        $r16 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        $r17 = virtualinvoke $r16.<org.waveprotocol.wave.client.editor.content.ContentTextNode: com.google.gwt.dom.client.Text getImplNodelet()>();

        if $r17 != r11 goto label05;

        $r19 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        $r20 = interfaceinvoke $r6.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getPreviousSibling(java.lang.Object)>($r19);

        r27 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r20;

        if r27 == null goto label04;

        $z3 = virtualinvoke r27.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isTextNode()>();

        if $z3 == 0 goto label04;

        $r21 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) r27;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper> = $r21;

     label04:
        goto label08;

     label05:
        $r12 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode lastWrapper>;

        $r13 = interfaceinvoke $r6.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getNextSibling(java.lang.Object)>($r12);

        $r18 = (org.waveprotocol.wave.client.editor.content.ContentNode) $r13;

        if $r18 == null goto label06;

        $r28 = virtualinvoke $r18.<org.waveprotocol.wave.client.editor.content.ContentNode: com.google.gwt.dom.client.Node getImplNodelet()>();

        goto label07;

     label06:
        $r28 = null;

     label07:
        $i1 = virtualinvoke r11.<com.google.gwt.dom.client.Text: int getLength()>();

        if $i0 != $i1 goto label08;

        $r14 = interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.impl.HtmlView: java.lang.Object getNextSibling(java.lang.Object)>(r11);

        if $r14 != $r28 goto label08;

        if $r18 == null goto label08;

        $z2 = virtualinvoke $r18.<org.waveprotocol.wave.client.editor.content.ContentNode: boolean isTextNode()>();

        if $z2 == 0 goto label08;

        $r15 = (org.waveprotocol.wave.client.editor.content.ContentTextNode) $r18;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode lastWrapper> = $r15;

     label08:
        $r29 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: boolean access$402(org.waveprotocol.wave.client.editor.extract.TypingExtractor,boolean)>($r29, 0);

        goto label11;

     label09:
        $r25 := @caughtexception;

     label10:
        $r26 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: boolean access$402(org.waveprotocol.wave.client.editor.extract.TypingExtractor,boolean)>($r26, 0);

        throw $r25;

     label11:
        return;

        catch java.lang.Throwable from label03 to label08 with label09;
        catch java.lang.Throwable from label09 to label10 with label09;
    }

    private java.lang.String calculateNewValue()
    {
        com.google.gwt.core.client.JavaScriptObject $r6;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.model.document.util.Point$El $r9;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r2;
        com.google.gwt.dom.client.Text r7;
        org.waveprotocol.wave.client.editor.RestrictedRange $r3, $r8;
        java.lang.Object $r4, $r10;
        java.lang.String $r12;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r1;
        com.google.gwt.dom.client.Node $r5, r11;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.impl.HtmlView access$100(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r1);

        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getStartNode(org.waveprotocol.wave.model.document.ReadableDocument)>($r2);

        $r5 = (com.google.gwt.dom.client.Node) $r4;

        $r6 = virtualinvoke $r5.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r7 = (com.google.gwt.dom.client.Text) $r6;

        $r8 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.model.document.util.Point$El getPointAfter()>();

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.util.Point$El: java.lang.Object getNodeAfter()>();

        r11 = (com.google.gwt.dom.client.Node) $r10;

        $r12 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String sumTextNodes(com.google.gwt.dom.client.Text,com.google.gwt.dom.client.Node,org.waveprotocol.wave.client.editor.impl.HtmlView)>(r7, r11, $r2);

        return $r12;
    }

    private void setLastTextNode(com.google.gwt.dom.client.Text)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        com.google.gwt.dom.client.Text r1;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r1 := @parameter0: com.google.gwt.dom.client.Text;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: com.google.gwt.dom.client.Text lastTextNode> = r1;

        return;
    }

    public void flush()
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink $r20, $r50;
        java.lang.StringBuilder $r7, $r10, $r29, $r30, $r31, $r32, $r36, $r37, $r38, $r39, $r43, $r44, $r45, $r46, $r62, $r63, $r65, $r67;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r1, $r12, $r15, $r19, $r49;
        java.lang.Throwable $r54;
        org.waveprotocol.wave.common.logging.Logger $r57;
        java.lang.AssertionError $r64, $r66, $r68, $r69;
        org.waveprotocol.wave.client.editor.RestrictedRange $r22, $r51, $r53;
        java.lang.String $r2, $r6, $r11, $r21, $r33, $r40, $r47, $r59;
        org.waveprotocol.wave.model.document.util.Point $r14, $r17;
        java.lang.RuntimeException $r55;
        org.waveprotocol.wave.model.document.util.Point$Tx $r61;
        boolean $z0, $z1, $z2, z3, z4, $z5, $z6, $z7, $z8;
        org.waveprotocol.wave.model.document.util.Point$El $r52;
        org.waveprotocol.wave.common.logging.LoggerBundle $r56, $r58;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r3, $r5, $r8, $r9, $r18, $r23, $r24, $r25, $r48, r60;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i15, $i17, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29, i30, i31, $i33, $i34, $i35, $i37, $i38, $i39, $i40, $i41, $i43, $i44, $i45, $i47, $i49;
        char $c8, $c10, $c11, $c12, $c13, $c14, $c16, $c18;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource $r13, $r16;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

     label01:
        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean isClear()>();

        if $z0 == 0 goto label03;

     label02:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void clear()>();

        return;

     label03:
        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: void access$000(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r1);

        $r2 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: java.lang.String calculateNewValue()>();

        $r3 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        if $r3 != null goto label04;

        $i25 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i25 <= 0 goto label32;

        $r49 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r50 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink access$500(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r49);

        $r51 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange>;

        $r52 = virtualinvoke $r51.<org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.model.document.util.Point$El getPointAfter()>();

        $r53 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange>;

        interfaceinvoke $r50.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink: void typingReplace(org.waveprotocol.wave.model.document.util.Point,int,java.lang.String,org.waveprotocol.wave.client.editor.RestrictedRange)>($r52, 0, $r2, $r53);

        goto label32;

     label04:
        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getData()>();

        $r7 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r9 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        $r8 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode lastWrapper>;

        if $r9 == $r8 goto label05;

        $r48 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode lastWrapper>;

        $r59 = virtualinvoke $r48.<org.waveprotocol.wave.client.editor.content.ContentTextNode: java.lang.String getData()>();

        goto label06;

     label05:
        $r59 = "";

     label06:
        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r13 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource access$600(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r12);

        $r14 = interfaceinvoke $r13.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource: org.waveprotocol.wave.model.document.util.Point getSelectionStart()>();

        $r15 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r16 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource access$600(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r15);

        $r17 = interfaceinvoke $r16.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$SelectionSource: org.waveprotocol.wave.model.document.util.Point getSelectionEnd()>();

        if $r14 == null goto label07;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void updateMinPre(org.waveprotocol.wave.model.document.util.Point)>($r14);

        goto label08;

     label07:
        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: int minpre> = 0;

     label08:
        if $r17 == null goto label11;

        $i23 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: int getAbsoluteOffset(org.waveprotocol.wave.model.document.util.Point)>($r17);

        $i33 = (int) -1;

        if $i23 != $i33 goto label09;

        $i26 = 0;

        goto label10;

     label09:
        $i24 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i26 = $i24 - $i23;

     label10:
        i27 = $i26;

        goto label12;

     label11:
        i27 = 0;

     label12:
        $z1 = <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean $assertionsDisabled>;

        if $z1 != 0 goto label14;

        $i21 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: int minpre>;

        if $i21 < 0 goto label13;

        if i27 >= 0 goto label14;

     label13:
        $r64 = new java.lang.AssertionError;

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("minpre/minpost outside valid range, minpre: ");

        $i22 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: int minpre>;

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" minpost: ");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i27);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r64.<java.lang.AssertionError: void <init>(java.lang.Object)>($r47);

        throw $r64;

     label14:
        $i0 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: int minpre>;

        if $i0 >= 0 goto label15;

        r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: int minpre> = 0;

     label15:
        if i27 >= 0 goto label16;

        i27 = 0;

     label16:
        $i1 = virtualinvoke $r11.<java.lang.String: int length()>();

        $i19 = $i1 - i27;

        i28 = $i19;

        $i2 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i20 = $i2 - i27;

        i29 = $i20;

        $i3 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: int minpre>;

        i30 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i19);

     label17:
        if i30 <= 0 goto label18;

        $i15 = i30 - 1;

        $c16 = virtualinvoke $r11.<java.lang.String: char charAt(int)>($i15);

        $i17 = i30 - 1;

        $c18 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i17);

        $i34 = (int) $c16;

        $i35 = (int) $c18;

        if $i34 == $i35 goto label18;

        $i37 = (int) -1;

        i30 = i30 + $i37;

        goto label17;

     label18:
        if i30 >= $i19 goto label19;

        if i30 >= $i20 goto label19;

        $c13 = virtualinvoke $r11.<java.lang.String: char charAt(int)>(i30);

        $c14 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i30);

        $i38 = (int) $c13;

        $i39 = (int) $c14;

        if $i38 != $i39 goto label19;

        i30 = i30 + 1;

        goto label18;

     label19:
        i31 = i27;

     label20:
        if i31 <= 0 goto label21;

        $c11 = virtualinvoke $r11.<java.lang.String: char charAt(int)>(i28);

        $c12 = virtualinvoke $r2.<java.lang.String: char charAt(int)>(i29);

        $i40 = (int) $c11;

        $i41 = (int) $c12;

        if $i40 == $i41 goto label21;

        i28 = i28 + 1;

        i29 = i29 + 1;

        $i43 = (int) -1;

        i31 = i31 + $i43;

        goto label20;

     label21:
        if i30 >= i28 goto label22;

        if i30 >= i29 goto label22;

        $i7 = i28 - 1;

        $c8 = virtualinvoke $r11.<java.lang.String: char charAt(int)>($i7);

        $i9 = i29 - 1;

        $c10 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i9);

        $i44 = (int) $c8;

        $i45 = (int) $c10;

        if $i44 != $i45 goto label22;

        $i47 = (int) -1;

        i28 = i28 + $i47;

        $i49 = (int) -1;

        i29 = i29 + $i49;

        goto label21;

     label22:
        $z6 = <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean $assertionsDisabled>;

        if $z6 != 0 goto label23;

        if i30 <= i28 goto label23;

        $r66 = new java.lang.AssertionError;

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startIndex larger than deleteEndIndex, startIndex: ");

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i30);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" deleteEndIndex: ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i28);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r66.<java.lang.AssertionError: void <init>(java.lang.Object)>($r40);

        throw $r66;

     label23:
        $z2 = <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean $assertionsDisabled>;

        if $z2 != 0 goto label24;

        if i30 <= i29 goto label24;

        $r68 = new java.lang.AssertionError;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startIndex larger than insertEndIndex, startIndex: ");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i30);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" insertEndIndex: ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i29);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r68.<java.lang.AssertionError: void <init>(java.lang.Object)>($r33);

        throw $r68;

     label24:
        if i30 >= i28 goto label25;

        $z7 = 1;

        goto label26;

     label25:
        $z7 = 0;

     label26:
        z3 = $z7;

        if i30 >= i29 goto label27;

        $z8 = 1;

        goto label28;

     label27:
        $z8 = 0;

     label28:
        z4 = $z8;

        $i6 = i28 - i30;

        r60 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        $r18 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        $i4 = virtualinvoke $r18.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getLength()>();

        if $i4 >= i30 goto label30;

        $z5 = <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean $assertionsDisabled>;

        if $z5 != 0 goto label29;

        $r25 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        $r24 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode lastWrapper>;

        if $r25 != $r24 goto label29;

        $r69 = new java.lang.AssertionError;

        specialinvoke $r69.<java.lang.AssertionError: void <init>(java.lang.Object)>("first wrapper != lastWrapper");

        throw $r69;

     label29:
        $r23 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        $i5 = virtualinvoke $r23.<org.waveprotocol.wave.client.editor.content.ContentTextNode: int getLength()>();

        i30 = i30 - $i5;

        r60 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode lastWrapper>;

     label30:
        $r61 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$Tx inText(java.lang.Object,int)>(r60, i30);

        if z3 != 0 goto label31;

        if z4 == 0 goto label32;

     label31:
        $r19 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r20 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink access$500(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r19);

        $r21 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i30, i29);

        $r22 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange>;

        interfaceinvoke $r20.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingSink: void typingReplace(org.waveprotocol.wave.model.document.util.Point,int,java.lang.String,org.waveprotocol.wave.client.editor.RestrictedRange)>($r61, $i6, $r21, $r22);

     label32:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void clear()>();

        goto label37;

     label33:
        $r55 := @caughtexception;

        $r56 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r57 = interfaceinvoke $r56.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r57.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.Throwable)>($r55);

        $r58 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        interfaceinvoke $r58.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger trace()>();

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void tryRepair()>();

     label34:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void clear()>();

        goto label37;

     label35:
        $r54 := @caughtexception;

     label36:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void clear()>();

        throw $r54;

     label37:
        return;

        catch java.lang.RuntimeException from label01 to label02 with label33;
        catch java.lang.RuntimeException from label03 to label32 with label33;
        catch java.lang.Throwable from label01 to label02 with label35;
        catch java.lang.Throwable from label03 to label32 with label35;
        catch java.lang.Throwable from label33 to label34 with label35;
        catch java.lang.Throwable from label35 to label36 with label35;
    }

    private void tryRepair()
    {
        org.waveprotocol.wave.client.editor.RestrictedRange $r1, $r5, $r8;
        org.waveprotocol.wave.client.editor.content.ContentElement $r17;
        org.waveprotocol.wave.client.editor.extract.Repairer $r3, $r11;
        org.waveprotocol.wave.client.editor.content.ContentView $r6, $r13, $r15;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.model.document.util.Point$El $r7, $r9;
        java.lang.Object $r16;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r2, $r4, $r10, $r12, $r14;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        $r1 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange>;

        if $r1 != null goto label1;

        $r10 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r11 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.Repairer access$700(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r10);

        $r12 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r13 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.content.ContentView access$200(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r12);

        $r14 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r15 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.content.ContentView access$200(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r14);

        $r16 = interfaceinvoke $r15.<org.waveprotocol.wave.client.editor.content.ContentView: java.lang.Object getDocumentElement()>();

        $r17 = (org.waveprotocol.wave.client.editor.content.ContentElement) $r16;

        virtualinvoke $r11.<org.waveprotocol.wave.client.editor.extract.Repairer: void revert(org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.client.editor.content.ContentElement)>($r13, $r17);

        goto label2;

     label1:
        $r2 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.extract.Repairer access$700(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r2);

        $r5 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange>;

        $r4 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r6 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.content.ContentView access$200(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r4);

        $r7 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.model.document.util.Point$El getPointBefore(org.waveprotocol.wave.model.document.ReadableDocument)>($r6);

        $r8 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange contentRange>;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.RestrictedRange: org.waveprotocol.wave.model.document.util.Point$El getPointAfter()>();

        virtualinvoke $r3.<org.waveprotocol.wave.client.editor.extract.Repairer: void revert(org.waveprotocol.wave.model.document.util.Point$El,org.waveprotocol.wave.model.document.util.Point$El)>($r7, $r9);

     label2:
        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void clear()>();

        return;
    }

    private void updateMinPre(org.waveprotocol.wave.model.document.util.Point)
    {
        int $i0, $i1, $i2, i3, $i5;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r1;
        org.waveprotocol.wave.model.document.util.Point r0;

        r1 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        if r0 != null goto label1;

        r1.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: int minpre> = 0;

        return;

     label1:
        $i0 = specialinvoke r1.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: int getAbsoluteOffset(org.waveprotocol.wave.model.document.util.Point)>(r0);

        i3 = $i0;

        $i5 = (int) -1;

        if $i0 != $i5 goto label2;

        i3 = 0;

     label2:
        $i1 = r1.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: int minpre>;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i3);

        r1.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: int minpre> = $i2;

        return;
    }

    private int getAbsoluteOffset(org.waveprotocol.wave.model.document.util.Point)
    {
        java.lang.AssertionError $r20;
        com.google.gwt.dom.client.Text r7, $r15;
        org.waveprotocol.wave.client.editor.RestrictedRange $r10, $r14;
        int $i0, $i1, $i2, $i4;
        org.waveprotocol.wave.model.document.util.Point r1;
        boolean $z0, $z1;
        com.google.gwt.core.client.JavaScriptObject $r6, $r13;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.client.editor.impl.HtmlView $r9;
        org.waveprotocol.wave.client.editor.content.ContentTextNode $r18;
        java.lang.Object $r2, $r4, $r11, $r16;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor $r8;
        com.google.gwt.dom.client.Node $r3, $r5, $r12, $r17;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $z0 = <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r18 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.content.ContentTextNode firstWrapper>;

        if $r18 != null goto label1;

        $r20 = new java.lang.AssertionError;

        specialinvoke $r20.<java.lang.AssertionError: void <init>()>();

        throw $r20;

     label1:
        $r2 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r3 = (com.google.gwt.dom.client.Node) $r2;

        $z1 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean partOfMutatingRange(com.google.gwt.dom.client.Node)>($r3);

        if $z1 == 0 goto label2;

        $r4 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: java.lang.Object getContainer()>();

        $r5 = (com.google.gwt.dom.client.Node) $r4;

        $r6 = virtualinvoke $r5.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        r7 = (com.google.gwt.dom.client.Text) $r6;

        $r8 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.extract.TypingExtractor this$0>;

        $r9 = staticinvoke <org.waveprotocol.wave.client.editor.extract.TypingExtractor: org.waveprotocol.wave.client.editor.impl.HtmlView access$100(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>($r8);

        $r10 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r11 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getStartNode(org.waveprotocol.wave.model.document.ReadableDocument)>($r9);

        $r12 = (com.google.gwt.dom.client.Node) $r11;

        $r13 = virtualinvoke $r12.<com.google.gwt.dom.client.Node: com.google.gwt.core.client.JavaScriptObject cast()>();

        $r15 = (com.google.gwt.dom.client.Text) $r13;

        $r14 = r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: org.waveprotocol.wave.client.editor.RestrictedRange htmlRange>;

        $r16 = virtualinvoke $r14.<org.waveprotocol.wave.client.editor.RestrictedRange: java.lang.Object getNodeAfter()>();

        $r17 = (com.google.gwt.dom.client.Node) $r16;

        $i0 = staticinvoke <org.waveprotocol.wave.client.editor.content.ContentTextNode: int getOffset(com.google.gwt.dom.client.Text,com.google.gwt.dom.client.Text,com.google.gwt.dom.client.Node,org.waveprotocol.wave.client.editor.impl.HtmlView)>(r7, $r15, $r17, $r9);

        $i1 = virtualinvoke r1.<org.waveprotocol.wave.model.document.util.Point: int getTextOffset()>();

        $i2 = $i0 + $i1;

        return $i2;

     label2:
        $i4 = (int) -1;

        return $i4;
    }

    static void access$800(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState, org.waveprotocol.wave.model.document.util.Point$Tx) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.model.document.util.Point$Tx r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point$Tx;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void startTypingSequence(org.waveprotocol.wave.model.document.util.Point$Tx)>(r1);

        return;
    }

    static void access$900(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState, org.waveprotocol.wave.model.document.util.Point$El)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.model.document.util.Point$El r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point$El;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void startTypingSequence(org.waveprotocol.wave.model.document.util.Point$El)>(r1);

        return;
    }

    static void access$1000(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState, org.waveprotocol.wave.model.document.util.Point) throws org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlMissing, org.waveprotocol.wave.client.editor.extract.InconsistencyException$HtmlInserted
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.model.document.util.Point r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void continueTypingSequence(org.waveprotocol.wave.model.document.util.Point)>(r1);

        return;
    }

    static void access$1100(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState, com.google.gwt.dom.client.Text)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        com.google.gwt.dom.client.Text r1;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r1 := @parameter1: com.google.gwt.dom.client.Text;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void setLastTextNode(com.google.gwt.dom.client.Text)>(r1);

        return;
    }

    static boolean access$1200(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean isClear()>();

        return $z0;
    }

    static boolean access$1300(org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState, org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.model.document.util.Point r1;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r1 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean isPartOfThisState(org.waveprotocol.wave.model.document.util.Point)>(r1);

        return $z0;
    }

    void <init>(org.waveprotocol.wave.client.editor.extract.TypingExtractor, org.waveprotocol.wave.client.editor.extract.TypingExtractor$1)
    {
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState r0;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor r1;
        org.waveprotocol.wave.client.editor.extract.TypingExtractor$1 r2;

        r0 := @this: org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.extract.TypingExtractor;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.extract.TypingExtractor$1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: void <init>(org.waveprotocol.wave.client.editor.extract.TypingExtractor)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/extract/TypingExtractor;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.extract.TypingExtractor$TypingState: boolean $assertionsDisabled> = $z1;

        return;
    }
}
