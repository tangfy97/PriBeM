public class com.google.gxp.com.google.common.io.ByteBuffers extends java.lang.Object
{

    private void <init>()
    {
        com.google.gxp.com.google.common.io.ByteBuffers r0;

        r0 := @this: com.google.gxp.com.google.common.io.ByteBuffers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.nio.ByteBuffer allocate(int)
    {
        java.nio.ByteOrder $r1;
        int i0;
        java.nio.ByteBuffer $r0, $r2;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r2 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r1);

        return $r2;
    }

    public static java.nio.ByteBuffer allocateDirect(int)
    {
        java.nio.ByteOrder $r1;
        int i0;
        java.nio.ByteBuffer $r0, $r2;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i0);

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r2 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r1);

        return $r2;
    }

    public static java.nio.ByteBuffer allocateDirectAndFlip(int)
    {
        java.nio.ByteOrder $r1;
        int i0;
        java.nio.ByteBuffer $r0, $r2;

        i0 := @parameter0: int;

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i0);

        $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r2 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r1);

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        return $r2;
    }

    public static java.nio.ByteBuffer wrap(byte[])
    {
        byte[] r0;
        java.nio.ByteOrder $r2;
        java.nio.ByteBuffer $r1, $r3;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r0);

        $r2 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN>;

        $r3 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r2);

        return $r3;
    }

    public static byte[] extractBytes(java.nio.ByteBuffer)
    {
        byte[] $r1, $r2;
        java.nio.ByteBuffer r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0;

        r0 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int arrayOffset()>();

        if $i0 != 0 goto label1;

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        if $i1 != 0 goto label1;

        $i2 = virtualinvoke r0.<java.nio.ByteBuffer: int limit()>();

        $i3 = virtualinvoke r0.<java.nio.ByteBuffer: int capacity()>();

        if $i2 != $i3 goto label1;

        $r1 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>();

        return $r1;

     label1:
        $i4 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        $r2 = newarray (byte)[$i4];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>($r2);

        $i5 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i6 = lengthof $r2;

        $i7 = $i5 - $i6;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i7);

        return $r2;
    }
}
