public abstract class org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode extends java.lang.Object implements org.jdesktop.swingx.treetable.MutableTreeTableNode
{
    protected org.jdesktop.swingx.treetable.MutableTreeTableNode parent;
    protected final java.util.List children;
    protected transient java.lang.Object userObject;
    protected boolean allowsChildren;

    public void <init>()
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        specialinvoke r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: void <init>(java.lang.Object)>(null);

        return;
    }

    public void <init>(java.lang.Object)
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        java.lang.Object r1;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        r1 := @parameter0: java.lang.Object;

        specialinvoke r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: void <init>(java.lang.Object,boolean)>(r1, 1);

        return;
    }

    public void <init>(java.lang.Object, boolean)
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        java.util.List $r2;
        java.lang.Object r1;
        boolean z0;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        r1 := @parameter0: java.lang.Object;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.lang.Object userObject> = r1;

        r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: boolean allowsChildren> = z0;

        $r2 = virtualinvoke r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.util.List createChildrenList()>();

        r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.util.List children> = $r2;

        return;
    }

    protected java.util.List createChildrenList()
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r1;
        java.util.ArrayList $r0;

        r1 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        return $r0;
    }

    public void add(org.jdesktop.swingx.treetable.MutableTreeTableNode)
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        org.jdesktop.swingx.treetable.MutableTreeTableNode r1;
        int $i0;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        r1 := @parameter0: org.jdesktop.swingx.treetable.MutableTreeTableNode;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: int getChildCount()>();

        virtualinvoke r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: void insert(org.jdesktop.swingx.treetable.MutableTreeTableNode,int)>(r1, $i0);

        return;
    }

    public void insert(org.jdesktop.swingx.treetable.MutableTreeTableNode, int)
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        org.jdesktop.swingx.treetable.MutableTreeTableNode r1;
        java.lang.IllegalStateException $r7;
        java.util.List $r2, $r3, $r5;
        int i0, $i2;
        org.jdesktop.swingx.treetable.TreeTableNode $r4;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        r1 := @parameter0: org.jdesktop.swingx.treetable.MutableTreeTableNode;

        i0 := @parameter1: int;

        $z0 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: boolean allowsChildren>;

        if $z0 != 0 goto label1;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("this node cannot accept children");

        throw $r7;

     label1:
        $r2 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.util.List children>;

        $z1 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r5 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.util.List children>;

        interfaceinvoke $r5.<java.util.List: boolean remove(java.lang.Object)>(r1);

        $i2 = (int) -1;

        i0 = i0 + $i2;

     label2:
        $r3 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.util.List children>;

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>(i0, r1);

        $r4 = interfaceinvoke r1.<org.jdesktop.swingx.treetable.MutableTreeTableNode: org.jdesktop.swingx.treetable.TreeTableNode getParent()>();

        if $r4 == r0 goto label3;

        interfaceinvoke r1.<org.jdesktop.swingx.treetable.MutableTreeTableNode: void setParent(org.jdesktop.swingx.treetable.MutableTreeTableNode)>(r0);

     label3:
        return;
    }

    public void remove(int)
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        org.jdesktop.swingx.treetable.MutableTreeTableNode $r3;
        java.util.List $r1;
        int i0;
        java.lang.Object $r2;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.util.List children>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0);

        $r3 = (org.jdesktop.swingx.treetable.MutableTreeTableNode) $r2;

        interfaceinvoke $r3.<org.jdesktop.swingx.treetable.MutableTreeTableNode: void setParent(org.jdesktop.swingx.treetable.MutableTreeTableNode)>(null);

        return;
    }

    public void remove(org.jdesktop.swingx.treetable.MutableTreeTableNode)
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        org.jdesktop.swingx.treetable.MutableTreeTableNode r1;
        java.util.List $r2;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        r1 := @parameter0: org.jdesktop.swingx.treetable.MutableTreeTableNode;

        $r2 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.util.List children>;

        interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        interfaceinvoke r1.<org.jdesktop.swingx.treetable.MutableTreeTableNode: void setParent(org.jdesktop.swingx.treetable.MutableTreeTableNode)>(null);

        return;
    }

    public void removeFromParent()
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        org.jdesktop.swingx.treetable.MutableTreeTableNode $r1;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        $r1 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: org.jdesktop.swingx.treetable.MutableTreeTableNode parent>;

        interfaceinvoke $r1.<org.jdesktop.swingx.treetable.MutableTreeTableNode: void remove(org.jdesktop.swingx.treetable.MutableTreeTableNode)>(r0);

        return;
    }

    public void setParent(org.jdesktop.swingx.treetable.MutableTreeTableNode)
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r1;
        int $i0, $i1, $i2, $i4, $i6;
        boolean $z0;
        org.jdesktop.swingx.treetable.MutableTreeTableNode r0, $r2, $r3, $r4, $r5, $r6, $r7, $r9;
        java.lang.IllegalArgumentException $r10;

        r1 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        r0 := @parameter0: org.jdesktop.swingx.treetable.MutableTreeTableNode;

        if r0 == null goto label1;

        $z0 = interfaceinvoke r0.<org.jdesktop.swingx.treetable.MutableTreeTableNode: boolean getAllowsChildren()>();

        if $z0 == 0 goto label2;

     label1:
        $r2 = r1.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: org.jdesktop.swingx.treetable.MutableTreeTableNode parent>;

        if $r2 == null goto label3;

        $r6 = r1.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: org.jdesktop.swingx.treetable.MutableTreeTableNode parent>;

        $i2 = interfaceinvoke $r6.<org.jdesktop.swingx.treetable.MutableTreeTableNode: int getIndex(javax.swing.tree.TreeNode)>(r1);

        $i4 = (int) -1;

        if $i2 == $i4 goto label3;

        $r7 = r1.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: org.jdesktop.swingx.treetable.MutableTreeTableNode parent>;

        interfaceinvoke $r7.<org.jdesktop.swingx.treetable.MutableTreeTableNode: void remove(org.jdesktop.swingx.treetable.MutableTreeTableNode)>(r1);

        goto label3;

     label2:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newParent does not allow children");

        throw $r10;

     label3:
        r1.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: org.jdesktop.swingx.treetable.MutableTreeTableNode parent> = r0;

        $r9 = r1.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: org.jdesktop.swingx.treetable.MutableTreeTableNode parent>;

        if $r9 == null goto label4;

        $r3 = r1.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: org.jdesktop.swingx.treetable.MutableTreeTableNode parent>;

        $i0 = interfaceinvoke $r3.<org.jdesktop.swingx.treetable.MutableTreeTableNode: int getIndex(javax.swing.tree.TreeNode)>(r1);

        $i6 = (int) -1;

        if $i0 != $i6 goto label4;

        $r5 = r1.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: org.jdesktop.swingx.treetable.MutableTreeTableNode parent>;

        $r4 = r1.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: org.jdesktop.swingx.treetable.MutableTreeTableNode parent>;

        $i1 = interfaceinvoke $r4.<org.jdesktop.swingx.treetable.MutableTreeTableNode: int getChildCount()>();

        interfaceinvoke $r5.<org.jdesktop.swingx.treetable.MutableTreeTableNode: void insert(org.jdesktop.swingx.treetable.MutableTreeTableNode,int)>(r1, $i1);

     label4:
        return;
    }

    public java.lang.Object getUserObject()
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        java.lang.Object $r1;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        $r1 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.lang.Object userObject>;

        return $r1;
    }

    public void setUserObject(java.lang.Object)
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        java.lang.Object r1;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        r1 := @parameter0: java.lang.Object;

        r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.lang.Object userObject> = r1;

        return;
    }

    public org.jdesktop.swingx.treetable.TreeTableNode getChildAt(int)
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        java.util.List $r1;
        int i0;
        org.jdesktop.swingx.treetable.TreeTableNode $r3;
        java.lang.Object $r2;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.util.List children>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (org.jdesktop.swingx.treetable.TreeTableNode) $r2;

        return $r3;
    }

    public int getIndex(javax.swing.tree.TreeNode)
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        java.util.List $r2;
        javax.swing.tree.TreeNode r1;
        int $i0;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        r1 := @parameter0: javax.swing.tree.TreeNode;

        $r2 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.util.List children>;

        $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r1);

        return $i0;
    }

    public org.jdesktop.swingx.treetable.TreeTableNode getParent()
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        org.jdesktop.swingx.treetable.MutableTreeTableNode $r1;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        $r1 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: org.jdesktop.swingx.treetable.MutableTreeTableNode parent>;

        return $r1;
    }

    public java.util.Enumeration children()
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        java.util.List $r1;
        java.util.Enumeration $r2;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        $r1 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.util.List children>;

        $r2 = staticinvoke <java.util.Collections: java.util.Enumeration enumeration(java.util.Collection)>($r1);

        return $r2;
    }

    public boolean getAllowsChildren()
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        $z0 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: boolean allowsChildren>;

        return $z0;
    }

    public void setAllowsChildren(boolean)
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        java.util.List $r1;
        boolean z0, $z1;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        z0 := @parameter0: boolean;

        r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: boolean allowsChildren> = z0;

        $z1 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: boolean allowsChildren>;

        if $z1 != 0 goto label1;

        $r1 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.util.List children>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

     label1:
        return;
    }

    public int getChildCount()
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        int $i0;
        java.util.List $r1;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        $r1 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.util.List children>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public boolean isLeaf()
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        $i0 = virtualinvoke r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: int getChildCount()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isEditable(int)
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        int i0;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        i0 := @parameter0: int;

        return 0;
    }

    public void setValueAt(java.lang.Object, int)
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        int i0;
        java.lang.Object r1;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        return;
    }

    public java.lang.String toString()
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        java.lang.Object $r1, $r2;
        java.lang.String $r3;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        $r1 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.lang.Object userObject>;

        if $r1 != null goto label1;

        return "";

     label1:
        $r2 = r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: java.lang.Object userObject>;

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }

    public volatile javax.swing.tree.TreeNode getParent()
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        org.jdesktop.swingx.treetable.TreeTableNode $r1;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: org.jdesktop.swingx.treetable.TreeTableNode getParent()>();

        return $r1;
    }

    public volatile javax.swing.tree.TreeNode getChildAt(int)
    {
        org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode r0;
        int i0;
        org.jdesktop.swingx.treetable.TreeTableNode $r1;

        r0 := @this: org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.treetable.AbstractMutableTreeTableNode: org.jdesktop.swingx.treetable.TreeTableNode getChildAt(int)>(i0);

        return $r1;
    }
}
