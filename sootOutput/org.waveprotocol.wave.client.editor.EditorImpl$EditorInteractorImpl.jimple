class org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl extends java.lang.Object implements org.waveprotocol.wave.client.editor.event.EditorInteractor
{
    static final boolean $assertionsDisabled;
    final org.waveprotocol.wave.client.editor.EditorImpl this$0;

    private void <init>(org.waveprotocol.wave.client.editor.EditorImpl)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void forceFlush()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl: void flushSynchronous()>();

        return;
    }

    public org.waveprotocol.wave.client.editor.content.FocusedContentRange getSelectionPoints()
    {
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r3;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;
        org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper getAggressiveSelectionHelper()>();

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper: org.waveprotocol.wave.client.editor.content.FocusedContentRange getSelectionPoints()>();

        return $r3;
    }

    public boolean selectionIsOrdered()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: boolean isOrdered()>();

        return $z0;
    }

    public org.waveprotocol.wave.model.document.util.FocusedPointRange getHtmlSelection()
    {
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r2;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.FocusedPointRange getHtmlSelection()>();

        return $r2;
    }

    public boolean hasContentSelection()
    {
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r1, $r2;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: boolean isTyping()>();

        if $z0 != 0 goto label1;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.model.document.util.FocusedPointRange getHtmlSelection()>();

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.selection.content.SelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange filterNonContentSelection(org.waveprotocol.wave.model.document.util.FocusedPointRange)>($r1);

        if $r2 == null goto label2;

     label1:
        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;
    }

    public org.waveprotocol.wave.model.document.util.Point normalizePoint(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.model.document.util.ReadableDocumentView $r3, $r9, $r13;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r2, $r8, $r12;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.model.document.util.Point $r4, $r10, $r14, r15;
        org.waveprotocol.wave.client.editor.content.ContentView $r6;
        org.waveprotocol.wave.client.editor.EditorImpl $r1, $r5, $r7, $r11;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r15 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = $r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.util.ReadableDocumentView getSelectionFilter()>();

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.Point normalizePoint(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.ReadableDocument)>(r15, $r3);

        $r5 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentView full()>();

        $r7 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r8 = $r7.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.util.ReadableDocumentView getSelectionFilter()>();

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.Point leftAlign(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.ReadableDocument,org.waveprotocol.wave.model.document.util.ReadableDocumentView)>($r4, $r6, $r9);

        $r11 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r12 = $r11.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.util.ReadableDocumentView getSelectionFilter()>();

        $r14 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: org.waveprotocol.wave.model.document.util.Point getFilteredPoint(org.waveprotocol.wave.model.document.util.ReadableDocumentView,org.waveprotocol.wave.model.document.util.Point)>($r13, $r10);

        return $r14;
    }

    public boolean notifyListeners(org.waveprotocol.wave.client.common.util.SignalEvent)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r1;
        org.waveprotocol.wave.client.editor.EditorImpl $r2, $r3;
        org.waveprotocol.wave.client.common.util.SignalEvent r0;
        boolean $z0, $z1, z2;

        r1 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r0 := @parameter0: org.waveprotocol.wave.client.common.util.SignalEvent;

        z2 = 0;

        $z0 = interfaceinvoke r0.<org.waveprotocol.wave.client.common.util.SignalEvent: boolean isKeyEvent()>();

        if $z0 == 0 goto label1;

        $r2 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $z1 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.EditorImpl: boolean editorRelevantEvent(org.waveprotocol.wave.client.common.util.SignalEvent)>(r0);

        if $z1 == 0 goto label1;

        $r3 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        z2 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: boolean access$2300(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.client.common.util.SignalEvent)>($r3, r0);

     label1:
        return z2;
    }

    public boolean shouldIgnoreMutations()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: boolean shouldIgnoreMutations()>();

        return $z0;
    }

    public boolean isExpectingMutationEvents()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: boolean access$2400(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        return $z0;
    }

    public boolean isTyping()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $z0 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: boolean access$2400(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        return $z0;
    }

    public boolean notifyTypingExtractor(org.waveprotocol.wave.model.document.util.Point, boolean, boolean)
    {
        org.waveprotocol.wave.common.logging.Logger $r2;
        java.lang.AssertionError $r18;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r11;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r7;
        int $i0;
        java.lang.String $r6;
        org.waveprotocol.wave.model.document.util.Point r0, r19, $r20;
        boolean z0, z1, $z2;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic $r10;
        org.waveprotocol.wave.model.document.util.FocusedPointRange $r15;
        org.waveprotocol.wave.client.editor.EditorImpl $r8, $r9, $r12, $r16, $r21;
        org.waveprotocol.wave.common.logging.LoggerBundle $r1;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r13;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType $r14;
        java.lang.StringBuilder $r3, $r4, $r5;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r17;

        r7 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        if r0 == null goto label2;

        $z2 = <org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: boolean $assertionsDisabled>;

        if $z2 != 0 goto label1;

        if z0 == 0 goto label1;

        $r18 = new java.lang.AssertionError;

        specialinvoke $r18.<java.lang.AssertionError: void <init>()>();

        throw $r18;

     label1:
        $r16 = r7.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r17 = virtualinvoke $r16.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.impl.NodeManager getNodeManager()>();

        r19 = virtualinvoke $r17.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.model.document.util.Point wrapperPointToNodeletPoint(org.waveprotocol.wave.model.document.util.Point)>(r0);

        goto label6;

     label2:
        if z0 == 0 goto label5;

        staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: void cacheClear()>();

        $r15 = staticinvoke <org.waveprotocol.wave.client.editor.selection.html.NativeSelectionUtil: org.waveprotocol.wave.model.document.util.FocusedPointRange get()>();

        if $r15 == null goto label3;

        $r20 = virtualinvoke $r15.<org.waveprotocol.wave.model.document.util.FocusedPointRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        goto label4;

     label3:
        $r20 = null;

     label4:
        r19 = $r20;

        goto label6;

     label5:
        r19 = null;

     label6:
        if r19 == null goto label8;

        if z1 != 0 goto label7;

        if r0 == null goto label7;

        $r8 = r7.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r10 = $r8.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic annotationLogic>;

        $r9 = r7.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r11 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $i0 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.content.CMutableDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r0);

        $r12 = r7.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r13 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection access$1400(org.waveprotocol.wave.client.editor.EditorImpl)>($r12);

        $r14 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType PLAIN_TEXT>;

        virtualinvoke $r10.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: void supplementAnnotations(int,org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection,org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType)>($i0, $r13, $r14);

     label7:
        $r21 = r7.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: void access$2500(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.model.document.util.Point)>($r21, r19);

        return 0;

     label8:
        $r1 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Null html caret in EditorImpl\'s notifyTypingExtractor, content caret: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.waveprotocol.wave.common.logging.Logger: void logPlainText(java.lang.String)>($r6);

        return 0;
    }

    public void setCaret(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;
        org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper $r2;
        org.waveprotocol.wave.model.document.util.Point r3;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper getAggressiveSelectionHelper()>();

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper: void setCaret(org.waveprotocol.wave.model.document.util.Point)>(r3);

        return;
    }

    public org.waveprotocol.wave.model.document.util.Point deleteRange(org.waveprotocol.wave.model.document.util.Point, org.waveprotocol.wave.model.document.util.Point, boolean)
    {
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r2, $r14;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        int $i0;
        org.waveprotocol.wave.model.document.util.Point r3, $r5, r6, $r8, $r10;
        boolean z0;
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic $r13;
        org.waveprotocol.wave.model.document.util.PointRange $r9;
        org.waveprotocol.wave.client.editor.EditorImpl $r1, $r4, $r7, $r11, $r12;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r16;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType $r15;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r3 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r6 := @parameter1: org.waveprotocol.wave.model.document.util.Point;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label1;

        $r11 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r13 = $r11.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic annotationLogic>;

        $r12 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r14 = virtualinvoke $r12.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $i0 = virtualinvoke $r14.<org.waveprotocol.wave.client.editor.content.CMutableDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r3);

        $r16 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection RIGHT>;

        $r15 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType PLAIN_TEXT>;

        virtualinvoke $r13.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: void supplementAnnotations(int,org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection,org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType)>($i0, $r16, $r15);

     label1:
        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $r4 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.Point access$2600(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.model.document.util.Point)>($r4, r3);

        $r7 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r8 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.Point access$2600(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.model.document.util.Point)>($r7, r6);

        $r9 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.CMutableDocument: org.waveprotocol.wave.model.document.util.PointRange deleteRange(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r5, $r8);

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.model.document.util.PointRange: org.waveprotocol.wave.model.document.util.Point getFirst()>();

        return $r10;
    }

    public org.waveprotocol.wave.model.document.util.Point insertText(org.waveprotocol.wave.model.document.util.Point, java.lang.String, boolean)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r3;
        java.lang.String r2;
        org.waveprotocol.wave.model.document.util.Point r1, $r4;
        boolean z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.Point access$2700(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.model.document.util.Point,java.lang.String,boolean)>($r3, r1, r2, z0);

        return $r4;
    }

    public org.waveprotocol.wave.client.editor.content.ContentElement findElementWrapper(com.google.gwt.dom.client.Element)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;
        com.google.gwt.dom.client.Element r3;
        org.waveprotocol.wave.client.editor.content.ContentElement $r4;
        org.waveprotocol.wave.client.editor.impl.NodeManager $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r3 := @parameter0: com.google.gwt.dom.client.Element;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.impl.NodeManager getNodeManager()>();

        $r4 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.impl.NodeManager: org.waveprotocol.wave.client.editor.content.ContentElement findElementWrapper(com.google.gwt.dom.client.Element)>(r3);

        return $r4;
    }

    public boolean isEditing()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.client.editor.EditorImpl: boolean isEditing()>();

        return $z0;
    }

    public void noteWebkitEndOfLinkHackOccurred(com.google.gwt.dom.client.Text)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r2;
        com.google.gwt.dom.client.Text r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r1 := @parameter0: com.google.gwt.dom.client.Text;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: com.google.gwt.dom.client.Text access$1202(org.waveprotocol.wave.client.editor.EditorImpl,com.google.gwt.dom.client.Text)>($r2, r1);

        return;
    }

    public void clearCaretAnnotations()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations $r2;
        org.waveprotocol.wave.client.editor.EditorImpl $r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations access$2000(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        virtualinvoke $r2.<org.waveprotocol.wave.client.editor.content.misc.CaretAnnotations: void clear()>();

        return;
    }

    public void deleteWordEndingAt(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.EditorImpl $r3, $r6, $r8, $r10;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection $r12;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r7;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelper $r4;
        org.waveprotocol.wave.model.document.util.Point r1, $r2, $r5, $r9, $r11;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.model.document.util.Point normalizePoint(org.waveprotocol.wave.model.document.util.Point)>(r1);

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelper access$2800(org.waveprotocol.wave.client.editor.EditorImpl)>($r3);

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelper: org.waveprotocol.wave.model.document.util.Point getWordBoundary(boolean)>(0);

        if $r5 == null goto label1;

        $r6 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $r8 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r9 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.Point access$2600(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.model.document.util.Point)>($r8, $r5);

        $r10 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r11 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.Point access$2600(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.model.document.util.Point)>($r10, $r2);

        virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.CMutableDocument: org.waveprotocol.wave.model.document.util.PointRange deleteRange(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r9, $r11);

        $r12 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection FROM_RIGHT>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>($r12);

     label1:
        return;
    }

    public void deleteWordStartingAt(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.EditorImpl $r3, $r6, $r8, $r10;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection $r12;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r7;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelper $r4;
        org.waveprotocol.wave.model.document.util.Point r1, $r2, $r5, $r9, $r11;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.model.document.util.Point normalizePoint(org.waveprotocol.wave.model.document.util.Point)>(r1);

        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r4 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelper access$2800(org.waveprotocol.wave.client.editor.EditorImpl)>($r3);

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.client.editor.selection.content.CaretMovementHelper: org.waveprotocol.wave.model.document.util.Point getWordBoundary(boolean)>(1);

        if $r5 == null goto label1;

        $r6 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $r8 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r9 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.Point access$2600(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.model.document.util.Point)>($r8, $r2);

        $r10 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r11 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.util.Point access$2600(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.model.document.util.Point)>($r10, $r5);

        virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.CMutableDocument: org.waveprotocol.wave.model.document.util.PointRange deleteRange(org.waveprotocol.wave.model.document.util.Point,org.waveprotocol.wave.model.document.util.Point)>($r9, $r11);

        $r12 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection FROM_LEFT>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>($r12);

     label1:
        return;
    }

    public void compositionStart(org.waveprotocol.wave.model.document.util.Point)
    {
        org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic $r4;
        org.waveprotocol.wave.client.editor.EditorImpl $r2, $r3, $r6, $r9, $r11;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r5;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r12;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection $r7;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType $r8;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r1;
        org.waveprotocol.wave.client.editor.content.ClientDocumentContext $r13;
        int $i0;
        org.waveprotocol.wave.client.editor.extract.ImeExtractor $r10;
        org.waveprotocol.wave.model.document.util.Point r0;

        r1 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r0 := @parameter0: org.waveprotocol.wave.model.document.util.Point;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void startIgnoreMutations()>();

        if r0 == null goto label1;

        $r9 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r10 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.ImeExtractor access$2900(org.waveprotocol.wave.client.editor.EditorImpl)>($r9);

        $r11 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r12 = $r11.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r13 = virtualinvoke $r12.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.client.editor.content.ClientDocumentContext getContext()>();

        virtualinvoke $r10.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: void activate(org.waveprotocol.wave.model.document.util.DocumentContext,org.waveprotocol.wave.model.document.util.Point)>($r13, r0);

     label1:
        $r2 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r4 = $r2.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic annotationLogic>;

        $r3 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r5 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $i0 = virtualinvoke $r5.<org.waveprotocol.wave.client.editor.content.CMutableDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>(r0);

        $r6 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r7 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection access$1400(org.waveprotocol.wave.client.editor.EditorImpl)>($r6);

        $r8 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType: org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType PLAIN_TEXT>;

        virtualinvoke $r4.<org.waveprotocol.wave.client.editor.util.AnnotationBehaviourLogic: void supplementAnnotations(int,org.waveprotocol.wave.model.document.AnnotationBehaviour$BiasDirection,org.waveprotocol.wave.model.document.AnnotationBehaviour$ContentType)>($i0, $r7, $r8);

        return;
    }

    public void compositionUpdate()
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        return;
    }

    public org.waveprotocol.wave.client.editor.content.FocusedContentRange compositionEnd()
    {
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r4;
        org.waveprotocol.wave.client.editor.content.ContentDocument $r13;
        org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper $r18;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder $r5;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        boolean $z0, $z1;
        org.waveprotocol.wave.client.editor.content.FocusedContentRange $r28;
        org.waveprotocol.wave.model.document.util.LocalDocument $r14;
        org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection $r19;
        org.waveprotocol.wave.common.logging.LoggerBundle $r30;
        java.lang.Throwable $r32;
        org.waveprotocol.wave.client.editor.EditorUpdateEventImpl $r23;
        org.waveprotocol.wave.client.editor.Responsibility$Manager $r21, $r25;
        org.waveprotocol.wave.common.logging.Logger $r31;
        java.lang.AssertionError $r29;
        java.lang.String $r9;
        org.waveprotocol.wave.client.editor.extract.ImeExtractor $r2, $r8, $r11;
        org.waveprotocol.wave.model.document.util.Point $r15, $r16;
        org.waveprotocol.wave.client.editor.EditorImpl $r1, $r3, $r7, $r10, $r12, $r17, $r20, $r22, $r24, $r26;
        org.waveprotocol.wave.model.document.operation.Nindo $r6;
        org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper $r27;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

     label1:
        $r1 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r2 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.ImeExtractor access$2900(org.waveprotocol.wave.client.editor.EditorImpl)>($r1);

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: boolean isActive()>();

        if $z0 != 0 goto label3;

        $r30 = <org.waveprotocol.wave.client.editor.EditorStaticDeps: org.waveprotocol.wave.common.logging.LoggerBundle logger>;

        $r31 = interfaceinvoke $r30.<org.waveprotocol.wave.common.logging.LoggerBundle: org.waveprotocol.wave.common.logging.Logger error()>();

        interfaceinvoke $r31.<org.waveprotocol.wave.common.logging.Logger: void log(java.lang.String)>("Composition end called with inactive ImeExtractor! Maybe caret was null initially?");

     label2:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        return null;

     label3:
        $r3 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $r5 = new org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        specialinvoke $r5.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void <init>()>();

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: org.waveprotocol.wave.model.document.operation.Nindo build()>();

        virtualinvoke $r4.<org.waveprotocol.wave.client.editor.content.CMutableDocument: void hackConsume(org.waveprotocol.wave.model.document.operation.Nindo)>($r6);

        $r7 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r8 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.ImeExtractor access$2900(org.waveprotocol.wave.client.editor.EditorImpl)>($r7);

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: java.lang.String getContent()>();

        $z1 = <org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        if $r9 != null goto label4;

        $r29 = new java.lang.AssertionError;

        specialinvoke $r29.<java.lang.AssertionError: void <init>(java.lang.Object)>("Composition should not be null with active IME extractor");

        throw $r29;

     label4:
        $r10 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r11 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.extract.ImeExtractor access$2900(org.waveprotocol.wave.client.editor.EditorImpl)>($r10);

        $r12 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r13 = $r12.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.ContentDocument content>;

        $r14 = virtualinvoke $r13.<org.waveprotocol.wave.client.editor.content.ContentDocument: org.waveprotocol.wave.model.document.util.LocalDocument getAnnotatableContent()>();

        $r15 = virtualinvoke $r11.<org.waveprotocol.wave.client.editor.extract.ImeExtractor: org.waveprotocol.wave.model.document.util.Point deactivate(org.waveprotocol.wave.model.document.util.LocalDocument)>($r14);

        $r16 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.model.document.util.Point insertText(org.waveprotocol.wave.model.document.util.Point,java.lang.String,boolean)>($r15, $r9, 1);

        $r17 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r18 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper access$3000(org.waveprotocol.wave.client.editor.EditorImpl)>($r17);

        virtualinvoke $r18.<org.waveprotocol.wave.client.editor.selection.content.AggressiveSelectionHelper: void setCaret(org.waveprotocol.wave.model.document.util.Point)>($r16);

        $r19 = <org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection FROM_LEFT>;

        virtualinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>($r19);

        $r20 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r21 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager access$700(org.waveprotocol.wave.client.editor.EditorImpl)>($r20);

        interfaceinvoke $r21.<org.waveprotocol.wave.client.editor.Responsibility$Manager: void startIndirectSequence()>();

        $r22 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r23 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUpdateEventImpl access$3100(org.waveprotocol.wave.client.editor.EditorImpl)>($r22);

        virtualinvoke $r23.<org.waveprotocol.wave.client.editor.EditorUpdateEventImpl: void flushUpdates()>();

        $r24 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r25 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.Responsibility$Manager access$700(org.waveprotocol.wave.client.editor.EditorImpl)>($r24);

        interfaceinvoke $r25.<org.waveprotocol.wave.client.editor.Responsibility$Manager: void endIndirectSequence()>();

        $r26 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r27 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper access$000(org.waveprotocol.wave.client.editor.EditorImpl)>($r26);

        $r28 = virtualinvoke $r27.<org.waveprotocol.wave.client.editor.selection.content.PassiveSelectionHelper: org.waveprotocol.wave.client.editor.content.FocusedContentRange getSelectionPoints()>();

     label5:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        return $r28;

     label6:
        $r32 := @caughtexception;

     label7:
        staticinvoke <org.waveprotocol.wave.client.editor.EditorStaticDeps: void endIgnoreMutations()>();

        throw $r32;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void checkpoint(org.waveprotocol.wave.client.editor.content.FocusedContentRange)
    {
        org.waveprotocol.wave.client.editor.content.FocusedContentRange r0;
        org.waveprotocol.wave.client.editor.EditorUndoManager $r3, $r5;
        org.waveprotocol.wave.client.editor.EditorImpl $r2, $r4, $r6, $r9;
        org.waveprotocol.wave.client.editor.content.CMutableDocument $r7, $r10;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r1;
        int $i0, $i1;
        org.waveprotocol.wave.model.document.util.Point $r8, $r11;

        r1 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r0 := @parameter0: org.waveprotocol.wave.client.editor.content.FocusedContentRange;

        if r0 == null goto label1;

        $r4 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r5 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager access$800(org.waveprotocol.wave.client.editor.EditorImpl)>($r4);

        $r6 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $r8 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getFocus()>();

        $i0 = virtualinvoke $r7.<org.waveprotocol.wave.client.editor.content.CMutableDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r8);

        $r9 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r10 = virtualinvoke $r9.<org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.content.CMutableDocument mutable()>();

        $r11 = virtualinvoke r0.<org.waveprotocol.wave.client.editor.content.FocusedContentRange: org.waveprotocol.wave.model.document.util.Point getAnchor()>();

        $i1 = virtualinvoke $r10.<org.waveprotocol.wave.client.editor.content.CMutableDocument: int getLocation(org.waveprotocol.wave.model.document.util.Point)>($r11);

        interfaceinvoke $r5.<org.waveprotocol.wave.client.editor.EditorUndoManager: void maybeCheckpoint(int,int)>($i0, $i1);

        goto label2;

     label1:
        $r2 = r1.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: org.waveprotocol.wave.client.editor.EditorUndoManager access$800(org.waveprotocol.wave.client.editor.EditorImpl)>($r2);

        interfaceinvoke $r3.<org.waveprotocol.wave.client.editor.EditorUndoManager: void maybeCheckpoint()>();

     label2:
        return;
    }

    public void rebiasSelection(org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)
    {
        org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection r1;
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl $r2;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r1 := @parameter0: org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection;

        $r2 = r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: org.waveprotocol.wave.client.editor.EditorImpl this$0>;

        staticinvoke <org.waveprotocol.wave.client.editor.EditorImpl: void access$3200(org.waveprotocol.wave.client.editor.EditorImpl,org.waveprotocol.wave.model.document.AnnotationBehaviour$CursorDirection)>($r2, r1);

        return;
    }

    void <init>(org.waveprotocol.wave.client.editor.EditorImpl, org.waveprotocol.wave.client.editor.EditorImpl$1)
    {
        org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl r0;
        org.waveprotocol.wave.client.editor.EditorImpl$1 r2;
        org.waveprotocol.wave.client.editor.EditorImpl r1;

        r0 := @this: org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl;

        r1 := @parameter0: org.waveprotocol.wave.client.editor.EditorImpl;

        r2 := @parameter1: org.waveprotocol.wave.client.editor.EditorImpl$1;

        specialinvoke r0.<org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: void <init>(org.waveprotocol.wave.client.editor.EditorImpl)>(r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/client/editor/EditorImpl;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.client.editor.EditorImpl$EditorInteractorImpl: boolean $assertionsDisabled> = $z1;

        return;
    }
}
