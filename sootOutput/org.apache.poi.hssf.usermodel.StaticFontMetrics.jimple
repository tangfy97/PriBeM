final class org.apache.poi.hssf.usermodel.StaticFontMetrics extends java.lang.Object
{
    private static java.util.Properties fontMetricsProps;
    private static java.util.Map fontDetailsMap;

    void <init>()
    {
        org.apache.poi.hssf.usermodel.StaticFontMetrics r0;

        r0 := @this: org.apache.poi.hssf.usermodel.StaticFontMetrics;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.poi.hssf.usermodel.FontDetails getFontDetails(java.awt.Font)
    {
        java.util.Map $r5, $r10, $r61;
        java.lang.StringBuilder $r11, $r13, $r14, $r15, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r40, $r41, $r43, $r49, $r50, $r52;
        java.lang.Throwable $r46;
        java.lang.String $r3, $r16, $r17, $r42, $r44, $r51, $r53, r57, $r58, r59, r60;
        java.util.Properties $r0, $r2, $r8, $r12, $r32, $r35;
        java.io.IOException $r45, $r47, $r54;
        java.lang.RuntimeException $r48;
        java.io.File $r37;
        java.lang.SecurityException $r55;
        boolean $z0, $z1, $z2, $z3;
        java.awt.Font r1;
        java.io.FileNotFoundException $r36, $r39;
        org.apache.poi.hssf.usermodel.FontDetails $r7, $r9;
        java.io.FileInputStream $r38;
        java.lang.Object $r4, $r6, $r18, $r62;
        java.lang.Class $r33;
        java.io.InputStream $r34, r56;

        r1 := @parameter0: java.awt.Font;

        $r0 = <org.apache.poi.hssf.usermodel.StaticFontMetrics: java.util.Properties fontMetricsProps>;

        if $r0 != null goto label20;

        r56 = null;

     label01:
        $r32 = new java.util.Properties;

        specialinvoke $r32.<java.util.Properties: void <init>()>();

        <org.apache.poi.hssf.usermodel.StaticFontMetrics: java.util.Properties fontMetricsProps> = $r32;

        r57 = null;

     label02:
        r57 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("font.metrics.filename");

     label03:
        goto label05;

     label04:
        $r55 := @caughtexception;

     label05:
        if r57 == null goto label07;

        $r37 = new java.io.File;

        specialinvoke $r37.<java.io.File: void <init>(java.lang.String)>(r57);

        $z2 = virtualinvoke $r37.<java.io.File: boolean exists()>();

        if $z2 != 0 goto label06;

        $r39 = new java.io.FileNotFoundException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("font_metrics.properties not found at path ");

        $r42 = virtualinvoke $r37.<java.io.File: java.lang.String getAbsolutePath()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r44);

        throw $r39;

     label06:
        $r38 = new java.io.FileInputStream;

        specialinvoke $r38.<java.io.FileInputStream: void <init>(java.io.File)>($r37);

        r56 = $r38;

        goto label08;

     label07:
        $r33 = class "Lorg/apache/poi/hssf/usermodel/FontDetails;";

        $r34 = virtualinvoke $r33.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/font_metrics.properties");

        r56 = $r34;

        if $r34 != null goto label08;

        $r36 = new java.io.FileNotFoundException;

        specialinvoke $r36.<java.io.FileNotFoundException: void <init>(java.lang.String)>("font_metrics.properties not found in classpath");

        throw $r36;

     label08:
        $r35 = <org.apache.poi.hssf.usermodel.StaticFontMetrics: java.util.Properties fontMetricsProps>;

        virtualinvoke $r35.<java.util.Properties: void load(java.io.InputStream)>(r56);

     label09:
        if r56 == null goto label20;

     label10:
        virtualinvoke r56.<java.io.InputStream: void close()>();

     label11:
        goto label20;

     label12:
        $r54 := @caughtexception;

        goto label20;

     label13:
        $r47 := @caughtexception;

        $r48 = new java.lang.RuntimeException;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not load font metrics: ");

        $r51 = virtualinvoke $r47.<java.io.IOException: java.lang.String getMessage()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<java.lang.RuntimeException: void <init>(java.lang.String)>($r53);

        throw $r48;

     label14:
        $r46 := @caughtexception;

     label15:
        if r56 == null goto label19;

     label16:
        virtualinvoke r56.<java.io.InputStream: void close()>();

     label17:
        goto label19;

     label18:
        $r45 := @caughtexception;

     label19:
        throw $r46;

     label20:
        $r58 = virtualinvoke r1.<java.awt.Font: java.lang.String getName()>();

        r59 = $r58;

        r60 = "";

        $z3 = virtualinvoke r1.<java.awt.Font: boolean isPlain()>();

        if $z3 == 0 goto label21;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("plain");

        r60 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

     label21:
        $z0 = virtualinvoke r1.<java.awt.Font: boolean isBold()>();

        if $z0 == 0 goto label22;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r60);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bold");

        r60 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

     label22:
        $z1 = virtualinvoke r1.<java.awt.Font: boolean isItalic()>();

        if $z1 == 0 goto label23;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r60);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("italic");

        r60 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

     label23:
        $r2 = <org.apache.poi.hssf.usermodel.StaticFontMetrics: java.util.Properties fontMetricsProps>;

        $r3 = staticinvoke <org.apache.poi.hssf.usermodel.FontDetails: java.lang.String buildFontHeightProperty(java.lang.String)>($r58);

        $r4 = virtualinvoke $r2.<java.util.Properties: java.lang.Object get(java.lang.Object)>($r3);

        if $r4 != null goto label24;

        $r12 = <org.apache.poi.hssf.usermodel.StaticFontMetrics: java.util.Properties fontMetricsProps>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r60);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = staticinvoke <org.apache.poi.hssf.usermodel.FontDetails: java.lang.String buildFontHeightProperty(java.lang.String)>($r16);

        $r18 = virtualinvoke $r12.<java.util.Properties: java.lang.Object get(java.lang.Object)>($r17);

        if $r18 == null goto label24;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r60);

        r59 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

     label24:
        $r61 = <org.apache.poi.hssf.usermodel.StaticFontMetrics: java.util.Map fontDetailsMap>;

        $r62 = interfaceinvoke $r61.<java.util.Map: java.lang.Object get(java.lang.Object)>(r59);

        if $r62 != null goto label25;

        $r8 = <org.apache.poi.hssf.usermodel.StaticFontMetrics: java.util.Properties fontMetricsProps>;

        $r9 = staticinvoke <org.apache.poi.hssf.usermodel.FontDetails: org.apache.poi.hssf.usermodel.FontDetails create(java.lang.String,java.util.Properties)>(r59, $r8);

        $r10 = <org.apache.poi.hssf.usermodel.StaticFontMetrics: java.util.Map fontDetailsMap>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, $r9);

        return $r9;

     label25:
        $r5 = <org.apache.poi.hssf.usermodel.StaticFontMetrics: java.util.Map fontDetailsMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r59);

        $r7 = (org.apache.poi.hssf.usermodel.FontDetails) $r6;

        return $r7;

        catch java.lang.SecurityException from label02 to label03 with label04;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label01 to label09 with label13;
        catch java.lang.Throwable from label01 to label09 with label14;
        catch java.io.IOException from label16 to label17 with label18;
        catch java.lang.Throwable from label13 to label15 with label14;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.apache.poi.hssf.usermodel.StaticFontMetrics: java.util.Map fontDetailsMap> = $r0;

        return;
    }
}
