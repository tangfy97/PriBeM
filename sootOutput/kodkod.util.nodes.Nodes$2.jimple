final class kodkod.util.nodes.Nodes$2 extends kodkod.ast.visitor.AbstractVoidVisitor
{
    final java.util.Set visited;
    private final java.util.Set val$desc;

    void <init>(java.util.Set)
    {
        kodkod.util.nodes.Nodes$2 r0;
        java.util.Set r1;
        kodkod.util.collections.IdentityHashSet $r2;

        r0 := @this: kodkod.util.nodes.Nodes$2;

        r1 := @parameter0: java.util.Set;

        r0.<kodkod.util.nodes.Nodes$2: java.util.Set val$desc> = r1;

        specialinvoke r0.<kodkod.ast.visitor.AbstractVoidVisitor: void <init>()>();

        $r2 = new kodkod.util.collections.IdentityHashSet;

        specialinvoke $r2.<kodkod.util.collections.IdentityHashSet: void <init>()>();

        r0.<kodkod.util.nodes.Nodes$2: java.util.Set visited> = $r2;

        return;
    }

    protected boolean visited(kodkod.ast.Node)
    {
        kodkod.util.nodes.Nodes$2 r0;
        java.util.Set $r2, $r3;
        kodkod.ast.Node r1;
        boolean $z0;

        r0 := @this: kodkod.util.nodes.Nodes$2;

        r1 := @parameter0: kodkod.ast.Node;

        $r2 = r0.<kodkod.util.nodes.Nodes$2: java.util.Set visited>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r3 = r0.<kodkod.util.nodes.Nodes$2: java.util.Set val$desc>;

        interfaceinvoke $r3.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return 0;

     label1:
        return 1;
    }
}
