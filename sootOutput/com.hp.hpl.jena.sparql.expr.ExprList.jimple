public class com.hp.hpl.jena.sparql.expr.ExprList extends java.lang.Object implements java.lang.Iterable
{
    private final java.util.List expressions;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.expr.ExprList r0;
        java.util.ArrayList $r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions> = $r1;

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        java.util.List $r2, $r3;
        com.hp.hpl.jena.sparql.expr.ExprList r0, r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        $r3 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $r2 = r1.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r2);

        return;
    }

    public void <init>(com.hp.hpl.jena.sparql.expr.Expr)
    {
        java.util.List $r2;
        com.hp.hpl.jena.sparql.expr.Expr r1;
        com.hp.hpl.jena.sparql.expr.ExprList r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        specialinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        $r2 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void <init>(java.util.List)
    {
        java.util.List r1;
        com.hp.hpl.jena.sparql.expr.ExprList r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions> = r1;

        return;
    }

    public boolean isSatisfied(com.hp.hpl.jena.sparql.engine.binding.Binding, com.hp.hpl.jena.sparql.engine.ExecutionContext)
    {
        java.util.Iterator $r2;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.engine.binding.Binding r5;
        com.hp.hpl.jena.sparql.expr.Expr r4;
        com.hp.hpl.jena.sparql.expr.ExprList r0;
        java.lang.Object $r3;
        com.hp.hpl.jena.sparql.engine.ExecutionContext r6;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        r5 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        r6 := @parameter1: com.hp.hpl.jena.sparql.engine.ExecutionContext;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.expr.Expr) $r3;

        $z1 = interfaceinvoke r4.<com.hp.hpl.jena.sparql.expr.Expr: boolean isSatisfied(com.hp.hpl.jena.sparql.engine.binding.Binding,com.hp.hpl.jena.sparql.function.FunctionEnv)>(r5, r6);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        goto label1;

     label3:
        return 1;
    }

    public com.hp.hpl.jena.sparql.expr.Expr get(int)
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.expr.Expr $r3;
        com.hp.hpl.jena.sparql.expr.ExprList r0;
        int i0;
        java.lang.Object $r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0);

        $r3 = (com.hp.hpl.jena.sparql.expr.Expr) $r2;

        return $r3;
    }

    public int size()
    {
        int $i0;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.expr.ExprList r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        return $i0;
    }

    public boolean isEmpty()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.expr.ExprList r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        return $z0;
    }

    public com.hp.hpl.jena.sparql.expr.ExprList subList(int, int)
    {
        java.util.List $r2, $r3;
        com.hp.hpl.jena.sparql.expr.ExprList $r0, r1;
        int i0, i1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        $r2 = r1.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.List subList(int,int)>(i0, i1);

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>(java.util.List)>($r3);

        return $r0;
    }

    public com.hp.hpl.jena.sparql.expr.ExprList tail(int)
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.expr.ExprList r0, $r2;
        int i0, $i1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.ExprList subList(int,int)>(i0, $i1);

        return $r2;
    }

    public java.util.Set getVarsMentioned()
    {
        java.util.HashSet $r0;
        com.hp.hpl.jena.sparql.expr.ExprList r1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprList: void varsMentioned(java.util.Collection)>($r0);

        return $r0;
    }

    public void varsMentioned(java.util.Collection)
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.expr.Expr r4;
        com.hp.hpl.jena.sparql.expr.ExprList r0;
        java.util.Collection r5;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        r5 := @parameter0: java.util.Collection;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.expr.Expr) $r3;

        interfaceinvoke r4.<com.hp.hpl.jena.sparql.expr.Expr: void varsMentioned(java.util.Collection)>(r5);

        goto label1;

     label2:
        return;
    }

    public com.hp.hpl.jena.sparql.expr.ExprList copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding)
    {
        com.hp.hpl.jena.sparql.engine.binding.Binding r1;
        com.hp.hpl.jena.sparql.expr.ExprList r0, $r2;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: com.hp.hpl.jena.sparql.expr.ExprList copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding,boolean)>(r1, 0);

        return $r2;
    }

    public com.hp.hpl.jena.sparql.expr.ExprList copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding, boolean)
    {
        java.util.Iterator $r3;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.engine.binding.Binding r5;
        com.hp.hpl.jena.sparql.expr.Expr $r6, r7;
        com.hp.hpl.jena.sparql.expr.ExprList $r0, r1;
        java.lang.Object $r4;
        boolean $z0, z1;

        r1 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        r5 := @parameter0: com.hp.hpl.jena.sparql.engine.binding.Binding;

        z1 := @parameter1: boolean;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r7 = (com.hp.hpl.jena.sparql.expr.Expr) $r4;

        $r6 = interfaceinvoke r7.<com.hp.hpl.jena.sparql.expr.Expr: com.hp.hpl.jena.sparql.expr.Expr copySubstitute(com.hp.hpl.jena.sparql.engine.binding.Binding,boolean)>(r5, z1);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r6);

        goto label1;

     label2:
        return $r0;
    }

    public void addAll(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        java.util.List $r2, $r3;
        com.hp.hpl.jena.sparql.expr.ExprList r0, r1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        $r2 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List getList()>();

        interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>($r3);

        return;
    }

    public void add(com.hp.hpl.jena.sparql.expr.Expr)
    {
        java.util.List $r2;
        com.hp.hpl.jena.sparql.expr.Expr r1;
        com.hp.hpl.jena.sparql.expr.ExprList r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $r2 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public java.util.List getList()
    {
        java.util.List $r1;
        com.hp.hpl.jena.sparql.expr.ExprList r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        return $r1;
    }

    public java.util.Iterator iterator()
    {
        java.util.List $r1;
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.expr.ExprList r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public void prepareExprs(com.hp.hpl.jena.sparql.util.Context)
    {
        com.hp.hpl.jena.sparql.expr.ExprBuild $r0;
        java.util.Iterator $r4;
        com.hp.hpl.jena.sparql.util.Context r1;
        java.util.List $r3;
        com.hp.hpl.jena.sparql.expr.Expr r6;
        com.hp.hpl.jena.sparql.expr.ExprList r2;
        java.lang.Object $r5;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter0: com.hp.hpl.jena.sparql.util.Context;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprBuild;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprBuild: void <init>(com.hp.hpl.jena.sparql.util.Context)>(r1);

        $r3 = r2.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.expr.Expr) $r5;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprWalker: void walk(com.hp.hpl.jena.sparql.expr.ExprVisitor,com.hp.hpl.jena.sparql.expr.Expr)>($r0, r6);

        goto label1;

     label2:
        return;
    }

    public java.lang.String toString()
    {
        java.util.List $r1;
        java.lang.String $r2;
        com.hp.hpl.jena.sparql.expr.ExprList r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public int hashCode()
    {
        int $i0;
        java.util.List $r1;
        com.hp.hpl.jena.sparql.expr.ExprList r0;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        $r1 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        java.util.List $r3, $r4;
        com.hp.hpl.jena.sparql.expr.ExprList r0, r2;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: com.hp.hpl.jena.sparql.expr.ExprList;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.hp.hpl.jena.sparql.expr.ExprList;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.hp.hpl.jena.sparql.expr.ExprList) r1;

        $r4 = r0.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $r3 = r2.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.List expressions>;

        $z1 = interfaceinvoke $r4.<java.util.List: boolean equals(java.lang.Object)>($r3);

        return $z1;
    }

    public static com.hp.hpl.jena.sparql.expr.ExprList splitConjunction(com.hp.hpl.jena.sparql.expr.ExprList)
    {
        java.util.Iterator $r2;
        com.hp.hpl.jena.sparql.expr.Expr r4;
        com.hp.hpl.jena.sparql.expr.ExprList $r0, r1;
        java.lang.Object $r3;
        boolean $z0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.ExprList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.hp.hpl.jena.sparql.expr.Expr) $r3;

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprList: void split(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.expr.Expr)>($r0, r4);

        goto label1;

     label2:
        return $r0;
    }

    private static com.hp.hpl.jena.sparql.expr.ExprList splitConjunction(com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr r1;
        com.hp.hpl.jena.sparql.expr.ExprList $r0;

        r1 := @parameter0: com.hp.hpl.jena.sparql.expr.Expr;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprList: void split(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.expr.Expr)>($r0, r1);

        return $r0;
    }

    private static void split(com.hp.hpl.jena.sparql.expr.ExprList, com.hp.hpl.jena.sparql.expr.Expr)
    {
        com.hp.hpl.jena.sparql.expr.Expr $r2, $r3, r4;
        com.hp.hpl.jena.sparql.expr.ExprList r0;
        com.hp.hpl.jena.sparql.expr.E_LogicalAnd r1;
        boolean $z0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.expr.ExprList;

        r4 := @parameter1: com.hp.hpl.jena.sparql.expr.Expr;

     label1:
        $z0 = r4 instanceof com.hp.hpl.jena.sparql.expr.E_LogicalAnd;

        if $z0 == 0 goto label2;

        r1 = (com.hp.hpl.jena.sparql.expr.E_LogicalAnd) r4;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.E_LogicalAnd: com.hp.hpl.jena.sparql.expr.Expr getArg1()>();

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.sparql.expr.E_LogicalAnd: com.hp.hpl.jena.sparql.expr.Expr getArg2()>();

        staticinvoke <com.hp.hpl.jena.sparql.expr.ExprList: void split(com.hp.hpl.jena.sparql.expr.ExprList,com.hp.hpl.jena.sparql.expr.Expr)>(r0, $r2);

        r4 = $r3;

        goto label1;

     label2:
        virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>(r4);

        return;
    }
}
