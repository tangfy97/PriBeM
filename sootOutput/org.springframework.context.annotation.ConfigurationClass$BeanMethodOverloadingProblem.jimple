class org.springframework.context.'annotation'.ConfigurationClass$BeanMethodOverloadingProblem extends org.springframework.beans.factory.parsing.Problem
{
    final org.springframework.context.'annotation'.ConfigurationClass this$0;

    public void <init>(org.springframework.context.'annotation'.ConfigurationClass, java.lang.String, int)
    {
        java.lang.Object[] $r2;
        org.springframework.beans.factory.parsing.Location $r7;
        org.springframework.core.type.AnnotationMetadata $r9;
        java.lang.Integer $r4;
        org.springframework.context.'annotation'.ConfigurationClass r1;
        org.springframework.context.'annotation'.ConfigurationClass$BeanMethodOverloadingProblem r0;
        int i0;
        java.lang.String $r3, r5, $r6;
        org.springframework.core.io.Resource $r8;

        r0 := @this: org.springframework.context.'annotation'.ConfigurationClass$BeanMethodOverloadingProblem;

        r1 := @parameter0: org.springframework.context.'annotation'.ConfigurationClass;

        r5 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r0.<org.springframework.context.'annotation'.ConfigurationClass$BeanMethodOverloadingProblem: org.springframework.context.'annotation'.ConfigurationClass this$0> = r1;

        $r2 = newarray (java.lang.Object)[3];

        $r3 = virtualinvoke r1.<org.springframework.context.'annotation'.ConfigurationClass: java.lang.String getSimpleName()>();

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[1] = $r4;

        $r2[2] = r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("@Configuration class \'%s\' has %s overloaded @Bean methods named \'%s\'. Only one @Bean method of a given name is allowed within each @Configuration class.", $r2);

        $r7 = new org.springframework.beans.factory.parsing.Location;

        $r8 = virtualinvoke r1.<org.springframework.context.'annotation'.ConfigurationClass: org.springframework.core.io.Resource getResource()>();

        $r9 = virtualinvoke r1.<org.springframework.context.'annotation'.ConfigurationClass: org.springframework.core.type.AnnotationMetadata getMetadata()>();

        specialinvoke $r7.<org.springframework.beans.factory.parsing.Location: void <init>(org.springframework.core.io.Resource,java.lang.Object)>($r8, $r9);

        specialinvoke r0.<org.springframework.beans.factory.parsing.Problem: void <init>(java.lang.String,org.springframework.beans.factory.parsing.Location)>($r6, $r7);

        return;
    }
}
