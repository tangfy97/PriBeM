public class org.apache.poi.xslf.usermodel.XSLFGroupShape extends org.apache.poi.xslf.usermodel.XSLFShape implements org.apache.poi.xslf.usermodel.XSLFShapeContainer
{
    private final org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _shape;
    private final org.apache.poi.xslf.usermodel.XSLFSheet _sheet;
    private final java.util.List _shapes;
    private final org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr;
    private org.apache.poi.xslf.usermodel.XSLFDrawing _drawing;

    void <init>(org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape, org.apache.poi.xslf.usermodel.XSLFSheet)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties $r6;
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape r1, $r3;
        java.util.List $r5;
        org.apache.poi.xslf.usermodel.XSLFSheet r2, $r4;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        r1 := @parameter0: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape;

        r2 := @parameter1: org.apache.poi.xslf.usermodel.XSLFSheet;

        specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShape: void <init>()>();

        r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _shape> = r1;

        r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFSheet _sheet> = r2;

        $r4 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFSheet _sheet>;

        $r3 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _shape>;

        $r5 = virtualinvoke $r4.<org.apache.poi.xslf.usermodel.XSLFSheet: java.util.List buildShapes(org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape)>($r3);

        r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: java.util.List _shapes> = $r5;

        $r6 = interfaceinvoke r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties getGrpSpPr()>();

        r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr> = $r6;

        return;
    }

    public org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape getXmlObject()
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _shape>;

        return $r1;
    }

    public java.awt.geom.Rectangle2D getAnchor()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D $r2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D $r3;
        long $l0, $l1, $l2, $l3;
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D $r4;
        java.awt.geom.Rectangle2D$Double $r5;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D getXfrm()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D getOff()>();

        $l0 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D: long getX()>();

        $l1 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D: long getY()>();

        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D getExt()>();

        $l2 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D: long getCx()>();

        $l3 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D: long getCy()>();

        $r5 = new java.awt.geom.Rectangle2D$Double;

        $d0 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l0);

        $d1 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l1);

        $d2 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l2);

        $d3 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l3);

        specialinvoke $r5.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        return $r5;
    }

    public void setAnchor(java.awt.geom.Rectangle2D)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D r3, $r6;
        java.awt.geom.Rectangle2D r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D $r7;
        long $l4, $l5, $l6, $l7;
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        int $i0, $i1, $i2, $i3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D $r8;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties $r1, $r2, $r5;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        r4 := @parameter0: java.awt.geom.Rectangle2D;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties: boolean isSetXfrm()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr>;

        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D getXfrm()>();

        goto label2;

     label1:
        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr>;

        $r6 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D addNewXfrm()>();

     label2:
        r3 = $r6;

        $z1 = interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: boolean isSetOff()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D getOff()>();

        goto label4;

     label3:
        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D addNewOff()>();

     label4:
        $d0 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getX()>();

        $i0 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>($d0);

        $l6 = (long) $i0;

        $d1 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getY()>();

        $i1 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>($d1);

        $l7 = (long) $i1;

        interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D: void setX(long)>($l6);

        interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D: void setY(long)>($l7);

        $z2 = interfaceinvoke r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: boolean isSetExt()>();

        if $z2 == 0 goto label5;

        $r8 = interfaceinvoke r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D getExt()>();

        goto label6;

     label5:
        $r8 = interfaceinvoke r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D addNewExt()>();

     label6:
        $d2 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getWidth()>();

        $i2 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>($d2);

        $l4 = (long) $i2;

        $d3 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getHeight()>();

        $i3 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>($d3);

        $l5 = (long) $i3;

        interfaceinvoke $r8.<org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D: void setCx(long)>($l4);

        interfaceinvoke $r8.<org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D: void setCy(long)>($l5);

        return;
    }

    public java.awt.geom.Rectangle2D getInteriorAnchor()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D $r2;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D $r3;
        long $l0, $l1, $l2, $l3;
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D $r4;
        java.awt.geom.Rectangle2D$Double $r5;
        double $d0, $d1, $d2, $d3;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D getXfrm()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D getChOff()>();

        $l0 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D: long getX()>();

        $l1 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D: long getY()>();

        $r4 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D getChExt()>();

        $l2 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D: long getCx()>();

        $l3 = interfaceinvoke $r4.<org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D: long getCy()>();

        $r5 = new java.awt.geom.Rectangle2D$Double;

        $d0 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l0);

        $d1 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l1);

        $d2 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l2);

        $d3 = staticinvoke <org.apache.poi.util.Units: double toPoints(long)>($l3);

        specialinvoke $r5.<java.awt.geom.Rectangle2D$Double: void <init>(double,double,double,double)>($d0, $d1, $d2, $d3);

        return $r5;
    }

    public void setInteriorAnchor(java.awt.geom.Rectangle2D)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D r3, $r6;
        java.awt.geom.Rectangle2D r4;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D $r7;
        long $l4, $l5, $l6, $l7;
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        int $i0, $i1, $i2, $i3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D $r8;
        boolean $z0, $z1, $z2;
        double $d0, $d1, $d2, $d3;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties $r1, $r2, $r5;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        r4 := @parameter0: java.awt.geom.Rectangle2D;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr>;

        $z0 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties: boolean isSetXfrm()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr>;

        $r6 = interfaceinvoke $r5.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D getXfrm()>();

        goto label2;

     label1:
        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr>;

        $r6 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D addNewXfrm()>();

     label2:
        r3 = $r6;

        $z1 = interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: boolean isSetChOff()>();

        if $z1 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D getChOff()>();

        goto label4;

     label3:
        $r7 = interfaceinvoke $r6.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D addNewChOff()>();

     label4:
        $d0 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getX()>();

        $i0 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>($d0);

        $l6 = (long) $i0;

        $d1 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getY()>();

        $i1 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>($d1);

        $l7 = (long) $i1;

        interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D: void setX(long)>($l6);

        interfaceinvoke $r7.<org.openxmlformats.schemas.drawingml.x2006.main.CTPoint2D: void setY(long)>($l7);

        $z2 = interfaceinvoke r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: boolean isSetChExt()>();

        if $z2 == 0 goto label5;

        $r8 = interfaceinvoke r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D getChExt()>();

        goto label6;

     label5:
        $r8 = interfaceinvoke r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D addNewChExt()>();

     label6:
        $d2 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getWidth()>();

        $i2 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>($d2);

        $l4 = (long) $i2;

        $d3 = virtualinvoke r4.<java.awt.geom.Rectangle2D: double getHeight()>();

        $i3 = staticinvoke <org.apache.poi.util.Units: int toEMU(double)>($d3);

        $l5 = (long) $i3;

        interfaceinvoke $r8.<org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D: void setCx(long)>($l4);

        interfaceinvoke $r8.<org.openxmlformats.schemas.drawingml.x2006.main.CTPositiveSize2D: void setCy(long)>($l5);

        return;
    }

    public org.apache.poi.xslf.usermodel.XSLFShape[] getShapes()
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        java.util.List $r1, $r2;
        org.apache.poi.xslf.usermodel.XSLFShape[] $r3, $r5;
        java.lang.Object[] $r4;
        int $i0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: java.util.List _shapes>;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: java.util.List _shapes>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        $r3 = newarray (org.apache.poi.xslf.usermodel.XSLFShape)[$i0];

        $r4 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (org.apache.poi.xslf.usermodel.XSLFShape[]) $r4;

        return $r5;
    }

    public java.util.Iterator iterator()
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        java.util.List $r1;
        java.util.Iterator $r2;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: java.util.List _shapes>;

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

        return $r2;
    }

    public boolean removeShape(org.apache.poi.xslf.usermodel.XSLFShape)
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r7;
        org.apache.poi.xslf.usermodel.XSLFShape r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape $r8, $r10, $r12;
        org.apache.xmlbeans.XmlObject $r1;
        java.lang.String $r6;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r2;
        java.util.List $r9, $r11, $r13, $r14;
        java.lang.StringBuilder $r3, $r4, $r5;

        r7 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        r0 := @parameter0: org.apache.poi.xslf.usermodel.XSLFShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFShape: org.apache.xmlbeans.XmlObject getXmlObject()>();

        $z0 = $r1 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTShape;

        if $z0 == 0 goto label1;

        $r12 = r7.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _shape>;

        $r13 = interfaceinvoke $r12.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: java.util.List getSpList()>();

        interfaceinvoke $r13.<java.util.List: boolean remove(java.lang.Object)>($r1);

        goto label4;

     label1:
        $z1 = $r1 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape;

        if $z1 == 0 goto label2;

        $r10 = r7.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _shape>;

        $r11 = interfaceinvoke $r10.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: java.util.List getGrpSpList()>();

        interfaceinvoke $r11.<java.util.List: boolean remove(java.lang.Object)>($r1);

        goto label4;

     label2:
        $z2 = $r1 instanceof org.openxmlformats.schemas.presentationml.x2006.main.CTConnector;

        if $z2 == 0 goto label3;

        $r8 = r7.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _shape>;

        $r9 = interfaceinvoke $r8.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: java.util.List getCxnSpList()>();

        interfaceinvoke $r9.<java.util.List: boolean remove(java.lang.Object)>($r1);

        goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported shape: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label4:
        $r14 = r7.<org.apache.poi.xslf.usermodel.XSLFGroupShape: java.util.List _shapes>;

        $z3 = interfaceinvoke $r14.<java.util.List: boolean remove(java.lang.Object)>(r0);

        return $z3;
    }

    public java.lang.String getShapeName()
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps $r3;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShapeNonVisual $r2;
        java.lang.String $r4;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _shape>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShapeNonVisual getNvGrpSpPr()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShapeNonVisual: org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps getCNvPr()>();

        $r4 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps: java.lang.String getName()>();

        return $r4;
    }

    public int getShapeId()
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape $r1;
        org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps $r3;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShapeNonVisual $r2;
        int $i1;
        long $l0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _shape>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShapeNonVisual getNvGrpSpPr()>();

        $r3 = interfaceinvoke $r2.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShapeNonVisual: org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps getCNvPr()>();

        $l0 = interfaceinvoke $r3.<org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps: long getId()>();

        $i1 = (int) $l0;

        return $i1;
    }

    static org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape prototype(int)
    {
        long $l2;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape $r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps $r2;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShapeNonVisual $r1;
        int i0, $i1;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        i0 := @parameter0: int;

        $r0 = staticinvoke <org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape$Factory: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape newInstance()>();

        $r1 = interfaceinvoke $r0.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShapeNonVisual addNewNvGrpSpPr()>();

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShapeNonVisual: org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps addNewCNvPr()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Group ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps: void setName(java.lang.String)>($r6);

        $i1 = i0 + 1;

        $l2 = (long) $i1;

        interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualDrawingProps: void setId(long)>($l2);

        interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShapeNonVisual: org.openxmlformats.schemas.drawingml.x2006.main.CTNonVisualGroupDrawingShapeProps addNewCNvGrpSpPr()>();

        interfaceinvoke $r1.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShapeNonVisual: org.openxmlformats.schemas.presentationml.x2006.main.CTApplicationNonVisualDrawingProps addNewNvPr()>();

        interfaceinvoke $r0.<org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties addNewGrpSpPr()>();

        return $r0;
    }

    private org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape $r4;
        org.apache.poi.xslf.usermodel.XSLFSheet $r5;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r1, $r2, $r3;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFDrawing _drawing>;

        if $r1 != null goto label1;

        $r3 = new org.apache.poi.xslf.usermodel.XSLFDrawing;

        $r5 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFSheet _sheet>;

        $r4 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape _shape>;

        specialinvoke $r3.<org.apache.poi.xslf.usermodel.XSLFDrawing: void <init>(org.apache.poi.xslf.usermodel.XSLFSheet,org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape)>($r5, $r4);

        r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFDrawing _drawing> = $r3;

     label1:
        $r2 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFDrawing _drawing>;

        return $r2;
    }

    public org.apache.poi.xslf.usermodel.XSLFAutoShape createAutoShape()
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        java.util.List $r3;
        org.apache.poi.xslf.usermodel.XSLFAutoShape $r2;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFDrawing: org.apache.poi.xslf.usermodel.XSLFAutoShape createAutoShape()>();

        $r3 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: java.util.List _shapes>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        return $r2;
    }

    public org.apache.poi.xslf.usermodel.XSLFFreeformShape createFreeform()
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        java.util.List $r3;
        org.apache.poi.xslf.usermodel.XSLFFreeformShape $r2;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFDrawing: org.apache.poi.xslf.usermodel.XSLFFreeformShape createFreeform()>();

        $r3 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: java.util.List _shapes>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        return $r2;
    }

    public org.apache.poi.xslf.usermodel.XSLFTextBox createTextBox()
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.apache.poi.xslf.usermodel.XSLFTextBox $r2;
        java.util.List $r3;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFDrawing: org.apache.poi.xslf.usermodel.XSLFTextBox createTextBox()>();

        $r3 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: java.util.List _shapes>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        return $r2;
    }

    public org.apache.poi.xslf.usermodel.XSLFConnectorShape createConnector()
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        java.util.List $r3;
        org.apache.poi.xslf.usermodel.XSLFConnectorShape $r2;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFDrawing: org.apache.poi.xslf.usermodel.XSLFConnectorShape createConnector()>();

        $r3 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: java.util.List _shapes>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        return $r2;
    }

    public org.apache.poi.xslf.usermodel.XSLFGroupShape createGroup()
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0, $r2;
        java.util.List $r3;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()>();

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFDrawing: org.apache.poi.xslf.usermodel.XSLFGroupShape createGroup()>();

        $r3 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: java.util.List _shapes>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2);

        return $r2;
    }

    public org.apache.poi.xslf.usermodel.XSLFPictureShape createPicture(int)
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.apache.poi.xslf.usermodel.XSLFSheet $r1, $r13;
        org.apache.poi.openxml4j.opc.PackagePart $r2, r12, $r14;
        org.apache.poi.openxml4j.opc.PackagePartName $r15;
        java.util.List $r10, $r23;
        org.apache.poi.openxml4j.opc.OPCPackage $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r25, $r26, $r27, $r28;
        java.util.regex.Pattern $r9;
        org.apache.poi.xslf.usermodel.XSLFDrawing $r20;
        org.apache.poi.openxml4j.opc.PackageRelationship $r19;
        org.apache.poi.xslf.usermodel.XSLFRelation $r16;
        int i0, $i1, $i2;
        java.lang.String $r8, $r18, $r21, $r29;
        java.lang.IllegalArgumentException $r24;
        org.apache.poi.xslf.usermodel.XSLFPictureShape $r22;
        org.apache.poi.openxml4j.opc.TargetMode $r17;
        java.lang.Object $r11;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFSheet _sheet>;

        $r2 = virtualinvoke $r1.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r3 = virtualinvoke $r2.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.OPCPackage getPackage()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/ppt/media/image");

        $i1 = i0 + 1;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".*?");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r8);

        $r10 = virtualinvoke $r3.<org.apache.poi.openxml4j.opc.OPCPackage: java.util.List getPartsByName(java.util.regex.Pattern)>($r9);

        $i2 = interfaceinvoke $r10.<java.util.List: int size()>();

        if $i2 != 0 goto label1;

        $r24 = new java.lang.IllegalArgumentException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Picture with index=");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not found");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29);

        throw $r24;

     label1:
        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(0);

        r12 = (org.apache.poi.openxml4j.opc.PackagePart) $r11;

        $r13 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFSheet _sheet>;

        $r14 = virtualinvoke $r13.<org.apache.poi.xslf.usermodel.XSLFSheet: org.apache.poi.openxml4j.opc.PackagePart getPackagePart()>();

        $r15 = virtualinvoke r12.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackagePartName getPartName()>();

        $r17 = <org.apache.poi.openxml4j.opc.TargetMode: org.apache.poi.openxml4j.opc.TargetMode INTERNAL>;

        $r16 = <org.apache.poi.xslf.usermodel.XSLFRelation: org.apache.poi.xslf.usermodel.XSLFRelation IMAGES>;

        $r18 = virtualinvoke $r16.<org.apache.poi.xslf.usermodel.XSLFRelation: java.lang.String getRelation()>();

        $r19 = virtualinvoke $r14.<org.apache.poi.openxml4j.opc.PackagePart: org.apache.poi.openxml4j.opc.PackageRelationship addRelationship(org.apache.poi.openxml4j.opc.PackagePartName,org.apache.poi.openxml4j.opc.TargetMode,java.lang.String)>($r15, $r17, $r18);

        $r20 = specialinvoke r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFDrawing getDrawing()>();

        $r21 = virtualinvoke $r19.<org.apache.poi.openxml4j.opc.PackageRelationship: java.lang.String getId()>();

        $r22 = virtualinvoke $r20.<org.apache.poi.xslf.usermodel.XSLFDrawing: org.apache.poi.xslf.usermodel.XSLFPictureShape createPicture(java.lang.String)>($r21);

        virtualinvoke $r22.<org.apache.poi.xslf.usermodel.XSLFPictureShape: void resize()>();

        $r23 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: java.util.List _shapes>;

        interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r22);

        return $r22;
    }

    public void setFlipHorizontal(boolean)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties $r1;
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D $r2;
        boolean z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D getXfrm()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: void setFlipH(boolean)>(z0);

        return;
    }

    public void setFlipVertical(boolean)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties $r1;
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D $r2;
        boolean z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        z0 := @parameter0: boolean;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D getXfrm()>();

        interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: void setFlipV(boolean)>(z0);

        return;
    }

    public boolean getFlipHorizontal()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties $r1;
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D getXfrm()>();

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: boolean getFlipH()>();

        return $z0;
    }

    public boolean getFlipVertical()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties $r1;
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D $r2;
        boolean $z0;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D getXfrm()>();

        $z0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: boolean getFlipV()>();

        return $z0;
    }

    public void setRotation(double)
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties $r1;
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D $r2;
        int $i0;
        double d0, $d1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D getXfrm()>();

        $d1 = d0 * 60000.0;

        $i0 = (int) $d1;

        interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: void setRot(int)>($i0);

        return;
    }

    public double getRotation()
    {
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties $r1;
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D $r2;
        int $i0;
        double $d0, $d1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties _spPr>;

        $r2 = interfaceinvoke $r1.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupShapeProperties: org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D getXfrm()>();

        $i0 = interfaceinvoke $r2.<org.openxmlformats.schemas.drawingml.x2006.main.CTGroupTransform2D: int getRot()>();

        $d0 = (double) $i0;

        $d1 = $d0 / 60000.0;

        return $d1;
    }

    public void draw(java.awt.Graphics2D)
    {
        java.awt.geom.Rectangle2D $r1, $r2;
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        byte $b0, $b1;
        java.awt.geom.AffineTransform r6, $r7, $r11;
        org.apache.poi.xslf.usermodel.XSLFRenderingHint $r4, $r9, $r12, $r14;
        org.apache.poi.xslf.usermodel.XSLFShape r10;
        java.awt.Graphics2D r3;
        int $i2, i3;
        java.lang.Boolean $r13, $r15;
        double $d0, $d1, $d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14;
        org.apache.poi.xslf.usermodel.XSLFShape[] $r8;
        java.lang.Object $r5;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        r3 := @parameter0: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: java.awt.geom.Rectangle2D getInteriorAnchor()>();

        $r2 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: java.awt.geom.Rectangle2D getAnchor()>();

        $r4 = <org.apache.poi.xslf.usermodel.XSLFRenderingHint: org.apache.poi.xslf.usermodel.XSLFRenderingHint GROUP_TRANSFORM>;

        $r5 = virtualinvoke r3.<java.awt.Graphics2D: java.lang.Object getRenderingHint(java.awt.RenderingHints$Key)>($r4);

        r6 = (java.awt.geom.AffineTransform) $r5;

        $r7 = new java.awt.geom.AffineTransform;

        specialinvoke $r7.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r6);

        $d0 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: double getWidth()>();

        $b0 = $d0 cmpl 0.0;

        if $b0 != 0 goto label1;

        $d13 = 1.0;

        goto label2;

     label1:
        $d1 = virtualinvoke $r2.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d2 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d13 = $d1 / $d2;

     label2:
        d3 = $d13;

        $d4 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: double getHeight()>();

        $b1 = $d4 cmpl 0.0;

        if $b1 != 0 goto label3;

        $d14 = 1.0;

        goto label4;

     label3:
        $d5 = virtualinvoke $r2.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d6 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: double getHeight()>();

        $d14 = $d5 / $d6;

     label4:
        $d7 = virtualinvoke $r2.<java.awt.geom.Rectangle2D: double getX()>();

        $d8 = virtualinvoke $r2.<java.awt.geom.Rectangle2D: double getY()>();

        virtualinvoke r6.<java.awt.geom.AffineTransform: void translate(double,double)>($d7, $d8);

        virtualinvoke r6.<java.awt.geom.AffineTransform: void scale(double,double)>(d3, $d14);

        $d9 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: double getX()>();

        $d10 = neg $d9;

        $d11 = virtualinvoke $r1.<java.awt.geom.Rectangle2D: double getY()>();

        $d12 = neg $d11;

        virtualinvoke r6.<java.awt.geom.AffineTransform: void translate(double,double)>($d10, $d12);

        $r8 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFShape[] getShapes()>();

        $i2 = lengthof $r8;

        i3 = 0;

     label5:
        if i3 >= $i2 goto label6;

        r10 = $r8[i3];

        $r11 = virtualinvoke r3.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>();

        $r12 = <org.apache.poi.xslf.usermodel.XSLFRenderingHint: org.apache.poi.xslf.usermodel.XSLFRenderingHint GSAVE>;

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r3.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r12, $r13);

        virtualinvoke r10.<org.apache.poi.xslf.usermodel.XSLFShape: void applyTransform(java.awt.Graphics2D)>(r3);

        virtualinvoke r10.<org.apache.poi.xslf.usermodel.XSLFShape: void draw(java.awt.Graphics2D)>(r3);

        virtualinvoke r3.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r11);

        $r14 = <org.apache.poi.xslf.usermodel.XSLFRenderingHint: org.apache.poi.xslf.usermodel.XSLFRenderingHint GRESTORE>;

        $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke r3.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r14, $r15);

        i3 = i3 + 1;

        goto label5;

     label6:
        $r9 = <org.apache.poi.xslf.usermodel.XSLFRenderingHint: org.apache.poi.xslf.usermodel.XSLFRenderingHint GROUP_TRANSFORM>;

        virtualinvoke r3.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r9, $r7);

        return;
    }

    void copy(org.apache.poi.xslf.usermodel.XSLFShape)
    {
        org.apache.poi.xslf.usermodel.XSLFShape[] $r3, $r4;
        org.apache.poi.xslf.usermodel.XSLFGroupShape r1, r2;
        org.apache.poi.xslf.usermodel.XSLFShape r0, r5, r6;
        int $i0, i1;

        r2 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        r0 := @parameter0: org.apache.poi.xslf.usermodel.XSLFShape;

        r1 = (org.apache.poi.xslf.usermodel.XSLFGroupShape) r0;

        $r3 = virtualinvoke r2.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFShape[] getShapes()>();

        $r4 = virtualinvoke r1.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFShape[] getShapes()>();

        i1 = 0;

     label1:
        $i0 = lengthof $r3;

        if i1 >= $i0 goto label2;

        r5 = $r4[i1];

        r6 = $r3[i1];

        virtualinvoke r6.<org.apache.poi.xslf.usermodel.XSLFShape: void copy(org.apache.poi.xslf.usermodel.XSLFShape)>(r5);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void clear()
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.apache.poi.xslf.usermodel.XSLFShape r2;
        org.apache.poi.xslf.usermodel.XSLFShape[] $r1;
        int i0, i1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.apache.poi.xslf.usermodel.XSLFShape[] getShapes()>();

        i0 = lengthof $r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = $r1[i1];

        virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: boolean removeShape(org.apache.poi.xslf.usermodel.XSLFShape)>(r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public volatile org.apache.xmlbeans.XmlObject getXmlObject()
    {
        org.apache.poi.xslf.usermodel.XSLFGroupShape r0;
        org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape $r1;

        r0 := @this: org.apache.poi.xslf.usermodel.XSLFGroupShape;

        $r1 = virtualinvoke r0.<org.apache.poi.xslf.usermodel.XSLFGroupShape: org.openxmlformats.schemas.presentationml.x2006.main.CTGroupShape getXmlObject()>();

        return $r1;
    }
}
