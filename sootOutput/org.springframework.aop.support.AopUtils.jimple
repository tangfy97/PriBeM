public abstract class org.springframework.aop.support.AopUtils extends java.lang.Object
{

    public void <init>()
    {
        org.springframework.aop.support.AopUtils r0;

        r0 := @this: org.springframework.aop.support.AopUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean isAopProxy(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.springframework.aop.SpringProxy;

        if $z0 == 0 goto label2;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>($r1);

        if $z1 != 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z2 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isCglibProxyClass(java.lang.Class)>($r2);

        if $z2 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static boolean isJdkDynamicProxy(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.springframework.aop.SpringProxy;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>($r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isCglibProxy(java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.Class $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.springframework.aop.SpringProxy;

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isCglibProxyClass(java.lang.Class)>($r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isCglibProxyClass(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $z0 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isCglibProxyClassName(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static boolean isCglibProxyClassName(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        if r0 == null goto label1;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("$$");

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.lang.Class getTargetClass(java.lang.Object)
    {
        org.springframework.aop.TargetClassAware $r2;
        java.lang.Object r0;
        java.lang.Class $r1, r3, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Candidate object must not be null");

        r3 = null;

        $z0 = r0 instanceof org.springframework.aop.TargetClassAware;

        if $z0 == 0 goto label1;

        $r2 = (org.springframework.aop.TargetClassAware) r0;

        r3 = interfaceinvoke $r2.<org.springframework.aop.TargetClassAware: java.lang.Class getTargetClass()>();

     label1:
        if r3 != null goto label4;

        $z1 = staticinvoke <org.springframework.aop.support.AopUtils: boolean isCglibProxy(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label3;

     label2:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label3:
        r3 = $r4;

     label4:
        return r3;
    }

    public static boolean isEqualsMethod(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        $z0 = staticinvoke <org.springframework.util.ReflectionUtils: boolean isEqualsMethod(java.lang.reflect.Method)>(r0);

        return $z0;
    }

    public static boolean isHashCodeMethod(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        $z0 = staticinvoke <org.springframework.util.ReflectionUtils: boolean isHashCodeMethod(java.lang.reflect.Method)>(r0);

        return $z0;
    }

    public static boolean isToStringMethod(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        $z0 = staticinvoke <org.springframework.util.ReflectionUtils: boolean isToStringMethod(java.lang.reflect.Method)>(r0);

        return $z0;
    }

    public static boolean isFinalizeMethod(java.lang.reflect.Method)
    {
        int $i0;
        java.lang.Class[] $r2;
        java.lang.String $r1;
        java.lang.reflect.Method r0;
        boolean $z0;

        r0 := @parameter0: java.lang.reflect.Method;

        if r0 == null goto label1;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("finalize");

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public static java.lang.reflect.Method getMostSpecificMethod(java.lang.reflect.Method, java.lang.Class)
    {
        java.lang.Class r1;
        java.lang.reflect.Method r0, $r2, $r3;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 := @parameter1: java.lang.Class;

        $r2 = staticinvoke <org.springframework.util.ClassUtils: java.lang.reflect.Method getMostSpecificMethod(java.lang.reflect.Method,java.lang.Class)>(r0, r1);

        $r3 = staticinvoke <org.springframework.core.BridgeMethodResolver: java.lang.reflect.Method findBridgedMethod(java.lang.reflect.Method)>($r2);

        return $r3;
    }

    public static boolean canApply(org.springframework.aop.Pointcut, java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.aop.Pointcut r0;
        boolean $z0;

        r0 := @parameter0: org.springframework.aop.Pointcut;

        r1 := @parameter1: java.lang.Class;

        $z0 = staticinvoke <org.springframework.aop.support.AopUtils: boolean canApply(org.springframework.aop.Pointcut,java.lang.Class,boolean)>(r0, r1, 0);

        return $z0;
    }

    public static boolean canApply(org.springframework.aop.Pointcut, java.lang.Class, boolean)
    {
        org.springframework.aop.Pointcut r0;
        java.lang.reflect.Method[] $r9;
        java.util.HashSet $r4;
        int i0, i1;
        java.lang.reflect.Method r10;
        org.springframework.aop.MethodMatcher $r3;
        boolean $z0, $z1, $z2, $z3, z4, $z5;
        java.util.Iterator $r6;
        java.util.Set $r5;
        org.springframework.aop.ClassFilter $r1;
        org.springframework.aop.IntroductionAwareMethodMatcher r11;
        java.lang.Class r2, r8;
        java.lang.Object $r7;

        r0 := @parameter0: org.springframework.aop.Pointcut;

        r2 := @parameter1: java.lang.Class;

        z4 := @parameter2: boolean;

        $r1 = interfaceinvoke r0.<org.springframework.aop.Pointcut: org.springframework.aop.ClassFilter getClassFilter()>();

        $z0 = interfaceinvoke $r1.<org.springframework.aop.ClassFilter: boolean matches(java.lang.Class)>(r2);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r3 = interfaceinvoke r0.<org.springframework.aop.Pointcut: org.springframework.aop.MethodMatcher getMethodMatcher()>();

        r11 = null;

        $z1 = $r3 instanceof org.springframework.aop.IntroductionAwareMethodMatcher;

        if $z1 == 0 goto label2;

        r11 = (org.springframework.aop.IntroductionAwareMethodMatcher) $r3;

     label2:
        $r4 = new java.util.HashSet;

        $r5 = staticinvoke <org.springframework.util.ClassUtils: java.util.Set getAllInterfacesForClassAsSet(java.lang.Class)>(r2);

        specialinvoke $r4.<java.util.HashSet: void <init>(java.util.Collection)>($r5);

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r2);

        $r6 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label9;

     label3:
        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.Class) $r7;

        $r9 = virtualinvoke r8.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        i0 = lengthof $r9;

        i1 = 0;

        goto label8;

     label4:
        r10 = $r9[i1];

        if r11 == null goto label5;

        $z5 = interfaceinvoke r11.<org.springframework.aop.IntroductionAwareMethodMatcher: boolean matches(java.lang.reflect.Method,java.lang.Class,boolean)>(r10, r2, z4);

        if $z5 != 0 goto label6;

     label5:
        $z3 = interfaceinvoke $r3.<org.springframework.aop.MethodMatcher: boolean matches(java.lang.reflect.Method,java.lang.Class)>(r10, r2);

        if $z3 == 0 goto label7;

     label6:
        return 1;

     label7:
        i1 = i1 + 1;

     label8:
        if i1 < i0 goto label4;

     label9:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label3;

        return 0;
    }

    public static boolean canApply(org.springframework.aop.Advisor, java.lang.Class)
    {
        java.lang.Class r1;
        org.springframework.aop.Advisor r0;
        boolean $z0;

        r0 := @parameter0: org.springframework.aop.Advisor;

        r1 := @parameter1: java.lang.Class;

        $z0 = staticinvoke <org.springframework.aop.support.AopUtils: boolean canApply(org.springframework.aop.Advisor,java.lang.Class,boolean)>(r0, r1, 0);

        return $z0;
    }

    public static boolean canApply(org.springframework.aop.Advisor, java.lang.Class, boolean)
    {
        org.springframework.aop.PointcutAdvisor r1;
        org.springframework.aop.Pointcut $r2;
        org.springframework.aop.IntroductionAdvisor $r4;
        org.springframework.aop.ClassFilter $r5;
        java.lang.Class r3;
        org.springframework.aop.Advisor r0;
        boolean $z0, $z1, z2, $z3, $z4;

        r0 := @parameter0: org.springframework.aop.Advisor;

        r3 := @parameter1: java.lang.Class;

        z2 := @parameter2: boolean;

        $z0 = r0 instanceof org.springframework.aop.IntroductionAdvisor;

        if $z0 == 0 goto label1;

        $r4 = (org.springframework.aop.IntroductionAdvisor) r0;

        $r5 = interfaceinvoke $r4.<org.springframework.aop.IntroductionAdvisor: org.springframework.aop.ClassFilter getClassFilter()>();

        $z4 = interfaceinvoke $r5.<org.springframework.aop.ClassFilter: boolean matches(java.lang.Class)>(r3);

        return $z4;

     label1:
        $z1 = r0 instanceof org.springframework.aop.PointcutAdvisor;

        if $z1 == 0 goto label2;

        r1 = (org.springframework.aop.PointcutAdvisor) r0;

        $r2 = interfaceinvoke r1.<org.springframework.aop.PointcutAdvisor: org.springframework.aop.Pointcut getPointcut()>();

        $z3 = staticinvoke <org.springframework.aop.support.AopUtils: boolean canApply(org.springframework.aop.Pointcut,java.lang.Class,boolean)>($r2, r3, z2);

        return $z3;

     label2:
        return 1;
    }

    public static java.util.List findAdvisorsThatCanApply(java.util.List, java.lang.Class)
    {
        java.util.LinkedList $r1;
        org.springframework.aop.Advisor r7, r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, $z9;
        java.util.Iterator $r2, $r5;
        java.util.List r0;
        java.lang.Object $r3, $r6;
        java.lang.Class r4;

        r0 := @parameter0: java.util.List;

        r4 := @parameter1: java.lang.Class;

        $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.springframework.aop.Advisor) $r3;

        $z1 = r7 instanceof org.springframework.aop.IntroductionAdvisor;

        if $z1 == 0 goto label3;

        $z2 = staticinvoke <org.springframework.aop.support.AopUtils: boolean canApply(org.springframework.aop.Advisor,java.lang.Class)>(r7, r4);

        if $z2 == 0 goto label3;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r7);

     label3:
        $z6 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label2;

        $z3 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label4;

        $z7 = 0;

        goto label5;

     label4:
        $z7 = 1;

     label5:
        z8 = $z7;

        $r5 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

        goto label8;

     label6:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.springframework.aop.Advisor) $r6;

        $z4 = r8 instanceof org.springframework.aop.IntroductionAdvisor;

        if $z4 == 0 goto label7;

        goto label8;

     label7:
        $z5 = staticinvoke <org.springframework.aop.support.AopUtils: boolean canApply(org.springframework.aop.Advisor,java.lang.Class,boolean)>(r8, r4, z8);

        if $z5 == 0 goto label8;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>(r8);

     label8:
        $z9 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z9 != 0 goto label6;

        return $r1;
    }

    public static java.lang.Object invokeJoinpointUsingReflection(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Throwable $r19;
        java.lang.Object[] r2;
        java.lang.String $r9, $r17;
        java.lang.reflect.Method r0;
        org.springframework.aop.AopInvocationException $r5, $r11;
        java.lang.IllegalAccessException $r4;
        java.lang.IllegalArgumentException $r10;
        java.lang.reflect.InvocationTargetException $r18;
        java.lang.Object r1, $r3;
        java.lang.StringBuilder $r6, $r7, $r8, $r12, $r13, $r14, $r15, $r16;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.lang.reflect.Method;

        r2 := @parameter2: java.lang.Object[];

     label1:
        staticinvoke <org.springframework.util.ReflectionUtils: void makeAccessible(java.lang.reflect.Method)>(r0);

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, r2);

     label2:
        return $r3;

     label3:
        $r18 := @caughtexception;

        $r19 = virtualinvoke $r18.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>();

        throw $r19;

     label4:
        $r10 := @caughtexception;

        $r11 = new org.springframework.aop.AopInvocationException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("AOP configuration seems to be invalid: tried calling method [");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] on target [");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.springframework.aop.AopInvocationException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r10);

        throw $r11;

     label5:
        $r4 := @caughtexception;

        $r5 = new org.springframework.aop.AopInvocationException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Could not access method [");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.springframework.aop.AopInvocationException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r4);

        throw $r5;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label3;
        catch java.lang.IllegalArgumentException from label1 to label2 with label4;
        catch java.lang.IllegalAccessException from label1 to label2 with label5;
    }
}
