final class com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingMapAdapter extends com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap implements java.io.Serializable
{
    private static final long serialVersionUID;

    void <init>(com.mycila.inject.internal.guava.collect.MapMaker, com.mycila.inject.internal.guava.base.Function)
    {
        com.mycila.inject.internal.guava.base.Function r2;
        com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingMapAdapter r0;
        com.mycila.inject.internal.guava.collect.MapMaker r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingMapAdapter;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.MapMaker;

        r2 := @parameter1: com.mycila.inject.internal.guava.base.Function;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap: void <init>(com.mycila.inject.internal.guava.collect.MapMaker,com.mycila.inject.internal.guava.base.Function)>(r1, r2);

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.Throwable $r12;
        com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingMapAdapter r0;
        java.lang.NullPointerException $r3;
        java.util.concurrent.ExecutionException $r11;
        java.lang.Object r1, $r2;
        java.lang.StringBuilder $r4, $r6, $r7, $r8, $r9;
        com.mycila.inject.internal.guava.base.Function $r5;
        java.lang.String $r10;
        com.mycila.inject.internal.guava.collect.ComputationException $r13;

        r0 := @this: com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingMapAdapter;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingMapAdapter: java.lang.Object getOrCompute(java.lang.Object)>(r1);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = virtualinvoke $r11.<java.util.concurrent.ExecutionException: java.lang.Throwable getCause()>();

        staticinvoke <com.mycila.inject.internal.guava.base.Throwables: void propagateIfInstanceOf(java.lang.Throwable,java.lang.Class)>($r12, class "Lcom/mycila/inject/internal/guava/collect/ComputationException;");

        $r13 = new com.mycila.inject.internal.guava.collect.ComputationException;

        specialinvoke $r13.<com.mycila.inject.internal.guava.collect.ComputationException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

     label4:
        if $r2 != null goto label5;

        $r3 = new java.lang.NullPointerException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingMapAdapter: com.mycila.inject.internal.guava.base.Function computingFunction>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned null for key ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>($r10);

        throw $r3;

     label5:
        return $r2;

        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    volatile com.mycila.inject.internal.guava.collect.CustomConcurrentHashMap$Segment segmentFor(int)
    {
        int i0;
        com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment $r1;
        com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingMapAdapter r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingMapAdapter;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap: com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingSegment segmentFor(int)>(i0);

        return $r1;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.ComputingConcurrentHashMap$ComputingMapAdapter: long serialVersionUID> = 0L;

        return;
    }
}
