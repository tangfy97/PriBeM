final class com.sun.xml.bind.v2.schemagen.Tree$Group extends com.sun.xml.bind.v2.schemagen.Tree
{
    private final com.sun.xml.bind.v2.schemagen.GroupKind kind;
    private final com.sun.xml.bind.v2.schemagen.Tree[] children;

    private transient void <init>(com.sun.xml.bind.v2.schemagen.GroupKind, com.sun.xml.bind.v2.schemagen.Tree[])
    {
        com.sun.xml.bind.v2.schemagen.Tree[] r2;
        com.sun.xml.bind.v2.schemagen.Tree$Group r0;
        com.sun.xml.bind.v2.schemagen.GroupKind r1;

        r0 := @this: com.sun.xml.bind.v2.schemagen.Tree$Group;

        r1 := @parameter0: com.sun.xml.bind.v2.schemagen.GroupKind;

        r2 := @parameter1: com.sun.xml.bind.v2.schemagen.Tree[];

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.Tree: void <init>()>();

        r0.<com.sun.xml.bind.v2.schemagen.Tree$Group: com.sun.xml.bind.v2.schemagen.GroupKind kind> = r1;

        r0.<com.sun.xml.bind.v2.schemagen.Tree$Group: com.sun.xml.bind.v2.schemagen.Tree[] children> = r2;

        return;
    }

    boolean canBeTopLevel()
    {
        com.sun.xml.bind.v2.schemagen.Tree$Group r0;

        r0 := @this: com.sun.xml.bind.v2.schemagen.Tree$Group;

        return 1;
    }

    boolean isNullable()
    {
        com.sun.xml.bind.v2.schemagen.Tree[] r3, r5;
        com.sun.xml.bind.v2.schemagen.Tree$Group r0;
        com.sun.xml.bind.v2.schemagen.GroupKind $r1, $r2;
        int i0, i1, i2, i3;
        com.sun.xml.bind.v2.schemagen.Tree r4, r6;
        boolean $z0, $z1;

        r0 := @this: com.sun.xml.bind.v2.schemagen.Tree$Group;

        $r2 = r0.<com.sun.xml.bind.v2.schemagen.Tree$Group: com.sun.xml.bind.v2.schemagen.GroupKind kind>;

        $r1 = <com.sun.xml.bind.v2.schemagen.GroupKind: com.sun.xml.bind.v2.schemagen.GroupKind CHOICE>;

        if $r2 != $r1 goto label4;

        r3 = r0.<com.sun.xml.bind.v2.schemagen.Tree$Group: com.sun.xml.bind.v2.schemagen.Tree[] children>;

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r4 = r3[i1];

        $z1 = virtualinvoke r4.<com.sun.xml.bind.v2.schemagen.Tree: boolean isNullable()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;

     label4:
        r5 = r0.<com.sun.xml.bind.v2.schemagen.Tree$Group: com.sun.xml.bind.v2.schemagen.Tree[] children>;

        i2 = lengthof r5;

        i3 = 0;

     label5:
        if i3 >= i2 goto label7;

        r6 = r5[i3];

        $z0 = virtualinvoke r6.<com.sun.xml.bind.v2.schemagen.Tree: boolean isNullable()>();

        if $z0 != 0 goto label6;

        return 0;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        return 1;
    }

    protected void write(com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer, boolean, boolean)
    {
        com.sun.xml.bind.v2.schemagen.Tree[] r4;
        com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer r1;
        com.sun.xml.bind.v2.schemagen.Tree$Group r0;
        com.sun.xml.bind.v2.schemagen.GroupKind $r2;
        int i0, i1;
        com.sun.xml.bind.v2.schemagen.xmlschema.Particle $r3;
        com.sun.xml.bind.v2.schemagen.Tree r5;
        boolean z0, z1;

        r0 := @this: com.sun.xml.bind.v2.schemagen.Tree$Group;

        r1 := @parameter0: com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = r0.<com.sun.xml.bind.v2.schemagen.Tree$Group: com.sun.xml.bind.v2.schemagen.GroupKind kind>;

        $r3 = virtualinvoke $r2.<com.sun.xml.bind.v2.schemagen.GroupKind: com.sun.xml.bind.v2.schemagen.xmlschema.Particle write(com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer)>(r1);

        virtualinvoke r0.<com.sun.xml.bind.v2.schemagen.Tree$Group: void writeOccurs(com.sun.xml.bind.v2.schemagen.xmlschema.Occurs,boolean,boolean)>($r3, z0, z1);

        r4 = r0.<com.sun.xml.bind.v2.schemagen.Tree$Group: com.sun.xml.bind.v2.schemagen.Tree[] children>;

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r5 = r4[i1];

        virtualinvoke r5.<com.sun.xml.bind.v2.schemagen.Tree: void write(com.sun.xml.bind.v2.schemagen.xmlschema.ContentModelContainer,boolean,boolean)>($r3, 0, 0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    static com.sun.xml.bind.v2.schemagen.GroupKind access$200(com.sun.xml.bind.v2.schemagen.Tree$Group)
    {
        com.sun.xml.bind.v2.schemagen.Tree$Group r0;
        com.sun.xml.bind.v2.schemagen.GroupKind $r1;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.Tree$Group;

        $r1 = r0.<com.sun.xml.bind.v2.schemagen.Tree$Group: com.sun.xml.bind.v2.schemagen.GroupKind kind>;

        return $r1;
    }

    static com.sun.xml.bind.v2.schemagen.Tree[] access$300(com.sun.xml.bind.v2.schemagen.Tree$Group)
    {
        com.sun.xml.bind.v2.schemagen.Tree[] $r1;
        com.sun.xml.bind.v2.schemagen.Tree$Group r0;

        r0 := @parameter0: com.sun.xml.bind.v2.schemagen.Tree$Group;

        $r1 = r0.<com.sun.xml.bind.v2.schemagen.Tree$Group: com.sun.xml.bind.v2.schemagen.Tree[] children>;

        return $r1;
    }

    void <init>(com.sun.xml.bind.v2.schemagen.GroupKind, com.sun.xml.bind.v2.schemagen.Tree[], com.sun.xml.bind.v2.schemagen.Tree$1)
    {
        com.sun.xml.bind.v2.schemagen.Tree[] r2;
        com.sun.xml.bind.v2.schemagen.Tree$Group r0;
        com.sun.xml.bind.v2.schemagen.GroupKind r1;
        com.sun.xml.bind.v2.schemagen.Tree$1 r3;

        r0 := @this: com.sun.xml.bind.v2.schemagen.Tree$Group;

        r1 := @parameter0: com.sun.xml.bind.v2.schemagen.GroupKind;

        r2 := @parameter1: com.sun.xml.bind.v2.schemagen.Tree[];

        r3 := @parameter2: com.sun.xml.bind.v2.schemagen.Tree$1;

        specialinvoke r0.<com.sun.xml.bind.v2.schemagen.Tree$Group: void <init>(com.sun.xml.bind.v2.schemagen.GroupKind,com.sun.xml.bind.v2.schemagen.Tree[])>(r1, r2);

        return;
    }
}
