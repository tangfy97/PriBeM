public class org.waveprotocol.wave.model.richtext.RichTextMutationBuilder extends java.lang.Object
{
    private static final java.lang.String TYPE_ATTR;
    private static final java.lang.String LI_STYLE_ATTR;
    private static final java.lang.String INDENT_ATTR;
    private static final java.lang.String STYLE_KEY_FONT_WEIGHT;
    private static final java.lang.String STYLE_KEY_FONT_STYLE;
    private static final java.lang.String STYLE_KEY_TEXT_DECORATION;
    private static final java.lang.String STYLE_KEY_COLOR;
    private static final java.lang.String STYLE_KEY_BG_COLOR;
    private static final java.lang.String STYLE_KEY_FONT_FAMILY;
    private static final org.waveprotocol.wave.model.util.StringMap defaultAnnotations;
    private final java.util.Map startedAnnotations;
    private int offset;
    private final java.util.List structureStack;
    private int elementCount;
    private int lastGoodCursorOffset;
    private int indentationLevel;
    private boolean isFirstToken;
    private final org.waveprotocol.wave.model.util.StringSet affectedKeys;
    private final org.waveprotocol.wave.model.util.StringMap defaultValueMap;

    public void <init>()
    {
        org.waveprotocol.wave.model.util.StringMap $r1;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void <init>(org.waveprotocol.wave.model.util.StringMap)>($r1);

        return;
    }

    public void <init>(org.waveprotocol.wave.model.util.StringMap)
    {
        org.waveprotocol.wave.model.util.StringSet $r3;
        java.util.HashMap $r1;
        org.waveprotocol.wave.model.util.StringMap r4;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r0;
        java.util.ArrayList $r2;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        r4 := @parameter0: org.waveprotocol.wave.model.util.StringMap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.Map startedAnnotations> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.List structureStack> = $r2;

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int indentationLevel> = 0;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet createStringSet()>();

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringSet affectedKeys> = $r3;

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringMap defaultValueMap> = r4;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void reset()>();

        return;
    }

    private final void reset()
    {
        java.util.List $r1;
        org.waveprotocol.wave.model.util.StringSet $r3;
        java.util.Map $r2;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int offset> = 0;

        $r1 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.List structureStack>;

        interfaceinvoke $r1.<java.util.List: void clear()>();

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int elementCount> = 0;

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int lastGoodCursorOffset> = 0;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.Map startedAnnotations>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringSet affectedKeys>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.util.StringSet: void clear()>();

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: boolean isFirstToken> = 1;

        return;
    }

    public int getLastGoodCursorOffset()
    {
        int $i0;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        $i0 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int lastGoodCursorOffset>;

        return $i0;
    }

    public org.waveprotocol.wave.model.util.ReadableStringSet applyMutations(org.waveprotocol.wave.model.richtext.RichTextTokenizer, org.waveprotocol.wave.model.document.operation.Nindo$Builder, org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.util.StringSet $r5;
        org.waveprotocol.wave.model.document.ReadableDocument r11;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer r1;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r6;
        int[] $r10;
        java.util.Map $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String r8;
        boolean $z0, $z1;
        java.util.Iterator $r4;
        java.util.Set $r3;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r9;
        org.waveprotocol.wave.model.document.operation.Attributes $r13;
        java.lang.Object $r7, r12;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        r1 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizer;

        r6 := @parameter1: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        r11 := @parameter2: org.waveprotocol.wave.model.document.ReadableDocument;

        r12 := @parameter3: java.lang.Object;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void reset()>();

     label1:
        $z0 = interfaceinvoke r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r9 = interfaceinvoke r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type next()>();

        $r10 = <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder$1: int[] $SwitchMap$org$waveprotocol$wave$model$richtext$RichTextTokenizer$Type>;

        $i4 = virtualinvoke $r9.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: int ordinal()>();

        $i5 = $r10[$i4];

        lookupswitch($i5)
        {
            case 1: goto label2;
            case 2: goto label2;
            default: goto label3;
        };

     label2:
        $r13 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.document.operation.Attributes structuralAttributes(org.waveprotocol.wave.model.richtext.RichTextTokenizer)>(r1);

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void handleNewLine(org.waveprotocol.wave.model.richtext.RichTextTokenizer,org.waveprotocol.wave.model.document.operation.Nindo$Builder,org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,org.waveprotocol.wave.model.document.operation.Attributes)>(r1, r6, r11, r12, $r13);

        goto label4;

     label3:
        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void handleBasicMutation(org.waveprotocol.wave.model.richtext.RichTextTokenizer,org.waveprotocol.wave.model.document.operation.Nindo$Builder,org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r1, r6, r11, r12);

     label4:
        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: boolean isFirstToken> = 0;

        goto label1;

     label5:
        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.Map startedAnnotations>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label6:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r7 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        virtualinvoke r6.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void endAnnotation(java.lang.String)>(r8);

        goto label6;

     label7:
        $i0 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int offset>;

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int lastGoodCursorOffset> = $i0;

        i6 = 0;

     label8:
        $i1 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int elementCount>;

        if i6 >= $i1 goto label9;

        virtualinvoke r6.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void elementEnd()>();

        $i2 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int offset>;

        $i3 = $i2 + 1;

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int offset> = $i3;

        i6 = i6 + 1;

        goto label8;

     label9:
        $r5 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringSet affectedKeys>;

        return $r5;
    }

    private org.waveprotocol.wave.model.document.operation.Attributes structuralAttributes(org.waveprotocol.wave.model.richtext.RichTextTokenizer)
    {
        org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute $r20, $r21, $r22, $r23, $r25;
        java.util.ArrayList $r19;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer r3;
        int[] $r14;
        int $i0, $i1, i2, $i4, $i6;
        java.lang.String $r6, $r11, $r13;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r1, $r4, $r5;
        org.waveprotocol.wave.model.document.operation.impl.AttributesImpl $r18;
        java.lang.StringBuilder $r9, $r10, $r24;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        r3 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizer;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type peek()>();

        $r19 = new java.util.ArrayList;

        specialinvoke $r19.<java.util.ArrayList: void <init>()>();

        if $r1 == null goto label6;

        i2 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int indentationLevel>;

        $r4 = interfaceinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type getCurrentType()>();

        $r5 = <org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type LIST_ITEM>;

        if $r4 != $r5 goto label4;

        $r14 = <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder$1: int[] $SwitchMap$org$waveprotocol$wave$model$richtext$RichTextTokenizer$Type>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: int ordinal()>();

        $i1 = $r14[$i0];

        lookupswitch($i1)
        {
            case 3: goto label1;
            case 4: goto label2;
            default: goto label3;
        };

     label1:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        $r20 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute;

        specialinvoke $r20.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: void <init>(java.lang.String,java.lang.String)>("t", "li");

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r20);

        goto label3;

     label2:
        $i6 = (int) -1;

        i2 = i2 + $i6;

        $r21 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute;

        specialinvoke $r21.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: void <init>(java.lang.String,java.lang.String)>("t", "li");

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r21);

        $r22 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute;

        specialinvoke $r22.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: void <init>(java.lang.String,java.lang.String)>("listyle", "decimal");

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r22);

     label3:
        goto label5;

     label4:
        $r6 = interfaceinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: java.lang.String getData()>();

        if $r6 == null goto label5;

        $r23 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute;

        $r13 = interfaceinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: java.lang.String getData()>();

        specialinvoke $r23.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: void <init>(java.lang.String,java.lang.String)>("t", $r13);

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r23);

     label5:
        if i2 <= 0 goto label6;

        $r25 = new org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<org.waveprotocol.wave.model.document.operation.util.ImmutableStateMap$Attribute: void <init>(java.lang.String,java.lang.String)>("i", $r11);

        interfaceinvoke $r19.<java.util.List: boolean add(java.lang.Object)>($r25);

     label6:
        $r18 = staticinvoke <org.waveprotocol.wave.model.document.operation.impl.AttributesImpl: org.waveprotocol.wave.model.document.operation.impl.AttributesImpl fromUnsortedAttributes(java.util.List)>($r19);

        return $r18;
    }

    private void handleBasicMutation(org.waveprotocol.wave.model.richtext.RichTextTokenizer, org.waveprotocol.wave.model.document.operation.Nindo$Builder, org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        java.lang.IllegalStateException $r17;
        org.waveprotocol.wave.model.document.ReadableDocument r23;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer r0;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r4;
        int[] $r2;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r20, $r22;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r1;
        java.lang.StringBuilder $r18, $r19, $r21;
        java.lang.Object r24;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r3;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters $r13;

        r3 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        r0 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizer;

        r4 := @parameter1: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        r23 := @parameter2: org.waveprotocol.wave.model.document.ReadableDocument;

        r24 := @parameter3: java.lang.Object;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type getCurrentType()>();

        $r2 = <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder$1: int[] $SwitchMap$org$waveprotocol$wave$model$richtext$RichTextTokenizer$Type>;

        $i0 = virtualinvoke $r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: int ordinal()>();

        $i1 = $r2[$i0];

        tableswitch($i1)
        {
            case 3: goto label16;
            case 4: goto label16;
            case 5: goto label01;
            case 6: goto label02;
            case 7: goto label03;
            case 8: goto label04;
            case 9: goto label05;
            case 10: goto label06;
            case 11: goto label07;
            case 12: goto label08;
            case 13: goto label09;
            case 14: goto label10;
            case 15: goto label11;
            case 16: goto label12;
            case 17: goto label13;
            case 18: goto label14;
            case 19: goto label15;
            case 20: goto label17;
            case 21: goto label17;
            default: goto label18;
        };

     label01:
        $r12 = interfaceinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: java.lang.String getData()>();

        if $r12 == null goto label19;

        $r13 = <org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters BLIP_TEXT>;

        $r14 = interfaceinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: java.lang.String getData()>();

        $r15 = virtualinvoke $r13.<org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema$PermittedCharacters: java.lang.String coerceString(java.lang.String)>($r14);

        virtualinvoke r4.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void characters(java.lang.String)>($r15);

        $i2 = r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int offset>;

        $r16 = interfaceinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: java.lang.String getData()>();

        $i3 = virtualinvoke $r16.<java.lang.String: int length()>();

        $i4 = $i2 + $i3;

        r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int offset> = $i4;

        goto label19;

     label02:
        $r11 = interfaceinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: java.lang.String getData()>();

        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void startAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String,java.lang.String)>(r4, "style/fontWeight", $r11);

        goto label19;

     label03:
        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void endAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String)>(r4, "style/fontWeight");

        goto label19;

     label04:
        $r10 = interfaceinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: java.lang.String getData()>();

        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void startAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String,java.lang.String)>(r4, "style/fontStyle", $r10);

        goto label19;

     label05:
        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void endAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String)>(r4, "style/fontStyle");

        goto label19;

     label06:
        $r9 = interfaceinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: java.lang.String getData()>();

        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void startAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String,java.lang.String)>(r4, "style/textDecoration", $r9);

        goto label19;

     label07:
        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void endAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String)>(r4, "style/textDecoration");

        goto label19;

     label08:
        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: java.lang.String getData()>();

        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void startAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String,java.lang.String)>(r4, "style/color", $r8);

        goto label19;

     label09:
        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void endAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String)>(r4, "style/color");

        goto label19;

     label10:
        $r7 = interfaceinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: java.lang.String getData()>();

        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void startAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String,java.lang.String)>(r4, "style/backgroundColor", $r7);

        goto label19;

     label11:
        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void endAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String)>(r4, "style/backgroundColor");

        goto label19;

     label12:
        $r6 = interfaceinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: java.lang.String getData()>();

        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void startAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String,java.lang.String)>(r4, "style/fontFamily", $r6);

        goto label19;

     label13:
        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void endAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String)>(r4, "style/fontFamily");

        goto label19;

     label14:
        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: java.lang.String getData()>();

        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void startAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String,java.lang.String)>(r4, "link/manual", $r5);

        goto label19;

     label15:
        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void endAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String)>(r4, "link/manual");

        goto label19;

     label16:
        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void push(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)>($r1);

        goto label19;

     label17:
        specialinvoke r3.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void pop()>();

        goto label19;

     label18:
        $r17 = new java.lang.IllegalStateException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled token: ");

        $r20 = virtualinvoke $r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: java.lang.String toString()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label19:
        return;
    }

    private void push(org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type)
    {
        java.util.List $r2;
        int $i0, $i1, $i2;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r0;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type r1;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        r1 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.List structureStack>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        $i0 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int indentationLevel>;

        $i1 = virtualinvoke r1.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: int indent()>();

        $i2 = $i0 + $i1;

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int indentationLevel> = $i2;

        return;
    }

    private void pop()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r5;
        java.util.List $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        $r1 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.List structureStack>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $i1 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int indentationLevel>;

        $r3 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.List structureStack>;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.List structureStack>;

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object remove(int)>($i3);

        $r5 = (org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type) $r4;

        $i4 = virtualinvoke $r5.<org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type: int indent()>();

        $i5 = $i1 - $i4;

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int indentationLevel> = $i5;

     label1:
        return;
    }

    private org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type peek()
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type $r5;
        java.util.List $r1, $r2, $r3;
        int $i0, $i1, $i2;
        java.lang.Object $r4;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        $r1 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.List structureStack>;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.List structureStack>;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.List structureStack>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i2 = $i1 - 1;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i2);

        $r5 = (org.waveprotocol.wave.model.richtext.RichTextTokenizer$Type) $r4;

        return $r5;
    }

    private void startAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder, java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringSet $r9;
        java.util.Stack $r7, r10;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r6;
        java.util.Map $r2, $r8;
        java.lang.Object $r3, $r4;
        java.lang.String r1, r5, $r11;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        r6 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        r1 := @parameter1: java.lang.String;

        r5 := @parameter2: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.Map startedAnnotations>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r10 = (java.util.Stack) $r3;

        if r10 != null goto label1;

        $r7 = new java.util.Stack;

        specialinvoke $r7.<java.util.Stack: void <init>()>();

        r10 = $r7;

        $r8 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.Map startedAnnotations>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7);

        $r9 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringSet affectedKeys>;

        interfaceinvoke $r9.<org.waveprotocol.wave.model.util.StringSet: void add(java.lang.String)>(r1);

     label1:
        $z0 = virtualinvoke r10.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r11 = null;

        goto label3;

     label2:
        $r4 = virtualinvoke r10.<java.util.Stack: java.lang.Object peek()>();

        $r11 = (java.lang.String) $r4;

     label3:
        $z1 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean notEqual(java.lang.Object,java.lang.Object)>(r5, $r11);

        if $z1 == 0 goto label5;

        if $r11 != null goto label4;

        $z2 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: boolean isDefaultValue(java.lang.String,java.lang.String)>(r1, r5);

        if $z2 == 0 goto label4;

        goto label5;

     label4:
        virtualinvoke r6.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void startAnnotation(java.lang.String,java.lang.String)>(r1, r5);

     label5:
        virtualinvoke r10.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r5);

        return;
    }

    private void endAnnotation(org.waveprotocol.wave.model.document.operation.Nindo$Builder, java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringMap $r10, $r12;
        java.util.Stack r4;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r8;
        java.util.Map $r2, $r11;
        java.lang.String r1, r6, $r9, $r14;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r3, $r5, $r7, $r13;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        r8 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.Map startedAnnotations>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.Stack) $r3;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r4, "cannot end unstarted annotation");

        $r5 = virtualinvoke r4.<java.util.Stack: java.lang.Object pop()>();

        r6 = (java.lang.String) $r5;

        $z0 = virtualinvoke r4.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        if r6 == null goto label3;

        $z3 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: boolean isDefaultValue(java.lang.String,java.lang.String)>(r1, r6);

        if $z3 != 0 goto label1;

        virtualinvoke r8.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void endAnnotation(java.lang.String)>(r1);

     label1:
        $r10 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringMap defaultValueMap>;

        $z4 = interfaceinvoke $r10.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r1);

        if $z4 == 0 goto label2;

        $r12 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringMap defaultValueMap>;

        $r13 = interfaceinvoke $r12.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r1);

        $r14 = (java.lang.String) $r13;

        virtualinvoke r8.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void startAnnotation(java.lang.String,java.lang.String)>(r1, $r14);

        goto label5;

     label2:
        $r11 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.util.Map startedAnnotations>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        goto label5;

     label3:
        $r7 = virtualinvoke r4.<java.util.Stack: java.lang.Object peek()>();

        $r9 = (java.lang.String) $r7;

        $z1 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean notEqual(java.lang.Object,java.lang.Object)>(r6, $r9);

        if $z1 == 0 goto label5;

        $z2 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: boolean isDefaultValue(java.lang.String,java.lang.String)>(r1, $r9);

        if $z2 == 0 goto label4;

        virtualinvoke r8.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void endAnnotation(java.lang.String)>(r1);

        goto label5;

     label4:
        virtualinvoke r8.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void startAnnotation(java.lang.String,java.lang.String)>(r1, $r9);

     label5:
        return;
    }

    private void startElement(org.waveprotocol.wave.model.document.operation.Nindo$Builder, java.lang.String, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.operation.Attributes r3;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r1;
        int $i0, $i1, $i2, $i3;
        java.lang.String r2;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: org.waveprotocol.wave.model.document.operation.Attributes;

        $i0 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int elementCount>;

        $i1 = $i0 + 1;

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int elementCount> = $i1;

        virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void elementStart(java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r2, r3);

        $i2 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int offset>;

        $i3 = $i2 + 1;

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int offset> = $i3;

        return;
    }

    private void endElement(org.waveprotocol.wave.model.document.operation.Nindo$Builder)
    {
        java.lang.IllegalStateException $r2;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r1;
        int $i0, $i1, $i2, $i3;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        $i0 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int elementCount>;

        $i1 = $i0 - 1;

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int elementCount> = $i1;

        if $i1 >= 0 goto label1;

        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Element count is negative.");

        throw $r2;

     label1:
        virtualinvoke r1.<org.waveprotocol.wave.model.document.operation.Nindo$Builder: void elementEnd()>();

        $i2 = r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int offset>;

        $i3 = $i2 + 1;

        r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: int offset> = $i3;

        return;
    }

    private void handleNewLine(org.waveprotocol.wave.model.richtext.RichTextTokenizer, org.waveprotocol.wave.model.document.operation.Nindo$Builder, org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.richtext.RichTextTokenizer r3;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r4;
        org.waveprotocol.wave.model.document.ReadableDocument r1;
        java.lang.Object r2;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r0;
        org.waveprotocol.wave.model.document.operation.Attributes r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        r3 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizer;

        r4 := @parameter1: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        r1 := @parameter2: org.waveprotocol.wave.model.document.ReadableDocument;

        r2 := @parameter3: java.lang.Object;

        r5 := @parameter4: org.waveprotocol.wave.model.document.operation.Attributes;

        $z0 = specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: boolean lcCanHandleNewLine(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r1, r2);

        if $z0 == 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void lcHandleNewLine(org.waveprotocol.wave.model.richtext.RichTextTokenizer,org.waveprotocol.wave.model.document.operation.Nindo$Builder,org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object,org.waveprotocol.wave.model.document.operation.Attributes)>(r3, r4, r1, r2, r5);

     label1:
        return;
    }

    private void lcHandleNewLine(org.waveprotocol.wave.model.richtext.RichTextTokenizer, org.waveprotocol.wave.model.document.operation.Nindo$Builder, org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object, org.waveprotocol.wave.model.document.operation.Attributes)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r4;
        org.waveprotocol.wave.model.document.operation.Attributes r2;
        org.waveprotocol.wave.model.richtext.RichTextTokenizer r0;
        org.waveprotocol.wave.model.document.operation.Nindo$Builder r3;
        java.lang.Object r5;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        r0 := @parameter0: org.waveprotocol.wave.model.richtext.RichTextTokenizer;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.Nindo$Builder;

        r4 := @parameter2: org.waveprotocol.wave.model.document.ReadableDocument;

        r5 := @parameter3: java.lang.Object;

        r2 := @parameter4: org.waveprotocol.wave.model.document.operation.Attributes;

        $z0 = interfaceinvoke r0.<org.waveprotocol.wave.model.richtext.RichTextTokenizer: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        $z1 = r1.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: boolean isFirstToken>;

        if $z1 != 0 goto label3;

        if $z3 == 0 goto label4;

     label3:
        $z2 = interfaceinvoke r2.<org.waveprotocol.wave.model.document.operation.Attributes: boolean isEmpty()>();

        if $z2 != 0 goto label5;

     label4:
        specialinvoke r1.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void startElement(org.waveprotocol.wave.model.document.operation.Nindo$Builder,java.lang.String,org.waveprotocol.wave.model.document.operation.Attributes)>(r3, "line", r2);

        specialinvoke r1.<org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: void endElement(org.waveprotocol.wave.model.document.operation.Nindo$Builder)>(r3);

     label5:
        return;
    }

    private boolean lcCanHandleNewLine(org.waveprotocol.wave.model.document.ReadableDocument, java.lang.Object)
    {
        org.waveprotocol.wave.model.document.ReadableDocument r0;
        java.lang.Object r1, $r2;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r3;
        boolean $z0;

        r3 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        r0 := @parameter0: org.waveprotocol.wave.model.document.ReadableDocument;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: java.lang.Object enclosingElement(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, r1);

        $z0 = staticinvoke <org.waveprotocol.wave.model.document.util.LineContainers: boolean isLineContainer(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.Object)>(r0, $r2);

        return $z0;
    }

    private boolean isDefaultValue(java.lang.String, java.lang.String)
    {
        org.waveprotocol.wave.model.util.StringMap $r1, $r2;
        org.waveprotocol.wave.model.util.ReadableStringSet $r5;
        java.lang.Object $r3;
        java.lang.String r0, r4;
        org.waveprotocol.wave.model.richtext.RichTextMutationBuilder r6;
        boolean $z0, $z1, $z2;

        r6 := @this: org.waveprotocol.wave.model.richtext.RichTextMutationBuilder;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringMap defaultAnnotations>;

        $z0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.util.StringMap: boolean containsKey(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r2 = <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringMap defaultAnnotations>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: java.lang.Object get(java.lang.String)>(r0);

        $r5 = (org.waveprotocol.wave.model.util.ReadableStringSet) $r3;

        $z1 = interfaceinvoke $r5.<org.waveprotocol.wave.model.util.ReadableStringSet: boolean contains(java.lang.String)>(r4);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.util.StringSet $r3, $r6, $r9, $r12, $r15;
        java.lang.String[] $r1, $r4, $r7, $r10, $r13;
        org.waveprotocol.wave.model.util.StringMap $r0, $r2, $r5, $r8, $r11, $r14;

        <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.lang.String STYLE_KEY_FONT_FAMILY> = "style/fontFamily";

        <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.lang.String STYLE_KEY_BG_COLOR> = "style/backgroundColor";

        <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.lang.String STYLE_KEY_COLOR> = "style/color";

        <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.lang.String STYLE_KEY_TEXT_DECORATION> = "style/textDecoration";

        <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.lang.String STYLE_KEY_FONT_STYLE> = "style/fontStyle";

        <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.lang.String STYLE_KEY_FONT_WEIGHT> = "style/fontWeight";

        <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.lang.String INDENT_ATTR> = "i";

        <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.lang.String LI_STYLE_ATTR> = "listyle";

        <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: java.lang.String TYPE_ATTR> = "t";

        $r0 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringMap createStringMap()>();

        <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringMap defaultAnnotations> = $r0;

        $r2 = <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringMap defaultAnnotations>;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = "none";

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet newStringSet(java.lang.String[])>($r1);

        interfaceinvoke $r2.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("style/textDecoration", $r3);

        $r5 = <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringMap defaultAnnotations>;

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "normal";

        $r6 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet newStringSet(java.lang.String[])>($r4);

        interfaceinvoke $r5.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("style/fontWeight", $r6);

        $r8 = <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringMap defaultAnnotations>;

        $r7 = newarray (java.lang.String)[1];

        $r7[0] = "normal";

        $r9 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet newStringSet(java.lang.String[])>($r7);

        interfaceinvoke $r8.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("style/fontStyle", $r9);

        $r11 = <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringMap defaultAnnotations>;

        $r10 = newarray (java.lang.String)[2];

        $r10[0] = "initial";

        $r10[1] = "transparent";

        $r12 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet newStringSet(java.lang.String[])>($r10);

        interfaceinvoke $r11.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("style/backgroundColor", $r12);

        $r14 = <org.waveprotocol.wave.model.richtext.RichTextMutationBuilder: org.waveprotocol.wave.model.util.StringMap defaultAnnotations>;

        $r13 = newarray (java.lang.String)[1];

        $r13[0] = "black";

        $r15 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: org.waveprotocol.wave.model.util.StringSet newStringSet(java.lang.String[])>($r13);

        interfaceinvoke $r14.<org.waveprotocol.wave.model.util.StringMap: void put(java.lang.String,java.lang.Object)>("style/color", $r15);

        return;
    }
}
