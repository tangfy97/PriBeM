public class org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument extends org.waveprotocol.wave.model.document.util.MutableDocumentProxy$DocumentProxy implements org.waveprotocol.wave.model.wave.data.DocumentOperationSink
{
    private org.waveprotocol.wave.model.document.indexed.IndexedDocument substrateDocument;
    private org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$DocumentCreationContext documentCreationContext;
    private org.waveprotocol.wave.model.operation.SilentOperationSink outputSink;

    public static org.waveprotocol.wave.model.wave.data.DocumentFactory createFactory(org.waveprotocol.wave.model.schema.SchemaProvider)
    {
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$1 $r0;
        org.waveprotocol.wave.model.schema.SchemaProvider r1;

        r1 := @parameter0: org.waveprotocol.wave.model.schema.SchemaProvider;

        $r0 = new org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$1;

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$1: void <init>(org.waveprotocol.wave.model.schema.SchemaProvider)>(r1);

        return $r0;
    }

    private void <init>(org.waveprotocol.wave.model.document.operation.DocInitialization, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r2;
        org.waveprotocol.wave.model.document.operation.DocInitialization r1;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocInitialization;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: void <init>(org.waveprotocol.wave.model.document.operation.DocInitialization,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.indexed.DocumentHandler)>(r1, r2, null);

        return;
    }

    private org.waveprotocol.wave.model.document.indexed.IndexedDocument getDocument()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r1, $r2;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r8;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument r0;
        org.waveprotocol.wave.model.operation.OperationException $r3;
        java.lang.StringBuilder $r5, $r6, $r9;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$DocumentCreationContext $r7;
        java.lang.String $r10;
        org.waveprotocol.wave.model.operation.OperationRuntimeException $r4;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.document.indexed.IndexedDocument substrateDocument>;

        if $r1 != null goto label4;

     label1:
        virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: void createSubstrateDocument()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new org.waveprotocol.wave.model.operation.OperationRuntimeException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Document initialization failed when applying operation: ");

        $r7 = r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$DocumentCreationContext documentCreationContext>;

        $r8 = $r7.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$DocumentCreationContext: org.waveprotocol.wave.model.document.operation.DocInitialization content>;

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.waveprotocol.wave.model.operation.OperationRuntimeException: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.OperationException)>($r10, $r3);

        throw $r4;

     label4:
        $r2 = r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.document.indexed.IndexedDocument substrateDocument>;

        return $r2;

        catch org.waveprotocol.wave.model.operation.OperationException from label1 to label2 with label3;
    }

    protected void createSubstrateDocument() throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r2;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$DocumentCreationContext $r1;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$DocumentCreationContext documentCreationContext>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$DocumentCreationContext: org.waveprotocol.wave.model.document.indexed.IndexedDocument createDocument()>();

        r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.document.indexed.IndexedDocument substrateDocument> = $r2;

        r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$DocumentCreationContext documentCreationContext> = null;

        return;
    }

    protected void <init>(org.waveprotocol.wave.model.document.operation.DocInitialization, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema, org.waveprotocol.wave.model.document.indexed.DocumentHandler)
    {
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r3;
        org.waveprotocol.wave.model.document.operation.DocInitialization r2;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$DocumentCreationContext $r1;
        org.waveprotocol.wave.model.document.indexed.DocumentHandler r4;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.DocInitialization;

        r3 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        r4 := @parameter2: org.waveprotocol.wave.model.document.indexed.DocumentHandler;

        specialinvoke r0.<org.waveprotocol.wave.model.document.util.MutableDocumentProxy$DocumentProxy: void <init>(org.waveprotocol.wave.model.document.Document,java.lang.String)>(null, "Impossible");

        r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.document.indexed.IndexedDocument substrateDocument> = null;

        $r1 = new org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$DocumentCreationContext;

        specialinvoke $r1.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$DocumentCreationContext: void <init>(org.waveprotocol.wave.model.document.operation.DocInitialization,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema,org.waveprotocol.wave.model.document.indexed.DocumentHandler)>(r2, r3, r4);

        r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$DocumentCreationContext documentCreationContext> = $r1;

        return;
    }

    public void init(org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r1, r2;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument;

        r2 := @parameter0: org.waveprotocol.wave.model.operation.SilentOperationSink;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.operation.SilentOperationSink outputSink>;

        if $r1 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "Output sink may only be set once");

        if r2 == null goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void checkArgument(boolean,java.lang.Object)>($z1, "Output sink may not be null");

        r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.operation.SilentOperationSink outputSink> = r2;

        return;
    }

    protected org.waveprotocol.wave.model.document.MutableDocument getDelegate()
    {
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer $r4;
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r5, $r6;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$2 $r2;
        org.waveprotocol.wave.model.document.MutableDocument $r8;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r1, r7;
        org.waveprotocol.wave.model.document.util.DocumentImpl $r3;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument;

        $z0 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: boolean hasDelegate()>();

        if $z0 != 0 goto label3;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.operation.SilentOperationSink outputSink>;

        if $r1 == null goto label1;

        r7 = r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.operation.SilentOperationSink outputSink>;

        goto label2;

     label1:
        $r2 = new org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$2;

        specialinvoke $r2.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$2: void <init>(org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument)>(r0);

        r7 = $r2;

     label2:
        $r3 = new org.waveprotocol.wave.model.document.util.DocumentImpl;

        $r4 = new org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer;

        $r5 = specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.document.indexed.IndexedDocument getDocument()>();

        specialinvoke $r4.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$BasicSequencer: void <init>(org.waveprotocol.wave.model.document.operation.SuperSink,org.waveprotocol.wave.model.operation.SilentOperationSink,org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$1)>($r5, r7, null);

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.document.indexed.IndexedDocument getDocument()>();

        specialinvoke $r3.<org.waveprotocol.wave.model.document.util.DocumentImpl: void <init>(org.waveprotocol.wave.model.operation.OperationSequencer,org.waveprotocol.wave.model.document.ReadableWDocument)>($r4, $r6);

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: void setDelegate(org.waveprotocol.wave.model.document.MutableDocument)>($r3);

     label3:
        $r8 = specialinvoke r0.<org.waveprotocol.wave.model.document.util.MutableDocumentProxy$DocumentProxy: org.waveprotocol.wave.model.document.MutableDocument getDelegate()>();

        return $r8;
    }

    public org.waveprotocol.wave.model.document.Document getMutableDocument()
    {
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument;

        return r0;
    }

    public org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r1;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r2;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.document.indexed.IndexedDocument getDocument()>();

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: org.waveprotocol.wave.model.document.operation.DocInitialization asOperation()>();

        return $r2;
    }

    public void consume(org.waveprotocol.wave.model.document.operation.DocOp) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.document.indexed.IndexedDocument $r1;
        org.waveprotocol.wave.model.document.operation.DocOp r2;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument;

        r2 := @parameter0: org.waveprotocol.wave.model.document.operation.DocOp;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.document.indexed.IndexedDocument getDocument()>();

        interfaceinvoke $r1.<org.waveprotocol.wave.model.document.indexed.IndexedDocument: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>(r2);

        return;
    }

    public volatile void consume(org.waveprotocol.wave.model.operation.Operation) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.operation.Operation r1;
        org.waveprotocol.wave.model.document.operation.DocOp $r2;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument r0;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.Operation;

        $r2 = (org.waveprotocol.wave.model.document.operation.DocOp) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: void consume(org.waveprotocol.wave.model.document.operation.DocOp)>($r2);

        return;
    }

    void <init>(org.waveprotocol.wave.model.document.operation.DocInitialization, org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema, org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$1)
    {
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$1 r3;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema r2;
        org.waveprotocol.wave.model.document.operation.DocInitialization r1;

        r0 := @this: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument;

        r1 := @parameter0: org.waveprotocol.wave.model.document.operation.DocInitialization;

        r2 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema;

        r3 := @parameter2: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument$1;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: void <init>(org.waveprotocol.wave.model.document.operation.DocInitialization,org.waveprotocol.wave.model.document.operation.automaton.DocumentSchema)>(r1, r2);

        return;
    }

    static org.waveprotocol.wave.model.operation.SilentOperationSink access$100(org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r1;
        org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument r0;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument;

        $r1 = r0.<org.waveprotocol.wave.model.wave.data.impl.PluggableMutableDocument: org.waveprotocol.wave.model.operation.SilentOperationSink outputSink>;

        return $r1;
    }
}
