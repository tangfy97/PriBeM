public class org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory extends java.lang.Object
{
    private static final java.util.logging.Logger LOG;
    private static final int FALLBACK_THREADING_PARAMS_KEY;
    private static java.util.concurrent.ConcurrentHashMap portMap;
    private org.apache.cxf.buslifecycle.BusLifeCycleManager lifeCycleManager;
    private java.util.Map threadingParametersMap;
    private org.apache.cxf.transport.http_jetty.ThreadingParameters fallbackThreadingParameters;
    private java.util.Map tlsParametersMap;
    private org.apache.cxf.Bus bus;
    private org.eclipse.jetty.util.component.Container$Listener mBeanContainer;

    public void <init>()
    {
        java.util.TreeMap $r1, $r2;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.Map threadingParametersMap> = $r1;

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.Map tlsParametersMap> = $r2;

        return;
    }

    public void <init>(org.apache.cxf.Bus)
    {
        org.apache.cxf.Bus r3;
        java.util.TreeMap $r1, $r2;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        r3 := @parameter0: org.apache.cxf.Bus;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.Map threadingParametersMap> = $r1;

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.Map tlsParametersMap> = $r2;

        virtualinvoke r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: void setBus(org.apache.cxf.Bus)>(r3);

        return;
    }

    public void <init>(org.apache.cxf.Bus, java.util.Map, java.util.Map)
    {
        org.apache.cxf.Bus r7;
        java.util.TreeMap $r1, $r2;
        java.util.Map r3, $r4, r5, $r6;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        r7 := @parameter0: org.apache.cxf.Bus;

        r3 := @parameter1: java.util.Map;

        r5 := @parameter2: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.Map threadingParametersMap> = $r1;

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.Map tlsParametersMap> = $r2;

        $r4 = r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.Map tlsParametersMap>;

        interfaceinvoke $r4.<java.util.Map: void putAll(java.util.Map)>(r3);

        $r6 = r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.Map threadingParametersMap>;

        interfaceinvoke $r6.<java.util.Map: void putAll(java.util.Map)>(r5);

        virtualinvoke r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: void setBus(org.apache.cxf.Bus)>(r7);

        return;
    }

    private static org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine getOrCreate(org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory, java.lang.String, int, org.apache.cxf.configuration.jsse.TLSServerParameters) throws java.io.IOException, java.security.GeneralSecurityException
    {
        org.apache.cxf.configuration.jsse.TLSServerParameters r7;
        java.util.concurrent.ConcurrentHashMap $r0, $r8;
        java.lang.Integer $r1, $r9;
        org.eclipse.jetty.util.component.Container$Listener $r5;
        int i0;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine $r3, $r11, r12;
        java.lang.Object $r2, $r10;
        java.lang.String r6;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r4;

        r4 := @parameter0: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        r6 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r7 := @parameter3: org.apache.cxf.configuration.jsse.TLSServerParameters;

        $r0 = <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.concurrent.ConcurrentHashMap portMap>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2 = virtualinvoke $r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        r12 = (org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine) $r2;

        if r12 != null goto label2;

        $r3 = new org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine;

        $r5 = virtualinvoke r4.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.eclipse.jetty.util.component.Container$Listener getMBeanContainer()>();

        specialinvoke $r3.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: void <init>(org.eclipse.jetty.util.component.Container$Listener,java.lang.String,int)>($r5, r6, i0);

        r12 = $r3;

        if r7 == null goto label1;

        virtualinvoke $r3.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: void setTlsServerParameters(org.apache.cxf.configuration.jsse.TLSServerParameters)>(r7);

     label1:
        $r8 = <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.concurrent.ConcurrentHashMap portMap>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r10 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r9, $r3);

        $r11 = (org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine) $r10;

        virtualinvoke $r3.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: void finalizeConfig()>();

        if $r11 == null goto label2;

        r12 = $r11;

     label2:
        return r12;
    }

    public final void setBus(org.apache.cxf.Bus)
    {
        org.apache.cxf.Bus r1;
        org.apache.cxf.buslifecycle.BusLifeCycleManager $r3, $r4, $r6;
        java.lang.Object $r2;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory$JettyBusLifeCycleListener $r5;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        r1 := @parameter0: org.apache.cxf.Bus;

        r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.Bus bus> = r1;

        if r1 == null goto label1;

        interfaceinvoke r1.<org.apache.cxf.Bus: void setExtension(java.lang.Object,java.lang.Class)>(r0, class "Lorg/apache/cxf/transport/http_jetty/JettyHTTPServerEngineFactory;");

        $r2 = interfaceinvoke r1.<org.apache.cxf.Bus: java.lang.Object getExtension(java.lang.Class)>(class "Lorg/apache/cxf/buslifecycle/BusLifeCycleManager;");

        $r3 = (org.apache.cxf.buslifecycle.BusLifeCycleManager) $r2;

        r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.buslifecycle.BusLifeCycleManager lifeCycleManager> = $r3;

        $r4 = r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.buslifecycle.BusLifeCycleManager lifeCycleManager>;

        if null == $r4 goto label1;

        $r6 = r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.buslifecycle.BusLifeCycleManager lifeCycleManager>;

        $r5 = new org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory$JettyBusLifeCycleListener;

        specialinvoke $r5.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory$JettyBusLifeCycleListener: void <init>(org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory,org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory$1)>(r0, null);

        interfaceinvoke $r6.<org.apache.cxf.buslifecycle.BusLifeCycleManager: void registerLifeCycleListener(org.apache.cxf.buslifecycle.BusLifeCycleListener)>($r5);

     label1:
        return;
    }

    public org.apache.cxf.Bus getBus()
    {
        org.apache.cxf.Bus $r1;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        $r1 = r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.Bus bus>;

        return $r1;
    }

    public void setTlsServerParametersMap(java.util.Map)
    {
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.Map tlsParametersMap> = r1;

        return;
    }

    public java.util.Map getTlsServerParametersMap()
    {
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;
        java.util.Map $r1;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        $r1 = r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.Map tlsParametersMap>;

        return $r1;
    }

    public void setEnginesList(java.util.List)
    {
        java.util.Iterator $r1;
        org.apache.cxf.transport.http_jetty.ThreadingParameters $r7;
        java.util.concurrent.ConcurrentHashMap $r4;
        java.lang.Integer $r5;
        java.util.List r0;
        int $i0, $i1;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine r3;
        java.lang.Object $r2;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r6;
        boolean $z0;

        r6 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine) $r2;

        $i0 = virtualinvoke r3.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: int getPort()>();

        if $i0 != 0 goto label2;

        $r7 = virtualinvoke r3.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: org.apache.cxf.transport.http_jetty.ThreadingParameters getThreadingParameters()>();

        r6.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.transport.http_jetty.ThreadingParameters fallbackThreadingParameters> = $r7;

     label2:
        $r4 = <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.concurrent.ConcurrentHashMap portMap>;

        $i1 = virtualinvoke r3.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: int getPort()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        virtualinvoke $r4.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r5, r3);

        goto label1;

     label3:
        return;
    }

    public void setThreadingParametersMap(java.util.Map)
    {
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;
        java.util.Map r1;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        r1 := @parameter0: java.util.Map;

        r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.Map threadingParametersMap> = r1;

        return;
    }

    public java.util.Map getThreadingParametersMap()
    {
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;
        java.util.Map $r1;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        $r1 = r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.Map threadingParametersMap>;

        return $r1;
    }

    public void setTLSServerParametersForPort(java.lang.String, int, org.apache.cxf.configuration.jsse.TLSServerParameters) throws java.security.GeneralSecurityException, java.io.IOException
    {
        org.apache.cxf.configuration.jsse.TLSServerParameters r0;
        java.io.IOException $r5;
        java.lang.IllegalArgumentException $r7;
        int i0;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine $r2;
        java.lang.String r6;
        org.eclipse.jetty.server.Connector $r3, $r4;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r1;
        boolean $z0;

        r1 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r0 := @parameter2: org.apache.cxf.configuration.jsse.TLSServerParameters;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("tlsParams cannot be null");

        throw $r7;

     label1:
        $r2 = virtualinvoke r1.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine retrieveJettyHTTPServerEngine(int)>(i0);

        if null != $r2 goto label2;

        staticinvoke <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine getOrCreate(org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory,java.lang.String,int,org.apache.cxf.configuration.jsse.TLSServerParameters)>(r1, r6, i0, r0);

        goto label4;

     label2:
        $r3 = virtualinvoke $r2.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: org.eclipse.jetty.server.Connector getConnector()>();

        if $r3 == null goto label3;

        $r4 = virtualinvoke $r2.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: org.eclipse.jetty.server.Connector getConnector()>();

        $z0 = interfaceinvoke $r4.<org.eclipse.jetty.server.Connector: boolean isRunning()>();

        if $z0 == 0 goto label3;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("can\'t set the TLS params on the opened connector");

        throw $r5;

     label3:
        virtualinvoke $r2.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: void setTlsServerParameters(org.apache.cxf.configuration.jsse.TLSServerParameters)>(r0);

     label4:
        return;
    }

    public void setTLSServerParametersForPort(int, org.apache.cxf.configuration.jsse.TLSServerParameters) throws java.security.GeneralSecurityException, java.io.IOException
    {
        int i0;
        org.apache.cxf.configuration.jsse.TLSServerParameters r1;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        i0 := @parameter0: int;

        r1 := @parameter1: org.apache.cxf.configuration.jsse.TLSServerParameters;

        virtualinvoke r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: void setTLSServerParametersForPort(java.lang.String,int,org.apache.cxf.configuration.jsse.TLSServerParameters)>(null, i0, r1);

        return;
    }

    public synchronized org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine retrieveJettyHTTPServerEngine(int)
    {
        int i0;
        java.util.concurrent.ConcurrentHashMap $r0;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine $r3;
        java.lang.Object $r2;
        java.lang.Integer $r1;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r4;

        r4 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        i0 := @parameter0: int;

        $r0 = <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.concurrent.ConcurrentHashMap portMap>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2 = virtualinvoke $r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine) $r2;

        return $r3;
    }

    public synchronized org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine createJettyHTTPServerEngine(java.lang.String, int, java.lang.String) throws java.security.GeneralSecurityException, java.io.IOException
    {
        java.lang.Integer $r20, $r21, $r22;
        boolean $z0, $z1, $z2;
        java.util.logging.Logger $r1, $r13, $r18;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine $r8;
        java.lang.StringBuilder $r0, $r2, $r3, $r4, $r24, $r25, $r26, $r27, $r28, $r30, $r31, $r32;
        java.lang.Object[] $r17;
        org.apache.cxf.transport.http_jetty.ThreadingParameters $r11, $r14, $r15, $r16;
        java.util.logging.Level $r12, $r19;
        int i0, $i1, $i2;
        java.lang.String $r5, r7, r9, $r10, $r29, $r33;
        java.io.IOException $r23;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r6;

        r6 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r9 := @parameter2: java.lang.String;

        $r1 = <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.logging.Logger LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Creating Jetty HTTP Server Engine for port ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.util.logging.Logger: void fine(java.lang.String)>($r5);

        $r8 = staticinvoke <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine getOrCreate(org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory,java.lang.String,int,org.apache.cxf.configuration.jsse.TLSServerParameters)>(r6, r7, i0, null);

        $r10 = virtualinvoke $r8.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: java.lang.String getProtocol()>();

        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 != 0 goto label1;

        $r23 = new java.io.IOException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Protocol mismatch for port ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("engine\'s protocol is ");

        $r29 = virtualinvoke $r8.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: java.lang.String getProtocol()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", the url protocol is ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r33);

        throw $r23;

     label1:
        $z1 = virtualinvoke $r8.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: boolean isSetThreadingParameters()>();

        if $z1 != 0 goto label3;

        $r11 = r6.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.transport.http_jetty.ThreadingParameters fallbackThreadingParameters>;

        if null == $r11 goto label3;

        $r13 = <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.logging.Logger LOG>;

        $r12 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $z2 = virtualinvoke $r13.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r12);

        if $z2 == 0 goto label2;

        $r15 = r6.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.transport.http_jetty.ThreadingParameters fallbackThreadingParameters>;

        $i1 = virtualinvoke $r15.<org.apache.cxf.transport.http_jetty.ThreadingParameters: int getMinThreads()>();

        $r16 = r6.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.transport.http_jetty.ThreadingParameters fallbackThreadingParameters>;

        $i2 = virtualinvoke $r16.<org.apache.cxf.transport.http_jetty.ThreadingParameters: int getMaxThreads()>();

        $r18 = <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.logging.Logger LOG>;

        $r19 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r17 = newarray (java.lang.Object)[3];

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r17[0] = $r20;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r17[1] = $r21;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r17[2] = $r22;

        virtualinvoke $r18.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>($r19, "FALLBACK_THREADING_PARAMETERS_MSG", $r17);

     label2:
        $r14 = r6.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.transport.http_jetty.ThreadingParameters fallbackThreadingParameters>;

        virtualinvoke $r8.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: void setThreadingParameters(org.apache.cxf.transport.http_jetty.ThreadingParameters)>($r14);

     label3:
        return $r8;
    }

    public synchronized org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine createJettyHTTPServerEngine(int, java.lang.String) throws java.security.GeneralSecurityException, java.io.IOException
    {
        int i0;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine $r2;
        java.lang.String r1;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine createJettyHTTPServerEngine(java.lang.String,int,java.lang.String)>(null, i0, r1);

        return $r2;
    }

    public static synchronized void destroyForPort(int)
    {
        java.util.concurrent.ConcurrentHashMap $r0;
        java.util.logging.Logger $r5;
        java.lang.Integer $r1;
        java.lang.Exception $r10;
        int i0;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine r3;
        java.lang.Object $r2;
        java.lang.StringBuilder $r4, $r6, $r7, $r8;
        java.lang.String $r9;

        i0 := @parameter0: int;

        $r0 = <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.concurrent.ConcurrentHashMap portMap>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2 = virtualinvoke $r0.<java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>($r1);

        r3 = (org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine) $r2;

        if r3 == null goto label4;

        $r5 = <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.logging.Logger LOG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Stopping Jetty HTTP Server Engine on port ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.util.logging.Logger: void fine(java.lang.String)>($r9);

     label1:
        virtualinvoke r3.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: void stop()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        virtualinvoke $r10.<java.lang.Exception: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public javax.management.MBeanServer getMBeanServer()
    {
        org.apache.cxf.Bus $r1, $r2, $r4;
        org.apache.cxf.management.InstrumentationManager $r6;
        javax.management.MBeanServer $r7;
        java.lang.Object $r3, $r5;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        $r1 = r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.Bus bus>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.Bus bus>;

        $r3 = interfaceinvoke $r2.<org.apache.cxf.Bus: java.lang.Object getExtension(java.lang.Class)>(class "Lorg/apache/cxf/management/InstrumentationManager;");

        if $r3 == null goto label1;

        $r4 = r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.apache.cxf.Bus bus>;

        $r5 = interfaceinvoke $r4.<org.apache.cxf.Bus: java.lang.Object getExtension(java.lang.Class)>(class "Lorg/apache/cxf/management/InstrumentationManager;");

        $r6 = (org.apache.cxf.management.InstrumentationManager) $r5;

        $r7 = interfaceinvoke $r6.<org.apache.cxf.management.InstrumentationManager: javax.management.MBeanServer getMBeanServer()>();

        return $r7;

     label1:
        return null;
    }

    public synchronized org.eclipse.jetty.util.component.Container$Listener getMBeanContainer()
    {
        java.lang.Throwable $r15;
        java.lang.Object[] $r7, $r12;
        java.lang.reflect.Constructor $r6;
        javax.management.MBeanServer $r2;
        java.lang.String $r19, $r21;
        java.lang.reflect.Method $r11;
        java.lang.Class[] $r5, $r10;
        java.util.logging.Logger $r17;
        org.eclipse.jetty.util.component.Container$Listener $r1, $r9, $r13, $r14, $r22;
        java.lang.Class $r3, $r4;
        java.lang.Object $r8;
        java.lang.StringBuilder $r16, $r18, $r20;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        $r1 = r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.eclipse.jetty.util.component.Container$Listener mBeanContainer>;

        if $r1 == null goto label1;

        $r14 = r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.eclipse.jetty.util.component.Container$Listener mBeanContainer>;

        return $r14;

     label1:
        $r2 = virtualinvoke r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: javax.management.MBeanServer getMBeanServer()>();

        if $r2 == null goto label5;

     label2:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = staticinvoke <org.apache.cxf.common.classloader.ClassLoaderUtils: java.lang.Class loadClass(java.lang.String,java.lang.Class)>("org.eclipse.jetty.jmx.MBeanContainer", $r3);

        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "Ljavax/management/MBeanServer;";

        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r5);

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = $r2;

        $r8 = virtualinvoke $r6.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);

        $r9 = (org.eclipse.jetty.util.component.Container$Listener) $r8;

        r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.eclipse.jetty.util.component.Container$Listener mBeanContainer> = $r9;

        $r10 = (java.lang.Class[]) null;

        $r11 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("start", $r10);

        $r13 = r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.eclipse.jetty.util.component.Container$Listener mBeanContainer>;

        $r12 = (java.lang.Object[]) null;

        virtualinvoke $r11.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r13, $r12);

     label3:
        goto label5;

     label4:
        $r15 := @caughtexception;

        $r17 = <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.logging.Logger LOG>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not load or start org.eclipse.management.MBeanContainer.  Jetty JMX support will not be enabled: ");

        $r19 = virtualinvoke $r15.<java.lang.Throwable: java.lang.String getMessage()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r17.<java.util.logging.Logger: void info(java.lang.String)>($r21);

     label5:
        $r22 = r0.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.eclipse.jetty.util.component.Container$Listener mBeanContainer>;

        return $r22;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void initComplete()
    {
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        return;
    }

    public void postShutdown()
    {
        java.lang.Object[] $r5;
        java.util.Collection $r1, $r3;
        java.util.concurrent.ConcurrentHashMap $r0, $r2;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine[] $r4, r6;
        java.util.Map $r8, $r9;
        int $i0, i1, i2;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine r10;
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r7;

        r7 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        $r0 = <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.concurrent.ConcurrentHashMap portMap>;

        $r1 = virtualinvoke $r0.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        $r2 = <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.concurrent.ConcurrentHashMap portMap>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>();

        $i0 = interfaceinvoke $r3.<java.util.Collection: int size()>();

        $r4 = newarray (org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine)[$i0];

        $r5 = interfaceinvoke $r1.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        r6 = (org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine[]) $r5;

        i1 = lengthof r6;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        r10 = r6[i2];

        virtualinvoke r10.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngine: void shutdown()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        $r8 = r7.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.Map threadingParametersMap>;

        interfaceinvoke $r8.<java.util.Map: void clear()>();

        $r9 = r7.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.Map tlsParametersMap>;

        interfaceinvoke $r9.<java.util.Map: void clear()>();

        r7.<org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: org.eclipse.jetty.util.component.Container$Listener mBeanContainer> = null;

        return;
    }

    public void preShutdown()
    {
        org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory r0;

        r0 := @this: org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory;

        return;
    }

    static void <clinit>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        java.util.logging.Logger $r0;

        <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: int FALLBACK_THREADING_PARAMS_KEY> = 0;

        $r0 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/transport/http_jetty/JettyHTTPServerEngineFactory;");

        <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.logging.Logger LOG> = $r0;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        <org.apache.cxf.transport.http_jetty.JettyHTTPServerEngineFactory: java.util.concurrent.ConcurrentHashMap portMap> = $r1;

        return;
    }
}
