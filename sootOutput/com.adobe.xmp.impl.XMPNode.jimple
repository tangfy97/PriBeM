class com.adobe.xmp.impl.XMPNode extends java.lang.Object implements java.lang.Comparable
{
    private java.lang.String name;
    private java.lang.String value;
    private com.adobe.xmp.impl.XMPNode parent;
    private java.util.List children;
    private java.util.List qualifier;
    private com.adobe.xmp.options.PropertyOptions options;
    private boolean implicit;
    private boolean hasAliases;
    private boolean alias;
    private boolean hasValueChild;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String, java.lang.String, com.adobe.xmp.options.PropertyOptions)
    {
        com.adobe.xmp.options.PropertyOptions r3;
        com.adobe.xmp.impl.XMPNode r0;
        java.lang.String r1, r2;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.adobe.xmp.options.PropertyOptions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPNode: java.util.List children> = null;

        r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier> = null;

        r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions options> = null;

        r0.<com.adobe.xmp.impl.XMPNode: java.lang.String name> = r1;

        r0.<com.adobe.xmp.impl.XMPNode: java.lang.String value> = r2;

        r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions options> = r3;

        return;
    }

    public void <init>(java.lang.String, com.adobe.xmp.options.PropertyOptions)
    {
        com.adobe.xmp.options.PropertyOptions r2;
        com.adobe.xmp.impl.XMPNode r0;
        java.lang.String r1;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.adobe.xmp.options.PropertyOptions;

        specialinvoke r0.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>(r1, null, r2);

        return;
    }

    public void clear()
    {
        com.adobe.xmp.impl.XMPNode r0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions options> = null;

        r0.<com.adobe.xmp.impl.XMPNode: java.lang.String name> = null;

        r0.<com.adobe.xmp.impl.XMPNode: java.lang.String value> = null;

        r0.<com.adobe.xmp.impl.XMPNode: java.util.List children> = null;

        r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier> = null;

        return;
    }

    public com.adobe.xmp.impl.XMPNode getParent()
    {
        com.adobe.xmp.impl.XMPNode r0, $r1;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode parent>;

        return $r1;
    }

    public com.adobe.xmp.impl.XMPNode getChild(int)
    {
        java.util.List $r1;
        com.adobe.xmp.impl.XMPNode r0, $r3;
        int i0, $i1;
        java.lang.Object $r2;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getChildren()>();

        $i1 = i0 - 1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = (com.adobe.xmp.impl.XMPNode) $r2;

        return $r3;
    }

    public void addChild(com.adobe.xmp.impl.XMPNode) throws com.adobe.xmp.XMPException
    {
        java.util.List $r3;
        com.adobe.xmp.impl.XMPNode r0, r1;
        java.lang.String $r2;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPNode: void assertChildNotExisting(java.lang.String)>($r2);

        virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: void setParent(com.adobe.xmp.impl.XMPNode)>(r0);

        $r3 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getChildren()>();

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addChild(int, com.adobe.xmp.impl.XMPNode) throws com.adobe.xmp.XMPException
    {
        java.util.List $r3;
        com.adobe.xmp.impl.XMPNode r0, r1;
        int i0, $i1;
        java.lang.String $r2;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter0: int;

        r1 := @parameter1: com.adobe.xmp.impl.XMPNode;

        $r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPNode: void assertChildNotExisting(java.lang.String)>($r2);

        virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: void setParent(com.adobe.xmp.impl.XMPNode)>(r0);

        $r3 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getChildren()>();

        $i1 = i0 - 1;

        interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>($i1, r1);

        return;
    }

    public void replaceChild(int, com.adobe.xmp.impl.XMPNode)
    {
        java.util.List $r2;
        com.adobe.xmp.impl.XMPNode r0, r1;
        int i0, $i1;

        r1 := @this: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter0: int;

        r0 := @parameter1: com.adobe.xmp.impl.XMPNode;

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void setParent(com.adobe.xmp.impl.XMPNode)>(r1);

        $r2 = specialinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.List getChildren()>();

        $i1 = i0 - 1;

        interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i1, r0);

        return;
    }

    public void removeChild(int)
    {
        java.util.List $r1;
        com.adobe.xmp.impl.XMPNode r0;
        int i0, $i1;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getChildren()>();

        $i1 = i0 - 1;

        interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>($i1);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void cleanupChildren()>();

        return;
    }

    public void removeChild(com.adobe.xmp.impl.XMPNode)
    {
        java.util.List $r1;
        com.adobe.xmp.impl.XMPNode r0, r2;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $r1 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getChildren()>();

        interfaceinvoke $r1.<java.util.List: boolean remove(java.lang.Object)>(r2);

        virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: void cleanupChildren()>();

        return;
    }

    protected void cleanupChildren()
    {
        java.util.List $r1;
        com.adobe.xmp.impl.XMPNode r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List children>;

        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r0.<com.adobe.xmp.impl.XMPNode: java.util.List children> = null;

     label1:
        return;
    }

    public void removeChildren()
    {
        com.adobe.xmp.impl.XMPNode r0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r0.<com.adobe.xmp.impl.XMPNode: java.util.List children> = null;

        return;
    }

    public int getChildrenLength()
    {
        java.util.List $r1, $r2;
        com.adobe.xmp.impl.XMPNode r0;
        int $i0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List children>;

        if $r1 == null goto label1;

        $r2 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List children>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public com.adobe.xmp.impl.XMPNode findChildByName(java.lang.String)
    {
        java.util.List $r1;
        com.adobe.xmp.impl.XMPNode r0, $r3;
        java.lang.String r2;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter0: java.lang.String;

        $r1 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getChildren()>();

        $r3 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode find(java.util.List,java.lang.String)>($r1, r2);

        return $r3;
    }

    public com.adobe.xmp.impl.XMPNode getQualifier(int)
    {
        java.util.List $r1;
        com.adobe.xmp.impl.XMPNode r0, $r3;
        int i0, $i1;
        java.lang.Object $r2;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getQualifier()>();

        $i1 = i0 - 1;

        $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i1);

        $r3 = (com.adobe.xmp.impl.XMPNode) $r2;

        return $r3;
    }

    public int getQualifierLength()
    {
        java.util.List $r1, $r2;
        com.adobe.xmp.impl.XMPNode r0;
        int $i0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier>;

        if $r1 == null goto label1;

        $r2 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        goto label2;

     label1:
        $i0 = 0;

     label2:
        return $i0;
    }

    public void addQualifier(com.adobe.xmp.impl.XMPNode) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.options.PropertyOptions $r3, $r4, $r6, $r8, $r9;
        java.util.List $r5, $r7, $r10;
        com.adobe.xmp.impl.XMPNode r0, r1;
        byte $b0;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        specialinvoke r0.<com.adobe.xmp.impl.XMPNode: void assertQualifierNotExisting(java.lang.String)>($r2);

        virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: void setParent(com.adobe.xmp.impl.XMPNode)>(r0);

        $r3 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r3.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setQualifier(boolean)>(1);

        $r4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r4.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasQualifiers(boolean)>(1);

        $z0 = specialinvoke r1.<com.adobe.xmp.impl.XMPNode: boolean isLanguageNode()>();

        if $z0 == 0 goto label1;

        $r9 = r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions options>;

        virtualinvoke $r9.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasLanguage(boolean)>(1);

        $r10 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getQualifier()>();

        interfaceinvoke $r10.<java.util.List: void add(int,java.lang.Object)>(0, r1);

        goto label5;

     label1:
        $z1 = specialinvoke r1.<com.adobe.xmp.impl.XMPNode: boolean isTypeNode()>();

        if $z1 == 0 goto label4;

        $r6 = r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions options>;

        virtualinvoke $r6.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasType(boolean)>(1);

        $r7 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getQualifier()>();

        $r8 = r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions options>;

        $z2 = virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: boolean getHasLanguage()>();

        if $z2 != 0 goto label2;

        $b0 = 0;

        goto label3;

     label2:
        $b0 = 1;

     label3:
        interfaceinvoke $r7.<java.util.List: void add(int,java.lang.Object)>($b0, r1);

        goto label5;

     label4:
        $r5 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getQualifier()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r1);

     label5:
        return;
    }

    public void removeQualifier(com.adobe.xmp.impl.XMPNode)
    {
        com.adobe.xmp.options.PropertyOptions $r1;
        java.util.List $r3, $r4;
        com.adobe.xmp.impl.XMPNode r0, r2;
        boolean $z0, $z1, $z2;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter0: com.adobe.xmp.impl.XMPNode;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = specialinvoke r2.<com.adobe.xmp.impl.XMPNode: boolean isLanguageNode()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasLanguage(boolean)>(0);

        goto label2;

     label1:
        $z1 = specialinvoke r2.<com.adobe.xmp.impl.XMPNode: boolean isTypeNode()>();

        if $z1 == 0 goto label2;

        virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasType(boolean)>(0);

     label2:
        $r3 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getQualifier()>();

        interfaceinvoke $r3.<java.util.List: boolean remove(java.lang.Object)>(r2);

        $r4 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier>;

        $z2 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label3;

        virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasQualifiers(boolean)>(0);

        r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier> = null;

     label3:
        return;
    }

    public void removeQualifiers()
    {
        com.adobe.xmp.options.PropertyOptions $r1;
        com.adobe.xmp.impl.XMPNode r0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasQualifiers(boolean)>(0);

        virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasLanguage(boolean)>(0);

        virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: com.adobe.xmp.options.PropertyOptions setHasType(boolean)>(0);

        r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier> = null;

        return;
    }

    public com.adobe.xmp.impl.XMPNode findQualifierByName(java.lang.String)
    {
        java.util.List $r2;
        com.adobe.xmp.impl.XMPNode r0, $r3;
        java.lang.String r1;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier>;

        $r3 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode find(java.util.List,java.lang.String)>($r2, r1);

        return $r3;
    }

    public boolean hasChildren()
    {
        java.util.List $r1, $r2;
        com.adobe.xmp.impl.XMPNode r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List children>;

        if $r1 == null goto label1;

        $r2 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List children>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Iterator iterateChildren()
    {
        java.util.List $r1, $r2, $r4;
        com.adobe.xmp.impl.XMPNode r0;
        java.util.Iterator $r5;
        java.util.ListIterator $r3;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List children>;

        if $r1 == null goto label1;

        $r4 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getChildren()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        return $r5;

     label1:
        $r2 = <java.util.Collections: java.util.List EMPTY_LIST>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.ListIterator listIterator()>();

        return $r3;
    }

    public boolean hasQualifier()
    {
        java.util.List $r1, $r2;
        com.adobe.xmp.impl.XMPNode r0;
        int $i0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier>;

        if $r1 == null goto label1;

        $r2 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.util.Iterator iterateQualifier()
    {
        java.util.List $r1, $r2, $r4;
        com.adobe.xmp.impl.XMPNode r0;
        java.util.Iterator $r3, $r5;
        com.adobe.xmp.impl.XMPNode$1 $r6;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier>;

        if $r1 == null goto label1;

        $r4 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getQualifier()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

        $r6 = new com.adobe.xmp.impl.XMPNode$1;

        specialinvoke $r6.<com.adobe.xmp.impl.XMPNode$1: void <init>(com.adobe.xmp.impl.XMPNode,java.util.Iterator)>(r0, $r5);

        return $r6;

     label1:
        $r2 = <java.util.Collections: java.util.List EMPTY_LIST>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

        return $r3;
    }

    public java.lang.Object clone()
    {
        com.adobe.xmp.options.PropertyOptions $r0, $r2, $r7, r8;
        com.adobe.xmp.impl.XMPNode r1, $r3;
        com.adobe.xmp.XMPException $r6;
        int $i0;
        java.lang.String $r4, $r5;

        r1 := @this: com.adobe.xmp.impl.XMPNode;

     label1:
        $r0 = new com.adobe.xmp.options.PropertyOptions;

        $r2 = virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $i0 = virtualinvoke $r2.<com.adobe.xmp.options.PropertyOptions: int getOptions()>();

        specialinvoke $r0.<com.adobe.xmp.options.PropertyOptions: void <init>(int)>($i0);

        r8 = $r0;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r7.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        r8 = $r7;

     label4:
        $r3 = new com.adobe.xmp.impl.XMPNode;

        $r5 = r1.<com.adobe.xmp.impl.XMPNode: java.lang.String name>;

        $r4 = r1.<com.adobe.xmp.impl.XMPNode: java.lang.String value>;

        specialinvoke $r3.<com.adobe.xmp.impl.XMPNode: void <init>(java.lang.String,java.lang.String,com.adobe.xmp.options.PropertyOptions)>($r5, $r4, r8);

        virtualinvoke r1.<com.adobe.xmp.impl.XMPNode: void cloneSubtree(com.adobe.xmp.impl.XMPNode)>($r3);

        return $r3;

        catch com.adobe.xmp.XMPException from label1 to label2 with label3;
    }

    public void cloneSubtree(com.adobe.xmp.impl.XMPNode)
    {
        java.lang.AssertionError $r11;
        com.adobe.xmp.XMPException $r10;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r1, $r2;
        com.adobe.xmp.impl.XMPNode r0, r4, $r6, $r9, r12, r13;
        java.lang.Object $r3, $r5, $r7, $r8;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r4 := @parameter0: com.adobe.xmp.impl.XMPNode;

     label1:
        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r12 = (com.adobe.xmp.impl.XMPNode) $r7;

        $r8 = virtualinvoke r12.<com.adobe.xmp.impl.XMPNode: java.lang.Object clone()>();

        $r9 = (com.adobe.xmp.impl.XMPNode) $r8;

        virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: void addChild(com.adobe.xmp.impl.XMPNode)>($r9);

        goto label2;

     label3:
        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateQualifier()>();

     label4:
        $z1 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r13 = (com.adobe.xmp.impl.XMPNode) $r3;

        $r5 = virtualinvoke r13.<com.adobe.xmp.impl.XMPNode: java.lang.Object clone()>();

        $r6 = (com.adobe.xmp.impl.XMPNode) $r5;

        virtualinvoke r4.<com.adobe.xmp.impl.XMPNode: void addQualifier(com.adobe.xmp.impl.XMPNode)>($r6);

        goto label4;

     label5:
        goto label7;

     label6:
        $r10 := @caughtexception;

        $z2 = <com.adobe.xmp.impl.XMPNode: boolean $assertionsDisabled>;

        if $z2 != 0 goto label7;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label7:
        return;

        catch com.adobe.xmp.XMPException from label1 to label5 with label6;
    }

    public java.lang.String dumpNode(boolean)
    {
        com.adobe.xmp.impl.XMPNode r1;
        java.lang.StringBuffer $r0;
        java.lang.String $r2;
        boolean z0;

        r1 := @this: com.adobe.xmp.impl.XMPNode;

        z0 := @parameter0: boolean;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>(int)>(512);

        specialinvoke r1.<com.adobe.xmp.impl.XMPNode: void dumpNode(java.lang.StringBuffer,boolean,int,int)>($r0, z0, 0, 0);

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    public int compareTo(java.lang.Object)
    {
        com.adobe.xmp.options.PropertyOptions $r1;
        com.adobe.xmp.impl.XMPNode r0, $r3, $r6;
        int $i0, $i1;
        java.lang.Object r2;
        java.lang.String $r4, $r5, $r7, $r8;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter0: java.lang.Object;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z0 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean isSchemaNode()>();

        if $z0 == 0 goto label1;

        $r7 = r0.<com.adobe.xmp.impl.XMPNode: java.lang.String value>;

        $r6 = (com.adobe.xmp.impl.XMPNode) r2;

        $r8 = virtualinvoke $r6.<com.adobe.xmp.impl.XMPNode: java.lang.String getValue()>();

        $i1 = virtualinvoke $r7.<java.lang.String: int compareTo(java.lang.String)>($r8);

        return $i1;

     label1:
        $r4 = r0.<com.adobe.xmp.impl.XMPNode: java.lang.String name>;

        $r3 = (com.adobe.xmp.impl.XMPNode) r2;

        $r5 = virtualinvoke $r3.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int compareTo(java.lang.String)>($r5);

        return $i0;
    }

    public java.lang.String getName()
    {
        com.adobe.xmp.impl.XMPNode r0;
        java.lang.String $r1;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: java.lang.String name>;

        return $r1;
    }

    public void setName(java.lang.String)
    {
        com.adobe.xmp.impl.XMPNode r0;
        java.lang.String r1;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter0: java.lang.String;

        r0.<com.adobe.xmp.impl.XMPNode: java.lang.String name> = r1;

        return;
    }

    public java.lang.String getValue()
    {
        com.adobe.xmp.impl.XMPNode r0;
        java.lang.String $r1;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: java.lang.String value>;

        return $r1;
    }

    public void setValue(java.lang.String)
    {
        com.adobe.xmp.impl.XMPNode r0;
        java.lang.String r1;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter0: java.lang.String;

        r0.<com.adobe.xmp.impl.XMPNode: java.lang.String value> = r1;

        return;
    }

    public com.adobe.xmp.options.PropertyOptions getOptions()
    {
        com.adobe.xmp.options.PropertyOptions $r1, $r2, $r3;
        com.adobe.xmp.impl.XMPNode r0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions options>;

        if $r1 != null goto label1;

        $r3 = new com.adobe.xmp.options.PropertyOptions;

        specialinvoke $r3.<com.adobe.xmp.options.PropertyOptions: void <init>()>();

        r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions options> = $r3;

     label1:
        $r2 = r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions options>;

        return $r2;
    }

    public void setOptions(com.adobe.xmp.options.PropertyOptions)
    {
        com.adobe.xmp.options.PropertyOptions r1;
        com.adobe.xmp.impl.XMPNode r0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter0: com.adobe.xmp.options.PropertyOptions;

        r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions options> = r1;

        return;
    }

    public boolean isImplicit()
    {
        com.adobe.xmp.impl.XMPNode r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $z0 = r0.<com.adobe.xmp.impl.XMPNode: boolean implicit>;

        return $z0;
    }

    public void setImplicit(boolean)
    {
        com.adobe.xmp.impl.XMPNode r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        z0 := @parameter0: boolean;

        r0.<com.adobe.xmp.impl.XMPNode: boolean implicit> = z0;

        return;
    }

    public boolean getHasAliases()
    {
        com.adobe.xmp.impl.XMPNode r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $z0 = r0.<com.adobe.xmp.impl.XMPNode: boolean hasAliases>;

        return $z0;
    }

    public void setHasAliases(boolean)
    {
        com.adobe.xmp.impl.XMPNode r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        z0 := @parameter0: boolean;

        r0.<com.adobe.xmp.impl.XMPNode: boolean hasAliases> = z0;

        return;
    }

    public boolean isAlias()
    {
        com.adobe.xmp.impl.XMPNode r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $z0 = r0.<com.adobe.xmp.impl.XMPNode: boolean alias>;

        return $z0;
    }

    public void setAlias(boolean)
    {
        com.adobe.xmp.impl.XMPNode r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        z0 := @parameter0: boolean;

        r0.<com.adobe.xmp.impl.XMPNode: boolean alias> = z0;

        return;
    }

    public boolean getHasValueChild()
    {
        com.adobe.xmp.impl.XMPNode r0;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $z0 = r0.<com.adobe.xmp.impl.XMPNode: boolean hasValueChild>;

        return $z0;
    }

    public void setHasValueChild(boolean)
    {
        com.adobe.xmp.impl.XMPNode r0;
        boolean z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        z0 := @parameter0: boolean;

        r0.<com.adobe.xmp.impl.XMPNode: boolean hasValueChild> = z0;

        return;
    }

    public void sort()
    {
        java.util.ListIterator $r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.adobe.xmp.options.PropertyOptions $r1;
        java.util.List $r5, $r6, $r10;
        java.lang.Object[] $r8;
        int $i0, $i1, $i2, i3, i4, $i5;
        java.lang.String $r15, $r16, $r19, $r20;
        java.util.Iterator $r2;
        com.adobe.xmp.impl.XMPNode[] $r7, $r9, r21;
        com.adobe.xmp.impl.XMPNode r0, $r4, $r12, $r13, $r14, $r17, $r18;
        java.lang.Object $r3;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $z0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean hasQualifier()>();

        if $z0 == 0 goto label5;

        $r6 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getQualifier()>();

        $i0 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getQualifierLength()>();

        $r7 = newarray (com.adobe.xmp.impl.XMPNode)[$i0];

        $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (com.adobe.xmp.impl.XMPNode[]) $r8;

        r21 = (com.adobe.xmp.impl.XMPNode[]) $r9;

        i3 = 0;

     label1:
        $i1 = lengthof r21;

        if $i1 <= i3 goto label3;

        $r15 = "xml:lang";

        $r14 = r21[i3];

        $r16 = virtualinvoke $r14.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z3 != 0 goto label2;

        $r19 = "rdf:type";

        $r18 = r21[i3];

        $r20 = virtualinvoke $r18.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z4 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z4 == 0 goto label3;

     label2:
        $r17 = r21[i3];

        virtualinvoke $r17.<com.adobe.xmp.impl.XMPNode: void sort()>();

        i3 = i3 + 1;

        goto label1;

     label3:
        $i2 = lengthof r21;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int)>(r21, i3, $i2);

        $r10 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.ListIterator listIterator()>();

        i4 = 0;

     label4:
        $i5 = lengthof r21;

        if i4 >= $i5 goto label5;

        interfaceinvoke $r11.<java.util.ListIterator: java.lang.Object next()>();

        $r12 = r21[i4];

        interfaceinvoke $r11.<java.util.ListIterator: void set(java.lang.Object)>($r12);

        $r13 = r21[i4];

        virtualinvoke $r13.<com.adobe.xmp.impl.XMPNode: void sort()>();

        i4 = i4 + 1;

        goto label4;

     label5:
        $z1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z1 == 0 goto label8;

        $r1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r1.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z2 != 0 goto label6;

        $r5 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List children>;

        staticinvoke <java.util.Collections: void sort(java.util.List)>($r5);

     label6:
        $r2 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.Iterator iterateChildren()>();

     label7:
        $z5 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label8;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (com.adobe.xmp.impl.XMPNode) $r3;

        virtualinvoke $r4.<com.adobe.xmp.impl.XMPNode: void sort()>();

        goto label7;

     label8:
        return;
    }

    private void dumpNode(java.lang.StringBuffer, boolean, int, int)
    {
        java.lang.Object[] $r6, $r11;
        java.lang.StringBuffer r2;
        java.lang.String $r3, $r14, $r15, $r17, $r18, $r20, $r22, $r23, $r24, $r25, $r26, $r30, $r31, $r32;
        com.adobe.xmp.impl.XMPNode r0, $r1, $r13, $r16, $r28, r35, r37;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        com.adobe.xmp.options.PropertyOptions $r8, $r19, $r21, $r27, $r29, $r33;
        java.util.List $r4, $r9;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, $i15, i16, $i17, $i19;
        com.adobe.xmp.impl.XMPNode[] $r5, $r7, $r10, $r12, r34, r36;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r2 := @parameter0: java.lang.StringBuffer;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i11 := @parameter3: int;

        i12 = 0;

     label01:
        if i12 >= i0 goto label02;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(9);

        i12 = i12 + 1;

        goto label01;

     label02:
        $r1 = r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode parent>;

        if $r1 == null goto label05;

        $r27 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z6 = virtualinvoke $r27.<com.adobe.xmp.options.PropertyOptions: boolean isQualifier()>();

        if $z6 == 0 goto label03;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(63);

        $r31 = r0.<com.adobe.xmp.impl.XMPNode: java.lang.String name>;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        goto label06;

     label03:
        $r28 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode getParent()>();

        $r29 = virtualinvoke $r28.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z7 = virtualinvoke $r29.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z7 == 0 goto label04;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i11);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        goto label06;

     label04:
        $r30 = r0.<com.adobe.xmp.impl.XMPNode: java.lang.String name>;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r30);

        goto label06;

     label05:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ROOT NODE");

        $r3 = r0.<com.adobe.xmp.impl.XMPNode: java.lang.String name>;

        if $r3 == null goto label06;

        $r25 = r0.<com.adobe.xmp.impl.XMPNode: java.lang.String name>;

        $i10 = virtualinvoke $r25.<java.lang.String: int length()>();

        if $i10 <= 0 goto label06;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (");

        $r26 = r0.<com.adobe.xmp.impl.XMPNode: java.lang.String name>;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

     label06:
        $r32 = r0.<com.adobe.xmp.impl.XMPNode: java.lang.String value>;

        if $r32 == null goto label07;

        $r23 = r0.<com.adobe.xmp.impl.XMPNode: java.lang.String value>;

        $i9 = virtualinvoke $r23.<java.lang.String: int length()>();

        if $i9 <= 0 goto label07;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" = \"");

        $r24 = r0.<com.adobe.xmp.impl.XMPNode: java.lang.String value>;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r24);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(34);

     label07:
        $r33 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $i19 = (int) -1;

        $z8 = virtualinvoke $r33.<com.adobe.xmp.options.PropertyOptions: boolean containsOneOf(int)>($i19);

        if $z8 == 0 goto label08;

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\t(");

        $r19 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $r20 = virtualinvoke $r19.<com.adobe.xmp.options.PropertyOptions: java.lang.String toString()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r21 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $r22 = virtualinvoke $r21.<com.adobe.xmp.options.PropertyOptions: java.lang.String getOptionsString()>();

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(41);

     label08:
        virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(10);

        if z0 == 0 goto label13;

        $z3 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean hasQualifier()>();

        if $z3 == 0 goto label13;

        $r9 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getQualifier()>();

        $i4 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getQualifierLength()>();

        $r10 = newarray (com.adobe.xmp.impl.XMPNode)[$i4];

        $r11 = interfaceinvoke $r9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r10);

        $r12 = (com.adobe.xmp.impl.XMPNode[]) $r11;

        r34 = (com.adobe.xmp.impl.XMPNode[]) $r12;

        i13 = 0;

     label09:
        $i5 = lengthof r34;

        if $i5 <= i13 goto label11;

        $r14 = "xml:lang";

        $r13 = r34[i13];

        $r15 = virtualinvoke $r13.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z4 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15);

        if $z4 != 0 goto label10;

        $r17 = "rdf:type";

        $r16 = r34[i13];

        $r18 = virtualinvoke $r16.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z5 == 0 goto label11;

     label10:
        i13 = i13 + 1;

        goto label09;

     label11:
        $i6 = lengthof r34;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int)>(r34, i13, $i6);

        i14 = 0;

     label12:
        $i15 = lengthof r34;

        if i14 >= $i15 goto label13;

        r35 = r34[i14];

        $i8 = i0 + 2;

        $i7 = i14 + 1;

        specialinvoke r35.<com.adobe.xmp.impl.XMPNode: void dumpNode(java.lang.StringBuffer,boolean,int,int)>(r2, z0, $i8, $i7);

        i14 = i14 + 1;

        goto label12;

     label13:
        if z0 == 0 goto label16;

        $z1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: boolean hasChildren()>();

        if $z1 == 0 goto label16;

        $r4 = specialinvoke r0.<com.adobe.xmp.impl.XMPNode: java.util.List getChildren()>();

        $i1 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: int getChildrenLength()>();

        $r5 = newarray (com.adobe.xmp.impl.XMPNode)[$i1];

        $r6 = interfaceinvoke $r4.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (com.adobe.xmp.impl.XMPNode[]) $r6;

        r36 = (com.adobe.xmp.impl.XMPNode[]) $r7;

        $r8 = virtualinvoke r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.options.PropertyOptions getOptions()>();

        $z2 = virtualinvoke $r8.<com.adobe.xmp.options.PropertyOptions: boolean isArray()>();

        if $z2 != 0 goto label14;

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[])>(r36);

     label14:
        i16 = 0;

     label15:
        $i17 = lengthof r36;

        if i16 >= $i17 goto label16;

        r37 = r36[i16];

        $i3 = i0 + 1;

        $i2 = i16 + 1;

        specialinvoke r37.<com.adobe.xmp.impl.XMPNode: void dumpNode(java.lang.StringBuffer,boolean,int,int)>(r2, z0, $i3, $i2);

        i16 = i16 + 1;

        goto label15;

     label16:
        return;
    }

    private boolean isLanguageNode()
    {
        com.adobe.xmp.impl.XMPNode r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r2 = "xml:lang";

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: java.lang.String name>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    private boolean isTypeNode()
    {
        com.adobe.xmp.impl.XMPNode r0;
        java.lang.String $r1, $r2;
        boolean $z0;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r2 = "rdf:type";

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: java.lang.String name>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    private java.util.List getChildren()
    {
        java.util.List $r1, $r2;
        com.adobe.xmp.impl.XMPNode r0;
        java.util.ArrayList $r3;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List children>;

        if $r1 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(0);

        r0.<com.adobe.xmp.impl.XMPNode: java.util.List children> = $r3;

     label1:
        $r2 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List children>;

        return $r2;
    }

    public java.util.List getUnmodifiableChildren()
    {
        java.util.List $r2, $r3;
        com.adobe.xmp.impl.XMPNode r1;
        java.util.ArrayList $r0;

        r1 := @this: com.adobe.xmp.impl.XMPNode;

        $r0 = new java.util.ArrayList;

        $r2 = specialinvoke r1.<com.adobe.xmp.impl.XMPNode: java.util.List getChildren()>();

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r3;
    }

    private java.util.List getQualifier()
    {
        java.util.List $r1, $r2;
        com.adobe.xmp.impl.XMPNode r0;
        java.util.ArrayList $r3;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        $r1 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier>;

        if $r1 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(0);

        r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier> = $r3;

     label1:
        $r2 = r0.<com.adobe.xmp.impl.XMPNode: java.util.List qualifier>;

        return $r2;
    }

    protected void setParent(com.adobe.xmp.impl.XMPNode)
    {
        com.adobe.xmp.impl.XMPNode r0, r1;

        r0 := @this: com.adobe.xmp.impl.XMPNode;

        r1 := @parameter0: com.adobe.xmp.impl.XMPNode;

        r0.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode parent> = r1;

        return;
    }

    private com.adobe.xmp.impl.XMPNode find(java.util.List, java.lang.String)
    {
        java.util.Iterator $r1;
        java.util.List r0;
        com.adobe.xmp.impl.XMPNode r3, r6;
        java.lang.Object $r2;
        java.lang.String $r4, r5;
        boolean $z0, $z1;

        r6 := @this: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter0: java.util.List;

        r5 := @parameter1: java.lang.String;

        if r0 == null goto label3;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.adobe.xmp.impl.XMPNode) $r2;

        $r4 = virtualinvoke r3.<com.adobe.xmp.impl.XMPNode: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        return r3;

     label2:
        goto label1;

     label3:
        return null;
    }

    private void assertChildNotExisting(java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r2, $r3;
        com.adobe.xmp.XMPException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String r0, $r1, $r9;
        boolean $z0;

        r2 := @this: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter0: java.lang.String;

        $r1 = "[]";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode findChildByName(java.lang.String)>(r0);

        if $r3 == null goto label1;

        $r4 = new com.adobe.xmp.XMPException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate property or field node \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>($r9, 203);

        throw $r4;

     label1:
        return;
    }

    private void assertQualifierNotExisting(java.lang.String) throws com.adobe.xmp.XMPException
    {
        com.adobe.xmp.impl.XMPNode r2, $r3;
        com.adobe.xmp.XMPException $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String r0, $r1, $r9;
        boolean $z0;

        r2 := @this: com.adobe.xmp.impl.XMPNode;

        r0 := @parameter0: java.lang.String;

        $r1 = "[]";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r2.<com.adobe.xmp.impl.XMPNode: com.adobe.xmp.impl.XMPNode findQualifierByName(java.lang.String)>(r0);

        if $r3 == null goto label1;

        $r4 = new com.adobe.xmp.XMPException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate \'");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' qualifier");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.adobe.xmp.XMPException: void <init>(java.lang.String,int)>($r9, 203);

        throw $r4;

     label1:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lcom/adobe/xmp/impl/XMPNode;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.adobe.xmp.impl.XMPNode: boolean $assertionsDisabled> = $z1;

        return;
    }
}
