public class org.jdesktop.swingx.painter.CompoundPainter extends org.jdesktop.swingx.painter.AbstractPainter
{
    private org.jdesktop.swingx.painter.Painter[] painters;
    private java.awt.geom.AffineTransform transform;
    private boolean clipPreserved;
    private boolean checkForDirtyChildPainters;
    private boolean clearLocalCacheOnly;

    public void <init>()
    {
        org.jdesktop.swingx.painter.Painter[] $r1;
        org.jdesktop.swingx.painter.CompoundPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void <init>()>();

        $r1 = newarray (org.jdesktop.swingx.painter.Painter)[0];

        r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] painters> = $r1;

        r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean clipPreserved> = 0;

        r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean checkForDirtyChildPainters> = 1;

        r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean clearLocalCacheOnly> = 0;

        return;
    }

    public transient void <init>(org.jdesktop.swingx.painter.Painter[])
    {
        org.jdesktop.swingx.painter.Painter[] $r1, r2, $r3, $r4;
        org.jdesktop.swingx.painter.CompoundPainter r0;
        int $i0, $i1;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        r2 := @parameter0: org.jdesktop.swingx.painter.Painter[];

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void <init>()>();

        $r1 = newarray (org.jdesktop.swingx.painter.Painter)[0];

        r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] painters> = $r1;

        r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean clipPreserved> = 0;

        r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean checkForDirtyChildPainters> = 1;

        r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean clearLocalCacheOnly> = 0;

        if r2 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = lengthof r2;

     label2:
        $r3 = newarray (org.jdesktop.swingx.painter.Painter)[$i1];

        r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] painters> = $r3;

        if r2 == null goto label3;

        $r4 = r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] painters>;

        $i0 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r4, 0, $i0);

     label3:
        return;
    }

    public transient void setPainters(org.jdesktop.swingx.painter.Painter[])
    {
        org.jdesktop.swingx.painter.Painter[] $r1, r2, $r3, $r4, $r5, $r6;
        org.jdesktop.swingx.painter.CompoundPainter r0;
        int $i0, $i1;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        r2 := @parameter0: org.jdesktop.swingx.painter.Painter[];

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] getPainters()>();

        if r2 != null goto label1;

        $i1 = 0;

        goto label2;

     label1:
        $i1 = lengthof r2;

     label2:
        $r3 = newarray (org.jdesktop.swingx.painter.Painter)[$i1];

        r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] painters> = $r3;

        if r2 == null goto label3;

        $r6 = r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] painters>;

        $r5 = r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] painters>;

        $i0 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, $r6, 0, $i0);

     label3:
        virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: void setDirty(boolean)>(1);

        $r4 = virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] getPainters()>();

        virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("painters", $r1, $r4);

        return;
    }

    public final org.jdesktop.swingx.painter.Painter[] getPainters()
    {
        org.jdesktop.swingx.painter.Painter[] $r1, r2, $r3;
        org.jdesktop.swingx.painter.CompoundPainter r0;
        int $i0, $i1;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        $r1 = r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] painters>;

        $i0 = lengthof $r1;

        r2 = newarray (org.jdesktop.swingx.painter.Painter)[$i0];

        $r3 = r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] painters>;

        $i1 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i1);

        return r2;
    }

    public boolean isClipPreserved()
    {
        org.jdesktop.swingx.painter.CompoundPainter r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        $z0 = r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean clipPreserved>;

        return $z0;
    }

    public void setClipPreserved(boolean)
    {
        org.jdesktop.swingx.painter.CompoundPainter r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0, z1;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean isClipPreserved()>();

        r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean clipPreserved> = z1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: void setDirty(boolean)>(1);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("clipPreserved", $r1, $r2);

        return;
    }

    public java.awt.geom.AffineTransform getTransform()
    {
        java.awt.geom.AffineTransform $r1;
        org.jdesktop.swingx.painter.CompoundPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        $r1 = r0.<org.jdesktop.swingx.painter.CompoundPainter: java.awt.geom.AffineTransform transform>;

        return $r1;
    }

    public void setTransform(java.awt.geom.AffineTransform)
    {
        java.awt.geom.AffineTransform $r1, r2;
        org.jdesktop.swingx.painter.CompoundPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        r2 := @parameter0: java.awt.geom.AffineTransform;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: java.awt.geom.AffineTransform getTransform()>();

        r0.<org.jdesktop.swingx.painter.CompoundPainter: java.awt.geom.AffineTransform transform> = r2;

        virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: void setDirty(boolean)>(1);

        virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("transform", $r1, r2);

        return;
    }

    protected void validate(java.lang.Object)
    {
        org.jdesktop.swingx.painter.Painter r2;
        org.jdesktop.swingx.painter.Painter[] r1;
        org.jdesktop.swingx.painter.CompoundPainter r0;
        int i0, i1;
        org.jdesktop.swingx.painter.AbstractPainter r3;
        java.lang.Object r4;
        boolean $z0, $z1, z2;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        r4 := @parameter0: java.lang.Object;

        z2 = 0;

        r1 = r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] painters>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $z0 = r2 instanceof org.jdesktop.swingx.painter.AbstractPainter;

        if $z0 == 0 goto label2;

        r3 = (org.jdesktop.swingx.painter.AbstractPainter) r2;

        virtualinvoke r3.<org.jdesktop.swingx.painter.AbstractPainter: void validate(java.lang.Object)>(r4);

        $z1 = virtualinvoke r3.<org.jdesktop.swingx.painter.AbstractPainter: boolean isDirty()>();

        if $z1 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean clearLocalCacheOnly> = 1;

        virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: void setDirty(boolean)>(z2);

        r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean clearLocalCacheOnly> = 0;

        return;
    }

    public boolean isCheckingDirtyChildPainters()
    {
        org.jdesktop.swingx.painter.CompoundPainter r0;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        $z0 = r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean checkForDirtyChildPainters>;

        return $z0;
    }

    public void setCheckingDirtyChildPainters(boolean)
    {
        org.jdesktop.swingx.painter.CompoundPainter r0;
        java.lang.Boolean $r1, $r2;
        boolean $z0, z1, $z2;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        z1 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean isCheckingDirtyChildPainters()>();

        r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean checkForDirtyChildPainters> = z1;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $z2 = virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean isCheckingDirtyChildPainters()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("checkingDirtyChildPainters", $r1, $r2);

        return;
    }

    protected boolean isDirty()
    {
        org.jdesktop.swingx.painter.Painter r2;
        org.jdesktop.swingx.painter.Painter[] r1;
        org.jdesktop.swingx.painter.CompoundPainter r0;
        int i0, i1;
        org.jdesktop.swingx.painter.AbstractPainter r3;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        $z0 = specialinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean isDirty()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean isCheckingDirtyChildPainters()>();

        if $z1 == 0 goto label4;

        r1 = r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] painters>;

        i0 = lengthof r1;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        $z2 = r2 instanceof org.jdesktop.swingx.painter.AbstractPainter;

        if $z2 == 0 goto label3;

        r3 = (org.jdesktop.swingx.painter.AbstractPainter) r2;

        $z3 = virtualinvoke r3.<org.jdesktop.swingx.painter.AbstractPainter: boolean isDirty()>();

        if $z3 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    public void clearCache()
    {
        org.jdesktop.swingx.painter.Painter r2;
        org.jdesktop.swingx.painter.Painter[] r1;
        org.jdesktop.swingx.painter.CompoundPainter r0;
        int i0, i1;
        org.jdesktop.swingx.painter.AbstractPainter r3;
        boolean $z0, $z1;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        $z0 = r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean clearLocalCacheOnly>;

        if $z0 != 0 goto label3;

        r1 = r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] painters>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        $z1 = r2 instanceof org.jdesktop.swingx.painter.AbstractPainter;

        if $z1 == 0 goto label2;

        r3 = (org.jdesktop.swingx.painter.AbstractPainter) r2;

        virtualinvoke r3.<org.jdesktop.swingx.painter.AbstractPainter: void clearCache()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void clearCache()>();

        return;
    }

    public void clearLocalCache()
    {
        org.jdesktop.swingx.painter.CompoundPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        specialinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: void clearCache()>();

        return;
    }

    protected void doPaint(java.awt.Graphics2D, java.lang.Object, int, int)
    {
        java.awt.Shape $r7;
        java.lang.Throwable $r8;
        org.jdesktop.swingx.painter.Painter r2;
        java.awt.Graphics2D r3, r5;
        org.jdesktop.swingx.painter.Painter[] $r1;
        org.jdesktop.swingx.painter.CompoundPainter r0;
        int i0, i1, i2, i3;
        java.awt.Graphics $r4;
        java.lang.Object r6;
        boolean $z0;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        r3 := @parameter0: java.awt.Graphics2D;

        r6 := @parameter1: java.lang.Object;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] getPainters()>();

        i0 = lengthof $r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label7;

        r2 = $r1[i3];

        $r4 = virtualinvoke r3.<java.awt.Graphics2D: java.awt.Graphics create()>();

        r5 = (java.awt.Graphics2D) $r4;

     label2:
        interfaceinvoke r2.<org.jdesktop.swingx.painter.Painter: void paint(java.awt.Graphics2D,java.lang.Object,int,int)>(r5, r6, i1, i2);

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean isClipPreserved()>();

        if $z0 == 0 goto label3;

        $r7 = virtualinvoke r5.<java.awt.Graphics2D: java.awt.Shape getClip()>();

        virtualinvoke r3.<java.awt.Graphics2D: void setClip(java.awt.Shape)>($r7);

     label3:
        virtualinvoke r5.<java.awt.Graphics2D: void dispose()>();

        goto label6;

     label4:
        $r8 := @caughtexception;

     label5:
        virtualinvoke r5.<java.awt.Graphics2D: void dispose()>();

        throw $r8;

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    protected void configureGraphics(java.awt.Graphics2D)
    {
        java.awt.geom.AffineTransform $r1;
        java.awt.Graphics2D r2;
        org.jdesktop.swingx.painter.CompoundPainter r0;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        r2 := @parameter0: java.awt.Graphics2D;

        $r1 = virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: java.awt.geom.AffineTransform getTransform()>();

        if $r1 == null goto label1;

        virtualinvoke r2.<java.awt.Graphics2D: void setTransform(java.awt.geom.AffineTransform)>($r1);

     label1:
        return;
    }

    protected boolean shouldUseCache()
    {
        org.jdesktop.swingx.painter.Painter[] $r1, $r2;
        org.jdesktop.swingx.painter.CompoundPainter r0;
        int $i0;
        boolean $z0, $z1, $z2;

        r0 := @this: org.jdesktop.swingx.painter.CompoundPainter;

        $z0 = virtualinvoke r0.<org.jdesktop.swingx.painter.CompoundPainter: boolean isCacheable()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] painters>;

        if $r1 == null goto label1;

        $r2 = r0.<org.jdesktop.swingx.painter.CompoundPainter: org.jdesktop.swingx.painter.Painter[] painters>;

        $i0 = lengthof $r2;

        if $i0 > 0 goto label2;

     label1:
        $z1 = specialinvoke r0.<org.jdesktop.swingx.painter.AbstractPainter: boolean shouldUseCache()>();

        if $z1 == 0 goto label3;

     label2:
        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        return $z2;
    }
}
