public class org.apache.jena.atlas.lib.Bytes extends java.lang.Object
{
    public static final byte[] hexDigitsUC;
    public static final byte[] hexDigitsLC;

    private void <init>()
    {
        org.apache.jena.atlas.lib.Bytes r0;

        r0 := @this: org.apache.jena.atlas.lib.Bytes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient void main(java.lang.String[])
    {
        java.lang.Object[] $r20;
        java.lang.String[] r23;
        java.nio.ByteBuffer $r0;
        byte $b1;
        int $i0, i2;
        java.lang.String $r6, $r12, $r18;
        java.lang.Byte $r22;
        java.io.PrintStream $r2, $r8, $r14, $r21;
        java.nio.ByteOrder $r4, $r10, $r16;
        java.lang.StringBuilder $r1, $r3, $r5, $r7, $r9, $r11, $r13, $r15, $r17;
        java.nio.LongBuffer $r19;

        r23 := @parameter0: java.lang.String[];

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8);

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Native order = ");

        $r4 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r6);

        $r8 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Default order = ");

        $r10 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r12);

        $r14 = <java.lang.System: java.io.PrintStream out>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Order = ");

        $r16 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18);

        $r19 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.LongBuffer asLongBuffer()>();

        virtualinvoke $r19.<java.nio.LongBuffer: java.nio.LongBuffer put(long)>(72623859790382856L);

        i2 = 0;

     label1:
        $i0 = virtualinvoke $r0.<java.nio.ByteBuffer: int capacity()>();

        if i2 >= $i0 goto label2;

        $r21 = <java.lang.System: java.io.PrintStream out>;

        $r20 = newarray (java.lang.Object)[1];

        $b1 = virtualinvoke $r0.<java.nio.ByteBuffer: byte get(int)>(i2);

        $r22 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b1);

        $r20[0] = $r22;

        virtualinvoke $r21.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("0x%02X ", $r20);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static int compare(byte[], byte[])
    {
        byte[] r0, r1;
        short $s8, $s9, $s14, $s15;
        byte b6, b7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i10, i11, $i12, $i13, $i16, $i17;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i0);

        i11 = 0;

     label1:
        if i11 >= $i2 goto label4;

        b6 = r0[i11];

        b7 = r1[i11];

        $i12 = (int) b6;

        $i13 = (int) b7;

        if $i12 != $i13 goto label2;

        goto label3;

     label2:
        $s14 = (short) b6;

        $s9 = $s14 & 255;

        $s15 = (short) b7;

        $s8 = $s15 & 255;

        $i16 = (int) $s9;

        $i17 = (int) $s8;

        $i10 = $i16 - $i17;

        return $i10;

     label3:
        i11 = i11 + 1;

        goto label1;

     label4:
        $i4 = lengthof r0;

        $i3 = lengthof r1;

        $i5 = $i4 - $i3;

        return $i5;
    }

    public static int compareByte(byte, byte)
    {
        short $s2, $s3, $s5, $s6;
        byte b0, b1;
        int $i4, $i7, $i8;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        $s5 = (short) b0;

        $s3 = $s5 & 255;

        $s6 = (short) b1;

        $s2 = $s6 & 255;

        $i7 = (int) $s3;

        $i8 = (int) $s2;

        $i4 = $i7 - $i8;

        return $i4;
    }

    public static byte[] copyOf(byte[])
    {
        int $i0;
        byte[] r0, $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <org.apache.jena.atlas.lib.Bytes: byte[] copyOf(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static byte[] copyOf(byte[], int)
    {
        byte[] r0, $r1;
        int i0, $i1, $i2;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        $i2 = $i1 - i0;

        $r1 = staticinvoke <org.apache.jena.atlas.lib.Bytes: byte[] copyOf(byte[],int,int)>(r0, i0, $i2);

        return $r1;
    }

    public static byte[] copyOf(byte[], int, int)
    {
        byte[] r0, r1;
        int i0, i1;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        r0 = newarray (byte)[i0];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, r0, 0, i0);

        return r0;
    }

    public static final int getInt(byte[])
    {
        int $i0;
        byte[] r0;

        r0 := @parameter0: byte[];

        $i0 = staticinvoke <org.apache.jena.atlas.lib.Bytes: int getInt(byte[],int)>(r0, 0);

        return $i0;
    }

    public static final int getInt(byte[], int)
    {
        byte[] r0;
        byte $b5, $b6, $b7, $b8;
        int i0, $i1, $i2, $i3, $i4, $i9;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = i0 + 0;

        $b8 = r0[$i1];

        $i2 = i0 + 1;

        $b7 = r0[$i2];

        $i3 = i0 + 2;

        $b6 = r0[$i3];

        $i4 = i0 + 3;

        $b5 = r0[$i4];

        $i9 = staticinvoke <org.apache.jena.atlas.lib.Bytes: int assembleInt(byte,byte,byte,byte)>($b8, $b7, $b6, $b5);

        return $i9;
    }

    public static final long getLong(byte[])
    {
        byte[] r0;
        long $l0;

        r0 := @parameter0: byte[];

        $l0 = staticinvoke <org.apache.jena.atlas.lib.Bytes: long getLong(byte[],int)>(r0, 0);

        return $l0;
    }

    public static final long getLong(byte[], int)
    {
        byte[] r0;
        long $l17;
        byte $b9, $b10, $b11, $b12, $b13, $b14, $b15, $b16;
        java.lang.Long $r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = i0 + 0;

        $b16 = r0[$i1];

        $i2 = i0 + 1;

        $b15 = r0[$i2];

        $i3 = i0 + 2;

        $b14 = r0[$i3];

        $i4 = i0 + 3;

        $b13 = r0[$i4];

        $i5 = i0 + 4;

        $b12 = r0[$i5];

        $i6 = i0 + 5;

        $b11 = r0[$i6];

        $i7 = i0 + 6;

        $b10 = r0[$i7];

        $i8 = i0 + 7;

        $b9 = r0[$i8];

        $r1 = staticinvoke <org.apache.jena.atlas.lib.Bytes: java.lang.Long assembleLong(byte,byte,byte,byte,byte,byte,byte,byte)>($b16, $b15, $b14, $b13, $b12, $b11, $b10, $b9);

        $l17 = virtualinvoke $r1.<java.lang.Long: long longValue()>();

        return $l17;
    }

    public static final void setInt(int, byte[])
    {
        int i0;
        byte[] r0;

        i0 := @parameter0: int;

        r0 := @parameter1: byte[];

        staticinvoke <org.apache.jena.atlas.lib.Bytes: void setInt(int,byte[],int)>(i0, r0, 0);

        return;
    }

    public static final void setInt(int, byte[], int)
    {
        byte[] r0;
        byte $b4, $b8, $b12, $b15;
        int i0, i1, $i2, $i3, $i5, $i6, $i7, $i9, $i10, $i11, $i13, $i14, $i16;

        i1 := @parameter0: int;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        $i5 = i0 + 0;

        $i2 = i1 >> 24;

        $i3 = $i2 & 255;

        $b4 = (byte) $i3;

        r0[$i5] = $b4;

        $i9 = i0 + 1;

        $i6 = i1 >> 16;

        $i7 = $i6 & 255;

        $b8 = (byte) $i7;

        r0[$i9] = $b8;

        $i13 = i0 + 2;

        $i10 = i1 >> 8;

        $i11 = $i10 & 255;

        $b12 = (byte) $i11;

        r0[$i13] = $b12;

        $i16 = i0 + 3;

        $i14 = i1 & 255;

        $b15 = (byte) $i14;

        r0[$i16] = $b15;

        return;
    }

    public static final void setLong(long, byte[])
    {
        byte[] r0;
        long l0;

        l0 := @parameter0: long;

        r0 := @parameter1: byte[];

        staticinvoke <org.apache.jena.atlas.lib.Bytes: void setLong(long,byte[],int)>(l0, r0, 0);

        return;
    }

    public static final void setLong(long, byte[], int)
    {
        byte[] r0;
        long l0, $l1, $l3;
        int i2, i4, i5, $i6;

        l0 := @parameter0: long;

        r0 := @parameter1: byte[];

        i5 := @parameter2: int;

        $l1 = l0 & 4294967295L;

        i2 = (int) $l1;

        $l3 = l0 >>> 32;

        i4 = (int) $l3;

        staticinvoke <org.apache.jena.atlas.lib.Bytes: void setInt(int,byte[],int)>(i4, r0, i5);

        $i6 = i5 + 4;

        staticinvoke <org.apache.jena.atlas.lib.Bytes: void setInt(int,byte[],int)>(i2, r0, $i6);

        return;
    }

    public static byte[] packInt(int)
    {
        int i0;
        byte[] r0;

        i0 := @parameter0: int;

        r0 = newarray (byte)[4];

        staticinvoke <org.apache.jena.atlas.lib.Bytes: void setInt(int,byte[],int)>(i0, r0, 0);

        return r0;
    }

    public static byte[] packLong(long)
    {
        byte[] r0;
        long l0;

        l0 := @parameter0: long;

        r0 = newarray (byte)[8];

        staticinvoke <org.apache.jena.atlas.lib.Bytes: void setLong(long,byte[],int)>(l0, r0, 0);

        return r0;
    }

    private static int assembleInt(byte, byte, byte, byte)
    {
        short $s1, $s3, $s7, $s11, $s15, $s17, $s19, $s21;
        byte b0, b2, b6, b10;
        int $i4, $i5, $i8, $i9, $i12, $i13, $i14, $i16, $i18, $i20, $i22;

        b0 := @parameter0: byte;

        b2 := @parameter1: byte;

        b6 := @parameter2: byte;

        b10 := @parameter3: byte;

        $s15 = (short) b0;

        $s1 = $s15 & 255;

        $i16 = (int) $s1;

        $i5 = $i16 << 24;

        $s17 = (short) b2;

        $s3 = $s17 & 255;

        $i18 = (int) $s3;

        $i4 = $i18 << 16;

        $i9 = $i5 | $i4;

        $s19 = (short) b6;

        $s7 = $s19 & 255;

        $i20 = (int) $s7;

        $i8 = $i20 << 8;

        $i13 = $i9 | $i8;

        $s21 = (short) b10;

        $s11 = $s21 & 255;

        $i22 = (int) $s11;

        $i12 = $i22 << 0;

        $i14 = $i13 | $i12;

        return $i14;
    }

    private static java.lang.Long assembleLong(byte, byte, byte, byte, byte, byte, byte, byte)
    {
        byte b0, b3, b8, b13, b18, b23, b28, b33;
        java.lang.Long $r0;
        long $l1, $l2, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12, $l14, $l15, $l16, $l17, $l19, $l20, $l21, $l22, $l24, $l25, $l26, $l27, $l29, $l30, $l31, $l32, $l34, $l35, $l36, $l37, $l38;

        b0 := @parameter0: byte;

        b3 := @parameter1: byte;

        b8 := @parameter2: byte;

        b13 := @parameter3: byte;

        b18 := @parameter4: byte;

        b23 := @parameter5: byte;

        b28 := @parameter6: byte;

        b33 := @parameter7: byte;

        $l1 = (long) b0;

        $l2 = $l1 & 255L;

        $l7 = $l2 << 56;

        $l4 = (long) b3;

        $l5 = $l4 & 255L;

        $l6 = $l5 << 48;

        $l12 = $l7 | $l6;

        $l9 = (long) b8;

        $l10 = $l9 & 255L;

        $l11 = $l10 << 40;

        $l17 = $l12 | $l11;

        $l14 = (long) b13;

        $l15 = $l14 & 255L;

        $l16 = $l15 << 32;

        $l22 = $l17 | $l16;

        $l19 = (long) b18;

        $l20 = $l19 & 255L;

        $l21 = $l20 << 24;

        $l27 = $l22 | $l21;

        $l24 = (long) b23;

        $l25 = $l24 & 255L;

        $l26 = $l25 << 16;

        $l32 = $l27 | $l26;

        $l29 = (long) b28;

        $l30 = $l29 & 255L;

        $l31 = $l30 << 8;

        $l37 = $l32 | $l31;

        $l34 = (long) b33;

        $l35 = $l34 & 255L;

        $l36 = $l35 << 0;

        $l38 = $l37 | $l36;

        $r0 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l38);

        return $r0;
    }

    private static byte byte3(int)
    {
        int i0, $i1;
        byte $b2;

        i0 := @parameter0: int;

        $i1 = i0 >> 24;

        $b2 = (byte) $i1;

        return $b2;
    }

    private static byte byte2(int)
    {
        int i0, $i1;
        byte $b2;

        i0 := @parameter0: int;

        $i1 = i0 >> 16;

        $b2 = (byte) $i1;

        return $b2;
    }

    private static byte byte1(int)
    {
        int i0, $i1;
        byte $b2;

        i0 := @parameter0: int;

        $i1 = i0 >> 8;

        $b2 = (byte) $i1;

        return $b2;
    }

    private static byte byte0(int)
    {
        int i0, $i1;
        byte $b2;

        i0 := @parameter0: int;

        $i1 = i0 >> 0;

        $b2 = (byte) $i1;

        return $b2;
    }

    public static byte[] string2bytes(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0;
        java.io.UnsupportedEncodingException $r2;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        return null;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String bytes2string(byte[])
    {
        byte[] r1;
        java.lang.String $r0;
        java.io.UnsupportedEncodingException $r2;

        r1 := @parameter0: byte[];

     label1:
        $r0 = new java.lang.String;

        specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>(r1, "UTF-8");

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        virtualinvoke $r2.<java.io.UnsupportedEncodingException: void printStackTrace()>();

        return null;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static int toByteBuffer(java.lang.CharSequence, java.nio.ByteBuffer)
    {
        java.lang.CharSequence r1;
        java.nio.charset.CharsetEncoder $r0;
        int $i0;
        java.nio.ByteBuffer r2;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.nio.ByteBuffer;

        $r0 = staticinvoke <org.apache.jena.atlas.lib.Chars: java.nio.charset.CharsetEncoder allocEncoder()>();

        $i0 = staticinvoke <org.apache.jena.atlas.lib.Bytes: int toByteBuffer(java.lang.CharSequence,java.nio.ByteBuffer,java.nio.charset.CharsetEncoder)>(r1, r2, $r0);

        staticinvoke <org.apache.jena.atlas.lib.Chars: void deallocEncoder(java.nio.charset.CharsetEncoder)>($r0);

        return $i0;
    }

    public static int toByteBuffer(java.lang.CharSequence, java.nio.ByteBuffer, java.nio.charset.CharsetEncoder)
    {
        java.lang.CharSequence r1;
        java.nio.CharBuffer $r2;
        java.nio.ByteBuffer r0;
        java.nio.charset.CoderResult $r4, $r5;
        java.nio.charset.CharsetEncoder r3;
        int $i0, $i1, $i2;
        org.apache.jena.atlas.lib.InternalErrorException $r6, $r7;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.CharSequence;

        r0 := @parameter1: java.nio.ByteBuffer;

        r3 := @parameter2: java.nio.charset.CharsetEncoder;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(r1);

        virtualinvoke r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder reset()>();

        $r4 = virtualinvoke r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult encode(java.nio.CharBuffer,java.nio.ByteBuffer,boolean)>($r2, r0, 1);

        $z0 = virtualinvoke $r4.<java.nio.charset.CoderResult: boolean isOverflow()>();

        if $z0 == 0 goto label1;

        $r7 = new org.apache.jena.atlas.lib.InternalErrorException;

        specialinvoke $r7.<org.apache.jena.atlas.lib.InternalErrorException: void <init>(java.lang.String)>("Bytes.toByteBuffer: encode overflow (1)");

        throw $r7;

     label1:
        $r5 = virtualinvoke r3.<java.nio.charset.CharsetEncoder: java.nio.charset.CoderResult flush(java.nio.ByteBuffer)>(r0);

        $z1 = virtualinvoke $r5.<java.nio.charset.CoderResult: boolean isOverflow()>();

        if $z1 == 0 goto label2;

        $r6 = new org.apache.jena.atlas.lib.InternalErrorException;

        specialinvoke $r6.<org.apache.jena.atlas.lib.InternalErrorException: void <init>(java.lang.String)>("Bytes.toByteBuffer: encode overflow (2)");

        throw $r6;

     label2:
        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i2 = $i1 - $i0;

        return $i2;
    }

    public static java.lang.String fromByteBuffer(java.nio.ByteBuffer)
    {
        java.nio.charset.CharsetDecoder $r0;
        java.lang.String $r2;
        java.nio.ByteBuffer r1;

        r1 := @parameter0: java.nio.ByteBuffer;

        $r0 = staticinvoke <org.apache.jena.atlas.lib.Chars: java.nio.charset.CharsetDecoder allocDecoder()>();

        $r2 = staticinvoke <org.apache.jena.atlas.lib.Bytes: java.lang.String fromByteBuffer(java.nio.ByteBuffer,java.nio.charset.CharsetDecoder)>(r1, $r0);

        staticinvoke <org.apache.jena.atlas.lib.Chars: void deallocDecoder(java.nio.charset.CharsetDecoder)>($r0);

        return $r2;
    }

    public static java.lang.String fromByteBuffer(java.nio.ByteBuffer, java.nio.charset.CharsetDecoder)
    {
        java.nio.CharBuffer $r2;
        java.nio.charset.CharsetDecoder r1;
        java.nio.ByteBuffer r0;
        java.nio.charset.CoderResult $r3, $r4;
        int $i0, $i1;
        java.lang.String $r5;
        org.apache.jena.atlas.lib.InternalErrorException $r6, $r7;
        boolean $z0, $z1;

        r0 := @parameter0: java.nio.ByteBuffer;

        r1 := @parameter1: java.nio.charset.CharsetDecoder;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        if $i0 != 0 goto label1;

        return "";

     label1:
        virtualinvoke r1.<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>();

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        $r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>($i1);

        $r3 = virtualinvoke r1.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>(r0, $r2, 1);

        $z0 = virtualinvoke $r3.<java.nio.charset.CoderResult: boolean isOverflow()>();

        if $z0 == 0 goto label2;

        $r7 = new org.apache.jena.atlas.lib.InternalErrorException;

        specialinvoke $r7.<org.apache.jena.atlas.lib.InternalErrorException: void <init>(java.lang.String)>("fromByteBuffer: decode overflow (1)");

        throw $r7;

     label2:
        $r4 = virtualinvoke r1.<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>($r2);

        $z1 = virtualinvoke $r4.<java.nio.charset.CoderResult: boolean isOverflow()>();

        if $z1 == 0 goto label3;

        $r6 = new org.apache.jena.atlas.lib.InternalErrorException;

        specialinvoke $r6.<org.apache.jena.atlas.lib.InternalErrorException: void <init>(java.lang.String)>("fromByteBuffer: decode overflow (2)");

        throw $r6;

     label3:
        virtualinvoke $r2.<java.nio.CharBuffer: java.nio.Buffer flip()>();

        $r5 = virtualinvoke $r2.<java.nio.CharBuffer: java.lang.String toString()>();

        return $r5;
    }

    public static java.lang.String asHex(byte[])
    {
        byte[] r0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $r1 = staticinvoke <org.apache.jena.atlas.lib.Bytes: java.lang.String asHexUC(byte[])>(r0);

        return $r1;
    }

    public static java.lang.String asHexUC(byte[])
    {
        byte[] r0;
        int $i0;
        char[] $r1;
        java.lang.String $r2;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = <org.apache.jena.atlas.lib.Chars: char[] hexDigitsUC>;

        $r2 = staticinvoke <org.apache.jena.atlas.lib.Bytes: java.lang.String asHex(byte[],int,int,char[])>(r0, 0, $i0, $r1);

        return $r2;
    }

    public static java.lang.String asHexLC(byte[])
    {
        byte[] r0;
        int $i0;
        char[] $r1;
        java.lang.String $r2;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = <org.apache.jena.atlas.lib.Chars: char[] hexDigitsLC>;

        $r2 = staticinvoke <org.apache.jena.atlas.lib.Bytes: java.lang.String asHex(byte[],int,int,char[])>(r0, 0, $i0, $r1);

        return $r2;
    }

    public static java.lang.String asHex(byte[], int, int, char[])
    {
        byte[] r2;
        short $s3, $s9;
        byte b2, b5;
        int i0, i1, i4, i8, $i10, $i11;
        java.lang.String $r1;
        char $c6, $c7;
        char[] r3;
        java.lang.StringBuilder $r4;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r3 := @parameter3: char[];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        i8 = i0;

     label1:
        if i8 >= i1 goto label2;

        b2 = r2[i8];

        $s9 = (short) b2;

        $s3 = $s9 & 240;

        $i10 = (int) $s3;

        i4 = $i10 >> 4;

        b5 = b2 & 15;

        $c6 = r3[i4];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        $i11 = (int) b5;

        $c7 = r3[$i11];

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7);

        i8 = i8 + 1;

        goto label1;

     label2:
        $r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r1;
    }

    public static java.lang.String asHex(byte)
    {
        java.lang.String $r0;
        byte b0;

        b0 := @parameter0: byte;

        $r0 = staticinvoke <org.apache.jena.atlas.lib.Bytes: java.lang.String asHexUC(byte)>(b0);

        return $r0;
    }

    public static java.lang.String asHexUC(byte)
    {
        char[] $r0;
        java.lang.String $r1;
        byte b0;

        b0 := @parameter0: byte;

        $r0 = <org.apache.jena.atlas.lib.Chars: char[] hexDigitsUC>;

        $r1 = staticinvoke <org.apache.jena.atlas.lib.Bytes: java.lang.String asHex(byte,char[])>(b0, $r0);

        return $r1;
    }

    public static java.lang.String asHexLC(byte)
    {
        char[] $r0;
        java.lang.String $r1;
        byte b0;

        b0 := @parameter0: byte;

        $r0 = <org.apache.jena.atlas.lib.Chars: char[] hexDigitsLC>;

        $r1 = staticinvoke <org.apache.jena.atlas.lib.Bytes: java.lang.String asHex(byte,char[])>(b0, $r0);

        return $r1;
    }

    private static java.lang.String asHex(byte, char[])
    {
        char $c4, $c5;
        short $s1, $s6;
        byte b0, b3;
        int i2, $i7, $i8;
        char[] r0, r1;
        java.lang.String $r3;

        b0 := @parameter0: byte;

        r1 := @parameter1: char[];

        $s6 = (short) b0;

        $s1 = $s6 & 240;

        $i7 = (int) $s1;

        i2 = $i7 >> 4;

        b3 = b0 & 15;

        r0 = newarray (char)[2];

        $c4 = r1[i2];

        r0[0] = $c4;

        $i8 = (int) b3;

        $c5 = r1[$i8];

        r0[1] = $c5;

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r0);

        return $r3;
    }

    public static int hexCharToInt(char)
    {
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r4;
        char c0;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r2, $r3, $r5;

        c0 := @parameter0: char;

        $i6 = (int) c0;

        if 48 > $i6 goto label1;

        $i7 = (int) c0;

        if $i7 > 57 goto label1;

        $i8 = (int) c0;

        $i5 = $i8 - 48;

        return $i5;

     label1:
        $i9 = (int) c0;

        if 65 > $i9 goto label2;

        $i10 = (int) c0;

        if $i10 > 70 goto label2;

        $i11 = (int) c0;

        $i3 = $i11 - 65;

        $i4 = $i3 + 10;

        return $i4;

     label2:
        $i12 = (int) c0;

        if 97 > $i12 goto label3;

        $i13 = (int) c0;

        if $i13 > 102 goto label3;

        $i14 = (int) c0;

        $i1 = $i14 - 97;

        $i2 = $i1 + 10;

        return $i2;

     label3:
        $r6 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad index char : ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r6;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1;

        $r0 = newarray (byte)[16];

        $r0[0] = 48;

        $r0[1] = 49;

        $r0[2] = 50;

        $r0[3] = 51;

        $r0[4] = 52;

        $r0[5] = 53;

        $r0[6] = 54;

        $r0[7] = 55;

        $r0[8] = 56;

        $r0[9] = 57;

        $r0[10] = 65;

        $r0[11] = 66;

        $r0[12] = 67;

        $r0[13] = 68;

        $r0[14] = 69;

        $r0[15] = 70;

        <org.apache.jena.atlas.lib.Bytes: byte[] hexDigitsUC> = $r0;

        $r1 = newarray (byte)[16];

        $r1[0] = 48;

        $r1[1] = 49;

        $r1[2] = 50;

        $r1[3] = 51;

        $r1[4] = 52;

        $r1[5] = 53;

        $r1[6] = 54;

        $r1[7] = 55;

        $r1[8] = 56;

        $r1[9] = 57;

        $r1[10] = 97;

        $r1[11] = 98;

        $r1[12] = 99;

        $r1[13] = 100;

        $r1[14] = 101;

        $r1[15] = 102;

        <org.apache.jena.atlas.lib.Bytes: byte[] hexDigitsLC> = $r1;

        return;
    }
}
