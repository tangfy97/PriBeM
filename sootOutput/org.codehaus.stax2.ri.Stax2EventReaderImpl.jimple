public abstract class org.codehaus.stax2.ri.Stax2EventReaderImpl extends java.lang.Object implements org.codehaus.stax2.XMLEventReader2, javax.xml.stream.XMLStreamConstants
{
    protected static final int STATE_INITIAL;
    protected static final int STATE_END_OF_INPUT;
    protected static final int STATE_CONTENT;
    protected static final int ERR_GETELEMTEXT_NOT_START_ELEM;
    protected static final int ERR_GETELEMTEXT_NON_TEXT_EVENT;
    protected static final int ERR_NEXTTAG_NON_WS_TEXT;
    protected static final int ERR_NEXTTAG_WRONG_TYPE;
    protected final javax.xml.stream.util.XMLEventAllocator mAllocator;
    protected final org.codehaus.stax2.XMLStreamReader2 mReader;
    private javax.xml.stream.events.XMLEvent mPeekedEvent;
    protected int mState;
    protected int mPrePeekEvent;

    protected void <init>(javax.xml.stream.util.XMLEventAllocator, org.codehaus.stax2.XMLStreamReader2)
    {
        javax.xml.stream.util.XMLEventAllocator r1;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;
        org.codehaus.stax2.XMLStreamReader2 r2;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        r1 := @parameter0: javax.xml.stream.util.XMLEventAllocator;

        r2 := @parameter1: org.codehaus.stax2.XMLStreamReader2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent mPeekedEvent> = null;

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mState> = 1;

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mPrePeekEvent> = 7;

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.util.XMLEventAllocator mAllocator> = r1;

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: org.codehaus.stax2.XMLStreamReader2 mReader> = r2;

        return;
    }

    public abstract boolean isPropertySupported(java.lang.String);

    public abstract boolean setProperty(java.lang.String, java.lang.Object);

    protected abstract java.lang.String getErrorDesc(int, int);

    public void close() throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;
        org.codehaus.stax2.XMLStreamReader2 $r1;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        $r1 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: org.codehaus.stax2.XMLStreamReader2 mReader>;

        interfaceinvoke $r1.<org.codehaus.stax2.XMLStreamReader2: void close()>();

        return;
    }

    public java.lang.String getElementText() throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.XMLStreamReader2 $r8;
        javax.xml.stream.events.XMLEvent $r1, r10;
        java.lang.StringBuffer $r4, r12;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r3, $r5, $r6, $r7, $r9, r11, $r13;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;
        boolean $z0, $z1;
        javax.xml.stream.events.Characters $r2;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        $r1 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent mPeekedEvent>;

        if $r1 != null goto label01;

        $r8 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: org.codehaus.stax2.XMLStreamReader2 mReader>;

        $r9 = interfaceinvoke $r8.<org.codehaus.stax2.XMLStreamReader2: java.lang.String getElementText()>();

        return $r9;

     label01:
        r10 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent mPeekedEvent>;

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent mPeekedEvent> = null;

        $i0 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mPrePeekEvent>;

        if $i0 == 1 goto label02;

        $i5 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mPrePeekEvent>;

        $r7 = specialinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: java.lang.String findErrorDesc(int,int)>(1, $i5);

        virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: void reportProblem(java.lang.String)>($r7);

     label02:
        r11 = null;

        r12 = null;

     label03:
        $z1 = interfaceinvoke r10.<javax.xml.stream.events.XMLEvent: boolean isEndElement()>();

        if $z1 == 0 goto label04;

        goto label10;

     label04:
        $i1 = interfaceinvoke r10.<javax.xml.stream.events.XMLEvent: int getEventType()>();

        if $i1 == 5 goto label09;

        if $i1 != 3 goto label05;

        goto label09;

     label05:
        $z0 = interfaceinvoke r10.<javax.xml.stream.events.XMLEvent: boolean isCharacters()>();

        if $z0 != 0 goto label06;

        $r5 = specialinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: java.lang.String findErrorDesc(int,int)>(2, $i1);

        virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: void reportProblem(java.lang.String)>($r5);

     label06:
        $r2 = interfaceinvoke r10.<javax.xml.stream.events.XMLEvent: javax.xml.stream.events.Characters asCharacters()>();

        $r3 = interfaceinvoke $r2.<javax.xml.stream.events.Characters: java.lang.String getData()>();

        if r11 != null goto label07;

        r11 = $r3;

        goto label09;

     label07:
        if r12 != null goto label08;

        $r4 = new java.lang.StringBuffer;

        $i2 = virtualinvoke r11.<java.lang.String: int length()>();

        $i3 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i4 = $i2 + $i3;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(int)>($i4);

        r12 = $r4;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r11);

     label08:
        virtualinvoke r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

     label09:
        r10 = virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent nextEvent()>();

        goto label03;

     label10:
        if r12 == null goto label11;

        $r6 = virtualinvoke r12.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;

     label11:
        if r11 != null goto label12;

        $r13 = "";

        goto label13;

     label12:
        $r13 = r11;

     label13:
        return $r13;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        org.codehaus.stax2.XMLStreamReader2 $r2;
        java.lang.Object $r3;
        java.lang.String r1;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: org.codehaus.stax2.XMLStreamReader2 mReader>;

        $r3 = interfaceinvoke $r2.<org.codehaus.stax2.XMLStreamReader2: java.lang.Object getProperty(java.lang.String)>(r1);

        return $r3;
    }

    public boolean hasNext()
    {
        int $i0;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;
        boolean $z0;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        $i0 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mState>;

        if $i0 == 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public javax.xml.stream.events.XMLEvent nextEvent() throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.XMLStreamReader2 $r2;
        javax.xml.stream.events.XMLEvent $r1, $r3, r4, $r5;
        int $i0, $i1, $i2;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;
        boolean $z0;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        $i0 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mState>;

        if $i0 != 2 goto label1;

        specialinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: void throwEndOfInput()>();

        goto label2;

     label1:
        $i1 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mState>;

        if $i1 != 1 goto label2;

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mState> = 3;

        $r5 = virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent createStartDocumentEvent()>();

        return $r5;

     label2:
        $r1 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent mPeekedEvent>;

        if $r1 == null goto label4;

        r4 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent mPeekedEvent>;

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent mPeekedEvent> = null;

        $z0 = interfaceinvoke r4.<javax.xml.stream.events.XMLEvent: boolean isEndDocument()>();

        if $z0 == 0 goto label3;

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mState> = 2;

     label3:
        return r4;

     label4:
        $r2 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: org.codehaus.stax2.XMLStreamReader2 mReader>;

        $i2 = interfaceinvoke $r2.<org.codehaus.stax2.XMLStreamReader2: int next()>();

        $r3 = virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent createNextEvent(boolean,int)>(1, $i2);

        return $r3;
    }

    public java.lang.Object next()
    {
        javax.xml.stream.events.XMLEvent $r1;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;
        javax.xml.stream.XMLStreamException $r2;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

     label1:
        $r1 = virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent nextEvent()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: void throwUnchecked(javax.xml.stream.XMLStreamException)>($r2);

        return null;

        catch javax.xml.stream.XMLStreamException from label1 to label2 with label3;
    }

    public javax.xml.stream.events.XMLEvent nextTag() throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.XMLStreamReader2 $r2, $r10;
        javax.xml.stream.events.XMLEvent $r1, $r4, r9;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r5, $r7, $r8;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;
        boolean $z0, $z1;
        javax.xml.stream.events.Characters $r6;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        $r1 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent mPeekedEvent>;

        if $r1 == null goto label10;

        r9 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent mPeekedEvent>;

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent mPeekedEvent> = null;

        $i1 = interfaceinvoke r9.<javax.xml.stream.events.XMLEvent: int getEventType()>();

        tableswitch($i1)
        {
            case 1: goto label07;
            case 2: goto label07;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label04;
            case 6: goto label03;
            case 7: goto label02;
            case 8: goto label01;
            case 9: goto label08;
            case 10: goto label08;
            case 11: goto label08;
            case 12: goto label05;
            default: goto label08;
        };

     label01:
        return null;

     label02:
        goto label09;

     label03:
        goto label09;

     label04:
        goto label09;

     label05:
        $r6 = (javax.xml.stream.events.Characters) r9;

        $z1 = interfaceinvoke $r6.<javax.xml.stream.events.Characters: boolean isWhiteSpace()>();

        if $z1 == 0 goto label06;

        goto label09;

     label06:
        $r7 = specialinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: java.lang.String findErrorDesc(int,int)>(3, $i1);

        virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: void reportProblem(java.lang.String)>($r7);

        goto label09;

     label07:
        return r9;

     label08:
        $r8 = specialinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: java.lang.String findErrorDesc(int,int)>(4, $i1);

        virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: void reportProblem(java.lang.String)>($r8);

     label09:
        goto label11;

     label10:
        $i0 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mState>;

        if $i0 != 1 goto label11;

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mState> = 3;

     label11:
        $r10 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: org.codehaus.stax2.XMLStreamReader2 mReader>;

        $i2 = interfaceinvoke $r10.<org.codehaus.stax2.XMLStreamReader2: int next()>();

        tableswitch($i2)
        {
            case 1: goto label16;
            case 2: goto label16;
            case 3: goto label13;
            case 4: goto label14;
            case 5: goto label13;
            case 6: goto label13;
            case 7: goto label17;
            case 8: goto label12;
            case 9: goto label17;
            case 10: goto label17;
            case 11: goto label17;
            case 12: goto label14;
            default: goto label17;
        };

     label12:
        return null;

     label13:
        goto label11;

     label14:
        $r2 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: org.codehaus.stax2.XMLStreamReader2 mReader>;

        $z0 = interfaceinvoke $r2.<org.codehaus.stax2.XMLStreamReader2: boolean isWhiteSpace()>();

        if $z0 == 0 goto label15;

        goto label11;

     label15:
        $r3 = specialinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: java.lang.String findErrorDesc(int,int)>(3, $i2);

        virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: void reportProblem(java.lang.String)>($r3);

        goto label18;

     label16:
        $r4 = virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent createNextEvent(boolean,int)>(0, $i2);

        return $r4;

     label17:
        $r5 = specialinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: java.lang.String findErrorDesc(int,int)>(4, $i2);

        virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: void reportProblem(java.lang.String)>($r5);

     label18:
        goto label11;
    }

    public javax.xml.stream.events.XMLEvent peek() throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.XMLStreamReader2 $r2, $r3;
        javax.xml.stream.events.XMLEvent $r1, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        $r1 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent mPeekedEvent>;

        if $r1 != null goto label3;

        $i0 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mState>;

        if $i0 != 2 goto label1;

        return null;

     label1:
        $i1 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mState>;

        if $i1 != 1 goto label2;

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mPrePeekEvent> = 7;

        $r5 = virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent createStartDocumentEvent()>();

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent mPeekedEvent> = $r5;

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mState> = 3;

        goto label3;

     label2:
        $r2 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: org.codehaus.stax2.XMLStreamReader2 mReader>;

        $i2 = interfaceinvoke $r2.<org.codehaus.stax2.XMLStreamReader2: int getEventType()>();

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mPrePeekEvent> = $i2;

        $r3 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: org.codehaus.stax2.XMLStreamReader2 mReader>;

        $i3 = interfaceinvoke $r3.<org.codehaus.stax2.XMLStreamReader2: int next()>();

        $r4 = virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent createNextEvent(boolean,int)>(0, $i3);

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent mPeekedEvent> = $r4;

     label3:
        $r6 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.events.XMLEvent mPeekedEvent>;

        return $r6;
    }

    public void remove()
    {
        java.lang.UnsupportedOperationException $r0;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r1;

        r1 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Can not remove events from XMLEventReader.");

        throw $r0;
    }

    public boolean hasNextEvent() throws javax.xml.stream.XMLStreamException
    {
        int $i0;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;
        boolean $z0;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        $i0 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mState>;

        if $i0 == 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected javax.xml.stream.events.XMLEvent createNextEvent(boolean, int) throws javax.xml.stream.XMLStreamException
    {
        java.lang.Throwable r6;
        org.codehaus.stax2.XMLStreamReader2 $r1;
        javax.xml.stream.util.XMLEventAllocator $r2;
        java.lang.RuntimeException $r4;
        javax.xml.stream.events.XMLEvent $r3;
        javax.xml.stream.XMLStreamException $r5;
        int i0;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;
        boolean z0, $z1;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

     label1:
        $r2 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.util.XMLEventAllocator mAllocator>;

        $r1 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: org.codehaus.stax2.XMLStreamReader2 mReader>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.util.XMLEventAllocator: javax.xml.stream.events.XMLEvent allocate(javax.xml.stream.XMLStreamReader)>($r1);

        if z0 == 0 goto label2;

        if i0 != 8 goto label2;

        r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: int mState> = 2;

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        r6 = virtualinvoke $r4.<java.lang.RuntimeException: java.lang.Throwable getCause()>();

     label4:
        if r6 == null goto label6;

        $z1 = r6 instanceof javax.xml.stream.XMLStreamException;

        if $z1 == 0 goto label5;

        $r5 = (javax.xml.stream.XMLStreamException) r6;

        throw $r5;

     label5:
        r6 = virtualinvoke r6.<java.lang.Throwable: java.lang.Throwable getCause()>();

        goto label4;

     label6:
        throw $r4;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    protected javax.xml.stream.events.XMLEvent createStartDocumentEvent() throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.events.XMLEvent $r3;
        org.codehaus.stax2.XMLStreamReader2 $r1;
        javax.xml.stream.util.XMLEventAllocator $r2;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        $r2 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: javax.xml.stream.util.XMLEventAllocator mAllocator>;

        $r1 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: org.codehaus.stax2.XMLStreamReader2 mReader>;

        $r3 = interfaceinvoke $r2.<javax.xml.stream.util.XMLEventAllocator: javax.xml.stream.events.XMLEvent allocate(javax.xml.stream.XMLStreamReader)>($r1);

        return $r3;
    }

    private void throwEndOfInput()
    {
        java.util.NoSuchElementException $r0;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r1;

        r1 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        $r0 = new java.util.NoSuchElementException;

        specialinvoke $r0.<java.util.NoSuchElementException: void <init>()>();

        throw $r0;
    }

    protected void throwUnchecked(javax.xml.stream.XMLStreamException)
    {
        java.lang.Throwable $r1, $r14;
        java.lang.Error $r11;
        java.lang.StringBuffer $r3, $r4, $r6, $r7, $r9;
        javax.xml.stream.XMLStreamException r0;
        java.lang.String $r8, $r10;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r13;
        boolean $z0, $z1;
        java.lang.RuntimeException $r2, $r12;
        java.lang.Class $r5;

        r13 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        r0 := @parameter0: javax.xml.stream.XMLStreamException;

        $r1 = virtualinvoke r0.<javax.xml.stream.XMLStreamException: java.lang.Throwable getNestedException()>();

        if $r1 != null goto label1;

        $r14 = r0;

        goto label2;

     label1:
        $r14 = virtualinvoke r0.<javax.xml.stream.XMLStreamException: java.lang.Throwable getNestedException()>();

     label2:
        $z0 = $r14 instanceof java.lang.RuntimeException;

        if $z0 == 0 goto label3;

        $r12 = (java.lang.RuntimeException) $r14;

        throw $r12;

     label3:
        $z1 = $r14 instanceof java.lang.Error;

        if $z1 == 0 goto label4;

        $r11 = (java.lang.Error) $r14;

        throw $r11;

     label4:
        $r2 = new java.lang.RuntimeException;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[was ");

        $r5 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] ");

        $r8 = virtualinvoke $r14.<java.lang.Throwable: java.lang.String getMessage()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r14);

        throw $r2;
    }

    protected void reportProblem(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        org.codehaus.stax2.XMLStreamReader2 $r2;
        javax.xml.stream.Location $r3;
        java.lang.String r1;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: org.codehaus.stax2.XMLStreamReader2 mReader>;

        $r3 = interfaceinvoke $r2.<org.codehaus.stax2.XMLStreamReader2: javax.xml.stream.Location getLocation()>();

        virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: void reportProblem(java.lang.String,javax.xml.stream.Location)>(r1, $r3);

        return;
    }

    protected void reportProblem(java.lang.String, javax.xml.stream.Location) throws javax.xml.stream.XMLStreamException
    {
        javax.xml.stream.Location r0;
        javax.xml.stream.XMLStreamException $r1, $r3;
        java.lang.String r2;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r4;

        r4 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: javax.xml.stream.Location;

        if r0 != null goto label1;

        $r3 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r3.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>(r2);

        throw $r3;

     label1:
        $r1 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r1.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String,javax.xml.stream.Location)>(r2, r0);

        throw $r1;
    }

    protected javax.xml.stream.XMLStreamReader getStreamReader()
    {
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;
        org.codehaus.stax2.XMLStreamReader2 $r1;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        $r1 = r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: org.codehaus.stax2.XMLStreamReader2 mReader>;

        return $r1;
    }

    private final java.lang.String findErrorDesc(int, int)
    {
        java.lang.StringBuffer $r2, $r3, $r4, $r5;
        int i0, i1;
        java.lang.String $r1, $r6;
        org.codehaus.stax2.ri.Stax2EventReaderImpl r0;

        r0 := @this: org.codehaus.stax2.ri.Stax2EventReaderImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<org.codehaus.stax2.ri.Stax2EventReaderImpl: java.lang.String getErrorDesc(int,int)>(i0, i1);

        if $r1 == null goto label1;

        return $r1;

     label1:
        tableswitch(i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            default: goto label6;
        };

     label2:
        return "Current state not START_ELEMENT when calling getElementText()";

     label3:
        return "Expected a text token";

     label4:
        return "Only all-whitespace CHARACTERS/CDATA (or SPACE) allowed for nextTag()";

     label5:
        return "Should only encounter START_ELEMENT/END_ELEMENT, SPACE, or all-white-space CHARACTERS";

     label6:
        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Internal error (unrecognized error type: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(")");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public static void <clinit>()
    {
        <org.codehaus.stax2.ri.Stax2EventReaderImpl: int ERR_NEXTTAG_WRONG_TYPE> = 4;

        <org.codehaus.stax2.ri.Stax2EventReaderImpl: int ERR_NEXTTAG_NON_WS_TEXT> = 3;

        <org.codehaus.stax2.ri.Stax2EventReaderImpl: int ERR_GETELEMTEXT_NON_TEXT_EVENT> = 2;

        <org.codehaus.stax2.ri.Stax2EventReaderImpl: int ERR_GETELEMTEXT_NOT_START_ELEM> = 1;

        <org.codehaus.stax2.ri.Stax2EventReaderImpl: int STATE_CONTENT> = 3;

        <org.codehaus.stax2.ri.Stax2EventReaderImpl: int STATE_END_OF_INPUT> = 2;

        <org.codehaus.stax2.ri.Stax2EventReaderImpl: int STATE_INITIAL> = 1;

        return;
    }
}
