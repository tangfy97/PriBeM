public final class org.tukaani.xz.lz.LZDecoder extends java.lang.Object
{
    private final byte[] buf;
    private int start;
    private int pos;
    private int full;
    private int limit;
    private int pendingLen;
    private int pendingDist;

    public void <init>(int, byte[])
    {
        byte[] $r1, r2, $r3;
        org.tukaani.xz.lz.LZDecoder r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: org.tukaani.xz.lz.LZDecoder;

        i0 := @parameter0: int;

        r2 := @parameter1: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.tukaani.xz.lz.LZDecoder: int start> = 0;

        r0.<org.tukaani.xz.lz.LZDecoder: int pos> = 0;

        r0.<org.tukaani.xz.lz.LZDecoder: int full> = 0;

        r0.<org.tukaani.xz.lz.LZDecoder: int limit> = 0;

        r0.<org.tukaani.xz.lz.LZDecoder: int pendingLen> = 0;

        r0.<org.tukaani.xz.lz.LZDecoder: int pendingDist> = 0;

        $r1 = newarray (byte)[i0];

        r0.<org.tukaani.xz.lz.LZDecoder: byte[] buf> = $r1;

        if r2 == null goto label1;

        $i1 = lengthof r2;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0);

        r0.<org.tukaani.xz.lz.LZDecoder: int pos> = $i2;

        $i3 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        r0.<org.tukaani.xz.lz.LZDecoder: int full> = $i3;

        $i4 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        r0.<org.tukaani.xz.lz.LZDecoder: int start> = $i4;

        $i6 = lengthof r2;

        $i5 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        $i8 = $i6 - $i5;

        $r3 = r0.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $i7 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i8, $r3, 0, $i7);

     label1:
        return;
    }

    public void reset()
    {
        byte[] $r1, $r2;
        org.tukaani.xz.lz.LZDecoder r0;
        int $i0, $i1;

        r0 := @this: org.tukaani.xz.lz.LZDecoder;

        r0.<org.tukaani.xz.lz.LZDecoder: int start> = 0;

        r0.<org.tukaani.xz.lz.LZDecoder: int pos> = 0;

        r0.<org.tukaani.xz.lz.LZDecoder: int full> = 0;

        r0.<org.tukaani.xz.lz.LZDecoder: int limit> = 0;

        $r2 = r0.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $r1 = r0.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $i0 = lengthof $r1;

        $i1 = $i0 - 1;

        $r2[$i1] = 0;

        return;
    }

    public void setLimit(int)
    {
        byte[] $r1, $r2;
        org.tukaani.xz.lz.LZDecoder r0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6;

        r0 := @this: org.tukaani.xz.lz.LZDecoder;

        i2 := @parameter0: int;

        $r1 = r0.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $i1 = lengthof $r1;

        $i0 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        $i3 = $i1 - $i0;

        if $i3 > i2 goto label1;

        $r2 = r0.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $i6 = lengthof $r2;

        r0.<org.tukaani.xz.lz.LZDecoder: int limit> = $i6;

        goto label2;

     label1:
        $i4 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        $i5 = $i4 + i2;

        r0.<org.tukaani.xz.lz.LZDecoder: int limit> = $i5;

     label2:
        return;
    }

    public boolean hasSpace()
    {
        org.tukaani.xz.lz.LZDecoder r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: org.tukaani.xz.lz.LZDecoder;

        $i1 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        $i0 = r0.<org.tukaani.xz.lz.LZDecoder: int limit>;

        if $i1 >= $i0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasPending()
    {
        org.tukaani.xz.lz.LZDecoder r0;
        int $i0;
        boolean $z0;

        r0 := @this: org.tukaani.xz.lz.LZDecoder;

        $i0 = r0.<org.tukaani.xz.lz.LZDecoder: int pendingLen>;

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int getPos()
    {
        org.tukaani.xz.lz.LZDecoder r0;
        int $i0;

        r0 := @this: org.tukaani.xz.lz.LZDecoder;

        $i0 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        return $i0;
    }

    public int getByte(int)
    {
        byte[] $r1, $r2;
        short $s5, $s8;
        byte $b4;
        org.tukaani.xz.lz.LZDecoder r0;
        int i0, $i1, $i2, $i3, $i6, i7, $i9;

        r0 := @this: org.tukaani.xz.lz.LZDecoder;

        i0 := @parameter0: int;

        $i1 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        $i2 = $i1 - i0;

        i7 = $i2 - 1;

        $i3 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        if i0 < $i3 goto label1;

        $r2 = r0.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $i6 = lengthof $r2;

        i7 = i7 + $i6;

     label1:
        $r1 = r0.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $b4 = $r1[i7];

        $s8 = (short) $b4;

        $s5 = $s8 & 255;

        $i9 = (int) $s5;

        return $i9;
    }

    public void putByte(byte)
    {
        byte[] $r1;
        byte b2;
        org.tukaani.xz.lz.LZDecoder r0;
        int $i0, $i1, $i3, $i4, $i5;

        r0 := @this: org.tukaani.xz.lz.LZDecoder;

        b2 := @parameter0: byte;

        $r1 = r0.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $i0 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        $i1 = $i0 + 1;

        r0.<org.tukaani.xz.lz.LZDecoder: int pos> = $i1;

        $r1[$i0] = b2;

        $i4 = r0.<org.tukaani.xz.lz.LZDecoder: int full>;

        $i3 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        if $i4 >= $i3 goto label1;

        $i5 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        r0.<org.tukaani.xz.lz.LZDecoder: int full> = $i5;

     label1:
        return;
    }

    public void repeat(int, int) throws java.io.IOException
    {
        byte[] $r2, $r3, $r4, $r5;
        byte $b20;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, $i17, $i18, $i19, $i21, $i23;
        org.tukaani.xz.CorruptedInputException $r6;
        org.tukaani.xz.lz.LZDecoder r1;

        r1 := @this: org.tukaani.xz.lz.LZDecoder;

        i0 := @parameter0: int;

        i4 := @parameter1: int;

        if i0 < 0 goto label1;

        $i1 = r1.<org.tukaani.xz.lz.LZDecoder: int full>;

        if i0 < $i1 goto label2;

     label1:
        $r6 = new org.tukaani.xz.CorruptedInputException;

        specialinvoke $r6.<org.tukaani.xz.CorruptedInputException: void <init>()>();

        throw $r6;

     label2:
        $i3 = r1.<org.tukaani.xz.lz.LZDecoder: int limit>;

        $i2 = r1.<org.tukaani.xz.lz.LZDecoder: int pos>;

        $i5 = $i3 - $i2;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i4);

        i15 = $i6;

        $i7 = i4 - $i6;

        r1.<org.tukaani.xz.lz.LZDecoder: int pendingLen> = $i7;

        r1.<org.tukaani.xz.lz.LZDecoder: int pendingDist> = i0;

        $i8 = r1.<org.tukaani.xz.lz.LZDecoder: int pos>;

        $i9 = $i8 - i0;

        i16 = $i9 - 1;

        $i10 = r1.<org.tukaani.xz.lz.LZDecoder: int pos>;

        if i0 < $i10 goto label3;

        $r2 = r1.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $i14 = lengthof $r2;

        i16 = i16 + $i14;

     label3:
        $r3 = r1.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $i17 = r1.<org.tukaani.xz.lz.LZDecoder: int pos>;

        $i18 = $i17 + 1;

        r1.<org.tukaani.xz.lz.LZDecoder: int pos> = $i18;

        $r4 = r1.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $i19 = i16;

        i16 = i16 + 1;

        $b20 = $r4[$i19];

        $r3[$i17] = $b20;

        $r5 = r1.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $i21 = lengthof $r5;

        if i16 != $i21 goto label4;

        i16 = 0;

     label4:
        $i23 = (int) -1;

        i15 = i15 + $i23;

        if i15 > 0 goto label3;

        $i12 = r1.<org.tukaani.xz.lz.LZDecoder: int full>;

        $i11 = r1.<org.tukaani.xz.lz.LZDecoder: int pos>;

        if $i12 >= $i11 goto label5;

        $i13 = r1.<org.tukaani.xz.lz.LZDecoder: int pos>;

        r1.<org.tukaani.xz.lz.LZDecoder: int full> = $i13;

     label5:
        return;
    }

    public void repeatPending() throws java.io.IOException
    {
        org.tukaani.xz.lz.LZDecoder r0;
        int $i0, $i1, $i2;

        r0 := @this: org.tukaani.xz.lz.LZDecoder;

        $i0 = r0.<org.tukaani.xz.lz.LZDecoder: int pendingLen>;

        if $i0 <= 0 goto label1;

        $i2 = r0.<org.tukaani.xz.lz.LZDecoder: int pendingDist>;

        $i1 = r0.<org.tukaani.xz.lz.LZDecoder: int pendingLen>;

        virtualinvoke r0.<org.tukaani.xz.lz.LZDecoder: void repeat(int,int)>($i2, $i1);

     label1:
        return;
    }

    public void copyUncompressed(java.io.DataInputStream, int) throws java.io.IOException
    {
        byte[] $r1, $r3;
        java.io.DataInputStream r2;
        org.tukaani.xz.lz.LZDecoder r0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;

        r0 := @this: org.tukaani.xz.lz.LZDecoder;

        r2 := @parameter0: java.io.DataInputStream;

        i2 := @parameter1: int;

        $r1 = r0.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $i1 = lengthof $r1;

        $i0 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        $i3 = $i1 - $i0;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i3, i2);

        $r3 = r0.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $i5 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        virtualinvoke r2.<java.io.DataInputStream: void readFully(byte[],int,int)>($r3, $i5, $i4);

        $i6 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        $i7 = $i6 + $i4;

        r0.<org.tukaani.xz.lz.LZDecoder: int pos> = $i7;

        $i9 = r0.<org.tukaani.xz.lz.LZDecoder: int full>;

        $i8 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        if $i9 >= $i8 goto label1;

        $i10 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        r0.<org.tukaani.xz.lz.LZDecoder: int full> = $i10;

     label1:
        return;
    }

    public int flush(byte[], int)
    {
        byte[] $r1, r2, $r3;
        org.tukaani.xz.lz.LZDecoder r0;
        int $i0, $i1, i2, $i3, $i4, i5, $i6, $i7;

        r0 := @this: org.tukaani.xz.lz.LZDecoder;

        r2 := @parameter0: byte[];

        i5 := @parameter1: int;

        $i1 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        $i0 = r0.<org.tukaani.xz.lz.LZDecoder: int start>;

        i2 = $i1 - $i0;

        $i4 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        $r1 = r0.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $i3 = lengthof $r1;

        if $i4 != $i3 goto label1;

        r0.<org.tukaani.xz.lz.LZDecoder: int pos> = 0;

     label1:
        $r3 = r0.<org.tukaani.xz.lz.LZDecoder: byte[] buf>;

        $i6 = r0.<org.tukaani.xz.lz.LZDecoder: int start>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i6, r2, i5, i2);

        $i7 = r0.<org.tukaani.xz.lz.LZDecoder: int pos>;

        r0.<org.tukaani.xz.lz.LZDecoder: int start> = $i7;

        return i2;
    }
}
