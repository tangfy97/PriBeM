class org.objectweb.asm.tree.analysis.Subroutine extends java.lang.Object
{
    org.objectweb.asm.tree.LabelNode start;
    boolean[] access;
    java.util.List callers;

    private void <init>()
    {
        org.objectweb.asm.tree.analysis.Subroutine r0;

        r0 := @this: org.objectweb.asm.tree.analysis.Subroutine;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(org.objectweb.asm.tree.LabelNode, int, org.objectweb.asm.tree.JumpInsnNode)
    {
        java.util.List $r5;
        int i0;
        boolean[] $r2;
        org.objectweb.asm.tree.LabelNode r1;
        org.objectweb.asm.tree.JumpInsnNode r4;
        org.objectweb.asm.tree.analysis.Subroutine r0;
        java.util.ArrayList $r3;

        r0 := @this: org.objectweb.asm.tree.analysis.Subroutine;

        r1 := @parameter0: org.objectweb.asm.tree.LabelNode;

        i0 := @parameter1: int;

        r4 := @parameter2: org.objectweb.asm.tree.JumpInsnNode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.objectweb.asm.tree.analysis.Subroutine: org.objectweb.asm.tree.LabelNode start> = r1;

        $r2 = newarray (boolean)[i0];

        r0.<org.objectweb.asm.tree.analysis.Subroutine: boolean[] access> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.objectweb.asm.tree.analysis.Subroutine: java.util.List callers> = $r3;

        $r5 = r0.<org.objectweb.asm.tree.analysis.Subroutine: java.util.List callers>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4);

        return;
    }

    public org.objectweb.asm.tree.analysis.Subroutine copy()
    {
        boolean[] $r3, $r4, $r5, $r6, $r7;
        org.objectweb.asm.tree.LabelNode $r2;
        java.util.ArrayList $r8;
        java.util.List $r9;
        int $i0, $i1;
        org.objectweb.asm.tree.analysis.Subroutine $r0, r1;

        r1 := @this: org.objectweb.asm.tree.analysis.Subroutine;

        $r0 = new org.objectweb.asm.tree.analysis.Subroutine;

        specialinvoke $r0.<org.objectweb.asm.tree.analysis.Subroutine: void <init>()>();

        $r2 = r1.<org.objectweb.asm.tree.analysis.Subroutine: org.objectweb.asm.tree.LabelNode start>;

        $r0.<org.objectweb.asm.tree.analysis.Subroutine: org.objectweb.asm.tree.LabelNode start> = $r2;

        $r3 = r1.<org.objectweb.asm.tree.analysis.Subroutine: boolean[] access>;

        $i0 = lengthof $r3;

        $r4 = newarray (boolean)[$i0];

        $r0.<org.objectweb.asm.tree.analysis.Subroutine: boolean[] access> = $r4;

        $r7 = r1.<org.objectweb.asm.tree.analysis.Subroutine: boolean[] access>;

        $r6 = $r0.<org.objectweb.asm.tree.analysis.Subroutine: boolean[] access>;

        $r5 = r1.<org.objectweb.asm.tree.analysis.Subroutine: boolean[] access>;

        $i1 = lengthof $r5;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r7, 0, $r6, 0, $i1);

        $r8 = new java.util.ArrayList;

        $r9 = r1.<org.objectweb.asm.tree.analysis.Subroutine: java.util.List callers>;

        specialinvoke $r8.<java.util.ArrayList: void <init>(java.util.Collection)>($r9);

        $r0.<org.objectweb.asm.tree.analysis.Subroutine: java.util.List callers> = $r8;

        return $r0;
    }

    public boolean merge(org.objectweb.asm.tree.analysis.Subroutine) throws org.objectweb.asm.tree.analysis.AnalyzerException
    {
        int $i0, $i1, i2, i3;
        org.objectweb.asm.tree.JumpInsnNode r8;
        org.objectweb.asm.tree.analysis.Subroutine r0, r2;
        boolean $z0, $z1, $z2, z3;
        boolean[] $r1, $r11, $r12, $r13;
        org.objectweb.asm.tree.LabelNode $r3, $r4;
        java.util.List $r5, $r6, $r9, $r10;
        java.lang.Object $r7;

        r0 := @this: org.objectweb.asm.tree.analysis.Subroutine;

        r2 := @parameter0: org.objectweb.asm.tree.analysis.Subroutine;

        z3 = 0;

        i2 = 0;

     label1:
        $r1 = r0.<org.objectweb.asm.tree.analysis.Subroutine: boolean[] access>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label3;

        $r11 = r2.<org.objectweb.asm.tree.analysis.Subroutine: boolean[] access>;

        $z1 = $r11[i2];

        if $z1 == 0 goto label2;

        $r12 = r0.<org.objectweb.asm.tree.analysis.Subroutine: boolean[] access>;

        $z2 = $r12[i2];

        if $z2 != 0 goto label2;

        $r13 = r0.<org.objectweb.asm.tree.analysis.Subroutine: boolean[] access>;

        $r13[i2] = 1;

        z3 = 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r4 = r2.<org.objectweb.asm.tree.analysis.Subroutine: org.objectweb.asm.tree.LabelNode start>;

        $r3 = r0.<org.objectweb.asm.tree.analysis.Subroutine: org.objectweb.asm.tree.LabelNode start>;

        if $r4 != $r3 goto label6;

        i3 = 0;

     label4:
        $r5 = r2.<org.objectweb.asm.tree.analysis.Subroutine: java.util.List callers>;

        $i1 = interfaceinvoke $r5.<java.util.List: int size()>();

        if i3 >= $i1 goto label6;

        $r6 = r2.<org.objectweb.asm.tree.analysis.Subroutine: java.util.List callers>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i3);

        r8 = (org.objectweb.asm.tree.JumpInsnNode) $r7;

        $r9 = r0.<org.objectweb.asm.tree.analysis.Subroutine: java.util.List callers>;

        $z0 = interfaceinvoke $r9.<java.util.List: boolean contains(java.lang.Object)>(r8);

        if $z0 != 0 goto label5;

        $r10 = r0.<org.objectweb.asm.tree.analysis.Subroutine: java.util.List callers>;

        interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r8);

        z3 = 1;

     label5:
        i3 = i3 + 1;

        goto label4;

     label6:
        return z3;
    }
}
