public final class org.apache.poi.util.OOXMLLite extends java.lang.Object
{
    private static final java.lang.reflect.Field _classes;
    private java.io.File _destDest;
    private java.io.File _testDir;
    private java.io.File _ooxmlJar;

    void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        org.apache.poi.util.OOXMLLite r0;
        java.lang.String r2, r4, r6;
        java.io.File $r1, $r3, $r5;

        r0 := @this: org.apache.poi.util.OOXMLLite;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        r6 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        r0.<org.apache.poi.util.OOXMLLite: java.io.File _destDest> = $r1;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r4);

        r0.<org.apache.poi.util.OOXMLLite: java.io.File _testDir> = $r3;

        $r5 = new java.io.File;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>(r6);

        r0.<org.apache.poi.util.OOXMLLite: java.io.File _ooxmlJar> = $r5;

        return;
    }

    public static void main(java.lang.String[]) throws java.io.IOException
    {
        org.apache.poi.util.OOXMLLite $r1;
        java.lang.String[] r0;
        int $i0, i1;
        java.lang.String $r2, $r3, $r4, r5, r6, r7;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.String[];

        r5 = null;

        r6 = null;

        r7 = null;

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label5;

        $r2 = r0[i1];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-dest");

        if $z0 == 0 goto label2;

        i1 = i1 + 1;

        r5 = r0[i1];

        goto label4;

     label2:
        $r3 = r0[i1];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("-test");

        if $z1 == 0 goto label3;

        i1 = i1 + 1;

        r6 = r0[i1];

        goto label4;

     label3:
        $r4 = r0[i1];

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("-ooxml");

        if $z2 == 0 goto label4;

        i1 = i1 + 1;

        r7 = r0[i1];

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        $r1 = new org.apache.poi.util.OOXMLLite;

        specialinvoke $r1.<org.apache.poi.util.OOXMLLite: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r5, r6, r7);

        virtualinvoke $r1.<org.apache.poi.util.OOXMLLite: void build()>();

        return;
    }

    void build() throws java.io.IOException
    {
        java.util.Enumeration $r32;
        junit.framework.TestSuite $r83;
        java.util.Map $r26;
        java.lang.StringBuilder $r3, $r6, $r12, $r13, $r14, $r20, $r22, $r43, $r44, $r49, $r50, $r58, $r59, $r64, $r65, $r81, $r82, $r86, $r87, $r89, $r90, $r92;
        org.apache.poi.util.OOXMLLite r4;
        java.util.ArrayList $r80;
        java.lang.String $r7, $r15, $r23, $r25, $r34, $r37, $r40, $r42, $r45, $r51, $r55, $r57, $r60, $r66, $r69, r76;
        java.lang.Class[] $r53;
        java.lang.RuntimeException $r85;
        java.io.File $r5, $r8, $r9, $r21, $r24, $r31, $r36, $r47, $r62, $r88, $r91, $r94;
        java.lang.ClassNotFoundException $r74;
        java.util.jar.JarFile $r93;
        java.lang.reflect.Method[] $r73;
        java.lang.reflect.Method r77;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7;
        java.util.Collection $r27;
        junit.framework.Test $r95, $r96;
        junit.framework.JUnit4TestAdapter $r84;
        java.util.jar.JarEntry r79;
        int $i0, $i1, i2, i3, i4, i5, $i7;
        java.io.PrintStream $r2, $r11, $r19, $r29;
        java.util.Iterator $r17, $r28;
        java.lang.Object $r33, $r39, $r68;
        java.lang.Class r54, $r70, $r71, r78;
        java.io.InputStream $r38, $r52, $r67;

        r4 := @this: org.apache.poi.util.OOXMLLite;

        $r80 = new java.util.ArrayList;

        specialinvoke $r80.<java.util.ArrayList: void <init>()>();

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Collecting unit tests from ");

        $r5 = r4.<org.apache.poi.util.OOXMLLite: java.io.File _testDir>;

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r7);

        $r9 = r4.<org.apache.poi.util.OOXMLLite: java.io.File _testDir>;

        $r8 = r4.<org.apache.poi.util.OOXMLLite: java.io.File _testDir>;

        staticinvoke <org.apache.poi.util.OOXMLLite: void collectTests(java.io.File,java.io.File,java.util.List,java.lang.String,java.lang.String)>($r9, $r8, $r80, ".+?\\.Test.+?\\.class$", ".+TestUnfixedBugs.class");

        $r11 = <java.lang.System: java.io.PrintStream out>;

        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found ");

        $i0 = interfaceinvoke $r80.<java.util.List: int size()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" tests");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r15);

        $r83 = new junit.framework.TestSuite;

        specialinvoke $r83.<junit.framework.TestSuite: void <init>()>();

        $r17 = interfaceinvoke $r80.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z6 = interfaceinvoke $r17.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label10;

        $r68 = interfaceinvoke $r17.<java.util.Iterator: java.lang.Object next()>();

        r76 = (java.lang.String) $r68;

        $i1 = virtualinvoke r76.<java.lang.String: int indexOf(int)>(36);

        $i7 = (int) -1;

        if $i1 == $i7 goto label02;

        goto label01;

     label02:
        $r69 = virtualinvoke r76.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>(".class", "");

     label03:
        $r70 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r69);

        $r71 = class "Ljunit/framework/TestCase;";

        $z4 = virtualinvoke $r71.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r70);

        z7 = $z4;

        if $z4 != 0 goto label06;

        $r73 = virtualinvoke $r70.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        i2 = lengthof $r73;

        i3 = 0;

     label04:
        if i3 >= i2 goto label06;

        r77 = $r73[i3];

        $z5 = virtualinvoke r77.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Lorg/junit/Test;");

        z7 = $z5;

        if $z5 == 0 goto label05;

        goto label06;

     label05:
        i3 = i3 + 1;

        goto label04;

     label06:
        if z7 == 0 goto label07;

        $r84 = new junit.framework.JUnit4TestAdapter;

        specialinvoke $r84.<junit.framework.JUnit4TestAdapter: void <init>(java.lang.Class)>($r70);

        $r95 = (junit.framework.Test) $r84;

        virtualinvoke $r83.<junit.framework.TestSuite: void addTest(junit.framework.Test)>($r95);

     label07:
        goto label09;

     label08:
        $r74 := @caughtexception;

        $r85 = new java.lang.RuntimeException;

        specialinvoke $r85.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r74);

        throw $r85;

     label09:
        goto label01;

     label10:
        $r96 = (junit.framework.Test) $r83;

        staticinvoke <junit.textui.TestRunner: junit.framework.TestResult run(junit.framework.Test)>($r96);

        $r19 = <java.lang.System: java.io.PrintStream out>;

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Copying classes to ");

        $r21 = r4.<org.apache.poi.util.OOXMLLite: java.io.File _destDest>;

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r23);

        $r24 = r4.<org.apache.poi.util.OOXMLLite: java.io.File _ooxmlJar>;

        $r25 = virtualinvoke $r24.<java.io.File: java.lang.String getName()>();

        $r26 = staticinvoke <org.apache.poi.util.OOXMLLite: java.util.Map getLoadedClasses(java.lang.String)>($r25);

        $r27 = interfaceinvoke $r26.<java.util.Map: java.util.Collection values()>();

        $r28 = interfaceinvoke $r27.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z0 = interfaceinvoke $r28.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label14;

        $r39 = interfaceinvoke $r28.<java.util.Iterator: java.lang.Object next()>();

        r78 = (java.lang.Class) $r39;

        $r40 = virtualinvoke r78.<java.lang.Class: java.lang.String getName()>();

        $r87 = new java.lang.StringBuilder;

        specialinvoke $r87.<java.lang.StringBuilder: void <init>()>();

        $r42 = virtualinvoke $r40.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r43 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        $r88 = new java.io.File;

        $r47 = r4.<org.apache.poi.util.OOXMLLite: java.io.File _destDest>;

        specialinvoke $r88.<java.io.File: void <init>(java.io.File,java.lang.String)>($r47, $r45);

        $r89 = new java.lang.StringBuilder;

        specialinvoke $r89.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $r52 = virtualinvoke r78.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r51);

        staticinvoke <org.apache.poi.util.OOXMLLite: void copyFile(java.io.InputStream,java.io.File)>($r52, $r88);

        $z3 = virtualinvoke r78.<java.lang.Class: boolean isInterface()>();

        if $z3 == 0 goto label13;

        $r53 = virtualinvoke r78.<java.lang.Class: java.lang.Class[] getDeclaredClasses()>();

        i4 = lengthof $r53;

        i5 = 0;

     label12:
        if i5 >= i4 goto label13;

        r54 = $r53[i5];

        $r55 = virtualinvoke r54.<java.lang.Class: java.lang.String getName()>();

        $r90 = new java.lang.StringBuilder;

        specialinvoke $r90.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r55.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r58 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".class");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        $r91 = new java.io.File;

        $r62 = r4.<org.apache.poi.util.OOXMLLite: java.io.File _destDest>;

        specialinvoke $r91.<java.io.File: void <init>(java.io.File,java.lang.String)>($r62, $r60);

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r64 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        $r67 = virtualinvoke r54.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r66);

        staticinvoke <org.apache.poi.util.OOXMLLite: void copyFile(java.io.InputStream,java.io.File)>($r67, $r91);

        i5 = i5 + 1;

        goto label12;

     label13:
        goto label11;

     label14:
        $r29 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.String)>("Copying .xsb resources");

        $r93 = new java.util.jar.JarFile;

        $r31 = r4.<org.apache.poi.util.OOXMLLite: java.io.File _ooxmlJar>;

        specialinvoke $r93.<java.util.jar.JarFile: void <init>(java.io.File)>($r31);

        $r32 = virtualinvoke $r93.<java.util.jar.JarFile: java.util.Enumeration entries()>();

     label15:
        $z1 = interfaceinvoke $r32.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label17;

        $r33 = interfaceinvoke $r32.<java.util.Enumeration: java.lang.Object nextElement()>();

        r79 = (java.util.jar.JarEntry) $r33;

        $r34 = virtualinvoke r79.<java.util.jar.JarEntry: java.lang.String getName()>();

        $z2 = virtualinvoke $r34.<java.lang.String: boolean matches(java.lang.String)>("schemaorg_apache_xmlbeans/system/\\w+/\\w+\\.xsb");

        if $z2 == 0 goto label16;

        $r94 = new java.io.File;

        $r36 = r4.<org.apache.poi.util.OOXMLLite: java.io.File _destDest>;

        $r37 = virtualinvoke r79.<java.util.jar.JarEntry: java.lang.String getName()>();

        specialinvoke $r94.<java.io.File: void <init>(java.io.File,java.lang.String)>($r36, $r37);

        $r38 = virtualinvoke $r93.<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r79);

        staticinvoke <org.apache.poi.util.OOXMLLite: void copyFile(java.io.InputStream,java.io.File)>($r38, $r94);

     label16:
        goto label15;

     label17:
        virtualinvoke $r93.<java.util.jar.JarFile: void close()>();

        return;

        catch java.lang.ClassNotFoundException from label03 to label07 with label08;
    }

    private static void collectTests(java.io.File, java.io.File, java.util.List, java.lang.String, java.lang.String)
    {
        int $i0, $i1, i2, i3;
        java.lang.String $r1, $r3, $r4, $r5, $r6, r7, r8;
        boolean $z0, $z1, $z2;
        java.io.File r0, r2, r11;
        java.util.List r9;
        java.io.File[] $r10;

        r2 := @parameter0: java.io.File;

        r0 := @parameter1: java.io.File;

        r9 := @parameter2: java.util.List;

        r7 := @parameter3: java.lang.String;

        r8 := @parameter4: java.lang.String;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label3;

        $r10 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        i2 = lengthof $r10;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        r11 = $r10[i3];

        staticinvoke <org.apache.poi.util.OOXMLLite: void collectTests(java.io.File,java.io.File,java.util.List,java.lang.String,java.lang.String)>(r2, r11, r9, r7, r8);

        i3 = i3 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        $r1 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        $r3 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int length()>();

        $i1 = $i0 + 1;

        $r4 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $r5 = <java.io.File: java.lang.String separator>;

        $r6 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>($r5, ".");

        $z1 = virtualinvoke $r6.<java.lang.String: boolean matches(java.lang.String)>(r7);

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke $r6.<java.lang.String: boolean matches(java.lang.String)>(r8);

        if $z2 != 0 goto label4;

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r6);

     label4:
        return;
    }

    private static java.util.Map getLoadedClasses(java.lang.String)
    {
        java.net.URL $r9;
        java.util.HashMap $r17;
        java.lang.NullPointerException $r15;
        java.util.Vector r16;
        int $i0, $i2;
        java.lang.String $r10, r11, $r12;
        boolean $z0;
        java.lang.IllegalAccessException $r13;
        java.util.Iterator $r4;
        java.lang.RuntimeException $r18;
        java.lang.reflect.Field $r1;
        java.security.ProtectionDomain $r7;
        java.lang.Object $r2, $r5;
        java.lang.Class r6;
        java.lang.ClassLoader $r0;
        java.security.CodeSource $r8;

        r11 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

     label1:
        $r1 = <org.apache.poi.util.OOXMLLite: java.lang.reflect.Field _classes>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r0);

        r16 = (java.util.Vector) $r2;

        $r17 = new java.util.HashMap;

        specialinvoke $r17.<java.util.HashMap: void <init>()>();

        $r4 = virtualinvoke r16.<java.util.Vector: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Class) $r5;

     label3:
        $r7 = virtualinvoke r6.<java.lang.Class: java.security.ProtectionDomain getProtectionDomain()>();

        $r8 = virtualinvoke $r7.<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>();

        $r9 = virtualinvoke $r8.<java.security.CodeSource: java.net.URL getLocation()>();

        $r10 = virtualinvoke $r9.<java.net.URL: java.lang.String toString()>();

        $i0 = virtualinvoke $r10.<java.lang.String: int indexOf(java.lang.String)>(r11);

        $i2 = (int) -1;

        if $i0 == $i2 goto label4;

        $r12 = virtualinvoke r6.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r6);

     label4:
        goto label6;

     label5:
        $r15 := @caughtexception;

        goto label2;

     label6:
        goto label2;

     label7:
        return $r17;

     label8:
        $r13 := @caughtexception;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r13);

        throw $r18;

        catch java.lang.NullPointerException from label3 to label4 with label5;
        catch java.lang.IllegalAccessException from label1 to label7 with label8;
    }

    private static void copyFile(java.io.InputStream, java.io.File) throws java.io.IOException
    {
        java.lang.Throwable $r4;
        java.io.FileOutputStream $r2;
        java.io.File r0, $r1;
        java.io.InputStream r3;

        r3 := @parameter0: java.io.InputStream;

        r0 := @parameter1: java.io.File;

        $r1 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r1.<java.io.File: boolean mkdirs()>();

        $r2 = new java.io.FileOutputStream;

        specialinvoke $r2.<java.io.FileOutputStream: void <init>(java.io.File)>(r0);

     label1:
        staticinvoke <org.apache.poi.util.IOUtils: void copy(java.io.InputStream,java.io.OutputStream)>(r3, $r2);

     label2:
        virtualinvoke $r2.<java.io.OutputStream: void close()>();

        goto label5;

     label3:
        $r4 := @caughtexception;

     label4:
        virtualinvoke $r2.<java.io.OutputStream: void close()>();

        throw $r4;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    static void <clinit>()
    {
        java.lang.Throwable $r3;
        java.lang.Class $r0;
        java.lang.RuntimeException $r4;
        java.lang.reflect.Field $r1, $r2;

     label1:
        $r0 = class "Ljava/lang/ClassLoader;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("classes");

        <org.apache.poi.util.OOXMLLite: java.lang.reflect.Field _classes> = $r1;

        $r2 = <org.apache.poi.util.OOXMLLite: java.lang.reflect.Field _classes>;

        virtualinvoke $r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
