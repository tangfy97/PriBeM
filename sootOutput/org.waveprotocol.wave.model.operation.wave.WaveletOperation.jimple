public abstract class org.waveprotocol.wave.model.operation.wave.WaveletOperation extends java.lang.Object implements org.waveprotocol.wave.model.operation.ReversibleOperation, org.waveprotocol.wave.model.operation.Visitable
{
    protected final org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context;

    public static org.waveprotocol.wave.model.operation.wave.WaveletOperation cloneOp(org.waveprotocol.wave.model.operation.wave.WaveletOperation, org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant $r15, $r16;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        org.waveprotocol.wave.model.document.operation.DocOp $r14;
        org.waveprotocol.wave.model.wave.ParticipantId $r17, $r20;
        org.waveprotocol.wave.model.operation.wave.BlipOperation $r9;
        java.lang.String $r5, $r7;
        boolean $z0, $z1, $z2, $z3;
        org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation $r6, $r8, $r11;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r13;
        java.lang.IllegalArgumentException $r1;
        org.waveprotocol.wave.model.operation.wave.NoOp $r21;
        java.lang.StringBuilder $r2, $r3, $r4;
        org.waveprotocol.wave.model.operation.wave.BlipContentOperation r10, $r12;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r18, $r19;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        r13 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $z0 = r0 instanceof org.waveprotocol.wave.model.operation.wave.NoOp;

        if $z0 == 0 goto label1;

        $r21 = new org.waveprotocol.wave.model.operation.wave.NoOp;

        specialinvoke $r21.<org.waveprotocol.wave.model.operation.wave.NoOp: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>(r13);

        return $r21;

     label1:
        $z1 = r0 instanceof org.waveprotocol.wave.model.operation.wave.AddParticipant;

        if $z1 == 0 goto label2;

        $r18 = new org.waveprotocol.wave.model.operation.wave.AddParticipant;

        $r19 = (org.waveprotocol.wave.model.operation.wave.AddParticipant) r0;

        $r20 = virtualinvoke $r19.<org.waveprotocol.wave.model.operation.wave.AddParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        specialinvoke $r18.<org.waveprotocol.wave.model.operation.wave.AddParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>(r13, $r20);

        return $r18;

     label2:
        $z2 = r0 instanceof org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        if $z2 == 0 goto label3;

        $r15 = new org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        $r16 = (org.waveprotocol.wave.model.operation.wave.RemoveParticipant) r0;

        $r17 = virtualinvoke $r16.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: org.waveprotocol.wave.model.wave.ParticipantId getParticipantId()>();

        specialinvoke $r15.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>(r13, $r17);

        return $r15;

     label3:
        $z3 = r0 instanceof org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        if $z3 == 0 goto label4;

        $r6 = (org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation) r0;

        $r7 = virtualinvoke $r6.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: java.lang.String getBlipId()>();

        $r8 = (org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation) r0;

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: org.waveprotocol.wave.model.operation.wave.BlipOperation getBlipOp()>();

        r10 = (org.waveprotocol.wave.model.operation.wave.BlipContentOperation) $r9;

        $r11 = new org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation;

        $r12 = new org.waveprotocol.wave.model.operation.wave.BlipContentOperation;

        $r14 = virtualinvoke r10.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: org.waveprotocol.wave.model.document.operation.DocOp getContentOp()>();

        specialinvoke $r12.<org.waveprotocol.wave.model.operation.wave.BlipContentOperation: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.document.operation.DocOp)>(r13, $r14);

        specialinvoke $r11.<org.waveprotocol.wave.model.operation.wave.WaveletBlipOperation: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.wave.BlipOperation)>($r7, $r12);

        return $r11;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Un-cloneable operation: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    protected void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context> = r1;

        return;
    }

    public org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        return $r1;
    }

    public final void apply(org.waveprotocol.wave.model.wave.data.WaveletData) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        org.waveprotocol.wave.model.wave.data.WaveletData r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: void doApply(org.waveprotocol.wave.model.wave.data.WaveletData)>(r1);

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: void update(org.waveprotocol.wave.model.wave.data.WaveletData)>(r1);

        return;
    }

    public final void update(org.waveprotocol.wave.model.wave.data.WaveletData)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        long $l0, $l2, $l3, $l4, $l5;
        byte $b1;
        org.waveprotocol.wave.model.version.HashedVersion $r6;
        org.waveprotocol.wave.model.wave.data.WaveletData r4;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1, $r2, $r3, $r5, $r7, $r8;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        r4 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        $r1 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $z0 = virtualinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: boolean hasTimestamp()>();

        if $z0 == 0 goto label1;

        $r8 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $l5 = virtualinvoke $r8.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getTimestamp()>();

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletData: long setLastModifiedTime(long)>($l5);

     label1:
        $r2 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $l0 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getVersionIncrement()>();

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label2;

        $l2 = interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletData: long getVersion()>();

        $r7 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $l3 = virtualinvoke $r7.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getVersionIncrement()>();

        $l4 = $l2 + $l3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletData: long setVersion(long)>($l4);

     label2:
        $r3 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $z1 = virtualinvoke $r3.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: boolean hasHashedVersion()>();

        if $z1 == 0 goto label3;

        $r5 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r6 = virtualinvoke $r5.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletData: org.waveprotocol.wave.model.version.HashedVersion setHashedVersion(org.waveprotocol.wave.model.version.HashedVersion)>($r6);

     label3:
        return;
    }

    protected abstract void doApply(org.waveprotocol.wave.model.wave.data.WaveletData) throws org.waveprotocol.wave.model.operation.OperationException;

    public org.waveprotocol.wave.model.operation.wave.VersionUpdateOp createVersionUpdateOp(long, org.waveprotocol.wave.model.version.HashedVersion)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r1;
        org.waveprotocol.wave.model.version.HashedVersion r4;
        long l0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r2;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;
        org.waveprotocol.wave.model.operation.wave.VersionUpdateOp $r0;

        r1 := @this: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        l0 := @parameter0: long;

        r4 := @parameter1: org.waveprotocol.wave.model.version.HashedVersion;

        $r0 = new org.waveprotocol.wave.model.operation.wave.VersionUpdateOp;

        $r2 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.operation.wave.VersionUpdateOp: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,org.waveprotocol.wave.model.version.HashedVersion)>($r3, l0, r4);

        return $r0;
    }

    protected final org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createReverseContext(org.waveprotocol.wave.model.wave.data.WaveletData, long)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r1;
        long $l0, l1, $l2;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r0, $r2;
        org.waveprotocol.wave.model.wave.ParticipantId $r3;
        org.waveprotocol.wave.model.version.HashedVersion $r5;
        org.waveprotocol.wave.model.wave.data.WaveletData r4;

        r1 := @this: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        r4 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        l1 := @parameter1: long;

        $r0 = new org.waveprotocol.wave.model.operation.wave.WaveletOperationContext;

        $r2 = r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r3 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $l0 = interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletData: long getLastModifiedTime()>();

        $l2 = neg l1;

        $r5 = interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.WaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,long,long,org.waveprotocol.wave.model.version.HashedVersion)>($r3, $l0, $l2, $r5);

        return $r0;
    }

    protected final org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createReverseContext(org.waveprotocol.wave.model.wave.data.WaveletData)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        long $l0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r2, $r3;
        org.waveprotocol.wave.model.wave.data.WaveletData r1;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        $r2 = r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $l0 = virtualinvoke $r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getVersionIncrement()>();

        $r3 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createReverseContext(org.waveprotocol.wave.model.wave.data.WaveletData,long)>(r1, $l0);

        return $r3;
    }

    protected java.lang.String suffixForToString()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r2;
        java.util.Date $r7;
        long $l0;
        org.waveprotocol.wave.model.wave.ParticipantId $r4;
        org.waveprotocol.wave.model.version.HashedVersion $r12;
        java.lang.String $r14;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r3, $r8, $r11;
        java.lang.StringBuilder $r0, $r1, $r5, $r6, $r9, $r10, $r13;

        r2 := @this: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("by ");

        $r3 = r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ");

        $r7 = new java.util.Date;

        $r8 = r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $l0 = virtualinvoke $r8.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: long getTimestamp()>();

        specialinvoke $r7.<java.util.Date: void <init>(long)>($l0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version ");

        $r11 = r2.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext context>;

        $r12 = virtualinvoke $r11.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public boolean isWorthyOfAttribution()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        return 1;
    }

    public volatile void apply(java.lang.Object) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        java.lang.Object r1;
        org.waveprotocol.wave.model.wave.data.WaveletData $r2;

        r0 := @this: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.data.WaveletData) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: void apply(org.waveprotocol.wave.model.wave.data.WaveletData)>($r2);

        return;
    }
}
