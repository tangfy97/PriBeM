public class com.hp.hpl.jena.sparql.pfunction.PropFuncArg extends com.hp.hpl.jena.sparql.util.PrintSerializableBase
{
    private java.util.List argList;
    private com.hp.hpl.jena.graph.Node arg;

    public void <init>(java.util.List, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.util.List r1;
        com.hp.hpl.jena.graph.Node $r2, r3;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r1 := @parameter0: java.util.List;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.sparql.util.PrintSerializableBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList> = null;

        r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node arg> = null;

        if r1 != null goto label1;

        r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node arg> = r3;

        return;

     label1:
        r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList> = r1;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r2 = <com.hp.hpl.jena.sparql.graph.NodeConst: com.hp.hpl.jena.graph.Node nodeNil>;

        r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node arg> = $r2;

     label2:
        return;
    }

    public void <init>(java.util.List)
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.util.List r1;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<com.hp.hpl.jena.sparql.util.PrintSerializableBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList> = null;

        r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node arg> = null;

        r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList> = r1;

        return;
    }

    public void <init>(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        com.hp.hpl.jena.graph.Node r1;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        specialinvoke r0.<com.hp.hpl.jena.sparql.util.PrintSerializableBase: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList> = null;

        r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node arg> = null;

        r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node arg> = r1;

        return;
    }

    public com.hp.hpl.jena.graph.Node getArg()
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $r1 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node arg>;

        return $r1;
    }

    public java.util.List getArgList()
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.util.List $r1;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $r1 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList>;

        return $r1;
    }

    public int getArgListSize()
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.util.List $r1, $r2;
        int $i0, $i2;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $r1 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList>;

        if $r1 != null goto label1;

        $i2 = (int) -1;

        $i0 = $i2;

        goto label2;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

     label2:
        return $i0;
    }

    public com.hp.hpl.jena.graph.Node getArg(int)
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.util.List $r1, $r2;
        int i0;
        java.lang.Object $r3;
        com.hp.hpl.jena.graph.Node $r4;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (com.hp.hpl.jena.graph.Node) $r3;

        return $r4;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.util.List $r1;
        int $i0, $i1;
        com.hp.hpl.jena.graph.Node $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node arg>;

        $i1 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: int hashCode()>();

        return $i1;

     label1:
        $r1 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList>;

        $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.graph.Node $r5, $r6;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0, r2;
        java.util.List $r3, $r4;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r2 = (com.hp.hpl.jena.sparql.pfunction.PropFuncArg) r1;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z1 == 0 goto label3;

        $r6 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node arg>;

        $r5 = r2.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node arg>;

        $z3 = virtualinvoke $r6.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r5);

        return $z3;

     label3:
        $r4 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList>;

        $r3 = r2.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList>;

        $z2 = interfaceinvoke $r4.<java.util.List: boolean equals(java.lang.Object)>($r3);

        return $z2;
    }

    public boolean isList()
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.util.List $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $r1 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean isNode()
    {
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        com.hp.hpl.jena.graph.Node $r1;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $r1 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node arg>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public com.hp.hpl.jena.sparql.expr.ExprList asExprList(com.hp.hpl.jena.sparql.pfunction.PropFuncArg)
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.graph.Node $r6, r9;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r1, r8;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.expr.Expr $r5, $r7;
        com.hp.hpl.jena.sparql.expr.ExprList $r0;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r8 := @this: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r1 := @parameter0: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        $r0 = new com.hp.hpl.jena.sparql.expr.ExprList;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void <init>()>();

        $z0 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: boolean isNode()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node getArg()>();

        $r7 = staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: com.hp.hpl.jena.sparql.expr.Expr nodeToExpr(com.hp.hpl.jena.graph.Node)>($r6);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r7);

        return $r0;

     label1:
        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List getArgList()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.graph.Node) $r4;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.ExprUtils: com.hp.hpl.jena.sparql.expr.Expr nodeToExpr(com.hp.hpl.jena.graph.Node)>(r9);

        virtualinvoke $r0.<com.hp.hpl.jena.sparql.expr.ExprList: void add(com.hp.hpl.jena.sparql.expr.Expr)>($r5);

        goto label2;

     label3:
        return $r0;
    }

    public void output(org.apache.jena.atlas.io.IndentedWriter, com.hp.hpl.jena.sparql.serializer.SerializationContext)
    {
        com.hp.hpl.jena.sparql.serializer.SerializationContext r10;
        com.hp.hpl.jena.graph.Node $r2, $r4, r9, $r12;
        com.hp.hpl.jena.sparql.pfunction.PropFuncArg r0;
        java.lang.String $r5, $r11;
        boolean $z0, z1;
        java.util.Iterator $r7;
        org.apache.jena.atlas.io.IndentedWriter r3;
        java.util.List $r1, $r6, $r13;
        java.lang.Object $r8;

        r0 := @this: com.hp.hpl.jena.sparql.pfunction.PropFuncArg;

        r3 := @parameter0: org.apache.jena.atlas.io.IndentedWriter;

        r10 := @parameter1: com.hp.hpl.jena.sparql.serializer.SerializationContext;

        $r1 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList>;

        if $r1 != null goto label1;

        $r12 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node arg>;

        if $r12 != null goto label1;

        virtualinvoke r3.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>("<<null>>");

     label1:
        $r13 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList>;

        if $r13 == null goto label5;

        virtualinvoke r3.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>("(");

        z1 = 1;

        $r6 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: java.util.List argList>;

        $r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r9 = (com.hp.hpl.jena.graph.Node) $r8;

        if z1 != 0 goto label3;

        virtualinvoke r3.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(" ");

     label3:
        $r11 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.sparql.serializer.SerializationContext)>(r9, r10);

        virtualinvoke r3.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>($r11);

        z1 = 0;

        goto label2;

     label4:
        virtualinvoke r3.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>(")");

     label5:
        $r2 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node arg>;

        if $r2 == null goto label6;

        $r4 = r0.<com.hp.hpl.jena.sparql.pfunction.PropFuncArg: com.hp.hpl.jena.graph.Node arg>;

        $r5 = staticinvoke <com.hp.hpl.jena.sparql.util.FmtUtils: java.lang.String stringForNode(com.hp.hpl.jena.graph.Node)>($r4);

        virtualinvoke r3.<org.apache.jena.atlas.io.IndentedWriter: void print(java.lang.String)>($r5);

     label6:
        return;
    }
}
