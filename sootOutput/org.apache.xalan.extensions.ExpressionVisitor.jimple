public class org.apache.xalan.extensions.ExpressionVisitor extends org.apache.xpath.XPathVisitor
{
    private org.apache.xalan.templates.StylesheetRoot m_sroot;

    public void <init>(org.apache.xalan.templates.StylesheetRoot)
    {
        org.apache.xalan.templates.StylesheetRoot r1;
        org.apache.xalan.extensions.ExpressionVisitor r0;

        r0 := @this: org.apache.xalan.extensions.ExpressionVisitor;

        r1 := @parameter0: org.apache.xalan.templates.StylesheetRoot;

        specialinvoke r0.<org.apache.xpath.XPathVisitor: void <init>()>();

        r0.<org.apache.xalan.extensions.ExpressionVisitor: org.apache.xalan.templates.StylesheetRoot m_sroot> = r1;

        return;
    }

    public boolean visitFunction(org.apache.xpath.ExpressionOwner, org.apache.xpath.functions.Function)
    {
        org.apache.xpath.functions.FuncExtFunction $r10;
        org.apache.xalan.extensions.ExtensionNamespacesManager $r9, $r13;
        int $i0, $i1;
        java.lang.String $r3, $r4, $r7, $r11;
        org.apache.xpath.functions.FuncExtFunctionAvailable $r1;
        boolean $z0, $z1;
        org.apache.xpath.ExpressionOwner r14;
        org.apache.xpath.Expression $r2;
        org.apache.xpath.functions.Function r0;
        org.apache.xalan.templates.StylesheetRoot $r6, $r8, $r12;
        org.apache.xalan.extensions.ExpressionVisitor r5;

        r5 := @this: org.apache.xalan.extensions.ExpressionVisitor;

        r14 := @parameter0: org.apache.xpath.ExpressionOwner;

        r0 := @parameter1: org.apache.xpath.functions.Function;

        $z0 = r0 instanceof org.apache.xpath.functions.FuncExtFunction;

        if $z0 == 0 goto label1;

        $r10 = (org.apache.xpath.functions.FuncExtFunction) r0;

        $r11 = virtualinvoke $r10.<org.apache.xpath.functions.FuncExtFunction: java.lang.String getNamespace()>();

        $r12 = r5.<org.apache.xalan.extensions.ExpressionVisitor: org.apache.xalan.templates.StylesheetRoot m_sroot>;

        $r13 = virtualinvoke $r12.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager getExtensionNamespacesManager()>();

        virtualinvoke $r13.<org.apache.xalan.extensions.ExtensionNamespacesManager: void registerExtension(java.lang.String)>($r11);

        goto label2;

     label1:
        $z1 = r0 instanceof org.apache.xpath.functions.FuncExtFunctionAvailable;

        if $z1 == 0 goto label2;

        $r1 = (org.apache.xpath.functions.FuncExtFunctionAvailable) r0;

        $r2 = virtualinvoke $r1.<org.apache.xpath.functions.FunctionOneArg: org.apache.xpath.Expression getArg0()>();

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>(":");

        if $i0 <= 0 goto label2;

        $i1 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>(":");

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r6 = r5.<org.apache.xalan.extensions.ExpressionVisitor: org.apache.xalan.templates.StylesheetRoot m_sroot>;

        $r7 = virtualinvoke $r6.<org.apache.xalan.templates.ElemTemplateElement: java.lang.String getNamespaceForPrefix(java.lang.String)>($r4);

        $r8 = r5.<org.apache.xalan.extensions.ExpressionVisitor: org.apache.xalan.templates.StylesheetRoot m_sroot>;

        $r9 = virtualinvoke $r8.<org.apache.xalan.templates.StylesheetRoot: org.apache.xalan.extensions.ExtensionNamespacesManager getExtensionNamespacesManager()>();

        virtualinvoke $r9.<org.apache.xalan.extensions.ExtensionNamespacesManager: void registerExtension(java.lang.String)>($r7);

     label2:
        return 1;
    }
}
