public class com.mycila.inject.internal.asm.commons.InstructionAdapter extends com.mycila.inject.internal.asm.MethodAdapter
{
    public static final com.mycila.inject.internal.asm.Type OBJECT_TYPE;

    public void <init>(com.mycila.inject.internal.asm.MethodVisitor)
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.MethodVisitor;

        specialinvoke r0.<com.mycila.inject.internal.asm.MethodAdapter: void <init>(com.mycila.inject.internal.asm.MethodVisitor)>(r1);

        return;
    }

    public void visitInsn(int)
    {
        long $l4;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        float $f0;
        com.mycila.inject.internal.asm.Type $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77, $r78, $r79, $r80, $r81, $r82, $r83, $r84, $r85, $r86, $r87, $r88, $r89, $r90, $r91, $r92;
        int i0, $i1, $i2, $i3, $i5;
        double $d0;
        java.lang.IllegalArgumentException $r93;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label03;
            case 4: goto label03;
            case 5: goto label03;
            case 6: goto label03;
            case 7: goto label03;
            case 8: goto label03;
            case 9: goto label04;
            case 10: goto label04;
            case 11: goto label05;
            case 12: goto label05;
            case 13: goto label05;
            case 14: goto label06;
            case 15: goto label06;
            case 16: goto label98;
            case 17: goto label98;
            case 18: goto label98;
            case 19: goto label98;
            case 20: goto label98;
            case 21: goto label98;
            case 22: goto label98;
            case 23: goto label98;
            case 24: goto label98;
            case 25: goto label98;
            case 26: goto label98;
            case 27: goto label98;
            case 28: goto label98;
            case 29: goto label98;
            case 30: goto label98;
            case 31: goto label98;
            case 32: goto label98;
            case 33: goto label98;
            case 34: goto label98;
            case 35: goto label98;
            case 36: goto label98;
            case 37: goto label98;
            case 38: goto label98;
            case 39: goto label98;
            case 40: goto label98;
            case 41: goto label98;
            case 42: goto label98;
            case 43: goto label98;
            case 44: goto label98;
            case 45: goto label98;
            case 46: goto label07;
            case 47: goto label08;
            case 48: goto label09;
            case 49: goto label10;
            case 50: goto label11;
            case 51: goto label12;
            case 52: goto label13;
            case 53: goto label14;
            case 54: goto label98;
            case 55: goto label98;
            case 56: goto label98;
            case 57: goto label98;
            case 58: goto label98;
            case 59: goto label98;
            case 60: goto label98;
            case 61: goto label98;
            case 62: goto label98;
            case 63: goto label98;
            case 64: goto label98;
            case 65: goto label98;
            case 66: goto label98;
            case 67: goto label98;
            case 68: goto label98;
            case 69: goto label98;
            case 70: goto label98;
            case 71: goto label98;
            case 72: goto label98;
            case 73: goto label98;
            case 74: goto label98;
            case 75: goto label98;
            case 76: goto label98;
            case 77: goto label98;
            case 78: goto label98;
            case 79: goto label15;
            case 80: goto label16;
            case 81: goto label17;
            case 82: goto label18;
            case 83: goto label19;
            case 84: goto label20;
            case 85: goto label21;
            case 86: goto label22;
            case 87: goto label23;
            case 88: goto label24;
            case 89: goto label25;
            case 90: goto label26;
            case 91: goto label27;
            case 92: goto label28;
            case 93: goto label29;
            case 94: goto label30;
            case 95: goto label31;
            case 96: goto label32;
            case 97: goto label33;
            case 98: goto label34;
            case 99: goto label35;
            case 100: goto label36;
            case 101: goto label37;
            case 102: goto label38;
            case 103: goto label39;
            case 104: goto label40;
            case 105: goto label41;
            case 106: goto label42;
            case 107: goto label43;
            case 108: goto label44;
            case 109: goto label45;
            case 110: goto label46;
            case 111: goto label47;
            case 112: goto label48;
            case 113: goto label49;
            case 114: goto label50;
            case 115: goto label51;
            case 116: goto label52;
            case 117: goto label53;
            case 118: goto label54;
            case 119: goto label55;
            case 120: goto label56;
            case 121: goto label57;
            case 122: goto label58;
            case 123: goto label59;
            case 124: goto label60;
            case 125: goto label61;
            case 126: goto label62;
            case 127: goto label63;
            case 128: goto label64;
            case 129: goto label65;
            case 130: goto label66;
            case 131: goto label67;
            case 132: goto label98;
            case 133: goto label68;
            case 134: goto label69;
            case 135: goto label70;
            case 136: goto label71;
            case 137: goto label72;
            case 138: goto label73;
            case 139: goto label74;
            case 140: goto label75;
            case 141: goto label76;
            case 142: goto label77;
            case 143: goto label78;
            case 144: goto label79;
            case 145: goto label80;
            case 146: goto label81;
            case 147: goto label82;
            case 148: goto label83;
            case 149: goto label84;
            case 150: goto label85;
            case 151: goto label86;
            case 152: goto label87;
            case 153: goto label98;
            case 154: goto label98;
            case 155: goto label98;
            case 156: goto label98;
            case 157: goto label98;
            case 158: goto label98;
            case 159: goto label98;
            case 160: goto label98;
            case 161: goto label98;
            case 162: goto label98;
            case 163: goto label98;
            case 164: goto label98;
            case 165: goto label98;
            case 166: goto label98;
            case 167: goto label98;
            case 168: goto label98;
            case 169: goto label98;
            case 170: goto label98;
            case 171: goto label98;
            case 172: goto label88;
            case 173: goto label89;
            case 174: goto label90;
            case 175: goto label91;
            case 176: goto label92;
            case 177: goto label93;
            case 178: goto label98;
            case 179: goto label98;
            case 180: goto label98;
            case 181: goto label98;
            case 182: goto label98;
            case 183: goto label98;
            case 184: goto label98;
            case 185: goto label98;
            case 186: goto label98;
            case 187: goto label98;
            case 188: goto label98;
            case 189: goto label98;
            case 190: goto label94;
            case 191: goto label95;
            case 192: goto label98;
            case 193: goto label98;
            case 194: goto label96;
            case 195: goto label97;
            default: goto label98;
        };

     label01:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'nop'()>();

        goto label99;

     label02:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void aconst(java.lang.Object)>(null);

        goto label99;

     label03:
        $i5 = i0 - 3;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void iconst(int)>($i5);

        goto label99;

     label04:
        $i3 = i0 - 9;

        $l4 = (long) $i3;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void lconst(long)>($l4);

        goto label99;

     label05:
        $i2 = i0 - 11;

        $f0 = (float) $i2;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void fconst(float)>($f0);

        goto label99;

     label06:
        $i1 = i0 - 14;

        $d0 = (double) $i1;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void dconst(double)>($d0);

        goto label99;

     label07:
        $r92 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void aload(com.mycila.inject.internal.asm.Type)>($r92);

        goto label99;

     label08:
        $r91 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void aload(com.mycila.inject.internal.asm.Type)>($r91);

        goto label99;

     label09:
        $r90 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void aload(com.mycila.inject.internal.asm.Type)>($r90);

        goto label99;

     label10:
        $r89 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void aload(com.mycila.inject.internal.asm.Type)>($r89);

        goto label99;

     label11:
        $r88 = <com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.Type OBJECT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void aload(com.mycila.inject.internal.asm.Type)>($r88);

        goto label99;

     label12:
        $r87 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type BYTE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void aload(com.mycila.inject.internal.asm.Type)>($r87);

        goto label99;

     label13:
        $r86 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type CHAR_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void aload(com.mycila.inject.internal.asm.Type)>($r86);

        goto label99;

     label14:
        $r85 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type SHORT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void aload(com.mycila.inject.internal.asm.Type)>($r85);

        goto label99;

     label15:
        $r84 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void astore(com.mycila.inject.internal.asm.Type)>($r84);

        goto label99;

     label16:
        $r83 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void astore(com.mycila.inject.internal.asm.Type)>($r83);

        goto label99;

     label17:
        $r82 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void astore(com.mycila.inject.internal.asm.Type)>($r82);

        goto label99;

     label18:
        $r81 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void astore(com.mycila.inject.internal.asm.Type)>($r81);

        goto label99;

     label19:
        $r80 = <com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.Type OBJECT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void astore(com.mycila.inject.internal.asm.Type)>($r80);

        goto label99;

     label20:
        $r79 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type BYTE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void astore(com.mycila.inject.internal.asm.Type)>($r79);

        goto label99;

     label21:
        $r78 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type CHAR_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void astore(com.mycila.inject.internal.asm.Type)>($r78);

        goto label99;

     label22:
        $r77 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type SHORT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void astore(com.mycila.inject.internal.asm.Type)>($r77);

        goto label99;

     label23:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void pop()>();

        goto label99;

     label24:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void pop2()>();

        goto label99;

     label25:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void dup()>();

        goto label99;

     label26:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void dupX1()>();

        goto label99;

     label27:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void dupX2()>();

        goto label99;

     label28:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void dup2()>();

        goto label99;

     label29:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void dup2X1()>();

        goto label99;

     label30:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void dup2X2()>();

        goto label99;

     label31:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void swap()>();

        goto label99;

     label32:
        $r76 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void add(com.mycila.inject.internal.asm.Type)>($r76);

        goto label99;

     label33:
        $r75 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void add(com.mycila.inject.internal.asm.Type)>($r75);

        goto label99;

     label34:
        $r74 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void add(com.mycila.inject.internal.asm.Type)>($r74);

        goto label99;

     label35:
        $r73 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void add(com.mycila.inject.internal.asm.Type)>($r73);

        goto label99;

     label36:
        $r72 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void sub(com.mycila.inject.internal.asm.Type)>($r72);

        goto label99;

     label37:
        $r71 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void sub(com.mycila.inject.internal.asm.Type)>($r71);

        goto label99;

     label38:
        $r70 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void sub(com.mycila.inject.internal.asm.Type)>($r70);

        goto label99;

     label39:
        $r69 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void sub(com.mycila.inject.internal.asm.Type)>($r69);

        goto label99;

     label40:
        $r68 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void mul(com.mycila.inject.internal.asm.Type)>($r68);

        goto label99;

     label41:
        $r67 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void mul(com.mycila.inject.internal.asm.Type)>($r67);

        goto label99;

     label42:
        $r66 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void mul(com.mycila.inject.internal.asm.Type)>($r66);

        goto label99;

     label43:
        $r65 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void mul(com.mycila.inject.internal.asm.Type)>($r65);

        goto label99;

     label44:
        $r64 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void div(com.mycila.inject.internal.asm.Type)>($r64);

        goto label99;

     label45:
        $r63 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void div(com.mycila.inject.internal.asm.Type)>($r63);

        goto label99;

     label46:
        $r62 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void div(com.mycila.inject.internal.asm.Type)>($r62);

        goto label99;

     label47:
        $r61 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void div(com.mycila.inject.internal.asm.Type)>($r61);

        goto label99;

     label48:
        $r60 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void rem(com.mycila.inject.internal.asm.Type)>($r60);

        goto label99;

     label49:
        $r59 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void rem(com.mycila.inject.internal.asm.Type)>($r59);

        goto label99;

     label50:
        $r58 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void rem(com.mycila.inject.internal.asm.Type)>($r58);

        goto label99;

     label51:
        $r57 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void rem(com.mycila.inject.internal.asm.Type)>($r57);

        goto label99;

     label52:
        $r56 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'neg'(com.mycila.inject.internal.asm.Type)>($r56);

        goto label99;

     label53:
        $r55 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'neg'(com.mycila.inject.internal.asm.Type)>($r55);

        goto label99;

     label54:
        $r54 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'neg'(com.mycila.inject.internal.asm.Type)>($r54);

        goto label99;

     label55:
        $r53 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'neg'(com.mycila.inject.internal.asm.Type)>($r53);

        goto label99;

     label56:
        $r52 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void shl(com.mycila.inject.internal.asm.Type)>($r52);

        goto label99;

     label57:
        $r51 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void shl(com.mycila.inject.internal.asm.Type)>($r51);

        goto label99;

     label58:
        $r50 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void shr(com.mycila.inject.internal.asm.Type)>($r50);

        goto label99;

     label59:
        $r49 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void shr(com.mycila.inject.internal.asm.Type)>($r49);

        goto label99;

     label60:
        $r48 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ushr(com.mycila.inject.internal.asm.Type)>($r48);

        goto label99;

     label61:
        $r47 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ushr(com.mycila.inject.internal.asm.Type)>($r47);

        goto label99;

     label62:
        $r46 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void and(com.mycila.inject.internal.asm.Type)>($r46);

        goto label99;

     label63:
        $r45 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void and(com.mycila.inject.internal.asm.Type)>($r45);

        goto label99;

     label64:
        $r44 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void or(com.mycila.inject.internal.asm.Type)>($r44);

        goto label99;

     label65:
        $r43 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void or(com.mycila.inject.internal.asm.Type)>($r43);

        goto label99;

     label66:
        $r42 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void xor(com.mycila.inject.internal.asm.Type)>($r42);

        goto label99;

     label67:
        $r41 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void xor(com.mycila.inject.internal.asm.Type)>($r41);

        goto label99;

     label68:
        $r40 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        $r39 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r40, $r39);

        goto label99;

     label69:
        $r38 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        $r37 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r38, $r37);

        goto label99;

     label70:
        $r36 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        $r35 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r36, $r35);

        goto label99;

     label71:
        $r34 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        $r33 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r34, $r33);

        goto label99;

     label72:
        $r32 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        $r31 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r32, $r31);

        goto label99;

     label73:
        $r30 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        $r29 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r30, $r29);

        goto label99;

     label74:
        $r28 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        $r27 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r28, $r27);

        goto label99;

     label75:
        $r26 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        $r25 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r26, $r25);

        goto label99;

     label76:
        $r24 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        $r23 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r24, $r23);

        goto label99;

     label77:
        $r22 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        $r21 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r22, $r21);

        goto label99;

     label78:
        $r20 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        $r19 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r20, $r19);

        goto label99;

     label79:
        $r18 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        $r17 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r18, $r17);

        goto label99;

     label80:
        $r16 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        $r15 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type BYTE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r16, $r15);

        goto label99;

     label81:
        $r14 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        $r13 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type CHAR_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r14, $r13);

        goto label99;

     label82:
        $r12 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        $r11 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type SHORT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r12, $r11);

        goto label99;

     label83:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void lcmp()>();

        goto label99;

     label84:
        $r10 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'cmpl'(com.mycila.inject.internal.asm.Type)>($r10);

        goto label99;

     label85:
        $r9 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'cmpg'(com.mycila.inject.internal.asm.Type)>($r9);

        goto label99;

     label86:
        $r8 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'cmpl'(com.mycila.inject.internal.asm.Type)>($r8);

        goto label99;

     label87:
        $r7 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'cmpg'(com.mycila.inject.internal.asm.Type)>($r7);

        goto label99;

     label88:
        $r6 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void areturn(com.mycila.inject.internal.asm.Type)>($r6);

        goto label99;

     label89:
        $r5 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void areturn(com.mycila.inject.internal.asm.Type)>($r5);

        goto label99;

     label90:
        $r4 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void areturn(com.mycila.inject.internal.asm.Type)>($r4);

        goto label99;

     label91:
        $r3 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void areturn(com.mycila.inject.internal.asm.Type)>($r3);

        goto label99;

     label92:
        $r2 = <com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.Type OBJECT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void areturn(com.mycila.inject.internal.asm.Type)>($r2);

        goto label99;

     label93:
        $r1 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type VOID_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void areturn(com.mycila.inject.internal.asm.Type)>($r1);

        goto label99;

     label94:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void arraylength()>();

        goto label99;

     label95:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void athrow()>();

        goto label99;

     label96:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void monitorenter()>();

        goto label99;

     label97:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void monitorexit()>();

        goto label99;

     label98:
        $r93 = new java.lang.IllegalArgumentException;

        specialinvoke $r93.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r93;

     label99:
        return;
    }

    public void visitIntInsn(int, int)
    {
        com.mycila.inject.internal.asm.Type $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.lang.IllegalArgumentException $r9, $r10;
        int i0, i1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        lookupswitch(i0)
        {
            case 16: goto label01;
            case 17: goto label02;
            case 188: goto label03;
            default: goto label13;
        };

     label01:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void iconst(int)>(i1);

        goto label14;

     label02:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void iconst(int)>(i1);

        goto label14;

     label03:
        tableswitch(i1)
        {
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label09;
            case 7: goto label11;
            case 8: goto label06;
            case 9: goto label07;
            case 10: goto label08;
            case 11: goto label10;
            default: goto label12;
        };

     label04:
        $r8 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type BOOLEAN_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r8);

        goto label14;

     label05:
        $r7 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type CHAR_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r7);

        goto label14;

     label06:
        $r4 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type BYTE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r4);

        goto label14;

     label07:
        $r3 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type SHORT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r3);

        goto label14;

     label08:
        $r2 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r2);

        goto label14;

     label09:
        $r6 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r6);

        goto label14;

     label10:
        $r1 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r1);

        goto label14;

     label11:
        $r5 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r5);

        goto label14;

     label12:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label13:
        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r10;

     label14:
        return;
    }

    public void visitVarInsn(int, int)
    {
        com.mycila.inject.internal.asm.Type $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.lang.IllegalArgumentException $r11;
        int i0, i1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        lookupswitch(i0)
        {
            case 21: goto label01;
            case 22: goto label02;
            case 23: goto label03;
            case 24: goto label04;
            case 25: goto label05;
            case 54: goto label06;
            case 55: goto label07;
            case 56: goto label08;
            case 57: goto label09;
            case 58: goto label10;
            case 169: goto label11;
            default: goto label12;
        };

     label01:
        $r10 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void load(int,com.mycila.inject.internal.asm.Type)>(i1, $r10);

        goto label13;

     label02:
        $r9 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void load(int,com.mycila.inject.internal.asm.Type)>(i1, $r9);

        goto label13;

     label03:
        $r8 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void load(int,com.mycila.inject.internal.asm.Type)>(i1, $r8);

        goto label13;

     label04:
        $r7 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void load(int,com.mycila.inject.internal.asm.Type)>(i1, $r7);

        goto label13;

     label05:
        $r6 = <com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.Type OBJECT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void load(int,com.mycila.inject.internal.asm.Type)>(i1, $r6);

        goto label13;

     label06:
        $r5 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void store(int,com.mycila.inject.internal.asm.Type)>(i1, $r5);

        goto label13;

     label07:
        $r4 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void store(int,com.mycila.inject.internal.asm.Type)>(i1, $r4);

        goto label13;

     label08:
        $r3 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void store(int,com.mycila.inject.internal.asm.Type)>(i1, $r3);

        goto label13;

     label09:
        $r2 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void store(int,com.mycila.inject.internal.asm.Type)>(i1, $r2);

        goto label13;

     label10:
        $r1 = <com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.Type OBJECT_TYPE>;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void store(int,com.mycila.inject.internal.asm.Type)>(i1, $r1);

        goto label13;

     label11:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'ret'(int)>(i1);

        goto label13;

     label12:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r11;

     label13:
        return;
    }

    public void visitTypeInsn(int, java.lang.String)
    {
        int i0;
        com.mycila.inject.internal.asm.Type $r1;
        java.lang.String r0;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r2;
        java.lang.IllegalArgumentException $r3;

        r2 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $r1 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getObjectType(java.lang.String)>(r0);

        tableswitch(i0)
        {
            case 187: goto label1;
            case 188: goto label5;
            case 189: goto label2;
            case 190: goto label5;
            case 191: goto label5;
            case 192: goto label3;
            case 193: goto label4;
            default: goto label5;
        };

     label1:
        virtualinvoke r2.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void anew(com.mycila.inject.internal.asm.Type)>($r1);

        goto label6;

     label2:
        virtualinvoke r2.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'newarray'(com.mycila.inject.internal.asm.Type)>($r1);

        goto label6;

     label3:
        virtualinvoke r2.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void checkcast(com.mycila.inject.internal.asm.Type)>($r1);

        goto label6;

     label4:
        virtualinvoke r2.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void instanceOf(com.mycila.inject.internal.asm.Type)>($r1);

        goto label6;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label6:
        return;
    }

    public void visitFieldInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        int i0;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String r1, r2, r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        tableswitch(i0)
        {
            case 178: goto label1;
            case 179: goto label2;
            case 180: goto label3;
            case 181: goto label4;
            default: goto label5;
        };

     label1:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void getstatic(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        goto label6;

     label2:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void putstatic(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        goto label6;

     label3:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void getfield(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        goto label6;

     label4:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void putfield(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        goto label6;

     label5:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label6:
        return;
    }

    public void visitMethodInsn(int, java.lang.String, java.lang.String, java.lang.String)
    {
        int i0;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String r1, r2, r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        tableswitch(i0)
        {
            case 182: goto label2;
            case 183: goto label1;
            case 184: goto label3;
            case 185: goto label4;
            default: goto label5;
        };

     label1:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void invokespecial(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        goto label6;

     label2:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void invokevirtual(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        goto label6;

     label3:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void invokestatic(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        goto label6;

     label4:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void invokeinterface(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        goto label6;

     label5:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label6:
        return;
    }

    public void visitJumpInsn(int, com.mycila.inject.internal.asm.Label)
    {
        int i0;
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i0 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.asm.Label;

        tableswitch(i0)
        {
            case 153: goto label01;
            case 154: goto label02;
            case 155: goto label03;
            case 156: goto label04;
            case 157: goto label05;
            case 158: goto label06;
            case 159: goto label07;
            case 160: goto label08;
            case 161: goto label09;
            case 162: goto label10;
            case 163: goto label11;
            case 164: goto label12;
            case 165: goto label13;
            case 166: goto label14;
            case 167: goto label15;
            case 168: goto label16;
            case 169: goto label19;
            case 170: goto label19;
            case 171: goto label19;
            case 172: goto label19;
            case 173: goto label19;
            case 174: goto label19;
            case 175: goto label19;
            case 176: goto label19;
            case 177: goto label19;
            case 178: goto label19;
            case 179: goto label19;
            case 180: goto label19;
            case 181: goto label19;
            case 182: goto label19;
            case 183: goto label19;
            case 184: goto label19;
            case 185: goto label19;
            case 186: goto label19;
            case 187: goto label19;
            case 188: goto label19;
            case 189: goto label19;
            case 190: goto label19;
            case 191: goto label19;
            case 192: goto label19;
            case 193: goto label19;
            case 194: goto label19;
            case 195: goto label19;
            case 196: goto label19;
            case 197: goto label19;
            case 198: goto label17;
            case 199: goto label18;
            default: goto label19;
        };

     label01:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ifeq(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label02:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ifne(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label03:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void iflt(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label04:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ifge(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label05:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ifgt(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label06:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ifle(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label07:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ificmpeq(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label08:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ificmpne(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label09:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ificmplt(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label10:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ificmpge(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label11:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ificmpgt(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label12:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ificmple(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label13:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ifacmpeq(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label14:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ifacmpne(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label15:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void goTo(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label16:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void jsr(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label17:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ifnull(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label18:
        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void ifnonnull(com.mycila.inject.internal.asm.Label)>(r1);

        goto label20;

     label19:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label20:
        return;
    }

    public void visitLabel(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void mark(com.mycila.inject.internal.asm.Label)>(r1);

        return;
    }

    public void visitLdcInsn(java.lang.Object)
    {
        java.lang.Float $r6;
        java.lang.Integer $r11;
        java.lang.Character $r9;
        byte $b5;
        java.lang.Long $r5;
        java.lang.Short $r8;
        java.lang.Byte $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        float $f0;
        java.lang.Double $r4;
        com.mycila.inject.internal.asm.Type $r3;
        long $l0;
        int $i1, $i3, $i4, $i6;
        java.lang.Boolean $r7;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r2;
        double $d0;
        char $c2;
        java.lang.IllegalArgumentException $r12;
        java.lang.Object r0;

        r2 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof java.lang.Integer;

        if $z0 == 0 goto label01;

        $r11 = (java.lang.Integer) r0;

        $i4 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

        virtualinvoke r2.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void iconst(int)>($i4);

        goto label13;

     label01:
        $z1 = r0 instanceof java.lang.Byte;

        if $z1 == 0 goto label02;

        $r10 = (java.lang.Byte) r0;

        $i3 = virtualinvoke $r10.<java.lang.Byte: int intValue()>();

        virtualinvoke r2.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void iconst(int)>($i3);

        goto label13;

     label02:
        $z2 = r0 instanceof java.lang.Character;

        if $z2 == 0 goto label03;

        $r9 = (java.lang.Character) r0;

        $c2 = virtualinvoke $r9.<java.lang.Character: char charValue()>();

        $i6 = (int) $c2;

        virtualinvoke r2.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void iconst(int)>($i6);

        goto label13;

     label03:
        $z3 = r0 instanceof java.lang.Short;

        if $z3 == 0 goto label04;

        $r8 = (java.lang.Short) r0;

        $i1 = virtualinvoke $r8.<java.lang.Short: int intValue()>();

        virtualinvoke r2.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void iconst(int)>($i1);

        goto label13;

     label04:
        $z4 = r0 instanceof java.lang.Boolean;

        if $z4 == 0 goto label07;

        $r7 = (java.lang.Boolean) r0;

        $z10 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        if $z10 == 0 goto label05;

        $b5 = 1;

        goto label06;

     label05:
        $b5 = 0;

     label06:
        virtualinvoke r2.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void iconst(int)>($b5);

        goto label13;

     label07:
        $z5 = r0 instanceof java.lang.Float;

        if $z5 == 0 goto label08;

        $r6 = (java.lang.Float) r0;

        $f0 = virtualinvoke $r6.<java.lang.Float: float floatValue()>();

        virtualinvoke r2.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void fconst(float)>($f0);

        goto label13;

     label08:
        $z6 = r0 instanceof java.lang.Long;

        if $z6 == 0 goto label09;

        $r5 = (java.lang.Long) r0;

        $l0 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        virtualinvoke r2.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void lconst(long)>($l0);

        goto label13;

     label09:
        $z7 = r0 instanceof java.lang.Double;

        if $z7 == 0 goto label10;

        $r4 = (java.lang.Double) r0;

        $d0 = virtualinvoke $r4.<java.lang.Double: double doubleValue()>();

        virtualinvoke r2.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void dconst(double)>($d0);

        goto label13;

     label10:
        $z8 = r0 instanceof java.lang.String;

        if $z8 == 0 goto label11;

        virtualinvoke r2.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void aconst(java.lang.Object)>(r0);

        goto label13;

     label11:
        $z9 = r0 instanceof com.mycila.inject.internal.asm.Type;

        if $z9 == 0 goto label12;

        $r3 = (com.mycila.inject.internal.asm.Type) r0;

        virtualinvoke r2.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void tconst(com.mycila.inject.internal.asm.Type)>($r3);

        goto label13;

     label12:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r12;

     label13:
        return;
    }

    public void visitIincInsn(int, int)
    {
        int i0, i1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void iinc(int,int)>(i0, i1);

        return;
    }

    public void visitTableSwitchInsn(int, int, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label[])
    {
        int i0, i1;
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.Label[] r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.mycila.inject.internal.asm.Label;

        r2 := @parameter3: com.mycila.inject.internal.asm.Label[];

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'tableswitch'(int,int,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label[])>(i0, i1, r1, r2);

        return;
    }

    public void visitLookupSwitchInsn(com.mycila.inject.internal.asm.Label, int[], com.mycila.inject.internal.asm.Label[])
    {
        int[] r2;
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.Label[] r3;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        r2 := @parameter1: int[];

        r3 := @parameter2: com.mycila.inject.internal.asm.Label[];

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void 'lookupswitch'(com.mycila.inject.internal.asm.Label,int[],com.mycila.inject.internal.asm.Label[])>(r1, r2, r3);

        return;
    }

    public void visitMultiANewArrayInsn(java.lang.String, int)
    {
        int i0;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void multianewarray(java.lang.String,int)>(r1, i0);

        return;
    }

    public void 'nop'()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(0);

        return;
    }

    public void aconst(java.lang.Object)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2, $r3;
        java.lang.Object r0;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r1;

        r1 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r3 = r1.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(1);

        goto label2;

     label1:
        $r2 = r1.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r0);

     label2:
        return;
    }

    public void iconst(int)
    {
        java.lang.Integer $r6;
        com.mycila.inject.internal.asm.MethodVisitor $r2, $r3, $r4, $r5;
        int i0, $i1, $i3, $i5, $i7;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i0 := @parameter0: int;

        $i3 = (int) -1;

        if i0 < $i3 goto label1;

        if i0 > 5 goto label1;

        $r5 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i1 = 3 + i0;

        interfaceinvoke $r5.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i1);

        goto label4;

     label1:
        $i5 = (int) -128;

        if i0 < $i5 goto label2;

        if i0 > 127 goto label2;

        $r4 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitIntInsn(int,int)>(16, i0);

        goto label4;

     label2:
        $i7 = (int) -32768;

        if i0 < $i7 goto label3;

        if i0 > 32767 goto label3;

        $r3 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitIntInsn(int,int)>(17, i0);

        goto label4;

     label3:
        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r6 = new java.lang.Integer;

        specialinvoke $r6.<java.lang.Integer: void <init>(int)>(i0);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r6);

     label4:
        return;
    }

    public void lconst(long)
    {
        long l0;
        byte $b1, $b4;
        com.mycila.inject.internal.asm.MethodVisitor $r1, $r3;
        java.lang.Long $r2;
        int $i2, $i3;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        $b4 = l0 cmp 1L;

        if $b4 != 0 goto label2;

     label1:
        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i2 = (int) l0;

        $i3 = 9 + $i2;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i3);

        goto label3;

     label2:
        $r3 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r2 = new java.lang.Long;

        specialinvoke $r2.<java.lang.Long: void <init>(long)>(l0);

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r2);

     label3:
        return;
    }

    public void fconst(float)
    {
        java.lang.Float $r1;
        long $l1;
        byte $b2;
        com.mycila.inject.internal.asm.MethodVisitor $r2, $r3;
        int $i0, $i3, $i4;
        float f0;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        f0 := @parameter0: float;

        $i0 = staticinvoke <java.lang.Float: int floatToIntBits(float)>(f0);

        $l1 = (long) $i0;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        if $i0 == 1065353216 goto label1;

        if $i0 != 1073741824 goto label2;

     label1:
        $r3 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i3 = (int) f0;

        $i4 = 11 + $i3;

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i4);

        goto label3;

     label2:
        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r1 = new java.lang.Float;

        specialinvoke $r1.<java.lang.Float: void <init>(float)>(f0);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r1);

     label3:
        return;
    }

    public void dconst(double)
    {
        java.lang.Double $r2;
        long $l0;
        byte $b1, $b4;
        com.mycila.inject.internal.asm.MethodVisitor $r1, $r3;
        int $i2, $i3;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        double d0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        d0 := @parameter0: double;

        $l0 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>(d0);

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        $b4 = $l0 cmp 4607182418800017408L;

        if $b4 != 0 goto label2;

     label1:
        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i2 = (int) d0;

        $i3 = 14 + $i2;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i3);

        goto label3;

     label2:
        $r3 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r2 = new java.lang.Double;

        specialinvoke $r2.<java.lang.Double: void <init>(double)>(d0);

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>($r2);

     label3:
        return;
    }

    public void tconst(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitLdcInsn(java.lang.Object)>(r1);

        return;
    }

    public void load(int, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0, i1;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i1 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(21);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitVarInsn(int,int)>($i0, i1);

        return;
    }

    public void aload(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(46);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void store(int, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0, i1;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i1 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(54);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitVarInsn(int,int)>($i0, i1);

        return;
    }

    public void astore(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(79);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void pop()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(87);

        return;
    }

    public void pop2()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(88);

        return;
    }

    public void dup()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(89);

        return;
    }

    public void dup2()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(92);

        return;
    }

    public void dupX1()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(90);

        return;
    }

    public void dupX2()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(91);

        return;
    }

    public void dup2X1()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(93);

        return;
    }

    public void dup2X2()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(94);

        return;
    }

    public void swap()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(95);

        return;
    }

    public void add(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(96);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void sub(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(100);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void mul(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(104);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void div(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(108);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void rem(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(112);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void 'neg'(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(116);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void shl(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(120);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void shr(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(122);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void ushr(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(124);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void and(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(126);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void or(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(128);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void xor(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(130);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void iinc(int, int)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r1;
        int i0, i1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitIincInsn(int,int)>(i0, i1);

        return;
    }

    public void cast(com.mycila.inject.internal.asm.Type, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r12, $r13, $r14, $r15, $r16, $r17, $r20, $r22, $r23, $r26, $r28, $r29, $r32, $r34, $r35;
        com.mycila.inject.internal.asm.Type r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r18, $r19, $r21, $r24, $r25, $r27, $r30, $r31, $r33;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r11;

        r11 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        r1 := @parameter1: com.mycila.inject.internal.asm.Type;

        if r0 == r1 goto label15;

        $r2 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        if r0 != $r2 goto label03;

        $r30 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        if r1 != $r30 goto label01;

        $r35 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r35.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(144);

        goto label15;

     label01:
        $r31 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        if r1 != $r31 goto label02;

        $r34 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r34.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(143);

        goto label15;

     label02:
        $r32 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r32.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(142);

        $r33 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r33, r1);

        goto label15;

     label03:
        $r3 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        if r0 != $r3 goto label06;

        $r24 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        if r1 != $r24 goto label04;

        $r29 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r29.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(141);

        goto label15;

     label04:
        $r25 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        if r1 != $r25 goto label05;

        $r28 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r28.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(140);

        goto label15;

     label05:
        $r26 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r26.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(139);

        $r27 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r27, r1);

        goto label15;

     label06:
        $r4 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        if r0 != $r4 goto label09;

        $r18 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        if r1 != $r18 goto label07;

        $r23 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r23.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(138);

        goto label15;

     label07:
        $r19 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        if r1 != $r19 goto label08;

        $r22 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r22.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(137);

        goto label15;

     label08:
        $r20 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r20.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(136);

        $r21 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        virtualinvoke r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: void cast(com.mycila.inject.internal.asm.Type,com.mycila.inject.internal.asm.Type)>($r21, r1);

        goto label15;

     label09:
        $r5 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type BYTE_TYPE>;

        if r1 != $r5 goto label10;

        $r17 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r17.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(145);

        goto label15;

     label10:
        $r6 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type CHAR_TYPE>;

        if r1 != $r6 goto label11;

        $r16 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r16.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(146);

        goto label15;

     label11:
        $r7 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        if r1 != $r7 goto label12;

        $r15 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r15.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(135);

        goto label15;

     label12:
        $r8 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        if r1 != $r8 goto label13;

        $r14 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r14.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(134);

        goto label15;

     label13:
        $r9 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        if r1 != $r9 goto label14;

        $r13 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r13.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(133);

        goto label15;

     label14:
        $r10 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type SHORT_TYPE>;

        if r1 != $r10 goto label15;

        $r12 = r11.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r12.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(147);

     label15:
        return;
    }

    public void lcmp()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(148);

        return;
    }

    public void 'cmpl'(com.mycila.inject.internal.asm.Type)
    {
        short $s0;
        com.mycila.inject.internal.asm.MethodVisitor $r3;
        com.mycila.inject.internal.asm.Type r1, $r2;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r3 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r2 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        if r1 != $r2 goto label1;

        $s0 = 149;

        goto label2;

     label1:
        $s0 = 151;

     label2:
        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($s0);

        return;
    }

    public void 'cmpg'(com.mycila.inject.internal.asm.Type)
    {
        short $s0;
        com.mycila.inject.internal.asm.MethodVisitor $r3;
        com.mycila.inject.internal.asm.Type r1, $r2;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r3 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r2 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        if r1 != $r2 goto label1;

        $s0 = 150;

        goto label2;

     label1:
        $s0 = 152;

     label2:
        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($s0);

        return;
    }

    public void ifeq(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(153, r1);

        return;
    }

    public void ifne(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(154, r1);

        return;
    }

    public void iflt(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(155, r1);

        return;
    }

    public void ifge(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(156, r1);

        return;
    }

    public void ifgt(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(157, r1);

        return;
    }

    public void ifle(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(158, r1);

        return;
    }

    public void ificmpeq(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(159, r1);

        return;
    }

    public void ificmpne(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(160, r1);

        return;
    }

    public void ificmplt(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(161, r1);

        return;
    }

    public void ificmpge(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(162, r1);

        return;
    }

    public void ificmpgt(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(163, r1);

        return;
    }

    public void ificmple(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(164, r1);

        return;
    }

    public void ifacmpeq(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(165, r1);

        return;
    }

    public void ifacmpne(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(166, r1);

        return;
    }

    public void goTo(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(167, r1);

        return;
    }

    public void jsr(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(168, r1);

        return;
    }

    public void 'ret'(int)
    {
        int i0;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i0 := @parameter0: int;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitVarInsn(int,int)>(169, i0);

        return;
    }

    public void 'tableswitch'(int, int, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label[])
    {
        com.mycila.inject.internal.asm.MethodVisitor $r3;
        int i0, i1;
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.Label[] r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: com.mycila.inject.internal.asm.Label;

        r2 := @parameter3: com.mycila.inject.internal.asm.Label[];

        $r3 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r3.<com.mycila.inject.internal.asm.MethodVisitor: void visitTableSwitchInsn(int,int,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label[])>(i0, i1, r1, r2);

        return;
    }

    public void 'lookupswitch'(com.mycila.inject.internal.asm.Label, int[], com.mycila.inject.internal.asm.Label[])
    {
        int[] r2;
        com.mycila.inject.internal.asm.MethodVisitor $r4;
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.Label[] r3;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        r2 := @parameter1: int[];

        r3 := @parameter2: com.mycila.inject.internal.asm.Label[];

        $r4 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitLookupSwitchInsn(com.mycila.inject.internal.asm.Label,int[],com.mycila.inject.internal.asm.Label[])>(r1, r2, r3);

        return;
    }

    public void areturn(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int $i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getOpcode(int)>(172);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>($i0);

        return;
    }

    public void getstatic(java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r4;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(178, r1, r2, r3);

        return;
    }

    public void putstatic(java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r4;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(179, r1, r2, r3);

        return;
    }

    public void getfield(java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r4;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(180, r1, r2, r3);

        return;
    }

    public void putfield(java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r4;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitFieldInsn(int,java.lang.String,java.lang.String,java.lang.String)>(181, r1, r2, r3);

        return;
    }

    public void invokevirtual(java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r4;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(182, r1, r2, r3);

        return;
    }

    public void invokespecial(java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r4;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(183, r1, r2, r3);

        return;
    }

    public void invokestatic(java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r4;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(184, r1, r2, r3);

        return;
    }

    public void invokeinterface(java.lang.String, java.lang.String, java.lang.String)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r4;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String r1, r2, r3;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitMethodInsn(int,java.lang.String,java.lang.String,java.lang.String)>(185, r1, r2, r3);

        return;
    }

    public void anew(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String $r3;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(187, $r3);

        return;
    }

    public void 'newarray'(com.mycila.inject.internal.asm.Type)
    {
        byte b1;
        com.mycila.inject.internal.asm.MethodVisitor $r2, $r4;
        int $i0;
        com.mycila.inject.internal.asm.Type r0;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r1;
        java.lang.String $r3;

        r1 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            default: goto label09;
        };

     label01:
        b1 = 4;

        goto label10;

     label02:
        b1 = 5;

        goto label10;

     label03:
        b1 = 8;

        goto label10;

     label04:
        b1 = 9;

        goto label10;

     label05:
        b1 = 10;

        goto label10;

     label06:
        b1 = 6;

        goto label10;

     label07:
        b1 = 11;

        goto label10;

     label08:
        b1 = 7;

        goto label10;

     label09:
        $r2 = r1.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(189, $r3);

        return;

     label10:
        $r4 = r1.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r4.<com.mycila.inject.internal.asm.MethodVisitor: void visitIntInsn(int,int)>(188, b1);

        return;
    }

    public void arraylength()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(190);

        return;
    }

    public void athrow()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(191);

        return;
    }

    public void checkcast(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String $r3;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(192, $r3);

        return;
    }

    public void instanceOf(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String $r3;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r3 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitTypeInsn(int,java.lang.String)>(193, $r3);

        return;
    }

    public void monitorenter()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(194);

        return;
    }

    public void monitorexit()
    {
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitInsn(int)>(195);

        return;
    }

    public void multianewarray(java.lang.String, int)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int i0;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        java.lang.String r1;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitMultiANewArrayInsn(java.lang.String,int)>(r1, i0);

        return;
    }

    public void ifnull(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(198, r1);

        return;
    }

    public void ifnonnull(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitJumpInsn(int,com.mycila.inject.internal.asm.Label)>(199, r1);

        return;
    }

    public void mark(com.mycila.inject.internal.asm.Label)
    {
        com.mycila.inject.internal.asm.Label r1;
        com.mycila.inject.internal.asm.commons.InstructionAdapter r0;
        com.mycila.inject.internal.asm.MethodVisitor $r2;

        r0 := @this: com.mycila.inject.internal.asm.commons.InstructionAdapter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Label;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitLabel(com.mycila.inject.internal.asm.Label)>(r1);

        return;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.asm.Type $r0;

        $r0 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>("Ljava/lang/Object;");

        <com.mycila.inject.internal.asm.commons.InstructionAdapter: com.mycila.inject.internal.asm.Type OBJECT_TYPE> = $r0;

        return;
    }
}
