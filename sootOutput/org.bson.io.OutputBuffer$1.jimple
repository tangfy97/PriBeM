class org.bson.io.OutputBuffer$1 extends java.io.OutputStream
{
    final java.lang.StringBuilder val$buf;
    final org.bson.io.OutputBuffer this$0;

    void <init>(org.bson.io.OutputBuffer, java.lang.StringBuilder)
    {
        java.lang.StringBuilder r2;
        org.bson.io.OutputBuffer r1;
        org.bson.io.OutputBuffer$1 r0;

        r0 := @this: org.bson.io.OutputBuffer$1;

        r1 := @parameter0: org.bson.io.OutputBuffer;

        r2 := @parameter1: java.lang.StringBuilder;

        r0.<org.bson.io.OutputBuffer$1: org.bson.io.OutputBuffer this$0> = r1;

        r0.<org.bson.io.OutputBuffer$1: java.lang.StringBuilder val$buf> = r2;

        specialinvoke r0.<java.io.OutputStream: void <init>()>();

        return;
    }

    public void write(int)
    {
        org.bson.io.OutputBuffer$1 r1;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r2, $r3;
        java.lang.String $r0;

        r1 := @this: org.bson.io.OutputBuffer$1;

        i0 := @parameter0: int;

        $i1 = 255 & i0;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i2 >= 2 goto label1;

        $r3 = r1.<org.bson.io.OutputBuffer$1: java.lang.StringBuilder val$buf>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0");

     label1:
        $r2 = r1.<org.bson.io.OutputBuffer$1: java.lang.StringBuilder val$buf>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        return;
    }
}
