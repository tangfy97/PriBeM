class org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter extends java.lang.Object implements org.waveprotocol.wave.model.operation.SilentOperationSink
{
    private final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel target;

    public void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel)
    {
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel r1;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter;

        r1 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel target> = r1;

        return;
    }

    public void consume(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel $r3;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation[] $r1;
        java.lang.RuntimeException $r5;
        org.waveprotocol.wave.concurrencycontrol.common.ChannelException $r4;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter;

        r2 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

     label1:
        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel target>;

        $r1 = newarray (org.waveprotocol.wave.model.operation.wave.WaveletOperation)[1];

        $r1[0] = r2;

        interfaceinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel: void send(org.waveprotocol.wave.model.operation.wave.WaveletOperation[])>($r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Send failed, channel is broken", $r4);

        throw $r5;

     label4:
        return;

        catch org.waveprotocol.wave.concurrencycontrol.common.ChannelException from label1 to label2 with label3;
    }

    public volatile void consume(org.waveprotocol.wave.model.operation.Operation)
    {
        org.waveprotocol.wave.model.operation.Operation r1;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.Operation;

        $r2 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) r1;

        virtualinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.CcBasedWavelet$ChannelAdapter: void consume(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>($r2);

        return;
    }
}
