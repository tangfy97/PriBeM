public class org.waveprotocol.box.server.waveserver.NonSigningSignatureHandler extends java.lang.Object implements org.waveprotocol.box.server.waveserver.SignatureHandler
{
    private final java.lang.String domain;

    public void <init>(java.lang.String)
    {
        org.waveprotocol.box.server.waveserver.NonSigningSignatureHandler r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.NonSigningSignatureHandler;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.waveserver.NonSigningSignatureHandler: java.lang.String domain> = r1;

        return;
    }

    public java.lang.String getDomain()
    {
        org.waveprotocol.box.server.waveserver.NonSigningSignatureHandler r0;
        java.lang.String $r1;

        r0 := @this: org.waveprotocol.box.server.waveserver.NonSigningSignatureHandler;

        $r1 = r0.<org.waveprotocol.box.server.waveserver.NonSigningSignatureHandler: java.lang.String domain>;

        return $r1;
    }

    public org.waveprotocol.wave.crypto.SignerInfo getSignerInfo()
    {
        org.waveprotocol.box.server.waveserver.NonSigningSignatureHandler r0;

        r0 := @this: org.waveprotocol.box.server.waveserver.NonSigningSignatureHandler;

        return null;
    }

    public java.lang.Iterable sign(org.waveprotocol.box.server.waveserver.ByteStringMessage)
    {
        org.waveprotocol.box.server.waveserver.NonSigningSignatureHandler r1;
        java.util.List $r0;
        org.waveprotocol.box.server.waveserver.ByteStringMessage r2;

        r1 := @this: org.waveprotocol.box.server.waveserver.NonSigningSignatureHandler;

        r2 := @parameter0: org.waveprotocol.box.server.waveserver.ByteStringMessage;

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r0;
    }
}
