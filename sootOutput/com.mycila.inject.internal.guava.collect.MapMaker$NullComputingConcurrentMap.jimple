final class com.mycila.inject.internal.guava.collect.MapMaker$NullComputingConcurrentMap extends com.mycila.inject.internal.guava.collect.MapMaker$NullConcurrentMap
{
    private static final long serialVersionUID;
    final com.mycila.inject.internal.guava.base.Function computingFunction;

    void <init>(com.mycila.inject.internal.guava.collect.MapMaker, com.mycila.inject.internal.guava.base.Function)
    {
        com.mycila.inject.internal.guava.collect.MapMaker$NullComputingConcurrentMap r0;
        com.mycila.inject.internal.guava.collect.MapMaker r1;
        java.lang.Object $r3;
        com.mycila.inject.internal.guava.base.Function r2, $r4;

        r0 := @this: com.mycila.inject.internal.guava.collect.MapMaker$NullComputingConcurrentMap;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.MapMaker;

        r2 := @parameter1: com.mycila.inject.internal.guava.base.Function;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.MapMaker$NullConcurrentMap: void <init>(com.mycila.inject.internal.guava.collect.MapMaker)>(r1);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (com.mycila.inject.internal.guava.base.Function) $r3;

        r0.<com.mycila.inject.internal.guava.collect.MapMaker$NullComputingConcurrentMap: com.mycila.inject.internal.guava.base.Function computingFunction> = $r4;

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.MapMaker$NullComputingConcurrentMap r1;
        java.lang.Object r0, $r2;
        java.lang.StringBuilder $r3, $r5, $r6, $r7, $r8;
        com.mycila.inject.internal.guava.base.Function $r4;
        java.lang.String $r9;

        r1 := @this: com.mycila.inject.internal.guava.collect.MapMaker$NullComputingConcurrentMap;

        r0 := @parameter0: java.lang.Object;

        $r2 = specialinvoke r1.<com.mycila.inject.internal.guava.collect.MapMaker$NullComputingConcurrentMap: java.lang.Object compute(java.lang.Object)>(r0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r1.<com.mycila.inject.internal.guava.collect.MapMaker$NullComputingConcurrentMap: com.mycila.inject.internal.guava.base.Function computingFunction>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returned null for key ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>($r2, $r9);

        virtualinvoke r1.<com.mycila.inject.internal.guava.collect.MapMaker$NullComputingConcurrentMap: void notifyRemoval(java.lang.Object,java.lang.Object)>(r0, $r2);

        return $r2;
    }

    private java.lang.Object compute(java.lang.Object)
    {
        java.lang.Throwable $r4;
        com.mycila.inject.internal.guava.collect.MapMaker$NullComputingConcurrentMap r1;
        java.lang.Object r0, $r3;
        com.mycila.inject.internal.guava.base.Function $r2;
        com.mycila.inject.internal.guava.collect.ComputationException $r5, $r6;

        r1 := @this: com.mycila.inject.internal.guava.collect.MapMaker$NullComputingConcurrentMap;

        r0 := @parameter0: java.lang.Object;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

     label1:
        $r2 = r1.<com.mycila.inject.internal.guava.collect.MapMaker$NullComputingConcurrentMap: com.mycila.inject.internal.guava.base.Function computingFunction>;

        $r3 = interfaceinvoke $r2.<com.mycila.inject.internal.guava.base.Function: java.lang.Object apply(java.lang.Object)>(r0);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        throw $r6;

     label4:
        $r4 := @caughtexception;

        $r5 = new com.mycila.inject.internal.guava.collect.ComputationException;

        specialinvoke $r5.<com.mycila.inject.internal.guava.collect.ComputationException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch com.mycila.inject.internal.guava.collect.ComputationException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.MapMaker$NullComputingConcurrentMap: long serialVersionUID> = 0L;

        return;
    }
}
