public final class kodkod.engine.bool.BooleanAccumulator extends kodkod.engine.bool.BooleanValue implements java.lang.Iterable
{
    final kodkod.engine.bool.Operator$Nary op;
    private final kodkod.util.ints.SparseSequence inputs;

    private void <init>(kodkod.engine.bool.Operator$Nary)
    {
        kodkod.engine.bool.Operator$Nary r1;
        kodkod.engine.bool.BooleanAccumulator r0;
        kodkod.util.ints.TreeSequence $r2;

        r0 := @this: kodkod.engine.bool.BooleanAccumulator;

        r1 := @parameter0: kodkod.engine.bool.Operator$Nary;

        specialinvoke r0.<kodkod.engine.bool.BooleanValue: void <init>()>();

        r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op> = r1;

        $r2 = new kodkod.util.ints.TreeSequence;

        specialinvoke $r2.<kodkod.util.ints.TreeSequence: void <init>()>();

        r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.util.ints.SparseSequence inputs> = $r2;

        return;
    }

    public static kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary)
    {
        kodkod.engine.bool.Operator$Nary r0;
        kodkod.engine.bool.BooleanAccumulator $r1;
        java.lang.NullPointerException $r2;

        r0 := @parameter0: kodkod.engine.bool.Operator$Nary;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $r1 = new kodkod.engine.bool.BooleanAccumulator;

        specialinvoke $r1.<kodkod.engine.bool.BooleanAccumulator: void <init>(kodkod.engine.bool.Operator$Nary)>(r0);

        return $r1;
    }

    public static transient kodkod.engine.bool.BooleanAccumulator treeGate(kodkod.engine.bool.Operator$Nary, kodkod.engine.bool.BooleanValue[])
    {
        kodkod.engine.bool.Operator$Nary r0;
        kodkod.engine.bool.BooleanValue r3, $r4;
        kodkod.engine.bool.BooleanAccumulator $r1;
        kodkod.engine.bool.BooleanValue[] r2;
        java.lang.NullPointerException $r5;
        int i0, i1;

        r0 := @parameter0: kodkod.engine.bool.Operator$Nary;

        r2 := @parameter1: kodkod.engine.bool.BooleanValue[];

        if r0 != null goto label1;

        $r5 = new java.lang.NullPointerException;

        specialinvoke $r5.<java.lang.NullPointerException: void <init>()>();

        throw $r5;

     label1:
        $r1 = new kodkod.engine.bool.BooleanAccumulator;

        specialinvoke $r1.<kodkod.engine.bool.BooleanAccumulator: void <init>(kodkod.engine.bool.Operator$Nary)>(r0);

        i1 = 0;

        i0 = lengthof r2;

        goto label4;

     label2:
        r3 = r2[i1];

        $r4 = virtualinvoke $r1.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)>(r3);

        if $r4 == $r1 goto label3;

        goto label5;

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < i0 goto label2;

     label5:
        return $r1;
    }

    public kodkod.engine.bool.Operator$Nary op()
    {
        kodkod.engine.bool.Operator$Nary $r1;
        kodkod.engine.bool.BooleanAccumulator r0;

        r0 := @this: kodkod.engine.bool.BooleanAccumulator;

        $r1 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op>;

        return $r1;
    }

    public kodkod.engine.bool.BooleanValue add(kodkod.engine.bool.BooleanValue)
    {
        kodkod.engine.bool.Operator$Nary $r2, $r5, $r8, $r10, $r13, $r17;
        kodkod.engine.bool.BooleanValue r1;
        kodkod.engine.bool.BooleanConstant $r3, $r7, $r9, $r11, $r14, $r18;
        kodkod.engine.bool.BooleanAccumulator r0;
        int $i0, $i1, $i2;
        boolean $z0, $z1, $z2;
        kodkod.util.ints.SparseSequence $r4, $r6, $r12, $r15, $r16;

        r0 := @this: kodkod.engine.bool.BooleanAccumulator;

        r1 := @parameter0: kodkod.engine.bool.BooleanValue;

        $z0 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: boolean isShortCircuited()>();

        if $z0 == 0 goto label1;

        $r17 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op>;

        $r18 = virtualinvoke $r17.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        return $r18;

     label1:
        $i0 = virtualinvoke r1.<kodkod.engine.bool.BooleanValue: int label()>();

        $r2 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op>;

        $r3 = virtualinvoke $r2.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        if r1 == $r3 goto label2;

        $r12 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.util.ints.SparseSequence inputs>;

        $i2 = neg $i0;

        $z1 = interfaceinvoke $r12.<kodkod.util.ints.SparseSequence: boolean containsIndex(int)>($i2);

        if $z1 == 0 goto label3;

     label2:
        $r4 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.util.ints.SparseSequence inputs>;

        interfaceinvoke $r4.<kodkod.util.ints.SparseSequence: void clear()>();

        $r6 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.util.ints.SparseSequence inputs>;

        $r5 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op>;

        $r7 = virtualinvoke $r5.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        $i1 = $r7.<kodkod.engine.bool.BooleanConstant: int label>;

        $r8 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op>;

        $r9 = virtualinvoke $r8.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        interfaceinvoke $r6.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>($i1, $r9);

        $r10 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op>;

        $r11 = virtualinvoke $r10.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        return $r11;

     label3:
        $r13 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op>;

        $r14 = virtualinvoke $r13.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant identity()>();

        if r1 == $r14 goto label4;

        $r15 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.util.ints.SparseSequence inputs>;

        $z2 = interfaceinvoke $r15.<kodkod.util.ints.SparseSequence: boolean containsIndex(int)>($i0);

        if $z2 != 0 goto label4;

        $r16 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.util.ints.SparseSequence inputs>;

        interfaceinvoke $r16.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>($i0, r1);

     label4:
        return r0;
    }

    public boolean isShortCircuited()
    {
        kodkod.engine.bool.Operator$Nary $r5;
        kodkod.engine.bool.BooleanConstant $r6;
        kodkod.engine.bool.BooleanAccumulator r0;
        kodkod.util.ints.SparseSequence $r1, $r2;
        kodkod.util.ints.IndexedEntry $r3;
        int $i0;
        java.lang.Object $r4;

        r0 := @this: kodkod.engine.bool.BooleanAccumulator;

        $r1 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.util.ints.SparseSequence inputs>;

        $i0 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: int size()>();

        if $i0 != 1 goto label1;

        $r2 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.util.ints.SparseSequence inputs>;

        $r3 = interfaceinvoke $r2.<kodkod.util.ints.SparseSequence: kodkod.util.ints.IndexedEntry first()>();

        $r4 = interfaceinvoke $r3.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        $r5 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op>;

        $r6 = virtualinvoke $r5.<kodkod.engine.bool.Operator$Nary: kodkod.engine.bool.BooleanConstant shortCircuit()>();

        if $r4 != $r6 goto label1;

        return 1;

     label1:
        return 0;
    }

    int digest(kodkod.engine.bool.Operator)
    {
        kodkod.engine.bool.Operator$Nary $r2;
        java.util.Iterator $r3;
        kodkod.engine.bool.BooleanAccumulator r0;
        kodkod.engine.bool.BooleanFormula $r5;
        java.lang.IllegalArgumentException $r6;
        kodkod.engine.bool.Operator r1;
        int $i0, i1;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: kodkod.engine.bool.BooleanAccumulator;

        r1 := @parameter0: kodkod.engine.bool.Operator;

        $r2 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op>;

        if $r2 == r1 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r6;

     label1:
        i1 = 0;

        $r3 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: java.util.Iterator iterator()>();

        goto label3;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (kodkod.engine.bool.BooleanFormula) $r4;

        $i0 = virtualinvoke $r5.<kodkod.engine.bool.BooleanFormula: int hash(kodkod.engine.bool.Operator)>(r1);

        i1 = i1 + $i0;

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label2;

        return i1;
    }

    public int size()
    {
        int $i0;
        kodkod.engine.bool.BooleanAccumulator r0;
        kodkod.util.ints.SparseSequence $r1;

        r0 := @this: kodkod.engine.bool.BooleanAccumulator;

        $r1 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.util.ints.SparseSequence inputs>;

        $i0 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: int size()>();

        return $i0;
    }

    public java.util.Iterator iterator()
    {
        kodkod.engine.bool.BooleanAccumulator$1 $r0;
        kodkod.engine.bool.BooleanAccumulator r1;

        r1 := @this: kodkod.engine.bool.BooleanAccumulator;

        $r0 = new kodkod.engine.bool.BooleanAccumulator$1;

        specialinvoke $r0.<kodkod.engine.bool.BooleanAccumulator$1: void <init>(kodkod.engine.bool.BooleanAccumulator)>(r1);

        return $r0;
    }

    kodkod.engine.bool.BooleanValue negation()
    {
        java.lang.UnsupportedOperationException $r0;
        kodkod.engine.bool.BooleanAccumulator r1;

        r1 := @this: kodkod.engine.bool.BooleanAccumulator;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public int label()
    {
        kodkod.engine.bool.BooleanAccumulator r0;

        r0 := @this: kodkod.engine.bool.BooleanAccumulator;

        return 0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        kodkod.engine.bool.BooleanAccumulator r0;
        kodkod.util.ints.SparseSequence $r1;

        r0 := @this: kodkod.engine.bool.BooleanAccumulator;

        $r1 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.util.ints.SparseSequence inputs>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public volatile kodkod.engine.bool.Operator op()
    {
        kodkod.engine.bool.Operator$Nary $r1;
        kodkod.engine.bool.BooleanAccumulator r0;

        r0 := @this: kodkod.engine.bool.BooleanAccumulator;

        $r1 = virtualinvoke r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.engine.bool.Operator$Nary op()>();

        return $r1;
    }

    static kodkod.util.ints.SparseSequence access$1(kodkod.engine.bool.BooleanAccumulator)
    {
        kodkod.engine.bool.BooleanAccumulator r0;
        kodkod.util.ints.SparseSequence $r1;

        r0 := @parameter0: kodkod.engine.bool.BooleanAccumulator;

        $r1 = r0.<kodkod.engine.bool.BooleanAccumulator: kodkod.util.ints.SparseSequence inputs>;

        return $r1;
    }
}
