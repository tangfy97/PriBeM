public class org.apache.james.mime4j.util.ContentUtil extends java.lang.Object
{

    private void <init>()
    {
        org.apache.james.mime4j.util.ContentUtil r0;

        r0 := @this: org.apache.james.mime4j.util.ContentUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.apache.james.mime4j.util.ByteSequence encode(java.lang.String)
    {
        char $c2;
        byte $b3;
        int $i0, $i1, i4, $i5;
        java.lang.String r0;
        org.apache.james.mime4j.util.ByteArrayBuffer $r2;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = new org.apache.james.mime4j.util.ByteArrayBuffer;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        specialinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(int)>($i0);

        i4 = 0;

     label2:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 >= $i1 goto label3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $b3 = (byte) $c2;

        $i5 = (int) $b3;

        virtualinvoke $r2.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(int)>($i5);

        i4 = i4 + 1;

        goto label2;

     label3:
        return $r2;
    }

    public static org.apache.james.mime4j.util.ByteSequence encode(java.nio.charset.Charset, java.lang.String)
    {
        byte[] $r4;
        java.nio.CharBuffer $r1;
        java.nio.ByteBuffer $r2;
        java.nio.charset.Charset r5;
        int $i0, $i1, $i2;
        java.lang.String r0;
        org.apache.james.mime4j.util.ByteArrayBuffer $r3;

        r5 := @parameter0: java.nio.charset.Charset;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        if r5 != null goto label2;

        r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

     label2:
        $r1 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>(r0);

        $r2 = virtualinvoke r5.<java.nio.charset.Charset: java.nio.ByteBuffer encode(java.nio.CharBuffer)>($r1);

        $r3 = new org.apache.james.mime4j.util.ByteArrayBuffer;

        $i0 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        specialinvoke $r3.<org.apache.james.mime4j.util.ByteArrayBuffer: void <init>(int)>($i0);

        $r4 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int position()>();

        $i2 = virtualinvoke $r2.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke $r3.<org.apache.james.mime4j.util.ByteArrayBuffer: void append(byte[],int,int)>($r4, $i1, $i2);

        return $r3;
    }

    public static java.lang.String decode(org.apache.james.mime4j.util.ByteSequence)
    {
        int $i0;
        java.lang.String $r1;
        org.apache.james.mime4j.util.ByteSequence r0;

        r0 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke r0.<org.apache.james.mime4j.util.ByteSequence: int length()>();

        $r1 = staticinvoke <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(org.apache.james.mime4j.util.ByteSequence,int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static java.lang.String decode(java.nio.charset.Charset, org.apache.james.mime4j.util.ByteSequence)
    {
        java.nio.charset.Charset r0;
        org.apache.james.mime4j.util.ByteSequence r1;
        int $i0;
        java.lang.String $r2;

        r0 := @parameter0: java.nio.charset.Charset;

        r1 := @parameter1: org.apache.james.mime4j.util.ByteSequence;

        $i0 = interfaceinvoke r1.<org.apache.james.mime4j.util.ByteSequence: int length()>();

        $r2 = staticinvoke <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,org.apache.james.mime4j.util.ByteSequence,int,int)>(r0, r1, 0, $i0);

        return $r2;
    }

    public static java.lang.String decode(org.apache.james.mime4j.util.ByteSequence, int, int)
    {
        org.apache.james.mime4j.util.ByteSequence r0;
        char $c5;
        short $s4, $s7;
        byte $b3;
        int i0, i1, $i2, i6;
        java.lang.StringBuilder $r3;
        java.lang.String $r2;

        r0 := @parameter0: org.apache.james.mime4j.util.ByteSequence;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(i0);

        i6 = i1;

     label2:
        $i2 = i1 + i0;

        if i6 >= $i2 goto label3;

        $b3 = interfaceinvoke r0.<org.apache.james.mime4j.util.ByteSequence: byte byteAt(int)>(i6);

        $s7 = (short) $b3;

        $s4 = $s7 & 255;

        $c5 = (char) $s4;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

        i6 = i6 + 1;

        goto label2;

     label3:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.String decode(java.nio.charset.Charset, org.apache.james.mime4j.util.ByteSequence, int, int)
    {
        byte[] $r1, $r3;
        org.apache.james.mime4j.util.ByteSequence r0;
        java.nio.charset.Charset r5;
        int i0, i1;
        java.lang.String $r2, $r4;
        org.apache.james.mime4j.util.ByteArrayBuffer r6;
        boolean $z0;

        r5 := @parameter0: java.nio.charset.Charset;

        r0 := @parameter1: org.apache.james.mime4j.util.ByteSequence;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        if r0 != null goto label1;

        return null;

     label1:
        if r5 != null goto label2;

        r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>();

     label2:
        $z0 = r0 instanceof org.apache.james.mime4j.util.ByteArrayBuffer;

        if $z0 == 0 goto label3;

        r6 = (org.apache.james.mime4j.util.ByteArrayBuffer) r0;

        $r3 = virtualinvoke r6.<org.apache.james.mime4j.util.ByteArrayBuffer: byte[] buffer()>();

        $r4 = staticinvoke <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,byte[],int,int)>(r5, $r3, i0, i1);

        return $r4;

     label3:
        $r1 = interfaceinvoke r0.<org.apache.james.mime4j.util.ByteSequence: byte[] toByteArray()>();

        $r2 = staticinvoke <org.apache.james.mime4j.util.ContentUtil: java.lang.String decode(java.nio.charset.Charset,byte[],int,int)>(r5, $r1, i0, i1);

        return $r2;
    }

    private static java.lang.String decode(java.nio.charset.Charset, byte[], int, int)
    {
        byte[] r1;
        java.nio.charset.Charset r0;
        java.nio.CharBuffer $r3;
        int i0, i1;
        java.lang.String $r4;
        java.nio.ByteBuffer $r2;

        r0 := @parameter0: java.nio.charset.Charset;

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r1, i0, i1);

        $r3 = virtualinvoke r0.<java.nio.charset.Charset: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r2);

        $r4 = virtualinvoke $r3.<java.nio.CharBuffer: java.lang.String toString()>();

        return $r4;
    }
}
