public class groovy.util.GroovyTestCase extends junit.framework.TestCase
{
    protected static java.util.logging.Logger log;
    private static int counter;
    public static final java.lang.String TEST_SCRIPT_NAME_PREFIX;
    private boolean useAgileDoxNaming;
    private static final java.lang.ThreadLocal notYetImplementedFlag;
    static java.lang.Class class$groovy$util$GroovyTestCase;

    public void <init>()
    {
        groovy.util.GroovyTestCase r0;

        r0 := @this: groovy.util.GroovyTestCase;

        specialinvoke r0.<junit.framework.TestCase: void <init>()>();

        r0.<groovy.util.GroovyTestCase: boolean useAgileDoxNaming> = 0;

        return;
    }

    public java.lang.String getName()
    {
        groovy.util.GroovyTestCase r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5;
        boolean $z0;

        r0 := @this: groovy.util.GroovyTestCase;

        $z0 = r0.<groovy.util.GroovyTestCase: boolean useAgileDoxNaming>;

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<junit.framework.TestCase: java.lang.String getName()>();

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>(4);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("([A-Z])", " $1");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        return $r5;

     label1:
        $r1 = specialinvoke r0.<junit.framework.TestCase: java.lang.String getName()>();

        return $r1;
    }

    public java.lang.String getMethodName()
    {
        java.lang.String $r1;
        groovy.util.GroovyTestCase r0;

        r0 := @this: groovy.util.GroovyTestCase;

        $r1 = specialinvoke r0.<junit.framework.TestCase: java.lang.String getName()>();

        return $r1;
    }

    protected void assertArrayEquals(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r2, r6;
        groovy.util.GroovyTestCase r26;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r8, $r10, $r11, $r12, $r14, $r15, $r16, $r18, $r19, $r20, $r21, $r22;
        int $i0, $i1, i2, i3;
        java.lang.String $r3, $r7, $r9, $r13, $r17, $r23;
        java.lang.Object $r24, $r25;

        r26 := @this: groovy.util.GroovyTestCase;

        r2 := @parameter0: java.lang.Object[];

        r6 := @parameter1: java.lang.Object[];

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("expected array: ");

        $r3 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toString(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" value array: ");

        $r7 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.String toString(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": expected should not be null");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <groovy.util.GroovyTestCase: void assertNotNull(java.lang.String,java.lang.Object)>($r13, r2);

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(": value should not be null");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <groovy.util.GroovyTestCase: void assertNotNull(java.lang.String,java.lang.Object)>($r17, r6);

        $i1 = lengthof r2;

        $i0 = lengthof r6;

        staticinvoke <groovy.util.GroovyTestCase: void assertEquals(java.lang.String,int,int)>($r9, $i1, $i0);

        i3 = 0;

        i2 = lengthof r2;

     label1:
        if i3 >= i2 goto label2;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("value[");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i3);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("] when ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        $r25 = r2[i3];

        $r24 = r6[i3];

        staticinvoke <groovy.util.GroovyTestCase: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r23, $r25, $r24);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    protected void assertLength(int, char[])
    {
        groovy.util.GroovyTestCase r1;
        int i0, $i1;
        char[] r0;

        r1 := @this: groovy.util.GroovyTestCase;

        i0 := @parameter0: int;

        r0 := @parameter1: char[];

        $i1 = lengthof r0;

        staticinvoke <groovy.util.GroovyTestCase: void assertEquals(int,int)>(i0, $i1);

        return;
    }

    protected void assertLength(int, int[])
    {
        groovy.util.GroovyTestCase r1;
        int[] r0;
        int i0, $i1;

        r1 := @this: groovy.util.GroovyTestCase;

        i0 := @parameter0: int;

        r0 := @parameter1: int[];

        $i1 = lengthof r0;

        staticinvoke <groovy.util.GroovyTestCase: void assertEquals(int,int)>(i0, $i1);

        return;
    }

    protected void assertLength(int, java.lang.Object[])
    {
        java.lang.Object[] r0;
        groovy.util.GroovyTestCase r1;
        int i0, $i1;

        r1 := @this: groovy.util.GroovyTestCase;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object[];

        $i1 = lengthof r0;

        staticinvoke <groovy.util.GroovyTestCase: void assertEquals(int,int)>(i0, $i1);

        return;
    }

    protected void assertContains(char, char[])
    {
        groovy.util.GroovyTestCase r6;
        java.lang.StringBuffer $r2, $r4, $r5, $r7;
        int $i0, $i2, $i4, $i5, i7, i8, $i9, $i10;
        java.lang.String $r3;
        char c1, $c3, $c6;
        char[] r0;

        r6 := @this: groovy.util.GroovyTestCase;

        c1 := @parameter0: char;

        r0 := @parameter1: char[];

        i7 = 0;

     label1:
        $i0 = lengthof r0;

        if i7 >= $i0 goto label3;

        $c6 = r0[i7];

        $i9 = (int) $c6;

        $i10 = (int) c1;

        if $i9 != $i10 goto label2;

        return;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not in {");

        i8 = 0;

     label4:
        $i2 = lengthof r0;

        if i8 >= $i2 goto label6;

        $r4 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $c3 = r0[i8];

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c3);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $i4 = lengthof r0;

        $i5 = $i4 - 1;

        if i8 >= $i5 goto label5;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label5:
        i8 = i8 + 1;

        goto label4;

     label6:
        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" }");

        $r3 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <groovy.util.GroovyTestCase: void fail(java.lang.String)>($r3);

        return;
    }

    protected void assertContains(int, int[])
    {
        groovy.util.GroovyTestCase r6;
        int[] r0;
        java.lang.StringBuffer $r1, $r2, $r4, $r5;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        java.lang.String $r3;

        r6 := @this: groovy.util.GroovyTestCase;

        i1 := @parameter0: int;

        r0 := @parameter1: int[];

        i7 = 0;

     label1:
        $i0 = lengthof r0;

        if i7 >= $i0 goto label3;

        $i6 = r0[i7];

        if $i6 != i1 goto label2;

        return;

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not in {");

        i8 = 0;

     label4:
        $i2 = lengthof r0;

        if i8 >= $i2 goto label6;

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $i3 = r0[i8];

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i3);

        virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\'");

        $i4 = lengthof r0;

        $i5 = $i4 - 1;

        if i8 >= $i5 goto label5;

        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label5:
        i8 = i8 + 1;

        goto label4;

     label6:
        virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" }");

        $r3 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <groovy.util.GroovyTestCase: void fail(java.lang.String)>($r3);

        return;
    }

    protected void assertToString(java.lang.Object, java.lang.String)
    {
        groovy.util.GroovyTestCase r7;
        java.lang.StringBuffer $r2, $r3, $r4;
        java.lang.Object r0, $r1;
        java.lang.String $r5, r6;

        r7 := @this: groovy.util.GroovyTestCase;

        r0 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r0, "toString", null);

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("toString() on value: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <groovy.util.GroovyTestCase: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r5, r6, $r1);

        return;
    }

    protected void assertInspect(java.lang.Object, java.lang.String)
    {
        groovy.util.GroovyTestCase r7;
        java.lang.StringBuffer $r2, $r3, $r4;
        java.lang.Object r0, $r1;
        java.lang.String $r5, r6;

        r7 := @this: groovy.util.GroovyTestCase;

        r0 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.codehaus.groovy.runtime.InvokerHelper: java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object)>(r0, "inspect", null);

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("inspect() on value: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <groovy.util.GroovyTestCase: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>($r5, r6, $r1);

        return;
    }

    protected void assertScript(java.lang.String) throws java.lang.Exception
    {
        groovy.util.GroovyTestCase r2;
        java.lang.String r1, $r3;
        groovy.lang.GroovyShell $r0;

        r2 := @this: groovy.util.GroovyTestCase;

        r1 := @parameter0: java.lang.String;

        $r0 = new groovy.lang.GroovyShell;

        specialinvoke $r0.<groovy.lang.GroovyShell: void <init>()>();

        $r3 = virtualinvoke r2.<groovy.util.GroovyTestCase: java.lang.String getTestClassName()>();

        virtualinvoke $r0.<groovy.lang.GroovyShell: java.lang.Object evaluate(java.lang.String,java.lang.String)>(r1, $r3);

        return;
    }

    protected java.lang.String getTestClassName()
    {
        groovy.util.GroovyTestCase r2;
        java.lang.StringBuffer $r0, $r1, $r4, $r5, $r6;
        int $i0, $i1;
        java.lang.String $r3, $r7;

        r2 := @this: groovy.util.GroovyTestCase;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TestScript");

        $r3 = virtualinvoke r2.<groovy.util.GroovyTestCase: java.lang.String getMethodName()>();

        $r4 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $i0 = <groovy.util.GroovyTestCase: int counter>;

        $i1 = $i0 + 1;

        <groovy.util.GroovyTestCase: int counter> = $i1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".groovy");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    protected java.lang.String shouldFail(groovy.lang.Closure)
    {
        java.lang.Throwable $r6;
        groovy.util.GroovyTestCase r7;
        groovy.lang.Closure r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r4;
        java.lang.String $r5, r8;
        boolean z0;

        r7 := @this: groovy.util.GroovyTestCase;

        r0 := @parameter0: groovy.lang.Closure;

        z0 = 0;

        r8 = null;

     label1:
        virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        z0 = 1;

        r8 = virtualinvoke $r6.<java.lang.Throwable: java.lang.String getMessage()>();

     label4:
        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Closure ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" should have failed");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <groovy.util.GroovyTestCase: void assertTrue(java.lang.String,boolean)>($r5, z0);

        return r8;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    protected java.lang.String shouldFail(java.lang.Class, groovy.lang.Closure)
    {
        java.lang.Throwable $r18, r21;
        groovy.util.GroovyTestCase r20;
        groovy.lang.Closure r0;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r16;
        java.lang.String $r6, $r10, $r15, $r17, $r22;
        boolean $z0;
        groovy.lang.GroovyRuntimeException $r19;
        java.lang.Class r1;

        r20 := @this: groovy.util.GroovyTestCase;

        r1 := @parameter0: java.lang.Class;

        r0 := @parameter1: groovy.lang.Closure;

        r21 = null;

     label1:
        virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call()>();

     label2:
        goto label5;

     label3:
        $r19 := @caughtexception;

        r21 = specialinvoke r20.<groovy.util.GroovyTestCase: java.lang.Throwable unwrap(groovy.lang.GroovyRuntimeException)>($r19);

        goto label5;

     label4:
        $r18 := @caughtexception;

        r21 = $r18;

     label5:
        if r21 != null goto label6;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Closure ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" should have failed with an exception of type ");

        $r15 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <groovy.util.GroovyTestCase: void fail(java.lang.String)>($r17);

        goto label7;

     label6:
        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r21);

        if $z0 != 0 goto label7;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Closure ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" should have failed with an exception of type ");

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", instead got Exception ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r21);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <groovy.util.GroovyTestCase: void fail(java.lang.String)>($r10);

     label7:
        $r22 = virtualinvoke r21.<java.lang.Throwable: java.lang.String getMessage()>();

        return $r22;

        catch groovy.lang.GroovyRuntimeException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    protected java.lang.String shouldFailWithCause(java.lang.Class, groovy.lang.Closure)
    {
        java.lang.Throwable $r18, $r20, $r21, r23, $r25;
        groovy.util.GroovyTestCase r22;
        groovy.lang.Closure r0;
        java.lang.StringBuffer $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r11, $r12, $r13, $r14, $r16;
        java.lang.String $r6, $r10, $r15, $r17, $r26;
        boolean $z0, $z1;
        groovy.lang.GroovyRuntimeException $r19, r24;
        java.lang.Class r1;

        r22 := @this: groovy.util.GroovyTestCase;

        r1 := @parameter0: java.lang.Class;

        r0 := @parameter1: groovy.lang.Closure;

        r23 = null;

     label1:
        virtualinvoke r0.<groovy.lang.Closure: java.lang.Object call()>();

     label2:
        goto label7;

     label3:
        $r19 := @caughtexception;

        r24 = $r19;

        r23 = $r19;

     label4:
        $r25 = virtualinvoke r23.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r25 == null goto label5;

        $r20 = virtualinvoke r23.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r20 == r24 goto label5;

        $r21 = virtualinvoke r23.<java.lang.Throwable: java.lang.Throwable getCause()>();

        r23 = $r21;

        if $r21 == r24 goto label4;

        $z1 = $r21 instanceof groovy.lang.GroovyRuntimeException;

        if $z1 == 0 goto label4;

        r24 = (groovy.lang.GroovyRuntimeException) $r21;

        goto label4;

     label5:
        goto label7;

     label6:
        $r18 := @caughtexception;

        r23 = $r18;

     label7:
        if r23 != null goto label8;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Closure ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" should have failed with an exception of type ");

        $r15 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <groovy.util.GroovyTestCase: void fail(java.lang.String)>($r17);

        goto label9;

     label8:
        $z0 = virtualinvoke r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r23);

        if $z0 != 0 goto label9;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Closure ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" should have failed with an exception of type ");

        $r6 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", instead got Exception ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r23);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <groovy.util.GroovyTestCase: void fail(java.lang.String)>($r10);

     label9:
        $r26 = virtualinvoke r23.<java.lang.Throwable: java.lang.String getMessage()>();

        return $r26;

        catch groovy.lang.GroovyRuntimeException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label6;
    }

    protected java.lang.String fixEOLs(java.lang.String)
    {
        java.lang.String r0, $r1;
        groovy.util.GroovyTestCase r2;

        r2 := @this: groovy.util.GroovyTestCase;

        r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("(\\r\\n?)|\n", "\n");

        return $r1;
    }

    public static boolean notYetImplemented(junit.framework.TestCase)
    {
        java.lang.reflect.Method $r6;
        java.lang.ThreadLocal $r0, $r3, $r21, $r23, $r31;
        java.util.logging.Logger $r8, $r26;
        java.lang.Exception $r24;
        java.lang.Throwable $r22;
        java.lang.Object[] $r15;
        java.lang.StringBuffer $r7, $r9, $r11, $r12, $r16, $r18, $r19, $r25, $r28, $r29;
        java.lang.Boolean $r2;
        junit.framework.TestCase r4;
        java.lang.String $r10, $r13, $r17, $r20, $r27, $r30;
        java.lang.Class[] $r14;
        java.lang.Object $r1;
        java.lang.Class $r5;

        r4 := @parameter0: junit.framework.TestCase;

        $r0 = <groovy.util.GroovyTestCase: java.lang.ThreadLocal notYetImplementedFlag>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        if $r1 == null goto label1;

        return 0;

     label1:
        $r3 = <groovy.util.GroovyTestCase: java.lang.ThreadLocal notYetImplementedFlag>;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r3.<java.lang.ThreadLocal: void set(java.lang.Object)>($r2);

        $r5 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = staticinvoke <groovy.util.GroovyTestCase: java.lang.reflect.Method findRunningJUnitTestMethod(java.lang.Class)>($r5);

     label2:
        $r8 = <groovy.util.GroovyTestCase: java.util.logging.Logger log>;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Running ");

        $r10 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" as not yet implemented");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r8.<java.util.logging.Logger: void info(java.lang.String)>($r13);

        $r14 = newarray (java.lang.Class)[0];

        $r15 = (java.lang.Object[]) $r14;

        virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r4, $r15);

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is marked as not yet implemented but passes unexpectedly");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        staticinvoke <groovy.util.GroovyTestCase: void fail(java.lang.String)>($r20);

     label3:
        $r21 = <groovy.util.GroovyTestCase: java.lang.ThreadLocal notYetImplementedFlag>;

        virtualinvoke $r21.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);

        goto label8;

     label4:
        $r24 := @caughtexception;

        $r26 = <groovy.util.GroovyTestCase: java.util.logging.Logger log>;

        $r25 = new java.lang.StringBuffer;

        specialinvoke $r25.<java.lang.StringBuffer: void <init>()>();

        $r27 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $r28 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" fails which is expected as it is not yet implemented");

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r26.<java.util.logging.Logger: void info(java.lang.String)>($r30);

     label5:
        $r31 = <groovy.util.GroovyTestCase: java.lang.ThreadLocal notYetImplementedFlag>;

        virtualinvoke $r31.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);

        goto label8;

     label6:
        $r22 := @caughtexception;

     label7:
        $r23 = <groovy.util.GroovyTestCase: java.lang.ThreadLocal notYetImplementedFlag>;

        virtualinvoke $r23.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);

        throw $r22;

     label8:
        return 1;

        catch java.lang.Exception from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public boolean notYetImplemented()
    {
        groovy.util.GroovyTestCase r0;
        boolean $z0;

        r0 := @this: groovy.util.GroovyTestCase;

        $z0 = staticinvoke <groovy.util.GroovyTestCase: boolean notYetImplemented(junit.framework.TestCase)>(r0);

        return $z0;
    }

    private static java.lang.reflect.Method findRunningJUnitTestMethod(java.lang.Class)
    {
        int $i0, i1, $i3;
        java.lang.StackTraceElement r5;
        java.lang.String $r6, $r8, $r9;
        java.lang.reflect.Method $r10;
        boolean $z0, $z1;
        java.lang.Class[] r0;
        java.lang.RuntimeException $r13;
        java.lang.Exception $r11, $r12;
        java.lang.StackTraceElement[] $r2, $r4;
        java.lang.Class r7;

        r7 := @parameter0: java.lang.Class;

        r0 = newarray (java.lang.Class)[0];

        $r12 = new java.lang.Exception;

        specialinvoke $r12.<java.lang.Exception: void <init>()>();

        $r2 = virtualinvoke $r12.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        $i0 = lengthof $r2;

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label7;

        $r4 = virtualinvoke $r12.<java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()>();

        r5 = $r4[i1];

        $r6 = virtualinvoke r5.<java.lang.StackTraceElement: java.lang.String getClassName()>();

        $r8 = virtualinvoke r7.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z0 == 0 goto label6;

     label2:
        $r9 = virtualinvoke r5.<java.lang.StackTraceElement: java.lang.String getMethodName()>();

        $r10 = virtualinvoke r7.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r9, r0);

        $z1 = staticinvoke <groovy.util.GroovyTestCase: boolean isPublicTestMethod(java.lang.reflect.Method)>($r10);

        if $z1 == 0 goto label4;

     label3:
        return $r10;

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

     label6:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label1;

     label7:
        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("No JUnit test case method found in call stack");

        throw $r13;

        catch java.lang.Exception from label2 to label3 with label5;
    }

    private static boolean isPublicTestMethod(java.lang.reflect.Method)
    {
        java.lang.Class[] $r2;
        int $i0, $i1;
        java.lang.Class $r3, $r4;
        java.lang.String $r1;
        java.lang.reflect.Method r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $i0 = lengthof $r2;

        if $i0 != 0 goto label1;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("test");

        if $z0 == 0 goto label1;

        $r4 = <java.lang.Void: java.lang.Class TYPE>;

        $z1 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public static void assertEquals(java.lang.String, java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r2;
        java.lang.String r1;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        if r0 != null goto label1;

        if r2 != null goto label1;

        return;

     label1:
        if r0 == null goto label2;

        $z0 = staticinvoke <org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation: boolean compareEqual(java.lang.Object,java.lang.Object)>(r0, r2);

        if $z0 == 0 goto label2;

        return;

     label2:
        staticinvoke <groovy.util.GroovyTestCase: void failNotEquals(java.lang.String,java.lang.Object,java.lang.Object)>(r1, r0, r2);

        return;
    }

    public static void assertEquals(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        staticinvoke <groovy.util.GroovyTestCase: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>(null, r0, r1);

        return;
    }

    public static void assertEquals(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <groovy.util.GroovyTestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>(null, r0, r1);

        return;
    }

    private java.lang.Throwable unwrap(groovy.lang.GroovyRuntimeException)
    {
        java.lang.Throwable $r1, $r4, $r5, r6;
        groovy.lang.GroovyRuntimeException r0, $r3;
        groovy.util.GroovyTestCase r2;
        boolean $z0;

        r2 := @this: groovy.util.GroovyTestCase;

        r0 := @parameter0: groovy.lang.GroovyRuntimeException;

        r6 = r0;

        $r1 = virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r1 == null goto label1;

        $r5 = virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable getCause()>();

        if $r5 == r0 goto label1;

        r6 = virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable getCause()>();

     label1:
        if r6 == r0 goto label2;

        $z0 = r6 instanceof groovy.lang.GroovyRuntimeException;

        if $z0 == 0 goto label2;

        $r3 = (groovy.lang.GroovyRuntimeException) r6;

        $r4 = specialinvoke r2.<groovy.util.GroovyTestCase: java.lang.Throwable unwrap(groovy.lang.GroovyRuntimeException)>($r3);

        return $r4;

     label2:
        return r6;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.lang.ThreadLocal $r3;
        java.lang.Class $r0, $r4;
        java.lang.String $r1;
        java.util.logging.Logger $r2;

        <groovy.util.GroovyTestCase: java.lang.String TEST_SCRIPT_NAME_PREFIX> = "TestScript";

        $r0 = <groovy.util.GroovyTestCase: java.lang.Class class$groovy$util$GroovyTestCase>;

        if $r0 != null goto label1;

        $r4 = staticinvoke <groovy.util.GroovyTestCase: java.lang.Class class$(java.lang.String)>("groovy.util.GroovyTestCase");

        <groovy.util.GroovyTestCase: java.lang.Class class$groovy$util$GroovyTestCase> = $r4;

        goto label2;

     label1:
        $r4 = <groovy.util.GroovyTestCase: java.lang.Class class$groovy$util$GroovyTestCase>;

     label2:
        $r1 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r2 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r1);

        <groovy.util.GroovyTestCase: java.util.logging.Logger log> = $r2;

        $r3 = new java.lang.ThreadLocal;

        specialinvoke $r3.<java.lang.ThreadLocal: void <init>()>();

        <groovy.util.GroovyTestCase: java.lang.ThreadLocal notYetImplementedFlag> = $r3;

        return;
    }
}
