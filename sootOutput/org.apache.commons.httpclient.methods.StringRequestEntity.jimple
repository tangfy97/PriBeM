public class org.apache.commons.httpclient.methods.StringRequestEntity extends java.lang.Object implements org.apache.commons.httpclient.methods.RequestEntity
{
    private byte[] content;
    private java.lang.String charset;
    private java.lang.String contentType;

    public void <init>(java.lang.String)
    {
        byte[] $r2;
        org.apache.commons.httpclient.methods.StringRequestEntity r0;
        java.lang.String r1;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The content cannot be null");

        throw $r3;

     label1:
        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String contentType> = null;

        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset> = null;

        $r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content> = $r2;

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String) throws java.io.UnsupportedEncodingException
    {
        byte[] $r4, $r6;
        org.apache.commons.httpclient.HeaderElement $r14;
        java.lang.StringBuffer $r8, $r9, $r10, $r11;
        org.apache.commons.httpclient.NameValuePair $r15, r17;
        int $i0, i1;
        java.lang.String r1, r2, r3, $r5, $r12, $r13, $r18;
        org.apache.commons.httpclient.HeaderElement[] $r7;
        java.lang.IllegalArgumentException $r16;
        org.apache.commons.httpclient.methods.StringRequestEntity r0;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The content cannot be null");

        throw $r16;

     label1:
        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String contentType> = r2;

        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset> = r3;

        if r2 == null goto label6;

        $r7 = staticinvoke <org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.HeaderElement[] parseElements(java.lang.String)>(r2);

        r17 = null;

        i1 = 0;

     label2:
        $i0 = lengthof $r7;

        if i1 >= $i0 goto label4;

        $r14 = $r7[i1];

        $r15 = virtualinvoke $r14.<org.apache.commons.httpclient.HeaderElement: org.apache.commons.httpclient.NameValuePair getParameterByName(java.lang.String)>("charset");

        r17 = $r15;

        if $r15 == null goto label3;

        goto label4;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        if r3 != null goto label5;

        if r17 == null goto label5;

        $r13 = virtualinvoke r17.<org.apache.commons.httpclient.NameValuePair: java.lang.String getValue()>();

        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset> = $r13;

        goto label6;

     label5:
        if r3 == null goto label6;

        if r17 != null goto label6;

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("; charset=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String contentType> = $r12;

     label6:
        $r18 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset>;

        if $r18 == null goto label7;

        $r5 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset>;

        $r6 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>($r5);

        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content> = $r6;

        goto label8;

     label7:
        $r4 = virtualinvoke r1.<java.lang.String: byte[] getBytes()>();

        r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content> = $r4;

     label8:
        return;
    }

    public java.lang.String getContentType()
    {
        java.lang.String $r1;
        org.apache.commons.httpclient.methods.StringRequestEntity r0;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String contentType>;

        return $r1;
    }

    public boolean isRepeatable()
    {
        org.apache.commons.httpclient.methods.StringRequestEntity r0;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        return 1;
    }

    public void writeRequest(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r0;
        byte[] $r2;
        org.apache.commons.httpclient.methods.StringRequestEntity r1;
        java.lang.IllegalArgumentException $r3;

        r1 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        r0 := @parameter0: java.io.OutputStream;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Output stream may not be null");

        throw $r3;

     label1:
        $r2 = r1.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r2);

        virtualinvoke r0.<java.io.OutputStream: void flush()>();

        return;
    }

    public long getContentLength()
    {
        byte[] $r1;
        org.apache.commons.httpclient.methods.StringRequestEntity r0;
        int $i0;
        long $l1;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content>;

        $i0 = lengthof $r1;

        $l1 = (long) $i0;

        return $l1;
    }

    public java.lang.String getContent()
    {
        byte[] $r3, $r6, $r9;
        org.apache.commons.httpclient.methods.StringRequestEntity r0;
        java.lang.String $r1, $r2, $r4, $r5, $r8;
        java.io.UnsupportedEncodingException $r7;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset>;

        if $r1 == null goto label4;

     label1:
        $r4 = new java.lang.String;

        $r6 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content>;

        $r5 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset>;

        specialinvoke $r4.<java.lang.String: void <init>(byte[],java.lang.String)>($r6, $r5);

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.String;

        $r9 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content>;

        specialinvoke $r8.<java.lang.String: void <init>(byte[])>($r9);

        return $r8;

     label4:
        $r2 = new java.lang.String;

        $r3 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: byte[] content>;

        specialinvoke $r2.<java.lang.String: void <init>(byte[])>($r3);

        return $r2;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public java.lang.String getCharset()
    {
        java.lang.String $r1;
        org.apache.commons.httpclient.methods.StringRequestEntity r0;

        r0 := @this: org.apache.commons.httpclient.methods.StringRequestEntity;

        $r1 = r0.<org.apache.commons.httpclient.methods.StringRequestEntity: java.lang.String charset>;

        return $r1;
    }
}
