public class org.apache.http.impl.cookie.PublicSuffixListParser extends java.lang.Object
{
    private static final int MAX_LINE_LEN;
    private final org.apache.http.impl.cookie.PublicSuffixFilter filter;

    void <init>(org.apache.http.impl.cookie.PublicSuffixFilter)
    {
        org.apache.http.impl.cookie.PublicSuffixFilter r1;
        org.apache.http.impl.cookie.PublicSuffixListParser r0;

        r0 := @this: org.apache.http.impl.cookie.PublicSuffixListParser;

        r1 := @parameter0: org.apache.http.impl.cookie.PublicSuffixFilter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.http.impl.cookie.PublicSuffixListParser: org.apache.http.impl.cookie.PublicSuffixFilter filter> = r1;

        return;
    }

    public void parse(java.io.Reader) throws java.io.IOException
    {
        org.apache.http.impl.cookie.PublicSuffixFilter $r6, $r7;
        java.io.Reader r3;
        java.util.ArrayList $r0, $r1;
        int $i0;
        java.lang.StringBuilder $r4;
        java.io.BufferedReader $r2;
        java.lang.String $r8, r9;
        org.apache.http.impl.cookie.PublicSuffixListParser r5;
        boolean $z0, $z1, $z2, z3;

        r5 := @this: org.apache.http.impl.cookie.PublicSuffixListParser;

        r3 := @parameter0: java.io.Reader;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r2 = new java.io.BufferedReader;

        specialinvoke $r2.<java.io.BufferedReader: void <init>(java.io.Reader)>(r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(256);

        z3 = 1;

     label1:
        if z3 == 0 goto label8;

        z3 = specialinvoke r5.<org.apache.http.impl.cookie.PublicSuffixListParser: boolean readLine(java.io.Reader,java.lang.StringBuilder)>($r2, $r4);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = $r8;

        $i0 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        goto label1;

     label2:
        $z0 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("//");

        if $z0 == 0 goto label3;

        goto label1;

     label3:
        $z1 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>(".");

        if $z1 == 0 goto label4;

        r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>(1);

     label4:
        $z2 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>("!");

        if $z2 == 0 goto label5;

        r9 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int)>(1);

     label5:
        if $z2 == 0 goto label6;

        interfaceinvoke $r1.<java.util.Collection: boolean add(java.lang.Object)>(r9);

        goto label7;

     label6:
        interfaceinvoke $r0.<java.util.Collection: boolean add(java.lang.Object)>(r9);

     label7:
        goto label1;

     label8:
        $r6 = r5.<org.apache.http.impl.cookie.PublicSuffixListParser: org.apache.http.impl.cookie.PublicSuffixFilter filter>;

        virtualinvoke $r6.<org.apache.http.impl.cookie.PublicSuffixFilter: void setPublicSuffixes(java.util.Collection)>($r0);

        $r7 = r5.<org.apache.http.impl.cookie.PublicSuffixListParser: org.apache.http.impl.cookie.PublicSuffixFilter filter>;

        virtualinvoke $r7.<org.apache.http.impl.cookie.PublicSuffixFilter: void setExceptions(java.util.Collection)>($r1);

        return;
    }

    private boolean readLine(java.io.Reader, java.lang.StringBuilder) throws java.io.IOException
    {
        char c1;
        java.io.IOException $r4;
        java.io.Reader r1;
        int $i0, $i2, $i4, $i5, $i7;
        java.lang.StringBuilder r0;
        org.apache.http.impl.cookie.PublicSuffixListParser r3;
        boolean $z0, z1, $z2;

        r3 := @this: org.apache.http.impl.cookie.PublicSuffixListParser;

        r1 := @parameter0: java.io.Reader;

        r0 := @parameter1: java.lang.StringBuilder;

        virtualinvoke r0.<java.lang.StringBuilder: void setLength(int)>(0);

        z1 = 0;

     label1:
        $i0 = virtualinvoke r1.<java.io.Reader: int read()>();

        $i4 = (int) -1;

        if $i0 == $i4 goto label6;

        c1 = (char) $i0;

        $i5 = (int) c1;

        if $i5 != 10 goto label2;

        goto label6;

     label2:
        $z0 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(c1);

        if $z0 == 0 goto label3;

        z1 = 1;

     label3:
        if z1 != 0 goto label4;

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1);

     label4:
        $i2 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        if $i2 <= 256 goto label5;

        $r4 = new java.io.IOException;

        specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>("Line too long");

        throw $r4;

     label5:
        goto label1;

     label6:
        $i7 = (int) -1;

        if $i0 == $i7 goto label7;

        $z2 = 1;

        goto label8;

     label7:
        $z2 = 0;

     label8:
        return $z2;
    }

    public static void <clinit>()
    {
        <org.apache.http.impl.cookie.PublicSuffixListParser: int MAX_LINE_LEN> = 256;

        return;
    }
}
