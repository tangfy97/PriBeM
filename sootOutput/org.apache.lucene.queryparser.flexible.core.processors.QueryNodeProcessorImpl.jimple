public abstract class org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl extends java.lang.Object implements org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessor
{
    private java.util.ArrayList childrenListPool;
    private org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler queryConfig;

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl r0;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: java.util.ArrayList childrenListPool> = $r1;

        return;
    }

    public void <init>(org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler)
    {
        org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl r0;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler r2;
        java.util.ArrayList $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl;

        r2 := @parameter0: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: java.util.ArrayList childrenListPool> = $r1;

        r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler queryConfig> = r2;

        return;
    }

    public org.apache.lucene.queryparser.flexible.core.nodes.QueryNode process(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1, $r2;
        org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r2 = specialinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode processIteration(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r1);

        return $r2;
    }

    private org.apache.lucene.queryparser.flexible.core.nodes.QueryNode processIteration(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl r0;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode $r1, $r2, r3;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl;

        r3 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r1 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r3);

        virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: void processChildren(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>($r1);

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>($r1);

        return $r2;
    }

    protected void processChildren(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.lang.Throwable $r9;
        org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl r2;
        java.util.Iterator $r4;
        org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl$ChildrenList $r3;
        java.lang.NullPointerException $r8;
        java.util.List $r1, $r5;
        int $i0;
        java.lang.Object $r6;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0, $r7, r10;
        boolean $z0;

        r2 := @this: org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r1 = interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: java.util.List getChildren()>();

        if $r1 == null goto label8;

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label8;

        $r3 = specialinvoke r2.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl$ChildrenList allocateChildrenList()>();

     label1:
        $r4 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r10 = (org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) $r6;

        $r7 = specialinvoke r2.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode processIteration(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r10);

        if $r7 != null goto label3;

        $r8 = new java.lang.NullPointerException;

        specialinvoke $r8.<java.lang.NullPointerException: void <init>()>();

        throw $r8;

     label3:
        virtualinvoke $r3.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl$ChildrenList: boolean add(java.lang.Object)>($r7);

        goto label2;

     label4:
        $r5 = virtualinvoke r2.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: java.util.List setChildrenOrder(java.util.List)>($r3);

        interfaceinvoke r0.<org.apache.lucene.queryparser.flexible.core.nodes.QueryNode: void set(java.util.List)>($r5);

     label5:
        $r3.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl$ChildrenList: boolean beingUsed> = 0;

        goto label8;

     label6:
        $r9 := @caughtexception;

     label7:
        $r3.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl$ChildrenList: boolean beingUsed> = 0;

        throw $r9;

     label8:
        return;

        catch java.lang.Throwable from label1 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    private org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl$ChildrenList allocateChildrenList()
    {
        org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl r0;
        java.util.Iterator $r2;
        org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl$ChildrenList $r3, r6, r7;
        java.util.ArrayList $r1, $r4;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl;

        r7 = null;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: java.util.ArrayList childrenListPool>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl$ChildrenList) $r5;

        $z1 = r6.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl$ChildrenList: boolean beingUsed>;

        if $z1 != 0 goto label2;

        r7 = r6;

        virtualinvoke r6.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl$ChildrenList: void clear()>();

        goto label3;

     label2:
        goto label1;

     label3:
        if r7 != null goto label4;

        $r3 = new org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl$ChildrenList;

        specialinvoke $r3.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl$ChildrenList: void <init>(org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl$1)>(null);

        r7 = $r3;

        $r4 = r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: java.util.ArrayList childrenListPool>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

     label4:
        r7.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl$ChildrenList: boolean beingUsed> = 1;

        return r7;
    }

    public void setQueryConfigHandler(org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler)
    {
        org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl r0;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler;

        r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler queryConfig> = r1;

        return;
    }

    public org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler getQueryConfigHandler()
    {
        org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl r0;
        org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler $r1;

        r0 := @this: org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl;

        $r1 = r0.<org.apache.lucene.queryparser.flexible.core.processors.QueryNodeProcessorImpl: org.apache.lucene.queryparser.flexible.core.config.QueryConfigHandler queryConfig>;

        return $r1;
    }

    protected abstract org.apache.lucene.queryparser.flexible.core.nodes.QueryNode preProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException;

    protected abstract org.apache.lucene.queryparser.flexible.core.nodes.QueryNode postProcessNode(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException;

    protected abstract java.util.List setChildrenOrder(java.util.List) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException;
}
