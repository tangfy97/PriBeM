public final class org.apache.cxf.jaxrs.utils.HttpUtils extends java.lang.Object
{
    private static final java.util.ResourceBundle BUNDLE;
    private static final java.util.logging.Logger LOG;
    private static final java.lang.String REQUEST_PATH_TO_MATCH;
    private static final java.lang.String REQUEST_PATH_TO_MATCH_SLASH;
    private static final java.lang.String HTTP_SCHEME;
    private static final java.lang.String ANY_IP_ADDRESS;
    private static final java.lang.String ANY_IP_ADDRESS_START;
    private static final int DEFAULT_HTTP_PORT;
    private static final java.util.regex.Pattern ENCODE_PATTERN;
    private static final java.lang.String CHARSET_PARAMETER;
    private static final java.lang.String PATH_RESERVED_CHARACTERS;
    private static final java.lang.String QUERY_RESERVED_CHARACTERS;

    private void <init>()
    {
        org.apache.cxf.jaxrs.utils.HttpUtils r0;

        r0 := @this: org.apache.cxf.jaxrs.utils.HttpUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String urlDecode(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.apache.cxf.common.util.UrlUtils: java.lang.String urlDecode(java.lang.String,java.lang.String)>(r0, r1);

        return $r2;
    }

    public static java.lang.String urlDecode(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.cxf.common.util.UrlUtils: java.lang.String urlDecode(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.String pathDecode(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.cxf.common.util.UrlUtils: java.lang.String pathDecode(java.lang.String)>(r0);

        return $r1;
    }

    private static java.lang.String componentEncode(java.lang.String, java.lang.String)
    {
        int $i0, $i1, $i3, $i4, i5, $i6, $i8;
        java.lang.String r2, $r3, $r4, $r5, r6, $r7, $r8;
        char $c2;
        java.lang.StringBuilder $r9, $r10;

        r6 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        i5 = 0;

     label1:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if i5 >= $i0 goto label5;

        $c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5);

        $i6 = (int) $c2;

        $i3 = virtualinvoke r6.<java.lang.String: int indexOf(int)>($i6);

        $i8 = (int) -1;

        if $i3 == $i8 goto label3;

        $i4 = virtualinvoke $r10.<java.lang.StringBuilder: int length()>();

        if $i4 <= 0 goto label2;

        $r7 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String urlEncode(java.lang.String)>($r7);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r10.<java.lang.StringBuilder: void setLength(int)>(0);

     label2:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label4;

     label3:
        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        $i1 = virtualinvoke $r10.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label6;

        $r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String urlEncode(java.lang.String)>($r4);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

     label6:
        $r3 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String queryEncode(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String componentEncode(java.lang.String,java.lang.String)>("?/,", r0);

        return $r1;
    }

    public static java.lang.String urlEncode(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String urlEncode(java.lang.String,java.lang.String)>(r0, "UTF-8");

        return $r1;
    }

    public static java.lang.String urlEncode(java.lang.String, java.lang.String)
    {
        java.lang.String r0, $r1, r4;
        java.lang.RuntimeException $r3;
        java.io.UnsupportedEncodingException $r2;

        r4 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

     label1:
        $r1 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>(r4, r0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

     label4:
        return $r1;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String pathEncode(java.lang.String)
    {
        int $i0, $i1, $i3, $i5;
        java.lang.String r0, $r1, r2;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String componentEncode(java.lang.String,java.lang.String)>("=@/:!$&\'(),;~", r0);

        r2 = $r1;

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(43);

        $i3 = (int) -1;

        if $i0 == $i3 goto label1;

        r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("+", "%20");

     label1:
        $i1 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String)>("%2B");

        $i5 = (int) -1;

        if $i1 == $i5 goto label2;

        r2 = virtualinvoke r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("%2B", "+");

     label2:
        return r2;
    }

    public static boolean isPartiallyEncoded(java.lang.String)
    {
        java.util.regex.Matcher $r2;
        java.lang.String r0;
        java.util.regex.Pattern $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <org.apache.cxf.jaxrs.utils.HttpUtils: java.util.regex.Pattern ENCODE_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        return $z0;
    }

    public static java.lang.String encodePartiallyEncoded(java.lang.String, boolean)
    {
        java.util.regex.Matcher $r2;
        int $i0, $i1, $i2, i3;
        java.lang.String r0, $r4, $r5, $r6, $r7, $r8, $r9;
        boolean $z0, z1;
        java.lang.StringBuilder $r3;
        java.util.regex.Pattern $r1;

        r0 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = <org.apache.cxf.jaxrs.utils.HttpUtils: java.util.regex.Pattern ENCODE_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i3 = 0;

     label2:
        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label5;

        $i2 = virtualinvoke $r2.<java.util.regex.Matcher: int start()>();

        $r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, $i2);

        if z1 == 0 goto label3;

        $r8 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String queryEncode(java.lang.String)>($r6);

        goto label4;

     label3:
        $r8 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String pathEncode(java.lang.String)>($r6);

     label4:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r7 = virtualinvoke $r2.<java.util.regex.Matcher: java.lang.String group()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        i3 = virtualinvoke $r2.<java.util.regex.Matcher: int end()>();

        goto label2;

     label5:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, $i1);

        if z1 == 0 goto label6;

        $r9 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String queryEncode(java.lang.String)>($r4);

        goto label7;

     label6:
        $r9 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String pathEncode(java.lang.String)>($r4);

     label7:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public static java.text.SimpleDateFormat getHttpDateFormat()
    {
        java.text.SimpleDateFormat $r0;
        java.util.Locale $r1;
        java.util.TimeZone $r2;

        $r0 = new java.text.SimpleDateFormat;

        $r1 = <java.util.Locale: java.util.Locale US>;

        specialinvoke $r0.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>("EEE, dd MMM yyyy HH:mm:ss zzz", $r1);

        $r2 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke $r0.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r2);

        return $r0;
    }

    public static java.util.Date getHttpDate(java.lang.String)
    {
        java.util.Date $r2;
        java.text.SimpleDateFormat $r1;
        java.lang.String r0;
        java.text.ParseException $r3;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.text.SimpleDateFormat getHttpDateFormat()>();

        $r2 = virtualinvoke $r1.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.text.ParseException from label1 to label2 with label3;
    }

    public static java.util.Locale getLocale(java.lang.String)
    {
        java.lang.String[] $r1;
        java.lang.IllegalArgumentException $r2;
        java.util.Locale $r7, $r10;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String r0, $r6, $r8, $r9, $r11;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = staticinvoke <org.apache.cxf.common.util.StringUtils: java.lang.String[] split(java.lang.String,java.lang.String)>(r0, "-");

        $i0 = lengthof $r1;

        if $i0 == 0 goto label2;

        $i1 = lengthof $r1;

        if $i1 <= 2 goto label3;

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal locale value : ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;

     label3:
        $i2 = lengthof $r1;

        if $i2 != 1 goto label4;

        $r10 = new java.util.Locale;

        $r11 = $r1[0];

        specialinvoke $r10.<java.util.Locale: void <init>(java.lang.String)>($r11);

        return $r10;

     label4:
        $r7 = new java.util.Locale;

        $r9 = $r1[0];

        $r8 = $r1[1];

        specialinvoke $r7.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>($r9, $r8);

        return $r7;
    }

    public static int getContentLength(java.lang.String)
    {
        java.lang.Integer $r1;
        java.lang.Exception $r2;
        int $i0, $i1, $i3, $i5, $i7;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $i3 = (int) -1;

        return $i3;

     label1:
        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>(r0);

        $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        if $i0 < 0 goto label2;

        $i1 = $i0;

        goto label3;

     label2:
        $i5 = (int) -1;

        $i1 = $i5;

     label3:
        return $i1;

     label4:
        $r2 := @caughtexception;

        $i7 = (int) -1;

        return $i7;

        catch java.lang.Exception from label1 to label3 with label4;
    }

    public static java.lang.String getHeaderString(java.util.List)
    {
        java.util.List r0;
        int $i0, $i1, $i2, i3;
        java.lang.StringBuilder $r1;
        java.lang.Object $r3;
        java.lang.String $r2, r4;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return null;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        i3 = 0;

     label2:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i3 >= $i0 goto label5;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i3);

        r4 = (java.lang.String) $r3;

        $z0 = staticinvoke <org.apache.cxf.common.util.StringUtils: boolean isEmpty(java.lang.String)>(r4);

        if $z0 == 0 goto label3;

        goto label4;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $i1 = i3 + 1;

        $i2 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i1 >= $i2 goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public static boolean isDateRelatedHeader(java.lang.String)
    {
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: java.lang.String;

        $r1 = "Date";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 != 0 goto label1;

        $r2 = "If-Modified-Since";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 != 0 goto label1;

        $r3 = "If-Unmodified-Since";

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 != 0 goto label1;

        $r4 = "Expires";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 != 0 goto label1;

        $r5 = "Last-Modified";

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z4 == 0 goto label2;

     label1:
        $z5 = 1;

        goto label3;

     label2:
        $z5 = 0;

     label3:
        return $z5;
    }

    public static boolean isHttpRequest(org.apache.cxf.message.Message)
    {
        java.lang.Object $r1;
        org.apache.cxf.message.Message r0;
        boolean $z0;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("HTTP.REQUEST");

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.net.URI toAbsoluteUri(java.lang.String, org.apache.cxf.message.Message)
    {
        org.apache.cxf.message.Message r0;
        javax.servlet.http.HttpServletRequest $r2;
        java.lang.Object $r1;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r3, r6, $r8;
        java.net.URI $r9;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("HTTP.REQUEST");

        $r2 = (javax.servlet.http.HttpServletRequest) $r1;

        $r3 = staticinvoke <org.apache.cxf.transport.servlet.BaseUrlHelper: java.lang.String getBaseURL(javax.servlet.http.HttpServletRequest)>($r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r8);

        return $r9;
    }

    public static java.net.URI toAbsoluteUri(java.net.URI, org.apache.cxf.message.Message)
    {
        java.net.URI r26;
        boolean $z0, $z1, $z2, z3;
        java.lang.StringBuilder $r6, $r7, $r8, $r11, $r12, $r16, $r18, $r21, $r22, $r23, $r29, $r30, $r31, $r32;
        javax.servlet.http.HttpServletRequest r2;
        int $i0, $i1, $i3;
        java.lang.String $r3, $r5, $r9, $r13, $r14, $r17, $r19, $r24, $r25, r27, $r28;
        org.apache.cxf.message.Message r0;
        java.lang.Object $r1;

        r26 := @parameter0: java.net.URI;

        r0 := @parameter1: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("HTTP.REQUEST");

        r2 = (javax.servlet.http.HttpServletRequest) $r1;

        $z0 = virtualinvoke r26.<java.net.URI: boolean isAbsolute()>();

        if r2 == null goto label9;

        if $z0 == 0 goto label1;

        $r25 = virtualinvoke r26.<java.net.URI: java.lang.String toString()>();

        $z2 = virtualinvoke $r25.<java.lang.String: boolean contains(java.lang.CharSequence)>("://0.0.0.0");

        if $z2 == 0 goto label9;

     label1:
        $r3 = interfaceinvoke r2.<javax.servlet.http.HttpServletRequest: java.lang.String getServerName()>();

        r27 = $r3;

        z3 = 0;

        if $z0 == 0 goto label2;

        $r24 = "0.0.0.0";

        $z1 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label2;

        r27 = interfaceinvoke r2.<javax.servlet.http.HttpServletRequest: java.lang.String getLocalAddr()>();

        z3 = 1;

     label2:
        if z3 == 0 goto label3;

        $i1 = interfaceinvoke r2.<javax.servlet.http.HttpServletRequest: int getLocalPort()>();

        goto label4;

     label3:
        $i1 = interfaceinvoke r2.<javax.servlet.http.HttpServletRequest: int getServerPort()>();

     label4:
        if $i1 == 80 goto label5;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r21 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r5 = interfaceinvoke r2.<javax.servlet.http.HttpServletRequest: java.lang.String getScheme()>();

        $r6 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("://");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        if $z0 != 0 goto label6;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r17 = virtualinvoke r26.<java.net.URI: java.lang.String toString()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        r26 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r19);

        goto label9;

     label6:
        $i0 = virtualinvoke r26.<java.net.URI: int getPort()>();

        $i3 = (int) -1;

        if $i0 != $i3 goto label7;

        $r28 = "0.0.0.0";

        goto label8;

     label7:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0.0.0.0:");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r28 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label8:
        $r13 = virtualinvoke r26.<java.net.URI: java.lang.String toString()>();

        $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>($r28, r27);

        r26 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r14);

     label9:
        return r26;
    }

    public static void resetRequestURI(org.apache.cxf.message.Message, java.lang.String)
    {
        java.lang.String r1;
        org.apache.cxf.message.Message r0;

        r0 := @parameter0: org.apache.cxf.message.Message;

        r1 := @parameter1: java.lang.String;

        interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object remove(java.lang.Object)>("path_to_match_slash");

        interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object remove(java.lang.Object)>("path_to_match");

        interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.apache.cxf.request.uri", r1);

        return;
    }

    public static java.lang.String getPathToMatch(org.apache.cxf.message.Message, boolean)
    {
        int $i0, $i1, $i2;
        java.lang.String r0, $r3, $r4, $r6, $r7, $r8, r10, $r11, $r12, $r13, $r14;
        boolean z0;
        org.apache.cxf.message.Message r1;
        java.lang.Object $r2, $r5;

        r1 := @parameter0: org.apache.cxf.message.Message;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $r14 = "path_to_match_slash";

        $r13 = "path_to_match_slash";

        goto label2;

     label1:
        $r14 = "path_to_match";

        $r13 = "path_to_match";

     label2:
        r0 = $r13;

        $r2 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r14);

        $r8 = (java.lang.String) $r2;

        if $r8 == null goto label3;

        return $r8;

     label3:
        $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String getProtocolHeader(org.apache.cxf.message.Message,java.lang.String,java.lang.String)>(r1, "org.apache.cxf.request.uri", "/");

        r10 = $r3;

        $r4 = <org.apache.cxf.message.Message: java.lang.String QUERY_STRING>;

        $r5 = interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r4);

        if $r5 != null goto label4;

        $i0 = virtualinvoke $r3.<java.lang.String: int lastIndexOf(int)>(63);

        if $i0 <= 0 goto label4;

        $i1 = virtualinvoke $r3.<java.lang.String: int length()>();

        if $i0 >= $i1 goto label4;

        $r6 = <org.apache.cxf.message.Message: java.lang.String QUERY_STRING>;

        $i2 = $i0 + 1;

        $r7 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i2);

        interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        r10 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label4:
        $r11 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String getBaseAddress(org.apache.cxf.message.Message)>(r1);

        $r12 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String getPathToMatch(java.lang.String,java.lang.String,boolean)>(r10, $r11, z0);

        interfaceinvoke r1.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r12);

        return $r12;
    }

    public static java.lang.String getProtocolHeader(org.apache.cxf.message.Message, java.lang.String, java.lang.String)
    {
        org.apache.cxf.message.Message r0;
        java.lang.String r1, r2, $r3;

        r0 := @parameter0: org.apache.cxf.message.Message;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String getProtocolHeader(org.apache.cxf.message.Message,java.lang.String,java.lang.String,boolean)>(r0, r1, r2, 0);

        return $r3;
    }

    public static java.lang.String getProtocolHeader(org.apache.cxf.message.Message, java.lang.String, java.lang.String, boolean)
    {
        org.apache.cxf.message.Message r0;
        javax.ws.rs.core.MultivaluedMap $r5;
        org.apache.cxf.jaxrs.impl.HttpHeadersImpl $r4;
        java.lang.Object $r2, $r6;
        java.lang.String r1, r3, r7, $r8;
        boolean z0;

        r0 := @parameter0: org.apache.cxf.message.Message;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        $r2 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (java.lang.String) $r2;

        if r7 != null goto label1;

        $r4 = new org.apache.cxf.jaxrs.impl.HttpHeadersImpl;

        specialinvoke $r4.<org.apache.cxf.jaxrs.impl.HttpHeadersImpl: void <init>(org.apache.cxf.message.Message)>(r0);

        $r5 = virtualinvoke $r4.<org.apache.cxf.jaxrs.impl.HttpHeadersImpl: javax.ws.rs.core.MultivaluedMap getRequestHeaders()>();

        $r6 = interfaceinvoke $r5.<javax.ws.rs.core.MultivaluedMap: java.lang.Object getFirst(java.lang.Object)>(r1);

        r7 = (java.lang.String) $r6;

        if r7 == null goto label1;

        if z0 == 0 goto label1;

        interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r7);

     label1:
        if r7 != null goto label2;

        $r8 = r3;

        goto label3;

     label2:
        $r8 = r7;

     label3:
        return $r8;
    }

    public static java.lang.String getBaseAddress(org.apache.cxf.message.Message)
    {
        org.apache.cxf.message.Message r0;
        java.net.URISyntaxException $r6;
        int $i0;
        java.lang.String $r1, $r3, $r4, r7, $r8, $r9;
        java.net.URI $r2, $r5;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String getEndpointAddress(org.apache.cxf.message.Message)>(r0);

     label1:
        $r2 = new java.net.URI;

        specialinvoke $r2.<java.net.URI: void <init>(java.lang.String)>($r1);

        $r3 = virtualinvoke $r2.<java.net.URI: java.lang.String getRawPath()>();

        r7 = $r3;

        $r4 = virtualinvoke $r2.<java.net.URI: java.lang.String getScheme()>();

        if $r4 == null goto label2;

        $z0 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("http");

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: boolean isHttpRequest(org.apache.cxf.message.Message)>(r0);

        if $z1 == 0 goto label2;

        $r5 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.net.URI toAbsoluteUri(java.lang.String,org.apache.cxf.message.Message)>($r3, r0);

        r7 = virtualinvoke $r5.<java.net.URI: java.lang.String getRawPath()>();

     label2:
        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

        $r8 = "/";

        goto label4;

     label3:
        $r8 = r7;

     label4:
        return $r8;

     label5:
        $r6 := @caughtexception;

        if $r1 != null goto label6;

        $r9 = "/";

        goto label7;

     label6:
        $r9 = $r1;

     label7:
        return $r9;

        catch java.net.URISyntaxException from label1 to label4 with label5;
    }

    public static java.lang.String getEndpointAddress(org.apache.cxf.message.Message)
    {
        org.apache.cxf.ws.addressing.EndpointReferenceType $r6;
        org.apache.cxf.transport.Destination $r2;
        org.apache.cxf.transport.http.AbstractHTTPDestination $r10;
        javax.servlet.http.HttpServletRequest r13;
        org.apache.cxf.ws.addressing.AttributedURIType $r7;
        int $i0, $i1;
        java.lang.String $r3, $r5, $r8, $r15, r16, $r17;
        boolean $z0, $z1, $z2, $z3;
        org.apache.cxf.service.model.EndpointInfo $r11;
        org.apache.cxf.message.Message r0;
        org.apache.cxf.message.Exchange $r1;
        java.lang.Object $r4, $r9, $r12, $r14;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.message.Exchange getExchange()>();

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Exchange: org.apache.cxf.transport.Destination getDestination()>();

        if $r2 == null goto label08;

        $z1 = $r2 instanceof org.apache.cxf.transport.http.AbstractHTTPDestination;

        if $z1 == 0 goto label05;

        $r10 = (org.apache.cxf.transport.http.AbstractHTTPDestination) $r2;

        $r11 = virtualinvoke $r10.<org.apache.cxf.transport.http.AbstractHTTPDestination: org.apache.cxf.service.model.EndpointInfo getEndpointInfo()>();

        $r12 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("HTTP.REQUEST");

        r13 = (javax.servlet.http.HttpServletRequest) $r12;

        if r13 == null goto label01;

        $r14 = interfaceinvoke r13.<javax.servlet.http.HttpServletRequest: java.lang.Object getAttribute(java.lang.String)>("org.apache.cxf.transport.endpoint.address");

        goto label02;

     label01:
        $r14 = null;

     label02:
        if $r14 == null goto label03;

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.String toString()>();

        goto label04;

     label03:
        $r15 = virtualinvoke $r11.<org.apache.cxf.service.model.EndpointInfo: java.lang.String getAddress()>();

     label04:
        r16 = $r15;

        goto label09;

     label05:
        $r5 = <org.apache.cxf.message.Message: java.lang.String BASE_PATH>;

        $z2 = interfaceinvoke r0.<org.apache.cxf.message.Message: boolean containsKey(java.lang.Object)>($r5);

        if $z2 == 0 goto label06;

        $r8 = <org.apache.cxf.message.Message: java.lang.String BASE_PATH>;

        $r9 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r8);

        $r17 = (java.lang.String) $r9;

        goto label07;

     label06:
        $r6 = interfaceinvoke $r2.<org.apache.cxf.transport.Destination: org.apache.cxf.ws.addressing.EndpointReferenceType getAddress()>();

        $r7 = virtualinvoke $r6.<org.apache.cxf.ws.addressing.EndpointReferenceType: org.apache.cxf.ws.addressing.AttributedURIType getAddress()>();

        $r17 = virtualinvoke $r7.<org.apache.cxf.ws.addressing.AttributedURIType: java.lang.String getValue()>();

     label07:
        r16 = $r17;

        goto label09;

     label08:
        $r3 = <org.apache.cxf.message.Message: java.lang.String ENDPOINT_ADDRESS>;

        $r4 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r3);

        r16 = (java.lang.String) $r4;

     label09:
        $z3 = virtualinvoke r16.<java.lang.String: boolean startsWith(java.lang.String)>("http");

        if $z3 == 0 goto label10;

        $z0 = virtualinvoke r16.<java.lang.String: boolean endsWith(java.lang.String)>("//");

        if $z0 == 0 goto label10;

        $i0 = virtualinvoke r16.<java.lang.String: int length()>();

        $i1 = $i0 - 1;

        r16 = virtualinvoke r16.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label10:
        return r16;
    }

    public static void updatePath(org.apache.cxf.message.Message, java.lang.String)
    {
        org.apache.cxf.message.Message r0;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7, $r8;
        java.lang.String $r1, r5, $r9;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.cxf.message.Message;

        r5 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String getBaseAddress(org.apache.cxf.message.Message)>(r0);

        $z0 = virtualinvoke r5.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        $z1 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z0 == 0 goto label1;

        if $z1 == 0 goto label1;

        r5 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(1);

        goto label2;

     label1:
        if $z0 != 0 goto label2;

        if $z1 != 0 goto label2;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>("org.apache.cxf.request.uri", $r9);

        interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object remove(java.lang.Object)>("path_to_match");

        interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object remove(java.lang.Object)>("path_to_match_slash");

        return;
    }

    public static java.lang.String getPathToMatch(java.lang.String, java.lang.String, boolean)
    {
        int $i0, $i1, $i2, i3, $i5;
        java.lang.String r0, $r7, r11;
        boolean z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r9, $r10, $r12, $r13, $r14;

        r11 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $i0 = virtualinvoke r11.<java.lang.String: int indexOf(java.lang.String)>(r0);

        i3 = $i0;

        $i5 = (int) -1;

        if $i0 != $i5 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z2 == 0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        i3 = 0;

     label1:
        if i3 != 0 goto label2;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = i3 + $i1;

        r11 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int)>($i2);

     label2:
        if z0 == 0 goto label3;

        $z1 = virtualinvoke r11.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z1 != 0 goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        return r11;
    }

    public static java.lang.String getOriginalAddress(org.apache.cxf.message.Message)
    {
        org.apache.cxf.ws.addressing.EndpointReferenceType $r2;
        org.apache.cxf.ws.addressing.AttributedURIType $r3;
        org.apache.cxf.transport.Destination $r1;
        org.apache.cxf.message.Message r0;
        java.lang.String $r4;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = interfaceinvoke r0.<org.apache.cxf.message.Message: org.apache.cxf.transport.Destination getDestination()>();

        if $r1 != null goto label1;

        $r4 = "/";

        goto label2;

     label1:
        $r2 = interfaceinvoke $r1.<org.apache.cxf.transport.Destination: org.apache.cxf.ws.addressing.EndpointReferenceType getAddress()>();

        $r3 = virtualinvoke $r2.<org.apache.cxf.ws.addressing.EndpointReferenceType: org.apache.cxf.ws.addressing.AttributedURIType getAddress()>();

        $r4 = virtualinvoke $r3.<org.apache.cxf.ws.addressing.AttributedURIType: java.lang.String getValue()>();

     label2:
        return $r4;
    }

    public static java.lang.String fromPathSegment(javax.ws.rs.core.PathSegment)
    {
        java.lang.String $r4, $r8, r15, $r18, $r21;
        boolean $z0, $z1, $z2;
        java.util.Map$Entry r10;
        java.util.Iterator $r7, $r13;
        javax.ws.rs.core.PathSegment r0;
        java.util.Set $r6;
        javax.ws.rs.core.MultivaluedMap $r5;
        java.util.List $r12;
        org.apache.cxf.jaxrs.impl.PathSegmentImpl $r20;
        java.lang.Class $r1, $r2;
        java.lang.StringBuilder $r3, $r16, $r19;
        java.lang.Object $r9, $r11, $r14, $r17;

        r0 := @parameter0: javax.ws.rs.core.PathSegment;

        $r1 = class "Lorg/apache/cxf/jaxrs/impl/PathSegmentImpl;";

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z0 == 0 goto label1;

        $r20 = (org.apache.cxf.jaxrs.impl.PathSegmentImpl) r0;

        $r21 = virtualinvoke $r20.<org.apache.cxf.jaxrs.impl.PathSegmentImpl: java.lang.String getOriginalPath()>();

        return $r21;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = interfaceinvoke r0.<javax.ws.rs.core.PathSegment: java.lang.String getPath()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r5 = interfaceinvoke r0.<javax.ws.rs.core.PathSegment: javax.ws.rs.core.MultivaluedMap getMatrixParameters()>();

        $r6 = interfaceinvoke $r5.<javax.ws.rs.core.MultivaluedMap: java.util.Set entrySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r9 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.util.Map$Entry) $r9;

        $r11 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r12 = (java.util.List) $r11;

        $r13 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        r15 = (java.lang.String) $r14;

        $r16 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        $r17 = interfaceinvoke r10.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r18 = (java.lang.String) $r17;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        if r15 == null goto label4;

        $r19 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

     label4:
        goto label3;

     label5:
        goto label2;

     label6:
        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public static javax.ws.rs.core.Response$Status getParameterFailureStatus(org.apache.cxf.jaxrs.model.ParameterType)
    {
        org.apache.cxf.jaxrs.model.ParameterType r0, $r1, $r2, $r3;
        javax.ws.rs.core.Response$Status $r4, $r5;

        r0 := @parameter0: org.apache.cxf.jaxrs.model.ParameterType;

        $r1 = <org.apache.cxf.jaxrs.model.ParameterType: org.apache.cxf.jaxrs.model.ParameterType MATRIX>;

        if r0 == $r1 goto label1;

        $r2 = <org.apache.cxf.jaxrs.model.ParameterType: org.apache.cxf.jaxrs.model.ParameterType PATH>;

        if r0 == $r2 goto label1;

        $r3 = <org.apache.cxf.jaxrs.model.ParameterType: org.apache.cxf.jaxrs.model.ParameterType QUERY>;

        if r0 != $r3 goto label2;

     label1:
        $r5 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status NOT_FOUND>;

        return $r5;

     label2:
        $r4 = <javax.ws.rs.core.Response$Status: javax.ws.rs.core.Response$Status BAD_REQUEST>;

        return $r4;
    }

    public static java.lang.String getSetEncoding(javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap, java.lang.String)
    {
        java.lang.Object[] $r8;
        java.lang.String[] $r14;
        org.apache.cxf.common.i18n.Message $r7;
        javax.ws.rs.core.MediaType r0;
        java.util.ResourceBundle $r9;
        java.util.Map $r1;
        java.lang.String r3, $r4, r5, $r10, $r15, $r21, $r22;
        java.util.logging.Logger $r11;
        javax.ws.rs.core.MultivaluedMap r12;
        java.lang.Object $r2;
        java.lang.StringBuilder $r13, $r16, $r17, $r18, $r19, $r20;
        java.io.UnsupportedEncodingException $r6;

        r0 := @parameter0: javax.ws.rs.core.MediaType;

        r12 := @parameter1: javax.ws.rs.core.MultivaluedMap;

        r5 := @parameter2: java.lang.String;

        $r1 = virtualinvoke r0.<javax.ws.rs.core.MediaType: java.util.Map getParameters()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("charset");

        r3 = (java.lang.String) $r2;

        if r3 != null goto label1;

        return r5;

     label1:
        $r4 = "0";

        virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>(r3);

     label2:
        return r3;

     label3:
        $r6 := @caughtexception;

        $r7 = new org.apache.cxf.common.i18n.Message;

        $r9 = <org.apache.cxf.jaxrs.utils.HttpUtils: java.util.ResourceBundle BUNDLE>;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = r3;

        $r8[1] = r5;

        specialinvoke $r7.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.ResourceBundle,java.lang.Object[])>("UNSUPPORTED_ENCODING", $r9, $r8);

        $r10 = virtualinvoke $r7.<org.apache.cxf.common.i18n.Message: java.lang.String toString()>();

        $r11 = <org.apache.cxf.jaxrs.utils.HttpUtils: java.util.logging.Logger LOG>;

        virtualinvoke $r11.<java.util.logging.Logger: void warning(java.lang.String)>($r10);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = newarray (java.lang.String)[1];

        $r14[0] = "charset";

        $r15 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXRSUtils: java.lang.String mediaTypeToString(javax.ws.rs.core.MediaType,java.lang.String[])>(r0, $r14);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("charset");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        if r5 != null goto label4;

        $r22 = "UTF-8";

        goto label5;

     label4:
        $r22 = r5;

     label5:
        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r12.<javax.ws.rs.core.MultivaluedMap: void putSingle(java.lang.Object,java.lang.Object)>("Content-Type", $r21);

        return r5;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public static java.lang.String getEncoding(javax.ws.rs.core.MediaType, java.lang.String)
    {
        javax.ws.rs.core.MediaType r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        java.lang.String r3, $r4, $r5;

        r0 := @parameter0: javax.ws.rs.core.MediaType;

        r3 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r4 = "UTF-8";

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<javax.ws.rs.core.MediaType: java.util.Map getParameters()>();

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("charset");

        $r4 = (java.lang.String) $r2;

     label2:
        if $r4 != null goto label3;

        $r5 = "UTF-8";

        goto label4;

     label3:
        $r5 = $r4;

     label4:
        return $r5;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r2;
        java.util.ResourceBundle $r0;
        java.util.logging.Logger $r1;

        <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String QUERY_RESERVED_CHARACTERS> = "?/,";

        <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String PATH_RESERVED_CHARACTERS> = "=@/:!$&\'(),;~";

        <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String CHARSET_PARAMETER> = "charset";

        <org.apache.cxf.jaxrs.utils.HttpUtils: int DEFAULT_HTTP_PORT> = 80;

        <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String ANY_IP_ADDRESS_START> = "://0.0.0.0";

        <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String ANY_IP_ADDRESS> = "0.0.0.0";

        <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String HTTP_SCHEME> = "http";

        <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String REQUEST_PATH_TO_MATCH_SLASH> = "path_to_match_slash";

        <org.apache.cxf.jaxrs.utils.HttpUtils: java.lang.String REQUEST_PATH_TO_MATCH> = "path_to_match";

        $r0 = staticinvoke <org.apache.cxf.common.i18n.BundleUtils: java.util.ResourceBundle getBundle(java.lang.Class)>(class "Lorg/apache/cxf/jaxrs/utils/HttpUtils;");

        <org.apache.cxf.jaxrs.utils.HttpUtils: java.util.ResourceBundle BUNDLE> = $r0;

        $r1 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/jaxrs/utils/HttpUtils;");

        <org.apache.cxf.jaxrs.utils.HttpUtils: java.util.logging.Logger LOG> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("%[0-9a-fA-F][0-9a-fA-F]");

        <org.apache.cxf.jaxrs.utils.HttpUtils: java.util.regex.Pattern ENCODE_PATTERN> = $r2;

        return;
    }
}
