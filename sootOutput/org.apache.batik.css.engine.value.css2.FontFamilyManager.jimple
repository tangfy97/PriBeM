public class org.apache.batik.css.engine.value.css2.FontFamilyManager extends org.apache.batik.css.engine.value.AbstractValueManager
{
    protected static final org.apache.batik.css.engine.value.ListValue DEFAULT_VALUE;
    protected static final org.apache.batik.css.engine.value.StringMap values;

    public void <init>()
    {
        org.apache.batik.css.engine.value.css2.FontFamilyManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.FontFamilyManager;

        specialinvoke r0.<org.apache.batik.css.engine.value.AbstractValueManager: void <init>()>();

        return;
    }

    public boolean isInheritedProperty()
    {
        org.apache.batik.css.engine.value.css2.FontFamilyManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.FontFamilyManager;

        return 1;
    }

    public boolean isAnimatableProperty()
    {
        org.apache.batik.css.engine.value.css2.FontFamilyManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.FontFamilyManager;

        return 1;
    }

    public boolean isAdditiveProperty()
    {
        org.apache.batik.css.engine.value.css2.FontFamilyManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.FontFamilyManager;

        return 0;
    }

    public int getPropertyType()
    {
        org.apache.batik.css.engine.value.css2.FontFamilyManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.FontFamilyManager;

        return 26;
    }

    public java.lang.String getPropertyName()
    {
        org.apache.batik.css.engine.value.css2.FontFamilyManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.FontFamilyManager;

        return "font-family";
    }

    public org.apache.batik.css.engine.value.Value getDefaultValue()
    {
        org.apache.batik.css.engine.value.css2.FontFamilyManager r1;
        org.apache.batik.css.engine.value.ListValue $r0;

        r1 := @this: org.apache.batik.css.engine.value.css2.FontFamilyManager;

        $r0 = <org.apache.batik.css.engine.value.css2.FontFamilyManager: org.apache.batik.css.engine.value.ListValue DEFAULT_VALUE>;

        return $r0;
    }

    public org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        org.w3c.css.sac.LexicalUnit $r3, $r9, $r17, r23;
        org.apache.batik.css.engine.value.StringValue $r26, $r28, $r29;
        org.apache.batik.css.engine.value.ListValue $r25;
        org.apache.batik.css.engine.CSSEngine r22;
        short $s0, $s1, $s2, $s3, $s4, $s5, $s6;
        java.lang.StringBuffer $r27;
        org.w3c.dom.DOMException $r5, $r6, $r21;
        int $i7, $i8, $i9, $i10;
        java.lang.String $r2, $r8, $r10, $r11, $r12, $r16, $r19;
        org.apache.batik.css.engine.value.Value $r15, $r20, $r24;
        org.apache.batik.css.engine.value.css2.FontFamilyManager r4;
        java.lang.Object $r14;
        org.apache.batik.css.engine.value.StringMap $r13;

        r4 := @this: org.apache.batik.css.engine.value.css2.FontFamilyManager;

        r23 := @parameter0: org.w3c.css.sac.LexicalUnit;

        r22 := @parameter1: org.apache.batik.css.engine.CSSEngine;

        $s0 = interfaceinvoke r23.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i7 = (int) $s0;

        lookupswitch($i7)
        {
            case 12: goto label01;
            case 35: goto label03;
            case 36: goto label03;
            default: goto label02;
        };

     label01:
        $r20 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value INHERIT_VALUE>;

        return $r20;

     label02:
        $s6 = interfaceinvoke r23.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $r21 = virtualinvoke r4.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidLexicalUnitDOMException(short)>($s6);

        throw $r21;

     label03:
        $r25 = new org.apache.batik.css.engine.value.ListValue;

        specialinvoke $r25.<org.apache.batik.css.engine.value.ListValue: void <init>()>();

        goto label04;

     label04:
        $s1 = interfaceinvoke r23.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i8 = (int) $s1;

        lookupswitch($i8)
        {
            case 35: goto label06;
            case 36: goto label05;
            default: goto label12;
        };

     label05:
        $r26 = new org.apache.batik.css.engine.value.StringValue;

        $r2 = interfaceinvoke r23.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        specialinvoke $r26.<org.apache.batik.css.engine.value.StringValue: void <init>(short,java.lang.String)>(19, $r2);

        virtualinvoke $r25.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r26);

        r23 = interfaceinvoke r23.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        goto label12;

     label06:
        $r27 = new java.lang.StringBuffer;

        $r8 = interfaceinvoke r23.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        specialinvoke $r27.<java.lang.StringBuffer: void <init>(java.lang.String)>($r8);

        $r9 = interfaceinvoke r23.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        r23 = $r9;

        if $r9 == null goto label09;

        $s4 = interfaceinvoke $r9.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i9 = (int) $s4;

        if $i9 != 35 goto label09;

     label07:
        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r16 = interfaceinvoke r23.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r17 = interfaceinvoke r23.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        r23 = $r17;

        if $r17 == null goto label08;

        $s5 = interfaceinvoke $r17.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i10 = (int) $s5;

        if $i10 == 35 goto label07;

     label08:
        $r28 = new org.apache.batik.css.engine.value.StringValue;

        $r19 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r28.<org.apache.batik.css.engine.value.StringValue: void <init>(short,java.lang.String)>(19, $r19);

        virtualinvoke $r25.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r28);

        goto label12;

     label09:
        $r10 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.String toString()>();

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String toLowerCase()>();

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String intern()>();

        $r13 = <org.apache.batik.css.engine.value.css2.FontFamilyManager: org.apache.batik.css.engine.value.StringMap values>;

        $r14 = virtualinvoke $r13.<org.apache.batik.css.engine.value.StringMap: java.lang.Object get(java.lang.String)>($r12);

        $r15 = (org.apache.batik.css.engine.value.Value) $r14;

        if $r15 == null goto label10;

        $r24 = $r15;

        goto label11;

     label10:
        $r29 = new org.apache.batik.css.engine.value.StringValue;

        $r24 = $r29;

        specialinvoke $r29.<org.apache.batik.css.engine.value.StringValue: void <init>(short,java.lang.String)>(19, $r10);

     label11:
        virtualinvoke $r25.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r24);

     label12:
        if r23 != null goto label13;

        return $r25;

     label13:
        $s2 = interfaceinvoke r23.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        if $s2 == 0 goto label14;

        $s3 = interfaceinvoke r23.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $r6 = virtualinvoke r4.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidLexicalUnitDOMException(short)>($s3);

        throw $r6;

     label14:
        $r3 = interfaceinvoke r23.<org.w3c.css.sac.LexicalUnit: org.w3c.css.sac.LexicalUnit getNextLexicalUnit()>();

        r23 = $r3;

        if $r3 != null goto label15;

        $r5 = virtualinvoke r4.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createMalformedLexicalUnitDOMException()>();

        throw $r5;

     label15:
        goto label04;
    }

    public org.apache.batik.css.engine.value.Value computeValue(org.apache.batik.css.engine.CSSStylableElement, java.lang.String, org.apache.batik.css.engine.CSSEngine, int, org.apache.batik.css.engine.StyleMap, org.apache.batik.css.engine.value.Value)
    {
        org.apache.batik.css.engine.CSSStylableElement r4;
        org.apache.batik.css.engine.value.Value r7;
        org.apache.batik.css.engine.value.ListValue $r0;
        org.apache.batik.css.engine.CSSEngine r1;
        org.apache.batik.css.engine.CSSContext $r2;
        org.apache.batik.css.engine.value.css2.FontFamilyManager r3;
        org.apache.batik.css.engine.StyleMap r6;
        int i0;
        java.lang.String r5;

        r3 := @this: org.apache.batik.css.engine.value.css2.FontFamilyManager;

        r4 := @parameter0: org.apache.batik.css.engine.CSSStylableElement;

        r5 := @parameter1: java.lang.String;

        r1 := @parameter2: org.apache.batik.css.engine.CSSEngine;

        i0 := @parameter3: int;

        r6 := @parameter4: org.apache.batik.css.engine.StyleMap;

        r7 := @parameter5: org.apache.batik.css.engine.value.Value;

        $r0 = <org.apache.batik.css.engine.value.css2.FontFamilyManager: org.apache.batik.css.engine.value.ListValue DEFAULT_VALUE>;

        if r7 != $r0 goto label1;

        $r2 = virtualinvoke r1.<org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.CSSContext getCSSContext()>();

        r7 = interfaceinvoke $r2.<org.apache.batik.css.engine.CSSContext: org.apache.batik.css.engine.value.Value getDefaultFontFamily()>();

     label1:
        return r7;
    }

    static void <clinit>()
    {
        org.apache.batik.css.engine.value.StringValue $r1, $r3, $r5;
        org.apache.batik.css.engine.value.Value $r8, $r10, $r12, $r14, $r16;
        org.apache.batik.css.engine.value.ListValue $r0, $r2, $r4, $r6;
        org.apache.batik.css.engine.value.StringMap $r7, $r9, $r11, $r13, $r15, $r17;

        $r0 = new org.apache.batik.css.engine.value.ListValue;

        specialinvoke $r0.<org.apache.batik.css.engine.value.ListValue: void <init>()>();

        <org.apache.batik.css.engine.value.css2.FontFamilyManager: org.apache.batik.css.engine.value.ListValue DEFAULT_VALUE> = $r0;

        $r2 = <org.apache.batik.css.engine.value.css2.FontFamilyManager: org.apache.batik.css.engine.value.ListValue DEFAULT_VALUE>;

        $r1 = new org.apache.batik.css.engine.value.StringValue;

        specialinvoke $r1.<org.apache.batik.css.engine.value.StringValue: void <init>(short,java.lang.String)>(19, "Arial");

        virtualinvoke $r2.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r1);

        $r4 = <org.apache.batik.css.engine.value.css2.FontFamilyManager: org.apache.batik.css.engine.value.ListValue DEFAULT_VALUE>;

        $r3 = new org.apache.batik.css.engine.value.StringValue;

        specialinvoke $r3.<org.apache.batik.css.engine.value.StringValue: void <init>(short,java.lang.String)>(19, "Helvetica");

        virtualinvoke $r4.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r3);

        $r6 = <org.apache.batik.css.engine.value.css2.FontFamilyManager: org.apache.batik.css.engine.value.ListValue DEFAULT_VALUE>;

        $r5 = new org.apache.batik.css.engine.value.StringValue;

        specialinvoke $r5.<org.apache.batik.css.engine.value.StringValue: void <init>(short,java.lang.String)>(21, "sans-serif");

        virtualinvoke $r6.<org.apache.batik.css.engine.value.ListValue: void append(org.apache.batik.css.engine.value.Value)>($r5);

        $r7 = new org.apache.batik.css.engine.value.StringMap;

        specialinvoke $r7.<org.apache.batik.css.engine.value.StringMap: void <init>()>();

        <org.apache.batik.css.engine.value.css2.FontFamilyManager: org.apache.batik.css.engine.value.StringMap values> = $r7;

        $r9 = <org.apache.batik.css.engine.value.css2.FontFamilyManager: org.apache.batik.css.engine.value.StringMap values>;

        $r8 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value CURSIVE_VALUE>;

        virtualinvoke $r9.<org.apache.batik.css.engine.value.StringMap: java.lang.Object put(java.lang.String,java.lang.Object)>("cursive", $r8);

        $r11 = <org.apache.batik.css.engine.value.css2.FontFamilyManager: org.apache.batik.css.engine.value.StringMap values>;

        $r10 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value FANTASY_VALUE>;

        virtualinvoke $r11.<org.apache.batik.css.engine.value.StringMap: java.lang.Object put(java.lang.String,java.lang.Object)>("fantasy", $r10);

        $r13 = <org.apache.batik.css.engine.value.css2.FontFamilyManager: org.apache.batik.css.engine.value.StringMap values>;

        $r12 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value MONOSPACE_VALUE>;

        virtualinvoke $r13.<org.apache.batik.css.engine.value.StringMap: java.lang.Object put(java.lang.String,java.lang.Object)>("monospace", $r12);

        $r15 = <org.apache.batik.css.engine.value.css2.FontFamilyManager: org.apache.batik.css.engine.value.StringMap values>;

        $r14 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value SERIF_VALUE>;

        virtualinvoke $r15.<org.apache.batik.css.engine.value.StringMap: java.lang.Object put(java.lang.String,java.lang.Object)>("serif", $r14);

        $r17 = <org.apache.batik.css.engine.value.css2.FontFamilyManager: org.apache.batik.css.engine.value.StringMap values>;

        $r16 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value SANS_SERIF_VALUE>;

        virtualinvoke $r17.<org.apache.batik.css.engine.value.StringMap: java.lang.Object put(java.lang.String,java.lang.Object)>("sans-serif", $r16);

        return;
    }
}
