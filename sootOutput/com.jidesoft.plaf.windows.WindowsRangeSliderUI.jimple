public class com.jidesoft.plaf.windows.WindowsRangeSliderUI extends com.sun.java.swing.plaf.windows.WindowsSliderUI
{
    protected static final int MOUSE_HANDLE_NONE;
    protected static final int MOUSE_HANDLE_MIN;
    protected static final int MOUSE_HANDLE_MAX;
    protected static final int MOUSE_HANDLE_MIDDLE;
    protected static final int MOUSE_HANDLE_LOWER;
    protected static final int MOUSE_HANDLE_UPPER;
    protected static final int MOUSE_HANDLE_BOTH;
    protected boolean hover;
    protected boolean second;
    protected boolean rollover1;
    protected boolean pressed1;
    protected boolean rollover2;
    protected boolean pressed2;

    public void <init>(javax.swing.JSlider)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider r1;

        r0 := @this: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        r1 := @parameter0: javax.swing.JSlider;

        specialinvoke r0.<com.sun.java.swing.plaf.windows.WindowsSliderUI: void <init>(javax.swing.JSlider)>(r1);

        return;
    }

    public static javax.swing.plaf.ComponentUI createUI(javax.swing.JComponent)
    {
        javax.swing.JComponent r1;
        com.jidesoft.plaf.windows.WindowsRangeSliderUI $r0;
        javax.swing.JSlider $r2;

        r1 := @parameter0: javax.swing.JComponent;

        $r0 = new com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r2 = (javax.swing.JSlider) r1;

        specialinvoke $r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: void <init>(javax.swing.JSlider)>($r2);

        return $r0;
    }

    public void paint(java.awt.Graphics, javax.swing.JComponent)
    {
        javax.swing.JComponent r2;
        java.awt.Rectangle $r3, $r5;
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        java.awt.Graphics r1;
        java.awt.Point $r4;
        boolean $z0;

        r0 := @this: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        r1 := @parameter0: java.awt.Graphics;

        r2 := @parameter1: javax.swing.JComponent;

        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean second> = 0;

        specialinvoke r0.<com.sun.java.swing.plaf.windows.WindowsSliderUI: void paint(java.awt.Graphics,javax.swing.JComponent)>(r1, r2);

        $r3 = virtualinvoke r1.<java.awt.Graphics: java.awt.Rectangle getClipBounds()>();

        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean second> = 1;

        $r4 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Point adjustThumbForHighValue()>();

        $r5 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $z0 = virtualinvoke $r3.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>($r5);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: void paintThumb(java.awt.Graphics)>(r1);

     label1:
        virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: void restoreThumbForLowValue(java.awt.Point)>($r4);

        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean second> = 0;

        return;
    }

    protected void restoreThumbForLowValue(java.awt.Point)
    {
        java.awt.Rectangle $r2, $r3;
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        int $i0, $i1;
        java.awt.Point r1;

        r0 := @this: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        r1 := @parameter0: java.awt.Point;

        $r2 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $i0 = r1.<java.awt.Point: int x>;

        $r2.<java.awt.Rectangle: int x> = $i0;

        $r3 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $i1 = r1.<java.awt.Point: int y>;

        $r3.<java.awt.Rectangle: int y> = $i1;

        return;
    }

    protected java.awt.Point adjustThumbForHighValue()
    {
        java.awt.Rectangle $r1, $r6, $r7, $r10, $r11;
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        java.awt.Point $r2;
        com.jidesoft.swing.RangeSlider $r5, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        javax.swing.JSlider $r3, $r4, $r8;

        r0 := @this: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $r2 = virtualinvoke $r1.<java.awt.Rectangle: java.awt.Point getLocation()>();

        $r3 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i0 = virtualinvoke $r3.<javax.swing.JSlider: int getOrientation()>();

        if $i0 != 0 goto label1;

        $r8 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r9 = (com.jidesoft.swing.RangeSlider) $r8;

        $i6 = virtualinvoke $r9.<com.jidesoft.swing.RangeSlider: int getHighValue()>();

        $i7 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: int xPositionForValue(int)>($i6);

        $r11 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $r10 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $i8 = $r10.<java.awt.Rectangle: int width>;

        $i9 = $i8 / 2;

        $i10 = $i7 - $i9;

        $r11.<java.awt.Rectangle: int x> = $i10;

        goto label2;

     label1:
        $r4 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r5 = (com.jidesoft.swing.RangeSlider) $r4;

        $i1 = virtualinvoke $r5.<com.jidesoft.swing.RangeSlider: int getHighValue()>();

        $i2 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: int yPositionForValue(int)>($i1);

        $r7 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $r6 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $i3 = $r6.<java.awt.Rectangle: int height>;

        $i4 = $i3 / 2;

        $i5 = $i2 - $i4;

        $r7.<java.awt.Rectangle: int y> = $i5;

     label2:
        return $r2;
    }

    protected void adjustSnapHighValue()
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        com.jidesoft.swing.RangeSlider $r2, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12;
        javax.swing.JSlider $r1, $r3, $r4, $r5, $r6, $r8, $r9;
        float $f0, $f1, f2;

        r0 := @this: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r2 = (com.jidesoft.swing.RangeSlider) $r1;

        $i0 = virtualinvoke $r2.<com.jidesoft.swing.RangeSlider: int getHighValue()>();

        i11 = $i0;

        $r3 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i1 = virtualinvoke $r3.<javax.swing.JSlider: int getMajorTickSpacing()>();

        $r4 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i2 = virtualinvoke $r4.<javax.swing.JSlider: int getMinorTickSpacing()>();

        i12 = 0;

        if $i2 <= 0 goto label1;

        i12 = $i2;

        goto label2;

     label1:
        if $i1 <= 0 goto label2;

        i12 = $i1;

     label2:
        if i12 == 0 goto label4;

        $r5 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i3 = virtualinvoke $r5.<javax.swing.JSlider: int getMinimum()>();

        $i4 = $i0 - $i3;

        $i5 = $i4 % i12;

        if $i5 == 0 goto label3;

        $r8 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i6 = virtualinvoke $r8.<javax.swing.JSlider: int getMinimum()>();

        $i7 = $i0 - $i6;

        $f1 = (float) $i7;

        $f0 = (float) i12;

        f2 = $f1 / $f0;

        $i8 = staticinvoke <java.lang.Math: int round(float)>(f2);

        $r9 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i9 = virtualinvoke $r9.<javax.swing.JSlider: int getMinimum()>();

        $i10 = $i8 * i12;

        i11 = $i9 + $i10;

     label3:
        if i11 == $i0 goto label4;

        $r6 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r7 = (com.jidesoft.swing.RangeSlider) $r6;

        virtualinvoke $r7.<com.jidesoft.swing.RangeSlider: void setHighValue(int)>(i11);

     label4:
        return;
    }

    protected void calculateThumbLocation()
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;
        boolean $z0;

        r0 := @this: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $z0 = virtualinvoke $r1.<javax.swing.JSlider: boolean getSnapToTicks()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: void adjustSnapHighValue()>();

     label1:
        specialinvoke r0.<com.sun.java.swing.plaf.windows.WindowsSliderUI: void calculateThumbLocation()>();

        return;
    }

    protected javax.swing.plaf.basic.BasicSliderUI$TrackListener createTrackListener(javax.swing.JSlider)
    {
        javax.swing.plaf.basic.BasicSliderUI$TrackListener $r3;
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r1;
        javax.swing.JSlider r2;
        com.jidesoft.plaf.windows.WindowsRangeSliderUI$RangeTrackListener $r0;

        r1 := @this: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        r2 := @parameter0: javax.swing.JSlider;

        $r0 = new com.jidesoft.plaf.windows.WindowsRangeSliderUI$RangeTrackListener;

        $r3 = specialinvoke r1.<com.sun.java.swing.plaf.windows.WindowsSliderUI: javax.swing.plaf.basic.BasicSliderUI$TrackListener createTrackListener(javax.swing.JSlider)>(r2);

        specialinvoke $r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI$RangeTrackListener: void <init>(com.jidesoft.plaf.windows.WindowsRangeSliderUI,javax.swing.plaf.basic.BasicSliderUI$TrackListener)>(r1, $r3);

        return $r0;
    }

    protected int getMouseHandle(int, int)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        java.awt.Point $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10, z11, z12, z13;
        javax.swing.JSlider $r2, $r6, $r7, $r9, $r18, $r20, $r22, $r24, $r33, $r35;
        java.awt.Rectangle r1, $r3, $r5, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        com.jidesoft.swing.RangeSlider $r8, $r10, $r23, $r25;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, i68, i69;
        java.lang.Boolean $r19, $r21, $r34, $r36;

        r0 := @this: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle trackRect>;

        $r2 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        virtualinvoke $r2.<javax.swing.JSlider: void putClientProperty(java.lang.Object,java.lang.Object)>("RangeSlider.mousePosition", null);

        z8 = 0;

        z13 = 0;

        z12 = 0;

        z9 = 0;

        z11 = 0;

        z10 = 0;

        $r3 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $z0 = virtualinvoke $r3.<java.awt.Rectangle: boolean contains(int,int)>(i0, i1);

        if $z0 == 0 goto label01;

        z8 = 1;

        z13 = 1;

        z12 = 1;

     label01:
        $r4 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Point adjustThumbForHighValue()>();

        $r5 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $z1 = virtualinvoke $r5.<java.awt.Rectangle: boolean contains(int,int)>(i0, i1);

        if $z1 == 0 goto label02;

        z9 = 1;

        z11 = 1;

        z10 = 1;

     label02:
        virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: void restoreThumbForLowValue(java.awt.Point)>($r4);

        if z12 == 0 goto label03;

        if z10 == 0 goto label03;

        return 7;

     label03:
        if z13 == 0 goto label04;

        return 1;

     label04:
        if z11 == 0 goto label05;

        return 2;

     label05:
        $r6 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i2 = virtualinvoke $r6.<javax.swing.JSlider: int getOrientation()>();

        if $i2 != 1 goto label09;

        $r22 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r23 = (com.jidesoft.swing.RangeSlider) $r22;

        $i36 = virtualinvoke $r23.<com.jidesoft.swing.RangeSlider: int getLowValue()>();

        $i37 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: int yPositionForValue(int)>($i36);

        $r24 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r25 = (com.jidesoft.swing.RangeSlider) $r24;

        $i38 = virtualinvoke $r25.<com.jidesoft.swing.RangeSlider: int getHighValue()>();

        $i39 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: int yPositionForValue(int)>($i38);

        $r26 = new java.awt.Rectangle;

        $i40 = r1.<java.awt.Rectangle: int x>;

        $i41 = staticinvoke <java.lang.Math: int min(int,int)>($i37, $i39);

        $r27 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $i42 = $r27.<java.awt.Rectangle: int height>;

        $i43 = $i42 / 2;

        $i45 = $i41 + $i43;

        $i46 = r1.<java.awt.Rectangle: int width>;

        $i44 = $i39 - $i37;

        $i47 = staticinvoke <java.lang.Math: int abs(int)>($i44);

        $r28 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $i48 = $r28.<java.awt.Rectangle: int height>;

        $i49 = $i47 - $i48;

        specialinvoke $r26.<java.awt.Rectangle: void <init>(int,int,int,int)>($i40, $i45, $i46, $i49);

        $z5 = virtualinvoke $r26.<java.awt.Rectangle: boolean contains(int,int)>(i0, i1);

        if $z5 == 0 goto label06;

        return 4;

     label06:
        $i50 = r1.<java.awt.Rectangle: int y>;

        $i51 = staticinvoke <java.lang.Math: int max(int,int)>($i37, $i39);

        $i54 = $i50 + $i51;

        $r29 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $i52 = $r29.<java.awt.Rectangle: int height>;

        $i53 = $i52 / 2;

        i68 = $i54 + $i53;

        $r30 = new java.awt.Rectangle;

        $i60 = r1.<java.awt.Rectangle: int x>;

        $i59 = r1.<java.awt.Rectangle: int width>;

        $i56 = r1.<java.awt.Rectangle: int y>;

        $i55 = r1.<java.awt.Rectangle: int height>;

        $i57 = $i56 + $i55;

        $i58 = $i57 - i68;

        specialinvoke $r30.<java.awt.Rectangle: void <init>(int,int,int,int)>($i60, i68, $i59, $i58);

        $z6 = virtualinvoke $r30.<java.awt.Rectangle: boolean contains(int,int)>(i0, i1);

        if $z6 == 0 goto label07;

        $r35 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r36 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r35.<javax.swing.JSlider: void putClientProperty(java.lang.Object,java.lang.Object)>("RangeSlider.mousePosition", $r36);

        return 5;

     label07:
        $r31 = new java.awt.Rectangle;

        $i61 = r1.<java.awt.Rectangle: int x>;

        $i62 = r1.<java.awt.Rectangle: int y>;

        $i63 = r1.<java.awt.Rectangle: int width>;

        $i64 = staticinvoke <java.lang.Math: int min(int,int)>($i39, $i37);

        $r32 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $i65 = $r32.<java.awt.Rectangle: int height>;

        $i66 = $i65 / 2;

        $i67 = $i64 - $i66;

        specialinvoke $r31.<java.awt.Rectangle: void <init>(int,int,int,int)>($i61, $i62, $i63, $i67);

        $z7 = virtualinvoke $r31.<java.awt.Rectangle: boolean contains(int,int)>(i0, i1);

        if $z7 == 0 goto label08;

        $r33 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke $r33.<javax.swing.JSlider: void putClientProperty(java.lang.Object,java.lang.Object)>("RangeSlider.mousePosition", $r34);

        return 6;

     label08:
        return 0;

     label09:
        $r7 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r8 = (com.jidesoft.swing.RangeSlider) $r7;

        $i3 = virtualinvoke $r8.<com.jidesoft.swing.RangeSlider: int getLowValue()>();

        $i4 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: int xPositionForValue(int)>($i3);

        $r9 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r10 = (com.jidesoft.swing.RangeSlider) $r9;

        $i5 = virtualinvoke $r10.<com.jidesoft.swing.RangeSlider: int getHighValue()>();

        $i6 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: int xPositionForValue(int)>($i5);

        $r11 = new java.awt.Rectangle;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i6);

        $r12 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $i8 = $r12.<java.awt.Rectangle: int width>;

        $i9 = $i8 / 2;

        $i11 = $i7 + $i9;

        $i12 = r1.<java.awt.Rectangle: int y>;

        $i10 = $i6 - $i4;

        $i13 = staticinvoke <java.lang.Math: int abs(int)>($i10);

        $r13 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $i14 = $r13.<java.awt.Rectangle: int width>;

        $i16 = $i13 - $i14;

        $i15 = r1.<java.awt.Rectangle: int height>;

        specialinvoke $r11.<java.awt.Rectangle: void <init>(int,int,int,int)>($i11, $i12, $i16, $i15);

        $z2 = virtualinvoke $r11.<java.awt.Rectangle: boolean contains(int,int)>(i0, i1);

        if $z2 == 0 goto label10;

        return 4;

     label10:
        $r14 = new java.awt.Rectangle;

        $i17 = r1.<java.awt.Rectangle: int x>;

        $i18 = r1.<java.awt.Rectangle: int y>;

        $i19 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i6);

        $r15 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $i20 = $r15.<java.awt.Rectangle: int width>;

        $i21 = $i20 / 2;

        $i23 = $i19 - $i21;

        $i22 = r1.<java.awt.Rectangle: int x>;

        $i25 = $i23 - $i22;

        $i24 = r1.<java.awt.Rectangle: int height>;

        specialinvoke $r14.<java.awt.Rectangle: void <init>(int,int,int,int)>($i17, $i18, $i25, $i24);

        $z3 = virtualinvoke $r14.<java.awt.Rectangle: boolean contains(int,int)>(i0, i1);

        if $z3 == 0 goto label11;

        $r20 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        virtualinvoke $r20.<javax.swing.JSlider: void putClientProperty(java.lang.Object,java.lang.Object)>("RangeSlider.mousePosition", $r21);

        return 5;

     label11:
        $i27 = r1.<java.awt.Rectangle: int x>;

        $i26 = $i6 - $i4;

        $i28 = staticinvoke <java.lang.Math: int abs(int)>($i26);

        $i31 = $i27 + $i28;

        $r16 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        $i29 = $r16.<java.awt.Rectangle: int width>;

        $i30 = $i29 / 2;

        i69 = $i31 + $i30;

        $r17 = new java.awt.Rectangle;

        $i35 = r1.<java.awt.Rectangle: int y>;

        $i32 = r1.<java.awt.Rectangle: int width>;

        $i34 = $i32 - i69;

        $i33 = r1.<java.awt.Rectangle: int height>;

        specialinvoke $r17.<java.awt.Rectangle: void <init>(int,int,int,int)>(i69, $i35, $i34, $i33);

        $z4 = virtualinvoke $r17.<java.awt.Rectangle: boolean contains(int,int)>(i0, i1);

        if $z4 == 0 goto label12;

        $r18 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        virtualinvoke $r18.<javax.swing.JSlider: void putClientProperty(java.lang.Object,java.lang.Object)>("RangeSlider.mousePosition", $r19);

        return 6;

     label12:
        return 0;
    }

    public void paintThumb(java.awt.Graphics)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        java.lang.NoSuchFieldException $r11;
        java.lang.Boolean $r4, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalAccessException $r10;
        java.lang.reflect.Field $r3, $r7;
        java.awt.Graphics r9;
        java.lang.Class $r1, $r2, $r5, $r6;

        r0 := @this: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        r9 := @parameter0: java.awt.Graphics;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("rollover");

        virtualinvoke $r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $z0 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean second>;

        if $z0 == 0 goto label2;

        $z2 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean rollover2>;

        goto label3;

     label2:
        $z2 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean rollover1>;

     label3:
        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        virtualinvoke $r3.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, $r4);

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getSuperclass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("pressed");

        virtualinvoke $r7.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $z1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean second>;

        if $z1 == 0 goto label4;

        $z3 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean pressed2>;

        goto label5;

     label4:
        $z3 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean pressed1>;

     label5:
        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        virtualinvoke $r7.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, $r8);

     label6:
        goto label9;

     label7:
        $r11 := @caughtexception;

        goto label9;

     label8:
        $r10 := @caughtexception;

     label9:
        specialinvoke r0.<com.sun.java.swing.plaf.windows.WindowsSliderUI: void paintThumb(java.awt.Graphics)>(r9);

        return;

        catch java.lang.NoSuchFieldException from label1 to label6 with label7;
        catch java.lang.IllegalAccessException from label1 to label6 with label8;
    }

    protected void setMouseRollover(int)
    {
        java.awt.Rectangle $r2, $r5;
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1, $r4;
        int i0;
        java.awt.Point $r3;

        r0 := @this: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label4;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label5;
            case 4: goto label3;
            case 5: goto label5;
            case 6: goto label5;
            case 7: goto label3;
            default: goto label5;
        };

     label1:
        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean rollover1> = 1;

        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean rollover2> = 0;

        goto label5;

     label2:
        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean rollover2> = 1;

        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean rollover1> = 0;

        goto label5;

     label3:
        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean rollover1> = 1;

        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean rollover2> = 1;

        goto label5;

     label4:
        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean rollover1> = 0;

        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean rollover2> = 0;

     label5:
        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r2 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        virtualinvoke $r1.<javax.swing.JSlider: void repaint(java.awt.Rectangle)>($r2);

        $r3 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Point adjustThumbForHighValue()>();

        $r4 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r5 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        virtualinvoke $r4.<javax.swing.JSlider: void repaint(java.awt.Rectangle)>($r5);

        virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: void restoreThumbForLowValue(java.awt.Point)>($r3);

        return;
    }

    protected void setMousePressed(int)
    {
        java.awt.Rectangle $r2, $r5;
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1, $r4;
        int i0;
        java.awt.Point $r3;

        r0 := @this: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label4;
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label5;
            case 4: goto label3;
            case 5: goto label5;
            case 6: goto label5;
            case 7: goto label3;
            default: goto label5;
        };

     label1:
        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean pressed1> = 1;

        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean pressed2> = 0;

        goto label5;

     label2:
        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean pressed2> = 1;

        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean pressed1> = 0;

        goto label5;

     label3:
        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean pressed1> = 1;

        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean pressed2> = 1;

        goto label5;

     label4:
        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean pressed1> = 0;

        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean pressed2> = 0;

     label5:
        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r2 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        virtualinvoke $r1.<javax.swing.JSlider: void repaint(java.awt.Rectangle)>($r2);

        $r3 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Point adjustThumbForHighValue()>();

        $r4 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r5 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        virtualinvoke $r4.<javax.swing.JSlider: void repaint(java.awt.Rectangle)>($r5);

        virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: void restoreThumbForLowValue(java.awt.Point)>($r3);

        return;
    }

    protected void setMouseReleased(int)
    {
        java.awt.Rectangle $r1, $r4;
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r2, $r5;
        int i0;
        java.awt.Point $r3;

        r0 := @this: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        i0 := @parameter0: int;

        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean pressed1> = 0;

        r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: boolean pressed2> = 0;

        $r2 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        virtualinvoke $r2.<javax.swing.JSlider: void repaint(java.awt.Rectangle)>($r1);

        $r3 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Point adjustThumbForHighValue()>();

        $r5 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r4 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: java.awt.Rectangle thumbRect>;

        virtualinvoke $r5.<javax.swing.JSlider: void repaint(java.awt.Rectangle)>($r4);

        virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: void restoreThumbForLowValue(java.awt.Point)>($r3);

        return;
    }

    public void scrollByBlock(int)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        byte $b26;
        boolean $z0, $z1;
        javax.swing.JSlider $r1, $r2, $r5, $r8, $r9, $r11, $r12, $r13, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r23, $r25, $r26, $r27, $r28;
        java.lang.Throwable $r24;
        com.jidesoft.swing.RangeSlider $r6, $r10, $r14, $r22;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, $i21, $i22, $i23, $i24, i25;
        java.lang.Boolean $r4, $r7;
        java.lang.Object $r3;

        r0 := @this: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        i0 := @parameter0: int;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        entermonitor $r1;

     label01:
        $r2 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r3 = virtualinvoke $r2.<javax.swing.JSlider: java.lang.Object getClientProperty(java.lang.Object)>("RangeSlider.mousePosition");

        if $r3 != null goto label02;

        $r23 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        i20 = virtualinvoke $r23.<javax.swing.JSlider: int getValue()>();

        goto label04;

     label02:
        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label03;

        $r21 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r22 = (com.jidesoft.swing.RangeSlider) $r21;

        i20 = virtualinvoke $r22.<com.jidesoft.swing.RangeSlider: int getLowValue()>();

        goto label04;

     label03:
        $r5 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r6 = (com.jidesoft.swing.RangeSlider) $r5;

        i20 = virtualinvoke $r6.<com.jidesoft.swing.RangeSlider: int getHighValue()>();

     label04:
        $r25 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i21 = virtualinvoke $r25.<javax.swing.JSlider: int getMaximum()>();

        $r26 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i22 = virtualinvoke $r26.<javax.swing.JSlider: int getMinimum()>();

        $i23 = $i21 - $i22;

        $i24 = $i23 / 10;

        i25 = $i24;

        if $i24 > 0 goto label05;

        $r19 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i18 = virtualinvoke $r19.<javax.swing.JSlider: int getMaximum()>();

        $r20 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i19 = virtualinvoke $r20.<javax.swing.JSlider: int getMinimum()>();

        if $i18 <= $i19 goto label05;

        i25 = 1;

     label05:
        $r27 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        virtualinvoke $r27.<javax.swing.JSlider: void putClientProperty(java.lang.Object,java.lang.Object)>("RangeSlider.adjustAction", "scrollByBlock");

        $i16 = i25;

        if i0 <= 0 goto label06;

        $b26 = 1;

        goto label07;

     label06:
        $b26 = -1;

     label07:
        $i17 = $i16 * $b26;

        if $r3 != null goto label08;

        $r17 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i11 = i20 + $i17;

        $r16 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i12 = virtualinvoke $r16.<javax.swing.JSlider: int getMaximum()>();

        $i13 = staticinvoke <java.lang.Math: int min(int,int)>($i11, $i12);

        $r18 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i14 = virtualinvoke $r18.<javax.swing.JSlider: int getMinimum()>();

        $i15 = staticinvoke <java.lang.Math: int max(int,int)>($i13, $i14);

        virtualinvoke $r17.<javax.swing.JSlider: void setValue(int)>($i15);

        goto label10;

     label08:
        $r7 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label09;

        $r12 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r14 = (com.jidesoft.swing.RangeSlider) $r12;

        $i6 = i20 + $i17;

        $r13 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i7 = virtualinvoke $r13.<javax.swing.JSlider: int getMaximum()>();

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i7);

        $r15 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i9 = virtualinvoke $r15.<javax.swing.JSlider: int getMinimum()>();

        $i10 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i9);

        virtualinvoke $r14.<com.jidesoft.swing.RangeSlider: void setLowValue(int)>($i10);

        goto label10;

     label09:
        $r8 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r10 = (com.jidesoft.swing.RangeSlider) $r8;

        $i1 = i20 + $i17;

        $r9 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i2 = virtualinvoke $r9.<javax.swing.JSlider: int getMaximum()>();

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r11 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i4 = virtualinvoke $r11.<javax.swing.JSlider: int getMinimum()>();

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i4);

        virtualinvoke $r10.<com.jidesoft.swing.RangeSlider: void setHighValue(int)>($i5);

     label10:
        $r28 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        virtualinvoke $r28.<javax.swing.JSlider: void putClientProperty(java.lang.Object,java.lang.Object)>("RangeSlider.adjustAction", null);

        exitmonitor $r1;

     label11:
        goto label14;

     label12:
        $r24 := @caughtexception;

        exitmonitor $r1;

     label13:
        throw $r24;

     label14:
        return;

        catch java.lang.Throwable from label01 to label11 with label12;
        catch java.lang.Throwable from label12 to label13 with label12;
    }

    public void scrollByUnit(int)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        byte $b18;
        boolean $z0, $z1;
        javax.swing.JSlider $r1, $r2, $r5, $r7, $r9, $r10, $r12, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r22, $r24;
        java.lang.Throwable $r23;
        com.jidesoft.swing.RangeSlider $r6, $r11, $r15, $r21;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17;
        java.lang.Boolean $r4, $r8;
        java.lang.Object $r3;

        r0 := @this: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        i0 := @parameter0: int;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        entermonitor $r1;

     label01:
        $r2 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r3 = virtualinvoke $r2.<javax.swing.JSlider: java.lang.Object getClientProperty(java.lang.Object)>("RangeSlider.mousePosition");

        if $r3 != null goto label02;

        $r22 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        i17 = virtualinvoke $r22.<javax.swing.JSlider: int getValue()>();

        goto label04;

     label02:
        $r4 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z0 = virtualinvoke $r4.<java.lang.Boolean: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label03;

        $r20 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r21 = (com.jidesoft.swing.RangeSlider) $r20;

        i17 = virtualinvoke $r21.<com.jidesoft.swing.RangeSlider: int getLowValue()>();

        goto label04;

     label03:
        $r5 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r6 = (com.jidesoft.swing.RangeSlider) $r5;

        i17 = virtualinvoke $r6.<com.jidesoft.swing.RangeSlider: int getHighValue()>();

     label04:
        if i0 <= 0 goto label05;

        $b18 = 1;

        goto label06;

     label05:
        $b18 = -1;

     label06:
        $i16 = 1 * $b18;

        $r7 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        virtualinvoke $r7.<javax.swing.JSlider: void putClientProperty(java.lang.Object,java.lang.Object)>("RangeSlider.adjustAction", "scrollByUnit");

        if $r3 != null goto label07;

        $r18 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i11 = i17 + $i16;

        $r17 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i12 = virtualinvoke $r17.<javax.swing.JSlider: int getMaximum()>();

        $i13 = staticinvoke <java.lang.Math: int min(int,int)>($i11, $i12);

        $r19 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i14 = virtualinvoke $r19.<javax.swing.JSlider: int getMinimum()>();

        $i15 = staticinvoke <java.lang.Math: int max(int,int)>($i13, $i14);

        virtualinvoke $r18.<javax.swing.JSlider: void setValue(int)>($i15);

        goto label09;

     label07:
        $r8 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z1 = virtualinvoke $r8.<java.lang.Boolean: boolean equals(java.lang.Object)>($r3);

        if $z1 == 0 goto label08;

        $r13 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r15 = (com.jidesoft.swing.RangeSlider) $r13;

        $i6 = i17 + $i16;

        $r14 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i7 = virtualinvoke $r14.<javax.swing.JSlider: int getMaximum()>();

        $i8 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i7);

        $r16 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i9 = virtualinvoke $r16.<javax.swing.JSlider: int getMinimum()>();

        $i10 = staticinvoke <java.lang.Math: int max(int,int)>($i8, $i9);

        virtualinvoke $r15.<com.jidesoft.swing.RangeSlider: void setLowValue(int)>($i10);

        goto label09;

     label08:
        $r9 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $r11 = (com.jidesoft.swing.RangeSlider) $r9;

        $i1 = i17 + $i16;

        $r10 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i2 = virtualinvoke $r10.<javax.swing.JSlider: int getMaximum()>();

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        $r12 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        $i4 = virtualinvoke $r12.<javax.swing.JSlider: int getMinimum()>();

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i4);

        virtualinvoke $r11.<com.jidesoft.swing.RangeSlider: void setHighValue(int)>($i5);

     label09:
        $r24 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        virtualinvoke $r24.<javax.swing.JSlider: void putClientProperty(java.lang.Object,java.lang.Object)>("RangeSlider.adjustAction", null);

        exitmonitor $r1;

     label10:
        goto label13;

     label11:
        $r23 := @caughtexception;

        exitmonitor $r1;

     label12:
        throw $r23;

     label13:
        return;

        catch java.lang.Throwable from label01 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    static javax.swing.JSlider access$000(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$100(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$200(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$300(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$400(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static int access$500(com.jidesoft.plaf.windows.WindowsRangeSliderUI, int)
    {
        int i0, $i1;
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: int yPositionForValue(int)>(i0);

        return $i1;
    }

    static javax.swing.JSlider access$600(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static int access$700(com.jidesoft.plaf.windows.WindowsRangeSliderUI, int)
    {
        int i0, $i1;
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: int xPositionForValue(int)>(i0);

        return $i1;
    }

    static javax.swing.JSlider access$800(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$900(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$1000(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$1100(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$1200(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$1300(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$1400(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$1500(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$1600(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$1700(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$1800(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$1900(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$2000(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$2100(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$2200(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$2300(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$2400(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$2500(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$2600(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$2700(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$2800(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$2900(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$3000(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$3100(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$3200(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$3300(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    static javax.swing.JSlider access$3400(com.jidesoft.plaf.windows.WindowsRangeSliderUI)
    {
        com.jidesoft.plaf.windows.WindowsRangeSliderUI r0;
        javax.swing.JSlider $r1;

        r0 := @parameter0: com.jidesoft.plaf.windows.WindowsRangeSliderUI;

        $r1 = r0.<com.jidesoft.plaf.windows.WindowsRangeSliderUI: javax.swing.JSlider slider>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.jidesoft.plaf.windows.WindowsRangeSliderUI: int MOUSE_HANDLE_BOTH> = 7;

        <com.jidesoft.plaf.windows.WindowsRangeSliderUI: int MOUSE_HANDLE_UPPER> = 6;

        <com.jidesoft.plaf.windows.WindowsRangeSliderUI: int MOUSE_HANDLE_LOWER> = 5;

        <com.jidesoft.plaf.windows.WindowsRangeSliderUI: int MOUSE_HANDLE_MIDDLE> = 4;

        <com.jidesoft.plaf.windows.WindowsRangeSliderUI: int MOUSE_HANDLE_MAX> = 2;

        <com.jidesoft.plaf.windows.WindowsRangeSliderUI: int MOUSE_HANDLE_MIN> = 1;

        <com.jidesoft.plaf.windows.WindowsRangeSliderUI: int MOUSE_HANDLE_NONE> = 0;

        return;
    }
}
