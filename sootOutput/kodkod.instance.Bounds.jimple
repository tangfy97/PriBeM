public final class kodkod.instance.Bounds extends java.lang.Object implements java.lang.Cloneable
{
    private final kodkod.instance.TupleFactory factory;
    private final java.util.Map lowers;
    private final java.util.Map uppers;
    private final kodkod.util.ints.SparseSequence intbounds;

    private void <init>(kodkod.instance.TupleFactory, java.util.Map, java.util.Map, kodkod.util.ints.SparseSequence)
    {
        kodkod.instance.Bounds r0;
        java.util.Map r2, r3;
        kodkod.instance.TupleFactory r1;
        kodkod.util.ints.SparseSequence r4;

        r0 := @this: kodkod.instance.Bounds;

        r1 := @parameter0: kodkod.instance.TupleFactory;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: java.util.Map;

        r4 := @parameter3: kodkod.util.ints.SparseSequence;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.instance.Bounds: kodkod.instance.TupleFactory factory> = r1;

        r0.<kodkod.instance.Bounds: java.util.Map lowers> = r2;

        r0.<kodkod.instance.Bounds: java.util.Map uppers> = r3;

        r0.<kodkod.instance.Bounds: kodkod.util.ints.SparseSequence intbounds> = r4;

        return;
    }

    public void <init>(kodkod.instance.Universe)
    {
        java.util.LinkedHashMap $r3, $r4;
        kodkod.instance.Bounds r0;
        kodkod.util.ints.TreeSequence $r5;
        kodkod.instance.Universe r1;
        kodkod.instance.TupleFactory $r2;

        r0 := @this: kodkod.instance.Bounds;

        r1 := @parameter0: kodkod.instance.Universe;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<kodkod.instance.Universe: kodkod.instance.TupleFactory factory()>();

        r0.<kodkod.instance.Bounds: kodkod.instance.TupleFactory factory> = $r2;

        $r3 = new java.util.LinkedHashMap;

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>()>();

        r0.<kodkod.instance.Bounds: java.util.Map lowers> = $r3;

        $r4 = new java.util.LinkedHashMap;

        specialinvoke $r4.<java.util.LinkedHashMap: void <init>()>();

        r0.<kodkod.instance.Bounds: java.util.Map uppers> = $r4;

        $r5 = new kodkod.util.ints.TreeSequence;

        specialinvoke $r5.<kodkod.util.ints.TreeSequence: void <init>()>();

        r0.<kodkod.instance.Bounds: kodkod.util.ints.SparseSequence intbounds> = $r5;

        return;
    }

    public kodkod.instance.Universe universe()
    {
        kodkod.instance.Bounds r0;
        kodkod.instance.Universe $r2;
        kodkod.instance.TupleFactory $r1;

        r0 := @this: kodkod.instance.Bounds;

        $r1 = r0.<kodkod.instance.Bounds: kodkod.instance.TupleFactory factory>;

        $r2 = virtualinvoke $r1.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe()>();

        return $r2;
    }

    public java.util.Set relations()
    {
        java.util.Set $r2;
        kodkod.instance.Bounds r0;
        java.util.Map $r1;

        r0 := @this: kodkod.instance.Bounds;

        $r1 = r0.<kodkod.instance.Bounds: java.util.Map lowers>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    public kodkod.util.ints.IntSet ints()
    {
        kodkod.instance.Bounds r0;
        kodkod.util.ints.SparseSequence $r1;
        kodkod.util.ints.IntSet $r2;

        r0 := @this: kodkod.instance.Bounds;

        $r1 = r0.<kodkod.instance.Bounds: kodkod.util.ints.SparseSequence intbounds>;

        $r2 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: kodkod.util.ints.IntSet indices()>();

        return $r2;
    }

    public kodkod.instance.TupleSet lowerBound(kodkod.ast.Relation)
    {
        kodkod.instance.Bounds r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        kodkod.ast.Relation r1;
        kodkod.instance.TupleSet $r4;

        r0 := @this: kodkod.instance.Bounds;

        r1 := @parameter0: kodkod.ast.Relation;

        $r2 = r0.<kodkod.instance.Bounds: java.util.Map lowers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (kodkod.instance.TupleSet) $r3;

        return $r4;
    }

    public java.util.Map lowerBounds()
    {
        kodkod.instance.Bounds r0;
        java.util.Map $r1, $r2;

        r0 := @this: kodkod.instance.Bounds;

        $r1 = r0.<kodkod.instance.Bounds: java.util.Map lowers>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public kodkod.instance.TupleSet upperBound(kodkod.ast.Relation)
    {
        kodkod.instance.Bounds r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        kodkod.ast.Relation r1;
        kodkod.instance.TupleSet $r4;

        r0 := @this: kodkod.instance.Bounds;

        r1 := @parameter0: kodkod.ast.Relation;

        $r2 = r0.<kodkod.instance.Bounds: java.util.Map uppers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (kodkod.instance.TupleSet) $r3;

        return $r4;
    }

    public java.util.Map upperBounds()
    {
        kodkod.instance.Bounds r0;
        java.util.Map $r1, $r2;

        r0 := @this: kodkod.instance.Bounds;

        $r1 = r0.<kodkod.instance.Bounds: java.util.Map uppers>;

        $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        return $r2;
    }

    public kodkod.instance.TupleSet exactBound(int)
    {
        kodkod.instance.Bounds r0;
        int i0;
        java.lang.Object $r2;
        kodkod.util.ints.SparseSequence $r1;
        kodkod.instance.TupleSet $r3;

        r0 := @this: kodkod.instance.Bounds;

        i0 := @parameter0: int;

        $r1 = r0.<kodkod.instance.Bounds: kodkod.util.ints.SparseSequence intbounds>;

        $r2 = interfaceinvoke $r1.<kodkod.util.ints.SparseSequence: java.lang.Object get(int)>(i0);

        $r3 = (kodkod.instance.TupleSet) $r2;

        return $r3;
    }

    public kodkod.util.ints.SparseSequence intBounds()
    {
        kodkod.instance.Bounds r0;
        kodkod.util.ints.SparseSequence $r1, $r2;

        r0 := @this: kodkod.instance.Bounds;

        $r1 = r0.<kodkod.instance.Bounds: kodkod.util.ints.SparseSequence intbounds>;

        $r2 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.SparseSequence unmodifiableSequence(kodkod.util.ints.SparseSequence)>($r1);

        return $r2;
    }

    private void checkBound(int, kodkod.instance.TupleSet)
    {
        java.lang.IllegalArgumentException $r5, $r6;
        kodkod.instance.Bounds r2;
        int i0, $i1;
        kodkod.instance.Universe $r1, $r4;
        kodkod.instance.TupleFactory $r3;
        kodkod.instance.TupleSet r0;
        boolean $z0;

        r2 := @this: kodkod.instance.Bounds;

        i0 := @parameter0: int;

        r0 := @parameter1: kodkod.instance.TupleSet;

        $i1 = virtualinvoke r0.<kodkod.instance.TupleSet: int arity()>();

        if i0 == $i1 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bound.arity != r.arity");

        throw $r6;

     label1:
        $r1 = virtualinvoke r0.<kodkod.instance.TupleSet: kodkod.instance.Universe universe()>();

        $r3 = r2.<kodkod.instance.Bounds: kodkod.instance.TupleFactory factory>;

        $r4 = virtualinvoke $r3.<kodkod.instance.TupleFactory: kodkod.instance.Universe universe()>();

        $z0 = virtualinvoke $r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("bound.universe != this.universe");

        throw $r5;

     label2:
        return;
    }

    public void boundExactly(kodkod.ast.Relation, kodkod.instance.TupleSet)
    {
        kodkod.instance.Bounds r0;
        java.util.Map $r5, $r6;
        int $i0;
        kodkod.ast.Relation r1;
        kodkod.instance.TupleSet r2, $r3, $r4;

        r0 := @this: kodkod.instance.Bounds;

        r1 := @parameter0: kodkod.ast.Relation;

        r2 := @parameter1: kodkod.instance.TupleSet;

        $i0 = virtualinvoke r1.<kodkod.ast.Relation: int arity()>();

        specialinvoke r0.<kodkod.instance.Bounds: void checkBound(int,kodkod.instance.TupleSet)>($i0, r2);

        $r3 = virtualinvoke r2.<kodkod.instance.TupleSet: kodkod.instance.TupleSet clone()>();

        $r4 = virtualinvoke $r3.<kodkod.instance.TupleSet: kodkod.instance.TupleSet unmodifiableView()>();

        $r5 = r0.<kodkod.instance.Bounds: java.util.Map lowers>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        $r6 = r0.<kodkod.instance.Bounds: java.util.Map uppers>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return;
    }

    public void bound(kodkod.ast.Relation, kodkod.instance.TupleSet, kodkod.instance.TupleSet)
    {
        kodkod.instance.Bounds r2;
        java.util.Map $r4, $r7;
        int $i0, $i1, $i2, $i3;
        kodkod.instance.TupleSet r0, r1, $r5, $r6, $r8, $r9;
        boolean $z0;
        java.lang.IllegalArgumentException $r10;
        kodkod.ast.Relation r3;

        r2 := @this: kodkod.instance.Bounds;

        r3 := @parameter0: kodkod.ast.Relation;

        r1 := @parameter1: kodkod.instance.TupleSet;

        r0 := @parameter2: kodkod.instance.TupleSet;

        $z0 = virtualinvoke r0.<kodkod.instance.TupleSet: boolean containsAll(java.util.Collection)>(r1);

        if $z0 != 0 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("lower.tuples !in upper.tuples");

        throw $r10;

     label1:
        $i0 = virtualinvoke r0.<kodkod.instance.TupleSet: int size()>();

        $i1 = virtualinvoke r1.<kodkod.instance.TupleSet: int size()>();

        if $i0 != $i1 goto label2;

        virtualinvoke r2.<kodkod.instance.Bounds: void boundExactly(kodkod.ast.Relation,kodkod.instance.TupleSet)>(r3, r1);

        goto label3;

     label2:
        $i2 = virtualinvoke r3.<kodkod.ast.Relation: int arity()>();

        specialinvoke r2.<kodkod.instance.Bounds: void checkBound(int,kodkod.instance.TupleSet)>($i2, r1);

        $i3 = virtualinvoke r3.<kodkod.ast.Relation: int arity()>();

        specialinvoke r2.<kodkod.instance.Bounds: void checkBound(int,kodkod.instance.TupleSet)>($i3, r0);

        $r4 = r2.<kodkod.instance.Bounds: java.util.Map lowers>;

        $r5 = virtualinvoke r1.<kodkod.instance.TupleSet: kodkod.instance.TupleSet clone()>();

        $r6 = virtualinvoke $r5.<kodkod.instance.TupleSet: kodkod.instance.TupleSet unmodifiableView()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r6);

        $r7 = r2.<kodkod.instance.Bounds: java.util.Map uppers>;

        $r8 = virtualinvoke r0.<kodkod.instance.TupleSet: kodkod.instance.TupleSet clone()>();

        $r9 = virtualinvoke $r8.<kodkod.instance.TupleSet: kodkod.instance.TupleSet unmodifiableView()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r9);

     label3:
        return;
    }

    public void bound(kodkod.ast.Relation, kodkod.instance.TupleSet)
    {
        kodkod.instance.Bounds r0;
        java.util.Map $r3, $r7;
        int $i0, $i1;
        kodkod.ast.Relation r1;
        kodkod.instance.TupleFactory $r4;
        kodkod.instance.TupleSet r2, $r5, $r6, $r8, $r9;

        r0 := @this: kodkod.instance.Bounds;

        r1 := @parameter0: kodkod.ast.Relation;

        r2 := @parameter1: kodkod.instance.TupleSet;

        $i0 = virtualinvoke r1.<kodkod.ast.Relation: int arity()>();

        specialinvoke r0.<kodkod.instance.Bounds: void checkBound(int,kodkod.instance.TupleSet)>($i0, r2);

        $r3 = r0.<kodkod.instance.Bounds: java.util.Map lowers>;

        $r4 = r0.<kodkod.instance.Bounds: kodkod.instance.TupleFactory factory>;

        $i1 = virtualinvoke r1.<kodkod.ast.Relation: int arity()>();

        $r5 = virtualinvoke $r4.<kodkod.instance.TupleFactory: kodkod.instance.TupleSet noneOf(int)>($i1);

        $r6 = virtualinvoke $r5.<kodkod.instance.TupleSet: kodkod.instance.TupleSet unmodifiableView()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

        $r7 = r0.<kodkod.instance.Bounds: java.util.Map uppers>;

        $r8 = virtualinvoke r2.<kodkod.instance.TupleSet: kodkod.instance.TupleSet clone()>();

        $r9 = virtualinvoke $r8.<kodkod.instance.TupleSet: kodkod.instance.TupleSet unmodifiableView()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r9);

        return;
    }

    public void boundExactly(int, kodkod.instance.TupleSet)
    {
        java.lang.IllegalArgumentException $r5;
        kodkod.util.ints.SparseSequence $r2;
        kodkod.instance.Bounds r0;
        int $i0, i1;
        java.lang.StringBuilder $r6, $r7;
        java.lang.String $r8;
        kodkod.instance.TupleSet r1, $r3, $r4;

        r0 := @this: kodkod.instance.Bounds;

        i1 := @parameter0: int;

        r1 := @parameter1: kodkod.instance.TupleSet;

        specialinvoke r0.<kodkod.instance.Bounds: void checkBound(int,kodkod.instance.TupleSet)>(1, r1);

        $i0 = virtualinvoke r1.<kodkod.instance.TupleSet: int size()>();

        if $i0 == 1 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("ibound.size != 1: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label1:
        $r2 = r0.<kodkod.instance.Bounds: kodkod.util.ints.SparseSequence intbounds>;

        $r3 = virtualinvoke r1.<kodkod.instance.TupleSet: kodkod.instance.TupleSet clone()>();

        $r4 = virtualinvoke $r3.<kodkod.instance.TupleSet: kodkod.instance.TupleSet unmodifiableView()>();

        interfaceinvoke $r2.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>(i1, $r4);

        return;
    }

    public kodkod.instance.Bounds unmodifiableView()
    {
        kodkod.util.ints.SparseSequence $r7, $r8;
        kodkod.instance.Bounds $r0, r1;
        java.util.Map $r2, $r4, $r5, $r6;
        kodkod.instance.TupleFactory $r3;

        r1 := @this: kodkod.instance.Bounds;

        $r0 = new kodkod.instance.Bounds;

        $r3 = r1.<kodkod.instance.Bounds: kodkod.instance.TupleFactory factory>;

        $r2 = r1.<kodkod.instance.Bounds: java.util.Map lowers>;

        $r4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r2);

        $r5 = r1.<kodkod.instance.Bounds: java.util.Map uppers>;

        $r6 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r5);

        $r7 = r1.<kodkod.instance.Bounds: kodkod.util.ints.SparseSequence intbounds>;

        $r8 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.SparseSequence unmodifiableSequence(kodkod.util.ints.SparseSequence)>($r7);

        specialinvoke $r0.<kodkod.instance.Bounds: void <init>(kodkod.instance.TupleFactory,java.util.Map,java.util.Map,kodkod.util.ints.SparseSequence)>($r3, $r4, $r6, $r8);

        return $r0;
    }

    public kodkod.instance.Bounds clone()
    {
        kodkod.util.ints.SparseSequence $r7, $r8;
        java.lang.CloneNotSupportedException $r9;
        java.util.LinkedHashMap $r2, $r5;
        kodkod.instance.Bounds $r0, r1;
        java.util.Map $r3, $r6;
        java.lang.InternalError $r10;
        kodkod.instance.TupleFactory $r4;

        r1 := @this: kodkod.instance.Bounds;

     label1:
        $r0 = new kodkod.instance.Bounds;

        $r4 = r1.<kodkod.instance.Bounds: kodkod.instance.TupleFactory factory>;

        $r2 = new java.util.LinkedHashMap;

        $r3 = r1.<kodkod.instance.Bounds: java.util.Map lowers>;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r3);

        $r5 = new java.util.LinkedHashMap;

        $r6 = r1.<kodkod.instance.Bounds: java.util.Map uppers>;

        specialinvoke $r5.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r6);

        $r7 = r1.<kodkod.instance.Bounds: kodkod.util.ints.SparseSequence intbounds>;

        $r8 = interfaceinvoke $r7.<kodkod.util.ints.SparseSequence: kodkod.util.ints.SparseSequence clone()>();

        specialinvoke $r0.<kodkod.instance.Bounds: void <init>(kodkod.instance.TupleFactory,java.util.Map,java.util.Map,kodkod.util.ints.SparseSequence)>($r4, $r2, $r5, $r8);

     label2:
        return $r0;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.InternalError;

        specialinvoke $r10.<java.lang.InternalError: void <init>()>();

        throw $r10;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    public java.lang.String toString()
    {
        kodkod.instance.Bounds r1;
        java.util.Map $r2, $r9;
        java.lang.String $r15;
        kodkod.instance.TupleSet r12;
        boolean $z0, $z1;
        java.util.Map$Entry r6;
        java.util.Iterator $r4;
        java.util.Set $r3;
        kodkod.util.ints.SparseSequence $r14;
        java.lang.StringBuilder $r0;
        java.lang.Object $r5, $r7, $r8, $r10, $r11, $r13;

        r1 := @this: kodkod.instance.Bounds;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("relation bounds:");

        $r2 = r1.<kodkod.instance.Bounds: java.util.Map lowers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n ");

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": [");

        $r8 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r9 = r1.<kodkod.instance.Bounds: java.util.Map uppers>;

        $r10 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r12 = (kodkod.instance.TupleSet) $r11;

        $r13 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $z0 = virtualinvoke r12.<kodkod.instance.TupleSet: boolean equals(java.lang.Object)>($r13);

        if $z0 != 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

     label3:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\nint bounds: ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n ");

        $r14 = r1.<kodkod.instance.Bounds: kodkod.util.ints.SparseSequence intbounds>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r15 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    protected volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.instance.Bounds r0, $r1;

        r0 := @this: kodkod.instance.Bounds;

        $r1 = virtualinvoke r0.<kodkod.instance.Bounds: kodkod.instance.Bounds clone()>();

        return $r1;
    }
}
