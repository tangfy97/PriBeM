abstract class com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset extends com.mycila.inject.internal.guava.collect.AbstractMultiset implements java.io.Serializable
{
    private transient java.util.Map backingMap;
    private transient long size;
    private static final long serialVersionUID;

    protected void <init>(java.util.Map)
    {
        java.util.Map r1, $r3;
        int $i0;
        java.lang.Object $r2;
        long $l1;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: void <init>()>();

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.Map) $r2;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap> = $r3;

        $i0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: int size()>();

        $l1 = (long) $i0;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size> = $l1;

        return;
    }

    java.util.Map backingMap()
    {
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        return $r1;
    }

    void setBackingMap(java.util.Map)
    {
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r0;
        java.util.Map r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        r1 := @parameter0: java.util.Map;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap> = r1;

        return;
    }

    public java.util.Set entrySet()
    {
        java.util.Set $r1;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        $r1 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMultiset: java.util.Set entrySet()>();

        return $r1;
    }

    java.util.Iterator entryIterator()
    {
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1 $r4;
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        $r4 = new com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$1: void <init>(com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset,java.util.Iterator)>(r0, $r3);

        return $r4;
    }

    public void clear()
    {
        java.util.Iterator $r3;
        java.util.Collection $r2;
        com.mycila.inject.internal.guava.collect.Count r6;
        java.util.Map $r1, $r4;
        java.lang.Object $r5;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.mycila.inject.internal.guava.collect.Count) $r5;

        virtualinvoke r6.<com.mycila.inject.internal.guava.collect.Count: void set(int)>(0);

        goto label1;

     label2:
        $r4 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        interfaceinvoke $r4.<java.util.Map: void clear()>();

        r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size> = 0L;

        return;
    }

    int distinctElements()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r0;
        java.util.Map $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $i0 = interfaceinvoke $r1.<java.util.Map: int size()>();

        return $i0;
    }

    public int size()
    {
        int $i1;
        long $l0;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        $l0 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size>;

        $i1 = staticinvoke <com.mycila.inject.internal.guava.primitives.Ints: int saturatedCast(long)>($l0);

        return $i1;
    }

    public java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator $r0;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        $r0 = new com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$MapBasedMultisetIterator: void <init>(com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset)>(r1);

        return $r0;
    }

    public int count(java.lang.Object)
    {
        java.lang.ClassCastException $r4;
        java.lang.NullPointerException $r5;
        com.mycila.inject.internal.guava.collect.Count r6;
        java.util.Map $r2;
        int $i0;
        java.lang.Object r1, $r3;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        r1 := @parameter0: java.lang.Object;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r6 = (com.mycila.inject.internal.guava.collect.Count) $r3;

        if r6 != null goto label2;

        $i0 = 0;

        goto label3;

     label2:
        $i0 = virtualinvoke r6.<com.mycila.inject.internal.guava.collect.Count: int get()>();

     label3:
        return $i0;

     label4:
        $r5 := @caughtexception;

        return 0;

     label5:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.NullPointerException from label1 to label3 with label4;
        catch java.lang.ClassCastException from label1 to label3 with label5;
    }

    public int add(java.lang.Object, int)
    {
        java.lang.Object[] $r0, $r6;
        long $l2, $l3, l4, $l8, $l9, $l10;
        java.lang.Integer $r1;
        com.mycila.inject.internal.guava.collect.Count $r10, $r11;
        byte $b5;
        java.lang.Long $r7;
        java.util.Map $r4, $r9;
        int i0, $i1, $i6, i7, $i11;
        boolean $z0, $z1;
        java.lang.Object r3, $r5;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r2;

        r2 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        r3 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        $i6 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: int count(java.lang.Object)>(r3);

        return $i6;

     label1:
        if i0 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "occurrences cannot be negative: %s", $r0);

        $r4 = r2.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r10 = (com.mycila.inject.internal.guava.collect.Count) $r5;

        if $r10 != null goto label4;

        i7 = 0;

        $r9 = r2.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r11 = new com.mycila.inject.internal.guava.collect.Count;

        specialinvoke $r11.<com.mycila.inject.internal.guava.collect.Count: void <init>(int)>(i0);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r11);

        goto label7;

     label4:
        $i1 = virtualinvoke $r10.<com.mycila.inject.internal.guava.collect.Count: int get()>();

        i7 = $i1;

        $l3 = (long) $i1;

        $l2 = (long) i0;

        l4 = $l3 + $l2;

        $b5 = l4 cmp 2147483647L;

        $i11 = (int) $b5;

        if $i11 > 0 goto label5;

        $z1 = 1;

        goto label6;

     label5:
        $z1 = 0;

     label6:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4);

        $r6[0] = $r7;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "too many occurrences: %s", $r6);

        virtualinvoke $r10.<com.mycila.inject.internal.guava.collect.Count: int getAndAdd(int)>(i0);

     label7:
        $l8 = r2.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size>;

        $l9 = (long) i0;

        $l10 = $l8 + $l9;

        r2.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size> = $l10;

        return i7;
    }

    public int remove(java.lang.Object, int)
    {
        java.lang.Object[] $r0;
        long $l3, $l4, $l5;
        java.lang.Integer $r1;
        com.mycila.inject.internal.guava.collect.Count $r7;
        java.util.Map $r4, $r6;
        int i0, $i1, $i2, $i6, i7;
        boolean $z0;
        java.lang.Object r3, $r5;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r2;

        r2 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        r3 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if i0 != 0 goto label1;

        $i6 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: int count(java.lang.Object)>(r3);

        return $i6;

     label1:
        if i0 <= 0 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        $r0 = newarray (java.lang.Object)[1];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "occurrences cannot be negative: %s", $r0);

        $r4 = r2.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r7 = (com.mycila.inject.internal.guava.collect.Count) $r5;

        if $r7 != null goto label4;

        return 0;

     label4:
        $i1 = virtualinvoke $r7.<com.mycila.inject.internal.guava.collect.Count: int get()>();

        if $i1 <= i0 goto label5;

        i7 = i0;

        goto label6;

     label5:
        i7 = $i1;

        $r6 = r2.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

     label6:
        $i2 = neg i7;

        virtualinvoke $r7.<com.mycila.inject.internal.guava.collect.Count: int addAndGet(int)>($i2);

        $l4 = r2.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size>;

        $l3 = (long) i7;

        $l5 = $l4 - $l3;

        r2.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size> = $l5;

        return $i1;
    }

    public int setCount(java.lang.Object, int)
    {
        long $l2, $l4, $l5;
        com.mycila.inject.internal.guava.collect.Count $r4, r8, r9;
        java.util.Map $r2, $r5, $r6;
        int i0, i1, $i3;
        java.lang.Object r1, $r3, $r7;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        r1 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        staticinvoke <com.mycila.inject.internal.guava.collect.Multisets: void checkNonnegative(int,java.lang.String)>(i0, "count");

        if i0 != 0 goto label1;

        $r6 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r8 = (com.mycila.inject.internal.guava.collect.Count) $r7;

        i1 = staticinvoke <com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: int getAndSet(com.mycila.inject.internal.guava.collect.Count,int)>(r8, i0);

        goto label2;

     label1:
        $r2 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r9 = (com.mycila.inject.internal.guava.collect.Count) $r3;

        i1 = staticinvoke <com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: int getAndSet(com.mycila.inject.internal.guava.collect.Count,int)>(r9, i0);

        if r9 != null goto label2;

        $r5 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        $r4 = new com.mycila.inject.internal.guava.collect.Count;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.Count: void <init>(int)>(i0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label2:
        $l2 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size>;

        $i3 = i0 - i1;

        $l4 = (long) $i3;

        $l5 = $l2 + $l4;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size> = $l5;

        return i1;
    }

    private static int getAndSet(com.mycila.inject.internal.guava.collect.Count, int)
    {
        int i0, $i1;
        com.mycila.inject.internal.guava.collect.Count r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.Count;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        return 0;

     label1:
        $i1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.Count: int getAndSet(int)>(i0);

        return $i1;
    }

    private int removeAllOccurrences(java.lang.Object, java.util.Map)
    {
        long $l1, $l2, $l3;
        com.mycila.inject.internal.guava.collect.Count r3;
        java.util.Map r0;
        int $i0;
        java.lang.Object r1, $r2;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r4;

        r4 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        r1 := @parameter0: java.lang.Object;

        r0 := @parameter1: java.util.Map;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r3 = (com.mycila.inject.internal.guava.collect.Count) $r2;

        if r3 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r3.<com.mycila.inject.internal.guava.collect.Count: int getAndSet(int)>(0);

        $l2 = r4.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size>;

        $l1 = (long) $i0;

        $l3 = $l2 - $l1;

        r4.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size> = $l3;

        return $i0;
    }

    java.util.Set createElementSet()
    {
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$MapBasedElementSet $r0;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r1;
        java.util.Map $r2;

        r1 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        $r0 = new com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$MapBasedElementSet;

        $r2 = r1.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset$MapBasedElementSet: void <init>(com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset,java.util.Map)>(r1, $r2);

        return $r0;
    }

    private void readObjectNoData() throws java.io.ObjectStreamException
    {
        java.io.InvalidObjectException $r0;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        $r0 = new java.io.InvalidObjectException;

        specialinvoke $r0.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Stream data required");

        throw $r0;
    }

    static java.util.Map access$000(com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset)
    {
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r0;
        java.util.Map $r1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: java.util.Map backingMap>;

        return $r1;
    }

    static long access$122(com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset, long)
    {
        long l0, $l1, $l2;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        l0 := @parameter1: long;

        $l1 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size>;

        $l2 = $l1 - l0;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size> = $l2;

        return $l2;
    }

    static long access$110(com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset)
    {
        long $l0, $l1;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        $l0 = r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size>;

        $l1 = $l0 - 1L;

        r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long size> = $l1;

        return $l0;
    }

    static int access$200(com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset, java.lang.Object, java.util.Map)
    {
        java.util.Map r2;
        int $i0;
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset r0;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.util.Map;

        $i0 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: int removeAllOccurrences(java.lang.Object,java.util.Map)>(r1, r2);

        return $i0;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.AbstractMapBasedMultiset: long serialVersionUID> = -2250766705698539974L;

        return;
    }
}
