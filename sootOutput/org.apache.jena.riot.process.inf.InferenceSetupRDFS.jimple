public class org.apache.jena.riot.process.inf.InferenceSetupRDFS extends java.lang.Object
{
    final java.util.Map transClasses;
    final java.util.Map transProperties;
    final java.util.Map domainList;
    final java.util.Map rangeList;

    public void <init>(com.hp.hpl.jena.rdf.model.Model)
    {
        org.apache.jena.riot.process.inf.InferenceSetupRDFS r0;
        java.util.HashMap $r1, $r2, $r3, $r4;
        java.util.Map $r6, $r7, $r8, $r9;
        com.hp.hpl.jena.rdf.model.Model r5;

        r0 := @this: org.apache.jena.riot.process.inf.InferenceSetupRDFS;

        r5 := @parameter0: com.hp.hpl.jena.rdf.model.Model;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jena.riot.process.inf.InferenceSetupRDFS: java.util.Map transClasses> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jena.riot.process.inf.InferenceSetupRDFS: java.util.Map transProperties> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jena.riot.process.inf.InferenceSetupRDFS: java.util.Map domainList> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jena.riot.process.inf.InferenceSetupRDFS: java.util.Map rangeList> = $r4;

        $r6 = r0.<org.apache.jena.riot.process.inf.InferenceSetupRDFS: java.util.Map transClasses>;

        staticinvoke <org.apache.jena.riot.process.inf.InferenceSetupRDFS: void exec(java.lang.String,com.hp.hpl.jena.rdf.model.Model,java.util.Map)>("SELECT ?x ?y { ?x rdfs:subClassOf+ ?y }", r5, $r6);

        $r7 = r0.<org.apache.jena.riot.process.inf.InferenceSetupRDFS: java.util.Map transProperties>;

        staticinvoke <org.apache.jena.riot.process.inf.InferenceSetupRDFS: void exec(java.lang.String,com.hp.hpl.jena.rdf.model.Model,java.util.Map)>("SELECT ?x ?y { ?x rdfs:subPropertyOf+ ?y }", r5, $r7);

        $r8 = r0.<org.apache.jena.riot.process.inf.InferenceSetupRDFS: java.util.Map domainList>;

        staticinvoke <org.apache.jena.riot.process.inf.InferenceSetupRDFS: void exec(java.lang.String,com.hp.hpl.jena.rdf.model.Model,java.util.Map)>("SELECT ?x ?y { ?x rdfs:domain ?y }", r5, $r8);

        $r9 = r0.<org.apache.jena.riot.process.inf.InferenceSetupRDFS: java.util.Map rangeList>;

        staticinvoke <org.apache.jena.riot.process.inf.InferenceSetupRDFS: void exec(java.lang.String,com.hp.hpl.jena.rdf.model.Model,java.util.Map)>("SELECT ?x ?y { ?x rdfs:range ?y }", r5, $r9);

        return;
    }

    private static void exec(java.lang.String, com.hp.hpl.jena.rdf.model.Model, java.util.Map)
    {
        com.hp.hpl.jena.query.Query $r9;
        com.hp.hpl.jena.query.Syntax $r8;
        java.lang.String[] $r0;
        com.hp.hpl.jena.graph.Node $r15, $r17;
        java.util.ArrayList $r21;
        java.util.Map r18;
        java.lang.String $r1, r5, $r7;
        boolean $z0, $z1;
        com.hp.hpl.jena.rdf.model.RDFNode $r14, $r16;
        com.hp.hpl.jena.query.ResultSet $r12;
        java.util.List $r20;
        com.hp.hpl.jena.query.QuerySolution $r13;
        com.hp.hpl.jena.rdf.model.Model r10;
        java.lang.StringBuilder $r2, $r3, $r4, $r6;
        java.lang.Object $r19;
        com.hp.hpl.jena.query.QueryExecution $r11;

        r5 := @parameter0: java.lang.String;

        r10 := @parameter1: com.hp.hpl.jena.rdf.model.Model;

        r18 := @parameter2: java.util.Map;

        $r0 = newarray (java.lang.String)[5];

        $r0[0] = "PREFIX  rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#>";

        $r0[1] = "PREFIX  rdfs:   <http://www.w3.org/2000/01/rdf-schema#>";

        $r0[2] = "PREFIX  xsd:    <http://www.w3.org/2001/XMLSchema#>";

        $r0[3] = "PREFIX  owl:    <http://www.w3.org/2002/07/owl#>";

        $r0[4] = "PREFIX skos:    <http://www.w3.org/2004/02/skos/core#>";

        $r1 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: java.lang.String strjoinNL(java.lang.String[])>($r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8 = <com.hp.hpl.jena.query.Syntax: com.hp.hpl.jena.query.Syntax syntaxARQ>;

        $r9 = staticinvoke <com.hp.hpl.jena.query.QueryFactory: com.hp.hpl.jena.query.Query create(java.lang.String,com.hp.hpl.jena.query.Syntax)>($r7, $r8);

        $r11 = staticinvoke <com.hp.hpl.jena.query.QueryExecutionFactory: com.hp.hpl.jena.query.QueryExecution create(com.hp.hpl.jena.query.Query,com.hp.hpl.jena.rdf.model.Model)>($r9, r10);

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.query.QueryExecution: com.hp.hpl.jena.query.ResultSet execSelect()>();

     label1:
        $z0 = interfaceinvoke $r12.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r13 = interfaceinvoke $r12.<com.hp.hpl.jena.query.ResultSet: com.hp.hpl.jena.query.QuerySolution next()>();

        $r14 = interfaceinvoke $r13.<com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.RDFNode get(java.lang.String)>("x");

        $r15 = interfaceinvoke $r14.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.graph.Node asNode()>();

        $r16 = interfaceinvoke $r13.<com.hp.hpl.jena.query.QuerySolution: com.hp.hpl.jena.rdf.model.RDFNode get(java.lang.String)>("y");

        $r17 = interfaceinvoke $r16.<com.hp.hpl.jena.rdf.model.RDFNode: com.hp.hpl.jena.graph.Node asNode()>();

        $z1 = interfaceinvoke r18.<java.util.Map: boolean containsKey(java.lang.Object)>($r15);

        if $z1 != 0 goto label2;

        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        interfaceinvoke r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r21);

     label2:
        $r19 = interfaceinvoke r18.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15);

        $r20 = (java.util.List) $r19;

        interfaceinvoke $r20.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label1;

     label3:
        return;
    }
}
