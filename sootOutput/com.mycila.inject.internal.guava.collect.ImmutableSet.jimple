public abstract class com.mycila.inject.internal.guava.collect.ImmutableSet extends com.mycila.inject.internal.guava.collect.ImmutableCollection implements java.util.Set
{
    static final int MAX_TABLE_SIZE;
    static final int CUTOFF;

    public static com.mycila.inject.internal.guava.collect.ImmutableSet of()
    {
        com.mycila.inject.internal.guava.collect.EmptyImmutableSet $r0;

        $r0 = <com.mycila.inject.internal.guava.collect.EmptyImmutableSet: com.mycila.inject.internal.guava.collect.EmptyImmutableSet INSTANCE>;

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSet of(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet $r0;
        java.lang.Object r1;

        r1 := @parameter0: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: void <init>(java.lang.Object)>(r1);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSet of(java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object r1, r2;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r3;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = r1;

        $r0[1] = r2;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet construct(java.lang.Object[])>($r0);

        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSet of(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object r1, r2, r3;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r4;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet construct(java.lang.Object[])>($r0);

        return $r4;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSet of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object r1, r2, r3, r4;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r5;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r0 = newarray (java.lang.Object)[4];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r0[3] = r4;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet construct(java.lang.Object[])>($r0);

        return $r5;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSet of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object r1, r2, r3, r4, r5;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r6;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        $r0 = newarray (java.lang.Object)[5];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r0[3] = r4;

        $r0[4] = r5;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet construct(java.lang.Object[])>($r0);

        return $r6;
    }

    public static transient com.mycila.inject.internal.guava.collect.ImmutableSet of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object r2, r3, r4, r5, r6, r7, $r9;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r8;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        r5 := @parameter3: java.lang.Object;

        r6 := @parameter4: java.lang.Object;

        r7 := @parameter5: java.lang.Object;

        r0 := @parameter6: java.lang.Object[];

        $i0 = lengthof r0;

        $i1 = 6 + $i0;

        r1 = newarray (java.lang.Object)[$i1];

        r1[0] = r2;

        r1[1] = r3;

        r1[2] = r4;

        r1[3] = r5;

        r1[4] = r6;

        r1[5] = r7;

        i4 = 6;

     label1:
        $i2 = lengthof r1;

        if i4 >= $i2 goto label2;

        $i3 = i4 - 6;

        $r9 = r0[$i3];

        r1[i4] = $r9;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet construct(java.lang.Object[])>(r1);

        return $r8;
    }

    private static transient com.mycila.inject.internal.guava.collect.ImmutableSet construct(java.lang.Object[])
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableSet $r4;
        java.lang.Object[] r0, r1, $r10;
        java.util.ArrayList $r6, r8;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        boolean $z0;
        com.mycila.inject.internal.guava.collect.RegularImmutableSet $r2;
        java.lang.Object $r5, r7, r9, r11;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r3;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        $i1 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: int chooseTableSize(int)>($i0);

        r1 = newarray (java.lang.Object)[$i1];

        i2 = $i1 - 1;

        r8 = null;

        i11 = 0;

        i12 = 0;

     label01:
        $i3 = lengthof r0;

        if i12 >= $i3 goto label09;

        r9 = r0[i12];

        $i8 = virtualinvoke r9.<java.lang.Object: int hashCode()>();

        i13 = staticinvoke <com.mycila.inject.internal.guava.collect.Hashing: int smear(int)>($i8);

     label02:
        $i9 = i13 & i2;

        $r5 = r1[$i9];

        if $r5 != null goto label04;

        if r8 == null goto label03;

        virtualinvoke r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r9);

     label03:
        r1[$i9] = r9;

        i11 = i11 + $i8;

        goto label08;

     label04:
        $z0 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>(r9);

        if $z0 == 0 goto label07;

        if r8 != null goto label08;

        $r6 = new java.util.ArrayList;

        $i10 = lengthof r0;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>($i10);

        r8 = $r6;

        i14 = 0;

     label05:
        if i14 >= i12 goto label06;

        r7 = r0[i14];

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

        i14 = i14 + 1;

        goto label05;

     label06:
        goto label08;

     label07:
        i13 = i13 + 1;

        goto label02;

     label08:
        i12 = i12 + 1;

        goto label01;

     label09:
        if r8 != null goto label10;

        $r10 = r0;

        goto label11;

     label10:
        $r10 = virtualinvoke r8.<java.util.ArrayList: java.lang.Object[] toArray()>();

     label11:
        $i4 = lengthof $r10;

        if $i4 != 1 goto label12;

        r11 = $r10[0];

        $r4 = new com.mycila.inject.internal.guava.collect.SingletonImmutableSet;

        specialinvoke $r4.<com.mycila.inject.internal.guava.collect.SingletonImmutableSet: void <init>(java.lang.Object,int)>(r11, i11);

        return $r4;

     label12:
        $i5 = lengthof $r10;

        $i6 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: int chooseTableSize(int)>($i5);

        $i7 = 2 * $i6;

        if $i1 <= $i7 goto label13;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet construct(java.lang.Object[])>($r10);

        return $r3;

     label13:
        $r2 = new com.mycila.inject.internal.guava.collect.RegularImmutableSet;

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.RegularImmutableSet: void <init>(java.lang.Object[],int,java.lang.Object[],int)>($r10, i11, r1, i2);

        return $r2;
    }

    static int chooseTableSize(int)
    {
        int i0, $i1, $i2;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 >= 536870912 goto label1;

        $i1 = staticinvoke <java.lang.Integer: int highestOneBit(int)>(i0);

        $i2 = $i1 << 2;

        return $i2;

     label1:
        if i0 >= 1073741824 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "collection too large");

        return 1073741824;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSet of(java.lang.Object[])
    {
        java.lang.Object[] r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet copyOf(java.lang.Object[])>(r0);

        return $r1;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSet copyOf(java.lang.Object[])
    {
        java.lang.Object[] r0, $r5;
        int $i0;
        java.lang.Object $r1, $r4;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r2, $r3, $r6;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        lookupswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet of()>();

        return $r3;

     label2:
        $r1 = r0[0];

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet of(java.lang.Object)>($r1);

        return $r2;

     label3:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (java.lang.Object[]) $r4;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet construct(java.lang.Object[])>($r5);

        return $r6;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSet copyOf(java.lang.Iterable)
    {
        java.util.Iterator $r1;
        java.util.Collection $r2;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r3;
        java.lang.Iterable r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Iterable;

        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Collections2: java.util.Collection cast(java.lang.Iterable)>(r0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet copyOf(java.util.Collection)>($r2);

        goto label2;

     label1:
        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet copyOf(java.util.Iterator)>($r1);

     label2:
        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSet copyOf(java.util.Iterator)
    {
        java.util.Iterator r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r2;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet copyFromCollection(java.util.Collection)>($r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSet copyOf(java.util.Collection)
    {
        java.util.Collection r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet r1, $r2;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.ImmutableSet;

        if $z0 == 0 goto label1;

        $z1 = r0 instanceof com.mycila.inject.internal.guava.collect.ImmutableSortedSet;

        if $z1 != 0 goto label1;

        r1 = (com.mycila.inject.internal.guava.collect.ImmutableSet) r0;

        $z2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ImmutableSet: boolean isPartialView()>();

        if $z2 != 0 goto label1;

        return r1;

     label1:
        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet copyFromCollection(java.util.Collection)>(r0);

        return $r2;
    }

    private static com.mycila.inject.internal.guava.collect.ImmutableSet copyFromCollection(java.util.Collection)
    {
        java.lang.Object[] $r1;
        java.util.Collection r0;
        int $i0;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r3, $r4, $r5;

        r0 := @parameter0: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray()>();

        $i0 = lengthof $r1;

        lookupswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet of()>();

        return $r4;

     label2:
        r2 = $r1[0];

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet of(java.lang.Object)>(r2);

        return $r3;

     label3:
        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.ImmutableSet construct(java.lang.Object[])>($r1);

        return $r5;
    }

    void <init>()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSet;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableCollection: void <init>()>();

        return;
    }

    boolean isHashCodeFast()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSet;

        return 0;
    }

    public boolean equals(java.lang.Object)
    {
        int $i0, $i1;
        java.lang.Object r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet r1, $r2;
        boolean $z0, $z1, $z2, $z3;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableSet;

        r0 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.ImmutableSet;

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ImmutableSet: boolean isHashCodeFast()>();

        if $z1 == 0 goto label2;

        $r2 = (com.mycila.inject.internal.guava.collect.ImmutableSet) r0;

        $z2 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableSet: boolean isHashCodeFast()>();

        if $z2 == 0 goto label2;

        $i0 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ImmutableSet: int hashCode()>();

        $i1 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        if $i0 == $i1 goto label2;

        return 0;

     label2:
        $z3 = staticinvoke <com.mycila.inject.internal.guava.collect.Sets: boolean equalsImpl(java.util.Set,java.lang.Object)>(r1, r0);

        return $z3;
    }

    public int hashCode()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.ImmutableSet r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSet;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Sets: int hashCodeImpl(java.util.Set)>(r0);

        return $i0;
    }

    public abstract com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator();

    java.lang.Object writeReplace()
    {
        java.lang.Object[] $r2;
        com.mycila.inject.internal.guava.collect.ImmutableSet$SerializedForm $r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableSet;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableSet$SerializedForm;

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ImmutableSet: java.lang.Object[] toArray()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSet$SerializedForm: void <init>(java.lang.Object[])>($r2);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableSet$Builder builder()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSet$Builder $r0;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableSet$Builder;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableSet$Builder: void <init>()>();

        return $r0;
    }

    public volatile java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.ImmutableSet r0;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableSet;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableSet: com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.ImmutableSet: int CUTOFF> = 536870912;

        <com.mycila.inject.internal.guava.collect.ImmutableSet: int MAX_TABLE_SIZE> = 1073741824;

        return;
    }
}
