public class org.apache.poi.ss.usermodel.DataFormatter extends java.lang.Object
{
    private static final java.lang.String defaultFractionWholePartFormat;
    private static final java.lang.String defaultFractionFractionPartFormat;
    private static final java.util.regex.Pattern numPattern;
    private static final java.util.regex.Pattern daysAsText;
    private static final java.util.regex.Pattern amPmPattern;
    private static final java.util.regex.Pattern localePatternGroup;
    private static final java.util.regex.Pattern colorPattern;
    private static final java.util.regex.Pattern fractionPattern;
    private static final java.util.regex.Pattern fractionStripper;
    private static final java.lang.String invalidDateTimeString;
    private final java.text.DecimalFormatSymbols decimalSymbols;
    private final java.text.DateFormatSymbols dateSymbols;
    private final java.text.Format generalWholeNumFormat;
    private final java.text.Format generalDecimalNumFormat;
    private java.text.Format defaultNumFormat;
    private final java.util.Map formats;
    private boolean emulateCsv;

    public void <init>()
    {
        org.apache.poi.ss.usermodel.DataFormatter r0;

        r0 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        specialinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: void <init>(boolean)>(0);

        return;
    }

    public void <init>(boolean)
    {
        java.util.Locale $r1;
        org.apache.poi.ss.usermodel.DataFormatter r0;
        boolean z0;

        r0 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        specialinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: void <init>(java.util.Locale)>($r1);

        r0.<org.apache.poi.ss.usermodel.DataFormatter: boolean emulateCsv> = z0;

        return;
    }

    public void <init>(java.util.Locale, boolean)
    {
        java.util.Locale r1;
        org.apache.poi.ss.usermodel.DataFormatter r0;
        boolean z0;

        r0 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r1 := @parameter0: java.util.Locale;

        z0 := @parameter1: boolean;

        specialinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: void <init>(java.util.Locale)>(r1);

        r0.<org.apache.poi.ss.usermodel.DataFormatter: boolean emulateCsv> = z0;

        return;
    }

    public void <init>(java.util.Locale)
    {
        java.text.Format r9, r10, r11;
        java.text.DecimalFormatSymbols $r3, $r5, $r7;
        java.text.DecimalFormat $r4, $r6;
        java.util.HashMap $r8;
        java.text.DateFormatSymbols $r1;
        java.util.Locale r2;
        org.apache.poi.ss.usermodel.DataFormatter r0;

        r0 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r2 := @parameter0: java.util.Locale;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.poi.ss.usermodel.DataFormatter: boolean emulateCsv> = 0;

        $r1 = new java.text.DateFormatSymbols;

        specialinvoke $r1.<java.text.DateFormatSymbols: void <init>(java.util.Locale)>(r2);

        r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.DateFormatSymbols dateSymbols> = $r1;

        $r3 = new java.text.DecimalFormatSymbols;

        specialinvoke $r3.<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>(r2);

        r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.DecimalFormatSymbols decimalSymbols> = $r3;

        $r4 = new java.text.DecimalFormat;

        $r5 = r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.DecimalFormatSymbols decimalSymbols>;

        specialinvoke $r4.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>("#", $r5);

        r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format generalWholeNumFormat> = $r4;

        $r6 = new java.text.DecimalFormat;

        $r7 = r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.DecimalFormatSymbols decimalSymbols>;

        specialinvoke $r6.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>("#.##########", $r7);

        r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format generalDecimalNumFormat> = $r6;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<org.apache.poi.ss.usermodel.DataFormatter: java.util.Map formats> = $r8;

        r9 = <org.apache.poi.ss.usermodel.DataFormatter$ZipPlusFourFormat: java.text.Format instance>;

        virtualinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: void addFormat(java.lang.String,java.text.Format)>("00000\\-0000", r9);

        virtualinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: void addFormat(java.lang.String,java.text.Format)>("00000-0000", r9);

        r10 = <org.apache.poi.ss.usermodel.DataFormatter$PhoneFormat: java.text.Format instance>;

        virtualinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: void addFormat(java.lang.String,java.text.Format)>("[<=9999999]###\\-####;\\(###\\)\\ ###\\-####", r10);

        virtualinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: void addFormat(java.lang.String,java.text.Format)>("[<=9999999]###-####;(###) ###-####", r10);

        virtualinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: void addFormat(java.lang.String,java.text.Format)>("###\\-####;\\(###\\)\\ ###\\-####", r10);

        virtualinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: void addFormat(java.lang.String,java.text.Format)>("###-####;(###) ###-####", r10);

        r11 = <org.apache.poi.ss.usermodel.DataFormatter$SSNFormat: java.text.Format instance>;

        virtualinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: void addFormat(java.lang.String,java.text.Format)>("000\\-00\\-0000", r11);

        virtualinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: void addFormat(java.lang.String,java.text.Format)>("000-00-0000", r11);

        return;
    }

    private java.text.Format getFormat(org.apache.poi.ss.usermodel.Cell)
    {
        java.text.Format $r7;
        short $s0;
        org.apache.poi.ss.usermodel.DataFormatter r6;
        org.apache.poi.ss.usermodel.Cell r0;
        int $i1, $i2;
        java.lang.String $r4, $r5;
        org.apache.poi.ss.usermodel.CellStyle $r1, $r2, $r3;
        double $d0;

        r6 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r0 := @parameter0: org.apache.poi.ss.usermodel.Cell;

        $r1 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: org.apache.poi.ss.usermodel.CellStyle getCellStyle()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: org.apache.poi.ss.usermodel.CellStyle getCellStyle()>();

        $s0 = interfaceinvoke $r2.<org.apache.poi.ss.usermodel.CellStyle: short getDataFormat()>();

        $r3 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: org.apache.poi.ss.usermodel.CellStyle getCellStyle()>();

        $r4 = interfaceinvoke $r3.<org.apache.poi.ss.usermodel.CellStyle: java.lang.String getDataFormatString()>();

        if $r4 == null goto label2;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $i1 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i1 != 0 goto label3;

     label2:
        return null;

     label3:
        $d0 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: double getNumericCellValue()>();

        $i2 = (int) $s0;

        $r7 = specialinvoke r6.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format getFormat(double,int,java.lang.String)>($d0, $i2, $r4);

        return $r7;
    }

    private java.text.Format getFormat(double, int, java.lang.String)
    {
        java.text.Format $r3, $r4, $r6, $r11;
        byte $b3, $b6, $b8;
        org.apache.poi.ss.usermodel.DataFormatter r1;
        java.util.Map $r7, $r9;
        int $i0, $i1, i2, $i4, $i5, $i7, $i9, $i11;
        java.lang.String r0, $r2, $r5, r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        double d0;
        java.lang.Object $r10;

        r1 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        d0 := @parameter0: double;

        i2 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        r8 = r0;

        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(59);

        $i1 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(59);

        $i11 = (int) -1;

        if $i0 == $i11 goto label4;

        if $i0 == $i1 goto label4;

        $i4 = $i0 + 1;

        $i5 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(59, $i4);

        if $i5 != $i1 goto label2;

        $b8 = d0 cmpl 0.0;

        if $b8 != 0 goto label1;

        $i9 = $i1 + 1;

        r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i9);

        goto label4;

     label1:
        r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        goto label4;

     label2:
        $b6 = d0 cmpl 0.0;

        if $b6 != 0 goto label3;

        $i7 = $i5 + 1;

        r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>($i7, $i1);

        goto label4;

     label3:
        r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i5);

     label4:
        $z5 = r1.<org.apache.poi.ss.usermodel.DataFormatter: boolean emulateCsv>;

        if $z5 == 0 goto label5;

        $b3 = d0 cmpl 0.0;

        if $b3 != 0 goto label5;

        $z3 = virtualinvoke r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("#");

        if $z3 == 0 goto label5;

        $z4 = virtualinvoke r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("0");

        if $z4 != 0 goto label5;

        r8 = virtualinvoke r8.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("#", "");

     label5:
        $r9 = r1.<org.apache.poi.ss.usermodel.DataFormatter: java.util.Map formats>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        $r11 = (java.text.Format) $r10;

        if $r11 == null goto label6;

        return $r11;

     label6:
        $r2 = "General";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r8);

        if $z0 != 0 goto label7;

        $r5 = "@";

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z2 == 0 goto label9;

     label7:
        $z1 = staticinvoke <org.apache.poi.ss.usermodel.DataFormatter: boolean isWholeNumber(double)>(d0);

        if $z1 == 0 goto label8;

        $r4 = r1.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format generalWholeNumFormat>;

        return $r4;

     label8:
        $r3 = r1.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format generalDecimalNumFormat>;

        return $r3;

     label9:
        $r6 = specialinvoke r1.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format createFormat(double,int,java.lang.String)>(d0, i2, r8);

        $r7 = r1.<org.apache.poi.ss.usermodel.DataFormatter: java.util.Map formats>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r6);

        return $r6;
    }

    public java.text.Format createFormat(org.apache.poi.ss.usermodel.Cell)
    {
        java.text.Format $r5;
        short $s0;
        org.apache.poi.ss.usermodel.DataFormatter r4;
        org.apache.poi.ss.usermodel.Cell r0;
        int $i1;
        java.lang.String $r3;
        org.apache.poi.ss.usermodel.CellStyle $r1, $r2;
        double $d0;

        r4 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r0 := @parameter0: org.apache.poi.ss.usermodel.Cell;

        $r1 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: org.apache.poi.ss.usermodel.CellStyle getCellStyle()>();

        $s0 = interfaceinvoke $r1.<org.apache.poi.ss.usermodel.CellStyle: short getDataFormat()>();

        $r2 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: org.apache.poi.ss.usermodel.CellStyle getCellStyle()>();

        $r3 = interfaceinvoke $r2.<org.apache.poi.ss.usermodel.CellStyle: java.lang.String getDataFormatString()>();

        $d0 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: double getNumericCellValue()>();

        $i1 = (int) $s0;

        $r5 = specialinvoke r4.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format createFormat(double,int,java.lang.String)>($d0, $i1, $r3);

        return $r5;
    }

    private java.text.Format createFormat(double, int, java.lang.String)
    {
        java.text.Format $r3, $r6, $r7, $r26, $r27;
        java.util.regex.Matcher $r14, $r18, $r23, r44, r46;
        org.apache.poi.ss.usermodel.DataFormatter$ConstantStringFormat $r53;
        java.lang.StringBuilder $r38, $r40, $r49;
        java.lang.StringBuffer $r50;
        org.apache.poi.ss.usermodel.FractionFormat $r51, $r52;
        java.lang.String r0, $r4, $r5, $r8, $r11, $r12, $r15, $r16, $r19, $r21, $r25, $r28, $r29, $r30, $r33, $r34, $r35, $r37, $r39, $r41, r43, r47, $r48;
        org.apache.poi.ss.usermodel.DataFormatter r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.util.regex.Pattern $r1, $r13, $r17, $r22, $r31, $r42, $r45;
        java.lang.String[] $r9;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, $i15, $i17, $i19;
        double d0;

        r2 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        d0 := @parameter0: double;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        r43 = r0;

        $r1 = <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern colorPattern>;

        r44 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

     label01:
        $z0 = virtualinvoke r44.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label04;

        $r35 = virtualinvoke r44.<java.util.regex.Matcher: java.lang.String group()>();

        $i11 = virtualinvoke r43.<java.lang.String: int indexOf(java.lang.String)>($r35);

        $i17 = (int) -1;

        if $i11 != $i17 goto label02;

        goto label04;

     label02:
        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r37 = virtualinvoke r43.<java.lang.String: java.lang.String substring(int,int)>(0, $i11);

        $r38 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $i12 = virtualinvoke $r35.<java.lang.String: int length()>();

        $i13 = $i11 + $i12;

        $r39 = virtualinvoke r43.<java.lang.String: java.lang.String substring(int)>($i13);

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $z9 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>(r43);

        if $z9 == 0 goto label03;

        goto label04;

     label03:
        r43 = $r41;

        $r42 = <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern colorPattern>;

        r44 = virtualinvoke $r42.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r41);

        goto label01;

     label04:
        $r45 = <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern localePatternGroup>;

        r46 = virtualinvoke $r45.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r43);

     label05:
        $z10 = virtualinvoke r46.<java.util.regex.Matcher: boolean find()>();

        if $z10 == 0 goto label07;

        $r28 = virtualinvoke r46.<java.util.regex.Matcher: java.lang.String group()>();

        $i4 = virtualinvoke $r28.<java.lang.String: int indexOf(int)>(36);

        $i5 = $i4 + 1;

        $i6 = virtualinvoke $r28.<java.lang.String: int indexOf(int)>(45);

        $r29 = virtualinvoke $r28.<java.lang.String: java.lang.String substring(int,int)>($i5, $i6);

        r47 = $r29;

        $i7 = virtualinvoke $r29.<java.lang.String: int indexOf(int)>(36);

        $i19 = (int) -1;

        if $i7 <= $i19 goto label06;

        $r50 = new java.lang.StringBuffer;

        specialinvoke $r50.<java.lang.StringBuffer: void <init>()>();

        $i8 = virtualinvoke $r29.<java.lang.String: int indexOf(int)>(36);

        $r33 = virtualinvoke $r29.<java.lang.String: java.lang.String substring(int,int)>(0, $i8);

        virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

        $i9 = virtualinvoke $r29.<java.lang.String: int indexOf(int)>(36);

        $i10 = virtualinvoke $r29.<java.lang.String: int length()>();

        $r34 = virtualinvoke $r29.<java.lang.String: java.lang.String substring(int,int)>($i9, $i10);

        virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        r47 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.String toString()>();

     label06:
        $r30 = virtualinvoke r46.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(r47);

        r43 = $r30;

        $r31 = <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern localePatternGroup>;

        r46 = virtualinvoke $r31.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r30);

        goto label05;

     label07:
        if r43 == null goto label08;

        $r4 = virtualinvoke r43.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        if $i0 != 0 goto label09;

     label08:
        $r3 = specialinvoke r2.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format getDefaultFormat(double)>(d0);

        return $r3;

     label09:
        $r5 = "General";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r43);

        if $z1 != 0 goto label10;

        $r8 = "@";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r43);

        if $z3 == 0 goto label12;

     label10:
        $z2 = staticinvoke <org.apache.poi.ss.usermodel.DataFormatter: boolean isWholeNumber(double)>(d0);

        if $z2 == 0 goto label11;

        $r7 = r2.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format generalWholeNumFormat>;

        return $r7;

     label11:
        $r6 = r2.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format generalDecimalNumFormat>;

        return $r6;

     label12:
        $z4 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: boolean isADateFormat(int,java.lang.String)>(i1, r43);

        if $z4 == 0 goto label13;

        $z8 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: boolean isValidExcelDate(double)>(d0);

        if $z8 == 0 goto label13;

        $r27 = specialinvoke r2.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format createDateFormat(java.lang.String,double)>(r43, d0);

        return $r27;

     label13:
        $i2 = virtualinvoke r43.<java.lang.String: int indexOf(java.lang.String)>("#/");

        if $i2 >= 0 goto label14;

        $i3 = virtualinvoke r43.<java.lang.String: int indexOf(java.lang.String)>("?/");

        if $i3 < 0 goto label20;

     label14:
        $r9 = virtualinvoke r43.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        i14 = 0;

     label15:
        $i15 = lengthof $r9;

        if i14 >= $i15 goto label19;

        $r11 = $r9[i14];

        $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\?", "#");

        $r13 = <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern fractionStripper>;

        $r14 = virtualinvoke $r13.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r12);

        $r15 = virtualinvoke $r14.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(" ");

        $r16 = virtualinvoke $r15.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(" +", " ");

        $r17 = <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern fractionPattern>;

        $r18 = virtualinvoke $r17.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r16);

        $z5 = virtualinvoke $r18.<java.util.regex.Matcher: boolean find()>();

        if $z5 == 0 goto label18;

        $r19 = virtualinvoke $r18.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        if $r19 != null goto label16;

        $r48 = "";

        goto label17;

     label16:
        $r48 = "#";

     label17:
        $r51 = new org.apache.poi.ss.usermodel.FractionFormat;

        $r21 = virtualinvoke $r18.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        specialinvoke $r51.<org.apache.poi.ss.usermodel.FractionFormat: void <init>(java.lang.String,java.lang.String)>($r48, $r21);

        return $r51;

     label18:
        i14 = i14 + 1;

        goto label15;

     label19:
        $r52 = new org.apache.poi.ss.usermodel.FractionFormat;

        specialinvoke $r52.<org.apache.poi.ss.usermodel.FractionFormat: void <init>(java.lang.String,java.lang.String)>("#", "#/##");

        return $r52;

     label20:
        $r22 = <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern numPattern>;

        $r23 = virtualinvoke $r22.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r43);

        $z6 = virtualinvoke $r23.<java.util.regex.Matcher: boolean find()>();

        if $z6 == 0 goto label21;

        $r26 = specialinvoke r2.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format createNumberFormat(java.lang.String,double)>(r43, d0);

        return $r26;

     label21:
        $z7 = r2.<org.apache.poi.ss.usermodel.DataFormatter: boolean emulateCsv>;

        if $z7 == 0 goto label22;

        $r53 = new org.apache.poi.ss.usermodel.DataFormatter$ConstantStringFormat;

        $r25 = specialinvoke r2.<org.apache.poi.ss.usermodel.DataFormatter: java.lang.String cleanFormatForNumber(java.lang.String)>(r43);

        specialinvoke $r53.<org.apache.poi.ss.usermodel.DataFormatter$ConstantStringFormat: void <init>(java.lang.String)>($r25);

        return $r53;

     label22:
        return null;
    }

    private java.text.Format createDateFormat(java.lang.String, double)
    {
        java.text.Format $r30;
        java.lang.Integer $r21, $r23;
        java.util.regex.Matcher $r13, r32;
        java.util.ArrayList $r35;
        java.lang.StringBuffer $r34;
        java.lang.String r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r11, $r17, $r24, $r25, $r26, $r27, r31, r33;
        char[] $r15;
        org.apache.poi.ss.usermodel.ExcelStyleDateFormatter $r36;
        org.apache.poi.ss.usermodel.DataFormatter r19;
        boolean $z0, $z1, $z2, z3, z4, z5, z6, z7, z8;
        java.util.regex.Pattern $r10, $r12, $r28;
        int $i0, $i1, $i2, $i4, $i5, i6, $i7, i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32;
        double d0;
        char $c3, c8, c9;
        java.lang.IllegalArgumentException $r29;
        java.text.DateFormatSymbols $r20;
        java.lang.Object $r22;

        r19 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r0 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\-", "-");

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\,", ",");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\\\.", ".");

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\ ", " ");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\/", "/");

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(";@", "");

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\"/\"", "/");

        $r8 = virtualinvoke $r7.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\"\"", "\'");

        $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\\\T", "\'T\'");

        r31 = $r9;

        z3 = 0;

        $r10 = <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern amPmPattern>;

        r32 = virtualinvoke $r10.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r9);

     label01:
        $z0 = virtualinvoke r32.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label02;

        $r27 = virtualinvoke r32.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("@");

        r31 = $r27;

        z3 = 1;

        $r28 = <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern amPmPattern>;

        r32 = virtualinvoke $r28.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r27);

        goto label01;

     label02:
        $r11 = virtualinvoke r31.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("@", "a");

        r33 = $r11;

        $r12 = <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern daysAsText>;

        $r13 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r11);

        $z1 = virtualinvoke $r13.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label03;

        $r24 = virtualinvoke $r13.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $r25 = virtualinvoke $r24.<java.lang.String: java.lang.String toUpperCase()>();

        $r26 = virtualinvoke $r25.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("D", "E");

        r33 = virtualinvoke $r13.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r26);

     label03:
        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r15 = virtualinvoke r33.<java.lang.String: char[] toCharArray()>();

        z4 = 1;

        $r35 = new java.util.ArrayList;

        specialinvoke $r35.<java.util.ArrayList: void <init>()>();

        z5 = 0;

        z8 = 0;

        z7 = 0;

        z6 = 0;

        i6 = 0;

     label04:
        $i7 = lengthof $r15;

        if i6 >= $i7 goto label34;

        c8 = $r15[i6];

        $i12 = (int) c8;

        if $i12 != 39 goto label07;

        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c8);

        i6 = i6 + 1;

     label05:
        $i5 = lengthof $r15;

        if i6 >= $i5 goto label33;

        c9 = $r15[i6];

        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c9);

        $i13 = (int) c9;

        if $i13 != 39 goto label06;

        goto label33;

     label06:
        i6 = i6 + 1;

        goto label05;

     label07:
        $i14 = (int) c8;

        if $i14 != 91 goto label08;

        if z7 != 0 goto label08;

        z5 = 1;

        z8 = 1;

        z7 = 1;

        z6 = 1;

        z4 = 0;

        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c8);

        goto label33;

     label08:
        $i15 = (int) c8;

        if $i15 != 93 goto label09;

        if z6 == 0 goto label09;

        z5 = 0;

        z8 = 0;

        z7 = 0;

        z6 = 0;

        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c8);

        goto label33;

     label09:
        if z8 == 0 goto label16;

        $i16 = (int) c8;

        if $i16 == 104 goto label10;

        $i17 = (int) c8;

        if $i17 != 72 goto label11;

     label10:
        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(72);

        goto label33;

     label11:
        $i18 = (int) c8;

        if $i18 == 109 goto label12;

        $i19 = (int) c8;

        if $i19 != 77 goto label13;

     label12:
        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(109);

        goto label33;

     label13:
        $i20 = (int) c8;

        if $i20 == 115 goto label14;

        $i21 = (int) c8;

        if $i21 != 83 goto label15;

     label14:
        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(115);

        goto label33;

     label15:
        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c8);

        goto label33;

     label16:
        $i22 = (int) c8;

        if $i22 == 104 goto label17;

        $i23 = (int) c8;

        if $i23 != 72 goto label19;

     label17:
        z4 = 0;

        if z3 == 0 goto label18;

        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(104);

        goto label33;

     label18:
        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(72);

        goto label33;

     label19:
        $i24 = (int) c8;

        if $i24 == 109 goto label20;

        $i25 = (int) c8;

        if $i25 != 77 goto label22;

     label20:
        if z4 == 0 goto label21;

        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(77);

        $i0 = virtualinvoke $r34.<java.lang.StringBuffer: int length()>();

        $i1 = $i0 - 1;

        $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r35.<java.util.List: boolean add(java.lang.Object)>($r21);

        goto label33;

     label21:
        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(109);

        goto label33;

     label22:
        $i26 = (int) c8;

        if $i26 == 115 goto label23;

        $i27 = (int) c8;

        if $i27 != 83 goto label27;

     label23:
        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(115);

        i10 = 0;

     label24:
        $i11 = interfaceinvoke $r35.<java.util.List: int size()>();

        if i10 >= $i11 goto label26;

        $r22 = interfaceinvoke $r35.<java.util.List: java.lang.Object get(int)>(i10);

        $r23 = (java.lang.Integer) $r22;

        $i2 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        $c3 = virtualinvoke $r34.<java.lang.StringBuffer: char charAt(int)>($i2);

        $i28 = (int) $c3;

        if $i28 != 77 goto label25;

        $i4 = $i2 + 1;

        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)>($i2, $i4, "m");

     label25:
        i10 = i10 + 1;

        goto label24;

     label26:
        z4 = 1;

        interfaceinvoke $r35.<java.util.List: void clear()>();

        goto label33;

     label27:
        $z2 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c8);

        if $z2 == 0 goto label32;

        z4 = 1;

        interfaceinvoke $r35.<java.util.List: void clear()>();

        $i29 = (int) c8;

        if $i29 == 121 goto label28;

        $i30 = (int) c8;

        if $i30 != 89 goto label29;

     label28:
        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(121);

        goto label33;

     label29:
        $i31 = (int) c8;

        if $i31 == 100 goto label30;

        $i32 = (int) c8;

        if $i32 != 68 goto label31;

     label30:
        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(100);

        goto label33;

     label31:
        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c8);

        goto label33;

     label32:
        virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c8);

     label33:
        i6 = i6 + 1;

        goto label04;

     label34:
        $r17 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.String toString()>();

     label35:
        $r36 = new org.apache.poi.ss.usermodel.ExcelStyleDateFormatter;

        $r20 = r19.<org.apache.poi.ss.usermodel.DataFormatter: java.text.DateFormatSymbols dateSymbols>;

        specialinvoke $r36.<org.apache.poi.ss.usermodel.ExcelStyleDateFormatter: void <init>(java.lang.String,java.text.DateFormatSymbols)>($r17, $r20);

     label36:
        return $r36;

     label37:
        $r29 := @caughtexception;

        $r30 = specialinvoke r19.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format getDefaultFormat(double)>(d0);

        return $r30;

        catch java.lang.IllegalArgumentException from label35 to label36 with label37;
    }

    private java.lang.String cleanFormatForNumber(java.lang.String)
    {
        org.apache.poi.ss.usermodel.DataFormatter r2;
        boolean $z0;
        java.lang.StringBuffer $r4;
        int $i0, $i2, $i5, $i6, $i7, $i8, $i10, $i12, $i13, $i14, $i15, $i16, i18, i19, i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $i32, $i34, $i35, $i36, $i38, $i39, $i40, $i42;
        java.lang.String r1, $r3;
        char $c1, $c3, $c4, $c9, $c11, $c17;

        r2 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r1 := @parameter0: java.lang.String;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>(java.lang.String)>(r1);

        $z0 = r2.<org.apache.poi.ss.usermodel.DataFormatter: boolean emulateCsv>;

        if $z0 == 0 goto label09;

        i18 = 0;

     label01:
        $i10 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        if i18 >= $i10 goto label08;

        $c11 = virtualinvoke $r4.<java.lang.StringBuffer: char charAt(int)>(i18);

        $i22 = (int) $c11;

        if $i22 == 95 goto label02;

        $i23 = (int) $c11;

        if $i23 == 42 goto label02;

        $i24 = (int) $c11;

        if $i24 != 63 goto label07;

     label02:
        if i18 <= 0 goto label03;

        $i16 = i18 - 1;

        $c17 = virtualinvoke $r4.<java.lang.StringBuffer: char charAt(int)>($i16);

        $i25 = (int) $c17;

        if $i25 != 92 goto label03;

        goto label07;

     label03:
        $i26 = (int) $c11;

        if $i26 != 63 goto label04;

        virtualinvoke $r4.<java.lang.StringBuffer: void setCharAt(int,char)>(i18, 32);

        goto label07;

     label04:
        $i12 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        $i13 = $i12 - 1;

        if i18 >= $i13 goto label07;

        $i27 = (int) $c11;

        if $i27 != 95 goto label05;

        $i15 = i18 + 1;

        virtualinvoke $r4.<java.lang.StringBuffer: void setCharAt(int,char)>($i15, 32);

        goto label06;

     label05:
        $i14 = i18 + 1;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>($i14);

     label06:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>(i18);

        $i29 = (int) -1;

        i18 = i18 + $i29;

     label07:
        i18 = i18 + 1;

        goto label01;

     label08:
        goto label15;

     label09:
        i19 = 0;

     label10:
        $i0 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        if i19 >= $i0 goto label15;

        $c4 = virtualinvoke $r4.<java.lang.StringBuffer: char charAt(int)>(i19);

        $i30 = (int) $c4;

        if $i30 == 95 goto label11;

        $i31 = (int) $c4;

        if $i31 != 42 goto label14;

     label11:
        if i19 <= 0 goto label12;

        $i8 = i19 - 1;

        $c9 = virtualinvoke $r4.<java.lang.StringBuffer: char charAt(int)>($i8);

        $i32 = (int) $c9;

        if $i32 != 92 goto label12;

        goto label14;

     label12:
        $i5 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        $i6 = $i5 - 1;

        if i19 >= $i6 goto label13;

        $i7 = i19 + 1;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>($i7);

     label13:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>(i19);

        $i34 = (int) -1;

        i19 = i19 + $i34;

     label14:
        i19 = i19 + 1;

        goto label10;

     label15:
        i20 = 0;

     label16:
        $i21 = virtualinvoke $r4.<java.lang.StringBuffer: int length()>();

        if i20 >= $i21 goto label20;

        $c1 = virtualinvoke $r4.<java.lang.StringBuffer: char charAt(int)>(i20);

        $i35 = (int) $c1;

        if $i35 == 92 goto label17;

        $i36 = (int) $c1;

        if $i36 != 34 goto label18;

     label17:
        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>(i20);

        $i38 = (int) -1;

        i20 = i20 + $i38;

        goto label19;

     label18:
        $i39 = (int) $c1;

        if $i39 != 43 goto label19;

        if i20 <= 0 goto label19;

        $i2 = i20 - 1;

        $c3 = virtualinvoke $r4.<java.lang.StringBuffer: char charAt(int)>($i2);

        $i40 = (int) $c3;

        if $i40 != 69 goto label19;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)>(i20);

        $i42 = (int) -1;

        i20 = i20 + $i42;

     label19:
        i20 = i20 + 1;

        goto label16;

     label20:
        $r3 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r3;
    }

    private java.text.Format createNumberFormat(java.lang.String, double)
    {
        java.text.Format $r6;
        java.text.DecimalFormatSymbols $r4;
        java.text.DecimalFormat $r3;
        java.lang.IllegalArgumentException $r5;
        org.apache.poi.ss.usermodel.DataFormatter r0;
        java.lang.String r1, $r2;
        double d0;

        r0 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        $r2 = specialinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: java.lang.String cleanFormatForNumber(java.lang.String)>(r1);

     label1:
        $r3 = new java.text.DecimalFormat;

        $r4 = r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.DecimalFormatSymbols decimalSymbols>;

        specialinvoke $r3.<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>($r2, $r4);

        staticinvoke <org.apache.poi.ss.usermodel.DataFormatter: void setExcelStyleRoundingMode(java.text.DecimalFormat)>($r3);

     label2:
        return $r3;

     label3:
        $r5 := @caughtexception;

        $r6 = specialinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format getDefaultFormat(double)>(d0);

        return $r6;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private static boolean isWholeNumber(double)
    {
        byte $b0;
        double d0, $d1;
        boolean $z0;

        d0 := @parameter0: double;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>(d0);

        $b0 = d0 cmpl $d1;

        if $b0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.text.Format getDefaultFormat(org.apache.poi.ss.usermodel.Cell)
    {
        java.text.Format $r2;
        org.apache.poi.ss.usermodel.DataFormatter r0;
        org.apache.poi.ss.usermodel.Cell r1;
        double $d0;

        r0 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r1 := @parameter0: org.apache.poi.ss.usermodel.Cell;

        $d0 = interfaceinvoke r1.<org.apache.poi.ss.usermodel.Cell: double getNumericCellValue()>();

        $r2 = specialinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format getDefaultFormat(double)>($d0);

        return $r2;
    }

    private java.text.Format getDefaultFormat(double)
    {
        java.text.Format $r1, $r2, $r3, $r4;
        org.apache.poi.ss.usermodel.DataFormatter r0;
        double d0;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        d0 := @parameter0: double;

        $r1 = r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format defaultNumFormat>;

        if $r1 == null goto label1;

        $r4 = r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format defaultNumFormat>;

        return $r4;

     label1:
        $z0 = staticinvoke <org.apache.poi.ss.usermodel.DataFormatter: boolean isWholeNumber(double)>(d0);

        if $z0 == 0 goto label2;

        $r3 = r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format generalWholeNumFormat>;

        return $r3;

     label2:
        $r2 = r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format generalDecimalNumFormat>;

        return $r2;
    }

    private java.lang.String performDateFormatting(java.util.Date, java.text.Format)
    {
        java.text.Format r0;
        java.util.Date r1;
        org.apache.poi.ss.usermodel.DataFormatter r4;
        java.lang.String $r2, $r3;

        r4 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r1 := @parameter0: java.util.Date;

        r0 := @parameter1: java.text.Format;

        if r0 == null goto label1;

        $r3 = virtualinvoke r0.<java.text.Format: java.lang.String format(java.lang.Object)>(r1);

        return $r3;

     label1:
        $r2 = virtualinvoke r1.<java.util.Date: java.lang.String toString()>();

        return $r2;
    }

    private java.lang.String getFormattedDateString(org.apache.poi.ss.usermodel.Cell)
    {
        java.text.Format $r2;
        java.util.Date $r3;
        org.apache.poi.ss.usermodel.ExcelStyleDateFormatter $r5;
        org.apache.poi.ss.usermodel.DataFormatter r0;
        org.apache.poi.ss.usermodel.Cell r1;
        java.lang.String $r4;
        boolean $z0;
        double $d0;

        r0 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r1 := @parameter0: org.apache.poi.ss.usermodel.Cell;

        $r2 = specialinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format getFormat(org.apache.poi.ss.usermodel.Cell)>(r1);

        $z0 = $r2 instanceof org.apache.poi.ss.usermodel.ExcelStyleDateFormatter;

        if $z0 == 0 goto label1;

        $r5 = (org.apache.poi.ss.usermodel.ExcelStyleDateFormatter) $r2;

        $d0 = interfaceinvoke r1.<org.apache.poi.ss.usermodel.Cell: double getNumericCellValue()>();

        virtualinvoke $r5.<org.apache.poi.ss.usermodel.ExcelStyleDateFormatter: void setDateToBeFormatted(double)>($d0);

     label1:
        $r3 = interfaceinvoke r1.<org.apache.poi.ss.usermodel.Cell: java.util.Date getDateCellValue()>();

        $r4 = specialinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: java.lang.String performDateFormatting(java.util.Date,java.text.Format)>($r3, $r2);

        return $r4;
    }

    private java.lang.String getFormattedNumberString(org.apache.poi.ss.usermodel.Cell)
    {
        java.text.Format $r2;
        java.lang.Double $r3;
        org.apache.poi.ss.usermodel.DataFormatter r0;
        org.apache.poi.ss.usermodel.Cell r1;
        java.lang.String $r4, $r5;
        double $d0;

        r0 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r1 := @parameter0: org.apache.poi.ss.usermodel.Cell;

        $r2 = specialinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format getFormat(org.apache.poi.ss.usermodel.Cell)>(r1);

        $d0 = interfaceinvoke r1.<org.apache.poi.ss.usermodel.Cell: double getNumericCellValue()>();

        if $r2 != null goto label1;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>($d0);

        return $r5;

     label1:
        $r3 = new java.lang.Double;

        specialinvoke $r3.<java.lang.Double: void <init>(double)>($d0);

        $r4 = virtualinvoke $r2.<java.text.Format: java.lang.String format(java.lang.Object)>($r3);

        return $r4;
    }

    public java.lang.String formatRawCellContents(double, int, java.lang.String)
    {
        org.apache.poi.ss.usermodel.DataFormatter r0;
        int i0;
        java.lang.String r1, $r2;
        double d0;

        r0 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = virtualinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: java.lang.String formatRawCellContents(double,int,java.lang.String,boolean)>(d0, i0, r1, 0);

        return $r2;
    }

    public java.lang.String formatRawCellContents(double, int, java.lang.String, boolean)
    {
        java.text.Format $r2, $r7;
        java.lang.Double $r3;
        java.util.Date $r8;
        org.apache.poi.ss.usermodel.ExcelStyleDateFormatter $r10;
        org.apache.poi.ss.usermodel.DataFormatter r1;
        int i0;
        java.lang.String r0, $r4, $r5, $r6, $r9, r11;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        double d0;

        r1 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        d0 := @parameter0: double;

        i0 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        z6 := @parameter3: boolean;

        $z0 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: boolean isADateFormat(int,java.lang.String)>(i0, r0);

        if $z0 == 0 goto label3;

        $z3 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: boolean isValidExcelDate(double)>(d0);

        if $z3 == 0 goto label2;

        $r7 = specialinvoke r1.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format getFormat(double,int,java.lang.String)>(d0, i0, r0);

        $z5 = $r7 instanceof org.apache.poi.ss.usermodel.ExcelStyleDateFormatter;

        if $z5 == 0 goto label1;

        $r10 = (org.apache.poi.ss.usermodel.ExcelStyleDateFormatter) $r7;

        virtualinvoke $r10.<org.apache.poi.ss.usermodel.ExcelStyleDateFormatter: void setDateToBeFormatted(double)>(d0);

     label1:
        $r8 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: java.util.Date getJavaDate(double,boolean)>(d0, z6);

        $r9 = specialinvoke r1.<org.apache.poi.ss.usermodel.DataFormatter: java.lang.String performDateFormatting(java.util.Date,java.text.Format)>($r8, $r7);

        return $r9;

     label2:
        $z4 = r1.<org.apache.poi.ss.usermodel.DataFormatter: boolean emulateCsv>;

        if $z4 == 0 goto label3;

        $r6 = <org.apache.poi.ss.usermodel.DataFormatter: java.lang.String invalidDateTimeString>;

        return $r6;

     label3:
        $r2 = specialinvoke r1.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format getFormat(double,int,java.lang.String)>(d0, i0, r0);

        if $r2 != null goto label4;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(double)>(d0);

        return $r5;

     label4:
        $r3 = new java.lang.Double;

        specialinvoke $r3.<java.lang.Double: void <init>(double)>(d0);

        $r4 = virtualinvoke $r2.<java.text.Format: java.lang.String format(java.lang.Object)>($r3);

        r11 = $r4;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("E");

        if $z1 == 0 goto label5;

        $z2 = virtualinvoke $r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("E-");

        if $z2 != 0 goto label5;

        r11 = virtualinvoke $r4.<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>("E", "E+");

     label5:
        return r11;
    }

    public java.lang.String formatCellValue(org.apache.poi.ss.usermodel.Cell)
    {
        org.apache.poi.ss.usermodel.Cell r1;
        java.lang.String $r2;
        org.apache.poi.ss.usermodel.DataFormatter r0;

        r0 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r1 := @parameter0: org.apache.poi.ss.usermodel.Cell;

        $r2 = virtualinvoke r0.<org.apache.poi.ss.usermodel.DataFormatter: java.lang.String formatCellValue(org.apache.poi.ss.usermodel.Cell,org.apache.poi.ss.usermodel.FormulaEvaluator)>(r1, null);

        return $r2;
    }

    public java.lang.String formatCellValue(org.apache.poi.ss.usermodel.Cell, org.apache.poi.ss.usermodel.FormulaEvaluator)
    {
        byte $b1;
        org.apache.poi.ss.usermodel.DataFormatter r6;
        org.apache.poi.ss.usermodel.Cell r0;
        int $i0, i2;
        java.lang.String $r2, $r3, $r5, $r7, $r8, $r14, $r16;
        boolean $z0, $z1;
        org.apache.poi.ss.usermodel.RichTextString $r4;
        java.lang.RuntimeException $r9;
        org.apache.poi.ss.usermodel.FormulaEvaluator r15;
        java.lang.StringBuilder $r10, $r11, $r12, $r13;
        org.apache.poi.ss.usermodel.FormulaError $r1;

        r6 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r0 := @parameter0: org.apache.poi.ss.usermodel.Cell;

        r15 := @parameter1: org.apache.poi.ss.usermodel.FormulaEvaluator;

        if r0 != null goto label01;

        return "";

     label01:
        $i0 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: int getCellType()>();

        i2 = $i0;

        if $i0 != 2 goto label03;

        if r15 != null goto label02;

        $r16 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: java.lang.String getCellFormula()>();

        return $r16;

     label02:
        i2 = interfaceinvoke r15.<org.apache.poi.ss.usermodel.FormulaEvaluator: int evaluateFormulaCell(org.apache.poi.ss.usermodel.Cell)>(r0);

     label03:
        tableswitch(i2)
        {
            case 0: goto label04;
            case 1: goto label06;
            case 2: goto label10;
            case 3: goto label08;
            case 4: goto label07;
            case 5: goto label09;
            default: goto label10;
        };

     label04:
        $z1 = staticinvoke <org.apache.poi.ss.usermodel.DateUtil: boolean isCellDateFormatted(org.apache.poi.ss.usermodel.Cell)>(r0);

        if $z1 == 0 goto label05;

        $r8 = specialinvoke r6.<org.apache.poi.ss.usermodel.DataFormatter: java.lang.String getFormattedDateString(org.apache.poi.ss.usermodel.Cell)>(r0);

        return $r8;

     label05:
        $r7 = specialinvoke r6.<org.apache.poi.ss.usermodel.DataFormatter: java.lang.String getFormattedNumberString(org.apache.poi.ss.usermodel.Cell)>(r0);

        return $r7;

     label06:
        $r4 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: org.apache.poi.ss.usermodel.RichTextString getRichStringCellValue()>();

        $r5 = interfaceinvoke $r4.<org.apache.poi.ss.usermodel.RichTextString: java.lang.String getString()>();

        return $r5;

     label07:
        $z0 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: boolean getBooleanCellValue()>();

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z0);

        return $r3;

     label08:
        return "";

     label09:
        $b1 = interfaceinvoke r0.<org.apache.poi.ss.usermodel.Cell: byte getErrorCellValue()>();

        $r1 = staticinvoke <org.apache.poi.ss.usermodel.FormulaError: org.apache.poi.ss.usermodel.FormulaError forInt(byte)>($b1);

        $r2 = virtualinvoke $r1.<org.apache.poi.ss.usermodel.FormulaError: java.lang.String getString()>();

        return $r2;

     label10:
        $r9 = new java.lang.RuntimeException;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected celltype (");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        throw $r9;
    }

    public void setDefaultNumberFormat(java.text.Format)
    {
        java.util.Map$Entry r6;
        java.text.Format r4, $r8, $r10;
        java.util.Iterator $r3;
        java.util.Set $r2;
        org.apache.poi.ss.usermodel.DataFormatter r0;
        java.util.Map $r1;
        java.lang.Object $r5, $r7, $r9;
        boolean $z0;

        r0 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r4 := @parameter0: java.text.Format;

        $r1 = r0.<org.apache.poi.ss.usermodel.DataFormatter: java.util.Map formats>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.util.Map$Entry) $r5;

        $r7 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format generalDecimalNumFormat>;

        if $r7 == $r8 goto label2;

        $r9 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format generalWholeNumFormat>;

        if $r9 != $r10 goto label3;

     label2:
        interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object setValue(java.lang.Object)>(r4);

     label3:
        goto label1;

     label4:
        r0.<org.apache.poi.ss.usermodel.DataFormatter: java.text.Format defaultNumFormat> = r4;

        return;
    }

    public void addFormat(java.lang.String, java.text.Format)
    {
        java.text.Format r2;
        org.apache.poi.ss.usermodel.DataFormatter r0;
        java.util.Map $r3;
        java.lang.String r1;

        r0 := @this: org.apache.poi.ss.usermodel.DataFormatter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.text.Format;

        $r3 = r0.<org.apache.poi.ss.usermodel.DataFormatter: java.util.Map formats>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    static java.text.DecimalFormat createIntegerOnlyFormat(java.lang.String)
    {
        java.text.DecimalFormat $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.text.DecimalFormat;

        specialinvoke $r0.<java.text.DecimalFormat: void <init>(java.lang.String)>(r1);

        virtualinvoke $r0.<java.text.DecimalFormat: void setParseIntegerOnly(boolean)>(1);

        return $r0;
    }

    public static void setExcelStyleRoundingMode(java.text.DecimalFormat)
    {
        java.text.DecimalFormat r0;
        java.math.RoundingMode $r1;

        r0 := @parameter0: java.text.DecimalFormat;

        $r1 = <java.math.RoundingMode: java.math.RoundingMode HALF_UP>;

        staticinvoke <org.apache.poi.ss.usermodel.DataFormatter: void setExcelStyleRoundingMode(java.text.DecimalFormat,java.math.RoundingMode)>(r0, $r1);

        return;
    }

    public static void setExcelStyleRoundingMode(java.text.DecimalFormat, java.math.RoundingMode)
    {
        java.text.DecimalFormat r0;
        java.math.RoundingMode r1;

        r0 := @parameter0: java.text.DecimalFormat;

        r1 := @parameter1: java.math.RoundingMode;

        virtualinvoke r0.<java.text.DecimalFormat: void setRoundingMode(java.math.RoundingMode)>(r1);

        return;
    }

    static void <clinit>()
    {
        int i0;
        java.lang.StringBuilder $r7;
        java.util.regex.Pattern $r0, $r1, $r2, $r3, $r4, $r5, $r6;
        java.lang.String $r8;

        <org.apache.poi.ss.usermodel.DataFormatter: java.lang.String defaultFractionFractionPartFormat> = "#/##";

        <org.apache.poi.ss.usermodel.DataFormatter: java.lang.String defaultFractionWholePartFormat> = "#";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[0#]+");

        <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern numPattern> = $r0;

        $r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("([d]{3,})", 2);

        <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern daysAsText> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("((A|P)[M/P]*)", 2);

        <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern amPmPattern> = $r2;

        $r3 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\[\\$[^-\\]]*-[0-9A-Z]+\\])");

        <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern localePatternGroup> = $r3;

        $r4 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("(\\[BLACK\\])|(\\[BLUE\\])|(\\[CYAN\\])|(\\[GREEN\\])|(\\[MAGENTA\\])|(\\[RED\\])|(\\[WHITE\\])|(\\[YELLOW\\])|(\\[COLOR\\s*\\d\\])|(\\[COLOR\\s*[0-5]\\d\\])", 2);

        <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern colorPattern> = $r4;

        $r5 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?:([#\\d]+)\\s+)?(#+)\\s*\\/\\s*([#\\d]+)");

        <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern fractionPattern> = $r5;

        $r6 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\"[^\"]*\")|([^ \\?#\\d\\/]+)");

        <org.apache.poi.ss.usermodel.DataFormatter: java.util.regex.Pattern fractionStripper> = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        i0 = 0;

     label1:
        if i0 >= 255 goto label2;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(35);

        i0 = i0 + 1;

        goto label1;

     label2:
        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        <org.apache.poi.ss.usermodel.DataFormatter: java.lang.String invalidDateTimeString> = $r8;

        return;
    }
}
