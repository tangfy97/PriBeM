public class org.codehaus.jackson.util.JsonParserSequence extends org.codehaus.jackson.util.JsonParserDelegate
{
    protected final org.codehaus.jackson.JsonParser[] _parsers;
    protected int _nextParser;

    protected void <init>(org.codehaus.jackson.JsonParser[])
    {
        org.codehaus.jackson.JsonParser[] r1;
        org.codehaus.jackson.util.JsonParserSequence r0;
        org.codehaus.jackson.JsonParser $r2;

        r0 := @this: org.codehaus.jackson.util.JsonParserSequence;

        r1 := @parameter0: org.codehaus.jackson.JsonParser[];

        $r2 = r1[0];

        specialinvoke r0.<org.codehaus.jackson.util.JsonParserDelegate: void <init>(org.codehaus.jackson.JsonParser)>($r2);

        r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser[] _parsers> = r1;

        r0.<org.codehaus.jackson.util.JsonParserSequence: int _nextParser> = 1;

        return;
    }

    public static org.codehaus.jackson.util.JsonParserSequence createFlattened(org.codehaus.jackson.JsonParser, org.codehaus.jackson.JsonParser)
    {
        java.lang.Object[] $r5;
        org.codehaus.jackson.JsonParser[] $r4, $r6, $r10;
        java.util.ArrayList $r1;
        int $i0;
        org.codehaus.jackson.JsonParser r0, r2;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.jackson.util.JsonParserSequence $r3, $r7, $r8, $r9;

        r0 := @parameter0: org.codehaus.jackson.JsonParser;

        r2 := @parameter1: org.codehaus.jackson.JsonParser;

        $z0 = r0 instanceof org.codehaus.jackson.util.JsonParserSequence;

        if $z0 != 0 goto label1;

        $z3 = r2 instanceof org.codehaus.jackson.util.JsonParserSequence;

        if $z3 != 0 goto label1;

        $r9 = new org.codehaus.jackson.util.JsonParserSequence;

        $r10 = newarray (org.codehaus.jackson.JsonParser)[2];

        $r10[0] = r0;

        $r10[1] = r2;

        specialinvoke $r9.<org.codehaus.jackson.util.JsonParserSequence: void <init>(org.codehaus.jackson.JsonParser[])>($r10);

        return $r9;

     label1:
        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $z1 = r0 instanceof org.codehaus.jackson.util.JsonParserSequence;

        if $z1 == 0 goto label2;

        $r8 = (org.codehaus.jackson.util.JsonParserSequence) r0;

        virtualinvoke $r8.<org.codehaus.jackson.util.JsonParserSequence: void addFlattenedActiveParsers(java.util.List)>($r1);

        goto label3;

     label2:
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label3:
        $z2 = r2 instanceof org.codehaus.jackson.util.JsonParserSequence;

        if $z2 == 0 goto label4;

        $r7 = (org.codehaus.jackson.util.JsonParserSequence) r2;

        virtualinvoke $r7.<org.codehaus.jackson.util.JsonParserSequence: void addFlattenedActiveParsers(java.util.List)>($r1);

        goto label5;

     label4:
        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label5:
        $r3 = new org.codehaus.jackson.util.JsonParserSequence;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        $r4 = newarray (org.codehaus.jackson.JsonParser)[$i0];

        $r5 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (org.codehaus.jackson.JsonParser[]) $r5;

        specialinvoke $r3.<org.codehaus.jackson.util.JsonParserSequence: void <init>(org.codehaus.jackson.JsonParser[])>($r6);

        return $r3;
    }

    protected void addFlattenedActiveParsers(java.util.List)
    {
        org.codehaus.jackson.util.JsonParserSequence r0, $r5;
        org.codehaus.jackson.JsonParser[] $r1, $r2;
        java.util.List r4;
        int $i0, i1, i2;
        org.codehaus.jackson.JsonParser r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.JsonParserSequence;

        r4 := @parameter0: java.util.List;

        $i0 = r0.<org.codehaus.jackson.util.JsonParserSequence: int _nextParser>;

        i2 = $i0 - 1;

        $r1 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser[] _parsers>;

        i1 = lengthof $r1;

     label1:
        if i2 >= i1 goto label4;

        $r2 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser[] _parsers>;

        r3 = $r2[i2];

        $z0 = r3 instanceof org.codehaus.jackson.util.JsonParserSequence;

        if $z0 == 0 goto label2;

        $r5 = (org.codehaus.jackson.util.JsonParserSequence) r3;

        virtualinvoke $r5.<org.codehaus.jackson.util.JsonParserSequence: void addFlattenedActiveParsers(java.util.List)>(r4);

        goto label3;

     label2:
        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r3);

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    public void close() throws java.io.IOException
    {
        org.codehaus.jackson.util.JsonParserSequence r0;
        org.codehaus.jackson.JsonParser $r1;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.JsonParserSequence;

     label1:
        $r1 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser delegate>;

        virtualinvoke $r1.<org.codehaus.jackson.JsonParser: void close()>();

        $z0 = virtualinvoke r0.<org.codehaus.jackson.util.JsonParserSequence: boolean switchToNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public org.codehaus.jackson.JsonToken nextToken() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.util.JsonParserSequence r0;
        org.codehaus.jackson.JsonToken $r2, $r4;
        org.codehaus.jackson.JsonParser $r1, $r3;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.util.JsonParserSequence;

        $r1 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser delegate>;

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        if $r2 == null goto label1;

        return $r2;

     label1:
        $z0 = virtualinvoke r0.<org.codehaus.jackson.util.JsonParserSequence: boolean switchToNext()>();

        if $z0 == 0 goto label2;

        $r3 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser delegate>;

        $r4 = virtualinvoke $r3.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        if $r4 == null goto label1;

        return $r4;

     label2:
        return null;
    }

    public int containedParsersCount()
    {
        int $i0;
        org.codehaus.jackson.JsonParser[] $r1;
        org.codehaus.jackson.util.JsonParserSequence r0;

        r0 := @this: org.codehaus.jackson.util.JsonParserSequence;

        $r1 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser[] _parsers>;

        $i0 = lengthof $r1;

        return $i0;
    }

    protected boolean switchToNext()
    {
        org.codehaus.jackson.util.JsonParserSequence r0;
        org.codehaus.jackson.JsonParser[] $r1, $r2;
        int $i0, $i1, $i2, $i3;
        org.codehaus.jackson.JsonParser $r3;

        r0 := @this: org.codehaus.jackson.util.JsonParserSequence;

        $i1 = r0.<org.codehaus.jackson.util.JsonParserSequence: int _nextParser>;

        $r1 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser[] _parsers>;

        $i0 = lengthof $r1;

        if $i1 < $i0 goto label1;

        return 0;

     label1:
        $r2 = r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser[] _parsers>;

        $i2 = r0.<org.codehaus.jackson.util.JsonParserSequence: int _nextParser>;

        $i3 = $i2 + 1;

        r0.<org.codehaus.jackson.util.JsonParserSequence: int _nextParser> = $i3;

        $r3 = $r2[$i2];

        r0.<org.codehaus.jackson.util.JsonParserSequence: org.codehaus.jackson.JsonParser delegate> = $r3;

        return 1;
    }
}
