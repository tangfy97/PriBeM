public abstract class com.google.gxp.compiler.base.Expression extends com.google.gxp.compiler.base.AbstractNode
{
    private final com.google.gxp.compiler.schema.Schema schema;

    protected void <init>(com.google.gxp.compiler.alerts.SourcePosition, java.lang.String, com.google.gxp.compiler.schema.Schema)
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        com.google.gxp.compiler.base.Expression r0;
        com.google.gxp.compiler.schema.Schema r3;
        java.lang.String r2;

        r0 := @this: com.google.gxp.compiler.base.Expression;

        r1 := @parameter0: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.google.gxp.compiler.schema.Schema;

        specialinvoke r0.<com.google.gxp.compiler.base.AbstractNode: void <init>(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String)>(r1, r2);

        r0.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.schema.Schema schema> = r3;

        return;
    }

    protected void <init>(com.google.gxp.compiler.base.Node, com.google.gxp.compiler.schema.Schema)
    {
        com.google.gxp.compiler.base.Expression r0;
        com.google.gxp.compiler.schema.Schema r2;
        com.google.gxp.compiler.base.Node r1;

        r0 := @this: com.google.gxp.compiler.base.Expression;

        r1 := @parameter0: com.google.gxp.compiler.base.Node;

        r2 := @parameter1: com.google.gxp.compiler.schema.Schema;

        specialinvoke r0.<com.google.gxp.compiler.base.AbstractNode: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        r0.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.schema.Schema schema> = r2;

        return;
    }

    protected void <init>(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.Expression r0, r1;
        com.google.gxp.compiler.schema.Schema $r2;

        r0 := @this: com.google.gxp.compiler.base.Expression;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        specialinvoke r0.<com.google.gxp.compiler.base.AbstractNode: void <init>(com.google.gxp.compiler.base.Node)>(r1);

        $r2 = virtualinvoke r1.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.schema.Schema getSchema()>();

        r0.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.schema.Schema schema> = $r2;

        return;
    }

    public final com.google.gxp.compiler.schema.Schema getSchema()
    {
        com.google.gxp.compiler.base.Expression r0;
        com.google.gxp.compiler.schema.Schema $r1;

        r0 := @this: com.google.gxp.compiler.base.Expression;

        $r1 = r0.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.schema.Schema schema>;

        return $r1;
    }

    public abstract java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor);

    public boolean canEvaluateAs(com.google.gxp.compiler.base.OutputLanguage)
    {
        com.google.gxp.compiler.base.Expression r0;
        com.google.gxp.compiler.base.OutputLanguage r1;

        r0 := @this: com.google.gxp.compiler.base.Expression;

        r1 := @parameter0: com.google.gxp.compiler.base.OutputLanguage;

        return 1;
    }

    public boolean alwaysEmpty()
    {
        com.google.gxp.compiler.base.Expression r0;

        r0 := @this: com.google.gxp.compiler.base.Expression;

        return 0;
    }

    public boolean alwaysOnlyWhitespace()
    {
        com.google.gxp.compiler.base.Expression r0;
        boolean $z0;

        r0 := @this: com.google.gxp.compiler.base.Expression;

        $z0 = virtualinvoke r0.<com.google.gxp.compiler.base.Expression: boolean alwaysEmpty()>();

        return $z0;
    }

    public boolean alwaysEquals(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.Expression r0, r1;

        r0 := @this: com.google.gxp.compiler.base.Expression;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        return 0;
    }

    public boolean alwaysEquals(boolean)
    {
        com.google.gxp.compiler.base.Expression r0;
        boolean z0;

        r0 := @this: com.google.gxp.compiler.base.Expression;

        z0 := @parameter0: boolean;

        return 0;
    }

    public boolean alwaysEqualToXmlEnabled()
    {
        com.google.gxp.compiler.base.Expression r0;

        r0 := @this: com.google.gxp.compiler.base.Expression;

        return 0;
    }

    public abstract boolean equals(java.lang.Object);

    protected final boolean equalsExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.Expression r0, r1;
        com.google.gxp.compiler.schema.Schema $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @this: com.google.gxp.compiler.base.Expression;

        r1 := @parameter0: com.google.gxp.compiler.base.Expression;

        $z0 = virtualinvoke r0.<com.google.gxp.compiler.base.Expression: boolean equalsAbstractNode(com.google.gxp.compiler.base.AbstractNode)>(r1);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r3 = virtualinvoke r1.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.schema.Schema getSchema()>();

        $z1 = staticinvoke <com.google.gxp.com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r2, $r3);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public abstract int hashCode();

    protected final int expressionHashCode()
    {
        com.google.gxp.compiler.base.Expression r1;
        java.lang.Object[] $r0;
        int $i0, $i1;
        com.google.gxp.compiler.schema.Schema $r3;
        java.lang.Integer $r2;

        r1 := @this: com.google.gxp.compiler.base.Expression;

        $r0 = newarray (java.lang.Object)[2];

        $i0 = virtualinvoke r1.<com.google.gxp.compiler.base.Expression: int abstractNodeHashCode()>();

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0[0] = $r2;

        $r3 = virtualinvoke r1.<com.google.gxp.compiler.base.Expression: com.google.gxp.compiler.schema.Schema getSchema()>();

        $r0[1] = $r3;

        $i1 = staticinvoke <com.google.gxp.com.google.common.base.Objects: int hashCode(java.lang.Object[])>($r0);

        return $i1;
    }

    public java.lang.String getStaticString(com.google.gxp.compiler.alerts.AlertSink, java.lang.String)
    {
        com.google.gxp.compiler.base.Expression r2;
        com.google.gxp.compiler.alerts.AlertSink r0;
        com.google.gxp.compiler.alerts.common.StaticValueExpectedError $r1;
        java.lang.String r3;

        r2 := @this: com.google.gxp.compiler.base.Expression;

        r0 := @parameter0: com.google.gxp.compiler.alerts.AlertSink;

        r3 := @parameter1: java.lang.String;

        $r1 = new com.google.gxp.compiler.alerts.common.StaticValueExpectedError;

        specialinvoke $r1.<com.google.gxp.compiler.alerts.common.StaticValueExpectedError: void <init>(com.google.gxp.compiler.base.Node)>(r2);

        interfaceinvoke r0.<com.google.gxp.compiler.alerts.AlertSink: void add(com.google.gxp.compiler.alerts.Alert)>($r1);

        return r3;
    }

    public boolean hasStaticString()
    {
        com.google.gxp.compiler.base.Expression r0;

        r0 := @this: com.google.gxp.compiler.base.Expression;

        return 0;
    }

    public java.util.List separate()
    {
        com.google.gxp.compiler.base.Expression r0;
        java.util.List $r1;

        r0 := @this: com.google.gxp.compiler.base.Expression;

        $r1 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r0);

        return $r1;
    }
}
