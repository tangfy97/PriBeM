public class org.apache.batik.css.engine.value.css2.FontSizeAdjustManager extends org.apache.batik.css.engine.value.AbstractValueManager
{

    public void <init>()
    {
        org.apache.batik.css.engine.value.css2.FontSizeAdjustManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.FontSizeAdjustManager;

        specialinvoke r0.<org.apache.batik.css.engine.value.AbstractValueManager: void <init>()>();

        return;
    }

    public boolean isInheritedProperty()
    {
        org.apache.batik.css.engine.value.css2.FontSizeAdjustManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.FontSizeAdjustManager;

        return 1;
    }

    public boolean isAnimatableProperty()
    {
        org.apache.batik.css.engine.value.css2.FontSizeAdjustManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.FontSizeAdjustManager;

        return 1;
    }

    public boolean isAdditiveProperty()
    {
        org.apache.batik.css.engine.value.css2.FontSizeAdjustManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.FontSizeAdjustManager;

        return 0;
    }

    public int getPropertyType()
    {
        org.apache.batik.css.engine.value.css2.FontSizeAdjustManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.FontSizeAdjustManager;

        return 44;
    }

    public java.lang.String getPropertyName()
    {
        org.apache.batik.css.engine.value.css2.FontSizeAdjustManager r0;

        r0 := @this: org.apache.batik.css.engine.value.css2.FontSizeAdjustManager;

        return "font-size-adjust";
    }

    public org.apache.batik.css.engine.value.Value getDefaultValue()
    {
        org.apache.batik.css.engine.value.Value $r0;
        org.apache.batik.css.engine.value.css2.FontSizeAdjustManager r1;

        r1 := @this: org.apache.batik.css.engine.value.css2.FontSizeAdjustManager;

        $r0 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NONE_VALUE>;

        return $r0;
    }

    public org.apache.batik.css.engine.value.Value createValue(org.w3c.css.sac.LexicalUnit, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        org.apache.batik.css.engine.value.css2.FontSizeAdjustManager r2;
        org.apache.batik.css.engine.CSSEngine r10;
        short $s0, $s2;
        org.w3c.dom.DOMException $r4, $r9;
        org.w3c.css.sac.LexicalUnit r0;
        int $i1, $i3;
        java.lang.String $r1, $r3;
        boolean $z0;
        org.apache.batik.css.engine.value.FloatValue $r11, $r12;
        org.apache.batik.css.engine.value.Value $r5, $r8;
        float $f0, $f1;

        r2 := @this: org.apache.batik.css.engine.value.css2.FontSizeAdjustManager;

        r0 := @parameter0: org.w3c.css.sac.LexicalUnit;

        r10 := @parameter1: org.apache.batik.css.engine.CSSEngine;

        $s0 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $i3 = (int) $s0;

        lookupswitch($i3)
        {
            case 12: goto label1;
            case 13: goto label2;
            case 14: goto label3;
            case 35: goto label4;
            default: goto label6;
        };

     label1:
        $r8 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value INHERIT_VALUE>;

        return $r8;

     label2:
        $r11 = new org.apache.batik.css.engine.value.FloatValue;

        $i1 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: int getIntegerValue()>();

        $f1 = (float) $i1;

        specialinvoke $r11.<org.apache.batik.css.engine.value.FloatValue: void <init>(short,float)>(1, $f1);

        return $r11;

     label3:
        $r12 = new org.apache.batik.css.engine.value.FloatValue;

        $f0 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: float getFloatValue()>();

        specialinvoke $r12.<org.apache.batik.css.engine.value.FloatValue: void <init>(short,float)>(1, $f0);

        return $r12;

     label4:
        $r1 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("none");

        if $z0 == 0 goto label5;

        $r5 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NONE_VALUE>;

        return $r5;

     label5:
        $r3 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: java.lang.String getStringValue()>();

        $r4 = virtualinvoke r2.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidIdentifierDOMException(java.lang.String)>($r3);

        throw $r4;

     label6:
        $s2 = interfaceinvoke r0.<org.w3c.css.sac.LexicalUnit: short getLexicalUnitType()>();

        $r9 = virtualinvoke r2.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidLexicalUnitDOMException(short)>($s2);

        throw $r9;
    }

    public org.apache.batik.css.engine.value.Value createStringValue(short, java.lang.String, org.apache.batik.css.engine.CSSEngine) throws org.w3c.dom.DOMException
    {
        org.apache.batik.css.engine.value.css2.FontSizeAdjustManager r1;
        org.apache.batik.css.engine.value.Value $r3;
        org.apache.batik.css.engine.CSSEngine r5;
        short s0;
        org.w3c.dom.DOMException $r2, $r4;
        int $i1;
        java.lang.String r0;
        boolean $z0;

        r1 := @this: org.apache.batik.css.engine.value.css2.FontSizeAdjustManager;

        s0 := @parameter0: short;

        r0 := @parameter1: java.lang.String;

        r5 := @parameter2: org.apache.batik.css.engine.CSSEngine;

        $i1 = (int) s0;

        if $i1 == 21 goto label1;

        $r4 = virtualinvoke r1.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidStringTypeDOMException(short)>(s0);

        throw $r4;

     label1:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("none");

        if $z0 == 0 goto label2;

        $r3 = <org.apache.batik.css.engine.value.ValueConstants: org.apache.batik.css.engine.value.Value NONE_VALUE>;

        return $r3;

     label2:
        $r2 = virtualinvoke r1.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidIdentifierDOMException(java.lang.String)>(r0);

        throw $r2;
    }

    public org.apache.batik.css.engine.value.Value createFloatValue(short, float) throws org.w3c.dom.DOMException
    {
        short s0;
        org.apache.batik.css.engine.value.FloatValue $r2;
        org.apache.batik.css.engine.value.css2.FontSizeAdjustManager r0;
        org.w3c.dom.DOMException $r1;
        float f0;

        r0 := @this: org.apache.batik.css.engine.value.css2.FontSizeAdjustManager;

        s0 := @parameter0: short;

        f0 := @parameter1: float;

        if s0 != 1 goto label1;

        $r2 = new org.apache.batik.css.engine.value.FloatValue;

        specialinvoke $r2.<org.apache.batik.css.engine.value.FloatValue: void <init>(short,float)>(s0, f0);

        return $r2;

     label1:
        $r1 = virtualinvoke r0.<org.apache.batik.css.engine.value.AbstractValueFactory: org.w3c.dom.DOMException createInvalidFloatTypeDOMException(short)>(s0);

        throw $r1;
    }
}
