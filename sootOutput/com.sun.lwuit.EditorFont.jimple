public class com.sun.lwuit.EditorFont extends com.sun.lwuit.Font
{
    private static java.util.Map face;
    private static java.util.Map size;
    private static java.util.Map style;
    public static final java.lang.Object[] RENDERING_HINTS;
    private com.sun.lwuit.Font systemFallback;
    private boolean includesBitmap;
    private byte[] truetypeFont;
    private java.lang.String lookupFont;
    private com.sun.lwuit.Font bestFont;
    private java.lang.Object bitmapAntialiasing;
    private java.lang.String bitmapCharset;

    public void <init>(com.sun.lwuit.Font, byte[], java.lang.String, boolean, java.lang.Object, java.lang.String)
    {
        byte[] r2;
        com.sun.lwuit.EditorFont r0;
        java.io.ByteArrayInputStream $r8;
        java.lang.String r4, r5, $r17;
        boolean z0;
        java.awt.Frame $r14;
        java.awt.Font $r9;
        java.lang.Exception $r11;
        java.awt.Frame[] $r12;
        java.lang.Object r3;
        java.lang.StringBuilder $r13, $r15, $r16;
        com.sun.lwuit.Font r1, $r6, $r7, $r10;

        r0 := @this: com.sun.lwuit.EditorFont;

        r1 := @parameter0: com.sun.lwuit.Font;

        r2 := @parameter1: byte[];

        r5 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        r3 := @parameter4: java.lang.Object;

        r4 := @parameter5: java.lang.String;

        specialinvoke r0.<com.sun.lwuit.Font: void <init>()>();

        r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font systemFallback> = r1;

        r0.<com.sun.lwuit.EditorFont: byte[] truetypeFont> = r2;

        r0.<com.sun.lwuit.EditorFont: boolean includesBitmap> = z0;

        r0.<com.sun.lwuit.EditorFont: java.lang.Object bitmapAntialiasing> = r3;

        r0.<com.sun.lwuit.EditorFont: java.lang.String bitmapCharset> = r4;

        r0.<com.sun.lwuit.EditorFont: java.lang.String lookupFont> = r5;

        if r2 == null goto label4;

     label1:
        $r8 = new java.io.ByteArrayInputStream;

        specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2);

        $r9 = staticinvoke <java.awt.Font: java.awt.Font createFont(int,java.io.InputStream)>(0, $r8);

        $r10 = new com.sun.lwuit.Font;

        specialinvoke $r10.<com.sun.lwuit.Font: void <init>(java.lang.Object)>($r9);

        r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont> = $r10;

     label2:
        return;

     label3:
        $r11 := @caughtexception;

        virtualinvoke $r11.<java.lang.Exception: void printStackTrace()>();

        $r12 = staticinvoke <java.awt.Frame: java.awt.Frame[] getFrames()>();

        $r14 = $r12[0];

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error creating font: ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object,java.lang.String,int)>($r14, $r17, "TTF Error", 0);

     label4:
        if r5 == null goto label5;

        $r6 = staticinvoke <com.sun.lwuit.Font: com.sun.lwuit.Font create(java.lang.String)>(r5);

        r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont> = $r6;

        $r7 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont>;

        if $r7 == null goto label5;

        return;

     label5:
        r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont> = r1;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public java.lang.String getBitmapCharset()
    {
        java.lang.String $r1;
        com.sun.lwuit.EditorFont r0;

        r0 := @this: com.sun.lwuit.EditorFont;

        $r1 = r0.<com.sun.lwuit.EditorFont: java.lang.String bitmapCharset>;

        return $r1;
    }

    public int getFace()
    {
        int $i0;
        com.sun.lwuit.EditorFont r0;
        com.sun.lwuit.Font $r1;

        r0 := @this: com.sun.lwuit.EditorFont;

        $r1 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font systemFallback>;

        $i0 = virtualinvoke $r1.<com.sun.lwuit.Font: int getFace()>();

        return $i0;
    }

    public java.lang.Object getBitmapAntiAliasing()
    {
        java.lang.Object $r1;
        com.sun.lwuit.EditorFont r0;

        r0 := @this: com.sun.lwuit.EditorFont;

        $r1 = r0.<com.sun.lwuit.EditorFont: java.lang.Object bitmapAntialiasing>;

        return $r1;
    }

    public int getSize()
    {
        int $i0;
        com.sun.lwuit.EditorFont r0;
        com.sun.lwuit.Font $r1;

        r0 := @this: com.sun.lwuit.EditorFont;

        $r1 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font systemFallback>;

        $i0 = virtualinvoke $r1.<com.sun.lwuit.Font: int getSize()>();

        return $i0;
    }

    public int getStyle()
    {
        int $i0;
        com.sun.lwuit.EditorFont r0;
        com.sun.lwuit.Font $r1;

        r0 := @this: com.sun.lwuit.EditorFont;

        $r1 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font systemFallback>;

        $i0 = virtualinvoke $r1.<com.sun.lwuit.Font: int getStyle()>();

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.sun.lwuit.EditorFont r1, r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r5, $r6, $r7, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object r0, $r3, $r4;
        com.sun.lwuit.Font $r9, $r10, $r11, $r12, $r13, $r14;

        r2 := @this: com.sun.lwuit.EditorFont;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.sun.lwuit.EditorFont;

        if $z0 == 0 goto label3;

        r1 = (com.sun.lwuit.EditorFont) r0;

        $z2 = r1.<com.sun.lwuit.EditorFont: boolean includesBitmap>;

        $z1 = r2.<com.sun.lwuit.EditorFont: boolean includesBitmap>;

        if $z2 != $z1 goto label1;

        $r4 = r1.<com.sun.lwuit.EditorFont: java.lang.Object bitmapAntialiasing>;

        $r3 = r2.<com.sun.lwuit.EditorFont: java.lang.Object bitmapAntialiasing>;

        if $r4 != $r3 goto label1;

        $r6 = r1.<com.sun.lwuit.EditorFont: java.lang.String bitmapCharset>;

        $r5 = r2.<com.sun.lwuit.EditorFont: java.lang.String bitmapCharset>;

        if $r6 != $r5 goto label1;

        $r8 = r1.<com.sun.lwuit.EditorFont: java.lang.String lookupFont>;

        $r7 = r2.<com.sun.lwuit.EditorFont: java.lang.String lookupFont>;

        if $r8 != $r7 goto label1;

        $r9 = r1.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font systemFallback>;

        $i0 = virtualinvoke $r9.<com.sun.lwuit.Font: int getSize()>();

        $r10 = r2.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font systemFallback>;

        $i1 = virtualinvoke $r10.<com.sun.lwuit.Font: int getSize()>();

        if $i0 != $i1 goto label1;

        $r11 = r1.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font systemFallback>;

        $i2 = virtualinvoke $r11.<com.sun.lwuit.Font: int getFace()>();

        $r12 = r2.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font systemFallback>;

        $i3 = virtualinvoke $r12.<com.sun.lwuit.Font: int getFace()>();

        if $i2 != $i3 goto label1;

        $r13 = r1.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font systemFallback>;

        $i4 = virtualinvoke $r13.<com.sun.lwuit.Font: int getStyle()>();

        $r14 = r2.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font systemFallback>;

        $i5 = virtualinvoke $r14.<com.sun.lwuit.Font: int getStyle()>();

        if $i4 != $i5 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;

     label3:
        return 0;
    }

    public int getRenderingHint()
    {
        java.lang.Object[] $r0, $r1;
        com.sun.lwuit.EditorFont r2;
        int $i0, i1, $i3;
        java.lang.Object $r3, $r4;

        r2 := @this: com.sun.lwuit.EditorFont;

        i1 = 0;

     label1:
        $r0 = <com.sun.lwuit.EditorFont: java.lang.Object[] RENDERING_HINTS>;

        $i0 = lengthof $r0;

        if i1 >= $i0 goto label3;

        $r1 = <com.sun.lwuit.EditorFont: java.lang.Object[] RENDERING_HINTS>;

        $r4 = $r1[i1];

        $r3 = r2.<com.sun.lwuit.EditorFont: java.lang.Object bitmapAntialiasing>;

        if $r4 != $r3 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i3 = (int) -1;

        return $i3;
    }

    public int charWidth(char)
    {
        com.sun.lwuit.EditorFont r0;
        int $i1;
        char c0;
        com.sun.lwuit.Font $r1;

        r0 := @this: com.sun.lwuit.EditorFont;

        c0 := @parameter0: char;

        $r1 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont>;

        $i1 = virtualinvoke $r1.<com.sun.lwuit.Font: int charWidth(char)>(c0);

        return $i1;
    }

    public int charsWidth(char[], int, int)
    {
        com.sun.lwuit.EditorFont r0;
        int i0, i1, $i2;
        char[] r1;
        com.sun.lwuit.Font $r2;

        r0 := @this: com.sun.lwuit.EditorFont;

        r1 := @parameter0: char[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont>;

        $i2 = virtualinvoke $r2.<com.sun.lwuit.Font: int charsWidth(char[],int,int)>(r1, i0, i1);

        return $i2;
    }

    public int substringWidth(java.lang.String, int, int)
    {
        com.sun.lwuit.EditorFont r0;
        int i0, i1, $i2;
        java.lang.String r1;
        com.sun.lwuit.Font $r2;

        r0 := @this: com.sun.lwuit.EditorFont;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont>;

        $i2 = virtualinvoke $r2.<com.sun.lwuit.Font: int substringWidth(java.lang.String,int,int)>(r1, i0, i1);

        return $i2;
    }

    public int stringWidth(java.lang.String)
    {
        com.sun.lwuit.EditorFont r0;
        int $i0;
        java.lang.String r1;
        com.sun.lwuit.Font $r2;

        r0 := @this: com.sun.lwuit.EditorFont;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont>;

        $i0 = virtualinvoke $r2.<com.sun.lwuit.Font: int stringWidth(java.lang.String)>(r1);

        return $i0;
    }

    public int getHeight()
    {
        int $i0;
        com.sun.lwuit.EditorFont r0;
        com.sun.lwuit.Font $r1;

        r0 := @this: com.sun.lwuit.EditorFont;

        $r1 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont>;

        $i0 = virtualinvoke $r1.<com.sun.lwuit.Font: int getHeight()>();

        return $i0;
    }

    void drawChar(com.sun.lwuit.Graphics, char, int, int)
    {
        com.sun.lwuit.Graphics r2;
        char c0;
        com.sun.lwuit.EditorFont r0;
        int i1, i2;
        com.sun.lwuit.Font $r1, $r3, $r4;
        boolean $z0;

        r0 := @this: com.sun.lwuit.EditorFont;

        r2 := @parameter0: com.sun.lwuit.Graphics;

        c0 := @parameter1: char;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont>;

        $z0 = $r1 instanceof com.sun.lwuit.CustomFont;

        if $z0 != 0 goto label1;

        $r4 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont>;

        virtualinvoke r2.<com.sun.lwuit.Graphics: void setFont(com.sun.lwuit.Font)>($r4);

        virtualinvoke r2.<com.sun.lwuit.Graphics: void drawChar(char,int,int)>(c0, i1, i2);

        goto label2;

     label1:
        $r3 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont>;

        virtualinvoke $r3.<com.sun.lwuit.Font: void drawChar(com.sun.lwuit.Graphics,char,int,int)>(r2, c0, i1, i2);

     label2:
        return;
    }

    void drawChars(com.sun.lwuit.Graphics, char[], int, int, int, int)
    {
        com.sun.lwuit.Graphics r2;
        com.sun.lwuit.EditorFont r0;
        int i0, i1, i2, i3;
        char[] r3;
        com.sun.lwuit.Font $r1, $r4, $r5;
        boolean $z0;

        r0 := @this: com.sun.lwuit.EditorFont;

        r2 := @parameter0: com.sun.lwuit.Graphics;

        r3 := @parameter1: char[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $r1 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont>;

        $z0 = $r1 instanceof com.sun.lwuit.CustomFont;

        if $z0 != 0 goto label1;

        $r5 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont>;

        virtualinvoke r2.<com.sun.lwuit.Graphics: void setFont(com.sun.lwuit.Font)>($r5);

        virtualinvoke r2.<com.sun.lwuit.Graphics: void drawChars(char[],int,int,int,int)>(r3, i0, i1, i2, i3);

        goto label2;

     label1:
        $r4 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont>;

        virtualinvoke $r4.<com.sun.lwuit.Font: void drawChars(com.sun.lwuit.Graphics,char[],int,int,int,int)>(r2, r3, i0, i1, i2, i3);

     label2:
        return;
    }

    public com.sun.lwuit.Font getSystemFallback()
    {
        com.sun.lwuit.EditorFont r0;
        com.sun.lwuit.Font $r1;

        r0 := @this: com.sun.lwuit.EditorFont;

        $r1 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font systemFallback>;

        return $r1;
    }

    public com.sun.lwuit.Font getBitmapFont()
    {
        java.awt.Color $r13, $r14;
        java.awt.geom.Rectangle2D $r29;
        com.sun.lwuit.EditorFont r0;
        java.lang.String $r1, $r15, r19, $r25, $r27;
        java.awt.FontMetrics $r17;
        java.awt.font.FontRenderContext $r18;
        java.awt.RenderingHints$Key $r6, $r8, $r10, $r12;
        int[] r20, r21, r33;
        boolean $z0;
        java.awt.image.BufferedImage $r3, $r22;
        java.awt.Font $r16, $r28, $r30;
        java.awt.Graphics $r4, $r23;
        java.awt.Graphics2D r31, r32;
        int $i0, $i1, $i2, $i3, $i4, i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, i24, i25;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        com.sun.lwuit.Image $r24;
        java.lang.Object $r5, $r7, $r9, $r11;
        com.sun.lwuit.Font $r2, $r26;

        r0 := @this: com.sun.lwuit.EditorFont;

        $r1 = r0.<com.sun.lwuit.EditorFont: java.lang.String lookupFont>;

        $r2 = staticinvoke <com.sun.lwuit.Font: com.sun.lwuit.Font getBitmapFont(java.lang.String)>($r1);

        if $r2 == null goto label1;

        return $r2;

     label1:
        $r3 = new java.awt.image.BufferedImage;

        specialinvoke $r3.<java.awt.image.BufferedImage: void <init>(int,int,int)>(5000, 50, 1);

        $r4 = virtualinvoke $r3.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        r31 = (java.awt.Graphics2D) $r4;

        $r6 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>;

        $r5 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_QUALITY>;

        virtualinvoke r31.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r6, $r5);

        $r8 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_COLOR_RENDERING>;

        $r7 = <java.awt.RenderingHints: java.lang.Object VALUE_COLOR_RENDER_QUALITY>;

        virtualinvoke r31.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r8, $r7);

        $r10 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        $r9 = <java.awt.RenderingHints: java.lang.Object VALUE_STROKE_NORMALIZE>;

        virtualinvoke r31.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r10, $r9);

        $r12 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r11 = r0.<com.sun.lwuit.EditorFont: java.lang.Object bitmapAntialiasing>;

        virtualinvoke r31.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r12, $r11);

        $r13 = <java.awt.Color: java.awt.Color BLACK>;

        virtualinvoke r31.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r13);

        $i0 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getHeight()>();

        virtualinvoke r31.<java.awt.Graphics2D: void fillRect(int,int,int,int)>(0, 0, $i0, $i1);

        $r14 = new java.awt.Color;

        specialinvoke $r14.<java.awt.Color: void <init>(int)>(16711680);

        virtualinvoke r31.<java.awt.Graphics2D: void setColor(java.awt.Color)>($r14);

        $r15 = r0.<com.sun.lwuit.EditorFont: java.lang.String lookupFont>;

        $r16 = staticinvoke <java.awt.Font: java.awt.Font decode(java.lang.String)>($r15);

        virtualinvoke r31.<java.awt.Graphics2D: void setFont(java.awt.Font)>($r16);

        $r17 = virtualinvoke r31.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics()>();

        $r18 = virtualinvoke r31.<java.awt.Graphics2D: java.awt.font.FontRenderContext getFontRenderContext()>();

        $i2 = virtualinvoke $r17.<java.awt.FontMetrics: int getMaxDescent()>();

        $i3 = virtualinvoke $r17.<java.awt.FontMetrics: int getMaxAscent()>();

        $i4 = $i2 + $i3;

        $d0 = (double) $i4;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i5 = (int) $d1;

        $i6 = virtualinvoke $r17.<java.awt.FontMetrics: int getMaxAscent()>();

        $d2 = (double) $i6;

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        i7 = (int) $d3;

        r19 = r0.<com.sun.lwuit.EditorFont: java.lang.String bitmapCharset>;

        $i8 = virtualinvoke r19.<java.lang.String: int length()>();

        r20 = newarray (int)[$i8];

        $i9 = lengthof r20;

        r21 = newarray (int)[$i9];

        i24 = 0;

        i25 = 0;

     label2:
        $i10 = virtualinvoke r19.<java.lang.String: int length()>();

        if i25 >= $i10 goto label5;

        r20[i25] = i24;

        $i19 = i25 + 1;

        $r27 = virtualinvoke r19.<java.lang.String: java.lang.String substring(int,int)>(i25, $i19);

        virtualinvoke r31.<java.awt.Graphics2D: void drawString(java.lang.String,int,int)>($r27, i24, i7);

        $r28 = virtualinvoke r31.<java.awt.Graphics2D: java.awt.Font getFont()>();

        $r29 = virtualinvoke $r28.<java.awt.Font: java.awt.geom.Rectangle2D getStringBounds(java.lang.String,java.awt.font.FontRenderContext)>($r27, $r18);

        $d4 = virtualinvoke $r29.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d5 = staticinvoke <java.lang.Math: double ceil(double)>($d4);

        $i20 = (int) $d5;

        r21[i25] = $i20;

        $r30 = virtualinvoke r31.<java.awt.Graphics2D: java.awt.Font getFont()>();

        $z0 = virtualinvoke $r30.<java.awt.Font: boolean isItalic()>();

        if $z0 == 0 goto label3;

        $i23 = virtualinvoke $r17.<java.awt.FontMetrics: int getMaxAdvance()>();

        i24 = i24 + $i23;

        goto label4;

     label3:
        $i21 = r21[i25];

        $i22 = $i21 + 1;

        i24 = i24 + $i22;

     label4:
        i25 = i25 + 1;

        goto label2;

     label5:
        virtualinvoke r31.<java.awt.Graphics2D: void dispose()>();

        $r22 = new java.awt.image.BufferedImage;

        specialinvoke $r22.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i24, i5, 1);

        $r23 = virtualinvoke $r22.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        r32 = (java.awt.Graphics2D) $r23;

        virtualinvoke r32.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r3, 0, 0, null);

        virtualinvoke r32.<java.awt.Graphics2D: void dispose()>();

        $i11 = virtualinvoke $r22.<java.awt.image.BufferedImage: int getWidth()>();

        $i12 = virtualinvoke $r22.<java.awt.image.BufferedImage: int getHeight()>();

        $i13 = $i11 * $i12;

        r33 = newarray (int)[$i13];

        $i14 = virtualinvoke $r22.<java.awt.image.BufferedImage: int getWidth()>();

        $i15 = virtualinvoke $r22.<java.awt.image.BufferedImage: int getHeight()>();

        $i16 = virtualinvoke $r22.<java.awt.image.BufferedImage: int getWidth()>();

        virtualinvoke $r22.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, 0, $i14, $i15, r33, 0, $i16);

        $i17 = virtualinvoke $r22.<java.awt.image.BufferedImage: int getWidth()>();

        $i18 = virtualinvoke $r22.<java.awt.image.BufferedImage: int getHeight()>();

        $r24 = staticinvoke <com.sun.lwuit.Image: com.sun.lwuit.Image createImage(int[],int,int)>(r33, $i17, $i18);

        $r25 = r0.<com.sun.lwuit.EditorFont: java.lang.String lookupFont>;

        $r26 = staticinvoke <com.sun.lwuit.Font: com.sun.lwuit.Font createBitmapFont(java.lang.String,com.sun.lwuit.Image,int[],int[],java.lang.String)>($r25, $r24, r20, r21, r19);

        return $r26;
    }

    public int getBitmapFontRAMUsage()
    {
        java.awt.geom.Rectangle2D $r23;
        int[] r17, r18;
        boolean $z0;
        java.awt.image.BufferedImage $r0;
        java.awt.Font $r13, $r22, $r24;
        java.awt.Graphics $r1;
        com.sun.lwuit.EditorFont r9;
        java.awt.Graphics2D r2;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;
        java.lang.String $r12, $r16, $r19, $r20, $r21;
        double $d0, $d1, $d2, $d3;
        java.awt.FontMetrics $r14;
        java.awt.font.FontRenderContext $r15;
        java.awt.RenderingHints$Key $r4, $r6, $r8, $r11;
        java.lang.Object $r3, $r5, $r7, $r10;

        r9 := @this: com.sun.lwuit.EditorFont;

        $r0 = new java.awt.image.BufferedImage;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(50, 50, 1);

        $r1 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics getGraphics()>();

        r2 = (java.awt.Graphics2D) $r1;

        $r4 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>;

        $r3 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_QUALITY>;

        virtualinvoke r2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r4, $r3);

        $r6 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_COLOR_RENDERING>;

        $r5 = <java.awt.RenderingHints: java.lang.Object VALUE_COLOR_RENDER_QUALITY>;

        virtualinvoke r2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r6, $r5);

        $r8 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_STROKE_CONTROL>;

        $r7 = <java.awt.RenderingHints: java.lang.Object VALUE_STROKE_NORMALIZE>;

        virtualinvoke r2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r8, $r7);

        $r11 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_TEXT_ANTIALIASING>;

        $r10 = r9.<com.sun.lwuit.EditorFont: java.lang.Object bitmapAntialiasing>;

        virtualinvoke r2.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r11, $r10);

        $r12 = r9.<com.sun.lwuit.EditorFont: java.lang.String lookupFont>;

        $r13 = staticinvoke <java.awt.Font: java.awt.Font decode(java.lang.String)>($r12);

        virtualinvoke r2.<java.awt.Graphics2D: void setFont(java.awt.Font)>($r13);

        $r14 = virtualinvoke r2.<java.awt.Graphics2D: java.awt.FontMetrics getFontMetrics()>();

        $r15 = virtualinvoke r2.<java.awt.Graphics2D: java.awt.font.FontRenderContext getFontRenderContext()>();

        $i0 = virtualinvoke $r14.<java.awt.FontMetrics: int getMaxAscent()>();

        $d0 = (double) $i0;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i1 = (int) $d1;

        $r16 = r9.<com.sun.lwuit.EditorFont: java.lang.String bitmapCharset>;

        $i2 = virtualinvoke $r16.<java.lang.String: int length()>();

        r17 = newarray (int)[$i2];

        $i3 = lengthof r17;

        r18 = newarray (int)[$i3];

        i13 = 0;

        i14 = 0;

     label1:
        $r19 = r9.<com.sun.lwuit.EditorFont: java.lang.String bitmapCharset>;

        $i4 = virtualinvoke $r19.<java.lang.String: int length()>();

        if i14 >= $i4 goto label4;

        r17[i14] = i13;

        $r20 = r9.<com.sun.lwuit.EditorFont: java.lang.String bitmapCharset>;

        $i8 = i14 + 1;

        $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String substring(int,int)>(i14, $i8);

        virtualinvoke r2.<java.awt.Graphics2D: void drawString(java.lang.String,int,int)>($r21, i13, i1);

        $r22 = virtualinvoke r2.<java.awt.Graphics2D: java.awt.Font getFont()>();

        $r23 = virtualinvoke $r22.<java.awt.Font: java.awt.geom.Rectangle2D getStringBounds(java.lang.String,java.awt.font.FontRenderContext)>($r21, $r15);

        $d2 = virtualinvoke $r23.<java.awt.geom.Rectangle2D: double getWidth()>();

        $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2);

        $i9 = (int) $d3;

        r18[i14] = $i9;

        $r24 = virtualinvoke r2.<java.awt.Graphics2D: java.awt.Font getFont()>();

        $z0 = virtualinvoke $r24.<java.awt.Font: boolean isItalic()>();

        if $z0 == 0 goto label2;

        $i12 = virtualinvoke $r14.<java.awt.FontMetrics: int getMaxAdvance()>();

        i13 = i13 + $i12;

        goto label3;

     label2:
        $i10 = r18[i14];

        $i11 = $i10 + 1;

        i13 = i13 + $i11;

     label3:
        i14 = i14 + 1;

        goto label1;

     label4:
        virtualinvoke r2.<java.awt.Graphics2D: void dispose()>();

        $i5 = virtualinvoke r9.<com.sun.lwuit.EditorFont: int getHeight()>();

        $i6 = i13 * $i5;

        $i7 = $i6 * 4;

        return $i7;
    }

    public byte[] getTruetypeFont()
    {
        byte[] $r1;
        com.sun.lwuit.EditorFont r0;

        r0 := @this: com.sun.lwuit.EditorFont;

        $r1 = r0.<com.sun.lwuit.EditorFont: byte[] truetypeFont>;

        return $r1;
    }

    public java.lang.String getLookupFont()
    {
        java.lang.String $r1;
        com.sun.lwuit.EditorFont r0;

        r0 := @this: com.sun.lwuit.EditorFont;

        $r1 = r0.<com.sun.lwuit.EditorFont: java.lang.String lookupFont>;

        return $r1;
    }

    public void setLookupFont(java.lang.String)
    {
        java.lang.String r1;
        com.sun.lwuit.EditorFont r0;

        r0 := @this: com.sun.lwuit.EditorFont;

        r1 := @parameter0: java.lang.String;

        r0.<com.sun.lwuit.EditorFont: java.lang.String lookupFont> = r1;

        return;
    }

    java.lang.Object getNativeFont()
    {
        java.lang.Object $r2;
        com.sun.lwuit.EditorFont r0;
        com.sun.lwuit.Font $r1;

        r0 := @this: com.sun.lwuit.EditorFont;

        $r1 = r0.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font bestFont>;

        $r2 = virtualinvoke $r1.<com.sun.lwuit.Font: java.lang.Object getNativeFont()>();

        return $r2;
    }

    private java.lang.String systemString()
    {
        java.lang.Integer $r4, $r11, $r18;
        com.sun.lwuit.EditorFont r1;
        java.util.Map $r3, $r10, $r17;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r13, $r20, $r22;
        java.lang.StringBuilder $r0, $r7, $r8, $r14, $r15, $r21;
        java.lang.Object $r5, $r12, $r19;
        com.sun.lwuit.Font $r2, $r9, $r16;

        r1 := @this: com.sun.lwuit.EditorFont;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = <com.sun.lwuit.EditorFont: java.util.Map face>;

        $r2 = r1.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font systemFallback>;

        $i0 = virtualinvoke $r2.<com.sun.lwuit.Font: int getFace()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (java.lang.String) $r5;

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r10 = <com.sun.lwuit.EditorFont: java.util.Map style>;

        $r9 = r1.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font systemFallback>;

        $i1 = virtualinvoke $r9.<com.sun.lwuit.Font: int getStyle()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r12 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        $r13 = (java.lang.String) $r12;

        $r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r17 = <com.sun.lwuit.EditorFont: java.util.Map size>;

        $r16 = r1.<com.sun.lwuit.EditorFont: com.sun.lwuit.Font systemFallback>;

        $i2 = virtualinvoke $r16.<com.sun.lwuit.Font: int getSize()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r19 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        $r20 = (java.lang.String) $r19;

        $r21 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r22;
    }

    public java.lang.String toString()
    {
        com.sun.lwuit.EditorFont r0;
        java.lang.StringBuilder $r3, $r5, $r6, $r8;
        java.lang.String $r1, $r2, $r4, $r7, $r9;

        r0 := @this: com.sun.lwuit.EditorFont;

        $r1 = r0.<com.sun.lwuit.EditorFont: java.lang.String lookupFont>;

        if $r1 == null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<com.sun.lwuit.EditorFont: java.lang.String lookupFont>;

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ");

        $r7 = specialinvoke r0.<com.sun.lwuit.EditorFont: java.lang.String systemString()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;

     label1:
        $r2 = specialinvoke r0.<com.sun.lwuit.EditorFont: java.lang.String systemString()>();

        return $r2;
    }

    public boolean isIncludesBitmap()
    {
        com.sun.lwuit.EditorFont r0;
        boolean $z0;

        r0 := @this: com.sun.lwuit.EditorFont;

        $z0 = r0.<com.sun.lwuit.EditorFont: boolean includesBitmap>;

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Integer $r12, $r14, $r16, $r18, $r20, $r22, $r24, $r26, $r28, $r30, $r32;
        java.util.Map $r11, $r13, $r15, $r17, $r19, $r21, $r23, $r25, $r27, $r29, $r31;
        java.lang.Object[] $r3;
        java.util.HashMap $r0, $r1, $r2;
        java.lang.Object $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.sun.lwuit.EditorFont: java.util.Map face> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <com.sun.lwuit.EditorFont: java.util.Map size> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <com.sun.lwuit.EditorFont: java.util.Map style> = $r2;

        $r3 = newarray (java.lang.Object)[7];

        $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_OFF>;

        $r3[0] = $r4;

        $r5 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_ON>;

        $r3[1] = $r5;

        $r6 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_GASP>;

        $r3[2] = $r6;

        $r7 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_LCD_HBGR>;

        $r3[3] = $r7;

        $r8 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_LCD_HRGB>;

        $r3[4] = $r8;

        $r9 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_LCD_VBGR>;

        $r3[5] = $r9;

        $r10 = <java.awt.RenderingHints: java.lang.Object VALUE_TEXT_ANTIALIAS_LCD_VRGB>;

        $r3[6] = $r10;

        <com.sun.lwuit.EditorFont: java.lang.Object[] RENDERING_HINTS> = $r3;

        $r11 = <com.sun.lwuit.EditorFont: java.util.Map face>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(32);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, "MONOSPACE");

        $r13 = <com.sun.lwuit.EditorFont: java.util.Map face>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(64);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, "PROPORTIONAL");

        $r15 = <com.sun.lwuit.EditorFont: java.util.Map face>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, "SYSTEM");

        $r17 = <com.sun.lwuit.EditorFont: java.util.Map size>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, "LARGE");

        $r19 = <com.sun.lwuit.EditorFont: java.util.Map size>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, "MEDIUM");

        $r21 = <com.sun.lwuit.EditorFont: java.util.Map size>;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8);

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, "SMALL");

        $r23 = <com.sun.lwuit.EditorFont: java.util.Map style>;

        $r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, "BOLD");

        $r25 = <com.sun.lwuit.EditorFont: java.util.Map style>;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r26, "ITALIC");

        $r27 = <com.sun.lwuit.EditorFont: java.util.Map style>;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, "BOLD ITALIC");

        $r29 = <com.sun.lwuit.EditorFont: java.util.Map style>;

        $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, "PLAIN");

        $r31 = <com.sun.lwuit.EditorFont: java.util.Map style>;

        $r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, "UNDERLINED");

        return;
    }
}
