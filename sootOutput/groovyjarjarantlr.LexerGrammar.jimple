class groovyjarjarantlr.LexerGrammar extends groovyjarjarantlr.Grammar
{
    protected groovyjarjarantlr.collections.impl.BitSet charVocabulary;
    protected boolean testLiterals;
    protected boolean caseSensitiveLiterals;
    protected boolean caseSensitive;
    protected boolean filterMode;
    protected java.lang.String filterRule;

    void <init>(java.lang.String, groovyjarjarantlr.Tool, java.lang.String)
    {
        groovyjarjarantlr.LexerGrammar r0;
        groovyjarjarantlr.Tool r2;
        int i0;
        java.lang.String r1, r3;
        groovyjarjarantlr.collections.impl.BitSet $r4;

        r0 := @this: groovyjarjarantlr.LexerGrammar;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: groovyjarjarantlr.Tool;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<groovyjarjarantlr.Grammar: void <init>(java.lang.String,groovyjarjarantlr.Tool,java.lang.String)>(r1, r2, r3);

        r0.<groovyjarjarantlr.LexerGrammar: boolean testLiterals> = 1;

        r0.<groovyjarjarantlr.LexerGrammar: boolean caseSensitiveLiterals> = 1;

        r0.<groovyjarjarantlr.LexerGrammar: boolean caseSensitive> = 1;

        r0.<groovyjarjarantlr.LexerGrammar: boolean filterMode> = 0;

        r0.<groovyjarjarantlr.LexerGrammar: java.lang.String filterRule> = null;

        $r4 = new groovyjarjarantlr.collections.impl.BitSet;

        specialinvoke $r4.<groovyjarjarantlr.collections.impl.BitSet: void <init>()>();

        i0 = 0;

     label1:
        if i0 > 127 goto label2;

        virtualinvoke $r4.<groovyjarjarantlr.collections.impl.BitSet: void add(int)>(i0);

        i0 = i0 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<groovyjarjarantlr.LexerGrammar: void setCharVocabulary(groovyjarjarantlr.collections.impl.BitSet)>($r4);

        r0.<groovyjarjarantlr.LexerGrammar: boolean defaultErrorHandler> = 0;

        return;
    }

    public void generate() throws java.io.IOException
    {
        groovyjarjarantlr.LexerGrammar r0;
        groovyjarjarantlr.CodeGenerator $r1;

        r0 := @this: groovyjarjarantlr.LexerGrammar;

        $r1 = r0.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.CodeGenerator generator>;

        virtualinvoke $r1.<groovyjarjarantlr.CodeGenerator: void gen(groovyjarjarantlr.LexerGrammar)>(r0);

        return;
    }

    public java.lang.String getSuperClass()
    {
        groovyjarjarantlr.LexerGrammar r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.LexerGrammar;

        $z0 = r0.<groovyjarjarantlr.LexerGrammar: boolean debuggingOutput>;

        if $z0 == 0 goto label1;

        return "debug.DebuggingCharScanner";

     label1:
        return "CharScanner";
    }

    public boolean getTestLiterals()
    {
        groovyjarjarantlr.LexerGrammar r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.LexerGrammar;

        $z0 = r0.<groovyjarjarantlr.LexerGrammar: boolean testLiterals>;

        return $z0;
    }

    public void processArguments(java.lang.String[])
    {
        groovyjarjarantlr.LexerGrammar r4;
        java.lang.String[] r0;
        groovyjarjarantlr.Tool $r5, $r6, $r7;
        int $i0, i1;
        java.lang.String $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r4 := @this: groovyjarjarantlr.LexerGrammar;

        r0 := @parameter0: java.lang.String[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label5;

        $r1 = r0[i1];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("-trace");

        if $z0 == 0 goto label2;

        r4.<groovyjarjarantlr.LexerGrammar: boolean traceRules> = 1;

        $r7 = r4.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r7.<groovyjarjarantlr.Tool: void setArgOK(int)>(i1);

        goto label4;

     label2:
        $r2 = r0[i1];

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("-traceLexer");

        if $z1 == 0 goto label3;

        r4.<groovyjarjarantlr.LexerGrammar: boolean traceRules> = 1;

        $r6 = r4.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r6.<groovyjarjarantlr.Tool: void setArgOK(int)>(i1);

        goto label4;

     label3:
        $r3 = r0[i1];

        $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("-debug");

        if $z2 == 0 goto label4;

        r4.<groovyjarjarantlr.LexerGrammar: boolean debuggingOutput> = 1;

        $r5 = r4.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.Tool antlrTool>;

        virtualinvoke $r5.<groovyjarjarantlr.Tool: void setArgOK(int)>(i1);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return;
    }

    public void setCharVocabulary(groovyjarjarantlr.collections.impl.BitSet)
    {
        groovyjarjarantlr.LexerGrammar r0;
        groovyjarjarantlr.collections.impl.BitSet r1;

        r0 := @this: groovyjarjarantlr.LexerGrammar;

        r1 := @parameter0: groovyjarjarantlr.collections.impl.BitSet;

        r0.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.collections.impl.BitSet charVocabulary> = r1;

        return;
    }

    public boolean setOption(java.lang.String, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.Token r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18;
        groovyjarjarantlr.LexerGrammar r3;
        groovyjarjarantlr.Tool $r5, $r10, $r12, $r14, $r16, $r18, $r20, $r22;
        java.lang.StringBuffer $r4, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        java.lang.String $r1, r2, $r8, $r9, $r11, $r13, $r15, $r17, $r19, $r21, $r23;

        r3 := @this: groovyjarjarantlr.LexerGrammar;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: groovyjarjarantlr.Token;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("buildAST");

        if $z0 == 0 goto label01;

        $r22 = r3.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.Tool antlrTool>;

        $r23 = virtualinvoke r3.<groovyjarjarantlr.LexerGrammar: java.lang.String getFilename()>();

        $i15 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i16 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r22.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("buildAST option is not valid for lexer", $r23, $i15, $i16);

        return 1;

     label01:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("testLiterals");

        if $z1 == 0 goto label05;

        $z17 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z17 == 0 goto label02;

        r3.<groovyjarjarantlr.LexerGrammar: boolean testLiterals> = 1;

        goto label04;

     label02:
        $z18 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z18 == 0 goto label03;

        r3.<groovyjarjarantlr.LexerGrammar: boolean testLiterals> = 0;

        goto label04;

     label03:
        $r20 = r3.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.Tool antlrTool>;

        $r21 = virtualinvoke r3.<groovyjarjarantlr.LexerGrammar: java.lang.String getFilename()>();

        $i13 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i14 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r20.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("testLiterals option must be true or false", $r21, $i13, $i14);

     label04:
        return 1;

     label05:
        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("interactive");

        if $z2 == 0 goto label09;

        $z15 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z15 == 0 goto label06;

        r3.<groovyjarjarantlr.LexerGrammar: boolean interactive> = 1;

        goto label08;

     label06:
        $z16 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z16 == 0 goto label07;

        r3.<groovyjarjarantlr.LexerGrammar: boolean interactive> = 0;

        goto label08;

     label07:
        $r18 = r3.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.Tool antlrTool>;

        $r19 = virtualinvoke r3.<groovyjarjarantlr.LexerGrammar: java.lang.String getFilename()>();

        $i11 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i12 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r18.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("interactive option must be true or false", $r19, $i11, $i12);

     label08:
        return 1;

     label09:
        $z3 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("caseSensitive");

        if $z3 == 0 goto label13;

        $z13 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z13 == 0 goto label10;

        r3.<groovyjarjarantlr.LexerGrammar: boolean caseSensitive> = 1;

        goto label12;

     label10:
        $z14 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z14 == 0 goto label11;

        r3.<groovyjarjarantlr.LexerGrammar: boolean caseSensitive> = 0;

        goto label12;

     label11:
        $r16 = r3.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.Tool antlrTool>;

        $r17 = virtualinvoke r3.<groovyjarjarantlr.LexerGrammar: java.lang.String getFilename()>();

        $i9 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i10 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r16.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("caseSensitive option must be true or false", $r17, $i9, $i10);

     label12:
        return 1;

     label13:
        $z4 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("caseSensitiveLiterals");

        if $z4 == 0 goto label17;

        $z11 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z11 == 0 goto label14;

        r3.<groovyjarjarantlr.LexerGrammar: boolean caseSensitiveLiterals> = 1;

        goto label16;

     label14:
        $z12 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z12 == 0 goto label15;

        r3.<groovyjarjarantlr.LexerGrammar: boolean caseSensitiveLiterals> = 0;

        goto label16;

     label15:
        $r14 = r3.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.Tool antlrTool>;

        $r15 = virtualinvoke r3.<groovyjarjarantlr.LexerGrammar: java.lang.String getFilename()>();

        $i7 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i8 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r14.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("caseSensitiveLiterals option must be true or false", $r15, $i7, $i8);

     label16:
        return 1;

     label17:
        $z5 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("filter");

        if $z5 == 0 goto label22;

        $z9 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z9 == 0 goto label18;

        r3.<groovyjarjarantlr.LexerGrammar: boolean filterMode> = 1;

        goto label21;

     label18:
        $z10 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z10 == 0 goto label19;

        r3.<groovyjarjarantlr.LexerGrammar: boolean filterMode> = 0;

        goto label21;

     label19:
        $i4 = virtualinvoke r0.<groovyjarjarantlr.Token: int getType()>();

        if $i4 != 24 goto label20;

        r3.<groovyjarjarantlr.LexerGrammar: boolean filterMode> = 1;

        r3.<groovyjarjarantlr.LexerGrammar: java.lang.String filterRule> = $r1;

        goto label21;

     label20:
        $r12 = r3.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.Tool antlrTool>;

        $r13 = virtualinvoke r3.<groovyjarjarantlr.LexerGrammar: java.lang.String getFilename()>();

        $i5 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i6 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r12.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("filter option must be true, false, or a lexer rule name", $r13, $i5, $i6);

     label21:
        return 1;

     label22:
        $z6 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("longestPossible");

        if $z6 == 0 goto label23;

        $r10 = r3.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.Tool antlrTool>;

        $r11 = virtualinvoke r3.<groovyjarjarantlr.LexerGrammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i3 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r10.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("longestPossible option has been deprecated; ignoring it...", $r11, $i2, $i3);

        return 1;

     label23:
        $z7 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("className");

        if $z7 == 0 goto label24;

        specialinvoke r3.<groovyjarjarantlr.Grammar: boolean setOption(java.lang.String,groovyjarjarantlr.Token)>(r2, r0);

        return 1;

     label24:
        $z8 = specialinvoke r3.<groovyjarjarantlr.Grammar: boolean setOption(java.lang.String,groovyjarjarantlr.Token)>(r2, r0);

        if $z8 == 0 goto label25;

        return 1;

     label25:
        $r5 = r3.<groovyjarjarantlr.LexerGrammar: groovyjarjarantlr.Tool antlrTool>;

        $r4 = new java.lang.StringBuffer;

        specialinvoke $r4.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid option: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        $r9 = virtualinvoke r3.<groovyjarjarantlr.LexerGrammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i1 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r5.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r8, $r9, $i0, $i1);

        return 0;
    }
}
