public final class org.waveprotocol.box.server.util.WaveletDataUtil extends java.lang.Object
{
    private static final org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory WAVELET_FACTORY;

    private void <init>()
    {
        org.waveprotocol.box.server.util.WaveletDataUtil r0;

        r0 := @this: org.waveprotocol.box.server.util.WaveletDataUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static org.waveprotocol.wave.model.id.WaveletName waveletNameOf(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)
    {
        org.waveprotocol.wave.model.id.WaveletName $r3;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r0;
        org.waveprotocol.wave.model.id.WaveId $r1;
        org.waveprotocol.wave.model.id.WaveletId $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r2 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r3 = staticinvoke <org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletName of(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId)>($r1, $r2);

        return $r3;
    }

    public static void applyWaveletDelta(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta, org.waveprotocol.wave.model.wave.data.WaveletData) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r1;
        byte $b2;
        java.lang.Long $r3, $r4;
        boolean $z0, $z1, $z2;
        java.util.List $r9;
        java.lang.StringBuilder $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r8, r22;
        java.lang.Object[] $r2;
        long $l0, $l1, $l3, $l4, $l6;
        java.util.ArrayList $r5;
        org.waveprotocol.wave.model.operation.OperationException $r10, $r11;
        int $i5, i7;
        java.lang.String $r21;
        org.waveprotocol.wave.model.wave.data.WaveletData r0;
        java.util.Iterator $r6;
        java.lang.Object $r7;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        r0 := @parameter1: org.waveprotocol.wave.model.wave.data.WaveletData;

        if r0 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)>($z0, "wavelet may not be null");

        $l0 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getAppliedAtVersion()>();

        $l1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.WaveletData: long getVersion()>();

        $b2 = $l0 cmp $l1;

        if $b2 != 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r2 = newarray (java.lang.Object)[2];

        $l3 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getAppliedAtVersion()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3);

        $r2[0] = $r3;

        $l4 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.WaveletData: long getVersion()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4);

        $r2[1] = $r4;

        staticinvoke <com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object[])>($z1, "Delta\'s version %s doesn\'t apply to wavelet at %s", $r2);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r22 = null;

        i7 = 0;

     label5:
        $r6 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r7;

        r22 = r8;

        $r9 = virtualinvoke r8.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: java.util.List applyAndReturnReverse(java.lang.Object)>(r0);

        interfaceinvoke $r5.<java.util.List: boolean addAll(java.util.Collection)>($r9);

        i7 = i7 + 1;

        goto label6;

     label7:
        goto label9;

     label8:
        $r10 := @caughtexception;

        staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: void rollbackWaveletOperations(org.waveprotocol.wave.model.wave.data.WaveletData,java.util.List)>(r0, $r5);

        $r11 = new org.waveprotocol.wave.model.operation.OperationException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only applied ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        $i5 = virtualinvoke r1.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: int size()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" operations at version ");

        $l6 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.WaveletData: long getVersion()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", rolling back, failed op was ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<org.waveprotocol.wave.model.operation.OperationException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r10);

        throw $r11;

     label9:
        return;

        catch org.waveprotocol.wave.model.operation.OperationException from label5 to label7 with label8;
    }

    private static void rollbackWaveletOperations(org.waveprotocol.wave.model.wave.data.WaveletData, java.util.List)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r3;
        java.lang.IllegalStateException $r12;
        java.util.List r0;
        org.waveprotocol.wave.model.operation.OperationException $r4;
        int $i0, i1, $i3;
        java.lang.Object $r1, $r8;
        java.lang.StringBuilder $r7, $r9, $r11;
        java.lang.String $r10;
        org.waveprotocol.wave.model.wave.data.WaveletData r2;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r0 := @parameter1: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label6;

     label2:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r3 = (org.waveprotocol.wave.model.operation.wave.WaveletOperation) $r1;

        virtualinvoke $r3.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: void apply(org.waveprotocol.wave.model.wave.data.WaveletData)>(r2);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

        $r12 = new java.lang.IllegalStateException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to roll back operation with inverse ");

        $r8 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r12;

     label5:
        $i3 = (int) -1;

        i1 = i1 + $i3;

        goto label1;

     label6:
        return;

        catch org.waveprotocol.wave.model.operation.OperationException from label2 to label3 with label4;
    }

    public static org.waveprotocol.wave.model.wave.data.ObservableWaveletData createEmptyWavelet(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.version.HashedVersion, long)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        org.waveprotocol.wave.model.id.WaveId $r5;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r6;
        long l0;
        org.waveprotocol.wave.model.id.WaveletId $r4;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot $r0;
        org.waveprotocol.wave.model.version.HashedVersion r3;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter2: org.waveprotocol.wave.model.version.HashedVersion;

        l0 := @parameter3: long;

        $r0 = new org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot;

        $r5 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveId waveId>;

        $r4 = r1.<org.waveprotocol.wave.model.id.WaveletName: org.waveprotocol.wave.model.id.WaveletId waveletId>;

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.data.impl.EmptyWaveletSnapshot: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.id.WaveletId,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long)>($r5, $r4, r2, r3, l0);

        $r6 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData copyWavelet(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>($r0);

        return $r6;
    }

    public static org.waveprotocol.wave.model.wave.data.ObservableWaveletData buildWaveletFromFirstDelta(org.waveprotocol.wave.model.id.WaveletName, org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.id.WaveletName r3;
        java.lang.Object[] $r1;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r6;
        long $l0, $l2, $l3;
        org.waveprotocol.wave.model.wave.ParticipantId $r4;
        byte $b1;
        java.lang.Long $r2;
        org.waveprotocol.wave.model.version.HashedVersion $r5;
        boolean $z0;

        r3 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r0 := @parameter1: org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta;

        $l0 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getAppliedAtVersion()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $l2 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getAppliedAtVersion()>();

        $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        $r1[0] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "first delta has non-zero version: %s", $r1);

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: org.waveprotocol.wave.model.wave.ParticipantId getAuthor()>();

        $r5 = staticinvoke <org.waveprotocol.wave.model.version.HashedVersion: org.waveprotocol.wave.model.version.HashedVersion unsigned(long)>(0L);

        $l3 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta: long getApplicationTimestamp()>();

        $r6 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData createEmptyWavelet(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.version.HashedVersion,long)>(r3, $r4, $r5, $l3);

        staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: void applyWaveletDelta(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta,org.waveprotocol.wave.model.wave.data.WaveletData)>(r0, $r6);

        return $r6;
    }

    public static org.waveprotocol.wave.model.wave.data.ObservableWaveletData buildWaveletFromDeltas(org.waveprotocol.wave.model.id.WaveletName, java.util.Iterator) throws org.waveprotocol.wave.model.operation.OperationException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        java.util.Iterator r0;
        org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta $r3, r6;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r4;
        java.lang.Object $r2, $r5;
        boolean $z0, $z1;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r0 := @parameter1: java.util.Iterator;

        $z0 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z0, "empty deltas");

        $r2 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r2;

        $r4 = staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData buildWaveletFromFirstDelta(org.waveprotocol.wave.model.id.WaveletName,org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta)>(r1, $r3);

     label1:
        $z1 = interfaceinvoke r0.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke r0.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta) $r5;

        staticinvoke <org.waveprotocol.box.server.util.WaveletDataUtil: void applyWaveletDelta(org.waveprotocol.wave.model.operation.wave.TransformedWaveletDelta,org.waveprotocol.wave.model.wave.data.WaveletData)>(r6, $r4);

        goto label1;

     label2:
        return $r4;
    }

    public static org.waveprotocol.wave.model.wave.data.ObservableWaveletData copyWavelet(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)
    {
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r0, $r2;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r3;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        $r1 = <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory WAVELET_FACTORY>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory: org.waveprotocol.wave.model.wave.data.ReadableWaveletData create(org.waveprotocol.wave.model.wave.data.ReadableWaveletData)>(r0);

        $r3 = (org.waveprotocol.wave.model.wave.data.ObservableWaveletData) $r2;

        return $r3;
    }

    public static org.waveprotocol.wave.model.wave.data.BlipData addEmptyBlip(org.waveprotocol.wave.model.wave.data.WaveletData, java.lang.String, org.waveprotocol.wave.model.wave.ParticipantId, long)
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r5;
        java.util.Set $r3;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r4;
        long l0;
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        org.waveprotocol.wave.model.wave.data.WaveletData r0;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveletData;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        l0 := @parameter3: long;

        $r3 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r2);

        $r4 = <org.waveprotocol.wave.model.document.util.EmptyDocument: org.waveprotocol.wave.model.document.operation.DocInitialization EMPTY_DOCUMENT>;

        $r5 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.WaveletData: org.waveprotocol.wave.model.wave.data.BlipData createDocument(java.lang.String,org.waveprotocol.wave.model.wave.ParticipantId,java.util.Collection,org.waveprotocol.wave.model.document.operation.DocInitialization,long,long)>(r1, r2, $r3, $r4, l0, l0);

        return $r5;
    }

    public static boolean hasConversationalRootWavelet(org.waveprotocol.wave.model.wave.data.WaveViewData)
    {
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r4;
        org.waveprotocol.wave.model.id.WaveletId $r5;
        java.lang.Iterable $r1;
        org.waveprotocol.wave.model.wave.data.WaveViewData r0;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.WaveViewData;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.WaveViewData: java.lang.Iterable getWavelets()>();

        $r2 = interfaceinvoke $r1.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.wave.data.ObservableWaveletData) $r3;

        $r5 = interfaceinvoke r4.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $z1 = staticinvoke <org.waveprotocol.wave.model.id.IdUtil: boolean isConversationRootWaveletId(org.waveprotocol.wave.model.id.WaveletId)>($r5);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        goto label2;

     label4:
        return 0;
    }

    public static boolean checkAccessPermission(org.waveprotocol.wave.model.wave.data.ReadableWaveletData, org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        java.util.Set $r2, $r4;
        org.waveprotocol.wave.model.wave.ParticipantId r0, r3;
        org.waveprotocol.wave.model.wave.data.ReadableWaveletData r1;
        boolean $z0, $z1, $z2;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ReadableWaveletData;

        r0 := @parameter1: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        if r0 == null goto label2;

        if r1 == null goto label1;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: java.util.Set getParticipants()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z0 != 0 goto label1;

        if r3 == null goto label2;

        $r4 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ReadableWaveletData: java.util.Set getParticipants()>();

        $z1 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static void <clinit>()
    {
        org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory $r2;
        org.waveprotocol.wave.model.schema.SchemaCollection $r0;
        org.waveprotocol.wave.model.wave.data.DocumentFactory $r1;

        $r0 = staticinvoke <org.waveprotocol.wave.model.schema.SchemaCollection: org.waveprotocol.wave.model.schema.SchemaCollection empty()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.ObservablePluggableMutableDocument: org.waveprotocol.wave.model.wave.data.DocumentFactory createFactory(org.waveprotocol.wave.model.schema.SchemaProvider)>($r0);

        $r2 = staticinvoke <org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory: org.waveprotocol.wave.model.wave.data.impl.WaveletDataImpl$Factory create(org.waveprotocol.wave.model.wave.data.DocumentFactory)>($r1);

        <org.waveprotocol.box.server.util.WaveletDataUtil: org.waveprotocol.wave.model.wave.data.ObservableWaveletData$Factory WAVELET_FACTORY> = $r2;

        return;
    }
}
