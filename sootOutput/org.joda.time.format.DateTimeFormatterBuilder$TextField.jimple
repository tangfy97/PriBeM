class org.joda.time.format.DateTimeFormatterBuilder$TextField extends java.lang.Object implements org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser
{
    private static java.util.Map cParseCache;
    private final org.joda.time.DateTimeFieldType iFieldType;
    private final boolean iShort;

    void <init>(org.joda.time.DateTimeFieldType, boolean)
    {
        org.joda.time.DateTimeFieldType r1;
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        boolean z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType> = r1;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort> = z0;

        return;
    }

    public int estimatePrintedLength()
    {
        byte $b0;
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort>;

        if $z0 == 0 goto label1;

        $b0 = 6;

        goto label2;

     label1:
        $b0 = 20;

     label2:
        return $b0;
    }

    public void printTo(java.lang.StringBuffer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale)
    {
        org.joda.time.DateTimeZone r6;
        org.joda.time.Chronology r2;
        long l0;
        java.lang.RuntimeException $r5;
        java.lang.StringBuffer r0;
        java.util.Locale r3;
        org.joda.time.format.DateTimeFormatterBuilder$TextField r1;
        int i1;
        java.lang.String $r4;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        r0 := @parameter0: java.lang.StringBuffer;

        l0 := @parameter1: long;

        r2 := @parameter2: org.joda.time.Chronology;

        i1 := @parameter3: int;

        r6 := @parameter4: org.joda.time.DateTimeZone;

        r3 := @parameter5: java.util.Locale;

     label1:
        $r4 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>(l0, r2, r3);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(65533);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void printTo(java.io.Writer, long, org.joda.time.Chronology, int, org.joda.time.DateTimeZone, java.util.Locale) throws java.io.IOException
    {
        org.joda.time.DateTimeZone r6;
        org.joda.time.Chronology r2;
        long l0;
        java.lang.RuntimeException $r5;
        java.util.Locale r3;
        org.joda.time.format.DateTimeFormatterBuilder$TextField r1;
        java.io.Writer r0;
        int i1, $i3;
        java.lang.String $r4;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        r0 := @parameter0: java.io.Writer;

        l0 := @parameter1: long;

        r2 := @parameter2: org.joda.time.Chronology;

        i1 := @parameter3: int;

        r6 := @parameter4: org.joda.time.DateTimeZone;

        r3 := @parameter5: java.util.Locale;

     label1:
        $r4 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(long,org.joda.time.Chronology,java.util.Locale)>(l0, r2, r3);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $i3 = (int) 65533;

        virtualinvoke r0.<java.io.Writer: void write(int)>($i3);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void printTo(java.lang.StringBuffer, org.joda.time.ReadablePartial, java.util.Locale)
    {
        java.lang.StringBuffer r0;
        java.util.Locale r3;
        org.joda.time.format.DateTimeFormatterBuilder$TextField r1;
        org.joda.time.ReadablePartial r2;
        java.lang.String $r4;
        java.lang.RuntimeException $r5;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        r0 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

     label1:
        $r4 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>(r2, r3);

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(65533);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void printTo(java.io.Writer, org.joda.time.ReadablePartial, java.util.Locale) throws java.io.IOException
    {
        java.util.Locale r3;
        org.joda.time.format.DateTimeFormatterBuilder$TextField r1;
        java.io.Writer r0;
        org.joda.time.ReadablePartial r2;
        int $i1;
        java.lang.String $r4;
        java.lang.RuntimeException $r5;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        r0 := @parameter0: java.io.Writer;

        r2 := @parameter1: org.joda.time.ReadablePartial;

        r3 := @parameter2: java.util.Locale;

     label1:
        $r4 = specialinvoke r1.<org.joda.time.format.DateTimeFormatterBuilder$TextField: java.lang.String print(org.joda.time.ReadablePartial,java.util.Locale)>(r2, r3);

        virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $i1 = (int) 65533;

        virtualinvoke r0.<java.io.Writer: void write(int)>($i1);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private java.lang.String print(long, org.joda.time.Chronology, java.util.Locale)
    {
        org.joda.time.Chronology r1;
        long l0;
        java.util.Locale r4;
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;
        org.joda.time.DateTimeFieldType $r2;
        org.joda.time.DateTimeField $r3;
        java.lang.String $r5, $r6;
        boolean $z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        l0 := @parameter0: long;

        r1 := @parameter1: org.joda.time.Chronology;

        r4 := @parameter2: java.util.Locale;

        $r2 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $r3 = virtualinvoke $r2.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>(r1);

        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort>;

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke $r3.<org.joda.time.DateTimeField: java.lang.String getAsShortText(long,java.util.Locale)>(l0, r4);

        return $r6;

     label1:
        $r5 = virtualinvoke $r3.<org.joda.time.DateTimeField: java.lang.String getAsText(long,java.util.Locale)>(l0, r4);

        return $r5;
    }

    private java.lang.String print(org.joda.time.ReadablePartial, java.util.Locale)
    {
        org.joda.time.Chronology $r4;
        java.util.Locale r6;
        org.joda.time.format.DateTimeFormatterBuilder$TextField r1;
        org.joda.time.ReadablePartial r0;
        org.joda.time.DateTimeFieldType $r2, $r3;
        org.joda.time.DateTimeField $r5;
        java.lang.String $r7, $r8;
        boolean $z0, $z1;

        r1 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        r0 := @parameter0: org.joda.time.ReadablePartial;

        r6 := @parameter1: java.util.Locale;

        $r2 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $z0 = interfaceinvoke r0.<org.joda.time.ReadablePartial: boolean isSupported(org.joda.time.DateTimeFieldType)>($r2);

        if $z0 == 0 goto label2;

        $r3 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $r4 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>();

        $r5 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r4);

        $z1 = r1.<org.joda.time.format.DateTimeFormatterBuilder$TextField: boolean iShort>;

        if $z1 == 0 goto label1;

        $r8 = virtualinvoke $r5.<org.joda.time.DateTimeField: java.lang.String getAsShortText(org.joda.time.ReadablePartial,java.util.Locale)>(r0, r6);

        return $r8;

     label1:
        $r7 = virtualinvoke $r5.<org.joda.time.DateTimeField: java.lang.String getAsText(org.joda.time.ReadablePartial,java.util.Locale)>(r0, r6);

        return $r7;

     label2:
        return "\ufffd";
    }

    public int estimateParsedLength()
    {
        int $i0;
        org.joda.time.format.DateTimeFormatterBuilder$TextField r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        $i0 = virtualinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TextField: int estimatePrintedLength()>();

        return $i0;
    }

    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)
    {
        org.joda.time.DateTimeZone $r16;
        java.lang.Integer $r10, $r45;
        java.util.Locale $r1;
        java.util.Map $r2, $r3, $r34, r37;
        org.joda.time.DateTimeFieldType $r6, $r13, $r17, $r21, $r22, $r41;
        boolean $z0, $z1;
        org.joda.time.MutableDateTime$Property $r18;
        java.util.Set r38;
        java.lang.Throwable $r36;
        java.lang.Object[] $r35, $r39;
        java.util.HashMap $r42;
        java.util.HashSet $r43;
        org.joda.time.format.DateTimeFormatterBuilder$TextField r5;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, $i12, $i14, $i16;
        org.joda.time.format.DateTimeParserBucket r0;
        java.lang.String r11, $r12, $r19, $r20, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        org.joda.time.MutableDateTime $r44;
        java.lang.Object $r4, $r7, $r8, $r9;

        r5 := @this: org.joda.time.format.DateTimeFormatterBuilder$TextField;

        r0 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r11 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r1 = virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: java.util.Locale getLocale()>();

        $r2 = <org.joda.time.format.DateTimeFormatterBuilder$TextField: java.util.Map cParseCache>;

        entermonitor $r2;

     label01:
        $r3 = <org.joda.time.format.DateTimeFormatterBuilder$TextField: java.util.Map cParseCache>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r37 = (java.util.Map) $r4;

        if r37 != null goto label02;

        $r42 = new java.util.HashMap;

        specialinvoke $r42.<java.util.HashMap: void <init>()>();

        r37 = $r42;

        $r34 = <org.joda.time.format.DateTimeFormatterBuilder$TextField: java.util.Map cParseCache>;

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r42);

     label02:
        $r6 = r5.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $r7 = interfaceinvoke r37.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r35 = (java.lang.Object[]) $r7;

        if $r35 != null goto label08;

        $r43 = new java.util.HashSet;

        specialinvoke $r43.<java.util.HashSet: void <init>(int)>(32);

        r38 = $r43;

        $r44 = new org.joda.time.MutableDateTime;

        $r16 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>;

        specialinvoke $r44.<org.joda.time.MutableDateTime: void <init>(long,org.joda.time.DateTimeZone)>(0L, $r16);

        $r17 = r5.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $r18 = virtualinvoke $r44.<org.joda.time.MutableDateTime: org.joda.time.MutableDateTime$Property property(org.joda.time.DateTimeFieldType)>($r17);

        $i4 = virtualinvoke $r18.<org.joda.time.MutableDateTime$Property: int getMinimumValueOverall()>();

        $i5 = virtualinvoke $r18.<org.joda.time.MutableDateTime$Property: int getMaximumValueOverall()>();

        $i6 = $i5 - $i4;

        if $i6 <= 32 goto label04;

        $i12 = (int) -1;

        $i7 = i1 ^ $i12;

        exitmonitor $r2;

     label03:
        return $i7;

     label04:
        i8 = virtualinvoke $r18.<org.joda.time.MutableDateTime$Property: int getMaximumTextLength(java.util.Locale)>($r1);

        i9 = $i4;

     label05:
        if i9 > $i5 goto label06;

        virtualinvoke $r18.<org.joda.time.MutableDateTime$Property: org.joda.time.MutableDateTime set(int)>(i9);

        $r23 = virtualinvoke $r18.<org.joda.time.MutableDateTime$Property: java.lang.String getAsShortText(java.util.Locale)>($r1);

        interfaceinvoke $r43.<java.util.Set: boolean add(java.lang.Object)>($r23);

        $r24 = virtualinvoke $r18.<org.joda.time.MutableDateTime$Property: java.lang.String getAsShortText(java.util.Locale)>($r1);

        $r25 = virtualinvoke $r24.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        interfaceinvoke $r43.<java.util.Set: boolean add(java.lang.Object)>($r25);

        $r26 = virtualinvoke $r18.<org.joda.time.MutableDateTime$Property: java.lang.String getAsShortText(java.util.Locale)>($r1);

        $r27 = virtualinvoke $r26.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r1);

        interfaceinvoke $r43.<java.util.Set: boolean add(java.lang.Object)>($r27);

        $r28 = virtualinvoke $r18.<org.joda.time.MutableDateTime$Property: java.lang.String getAsText(java.util.Locale)>($r1);

        interfaceinvoke $r43.<java.util.Set: boolean add(java.lang.Object)>($r28);

        $r29 = virtualinvoke $r18.<org.joda.time.MutableDateTime$Property: java.lang.String getAsText(java.util.Locale)>($r1);

        $r30 = virtualinvoke $r29.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r1);

        interfaceinvoke $r43.<java.util.Set: boolean add(java.lang.Object)>($r30);

        $r31 = virtualinvoke $r18.<org.joda.time.MutableDateTime$Property: java.lang.String getAsText(java.util.Locale)>($r1);

        $r32 = virtualinvoke $r31.<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>($r1);

        interfaceinvoke $r43.<java.util.Set: boolean add(java.lang.Object)>($r32);

        i9 = i9 + 1;

        goto label05;

     label06:
        $r19 = "en";

        $r20 = virtualinvoke $r1.<java.util.Locale: java.lang.String getLanguage()>();

        $z1 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>($r20);

        if $z1 == 0 goto label07;

        $r21 = r5.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        $r22 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType era()>();

        if $r21 != $r22 goto label07;

        interfaceinvoke $r43.<java.util.Set: boolean add(java.lang.Object)>("BCE");

        interfaceinvoke $r43.<java.util.Set: boolean add(java.lang.Object)>("bce");

        interfaceinvoke $r43.<java.util.Set: boolean add(java.lang.Object)>("CE");

        interfaceinvoke $r43.<java.util.Set: boolean add(java.lang.Object)>("ce");

        i8 = 3;

     label07:
        $r39 = newarray (java.lang.Object)[2];

        $r39[0] = $r43;

        $r45 = new java.lang.Integer;

        specialinvoke $r45.<java.lang.Integer: void <init>(int)>(i8);

        $r39[1] = $r45;

        $r41 = r5.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        interfaceinvoke r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r41, $r39);

        goto label09;

     label08:
        $r8 = $r35[0];

        r38 = (java.util.Set) $r8;

        $r9 = $r35[1];

        $r10 = (java.lang.Integer) $r9;

        i8 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

     label09:
        exitmonitor $r2;

     label10:
        goto label13;

     label11:
        $r36 := @caughtexception;

        exitmonitor $r2;

     label12:
        throw $r36;

     label13:
        $i0 = virtualinvoke r11.<java.lang.String: int length()>();

        $i2 = i1 + i8;

        i10 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i2);

     label14:
        if i10 <= i1 goto label16;

        $r12 = virtualinvoke r11.<java.lang.String: java.lang.String substring(int,int)>(i1, i10);

        $z0 = interfaceinvoke r38.<java.util.Set: boolean contains(java.lang.Object)>($r12);

        if $z0 == 0 goto label15;

        $r13 = r5.<org.joda.time.format.DateTimeFormatterBuilder$TextField: org.joda.time.DateTimeFieldType iFieldType>;

        virtualinvoke r0.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,java.lang.String,java.util.Locale)>($r13, $r12, $r1);

        return i10;

     label15:
        $i14 = (int) -1;

        i10 = i10 + $i14;

        goto label14;

     label16:
        $i16 = (int) -1;

        $i3 = i1 ^ $i16;

        return $i3;

        catch java.lang.Throwable from label01 to label03 with label11;
        catch java.lang.Throwable from label04 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <org.joda.time.format.DateTimeFormatterBuilder$TextField: java.util.Map cParseCache> = $r0;

        return;
    }
}
