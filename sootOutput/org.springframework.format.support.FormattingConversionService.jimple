public class org.springframework.format.support.FormattingConversionService extends org.springframework.core.convert.support.GenericConversionService implements org.springframework.format.FormatterRegistry, org.springframework.context.EmbeddedValueResolverAware
{
    private org.springframework.util.StringValueResolver embeddedValueResolver;
    private final java.util.Map cachedPrinters;
    private final java.util.Map cachedParsers;

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1, $r2;
        org.springframework.format.support.FormattingConversionService r0;

        r0 := @this: org.springframework.format.support.FormattingConversionService;

        specialinvoke r0.<org.springframework.core.convert.support.GenericConversionService: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.format.support.FormattingConversionService: java.util.Map cachedPrinters> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.springframework.format.support.FormattingConversionService: java.util.Map cachedParsers> = $r2;

        return;
    }

    public void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)
    {
        org.springframework.util.StringValueResolver r1;
        org.springframework.format.support.FormattingConversionService r0;

        r0 := @this: org.springframework.format.support.FormattingConversionService;

        r1 := @parameter0: org.springframework.util.StringValueResolver;

        r0.<org.springframework.format.support.FormattingConversionService: org.springframework.util.StringValueResolver embeddedValueResolver> = r1;

        return;
    }

    public void addFormatter(org.springframework.format.Formatter)
    {
        org.springframework.format.support.FormattingConversionService r3;
        java.lang.IllegalArgumentException $r4;
        org.springframework.format.Formatter r0;
        java.lang.Class $r1, $r2, $r6;
        java.lang.StringBuilder $r5, $r8, $r9;
        java.lang.String $r7, $r10;

        r3 := @this: org.springframework.format.support.FormattingConversionService;

        r0 := @parameter0: org.springframework.format.Formatter;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class resolveTypeArgument(java.lang.Class,java.lang.Class)>($r1, class "Lorg/springframework/format/Formatter;");

        if $r2 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to extract parameterized field type argument from Formatter [");

        $r6 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]; does the formatter parameterize the <T> generic type?");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r4;

     label1:
        virtualinvoke r3.<org.springframework.format.support.FormattingConversionService: void addFormatterForFieldType(java.lang.Class,org.springframework.format.Formatter)>($r2, r0);

        return;
    }

    public void addFormatterForFieldType(java.lang.Class, org.springframework.format.Formatter)
    {
        org.springframework.format.support.FormattingConversionService$PrinterConverter $r1;
        org.springframework.format.support.FormattingConversionService$ParserConverter $r4;
        org.springframework.format.Formatter r3;
        java.lang.Class r2;
        org.springframework.format.support.FormattingConversionService r0;

        r0 := @this: org.springframework.format.support.FormattingConversionService;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.springframework.format.Formatter;

        $r1 = new org.springframework.format.support.FormattingConversionService$PrinterConverter;

        specialinvoke $r1.<org.springframework.format.support.FormattingConversionService$PrinterConverter: void <init>(java.lang.Class,org.springframework.format.Printer,org.springframework.core.convert.ConversionService)>(r2, r3, r0);

        virtualinvoke r0.<org.springframework.format.support.FormattingConversionService: void addConverter(org.springframework.core.convert.converter.GenericConverter)>($r1);

        $r4 = new org.springframework.format.support.FormattingConversionService$ParserConverter;

        specialinvoke $r4.<org.springframework.format.support.FormattingConversionService$ParserConverter: void <init>(java.lang.Class,org.springframework.format.Parser,org.springframework.core.convert.ConversionService)>(r2, r3, r0);

        virtualinvoke r0.<org.springframework.format.support.FormattingConversionService: void addConverter(org.springframework.core.convert.converter.GenericConverter)>($r4);

        return;
    }

    public void addFormatterForFieldType(java.lang.Class, org.springframework.format.Printer, org.springframework.format.Parser)
    {
        org.springframework.format.support.FormattingConversionService$PrinterConverter $r1;
        org.springframework.format.support.FormattingConversionService$ParserConverter $r4;
        org.springframework.format.Parser r5;
        java.lang.Class r2;
        org.springframework.format.support.FormattingConversionService r0;
        org.springframework.format.Printer r3;

        r0 := @this: org.springframework.format.support.FormattingConversionService;

        r2 := @parameter0: java.lang.Class;

        r3 := @parameter1: org.springframework.format.Printer;

        r5 := @parameter2: org.springframework.format.Parser;

        $r1 = new org.springframework.format.support.FormattingConversionService$PrinterConverter;

        specialinvoke $r1.<org.springframework.format.support.FormattingConversionService$PrinterConverter: void <init>(java.lang.Class,org.springframework.format.Printer,org.springframework.core.convert.ConversionService)>(r2, r3, r0);

        virtualinvoke r0.<org.springframework.format.support.FormattingConversionService: void addConverter(org.springframework.core.convert.converter.GenericConverter)>($r1);

        $r4 = new org.springframework.format.support.FormattingConversionService$ParserConverter;

        specialinvoke $r4.<org.springframework.format.support.FormattingConversionService$ParserConverter: void <init>(java.lang.Class,org.springframework.format.Parser,org.springframework.core.convert.ConversionService)>(r2, r5, r0);

        virtualinvoke r0.<org.springframework.format.support.FormattingConversionService: void addConverter(org.springframework.core.convert.converter.GenericConverter)>($r4);

        return;
    }

    public void addFormatterForFieldAnnotation(org.springframework.format.AnnotationFormatterFactory)
    {
        org.springframework.util.StringValueResolver $r4, $r9;
        org.springframework.format.AnnotationFormatterFactory r0;
        org.springframework.format.support.FormattingConversionService$2 $r8;
        org.springframework.format.support.FormattingConversionService$1 $r7;
        java.lang.String $r14, $r17;
        boolean $z0, $z1;
        java.util.Iterator $r19;
        java.util.Set $r18;
        org.springframework.format.support.FormattingConversionService r3;
        java.lang.IllegalArgumentException $r11;
        org.springframework.context.EmbeddedValueResolverAware $r10;
        java.lang.Class $r1, $r2, r6, $r13;
        java.lang.Object $r5;
        java.lang.StringBuilder $r12, $r15, $r16;

        r3 := @this: org.springframework.format.support.FormattingConversionService;

        r0 := @parameter0: org.springframework.format.AnnotationFormatterFactory;

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.springframework.core.GenericTypeResolver: java.lang.Class resolveTypeArgument(java.lang.Class,java.lang.Class)>($r1, class "Lorg/springframework/format/AnnotationFormatterFactory;");

        if $r2 != null goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unable to extract parameterized Annotation type argument from AnnotationFormatterFactory [");

        $r13 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]; does the factory parameterize the <A extends Annotation> generic type?");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label1:
        $r4 = r3.<org.springframework.format.support.FormattingConversionService: org.springframework.util.StringValueResolver embeddedValueResolver>;

        if $r4 == null goto label2;

        $z1 = r0 instanceof org.springframework.context.EmbeddedValueResolverAware;

        if $z1 == 0 goto label2;

        $r10 = (org.springframework.context.EmbeddedValueResolverAware) r0;

        $r9 = r3.<org.springframework.format.support.FormattingConversionService: org.springframework.util.StringValueResolver embeddedValueResolver>;

        interfaceinvoke $r10.<org.springframework.context.EmbeddedValueResolverAware: void setEmbeddedValueResolver(org.springframework.util.StringValueResolver)>($r9);

     label2:
        $r18 = interfaceinvoke r0.<org.springframework.format.AnnotationFormatterFactory: java.util.Set getFieldTypes()>();

        $r19 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r5 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.Class) $r5;

        $r7 = new org.springframework.format.support.FormattingConversionService$1;

        specialinvoke $r7.<org.springframework.format.support.FormattingConversionService$1: void <init>(org.springframework.format.support.FormattingConversionService,java.lang.Class,java.lang.Class,org.springframework.format.AnnotationFormatterFactory)>(r3, r6, $r2, r0);

        virtualinvoke r3.<org.springframework.format.support.FormattingConversionService: void addConverter(org.springframework.core.convert.converter.GenericConverter)>($r7);

        $r8 = new org.springframework.format.support.FormattingConversionService$2;

        specialinvoke $r8.<org.springframework.format.support.FormattingConversionService$2: void <init>(org.springframework.format.support.FormattingConversionService,java.lang.Class,java.lang.Class,org.springframework.format.AnnotationFormatterFactory)>(r3, r6, $r2, r0);

        virtualinvoke r3.<org.springframework.format.support.FormattingConversionService: void addConverter(org.springframework.core.convert.converter.GenericConverter)>($r8);

     label4:
        $z0 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label3;

        return;
    }

    static java.util.Map access$0(org.springframework.format.support.FormattingConversionService)
    {
        org.springframework.format.support.FormattingConversionService r0;
        java.util.Map $r1;

        r0 := @parameter0: org.springframework.format.support.FormattingConversionService;

        $r1 = r0.<org.springframework.format.support.FormattingConversionService: java.util.Map cachedPrinters>;

        return $r1;
    }

    static java.util.Map access$1(org.springframework.format.support.FormattingConversionService)
    {
        org.springframework.format.support.FormattingConversionService r0;
        java.util.Map $r1;

        r0 := @parameter0: org.springframework.format.support.FormattingConversionService;

        $r1 = r0.<org.springframework.format.support.FormattingConversionService: java.util.Map cachedParsers>;

        return $r1;
    }
}
