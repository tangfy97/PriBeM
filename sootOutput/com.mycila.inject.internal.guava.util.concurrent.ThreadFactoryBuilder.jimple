public final class com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder extends java.lang.Object
{
    private java.lang.String nameFormat;
    private java.lang.Boolean daemon;
    private java.lang.Integer priority;
    private java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler;
    private java.util.concurrent.ThreadFactory backingThreadFactory;

    public void <init>()
    {
        com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder r0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.lang.String nameFormat> = null;

        r0.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.lang.Boolean daemon> = null;

        r0.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.lang.Integer priority> = null;

        r0.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler> = null;

        r0.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory backingThreadFactory> = null;

        return;
    }

    public com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)
    {
        com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder r3;
        java.lang.Object[] $r1;
        java.lang.String r0;
        java.lang.Integer $r2;

        r3 := @this: com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder;

        r0 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r1[0] = $r2;

        staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, $r1);

        r3.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.lang.String nameFormat> = r0;

        return r3;
    }

    public com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder setDaemon(boolean)
    {
        com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder r0;
        java.lang.Boolean $r1;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.lang.Boolean daemon> = $r1;

        return r0;
    }

    public com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder setPriority(int)
    {
        java.lang.Object[] $r0, $r3;
        java.lang.Integer $r1, $r2, $r4, $r5, $r7;
        com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder r6;
        int i0;
        boolean $z0, $z1;

        r6 := @this: com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder;

        i0 := @parameter0: int;

        if i0 < 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        $r0 = newarray (java.lang.Object)[2];

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r0[0] = $r1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r0[1] = $r2;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Thread priority (%s) must be >= %s", $r0);

        if i0 > 10 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        $r3 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r3[1] = $r5;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Thread priority (%s) must be <= %s", $r3);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r6.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.lang.Integer priority> = $r7;

        return r6;
    }

    public com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
    {
        com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder r0;
        java.lang.Thread$UncaughtExceptionHandler r1, $r3;
        java.lang.Object $r2;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder;

        r1 := @parameter0: java.lang.Thread$UncaughtExceptionHandler;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.lang.Thread$UncaughtExceptionHandler) $r2;

        r0.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler> = $r3;

        return r0;
    }

    public com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder setThreadFactory(java.util.concurrent.ThreadFactory)
    {
        com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder r0;
        java.lang.Object $r2;
        java.util.concurrent.ThreadFactory r1, $r3;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder;

        r1 := @parameter0: java.util.concurrent.ThreadFactory;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (java.util.concurrent.ThreadFactory) $r2;

        r0.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory backingThreadFactory> = $r3;

        return r0;
    }

    public java.util.concurrent.ThreadFactory build()
    {
        com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder r0;
        java.util.concurrent.ThreadFactory $r1;

        r0 := @this: com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build(com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder)>(r0);

        return $r1;
    }

    private static java.util.concurrent.ThreadFactory build(com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder)
    {
        java.lang.Integer r3;
        com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder r0;
        java.util.concurrent.atomic.AtomicLong $r9;
        com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder$1 $r7;
        java.lang.Thread$UncaughtExceptionHandler r4;
        java.lang.Boolean r2;
        java.lang.String r1;
        java.util.concurrent.ThreadFactory $r5, r6, $r8;

        r0 := @parameter0: com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder;

        r1 = r0.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.lang.String nameFormat>;

        r2 = r0.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.lang.Boolean daemon>;

        r3 = r0.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.lang.Integer priority>;

        r4 = r0.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler>;

        $r5 = r0.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory backingThreadFactory>;

        if $r5 == null goto label1;

        $r8 = r0.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory backingThreadFactory>;

        goto label2;

     label1:
        $r8 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>();

     label2:
        r6 = $r8;

        if r1 == null goto label3;

        $r9 = new java.util.concurrent.atomic.AtomicLong;

        specialinvoke $r9.<java.util.concurrent.atomic.AtomicLong: void <init>(long)>(0L);

        goto label4;

     label3:
        $r9 = null;

     label4:
        $r7 = new com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder$1;

        specialinvoke $r7.<com.mycila.inject.internal.guava.util.concurrent.ThreadFactoryBuilder$1: void <init>(java.util.concurrent.ThreadFactory,java.lang.String,java.util.concurrent.atomic.AtomicLong,java.lang.Boolean,java.lang.Integer,java.lang.Thread$UncaughtExceptionHandler)>(r6, r1, $r9, r2, r3, r4);

        return $r7;
    }
}
