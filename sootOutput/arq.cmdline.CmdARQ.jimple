public abstract class arq.cmdline.CmdARQ extends arq.cmdline.CmdGeneral
{
    protected arq.cmdline.ModSymbol modSymbol;
    arq.cmdline.ArgDecl strictDecl;
    protected boolean cmdStrictMode;

    protected void <init>(java.lang.String[])
    {
        arq.cmdline.ModSymbol $r2, $r5;
        arq.cmdline.ArgDecl $r3, $r6;
        java.lang.String[] r1, $r4;
        arq.cmdline.ModVersion $r7, $r8;
        arq.cmdline.CmdARQ r0;

        r0 := @this: arq.cmdline.CmdARQ;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<arq.cmdline.CmdGeneral: void <init>(java.lang.String[])>(r1);

        $r2 = new arq.cmdline.ModSymbol;

        specialinvoke $r2.<arq.cmdline.ModSymbol: void <init>()>();

        r0.<arq.cmdline.CmdARQ: arq.cmdline.ModSymbol modSymbol> = $r2;

        $r3 = new arq.cmdline.ArgDecl;

        $r4 = newarray (java.lang.String)[0];

        specialinvoke $r3.<arq.cmdline.ArgDecl: void <init>(boolean,java.lang.String,java.lang.String[])>(0, "strict", $r4);

        r0.<arq.cmdline.CmdARQ: arq.cmdline.ArgDecl strictDecl> = $r3;

        r0.<arq.cmdline.CmdARQ: boolean cmdStrictMode> = 0;

        $r5 = r0.<arq.cmdline.CmdARQ: arq.cmdline.ModSymbol modSymbol>;

        virtualinvoke r0.<arq.cmdline.CmdARQ: void addModule(arq.cmdline.ArgModuleGeneral)>($r5);

        $r6 = r0.<arq.cmdline.CmdARQ: arq.cmdline.ArgDecl strictDecl>;

        specialinvoke r0.<arq.cmdline.CmdGeneral: void add(arq.cmdline.ArgDecl,java.lang.String,java.lang.String)>($r6, "--strict", "Operate in strict SPARQL mode (no extensions of any kind)");

        $r7 = r0.<arq.cmdline.CmdGeneral: arq.cmdline.ModVersion modVersion>;

        virtualinvoke $r7.<arq.cmdline.ModVersion: void addClass(java.lang.Class)>(class "Lcom/hp/hpl/jena/query/ARQ;");

        $r8 = r0.<arq.cmdline.CmdGeneral: arq.cmdline.ModVersion modVersion>;

        virtualinvoke $r8.<arq.cmdline.ModVersion: void addClass(java.lang.Class)>(class "Lorg/apache/jena/riot/RIOT;");

        return;
    }

    protected void processModulesAndArgs()
    {
        arq.cmdline.ModGeneral $r4;
        arq.cmdline.ArgDecl $r2, $r3;
        arq.cmdline.ModVersion $r1, $r5;
        arq.cmdline.CmdARQ r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: arq.cmdline.CmdARQ;

        $r1 = r0.<arq.cmdline.CmdARQ: arq.cmdline.ModVersion modVersion>;

        $z0 = virtualinvoke $r1.<arq.cmdline.ModVersion: boolean getVersionFlag()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<arq.cmdline.CmdARQ: arq.cmdline.ModVersion modVersion>;

        virtualinvoke $r5.<arq.cmdline.ModVersion: void printVersionAndExit()>();

     label1:
        $r2 = r0.<arq.cmdline.CmdARQ: arq.cmdline.ArgDecl strictDecl>;

        $z1 = specialinvoke r0.<arq.cmdline.CmdGeneral: boolean contains(arq.cmdline.ArgDecl)>($r2);

        if $z1 == 0 goto label2;

        staticinvoke <com.hp.hpl.jena.query.ARQ: void setStrictMode()>();

     label2:
        $r3 = r0.<arq.cmdline.CmdARQ: arq.cmdline.ArgDecl strictDecl>;

        $z2 = specialinvoke r0.<arq.cmdline.CmdGeneral: boolean contains(arq.cmdline.ArgDecl)>($r3);

        r0.<arq.cmdline.CmdARQ: boolean cmdStrictMode> = $z2;

        $r4 = r0.<arq.cmdline.CmdARQ: arq.cmdline.ModGeneral modGeneral>;

        $z3 = $r4.<arq.cmdline.ModGeneral: boolean debug>;

        if $z3 == 0 goto label3;

        <com.hp.hpl.jena.sparql.engine.iterator.QueryIteratorBase: boolean traceIterators> = 1;

     label3:
        return;
    }

    protected java.lang.String getCommandName()
    {
        java.lang.String $r1;
        arq.cmdline.CmdARQ r0;

        r0 := @this: arq.cmdline.CmdARQ;

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.util.Utils: java.lang.String className(java.lang.Object)>(r0);

        return $r1;
    }
}
