public abstract class org.springframework.beans.factory.support.AbstractBeanDefinition extends org.springframework.beans.BeanMetadataAttributeAccessor implements org.springframework.beans.factory.config.BeanDefinition, java.lang.Cloneable
{
    public static final java.lang.String SCOPE_DEFAULT;
    public static final int AUTOWIRE_NO;
    public static final int AUTOWIRE_BY_NAME;
    public static final int AUTOWIRE_BY_TYPE;
    public static final int AUTOWIRE_CONSTRUCTOR;
    public static final int AUTOWIRE_AUTODETECT;
    public static final int DEPENDENCY_CHECK_NONE;
    public static final int DEPENDENCY_CHECK_OBJECTS;
    public static final int DEPENDENCY_CHECK_SIMPLE;
    public static final int DEPENDENCY_CHECK_ALL;
    private volatile java.lang.Object beanClass;
    private java.lang.String scope;
    private boolean singleton;
    private boolean prototype;
    private boolean abstractFlag;
    private boolean lazyInit;
    private int autowireMode;
    private int dependencyCheck;
    private java.lang.String[] dependsOn;
    private boolean autowireCandidate;
    private boolean primary;
    private final java.util.Map qualifiers;
    private boolean nonPublicAccessAllowed;
    private boolean lenientConstructorResolution;
    private org.springframework.beans.factory.config.ConstructorArgumentValues constructorArgumentValues;
    private org.springframework.beans.MutablePropertyValues propertyValues;
    private org.springframework.beans.factory.support.MethodOverrides methodOverrides;
    private java.lang.String factoryBeanName;
    private java.lang.String factoryMethodName;
    private java.lang.String initMethodName;
    private java.lang.String destroyMethodName;
    private boolean enforceInitMethod;
    private boolean enforceDestroyMethod;
    private boolean synthetic;
    private int role;
    private java.lang.String description;
    private org.springframework.core.io.Resource resource;

    protected void <init>()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        specialinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void <init>(org.springframework.beans.factory.config.ConstructorArgumentValues,org.springframework.beans.MutablePropertyValues)>(null, null);

        return;
    }

    protected void <init>(org.springframework.beans.factory.config.ConstructorArgumentValues, org.springframework.beans.MutablePropertyValues)
    {
        java.util.LinkedHashMap $r1;
        org.springframework.beans.factory.support.MethodOverrides $r2;
        org.springframework.beans.factory.config.ConstructorArgumentValues r3;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        org.springframework.beans.MutablePropertyValues r4;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r3 := @parameter0: org.springframework.beans.factory.config.ConstructorArgumentValues;

        r4 := @parameter1: org.springframework.beans.MutablePropertyValues;

        specialinvoke r0.<org.springframework.beans.BeanMetadataAttributeAccessor: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String scope> = "";

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean singleton> = 1;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean prototype> = 0;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean abstractFlag> = 0;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean lazyInit> = 0;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int autowireMode> = 0;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int dependencyCheck> = 0;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean autowireCandidate> = 1;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean primary> = 0;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int)>(0);

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.util.Map qualifiers> = $r1;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean nonPublicAccessAllowed> = 1;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean lenientConstructorResolution> = 1;

        $r2 = new org.springframework.beans.factory.support.MethodOverrides;

        specialinvoke $r2.<org.springframework.beans.factory.support.MethodOverrides: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.support.MethodOverrides methodOverrides> = $r2;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean enforceInitMethod> = 1;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean enforceDestroyMethod> = 1;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean synthetic> = 0;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int role> = 0;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setConstructorArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)>(r3);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setPropertyValues(org.springframework.beans.MutablePropertyValues)>(r4);

        return;
    }

    protected void <init>(org.springframework.beans.factory.support.AbstractBeanDefinition)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0, r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: org.springframework.beans.factory.support.AbstractBeanDefinition;

        specialinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void <init>(org.springframework.beans.factory.config.BeanDefinition)>(r1);

        return;
    }

    protected void <init>(org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0, r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.springframework.core.io.Resource $r21;
        org.springframework.beans.factory.support.MethodOverrides $r2, $r19, $r20;
        java.lang.String[] $r16;
        java.util.LinkedHashMap $r1;
        org.springframework.beans.factory.config.ConstructorArgumentValues $r9, $r10;
        int $i0, $i1, $i2;
        org.springframework.beans.factory.config.BeanDefinition r3;
        java.lang.String $r4, $r5, $r6, $r7, $r8, $r14, $r17, $r18;
        org.springframework.beans.MutablePropertyValues $r11, $r12;
        java.lang.Object $r13;
        java.lang.Class $r22;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r3 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        specialinvoke r0.<org.springframework.beans.BeanMetadataAttributeAccessor: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String scope> = "";

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean singleton> = 1;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean prototype> = 0;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean abstractFlag> = 0;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean lazyInit> = 0;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int autowireMode> = 0;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int dependencyCheck> = 0;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean autowireCandidate> = 1;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean primary> = 0;

        $r1 = new java.util.LinkedHashMap;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int)>(0);

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.util.Map qualifiers> = $r1;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean nonPublicAccessAllowed> = 1;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean lenientConstructorResolution> = 1;

        $r2 = new org.springframework.beans.factory.support.MethodOverrides;

        specialinvoke $r2.<org.springframework.beans.factory.support.MethodOverrides: void <init>()>();

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.support.MethodOverrides methodOverrides> = $r2;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean enforceInitMethod> = 1;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean enforceDestroyMethod> = 1;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean synthetic> = 0;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int role> = 0;

        $r4 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getParentName()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setParentName(java.lang.String)>($r4);

        $r5 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getBeanClassName()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setBeanClassName(java.lang.String)>($r5);

        $r6 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getFactoryBeanName()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setFactoryBeanName(java.lang.String)>($r6);

        $r7 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getFactoryMethodName()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setFactoryMethodName(java.lang.String)>($r7);

        $r8 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getScope()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setScope(java.lang.String)>($r8);

        $z0 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: boolean isAbstract()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setAbstract(boolean)>($z0);

        $z1 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: boolean isLazyInit()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setLazyInit(boolean)>($z1);

        $i0 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: int getRole()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setRole(int)>($i0);

        $r9 = new org.springframework.beans.factory.config.ConstructorArgumentValues;

        $r10 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues getConstructorArgumentValues()>();

        specialinvoke $r9.<org.springframework.beans.factory.config.ConstructorArgumentValues: void <init>(org.springframework.beans.factory.config.ConstructorArgumentValues)>($r10);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setConstructorArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)>($r9);

        $r11 = new org.springframework.beans.MutablePropertyValues;

        $r12 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>();

        specialinvoke $r11.<org.springframework.beans.MutablePropertyValues: void <init>(org.springframework.beans.PropertyValues)>($r12);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setPropertyValues(org.springframework.beans.MutablePropertyValues)>($r11);

        $r13 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: java.lang.Object getSource()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setSource(java.lang.Object)>($r13);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void copyAttributesFrom(org.springframework.core.AttributeAccessor)>(r3);

        $z2 = r3 instanceof org.springframework.beans.factory.support.AbstractBeanDefinition;

        if $z2 == 0 goto label2;

        r15 = (org.springframework.beans.factory.support.AbstractBeanDefinition) r3;

        $z3 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean hasBeanClass()>();

        if $z3 == 0 goto label1;

        $r22 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Class getBeanClass()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setBeanClass(java.lang.Class)>($r22);

     label1:
        $i1 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: int getAutowireMode()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setAutowireMode(int)>($i1);

        $i2 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: int getDependencyCheck()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setDependencyCheck(int)>($i2);

        $r16 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String[] getDependsOn()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setDependsOn(java.lang.String[])>($r16);

        $z4 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isAutowireCandidate()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setAutowireCandidate(boolean)>($z4);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void copyQualifiersFrom(org.springframework.beans.factory.support.AbstractBeanDefinition)>(r15);

        $z5 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isPrimary()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setPrimary(boolean)>($z5);

        $z6 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isNonPublicAccessAllowed()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setNonPublicAccessAllowed(boolean)>($z6);

        $z7 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isLenientConstructorResolution()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setLenientConstructorResolution(boolean)>($z7);

        $r17 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getInitMethodName()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setInitMethodName(java.lang.String)>($r17);

        $z8 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isEnforceInitMethod()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setEnforceInitMethod(boolean)>($z8);

        $r18 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getDestroyMethodName()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setDestroyMethodName(java.lang.String)>($r18);

        $z9 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isEnforceDestroyMethod()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setEnforceDestroyMethod(boolean)>($z9);

        $r19 = new org.springframework.beans.factory.support.MethodOverrides;

        $r20 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.support.MethodOverrides getMethodOverrides()>();

        specialinvoke $r19.<org.springframework.beans.factory.support.MethodOverrides: void <init>(org.springframework.beans.factory.support.MethodOverrides)>($r20);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setMethodOverrides(org.springframework.beans.factory.support.MethodOverrides)>($r19);

        $z10 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isSynthetic()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setSynthetic(boolean)>($z10);

        $r21 = virtualinvoke r15.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.core.io.Resource getResource()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setResource(org.springframework.core.io.Resource)>($r21);

        goto label3;

     label2:
        $r14 = interfaceinvoke r3.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getResourceDescription()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setResourceDescription(java.lang.String)>($r14);

     label3:
        return;
    }

    public void overrideFrom(org.springframework.beans.factory.support.AbstractBeanDefinition)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0, r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: org.springframework.beans.factory.support.AbstractBeanDefinition;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void overrideFrom(org.springframework.beans.factory.config.BeanDefinition)>(r1);

        return;
    }

    public void overrideFrom(org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r5, r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        org.springframework.core.io.Resource $r18;
        org.springframework.beans.factory.support.MethodOverrides $r16, $r17;
        java.lang.String[] $r13;
        org.springframework.beans.factory.config.ConstructorArgumentValues $r6, $r7;
        int $i0, $i1, $i2;
        org.springframework.beans.factory.config.BeanDefinition r0;
        java.lang.String $r1, $r2, $r3, $r4, $r11, $r14, $r15, $r19, $r20, $r22, $r23, $r24, $r25;
        org.springframework.beans.MutablePropertyValues $r8, $r9;
        java.lang.Object $r10;
        java.lang.Class $r21;

        r5 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r0 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        $r1 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getBeanClassName()>();

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r25 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getBeanClassName()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setBeanClassName(java.lang.String)>($r25);

     label1:
        $r2 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getFactoryBeanName()>();

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r2);

        if $z1 == 0 goto label2;

        $r24 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getFactoryBeanName()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setFactoryBeanName(java.lang.String)>($r24);

     label2:
        $r3 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getFactoryMethodName()>();

        $z2 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r3);

        if $z2 == 0 goto label3;

        $r23 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getFactoryMethodName()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setFactoryMethodName(java.lang.String)>($r23);

     label3:
        $r4 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getScope()>();

        $z3 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r4);

        if $z3 == 0 goto label4;

        $r22 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getScope()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setScope(java.lang.String)>($r22);

     label4:
        $z4 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: boolean isAbstract()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setAbstract(boolean)>($z4);

        $z5 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: boolean isLazyInit()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setLazyInit(boolean)>($z5);

        $i0 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: int getRole()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setRole(int)>($i0);

        $r6 = virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues getConstructorArgumentValues()>();

        $r7 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues getConstructorArgumentValues()>();

        virtualinvoke $r6.<org.springframework.beans.factory.config.ConstructorArgumentValues: void addArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)>($r7);

        $r8 = virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>();

        $r9 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: org.springframework.beans.MutablePropertyValues getPropertyValues()>();

        virtualinvoke $r8.<org.springframework.beans.MutablePropertyValues: org.springframework.beans.MutablePropertyValues addPropertyValues(org.springframework.beans.PropertyValues)>($r9);

        $r10 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.Object getSource()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setSource(java.lang.Object)>($r10);

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void copyAttributesFrom(org.springframework.core.AttributeAccessor)>(r0);

        $z6 = r0 instanceof org.springframework.beans.factory.support.AbstractBeanDefinition;

        if $z6 == 0 goto label8;

        r12 = (org.springframework.beans.factory.support.AbstractBeanDefinition) r0;

        $z7 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean hasBeanClass()>();

        if $z7 == 0 goto label5;

        $r21 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Class getBeanClass()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setBeanClass(java.lang.Class)>($r21);

     label5:
        $z8 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isAutowireCandidate()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setAutowireCandidate(boolean)>($z8);

        $i1 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: int getAutowireMode()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setAutowireMode(int)>($i1);

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void copyQualifiersFrom(org.springframework.beans.factory.support.AbstractBeanDefinition)>(r12);

        $z9 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isPrimary()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setPrimary(boolean)>($z9);

        $i2 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: int getDependencyCheck()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setDependencyCheck(int)>($i2);

        $r13 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String[] getDependsOn()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setDependsOn(java.lang.String[])>($r13);

        $z10 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isNonPublicAccessAllowed()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setNonPublicAccessAllowed(boolean)>($z10);

        $z11 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isLenientConstructorResolution()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setLenientConstructorResolution(boolean)>($z11);

        $r14 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getInitMethodName()>();

        $z12 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r14);

        if $z12 == 0 goto label6;

        $r20 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getInitMethodName()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setInitMethodName(java.lang.String)>($r20);

        $z16 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isEnforceInitMethod()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setEnforceInitMethod(boolean)>($z16);

     label6:
        $r15 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getDestroyMethodName()>();

        $z13 = staticinvoke <org.springframework.util.StringUtils: boolean hasLength(java.lang.String)>($r15);

        if $z13 == 0 goto label7;

        $r19 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getDestroyMethodName()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setDestroyMethodName(java.lang.String)>($r19);

        $z15 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isEnforceDestroyMethod()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setEnforceDestroyMethod(boolean)>($z15);

     label7:
        $r16 = virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.support.MethodOverrides getMethodOverrides()>();

        $r17 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.support.MethodOverrides getMethodOverrides()>();

        virtualinvoke $r16.<org.springframework.beans.factory.support.MethodOverrides: void addOverrides(org.springframework.beans.factory.support.MethodOverrides)>($r17);

        $z14 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean isSynthetic()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setSynthetic(boolean)>($z14);

        $r18 = virtualinvoke r12.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.core.io.Resource getResource()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setResource(org.springframework.core.io.Resource)>($r18);

        goto label9;

     label8:
        $r11 = interfaceinvoke r0.<org.springframework.beans.factory.config.BeanDefinition: java.lang.String getResourceDescription()>();

        virtualinvoke r5.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setResourceDescription(java.lang.String)>($r11);

     label9:
        return;
    }

    public void applyDefaults(org.springframework.beans.factory.support.BeanDefinitionDefaults)
    {
        org.springframework.beans.factory.support.BeanDefinitionDefaults r1;
        int $i0, $i1;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String $r2, $r3;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: org.springframework.beans.factory.support.BeanDefinitionDefaults;

        $z0 = virtualinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionDefaults: boolean isLazyInit()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setLazyInit(boolean)>($z0);

        $i0 = virtualinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionDefaults: int getAutowireMode()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setAutowireMode(int)>($i0);

        $i1 = virtualinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionDefaults: int getDependencyCheck()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setDependencyCheck(int)>($i1);

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionDefaults: java.lang.String getInitMethodName()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setInitMethodName(java.lang.String)>($r2);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setEnforceInitMethod(boolean)>(0);

        $r3 = virtualinvoke r1.<org.springframework.beans.factory.support.BeanDefinitionDefaults: java.lang.String getDestroyMethodName()>();

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setDestroyMethodName(java.lang.String)>($r3);

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void setEnforceDestroyMethod(boolean)>(0);

        return;
    }

    public boolean hasBeanClass()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.Object $r1;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Object beanClass>;

        $z0 = $r1 instanceof java.lang.Class;

        return $z0;
    }

    public void setBeanClass(java.lang.Class)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.Class r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: java.lang.Class;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Object beanClass> = r1;

        return;
    }

    public java.lang.Class getBeanClass() throws java.lang.IllegalStateException
    {
        java.lang.IllegalStateException $r3, $r8;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Object beanClass>;

        if r1 != null goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No bean class specified on bean definition");

        throw $r8;

     label1:
        $z0 = r1 instanceof java.lang.Class;

        if $z0 != 0 goto label2;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bean class name [");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] has not been resolved into an actual Class");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label2:
        $r2 = (java.lang.Class) r1;

        return $r2;
    }

    public void setBeanClassName(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Object beanClass> = r1;

        return;
    }

    public java.lang.String getBeanClassName()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.Object r1;
        java.lang.Class $r3;
        java.lang.String $r2, $r4;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Object beanClass>;

        $z0 = r1 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r3 = (java.lang.Class) r1;

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        return $r4;

     label1:
        $r2 = (java.lang.String) r1;

        return $r2;
    }

    public java.lang.Class resolveBeanClass(java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.Class $r3;
        java.lang.String $r1;
        java.lang.ClassLoader r2;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r2 := @parameter0: java.lang.ClassLoader;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getBeanClassName()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.Class forName(java.lang.String,java.lang.ClassLoader)>($r1, r2);

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Object beanClass> = $r3;

        return $r3;
    }

    public void setScope(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String scope> = r1;

        $r2 = "singleton";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = "";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label1;

        $z2 = 0;

        goto label2;

     label1:
        $z2 = 1;

     label2:
        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean singleton> = $z2;

        $r4 = "prototype";

        $z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean prototype> = $z3;

        return;
    }

    public java.lang.String getScope()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String scope>;

        return $r1;
    }

    public void setSingleton(boolean)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String $r1;
        boolean z0, $z1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = "singleton";

        goto label2;

     label1:
        $r1 = "prototype";

     label2:
        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String scope> = $r1;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean singleton> = z0;

        if z0 == 0 goto label3;

        $z1 = 0;

        goto label4;

     label3:
        $z1 = 1;

     label4:
        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean prototype> = $z1;

        return;
    }

    public boolean isSingleton()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $z0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean singleton>;

        return $z0;
    }

    public boolean isPrototype()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $z0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean prototype>;

        return $z0;
    }

    public void setAbstract(boolean)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean abstractFlag> = z0;

        return;
    }

    public boolean isAbstract()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $z0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean abstractFlag>;

        return $z0;
    }

    public void setLazyInit(boolean)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean lazyInit> = z0;

        return;
    }

    public boolean isLazyInit()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $z0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean lazyInit>;

        return $z0;
    }

    public void setAutowireMode(int)
    {
        int i0;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        i0 := @parameter0: int;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int autowireMode> = i0;

        return;
    }

    public int getAutowireMode()
    {
        int $i0;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $i0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int autowireMode>;

        return $i0;
    }

    public int getResolvedAutowireMode()
    {
        java.lang.Class[] $r4;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.reflect.Constructor r3;
        java.lang.reflect.Constructor[] $r2;
        int $i0, $i1, i2, $i3, i4;
        java.lang.Class $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $i0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int autowireMode>;

        if $i0 != 4 goto label4;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Class getBeanClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>();

        i2 = lengthof $r2;

        i4 = 0;

        goto label3;

     label1:
        r3 = $r2[i4];

        $r4 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i3 = lengthof $r4;

        if $i3 != 0 goto label2;

        return 2;

     label2:
        i4 = i4 + 1;

     label3:
        if i4 < i2 goto label1;

        return 3;

     label4:
        $i1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int autowireMode>;

        return $i1;
    }

    public void setDependencyCheck(int)
    {
        int i0;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        i0 := @parameter0: int;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int dependencyCheck> = i0;

        return;
    }

    public int getDependencyCheck()
    {
        int $i0;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $i0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int dependencyCheck>;

        return $i0;
    }

    public void setDependsOn(java.lang.String[])
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String[] r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: java.lang.String[];

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String[] dependsOn> = r1;

        return;
    }

    public java.lang.String[] getDependsOn()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String[] $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String[] dependsOn>;

        return $r1;
    }

    public void setAutowireCandidate(boolean)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean autowireCandidate> = z0;

        return;
    }

    public boolean isAutowireCandidate()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $z0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean autowireCandidate>;

        return $z0;
    }

    public void setPrimary(boolean)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean primary> = z0;

        return;
    }

    public boolean isPrimary()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $z0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean primary>;

        return $z0;
    }

    public void addQualifier(org.springframework.beans.factory.support.AutowireCandidateQualifier)
    {
        java.util.Map $r2;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        org.springframework.beans.factory.support.AutowireCandidateQualifier r1;
        java.lang.String $r3;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: org.springframework.beans.factory.support.AutowireCandidateQualifier;

        $r2 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.util.Map qualifiers>;

        $r3 = virtualinvoke r1.<org.springframework.beans.factory.support.AutowireCandidateQualifier: java.lang.String getTypeName()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public boolean hasQualifier(java.lang.String)
    {
        java.util.Map $r1;
        java.util.Set $r2;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String r3;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.util.Map qualifiers>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        return $z0;
    }

    public org.springframework.beans.factory.support.AutowireCandidateQualifier getQualifier(java.lang.String)
    {
        java.util.Map $r2;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.Object $r3;
        org.springframework.beans.factory.support.AutowireCandidateQualifier $r4;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.util.Map qualifiers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.springframework.beans.factory.support.AutowireCandidateQualifier) $r3;

        return $r4;
    }

    public java.util.Set getQualifiers()
    {
        java.util.Map $r2;
        java.util.Collection $r3;
        org.springframework.beans.factory.support.AbstractBeanDefinition r1;
        java.util.LinkedHashSet $r0;

        r1 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r0 = new java.util.LinkedHashSet;

        $r2 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.util.Map qualifiers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r0.<java.util.LinkedHashSet: void <init>(java.util.Collection)>($r3);

        return $r0;
    }

    public void copyQualifiersFrom(org.springframework.beans.factory.support.AbstractBeanDefinition)
    {
        java.util.Map $r2, $r3;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0, r1;

        r1 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r0 := @parameter0: org.springframework.beans.factory.support.AbstractBeanDefinition;

        staticinvoke <org.springframework.util.Assert: void notNull(java.lang.Object,java.lang.String)>(r0, "Source must not be null");

        $r3 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.util.Map qualifiers>;

        $r2 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.util.Map qualifiers>;

        interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>($r2);

        return;
    }

    public void setNonPublicAccessAllowed(boolean)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean nonPublicAccessAllowed> = z0;

        return;
    }

    public boolean isNonPublicAccessAllowed()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $z0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean nonPublicAccessAllowed>;

        return $z0;
    }

    public void setLenientConstructorResolution(boolean)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean lenientConstructorResolution> = z0;

        return;
    }

    public boolean isLenientConstructorResolution()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $z0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean lenientConstructorResolution>;

        return $z0;
    }

    public void setConstructorArgumentValues(org.springframework.beans.factory.config.ConstructorArgumentValues)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues r1, $r2;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: org.springframework.beans.factory.config.ConstructorArgumentValues;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = new org.springframework.beans.factory.config.ConstructorArgumentValues;

        specialinvoke $r2.<org.springframework.beans.factory.config.ConstructorArgumentValues: void <init>()>();

     label2:
        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues constructorArgumentValues> = $r2;

        return;
    }

    public org.springframework.beans.factory.config.ConstructorArgumentValues getConstructorArgumentValues()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues constructorArgumentValues>;

        return $r1;
    }

    public boolean hasConstructorArgumentValues()
    {
        org.springframework.beans.factory.config.ConstructorArgumentValues $r1;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues constructorArgumentValues>;

        $z0 = virtualinvoke $r1.<org.springframework.beans.factory.config.ConstructorArgumentValues: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $z1 = 0;

        goto label2;

     label1:
        $z1 = 1;

     label2:
        return $z1;
    }

    public void setPropertyValues(org.springframework.beans.MutablePropertyValues)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        org.springframework.beans.MutablePropertyValues r1, $r2;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: org.springframework.beans.MutablePropertyValues;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = new org.springframework.beans.MutablePropertyValues;

        specialinvoke $r2.<org.springframework.beans.MutablePropertyValues: void <init>()>();

     label2:
        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.MutablePropertyValues propertyValues> = $r2;

        return;
    }

    public org.springframework.beans.MutablePropertyValues getPropertyValues()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        org.springframework.beans.MutablePropertyValues $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.MutablePropertyValues propertyValues>;

        return $r1;
    }

    public void setMethodOverrides(org.springframework.beans.factory.support.MethodOverrides)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        org.springframework.beans.factory.support.MethodOverrides r1, $r2;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: org.springframework.beans.factory.support.MethodOverrides;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = new org.springframework.beans.factory.support.MethodOverrides;

        specialinvoke $r2.<org.springframework.beans.factory.support.MethodOverrides: void <init>()>();

     label2:
        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.support.MethodOverrides methodOverrides> = $r2;

        return;
    }

    public org.springframework.beans.factory.support.MethodOverrides getMethodOverrides()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        org.springframework.beans.factory.support.MethodOverrides $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.support.MethodOverrides methodOverrides>;

        return $r1;
    }

    public void setFactoryBeanName(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String factoryBeanName> = r1;

        return;
    }

    public java.lang.String getFactoryBeanName()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String factoryBeanName>;

        return $r1;
    }

    public void setFactoryMethodName(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String factoryMethodName> = r1;

        return;
    }

    public java.lang.String getFactoryMethodName()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String factoryMethodName>;

        return $r1;
    }

    public void setInitMethodName(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String initMethodName> = r1;

        return;
    }

    public java.lang.String getInitMethodName()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String initMethodName>;

        return $r1;
    }

    public void setEnforceInitMethod(boolean)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean enforceInitMethod> = z0;

        return;
    }

    public boolean isEnforceInitMethod()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $z0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean enforceInitMethod>;

        return $z0;
    }

    public void setDestroyMethodName(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String destroyMethodName> = r1;

        return;
    }

    public java.lang.String getDestroyMethodName()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String destroyMethodName>;

        return $r1;
    }

    public void setEnforceDestroyMethod(boolean)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean enforceDestroyMethod> = z0;

        return;
    }

    public boolean isEnforceDestroyMethod()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $z0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean enforceDestroyMethod>;

        return $z0;
    }

    public void setSynthetic(boolean)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        z0 := @parameter0: boolean;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean synthetic> = z0;

        return;
    }

    public boolean isSynthetic()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $z0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean synthetic>;

        return $z0;
    }

    public void setRole(int)
    {
        int i0;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        i0 := @parameter0: int;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int role> = i0;

        return;
    }

    public int getRole()
    {
        int $i0;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $i0 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int role>;

        return $i0;
    }

    public void setDescription(java.lang.String)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String description> = r1;

        return;
    }

    public java.lang.String getDescription()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String description>;

        return $r1;
    }

    public void setResource(org.springframework.core.io.Resource)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        org.springframework.core.io.Resource r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: org.springframework.core.io.Resource;

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.core.io.Resource resource> = r1;

        return;
    }

    public org.springframework.core.io.Resource getResource()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        org.springframework.core.io.Resource $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.core.io.Resource resource>;

        return $r1;
    }

    public void setResourceDescription(java.lang.String)
    {
        org.springframework.core.io.DescriptiveResource $r1;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String r2;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r2 := @parameter0: java.lang.String;

        $r1 = new org.springframework.core.io.DescriptiveResource;

        specialinvoke $r1.<org.springframework.core.io.DescriptiveResource: void <init>(java.lang.String)>(r2);

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.core.io.Resource resource> = $r1;

        return;
    }

    public java.lang.String getResourceDescription()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String $r3;
        org.springframework.core.io.Resource $r1, $r2;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.core.io.Resource resource>;

        if $r1 == null goto label1;

        $r2 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.core.io.Resource resource>;

        $r3 = interfaceinvoke $r2.<org.springframework.core.io.Resource: java.lang.String getDescription()>();

        goto label2;

     label1:
        $r3 = null;

     label2:
        return $r3;
    }

    public void setOriginatingBeanDefinition(org.springframework.beans.factory.config.BeanDefinition)
    {
        org.springframework.beans.factory.support.BeanDefinitionResource $r1;
        org.springframework.beans.factory.config.BeanDefinition r2;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r2 := @parameter0: org.springframework.beans.factory.config.BeanDefinition;

        $r1 = new org.springframework.beans.factory.support.BeanDefinitionResource;

        specialinvoke $r1.<org.springframework.beans.factory.support.BeanDefinitionResource: void <init>(org.springframework.beans.factory.config.BeanDefinition)>(r2);

        r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.core.io.Resource resource> = $r1;

        return;
    }

    public org.springframework.beans.factory.config.BeanDefinition getOriginatingBeanDefinition()
    {
        org.springframework.beans.factory.support.BeanDefinitionResource $r3;
        org.springframework.beans.factory.config.BeanDefinition $r4;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        org.springframework.core.io.Resource $r1, $r2;
        boolean $z0;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.core.io.Resource resource>;

        $z0 = $r1 instanceof org.springframework.beans.factory.support.BeanDefinitionResource;

        if $z0 == 0 goto label1;

        $r2 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.core.io.Resource resource>;

        $r3 = (org.springframework.beans.factory.support.BeanDefinitionResource) $r2;

        $r4 = virtualinvoke $r3.<org.springframework.beans.factory.support.BeanDefinitionResource: org.springframework.beans.factory.config.BeanDefinition getBeanDefinition()>();

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public void validate() throws org.springframework.beans.factory.support.BeanDefinitionValidationException
    {
        org.springframework.beans.factory.support.MethodOverrides $r1;
        org.springframework.beans.factory.support.BeanDefinitionValidationException $r3;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.String $r2;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.support.MethodOverrides getMethodOverrides()>();

        $z0 = virtualinvoke $r1.<org.springframework.beans.factory.support.MethodOverrides: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getFactoryMethodName()>();

        if $r2 == null goto label1;

        $r3 = new org.springframework.beans.factory.support.BeanDefinitionValidationException;

        specialinvoke $r3.<org.springframework.beans.factory.support.BeanDefinitionValidationException: void <init>(java.lang.String)>("Cannot combine static factory method with method overrides: the static factory method must create the instance");

        throw $r3;

     label1:
        $z1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean hasBeanClass()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void prepareMethodOverrides()>();

     label2:
        return;
    }

    public void prepareMethodOverrides() throws org.springframework.beans.factory.support.BeanDefinitionValidationException
    {
        org.springframework.beans.factory.support.MethodOverrides $r1;
        java.util.Iterator $r3;
        org.springframework.beans.factory.support.MethodOverride r5;
        java.util.Set $r2;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.support.MethodOverrides getMethodOverrides()>();

        $z0 = virtualinvoke $r1.<org.springframework.beans.factory.support.MethodOverrides: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r2 = virtualinvoke $r1.<org.springframework.beans.factory.support.MethodOverrides: java.util.Set getOverrides()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.springframework.beans.factory.support.MethodOverride) $r4;

        virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: void prepareMethodOverride(org.springframework.beans.factory.support.MethodOverride)>(r5);

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

     label3:
        return;
    }

    protected void prepareMethodOverride(org.springframework.beans.factory.support.MethodOverride) throws org.springframework.beans.factory.support.BeanDefinitionValidationException
    {
        org.springframework.beans.factory.support.MethodOverride r2;
        org.springframework.beans.factory.support.BeanDefinitionValidationException $r4;
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        int $i0;
        java.lang.Class $r1;
        java.lang.StringBuilder $r5, $r7, $r8, $r10, $r11;
        java.lang.String $r3, $r6, $r9, $r12;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r2 := @parameter0: org.springframework.beans.factory.support.MethodOverride;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.Class getBeanClass()>();

        $r3 = virtualinvoke r2.<org.springframework.beans.factory.support.MethodOverride: java.lang.String getMethodName()>();

        $i0 = staticinvoke <org.springframework.util.ClassUtils: int getMethodCountForName(java.lang.Class,java.lang.String)>($r1, $r3);

        if $i0 != 0 goto label1;

        $r4 = new org.springframework.beans.factory.support.BeanDefinitionValidationException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Invalid method override: no method with name \'");

        $r6 = virtualinvoke r2.<org.springframework.beans.factory.support.MethodOverride: java.lang.String getMethodName()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' on class [");

        $r9 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getBeanClassName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<org.springframework.beans.factory.support.BeanDefinitionValidationException: void <init>(java.lang.String)>($r12);

        throw $r4;

     label1:
        if $i0 != 1 goto label2;

        virtualinvoke r2.<org.springframework.beans.factory.support.MethodOverride: void setOverloaded(boolean)>(0);

     label2:
        return;
    }

    public java.lang.Object clone()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0, $r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.support.AbstractBeanDefinition cloneBeanDefinition()>();

        return $r1;
    }

    public abstract org.springframework.beans.factory.support.AbstractBeanDefinition cloneBeanDefinition();

    public boolean equals(java.lang.Object)
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0, r2;
        java.util.Map $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30;
        org.springframework.beans.factory.support.MethodOverrides $r15, $r16;
        java.lang.String[] $r7, $r8;
        org.springframework.beans.factory.config.ConstructorArgumentValues $r11, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r3, $r4, $r5, $r6, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        org.springframework.beans.MutablePropertyValues $r13, $r14;
        java.lang.Object r1;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = r1 instanceof org.springframework.beans.factory.support.AbstractBeanDefinition;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = (org.springframework.beans.factory.support.AbstractBeanDefinition) r1;

        $r3 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getBeanClassName()>();

        $r4 = virtualinvoke r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getBeanClassName()>();

        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r3, $r4);

        if $z1 != 0 goto label03;

        return 0;

     label03:
        $r6 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String scope>;

        $r5 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String scope>;

        $z2 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r6, $r5);

        if $z2 != 0 goto label04;

        return 0;

     label04:
        $z4 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean abstractFlag>;

        $z3 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean abstractFlag>;

        if $z4 == $z3 goto label05;

        return 0;

     label05:
        $z6 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean lazyInit>;

        $z5 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean lazyInit>;

        if $z6 == $z5 goto label06;

        return 0;

     label06:
        $i1 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int autowireMode>;

        $i0 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: int autowireMode>;

        if $i1 == $i0 goto label07;

        return 0;

     label07:
        $i3 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int dependencyCheck>;

        $i2 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: int dependencyCheck>;

        if $i3 == $i2 goto label08;

        return 0;

     label08:
        $r8 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String[] dependsOn>;

        $r7 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String[] dependsOn>;

        $z7 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r8, $r7);

        if $z7 != 0 goto label09;

        return 0;

     label09:
        $z9 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean autowireCandidate>;

        $z8 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean autowireCandidate>;

        if $z9 == $z8 goto label10;

        return 0;

     label10:
        $r10 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.util.Map qualifiers>;

        $r9 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.util.Map qualifiers>;

        $z10 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r10, $r9);

        if $z10 != 0 goto label11;

        return 0;

     label11:
        $z12 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean primary>;

        $z11 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean primary>;

        if $z12 == $z11 goto label12;

        return 0;

     label12:
        $z14 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean nonPublicAccessAllowed>;

        $z13 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean nonPublicAccessAllowed>;

        if $z14 == $z13 goto label13;

        return 0;

     label13:
        $z16 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean lenientConstructorResolution>;

        $z15 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean lenientConstructorResolution>;

        if $z16 == $z15 goto label14;

        return 0;

     label14:
        $r12 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues constructorArgumentValues>;

        $r11 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues constructorArgumentValues>;

        $z17 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r12, $r11);

        if $z17 != 0 goto label15;

        return 0;

     label15:
        $r14 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.MutablePropertyValues propertyValues>;

        $r13 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.MutablePropertyValues propertyValues>;

        $z18 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r14, $r13);

        if $z18 != 0 goto label16;

        return 0;

     label16:
        $r16 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.support.MethodOverrides methodOverrides>;

        $r15 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.support.MethodOverrides methodOverrides>;

        $z19 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r16, $r15);

        if $z19 != 0 goto label17;

        return 0;

     label17:
        $r18 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String factoryBeanName>;

        $r17 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String factoryBeanName>;

        $z20 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r18, $r17);

        if $z20 != 0 goto label18;

        return 0;

     label18:
        $r20 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String factoryMethodName>;

        $r19 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String factoryMethodName>;

        $z21 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r20, $r19);

        if $z21 != 0 goto label19;

        return 0;

     label19:
        $r22 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String initMethodName>;

        $r21 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String initMethodName>;

        $z22 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r22, $r21);

        if $z22 != 0 goto label20;

        return 0;

     label20:
        $z24 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean enforceInitMethod>;

        $z23 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean enforceInitMethod>;

        if $z24 == $z23 goto label21;

        return 0;

     label21:
        $r24 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String destroyMethodName>;

        $r23 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String destroyMethodName>;

        $z25 = staticinvoke <org.springframework.util.ObjectUtils: boolean nullSafeEquals(java.lang.Object,java.lang.Object)>($r24, $r23);

        if $z25 != 0 goto label22;

        return 0;

     label22:
        $z27 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean enforceDestroyMethod>;

        $z26 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean enforceDestroyMethod>;

        if $z27 == $z26 goto label23;

        return 0;

     label23:
        $z29 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean synthetic>;

        $z28 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean synthetic>;

        if $z29 == $z28 goto label24;

        return 0;

     label24:
        $i5 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: int role>;

        $i4 = r2.<org.springframework.beans.factory.support.AbstractBeanDefinition: int role>;

        if $i5 == $i4 goto label25;

        return 0;

     label25:
        $z30 = specialinvoke r0.<org.springframework.beans.BeanMetadataAttributeAccessor: boolean equals(java.lang.Object)>(r1);

        return $z30;
    }

    public int hashCode()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r0;
        org.springframework.beans.factory.config.ConstructorArgumentValues $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16, i17, i18;
        java.lang.String $r1, $r2, $r5, $r6;
        org.springframework.beans.MutablePropertyValues $r4;

        r0 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r1 = virtualinvoke r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getBeanClassName()>();

        $i0 = staticinvoke <org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>($r1);

        $i1 = 29 * $i0;

        $r2 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String scope>;

        $i2 = staticinvoke <org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>($r2);

        i13 = $i1 + $i2;

        $i3 = 29 * i13;

        $r3 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.factory.config.ConstructorArgumentValues constructorArgumentValues>;

        $i4 = staticinvoke <org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>($r3);

        i14 = $i3 + $i4;

        $i5 = 29 * i14;

        $r4 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.beans.MutablePropertyValues propertyValues>;

        $i6 = staticinvoke <org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>($r4);

        i15 = $i5 + $i6;

        $i7 = 29 * i15;

        $r5 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String factoryBeanName>;

        $i8 = staticinvoke <org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>($r5);

        i16 = $i7 + $i8;

        $i9 = 29 * i16;

        $r6 = r0.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String factoryMethodName>;

        $i10 = staticinvoke <org.springframework.util.ObjectUtils: int nullSafeHashCode(java.lang.Object)>($r6);

        i17 = $i9 + $i10;

        $i11 = 29 * i17;

        $i12 = specialinvoke r0.<org.springframework.beans.BeanMetadataAttributeAccessor: int hashCode()>();

        i18 = $i11 + $i12;

        return i18;
    }

    public java.lang.String toString()
    {
        org.springframework.beans.factory.support.AbstractBeanDefinition r1;
        int $i0, $i1;
        java.lang.String $r2, $r5, $r13, $r15, $r17, $r19, $r21, $r24;
        boolean $z0, $z1, $z2, $z3;
        org.springframework.core.io.Resource $r20, $r23;
        java.lang.StringBuilder $r0, $r3, $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r16, $r18, $r22;

        r1 := @this: org.springframework.beans.factory.support.AbstractBeanDefinition;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>("class [");

        $r2 = virtualinvoke r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String getBeanClassName()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; scope=");

        $r5 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String scope>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; abstract=");

        $z0 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean abstractFlag>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; lazyInit=");

        $z1 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean lazyInit>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; autowireMode=");

        $i0 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: int autowireMode>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; dependencyCheck=");

        $i1 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: int dependencyCheck>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; autowireCandidate=");

        $z2 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean autowireCandidate>;

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r11 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; primary=");

        $z3 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: boolean primary>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r12 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; factoryBeanName=");

        $r13 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String factoryBeanName>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r14 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; factoryMethodName=");

        $r15 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String factoryMethodName>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r16 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; initMethodName=");

        $r17 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String initMethodName>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r18 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; destroyMethodName=");

        $r19 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String destroyMethodName>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r20 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.core.io.Resource resource>;

        if $r20 == null goto label1;

        $r22 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; defined in ");

        $r23 = r1.<org.springframework.beans.factory.support.AbstractBeanDefinition: org.springframework.core.io.Resource resource>;

        $r24 = interfaceinvoke $r23.<org.springframework.core.io.Resource: java.lang.String getDescription()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

     label1:
        $r21 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r21;
    }

    public static void <clinit>()
    {
        <org.springframework.beans.factory.support.AbstractBeanDefinition: int DEPENDENCY_CHECK_ALL> = 3;

        <org.springframework.beans.factory.support.AbstractBeanDefinition: int DEPENDENCY_CHECK_SIMPLE> = 2;

        <org.springframework.beans.factory.support.AbstractBeanDefinition: int DEPENDENCY_CHECK_OBJECTS> = 1;

        <org.springframework.beans.factory.support.AbstractBeanDefinition: int DEPENDENCY_CHECK_NONE> = 0;

        <org.springframework.beans.factory.support.AbstractBeanDefinition: int AUTOWIRE_AUTODETECT> = 4;

        <org.springframework.beans.factory.support.AbstractBeanDefinition: int AUTOWIRE_CONSTRUCTOR> = 3;

        <org.springframework.beans.factory.support.AbstractBeanDefinition: int AUTOWIRE_BY_TYPE> = 2;

        <org.springframework.beans.factory.support.AbstractBeanDefinition: int AUTOWIRE_BY_NAME> = 1;

        <org.springframework.beans.factory.support.AbstractBeanDefinition: int AUTOWIRE_NO> = 0;

        <org.springframework.beans.factory.support.AbstractBeanDefinition: java.lang.String SCOPE_DEFAULT> = "";

        return;
    }
}
