public abstract class com.jhlabs.image.ImageUtils extends java.lang.Object
{
    public static final int SELECTED;
    public static final int UNSELECTED;
    public static java.awt.image.BufferedImage backgroundImage;

    public void <init>()
    {
        com.jhlabs.image.ImageUtils r0;

        r0 := @this: com.jhlabs.image.ImageUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.awt.image.BufferedImage createImage(java.awt.image.ImageProducer)
    {
        java.awt.image.ImageProducer r1;
        int[] $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10, $i12;
        java.awt.image.PixelGrabber $r10;
        java.awt.image.BufferedImage $r14;
        java.lang.RuntimeException $r11, $r12, $r13;
        java.lang.InterruptedException $r8;
        java.lang.Object $r3;

        r1 := @parameter0: java.awt.image.ImageProducer;

        $r10 = new java.awt.image.PixelGrabber;

        $i10 = (int) -1;

        $i12 = (int) -1;

        specialinvoke $r10.<java.awt.image.PixelGrabber: void <init>(java.awt.image.ImageProducer,int,int,int,int,int[],int,int)>(r1, 0, 0, $i10, $i12, null, 0, 0);

     label1:
        virtualinvoke $r10.<java.awt.image.PixelGrabber: boolean grabPixels()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Image fetch interrupted");

        throw $r11;

     label4:
        $i0 = virtualinvoke $r10.<java.awt.image.PixelGrabber: int status()>();

        $i1 = $i0 & 128;

        if $i1 == 0 goto label5;

        $r12 = new java.lang.RuntimeException;

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("Image fetch aborted");

        throw $r12;

     label5:
        $i2 = virtualinvoke $r10.<java.awt.image.PixelGrabber: int status()>();

        $i3 = $i2 & 64;

        if $i3 == 0 goto label6;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("Image fetch error");

        throw $r13;

     label6:
        $r14 = new java.awt.image.BufferedImage;

        $i4 = virtualinvoke $r10.<java.awt.image.PixelGrabber: int getWidth()>();

        $i5 = virtualinvoke $r10.<java.awt.image.PixelGrabber: int getHeight()>();

        specialinvoke $r14.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i4, $i5, 2);

        $i6 = virtualinvoke $r10.<java.awt.image.PixelGrabber: int getWidth()>();

        $i7 = virtualinvoke $r10.<java.awt.image.PixelGrabber: int getHeight()>();

        $r3 = virtualinvoke $r10.<java.awt.image.PixelGrabber: java.lang.Object getPixels()>();

        $r4 = (int[]) $r3;

        $r5 = (int[]) $r4;

        $i8 = virtualinvoke $r10.<java.awt.image.PixelGrabber: int getWidth()>();

        virtualinvoke $r14.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(0, 0, $i6, $i7, $r5, 0, $i8);

        return $r14;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    public static java.awt.image.BufferedImage convertImageToARGB(java.awt.Image)
    {
        java.awt.Image r0;
        java.awt.image.BufferedImage $r1, $r3, $r4;
        java.awt.Graphics2D $r2;
        int $i0, $i1, $i2;
        boolean $z0;

        r0 := @parameter0: java.awt.Image;

        $z0 = r0 instanceof java.awt.image.BufferedImage;

        if $z0 == 0 goto label1;

        $r3 = (java.awt.image.BufferedImage) r0;

        $i2 = virtualinvoke $r3.<java.awt.image.BufferedImage: int getType()>();

        if $i2 != 2 goto label1;

        $r4 = (java.awt.image.BufferedImage) r0;

        return $r4;

     label1:
        $r1 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.Image: int getWidth(java.awt.image.ImageObserver)>(null);

        $i1 = virtualinvoke r0.<java.awt.Image: int getHeight(java.awt.image.ImageObserver)>(null);

        specialinvoke $r1.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        $r2 = virtualinvoke $r1.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke $r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>(r0, 0, 0, null);

        virtualinvoke $r2.<java.awt.Graphics: void dispose()>();

        return $r1;
    }

    public static java.awt.image.BufferedImage getSubimage(java.awt.image.BufferedImage, int, int, int, int)
    {
        java.awt.image.BufferedImage $r0, r2;
        java.awt.geom.AffineTransform $r3;
        java.awt.Graphics2D $r1;
        int i0, i1, i2, $i3, i4, $i5;
        double $d0, $d1;

        r2 := @parameter0: java.awt.image.BufferedImage;

        i2 := @parameter1: int;

        i4 := @parameter2: int;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        $r0 = new java.awt.image.BufferedImage;

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 2);

        $r1 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        $i3 = neg i2;

        $d1 = (double) $i3;

        $i5 = neg i4;

        $d0 = (double) $i5;

        $r3 = staticinvoke <java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getTranslateInstance(double,double)>($d1, $d0);

        virtualinvoke $r1.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>(r2, $r3);

        virtualinvoke $r1.<java.awt.Graphics: void dispose()>();

        return $r0;
    }

    public static java.awt.image.BufferedImage cloneImage(java.awt.image.BufferedImage)
    {
        java.awt.image.BufferedImage $r0, r1;
        java.awt.Graphics2D $r2;
        int $i0, $i1;

        r1 := @parameter0: java.awt.image.BufferedImage;

        $r0 = new java.awt.image.BufferedImage;

        $i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>();

        specialinvoke $r0.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i0, $i1, 2);

        $r2 = virtualinvoke $r0.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        virtualinvoke $r2.<java.awt.Graphics2D: void drawRenderedImage(java.awt.image.RenderedImage,java.awt.geom.AffineTransform)>(r1, null);

        virtualinvoke $r2.<java.awt.Graphics: void dispose()>();

        return $r0;
    }

    public static void paintCheckedBackground(java.awt.Component, java.awt.Graphics, int, int, int, int)
    {
        java.awt.Color $r16;
        java.awt.Shape $r3;
        java.awt.image.BufferedImage $r0, $r1, $r7, $r8, $r10, $r14, $r18;
        java.awt.Component r9;
        java.awt.Dimension $r12;
        java.awt.Graphics r2;
        java.awt.Rectangle $r4, $r6, r17, $r19, $r20;
        java.awt.Graphics2D $r15;
        int i0, i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, $i24, $i25, i26, i27, i28, i29, i30, i31, $i33, $i35;

        r9 := @parameter0: java.awt.Component;

        r2 := @parameter1: java.awt.Graphics;

        i26 := @parameter2: int;

        i27 := @parameter3: int;

        i0 := @parameter4: int;

        i1 := @parameter5: int;

        $r0 = <com.jhlabs.image.ImageUtils: java.awt.image.BufferedImage backgroundImage>;

        if $r0 != null goto label07;

        $r18 = new java.awt.image.BufferedImage;

        specialinvoke $r18.<java.awt.image.BufferedImage: void <init>(int,int,int)>(64, 64, 2);

        <com.jhlabs.image.ImageUtils: java.awt.image.BufferedImage backgroundImage> = $r18;

        $r14 = <com.jhlabs.image.ImageUtils: java.awt.image.BufferedImage backgroundImage>;

        $r15 = virtualinvoke $r14.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>();

        i28 = 0;

     label01:
        if i28 >= 64 goto label06;

        i29 = 0;

     label02:
        if i29 >= 64 goto label05;

        $i24 = i29 ^ i28;

        $i25 = $i24 & 8;

        if $i25 == 0 goto label03;

        $r16 = <java.awt.Color: java.awt.Color lightGray>;

        goto label04;

     label03:
        $r16 = <java.awt.Color: java.awt.Color white>;

     label04:
        virtualinvoke $r15.<java.awt.Graphics: void setColor(java.awt.Color)>($r16);

        virtualinvoke $r15.<java.awt.Graphics: void fillRect(int,int,int,int)>(i29, i28, 8, 8);

        i29 = i29 + 8;

        goto label02;

     label05:
        i28 = i28 + 8;

        goto label01;

     label06:
        virtualinvoke $r15.<java.awt.Graphics: void dispose()>();

     label07:
        $r1 = <com.jhlabs.image.ImageUtils: java.awt.image.BufferedImage backgroundImage>;

        if $r1 == null goto label13;

        $r3 = virtualinvoke r2.<java.awt.Graphics: java.awt.Shape getClip()>();

        $r4 = virtualinvoke r2.<java.awt.Graphics: java.awt.Rectangle getClipBounds()>();

        r17 = $r4;

        if $r4 != null goto label08;

        $r19 = new java.awt.Rectangle;

        $r12 = virtualinvoke r9.<java.awt.Component: java.awt.Dimension getSize()>();

        specialinvoke $r19.<java.awt.Rectangle: void <init>(java.awt.Dimension)>($r12);

        r17 = $r19;

     label08:
        $r20 = new java.awt.Rectangle;

        specialinvoke $r20.<java.awt.Rectangle: void <init>(int,int,int,int)>(i26, i27, i0, i1);

        $r6 = virtualinvoke r17.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r20);

        virtualinvoke r2.<java.awt.Graphics: void setClip(java.awt.Shape)>($r6);

        $r7 = <com.jhlabs.image.ImageUtils: java.awt.image.BufferedImage backgroundImage>;

        $i2 = virtualinvoke $r7.<java.awt.image.BufferedImage: int getWidth()>();

        $r8 = <com.jhlabs.image.ImageUtils: java.awt.image.BufferedImage backgroundImage>;

        $i3 = virtualinvoke $r8.<java.awt.image.BufferedImage: int getHeight()>();

        $i33 = (int) -1;

        if $i2 == $i33 goto label12;

        $i35 = (int) -1;

        if $i3 == $i35 goto label12;

        $i4 = $r6.<java.awt.Rectangle: int x>;

        $i5 = $i4 / $i2;

        i6 = $i5 * $i2;

        $i7 = $r6.<java.awt.Rectangle: int y>;

        $i8 = $i7 / $i3;

        i9 = $i8 * $i3;

        $i11 = $r6.<java.awt.Rectangle: int x>;

        $i10 = $r6.<java.awt.Rectangle: int width>;

        $i12 = $i11 + $i10;

        $i13 = $i12 + $i2;

        $i14 = $i13 - 1;

        $i15 = $i14 / $i2;

        i16 = $i15 * $i2;

        $i18 = $r6.<java.awt.Rectangle: int y>;

        $i17 = $r6.<java.awt.Rectangle: int height>;

        $i19 = $i18 + $i17;

        $i20 = $i19 + $i3;

        $i21 = $i20 - 1;

        $i22 = $i21 / $i3;

        i23 = $i22 * $i3;

        i30 = i9;

     label09:
        if i30 >= i23 goto label12;

        i31 = i6;

     label10:
        if i31 >= i16 goto label11;

        $r10 = <com.jhlabs.image.ImageUtils: java.awt.image.BufferedImage backgroundImage>;

        virtualinvoke r2.<java.awt.Graphics: boolean drawImage(java.awt.Image,int,int,java.awt.image.ImageObserver)>($r10, i31, i30, r9);

        i31 = i31 + $i2;

        goto label10;

     label11:
        i30 = i30 + $i3;

        goto label09;

     label12:
        virtualinvoke r2.<java.awt.Graphics: void setClip(java.awt.Shape)>($r3);

     label13:
        return;
    }

    public static java.awt.Rectangle getSelectedBounds(java.awt.image.BufferedImage)
    {
        int[] $r2, $r3, r4, r5;
        boolean z0, z1, z2;
        java.awt.image.BufferedImage r0;
        java.awt.Rectangle $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23, $i25, $i27, $i29;

        r0 := @parameter0: java.awt.image.BufferedImage;

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>();

        $i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>();

        i14 = 0;

        i15 = 0;

        i16 = $i0;

        i17 = $i1;

        z0 = 0;

        z2 = 0;

        z1 = 0;

        r4 = null;

        i18 = $i1 - 1;

     label01:
        if i18 < 0 goto label09;

        $r3 = staticinvoke <com.jhlabs.image.ImageUtils: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, i18, $i0, 1, r4);

        r4 = $r3;

        i19 = 0;

     label02:
        if i19 >= i16 goto label04;

        $i12 = $r3[i19];

        $i13 = $i12 & -16777216;

        if $i13 == 0 goto label03;

        i16 = i19;

        i15 = i18;

        z0 = 1;

        z2 = 1;

        z1 = 1;

        goto label04;

     label03:
        i19 = i19 + 1;

        goto label02;

     label04:
        i20 = $i0 - 1;

     label05:
        if i20 < i14 goto label07;

        $i10 = $r3[i20];

        $i11 = $i10 & -16777216;

        if $i11 == 0 goto label06;

        i14 = i20;

        i15 = i18;

        z0 = 1;

        z2 = 1;

        z1 = 1;

        goto label07;

     label06:
        $i25 = (int) -1;

        i20 = i20 + $i25;

        goto label05;

     label07:
        if z2 == 0 goto label08;

        goto label09;

     label08:
        $i27 = (int) -1;

        i18 = i18 + $i27;

        goto label01;

     label09:
        r5 = null;

        i21 = 0;

     label10:
        if i21 >= i18 goto label19;

        $r2 = staticinvoke <com.jhlabs.image.ImageUtils: int[] getRGB(java.awt.image.BufferedImage,int,int,int,int,int[])>(r0, 0, i21, $i0, 1, r5);

        r5 = $r2;

        i22 = 0;

     label11:
        if i22 >= i16 goto label14;

        $i8 = $r2[i22];

        $i9 = $i8 & -16777216;

        if $i9 == 0 goto label13;

        i16 = i22;

        if i21 >= i17 goto label12;

        i17 = i21;

     label12:
        z0 = 1;

        z1 = 1;

        goto label14;

     label13:
        i22 = i22 + 1;

        goto label11;

     label14:
        i23 = $i0 - 1;

     label15:
        if i23 < i14 goto label18;

        $i6 = $r2[i23];

        $i7 = $i6 & -16777216;

        if $i7 == 0 goto label17;

        i14 = i23;

        if i21 >= i17 goto label16;

        i17 = i21;

     label16:
        z0 = 1;

        z1 = 1;

        goto label18;

     label17:
        $i29 = (int) -1;

        i23 = i23 + $i29;

        goto label15;

     label18:
        i21 = i21 + 1;

        goto label10;

     label19:
        if z1 == 0 goto label20;

        $r6 = new java.awt.Rectangle;

        $i2 = i14 - i16;

        $i5 = $i2 + 1;

        $i3 = i15 - i17;

        $i4 = $i3 + 1;

        specialinvoke $r6.<java.awt.Rectangle: void <init>(int,int,int,int)>(i16, i17, $i5, $i4);

        return $r6;

     label20:
        return null;
    }

    public static void composeThroughMask(java.awt.image.Raster, java.awt.image.WritableRaster, java.awt.image.Raster)
    {
        int[] $r1, $r3, $r5, r6, r7, r8;
        float $f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22;
        java.awt.image.Raster r0, r2;
        int $i0, $i1, $i2, i3, i4, $i5, i6, $i7, i8, $i9, i10, $i11, i12, $i13, i14, $i15, i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28, i29;
        java.awt.image.WritableRaster r4;

        r0 := @parameter0: java.awt.image.Raster;

        r4 := @parameter1: java.awt.image.WritableRaster;

        r2 := @parameter2: java.awt.image.Raster;

        $i0 = virtualinvoke r0.<java.awt.image.Raster: int getMinX()>();

        i26 = virtualinvoke r0.<java.awt.image.Raster: int getMinY()>();

        $i1 = virtualinvoke r0.<java.awt.image.Raster: int getWidth()>();

        $i2 = virtualinvoke r0.<java.awt.image.Raster: int getHeight()>();

        r6 = null;

        r7 = null;

        r8 = null;

        i27 = 0;

     label1:
        if i27 >= $i2 goto label4;

        $r1 = virtualinvoke r0.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i0, i26, $i1, 1, r6);

        r6 = $r1;

        $r3 = virtualinvoke r2.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i0, i26, $i1, 1, r7);

        r7 = $r3;

        $r5 = virtualinvoke r4.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i0, i26, $i1, 1, r8);

        r8 = $r5;

        i28 = $i0;

        i29 = 0;

     label2:
        if i29 >= $i1 goto label3;

        i3 = $r1[i28];

        i4 = $r5[i28];

        $i5 = i28 + 1;

        i6 = $r1[$i5];

        $i7 = i28 + 1;

        i8 = $r5[$i7];

        $i9 = i28 + 2;

        i10 = $r1[$i9];

        $i11 = i28 + 2;

        i12 = $r5[$i11];

        $i13 = i28 + 3;

        i14 = $r1[$i13];

        $i15 = i28 + 3;

        i16 = $r5[$i15];

        $i17 = i28 + 3;

        $i18 = $r3[$i17];

        $f0 = (float) $i18;

        f1 = $f0 / 255.0F;

        f2 = 1.0F - f1;

        $f3 = (float) i3;

        $f6 = f1 * $f3;

        $f4 = (float) i4;

        $f5 = f2 * $f4;

        $f7 = $f6 + $f5;

        $i19 = (int) $f7;

        $r5[i28] = $i19;

        $i21 = i28 + 1;

        $f8 = (float) i6;

        $f11 = f1 * $f8;

        $f9 = (float) i8;

        $f10 = f2 * $f9;

        $f12 = $f11 + $f10;

        $i20 = (int) $f12;

        $r5[$i21] = $i20;

        $i23 = i28 + 2;

        $f13 = (float) i10;

        $f16 = f1 * $f13;

        $f14 = (float) i12;

        $f15 = f2 * $f14;

        $f17 = $f16 + $f15;

        $i22 = (int) $f17;

        $r5[$i23] = $i22;

        $i25 = i28 + 3;

        $f18 = (float) i14;

        $f21 = f1 * $f18;

        $f19 = (float) i16;

        $f20 = f2 * $f19;

        $f22 = $f21 + $f20;

        $i24 = (int) $f22;

        $r5[$i25] = $i24;

        i28 = i28 + 4;

        i29 = i29 + 1;

        goto label2;

     label3:
        virtualinvoke r4.<java.awt.image.WritableRaster: void setPixels(int,int,int,int,int[])>($i0, i26, $i1, 1, $r5);

        i26 = i26 + 1;

        i27 = i27 + 1;

        goto label1;

     label4:
        return;
    }

    public static int[] getRGB(java.awt.image.BufferedImage, int, int, int, int, int[])
    {
        java.awt.image.BufferedImage r0;
        int[] r2, $r4, $r5, $r6;
        int $i0, i1, i2, i3, i4;
        java.awt.image.WritableRaster $r1;
        java.lang.Object $r3;

        r0 := @parameter0: java.awt.image.BufferedImage;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r2 := @parameter5: int[];

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        if $i0 == 2 goto label1;

        if $i0 != 1 goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        $r3 = virtualinvoke $r1.<java.awt.image.Raster: java.lang.Object getDataElements(int,int,int,int,java.lang.Object)>(i1, i2, i3, i4, r2);

        $r4 = (int[]) $r3;

        $r5 = (int[]) $r4;

        return $r5;

     label2:
        $r6 = virtualinvoke r0.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(i1, i2, i3, i4, r2, 0, i3);

        return $r6;
    }

    public static void setRGB(java.awt.image.BufferedImage, int, int, int, int, int[])
    {
        java.awt.image.BufferedImage r0;
        int[] r2;
        int $i0, i1, i2, i3, i4;
        java.awt.image.WritableRaster $r1;

        r0 := @parameter0: java.awt.image.BufferedImage;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r2 := @parameter5: int[];

        $i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getType()>();

        if $i0 == 2 goto label1;

        if $i0 != 1 goto label2;

     label1:
        $r1 = virtualinvoke r0.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>();

        virtualinvoke $r1.<java.awt.image.WritableRaster: void setDataElements(int,int,int,int,java.lang.Object)>(i1, i2, i3, i4, r2);

        goto label3;

     label2:
        virtualinvoke r0.<java.awt.image.BufferedImage: void setRGB(int,int,int,int,int[],int,int)>(i1, i2, i3, i4, r2, 0, i3);

     label3:
        return;
    }

    static void <clinit>()
    {
        <com.jhlabs.image.ImageUtils: int UNSELECTED> = 0;

        <com.jhlabs.image.ImageUtils: int SELECTED> = -16777216;

        <com.jhlabs.image.ImageUtils: java.awt.image.BufferedImage backgroundImage> = null;

        return;
    }
}
