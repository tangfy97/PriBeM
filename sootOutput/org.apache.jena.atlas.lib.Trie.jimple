public final class org.apache.jena.atlas.lib.Trie extends java.lang.Object
{
    private org.apache.jena.atlas.lib.Trie$TrieNode root;

    public void <init>()
    {
        org.apache.jena.atlas.lib.Trie r0;
        org.apache.jena.atlas.lib.Trie$TrieNode $r1;

        r0 := @this: org.apache.jena.atlas.lib.Trie;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new org.apache.jena.atlas.lib.Trie$TrieNode;

        specialinvoke $r1.<org.apache.jena.atlas.lib.Trie$TrieNode: void <init>(java.lang.Object)>(null);

        r0.<org.apache.jena.atlas.lib.Trie: org.apache.jena.atlas.lib.Trie$TrieNode root> = $r1;

        return;
    }

    public void add(java.lang.String, java.lang.Object)
    {
        java.lang.Object r0;
        java.lang.String r2;
        org.apache.jena.atlas.lib.Trie r1;
        org.apache.jena.atlas.lib.Trie$TrieNode $r3;

        r1 := @this: org.apache.jena.atlas.lib.Trie;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        return;

     label1:
        $r3 = specialinvoke r1.<org.apache.jena.atlas.lib.Trie: org.apache.jena.atlas.lib.Trie$TrieNode moveToNode(java.lang.String)>(r2);

        virtualinvoke $r3.<org.apache.jena.atlas.lib.Trie$TrieNode: void setValue(java.lang.Object)>(r0);

        return;
    }

    private org.apache.jena.atlas.lib.Trie$TrieNode moveToNode(java.lang.String)
    {
        java.lang.Character $r2;
        int $i0, i2;
        char $c1;
        java.lang.String r1;
        org.apache.jena.atlas.lib.Trie r0;
        org.apache.jena.atlas.lib.Trie$TrieNode r3;

        r0 := @this: org.apache.jena.atlas.lib.Trie;

        r1 := @parameter0: java.lang.String;

        r3 = r0.<org.apache.jena.atlas.lib.Trie: org.apache.jena.atlas.lib.Trie$TrieNode root>;

        if r1 != null goto label1;

        return r3;

     label1:
        i2 = 0;

     label2:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label3;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        r3 = virtualinvoke r3.<org.apache.jena.atlas.lib.Trie$TrieNode: org.apache.jena.atlas.lib.Trie$TrieNode moveToChild(java.lang.Character)>($r2);

        i2 = i2 + 1;

        goto label2;

     label3:
        return r3;
    }

    private org.apache.jena.atlas.lib.Trie$TrieNode find(java.lang.String)
    {
        char $c1;
        java.lang.Character $r2;
        int $i0, i2;
        java.lang.String r1;
        org.apache.jena.atlas.lib.Trie r0;
        org.apache.jena.atlas.lib.Trie$TrieNode $r3, r4;

        r0 := @this: org.apache.jena.atlas.lib.Trie;

        r1 := @parameter0: java.lang.String;

        r4 = r0.<org.apache.jena.atlas.lib.Trie: org.apache.jena.atlas.lib.Trie$TrieNode root>;

        if r1 != null goto label1;

        return r4;

     label1:
        i2 = 0;

     label2:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label4;

        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r3 = virtualinvoke r4.<org.apache.jena.atlas.lib.Trie$TrieNode: org.apache.jena.atlas.lib.Trie$TrieNode getChild(java.lang.Character)>($r2);

        r4 = $r3;

        if $r3 != null goto label3;

        goto label4;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return r4;
    }

    public void remove(java.lang.String)
    {
        java.lang.String r1;
        org.apache.jena.atlas.lib.Trie r0;
        org.apache.jena.atlas.lib.Trie$TrieNode $r2;

        r0 := @this: org.apache.jena.atlas.lib.Trie;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.jena.atlas.lib.Trie: org.apache.jena.atlas.lib.Trie$TrieNode find(java.lang.String)>(r1);

        if $r2 == null goto label1;

        virtualinvoke $r2.<org.apache.jena.atlas.lib.Trie$TrieNode: void setValue(java.lang.Object)>(null);

     label1:
        return;
    }

    public boolean contains(java.lang.String)
    {
        java.lang.String r1;
        org.apache.jena.atlas.lib.Trie r0;
        boolean $z0;

        r0 := @this: org.apache.jena.atlas.lib.Trie;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.jena.atlas.lib.Trie: boolean contains(java.lang.String,boolean)>(r1, 1);

        return $z0;
    }

    public boolean contains(java.lang.String, boolean)
    {
        java.lang.String r1;
        org.apache.jena.atlas.lib.Trie r0;
        org.apache.jena.atlas.lib.Trie$TrieNode $r2;
        boolean z0, $z1;

        r0 := @this: org.apache.jena.atlas.lib.Trie;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = specialinvoke r0.<org.apache.jena.atlas.lib.Trie: org.apache.jena.atlas.lib.Trie$TrieNode find(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        if z0 == 0 goto label2;

        $z1 = virtualinvoke $r2.<org.apache.jena.atlas.lib.Trie$TrieNode: boolean hasValue()>();

        return $z1;

     label2:
        return 1;
    }

    public boolean contains(java.lang.String, java.lang.Object)
    {
        java.lang.Object r3, $r4;
        java.lang.String r1;
        org.apache.jena.atlas.lib.Trie r0;
        org.apache.jena.atlas.lib.Trie$TrieNode $r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.jena.atlas.lib.Trie;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.Object;

        $r2 = specialinvoke r0.<org.apache.jena.atlas.lib.Trie: org.apache.jena.atlas.lib.Trie$TrieNode find(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return 0;

     label1:
        if r3 != null goto label2;

        $z1 = virtualinvoke $r2.<org.apache.jena.atlas.lib.Trie$TrieNode: boolean hasValue()>();

        if $z1 != 0 goto label2;

        return 1;

     label2:
        $r4 = virtualinvoke $r2.<org.apache.jena.atlas.lib.Trie$TrieNode: java.lang.Object getValue()>();

        $z0 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    public java.lang.Object get(java.lang.String)
    {
        java.lang.Object $r3;
        java.lang.String r1;
        org.apache.jena.atlas.lib.Trie r0;
        org.apache.jena.atlas.lib.Trie$TrieNode $r2;

        r0 := @this: org.apache.jena.atlas.lib.Trie;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.jena.atlas.lib.Trie: org.apache.jena.atlas.lib.Trie$TrieNode find(java.lang.String)>(r1);

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.jena.atlas.lib.Trie$TrieNode: java.lang.Object getValue()>();

        return $r3;
    }

    public java.util.List prefixSearch(java.lang.String)
    {
        java.util.List $r3, $r4;
        java.lang.String r1;
        org.apache.jena.atlas.lib.Trie r0;
        org.apache.jena.atlas.lib.Trie$TrieNode $r2;
        java.util.ArrayList $r5;

        r0 := @this: org.apache.jena.atlas.lib.Trie;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.apache.jena.atlas.lib.Trie: org.apache.jena.atlas.lib.Trie$TrieNode find(java.lang.String)>(r1);

        if $r2 != null goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        return $r5;

     label1:
        $r3 = virtualinvoke $r2.<org.apache.jena.atlas.lib.Trie$TrieNode: java.util.List getValues()>();

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r4;
    }

    public java.util.List partialSearch(java.lang.String)
    {
        java.util.ArrayList $r0;
        java.lang.Character $r4;
        int $i0, i2;
        java.lang.String r2;
        boolean $z0, $z1, $z2;
        char $c1;
        java.util.List $r6, $r10;
        java.lang.Object $r3, $r7, $r8;
        org.apache.jena.atlas.lib.Trie r1;
        org.apache.jena.atlas.lib.Trie$TrieNode $r5, r9;

        r1 := @this: org.apache.jena.atlas.lib.Trie;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        r9 = r1.<org.apache.jena.atlas.lib.Trie: org.apache.jena.atlas.lib.Trie$TrieNode root>;

        if r2 != null goto label1;

        $z2 = virtualinvoke r9.<org.apache.jena.atlas.lib.Trie$TrieNode: boolean hasValue()>();

        if $z2 == 0 goto label6;

        $r8 = virtualinvoke r9.<org.apache.jena.atlas.lib.Trie$TrieNode: java.lang.Object getValue()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label6;

     label1:
        i2 = 0;

     label2:
        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        if i2 >= $i0 goto label5;

        $z1 = virtualinvoke r9.<org.apache.jena.atlas.lib.Trie$TrieNode: boolean hasValue()>();

        if $z1 == 0 goto label3;

        $r7 = virtualinvoke r9.<org.apache.jena.atlas.lib.Trie$TrieNode: java.lang.Object getValue()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

     label3:
        $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i2);

        $r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r5 = virtualinvoke r9.<org.apache.jena.atlas.lib.Trie$TrieNode: org.apache.jena.atlas.lib.Trie$TrieNode getChild(java.lang.Character)>($r4);

        r9 = $r5;

        if $r5 != null goto label4;

        $r6 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r6;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        $z0 = virtualinvoke r9.<org.apache.jena.atlas.lib.Trie$TrieNode: boolean hasValue()>();

        if $z0 == 0 goto label6;

        $r3 = virtualinvoke r9.<org.apache.jena.atlas.lib.Trie$TrieNode: java.lang.Object getValue()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

     label6:
        $r10 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r10;
    }

    public java.lang.Object shortestMatch(java.lang.String)
    {
        char $c1;
        java.lang.Character $r3;
        int $i0, i2;
        java.lang.Object $r2, $r5;
        java.lang.String r1;
        org.apache.jena.atlas.lib.Trie r0;
        boolean $z0;
        org.apache.jena.atlas.lib.Trie$TrieNode $r4, r6;

        r0 := @this: org.apache.jena.atlas.lib.Trie;

        r1 := @parameter0: java.lang.String;

        r6 = r0.<org.apache.jena.atlas.lib.Trie: org.apache.jena.atlas.lib.Trie$TrieNode root>;

        if r1 != null goto label1;

        $r5 = virtualinvoke r6.<org.apache.jena.atlas.lib.Trie$TrieNode: java.lang.Object getValue()>();

        return $r5;

     label1:
        i2 = 0;

     label2:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label5;

        $z0 = virtualinvoke r6.<org.apache.jena.atlas.lib.Trie$TrieNode: boolean hasValue()>();

        if $z0 == 0 goto label3;

        goto label5;

     label3:
        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r4 = virtualinvoke r6.<org.apache.jena.atlas.lib.Trie$TrieNode: org.apache.jena.atlas.lib.Trie$TrieNode getChild(java.lang.Character)>($r3);

        r6 = $r4;

        if $r4 != null goto label4;

        return null;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        $r2 = virtualinvoke r6.<org.apache.jena.atlas.lib.Trie$TrieNode: java.lang.Object getValue()>();

        return $r2;
    }

    public java.lang.Object longestMatch(java.lang.String)
    {
        char $c1;
        java.lang.Character $r3;
        int $i0, i2;
        java.lang.Object $r2, $r5, r6;
        java.lang.String r1;
        org.apache.jena.atlas.lib.Trie r0;
        boolean $z0, $z1;
        org.apache.jena.atlas.lib.Trie$TrieNode $r4, r7;

        r0 := @this: org.apache.jena.atlas.lib.Trie;

        r1 := @parameter0: java.lang.String;

        r6 = null;

        r7 = r0.<org.apache.jena.atlas.lib.Trie: org.apache.jena.atlas.lib.Trie$TrieNode root>;

        if r1 != null goto label1;

        $r5 = virtualinvoke r7.<org.apache.jena.atlas.lib.Trie$TrieNode: java.lang.Object getValue()>();

        return $r5;

     label1:
        i2 = 0;

     label2:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if i2 >= $i0 goto label5;

        $z1 = virtualinvoke r7.<org.apache.jena.atlas.lib.Trie$TrieNode: boolean hasValue()>();

        if $z1 == 0 goto label3;

        r6 = virtualinvoke r7.<org.apache.jena.atlas.lib.Trie$TrieNode: java.lang.Object getValue()>();

     label3:
        $c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i2);

        $r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r4 = virtualinvoke r7.<org.apache.jena.atlas.lib.Trie$TrieNode: org.apache.jena.atlas.lib.Trie$TrieNode getChild(java.lang.Character)>($r3);

        r7 = $r4;

        if $r4 != null goto label4;

        return r6;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        $z0 = virtualinvoke r7.<org.apache.jena.atlas.lib.Trie$TrieNode: boolean hasValue()>();

        if $z0 == 0 goto label6;

        $r2 = virtualinvoke r7.<org.apache.jena.atlas.lib.Trie$TrieNode: java.lang.Object getValue()>();

        return $r2;

     label6:
        return r6;
    }
}
