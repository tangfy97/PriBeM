public class org.codehaus.groovy.tools.GroovyStarter extends java.lang.Object
{
    static java.lang.Class array$Ljava$lang$String;

    public void <init>()
    {
        org.codehaus.groovy.tools.GroovyStarter r0;

        r0 := @this: org.codehaus.groovy.tools.GroovyStarter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void printUsage()
    {
        java.io.PrintStream $r0;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("possible programs are \'groovyc\',\'groovy\',\'console\', and \'groovysh\'");

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    public static void rootLoader(java.lang.String[])
    {
        java.lang.NoSuchMethodException $r13;
        org.codehaus.groovy.tools.RootLoader $r22;
        java.lang.SecurityException $r14;
        java.lang.reflect.Method r23;
        boolean $z0, $z1, z2, z3, z4, $z5, z6, z7, z8, z9, z10, z11;
        java.lang.IllegalAccessException $r11;
        java.lang.Exception $r16;
        java.lang.reflect.InvocationTargetException $r10;
        java.lang.Object[] $r28;
        java.lang.String[] r1, $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, $i13, $i14, i15, $i16;
        java.lang.String $r2, $r5, $r6, $r7, $r8, $r9, r18, $r19, $r20, $r24;
        java.io.PrintStream $r17;
        java.lang.Class[] $r3;
        java.io.FileInputStream $r4;
        java.lang.IllegalArgumentException $r12;
        org.codehaus.groovy.tools.LoaderConfiguration $r0;
        java.lang.ClassNotFoundException $r15;
        java.lang.Class $r25, $r26, $r27;

        r1 := @parameter0: java.lang.String[];

        r18 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("groovy.starter.conf", null);

        $r0 = new org.codehaus.groovy.tools.LoaderConfiguration;

        specialinvoke $r0.<org.codehaus.groovy.tools.LoaderConfiguration: void <init>()>();

        z2 = 0;

        z9 = 0;

        z8 = 0;

        z3 = 0;

        z11 = 0;

        z10 = 0;

        z4 = 0;

        z7 = 0;

        z6 = 0;

        i10 = 0;

     label01:
        $i11 = lengthof r1;

        $i12 = $i11 - i10;

        if $i12 <= 0 goto label11;

        if z9 == 0 goto label02;

        if z10 == 0 goto label02;

        if z6 != 0 goto label11;

     label02:
        $r19 = r1[i10];

        $z5 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("--classpath");

        if $z5 == 0 goto label05;

        if z7 == 0 goto label03;

        goto label11;

     label03:
        $i8 = lengthof r1;

        $i7 = i10 + 1;

        if $i8 != $i7 goto label04;

        staticinvoke <org.codehaus.groovy.tools.GroovyStarter: void exit(java.lang.String)>("classpath parameter needs argument");

     label04:
        $i9 = i10 + 1;

        $r9 = r1[$i9];

        virtualinvoke $r0.<org.codehaus.groovy.tools.LoaderConfiguration: void addClassPath(java.lang.String)>($r9);

        i10 = i10 + 2;

        z4 = 1;

        z7 = 1;

        z6 = 1;

        goto label01;

     label05:
        $r6 = r1[i10];

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("--main");

        if $z0 == 0 goto label08;

        if z8 == 0 goto label06;

        goto label11;

     label06:
        $i5 = lengthof r1;

        $i4 = i10 + 1;

        if $i5 != $i4 goto label07;

        staticinvoke <org.codehaus.groovy.tools.GroovyStarter: void exit(java.lang.String)>("main parameter needs argument");

     label07:
        $i6 = i10 + 1;

        $r8 = r1[$i6];

        virtualinvoke $r0.<org.codehaus.groovy.tools.LoaderConfiguration: void setMainClass(java.lang.String)>($r8);

        i10 = i10 + 2;

        z2 = 1;

        z9 = 1;

        z8 = 1;

        goto label01;

     label08:
        $r7 = r1[i10];

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("--conf");

        if $z1 == 0 goto label11;

        if z11 == 0 goto label09;

        goto label11;

     label09:
        $i2 = lengthof r1;

        $i1 = i10 + 1;

        if $i2 != $i1 goto label10;

        staticinvoke <org.codehaus.groovy.tools.GroovyStarter: void exit(java.lang.String)>("conf parameter needs argument");

     label10:
        $i3 = i10 + 1;

        r18 = r1[$i3];

        i10 = i10 + 2;

        z3 = 1;

        z11 = 1;

        z10 = 1;

        goto label01;

     label11:
        $r20 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String,java.lang.String)>("groovy.starter.conf.override", null);

        if $r20 == null goto label12;

        r18 = $r20;

     label12:
        $r2 = virtualinvoke $r0.<org.codehaus.groovy.tools.LoaderConfiguration: java.lang.String getMainClass()>();

        if $r2 != null goto label13;

        if r18 != null goto label13;

        staticinvoke <org.codehaus.groovy.tools.GroovyStarter: void exit(java.lang.String)>("no configuration file or main class specified");

     label13:
        $i13 = lengthof r1;

        $i14 = $i13 - i10;

        $r21 = newarray (java.lang.String)[$i14];

        i15 = 0;

     label14:
        $i16 = lengthof $r21;

        if i15 >= $i16 goto label15;

        $i0 = i15 + i10;

        $r5 = r1[$i0];

        $r21[i15] = $r5;

        i15 = i15 + 1;

        goto label14;

     label15:
        if r18 == null goto label19;

     label16:
        $r4 = new java.io.FileInputStream;

        specialinvoke $r4.<java.io.FileInputStream: void <init>(java.lang.String)>(r18);

        virtualinvoke $r0.<org.codehaus.groovy.tools.LoaderConfiguration: void configure(java.io.InputStream)>($r4);

     label17:
        goto label19;

     label18:
        $r16 := @caughtexception;

        $r17 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>("exception while configuring main class loader:");

        staticinvoke <org.codehaus.groovy.tools.GroovyStarter: void exit(java.lang.Exception)>($r16);

     label19:
        $r22 = new org.codehaus.groovy.tools.RootLoader;

        specialinvoke $r22.<org.codehaus.groovy.tools.RootLoader: void <init>(org.codehaus.groovy.tools.LoaderConfiguration)>($r0);

        r23 = null;

     label20:
        $r24 = virtualinvoke $r0.<org.codehaus.groovy.tools.LoaderConfiguration: java.lang.String getMainClass()>();

        $r25 = virtualinvoke $r22.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>($r24);

        $r3 = newarray (java.lang.Class)[1];

        $r26 = <org.codehaus.groovy.tools.GroovyStarter: java.lang.Class array$Ljava$lang$String>;

        if $r26 != null goto label21;

        $r27 = staticinvoke <org.codehaus.groovy.tools.GroovyStarter: java.lang.Class class$(java.lang.String)>("[Ljava.lang.String;");

        <org.codehaus.groovy.tools.GroovyStarter: java.lang.Class array$Ljava$lang$String> = $r27;

        goto label22;

     label21:
        $r27 = <org.codehaus.groovy.tools.GroovyStarter: java.lang.Class array$Ljava$lang$String>;

     label22:
        $r3[0] = $r27;

        r23 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("main", $r3);

     label23:
        goto label27;

     label24:
        $r15 := @caughtexception;

        staticinvoke <org.codehaus.groovy.tools.GroovyStarter: void exit(java.lang.Exception)>($r15);

        goto label27;

     label25:
        $r14 := @caughtexception;

        staticinvoke <org.codehaus.groovy.tools.GroovyStarter: void exit(java.lang.Exception)>($r14);

        goto label27;

     label26:
        $r13 := @caughtexception;

        staticinvoke <org.codehaus.groovy.tools.GroovyStarter: void exit(java.lang.Exception)>($r13);

     label27:
        $r28 = newarray (java.lang.Object)[1];

        $r28[0] = $r21;

        virtualinvoke r23.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r28);

     label28:
        goto label32;

     label29:
        $r12 := @caughtexception;

        staticinvoke <org.codehaus.groovy.tools.GroovyStarter: void exit(java.lang.Exception)>($r12);

        goto label32;

     label30:
        $r11 := @caughtexception;

        staticinvoke <org.codehaus.groovy.tools.GroovyStarter: void exit(java.lang.Exception)>($r11);

        goto label32;

     label31:
        $r10 := @caughtexception;

        staticinvoke <org.codehaus.groovy.tools.GroovyStarter: void exit(java.lang.Exception)>($r10);

     label32:
        return;

        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.ClassNotFoundException from label20 to label23 with label24;
        catch java.lang.SecurityException from label20 to label23 with label25;
        catch java.lang.NoSuchMethodException from label20 to label23 with label26;
        catch java.lang.IllegalArgumentException from label27 to label28 with label29;
        catch java.lang.IllegalAccessException from label27 to label28 with label30;
        catch java.lang.reflect.InvocationTargetException from label27 to label28 with label31;
    }

    private static void exit(java.lang.Exception)
    {
        java.lang.Exception r0;

        r0 := @parameter0: java.lang.Exception;

        virtualinvoke r0.<java.lang.Exception: void printStackTrace()>();

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    private static void exit(java.lang.String)
    {
        java.io.PrintStream $r1;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0);

        staticinvoke <java.lang.System: void exit(int)>(1);

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.Throwable $r1;
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

     label1:
        staticinvoke <org.codehaus.groovy.tools.GroovyStarter: void rootLoader(java.lang.String[])>(r0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        virtualinvoke $r1.<java.lang.Throwable: void printStackTrace()>();

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Throwable $r4;
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.NoClassDefFoundError: java.lang.Throwable initCause(java.lang.Throwable)>($r2);

        throw $r4;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }
}
