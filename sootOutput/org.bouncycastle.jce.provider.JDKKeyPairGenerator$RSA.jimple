public class org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA extends org.bouncycastle.jce.provider.JDKKeyPairGenerator
{
    static final java.math.BigInteger defaultPublicExponent;
    static final int defaultTests;
    org.bouncycastle.crypto.params.RSAKeyGenerationParameters param;
    org.bouncycastle.crypto.generators.RSAKeyPairGenerator engine;

    public void <init>()
    {
        java.security.SecureRandom $r3;
        java.math.BigInteger $r4;
        org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA r0;
        org.bouncycastle.crypto.generators.RSAKeyPairGenerator $r1, $r6;
        org.bouncycastle.crypto.params.RSAKeyGenerationParameters $r2, $r5;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA;

        specialinvoke r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator: void <init>(java.lang.String)>("RSA");

        $r1 = new org.bouncycastle.crypto.generators.RSAKeyPairGenerator;

        specialinvoke $r1.<org.bouncycastle.crypto.generators.RSAKeyPairGenerator: void <init>()>();

        r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: org.bouncycastle.crypto.generators.RSAKeyPairGenerator engine> = $r1;

        $r2 = new org.bouncycastle.crypto.params.RSAKeyGenerationParameters;

        $r4 = <org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: java.math.BigInteger defaultPublicExponent>;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        specialinvoke $r2.<org.bouncycastle.crypto.params.RSAKeyGenerationParameters: void <init>(java.math.BigInteger,java.security.SecureRandom,int,int)>($r4, $r3, 2048, 12);

        r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: org.bouncycastle.crypto.params.RSAKeyGenerationParameters param> = $r2;

        $r6 = r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: org.bouncycastle.crypto.generators.RSAKeyPairGenerator engine>;

        $r5 = r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: org.bouncycastle.crypto.params.RSAKeyGenerationParameters param>;

        virtualinvoke $r6.<org.bouncycastle.crypto.generators.RSAKeyPairGenerator: void init(org.bouncycastle.crypto.KeyGenerationParameters)>($r5);

        return;
    }

    public void initialize(int, java.security.SecureRandom)
    {
        java.security.SecureRandom r2;
        int i0;
        java.math.BigInteger $r3;
        org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA r0;
        org.bouncycastle.crypto.generators.RSAKeyPairGenerator $r5;
        org.bouncycastle.crypto.params.RSAKeyGenerationParameters $r1, $r4;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA;

        i0 := @parameter0: int;

        r2 := @parameter1: java.security.SecureRandom;

        $r1 = new org.bouncycastle.crypto.params.RSAKeyGenerationParameters;

        $r3 = <org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: java.math.BigInteger defaultPublicExponent>;

        specialinvoke $r1.<org.bouncycastle.crypto.params.RSAKeyGenerationParameters: void <init>(java.math.BigInteger,java.security.SecureRandom,int,int)>($r3, r2, i0, 12);

        r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: org.bouncycastle.crypto.params.RSAKeyGenerationParameters param> = $r1;

        $r5 = r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: org.bouncycastle.crypto.generators.RSAKeyPairGenerator engine>;

        $r4 = r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: org.bouncycastle.crypto.params.RSAKeyGenerationParameters param>;

        virtualinvoke $r5.<org.bouncycastle.crypto.generators.RSAKeyPairGenerator: void init(org.bouncycastle.crypto.KeyGenerationParameters)>($r4);

        return;
    }

    public void initialize(java.security.spec.AlgorithmParameterSpec, java.security.SecureRandom) throws java.security.InvalidAlgorithmParameterException
    {
        java.security.spec.RSAKeyGenParameterSpec r1;
        org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA r2;
        org.bouncycastle.crypto.generators.RSAKeyPairGenerator $r7;
        java.security.InvalidAlgorithmParameterException $r8;
        java.security.SecureRandom r5;
        int $i0;
        java.math.BigInteger $r4;
        java.security.spec.AlgorithmParameterSpec r0;
        org.bouncycastle.crypto.params.RSAKeyGenerationParameters $r3, $r6;
        boolean $z0;

        r2 := @this: org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA;

        r0 := @parameter0: java.security.spec.AlgorithmParameterSpec;

        r5 := @parameter1: java.security.SecureRandom;

        $z0 = r0 instanceof java.security.spec.RSAKeyGenParameterSpec;

        if $z0 != 0 goto label1;

        $r8 = new java.security.InvalidAlgorithmParameterException;

        specialinvoke $r8.<java.security.InvalidAlgorithmParameterException: void <init>(java.lang.String)>("parameter object not a RSAKeyGenParameterSpec");

        throw $r8;

     label1:
        r1 = (java.security.spec.RSAKeyGenParameterSpec) r0;

        $r3 = new org.bouncycastle.crypto.params.RSAKeyGenerationParameters;

        $r4 = virtualinvoke r1.<java.security.spec.RSAKeyGenParameterSpec: java.math.BigInteger getPublicExponent()>();

        $i0 = virtualinvoke r1.<java.security.spec.RSAKeyGenParameterSpec: int getKeysize()>();

        specialinvoke $r3.<org.bouncycastle.crypto.params.RSAKeyGenerationParameters: void <init>(java.math.BigInteger,java.security.SecureRandom,int,int)>($r4, r5, $i0, 12);

        r2.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: org.bouncycastle.crypto.params.RSAKeyGenerationParameters param> = $r3;

        $r7 = r2.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: org.bouncycastle.crypto.generators.RSAKeyPairGenerator engine>;

        $r6 = r2.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: org.bouncycastle.crypto.params.RSAKeyGenerationParameters param>;

        virtualinvoke $r7.<org.bouncycastle.crypto.generators.RSAKeyPairGenerator: void init(org.bouncycastle.crypto.KeyGenerationParameters)>($r6);

        return;
    }

    public java.security.KeyPair generateKeyPair()
    {
        java.security.KeyPair $r7;
        org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters r6;
        org.bouncycastle.jce.provider.JCERSAPrivateCrtKey $r9;
        org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA r0;
        org.bouncycastle.crypto.generators.RSAKeyPairGenerator $r1;
        org.bouncycastle.crypto.params.RSAKeyParameters r4;
        org.bouncycastle.crypto.AsymmetricCipherKeyPair $r2;
        org.bouncycastle.jce.provider.JCERSAPublicKey $r8;
        org.bouncycastle.crypto.CipherParameters $r3, $r5;

        r0 := @this: org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA;

        $r1 = r0.<org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: org.bouncycastle.crypto.generators.RSAKeyPairGenerator engine>;

        $r2 = virtualinvoke $r1.<org.bouncycastle.crypto.generators.RSAKeyPairGenerator: org.bouncycastle.crypto.AsymmetricCipherKeyPair generateKeyPair()>();

        $r3 = virtualinvoke $r2.<org.bouncycastle.crypto.AsymmetricCipherKeyPair: org.bouncycastle.crypto.CipherParameters getPublic()>();

        r4 = (org.bouncycastle.crypto.params.RSAKeyParameters) $r3;

        $r5 = virtualinvoke $r2.<org.bouncycastle.crypto.AsymmetricCipherKeyPair: org.bouncycastle.crypto.CipherParameters getPrivate()>();

        r6 = (org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters) $r5;

        $r7 = new java.security.KeyPair;

        $r8 = new org.bouncycastle.jce.provider.JCERSAPublicKey;

        specialinvoke $r8.<org.bouncycastle.jce.provider.JCERSAPublicKey: void <init>(org.bouncycastle.crypto.params.RSAKeyParameters)>(r4);

        $r9 = new org.bouncycastle.jce.provider.JCERSAPrivateCrtKey;

        specialinvoke $r9.<org.bouncycastle.jce.provider.JCERSAPrivateCrtKey: void <init>(org.bouncycastle.crypto.params.RSAPrivateCrtKeyParameters)>(r6);

        specialinvoke $r7.<java.security.KeyPair: void <init>(java.security.PublicKey,java.security.PrivateKey)>($r8, $r9);

        return $r7;
    }

    static void <clinit>()
    {
        java.math.BigInteger $r0;

        <org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: int defaultTests> = 12;

        $r0 = staticinvoke <java.math.BigInteger: java.math.BigInteger valueOf(long)>(65537L);

        <org.bouncycastle.jce.provider.JDKKeyPairGenerator$RSA: java.math.BigInteger defaultPublicExponent> = $r0;

        return;
    }
}
