public class org.mozilla.javascript.ScriptOrFnNode extends org.mozilla.javascript.Node
{
    private int encodedSourceStart;
    private int encodedSourceEnd;
    private java.lang.String sourceName;
    private int baseLineno;
    private int endLineno;
    private org.mozilla.javascript.ObjArray functions;
    private org.mozilla.javascript.ObjArray regexps;
    private org.mozilla.javascript.ObjArray itsVariables;
    private org.mozilla.javascript.ObjToIntMap itsVariableNames;
    private int varStart;
    private java.lang.Object compilerData;

    public void <init>(int)
    {
        org.mozilla.javascript.ObjArray $r3;
        int i0, $i2, $i4;
        org.mozilla.javascript.ScriptOrFnNode r0;
        org.mozilla.javascript.ObjToIntMap $r4;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        i0 := @parameter0: int;

        specialinvoke r0.<org.mozilla.javascript.Node: void <init>(int)>(i0);

        $i2 = (int) -1;

        r0.<org.mozilla.javascript.ScriptOrFnNode: int baseLineno> = $i2;

        $i4 = (int) -1;

        r0.<org.mozilla.javascript.ScriptOrFnNode: int endLineno> = $i4;

        $r3 = new org.mozilla.javascript.ObjArray;

        specialinvoke $r3.<org.mozilla.javascript.ObjArray: void <init>()>();

        r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray itsVariables> = $r3;

        $r4 = new org.mozilla.javascript.ObjToIntMap;

        specialinvoke $r4.<org.mozilla.javascript.ObjToIntMap: void <init>(int)>(11);

        r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjToIntMap itsVariableNames> = $r4;

        return;
    }

    public final java.lang.String getSourceName()
    {
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.String $r1;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        $r1 = r0.<org.mozilla.javascript.ScriptOrFnNode: java.lang.String sourceName>;

        return $r1;
    }

    public final void setSourceName(java.lang.String)
    {
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.String r1;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        r1 := @parameter0: java.lang.String;

        r0.<org.mozilla.javascript.ScriptOrFnNode: java.lang.String sourceName> = r1;

        return;
    }

    public final int getEncodedSourceStart()
    {
        int $i0;
        org.mozilla.javascript.ScriptOrFnNode r0;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        $i0 = r0.<org.mozilla.javascript.ScriptOrFnNode: int encodedSourceStart>;

        return $i0;
    }

    public final int getEncodedSourceEnd()
    {
        int $i0;
        org.mozilla.javascript.ScriptOrFnNode r0;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        $i0 = r0.<org.mozilla.javascript.ScriptOrFnNode: int encodedSourceEnd>;

        return $i0;
    }

    public final void setEncodedSourceBounds(int, int)
    {
        int i0, i1;
        org.mozilla.javascript.ScriptOrFnNode r0;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<org.mozilla.javascript.ScriptOrFnNode: int encodedSourceStart> = i0;

        r0.<org.mozilla.javascript.ScriptOrFnNode: int encodedSourceEnd> = i1;

        return;
    }

    public final int getBaseLineno()
    {
        int $i0;
        org.mozilla.javascript.ScriptOrFnNode r0;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        $i0 = r0.<org.mozilla.javascript.ScriptOrFnNode: int baseLineno>;

        return $i0;
    }

    public final void setBaseLineno(int)
    {
        int i0, $i1;
        org.mozilla.javascript.ScriptOrFnNode r0;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<org.mozilla.javascript.ScriptOrFnNode: int baseLineno>;

        if $i1 < 0 goto label2;

     label1:
        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label2:
        r0.<org.mozilla.javascript.ScriptOrFnNode: int baseLineno> = i0;

        return;
    }

    public final int getEndLineno()
    {
        int $i0;
        org.mozilla.javascript.ScriptOrFnNode r0;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        $i0 = r0.<org.mozilla.javascript.ScriptOrFnNode: int endLineno>;

        return $i0;
    }

    public final void setEndLineno(int)
    {
        int i0, $i1;
        org.mozilla.javascript.ScriptOrFnNode r0;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r0.<org.mozilla.javascript.ScriptOrFnNode: int endLineno>;

        if $i1 < 0 goto label2;

     label1:
        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label2:
        r0.<org.mozilla.javascript.ScriptOrFnNode: int endLineno> = i0;

        return;
    }

    public final int getFunctionCount()
    {
        org.mozilla.javascript.ObjArray $r1, $r2;
        int $i0;
        org.mozilla.javascript.ScriptOrFnNode r0;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        $r1 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray functions>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray functions>;

        $i0 = virtualinvoke $r2.<org.mozilla.javascript.ObjArray: int size()>();

        return $i0;
    }

    public final org.mozilla.javascript.FunctionNode getFunctionNode(int)
    {
        org.mozilla.javascript.ObjArray $r1;
        int i0;
        org.mozilla.javascript.FunctionNode $r3;
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.Object $r2;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray functions>;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>(i0);

        $r3 = (org.mozilla.javascript.FunctionNode) $r2;

        return $r3;
    }

    public final int addFunction(org.mozilla.javascript.FunctionNode)
    {
        org.mozilla.javascript.ObjArray $r2, $r3, $r4, $r5;
        org.mozilla.javascript.FunctionNode r0;
        int $i0, $i1;
        org.mozilla.javascript.ScriptOrFnNode r1;

        r1 := @this: org.mozilla.javascript.ScriptOrFnNode;

        r0 := @parameter0: org.mozilla.javascript.FunctionNode;

        if r0 != null goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $r2 = r1.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray functions>;

        if $r2 != null goto label2;

        $r5 = new org.mozilla.javascript.ObjArray;

        specialinvoke $r5.<org.mozilla.javascript.ObjArray: void <init>()>();

        r1.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray functions> = $r5;

     label2:
        $r3 = r1.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray functions>;

        virtualinvoke $r3.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>(r0);

        $r4 = r1.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray functions>;

        $i0 = virtualinvoke $r4.<org.mozilla.javascript.ObjArray: int size()>();

        $i1 = $i0 - 1;

        return $i1;
    }

    public final int getRegexpCount()
    {
        org.mozilla.javascript.ObjArray $r1, $r2;
        int $i0, $i1;
        org.mozilla.javascript.ScriptOrFnNode r0;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        $r1 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray regexps>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $r2 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray regexps>;

        $i0 = virtualinvoke $r2.<org.mozilla.javascript.ObjArray: int size()>();

        $i1 = $i0 / 2;

        return $i1;
    }

    public final java.lang.String getRegexpString(int)
    {
        org.mozilla.javascript.ObjArray $r1;
        int i0, $i1;
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray regexps>;

        $i1 = i0 * 2;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>($i1);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public final java.lang.String getRegexpFlags(int)
    {
        org.mozilla.javascript.ObjArray $r1;
        int i0, $i1, $i2;
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray regexps>;

        $i1 = i0 * 2;

        $i2 = $i1 + 1;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>($i2);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public final int addRegexp(java.lang.String, java.lang.String)
    {
        org.mozilla.javascript.ObjArray $r2, $r3, $r5, $r6, $r7;
        int $i0, $i1, $i2;
        org.mozilla.javascript.ScriptOrFnNode r1;
        java.lang.String r0, r4;

        r1 := @this: org.mozilla.javascript.ScriptOrFnNode;

        r0 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $r2 = r1.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray regexps>;

        if $r2 != null goto label2;

        $r7 = new org.mozilla.javascript.ObjArray;

        specialinvoke $r7.<org.mozilla.javascript.ObjArray: void <init>()>();

        r1.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray regexps> = $r7;

     label2:
        $r3 = r1.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray regexps>;

        virtualinvoke $r3.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>(r0);

        $r5 = r1.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray regexps>;

        virtualinvoke $r5.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>(r4);

        $r6 = r1.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray regexps>;

        $i0 = virtualinvoke $r6.<org.mozilla.javascript.ObjArray: int size()>();

        $i1 = $i0 / 2;

        $i2 = $i1 - 1;

        return $i2;
    }

    public final boolean hasParamOrVar(java.lang.String)
    {
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.String r1;
        org.mozilla.javascript.ObjToIntMap $r2;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjToIntMap itsVariableNames>;

        $z0 = virtualinvoke $r2.<org.mozilla.javascript.ObjToIntMap: boolean has(java.lang.Object)>(r1);

        return $z0;
    }

    public final int getParamOrVarIndex(java.lang.String)
    {
        int $i0, $i2;
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.String r1;
        org.mozilla.javascript.ObjToIntMap $r2;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjToIntMap itsVariableNames>;

        $i2 = (int) -1;

        $i0 = virtualinvoke $r2.<org.mozilla.javascript.ObjToIntMap: int get(java.lang.Object,int)>(r1, $i2);

        return $i0;
    }

    public final java.lang.String getParamOrVarName(int)
    {
        org.mozilla.javascript.ObjArray $r1;
        int i0;
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.Object $r2;
        java.lang.String $r3;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray itsVariables>;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.ObjArray: java.lang.Object get(int)>(i0);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    public final int getParamCount()
    {
        int $i0;
        org.mozilla.javascript.ScriptOrFnNode r0;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        $i0 = r0.<org.mozilla.javascript.ScriptOrFnNode: int varStart>;

        return $i0;
    }

    public final int getParamAndVarCount()
    {
        int $i0;
        org.mozilla.javascript.ScriptOrFnNode r0;
        org.mozilla.javascript.ObjArray $r1;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        $r1 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray itsVariables>;

        $i0 = virtualinvoke $r1.<org.mozilla.javascript.ObjArray: int size()>();

        return $i0;
    }

    public final java.lang.String[] getParamAndVarNames()
    {
        org.mozilla.javascript.ObjArray $r1, $r3;
        int $i0;
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.String[] r2, $r4;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        $r1 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray itsVariables>;

        $i0 = virtualinvoke $r1.<org.mozilla.javascript.ObjArray: int size()>();

        if $i0 != 0 goto label1;

        $r4 = <org.mozilla.javascript.ScriptRuntime: java.lang.String[] emptyStrings>;

        return $r4;

     label1:
        r2 = newarray (java.lang.String)[$i0];

        $r3 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray itsVariables>;

        virtualinvoke $r3.<org.mozilla.javascript.ObjArray: void toArray(java.lang.Object[])>(r2);

        return r2;
    }

    public final void addParam(java.lang.String)
    {
        org.mozilla.javascript.ObjArray $r1, $r3;
        int $i0, $i1, $i2, $i3;
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.String r2;
        org.mozilla.javascript.ObjToIntMap $r4;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        r2 := @parameter0: java.lang.String;

        $i0 = r0.<org.mozilla.javascript.ScriptOrFnNode: int varStart>;

        $r1 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray itsVariables>;

        $i1 = virtualinvoke $r1.<org.mozilla.javascript.ObjArray: int size()>();

        if $i0 == $i1 goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $i2 = r0.<org.mozilla.javascript.ScriptOrFnNode: int varStart>;

        $i3 = $i2 + 1;

        r0.<org.mozilla.javascript.ScriptOrFnNode: int varStart> = $i3;

        $r3 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray itsVariables>;

        virtualinvoke $r3.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>(r2);

        $r4 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjToIntMap itsVariableNames>;

        virtualinvoke $r4.<org.mozilla.javascript.ObjToIntMap: void put(java.lang.Object,int)>(r2, $i2);

        return;
    }

    public final void addVar(java.lang.String)
    {
        org.mozilla.javascript.ObjArray $r3, $r4;
        int $i0, $i1, $i3, $i5;
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.String r1;
        org.mozilla.javascript.ObjToIntMap $r2, $r5;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjToIntMap itsVariableNames>;

        $i3 = (int) -1;

        $i0 = virtualinvoke $r2.<org.mozilla.javascript.ObjToIntMap: int get(java.lang.Object,int)>(r1, $i3);

        $i5 = (int) -1;

        if $i0 == $i5 goto label1;

        return;

     label1:
        $r3 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray itsVariables>;

        $i1 = virtualinvoke $r3.<org.mozilla.javascript.ObjArray: int size()>();

        $r4 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray itsVariables>;

        virtualinvoke $r4.<org.mozilla.javascript.ObjArray: void add(java.lang.Object)>(r1);

        $r5 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjToIntMap itsVariableNames>;

        virtualinvoke $r5.<org.mozilla.javascript.ObjToIntMap: void put(java.lang.Object,int)>(r1, $i1);

        return;
    }

    public final void removeParamOrVar(java.lang.String)
    {
        org.mozilla.javascript.ObjToIntMap$Iterator $r6;
        org.mozilla.javascript.ObjArray $r3;
        int $i0, $i1, $i2, $i4, $i6;
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.String r1;
        org.mozilla.javascript.ObjToIntMap $r2, $r4, $r5;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjToIntMap itsVariableNames>;

        $i4 = (int) -1;

        $i0 = virtualinvoke $r2.<org.mozilla.javascript.ObjToIntMap: int get(java.lang.Object,int)>(r1, $i4);

        $i6 = (int) -1;

        if $i0 == $i6 goto label3;

        $r3 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjArray itsVariables>;

        virtualinvoke $r3.<org.mozilla.javascript.ObjArray: void remove(int)>($i0);

        $r4 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjToIntMap itsVariableNames>;

        virtualinvoke $r4.<org.mozilla.javascript.ObjToIntMap: void remove(java.lang.Object)>(r1);

        $r5 = r0.<org.mozilla.javascript.ScriptOrFnNode: org.mozilla.javascript.ObjToIntMap itsVariableNames>;

        $r6 = virtualinvoke $r5.<org.mozilla.javascript.ObjToIntMap: org.mozilla.javascript.ObjToIntMap$Iterator newIterator()>();

        virtualinvoke $r6.<org.mozilla.javascript.ObjToIntMap$Iterator: void start()>();

     label1:
        $z0 = virtualinvoke $r6.<org.mozilla.javascript.ObjToIntMap$Iterator: boolean done()>();

        if $z0 != 0 goto label3;

        $i1 = virtualinvoke $r6.<org.mozilla.javascript.ObjToIntMap$Iterator: int getValue()>();

        if $i1 <= $i0 goto label2;

        $i2 = $i1 - 1;

        virtualinvoke $r6.<org.mozilla.javascript.ObjToIntMap$Iterator: void setValue(int)>($i2);

     label2:
        virtualinvoke $r6.<org.mozilla.javascript.ObjToIntMap$Iterator: void next()>();

        goto label1;

     label3:
        return;
    }

    public final java.lang.Object getCompilerData()
    {
        org.mozilla.javascript.ScriptOrFnNode r0;
        java.lang.Object $r1;

        r0 := @this: org.mozilla.javascript.ScriptOrFnNode;

        $r1 = r0.<org.mozilla.javascript.ScriptOrFnNode: java.lang.Object compilerData>;

        return $r1;
    }

    public final void setCompilerData(java.lang.Object)
    {
        java.lang.IllegalStateException $r3;
        org.mozilla.javascript.ScriptOrFnNode r1;
        java.lang.Object r0, $r2;
        java.lang.IllegalArgumentException $r4;

        r1 := @this: org.mozilla.javascript.ScriptOrFnNode;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r4;

     label1:
        $r2 = r1.<org.mozilla.javascript.ScriptOrFnNode: java.lang.Object compilerData>;

        if $r2 == null goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>();

        throw $r3;

     label2:
        r1.<org.mozilla.javascript.ScriptOrFnNode: java.lang.Object compilerData> = r0;

        return;
    }
}
