public class com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine extends java.lang.Object implements com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngineI
{
    protected com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph;
    protected java.util.List rules;
    protected com.hp.hpl.jena.util.OneToManyMap clauseIndex;
    protected java.util.HashSet predicatesUsed;
    protected boolean wildcardRule;
    protected boolean recordDerivations;
    int nRulesTriggered;
    long nRulesFired;
    long nAxiomRulesFired;
    boolean processedAxioms;
    protected static org.slf4j.Logger logger;

    public void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI, java.util.List)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r0;
        java.util.List r2;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI;

        r2 := @parameter1: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: int nRulesTriggered> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: long nRulesFired> = 0L;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: long nAxiomRulesFired> = -1L;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean processedAxioms> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph> = r1;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: java.util.List rules> = r2;

        return;
    }

    public void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r0;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: int nRulesTriggered> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: long nRulesFired> = 0L;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: long nAxiomRulesFired> = -1L;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean processedAxioms> = 0;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph> = r1;

        return;
    }

    public void init(boolean, com.hp.hpl.jena.reasoner.Finder)
    {
        org.slf4j.Logger $r3;
        long $l0, $l1;
        com.hp.hpl.jena.util.OneToManyMap $r1;
        java.util.List $r9;
        com.hp.hpl.jena.reasoner.Finder r8;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r0;
        java.lang.StringBuilder $r2, $r4, $r5, $r6;
        java.lang.String $r7;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        z0 := @parameter0: boolean;

        r8 := @parameter1: com.hp.hpl.jena.reasoner.Finder;

        $r1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        if $r1 != null goto label1;

        $r9 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: java.util.List rules>;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: void compile(java.util.List,boolean)>($r9, z0);

     label1:
        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: void findAndProcessAxioms()>();

        $l0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: long nRulesFired>;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: long nAxiomRulesFired> = $l0;

        $r3 = <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: org.slf4j.Logger logger>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Axioms fired ");

        $l1 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: long nAxiomRulesFired>;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rules");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String)>($r7);

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: void fastInit(com.hp.hpl.jena.reasoner.Finder)>(r8);

        return;
    }

    public void fastInit(com.hp.hpl.jena.reasoner.Finder)
    {
        com.hp.hpl.jena.graph.Node r6;
        java.util.HashSet $r3;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r0;
        boolean $z0, $z1, $z2, $z3;
        java.util.Iterator $r4;
        com.hp.hpl.jena.graph.Triple $r11, $r15;
        com.hp.hpl.jena.reasoner.Finder r7;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r9, $r13;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext $r1;
        com.hp.hpl.jena.reasoner.TriplePattern $r8, $r12;
        java.lang.Object $r5, $r10, $r14;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        r7 := @parameter0: com.hp.hpl.jena.reasoner.Finder;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: void findAndProcessActions()>();

        $r1 = new com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        $r2 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI)>($r2);

        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean wildcardRule>;

        if $z0 == 0 goto label3;

        $r12 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r12.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, null, null);

        $r13 = interfaceinvoke r7.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>($r12);

     label1:
        $z3 = interfaceinvoke $r13.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label2;

        $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (com.hp.hpl.jena.graph.Triple) $r14;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: void addTriple(com.hp.hpl.jena.graph.Triple)>($r15);

        goto label1;

     label2:
        goto label7;

     label3:
        $r3 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: java.util.HashSet predicatesUsed>;

        $r4 = virtualinvoke $r3.<java.util.HashSet: java.util.Iterator iterator()>();

     label4:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.graph.Node) $r5;

        $r8 = new com.hp.hpl.jena.reasoner.TriplePattern;

        specialinvoke $r8.<com.hp.hpl.jena.reasoner.TriplePattern: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(null, r6, null);

        $r9 = interfaceinvoke r7.<com.hp.hpl.jena.reasoner.Finder: com.hp.hpl.jena.util.iterator.ExtendedIterator find(com.hp.hpl.jena.reasoner.TriplePattern)>($r8);

     label5:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (com.hp.hpl.jena.graph.Triple) $r10;

        virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: void addTriple(com.hp.hpl.jena.graph.Triple)>($r11);

        goto label5;

     label6:
        goto label4;

     label7:
        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: void addSet(com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext)>($r1);

        return;
    }

    public synchronized void add(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext $r0;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r1;
        com.hp.hpl.jena.graph.Triple r3;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI)>($r2);

        virtualinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: void addTriple(com.hp.hpl.jena.graph.Triple)>(r3);

        virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: void addSet(com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext)>($r0);

        return;
    }

    public synchronized boolean delete(com.hp.hpl.jena.graph.Triple)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r0;
        com.hp.hpl.jena.graph.Triple r1;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        r1 := @parameter0: com.hp.hpl.jena.graph.Triple;

        return 0;
    }

    public long getNRulesFired()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r0;
        long $l0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        $l0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: long nRulesFired>;

        return $l0;
    }

    public boolean shouldTrace()
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        return 1;
    }

    public void setDerivationLogging(boolean)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r0;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        z0 := @parameter0: boolean;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean recordDerivations> = z0;

        return;
    }

    public java.lang.Object getRuleStore()
    {
        java.util.HashSet $r2;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$RuleStore $r0;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r1;
        com.hp.hpl.jena.util.OneToManyMap $r3;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$RuleStore;

        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: java.util.HashSet predicatesUsed>;

        $z0 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean wildcardRule>;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$RuleStore: void <init>(com.hp.hpl.jena.util.OneToManyMap,java.util.HashSet,boolean)>($r3, $r2, $z0);

        return $r0;
    }

    public void setRuleStore(java.lang.Object)
    {
        java.util.HashSet $r4;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$RuleStore r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r2;
        java.lang.Object r0;
        com.hp.hpl.jena.util.OneToManyMap $r3;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        r0 := @parameter0: java.lang.Object;

        r1 = (com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$RuleStore) r0;

        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$RuleStore: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        r2.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex> = $r3;

        $r4 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$RuleStore: java.util.HashSet predicatesUsed>;

        r2.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: java.util.HashSet predicatesUsed> = $r4;

        $z0 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$RuleStore: boolean wildcardRule>;

        r2.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean wildcardRule> = $z0;

        return;
    }

    public void addSet(com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext)
    {
        com.hp.hpl.jena.graph.Node $r6, $r8;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r18;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r2;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.hp.hpl.jena.graph.Triple $r1;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;
        com.hp.hpl.jena.reasoner.TriplePattern r19;
        java.lang.StringBuilder $r23, $r25, $r27;
        long $l5, $l6;
        com.hp.hpl.jena.util.OneToManyMap $r5, $r9;
        java.util.HashSet $r4;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r26, $r28;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$ClausePointer r14;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack $r20;
        org.slf4j.Logger $r24;
        java.util.Iterator $r7, $r10;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r15, $r16, $r17, $r21, $r22;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r11, $r12;
        java.lang.Object $r13;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        r0 := @parameter0: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

     label1:
        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.graph.Triple getNextTriple()>();

        if $r1 == null goto label7;

        $r3 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        $z0 = interfaceinvoke $r3.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: boolean shouldTrace()>();

        if $z0 == 0 goto label2;

        $r24 = <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: org.slf4j.Logger logger>;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing: ");

        $r26 = staticinvoke <com.hp.hpl.jena.util.PrintUtil: java.lang.String print(com.hp.hpl.jena.graph.Triple)>($r1);

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r24.<org.slf4j.Logger: void info(java.lang.String)>($r28);

     label2:
        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r5 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        $r6 = virtualinvoke $r1.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r7 = virtualinvoke $r5.<com.hp.hpl.jena.util.OneToManyMap: java.util.Iterator getAll(java.lang.Object)>($r6);

        $r9 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        $r8 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r10 = virtualinvoke $r9.<com.hp.hpl.jena.util.OneToManyMap: java.util.Iterator getAll(java.lang.Object)>($r8);

        $r11 = staticinvoke <com.hp.hpl.jena.util.iterator.WrappedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator create(java.util.Iterator)>($r7);

        $r12 = interfaceinvoke $r11.<com.hp.hpl.jena.util.iterator.ExtendedIterator: com.hp.hpl.jena.util.iterator.ExtendedIterator andThen(java.util.Iterator)>($r10);

     label3:
        $z4 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label6;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$ClausePointer) $r13;

        $r15 = r14.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$ClausePointer: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        $z1 = virtualinvoke $r4.<java.util.HashSet: boolean contains(java.lang.Object)>($r15);

        if $z1 == 0 goto label4;

        goto label3;

     label4:
        $r16 = r14.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$ClausePointer: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        $i0 = virtualinvoke $r16.<com.hp.hpl.jena.reasoner.rulesys.Rule: int getNumVars()>();

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: void resetEnv(int)>($i0);

        $r17 = r14.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$ClausePointer: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        $i1 = r14.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$ClausePointer: int index>;

        $r18 = virtualinvoke $r17.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getBodyElement(int)>($i1);

        r19 = (com.hp.hpl.jena.reasoner.TriplePattern) $r18;

        $r20 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack getEnvStack()>();

        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean match(com.hp.hpl.jena.reasoner.TriplePattern,com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack)>(r19, $r1, $r20);

        if $z2 == 0 goto label5;

        $i2 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: int nRulesTriggered>;

        $i3 = $i2 + 1;

        r2.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: int nRulesTriggered> = $i3;

        $r21 = r14.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$ClausePointer: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: void setRule(com.hp.hpl.jena.reasoner.rulesys.Rule)>($r21);

        $i4 = r14.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$ClausePointer: int index>;

        $z3 = specialinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean matchRuleBody(int,com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext)>($i4, r0);

        if $z3 == 0 goto label5;

        $r22 = r14.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$ClausePointer: com.hp.hpl.jena.reasoner.rulesys.Rule rule>;

        virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>($r22);

        $l5 = r2.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: long nRulesFired>;

        $l6 = $l5 + 1L;

        r2.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: long nRulesFired> = $l6;

     label5:
        goto label3;

     label6:
        goto label1;

     label7:
        return;
    }

    public void compile(java.util.List, boolean)
    {
        com.hp.hpl.jena.graph.Node $r11, $r15;
        com.hp.hpl.jena.util.OneToManyMap $r1, $r13, $r16;
        java.util.HashSet $r2, $r14;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r8, $r9;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r0;
        int i0, $i1;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z6;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$ClausePointer $r12;
        java.util.Iterator $r4;
        java.util.List r3;
        com.hp.hpl.jena.reasoner.rulesys.Rule r6;
        com.hp.hpl.jena.reasoner.TriplePattern $r10;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r7;
        java.lang.Object $r5;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        r3 := @parameter0: java.util.List;

        z1 := @parameter1: boolean;

        $r1 = new com.hp.hpl.jena.util.OneToManyMap;

        specialinvoke $r1.<com.hp.hpl.jena.util.OneToManyMap: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex> = $r1;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: java.util.HashSet predicatesUsed> = $r2;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean wildcardRule> = 0;

        $r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z6 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label7;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.reasoner.rulesys.Rule) $r5;

        if z1 == 0 goto label2;

        $z5 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isBackward()>();

        if $z5 == 0 goto label2;

        goto label1;

     label2:
        $r7 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] getBody()>();

        i0 = 0;

     label3:
        $i1 = lengthof $r7;

        if i0 >= $i1 goto label6;

        $r8 = $r7[i0];

        $z2 = $r8 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z2 == 0 goto label5;

        $r9 = $r7[i0];

        $r10 = (com.hp.hpl.jena.reasoner.TriplePattern) $r9;

        $r11 = virtualinvoke $r10.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r12 = new com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$ClausePointer;

        specialinvoke $r12.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine$ClausePointer: void <init>(com.hp.hpl.jena.reasoner.rulesys.Rule,int)>(r6, i0);

        $z3 = virtualinvoke $r11.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z3 == 0 goto label4;

        $r16 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        $r15 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        virtualinvoke $r16.<com.hp.hpl.jena.util.OneToManyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r12);

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean wildcardRule> = 1;

        goto label5;

     label4:
        $r13 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.util.OneToManyMap clauseIndex>;

        virtualinvoke $r13.<com.hp.hpl.jena.util.OneToManyMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12);

        $z4 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean wildcardRule>;

        if $z4 != 0 goto label5;

        $r14 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: java.util.HashSet predicatesUsed>;

        virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>($r11);

     label5:
        i0 = i0 + 1;

        goto label3;

     label6:
        goto label1;

     label7:
        $z0 = r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean wildcardRule>;

        if $z0 == 0 goto label8;

        r0.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: java.util.HashSet predicatesUsed> = null;

     label8:
        return;
    }

    protected void findAndProcessAxioms()
    {
        com.hp.hpl.jena.graph.Node $r10, $r11, $r12;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r2, $r13;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r7;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r1;
        int $i0, $i1, i2;
        com.hp.hpl.jena.graph.Graph $r14;
        boolean $z0, $z1;
        java.util.Iterator $r4;
        com.hp.hpl.jena.graph.Triple $r9;
        java.util.List $r3;
        com.hp.hpl.jena.reasoner.rulesys.Rule r6;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext $r0;
        com.hp.hpl.jena.reasoner.TriplePattern r8;
        java.lang.Object $r5;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI)>($r2);

        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: java.util.List rules>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.reasoner.rulesys.Rule) $r5;

        $i0 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        if $i0 != 0 goto label4;

        i2 = 0;

     label2:
        $i1 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: int headLength()>();

        if i2 >= $i1 goto label4;

        $r7 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getHeadElement(int)>(i2);

        $z1 = $r7 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z1 == 0 goto label3;

        r8 = (com.hp.hpl.jena.reasoner.TriplePattern) $r7;

        $r9 = new com.hp.hpl.jena.graph.Triple;

        $r10 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $r11 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r12 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        specialinvoke $r9.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r10, $r11, $r12);

        virtualinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: void addTriple(com.hp.hpl.jena.graph.Triple)>($r9);

        $r13 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        $r14 = interfaceinvoke $r13.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: com.hp.hpl.jena.graph.Graph getDeductionsGraph()>();

        interfaceinvoke $r14.<com.hp.hpl.jena.graph.Graph: void add(com.hp.hpl.jena.graph.Triple)>($r9);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        goto label1;

     label5:
        virtualinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: void addSet(com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext)>($r0);

        r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean processedAxioms> = 1;

        return;
    }

    protected void findAndProcessActions()
    {
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r2;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r7;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r1;
        int $i0, $i1, $i2, i3;
        java.lang.String $r13, $r16, $r18;
        com.hp.hpl.jena.reasoner.ReasonerException $r10;
        boolean $z0, $z1;
        com.hp.hpl.jena.graph.Node[] $r19;
        java.util.Iterator $r4;
        java.util.List $r3;
        com.hp.hpl.jena.reasoner.rulesys.Rule r6;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext $r0;
        com.hp.hpl.jena.reasoner.rulesys.Builtin $r9;
        java.lang.Object $r5;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r17;
        com.hp.hpl.jena.reasoner.rulesys.Functor r8;

        r1 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        $r0 = new com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        $r2 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        specialinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: void <init>(com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI)>($r2);

        $r3 = r1.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: java.util.List rules>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.reasoner.rulesys.Rule) $r5;

        $i0 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        if $i0 != 0 goto label5;

        i3 = 0;

     label2:
        $i1 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: int headLength()>();

        if i3 >= $i1 goto label5;

        $r7 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getHeadElement(int)>(i3);

        $z1 = $r7 instanceof com.hp.hpl.jena.reasoner.rulesys.Functor;

        if $z1 == 0 goto label4;

        r8 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r7;

        $r9 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin getImplementor()>();

        if $r9 == null goto label3;

        virtualinvoke $r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: void setRule(com.hp.hpl.jena.reasoner.rulesys.Rule)>(r6);

        $r19 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $i2 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.Functor: int getArgLength()>();

        interfaceinvoke $r9.<com.hp.hpl.jena.reasoner.rulesys.Builtin: void headAction(com.hp.hpl.jena.graph.Node[],int,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>($r19, $i2, $r0);

        goto label4;

     label3:
        $r10 = new com.hp.hpl.jena.reasoner.ReasonerException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invoking undefined Functor ");

        $r13 = virtualinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r16 = virtualinvoke r6.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String toShortString()>();

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>($r18);

        throw $r10;

     label4:
        i3 = i3 + 1;

        goto label2;

     label5:
        goto label1;

     label6:
        return;
    }

    private boolean matchRuleBody(int, com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext)
    {
        com.hp.hpl.jena.graph.Node $r12, $r13, $r14;
        byte $b11;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r5, $r6, $r7, $r9, $r10, $r16;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r4;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;
        com.hp.hpl.jena.reasoner.TriplePattern r11, $r15;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] $r2;
        java.util.ArrayList $r17;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i12, i13, i14, i15, $i17, $i19;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack $r8;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r1;

        r4 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        i2 := @parameter0: int;

        r0 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule getRule()>();

        $r2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry[] getBody()>();

        i0 = lengthof $r2;

        $r17 = new java.util.ArrayList;

        $i1 = i0 - 1;

        specialinvoke $r17.<java.util.ArrayList: void <init>(int)>($i1);

        if i0 > 1 goto label01;

        goto label14;

     label01:
        if i0 != 2 goto label05;

        if i2 != 0 goto label02;

        $b11 = 1;

        goto label03;

     label02:
        $b11 = 0;

     label03:
        $r16 = $r2[$b11];

        $z2 = $r16 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z2 == 0 goto label04;

        $r15 = (com.hp.hpl.jena.reasoner.TriplePattern) $r16;

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r15);

     label04:
        goto label14;

     label05:
        i12 = 0;

        $i17 = (int) -1;

        i13 = $i17;

        i14 = 0;

     label06:
        if i14 >= i0 goto label09;

        if i14 != i2 goto label07;

        goto label08;

     label07:
        $r8 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack getEnvStack()>();

        $r9 = $r2[i14];

        $z1 = $r9 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z1 == 0 goto label08;

        $r10 = $r2[i14];

        r11 = (com.hp.hpl.jena.reasoner.TriplePattern) $r10;

        $r12 = virtualinvoke r11.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $i3 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: int scoreNodeBoundness(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r12, $r8);

        $i4 = $i3 * 3;

        $r13 = virtualinvoke r11.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $i5 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: int scoreNodeBoundness(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r13, $r8);

        $i6 = $i5 * 2;

        $i7 = $i4 + $i6;

        $r14 = virtualinvoke r11.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $i8 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: int scoreNodeBoundness(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r14, $r8);

        $i9 = $i8 * 3;

        i10 = $i7 + $i9;

        if i10 <= i12 goto label08;

        i12 = i10;

        i13 = i14;

     label08:
        i14 = i14 + 1;

        goto label06;

     label09:
        i15 = 0;

     label10:
        if i15 >= i0 goto label13;

        if i15 == i2 goto label12;

        if i15 != i13 goto label11;

        goto label12;

     label11:
        $r6 = $r2[i15];

        $z0 = $r6 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z0 == 0 goto label12;

        $r7 = $r2[i15];

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r7);

     label12:
        i15 = i15 + 1;

        goto label10;

     label13:
        $i19 = (int) -1;

        if i13 == $i19 goto label14;

        $r5 = $r2[i13];

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r5);

     label14:
        $z3 = specialinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean matchClauseList(java.util.List,com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext)>($r17, r0);

        if $z3 == 0 goto label15;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: void flushPending()>();

     label15:
        return $z3;
    }

    private boolean matchClauseList(java.util.List, com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext)
    {
        com.hp.hpl.jena.graph.Node $r6, $r7, $r10, $r11, $r12, $r13, $r14, $r18, $r19, $r20, $r21, $r22, $r23, $r46, r69;
        com.hp.hpl.jena.reasoner.rulesys.ClauseEntry $r25, $r51, $r63;
        com.hp.hpl.jena.graph.Node[] $r43;
        com.hp.hpl.jena.graph.Triple r17, $r45, $r53;
        java.lang.StringBuilder $r28, $r29, $r36, $r38, $r39, $r41, $r56, $r58, $r59, $r61, $r70, $r73, $r75;
        java.util.ArrayList r65, $r71, $r77;
        java.lang.String $r30, $r37, $r40, $r42, $r57, $r62;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack $r2;
        com.hp.hpl.jena.util.iterator.ExtendedIterator $r15;
        com.hp.hpl.jena.reasoner.rulesys.Builtin $r33;
        com.hp.hpl.jena.reasoner.rulesys.RuleDerivation $r72;
        com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z17, $z18;
        java.util.List r3;
        com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext r0;
        com.hp.hpl.jena.reasoner.TriplePattern $r44, $r52, r68;
        com.hp.hpl.jena.reasoner.rulesys.Functor $r64, r66;
        com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI $r9, $r24, $r31, $r48, $r49;
        int $i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8, $i9, $i11;
        com.hp.hpl.jena.reasoner.ReasonerException $r74, $r76;
        org.slf4j.Logger $r55;
        com.hp.hpl.jena.reasoner.rulesys.Rule $r1, $r32, $r60, r67;
        java.lang.Object $r5, $r16;

        r8 := @this: com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine;

        r3 := @parameter0: java.util.List;

        r0 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.Rule getRule()>();

        $r2 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack getEnvStack()>();

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        i1 = $i0 - 1;

        $i11 = (int) -1;

        if i1 != $i11 goto label17;

        i6 = 0;

     label01:
        $i2 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        if i6 >= $i2 goto label03;

        $r63 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getBodyElement(int)>(i6);

        $z15 = $r63 instanceof com.hp.hpl.jena.reasoner.rulesys.Functor;

        if $z15 == 0 goto label02;

        $r64 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r63;

        $z16 = virtualinvoke $r64.<com.hp.hpl.jena.reasoner.rulesys.Functor: boolean evalAsBodyClause(com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(r0);

        if $z16 != 0 goto label02;

        return 0;

     label02:
        i6 = i6 + 1;

        goto label01;

     label03:
        $r24 = r8.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        $z5 = interfaceinvoke $r24.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: boolean shouldTrace()>();

        if $z5 == 0 goto label04;

        $r55 = <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: org.slf4j.Logger logger>;

        $r70 = new java.lang.StringBuilder;

        specialinvoke $r70.<java.lang.StringBuilder: void <init>()>();

        $r56 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fired rule: ");

        $r57 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String toShortString()>();

        $r58 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ");

        $r60 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.Rule instantiate(com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r2);

        $r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r60);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r55.<org.slf4j.Logger: void info(java.lang.String)>($r62);

     label04:
        r65 = null;

        $z6 = r8.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean recordDerivations>;

        if $z6 == 0 goto label07;

        $r71 = new java.util.ArrayList;

        $i4 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        specialinvoke $r71.<java.util.ArrayList: void <init>(int)>($i4);

        r65 = $r71;

        i7 = 0;

     label05:
        $i5 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: int bodyLength()>();

        if i7 >= $i5 goto label07;

        $r51 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getBodyElement(int)>(i7);

        $z14 = $r51 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z14 == 0 goto label06;

        $r52 = (com.hp.hpl.jena.reasoner.TriplePattern) $r51;

        $r53 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Triple instantiate(com.hp.hpl.jena.reasoner.TriplePattern)>($r52);

        interfaceinvoke $r71.<java.util.List: boolean add(java.lang.Object)>($r53);

     label06:
        i7 = i7 + 1;

        goto label05;

     label07:
        i8 = 0;

     label08:
        $i9 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: int headLength()>();

        if i8 >= $i9 goto label16;

        $r25 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.ClauseEntry getHeadElement(int)>(i8);

        $z7 = $r25 instanceof com.hp.hpl.jena.reasoner.TriplePattern;

        if $z7 == 0 goto label10;

        $r44 = (com.hp.hpl.jena.reasoner.TriplePattern) $r25;

        $r45 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Triple instantiate(com.hp.hpl.jena.reasoner.TriplePattern)>($r44);

        $r46 = virtualinvoke $r45.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z11 = virtualinvoke $r46.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z11 != 0 goto label09;

        $z12 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: boolean contains(com.hp.hpl.jena.graph.Triple)>($r45);

        if $z12 != 0 goto label09;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext: void add(com.hp.hpl.jena.graph.Triple)>($r45);

        $z13 = r8.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean recordDerivations>;

        if $z13 == 0 goto label09;

        $r49 = r8.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        $r72 = new com.hp.hpl.jena.reasoner.rulesys.RuleDerivation;

        $r48 = r8.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        specialinvoke $r72.<com.hp.hpl.jena.reasoner.rulesys.RuleDerivation: void <init>(com.hp.hpl.jena.reasoner.rulesys.Rule,com.hp.hpl.jena.graph.Triple,java.util.List,com.hp.hpl.jena.reasoner.InfGraph)>($r1, $r45, r65, $r48);

        interfaceinvoke $r49.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: void logDerivation(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.reasoner.Derivation)>($r45, $r72);

     label09:
        goto label15;

     label10:
        $z8 = $r25 instanceof com.hp.hpl.jena.reasoner.rulesys.Functor;

        if $z8 == 0 goto label13;

        r66 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r25;

        $r33 = virtualinvoke r66.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.reasoner.rulesys.Builtin getImplementor()>();

        if $r33 == null goto label11;

        $r43 = virtualinvoke r66.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getBoundArgs(com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r2);

        $i3 = virtualinvoke r66.<com.hp.hpl.jena.reasoner.rulesys.Functor: int getArgLength()>();

        interfaceinvoke $r33.<com.hp.hpl.jena.reasoner.rulesys.Builtin: void headAction(com.hp.hpl.jena.graph.Node[],int,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>($r43, $i3, r0);

        goto label12;

     label11:
        $r74 = new com.hp.hpl.jena.reasoner.ReasonerException;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r36 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invoking undefined Functor ");

        $r37 = virtualinvoke r66.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in ");

        $r40 = virtualinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.Rule: java.lang.String toShortString()>();

        $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r74.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>($r42);

        throw $r74;

     label12:
        goto label15;

     label13:
        $z9 = $r25 instanceof com.hp.hpl.jena.reasoner.rulesys.Rule;

        if $z9 == 0 goto label15;

        r67 = (com.hp.hpl.jena.reasoner.rulesys.Rule) $r25;

        $z10 = virtualinvoke r67.<com.hp.hpl.jena.reasoner.rulesys.Rule: boolean isBackward()>();

        if $z10 == 0 goto label14;

        $r31 = r8.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        $r32 = virtualinvoke r67.<com.hp.hpl.jena.reasoner.rulesys.Rule: com.hp.hpl.jena.reasoner.rulesys.Rule instantiate(com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)>($r2);

        interfaceinvoke $r31.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: void addBRule(com.hp.hpl.jena.reasoner.rulesys.Rule)>($r32);

        goto label15;

     label14:
        $r76 = new com.hp.hpl.jena.reasoner.ReasonerException;

        $r75 = new java.lang.StringBuilder;

        specialinvoke $r75.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r75.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Found non-backward subrule : ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r67);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r76.<com.hp.hpl.jena.reasoner.ReasonerException: void <init>(java.lang.String)>($r30);

        throw $r76;

     label15:
        i8 = i8 + 1;

        goto label08;

     label16:
        return 1;

     label17:
        $r77 = new java.util.ArrayList;

        specialinvoke $r77.<java.util.ArrayList: void <init>(java.util.Collection)>(r3);

        $r5 = interfaceinvoke $r77.<java.util.List: java.lang.Object remove(int)>(i1);

        r68 = (com.hp.hpl.jena.reasoner.TriplePattern) $r5;

        $r6 = virtualinvoke r68.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $r7 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node getBinding(com.hp.hpl.jena.graph.Node)>($r6);

        r69 = $r7;

        $z0 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>($r7);

        if $z0 == 0 goto label18;

        r69 = null;

     label18:
        $r9 = r8.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI infGraph>;

        $r10 = virtualinvoke r68.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $r11 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node getBinding(com.hp.hpl.jena.graph.Node)>($r10);

        $r12 = virtualinvoke r68.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r13 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node getBinding(com.hp.hpl.jena.graph.Node)>($r12);

        $r14 = virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: com.hp.hpl.jena.graph.Node getBinding(com.hp.hpl.jena.graph.Node)>(r69);

        $r15 = interfaceinvoke $r9.<com.hp.hpl.jena.reasoner.rulesys.ForwardRuleInfGraphI: com.hp.hpl.jena.util.iterator.ExtendedIterator findDataMatches(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r11, $r13, $r14);

        z17 = 0;

     label19:
        $z18 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z18 == 0 goto label21;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r17 = (com.hp.hpl.jena.graph.Triple) $r16;

        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: void push()>();

        $r18 = virtualinvoke r68.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r19 = virtualinvoke r17.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean match(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack)>($r18, $r19, $r2);

        if $z1 == 0 goto label20;

        $r20 = virtualinvoke r68.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $r21 = virtualinvoke r17.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean match(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack)>($r20, $r21, $r2);

        if $z2 == 0 goto label20;

        $r22 = virtualinvoke r68.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $r23 = virtualinvoke r17.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z3 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean match(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack)>($r22, $r23, $r2);

        if $z3 == 0 goto label20;

        $z4 = specialinvoke r8.<com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean matchClauseList(java.util.List,com.hp.hpl.jena.reasoner.rulesys.impl.BFRuleContext)>($r77, r0);

        z17 = z17 | $z4;

     label20:
        virtualinvoke $r2.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: void unwind()>();

        goto label19;

     label21:
        return z17;
    }

    public static int scoreNodeBoundness(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment)
    {
        com.hp.hpl.jena.graph.Node r0, $r2, $r4;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment r1;
        com.hp.hpl.jena.rdf.model.Property $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment;

        $z0 = r0 instanceof com.hp.hpl.jena.graph.Node_ANY;

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z1 == 0 goto label4;

        $r2 = interfaceinvoke r1.<com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment: com.hp.hpl.jena.graph.Node getGroundVersion(com.hp.hpl.jena.graph.Node)>(r0);

        if $r2 != null goto label2;

        return 1;

     label2:
        $r3 = <com.hp.hpl.jena.vocabulary.RDF: com.hp.hpl.jena.rdf.model.Property type>;

        $r4 = interfaceinvoke $r3.<com.hp.hpl.jena.rdf.model.Property: com.hp.hpl.jena.graph.Node asNode()>();

        $z2 = virtualinvoke $r2.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r4);

        if $z2 == 0 goto label3;

        return 2;

     label3:
        return 3;

     label4:
        return 3;
    }

    public static boolean match(com.hp.hpl.jena.reasoner.TriplePattern, com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack)
    {
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack r0;
        com.hp.hpl.jena.graph.Node $r2, $r4, $r5, $r6, $r7, $r8;
        com.hp.hpl.jena.graph.Triple r3;
        com.hp.hpl.jena.reasoner.TriplePattern r1;
        boolean $z0, $z1, $z2, $z3;

        r1 := @parameter0: com.hp.hpl.jena.reasoner.TriplePattern;

        r3 := @parameter1: com.hp.hpl.jena.graph.Triple;

        r0 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: void push()>();

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getPredicate()>();

        $r4 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getPredicate()>();

        $z0 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean match(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack)>($r2, $r4, r0);

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getObject()>();

        $r6 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getObject()>();

        $z1 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean match(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack)>($r5, $r6, r0);

        if $z1 == 0 goto label1;

        $r7 = virtualinvoke r1.<com.hp.hpl.jena.reasoner.TriplePattern: com.hp.hpl.jena.graph.Node getSubject()>();

        $r8 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: com.hp.hpl.jena.graph.Node getSubject()>();

        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean match(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack)>($r7, $r8, r0);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        if $z3 == 0 goto label3;

        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: void commit()>();

        return 1;

     label3:
        virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: void unwind()>();

        return 0;
    }

    public static boolean match(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack)
    {
        com.hp.hpl.jena.graph.Node r0, r1, $r10, $r11;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String $r5, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8;
        com.hp.hpl.jena.graph.Node[] $r7, $r8;
        com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack r9;
        com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable $r12;
        java.lang.Object $r2, $r3;
        com.hp.hpl.jena.reasoner.rulesys.Functor r4, r13;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        r9 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack;

        $z0 = r0 instanceof com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable;

        if $z0 == 0 goto label01;

        $r12 = (com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable) r0;

        $i3 = virtualinvoke $r12.<com.hp.hpl.jena.reasoner.rulesys.Node_RuleVariable: int getIndex()>();

        $z7 = virtualinvoke r9.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: boolean bind(int,com.hp.hpl.jena.graph.Node)>($i3, r1);

        return $z7;

     label01:
        $z1 = r0 instanceof com.hp.hpl.jena.graph.Node_ANY;

        if $z1 == 0 goto label02;

        return 1;

     label02:
        $z2 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>(r0);

        if $z2 == 0 goto label10;

        $z4 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.Functor: boolean isFunctor(com.hp.hpl.jena.graph.Node)>(r1);

        if $z4 != 0 goto label03;

        return 0;

     label03:
        $r2 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r13 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r2;

        $r3 = virtualinvoke r1.<com.hp.hpl.jena.graph.Node: java.lang.Object getLiteralValue()>();

        r4 = (com.hp.hpl.jena.reasoner.rulesys.Functor) $r3;

        $r5 = virtualinvoke r13.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $r6 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.Functor: java.lang.String getName()>();

        $z5 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z5 != 0 goto label04;

        return 0;

     label04:
        $r7 = virtualinvoke r13.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $r8 = virtualinvoke r4.<com.hp.hpl.jena.reasoner.rulesys.Functor: com.hp.hpl.jena.graph.Node[] getArgs()>();

        $i1 = lengthof $r7;

        $i0 = lengthof $r8;

        if $i1 == $i0 goto label05;

        return 0;

     label05:
        virtualinvoke r9.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: void push()>();

        z8 = 1;

        i4 = 0;

     label06:
        $i2 = lengthof $r7;

        if i4 >= $i2 goto label08;

        $r11 = $r7[i4];

        $r10 = $r8[i4];

        $z6 = staticinvoke <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: boolean match(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack)>($r11, $r10, r9);

        if $z6 != 0 goto label07;

        z8 = 0;

        goto label08;

     label07:
        i4 = i4 + 1;

        goto label06;

     label08:
        if z8 == 0 goto label09;

        virtualinvoke r9.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: void commit()>();

        return 1;

     label09:
        virtualinvoke r9.<com.hp.hpl.jena.reasoner.rulesys.impl.BindingStack: void unwind()>();

        return 0;

     label10:
        $z3 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean sameValueAs(java.lang.Object)>(r1);

        return $z3;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/reasoner/rulesys/impl/FRuleEngine;");

        <com.hp.hpl.jena.reasoner.rulesys.impl.FRuleEngine: org.slf4j.Logger logger> = $r0;

        return;
    }
}
