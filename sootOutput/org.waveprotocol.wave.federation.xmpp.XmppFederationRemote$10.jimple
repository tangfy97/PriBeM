class org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$10 extends java.lang.Object implements org.waveprotocol.wave.federation.WaveletFederationListener$WaveletUpdateCallback
{
    final java.lang.Runnable val$countDown;
    final org.waveprotocol.wave.federation.xmpp.XmppFederationRemote this$0;

    void <init>(org.waveprotocol.wave.federation.xmpp.XmppFederationRemote, java.lang.Runnable)
    {
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$10 r0;
        java.lang.Runnable r2;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote r1;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$10;

        r1 := @parameter0: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote;

        r2 := @parameter1: java.lang.Runnable;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$10: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote this$0> = r1;

        r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$10: java.lang.Runnable val$countDown> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void onSuccess()
    {
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$10 r0;
        java.lang.Runnable $r1;

        r0 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$10;

        $r1 = r0.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$10: java.lang.Runnable val$countDown>;

        interfaceinvoke $r1.<java.lang.Runnable: void run()>();

        return;
    }

    public void onFailure(org.waveprotocol.wave.federation.FederationErrorProto$FederationError)
    {
        org.waveprotocol.wave.federation.FederationErrorProto$FederationError r3;
        java.util.logging.Logger $r0;
        java.lang.Runnable $r7;
        org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$10 r6;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;

        r6 := @this: org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$10;

        r3 := @parameter0: org.waveprotocol.wave.federation.FederationErrorProto$FederationError;

        $r0 = staticinvoke <org.waveprotocol.wave.federation.xmpp.XmppFederationRemote: java.util.logging.Logger access$500()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incoming XMPP waveletUpdate failure: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.util.logging.Logger: void warning(java.lang.String)>($r5);

        $r7 = r6.<org.waveprotocol.wave.federation.xmpp.XmppFederationRemote$10: java.lang.Runnable val$countDown>;

        interfaceinvoke $r7.<java.lang.Runnable: void run()>();

        return;
    }
}
