class org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart extends java.lang.Object
{
    final java.lang.String tag;
    static final boolean $assertionsDisabled;

    void <init>(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart: java.lang.String tag> = r1;

        return;
    }

    static org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart getInstance(java.lang.String)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart $r0;
        java.lang.String r1;
        java.lang.AssertionError $r2;
        boolean $z0;

        r1 := @parameter0: java.lang.String;

        $z0 = <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if r1 != null goto label1;

        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label1:
        $r0 = new org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart;

        specialinvoke $r0.<org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart: void <init>(java.lang.String)>(r1);

        return $r0;
    }

    org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult notClosed(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton, org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)
    {
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton r0;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector r1;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult $r2;
        org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart r3;

        r3 := @this: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart;

        r0 := @parameter0: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton;

        r1 := @parameter1: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector;

        $r2 = staticinvoke <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton: org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ValidationResult access$000(org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton,org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$ViolationCollector)>(r0, r1);

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/document/operation/automaton/DocOpAutomaton;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.document.operation.automaton.DocOpAutomaton$InsertStart: boolean $assertionsDisabled> = $z1;

        return;
    }
}
