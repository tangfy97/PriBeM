public class ucar.nc2.dataset.CoordinateAxis2D extends ucar.nc2.dataset.CoordinateAxis
{
    private static org.slf4j.Logger log;
    private static final boolean debug;
    private ucar.ma2.ArrayDouble$D2 midpoint;

    public void <init>(ucar.nc2.dataset.NetcdfDataset, ucar.nc2.dataset.VariableDS)
    {
        ucar.nc2.dataset.VariableDS r2;
        ucar.nc2.dataset.NetcdfDataset r1;
        ucar.nc2.dataset.CoordinateAxis2D r0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis2D;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        r2 := @parameter1: ucar.nc2.dataset.VariableDS;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.dataset.VariableDS)>(r1, r2);

        r0.<ucar.nc2.dataset.CoordinateAxis2D: ucar.ma2.ArrayDouble$D2 midpoint> = null;

        return;
    }

    protected ucar.nc2.Variable copy()
    {
        ucar.nc2.dataset.NetcdfDataset $r2;
        ucar.nc2.dataset.CoordinateAxis2D $r0, r1;

        r1 := @this: ucar.nc2.dataset.CoordinateAxis2D;

        $r0 = new ucar.nc2.dataset.CoordinateAxis2D;

        $r2 = r1.<ucar.nc2.dataset.CoordinateAxis2D: ucar.nc2.dataset.NetcdfDataset ncd>;

        specialinvoke $r0.<ucar.nc2.dataset.CoordinateAxis2D: void <init>(ucar.nc2.dataset.NetcdfDataset,ucar.nc2.dataset.VariableDS)>($r2, r1);

        return $r0;
    }

    public double getCoordValue(int, int)
    {
        ucar.ma2.ArrayDouble$D2 $r1, $r2;
        ucar.nc2.dataset.CoordinateAxis2D r0;
        int i0, i1;
        double $d0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis2D;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis2D: ucar.ma2.ArrayDouble$D2 midpoint>;

        if $r1 != null goto label1;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis2D: void doRead()>();

     label1:
        $r2 = r0.<ucar.nc2.dataset.CoordinateAxis2D: ucar.ma2.ArrayDouble$D2 midpoint>;

        $d0 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i0, i1);

        return $d0;
    }

    private void doRead()
    {
        java.lang.IllegalStateException $r16;
        int[] $r4;
        int $i0;
        java.lang.String $r15;
        org.slf4j.Logger $r12;
        java.io.IOException $r10;
        java.lang.IllegalArgumentException $r9;
        ucar.ma2.Array $r1, $r2, $r7;
        ucar.ma2.ArrayDouble$D2 $r8;
        ucar.nc2.dataset.CoordinateAxis2D r0;
        java.lang.Class $r3, $r5;
        java.lang.Object $r6;
        java.lang.StringBuilder $r11, $r13, $r14;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis2D;

     label1:
        $r1 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis2D: ucar.ma2.Array read()>();

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        $r12 = <ucar.nc2.dataset.CoordinateAxis2D: org.slf4j.Logger log>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading coordinate values ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r12.<org.slf4j.Logger: void error(java.lang.String)>($r15);

        $r16 = new java.lang.IllegalStateException;

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r10);

        throw $r16;

     label4:
        $r2 = virtualinvoke $r1.<ucar.ma2.Array: ucar.ma2.Array reduce()>();

        $i0 = virtualinvoke $r2.<ucar.ma2.Array: int getRank()>();

        if $i0 == 2 goto label5;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("must be 2D");

        throw $r9;

     label5:
        $r3 = <java.lang.Double: java.lang.Class TYPE>;

        $r4 = virtualinvoke $r2.<ucar.ma2.Array: int[] getShape()>();

        $r5 = <java.lang.Double: java.lang.Class TYPE>;

        $r6 = virtualinvoke $r2.<ucar.ma2.Array: java.lang.Object get1DJavaArray(java.lang.Class)>($r5);

        $r7 = staticinvoke <ucar.ma2.Array: ucar.ma2.Array factory(java.lang.Class,int[],java.lang.Object)>($r3, $r4, $r6);

        $r8 = (ucar.ma2.ArrayDouble$D2) $r7;

        r0.<ucar.nc2.dataset.CoordinateAxis2D: ucar.ma2.ArrayDouble$D2 midpoint> = $r8;

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public double[] getCoordValues()
    {
        java.lang.UnsupportedOperationException $r7;
        double[] $r5, $r6;
        ucar.ma2.ArrayDouble$D2 $r1, $r3;
        ucar.nc2.dataset.CoordinateAxis2D r0;
        java.lang.Class $r2;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis2D;

        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis2D: ucar.ma2.ArrayDouble$D2 midpoint>;

        if $r1 != null goto label1;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis2D: void doRead()>();

     label1:
        $z0 = virtualinvoke r0.<ucar.nc2.dataset.CoordinateAxis2D: boolean isNumeric()>();

        if $z0 != 0 goto label2;

        $r7 = new java.lang.UnsupportedOperationException;

        specialinvoke $r7.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("CoordinateAxis2D.getCoordValues() on non-numeric");

        throw $r7;

     label2:
        $r3 = r0.<ucar.nc2.dataset.CoordinateAxis2D: ucar.ma2.ArrayDouble$D2 midpoint>;

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        $r4 = virtualinvoke $r3.<ucar.ma2.ArrayDouble$D2: java.lang.Object get1DJavaArray(java.lang.Class)>($r2);

        $r5 = (double[]) $r4;

        $r6 = (double[]) $r5;

        return $r6;
    }

    public ucar.nc2.dataset.CoordinateAxis2D section(ucar.ma2.Range, ucar.ma2.Range) throws ucar.ma2.InvalidRangeException
    {
        ucar.ma2.Range r1, r2;
        ucar.nc2.dataset.CoordinateAxis2D r3, $r5;
        ucar.nc2.Variable $r4;
        java.util.ArrayList $r0;

        r3 := @this: ucar.nc2.dataset.CoordinateAxis2D;

        r1 := @parameter0: ucar.ma2.Range;

        r2 := @parameter1: ucar.ma2.Range;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r4 = virtualinvoke r3.<ucar.nc2.dataset.CoordinateAxis2D: ucar.nc2.Variable section(java.util.List)>($r0);

        $r5 = (ucar.nc2.dataset.CoordinateAxis2D) $r4;

        return $r5;
    }

    public ucar.ma2.ArrayDouble$D2 getMidpoints()
    {
        ucar.ma2.ArrayDouble$D2 $r1, $r2;
        ucar.nc2.dataset.CoordinateAxis2D r0;

        r0 := @this: ucar.nc2.dataset.CoordinateAxis2D;

        $r1 = r0.<ucar.nc2.dataset.CoordinateAxis2D: ucar.ma2.ArrayDouble$D2 midpoint>;

        if $r1 != null goto label1;

        specialinvoke r0.<ucar.nc2.dataset.CoordinateAxis2D: void doRead()>();

     label1:
        $r2 = r0.<ucar.nc2.dataset.CoordinateAxis2D: ucar.ma2.ArrayDouble$D2 midpoint>;

        return $r2;
    }

    public static ucar.ma2.ArrayDouble$D2 makeXEdges(ucar.ma2.ArrayDouble$D2)
    {
        int[] $r1;
        ucar.ma2.ArrayDouble$D2 r0, $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, d27;

        r0 := @parameter0: ucar.ma2.ArrayDouble$D2;

        $r1 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: int[] getShape()>();

        i0 = $r1[0];

        i1 = $r1[1];

        $r2 = new ucar.ma2.ArrayDouble$D2;

        $i3 = i0 + 1;

        $i2 = i1 + 1;

        specialinvoke $r2.<ucar.ma2.ArrayDouble$D2: void <init>(int,int)>($i3, $i2);

        i27 = 0;

     label1:
        $i4 = i0 - 1;

        if i27 >= $i4 goto label4;

        i28 = 0;

     label2:
        $i9 = i1 - 1;

        if i28 >= $i9 goto label3;

        $d20 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i27, i28);

        $i21 = i28 + 1;

        $d21 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i27, $i21);

        $d22 = $d20 + $d21;

        $i22 = i27 + 1;

        $d23 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i22, i28);

        $d24 = $d22 + $d23;

        $i24 = i27 + 1;

        $i23 = i28 + 1;

        $d25 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i24, $i23);

        $d26 = $d24 + $d25;

        d27 = $d26 / 4.0;

        $i26 = i27 + 1;

        $i25 = i28 + 1;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>($i26, $i25, d27);

        i28 = i28 + 1;

        goto label2;

     label3:
        $i11 = i27 + 1;

        $i10 = i27 + 1;

        $d10 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i10, 1);

        $i12 = i27 + 1;

        $d11 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i12, 2);

        $i13 = i27 + 1;

        $d12 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i13, 1);

        $d13 = $d11 - $d12;

        $d14 = $d10 - $d13;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>($i11, 0, $d14);

        $i16 = i27 + 1;

        $i15 = i27 + 1;

        $i14 = i1 - 1;

        $d15 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i15, $i14);

        $i18 = i27 + 1;

        $i17 = i1 - 1;

        $d16 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i18, $i17);

        $i20 = i27 + 1;

        $i19 = i1 - 2;

        $d17 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i20, $i19);

        $d18 = $d16 - $d17;

        $d19 = $d15 + $d18;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>($i16, i1, $d19);

        i27 = i27 + 1;

        goto label1;

     label4:
        i29 = 0;

     label5:
        $i5 = i1 + 1;

        if i29 >= $i5 goto label6;

        $d0 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(1, i29);

        $d1 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(2, i29);

        $d2 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(1, i29);

        $d3 = $d1 - $d2;

        $d4 = $d0 - $d3;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>(0, i29, $d4);

        $i6 = i0 - 1;

        $d5 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i6, i29);

        $i7 = i0 - 1;

        $d6 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i7, i29);

        $i8 = i0 - 2;

        $d7 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i8, i29);

        $d8 = $d6 - $d7;

        $d9 = $d5 + $d8;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>(i0, i29, $d9);

        i29 = i29 + 1;

        goto label5;

     label6:
        return $r2;
    }

    public static ucar.ma2.ArrayDouble$D2 makeYEdges(ucar.ma2.ArrayDouble$D2)
    {
        int[] $r1;
        ucar.ma2.ArrayDouble$D2 r0, $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i29;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, $d19, $d20, $d21, $d22, $d23, $d24, $d25, $d26, d27;

        r0 := @parameter0: ucar.ma2.ArrayDouble$D2;

        $r1 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: int[] getShape()>();

        i0 = $r1[0];

        i1 = $r1[1];

        $r2 = new ucar.ma2.ArrayDouble$D2;

        $i3 = i0 + 1;

        $i2 = i1 + 1;

        specialinvoke $r2.<ucar.ma2.ArrayDouble$D2: void <init>(int,int)>($i3, $i2);

        i27 = 0;

     label1:
        $i4 = i0 - 1;

        if i27 >= $i4 goto label4;

        i28 = 0;

     label2:
        $i9 = i1 - 1;

        if i28 >= $i9 goto label3;

        $d20 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i27, i28);

        $i21 = i28 + 1;

        $d21 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i27, $i21);

        $d22 = $d20 + $d21;

        $i22 = i27 + 1;

        $d23 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i22, i28);

        $d24 = $d22 + $d23;

        $i24 = i27 + 1;

        $i23 = i28 + 1;

        $d25 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i24, $i23);

        $d26 = $d24 + $d25;

        d27 = $d26 / 4.0;

        $i26 = i27 + 1;

        $i25 = i28 + 1;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>($i26, $i25, d27);

        i28 = i28 + 1;

        goto label2;

     label3:
        $i11 = i27 + 1;

        $i10 = i27 + 1;

        $d10 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i10, 1);

        $i12 = i27 + 1;

        $d11 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i12, 2);

        $i13 = i27 + 1;

        $d12 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i13, 1);

        $d13 = $d11 - $d12;

        $d14 = $d10 - $d13;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>($i11, 0, $d14);

        $i16 = i27 + 1;

        $i15 = i27 + 1;

        $i14 = i1 - 1;

        $d15 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i15, $i14);

        $i18 = i27 + 1;

        $i17 = i1 - 1;

        $d16 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i18, $i17);

        $i20 = i27 + 1;

        $i19 = i1 - 2;

        $d17 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i20, $i19);

        $d18 = $d16 - $d17;

        $d19 = $d15 + $d18;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>($i16, i1, $d19);

        i27 = i27 + 1;

        goto label1;

     label4:
        i29 = 0;

     label5:
        $i5 = i1 + 1;

        if i29 >= $i5 goto label6;

        $d0 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(1, i29);

        $d1 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(2, i29);

        $d2 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(1, i29);

        $d3 = $d1 - $d2;

        $d4 = $d0 - $d3;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>(0, i29, $d4);

        $i6 = i0 - 1;

        $d5 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i6, i29);

        $i7 = i0 - 1;

        $d6 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i7, i29);

        $i8 = i0 - 2;

        $d7 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i8, i29);

        $d8 = $d6 - $d7;

        $d9 = $d5 + $d8;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>(i0, i29, $d9);

        i29 = i29 + 1;

        goto label5;

     label6:
        return $r2;
    }

    public static ucar.ma2.ArrayDouble$D2 makeXEdgesRotated(ucar.ma2.ArrayDouble$D2)
    {
        int[] $r1;
        ucar.ma2.ArrayDouble$D2 r0, $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, d15;

        r0 := @parameter0: ucar.ma2.ArrayDouble$D2;

        $r1 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: int[] getShape()>();

        i0 = $r1[0];

        i1 = $r1[1];

        $r2 = new ucar.ma2.ArrayDouble$D2;

        $i3 = i0 + 2;

        $i2 = i1 + 1;

        specialinvoke $r2.<ucar.ma2.ArrayDouble$D2: void <init>(int,int)>($i3, $i2);

        i16 = 0;

     label1:
        if i16 >= i0 goto label4;

        i17 = 1;

     label2:
        if i17 >= i1 goto label3;

        $i14 = i17 - 1;

        $d12 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i16, $i14);

        $d13 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i16, i17);

        $d14 = $d12 + $d13;

        d15 = $d14 / 2.0;

        $i15 = i16 + 1;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>($i15, i17, d15);

        i17 = i17 + 1;

        goto label2;

     label3:
        $i7 = i16 + 1;

        $d2 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i16, 0);

        $i8 = i16 + 1;

        $d3 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i8, 1);

        $d4 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i16, 0);

        $d5 = $d3 - $d4;

        $d6 = $d2 - $d5;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>($i7, 0, $d6);

        $i10 = i16 + 1;

        $i9 = i1 - 1;

        $d7 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i16, $i9);

        $i12 = i16 + 1;

        $i11 = i1 - 1;

        $d8 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i12, $i11);

        $i13 = i1 - 1;

        $d9 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i16, $i13);

        $d10 = $d8 - $d9;

        $d11 = $d7 - $d10;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>($i10, i1, $d11);

        i16 = i16 + 1;

        goto label1;

     label4:
        i18 = 0;

     label5:
        if i18 >= i1 goto label6;

        $d1 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(0, i18);

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>(0, i18, $d1);

        i18 = i18 + 1;

        goto label5;

     label6:
        i19 = 0;

     label7:
        $i4 = i1 - 1;

        if i19 >= $i4 goto label8;

        $i6 = i0 + 1;

        $i5 = i0 - 1;

        $d0 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i5, i19);

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>($i6, i19, $d0);

        i19 = i19 + 1;

        goto label7;

     label8:
        return $r2;
    }

    public static ucar.ma2.ArrayDouble$D2 makeYEdgesRotated(ucar.ma2.ArrayDouble$D2)
    {
        int[] $r1;
        ucar.ma2.ArrayDouble$D2 r0, $r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, $d18, d19, d20, d21;

        r0 := @parameter0: ucar.ma2.ArrayDouble$D2;

        $r1 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: int[] getShape()>();

        i0 = $r1[0];

        i1 = $r1[1];

        $r2 = new ucar.ma2.ArrayDouble$D2;

        $i3 = i0 + 2;

        $i2 = i1 + 1;

        specialinvoke $r2.<ucar.ma2.ArrayDouble$D2: void <init>(int,int)>($i3, $i2);

        i17 = 0;

     label1:
        if i17 >= i0 goto label4;

        i18 = 1;

     label2:
        if i18 >= i1 goto label3;

        $i15 = i18 - 1;

        $d16 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i17, $i15);

        $d17 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i17, i18);

        $d18 = $d16 + $d17;

        d19 = $d18 / 2.0;

        $i16 = i17 + 1;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>($i16, i18, d19);

        i18 = i18 + 1;

        goto label2;

     label3:
        $i8 = i17 + 1;

        $d6 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i17, 0);

        $i9 = i17 + 1;

        $d7 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i9, 1);

        $d8 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i17, 0);

        $d9 = $d7 - $d8;

        $d10 = $d6 - $d9;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>($i8, 0, $d10);

        $i11 = i17 + 1;

        $i10 = i1 - 1;

        $d11 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i17, $i10);

        $i13 = i17 + 1;

        $i12 = i1 - 1;

        $d12 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i13, $i12);

        $i14 = i1 - 1;

        $d13 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(i17, $i14);

        $d14 = $d12 - $d13;

        $d15 = $d11 - $d14;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>($i11, i1, $d15);

        i17 = i17 + 1;

        goto label1;

     label4:
        i19 = 0;

     label5:
        if i19 >= i1 goto label6;

        $d3 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(0, i19);

        $d4 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>(2, i19);

        d20 = $d3 - $d4;

        $d5 = $d3 + d20;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>(0, i19, $d5);

        i19 = i19 + 1;

        goto label5;

     label6:
        i20 = 0;

     label7:
        $i4 = i1 - 1;

        if i20 >= $i4 goto label8;

        $i5 = i0 - 1;

        $d0 = virtualinvoke r0.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i5, i20);

        $i6 = i0 - 1;

        $d1 = virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: double get(int,int)>($i6, i20);

        d21 = $d0 - $d1;

        $i7 = i0 + 1;

        $d2 = $d0 + d21;

        virtualinvoke $r2.<ucar.ma2.ArrayDouble$D2: void set(int,int,double)>($i7, i20, $d2);

        i20 = i20 + 1;

        goto label7;

     label8:
        return $r2;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        <ucar.nc2.dataset.CoordinateAxis2D: boolean debug> = 0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lucar/nc2/dataset/CoordinateAxis2D;");

        <ucar.nc2.dataset.CoordinateAxis2D: org.slf4j.Logger log> = $r0;

        return;
    }
}
