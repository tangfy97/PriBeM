class org.apache.lucene.util.fst.FST$BytesWriter extends org.apache.lucene.store.DataOutput
{
    int posWrite;
    static final boolean $assertionsDisabled;
    final org.apache.lucene.util.fst.FST this$0;

    public void <init>(org.apache.lucene.util.fst.FST)
    {
        org.apache.lucene.util.fst.FST r1;
        org.apache.lucene.util.fst.FST$BytesWriter r0;

        r0 := @this: org.apache.lucene.util.fst.FST$BytesWriter;

        r1 := @parameter0: org.apache.lucene.util.fst.FST;

        r0.<org.apache.lucene.util.fst.FST$BytesWriter: org.apache.lucene.util.fst.FST this$0> = r1;

        specialinvoke r0.<org.apache.lucene.store.DataOutput: void <init>()>();

        r0.<org.apache.lucene.util.fst.FST$BytesWriter: int posWrite> = 1;

        return;
    }

    public void writeByte(byte)
    {
        byte[] $r2, $r4, $r6, $r13, $r18, $r19;
        java.lang.AssertionError $r7;
        byte b4;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8;
        java.lang.String $r15;
        org.apache.lucene.util.fst.FST$BytesWriter r0;
        boolean $z0;
        org.apache.lucene.util.fst.FST $r1, $r3, $r5, $r12, $r16, $r17;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r14;

        r0 := @this: org.apache.lucene.util.fst.FST$BytesWriter;

        b4 := @parameter0: byte;

        $r1 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: org.apache.lucene.util.fst.FST this$0>;

        $r2 = staticinvoke <org.apache.lucene.util.fst.FST: byte[] access$000(org.apache.lucene.util.fst.FST)>($r1);

        $i1 = lengthof $r2;

        $i0 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: int posWrite>;

        if $i1 != $i0 goto label1;

        $r17 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: org.apache.lucene.util.fst.FST this$0>;

        $r16 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: org.apache.lucene.util.fst.FST this$0>;

        $r18 = staticinvoke <org.apache.lucene.util.fst.FST: byte[] access$000(org.apache.lucene.util.fst.FST)>($r16);

        $r19 = staticinvoke <org.apache.lucene.util.ArrayUtil: byte[] grow(byte[])>($r18);

        staticinvoke <org.apache.lucene.util.fst.FST: byte[] access$002(org.apache.lucene.util.fst.FST,byte[])>($r17, $r19);

     label1:
        $z0 = <org.apache.lucene.util.fst.FST$BytesWriter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $i5 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: int posWrite>;

        $r5 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: org.apache.lucene.util.fst.FST this$0>;

        $r6 = staticinvoke <org.apache.lucene.util.fst.FST: byte[] access$000(org.apache.lucene.util.fst.FST)>($r5);

        $i6 = lengthof $r6;

        if $i5 < $i6 goto label2;

        $r7 = new java.lang.AssertionError;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("posWrite=");

        $i7 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: int posWrite>;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes.length=");

        $r12 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: org.apache.lucene.util.fst.FST this$0>;

        $r13 = staticinvoke <org.apache.lucene.util.fst.FST: byte[] access$000(org.apache.lucene.util.fst.FST)>($r12);

        $i8 = lengthof $r13;

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>($r15);

        throw $r7;

     label2:
        $r3 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: org.apache.lucene.util.fst.FST this$0>;

        $r4 = staticinvoke <org.apache.lucene.util.fst.FST: byte[] access$000(org.apache.lucene.util.fst.FST)>($r3);

        $i2 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: int posWrite>;

        $i3 = $i2 + 1;

        r0.<org.apache.lucene.util.fst.FST$BytesWriter: int posWrite> = $i3;

        $r4[$i2] = b4;

        return;
    }

    public void writeBytes(byte[], int, int)
    {
        byte[] $r3, $r4, r5, $r7;
        int i0, $i1, i2, i3, $i4, $i5, $i6;
        org.apache.lucene.util.fst.FST $r1, $r2, $r6;
        org.apache.lucene.util.fst.FST$BytesWriter r0;

        r0 := @this: org.apache.lucene.util.fst.FST$BytesWriter;

        r5 := @parameter0: byte[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: int posWrite>;

        i2 = $i1 + i0;

        $r2 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: org.apache.lucene.util.fst.FST this$0>;

        $r1 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: org.apache.lucene.util.fst.FST this$0>;

        $r3 = staticinvoke <org.apache.lucene.util.fst.FST: byte[] access$000(org.apache.lucene.util.fst.FST)>($r1);

        $r4 = staticinvoke <org.apache.lucene.util.ArrayUtil: byte[] grow(byte[],int)>($r3, i2);

        staticinvoke <org.apache.lucene.util.fst.FST: byte[] access$002(org.apache.lucene.util.fst.FST,byte[])>($r2, $r4);

        $r6 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: org.apache.lucene.util.fst.FST this$0>;

        $r7 = staticinvoke <org.apache.lucene.util.fst.FST: byte[] access$000(org.apache.lucene.util.fst.FST)>($r6);

        $i4 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: int posWrite>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, i3, $r7, $i4, i0);

        $i5 = r0.<org.apache.lucene.util.fst.FST$BytesWriter: int posWrite>;

        $i6 = $i5 + i0;

        r0.<org.apache.lucene.util.fst.FST$BytesWriter: int posWrite> = $i6;

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/apache/lucene/util/fst/FST;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.fst.FST$BytesWriter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
