public class org.apache.tika.parser.mp4.DirectFileReadDataSource extends java.lang.Object implements com.googlecode.mp4parser.DataSource
{
    private static final int TRANSFER_SIZE;
    private java.io.RandomAccessFile raf;

    public void <init>(java.io.File) throws java.io.IOException
    {
        java.io.RandomAccessFile $r1;
        org.apache.tika.parser.mp4.DirectFileReadDataSource r0;
        java.io.File r2;

        r0 := @this: org.apache.tika.parser.mp4.DirectFileReadDataSource;

        r2 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.io.RandomAccessFile;

        specialinvoke $r1.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>(r2, "r");

        r0.<org.apache.tika.parser.mp4.DirectFileReadDataSource: java.io.RandomAccessFile raf> = $r1;

        return;
    }

    public int read(java.nio.ByteBuffer) throws java.io.IOException
    {
        byte[] r1;
        java.io.RandomAccessFile $r3;
        java.nio.ByteBuffer r0;
        org.apache.tika.parser.mp4.DirectFileReadDataSource r2;
        int $i0, $i1, $i2, $i3, i4, i5, $i6, $i8;

        r2 := @this: org.apache.tika.parser.mp4.DirectFileReadDataSource;

        r0 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        i4 = 0;

        i5 = 0;

        r1 = newarray (byte)[8192];

     label1:
        if i4 >= $i0 goto label3;

        $i1 = $i0 - i4;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, 8192);

        $r3 = r2.<org.apache.tika.parser.mp4.DirectFileReadDataSource: java.io.RandomAccessFile raf>;

        $i3 = virtualinvoke $r3.<java.io.RandomAccessFile: int read(byte[],int,int)>(r1, 0, $i2);

        i5 = $i3;

        if $i3 >= 0 goto label2;

        goto label3;

     label2:
        i4 = i4 + $i3;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, 0, $i3);

        goto label1;

     label3:
        if i5 >= 0 goto label4;

        if i4 != 0 goto label4;

        $i8 = (int) -1;

        $i6 = $i8;

        goto label5;

     label4:
        $i6 = i4;

     label5:
        return $i6;
    }

    public int readAllInOnce(java.nio.ByteBuffer) throws java.io.IOException
    {
        byte[] r1;
        java.io.RandomAccessFile $r3;
        int $i0, $i1;
        java.nio.ByteBuffer r0;
        org.apache.tika.parser.mp4.DirectFileReadDataSource r2;

        r2 := @this: org.apache.tika.parser.mp4.DirectFileReadDataSource;

        r0 := @parameter0: java.nio.ByteBuffer;

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        r1 = newarray (byte)[$i0];

        $r3 = r2.<org.apache.tika.parser.mp4.DirectFileReadDataSource: java.io.RandomAccessFile raf>;

        $i1 = virtualinvoke $r3.<java.io.RandomAccessFile: int read(byte[])>(r1);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, 0, $i1);

        return $i1;
    }

    public long size() throws java.io.IOException
    {
        java.io.RandomAccessFile $r1;
        long $l0;
        org.apache.tika.parser.mp4.DirectFileReadDataSource r0;

        r0 := @this: org.apache.tika.parser.mp4.DirectFileReadDataSource;

        $r1 = r0.<org.apache.tika.parser.mp4.DirectFileReadDataSource: java.io.RandomAccessFile raf>;

        $l0 = virtualinvoke $r1.<java.io.RandomAccessFile: long length()>();

        return $l0;
    }

    public long position() throws java.io.IOException
    {
        java.io.RandomAccessFile $r1;
        long $l0;
        org.apache.tika.parser.mp4.DirectFileReadDataSource r0;

        r0 := @this: org.apache.tika.parser.mp4.DirectFileReadDataSource;

        $r1 = r0.<org.apache.tika.parser.mp4.DirectFileReadDataSource: java.io.RandomAccessFile raf>;

        $l0 = virtualinvoke $r1.<java.io.RandomAccessFile: long getFilePointer()>();

        return $l0;
    }

    public void position(long) throws java.io.IOException
    {
        java.io.RandomAccessFile $r1;
        long l0;
        org.apache.tika.parser.mp4.DirectFileReadDataSource r0;

        r0 := @this: org.apache.tika.parser.mp4.DirectFileReadDataSource;

        l0 := @parameter0: long;

        $r1 = r0.<org.apache.tika.parser.mp4.DirectFileReadDataSource: java.io.RandomAccessFile raf>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void seek(long)>(l0);

        return;
    }

    public long transferTo(long, long, java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        int $i2;
        java.nio.channels.WritableByteChannel r0;
        long l0, l1, $l3;
        org.apache.tika.parser.mp4.DirectFileReadDataSource r1;
        java.nio.ByteBuffer $r2;

        r1 := @this: org.apache.tika.parser.mp4.DirectFileReadDataSource;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        r0 := @parameter2: java.nio.channels.WritableByteChannel;

        $r2 = virtualinvoke r1.<org.apache.tika.parser.mp4.DirectFileReadDataSource: java.nio.ByteBuffer map(long,long)>(l0, l1);

        $i2 = interfaceinvoke r0.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r2);

        $l3 = (long) $i2;

        return $l3;
    }

    public java.nio.ByteBuffer map(long, long) throws java.io.IOException
    {
        java.io.RandomAccessFile $r1, $r3;
        byte[] r2;
        long l0, l1;
        org.apache.tika.parser.mp4.DirectFileReadDataSource r0;
        java.nio.ByteBuffer $r4;
        int $i2;

        r0 := @this: org.apache.tika.parser.mp4.DirectFileReadDataSource;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $r1 = r0.<org.apache.tika.parser.mp4.DirectFileReadDataSource: java.io.RandomAccessFile raf>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void seek(long)>(l0);

        $i2 = staticinvoke <com.googlecode.mp4parser.util.CastUtils: int l2i(long)>(l1);

        r2 = newarray (byte)[$i2];

        $r3 = r0.<org.apache.tika.parser.mp4.DirectFileReadDataSource: java.io.RandomAccessFile raf>;

        virtualinvoke $r3.<java.io.RandomAccessFile: void readFully(byte[])>(r2);

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r2);

        return $r4;
    }

    public void close() throws java.io.IOException
    {
        java.io.RandomAccessFile $r1;
        org.apache.tika.parser.mp4.DirectFileReadDataSource r0;

        r0 := @this: org.apache.tika.parser.mp4.DirectFileReadDataSource;

        $r1 = r0.<org.apache.tika.parser.mp4.DirectFileReadDataSource: java.io.RandomAccessFile raf>;

        virtualinvoke $r1.<java.io.RandomAccessFile: void close()>();

        return;
    }

    public static void <clinit>()
    {
        <org.apache.tika.parser.mp4.DirectFileReadDataSource: int TRANSFER_SIZE> = 8192;

        return;
    }
}
