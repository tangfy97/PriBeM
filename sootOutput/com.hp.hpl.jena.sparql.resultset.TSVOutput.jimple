public class com.hp.hpl.jena.sparql.resultset.TSVOutput extends com.hp.hpl.jena.sparql.resultset.OutputBase
{
    static java.lang.String NL;
    static java.lang.String SEP;
    static final byte[] headerBytes;
    static final byte[] yesBytes;
    static final byte[] noBytes;
    static final byte[] NLBytes;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.resultset.TSVOutput r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.TSVOutput;

        specialinvoke r0.<com.hp.hpl.jena.sparql.resultset.OutputBase: void <init>()>();

        return;
    }

    public void format(java.io.OutputStream, com.hp.hpl.jena.query.ResultSet)
    {
        org.apache.jena.atlas.io.AWriter $r2;
        org.apache.jena.riot.out.NodeFormatterTTL $r0;
        com.hp.hpl.jena.graph.Node $r12;
        com.hp.hpl.jena.sparql.resultset.TSVOutput r16;
        java.util.ArrayList $r5;
        int $i0;
        java.lang.String $r7, $r10, $r15, r17, r18, r19;
        boolean $z0, $z1, $z2;
        java.io.OutputStream r1;
        java.util.Iterator $r6, $r9;
        com.hp.hpl.jena.query.ResultSet r3;
        com.hp.hpl.jena.sparql.core.Var $r14, r20;
        java.util.List $r4;
        com.hp.hpl.jena.sparql.engine.binding.Binding $r8;
        java.lang.Object $r11, $r13;

        r16 := @this: com.hp.hpl.jena.sparql.resultset.TSVOutput;

        r1 := @parameter0: java.io.OutputStream;

        r3 := @parameter1: com.hp.hpl.jena.query.ResultSet;

        $r0 = new org.apache.jena.riot.out.NodeFormatterTTL;

        specialinvoke $r0.<org.apache.jena.riot.out.NodeFormatterTTL: void <init>(java.lang.String,org.apache.jena.riot.system.PrefixMap)>(null, null);

        $r2 = staticinvoke <org.apache.jena.atlas.io.IO: org.apache.jena.atlas.io.AWriter wrapUTF8(java.io.OutputStream)>(r1);

        r17 = null;

        $r4 = interfaceinvoke r3.<com.hp.hpl.jena.query.ResultSet: java.util.List getResultVars()>();

        $r5 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0);

        $r6 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label04;

        $r13 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r18 = (java.lang.String) $r13;

        if r17 == null goto label02;

        interfaceinvoke $r2.<org.apache.jena.atlas.io.AWriter: void write(java.lang.String)>(r17);

        goto label03;

     label02:
        r17 = <com.hp.hpl.jena.sparql.resultset.TSVOutput: java.lang.String SEP>;

     label03:
        $r14 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>(r18);

        $r15 = virtualinvoke $r14.<com.hp.hpl.jena.sparql.core.Var: java.lang.String toString()>();

        interfaceinvoke $r2.<org.apache.jena.atlas.io.AWriter: void write(java.lang.String)>($r15);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r14);

        goto label01;

     label04:
        $r7 = <com.hp.hpl.jena.sparql.resultset.TSVOutput: java.lang.String NL>;

        interfaceinvoke $r2.<org.apache.jena.atlas.io.AWriter: void write(java.lang.String)>($r7);

     label05:
        $z1 = interfaceinvoke r3.<com.hp.hpl.jena.query.ResultSet: boolean hasNext()>();

        if $z1 == 0 goto label10;

        r19 = null;

        $r8 = interfaceinvoke r3.<com.hp.hpl.jena.query.ResultSet: com.hp.hpl.jena.sparql.engine.binding.Binding nextBinding()>();

        $r9 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label06:
        $z2 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label09;

        $r11 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r20 = (com.hp.hpl.jena.sparql.core.Var) $r11;

        if r19 == null goto label07;

        interfaceinvoke $r2.<org.apache.jena.atlas.io.AWriter: void write(java.lang.String)>(r19);

     label07:
        r19 = <com.hp.hpl.jena.sparql.resultset.TSVOutput: java.lang.String SEP>;

        $r12 = interfaceinvoke $r8.<com.hp.hpl.jena.sparql.engine.binding.Binding: com.hp.hpl.jena.graph.Node get(com.hp.hpl.jena.sparql.core.Var)>(r20);

        if $r12 == null goto label08;

        virtualinvoke $r0.<org.apache.jena.riot.out.NodeFormatterTTL: void format(org.apache.jena.atlas.io.AWriter,com.hp.hpl.jena.graph.Node)>($r2, $r12);

     label08:
        goto label06;

     label09:
        $r10 = <com.hp.hpl.jena.sparql.resultset.TSVOutput: java.lang.String NL>;

        interfaceinvoke $r2.<org.apache.jena.atlas.io.AWriter: void write(java.lang.String)>($r10);

        goto label05;

     label10:
        interfaceinvoke $r2.<org.apache.jena.atlas.io.AWriter: void flush()>();

        return;
    }

    public void format(java.io.OutputStream, boolean)
    {
        java.io.OutputStream r0;
        byte[] $r1, $r2, $r3, $r4;
        java.io.IOException $r5;
        com.hp.hpl.jena.sparql.resultset.TSVOutput r7;
        com.hp.hpl.jena.sparql.ARQException $r6;
        boolean z0;

        r7 := @this: com.hp.hpl.jena.sparql.resultset.TSVOutput;

        r0 := @parameter0: java.io.OutputStream;

        z0 := @parameter1: boolean;

     label1:
        $r1 = <com.hp.hpl.jena.sparql.resultset.TSVOutput: byte[] headerBytes>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r1);

        if z0 == 0 goto label2;

        $r4 = <com.hp.hpl.jena.sparql.resultset.TSVOutput: byte[] yesBytes>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r4);

        goto label3;

     label2:
        $r2 = <com.hp.hpl.jena.sparql.resultset.TSVOutput: byte[] noBytes>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r2);

     label3:
        $r3 = <com.hp.hpl.jena.sparql.resultset.TSVOutput: byte[] NLBytes>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r3);

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        $r6 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.Throwable)>($r5);

        throw $r6;

     label6:
        return;

        catch java.io.IOException from label1 to label4 with label5;
    }

    static void <clinit>()
    {
        byte[] $r5, $r6, $r7, $r9;
        java.lang.StringBuilder $r0, $r1, $r3;
        java.lang.String $r2, $r4, $r8;

        <com.hp.hpl.jena.sparql.resultset.TSVOutput: java.lang.String NL> = "\n";

        <com.hp.hpl.jena.sparql.resultset.TSVOutput: java.lang.String SEP> = "\t";

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?_askResult");

        $r2 = <com.hp.hpl.jena.sparql.resultset.TSVOutput: java.lang.String NL>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: byte[] asUTF8bytes(java.lang.String)>($r4);

        <com.hp.hpl.jena.sparql.resultset.TSVOutput: byte[] headerBytes> = $r5;

        $r6 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: byte[] asUTF8bytes(java.lang.String)>("true");

        <com.hp.hpl.jena.sparql.resultset.TSVOutput: byte[] yesBytes> = $r6;

        $r7 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: byte[] asUTF8bytes(java.lang.String)>("false");

        <com.hp.hpl.jena.sparql.resultset.TSVOutput: byte[] noBytes> = $r7;

        $r8 = <com.hp.hpl.jena.sparql.resultset.TSVOutput: java.lang.String NL>;

        $r9 = staticinvoke <org.apache.jena.atlas.lib.StrUtils: byte[] asUTF8bytes(java.lang.String)>($r8);

        <com.hp.hpl.jena.sparql.resultset.TSVOutput: byte[] NLBytes> = $r9;

        return;
    }
}
