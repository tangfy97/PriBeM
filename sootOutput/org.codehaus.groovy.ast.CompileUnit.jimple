public class org.codehaus.groovy.ast.CompileUnit extends java.lang.Object
{
    private final java.util.List modules;
    private java.util.Map classes;
    private org.codehaus.groovy.control.CompilerConfiguration config;
    private groovy.lang.GroovyClassLoader classLoader;
    private java.security.CodeSource codeSource;
    private java.util.Map classesToCompile;
    private java.util.Map classNameToSource;

    public void <init>(groovy.lang.GroovyClassLoader, org.codehaus.groovy.control.CompilerConfiguration)
    {
        org.codehaus.groovy.ast.CompileUnit r0;
        org.codehaus.groovy.control.CompilerConfiguration r2;
        groovy.lang.GroovyClassLoader r1;

        r0 := @this: org.codehaus.groovy.ast.CompileUnit;

        r1 := @parameter0: groovy.lang.GroovyClassLoader;

        r2 := @parameter1: org.codehaus.groovy.control.CompilerConfiguration;

        specialinvoke r0.<org.codehaus.groovy.ast.CompileUnit: void <init>(groovy.lang.GroovyClassLoader,java.security.CodeSource,org.codehaus.groovy.control.CompilerConfiguration)>(r1, null, r2);

        return;
    }

    public void <init>(groovy.lang.GroovyClassLoader, java.security.CodeSource, org.codehaus.groovy.control.CompilerConfiguration)
    {
        java.util.HashMap $r2, $r3, $r4;
        org.codehaus.groovy.control.CompilerConfiguration r6;
        java.util.ArrayList $r1;
        org.codehaus.groovy.ast.CompileUnit r0;
        java.security.CodeSource r7;
        groovy.lang.GroovyClassLoader r5;

        r0 := @this: org.codehaus.groovy.ast.CompileUnit;

        r5 := @parameter0: groovy.lang.GroovyClassLoader;

        r7 := @parameter1: java.security.CodeSource;

        r6 := @parameter2: org.codehaus.groovy.control.CompilerConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.codehaus.groovy.ast.CompileUnit: java.util.List modules> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classes> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classesToCompile> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classNameToSource> = $r4;

        r0.<org.codehaus.groovy.ast.CompileUnit: groovy.lang.GroovyClassLoader classLoader> = r5;

        r0.<org.codehaus.groovy.ast.CompileUnit: org.codehaus.groovy.control.CompilerConfiguration config> = r6;

        r0.<org.codehaus.groovy.ast.CompileUnit: java.security.CodeSource codeSource> = r7;

        return;
    }

    public java.util.List getModules()
    {
        org.codehaus.groovy.ast.CompileUnit r0;
        java.util.List $r1;

        r0 := @this: org.codehaus.groovy.ast.CompileUnit;

        $r1 = r0.<org.codehaus.groovy.ast.CompileUnit: java.util.List modules>;

        return $r1;
    }

    public void addModule(org.codehaus.groovy.ast.ModuleNode)
    {
        java.util.List $r2, $r3;
        org.codehaus.groovy.ast.CompileUnit r1;
        org.codehaus.groovy.ast.ModuleNode r0;

        r1 := @this: org.codehaus.groovy.ast.CompileUnit;

        r0 := @parameter0: org.codehaus.groovy.ast.ModuleNode;

        if r0 != null goto label1;

        return;

     label1:
        $r2 = r1.<org.codehaus.groovy.ast.CompileUnit: java.util.List modules>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r0);

        virtualinvoke r0.<org.codehaus.groovy.ast.ModuleNode: void setUnit(org.codehaus.groovy.ast.CompileUnit)>(r1);

        $r3 = virtualinvoke r0.<org.codehaus.groovy.ast.ModuleNode: java.util.List getClasses()>();

        virtualinvoke r1.<org.codehaus.groovy.ast.CompileUnit: void addClasses(java.util.List)>($r3);

        return;
    }

    public org.codehaus.groovy.ast.ClassNode getClass(java.lang.String)
    {
        org.codehaus.groovy.ast.ClassNode r4, $r7;
        java.util.Map $r2, $r5;
        org.codehaus.groovy.ast.CompileUnit r0;
        java.lang.Object $r3, $r6;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.ast.CompileUnit;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classes>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (org.codehaus.groovy.ast.ClassNode) $r3;

        if r4 == null goto label1;

        return r4;

     label1:
        $r5 = r0.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classesToCompile>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r7 = (org.codehaus.groovy.ast.ClassNode) $r6;

        return $r7;
    }

    public java.util.List getClasses()
    {
        java.util.Iterator $r3;
        java.util.ArrayList $r0;
        org.codehaus.groovy.ast.ModuleNode r5;
        java.util.List $r2, $r6;
        org.codehaus.groovy.ast.CompileUnit r1;
        java.lang.Object $r4;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.ast.CompileUnit;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.codehaus.groovy.ast.CompileUnit: java.util.List modules>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (org.codehaus.groovy.ast.ModuleNode) $r4;

        $r6 = virtualinvoke r5.<org.codehaus.groovy.ast.ModuleNode: java.util.List getClasses()>();

        interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r6);

        goto label1;

     label2:
        return $r0;
    }

    public org.codehaus.groovy.control.CompilerConfiguration getConfig()
    {
        org.codehaus.groovy.ast.CompileUnit r0;
        org.codehaus.groovy.control.CompilerConfiguration $r1;

        r0 := @this: org.codehaus.groovy.ast.CompileUnit;

        $r1 = r0.<org.codehaus.groovy.ast.CompileUnit: org.codehaus.groovy.control.CompilerConfiguration config>;

        return $r1;
    }

    public groovy.lang.GroovyClassLoader getClassLoader()
    {
        org.codehaus.groovy.ast.CompileUnit r0;
        groovy.lang.GroovyClassLoader $r1;

        r0 := @this: org.codehaus.groovy.ast.CompileUnit;

        $r1 = r0.<org.codehaus.groovy.ast.CompileUnit: groovy.lang.GroovyClassLoader classLoader>;

        return $r1;
    }

    public java.security.CodeSource getCodeSource()
    {
        org.codehaus.groovy.ast.CompileUnit r0;
        java.security.CodeSource $r1;

        r0 := @this: org.codehaus.groovy.ast.CompileUnit;

        $r1 = r0.<org.codehaus.groovy.ast.CompileUnit: java.security.CodeSource codeSource>;

        return $r1;
    }

    void addClasses(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator $r1;
        org.codehaus.groovy.ast.ClassNode $r4;
        org.codehaus.groovy.ast.CompileUnit r2;
        java.lang.Object $r3;
        boolean $z0;

        r2 := @this: org.codehaus.groovy.ast.CompileUnit;

        r0 := @parameter0: java.util.List;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.codehaus.groovy.ast.ClassNode) $r3;

        virtualinvoke r2.<org.codehaus.groovy.ast.CompileUnit: void addClass(org.codehaus.groovy.ast.ClassNode)>($r4);

        goto label1;

     label2:
        return;
    }

    public void addClass(org.codehaus.groovy.ast.ClassNode)
    {
        org.codehaus.groovy.ast.ModuleNode $r9, $r11;
        java.util.Map $r3, $r6, $r8, $r49, $r50;
        boolean $z0, $z1, $z2;
        org.codehaus.groovy.control.messages.SyntaxErrorMessage $r47;
        java.lang.StringBuffer $r13, $r14, $r16, $r17, $r19, $r20, $r21, $r23, $r24, $r26, $r27, $r29, $r30, $r31, $r32, $r33, $r35, $r36, $r38, $r39, $r41, $r42, $r43;
        int $i0, $i1;
        java.lang.String $r1, $r15, $r18, $r22, $r25, $r28, $r34, $r37, $r40, r45;
        org.codehaus.groovy.control.ErrorCollector $r46;
        org.codehaus.groovy.control.SourceUnit $r10, $r12;
        org.codehaus.groovy.ast.ClassNode $r0, r5, r44, r51;
        org.codehaus.groovy.ast.CompileUnit r2;
        java.lang.Object $r4, $r7;
        org.codehaus.groovy.syntax.SyntaxException $r48;

        r2 := @this: org.codehaus.groovy.ast.CompileUnit;

        r44 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        $r0 = virtualinvoke r44.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ClassNode redirect()>();

        $r1 = virtualinvoke $r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r3 = r2.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classes>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r5 = (org.codehaus.groovy.ast.ClassNode) $r4;

        if r5 == null goto label4;

        if r5 == $r0 goto label4;

        $r9 = virtualinvoke $r0.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode getModule()>();

        $r10 = virtualinvoke $r9.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.control.SourceUnit getContext()>();

        $r11 = virtualinvoke r5.<org.codehaus.groovy.ast.ClassNode: org.codehaus.groovy.ast.ModuleNode getModule()>();

        $r12 = virtualinvoke $r11.<org.codehaus.groovy.ast.ModuleNode: org.codehaus.groovy.control.SourceUnit getContext()>();

        $r13 = new java.lang.StringBuffer;

        specialinvoke $r13.<java.lang.StringBuffer: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid duplicate class definition of class ");

        $r15 = virtualinvoke $r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.String toString()>();

        if $r10 != $r12 goto label2;

        $r31 = new java.lang.StringBuffer;

        specialinvoke $r31.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The source ");

        $r34 = virtualinvoke $r10.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        $r35 = virtualinvoke $r33.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" contains at last two defintions of the class ");

        $r37 = virtualinvoke $r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".\n");

        $r40 = virtualinvoke $r39.<java.lang.StringBuffer: java.lang.String toString()>();

        r45 = $r40;

        $z0 = virtualinvoke $r0.<org.codehaus.groovy.ast.ClassNode: boolean isScriptBody()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r5.<org.codehaus.groovy.ast.ClassNode: boolean isScriptBody()>();

        if $z1 == 0 goto label3;

     label1:
        $r41 = new java.lang.StringBuffer;

        specialinvoke $r41.<java.lang.StringBuffer: void <init>()>();

        $r42 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("One of the classes is a explicit generated class using the class statement, the other is a class generated from the script body based on the file name. Solutions are to change the file name or to change the class name.\n");

        r45 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.String toString()>();

        goto label3;

     label2:
        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("The sources ");

        $r22 = virtualinvoke $r10.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" and ");

        $r25 = virtualinvoke $r12.<org.codehaus.groovy.control.SourceUnit: java.lang.String getName()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" are containing both a class of the name ");

        $r28 = virtualinvoke $r0.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        $r29 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".\n");

        r45 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        $r46 = virtualinvoke $r10.<org.codehaus.groovy.control.SourceUnit: org.codehaus.groovy.control.ErrorCollector getErrorCollector()>();

        $r47 = new org.codehaus.groovy.control.messages.SyntaxErrorMessage;

        $r48 = new org.codehaus.groovy.syntax.SyntaxException;

        $i0 = virtualinvoke $r0.<org.codehaus.groovy.ast.ClassNode: int getLineNumber()>();

        $i1 = virtualinvoke $r0.<org.codehaus.groovy.ast.ClassNode: int getColumnNumber()>();

        specialinvoke $r48.<org.codehaus.groovy.syntax.SyntaxException: void <init>(java.lang.String,int,int)>(r45, $i0, $i1);

        specialinvoke $r47.<org.codehaus.groovy.control.messages.SyntaxErrorMessage: void <init>(org.codehaus.groovy.syntax.SyntaxException,org.codehaus.groovy.control.SourceUnit)>($r48, $r10);

        virtualinvoke $r46.<org.codehaus.groovy.control.ErrorCollector: void addErrorAndContinue(org.codehaus.groovy.control.messages.Message)>($r47);

     label4:
        $r49 = r2.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classes>;

        interfaceinvoke $r49.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r0);

        $r50 = r2.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classesToCompile>;

        $z2 = interfaceinvoke $r50.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z2 == 0 goto label5;

        $r6 = r2.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classesToCompile>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        r51 = (org.codehaus.groovy.ast.ClassNode) $r7;

        virtualinvoke r51.<org.codehaus.groovy.ast.ClassNode: void setRedirect(org.codehaus.groovy.ast.ClassNode)>($r0);

        $r8 = r2.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classesToCompile>;

        interfaceinvoke $r8.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

     label5:
        return;
    }

    public void addClassNodeToCompile(org.codehaus.groovy.ast.ClassNode, org.codehaus.groovy.control.SourceUnit)
    {
        org.codehaus.groovy.control.SourceUnit r6;
        org.codehaus.groovy.ast.ClassNode r1;
        java.util.Map $r2, $r4;
        org.codehaus.groovy.ast.CompileUnit r0;
        java.lang.String $r3, $r5;

        r0 := @this: org.codehaus.groovy.ast.CompileUnit;

        r1 := @parameter0: org.codehaus.groovy.ast.ClassNode;

        r6 := @parameter1: org.codehaus.groovy.control.SourceUnit;

        $r2 = r0.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classesToCompile>;

        $r3 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        $r4 = r0.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classNameToSource>;

        $r5 = virtualinvoke r1.<org.codehaus.groovy.ast.ClassNode: java.lang.String getName()>();

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r6);

        return;
    }

    public org.codehaus.groovy.control.SourceUnit getScriptSourceLocation(java.lang.String)
    {
        org.codehaus.groovy.control.SourceUnit $r4;
        java.util.Map $r2;
        org.codehaus.groovy.ast.CompileUnit r0;
        java.lang.Object $r3;
        java.lang.String r1;

        r0 := @this: org.codehaus.groovy.ast.CompileUnit;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classNameToSource>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (org.codehaus.groovy.control.SourceUnit) $r3;

        return $r4;
    }

    public boolean hasClassNodeToCompile()
    {
        java.util.Map $r1;
        org.codehaus.groovy.ast.CompileUnit r0;
        boolean $z0, $z1;

        r0 := @this: org.codehaus.groovy.ast.CompileUnit;

        $r1 = r0.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classesToCompile>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public java.util.Iterator iterateClassNodeToCompile()
    {
        java.util.Iterator $r3;
        java.util.Map $r1;
        java.util.Set $r2;
        org.codehaus.groovy.ast.CompileUnit r0;

        r0 := @this: org.codehaus.groovy.ast.CompileUnit;

        $r1 = r0.<org.codehaus.groovy.ast.CompileUnit: java.util.Map classesToCompile>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

        return $r3;
    }
}
