public class org.apache.cxf.jaxrs.provider.DataBindingJSONProvider extends org.apache.cxf.jaxrs.provider.DataBindingProvider
{
    private java.util.List arrayKeys;
    private boolean serializeAsArray;
    private java.util.concurrent.ConcurrentHashMap namespaceMap;
    private boolean writeXsiType;
    private boolean readXsiType;
    private boolean dropRootElement;
    private boolean ignoreMixedContent;
    private boolean ignoreNamespaces;

    public void <init>()
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.cxf.jaxrs.provider.DataBindingJSONProvider r0;

        r0 := @this: org.apache.cxf.jaxrs.provider.DataBindingJSONProvider;

        specialinvoke r0.<org.apache.cxf.jaxrs.provider.DataBindingProvider: void <init>()>();

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap> = $r1;

        r0.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean writeXsiType> = 1;

        r0.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean readXsiType> = 1;

        return;
    }

    public void setIgnoreNamespaces(boolean)
    {
        org.apache.cxf.jaxrs.provider.DataBindingJSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.DataBindingJSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean ignoreNamespaces> = z0;

        return;
    }

    public void setDropRootElement(boolean)
    {
        org.apache.cxf.jaxrs.provider.DataBindingJSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.DataBindingJSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean dropRootElement> = z0;

        return;
    }

    public void setWriteXsiType(boolean)
    {
        org.apache.cxf.jaxrs.provider.DataBindingJSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.DataBindingJSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean writeXsiType> = z0;

        return;
    }

    public void setReadXsiType(boolean)
    {
        org.apache.cxf.jaxrs.provider.DataBindingJSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.DataBindingJSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean readXsiType> = z0;

        return;
    }

    public void setArrayKeys(java.util.List)
    {
        org.apache.cxf.jaxrs.provider.DataBindingJSONProvider r0;
        java.util.List r1;

        r0 := @this: org.apache.cxf.jaxrs.provider.DataBindingJSONProvider;

        r1 := @parameter0: java.util.List;

        r0.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: java.util.List arrayKeys> = r1;

        return;
    }

    public void setSerializeAsArray(boolean)
    {
        org.apache.cxf.jaxrs.provider.DataBindingJSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.DataBindingJSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean serializeAsArray> = z0;

        return;
    }

    public boolean isReadable(java.lang.Class, java.lang.reflect.Type, java.lang.'annotation'.Annotation[], javax.ws.rs.core.MediaType)
    {
        javax.ws.rs.core.MediaType r4;
        java.lang.reflect.Type r2;
        org.apache.cxf.jaxrs.provider.DataBindingJSONProvider r0;
        java.lang.Class r1;
        java.lang.'annotation'.Annotation[] r3;

        r0 := @this: org.apache.cxf.jaxrs.provider.DataBindingJSONProvider;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Type;

        r3 := @parameter2: java.lang.'annotation'.Annotation[];

        r4 := @parameter3: javax.ws.rs.core.MediaType;

        return 1;
    }

    public void setNamespaceMap(java.util.Map)
    {
        java.util.concurrent.ConcurrentHashMap $r1;
        org.apache.cxf.jaxrs.provider.DataBindingJSONProvider r0;
        java.util.Map r2;

        r0 := @this: org.apache.cxf.jaxrs.provider.DataBindingJSONProvider;

        r2 := @parameter0: java.util.Map;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>(java.util.Map)>(r2);

        r0.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap> = $r1;

        return;
    }

    protected javax.xml.stream.XMLStreamWriter createWriter(java.lang.Class, java.lang.reflect.Type, java.io.OutputStream) throws java.lang.Exception
    {
        org.codehaus.jettison.mapped.Configuration $r7;
        org.apache.cxf.jaxrs.provider.DataBindingJSONProvider r1;
        javax.xml.stream.XMLStreamWriter $r10, $r11, $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.io.OutputStream r4;
        java.util.concurrent.ConcurrentHashMap $r6;
        java.util.List $r9;
        java.lang.reflect.Type r2;
        java.lang.Class r0, $r3;
        javax.xml.namespace.QName r5, $r8;

        r1 := @this: org.apache.cxf.jaxrs.provider.DataBindingJSONProvider;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Type;

        r4 := @parameter2: java.io.OutputStream;

        $z0 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedCollectionOrArray(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        r5 = specialinvoke r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: javax.xml.namespace.QName getQName(java.lang.Class)>(r0);

        goto label2;

     label1:
        $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type)>(r2);

        r5 = specialinvoke r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: javax.xml.namespace.QName getQName(java.lang.Class)>($r3);

     label2:
        $r6 = r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        $z1 = r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean writeXsiType>;

        if $z1 == 0 goto label3;

        $z3 = r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean ignoreNamespaces>;

        if $z3 != 0 goto label3;

        $z4 = 1;

        goto label4;

     label3:
        $z4 = 0;

     label4:
        $r7 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: org.codehaus.jettison.mapped.Configuration createConfiguration(java.util.concurrent.ConcurrentHashMap,boolean,boolean,org.codehaus.jettison.mapped.TypeConverter)>($r6, $z4, 0, null);

        $r8 = r5;

        $z5 = r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean writeXsiType>;

        if $z5 == 0 goto label5;

        $z2 = r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean ignoreNamespaces>;

        if $z2 != 0 goto label5;

        $z6 = 1;

        goto label6;

     label5:
        $z6 = 0;

     label6:
        $z7 = r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean serializeAsArray>;

        $r9 = r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: java.util.List arrayKeys>;

        $z8 = r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean dropRootElement>;

        $r10 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: javax.xml.stream.XMLStreamWriter createStreamWriter(java.io.OutputStream,javax.xml.namespace.QName,boolean,org.codehaus.jettison.mapped.Configuration,boolean,java.util.List,boolean)>(r4, $r8, $z6, $r7, $z7, $r9, $z8);

        $z9 = r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean ignoreMixedContent>;

        $r11 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: javax.xml.stream.XMLStreamWriter createIgnoreMixedContentWriterIfNeeded(javax.xml.stream.XMLStreamWriter,boolean)>($r10, $z9);

        $z10 = r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean ignoreNamespaces>;

        $r12 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: javax.xml.stream.XMLStreamWriter createIgnoreNsWriterIfNeeded(javax.xml.stream.XMLStreamWriter,boolean)>($r11, $z10);

        return $r12;
    }

    protected void writeToWriter(javax.xml.stream.XMLStreamWriter, java.lang.Object) throws java.lang.Exception
    {
        org.apache.cxf.jaxrs.provider.DataBindingJSONProvider r1;
        javax.xml.stream.XMLStreamWriter r0;
        java.lang.Object r2;

        r1 := @this: org.apache.cxf.jaxrs.provider.DataBindingJSONProvider;

        r0 := @parameter0: javax.xml.stream.XMLStreamWriter;

        r2 := @parameter1: java.lang.Object;

        interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: void writeStartDocument()>();

        specialinvoke r1.<org.apache.cxf.jaxrs.provider.DataBindingProvider: void writeToWriter(javax.xml.stream.XMLStreamWriter,java.lang.Object)>(r0, r2);

        interfaceinvoke r0.<javax.xml.stream.XMLStreamWriter: void writeEndDocument()>();

        return;
    }

    protected javax.xml.stream.XMLStreamReader createReader(java.lang.Class, java.lang.reflect.Type, java.io.InputStream) throws java.lang.Exception
    {
        java.util.concurrent.ConcurrentHashMap $r5;
        java.lang.reflect.Type r2;
        javax.xml.stream.XMLStreamReader $r6;
        org.apache.cxf.jaxrs.provider.DataBindingJSONProvider r1;
        java.lang.Class r0, $r3;
        boolean $z0, $z1;
        java.io.InputStream r4;

        r1 := @this: org.apache.cxf.jaxrs.provider.DataBindingJSONProvider;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.Type;

        r4 := @parameter2: java.io.InputStream;

        $z0 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: boolean isSupportedCollectionOrArray(java.lang.Class)>(r0);

        if $z0 != 0 goto label1;

        specialinvoke r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: javax.xml.namespace.QName getQName(java.lang.Class)>(r0);

        goto label2;

     label1:
        $r3 = staticinvoke <org.apache.cxf.jaxrs.utils.InjectionUtils: java.lang.Class getActualType(java.lang.reflect.Type)>(r2);

        specialinvoke r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: javax.xml.namespace.QName getQName(java.lang.Class)>($r3);

     label2:
        $z1 = r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean readXsiType>;

        $r5 = r1.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        $r6 = staticinvoke <org.apache.cxf.jaxrs.provider.JSONUtils: javax.xml.stream.XMLStreamReader createStreamReader(java.io.InputStream,boolean,java.util.concurrent.ConcurrentHashMap)>(r4, $z1, $r5);

        return $r6;
    }

    private javax.xml.namespace.QName getQName(java.lang.Class)
    {
        java.util.concurrent.ConcurrentHashMap $r3;
        org.apache.cxf.jaxrs.provider.DataBindingJSONProvider r2;
        java.lang.Class r0;
        javax.xml.namespace.QName $r1;
        java.lang.String $r4;

        r2 := @this: org.apache.cxf.jaxrs.provider.DataBindingJSONProvider;

        r0 := @parameter0: java.lang.Class;

        $r1 = staticinvoke <org.apache.cxf.jaxrs.utils.JAXRSUtils: javax.xml.namespace.QName getClassQName(java.lang.Class)>(r0);

        $r3 = r2.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: java.util.concurrent.ConcurrentHashMap namespaceMap>;

        $r4 = virtualinvoke $r1.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>();

        virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r4, "ns1");

        return $r1;
    }

    public void setIgnoreMixedContent(boolean)
    {
        org.apache.cxf.jaxrs.provider.DataBindingJSONProvider r0;
        boolean z0;

        r0 := @this: org.apache.cxf.jaxrs.provider.DataBindingJSONProvider;

        z0 := @parameter0: boolean;

        r0.<org.apache.cxf.jaxrs.provider.DataBindingJSONProvider: boolean ignoreMixedContent> = z0;

        return;
    }
}
