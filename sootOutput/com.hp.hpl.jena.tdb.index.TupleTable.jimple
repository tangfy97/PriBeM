public class com.hp.hpl.jena.tdb.index.TupleTable extends java.lang.Object implements org.apache.jena.atlas.lib.Sync, org.apache.jena.atlas.lib.Closeable
{
    private static org.slf4j.Logger log;
    private final com.hp.hpl.jena.tdb.index.TupleIndex[] indexes;
    private final com.hp.hpl.jena.tdb.index.TupleIndex scanAllIndex;
    private final int tupleLen;
    private boolean syncNeeded;

    public void <init>(int, com.hp.hpl.jena.tdb.index.TupleIndex[])
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] r1;
        com.hp.hpl.jena.tdb.index.TupleTable r0;
        int i0, i1, $i2, i3;
        java.lang.String $r8, $r10;
        com.hp.hpl.jena.tdb.TDBException $r5, $r11;
        com.hp.hpl.jena.tdb.index.TupleIndex $r2, $r3, r4;
        java.lang.StringBuilder $r6, $r7, $r9;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        i0 := @parameter0: int;

        r1 := @parameter1: com.hp.hpl.jena.tdb.index.TupleIndex[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.tdb.index.TupleTable: boolean syncNeeded> = 0;

        r0.<com.hp.hpl.jena.tdb.index.TupleTable: int tupleLen> = i0;

        r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes> = r1;

        $r2 = r1[0];

        if $r2 != null goto label1;

        $r11 = new com.hp.hpl.jena.tdb.TDBException;

        specialinvoke $r11.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>("TupleTable: no primary index");

        throw $r11;

     label1:
        i1 = lengthof r1;

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        r4 = r1[i3];

        if r4 == null goto label3;

        $i2 = interfaceinvoke r4.<com.hp.hpl.jena.tdb.index.TupleIndex: int getTupleLength()>();

        if $i2 == i0 goto label3;

        $r5 = new com.hp.hpl.jena.tdb.TDBException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incompatible index: ");

        $r8 = interfaceinvoke r4.<com.hp.hpl.jena.tdb.index.TupleIndex: java.lang.String getMapping()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $r3 = staticinvoke <com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex chooseScanAllIndex(int,com.hp.hpl.jena.tdb.index.TupleIndex[])>(i0, r1);

        r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex scanAllIndex> = $r3;

        return;
    }

    private static com.hp.hpl.jena.tdb.index.TupleIndex chooseScanAllIndex(int, com.hp.hpl.jena.tdb.index.TupleIndex[])
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] r0;
        org.slf4j.Logger $r1;
        com.hp.hpl.jena.tdb.index.TupleIndex $r2, $r5, r6, r7;
        int i0, i1, i2, i3, i4;
        java.lang.String $r3, $r4;
        boolean $z0, $z1;

        i0 := @parameter0: int;

        r0 := @parameter1: com.hp.hpl.jena.tdb.index.TupleIndex[];

        if i0 == 4 goto label1;

        $r5 = r0[0];

        return $r5;

     label1:
        i1 = lengthof r0;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        r6 = r0[i2];

        $r4 = interfaceinvoke r6.<com.hp.hpl.jena.tdb.index.TupleIndex: java.lang.String getName()>();

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("SPOG");

        if $z1 == 0 goto label3;

        return r6;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        i3 = lengthof r0;

        i4 = 0;

     label5:
        if i4 >= i3 goto label7;

        r7 = r0[i4];

        $r3 = interfaceinvoke r7.<com.hp.hpl.jena.tdb.index.TupleIndex: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean endsWith(java.lang.String)>("G");

        if $z0 == 0 goto label6;

        return r7;

     label6:
        i4 = i4 + 1;

        goto label5;

     label7:
        $r1 = <com.hp.hpl.jena.tdb.sys.SystemTDB: org.slf4j.Logger errlog>;

        staticinvoke <org.apache.jena.atlas.logging.Log: void warn(java.lang.Object,java.lang.String)>($r1, "Did not find a ???G index for full scans");

        $r2 = r0[0];

        return $r2;
    }

    public boolean add(org.apache.jena.atlas.lib.Tuple)
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] $r2, $r3, $r5, $r9;
        java.lang.Object[] $r8, $r14;
        org.apache.jena.atlas.lib.Tuple r1;
        java.lang.Integer $r15, $r16;
        com.hp.hpl.jena.tdb.index.TupleTable r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r11, $r12, $r17;
        boolean $z0;
        com.hp.hpl.jena.tdb.TDBException $r7, $r13;
        com.hp.hpl.jena.tdb.index.TupleIndex $r4, $r6, $r10;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        r1 := @parameter0: org.apache.jena.atlas.lib.Tuple;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: int tupleLen>;

        $i1 = virtualinvoke r1.<org.apache.jena.atlas.lib.Tuple: int size()>();

        if $i0 == $i1 goto label1;

        $r13 = new com.hp.hpl.jena.tdb.TDBException;

        $r14 = newarray (java.lang.Object)[2];

        $i3 = virtualinvoke r1.<org.apache.jena.atlas.lib.Tuple: int size()>();

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r14[0] = $r15;

        $i4 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: int tupleLen>;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r14[1] = $r16;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Mismatch: inserting tuple of length %d into a table of tuples of length %d", $r14);

        specialinvoke $r13.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r17);

        throw $r13;

     label1:
        i5 = 0;

     label2:
        $r2 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        $i2 = lengthof $r2;

        if i5 >= $i2 goto label7;

        $r3 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        $r4 = $r3[i5];

        if $r4 != null goto label3;

        goto label6;

     label3:
        $r5 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        $r6 = $r5[i5];

        $z0 = interfaceinvoke $r6.<com.hp.hpl.jena.tdb.index.TupleIndex: boolean add(org.apache.jena.atlas.lib.Tuple)>(r1);

        if $z0 != 0 goto label5;

        if i5 != 0 goto label4;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.TupleTable: void duplicate(org.apache.jena.atlas.lib.Tuple)>(r1);

        return 0;

     label4:
        virtualinvoke r0.<com.hp.hpl.jena.tdb.index.TupleTable: void unexpectedDuplicate(org.apache.jena.atlas.lib.Tuple,int)>(r1, i5);

        $r7 = new com.hp.hpl.jena.tdb.TDBException;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        $r10 = $r9[i5];

        $r11 = interfaceinvoke $r10.<com.hp.hpl.jena.tdb.index.TupleIndex: java.lang.String getMapping()>();

        $r8[0] = $r11;

        $r8[1] = r1;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Secondary index duplicate: %s -> %s", $r8);

        specialinvoke $r7.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r12);

        throw $r7;

     label5:
        r0.<com.hp.hpl.jena.tdb.index.TupleTable: boolean syncNeeded> = 1;

     label6:
        i5 = i5 + 1;

        goto label2;

     label7:
        return 1;
    }

    protected void duplicate(org.apache.jena.atlas.lib.Tuple)
    {
        com.hp.hpl.jena.tdb.index.TupleTable r0;
        org.apache.jena.atlas.lib.Tuple r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        r1 := @parameter0: org.apache.jena.atlas.lib.Tuple;

        return;
    }

    protected void unexpectedDuplicate(org.apache.jena.atlas.lib.Tuple, int)
    {
        int i0;
        com.hp.hpl.jena.tdb.index.TupleTable r0;
        org.apache.jena.atlas.lib.Tuple r1;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        r1 := @parameter0: org.apache.jena.atlas.lib.Tuple;

        i0 := @parameter1: int;

        return;
    }

    public boolean delete(org.apache.jena.atlas.lib.Tuple)
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] $r2, $r3, $r5;
        java.lang.Object[] $r8;
        org.apache.jena.atlas.lib.Tuple r1;
        java.lang.Integer $r9, $r10;
        com.hp.hpl.jena.tdb.index.TupleTable r0;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r11;
        boolean $z0, z1;
        com.hp.hpl.jena.tdb.TDBException $r7;
        com.hp.hpl.jena.tdb.index.TupleIndex $r4, $r6;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        r1 := @parameter0: org.apache.jena.atlas.lib.Tuple;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: int tupleLen>;

        $i1 = virtualinvoke r1.<org.apache.jena.atlas.lib.Tuple: int size()>();

        if $i0 == $i1 goto label1;

        $r7 = new com.hp.hpl.jena.tdb.TDBException;

        $r8 = newarray (java.lang.Object)[2];

        $i3 = virtualinvoke r1.<org.apache.jena.atlas.lib.Tuple: int size()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r8[0] = $r9;

        $i4 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: int tupleLen>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r8[1] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Mismatch: deleting tuple of length %d from a table of tuples of length %d", $r8);

        specialinvoke $r7.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label1:
        z1 = 0;

        i5 = 0;

     label2:
        $r2 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        $i2 = lengthof $r2;

        if i5 >= $i2 goto label5;

        $r3 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        $r4 = $r3[i5];

        if $r4 != null goto label3;

        goto label4;

     label3:
        $r5 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        $r6 = $r5[i5];

        $z0 = interfaceinvoke $r6.<com.hp.hpl.jena.tdb.index.TupleIndex: boolean delete(org.apache.jena.atlas.lib.Tuple)>(r1);

        z1 = $z0;

        if $z0 == 0 goto label4;

        r0.<com.hp.hpl.jena.tdb.index.TupleTable: boolean syncNeeded> = 1;

     label4:
        i5 = i5 + 1;

        goto label2;

     label5:
        return z1;
    }

    public java.util.Iterator find(org.apache.jena.atlas.lib.Tuple)
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] $r2, $r4, $r5;
        java.lang.Object[] $r11;
        org.apache.jena.atlas.lib.Tuple r1;
        java.lang.Integer $r12, $r13;
        com.hp.hpl.jena.tdb.index.TupleTable r0;
        com.hp.hpl.jena.tdb.store.NodeId r15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10;
        java.lang.String $r14;
        boolean $z0;
        com.hp.hpl.jena.tdb.TDBException $r10;
        java.util.Iterator $r3, $r8;
        com.hp.hpl.jena.tdb.index.TupleIndex r6, $r7, r16;
        java.lang.Object $r9;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        r1 := @parameter0: org.apache.jena.atlas.lib.Tuple;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: int tupleLen>;

        $i1 = virtualinvoke r1.<org.apache.jena.atlas.lib.Tuple: int size()>();

        if $i0 == $i1 goto label1;

        $r10 = new com.hp.hpl.jena.tdb.TDBException;

        $r11 = newarray (java.lang.Object)[2];

        $i5 = virtualinvoke r1.<org.apache.jena.atlas.lib.Tuple: int size()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r11[0] = $r12;

        $i6 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: int tupleLen>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r11[1] = $r13;

        $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Mismatch: finding tuple of length %d in a table of tuples of length %d", $r11);

        specialinvoke $r10.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r14);

        throw $r10;

     label1:
        i7 = 0;

        i8 = 0;

     label2:
        $i2 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: int tupleLen>;

        if i8 >= $i2 goto label4;

        $r9 = virtualinvoke r1.<org.apache.jena.atlas.lib.Tuple: java.lang.Object get(int)>(i8);

        r15 = (com.hp.hpl.jena.tdb.store.NodeId) $r9;

        $z0 = staticinvoke <com.hp.hpl.jena.tdb.store.NodeId: boolean isAny(com.hp.hpl.jena.tdb.store.NodeId)>(r15);

        if $z0 != 0 goto label3;

        i7 = i7 + 1;

     label3:
        i8 = i8 + 1;

        goto label2;

     label4:
        if i7 != 0 goto label5;

        $r7 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex scanAllIndex>;

        $r8 = interfaceinvoke $r7.<com.hp.hpl.jena.tdb.index.TupleIndex: java.util.Iterator all()>();

        return $r8;

     label5:
        i9 = 0;

        r16 = null;

        i10 = 0;

     label6:
        $r2 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        $i3 = lengthof $r2;

        if i10 >= $i3 goto label8;

        $r5 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        r6 = $r5[i10];

        if r6 == null goto label7;

        $i4 = interfaceinvoke r6.<com.hp.hpl.jena.tdb.index.TupleIndex: int weight(org.apache.jena.atlas.lib.Tuple)>(r1);

        if $i4 <= i9 goto label7;

        i9 = $i4;

        r16 = r6;

     label7:
        i10 = i10 + 1;

        goto label6;

     label8:
        if r16 != null goto label9;

        $r4 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        r16 = $r4[0];

     label9:
        $r3 = interfaceinvoke r16.<com.hp.hpl.jena.tdb.index.TupleIndex: java.util.Iterator find(org.apache.jena.atlas.lib.Tuple)>(r1);

        return $r3;
    }

    public final void close()
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] r1;
        com.hp.hpl.jena.tdb.index.TupleTable r0;
        int i0, i1;
        com.hp.hpl.jena.tdb.index.TupleIndex r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        r1 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        interfaceinvoke r2.<com.hp.hpl.jena.tdb.index.TupleIndex: void close()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void sync()
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] r1;
        com.hp.hpl.jena.tdb.index.TupleTable r0;
        int i0, i1;
        com.hp.hpl.jena.tdb.index.TupleIndex r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        $z0 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: boolean syncNeeded>;

        if $z0 == 0 goto label4;

        r1 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        interfaceinvoke r2.<com.hp.hpl.jena.tdb.index.TupleIndex: void sync()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r0.<com.hp.hpl.jena.tdb.index.TupleTable: boolean syncNeeded> = 0;

     label4:
        return;
    }

    public boolean isEmpty()
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] $r1;
        com.hp.hpl.jena.tdb.index.TupleTable r0;
        com.hp.hpl.jena.tdb.index.TupleIndex $r2;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        $r2 = $r1[0];

        $z0 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.index.TupleIndex: boolean isEmpty()>();

        return $z0;
    }

    public void clear()
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] r1;
        com.hp.hpl.jena.tdb.index.TupleTable r0;
        int i0, i1;
        com.hp.hpl.jena.tdb.index.TupleIndex r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        r1 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r2 = r1[i1];

        if r2 == null goto label2;

        interfaceinvoke r2.<com.hp.hpl.jena.tdb.index.TupleIndex: void clear()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        r0.<com.hp.hpl.jena.tdb.index.TupleTable: boolean syncNeeded> = 1;

        return;
    }

    public long size()
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] $r1;
        com.hp.hpl.jena.tdb.index.TupleTable r0;
        long $l0;
        com.hp.hpl.jena.tdb.index.TupleIndex $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        $r2 = $r1[0];

        $l0 = interfaceinvoke $r2.<com.hp.hpl.jena.tdb.index.TupleIndex: long size()>();

        return $l0;
    }

    public com.hp.hpl.jena.tdb.index.TupleIndex getIndex(int)
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] $r1;
        com.hp.hpl.jena.tdb.index.TupleTable r0;
        int i0;
        com.hp.hpl.jena.tdb.index.TupleIndex $r2;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        i0 := @parameter0: int;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        $r2 = $r1[i0];

        return $r2;
    }

    public com.hp.hpl.jena.tdb.index.TupleIndex[] getIndexes()
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] $r1;
        com.hp.hpl.jena.tdb.index.TupleTable r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        return $r1;
    }

    public int getTupleLen()
    {
        int $i0;
        com.hp.hpl.jena.tdb.index.TupleTable r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        $i0 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: int tupleLen>;

        return $i0;
    }

    public void setTupleIndex(int, com.hp.hpl.jena.tdb.index.TupleIndex)
    {
        com.hp.hpl.jena.tdb.index.TupleIndex[] $r2;
        com.hp.hpl.jena.tdb.TDBException $r3;
        com.hp.hpl.jena.tdb.index.TupleIndex r0;
        com.hp.hpl.jena.tdb.index.TupleTable r1;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r4, $r5, $r7;
        java.lang.String $r6, $r8;

        r1 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        i0 := @parameter0: int;

        r0 := @parameter1: com.hp.hpl.jena.tdb.index.TupleIndex;

        if r0 == null goto label1;

        $i1 = interfaceinvoke r0.<com.hp.hpl.jena.tdb.index.TupleIndex: int getTupleLength()>();

        $i2 = r1.<com.hp.hpl.jena.tdb.index.TupleTable: int tupleLen>;

        if $i1 == $i2 goto label1;

        $r3 = new com.hp.hpl.jena.tdb.TDBException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Incompatible index: ");

        $r6 = interfaceinvoke r0.<com.hp.hpl.jena.tdb.index.TupleIndex: java.lang.String getMapping()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<com.hp.hpl.jena.tdb.TDBException: void <init>(java.lang.String)>($r8);

        throw $r3;

     label1:
        $r2 = r1.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        $r2[i0] = r0;

        return;
    }

    public int numIndexes()
    {
        int $i0;
        com.hp.hpl.jena.tdb.index.TupleIndex[] $r1;
        com.hp.hpl.jena.tdb.index.TupleTable r0;

        r0 := @this: com.hp.hpl.jena.tdb.index.TupleTable;

        $r1 = r0.<com.hp.hpl.jena.tdb.index.TupleTable: com.hp.hpl.jena.tdb.index.TupleIndex[] indexes>;

        $i0 = lengthof $r1;

        return $i0;
    }

    static void <clinit>()
    {
        org.slf4j.Logger $r0;

        $r0 = staticinvoke <org.slf4j.LoggerFactory: org.slf4j.Logger getLogger(java.lang.Class)>(class "Lcom/hp/hpl/jena/tdb/index/TupleTable;");

        <com.hp.hpl.jena.tdb.index.TupleTable: org.slf4j.Logger log> = $r0;

        return;
    }
}
