public class org.springframework.scheduling.timer.TimerFactoryBean extends java.lang.Object implements org.springframework.beans.factory.FactoryBean, org.springframework.beans.factory.BeanNameAware, org.springframework.beans.factory.InitializingBean, org.springframework.beans.factory.DisposableBean
{
    protected final org.apache.commons.logging.Log logger;
    private org.springframework.scheduling.timer.ScheduledTimerTask[] scheduledTimerTasks;
    private boolean daemon;
    private java.lang.String beanName;
    private java.util.Timer timer;

    public void <init>()
    {
        java.lang.Class $r1;
        org.apache.commons.logging.Log $r2;
        org.springframework.scheduling.timer.TimerFactoryBean r0;

        r0 := @this: org.springframework.scheduling.timer.TimerFactoryBean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>($r1);

        r0.<org.springframework.scheduling.timer.TimerFactoryBean: org.apache.commons.logging.Log logger> = $r2;

        r0.<org.springframework.scheduling.timer.TimerFactoryBean: boolean daemon> = 0;

        return;
    }

    public void setScheduledTimerTasks(org.springframework.scheduling.timer.ScheduledTimerTask[])
    {
        org.springframework.scheduling.timer.TimerFactoryBean r0;
        org.springframework.scheduling.timer.ScheduledTimerTask[] r1;

        r0 := @this: org.springframework.scheduling.timer.TimerFactoryBean;

        r1 := @parameter0: org.springframework.scheduling.timer.ScheduledTimerTask[];

        r0.<org.springframework.scheduling.timer.TimerFactoryBean: org.springframework.scheduling.timer.ScheduledTimerTask[] scheduledTimerTasks> = r1;

        return;
    }

    public void setDaemon(boolean)
    {
        org.springframework.scheduling.timer.TimerFactoryBean r0;
        boolean z0;

        r0 := @this: org.springframework.scheduling.timer.TimerFactoryBean;

        z0 := @parameter0: boolean;

        r0.<org.springframework.scheduling.timer.TimerFactoryBean: boolean daemon> = z0;

        return;
    }

    public void setBeanName(java.lang.String)
    {
        java.lang.String r1;
        org.springframework.scheduling.timer.TimerFactoryBean r0;

        r0 := @this: org.springframework.scheduling.timer.TimerFactoryBean;

        r1 := @parameter0: java.lang.String;

        r0.<org.springframework.scheduling.timer.TimerFactoryBean: java.lang.String beanName> = r1;

        return;
    }

    public void afterPropertiesSet()
    {
        org.springframework.scheduling.timer.TimerFactoryBean r0;
        java.util.Timer $r3, $r5;
        org.apache.commons.logging.Log $r1;
        java.lang.String $r2;
        org.springframework.scheduling.timer.ScheduledTimerTask[] $r4, $r6;
        boolean $z0, $z1;

        r0 := @this: org.springframework.scheduling.timer.TimerFactoryBean;

        $r1 = r0.<org.springframework.scheduling.timer.TimerFactoryBean: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Initializing Timer");

        $r2 = r0.<org.springframework.scheduling.timer.TimerFactoryBean: java.lang.String beanName>;

        $z0 = r0.<org.springframework.scheduling.timer.TimerFactoryBean: boolean daemon>;

        $r3 = virtualinvoke r0.<org.springframework.scheduling.timer.TimerFactoryBean: java.util.Timer createTimer(java.lang.String,boolean)>($r2, $z0);

        r0.<org.springframework.scheduling.timer.TimerFactoryBean: java.util.Timer timer> = $r3;

        $r4 = r0.<org.springframework.scheduling.timer.TimerFactoryBean: org.springframework.scheduling.timer.ScheduledTimerTask[] scheduledTimerTasks>;

        $z1 = staticinvoke <org.springframework.util.ObjectUtils: boolean isEmpty(java.lang.Object[])>($r4);

        if $z1 != 0 goto label1;

        $r6 = r0.<org.springframework.scheduling.timer.TimerFactoryBean: org.springframework.scheduling.timer.ScheduledTimerTask[] scheduledTimerTasks>;

        $r5 = r0.<org.springframework.scheduling.timer.TimerFactoryBean: java.util.Timer timer>;

        virtualinvoke r0.<org.springframework.scheduling.timer.TimerFactoryBean: void registerTasks(org.springframework.scheduling.timer.ScheduledTimerTask[],java.util.Timer)>($r6, $r5);

     label1:
        return;
    }

    protected java.util.Timer createTimer(java.lang.String, boolean)
    {
        org.springframework.scheduling.timer.TimerFactoryBean r3;
        java.util.Timer $r1, $r2;
        java.lang.String r0;
        boolean $z0, z1;

        r3 := @this: org.springframework.scheduling.timer.TimerFactoryBean;

        r0 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        $r2 = new java.util.Timer;

        specialinvoke $r2.<java.util.Timer: void <init>(java.lang.String,boolean)>(r0, z1);

        return $r2;

     label1:
        $r1 = new java.util.Timer;

        specialinvoke $r1.<java.util.Timer: void <init>(boolean)>(z1);

        return $r1;
    }

    protected void registerTasks(org.springframework.scheduling.timer.ScheduledTimerTask[], java.util.Timer)
    {
        org.springframework.scheduling.timer.TimerFactoryBean r6;
        java.util.Timer r2;
        long $l1, $l2, $l3, $l4, $l5;
        int i0, i6;
        java.util.TimerTask $r3, $r4, $r5;
        boolean $z0, $z1;
        org.springframework.scheduling.timer.ScheduledTimerTask r1;
        org.springframework.scheduling.timer.ScheduledTimerTask[] r0;

        r6 := @this: org.springframework.scheduling.timer.TimerFactoryBean;

        r0 := @parameter0: org.springframework.scheduling.timer.ScheduledTimerTask[];

        r2 := @parameter1: java.util.Timer;

        i0 = lengthof r0;

        i6 = 0;

        goto label5;

     label1:
        r1 = r0[i6];

        $z0 = virtualinvoke r1.<org.springframework.scheduling.timer.ScheduledTimerTask: boolean isOneTimeTask()>();

        if $z0 == 0 goto label2;

        $r5 = virtualinvoke r1.<org.springframework.scheduling.timer.ScheduledTimerTask: java.util.TimerTask getTimerTask()>();

        $l5 = virtualinvoke r1.<org.springframework.scheduling.timer.ScheduledTimerTask: long getDelay()>();

        virtualinvoke r2.<java.util.Timer: void schedule(java.util.TimerTask,long)>($r5, $l5);

        goto label4;

     label2:
        $z1 = virtualinvoke r1.<org.springframework.scheduling.timer.ScheduledTimerTask: boolean isFixedRate()>();

        if $z1 == 0 goto label3;

        $r4 = virtualinvoke r1.<org.springframework.scheduling.timer.ScheduledTimerTask: java.util.TimerTask getTimerTask()>();

        $l3 = virtualinvoke r1.<org.springframework.scheduling.timer.ScheduledTimerTask: long getDelay()>();

        $l4 = virtualinvoke r1.<org.springframework.scheduling.timer.ScheduledTimerTask: long getPeriod()>();

        virtualinvoke r2.<java.util.Timer: void scheduleAtFixedRate(java.util.TimerTask,long,long)>($r4, $l3, $l4);

        goto label4;

     label3:
        $r3 = virtualinvoke r1.<org.springframework.scheduling.timer.ScheduledTimerTask: java.util.TimerTask getTimerTask()>();

        $l1 = virtualinvoke r1.<org.springframework.scheduling.timer.ScheduledTimerTask: long getDelay()>();

        $l2 = virtualinvoke r1.<org.springframework.scheduling.timer.ScheduledTimerTask: long getPeriod()>();

        virtualinvoke r2.<java.util.Timer: void schedule(java.util.TimerTask,long,long)>($r3, $l1, $l2);

     label4:
        i6 = i6 + 1;

     label5:
        if i6 < i0 goto label1;

        return;
    }

    public java.util.Timer getObject()
    {
        java.util.Timer $r1;
        org.springframework.scheduling.timer.TimerFactoryBean r0;

        r0 := @this: org.springframework.scheduling.timer.TimerFactoryBean;

        $r1 = r0.<org.springframework.scheduling.timer.TimerFactoryBean: java.util.Timer timer>;

        return $r1;
    }

    public java.lang.Class getObjectType()
    {
        org.springframework.scheduling.timer.TimerFactoryBean r0;

        r0 := @this: org.springframework.scheduling.timer.TimerFactoryBean;

        return class "Ljava/util/Timer;";
    }

    public boolean isSingleton()
    {
        org.springframework.scheduling.timer.TimerFactoryBean r0;

        r0 := @this: org.springframework.scheduling.timer.TimerFactoryBean;

        return 1;
    }

    public void destroy()
    {
        org.apache.commons.logging.Log $r1;
        java.util.Timer $r2;
        org.springframework.scheduling.timer.TimerFactoryBean r0;

        r0 := @this: org.springframework.scheduling.timer.TimerFactoryBean;

        $r1 = r0.<org.springframework.scheduling.timer.TimerFactoryBean: org.apache.commons.logging.Log logger>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void info(java.lang.Object)>("Cancelling Timer");

        $r2 = r0.<org.springframework.scheduling.timer.TimerFactoryBean: java.util.Timer timer>;

        virtualinvoke $r2.<java.util.Timer: void cancel()>();

        return;
    }

    public volatile java.lang.Object getObject() throws java.lang.Exception
    {
        java.util.Timer $r1;
        org.springframework.scheduling.timer.TimerFactoryBean r0;

        r0 := @this: org.springframework.scheduling.timer.TimerFactoryBean;

        $r1 = virtualinvoke r0.<org.springframework.scheduling.timer.TimerFactoryBean: java.util.Timer getObject()>();

        return $r1;
    }
}
