public class org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream extends org.apache.commons.compress.compressors.CompressorOutputStream
{
    private boolean finished;
    private final java.io.OutputStream originalOutput;
    private final org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge;
    private final java.util.Map properties;

    public void <init>(java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.commons.compress.compressors.pack200.Pack200Strategy $r2;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = <org.apache.commons.compress.compressors.pack200.Pack200Strategy: org.apache.commons.compress.compressors.pack200.Pack200Strategy IN_MEMORY>;

        specialinvoke r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.pack200.Pack200Strategy)>(r1, $r2);

        return;
    }

    public void <init>(java.io.OutputStream, org.apache.commons.compress.compressors.pack200.Pack200Strategy) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.commons.compress.compressors.pack200.Pack200Strategy r2;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: org.apache.commons.compress.compressors.pack200.Pack200Strategy;

        specialinvoke r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.pack200.Pack200Strategy,java.util.Map)>(r1, r2, null);

        return;
    }

    public void <init>(java.io.OutputStream, java.util.Map) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.commons.compress.compressors.pack200.Pack200Strategy $r3;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream r0;
        java.util.Map r2;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: java.util.Map;

        $r3 = <org.apache.commons.compress.compressors.pack200.Pack200Strategy: org.apache.commons.compress.compressors.pack200.Pack200Strategy IN_MEMORY>;

        specialinvoke r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: void <init>(java.io.OutputStream,org.apache.commons.compress.compressors.pack200.Pack200Strategy,java.util.Map)>(r1, $r3, r2);

        return;
    }

    public void <init>(java.io.OutputStream, org.apache.commons.compress.compressors.pack200.Pack200Strategy, java.util.Map) throws java.io.IOException
    {
        java.io.OutputStream r1;
        org.apache.commons.compress.compressors.pack200.Pack200Strategy r2;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream r0;
        java.util.Map r4;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r3;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;

        r1 := @parameter0: java.io.OutputStream;

        r2 := @parameter1: org.apache.commons.compress.compressors.pack200.Pack200Strategy;

        r4 := @parameter2: java.util.Map;

        specialinvoke r0.<org.apache.commons.compress.compressors.CompressorOutputStream: void <init>()>();

        r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: boolean finished> = 0;

        r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: java.io.OutputStream originalOutput> = r1;

        $r3 = virtualinvoke r2.<org.apache.commons.compress.compressors.pack200.Pack200Strategy: org.apache.commons.compress.compressors.pack200.StreamBridge newStreamBridge()>();

        r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge> = $r3;

        r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: java.util.Map properties> = r4;

        return;
    }

    public void write(int) throws java.io.IOException
    {
        int i0;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r1;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;

        i0 := @parameter0: int;

        $r1 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        virtualinvoke $r1.<org.apache.commons.compress.compressors.pack200.StreamBridge: void write(int)>(i0);

        return;
    }

    public void write(byte[]) throws java.io.IOException
    {
        byte[] r1;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r2;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;

        r1 := @parameter0: byte[];

        $r2 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        virtualinvoke $r2.<org.apache.commons.compress.compressors.pack200.StreamBridge: void write(byte[])>(r1);

        return;
    }

    public void write(byte[], int, int) throws java.io.IOException
    {
        byte[] r1;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream r0;
        int i0, i1;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r2;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        virtualinvoke $r2.<org.apache.commons.compress.compressors.pack200.StreamBridge: void write(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public void close() throws java.io.IOException
    {
        java.io.OutputStream $r2, $r4;
        java.lang.Throwable $r3;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream r0;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r1;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;

        virtualinvoke r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: void finish()>();

     label1:
        $r1 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        virtualinvoke $r1.<org.apache.commons.compress.compressors.pack200.StreamBridge: void stop()>();

     label2:
        $r2 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: java.io.OutputStream originalOutput>;

        virtualinvoke $r2.<java.io.OutputStream: void close()>();

        goto label5;

     label3:
        $r3 := @caughtexception;

     label4:
        $r4 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: java.io.OutputStream originalOutput>;

        virtualinvoke $r4.<java.io.OutputStream: void close()>();

        throw $r3;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public void finish() throws java.io.IOException
    {
        java.io.OutputStream $r6;
        java.lang.Throwable $r9;
        org.apache.commons.compress.compressors.pack200.StreamBridge $r4;
        org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream r0;
        java.util.Map $r2, $r8;
        java.util.jar.JarInputStream $r3, r10;
        java.util.jar.Pack200$Packer $r1;
        java.util.SortedMap $r7;
        boolean $z0;
        java.io.InputStream $r5;

        r0 := @this: org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;

        $z0 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: boolean finished>;

        if $z0 != 0 goto label7;

        r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: boolean finished> = 1;

        $r1 = staticinvoke <java.util.jar.Pack200: java.util.jar.Pack200$Packer newPacker()>();

        $r2 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: java.util.Map properties>;

        if $r2 == null goto label1;

        $r7 = interfaceinvoke $r1.<java.util.jar.Pack200$Packer: java.util.SortedMap properties()>();

        $r8 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: java.util.Map properties>;

        interfaceinvoke $r7.<java.util.SortedMap: void putAll(java.util.Map)>($r8);

     label1:
        r10 = null;

     label2:
        $r3 = new java.util.jar.JarInputStream;

        $r4 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: org.apache.commons.compress.compressors.pack200.StreamBridge streamBridge>;

        $r5 = virtualinvoke $r4.<org.apache.commons.compress.compressors.pack200.StreamBridge: java.io.InputStream getInput()>();

        specialinvoke $r3.<java.util.jar.JarInputStream: void <init>(java.io.InputStream)>($r5);

        r10 = $r3;

        $r6 = r0.<org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream: java.io.OutputStream originalOutput>;

        interfaceinvoke $r1.<java.util.jar.Pack200$Packer: void pack(java.util.jar.JarInputStream,java.io.OutputStream)>($r3, $r6);

     label3:
        if 1 != 0 goto label7;

        staticinvoke <org.apache.commons.compress.utils.IOUtils: void closeQuietly(java.io.Closeable)>($r3);

        goto label7;

     label4:
        $r9 := @caughtexception;

     label5:
        if 0 != 0 goto label6;

        staticinvoke <org.apache.commons.compress.utils.IOUtils: void closeQuietly(java.io.Closeable)>(r10);

     label6:
        throw $r9;

     label7:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }
}
