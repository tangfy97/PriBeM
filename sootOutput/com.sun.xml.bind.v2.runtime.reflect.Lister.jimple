public abstract class com.sun.xml.bind.v2.runtime.reflect.Lister extends java.lang.Object
{
    private static final java.util.Map arrayListerCache;
    static final java.util.Map primitiveArrayListers;
    public static final com.sun.xml.bind.v2.runtime.reflect.Lister ERROR;
    private static final com.sun.xml.bind.v2.runtime.reflect.ListIterator EMPTY_ITERATOR;
    private static final java.lang.Class[] COLLECTION_IMPL_CLASSES;
    static final boolean $assertionsDisabled;

    protected void <init>()
    {
        com.sun.xml.bind.v2.runtime.reflect.Lister r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.reflect.Lister;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract com.sun.xml.bind.v2.runtime.reflect.ListIterator iterator(java.lang.Object, com.sun.xml.bind.v2.runtime.XMLSerializer);

    public abstract java.lang.Object startPacking(java.lang.Object, com.sun.xml.bind.v2.runtime.reflect.Accessor) throws com.sun.xml.bind.api.AccessorException;

    public abstract void addToPack(java.lang.Object, java.lang.Object) throws com.sun.xml.bind.api.AccessorException;

    public abstract void endPacking(java.lang.Object, java.lang.Object, com.sun.xml.bind.v2.runtime.reflect.Accessor) throws com.sun.xml.bind.api.AccessorException;

    public abstract void reset(java.lang.Object, com.sun.xml.bind.v2.runtime.reflect.Accessor) throws com.sun.xml.bind.api.AccessorException;

    public static com.sun.xml.bind.v2.runtime.reflect.Lister create(java.lang.reflect.Type, com.sun.xml.bind.v2.model.core.ID, com.sun.xml.bind.v2.model.core.Adapter)
    {
        com.sun.xml.bind.v2.runtime.reflect.Lister$IDREFS $r14;
        com.sun.xml.bind.v2.runtime.reflect.AdaptedLister $r11;
        com.sun.xml.bind.v2.model.nav.ReflectionNavigator $r1, $r4, $r16;
        boolean $z0, $z1, $z2;
        com.sun.xml.bind.v2.runtime.reflect.Lister r21;
        com.sun.xml.bind.v2.model.core.Adapter r10;
        java.lang.reflect.ParameterizedType $r15;
        java.lang.reflect.Type r0, $r5, $r18;
        com.sun.xml.bind.v2.runtime.reflect.Lister$CollectionLister $r6;
        java.lang.reflect.Type[] $r17;
        java.lang.Class $r2, $r3, $r7, $r13, $r19, r20;
        java.lang.Object $r12;
        com.sun.xml.bind.v2.model.core.ID r8, $r9;

        r0 := @parameter0: java.lang.reflect.Type;

        r8 := @parameter1: com.sun.xml.bind.v2.model.core.ID;

        r10 := @parameter2: com.sun.xml.bind.v2.model.core.Adapter;

        $r1 = <com.sun.xml.bind.v2.model.nav.Navigator: com.sun.xml.bind.v2.model.nav.ReflectionNavigator REFLECTION>;

        $r2 = virtualinvoke $r1.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class erasure(java.lang.reflect.Type)>(r0);

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r19 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>();

        r20 = $r19;

        r21 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.Lister: com.sun.xml.bind.v2.runtime.reflect.Lister getArrayLister(java.lang.Class)>($r19);

        goto label5;

     label1:
        $r3 = class "Ljava/util/Collection;";

        $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2);

        if $z1 == 0 goto label4;

        $r4 = <com.sun.xml.bind.v2.model.nav.Navigator: com.sun.xml.bind.v2.model.nav.ReflectionNavigator REFLECTION>;

        $r5 = virtualinvoke $r4.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.reflect.Type getBaseClass(java.lang.reflect.Type,java.lang.Class)>(r0, class "Ljava/util/Collection;");

        $z2 = $r5 instanceof java.lang.reflect.ParameterizedType;

        if $z2 == 0 goto label2;

        $r16 = <com.sun.xml.bind.v2.model.nav.Navigator: com.sun.xml.bind.v2.model.nav.ReflectionNavigator REFLECTION>;

        $r15 = (java.lang.reflect.ParameterizedType) $r5;

        $r17 = interfaceinvoke $r15.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $r18 = $r17[0];

        r20 = virtualinvoke $r16.<com.sun.xml.bind.v2.model.nav.ReflectionNavigator: java.lang.Class erasure(java.lang.reflect.Type)>($r18);

        goto label3;

     label2:
        r20 = class "Ljava/lang/Object;";

     label3:
        $r6 = new com.sun.xml.bind.v2.runtime.reflect.Lister$CollectionLister;

        $r7 = staticinvoke <com.sun.xml.bind.v2.runtime.reflect.Lister: java.lang.Class getImplClass(java.lang.Class)>($r2);

        specialinvoke $r6.<com.sun.xml.bind.v2.runtime.reflect.Lister$CollectionLister: void <init>(java.lang.Class)>($r7);

        r21 = $r6;

        goto label5;

     label4:
        return null;

     label5:
        $r9 = <com.sun.xml.bind.v2.model.core.ID: com.sun.xml.bind.v2.model.core.ID IDREF>;

        if r8 != $r9 goto label6;

        $r14 = new com.sun.xml.bind.v2.runtime.reflect.Lister$IDREFS;

        specialinvoke $r14.<com.sun.xml.bind.v2.runtime.reflect.Lister$IDREFS: void <init>(com.sun.xml.bind.v2.runtime.reflect.Lister,java.lang.Class)>(r21, r20);

        r21 = $r14;

     label6:
        if r10 == null goto label7;

        $r11 = new com.sun.xml.bind.v2.runtime.reflect.AdaptedLister;

        $r12 = r10.<com.sun.xml.bind.v2.model.core.Adapter: java.lang.Object adapterType>;

        $r13 = (java.lang.Class) $r12;

        specialinvoke $r11.<com.sun.xml.bind.v2.runtime.reflect.AdaptedLister: void <init>(com.sun.xml.bind.v2.runtime.reflect.Lister,java.lang.Class)>(r21, $r13);

        r21 = $r11;

     label7:
        return r21;
    }

    private static java.lang.Class getImplClass(java.lang.Class)
    {
        java.lang.Class[] $r1;
        java.lang.Class r0, $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = <com.sun.xml.bind.v2.runtime.reflect.Lister: java.lang.Class[] COLLECTION_IMPL_CLASSES>;

        $r2 = staticinvoke <com.sun.xml.bind.v2.ClassFactory: java.lang.Class inferImplClass(java.lang.Class,java.lang.Class[])>(r0, $r1);

        return $r2;
    }

    private static com.sun.xml.bind.v2.runtime.reflect.Lister getArrayLister(java.lang.Class)
    {
        com.sun.xml.bind.v2.runtime.reflect.Lister$ArrayLister $r5;
        com.sun.xml.bind.v2.runtime.reflect.Lister r11;
        java.lang.AssertionError $r4;
        java.util.Map $r1, $r7, $r9;
        java.lang.Class r0;
        java.lang.Object $r2, $r8, $r10;
        java.lang.ref.WeakReference r3, $r6;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.Class;

        r11 = null;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r9 = <com.sun.xml.bind.v2.runtime.reflect.Lister: java.util.Map primitiveArrayListers>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r11 = (com.sun.xml.bind.v2.runtime.reflect.Lister) $r10;

        goto label3;

     label1:
        $r1 = <com.sun.xml.bind.v2.runtime.reflect.Lister: java.util.Map arrayListerCache>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r3 = (java.lang.ref.WeakReference) $r2;

        if r3 == null goto label2;

        $r8 = virtualinvoke r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r11 = (com.sun.xml.bind.v2.runtime.reflect.Lister) $r8;

     label2:
        if r11 != null goto label3;

        $r5 = new com.sun.xml.bind.v2.runtime.reflect.Lister$ArrayLister;

        specialinvoke $r5.<com.sun.xml.bind.v2.runtime.reflect.Lister$ArrayLister: void <init>(java.lang.Class)>(r0);

        r11 = $r5;

        $r7 = <com.sun.xml.bind.v2.runtime.reflect.Lister: java.util.Map arrayListerCache>;

        $r6 = new java.lang.ref.WeakReference;

        specialinvoke $r6.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>($r5);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r6);

     label3:
        $z1 = <com.sun.xml.bind.v2.runtime.reflect.Lister: boolean $assertionsDisabled>;

        if $z1 != 0 goto label4;

        if r11 != null goto label4;

        $r4 = new java.lang.AssertionError;

        specialinvoke $r4.<java.lang.AssertionError: void <init>()>();

        throw $r4;

     label4:
        return r11;
    }

    public static com.sun.xml.bind.v2.runtime.reflect.Lister getErrorInstance()
    {
        com.sun.xml.bind.v2.runtime.reflect.Lister $r0;

        $r0 = <com.sun.xml.bind.v2.runtime.reflect.Lister: com.sun.xml.bind.v2.runtime.reflect.Lister ERROR>;

        return $r0;
    }

    static com.sun.xml.bind.v2.runtime.reflect.ListIterator access$300()
    {
        com.sun.xml.bind.v2.runtime.reflect.ListIterator $r0;

        $r0 = <com.sun.xml.bind.v2.runtime.reflect.Lister: com.sun.xml.bind.v2.runtime.reflect.ListIterator EMPTY_ITERATOR>;

        return $r0;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r6;
        java.util.HashMap $r3;
        com.sun.xml.bind.v2.runtime.reflect.Lister$2 $r5;
        com.sun.xml.bind.v2.runtime.reflect.Lister$1 $r4;
        java.util.Map $r2;
        java.lang.Class $r0;
        java.util.WeakHashMap $r1;
        boolean $z0, $z1;

        $r0 = class "Lcom/sun/xml/bind/v2/runtime/reflect/Lister;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <com.sun.xml.bind.v2.runtime.reflect.Lister: boolean $assertionsDisabled> = $z1;

        $r1 = new java.util.WeakHashMap;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();

        $r2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r1);

        <com.sun.xml.bind.v2.runtime.reflect.Lister: java.util.Map arrayListerCache> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        <com.sun.xml.bind.v2.runtime.reflect.Lister: java.util.Map primitiveArrayListers> = $r3;

        staticinvoke <com.sun.xml.bind.v2.runtime.reflect.PrimitiveArrayListerBoolean: void register()>();

        staticinvoke <com.sun.xml.bind.v2.runtime.reflect.PrimitiveArrayListerByte: void register()>();

        staticinvoke <com.sun.xml.bind.v2.runtime.reflect.PrimitiveArrayListerCharacter: void register()>();

        staticinvoke <com.sun.xml.bind.v2.runtime.reflect.PrimitiveArrayListerDouble: void register()>();

        staticinvoke <com.sun.xml.bind.v2.runtime.reflect.PrimitiveArrayListerFloat: void register()>();

        staticinvoke <com.sun.xml.bind.v2.runtime.reflect.PrimitiveArrayListerInteger: void register()>();

        staticinvoke <com.sun.xml.bind.v2.runtime.reflect.PrimitiveArrayListerLong: void register()>();

        staticinvoke <com.sun.xml.bind.v2.runtime.reflect.PrimitiveArrayListerShort: void register()>();

        $r4 = new com.sun.xml.bind.v2.runtime.reflect.Lister$1;

        specialinvoke $r4.<com.sun.xml.bind.v2.runtime.reflect.Lister$1: void <init>()>();

        <com.sun.xml.bind.v2.runtime.reflect.Lister: com.sun.xml.bind.v2.runtime.reflect.Lister ERROR> = $r4;

        $r5 = new com.sun.xml.bind.v2.runtime.reflect.Lister$2;

        specialinvoke $r5.<com.sun.xml.bind.v2.runtime.reflect.Lister$2: void <init>()>();

        <com.sun.xml.bind.v2.runtime.reflect.Lister: com.sun.xml.bind.v2.runtime.reflect.ListIterator EMPTY_ITERATOR> = $r5;

        $r6 = newarray (java.lang.Class)[5];

        $r6[0] = class "Ljava/util/ArrayList;";

        $r6[1] = class "Ljava/util/LinkedList;";

        $r6[2] = class "Ljava/util/HashSet;";

        $r6[3] = class "Ljava/util/TreeSet;";

        $r6[4] = class "Ljava/util/Stack;";

        <com.sun.xml.bind.v2.runtime.reflect.Lister: java.lang.Class[] COLLECTION_IMPL_CLASSES> = $r6;

        return;
    }
}
