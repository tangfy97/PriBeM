public abstract class org.apache.batik.bridge.AbstractGraphicsNodeBridge extends org.apache.batik.bridge.AnimatableSVGBridge implements org.apache.batik.dom.svg.SVGContext, org.apache.batik.bridge.BridgeUpdateHandler, org.apache.batik.bridge.GraphicsNodeBridge, org.apache.batik.bridge.ErrorConstants
{
    protected org.apache.batik.gvt.GraphicsNode node;
    protected boolean isSVG12;
    protected org.apache.batik.parser.UnitProcessor$Context unitContext;
    protected java.lang.ref.SoftReference bboxShape;
    protected java.awt.geom.Rectangle2D bbox;

    protected void <init>()
    {
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        specialinvoke r0.<org.apache.batik.bridge.AnimatableSVGBridge: void <init>()>();

        r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: java.lang.ref.SoftReference bboxShape> = null;

        r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: java.awt.geom.Rectangle2D bbox> = null;

        return;
    }

    public org.apache.batik.gvt.GraphicsNode createGraphicsNode(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element)
    {
        org.apache.batik.bridge.UserAgent $r2;
        org.w3c.dom.Element r0;
        org.apache.batik.gvt.GraphicsNode $r4;
        org.apache.batik.bridge.BridgeContext r1;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r3;
        boolean $z0, $z1;

        r3 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r1 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r0 := @parameter1: org.w3c.dom.Element;

        $r2 = virtualinvoke r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $z0 = staticinvoke <org.apache.batik.bridge.SVGUtilities: boolean matchUserAgent(org.w3c.dom.Element,org.apache.batik.bridge.UserAgent)>(r0, $r2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r4 = virtualinvoke r3.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode instantiateGraphicsNode()>();

        virtualinvoke r3.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void setTransform(org.apache.batik.gvt.GraphicsNode,org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>($r4, r0, r1);

        $z1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertVisibility(org.w3c.dom.Element)>(r0);

        interfaceinvoke $r4.<org.apache.batik.gvt.GraphicsNode: void setVisible(boolean)>($z1);

        virtualinvoke r3.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void associateSVGContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r1, r0, $r4);

        return $r4;
    }

    protected abstract org.apache.batik.gvt.GraphicsNode instantiateGraphicsNode();

    public void buildGraphicsNode(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode)
    {
        java.awt.Composite $r2;
        org.apache.batik.gvt.GraphicsNode r0;
        org.apache.batik.bridge.BridgeContext r3;
        org.apache.batik.ext.awt.image.renderable.ClipRable $r6;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r7;
        org.apache.batik.ext.awt.image.renderable.Filter $r4;
        org.w3c.dom.Element r1;
        int $i0;
        org.apache.batik.gvt.filter.Mask $r5;

        r7 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r3 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.w3c.dom.Element;

        r0 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        $r2 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.Composite convertOpacity(org.w3c.dom.Element)>(r1);

        interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: void setComposite(java.awt.Composite)>($r2);

        $r4 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.ext.awt.image.renderable.Filter convertFilter(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r1, r0, r3);

        interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: void setFilter(org.apache.batik.ext.awt.image.renderable.Filter)>($r4);

        $r5 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.gvt.filter.Mask convertMask(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r1, r0, r3);

        interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: void setMask(org.apache.batik.gvt.filter.Mask)>($r5);

        $r6 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.ext.awt.image.renderable.ClipRable convertClipPath(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>(r1, r0, r3);

        interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: void setClip(org.apache.batik.ext.awt.image.renderable.ClipRable)>($r6);

        $i0 = staticinvoke <org.apache.batik.bridge.CSSUtilities: int convertPointerEvents(org.w3c.dom.Element)>(r1);

        interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: void setPointerEventType(int)>($i0);

        virtualinvoke r7.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void initializeDynamicSupport(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode)>(r3, r1, r0);

        return;
    }

    public boolean getDisplay(org.w3c.dom.Element)
    {
        org.w3c.dom.Element r0;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r1;
        boolean $z0;

        r1 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r0 := @parameter0: org.w3c.dom.Element;

        $z0 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertDisplay(org.w3c.dom.Element)>(r0);

        return $z0;
    }

    protected java.awt.geom.AffineTransform computeTransform(org.w3c.dom.svg.SVGTransformable, org.apache.batik.bridge.BridgeContext)
    {
        org.apache.batik.dom.svg.SVGOMAnimatedTransformList r3;
        org.apache.batik.dom.svg.LiveAttributeException $r11;
        org.apache.batik.dom.svg.SVGMotionAnimatableElement r15;
        boolean $z0, $z1;
        org.apache.batik.bridge.BridgeException $r12;
        org.w3c.dom.svg.SVGTransformable r1;
        org.apache.batik.bridge.BridgeContext r13;
        java.awt.geom.AffineTransform $r0, $r7, $r10;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r4;
        org.w3c.dom.svg.SVGAnimatedTransformList $r2, $r8;
        org.apache.batik.dom.svg.AbstractSVGTransformList r14;
        org.w3c.dom.Element $r5, $r6;
        org.w3c.dom.svg.SVGTransformList $r9;

        r4 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r1 := @parameter0: org.w3c.dom.svg.SVGTransformable;

        r13 := @parameter1: org.apache.batik.bridge.BridgeContext;

     label1:
        $r0 = new java.awt.geom.AffineTransform;

        specialinvoke $r0.<java.awt.geom.AffineTransform: void <init>()>();

        $r2 = interfaceinvoke r1.<org.w3c.dom.svg.SVGTransformable: org.w3c.dom.svg.SVGAnimatedTransformList getTransform()>();

        r3 = (org.apache.batik.dom.svg.SVGOMAnimatedTransformList) $r2;

        $z0 = virtualinvoke r3.<org.apache.batik.dom.svg.AbstractSVGAnimatedValue: boolean isSpecified()>();

        if $z0 == 0 goto label2;

        virtualinvoke r3.<org.apache.batik.dom.svg.SVGOMAnimatedTransformList: void check()>();

        $r8 = interfaceinvoke r1.<org.w3c.dom.svg.SVGTransformable: org.w3c.dom.svg.SVGAnimatedTransformList getTransform()>();

        $r9 = interfaceinvoke $r8.<org.w3c.dom.svg.SVGAnimatedTransformList: org.w3c.dom.svg.SVGTransformList getAnimVal()>();

        r14 = (org.apache.batik.dom.svg.AbstractSVGTransformList) $r9;

        $r10 = virtualinvoke r14.<org.apache.batik.dom.svg.AbstractSVGTransformList: java.awt.geom.AffineTransform getAffineTransform()>();

        virtualinvoke $r0.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r10);

     label2:
        $r5 = r4.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $z1 = $r5 instanceof org.apache.batik.dom.svg.SVGMotionAnimatableElement;

        if $z1 == 0 goto label3;

        $r6 = r4.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        r15 = (org.apache.batik.dom.svg.SVGMotionAnimatableElement) $r6;

        $r7 = interfaceinvoke r15.<org.apache.batik.dom.svg.SVGMotionAnimatableElement: java.awt.geom.AffineTransform getMotionTransform()>();

        if $r7 == null goto label3;

        virtualinvoke $r0.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r7);

     label3:
        return $r0;

     label4:
        $r11 := @caughtexception;

        $r12 = new org.apache.batik.bridge.BridgeException;

        specialinvoke $r12.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.apache.batik.dom.svg.LiveAttributeException)>(r13, $r11);

        throw $r12;

        catch org.apache.batik.dom.svg.LiveAttributeException from label1 to label4 with label4;
    }

    protected void setTransform(org.apache.batik.gvt.GraphicsNode, org.w3c.dom.Element, org.apache.batik.bridge.BridgeContext)
    {
        org.w3c.dom.Element r2;
        org.apache.batik.gvt.GraphicsNode r0;
        org.apache.batik.bridge.BridgeContext r3;
        org.w3c.dom.svg.SVGTransformable $r4;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r1;
        java.awt.geom.AffineTransform $r5;

        r1 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r0 := @parameter0: org.apache.batik.gvt.GraphicsNode;

        r2 := @parameter1: org.w3c.dom.Element;

        r3 := @parameter2: org.apache.batik.bridge.BridgeContext;

        $r4 = (org.w3c.dom.svg.SVGTransformable) r2;

        $r5 = virtualinvoke r1.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: java.awt.geom.AffineTransform computeTransform(org.w3c.dom.svg.SVGTransformable,org.apache.batik.bridge.BridgeContext)>($r4, r3);

        interfaceinvoke r0.<org.apache.batik.gvt.GraphicsNode: void setTransform(java.awt.geom.AffineTransform)>($r5);

        return;
    }

    protected void associateSVGContext(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode)
    {
        org.apache.batik.parser.UnitProcessor$Context $r4;
        org.w3c.dom.Element r1;
        org.apache.batik.gvt.GraphicsNode r2;
        org.apache.batik.bridge.BridgeContext r3;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        org.apache.batik.dom.svg.SVGOMElement $r5;
        boolean $z0;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r3 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.w3c.dom.Element;

        r2 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e> = r1;

        r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node> = r2;

        r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx> = r3;

        $r4 = staticinvoke <org.apache.batik.bridge.UnitProcessor: org.apache.batik.parser.UnitProcessor$Context createContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r3, r1);

        r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.parser.UnitProcessor$Context unitContext> = $r4;

        $z0 = virtualinvoke r3.<org.apache.batik.bridge.BridgeContext: boolean isSVG12()>();

        r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: boolean isSVG12> = $z0;

        $r5 = (org.apache.batik.dom.svg.SVGOMElement) r1;

        virtualinvoke $r5.<org.apache.batik.dom.svg.SVGOMElement: void setSVGContext(org.apache.batik.dom.svg.SVGContext)>(r0);

        return;
    }

    protected void initializeDynamicSupport(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.apache.batik.gvt.GraphicsNode)
    {
        org.w3c.dom.Element r1;
        org.apache.batik.gvt.GraphicsNode r2;
        org.apache.batik.bridge.BridgeContext r0;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r3;
        boolean $z0;

        r3 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r0 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r1 := @parameter1: org.w3c.dom.Element;

        r2 := @parameter2: org.apache.batik.gvt.GraphicsNode;

        $z0 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: boolean isInteractive()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: void bind(org.w3c.dom.Node,org.apache.batik.gvt.GraphicsNode)>(r1, r2);

     label1:
        return;
    }

    public void handleDOMAttrModifiedEvent(org.w3c.dom.events.MutationEvent)
    {
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        org.w3c.dom.events.MutationEvent r1;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r1 := @parameter0: org.w3c.dom.events.MutationEvent;

        return;
    }

    protected void handleGeometryChanged()
    {
        java.lang.String $r17, $r18;
        org.apache.batik.gvt.filter.Mask $r10;
        boolean $z0, $z1;
        org.apache.batik.gvt.GraphicsNode $r2, $r4, $r7, $r9, $r12, $r14;
        org.apache.batik.bridge.BridgeContext $r1, $r6, $r11;
        org.apache.batik.ext.awt.image.renderable.ClipRable $r15;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r5;
        org.w3c.dom.Element $r3, $r8, $r13, $r16;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        $r4 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r3 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r2 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r5 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.ext.awt.image.renderable.Filter convertFilter(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>($r3, $r2, $r1);

        interfaceinvoke $r4.<org.apache.batik.gvt.GraphicsNode: void setFilter(org.apache.batik.ext.awt.image.renderable.Filter)>($r5);

        $r9 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r8 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r7 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r6 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r10 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.gvt.filter.Mask convertMask(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>($r8, $r7, $r6);

        interfaceinvoke $r9.<org.apache.batik.gvt.GraphicsNode: void setMask(org.apache.batik.gvt.filter.Mask)>($r10);

        $r14 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r13 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r12 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r11 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r15 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.ext.awt.image.renderable.ClipRable convertClipPath(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>($r13, $r12, $r11);

        interfaceinvoke $r14.<org.apache.batik.gvt.GraphicsNode: void setClip(org.apache.batik.ext.awt.image.renderable.ClipRable)>($r15);

        $z0 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: boolean isSVG12>;

        if $z0 == 0 goto label2;

        $r17 = "use";

        $r16 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r18 = interfaceinvoke $r16.<org.w3c.dom.Node: java.lang.String getLocalName()>();

        $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z1 != 0 goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void fireShapeChangeEvent()>();

     label1:
        virtualinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void fireBBoxChangeEvent()>();

     label2:
        return;
    }

    protected void fireShapeChangeEvent()
    {
        org.w3c.dom.events.DocumentEvent r3;
        org.apache.batik.bridge.BridgeContext $r9;
        org.apache.batik.dom.events.AbstractEvent r5;
        java.lang.RuntimeException $r8;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        org.apache.batik.bridge.UserAgent $r10;
        org.w3c.dom.Element $r1, $r6;
        org.w3c.dom.events.EventTarget $r7;
        org.w3c.dom.Document $r2;
        org.w3c.dom.events.Event $r4;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r3 = (org.w3c.dom.events.DocumentEvent) $r2;

        $r4 = interfaceinvoke r3.<org.w3c.dom.events.DocumentEvent: org.w3c.dom.events.Event createEvent(java.lang.String)>("SVGEvents");

        r5 = (org.apache.batik.dom.events.AbstractEvent) $r4;

        virtualinvoke r5.<org.apache.batik.dom.events.AbstractEvent: void initEventNS(java.lang.String,java.lang.String,boolean,boolean)>("http://www.w3.org/2000/svg", "shapechange", 1, 0);

     label1:
        $r6 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r7 = (org.w3c.dom.events.EventTarget) $r6;

        interfaceinvoke $r7.<org.w3c.dom.events.EventTarget: boolean dispatchEvent(org.w3c.dom.events.Event)>(r5);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r10 = virtualinvoke $r9.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        interfaceinvoke $r10.<org.apache.batik.bridge.UserAgent: void displayError(java.lang.Exception)>($r8);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public void handleDOMNodeInsertedEvent(org.w3c.dom.events.MutationEvent)
    {
        org.apache.batik.bridge.BridgeContext $r5, $r7;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r4;
        org.apache.batik.bridge.Bridge $r6;
        org.w3c.dom.Element r3;
        org.w3c.dom.events.EventTarget $r1, $r2;
        org.apache.batik.bridge.GenericBridge $r8;
        org.w3c.dom.events.MutationEvent r0;
        boolean $z0, $z1;

        r4 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r0 := @parameter0: org.w3c.dom.events.MutationEvent;

        $r1 = interfaceinvoke r0.<org.w3c.dom.events.Event: org.w3c.dom.events.EventTarget getTarget()>();

        $z0 = $r1 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label1;

        $r2 = interfaceinvoke r0.<org.w3c.dom.events.Event: org.w3c.dom.events.EventTarget getTarget()>();

        r3 = (org.w3c.dom.Element) $r2;

        $r5 = r4.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r6 = virtualinvoke $r5.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.Bridge getBridge(org.w3c.dom.Element)>(r3);

        $z1 = $r6 instanceof org.apache.batik.bridge.GenericBridge;

        if $z1 == 0 goto label1;

        $r8 = (org.apache.batik.bridge.GenericBridge) $r6;

        $r7 = r4.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        interfaceinvoke $r8.<org.apache.batik.bridge.GenericBridge: void handleElement(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>($r7, r3);

     label1:
        return;
    }

    public void handleDOMNodeRemovedEvent(org.w3c.dom.events.MutationEvent)
    {
        org.apache.batik.gvt.GraphicsNode $r3, $r5;
        org.apache.batik.bridge.SVGSwitchElementBridge $r10;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        org.apache.batik.gvt.CompositeGraphicsNode $r4;
        org.w3c.dom.Element $r1, $r6, $r9;
        org.apache.batik.dom.svg.SVGContext $r8;
        org.w3c.dom.Node $r2;
        org.apache.batik.dom.svg.SVGOMElement $r7;
        boolean $z0, $z1;
        org.w3c.dom.events.MutationEvent r11;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r11 := @parameter0: org.w3c.dom.events.MutationEvent;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $z0 = $r2 instanceof org.apache.batik.dom.svg.SVGOMElement;

        if $z0 == 0 goto label1;

        $r7 = (org.apache.batik.dom.svg.SVGOMElement) $r2;

        $r8 = virtualinvoke $r7.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $z1 = $r8 instanceof org.apache.batik.bridge.SVGSwitchElementBridge;

        if $z1 == 0 goto label1;

        $r10 = (org.apache.batik.bridge.SVGSwitchElementBridge) $r8;

        $r9 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        virtualinvoke $r10.<org.apache.batik.bridge.SVGSwitchElementBridge: void handleChildElementRemoved(org.w3c.dom.Element)>($r9);

        return;

     label1:
        $r3 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r4 = interfaceinvoke $r3.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.gvt.CompositeGraphicsNode getParent()>();

        $r5 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        virtualinvoke $r4.<org.apache.batik.gvt.CompositeGraphicsNode: boolean remove(java.lang.Object)>($r5);

        $r6 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        virtualinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void disposeTree(org.w3c.dom.Node)>($r6);

        return;
    }

    public void handleDOMCharacterDataModified(org.w3c.dom.events.MutationEvent)
    {
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        org.w3c.dom.events.MutationEvent r1;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r1 := @parameter0: org.w3c.dom.events.MutationEvent;

        return;
    }

    public void dispose()
    {
        org.w3c.dom.Element $r1, $r3;
        org.apache.batik.bridge.BridgeContext $r4;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        org.apache.batik.dom.svg.SVGOMElement r2;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        r2 = (org.apache.batik.dom.svg.SVGOMElement) $r1;

        virtualinvoke r2.<org.apache.batik.dom.svg.SVGOMElement: void setSVGContext(org.apache.batik.dom.svg.SVGContext)>(null);

        $r4 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r3 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        virtualinvoke $r4.<org.apache.batik.bridge.BridgeContext: void unbind(org.w3c.dom.Node)>($r3);

        r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: java.lang.ref.SoftReference bboxShape> = null;

        return;
    }

    protected void disposeTree(org.w3c.dom.Node)
    {
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        org.w3c.dom.Node r1;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r1 := @parameter0: org.w3c.dom.Node;

        virtualinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void disposeTree(org.w3c.dom.Node,boolean)>(r1, 1);

        return;
    }

    protected void disposeTree(org.w3c.dom.Node, boolean)
    {
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r1;
        org.apache.batik.bridge.BridgeUpdateHandler r3;
        org.apache.batik.dom.svg.SVGContext $r2;
        org.w3c.dom.Node r0, r5;
        org.apache.batik.dom.svg.SVGOMElement r4;
        boolean $z0, z1, $z2;

        r1 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r0 := @parameter0: org.w3c.dom.Node;

        z1 := @parameter1: boolean;

        $z0 = r0 instanceof org.apache.batik.dom.svg.SVGOMElement;

        if $z0 == 0 goto label2;

        r4 = (org.apache.batik.dom.svg.SVGOMElement) r0;

        $r2 = virtualinvoke r4.<org.apache.batik.dom.svg.SVGOMElement: org.apache.batik.dom.svg.SVGContext getSVGContext()>();

        $z2 = $r2 instanceof org.apache.batik.bridge.BridgeUpdateHandler;

        if $z2 == 0 goto label2;

        r3 = (org.apache.batik.bridge.BridgeUpdateHandler) $r2;

        if z1 == 0 goto label1;

        virtualinvoke r4.<org.apache.batik.dom.svg.SVGOMElement: void setSVGContext(org.apache.batik.dom.svg.SVGContext)>(null);

     label1:
        interfaceinvoke r3.<org.apache.batik.bridge.BridgeUpdateHandler: void dispose()>();

     label2:
        r5 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label4;

     label3:
        virtualinvoke r1.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void disposeTree(org.w3c.dom.Node,boolean)>(r5, z1);

        r5 = interfaceinvoke r5.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label4:
        if r5 != null goto label3;

        return;
    }

    public void handleCSSEngineEvent(org.apache.batik.css.engine.CSSEngineEvent)
    {
        org.apache.batik.css.engine.SVGCSSEngine r8;
        org.apache.batik.bridge.BridgeContext $r6;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r3;
        java.lang.Exception $r5;
        org.apache.batik.bridge.UserAgent $r7;
        int[] $r2;
        int $i0, i1, i2;
        java.lang.Object $r1;
        java.lang.String $r4;
        org.apache.batik.css.engine.CSSEngineEvent r0;

        r3 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r0 := @parameter0: org.apache.batik.css.engine.CSSEngineEvent;

     label1:
        $r1 = virtualinvoke r0.<java.util.EventObject: java.lang.Object getSource()>();

        r8 = (org.apache.batik.css.engine.SVGCSSEngine) $r1;

        $r2 = virtualinvoke r0.<org.apache.batik.css.engine.CSSEngineEvent: int[] getProperties()>();

        i2 = 0;

        goto label3;

     label2:
        i1 = $r2[i2];

        virtualinvoke r3.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void handleCSSPropertyChanged(int)>(i1);

        $r4 = virtualinvoke r8.<org.apache.batik.css.engine.CSSEngine: java.lang.String getPropertyName(int)>(i1);

        virtualinvoke r3.<org.apache.batik.bridge.AnimatableSVGBridge: void fireBaseAttributeListeners(java.lang.String)>($r4);

        i2 = i2 + 1;

     label3:
        $i0 = lengthof $r2;

        if i2 < $i0 goto label2;

     label4:
        goto label6;

     label5:
        $r5 := @caughtexception;

        $r6 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r7 = virtualinvoke $r6.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        interfaceinvoke $r7.<org.apache.batik.bridge.UserAgent: void displayError(java.lang.Exception)>($r5);

     label6:
        return;

        catch java.lang.Exception from label1 to label4 with label5;
    }

    protected void handleCSSPropertyChanged(int)
    {
        org.apache.batik.gvt.CompositeGraphicsNode $r20;
        org.apache.batik.gvt.filter.Mask $r12;
        boolean $z0, $z1;
        java.awt.Composite $r7;
        org.apache.batik.gvt.GraphicsNode $r2, $r4, $r6, $r9, $r11, $r14, $r16, $r19, $r21, $r24, $r26;
        org.apache.batik.bridge.BridgeContext $r8, $r13, $r23;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r17;
        int i0, $i1;
        org.apache.batik.ext.awt.image.renderable.ClipRable $r27;
        org.w3c.dom.Element $r1, $r3, $r5, $r10, $r15, $r18, $r22, $r25;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        i0 := @parameter0: int;

        lookupswitch(i0)
        {
            case 3: goto label5;
            case 12: goto label7;
            case 18: goto label3;
            case 37: goto label4;
            case 38: goto label2;
            case 40: goto label6;
            case 57: goto label1;
            default: goto label8;
        };

     label1:
        $r2 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $z0 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertVisibility(org.w3c.dom.Element)>($r1);

        interfaceinvoke $r2.<org.apache.batik.gvt.GraphicsNode: void setVisible(boolean)>($z0);

        goto label8;

     label2:
        $r6 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r5 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r7 = staticinvoke <org.apache.batik.bridge.CSSUtilities: java.awt.Composite convertOpacity(org.w3c.dom.Element)>($r5);

        interfaceinvoke $r6.<org.apache.batik.gvt.GraphicsNode: void setComposite(java.awt.Composite)>($r7);

        goto label8;

     label3:
        $r16 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r15 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r14 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r13 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r17 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.ext.awt.image.renderable.Filter convertFilter(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>($r15, $r14, $r13);

        interfaceinvoke $r16.<org.apache.batik.gvt.GraphicsNode: void setFilter(org.apache.batik.ext.awt.image.renderable.Filter)>($r17);

        goto label8;

     label4:
        $r11 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r10 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r9 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r8 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r12 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.gvt.filter.Mask convertMask(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>($r10, $r9, $r8);

        interfaceinvoke $r11.<org.apache.batik.gvt.GraphicsNode: void setMask(org.apache.batik.gvt.filter.Mask)>($r12);

        goto label8;

     label5:
        $r26 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r25 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r24 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r23 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r27 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.ext.awt.image.renderable.ClipRable convertClipPath(org.w3c.dom.Element,org.apache.batik.gvt.GraphicsNode,org.apache.batik.bridge.BridgeContext)>($r25, $r24, $r23);

        interfaceinvoke $r26.<org.apache.batik.gvt.GraphicsNode: void setClip(org.apache.batik.ext.awt.image.renderable.ClipRable)>($r27);

        goto label8;

     label6:
        $r4 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r3 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $i1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: int convertPointerEvents(org.w3c.dom.Element)>($r3);

        interfaceinvoke $r4.<org.apache.batik.gvt.GraphicsNode: void setPointerEventType(int)>($i1);

        goto label8;

     label7:
        $r18 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $z1 = virtualinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: boolean getDisplay(org.w3c.dom.Element)>($r18);

        if $z1 != 0 goto label8;

        $r19 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r20 = interfaceinvoke $r19.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.gvt.CompositeGraphicsNode getParent()>();

        $r21 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        virtualinvoke $r20.<org.apache.batik.gvt.CompositeGraphicsNode: boolean remove(java.lang.Object)>($r21);

        $r22 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        virtualinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void disposeTree(org.w3c.dom.Node,boolean)>($r22, 0);

     label8:
        return;
    }

    public void handleAnimatedAttributeChanged(org.apache.batik.dom.svg.AnimatedLiveAttributeValue)
    {
        org.apache.batik.dom.svg.AnimatedLiveAttributeValue r0;
        org.apache.batik.gvt.GraphicsNode $r6;
        org.apache.batik.bridge.BridgeContext $r4;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r3;
        org.w3c.dom.Element $r5;
        java.lang.String $r1, $r2;
        boolean $z0;

        r3 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r0 := @parameter0: org.apache.batik.dom.svg.AnimatedLiveAttributeValue;

        $r1 = interfaceinvoke r0.<org.apache.batik.dom.svg.AnimatedLiveAttributeValue: java.lang.String getNamespaceURI()>();

        if $r1 != null goto label1;

        $r2 = interfaceinvoke r0.<org.apache.batik.dom.svg.AnimatedLiveAttributeValue: java.lang.String getLocalName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("transform");

        if $z0 == 0 goto label1;

        $r6 = r3.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r5 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r4 = r3.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        virtualinvoke r3.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void setTransform(org.apache.batik.gvt.GraphicsNode,org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>($r6, $r5, $r4);

        virtualinvoke r3.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void handleGeometryChanged()>();

     label1:
        return;
    }

    public void handleOtherAnimationChanged(java.lang.String)
    {
        org.w3c.dom.Element $r3;
        org.apache.batik.gvt.GraphicsNode $r4;
        org.apache.batik.bridge.BridgeContext $r2;
        java.lang.String r0;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r1;
        boolean $z0;

        r1 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("motion");

        if $z0 == 0 goto label1;

        $r4 = r1.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r3 = r1.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r2 = r1.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        virtualinvoke r1.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void setTransform(org.apache.batik.gvt.GraphicsNode,org.w3c.dom.Element,org.apache.batik.bridge.BridgeContext)>($r4, $r3, $r2);

        virtualinvoke r1.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void handleGeometryChanged()>();

     label1:
        return;
    }

    protected void checkBBoxChange()
    {
        org.w3c.dom.Element $r1;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        if $r1 == null goto label1;

        virtualinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: void fireBBoxChangeEvent()>();

     label1:
        return;
    }

    protected void fireBBoxChangeEvent()
    {
        org.w3c.dom.events.DocumentEvent r3;
        org.apache.batik.bridge.BridgeContext $r9;
        org.apache.batik.dom.events.AbstractEvent r5;
        java.lang.RuntimeException $r8;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        org.apache.batik.bridge.UserAgent $r10;
        org.w3c.dom.Element $r1, $r6;
        org.w3c.dom.events.EventTarget $r7;
        org.w3c.dom.Document $r2;
        org.w3c.dom.events.Event $r4;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        r3 = (org.w3c.dom.events.DocumentEvent) $r2;

        $r4 = interfaceinvoke r3.<org.w3c.dom.events.DocumentEvent: org.w3c.dom.events.Event createEvent(java.lang.String)>("SVGEvents");

        r5 = (org.apache.batik.dom.events.AbstractEvent) $r4;

        virtualinvoke r5.<org.apache.batik.dom.events.AbstractEvent: void initEventNS(java.lang.String,java.lang.String,boolean,boolean)>("http://www.w3.org/2000/svg", "RenderedBBoxChange", 1, 0);

     label1:
        $r6 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r7 = (org.w3c.dom.events.EventTarget) $r6;

        interfaceinvoke $r7.<org.w3c.dom.events.EventTarget: boolean dispatchEvent(org.w3c.dom.events.Event)>(r5);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r10 = virtualinvoke $r9.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        interfaceinvoke $r10.<org.apache.batik.bridge.UserAgent: void displayError(java.lang.Exception)>($r8);

     label4:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    public float getPixelUnitToMillimeter()
    {
        org.apache.batik.bridge.UserAgent $r2;
        float $f0;
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $f0 = interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: float getPixelUnitToMillimeter()>();

        return $f0;
    }

    public float getPixelToMM()
    {
        float $f0;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        $f0 = virtualinvoke r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: float getPixelUnitToMillimeter()>();

        return $f0;
    }

    public java.awt.geom.Rectangle2D getBBox()
    {
        java.awt.Shape $r3;
        org.apache.batik.gvt.GraphicsNode $r1, $r2;
        java.awt.geom.Rectangle2D $r7, $r8, $r9, $r12;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        org.apache.batik.ext.awt.geom.SegmentList $r6;
        java.lang.Object $r11;
        java.lang.ref.SoftReference $r4, $r5, $r10;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        $r1 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r3 = interfaceinvoke $r2.<org.apache.batik.gvt.GraphicsNode: java.awt.Shape getOutline()>();

        $r4 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: java.lang.ref.SoftReference bboxShape>;

        if $r4 == null goto label2;

        $r10 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: java.lang.ref.SoftReference bboxShape>;

        $r11 = virtualinvoke $r10.<java.lang.ref.SoftReference: java.lang.Object get()>();

        if $r3 != $r11 goto label2;

        $r12 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: java.awt.geom.Rectangle2D bbox>;

        return $r12;

     label2:
        $r5 = new java.lang.ref.SoftReference;

        specialinvoke $r5.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>($r3);

        r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: java.lang.ref.SoftReference bboxShape> = $r5;

        r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: java.awt.geom.Rectangle2D bbox> = null;

        if $r3 != null goto label3;

        $r9 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: java.awt.geom.Rectangle2D bbox>;

        return $r9;

     label3:
        $r6 = new org.apache.batik.ext.awt.geom.SegmentList;

        specialinvoke $r6.<org.apache.batik.ext.awt.geom.SegmentList: void <init>(java.awt.Shape)>($r3);

        $r7 = virtualinvoke $r6.<org.apache.batik.ext.awt.geom.SegmentList: java.awt.geom.Rectangle2D getBounds2D()>();

        r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: java.awt.geom.Rectangle2D bbox> = $r7;

        $r8 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: java.awt.geom.Rectangle2D bbox>;

        return $r8;
    }

    public java.awt.geom.AffineTransform getCTM()
    {
        org.apache.batik.gvt.GraphicsNode r4;
        org.apache.batik.gvt.CanvasGraphicsNode $r3;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        java.awt.geom.AffineTransform $r1, $r2, r6;
        org.w3c.dom.Element r5;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r4 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r1 = new java.awt.geom.AffineTransform;

        specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>()>();

        r5 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        goto label6;

     label1:
        $z0 = r5 instanceof org.w3c.dom.svg.SVGFitToViewBox;

        if $z0 == 0 goto label4;

        $z1 = r4 instanceof org.apache.batik.gvt.CanvasGraphicsNode;

        if $z1 == 0 goto label2;

        $r3 = (org.apache.batik.gvt.CanvasGraphicsNode) r4;

        r6 = virtualinvoke $r3.<org.apache.batik.gvt.CanvasGraphicsNode: java.awt.geom.AffineTransform getViewingTransform()>();

        goto label3;

     label2:
        r6 = interfaceinvoke r4.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getTransform()>();

     label3:
        if r6 == null goto label7;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>(r6);

        goto label7;

     label4:
        $r2 = interfaceinvoke r4.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getTransform()>();

        if $r2 == null goto label5;

        virtualinvoke $r1.<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>($r2);

     label5:
        r5 = staticinvoke <org.apache.batik.css.engine.CSSEngine: org.apache.batik.css.engine.CSSStylableElement getParentCSSStylableElement(org.w3c.dom.Element)>(r5);

        r4 = interfaceinvoke r4.<org.apache.batik.gvt.GraphicsNode: org.apache.batik.gvt.CompositeGraphicsNode getParent()>();

     label6:
        if r5 != null goto label1;

     label7:
        return $r1;
    }

    public java.awt.geom.AffineTransform getScreenTransform()
    {
        org.apache.batik.bridge.UserAgent $r2;
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        java.awt.geom.AffineTransform $r3;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        $r3 = interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: java.awt.geom.AffineTransform getTransform()>();

        return $r3;
    }

    public void setScreenTransform(java.awt.geom.AffineTransform)
    {
        org.apache.batik.bridge.UserAgent $r2;
        org.apache.batik.bridge.BridgeContext $r1;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        java.awt.geom.AffineTransform r3;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        r3 := @parameter0: java.awt.geom.AffineTransform;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r2 = virtualinvoke $r1.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.UserAgent getUserAgent()>();

        interfaceinvoke $r2.<org.apache.batik.bridge.UserAgent: void setTransform(java.awt.geom.AffineTransform)>(r3);

        return;
    }

    public java.awt.geom.AffineTransform getGlobalTransform()
    {
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        java.awt.geom.AffineTransform $r2;
        org.apache.batik.gvt.GraphicsNode $r1;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        $r1 = r0.<org.apache.batik.bridge.AbstractGraphicsNodeBridge: org.apache.batik.gvt.GraphicsNode node>;

        $r2 = interfaceinvoke $r1.<org.apache.batik.gvt.GraphicsNode: java.awt.geom.AffineTransform getGlobalTransform()>();

        return $r2;
    }

    public float getViewportWidth()
    {
        org.w3c.dom.Element $r1;
        float $f0;
        org.apache.batik.bridge.BridgeContext $r2;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        $r2 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $f0 = virtualinvoke $r2.<org.apache.batik.bridge.BridgeContext: float getBlockWidth(org.w3c.dom.Element)>($r1);

        return $f0;
    }

    public float getViewportHeight()
    {
        org.w3c.dom.Element $r1;
        float $f0;
        org.apache.batik.bridge.BridgeContext $r2;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        $r2 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.apache.batik.bridge.BridgeContext ctx>;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $f0 = virtualinvoke $r2.<org.apache.batik.bridge.BridgeContext: float getBlockHeight(org.w3c.dom.Element)>($r1);

        return $f0;
    }

    public float getFontSize()
    {
        org.w3c.dom.Element $r1;
        float $f0;
        org.apache.batik.bridge.AbstractGraphicsNodeBridge r0;
        org.apache.batik.css.engine.value.Value $r2;

        r0 := @this: org.apache.batik.bridge.AbstractGraphicsNodeBridge;

        $r1 = r0.<org.apache.batik.bridge.AnimatableSVGBridge: org.w3c.dom.Element e>;

        $r2 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>($r1, 22);

        $f0 = interfaceinvoke $r2.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        return $f0;
    }

    public abstract boolean isComposite();
}
