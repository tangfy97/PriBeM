public class com.hp.hpl.jena.sparql.resultset.TSVInput extends java.lang.Object
{
    static java.util.regex.Pattern pattern;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.resultset.TSVInput r0;

        r0 := @this: com.hp.hpl.jena.sparql.resultset.TSVInput;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static com.hp.hpl.jena.query.ResultSet fromTSV(java.io.InputStream)
    {
        com.hp.hpl.jena.graph.Node $r10;
        com.hp.hpl.jena.sparql.ARQException $r29, $r34;
        boolean $z0, $z1;
        java.lang.StringBuilder $r13, $r14, $r24, $r25, $r30, $r32;
        java.util.regex.Pattern $r7;
        org.apache.jena.riot.RiotException $r21;
        java.lang.String[] $r8;
        java.util.ArrayList $r27, $r28;
        int i0, i1, $i3;
        java.lang.String $r4, r9, $r15, $r17, $r26;
        com.hp.hpl.jena.sparql.resultset.ResultSetException $r31, $r33;
        java.io.IOException $r19;
        com.hp.hpl.jena.sparql.core.Var $r16;
        com.hp.hpl.jena.sparql.engine.ResultSetStream $r36;
        com.hp.hpl.jena.sparql.resultset.TSVInputIterator $r35;
        java.io.BufferedReader $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.BufferedReader asBufferedUTF8(java.io.InputStream)>(r0);

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>()>();

        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>()>();

     label01:
        $r4 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r4 != null goto label02;

        $r29 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r29.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("TSV Results malformed, input is empty (no header row)");

        throw $r29;

     label02:
        $z0 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label09;

        $r7 = <com.hp.hpl.jena.sparql.resultset.TSVInput: java.util.regex.Pattern pattern>;

        $i3 = (int) -1;

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>($r4, $i3);

        i0 = lengthof $r8;

        i1 = 0;

     label03:
        if i1 >= i0 goto label09;

        r9 = $r8[i1];

     label04:
        $r10 = staticinvoke <com.hp.hpl.jena.sparql.util.NodeFactoryExtra: com.hp.hpl.jena.graph.Node parseNode(java.lang.String)>(r9);

        if $r10 == null goto label05;

        $z1 = virtualinvoke $r10.<com.hp.hpl.jena.graph.Node: boolean isVariable()>();

        if $z1 != 0 goto label06;

     label05:
        $r31 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TSV Results malformed, not a variable: ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r15);

        throw $r31;

     label06:
        goto label08;

     label07:
        $r21 := @caughtexception;

        $r33 = new com.hp.hpl.jena.sparql.resultset.ResultSetException;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TSV Results malformed, variable names must begin with a ? in the header: ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<com.hp.hpl.jena.sparql.resultset.ResultSetException: void <init>(java.lang.String)>($r26);

        throw $r33;

     label08:
        $r16 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(com.hp.hpl.jena.graph.Node)>($r10);

        interfaceinvoke $r27.<java.util.List: boolean add(java.lang.Object)>($r16);

        $r17 = virtualinvoke $r16.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getName()>();

        interfaceinvoke $r28.<java.util.List: boolean add(java.lang.Object)>($r17);

        i1 = i1 + 1;

        goto label03;

     label09:
        goto label11;

     label10:
        $r19 := @caughtexception;

        $r34 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r34.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.Throwable)>($r19);

        throw $r34;

     label11:
        $r36 = new com.hp.hpl.jena.sparql.engine.ResultSetStream;

        $r35 = new com.hp.hpl.jena.sparql.resultset.TSVInputIterator;

        specialinvoke $r35.<com.hp.hpl.jena.sparql.resultset.TSVInputIterator: void <init>(java.io.BufferedReader,java.util.List)>($r1, $r27);

        specialinvoke $r36.<com.hp.hpl.jena.sparql.engine.ResultSetStream: void <init>(java.util.List,com.hp.hpl.jena.rdf.model.Model,java.util.Iterator)>($r28, null, $r35);

        return $r36;

        catch org.apache.jena.riot.RiotException from label04 to label06 with label07;
        catch java.io.IOException from label01 to label09 with label10;
    }

    public static boolean booleanFromTSV(java.io.InputStream)
    {
        java.lang.String $r2, $r3, $r4, $r5, $r10;
        com.hp.hpl.jena.sparql.ARQException $r6, $r11, $r12, $r13, $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.IOException $r14;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.io.BufferedReader $r1;
        java.io.InputStream r0;

        r0 := @parameter0: java.io.InputStream;

        $r1 = staticinvoke <org.apache.jena.atlas.io.IO: java.io.BufferedReader asBufferedUTF8(java.io.InputStream)>(r0);

     label1:
        $r2 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r2 != null goto label2;

        $r13 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r13.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("TSV Boolean Results malformed, input is empty");

        throw $r13;

     label2:
        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("?_askResult");

        if $z0 != 0 goto label3;

        $r12 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r12.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("TSV Boolean Results malformed, did not get expected ?_askResult header row");

        throw $r12;

     label3:
        $r4 = virtualinvoke $r1.<java.io.BufferedReader: java.lang.String readLine()>();

        if $r4 != null goto label4;

        $r11 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r11.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>("TSV Boolean Results malformed, unexpected end of input after header row");

        throw $r11;

     label4:
        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("true");

        if $z1 != 0 goto label5;

        $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("yes");

        if $z2 == 0 goto label6;

     label5:
        return 1;

     label6:
        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("false");

        if $z3 != 0 goto label7;

        $z4 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("no");

        if $z4 == 0 goto label8;

     label7:
        return 0;

     label8:
        $r6 = new com.hp.hpl.jena.sparql.ARQException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TSV Boolean Results malformed, expected one of - true yes false no - but got ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label9:
        $r14 := @caughtexception;

        $r15 = new com.hp.hpl.jena.sparql.ARQException;

        specialinvoke $r15.<com.hp.hpl.jena.sparql.ARQException: void <init>(java.lang.Throwable)>($r14);

        throw $r15;

        catch java.io.IOException from label1 to label5 with label9;
        catch java.io.IOException from label6 to label7 with label9;
        catch java.io.IOException from label8 to label9 with label9;
    }

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\t");

        <com.hp.hpl.jena.sparql.resultset.TSVInput: java.util.regex.Pattern pattern> = $r0;

        return;
    }
}
