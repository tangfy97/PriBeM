public class org.apache.cxf.transport.http.Headers extends java.lang.Object
{
    public static final java.lang.String KEY_HTTP_CONNECTION;
    public static final java.lang.String PROTOCOL_HEADERS_CONTENT_TYPE;
    public static final java.lang.String ADD_HEADERS_PROPERTY;
    public static final java.lang.String HTTP_HEADERS_SETCOOKIE;
    private static final java.util.logging.Logger LOG;
    private final org.apache.cxf.message.Message message;
    private final java.util.Map headers;

    public void <init>(org.apache.cxf.message.Message)
    {
        org.apache.cxf.transport.http.Headers r0;
        org.apache.cxf.message.Message r1;
        java.util.Map $r2;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        r1 := @parameter0: org.apache.cxf.message.Message;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.apache.cxf.transport.http.Headers: org.apache.cxf.message.Message message> = r1;

        $r2 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.Map getSetProtocolHeaders(org.apache.cxf.message.Message)>(r1);

        r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers> = $r2;

        return;
    }

    public void <init>()
    {
        org.apache.cxf.transport.http.Headers r0;
        java.util.TreeMap $r1;
        java.util.Comparator $r2;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        $r2 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r1.<java.util.TreeMap: void <init>(java.util.Comparator)>($r2);

        r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers> = $r1;

        r0.<org.apache.cxf.transport.http.Headers: org.apache.cxf.message.Message message> = null;

        return;
    }

    public java.util.Map headerMap()
    {
        org.apache.cxf.transport.http.Headers r0;
        java.util.Map $r1;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        $r1 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        return $r1;
    }

    public void writeSessionCookies(java.util.Map)
    {
        java.util.ArrayList $r4, $r11, r18;
        org.apache.cxf.transport.http.Cookie r19;
        java.util.Map $r1, $r5, r6, $r14;
        java.lang.String $r10, $r13, r17;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r3, $r8;
        java.util.Collection $r7;
        org.apache.cxf.transport.http.Headers r0;
        java.util.Set $r2;
        java.util.List r16;
        java.lang.Object $r9, $r12, $r15;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        r6 := @parameter0: java.util.Map;

        r16 = null;

        $r1 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r17 = (java.lang.String) $r12;

        $r13 = "Cookie";

        $z1 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17);

        if $z1 == 0 goto label2;

        $r14 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r17);

        r16 = (java.util.List) $r15;

        goto label3;

     label2:
        goto label1;

     label3:
        if r16 != null goto label4;

        $r11 = new java.util.ArrayList;

        specialinvoke $r11.<java.util.ArrayList: void <init>()>();

        r18 = $r11;

        goto label5;

     label4:
        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>(r16);

        r18 = $r4;

     label5:
        $r5 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Cookie", r18);

        $r7 = interfaceinvoke r6.<java.util.Map: java.util.Collection values()>();

        $r8 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label6:
        $z2 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.cxf.transport.http.Cookie) $r9;

        $r10 = virtualinvoke r19.<org.apache.cxf.transport.http.Cookie: java.lang.String requestCookieHeader()>();

        interfaceinvoke r18.<java.util.List: boolean add(java.lang.Object)>($r10);

        goto label6;

     label7:
        return;
    }

    void setFromClientPolicy(org.apache.cxf.transports.http.configuration.HTTPClientPolicy)
    {
        java.util.Map $r2, $r3, $r6, $r9, $r14, $r17, $r20, $r22, $r25, $r29, $r32;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.apache.cxf.transport.http.Headers r1;
        java.util.List $r5, $r8, $r11, $r16, $r19, $r21, $r24, $r28, $r31, $r34;
        org.apache.cxf.transports.http.configuration.ConnectionType $r26;
        java.lang.String $r4, $r7, $r10, $r13, $r15, $r18, $r23, $r27, $r30, $r33;
        org.apache.cxf.message.Message $r12;
        org.apache.cxf.transports.http.configuration.HTTPClientPolicy r0;

        r1 := @this: org.apache.cxf.transport.http.Headers;

        r0 := @parameter0: org.apache.cxf.transports.http.configuration.HTTPClientPolicy;

        if r0 != null goto label01;

        return;

     label01:
        $z0 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetCacheControl()>();

        if $z0 == 0 goto label02;

        $r32 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r33 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCacheControl()>();

        $r34 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r33);

        interfaceinvoke $r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Cache-Control", $r34);

     label02:
        $z1 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetHost()>();

        if $z1 == 0 goto label03;

        $r29 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r30 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getHost()>();

        $r31 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r30);

        interfaceinvoke $r29.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Host", $r31);

     label03:
        $z2 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetConnection()>();

        if $z2 == 0 goto label04;

        $r25 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r26 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: org.apache.cxf.transports.http.configuration.ConnectionType getConnection()>();

        $r27 = virtualinvoke $r26.<org.apache.cxf.transports.http.configuration.ConnectionType: java.lang.String value()>();

        $r28 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r27);

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Connection", $r28);

     label04:
        $z3 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetAccept()>();

        if $z3 == 0 goto label05;

        $r22 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r23 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAccept()>();

        $r24 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r23);

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Accept", $r24);

        goto label06;

     label05:
        $r2 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $z4 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>("Accept");

        if $z4 != 0 goto label06;

        $r20 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r21 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>("*/*");

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Accept", $r21);

     label06:
        $z10 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetAcceptEncoding()>();

        if $z10 == 0 goto label07;

        $r17 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r18 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptEncoding()>();

        $r19 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r18);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Accept-Encoding", $r19);

     label07:
        $z5 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetAcceptLanguage()>();

        if $z5 == 0 goto label08;

        $r14 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r15 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getAcceptLanguage()>();

        $r16 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r15);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Accept-Language", $r16);

     label08:
        $z6 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetContentType()>();

        if $z6 == 0 goto label09;

        $r12 = r1.<org.apache.cxf.transport.http.Headers: org.apache.cxf.message.Message message>;

        $r13 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getContentType()>();

        interfaceinvoke $r12.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>("Content-Type", $r13);

     label09:
        $z7 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetCookie()>();

        if $z7 == 0 goto label10;

        $r9 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r10 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getCookie()>();

        $r11 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r10);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Cookie", $r11);

     label10:
        $z8 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetBrowserType()>();

        if $z8 == 0 goto label11;

        $r6 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r7 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getBrowserType()>();

        $r8 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r7);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("BrowserType", $r8);

     label11:
        $z9 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: boolean isSetReferer()>();

        if $z9 == 0 goto label12;

        $r3 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r4 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPClientPolicy: java.lang.String getReferer()>();

        $r5 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r4);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Referer", $r5);

     label12:
        return;
    }

    void setFromServerPolicy(org.apache.cxf.transports.http.configuration.HTTPServerPolicy)
    {
        java.util.Map $r2, $r5, $r7, $r10, $r13, $r16, $r19;
        java.lang.String $r3, $r8, $r11, $r14, $r17, $r20;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        org.apache.cxf.transports.http.configuration.HTTPServerPolicy r0;
        org.apache.cxf.transport.http.Headers r1;
        java.util.List $r4, $r6, $r9, $r12, $r15, $r18, $r21;

        r1 := @this: org.apache.cxf.transport.http.Headers;

        r0 := @parameter0: org.apache.cxf.transports.http.configuration.HTTPServerPolicy;

        $z0 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetCacheControl()>();

        if $z0 == 0 goto label1;

        $r19 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r20 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getCacheControl()>();

        $r21 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r20);

        interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Cache-Control", $r21);

     label1:
        $z1 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetContentLocation()>();

        if $z1 == 0 goto label2;

        $r16 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r17 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentLocation()>();

        $r18 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r17);

        interfaceinvoke $r16.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Content-Location", $r18);

     label2:
        $z2 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetContentEncoding()>();

        if $z2 == 0 goto label3;

        $r13 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r14 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentEncoding()>();

        $r15 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r14);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Content-Encoding", $r15);

     label3:
        $z3 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetContentType()>();

        if $z3 == 0 goto label4;

        $r10 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r11 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getContentType()>();

        $r12 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r11);

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Content-Type", $r12);

     label4:
        $z4 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetServerType()>();

        if $z4 == 0 goto label5;

        $r7 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r8 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getServerType()>();

        $r9 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r8);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Server", $r9);

     label5:
        $z5 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetHonorKeepAlive()>();

        if $z5 == 0 goto label6;

        $z7 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isHonorKeepAlive()>();

        if $z7 != 0 goto label6;

        $r5 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r6 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>("close");

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Connection", $r6);

        goto label7;

     label6:
        $z6 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: boolean isSetKeepAliveParameters()>();

        if $z6 == 0 goto label7;

        $r2 = r1.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r3 = virtualinvoke r0.<org.apache.cxf.transports.http.configuration.HTTPServerPolicy: java.lang.String getKeepAliveParameters()>();

        $r4 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>($r3);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Keep-Alive", $r4);

     label7:
        return;
    }

    public void removeAuthorizationHeaders()
    {
        org.apache.cxf.transport.http.Headers r0;
        java.util.Map $r1, $r2;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        $r1 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>("Authorization");

        $r2 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>("Proxy-Authorization");

        return;
    }

    public void setAuthorization(java.lang.String)
    {
        java.util.List $r3;
        java.util.Map $r2;
        org.apache.cxf.transport.http.Headers r0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r3 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>(r1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Authorization", $r3);

        return;
    }

    public void setProxyAuthorization(java.lang.String)
    {
        java.util.List $r3;
        java.util.Map $r2;
        org.apache.cxf.transport.http.Headers r0;
        java.lang.String r1;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r3 = staticinvoke <org.apache.cxf.transport.http.Headers: java.util.List createMutableList(java.lang.String)>(r1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Proxy-Authorization", $r3);

        return;
    }

    public static java.util.Map getSetProtocolHeaders(org.apache.cxf.message.Message)
    {
        org.apache.cxf.message.Message r0;
        java.util.TreeMap $r5, $r7;
        java.util.Map $r3, $r4, r9;
        java.lang.Object $r2;
        java.lang.String $r1, $r10;
        java.util.Comparator $r6, $r8;
        boolean $z0;

        r0 := @parameter0: org.apache.cxf.message.Message;

        $r1 = <org.apache.cxf.message.Message: java.lang.String PROTOCOL_HEADERS>;

        $r2 = interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r1);

        $r3 = (java.util.Map) $r2;

        $r4 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.Map cast(java.util.Map)>($r3);

        r9 = $r4;

        if null != $r4 goto label1;

        $r7 = new java.util.TreeMap;

        $r8 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r7.<java.util.TreeMap: void <init>(java.util.Comparator)>($r8);

        r9 = $r7;

        goto label2;

     label1:
        $z0 = $r4 instanceof java.util.HashMap;

        if $z0 == 0 goto label2;

        $r5 = new java.util.TreeMap;

        $r6 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER>;

        specialinvoke $r5.<java.util.TreeMap: void <init>(java.util.Comparator)>($r6);

        interfaceinvoke $r5.<java.util.Map: void putAll(java.util.Map)>($r4);

        r9 = $r5;

     label2:
        $r10 = <org.apache.cxf.message.Message: java.lang.String PROTOCOL_HEADERS>;

        interfaceinvoke r0.<org.apache.cxf.message.Message: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r9);

        return r9;
    }

    public void readFromConnection(java.net.HttpURLConnection)
    {
        java.net.HttpURLConnection r0;
        java.util.Iterator $r6;
        org.apache.cxf.transport.http.Headers r2;
        java.util.Set $r5;
        java.util.Map $r1, $r3, $r4, $r9;
        java.lang.Object $r7, $r11;
        java.lang.String r8, $r10;
        boolean $z0;

        r2 := @this: org.apache.cxf.transport.http.Headers;

        r0 := @parameter0: java.net.HttpURLConnection;

        $r1 = virtualinvoke r0.<java.net.HttpURLConnection: java.util.Map getHeaderFields()>();

        $r3 = r2.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        interfaceinvoke $r3.<java.util.Map: void clear()>();

        $r4 = virtualinvoke r0.<java.net.HttpURLConnection: java.util.Map getHeaderFields()>();

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        $r6 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.String) $r7;

        if r8 == null goto label2;

        $r9 = r2.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r10 = staticinvoke <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String getHeaderKey(java.lang.String)>(r8);

        $r11 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11);

     label2:
        goto label1;

     label3:
        return;
    }

    private static java.util.List createMutableList(java.lang.String)
    {
        java.util.List $r3;
        java.lang.String[] $r1;
        java.lang.String r2;
        java.util.ArrayList $r0;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        $r1 = newarray (java.lang.String)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r3);

        return $r0;
    }

    void logProtocolHeaders(java.util.logging.Level)
    {
        java.util.logging.Level r12;
        java.util.Map $r1, $r6;
        java.lang.String r5, r11, $r18;
        boolean $z0, $z1;
        java.util.Iterator $r3, $r9;
        org.apache.cxf.transport.http.Headers r0;
        java.util.Set $r2;
        java.util.logging.Logger $r14;
        java.util.List r8;
        java.lang.Object $r4, $r7, $r10;
        java.lang.StringBuilder $r13, $r15, $r16, $r17;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        r12 := @parameter0: java.util.logging.Level;

        $r1 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.lang.String) $r4;

        $r6 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r8 = (java.util.List) $r7;

        $r9 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r10;

        $r14 = <org.apache.cxf.transport.http.Headers: java.util.logging.Logger LOG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(r12, $r18);

        goto label2;

     label3:
        goto label1;

     label4:
        return;
    }

    public void setProtocolHeadersInConnection(java.net.HttpURLConnection) throws java.io.IOException
    {
        java.net.HttpURLConnection r2;
        org.apache.cxf.transport.http.Headers r0;
        java.lang.String $r1;
        java.util.logging.Level $r3;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        r2 := @parameter0: java.net.HttpURLConnection;

        $r1 = virtualinvoke r0.<org.apache.cxf.transport.http.Headers: java.lang.String determineContentType()>();

        virtualinvoke r2.<java.net.HttpURLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("Content-Type", $r1);

        specialinvoke r0.<org.apache.cxf.transport.http.Headers: void transferProtocolHeadersToURLConnection(java.net.URLConnection)>(r2);

        $r3 = <java.util.logging.Level: java.util.logging.Level FINE>;

        virtualinvoke r0.<org.apache.cxf.transport.http.Headers: void logProtocolHeaders(java.util.logging.Level)>($r3);

        return;
    }

    public java.lang.String determineContentType()
    {
        int $i0, $i2;
        java.lang.String $r3, r6, $r10, r15;
        boolean $z0;
        org.apache.cxf.message.Message $r1, $r4;
        org.apache.cxf.transport.http.Headers r0;
        java.lang.Object $r2, $r5;
        java.lang.StringBuilder $r8, $r9, $r12, $r13, $r14, $r16, $r17;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        $r1 = r0.<org.apache.cxf.transport.http.Headers: org.apache.cxf.message.Message message>;

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("Content-Type");

        r15 = (java.lang.String) $r2;

        $r4 = r0.<org.apache.cxf.transport.http.Headers: org.apache.cxf.message.Message message>;

        $r3 = <org.apache.cxf.message.Message: java.lang.String ENCODING>;

        $r5 = interfaceinvoke $r4.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r3);

        r6 = (java.lang.String) $r5;

        if null == r15 goto label1;

        if r6 == null goto label3;

        $i0 = virtualinvoke r15.<java.lang.String: int indexOf(java.lang.String)>("charset=");

        $i2 = (int) -1;

        if $i0 != $i2 goto label3;

        $r10 = virtualinvoke r15.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r10.<java.lang.String: boolean contains(java.lang.CharSequence)>("multipart/related");

        if $z0 != 0 goto label3;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; charset=");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label1:
        if r6 == null goto label2;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("text/xml; charset=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r15 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        r15 = "text/xml";

     label3:
        return r15;
    }

    private void transferProtocolHeadersToURLConnection(java.net.URLConnection)
    {
        java.util.Map $r3, $r11;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.cxf.transport.http.Headers r0;
        java.util.Set $r4;
        java.util.List r13;
        java.lang.StringBuilder $r18;
        java.net.URLConnection r6;
        int $i0, $i1, $i2, i3;
        java.lang.String $r7, $r8, r10, $r14, $r17, $r19, $r21, r22;
        java.util.Iterator $r5, $r15;
        org.apache.cxf.message.Message $r1;
        java.lang.Object $r2, $r9, $r12, $r16, $r20;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        r6 := @parameter0: java.net.URLConnection;

        $r1 = r0.<org.apache.cxf.transport.http.Headers: org.apache.cxf.message.Message message>;

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("org.apache.cxf.http.add-headers");

        $z0 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r2);

        $r3 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r9 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r10 = (java.lang.String) $r9;

        $r11 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r13 = (java.util.List) $r12;

        $r14 = "Content-Type";

        $z1 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r10);

        if $z1 == 0 goto label02;

        goto label01;

     label02:
        if $z0 != 0 goto label03;

        $r17 = "Cookie";

        $z2 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r10);

        if $z2 == 0 goto label06;

     label03:
        $r15 = interfaceinvoke r13.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z4 = interfaceinvoke $r15.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label05;

        $r16 = interfaceinvoke $r15.<java.util.Iterator: java.lang.Object next()>();

        r22 = (java.lang.String) $r16;

        virtualinvoke r6.<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)>("Cookie", r22);

        goto label04;

     label05:
        goto label10;

     label06:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        i3 = 0;

     label07:
        $i0 = interfaceinvoke r13.<java.util.List: int size()>();

        if i3 >= $i0 goto label09;

        $r20 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(i3);

        $r21 = (java.lang.String) $r20;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $i1 = i3 + 1;

        $i2 = interfaceinvoke r13.<java.util.List: int size()>();

        if $i1 >= $i2 goto label08;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label08:
        i3 = i3 + 1;

        goto label07;

     label09:
        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r6.<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>(r10, $r19);

     label10:
        goto label01;

     label11:
        $r7 = virtualinvoke r6.<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)>("User-Agent");

        if $r7 != null goto label12;

        $r8 = staticinvoke <org.apache.cxf.version.Version: java.lang.String getCompleteVersionString()>();

        virtualinvoke r6.<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)>("User-Agent", $r8);

     label12:
        return;
    }

    protected void copyFromRequest(javax.servlet.http.HttpServletRequest)
    {
        java.util.Enumeration $r1, $r23;
        java.util.Map $r3, $r10, $r14, $r20, $r22, $r26;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.cxf.transport.http.Headers r2;
        java.util.logging.Logger $r5, $r7;
        java.util.List $r16, r28;
        java.lang.StringBuilder $r6, $r9, $r12;
        java.util.logging.Level $r4, $r8;
        java.util.ArrayList $r21;
        javax.servlet.http.HttpServletRequest r0;
        java.lang.String $r11, $r13, $r15, r18, $r19, r25;
        java.lang.Object $r17, $r24, $r27;

        r2 := @this: org.apache.cxf.transport.http.Headers;

        r0 := @parameter0: javax.servlet.http.HttpServletRequest;

        $r1 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.util.Enumeration getHeaderNames()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z0 == 0 goto label6;

        $r17 = interfaceinvoke $r1.<java.util.Enumeration: java.lang.Object nextElement()>();

        r18 = (java.lang.String) $r17;

        $r19 = staticinvoke <org.apache.cxf.helpers.HttpHeaderHelper: java.lang.String getHeaderKey(java.lang.String)>(r18);

        $r20 = r2.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $z3 = interfaceinvoke $r20.<java.util.Map: boolean containsKey(java.lang.Object)>($r19);

        if $z3 == 0 goto label2;

        $r26 = r2.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r27 = interfaceinvoke $r26.<java.util.Map: java.lang.Object get(java.lang.Object)>($r19);

        r28 = (java.util.List) $r27;

        goto label3;

     label2:
        $r21 = new java.util.ArrayList;

        specialinvoke $r21.<java.util.ArrayList: void <init>()>();

        r28 = $r21;

        $r22 = r2.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r21);

     label3:
        $r23 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.util.Enumeration getHeaders(java.lang.String)>(r18);

     label4:
        $z4 = interfaceinvoke $r23.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z4 == 0 goto label5;

        $r24 = interfaceinvoke $r23.<java.util.Enumeration: java.lang.Object nextElement()>();

        r25 = (java.lang.String) $r24;

        interfaceinvoke r28.<java.util.List: boolean add(java.lang.Object)>(r25);

        goto label4;

     label5:
        goto label1;

     label6:
        $r3 = r2.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>("Content-Type");

        if $z1 != 0 goto label7;

        $r14 = r2.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r15 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getContentType()>();

        $r16 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r15);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("Content-Type", $r16);

     label7:
        $r5 = <org.apache.cxf.transport.http.Headers: java.util.logging.Logger LOG>;

        $r4 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $z2 = virtualinvoke $r5.<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>($r4);

        if $z2 == 0 goto label8;

        $r7 = <org.apache.cxf.transport.http.Headers: java.util.logging.Logger LOG>;

        $r8 = <java.util.logging.Level: java.util.logging.Level FINE>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Request Headers: ");

        $r10 = r2.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.String toString()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r8, $r13);

     label8:
        return;
    }

    private java.lang.String getContentTypeFromMessage()
    {
        int $i0, $i2;
        java.lang.String r3, $r4, r7, $r8, $r13;
        boolean $z0;
        org.apache.cxf.message.Message $r1, $r5;
        org.apache.cxf.transport.http.Headers r0;
        java.lang.Object $r2, $r6;
        java.lang.StringBuilder $r10, $r11, $r12, $r14;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        $r1 = r0.<org.apache.cxf.transport.http.Headers: org.apache.cxf.message.Message message>;

        $r2 = interfaceinvoke $r1.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>("Content-Type");

        r3 = (java.lang.String) $r2;

        $r5 = r0.<org.apache.cxf.transport.http.Headers: org.apache.cxf.message.Message message>;

        $r4 = <org.apache.cxf.message.Message: java.lang.String ENCODING>;

        $r6 = interfaceinvoke $r5.<org.apache.cxf.message.Message: java.lang.Object get(java.lang.Object)>($r4);

        r7 = (java.lang.String) $r6;

        if null == r3 goto label1;

        if null == r7 goto label1;

        $i0 = virtualinvoke r3.<java.lang.String: int indexOf(java.lang.String)>("charset=");

        $i2 = (int) -1;

        if $i0 != $i2 goto label1;

        $r8 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("multipart/related");

        if $z0 != 0 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; charset=");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;

     label1:
        return r3;
    }

    private boolean isResponseBodyAvailable()
    {
        org.apache.cxf.transport.http.Headers r0;
        java.lang.NumberFormatException $r7;
        java.lang.Integer $r6;
        java.util.List r3;
        java.util.Map $r1;
        int $i0, $i1;
        java.lang.Object $r2, $r4;
        java.lang.String $r5;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        $r1 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("Content-Length");

        r3 = (java.util.List) $r2;

        if r3 == null goto label1;

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 == 1 goto label2;

     label1:
        return 1;

     label2:
        $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $r5 = (java.lang.String) $r4;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)>($r5);

        $i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        if $i1 != 0 goto label4;

     label3:
        return 0;

     label4:
        goto label6;

     label5:
        $r7 := @caughtexception;

     label6:
        return 1;

        catch java.lang.NumberFormatException from label2 to label3 with label5;
    }

    protected void copyToResponse(javax.servlet.http.HttpServletResponse)
    {
        java.util.Map $r2, $r5, $r17;
        int $i0, $i1, $i2, i3, $i4, i5;
        java.lang.String $r1, r4, $r10, $r11, $r13;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r19;
        org.apache.cxf.message.Message $r15;
        javax.servlet.http.HttpServletResponse r8;
        org.apache.cxf.transport.http.Headers r0;
        java.util.Set $r18;
        java.util.List r7;
        java.lang.Object $r3, $r6, $r9, $r14, $r16;
        java.lang.StringBuilder $r12;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        r8 := @parameter0: javax.servlet.http.HttpServletResponse;

        $r1 = specialinvoke r0.<org.apache.cxf.transport.http.Headers: java.lang.String getContentTypeFromMessage()>();

        $r2 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>("Content-Type");

        if $z0 != 0 goto label01;

        if $r1 == null goto label01;

        $z2 = specialinvoke r0.<org.apache.cxf.transport.http.Headers: boolean isResponseBodyAvailable()>();

        if $z2 == 0 goto label01;

        interfaceinvoke r8.<javax.servlet.http.HttpServletResponse: void setContentType(java.lang.String)>($r1);

     label01:
        $r15 = r0.<org.apache.cxf.transport.http.Headers: org.apache.cxf.message.Message message>;

        $r16 = interfaceinvoke $r15.<org.apache.cxf.message.Message: java.lang.Object getContextualProperty(java.lang.String)>("org.apache.cxf.http.add-headers");

        $z3 = staticinvoke <org.apache.cxf.message.MessageUtils: boolean isTrue(java.lang.Object)>($r16);

        $r17 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r18 = interfaceinvoke $r17.<java.util.Map: java.util.Set keySet()>();

        $r19 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label02:
        $z4 = interfaceinvoke $r19.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label11;

        $r3 = interfaceinvoke $r19.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r3;

        $r5 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r7 = (java.util.List) $r6;

        if $z3 != 0 goto label03;

        $r11 = "Set-Cookie";

        $z1 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z1 == 0 goto label06;

     label03:
        i3 = 0;

     label04:
        $i4 = interfaceinvoke r7.<java.util.List: int size()>();

        if i3 >= $i4 goto label05;

        $r9 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i3);

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        interfaceinvoke r8.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r4, $r10);

        i3 = i3 + 1;

        goto label04;

     label05:
        goto label10;

     label06:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        i5 = 0;

     label07:
        $i0 = interfaceinvoke r7.<java.util.List: int size()>();

        if i5 >= $i0 goto label09;

        $r14 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i5);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $i1 = i5 + 1;

        $i2 = interfaceinvoke r7.<java.util.List: int size()>();

        if $i1 >= $i2 goto label08;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label08:
        i5 = i5 + 1;

        goto label07;

     label09:
        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r8.<javax.servlet.http.HttpServletResponse: void addHeader(java.lang.String,java.lang.String)>(r4, $r13);

     label10:
        goto label02;

     label11:
        return;
    }

    void removeContentType()
    {
        java.util.Map $r2, $r4;
        org.apache.cxf.transport.http.Headers r0;
        java.lang.String $r1, $r3;
        boolean $z0;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        $r2 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r1 = <org.apache.cxf.transport.http.Headers: java.lang.String PROTOCOL_HEADERS_CONTENT_TYPE>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r3 = <org.apache.cxf.transport.http.Headers: java.lang.String PROTOCOL_HEADERS_CONTENT_TYPE>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

     label1:
        return;
    }

    public java.lang.String getAuthorization()
    {
        org.apache.cxf.transport.http.Headers r0;
        java.util.List r4;
        java.util.Map $r1, $r2;
        java.lang.Object $r3, $r5;
        java.lang.String $r6;
        boolean $z0;

        r0 := @this: org.apache.cxf.transport.http.Headers;

        $r1 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>("Authorization");

        if $z0 == 0 goto label1;

        $r2 = r0.<org.apache.cxf.transport.http.Headers: java.util.Map headers>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("Authorization");

        r4 = (java.util.List) $r3;

        $r5 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.lang.String) $r5;

        return $r6;

     label1:
        return null;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1;
        java.util.logging.Logger $r2;

        <org.apache.cxf.transport.http.Headers: java.lang.String HTTP_HEADERS_SETCOOKIE> = "Set-Cookie";

        <org.apache.cxf.transport.http.Headers: java.lang.String ADD_HEADERS_PROPERTY> = "org.apache.cxf.http.add-headers";

        <org.apache.cxf.transport.http.Headers: java.lang.String KEY_HTTP_CONNECTION> = "http.connection";

        $r0 = "Content-Type";

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        <org.apache.cxf.transport.http.Headers: java.lang.String PROTOCOL_HEADERS_CONTENT_TYPE> = $r1;

        $r2 = staticinvoke <org.apache.cxf.common.logging.LogUtils: java.util.logging.Logger getL7dLogger(java.lang.Class)>(class "Lorg/apache/cxf/transport/http/Headers;");

        <org.apache.cxf.transport.http.Headers: java.util.logging.Logger LOG> = $r2;

        return;
    }
}
