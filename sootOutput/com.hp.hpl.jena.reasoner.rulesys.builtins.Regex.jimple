public class com.hp.hpl.jena.reasoner.rulesys.builtins.Regex extends com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin
{

    public void <init>()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.Regex r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.Regex;

        specialinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.BaseBuiltin: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.Regex r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.Regex;

        return "regex";
    }

    public int getArgLength()
    {
        com.hp.hpl.jena.reasoner.rulesys.builtins.Regex r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.Regex;

        return 0;
    }

    public boolean bodyCall(com.hp.hpl.jena.graph.Node[], int, com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r2;
        com.hp.hpl.jena.graph.Node $r3, $r5, $r11, $r18;
        com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment $r9;
        com.hp.hpl.jena.reasoner.rulesys.BuiltinException $r12;
        java.util.regex.Matcher $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r4, $r6, $r10, $r15, $r17;
        boolean $z0, $z1;
        com.hp.hpl.jena.graph.Node[] r1;
        java.lang.StringBuilder $r13, $r14, $r16;
        java.util.regex.Pattern $r7;
        com.hp.hpl.jena.reasoner.rulesys.builtins.Regex r0;

        r0 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.Regex;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node[];

        i0 := @parameter1: int;

        r2 := @parameter2: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        if i0 >= 2 goto label1;

        $r12 = new com.hp.hpl.jena.reasoner.rulesys.BuiltinException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must have at least 2 arguments to ");

        $r15 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.Regex: java.lang.String getName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<com.hp.hpl.jena.reasoner.rulesys.BuiltinException: void <init>(com.hp.hpl.jena.reasoner.rulesys.Builtin,com.hp.hpl.jena.reasoner.rulesys.RuleContext,java.lang.String)>(r0, r2, $r17);

        throw $r12;

     label1:
        $r3 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.Regex: com.hp.hpl.jena.graph.Node getArg(int,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(0, r1, r2);

        $r4 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.Regex: java.lang.String getString(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>($r3, r2);

        $r5 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.Regex: com.hp.hpl.jena.graph.Node getArg(int,com.hp.hpl.jena.graph.Node[],com.hp.hpl.jena.reasoner.rulesys.RuleContext)>(1, r1, r2);

        $r6 = virtualinvoke r0.<com.hp.hpl.jena.reasoner.rulesys.builtins.Regex: java.lang.String getString(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.reasoner.rulesys.RuleContext)>($r5, r2);

        $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r4);

        $z0 = virtualinvoke $r8.<java.util.regex.Matcher: boolean matches()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        if i0 <= 2 goto label7;

        $r9 = interfaceinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.RuleContext: com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment getEnv()>();

        i6 = 0;

     label3:
        $i1 = i0 - 2;

        $i2 = virtualinvoke $r8.<java.util.regex.Matcher: int groupCount()>();

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2);

        if i6 >= $i3 goto label7;

        $i4 = i6 + 1;

        $r10 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String group(int)>($i4);

        if $r10 == null goto label4;

        $r18 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)>($r10);

        goto label5;

     label4:
        $r18 = staticinvoke <com.hp.hpl.jena.graph.NodeFactory: com.hp.hpl.jena.graph.Node createLiteral(java.lang.String)>("");

     label5:
        $i5 = i6 + 2;

        $r11 = r1[$i5];

        $z1 = interfaceinvoke $r9.<com.hp.hpl.jena.reasoner.rulesys.BindingEnvironment: boolean bind(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r11, $r18);

        if $z1 != 0 goto label6;

        return 0;

     label6:
        i6 = i6 + 1;

        goto label3;

     label7:
        return 1;
    }

    protected java.lang.String getString(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.reasoner.rulesys.RuleContext)
    {
        com.hp.hpl.jena.reasoner.rulesys.RuleContext r3;
        com.hp.hpl.jena.graph.Node r0;
        com.hp.hpl.jena.reasoner.rulesys.BuiltinException $r1;
        java.lang.StringBuilder $r4, $r6, $r7;
        java.lang.String $r5, $r8, $r9;
        com.hp.hpl.jena.reasoner.rulesys.builtins.Regex r2;
        boolean $z0;

        r2 := @this: com.hp.hpl.jena.reasoner.rulesys.builtins.Regex;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.reasoner.rulesys.RuleContext;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: boolean isLiteral()>();

        if $z0 == 0 goto label1;

        $r9 = virtualinvoke r0.<com.hp.hpl.jena.graph.Node: java.lang.String getLiteralLexicalForm()>();

        return $r9;

     label1:
        $r1 = new com.hp.hpl.jena.reasoner.rulesys.BuiltinException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r2.<com.hp.hpl.jena.reasoner.rulesys.builtins.Regex: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" takes only literal arguments");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<com.hp.hpl.jena.reasoner.rulesys.BuiltinException: void <init>(com.hp.hpl.jena.reasoner.rulesys.Builtin,com.hp.hpl.jena.reasoner.rulesys.RuleContext,java.lang.String)>(r2, r3, $r8);

        throw $r1;
    }
}
