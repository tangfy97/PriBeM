public abstract class com.mycila.inject.internal.guava.collect.ImmutableList extends com.mycila.inject.internal.guava.collect.ImmutableCollection implements java.util.List, java.util.RandomAccess
{

    public static com.mycila.inject.internal.guava.collect.ImmutableList of()
    {
        com.mycila.inject.internal.guava.collect.EmptyImmutableList $r0;

        $r0 = <com.mycila.inject.internal.guava.collect.EmptyImmutableList: com.mycila.inject.internal.guava.collect.EmptyImmutableList INSTANCE>;

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList of(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.SingletonImmutableList $r0;
        java.lang.Object r1;

        r1 := @parameter0: java.lang.Object;

        $r0 = new com.mycila.inject.internal.guava.collect.SingletonImmutableList;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.SingletonImmutableList: void <init>(java.lang.Object)>(r1);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList of(java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object r1, r2;
        com.mycila.inject.internal.guava.collect.ImmutableList $r3;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = r1;

        $r0[1] = r2;

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList construct(java.lang.Object[])>($r0);

        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object r1, r2, r3;
        com.mycila.inject.internal.guava.collect.ImmutableList $r4;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList construct(java.lang.Object[])>($r0);

        return $r4;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object r1, r2, r3, r4;
        com.mycila.inject.internal.guava.collect.ImmutableList $r5;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        $r0 = newarray (java.lang.Object)[4];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r0[3] = r4;

        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList construct(java.lang.Object[])>($r0);

        return $r5;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        java.lang.Object r1, r2, r3, r4, r5;
        com.mycila.inject.internal.guava.collect.ImmutableList $r6;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        $r0 = newarray (java.lang.Object)[5];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r0[3] = r4;

        $r0[4] = r5;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList construct(java.lang.Object[])>($r0);

        return $r6;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r7;
        java.lang.Object r1, r2, r3, r4, r5, r6;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        $r0 = newarray (java.lang.Object)[6];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r0[3] = r4;

        $r0[4] = r5;

        $r0[5] = r6;

        $r7 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList construct(java.lang.Object[])>($r0);

        return $r7;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r8;
        java.lang.Object r1, r2, r3, r4, r5, r6, r7;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        $r0 = newarray (java.lang.Object)[7];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r0[3] = r4;

        $r0[4] = r5;

        $r0[5] = r6;

        $r0[6] = r7;

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList construct(java.lang.Object[])>($r0);

        return $r8;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r9;
        java.lang.Object r1, r2, r3, r4, r5, r6, r7, r8;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        $r0 = newarray (java.lang.Object)[8];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r0[3] = r4;

        $r0[4] = r5;

        $r0[5] = r6;

        $r0[6] = r7;

        $r0[7] = r8;

        $r9 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList construct(java.lang.Object[])>($r0);

        return $r9;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r10;
        java.lang.Object r1, r2, r3, r4, r5, r6, r7, r8, r9;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        r9 := @parameter8: java.lang.Object;

        $r0 = newarray (java.lang.Object)[9];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r0[3] = r4;

        $r0[4] = r5;

        $r0[5] = r6;

        $r0[6] = r7;

        $r0[7] = r8;

        $r0[8] = r9;

        $r10 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList construct(java.lang.Object[])>($r0);

        return $r10;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r11;
        java.lang.Object r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        r9 := @parameter8: java.lang.Object;

        r10 := @parameter9: java.lang.Object;

        $r0 = newarray (java.lang.Object)[10];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r0[3] = r4;

        $r0[4] = r5;

        $r0[5] = r6;

        $r0[6] = r7;

        $r0[7] = r8;

        $r0[8] = r9;

        $r0[9] = r10;

        $r11 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList construct(java.lang.Object[])>($r0);

        return $r11;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        java.lang.Object[] $r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r12;
        java.lang.Object r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        r4 := @parameter3: java.lang.Object;

        r5 := @parameter4: java.lang.Object;

        r6 := @parameter5: java.lang.Object;

        r7 := @parameter6: java.lang.Object;

        r8 := @parameter7: java.lang.Object;

        r9 := @parameter8: java.lang.Object;

        r10 := @parameter9: java.lang.Object;

        r11 := @parameter10: java.lang.Object;

        $r0 = newarray (java.lang.Object)[11];

        $r0[0] = r1;

        $r0[1] = r2;

        $r0[2] = r3;

        $r0[3] = r4;

        $r0[4] = r5;

        $r0[5] = r6;

        $r0[6] = r7;

        $r0[7] = r8;

        $r0[8] = r9;

        $r0[9] = r10;

        $r0[10] = r11;

        $r12 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList construct(java.lang.Object[])>($r0);

        return $r12;
    }

    public static transient com.mycila.inject.internal.guava.collect.ImmutableList of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        com.mycila.inject.internal.guava.collect.ImmutableList $r14;
        int $i0, $i1, $i2;
        java.lang.Object r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        r5 := @parameter3: java.lang.Object;

        r6 := @parameter4: java.lang.Object;

        r7 := @parameter5: java.lang.Object;

        r8 := @parameter6: java.lang.Object;

        r9 := @parameter7: java.lang.Object;

        r10 := @parameter8: java.lang.Object;

        r11 := @parameter9: java.lang.Object;

        r12 := @parameter10: java.lang.Object;

        r13 := @parameter11: java.lang.Object;

        r0 := @parameter12: java.lang.Object[];

        $i0 = lengthof r0;

        $i1 = 12 + $i0;

        r1 = newarray (java.lang.Object)[$i1];

        r1[0] = r2;

        r1[1] = r3;

        r1[2] = r4;

        r1[3] = r5;

        r1[4] = r6;

        r1[5] = r7;

        r1[6] = r8;

        r1[7] = r9;

        r1[8] = r10;

        r1[9] = r11;

        r1[10] = r12;

        r1[11] = r13;

        $i2 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r1, 12, $i2);

        $r14 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList construct(java.lang.Object[])>(r1);

        return $r14;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList of(java.lang.Object[])
    {
        java.lang.Object[] r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r1;

        r0 := @parameter0: java.lang.Object[];

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList copyOf(java.lang.Object[])>(r0);

        return $r1;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList copyOf(java.lang.Iterable)
    {
        java.util.Iterator $r1;
        java.util.Collection $r2;
        com.mycila.inject.internal.guava.collect.ImmutableList $r3;
        java.lang.Iterable r0;
        boolean $z0;

        r0 := @parameter0: java.lang.Iterable;

        staticinvoke <com.mycila.inject.internal.guava.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = r0 instanceof java.util.Collection;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.Collections2: java.util.Collection cast(java.lang.Iterable)>(r0);

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList copyOf(java.util.Collection)>($r2);

        goto label2;

     label1:
        $r1 = interfaceinvoke r0.<java.lang.Iterable: java.util.Iterator iterator()>();

        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList copyOf(java.util.Iterator)>($r1);

     label2:
        return $r3;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList copyOf(java.util.Collection)
    {
        com.mycila.inject.internal.guava.collect.ImmutableCollection $r2;
        java.util.Collection r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r1, $r3, $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.util.Collection;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.ImmutableCollection;

        if $z0 == 0 goto label3;

        $r2 = (com.mycila.inject.internal.guava.collect.ImmutableCollection) r0;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableCollection: com.mycila.inject.internal.guava.collect.ImmutableList asList()>();

        $z1 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.ImmutableList: boolean isPartialView()>();

        if $z1 == 0 goto label1;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList copyFromCollection(java.util.Collection)>($r3);

        goto label2;

     label1:
        $r4 = $r3;

     label2:
        return $r4;

     label3:
        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList copyFromCollection(java.util.Collection)>(r0);

        return $r1;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList copyOf(java.util.Iterator)
    {
        java.util.Iterator r0;
        com.mycila.inject.internal.guava.collect.ImmutableList $r2;
        java.util.ArrayList $r1;

        r0 := @parameter0: java.util.Iterator;

        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: java.util.ArrayList newArrayList(java.util.Iterator)>(r0);

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList copyFromCollection(java.util.Collection)>($r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList copyOf(java.lang.Object[])
    {
        java.lang.Object[] r0, $r5;
        com.mycila.inject.internal.guava.collect.SingletonImmutableList $r1;
        com.mycila.inject.internal.guava.collect.ImmutableList $r3, $r6;
        int $i0;
        java.lang.Object $r2, $r4;

        r0 := @parameter0: java.lang.Object[];

        $i0 = lengthof r0;

        lookupswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r3 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList of()>();

        return $r3;

     label2:
        $r1 = new com.mycila.inject.internal.guava.collect.SingletonImmutableList;

        $r2 = r0[0];

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.SingletonImmutableList: void <init>(java.lang.Object)>($r2);

        return $r1;

     label3:
        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (java.lang.Object[]) $r4;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList construct(java.lang.Object[])>($r5);

        return $r6;
    }

    private static com.mycila.inject.internal.guava.collect.ImmutableList copyFromCollection(java.util.Collection)
    {
        java.lang.Object[] $r1;
        java.util.Collection r0;
        int $i0;
        com.mycila.inject.internal.guava.collect.SingletonImmutableList $r2;
        java.lang.Object $r3;
        com.mycila.inject.internal.guava.collect.ImmutableList $r4, $r5;

        r0 := @parameter0: java.util.Collection;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.lang.Object[] toArray()>();

        $i0 = lengthof $r1;

        lookupswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList of()>();

        return $r4;

     label2:
        $r2 = new com.mycila.inject.internal.guava.collect.SingletonImmutableList;

        $r3 = $r1[0];

        specialinvoke $r2.<com.mycila.inject.internal.guava.collect.SingletonImmutableList: void <init>(java.lang.Object)>($r3);

        return $r2;

     label3:
        $r5 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList construct(java.lang.Object[])>($r1);

        return $r5;
    }

    private static transient com.mycila.inject.internal.guava.collect.ImmutableList construct(java.lang.Object[])
    {
        java.lang.Object[] r0;
        int $i0, i1;
        com.mycila.inject.internal.guava.collect.RegularImmutableList $r1;
        java.lang.Object $r2;

        r0 := @parameter0: java.lang.Object[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label2;

        $r2 = r0[i1];

        staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableList: java.lang.Object checkElementNotNull(java.lang.Object,int)>($r2, i1);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r1 = new com.mycila.inject.internal.guava.collect.RegularImmutableList;

        specialinvoke $r1.<com.mycila.inject.internal.guava.collect.RegularImmutableList: void <init>(java.lang.Object[])>(r0);

        return $r1;
    }

    private static java.lang.Object checkElementNotNull(java.lang.Object, int)
    {
        int i0;
        java.lang.Object r0;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String $r5;
        java.lang.NullPointerException $r1;

        r0 := @parameter0: java.lang.Object;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r1 = new java.lang.NullPointerException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("at index ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>($r5);

        throw $r1;

     label1:
        return r0;
    }

    void <init>()
    {
        com.mycila.inject.internal.guava.collect.ImmutableList r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableCollection: void <init>()>();

        return;
    }

    public com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()
    {
        com.mycila.inject.internal.guava.collect.ImmutableList r0;
        com.mycila.inject.internal.guava.collect.UnmodifiableListIterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.UnmodifiableListIterator listIterator()>();

        return $r1;
    }

    public com.mycila.inject.internal.guava.collect.UnmodifiableListIterator listIterator()
    {
        com.mycila.inject.internal.guava.collect.ImmutableList r0;
        com.mycila.inject.internal.guava.collect.UnmodifiableListIterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.UnmodifiableListIterator listIterator(int)>(0);

        return $r1;
    }

    public abstract com.mycila.inject.internal.guava.collect.UnmodifiableListIterator listIterator(int);

    public abstract int indexOf(java.lang.Object);

    public abstract int lastIndexOf(java.lang.Object);

    public abstract com.mycila.inject.internal.guava.collect.ImmutableList subList(int, int);

    public final boolean addAll(int, java.util.Collection)
    {
        java.lang.UnsupportedOperationException $r0;
        java.util.Collection r2;
        int i0;
        com.mycila.inject.internal.guava.collect.ImmutableList r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        i0 := @parameter0: int;

        r2 := @parameter1: java.util.Collection;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public final java.lang.Object set(int, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        int i0;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.ImmutableList r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public final void add(int, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        int i0;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.ImmutableList r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public final java.lang.Object remove(int)
    {
        int i0;
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.ImmutableList r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        i0 := @parameter0: int;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableList asList()
    {
        com.mycila.inject.internal.guava.collect.ImmutableList r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        return r0;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableList reverse()
    {
        com.mycila.inject.internal.guava.collect.ImmutableList r1;
        com.mycila.inject.internal.guava.collect.ImmutableList$ReverseImmutableList $r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableList$ReverseImmutableList;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableList$ReverseImmutableList: void <init>(com.mycila.inject.internal.guava.collect.ImmutableList)>(r1);

        return $r0;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableList r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        r1 := @parameter0: java.lang.Object;

        $z0 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: boolean equalsImpl(java.util.List,java.lang.Object)>(r0, r1);

        return $z0;
    }

    public int hashCode()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.ImmutableList r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        $i0 = staticinvoke <com.mycila.inject.internal.guava.collect.Lists: int hashCodeImpl(java.util.List)>(r0);

        return $i0;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.InvalidObjectException
    {
        java.io.ObjectInputStream r2;
        java.io.InvalidObjectException $r0;
        com.mycila.inject.internal.guava.collect.ImmutableList r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        r2 := @parameter0: java.io.ObjectInputStream;

        $r0 = new java.io.InvalidObjectException;

        specialinvoke $r0.<java.io.InvalidObjectException: void <init>(java.lang.String)>("Use SerializedForm");

        throw $r0;
    }

    java.lang.Object writeReplace()
    {
        java.lang.Object[] $r2;
        com.mycila.inject.internal.guava.collect.ImmutableList r1;
        com.mycila.inject.internal.guava.collect.ImmutableList$SerializedForm $r0;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableList$SerializedForm;

        $r2 = virtualinvoke r1.<com.mycila.inject.internal.guava.collect.ImmutableList: java.lang.Object[] toArray()>();

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableList$SerializedForm: void <init>(java.lang.Object[])>($r2);

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableList$Builder builder()
    {
        com.mycila.inject.internal.guava.collect.ImmutableList$Builder $r0;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableList$Builder;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableList$Builder: void <init>()>();

        return $r0;
    }

    public volatile java.util.Iterator iterator()
    {
        com.mycila.inject.internal.guava.collect.ImmutableList r0;
        com.mycila.inject.internal.guava.collect.UnmodifiableIterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.UnmodifiableIterator iterator()>();

        return $r1;
    }

    public volatile java.util.List subList(int, int)
    {
        int i0, i1;
        com.mycila.inject.internal.guava.collect.ImmutableList r0, $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.ImmutableList subList(int,int)>(i0, i1);

        return $r1;
    }

    public volatile java.util.ListIterator listIterator(int)
    {
        int i0;
        com.mycila.inject.internal.guava.collect.ImmutableList r0;
        com.mycila.inject.internal.guava.collect.UnmodifiableListIterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.UnmodifiableListIterator listIterator(int)>(i0);

        return $r1;
    }

    public volatile java.util.ListIterator listIterator()
    {
        com.mycila.inject.internal.guava.collect.ImmutableList r0;
        com.mycila.inject.internal.guava.collect.UnmodifiableListIterator $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableList;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableList: com.mycila.inject.internal.guava.collect.UnmodifiableListIterator listIterator()>();

        return $r1;
    }
}
