public class org.apache.lucene.store.MMapDirectory extends org.apache.lucene.store.FSDirectory
{
    private boolean useUnmapHack;
    public static final int DEFAULT_MAX_BUFF;
    final int chunkSizePower;
    public static final boolean UNMAP_SUPPORTED;
    static final boolean $assertionsDisabled;

    public void <init>(java.io.File, org.apache.lucene.store.LockFactory) throws java.io.IOException
    {
        org.apache.lucene.store.MMapDirectory r0;
        org.apache.lucene.store.LockFactory r2;
        int $i0;
        java.io.File r1;

        r0 := @this: org.apache.lucene.store.MMapDirectory;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: org.apache.lucene.store.LockFactory;

        $i0 = <org.apache.lucene.store.MMapDirectory: int DEFAULT_MAX_BUFF>;

        specialinvoke r0.<org.apache.lucene.store.MMapDirectory: void <init>(java.io.File,org.apache.lucene.store.LockFactory,int)>(r1, r2, $i0);

        return;
    }

    public void <init>(java.io.File) throws java.io.IOException
    {
        org.apache.lucene.store.MMapDirectory r0;
        java.io.File r1;

        r0 := @this: org.apache.lucene.store.MMapDirectory;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<org.apache.lucene.store.MMapDirectory: void <init>(java.io.File,org.apache.lucene.store.LockFactory)>(r1, null);

        return;
    }

    public void <init>(java.io.File, org.apache.lucene.store.LockFactory, int) throws java.io.IOException
    {
        org.apache.lucene.store.MMapDirectory r0;
        java.lang.AssertionError $r3;
        java.lang.IllegalArgumentException $r4;
        java.io.File r1;
        org.apache.lucene.store.LockFactory r2;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;

        r0 := @this: org.apache.lucene.store.MMapDirectory;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: org.apache.lucene.store.LockFactory;

        i0 := @parameter2: int;

        specialinvoke r0.<org.apache.lucene.store.FSDirectory: void <init>(java.io.File,org.apache.lucene.store.LockFactory)>(r1, r2);

        $z0 = <org.apache.lucene.store.MMapDirectory: boolean UNMAP_SUPPORTED>;

        r0.<org.apache.lucene.store.MMapDirectory: boolean useUnmapHack> = $z0;

        if i0 > 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum chunk size for mmap must be >0");

        throw $r4;

     label1:
        $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        $i2 = 31 - $i1;

        r0.<org.apache.lucene.store.MMapDirectory: int chunkSizePower> = $i2;

        $z1 = <org.apache.lucene.store.MMapDirectory: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $i3 = r0.<org.apache.lucene.store.MMapDirectory: int chunkSizePower>;

        if $i3 < 0 goto label2;

        $i4 = r0.<org.apache.lucene.store.MMapDirectory: int chunkSizePower>;

        if $i4 <= 30 goto label3;

     label2:
        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        return;
    }

    public void setUseUnmap(boolean)
    {
        org.apache.lucene.store.MMapDirectory r0;
        java.lang.IllegalArgumentException $r1;
        boolean z0, $z1;

        r0 := @this: org.apache.lucene.store.MMapDirectory;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $z1 = <org.apache.lucene.store.MMapDirectory: boolean UNMAP_SUPPORTED>;

        if $z1 != 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unmap hack not supported on this platform!");

        throw $r1;

     label1:
        r0.<org.apache.lucene.store.MMapDirectory: boolean useUnmapHack> = z0;

        return;
    }

    public boolean getUseUnmap()
    {
        org.apache.lucene.store.MMapDirectory r0;
        boolean $z0;

        r0 := @this: org.apache.lucene.store.MMapDirectory;

        $z0 = r0.<org.apache.lucene.store.MMapDirectory: boolean useUnmapHack>;

        return $z0;
    }

    public final int getMaxChunkSize()
    {
        int $i0, $i1;
        org.apache.lucene.store.MMapDirectory r0;

        r0 := @this: org.apache.lucene.store.MMapDirectory;

        $i0 = r0.<org.apache.lucene.store.MMapDirectory: int chunkSizePower>;

        $i1 = 1 << $i0;

        return $i1;
    }

    public org.apache.lucene.store.IndexInput openInput(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException
    {
        java.lang.Throwable $r11;
        java.io.RandomAccessFile $r4;
        org.apache.lucene.store.MMapDirectory r0;
        java.io.File $r1, $r2;
        org.apache.lucene.store.MMapDirectory$MMapIndexInput $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String r3, $r10;
        org.apache.lucene.store.IOContext r12;

        r0 := @this: org.apache.lucene.store.MMapDirectory;

        r3 := @parameter0: java.lang.String;

        r12 := @parameter1: org.apache.lucene.store.IOContext;

        virtualinvoke r0.<org.apache.lucene.store.MMapDirectory: void ensureOpen()>();

        $r1 = new java.io.File;

        $r2 = virtualinvoke r0.<org.apache.lucene.store.MMapDirectory: java.io.File getDirectory()>();

        specialinvoke $r1.<java.io.File: void <init>(java.io.File,java.lang.String)>($r2, r3);

        $r4 = new java.io.RandomAccessFile;

        specialinvoke $r4.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r1, "r");

     label1:
        $r5 = new org.apache.lucene.store.MMapDirectory$MMapIndexInput;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MMapIndexInput(path=\"");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<org.apache.lucene.store.MMapDirectory$MMapIndexInput: void <init>(org.apache.lucene.store.MMapDirectory,java.lang.String,java.io.RandomAccessFile)>(r0, $r10, $r4);

     label2:
        virtualinvoke $r4.<java.io.RandomAccessFile: void close()>();

        return $r5;

     label3:
        $r11 := @caughtexception;

     label4:
        virtualinvoke $r4.<java.io.RandomAccessFile: void close()>();

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public org.apache.lucene.store.Directory$IndexInputSlicer createSlicer(java.lang.String, org.apache.lucene.store.IOContext) throws java.io.IOException
    {
        org.apache.lucene.store.MMapDirectory$MMapIndexInput r4;
        org.apache.lucene.store.MMapDirectory r0;
        org.apache.lucene.store.IndexInput $r3;
        java.lang.String r1;
        org.apache.lucene.store.IOContext r2;
        org.apache.lucene.store.MMapDirectory$1 $r5;

        r0 := @this: org.apache.lucene.store.MMapDirectory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.lucene.store.IOContext;

        $r3 = virtualinvoke r0.<org.apache.lucene.store.MMapDirectory: org.apache.lucene.store.IndexInput openInput(java.lang.String,org.apache.lucene.store.IOContext)>(r1, r2);

        r4 = (org.apache.lucene.store.MMapDirectory$MMapIndexInput) $r3;

        $r5 = new org.apache.lucene.store.MMapDirectory$1;

        specialinvoke $r5.<org.apache.lucene.store.MMapDirectory$1: void <init>(org.apache.lucene.store.MMapDirectory,org.apache.lucene.store.MMapDirectory$MMapIndexInput)>(r0, r4);

        return $r5;
    }

    java.nio.ByteBuffer[] map(java.io.RandomAccessFile, long, long) throws java.io.IOException
    {
        java.io.RandomAccessFile r2;
        org.apache.lucene.store.MMapDirectory r0;
        java.nio.channels.FileChannel$MapMode $r4;
        byte $b3, $b11;
        java.nio.ByteBuffer[] r1;
        java.lang.StringBuilder $r8, $r10, $r12;
        long l0, $l2, l5, $l7, $l10, l12, $l13, $l14, $l15, l17, $l19;
        int $i1, $i4, $i6, $i8, i9, $i16, i18, $i20, $i21;
        java.lang.String $r9, $r11;
        java.lang.IllegalArgumentException $r13;
        java.nio.channels.FileChannel $r3;
        java.nio.MappedByteBuffer $r5;

        r0 := @this: org.apache.lucene.store.MMapDirectory;

        r2 := @parameter0: java.io.RandomAccessFile;

        l12 := @parameter1: long;

        l0 := @parameter2: long;

        $i1 = r0.<org.apache.lucene.store.MMapDirectory: int chunkSizePower>;

        $l2 = l0 >>> $i1;

        $b3 = $l2 cmp 2147483647L;

        $i20 = (int) $b3;

        if $i20 < 0 goto label1;

        $r13 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RandomAccessFile too big for chunk size: ");

        $r9 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r13;

     label1:
        $i4 = r0.<org.apache.lucene.store.MMapDirectory: int chunkSizePower>;

        l5 = 1L << $i4;

        $i6 = r0.<org.apache.lucene.store.MMapDirectory: int chunkSizePower>;

        $l7 = l0 >>> $i6;

        $i8 = (int) $l7;

        i9 = $i8 + 1;

        r1 = newarray (java.nio.ByteBuffer)[i9];

        l17 = 0L;

        $r3 = virtualinvoke r2.<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()>();

        i18 = 0;

     label2:
        if i18 >= i9 goto label5;

        $l10 = l17 + l5;

        $b11 = l0 cmp $l10;

        $i21 = (int) $b11;

        if $i21 <= 0 goto label3;

        $l19 = l5;

        goto label4;

     label3:
        $l19 = l0 - l17;

     label4:
        $i16 = (int) $l19;

        $r4 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $l14 = l12 + l17;

        $l13 = (long) $i16;

        $r5 = virtualinvoke $r3.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r4, $l14, $l13);

        r1[i18] = $r5;

        $l15 = (long) $i16;

        l17 = l17 + $l15;

        i18 = i18 + 1;

        goto label2;

     label5:
        return r1;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r2;
        java.lang.Exception $r3;
        int $i0;
        java.lang.Class $r0, $r1;
        boolean $z0, $z1, $z2, z3;

        $r0 = class "Lorg/apache/lucene/store/MMapDirectory;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        <org.apache.lucene.store.MMapDirectory: boolean $assertionsDisabled> = $z2;

        $z1 = <org.apache.lucene.util.Constants: boolean JRE_IS_64BIT>;

        if $z1 == 0 goto label3;

        $i0 = 1073741824;

        goto label4;

     label3:
        $i0 = 268435456;

     label4:
        <org.apache.lucene.store.MMapDirectory: int DEFAULT_MAX_BUFF> = $i0;

     label5:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("sun.misc.Cleaner");

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.nio.DirectByteBuffer");

        $r2 = newarray (java.lang.Class)[0];

        virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("cleaner", $r2);

        z3 = 1;

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

        z3 = 0;

     label8:
        <org.apache.lucene.store.MMapDirectory: boolean UNMAP_SUPPORTED> = z3;

        return;

        catch java.lang.Exception from label5 to label6 with label7;
    }
}
