public class org.apache.http.conn.ssl.SSLSocketFactory extends java.lang.Object implements org.apache.http.conn.scheme.SchemeLayeredSocketFactory, org.apache.http.conn.scheme.LayeredSchemeSocketFactory, org.apache.http.conn.scheme.LayeredSocketFactory
{
    public static final java.lang.String TLS;
    public static final java.lang.String SSL;
    public static final java.lang.String SSLV2;
    public static final org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER;
    public static final org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;
    public static final org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER;
    private static final char[] EMPTY_PASSWORD;
    private final javax.net.ssl.SSLSocketFactory socketfactory;
    private final org.apache.http.conn.scheme.HostNameResolver nameResolver;
    private volatile org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier;

    public static org.apache.http.conn.ssl.SSLSocketFactory getSocketFactory() throws org.apache.http.conn.ssl.SSLInitializationException
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;

        $r0 = new org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createDefaultSSLContext()>();

        specialinvoke $r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext)>($r1);

        return $r0;
    }

    public static org.apache.http.conn.ssl.SSLSocketFactory getSystemSocketFactory() throws org.apache.http.conn.ssl.SSLInitializationException
    {
        org.apache.http.conn.ssl.SSLSocketFactory $r0;
        javax.net.ssl.SSLContext $r1;

        $r0 = new org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSystemSSLContext()>();

        specialinvoke $r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext)>($r1);

        return $r0;
    }

    private static javax.net.ssl.SSLContext createSSLContext(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, org.apache.http.conn.ssl.TrustStrategy) throws java.security.NoSuchAlgorithmException, java.security.KeyStoreException, java.security.UnrecoverableKeyException, java.security.KeyManagementException
    {
        javax.net.ssl.SSLContext $r16;
        javax.net.ssl.TrustManager r11;
        org.apache.http.conn.ssl.TrustManagerDecorator $r12;
        java.security.SecureRandom r9;
        int $i0, i1;
        java.lang.String $r0, r3, $r5, r14;
        boolean $z0;
        javax.net.ssl.TrustManagerFactory $r6;
        org.apache.http.conn.ssl.TrustStrategy r10;
        javax.net.ssl.KeyManagerFactory $r1;
        java.security.KeyStore r2, r7;
        javax.net.ssl.TrustManager[] $r8;
        javax.net.ssl.X509TrustManager $r13;
        char[] $r15;
        javax.net.ssl.KeyManager[] $r4;

        r14 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.KeyStore;

        r3 := @parameter2: java.lang.String;

        r7 := @parameter3: java.security.KeyStore;

        r9 := @parameter4: java.security.SecureRandom;

        r10 := @parameter5: org.apache.http.conn.ssl.TrustStrategy;

        if r14 != null goto label1;

        r14 = "TLS";

     label1:
        $r0 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r1 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>($r0);

        if r3 == null goto label2;

        $r15 = virtualinvoke r3.<java.lang.String: char[] toCharArray()>();

        goto label3;

     label2:
        $r15 = null;

     label3:
        virtualinvoke $r1.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>(r2, $r15);

        $r4 = virtualinvoke $r1.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        $r5 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r6 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r5);

        virtualinvoke $r6.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(r7);

        $r8 = virtualinvoke $r6.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        if $r8 == null goto label6;

        if r10 == null goto label6;

        i1 = 0;

     label4:
        $i0 = lengthof $r8;

        if i1 >= $i0 goto label6;

        r11 = $r8[i1];

        $z0 = r11 instanceof javax.net.ssl.X509TrustManager;

        if $z0 == 0 goto label5;

        $r12 = new org.apache.http.conn.ssl.TrustManagerDecorator;

        $r13 = (javax.net.ssl.X509TrustManager) r11;

        specialinvoke $r12.<org.apache.http.conn.ssl.TrustManagerDecorator: void <init>(javax.net.ssl.X509TrustManager,org.apache.http.conn.ssl.TrustStrategy)>($r13, r10);

        $r8[i1] = $r12;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        $r16 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(r14);

        virtualinvoke $r16.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r4, $r8, r9);

        return $r16;
    }

    private static javax.net.ssl.SSLContext createSystemSSLContext(java.lang.String, java.security.SecureRandom) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.KeyStoreException, java.security.cert.CertificateException, java.security.UnrecoverableKeyException, java.security.KeyManagementException
    {
        javax.net.ssl.SSLContext $r50;
        java.security.SecureRandom r16;
        boolean $z0, $z1, $z2;
        javax.net.ssl.TrustManagerFactory $r8, $r26, r37;
        java.security.KeyStore $r10, $r21, $r22, $r30, r38, r47;
        java.lang.Throwable $r31, $r32, $r33;
        java.lang.String $r0, $r1, $r2, $r3, $r5, $r7, $r9, $r11, $r13, $r14, $r15, $r18, $r19, $r27, $r28, r34, r35, r36, $r43, r44, r45;
        javax.net.ssl.KeyManagerFactory $r17, r42;
        java.io.FileInputStream $r12, $r20, $r29;
        java.io.File $r4, $r6, $r23, $r24, $r25, r40, r46;
        javax.net.ssl.TrustManager[] $r52;
        char[] $r39, $r41, $r48, $r49;
        javax.net.ssl.KeyManager[] $r51;

        r34 := @parameter0: java.lang.String;

        r16 := @parameter1: java.security.SecureRandom;

        if r34 != null goto label01;

        r34 = "TLS";

     label01:
        $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("ssl.TrustManagerFactory.algorithm");

        r35 = $r0;

        if $r0 != null goto label02;

        r35 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

     label02:
        $r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStoreType");

        r36 = $r1;

        if $r1 != null goto label03;

        r36 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

     label03:
        $r2 = "none";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r36);

        if $z0 == 0 goto label04;

        r37 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(r35);

        goto label24;

     label04:
        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStore");

        if $r3 == null goto label14;

        $r25 = new java.io.File;

        specialinvoke $r25.<java.io.File: void <init>(java.lang.String)>($r3);

        $r26 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>(r35);

        r37 = $r26;

        $r27 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStoreProvider");

        if $r27 == null goto label05;

        r38 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>(r36, $r27);

        goto label06;

     label05:
        r38 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r36);

     label06:
        $r28 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStorePassword");

        $r29 = new java.io.FileInputStream;

        specialinvoke $r29.<java.io.FileInputStream: void <init>(java.io.File)>($r25);

     label07:
        $r30 = r38;

        if $r28 == null goto label08;

        $r39 = virtualinvoke $r28.<java.lang.String: char[] toCharArray()>();

        goto label09;

     label08:
        $r39 = <org.apache.http.conn.ssl.SSLSocketFactory: char[] EMPTY_PASSWORD>;

     label09:
        virtualinvoke $r30.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r29, $r39);

     label10:
        virtualinvoke $r29.<java.io.FileInputStream: void close()>();

        goto label13;

     label11:
        $r33 := @caughtexception;

     label12:
        virtualinvoke $r29.<java.io.FileInputStream: void close()>();

        throw $r33;

     label13:
        virtualinvoke $r26.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>(r38);

        goto label24;

     label14:
        $r4 = new java.io.File;

        $r5 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.home");

        specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r5);

        $r6 = new java.io.File;

        specialinvoke $r6.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "lib/security/jssecacerts");

        $z1 = virtualinvoke $r6.<java.io.File: boolean exists()>();

        if $z1 != 0 goto label15;

        $r24 = new java.io.File;

        specialinvoke $r24.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "lib/security/cacerts");

        r40 = $r24;

        goto label16;

     label15:
        r40 = $r6;

     label16:
        $r7 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>();

        $r8 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r7);

        r37 = $r8;

        $r9 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

        $r10 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>($r9);

        $r11 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.trustStorePassword");

        $r12 = new java.io.FileInputStream;

        specialinvoke $r12.<java.io.FileInputStream: void <init>(java.io.File)>(r40);

     label17:
        if $r11 == null goto label18;

        $r41 = virtualinvoke $r11.<java.lang.String: char[] toCharArray()>();

        goto label19;

     label18:
        $r41 = null;

     label19:
        virtualinvoke $r10.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r12, $r41);

     label20:
        virtualinvoke $r12.<java.io.FileInputStream: void close()>();

        goto label23;

     label21:
        $r32 := @caughtexception;

     label22:
        virtualinvoke $r12.<java.io.FileInputStream: void close()>();

        throw $r32;

     label23:
        virtualinvoke $r8.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r10);

     label24:
        r42 = null;

        $r43 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("ssl.KeyManagerFactory.algorithm");

        r44 = $r43;

        if $r43 != null goto label25;

        r44 = staticinvoke <javax.net.ssl.KeyManagerFactory: java.lang.String getDefaultAlgorithm()>();

     label25:
        $r13 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStoreType");

        r45 = $r13;

        if $r13 != null goto label26;

        r45 = staticinvoke <java.security.KeyStore: java.lang.String getDefaultType()>();

     label26:
        $r14 = "none";

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r45);

        if $z2 == 0 goto label27;

        r42 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(r44);

        goto label40;

     label27:
        r46 = null;

        $r15 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStore");

        if $r15 == null goto label28;

        $r23 = new java.io.File;

        specialinvoke $r23.<java.io.File: void <init>(java.lang.String)>($r15);

        r46 = $r23;

     label28:
        if r46 == null goto label40;

        $r17 = staticinvoke <javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManagerFactory getInstance(java.lang.String)>(r44);

        r42 = $r17;

        $r18 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStoreProvider");

        if $r18 == null goto label29;

        r47 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String,java.lang.String)>(r45, $r18);

        goto label30;

     label29:
        r47 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r45);

     label30:
        $r19 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("javax.net.ssl.keyStorePassword");

        $r20 = new java.io.FileInputStream;

        specialinvoke $r20.<java.io.FileInputStream: void <init>(java.io.File)>(r46);

     label31:
        $r22 = r47;

        if $r19 == null goto label32;

        $r48 = virtualinvoke $r19.<java.lang.String: char[] toCharArray()>();

        goto label33;

     label32:
        $r48 = <org.apache.http.conn.ssl.SSLSocketFactory: char[] EMPTY_PASSWORD>;

     label33:
        virtualinvoke $r22.<java.security.KeyStore: void load(java.io.InputStream,char[])>($r20, $r48);

     label34:
        virtualinvoke $r20.<java.io.FileInputStream: void close()>();

        goto label37;

     label35:
        $r31 := @caughtexception;

     label36:
        virtualinvoke $r20.<java.io.FileInputStream: void close()>();

        throw $r31;

     label37:
        $r21 = r47;

        if $r19 == null goto label38;

        $r49 = virtualinvoke $r19.<java.lang.String: char[] toCharArray()>();

        goto label39;

     label38:
        $r49 = <org.apache.http.conn.ssl.SSLSocketFactory: char[] EMPTY_PASSWORD>;

     label39:
        virtualinvoke $r17.<javax.net.ssl.KeyManagerFactory: void init(java.security.KeyStore,char[])>($r21, $r49);

     label40:
        $r50 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>(r34);

        if r42 == null goto label41;

        $r51 = virtualinvoke r42.<javax.net.ssl.KeyManagerFactory: javax.net.ssl.KeyManager[] getKeyManagers()>();

        goto label42;

     label41:
        $r51 = null;

     label42:
        if r37 == null goto label43;

        $r52 = virtualinvoke r37.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>();

        goto label44;

     label43:
        $r52 = null;

     label44:
        virtualinvoke $r50.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>($r51, $r52, r16);

        return $r50;

        catch java.lang.Throwable from label07 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
        catch java.lang.Throwable from label17 to label20 with label21;
        catch java.lang.Throwable from label21 to label22 with label21;
        catch java.lang.Throwable from label31 to label34 with label35;
        catch java.lang.Throwable from label35 to label36 with label35;
    }

    private static javax.net.ssl.SSLContext createDefaultSSLContext() throws org.apache.http.conn.ssl.SSLInitializationException
    {
        javax.net.ssl.SSLContext $r0;
        org.apache.http.conn.ssl.SSLInitializationException $r2;
        java.lang.Exception $r1;

     label1:
        $r0 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSSLContext(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.ssl.TrustStrategy)>("TLS", null, null, null, null, null);

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        $r2 = new org.apache.http.conn.ssl.SSLInitializationException;

        specialinvoke $r2.<org.apache.http.conn.ssl.SSLInitializationException: void <init>(java.lang.String,java.lang.Throwable)>("Failure initializing default SSL context", $r1);

        throw $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private static javax.net.ssl.SSLContext createSystemSSLContext() throws org.apache.http.conn.ssl.SSLInitializationException
    {
        javax.net.ssl.SSLContext $r0;
        org.apache.http.conn.ssl.SSLInitializationException $r2;
        java.lang.Exception $r1;

     label1:
        $r0 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSystemSSLContext(java.lang.String,java.security.SecureRandom)>("TLS", null);

     label2:
        return $r0;

     label3:
        $r1 := @caughtexception;

        $r2 = new org.apache.http.conn.ssl.SSLInitializationException;

        specialinvoke $r2.<org.apache.http.conn.ssl.SSLInitializationException: void <init>(java.lang.String,java.lang.Throwable)>("Failure initializing default system SSL context", $r1);

        throw $r2;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public void <init>(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, org.apache.http.conn.scheme.HostNameResolver) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        javax.net.ssl.SSLContext $r6;
        java.security.KeyStore r2, r4;
        java.security.SecureRandom r5;
        org.apache.http.conn.scheme.HostNameResolver r7;
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.lang.String r1, r3;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.KeyStore;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.security.KeyStore;

        r5 := @parameter4: java.security.SecureRandom;

        r7 := @parameter5: org.apache.http.conn.scheme.HostNameResolver;

        $r6 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSSLContext(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.ssl.TrustStrategy)>(r1, r2, r3, r4, r5, null);

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext,org.apache.http.conn.scheme.HostNameResolver)>($r6, r7);

        return;
    }

    public void <init>(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, org.apache.http.conn.ssl.X509HostnameVerifier) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        javax.net.ssl.SSLContext $r6;
        java.security.KeyStore r2, r4;
        java.security.SecureRandom r5;
        org.apache.http.conn.ssl.X509HostnameVerifier r7;
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.lang.String r1, r3;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.KeyStore;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.security.KeyStore;

        r5 := @parameter4: java.security.SecureRandom;

        r7 := @parameter5: org.apache.http.conn.ssl.X509HostnameVerifier;

        $r6 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSSLContext(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.ssl.TrustStrategy)>(r1, r2, r3, r4, r5, null);

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext,org.apache.http.conn.ssl.X509HostnameVerifier)>($r6, r7);

        return;
    }

    public void <init>(java.lang.String, java.security.KeyStore, java.lang.String, java.security.KeyStore, java.security.SecureRandom, org.apache.http.conn.ssl.TrustStrategy, org.apache.http.conn.ssl.X509HostnameVerifier) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        javax.net.ssl.SSLContext $r7;
        org.apache.http.conn.ssl.TrustStrategy r6;
        java.security.KeyStore r2, r4;
        java.security.SecureRandom r5;
        org.apache.http.conn.ssl.X509HostnameVerifier r8;
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.lang.String r1, r3;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.security.KeyStore;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.security.KeyStore;

        r5 := @parameter4: java.security.SecureRandom;

        r6 := @parameter5: org.apache.http.conn.ssl.TrustStrategy;

        r8 := @parameter6: org.apache.http.conn.ssl.X509HostnameVerifier;

        $r7 = staticinvoke <org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLContext createSSLContext(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.ssl.TrustStrategy)>(r1, r2, r3, r4, r5, r6);

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext,org.apache.http.conn.ssl.X509HostnameVerifier)>($r7, r8);

        return;
    }

    public void <init>(java.security.KeyStore, java.lang.String, java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.X509HostnameVerifier $r4;
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.security.KeyStore r1, r3;
        java.lang.String r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.security.KeyStore;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.security.KeyStore;

        $r4 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.ssl.TrustStrategy,org.apache.http.conn.ssl.X509HostnameVerifier)>("TLS", r1, r2, r3, null, null, $r4);

        return;
    }

    public void <init>(java.security.KeyStore, java.lang.String) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.X509HostnameVerifier $r3;
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.security.KeyStore r1;
        java.lang.String r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.security.KeyStore;

        r2 := @parameter1: java.lang.String;

        $r3 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.ssl.TrustStrategy,org.apache.http.conn.ssl.X509HostnameVerifier)>("TLS", r1, r2, null, null, null, $r3);

        return;
    }

    public void <init>(java.security.KeyStore) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.security.KeyStore r1;
        org.apache.http.conn.ssl.X509HostnameVerifier $r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.security.KeyStore;

        $r2 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.ssl.TrustStrategy,org.apache.http.conn.ssl.X509HostnameVerifier)>("TLS", null, null, r1, null, null, $r2);

        return;
    }

    public void <init>(org.apache.http.conn.ssl.TrustStrategy, org.apache.http.conn.ssl.X509HostnameVerifier) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        org.apache.http.conn.ssl.X509HostnameVerifier r2;
        org.apache.http.conn.ssl.TrustStrategy r1;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: org.apache.http.conn.ssl.TrustStrategy;

        r2 := @parameter1: org.apache.http.conn.ssl.X509HostnameVerifier;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.ssl.TrustStrategy,org.apache.http.conn.ssl.X509HostnameVerifier)>("TLS", null, null, null, null, r1, r2);

        return;
    }

    public void <init>(org.apache.http.conn.ssl.TrustStrategy) throws java.security.NoSuchAlgorithmException, java.security.KeyManagementException, java.security.KeyStoreException, java.security.UnrecoverableKeyException
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        org.apache.http.conn.ssl.X509HostnameVerifier $r2;
        org.apache.http.conn.ssl.TrustStrategy r1;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: org.apache.http.conn.ssl.TrustStrategy;

        $r2 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(java.lang.String,java.security.KeyStore,java.lang.String,java.security.KeyStore,java.security.SecureRandom,org.apache.http.conn.ssl.TrustStrategy,org.apache.http.conn.ssl.X509HostnameVerifier)>("TLS", null, null, null, null, r1, $r2);

        return;
    }

    public void <init>(javax.net.ssl.SSLContext)
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        javax.net.ssl.SSLContext r1;
        org.apache.http.conn.ssl.X509HostnameVerifier $r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: javax.net.ssl.SSLContext;

        $r2 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        specialinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void <init>(javax.net.ssl.SSLContext,org.apache.http.conn.ssl.X509HostnameVerifier)>(r1, $r2);

        return;
    }

    public void <init>(javax.net.ssl.SSLContext, org.apache.http.conn.scheme.HostNameResolver)
    {
        javax.net.ssl.SSLContext r1;
        org.apache.http.conn.scheme.HostNameResolver r4;
        org.apache.http.conn.ssl.X509HostnameVerifier $r3;
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        javax.net.ssl.SSLSocketFactory $r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: javax.net.ssl.SSLContext;

        r4 := @parameter1: org.apache.http.conn.scheme.HostNameResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r2;

        $r3 = <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER>;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = $r3;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = r4;

        return;
    }

    public void <init>(javax.net.ssl.SSLContext, org.apache.http.conn.ssl.X509HostnameVerifier)
    {
        javax.net.ssl.SSLContext r1;
        org.apache.http.conn.ssl.X509HostnameVerifier r3;
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.lang.IllegalArgumentException $r4;
        javax.net.ssl.SSLSocketFactory $r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: javax.net.ssl.SSLContext;

        r3 := @parameter1: org.apache.http.conn.ssl.X509HostnameVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SSL context may not be null");

        throw $r4;

     label1:
        $r2 = virtualinvoke r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLSocketFactory getSocketFactory()>();

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = $r2;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = r3;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = null;

        return;
    }

    public void <init>(javax.net.ssl.SSLSocketFactory, org.apache.http.conn.ssl.X509HostnameVerifier)
    {
        org.apache.http.conn.ssl.X509HostnameVerifier r2;
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.lang.IllegalArgumentException $r3;
        javax.net.ssl.SSLSocketFactory r1;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: javax.net.ssl.SSLSocketFactory;

        r2 := @parameter1: org.apache.http.conn.ssl.X509HostnameVerifier;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r1 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("SSL socket factory may not be null");

        throw $r3;

     label1:
        r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory> = r1;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = r2;

        r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver> = null;

        return;
    }

    public java.net.Socket createSocket(org.apache.http.params.HttpParams) throws java.io.IOException
    {
        java.net.Socket $r2;
        org.apache.http.params.HttpParams r4;
        javax.net.ssl.SSLSocket r3;
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        javax.net.ssl.SSLSocketFactory $r1;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r4 := @parameter0: org.apache.http.params.HttpParams;

        $r1 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        r3 = (javax.net.ssl.SSLSocket) $r2;

        virtualinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>(r3);

        return r3;
    }

    public java.net.Socket createSocket() throws java.io.IOException
    {
        java.net.Socket $r2;
        javax.net.ssl.SSLSocket r3;
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        javax.net.ssl.SSLSocketFactory $r1;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r2 = virtualinvoke $r1.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

        r3 = (javax.net.ssl.SSLSocket) $r2;

        virtualinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>(r3);

        return r3;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.net.InetSocketAddress, java.net.InetSocketAddress, org.apache.http.params.HttpParams) throws java.io.IOException, java.net.UnknownHostException, org.apache.http.conn.ConnectTimeoutException
    {
        javax.net.ssl.SSLSocket r26;
        org.apache.http.conn.ssl.X509HostnameVerifier $r9, $r10;
        org.apache.http.conn.ssl.SSLSocketFactory r3;
        boolean $z0, $z1, $z2;
        org.apache.http.conn.HttpInetSocketAddress $r11;
        java.net.InetSocketAddress r0, r6;
        java.lang.Exception $r15;
        javax.net.ssl.SSLSocketFactory $r4, $r7;
        java.lang.StringBuilder $r19, $r20, $r21, $r22;
        java.net.Socket r2, r5, $r8, $r24;
        org.apache.http.conn.ConnectTimeoutException $r18;
        java.net.SocketTimeoutException $r17;
        int $i0, $i1, $i2;
        java.lang.String $r23, r25;
        java.io.IOException $r16;
        java.lang.IllegalArgumentException $r13, $r14;
        org.apache.http.params.HttpParams r1;
        org.apache.http.HttpHost $r12;

        r3 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r2 := @parameter0: java.net.Socket;

        r0 := @parameter1: java.net.InetSocketAddress;

        r6 := @parameter2: java.net.InetSocketAddress;

        r1 := @parameter3: org.apache.http.params.HttpParams;

        if r0 != null goto label01;

        $r14 = new java.lang.IllegalArgumentException;

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Remote address may not be null");

        throw $r14;

     label01:
        if r1 != null goto label02;

        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP parameters may not be null");

        throw $r13;

     label02:
        if r2 == null goto label03;

        $r24 = r2;

        goto label04;

     label03:
        $r4 = r3.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r24 = virtualinvoke $r4.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket()>();

     label04:
        r5 = $r24;

        if r6 == null goto label05;

        $z2 = staticinvoke <org.apache.http.params.HttpConnectionParams: boolean getSoReuseaddr(org.apache.http.params.HttpParams)>(r1);

        virtualinvoke $r24.<java.net.Socket: void setReuseAddress(boolean)>($z2);

        virtualinvoke $r24.<java.net.Socket: void bind(java.net.SocketAddress)>(r6);

     label05:
        $i0 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getConnectionTimeout(org.apache.http.params.HttpParams)>(r1);

        $i1 = staticinvoke <org.apache.http.params.HttpConnectionParams: int getSoTimeout(org.apache.http.params.HttpParams)>(r1);

     label06:
        virtualinvoke r5.<java.net.Socket: void setSoTimeout(int)>($i1);

        virtualinvoke r5.<java.net.Socket: void connect(java.net.SocketAddress,int)>(r0, $i0);

     label07:
        goto label09;

     label08:
        $r17 := @caughtexception;

        $r18 = new org.apache.http.conn.ConnectTimeoutException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Connect to ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timed out");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>($r23);

        throw $r18;

     label09:
        $z0 = r0 instanceof org.apache.http.conn.HttpInetSocketAddress;

        if $z0 == 0 goto label10;

        $r11 = (org.apache.http.conn.HttpInetSocketAddress) r0;

        $r12 = virtualinvoke $r11.<org.apache.http.conn.HttpInetSocketAddress: org.apache.http.HttpHost getHttpHost()>();

        r25 = virtualinvoke $r12.<org.apache.http.HttpHost: java.lang.String getHostName()>();

        goto label11;

     label10:
        r25 = virtualinvoke r0.<java.net.InetSocketAddress: java.lang.String getHostName()>();

     label11:
        $z1 = r5 instanceof javax.net.ssl.SSLSocket;

        if $z1 == 0 goto label12;

        r26 = (javax.net.ssl.SSLSocket) r5;

        goto label13;

     label12:
        $i2 = virtualinvoke r0.<java.net.InetSocketAddress: int getPort()>();

        $r7 = r3.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r8 = virtualinvoke $r7.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>(r5, r25, $i2, 1);

        r26 = (javax.net.ssl.SSLSocket) $r8;

        virtualinvoke r3.<org.apache.http.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>(r26);

     label13:
        $r9 = r3.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        if $r9 == null goto label21;

     label14:
        $r10 = r3.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        interfaceinvoke $r10.<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>(r25, r26);

     label15:
        goto label21;

     label16:
        $r16 := @caughtexception;

     label17:
        virtualinvoke r26.<javax.net.ssl.SSLSocket: void close()>();

     label18:
        goto label20;

     label19:
        $r15 := @caughtexception;

     label20:
        throw $r16;

     label21:
        return r26;

        catch java.net.SocketTimeoutException from label06 to label07 with label08;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.lang.Exception from label17 to label18 with label19;
    }

    public boolean isSecure(java.net.Socket) throws java.lang.IllegalArgumentException
    {
        java.net.Socket r0;
        org.apache.http.conn.ssl.SSLSocketFactory r4;
        java.lang.IllegalArgumentException $r1, $r2, $r3;
        boolean $z0, $z1;

        r4 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r0 := @parameter0: java.net.Socket;

        if r0 != null goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket may not be null");

        throw $r3;

     label1:
        $z0 = r0 instanceof javax.net.ssl.SSLSocket;

        if $z0 != 0 goto label2;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket not created by this factory");

        throw $r2;

     label2:
        $z1 = virtualinvoke r0.<java.net.Socket: boolean isClosed()>();

        if $z1 == 0 goto label3;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Socket is closed");

        throw $r1;

     label3:
        return 1;
    }

    public java.net.Socket createLayeredSocket(java.net.Socket, java.lang.String, int, org.apache.http.params.HttpParams) throws java.io.IOException, java.net.UnknownHostException
    {
        java.net.Socket r1, $r4;
        javax.net.ssl.SSLSocket r5;
        javax.net.ssl.SSLSocketFactory $r3;
        org.apache.http.conn.ssl.X509HostnameVerifier $r6, $r7;
        org.apache.http.params.HttpParams r8;
        int i0;
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.lang.String r2;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r8 := @parameter3: org.apache.http.params.HttpParams;

        $r3 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>(r1, r2, i0, 1);

        r5 = (javax.net.ssl.SSLSocket) $r4;

        virtualinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>(r5);

        $r6 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        if $r6 == null goto label1;

        $r7 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        interfaceinvoke $r7.<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>(r2, r5);

     label1:
        return r5;
    }

    public java.net.Socket createLayeredSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException, java.net.UnknownHostException
    {
        java.net.Socket r1, $r4;
        javax.net.ssl.SSLSocket r5;
        javax.net.ssl.SSLSocketFactory $r3;
        org.apache.http.conn.ssl.X509HostnameVerifier $r6, $r7;
        int i0;
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.lang.String r2;
        boolean z0;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r3 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: javax.net.ssl.SSLSocketFactory socketfactory>;

        $r4 = virtualinvoke $r3.<javax.net.ssl.SSLSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)>(r1, r2, i0, z0);

        r5 = (javax.net.ssl.SSLSocket) $r4;

        virtualinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: void prepareSocket(javax.net.ssl.SSLSocket)>(r5);

        $r6 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        if $r6 == null goto label1;

        $r7 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        interfaceinvoke $r7.<org.apache.http.conn.ssl.X509HostnameVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)>(r2, r5);

     label1:
        return r5;
    }

    public void setHostnameVerifier(org.apache.http.conn.ssl.X509HostnameVerifier)
    {
        org.apache.http.conn.ssl.SSLSocketFactory r1;
        org.apache.http.conn.ssl.X509HostnameVerifier r0;
        java.lang.IllegalArgumentException $r2;

        r1 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r0 := @parameter0: org.apache.http.conn.ssl.X509HostnameVerifier;

        if r0 != null goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Hostname verifier may not be null");

        throw $r2;

     label1:
        r1.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier> = r0;

        return;
    }

    public org.apache.http.conn.ssl.X509HostnameVerifier getHostnameVerifier()
    {
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        org.apache.http.conn.ssl.X509HostnameVerifier $r1;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        $r1 = r0.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier hostnameVerifier>;

        return $r1;
    }

    public java.net.Socket connectSocket(java.net.Socket, java.lang.String, int, java.net.InetAddress, int, org.apache.http.params.HttpParams) throws java.io.IOException, java.net.UnknownHostException, org.apache.http.conn.ConnectTimeoutException
    {
        org.apache.http.conn.HttpInetSocketAddress $r4;
        java.net.Socket r6, $r8;
        java.net.InetSocketAddress $r1, r10;
        java.net.InetAddress r0, r12;
        org.apache.http.conn.scheme.HostNameResolver $r9, $r11;
        org.apache.http.params.HttpParams r7;
        int i0, i1;
        org.apache.http.conn.ssl.SSLSocketFactory r2;
        java.lang.String r3;
        org.apache.http.HttpHost $r5;

        r2 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r6 := @parameter0: java.net.Socket;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r0 := @parameter3: java.net.InetAddress;

        i1 := @parameter4: int;

        r7 := @parameter5: org.apache.http.params.HttpParams;

        r10 = null;

        if r0 != null goto label1;

        if i1 <= 0 goto label3;

     label1:
        if i1 >= 0 goto label2;

        i1 = 0;

     label2:
        $r1 = new java.net.InetSocketAddress;

        specialinvoke $r1.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r0, i1);

        r10 = $r1;

     label3:
        $r11 = r2.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver>;

        if $r11 == null goto label4;

        $r9 = r2.<org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.scheme.HostNameResolver nameResolver>;

        r12 = interfaceinvoke $r9.<org.apache.http.conn.scheme.HostNameResolver: java.net.InetAddress resolve(java.lang.String)>(r3);

        goto label5;

     label4:
        r12 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>(r3);

     label5:
        $r4 = new org.apache.http.conn.HttpInetSocketAddress;

        $r5 = new org.apache.http.HttpHost;

        specialinvoke $r5.<org.apache.http.HttpHost: void <init>(java.lang.String,int)>(r3, i0);

        specialinvoke $r4.<org.apache.http.conn.HttpInetSocketAddress: void <init>(org.apache.http.HttpHost,java.net.InetAddress,int)>($r5, r12, i0);

        $r8 = virtualinvoke r2.<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket connectSocket(java.net.Socket,java.net.InetSocketAddress,java.net.InetSocketAddress,org.apache.http.params.HttpParams)>(r6, $r4, r10, r7);

        return $r8;
    }

    public java.net.Socket createSocket(java.net.Socket, java.lang.String, int, boolean) throws java.io.IOException, java.net.UnknownHostException
    {
        java.net.Socket r1, $r3;
        int i0;
        org.apache.http.conn.ssl.SSLSocketFactory r0;
        java.lang.String r2;
        boolean z0;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: java.net.Socket;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        $r3 = virtualinvoke r0.<org.apache.http.conn.ssl.SSLSocketFactory: java.net.Socket createLayeredSocket(java.net.Socket,java.lang.String,int,boolean)>(r1, r2, i0, z0);

        return $r3;
    }

    protected void prepareSocket(javax.net.ssl.SSLSocket) throws java.io.IOException
    {
        javax.net.ssl.SSLSocket r1;
        org.apache.http.conn.ssl.SSLSocketFactory r0;

        r0 := @this: org.apache.http.conn.ssl.SSLSocketFactory;

        r1 := @parameter0: javax.net.ssl.SSLSocket;

        return;
    }

    static void <clinit>()
    {
        org.apache.http.conn.ssl.StrictHostnameVerifier $r2;
        org.apache.http.conn.ssl.BrowserCompatHostnameVerifier $r1;
        org.apache.http.conn.ssl.AllowAllHostnameVerifier $r0;
        char[] $r4;
        java.lang.String $r3;

        <org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String SSLV2> = "SSLv2";

        <org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String SSL> = "SSL";

        <org.apache.http.conn.ssl.SSLSocketFactory: java.lang.String TLS> = "TLS";

        $r0 = new org.apache.http.conn.ssl.AllowAllHostnameVerifier;

        specialinvoke $r0.<org.apache.http.conn.ssl.AllowAllHostnameVerifier: void <init>()>();

        <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER> = $r0;

        $r1 = new org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;

        specialinvoke $r1.<org.apache.http.conn.ssl.BrowserCompatHostnameVerifier: void <init>()>();

        <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier BROWSER_COMPATIBLE_HOSTNAME_VERIFIER> = $r1;

        $r2 = new org.apache.http.conn.ssl.StrictHostnameVerifier;

        specialinvoke $r2.<org.apache.http.conn.ssl.StrictHostnameVerifier: void <init>()>();

        <org.apache.http.conn.ssl.SSLSocketFactory: org.apache.http.conn.ssl.X509HostnameVerifier STRICT_HOSTNAME_VERIFIER> = $r2;

        $r3 = "";

        $r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>();

        <org.apache.http.conn.ssl.SSLSocketFactory: char[] EMPTY_PASSWORD> = $r4;

        return;
    }
}
