public class org.apache.xpath.axes.WalkerFactory extends java.lang.Object
{
    static final boolean DEBUG_PATTERN_CREATION;
    static final boolean DEBUG_WALKER_CREATION;
    static final boolean DEBUG_ITERATOR_CREATION;
    public static final int BITS_COUNT;
    public static final int BITS_RESERVED;
    public static final int BIT_PREDICATE;
    public static final int BIT_ANCESTOR;
    public static final int BIT_ANCESTOR_OR_SELF;
    public static final int BIT_ATTRIBUTE;
    public static final int BIT_CHILD;
    public static final int BIT_DESCENDANT;
    public static final int BIT_DESCENDANT_OR_SELF;
    public static final int BIT_FOLLOWING;
    public static final int BIT_FOLLOWING_SIBLING;
    public static final int BIT_NAMESPACE;
    public static final int BIT_PARENT;
    public static final int BIT_PRECEDING;
    public static final int BIT_PRECEDING_SIBLING;
    public static final int BIT_SELF;
    public static final int BIT_FILTER;
    public static final int BIT_ROOT;
    public static final int BITMASK_TRAVERSES_OUTSIDE_SUBTREE;
    public static final int BIT_BACKWARDS_SELF;
    public static final int BIT_ANY_DESCENDANT_FROM_ROOT;
    public static final int BIT_NODETEST_ANY;
    public static final int BIT_MATCH_PATTERN;

    public void <init>()
    {
        org.apache.xpath.axes.WalkerFactory r0;

        r0 := @this: org.apache.xpath.axes.WalkerFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static org.apache.xpath.axes.AxesWalker loadOneWalker(org.apache.xpath.axes.WalkingIterator, org.apache.xpath.compiler.Compiler, int) throws javax.xml.transform.TransformerException
    {
        int i0, $i1, $i3;
        org.apache.xpath.axes.AxesWalker $r2, r3;
        org.apache.xpath.compiler.Compiler r0;
        org.apache.xpath.axes.WalkingIterator r1;

        r1 := @parameter0: org.apache.xpath.axes.WalkingIterator;

        r0 := @parameter1: org.apache.xpath.compiler.Compiler;

        i0 := @parameter2: int;

        r3 = null;

        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i0);

        $i3 = (int) -1;

        if $i1 == $i3 goto label1;

        $r2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: org.apache.xpath.axes.AxesWalker createDefaultWalker(org.apache.xpath.compiler.Compiler,int,org.apache.xpath.axes.WalkingIterator,int)>(r0, $i1, r1, 0);

        r3 = $r2;

        virtualinvoke $r2.<org.apache.xpath.axes.AxesWalker: void init(org.apache.xpath.compiler.Compiler,int,int)>(r0, i0, $i1);

     label1:
        return r3;
    }

    static org.apache.xpath.axes.AxesWalker loadWalkers(org.apache.xpath.axes.WalkingIterator, org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.Compiler r0;
        org.apache.xpath.axes.WalkingIterator r1;
        int i0, $i1, $i2, $i3, i4, $i6;
        org.apache.xpath.axes.AxesWalker $r2, r3, r4;

        r1 := @parameter0: org.apache.xpath.axes.WalkingIterator;

        r0 := @parameter1: org.apache.xpath.compiler.Compiler;

        i4 := @parameter2: int;

        i0 := @parameter3: int;

        r3 = null;

        r4 = null;

        $i1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: int analyze(org.apache.xpath.compiler.Compiler,int,int)>(r0, i4, i0);

        goto label4;

     label1:
        $r2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: org.apache.xpath.axes.AxesWalker createDefaultWalker(org.apache.xpath.compiler.Compiler,int,org.apache.xpath.axes.WalkingIterator,int)>(r0, i4, r1, $i1);

        virtualinvoke $r2.<org.apache.xpath.axes.AxesWalker: void init(org.apache.xpath.compiler.Compiler,int,int)>(r0, i4, $i2);

        virtualinvoke $r2.<org.apache.xpath.Expression: void exprSetParent(org.apache.xpath.ExpressionNode)>(r1);

        if null != r3 goto label2;

        r3 = $r2;

        goto label3;

     label2:
        virtualinvoke r4.<org.apache.xpath.axes.AxesWalker: void setNextWalker(org.apache.xpath.axes.AxesWalker)>($r2);

        virtualinvoke $r2.<org.apache.xpath.axes.AxesWalker: void setPrevWalker(org.apache.xpath.axes.AxesWalker)>(r4);

     label3:
        r4 = $r2;

        $i3 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getNextStepPos(int)>(i4);

        i4 = $i3;

        if $i3 >= 0 goto label4;

        goto label5;

     label4:
        $i2 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i4);

        $i6 = (int) -1;

        if $i6 != $i2 goto label1;

     label5:
        return r3;
    }

    public static boolean isSet(int, int)
    {
        int i0, i1, $i2;
        boolean $z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 & i1;

        if 0 == $i2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static void diagnoseIterator(java.lang.String, int, org.apache.xpath.compiler.Compiler)
    {
        org.apache.xpath.compiler.Compiler r2;
        java.lang.StringBuffer $r0, $r4, $r5, $r7, $r8, $r10, $r11, $r13;
        int i0;
        java.lang.String $r3, r6, $r9, $r12, $r14;
        java.io.PrintStream $r1;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.xpath.compiler.Compiler;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r3 = virtualinvoke r2.<org.apache.xpath.compiler.OpMap: java.lang.String toString()>();

        $r4 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>(i0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

        $r12 = staticinvoke <org.apache.xpath.axes.WalkerFactory: java.lang.String getAnalysisString(int)>(i0);

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r14);

        return;
    }

    public static org.apache.xml.dtm.DTMIterator newDTMIterator(org.apache.xpath.compiler.Compiler, int, boolean) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.axes.OneStepIterator $r5;
        org.apache.xpath.axes.AttributeIterator $r7;
        org.apache.xpath.axes.ChildIterator $r9;
        org.apache.xpath.axes.SelfIteratorNoPredicate $r10;
        org.apache.xpath.compiler.Compiler r0;
        org.apache.xpath.axes.WalkingIterator $r3;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2, z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        org.apache.xpath.axes.DescendantIterator $r4;
        org.apache.xpath.axes.LocPathIterator $r2, r11;
        org.apache.xpath.axes.WalkingIteratorSorted $r1;
        org.apache.xpath.axes.ChildTestIterator $r8;
        org.apache.xpath.axes.OneStepIteratorForward $r6;

        r0 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        z3 := @parameter2: boolean;

        $i1 = staticinvoke <org.apache.xpath.compiler.OpMap: int getFirstChildPos(int)>(i0);

        $i2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: int analyze(org.apache.xpath.compiler.Compiler,int,int)>(r0, $i1, 0);

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isOneStep(int)>($i2);

        if $z0 == 0 goto label01;

        $z11 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSelfOnly(int)>($i2);

        if $z11 == 0 goto label01;

        $z12 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isWild(int)>($i2);

        if $z12 == 0 goto label01;

        $z13 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean hasPredicate(int)>($i2);

        if $z13 != 0 goto label01;

        $r10 = new org.apache.xpath.axes.SelfIteratorNoPredicate;

        specialinvoke $r10.<org.apache.xpath.axes.SelfIteratorNoPredicate: void <init>(org.apache.xpath.compiler.Compiler,int,int)>(r0, i0, $i2);

        r11 = $r10;

        goto label10;

     label01:
        $z14 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksChildrenOnly(int)>($i2);

        if $z14 == 0 goto label03;

        if $z0 == 0 goto label03;

        $z9 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isWild(int)>($i2);

        if $z9 == 0 goto label02;

        $z10 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean hasPredicate(int)>($i2);

        if $z10 != 0 goto label02;

        $r9 = new org.apache.xpath.axes.ChildIterator;

        specialinvoke $r9.<org.apache.xpath.axes.ChildIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int)>(r0, i0, $i2);

        r11 = $r9;

        goto label10;

     label02:
        $r8 = new org.apache.xpath.axes.ChildTestIterator;

        specialinvoke $r8.<org.apache.xpath.axes.ChildTestIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int)>(r0, i0, $i2);

        r11 = $r8;

        goto label10;

     label03:
        if $z0 == 0 goto label04;

        $z8 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksAttributes(int)>($i2);

        if $z8 == 0 goto label04;

        $r7 = new org.apache.xpath.axes.AttributeIterator;

        specialinvoke $r7.<org.apache.xpath.axes.AttributeIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int)>(r0, i0, $i2);

        r11 = $r7;

        goto label10;

     label04:
        if $z0 == 0 goto label07;

        $z4 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksFilteredList(int)>($i2);

        if $z4 != 0 goto label07;

        $z5 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksNamespaces(int)>($i2);

        if $z5 != 0 goto label06;

        $z6 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksInDocOrder(int)>($i2);

        if $z6 != 0 goto label05;

        $z7 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>($i2, 4194304);

        if $z7 == 0 goto label06;

     label05:
        $r6 = new org.apache.xpath.axes.OneStepIteratorForward;

        specialinvoke $r6.<org.apache.xpath.axes.OneStepIteratorForward: void <init>(org.apache.xpath.compiler.Compiler,int,int)>(r0, i0, $i2);

        r11 = $r6;

        goto label10;

     label06:
        $r5 = new org.apache.xpath.axes.OneStepIterator;

        specialinvoke $r5.<org.apache.xpath.axes.OneStepIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int)>(r0, i0, $i2);

        r11 = $r5;

        goto label10;

     label07:
        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isOptimizableForDescendantIterator(org.apache.xpath.compiler.Compiler,int,int)>(r0, $i1, 0);

        if $z1 == 0 goto label08;

        $r4 = new org.apache.xpath.axes.DescendantIterator;

        specialinvoke $r4.<org.apache.xpath.axes.DescendantIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int)>(r0, i0, $i2);

        r11 = $r4;

        goto label10;

     label08:
        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isNaturalDocOrder(org.apache.xpath.compiler.Compiler,int,int,int)>(r0, $i1, 0, $i2);

        if $z2 == 0 goto label09;

        $r3 = new org.apache.xpath.axes.WalkingIterator;

        specialinvoke $r3.<org.apache.xpath.axes.WalkingIterator: void <init>(org.apache.xpath.compiler.Compiler,int,int,boolean)>(r0, i0, $i2, 1);

        r11 = $r3;

        goto label10;

     label09:
        $r1 = new org.apache.xpath.axes.WalkingIteratorSorted;

        specialinvoke $r1.<org.apache.xpath.axes.WalkingIteratorSorted: void <init>(org.apache.xpath.compiler.Compiler,int,int,boolean)>(r0, i0, $i2, 1);

        r11 = $r1;

     label10:
        $z15 = r11 instanceof org.apache.xpath.axes.LocPathIterator;

        if $z15 == 0 goto label11;

        $r2 = (org.apache.xpath.axes.LocPathIterator) r11;

        virtualinvoke $r2.<org.apache.xpath.axes.LocPathIterator: void setIsTopLevel(boolean)>(z3);

     label11:
        return r11;
    }

    public static int getAxisFromStep(org.apache.xpath.compiler.Compiler, int) throws javax.xml.transform.TransformerException
    {
        java.lang.Object[] $r2;
        int i0, $i1;
        java.lang.RuntimeException $r1;
        java.lang.String $r3, $r4;
        org.apache.xpath.compiler.Compiler r0;

        r0 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i0);

        tableswitch($i1)
        {
            case 22: goto label15;
            case 23: goto label15;
            case 24: goto label15;
            case 25: goto label15;
            case 26: goto label16;
            case 27: goto label16;
            case 28: goto label16;
            case 29: goto label16;
            case 30: goto label16;
            case 31: goto label16;
            case 32: goto label16;
            case 33: goto label16;
            case 34: goto label16;
            case 35: goto label16;
            case 36: goto label16;
            case 37: goto label07;
            case 38: goto label08;
            case 39: goto label09;
            case 40: goto label11;
            case 41: goto label13;
            case 42: goto label12;
            case 43: goto label01;
            case 44: goto label02;
            case 45: goto label05;
            case 46: goto label03;
            case 47: goto label04;
            case 48: goto label14;
            case 49: goto label06;
            case 50: goto label10;
            default: goto label16;
        };

     label01:
        return 6;

     label02:
        return 7;

     label03:
        return 11;

     label04:
        return 12;

     label05:
        return 10;

     label06:
        return 9;

     label07:
        return 0;

     label08:
        return 1;

     label09:
        return 2;

     label10:
        return 19;

     label11:
        return 3;

     label12:
        return 5;

     label13:
        return 4;

     label14:
        return 13;

     label15:
        return 20;

     label16:
        $r1 = new java.lang.RuntimeException;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        $r2[0] = $r3;

        $r4 = staticinvoke <org.apache.xpath.res.XPATHMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NULL_ERROR_HANDLER", $r2);

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    public static int getAnalysisBitFromAxes(int)
    {
        int i0, $i2;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label09;
            case 10: goto label10;
            case 11: goto label11;
            case 12: goto label12;
            case 13: goto label13;
            case 14: goto label14;
            case 15: goto label18;
            case 16: goto label15;
            case 17: goto label15;
            case 18: goto label15;
            case 19: goto label16;
            case 20: goto label17;
            default: goto label18;
        };

     label01:
        return 8192;

     label02:
        return 16384;

     label03:
        $i2 = (int) 32768;

        return $i2;

     label04:
        return 65536;

     label05:
        return 131072;

     label06:
        return 262144;

     label07:
        return 524288;

     label08:
        return 1048576;

     label09:
        return 2097152;

     label10:
        return 4194304;

     label11:
        return 8388608;

     label12:
        return 16777216;

     label13:
        return 33554432;

     label14:
        return 262144;

     label15:
        return 536870912;

     label16:
        return 134217728;

     label17:
        return 67108864;

     label18:
        return 67108864;
    }

    static boolean functionProximateOrContainsProximate(org.apache.xpath.compiler.Compiler, int)
    {
        org.apache.xpath.compiler.Compiler r0;
        int $i0, $i1, $i2, i3, $i4, $i5, i6, i7, i8, i9;
        boolean $z0;

        r0 := @parameter0: org.apache.xpath.compiler.Compiler;

        i7 := @parameter1: int;

        $i0 = i7 + 1;

        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i0);

        $i2 = i7 + $i1;

        i3 = $i2 - 1;

        $i4 = staticinvoke <org.apache.xpath.compiler.OpMap: int getFirstChildPos(int)>(i7);

        $i5 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i4);

        lookupswitch($i5)
        {
            case 1: goto label1;
            case 2: goto label1;
            default: goto label2;
        };

     label1:
        return 1;

     label2:
        i8 = $i4 + 1;

        i9 = i8;

        goto label5;

     label3:
        i6 = i9 + 2;

        virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i6);

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isProximateInnerExpr(org.apache.xpath.compiler.Compiler,int)>(r0, i6);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        i9 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getNextOpPos(int)>(i9);

     label5:
        if i9 < i3 goto label3;

        return 0;
    }

    static boolean isProximateInnerExpr(org.apache.xpath.compiler.Compiler, int)
    {
        org.apache.xpath.compiler.Compiler r0;
        int i0, $i1, i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i0);

        i2 = i0 + 2;

        tableswitch($i1)
        {
            case 5: goto label4;
            case 6: goto label4;
            case 7: goto label4;
            case 8: goto label4;
            case 9: goto label4;
            case 10: goto label6;
            case 11: goto label6;
            case 12: goto label6;
            case 13: goto label6;
            case 14: goto label6;
            case 15: goto label6;
            case 16: goto label6;
            case 17: goto label6;
            case 18: goto label6;
            case 19: goto label6;
            case 20: goto label6;
            case 21: goto label2;
            case 22: goto label2;
            case 23: goto label6;
            case 24: goto label6;
            case 25: goto label3;
            case 26: goto label1;
            case 27: goto label2;
            case 28: goto label2;
            default: goto label6;
        };

     label1:
        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isProximateInnerExpr(org.apache.xpath.compiler.Compiler,int)>(r0, i2);

        if $z0 == 0 goto label7;

        return 1;

     label2:
        goto label7;

     label3:
        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean functionProximateOrContainsProximate(org.apache.xpath.compiler.Compiler,int)>(r0, i0);

        if $z1 == 0 goto label7;

        return 1;

     label4:
        $i3 = staticinvoke <org.apache.xpath.compiler.OpMap: int getFirstChildPos(int)>($i1);

        $i4 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getNextOpPos(int)>($i3);

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isProximateInnerExpr(org.apache.xpath.compiler.Compiler,int)>(r0, $i3);

        if $z2 == 0 goto label5;

        return 1;

     label5:
        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isProximateInnerExpr(org.apache.xpath.compiler.Compiler,int)>(r0, $i4);

        if $z3 == 0 goto label7;

        return 1;

     label6:
        return 1;

     label7:
        return 0;
    }

    public static boolean mightBeProximate(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.compiler.Compiler r0;
        int i0, i1, i2, $i3, $i4, $i5, i6, $i7;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: org.apache.xpath.compiler.Compiler;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        tableswitch(i0)
        {
            case 22: goto label01;
            case 23: goto label01;
            case 24: goto label01;
            case 25: goto label01;
            default: goto label02;
        };

     label01:
        virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getArgLength(int)>(i1);

        goto label03;

     label02:
        virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getArgLengthOfStep(int)>(i1);

     label03:
        i6 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getFirstPredicateOpPos(int)>(i1);

        goto label13;

     label04:
        i2 = i6 + 2;

        $i3 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i2);

        tableswitch($i3)
        {
            case 5: goto label09;
            case 6: goto label09;
            case 7: goto label09;
            case 8: goto label09;
            case 9: goto label09;
            case 10: goto label11;
            case 11: goto label11;
            case 12: goto label11;
            case 13: goto label11;
            case 14: goto label11;
            case 15: goto label11;
            case 16: goto label11;
            case 17: goto label11;
            case 18: goto label11;
            case 19: goto label07;
            case 20: goto label11;
            case 21: goto label11;
            case 22: goto label05;
            case 23: goto label11;
            case 24: goto label11;
            case 25: goto label08;
            case 26: goto label11;
            case 27: goto label07;
            case 28: goto label06;
            default: goto label11;
        };

     label05:
        return 1;

     label06:
        goto label12;

     label07:
        return 1;

     label08:
        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean functionProximateOrContainsProximate(org.apache.xpath.compiler.Compiler,int)>(r0, i2);

        if $z0 == 0 goto label12;

        return 1;

     label09:
        $i4 = staticinvoke <org.apache.xpath.compiler.OpMap: int getFirstChildPos(int)>(i2);

        $i5 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getNextOpPos(int)>($i4);

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isProximateInnerExpr(org.apache.xpath.compiler.Compiler,int)>(r0, $i4);

        if $z1 == 0 goto label10;

        return 1;

     label10:
        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isProximateInnerExpr(org.apache.xpath.compiler.Compiler,int)>(r0, $i5);

        if $z2 == 0 goto label12;

        return 1;

     label11:
        return 1;

     label12:
        i6 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getNextOpPos(int)>(i6);

     label13:
        $i7 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i6);

        if 29 == $i7 goto label04;

        return 0;
    }

    private static boolean isOptimizableForDescendantIterator(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        java.lang.Object[] $r2;
        org.apache.xpath.compiler.Compiler r0;
        int $i0, $i1, i2, i3, i4, i5, $i6, $i7, $i9, $i11;
        java.lang.String $r3, $r4;
        boolean $z0, z1, z2, z3;
        java.lang.RuntimeException $r5;

        r0 := @parameter0: org.apache.xpath.compiler.Compiler;

        i3 := @parameter1: int;

        i2 := @parameter2: int;

        i4 = 0;

        z1 = 0;

        z2 = 0;

        z3 = 0;

        i5 = 1033;

        goto label18;

     label01:
        if i5 == 1033 goto label02;

        if i5 == 35 goto label02;

        return 0;

     label02:
        i4 = i4 + 1;

        if i4 <= 3 goto label03;

        return 0;

     label03:
        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean mightBeProximate(org.apache.xpath.compiler.Compiler,int,int)>(r0, i3, $i7);

        if $z0 == 0 goto label04;

        return 0;

     label04:
        tableswitch($i7)
        {
            case 22: goto label05;
            case 23: goto label05;
            case 24: goto label05;
            case 25: goto label05;
            case 26: goto label14;
            case 27: goto label14;
            case 28: goto label14;
            case 29: goto label14;
            case 30: goto label14;
            case 31: goto label14;
            case 32: goto label14;
            case 33: goto label14;
            case 34: goto label14;
            case 35: goto label14;
            case 36: goto label14;
            case 37: goto label05;
            case 38: goto label05;
            case 39: goto label05;
            case 40: goto label07;
            case 41: goto label10;
            case 42: goto label09;
            case 43: goto label05;
            case 44: goto label05;
            case 45: goto label05;
            case 46: goto label05;
            case 47: goto label05;
            case 48: goto label12;
            case 49: goto label05;
            case 50: goto label06;
            case 51: goto label05;
            case 52: goto label05;
            case 53: goto label05;
            default: goto label14;
        };

     label05:
        return 0;

     label06:
        if 1 == i4 goto label15;

        return 0;

     label07:
        if z3 != 0 goto label15;

        if z1 == 0 goto label08;

        if z2 != 0 goto label15;

     label08:
        return 0;

     label09:
        z3 = 1;

     label10:
        if 3 != i4 goto label11;

        return 0;

     label11:
        z1 = 1;

        goto label15;

     label12:
        if 1 == i4 goto label13;

        return 0;

     label13:
        z2 = 1;

        goto label15;

     label14:
        $r5 = new java.lang.RuntimeException;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i7);

        $r2[0] = $r3;

        $r4 = staticinvoke <org.apache.xpath.res.XPATHMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NULL_ERROR_HANDLER", $r2);

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r5;

     label15:
        i5 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getStepTestType(int)>(i3);

        $i6 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getNextStepPos(int)>(i3);

        if $i6 >= 0 goto label16;

        goto label19;

     label16:
        $i0 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i6);

        $i9 = (int) -1;

        if $i9 == $i0 goto label17;

        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.Compiler: int countPredicates(int)>(i3);

        if $i1 <= 0 goto label17;

        return 0;

     label17:
        i3 = $i6;

     label18:
        $i7 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i3);

        $i11 = (int) -1;

        if $i11 != $i7 goto label01;

     label19:
        return 1;
    }

    private static int analyze(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        java.lang.Object[] $r2;
        org.apache.xpath.compiler.Compiler r0;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, $i8, $i9, $i11, $i13;
        java.lang.String $r3, $r4;
        boolean $z0;
        java.lang.RuntimeException $r5;

        r0 := @parameter0: org.apache.xpath.compiler.Compiler;

        i5 := @parameter1: int;

        i4 := @parameter2: int;

        i6 = 0;

        i7 = 0;

        goto label25;

     label01:
        i6 = i6 + 1;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean analyzePredicate(org.apache.xpath.compiler.Compiler,int,int)>(r0, i5, $i0);

        if $z0 == 0 goto label02;

        i7 = i7 | 4096;

     label02:
        tableswitch($i0)
        {
            case 22: goto label03;
            case 23: goto label03;
            case 24: goto label03;
            case 25: goto label03;
            case 26: goto label22;
            case 27: goto label22;
            case 28: goto label22;
            case 29: goto label22;
            case 30: goto label22;
            case 31: goto label22;
            case 32: goto label22;
            case 33: goto label22;
            case 34: goto label22;
            case 35: goto label22;
            case 36: goto label22;
            case 37: goto label05;
            case 38: goto label06;
            case 39: goto label07;
            case 40: goto label09;
            case 41: goto label10;
            case 42: goto label11;
            case 43: goto label13;
            case 44: goto label14;
            case 45: goto label17;
            case 46: goto label15;
            case 47: goto label16;
            case 48: goto label18;
            case 49: goto label08;
            case 50: goto label04;
            case 51: goto label19;
            case 52: goto label20;
            case 53: goto label21;
            default: goto label22;
        };

     label03:
        i7 = i7 | 67108864;

        goto label23;

     label04:
        i7 = i7 | 134217728;

        goto label23;

     label05:
        i7 = i7 | 8192;

        goto label23;

     label06:
        i7 = i7 | 16384;

        goto label23;

     label07:
        $i11 = (int) 32768;

        i7 = i7 | $i11;

        goto label23;

     label08:
        i7 = i7 | 2097152;

        goto label23;

     label09:
        i7 = i7 | 65536;

        goto label23;

     label10:
        i7 = i7 | 131072;

        goto label23;

     label11:
        if 2 != i6 goto label12;

        if 134217728 != i7 goto label12;

        i7 = i7 | 536870912;

     label12:
        i7 = i7 | 262144;

        goto label23;

     label13:
        i7 = i7 | 524288;

        goto label23;

     label14:
        i7 = i7 | 1048576;

        goto label23;

     label15:
        i7 = i7 | 8388608;

        goto label23;

     label16:
        i7 = i7 | 16777216;

        goto label23;

     label17:
        i7 = i7 | 4194304;

        goto label23;

     label18:
        i7 = i7 | 33554432;

        goto label23;

     label19:
        i7 = i7 | -2147450880;

        goto label23;

     label20:
        i7 = i7 | -2147475456;

        goto label23;

     label21:
        i7 = i7 | -2143289344;

        goto label23;

     label22:
        $r5 = new java.lang.RuntimeException;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        $r2[0] = $r3;

        $r4 = staticinvoke <org.apache.xpath.res.XPATHMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NULL_ERROR_HANDLER", $r2);

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4);

        throw $r5;

     label23:
        $i8 = i5 + 3;

        $i9 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>($i8);

        if 1033 != $i9 goto label24;

        i7 = i7 | 1073741824;

     label24:
        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getNextStepPos(int)>(i5);

        i5 = $i1;

        if $i1 >= 0 goto label25;

        goto label26;

     label25:
        $i0 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i5);

        $i13 = (int) -1;

        if $i13 != $i0 goto label01;

     label26:
        $i2 = i6 & 255;

        $i3 = i7 | $i2;

        return $i3;
    }

    public static boolean isDownwardAxisOfMany(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if 5 == i0 goto label1;

        if 4 == i0 goto label1;

        if 6 == i0 goto label1;

        if 11 != i0 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    static org.apache.xpath.patterns.StepPattern loadSteps(org.apache.xpath.axes.MatchPatternIterator, org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        org.apache.xpath.Expression[] $r7;
        org.apache.xpath.compiler.Compiler r0;
        org.apache.xpath.patterns.StepPattern $r2, $r8, r11, r12, r13, r14, r15, $r16;
        byte $b11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, $i13;
        java.lang.String $r4, $r5;
        boolean $z0;
        org.apache.xpath.objects.XNumber $r6, $r10;
        org.apache.xpath.axes.MatchPatternIterator r1;
        org.apache.xpath.patterns.ContextMatchStepPattern $r17;

        r1 := @parameter0: org.apache.xpath.axes.MatchPatternIterator;

        r0 := @parameter1: org.apache.xpath.compiler.Compiler;

        i9 := @parameter2: int;

        i0 := @parameter3: int;

        r11 = null;

        r12 = null;

        r13 = null;

        $i1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: int analyze(org.apache.xpath.compiler.Compiler,int,int)>(r0, i9, i0);

        goto label04;

     label01:
        $r2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: org.apache.xpath.patterns.StepPattern createDefaultStepPattern(org.apache.xpath.compiler.Compiler,int,org.apache.xpath.axes.MatchPatternIterator,int,org.apache.xpath.patterns.StepPattern,org.apache.xpath.patterns.StepPattern)>(r0, i9, r1, $i1, r12, r13);

        r11 = $r2;

        if null != r12 goto label02;

        r12 = $r2;

        goto label03;

     label02:
        virtualinvoke $r2.<org.apache.xpath.patterns.StepPattern: void setRelativePathPattern(org.apache.xpath.patterns.StepPattern)>(r13);

     label03:
        r13 = $r2;

        $i3 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getNextStepPos(int)>(i9);

        i9 = $i3;

        if $i3 >= 0 goto label04;

        goto label05;

     label04:
        $i2 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i9);

        $i13 = (int) -1;

        if $i13 != $i2 goto label01;

     label05:
        i10 = 13;

        r14 = r11;

        r15 = r11;

        goto label14;

     label06:
        $i4 = virtualinvoke r15.<org.apache.xpath.patterns.StepPattern: int getAxis()>();

        virtualinvoke r15.<org.apache.xpath.patterns.StepPattern: void setAxis(int)>(i10);

        $i5 = virtualinvoke r15.<org.apache.xpath.patterns.NodeTest: int getWhatToShow()>();

        if $i5 == 2 goto label07;

        if $i5 != 4096 goto label13;

     label07:
        if $i5 != 2 goto label08;

        $b11 = 2;

        goto label09;

     label08:
        $b11 = 9;

     label09:
        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isDownwardAxisOfMany(int)>(i10);

        if $z0 == 0 goto label12;

        $r16 = new org.apache.xpath.patterns.StepPattern;

        $r4 = virtualinvoke r15.<org.apache.xpath.patterns.NodeTest: java.lang.String getNamespace()>();

        $r5 = virtualinvoke r15.<org.apache.xpath.patterns.NodeTest: java.lang.String getLocalName()>();

        specialinvoke $r16.<org.apache.xpath.patterns.StepPattern: void <init>(int,java.lang.String,java.lang.String,int,int)>($i5, $r4, $r5, $b11, 0);

        $r6 = virtualinvoke r15.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber getStaticScore()>();

        virtualinvoke r15.<org.apache.xpath.patterns.NodeTest: void setNamespace(java.lang.String)>(null);

        virtualinvoke r15.<org.apache.xpath.patterns.NodeTest: void setLocalName(java.lang.String)>("*");

        $r7 = virtualinvoke r15.<org.apache.xpath.patterns.StepPattern: org.apache.xpath.Expression[] getPredicates()>();

        virtualinvoke $r16.<org.apache.xpath.patterns.StepPattern: void setPredicates(org.apache.xpath.Expression[])>($r7);

        virtualinvoke r15.<org.apache.xpath.patterns.StepPattern: void setPredicates(org.apache.xpath.Expression[])>(null);

        virtualinvoke r15.<org.apache.xpath.patterns.NodeTest: void setWhatToShow(int)>(1);

        $r8 = virtualinvoke r15.<org.apache.xpath.patterns.StepPattern: org.apache.xpath.patterns.StepPattern getRelativePathPattern()>();

        virtualinvoke r15.<org.apache.xpath.patterns.StepPattern: void setRelativePathPattern(org.apache.xpath.patterns.StepPattern)>($r16);

        virtualinvoke $r16.<org.apache.xpath.patterns.StepPattern: void setRelativePathPattern(org.apache.xpath.patterns.StepPattern)>($r8);

        virtualinvoke $r16.<org.apache.xpath.patterns.NodeTest: void setStaticScore(org.apache.xpath.objects.XNumber)>($r6);

        $i7 = virtualinvoke r15.<org.apache.xpath.patterns.StepPattern: int getAxis()>();

        if 11 != $i7 goto label10;

        virtualinvoke r15.<org.apache.xpath.patterns.StepPattern: void setAxis(int)>(15);

        goto label11;

     label10:
        $i8 = virtualinvoke r15.<org.apache.xpath.patterns.StepPattern: int getAxis()>();

        if 4 != $i8 goto label11;

        virtualinvoke r15.<org.apache.xpath.patterns.StepPattern: void setAxis(int)>(5);

     label11:
        r15 = $r16;

        goto label13;

     label12:
        $i6 = virtualinvoke r15.<org.apache.xpath.patterns.StepPattern: int getAxis()>();

        if 3 != $i6 goto label13;

        virtualinvoke r15.<org.apache.xpath.patterns.StepPattern: void setAxis(int)>(2);

     label13:
        i10 = $i4;

        r14 = r15;

        r15 = virtualinvoke r15.<org.apache.xpath.patterns.StepPattern: org.apache.xpath.patterns.StepPattern getRelativePathPattern()>();

     label14:
        if null != r15 goto label06;

        if i10 >= 16 goto label15;

        $r17 = new org.apache.xpath.patterns.ContextMatchStepPattern;

        specialinvoke $r17.<org.apache.xpath.patterns.ContextMatchStepPattern: void <init>(int,int)>(i10, 13);

        $r10 = virtualinvoke r14.<org.apache.xpath.patterns.NodeTest: org.apache.xpath.objects.XNumber getStaticScore()>();

        virtualinvoke r14.<org.apache.xpath.patterns.StepPattern: void setRelativePathPattern(org.apache.xpath.patterns.StepPattern)>($r17);

        virtualinvoke r14.<org.apache.xpath.patterns.NodeTest: void setStaticScore(org.apache.xpath.objects.XNumber)>($r10);

        virtualinvoke $r17.<org.apache.xpath.patterns.NodeTest: void setStaticScore(org.apache.xpath.objects.XNumber)>($r10);

     label15:
        return r11;
    }

    private static org.apache.xpath.patterns.StepPattern createDefaultStepPattern(org.apache.xpath.compiler.Compiler, int, org.apache.xpath.axes.MatchPatternIterator, int, org.apache.xpath.patterns.StepPattern, org.apache.xpath.patterns.StepPattern) throws javax.xml.transform.TransformerException
    {
        java.lang.Object[] $r8;
        org.apache.xpath.Expression[] $r2;
        org.apache.xpath.compiler.Compiler r0;
        org.apache.xpath.patterns.StepPattern $r1, $r3, r12, r13, r14;
        byte b6, b7;
        org.apache.xpath.patterns.FunctionPattern $r6;
        int i0, $i1, i2, $i3, $i4, $i5;
        java.lang.String $r4, $r5, $r9, $r10;
        org.apache.xpath.Expression r15;
        java.lang.RuntimeException $r7;
        org.apache.xpath.axes.MatchPatternIterator r11;

        r0 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        r11 := @parameter2: org.apache.xpath.axes.MatchPatternIterator;

        i2 := @parameter3: int;

        r12 := @parameter4: org.apache.xpath.patterns.StepPattern;

        r13 := @parameter5: org.apache.xpath.patterns.StepPattern;

        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i0);

        staticinvoke <org.apache.xpath.compiler.OpMap: int getFirstChildPos(int)>(i0);

        virtualinvoke r0.<org.apache.xpath.compiler.Compiler: int getWhatToShow(int)>(i0);

        r14 = null;

        tableswitch($i1)
        {
            case 22: goto label01;
            case 23: goto label01;
            case 24: goto label01;
            case 25: goto label01;
            case 26: goto label19;
            case 27: goto label19;
            case 28: goto label19;
            case 29: goto label19;
            case 30: goto label19;
            case 31: goto label19;
            case 32: goto label19;
            case 33: goto label19;
            case 34: goto label19;
            case 35: goto label19;
            case 36: goto label19;
            case 37: goto label08;
            case 38: goto label10;
            case 39: goto label06;
            case 40: goto label09;
            case 41: goto label18;
            case 42: goto label17;
            case 43: goto label16;
            case 44: goto label15;
            case 45: goto label12;
            case 46: goto label14;
            case 47: goto label13;
            case 48: goto label11;
            case 49: goto label07;
            case 50: goto label05;
            default: goto label19;
        };

     label01:
        tableswitch($i1)
        {
            case 22: goto label02;
            case 23: goto label02;
            case 24: goto label02;
            case 25: goto label02;
            default: goto label03;
        };

     label02:
        r15 = virtualinvoke r0.<org.apache.xpath.compiler.Compiler: org.apache.xpath.Expression compile(int)>(i0);

        goto label04;

     label03:
        $i5 = i0 + 2;

        r15 = virtualinvoke r0.<org.apache.xpath.compiler.Compiler: org.apache.xpath.Expression compile(int)>($i5);

     label04:
        b6 = 20;

        b7 = 20;

        $r6 = new org.apache.xpath.patterns.FunctionPattern;

        specialinvoke $r6.<org.apache.xpath.patterns.FunctionPattern: void <init>(org.apache.xpath.Expression,int,int)>(r15, 20, 20);

        r14 = $r6;

        goto label20;

     label05:
        b6 = 19;

        b7 = 19;

        $r1 = new org.apache.xpath.patterns.StepPattern;

        specialinvoke $r1.<org.apache.xpath.patterns.StepPattern: void <init>(int,int,int)>(1280, 19, 19);

        r14 = $r1;

        goto label20;

     label06:
        b6 = 10;

        b7 = 2;

        goto label20;

     label07:
        b6 = 10;

        b7 = 9;

        goto label20;

     label08:
        b6 = 4;

        b7 = 0;

        goto label20;

     label09:
        b6 = 10;

        b7 = 3;

        goto label20;

     label10:
        b6 = 5;

        b7 = 1;

        goto label20;

     label11:
        b6 = 13;

        b7 = 13;

        goto label20;

     label12:
        b6 = 3;

        b7 = 10;

        goto label20;

     label13:
        b6 = 7;

        b7 = 12;

        goto label20;

     label14:
        b6 = 6;

        b7 = 11;

        goto label20;

     label15:
        b6 = 12;

        b7 = 7;

        goto label20;

     label16:
        b6 = 11;

        b7 = 6;

        goto label20;

     label17:
        b6 = 1;

        b7 = 5;

        goto label20;

     label18:
        b6 = 0;

        b7 = 4;

        goto label20;

     label19:
        $r7 = new java.lang.RuntimeException;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        $r8[0] = $r9;

        $r10 = staticinvoke <org.apache.xpath.res.XPATHMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NULL_ERROR_HANDLER", $r8);

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label20:
        if null != r14 goto label21;

        $i4 = virtualinvoke r0.<org.apache.xpath.compiler.Compiler: int getWhatToShow(int)>(i0);

        $r3 = new org.apache.xpath.patterns.StepPattern;

        $r4 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: java.lang.String getStepNS(int)>(i0);

        $r5 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: java.lang.String getStepLocalName(int)>(i0);

        specialinvoke $r3.<org.apache.xpath.patterns.StepPattern: void <init>(int,java.lang.String,java.lang.String,int,int)>($i4, $r4, $r5, b6, b7);

        r14 = $r3;

     label21:
        $i3 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getFirstPredicateOpPos(int)>(i0);

        $r2 = virtualinvoke r0.<org.apache.xpath.compiler.Compiler: org.apache.xpath.Expression[] getCompiledPredicates(int)>($i3);

        virtualinvoke r14.<org.apache.xpath.patterns.StepPattern: void setPredicates(org.apache.xpath.Expression[])>($r2);

        return r14;
    }

    static boolean analyzePredicate(org.apache.xpath.compiler.Compiler, int, int) throws javax.xml.transform.TransformerException
    {
        int i0, i1, $i2, $i3;
        org.apache.xpath.compiler.Compiler r0;
        boolean $z0;

        r0 := @parameter0: org.apache.xpath.compiler.Compiler;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        tableswitch(i0)
        {
            case 22: goto label1;
            case 23: goto label1;
            case 24: goto label1;
            case 25: goto label1;
            default: goto label2;
        };

     label1:
        virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getArgLength(int)>(i1);

        goto label3;

     label2:
        virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getArgLengthOfStep(int)>(i1);

     label3:
        $i2 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getFirstPredicateOpPos(int)>(i1);

        $i3 = virtualinvoke r0.<org.apache.xpath.compiler.Compiler: int countPredicates(int)>($i2);

        if $i3 <= 0 goto label4;

        $z0 = 1;

        goto label5;

     label4:
        $z0 = 0;

     label5:
        return $z0;
    }

    private static org.apache.xpath.axes.AxesWalker createDefaultWalker(org.apache.xpath.compiler.Compiler, int, org.apache.xpath.axes.WalkingIterator, int)
    {
        boolean z0;
        org.apache.xpath.axes.ReverseAxesWalker $r26, $r27, $r35, $r36, $r37;
        java.lang.Object[] $r20;
        org.apache.xpath.compiler.Compiler r0;
        org.apache.xpath.axes.WalkingIterator r2;
        int i0, $i1, i2, $i3, $i4, $i6, $i8;
        java.lang.String $r3, $r4, $r21, $r22;
        org.apache.xpath.axes.FilterExprWalker $r24;
        java.lang.RuntimeException $r39;
        org.apache.xpath.axes.AxesWalker r23, $r25, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r38;

        r0 := @parameter0: org.apache.xpath.compiler.Compiler;

        i0 := @parameter1: int;

        r2 := @parameter2: org.apache.xpath.axes.WalkingIterator;

        i2 := @parameter3: int;

        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i0);

        z0 = 0;

        tableswitch($i1)
        {
            case 22: goto label01;
            case 23: goto label01;
            case 24: goto label01;
            case 25: goto label01;
            case 26: goto label16;
            case 27: goto label16;
            case 28: goto label16;
            case 29: goto label16;
            case 30: goto label16;
            case 31: goto label16;
            case 32: goto label16;
            case 33: goto label16;
            case 34: goto label16;
            case 35: goto label16;
            case 36: goto label16;
            case 37: goto label03;
            case 38: goto label04;
            case 39: goto label05;
            case 40: goto label07;
            case 41: goto label08;
            case 42: goto label09;
            case 43: goto label10;
            case 44: goto label11;
            case 45: goto label14;
            case 46: goto label12;
            case 47: goto label13;
            case 48: goto label15;
            case 49: goto label06;
            case 50: goto label02;
            default: goto label16;
        };

     label01:
        $r24 = new org.apache.xpath.axes.FilterExprWalker;

        specialinvoke $r24.<org.apache.xpath.axes.FilterExprWalker: void <init>(org.apache.xpath.axes.WalkingIterator)>(r2);

        r23 = $r24;

        z0 = 1;

        goto label17;

     label02:
        $r25 = new org.apache.xpath.axes.AxesWalker;

        specialinvoke $r25.<org.apache.xpath.axes.AxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r2, 19);

        r23 = $r25;

        goto label17;

     label03:
        $r26 = new org.apache.xpath.axes.ReverseAxesWalker;

        specialinvoke $r26.<org.apache.xpath.axes.ReverseAxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r2, 0);

        r23 = $r26;

        goto label17;

     label04:
        $r27 = new org.apache.xpath.axes.ReverseAxesWalker;

        specialinvoke $r27.<org.apache.xpath.axes.ReverseAxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r2, 1);

        r23 = $r27;

        goto label17;

     label05:
        $r28 = new org.apache.xpath.axes.AxesWalker;

        specialinvoke $r28.<org.apache.xpath.axes.AxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r2, 2);

        r23 = $r28;

        goto label17;

     label06:
        $r29 = new org.apache.xpath.axes.AxesWalker;

        specialinvoke $r29.<org.apache.xpath.axes.AxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r2, 9);

        r23 = $r29;

        goto label17;

     label07:
        $r30 = new org.apache.xpath.axes.AxesWalker;

        specialinvoke $r30.<org.apache.xpath.axes.AxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r2, 3);

        r23 = $r30;

        goto label17;

     label08:
        $r31 = new org.apache.xpath.axes.AxesWalker;

        specialinvoke $r31.<org.apache.xpath.axes.AxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r2, 4);

        r23 = $r31;

        goto label17;

     label09:
        $r32 = new org.apache.xpath.axes.AxesWalker;

        specialinvoke $r32.<org.apache.xpath.axes.AxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r2, 5);

        r23 = $r32;

        goto label17;

     label10:
        $r33 = new org.apache.xpath.axes.AxesWalker;

        specialinvoke $r33.<org.apache.xpath.axes.AxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r2, 6);

        r23 = $r33;

        goto label17;

     label11:
        $r34 = new org.apache.xpath.axes.AxesWalker;

        specialinvoke $r34.<org.apache.xpath.axes.AxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r2, 7);

        r23 = $r34;

        goto label17;

     label12:
        $r35 = new org.apache.xpath.axes.ReverseAxesWalker;

        specialinvoke $r35.<org.apache.xpath.axes.ReverseAxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r2, 11);

        r23 = $r35;

        goto label17;

     label13:
        $r36 = new org.apache.xpath.axes.ReverseAxesWalker;

        specialinvoke $r36.<org.apache.xpath.axes.ReverseAxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r2, 12);

        r23 = $r36;

        goto label17;

     label14:
        $r37 = new org.apache.xpath.axes.ReverseAxesWalker;

        specialinvoke $r37.<org.apache.xpath.axes.ReverseAxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r2, 10);

        r23 = $r37;

        goto label17;

     label15:
        $r38 = new org.apache.xpath.axes.AxesWalker;

        specialinvoke $r38.<org.apache.xpath.axes.AxesWalker: void <init>(org.apache.xpath.axes.LocPathIterator,int)>(r2, 13);

        r23 = $r38;

        goto label17;

     label16:
        $r39 = new java.lang.RuntimeException;

        $r20 = newarray (java.lang.Object)[1];

        $r21 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        $r20[0] = $r21;

        $r22 = staticinvoke <org.apache.xpath.res.XPATHMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NULL_ERROR_HANDLER", $r20);

        specialinvoke $r39.<java.lang.RuntimeException: void <init>(java.lang.String)>($r22);

        throw $r39;

     label17:
        if z0 == 0 goto label18;

        $i6 = (int) -1;

        virtualinvoke r23.<org.apache.xpath.patterns.NodeTest: void initNodeTest(int)>($i6);

        goto label21;

     label18:
        $i3 = virtualinvoke r0.<org.apache.xpath.compiler.Compiler: int getWhatToShow(int)>(i0);

        $i4 = $i3 & 4163;

        if 0 == $i4 goto label19;

        $i8 = (int) -1;

        if $i3 != $i8 goto label20;

     label19:
        virtualinvoke r23.<org.apache.xpath.patterns.NodeTest: void initNodeTest(int)>($i3);

        goto label21;

     label20:
        $r3 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: java.lang.String getStepNS(int)>(i0);

        $r4 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: java.lang.String getStepLocalName(int)>(i0);

        virtualinvoke r23.<org.apache.xpath.patterns.NodeTest: void initNodeTest(int,java.lang.String,java.lang.String)>($i3, $r3, $r4);

     label21:
        return r23;
    }

    public static java.lang.String getAnalysisString(int)
    {
        java.lang.StringBuffer $r2, $r3, $r4, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i20;
        java.lang.String $r5, $r6;

        i0 := @parameter0: int;

        $r7 = new java.lang.StringBuffer;

        specialinvoke $r7.<java.lang.StringBuffer: void <init>()>();

        $r8 = new java.lang.StringBuffer;

        specialinvoke $r8.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("count: ");

        $i1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: int getStepCount(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $i2 = i0 & 1073741824;

        if $i2 == 0 goto label01;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NTANY|");

     label01:
        $i3 = i0 & 4096;

        if $i3 == 0 goto label02;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PRED|");

     label02:
        $i4 = i0 & 8192;

        if $i4 == 0 goto label03;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ANC|");

     label03:
        $i5 = i0 & 16384;

        if $i5 == 0 goto label04;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ANCOS|");

     label04:
        $i20 = (int) 32768;

        $i6 = i0 & $i20;

        if $i6 == 0 goto label05;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("ATTR|");

     label05:
        $i7 = i0 & 65536;

        if $i7 == 0 goto label06;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("CH|");

     label06:
        $i8 = i0 & 131072;

        if $i8 == 0 goto label07;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DESC|");

     label07:
        $i9 = i0 & 262144;

        if $i9 == 0 goto label08;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("DESCOS|");

     label08:
        $i10 = i0 & 524288;

        if $i10 == 0 goto label09;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FOL|");

     label09:
        $i11 = i0 & 1048576;

        if $i11 == 0 goto label10;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FOLS|");

     label10:
        $i12 = i0 & 2097152;

        if $i12 == 0 goto label11;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("NS|");

     label11:
        $i13 = i0 & 4194304;

        if $i13 == 0 goto label12;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("P|");

     label12:
        $i14 = i0 & 8388608;

        if $i14 == 0 goto label13;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PREC|");

     label13:
        $i15 = i0 & 16777216;

        if $i15 == 0 goto label14;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("PRECS|");

     label14:
        $i16 = i0 & 33554432;

        if $i16 == 0 goto label15;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(".|");

     label15:
        $i17 = i0 & 67108864;

        if $i17 == 0 goto label16;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("FLT|");

     label16:
        $i18 = i0 & 134217728;

        if $i18 == 0 goto label17;

        virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("R|");

     label17:
        $r6 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r6;
    }

    public static boolean hasPredicate(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 & 4096;

        if 0 == $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean isWild(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 & 1073741824;

        if 0 == $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean walksAncestors(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 24576);

        return $z0;
    }

    public static boolean walksAttributes(int)
    {
        int i0, $i1, $i3;
        boolean $z0;

        i0 := @parameter0: int;

        $i3 = (int) 32768;

        $i1 = i0 & $i3;

        if 0 == $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean walksNamespaces(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 & 2097152;

        if 0 == $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean walksChildren(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 & 65536;

        if 0 == $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static boolean walksDescendants(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 393216);

        return $z0;
    }

    public static boolean walksSubtree(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 458752);

        return $z0;
    }

    public static boolean walksSubtreeOnlyMaybeAbsolute(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSubtree(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksExtraNodes(int)>(i0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksUp(int)>(i0);

        if $z2 != 0 goto label1;

        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSideways(int)>(i0);

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    public static boolean walksSubtreeOnly(int)
    {
        int i0;
        boolean $z0, $z1, $z2;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSubtreeOnlyMaybeAbsolute(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isAbsolute(int)>(i0);

        if $z1 != 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean walksFilteredList(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 67108864);

        return $z0;
    }

    public static boolean walksSubtreeOnlyFromRootOrContext(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSubtree(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksExtraNodes(int)>(i0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksUp(int)>(i0);

        if $z2 != 0 goto label1;

        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSideways(int)>(i0);

        if $z3 != 0 goto label1;

        $z4 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 67108864);

        if $z4 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        return $z5;
    }

    public static boolean walksInDocOrder(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSubtreeOnlyMaybeAbsolute(int)>(i0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksExtraNodesOnly(int)>(i0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksFollowingOnlyMaybeAbsolute(int)>(i0);

        if $z2 == 0 goto label2;

     label1:
        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 67108864);

        if $z3 != 0 goto label2;

        $z4 = 1;

        goto label3;

     label2:
        $z4 = 0;

     label3:
        return $z4;
    }

    public static boolean walksFollowingOnlyMaybeAbsolute(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 35127296);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSubtree(int)>(i0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksUp(int)>(i0);

        if $z2 != 0 goto label1;

        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSideways(int)>(i0);

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    public static boolean walksUp(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 4218880);

        return $z0;
    }

    public static boolean walksSideways(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 26738688);

        return $z0;
    }

    public static boolean walksExtraNodes(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 2129920);

        return $z0;
    }

    public static boolean walksExtraNodesOnly(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksExtraNodes(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 33554432);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSubtree(int)>(i0);

        if $z2 != 0 goto label1;

        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksUp(int)>(i0);

        if $z3 != 0 goto label1;

        $z4 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSideways(int)>(i0);

        if $z4 != 0 goto label1;

        $z5 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isAbsolute(int)>(i0);

        if $z5 != 0 goto label1;

        $z6 = 1;

        goto label2;

     label1:
        $z6 = 0;

     label2:
        return $z6;
    }

    public static boolean isAbsolute(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 201326592);

        return $z0;
    }

    public static boolean walksChildrenOnly(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksChildren(int)>(i0);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 33554432);

        if $z1 != 0 goto label2;

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksExtraNodes(int)>(i0);

        if $z2 != 0 goto label2;

        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksDescendants(int)>(i0);

        if $z3 != 0 goto label2;

        $z4 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksUp(int)>(i0);

        if $z4 != 0 goto label2;

        $z5 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSideways(int)>(i0);

        if $z5 != 0 goto label2;

        $z6 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isAbsolute(int)>(i0);

        if $z6 == 0 goto label1;

        $z7 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 134217728);

        if $z7 == 0 goto label2;

     label1:
        $z8 = 1;

        goto label3;

     label2:
        $z8 = 0;

     label3:
        return $z8;
    }

    public static boolean walksChildrenAndExtraAndSelfOnly(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksChildren(int)>(i0);

        if $z0 == 0 goto label2;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksDescendants(int)>(i0);

        if $z1 != 0 goto label2;

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksUp(int)>(i0);

        if $z2 != 0 goto label2;

        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSideways(int)>(i0);

        if $z3 != 0 goto label2;

        $z4 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isAbsolute(int)>(i0);

        if $z4 == 0 goto label1;

        $z5 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 134217728);

        if $z5 == 0 goto label2;

     label1:
        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        return $z6;
    }

    public static boolean walksDescendantsAndExtraAndSelfOnly(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksChildren(int)>(i0);

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksDescendants(int)>(i0);

        if $z1 == 0 goto label2;

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksUp(int)>(i0);

        if $z2 != 0 goto label2;

        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSideways(int)>(i0);

        if $z3 != 0 goto label2;

        $z4 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isAbsolute(int)>(i0);

        if $z4 == 0 goto label1;

        $z5 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 134217728);

        if $z5 == 0 goto label2;

     label1:
        $z6 = 1;

        goto label3;

     label2:
        $z6 = 0;

     label3:
        return $z6;
    }

    public static boolean walksSelfOnly(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 33554432);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSubtree(int)>(i0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksUp(int)>(i0);

        if $z2 != 0 goto label1;

        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSideways(int)>(i0);

        if $z3 != 0 goto label1;

        $z4 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isAbsolute(int)>(i0);

        if $z4 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        return $z5;
    }

    public static boolean walksUpOnly(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSubtree(int)>(i0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksUp(int)>(i0);

        if $z1 == 0 goto label1;

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSideways(int)>(i0);

        if $z2 != 0 goto label1;

        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isAbsolute(int)>(i0);

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    public static boolean walksDownOnly(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSubtree(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksUp(int)>(i0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSideways(int)>(i0);

        if $z2 != 0 goto label1;

        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isAbsolute(int)>(i0);

        if $z3 != 0 goto label1;

        $z4 = 1;

        goto label2;

     label1:
        $z4 = 0;

     label2:
        return $z4;
    }

    public static boolean walksDownExtraOnly(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSubtree(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksExtraNodes(int)>(i0);

        if $z1 == 0 goto label1;

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksUp(int)>(i0);

        if $z2 != 0 goto label1;

        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSideways(int)>(i0);

        if $z3 != 0 goto label1;

        $z4 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isAbsolute(int)>(i0);

        if $z4 != 0 goto label1;

        $z5 = 1;

        goto label2;

     label1:
        $z5 = 0;

     label2:
        return $z5;
    }

    public static boolean canSkipSubtrees(int)
    {
        int i0;
        boolean $z0, $z1, $z2;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 65536);

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSideways(int)>(i0);

        $z2 = $z0 | $z1;

        return $z2;
    }

    public static boolean canCrissCross(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSelfOnly(int)>(i0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksDownOnly(int)>(i0);

        if $z1 == 0 goto label2;

        $z10 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean canSkipSubtrees(int)>(i0);

        if $z10 != 0 goto label2;

        return 0;

     label2:
        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksChildrenAndExtraAndSelfOnly(int)>(i0);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksDescendantsAndExtraAndSelfOnly(int)>(i0);

        if $z3 == 0 goto label4;

        return 0;

     label4:
        $z4 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksUpOnly(int)>(i0);

        if $z4 == 0 goto label5;

        return 0;

     label5:
        $z5 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksExtraNodesOnly(int)>(i0);

        if $z5 == 0 goto label6;

        return 0;

     label6:
        $z6 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSubtree(int)>(i0);

        if $z6 == 0 goto label8;

        $z7 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksSideways(int)>(i0);

        if $z7 != 0 goto label7;

        $z8 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksUp(int)>(i0);

        if $z8 != 0 goto label7;

        $z9 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean canSkipSubtrees(int)>(i0);

        if $z9 == 0 goto label8;

     label7:
        return 1;

     label8:
        return 0;
    }

    public static boolean isNaturalDocOrder(int)
    {
        int i0;
        boolean $z0, $z1, $z2, $z3;

        i0 := @parameter0: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean canCrissCross(int)>(i0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 2097152);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksFilteredList(int)>(i0);

        if $z2 == 0 goto label2;

     label1:
        return 0;

     label2:
        $z3 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean walksInDocOrder(int)>(i0);

        if $z3 == 0 goto label3;

        return 1;

     label3:
        return 0;
    }

    private static boolean isNaturalDocOrder(org.apache.xpath.compiler.Compiler, int, int, int) throws javax.xml.transform.TransformerException
    {
        java.lang.Object[] $r3;
        org.apache.xpath.compiler.Compiler r0;
        int i0, $i1, i2, i3, i4, $i5, $i7;
        java.lang.String $r1, $r4, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, z7;
        java.lang.RuntimeException $r6;

        r0 := @parameter0: org.apache.xpath.compiler.Compiler;

        i3 := @parameter1: int;

        i2 := @parameter2: int;

        i0 := @parameter3: int;

        $z0 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean canCrissCross(int)>(i0);

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $z1 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 2097152);

        if $z1 == 0 goto label02;

        return 0;

     label02:
        $z2 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 1572864);

        if $z2 == 0 goto label03;

        $z4 = staticinvoke <org.apache.xpath.axes.WalkerFactory: boolean isSet(int,int)>(i0, 25165824);

        if $z4 == 0 goto label03;

        return 0;

     label03:
        z5 = 0;

        z7 = 0;

        z6 = 0;

        i4 = 0;

        goto label13;

     label04:
        tableswitch($i1)
        {
            case 22: goto label07;
            case 23: goto label07;
            case 24: goto label07;
            case 25: goto label07;
            case 26: goto label10;
            case 27: goto label10;
            case 28: goto label10;
            case 29: goto label10;
            case 30: goto label10;
            case 31: goto label10;
            case 32: goto label10;
            case 33: goto label10;
            case 34: goto label10;
            case 35: goto label10;
            case 36: goto label10;
            case 37: goto label07;
            case 38: goto label07;
            case 39: goto label05;
            case 40: goto label09;
            case 41: goto label07;
            case 42: goto label07;
            case 43: goto label07;
            case 44: goto label07;
            case 45: goto label07;
            case 46: goto label07;
            case 47: goto label07;
            case 48: goto label09;
            case 49: goto label07;
            case 50: goto label09;
            case 51: goto label05;
            case 52: goto label07;
            case 53: goto label07;
            default: goto label10;
        };

     label05:
        if z6 == 0 goto label06;

        return 0;

     label06:
        $r1 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: java.lang.String getStepLocalName(int)>(i3);

        $z3 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("*");

        if $z3 == 0 goto label11;

        z5 = 1;

        z7 = 1;

        z6 = 1;

        goto label11;

     label07:
        if i4 <= 0 goto label08;

        return 0;

     label08:
        i4 = i4 + 1;

     label09:
        if z7 == 0 goto label11;

        return 0;

     label10:
        $r6 = new java.lang.RuntimeException;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        $r3[0] = $r4;

        $r5 = staticinvoke <org.apache.xpath.res.XPATHMessages: java.lang.String createXPATHMessage(java.lang.String,java.lang.Object[])>("ER_NULL_ERROR_HANDLER", $r3);

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r5);

        throw $r6;

     label11:
        $i5 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getNextStepPos(int)>(i3);

        if $i5 >= 0 goto label12;

        goto label14;

     label12:
        i3 = $i5;

     label13:
        $i1 = virtualinvoke r0.<org.apache.xpath.compiler.OpMap: int getOp(int)>(i3);

        $i7 = (int) -1;

        if $i7 != $i1 goto label04;

     label14:
        return 1;
    }

    public static boolean isOneStep(int)
    {
        int i0, $i1;
        boolean $z0;

        i0 := @parameter0: int;

        $i1 = i0 & 255;

        if $i1 != 1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static int getStepCount(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = i0 & 255;

        return $i1;
    }

    public static void <clinit>()
    {
        <org.apache.xpath.axes.WalkerFactory: int BIT_MATCH_PATTERN> = -2147483648;

        <org.apache.xpath.axes.WalkerFactory: int BIT_NODETEST_ANY> = 1073741824;

        <org.apache.xpath.axes.WalkerFactory: int BIT_ANY_DESCENDANT_FROM_ROOT> = 536870912;

        <org.apache.xpath.axes.WalkerFactory: int BIT_BACKWARDS_SELF> = 268435456;

        <org.apache.xpath.axes.WalkerFactory: int BITMASK_TRAVERSES_OUTSIDE_SUBTREE> = 234381312;

        <org.apache.xpath.axes.WalkerFactory: int BIT_ROOT> = 134217728;

        <org.apache.xpath.axes.WalkerFactory: int BIT_FILTER> = 67108864;

        <org.apache.xpath.axes.WalkerFactory: int BIT_SELF> = 33554432;

        <org.apache.xpath.axes.WalkerFactory: int BIT_PRECEDING_SIBLING> = 16777216;

        <org.apache.xpath.axes.WalkerFactory: int BIT_PRECEDING> = 8388608;

        <org.apache.xpath.axes.WalkerFactory: int BIT_PARENT> = 4194304;

        <org.apache.xpath.axes.WalkerFactory: int BIT_NAMESPACE> = 2097152;

        <org.apache.xpath.axes.WalkerFactory: int BIT_FOLLOWING_SIBLING> = 1048576;

        <org.apache.xpath.axes.WalkerFactory: int BIT_FOLLOWING> = 524288;

        <org.apache.xpath.axes.WalkerFactory: int BIT_DESCENDANT_OR_SELF> = 262144;

        <org.apache.xpath.axes.WalkerFactory: int BIT_DESCENDANT> = 131072;

        <org.apache.xpath.axes.WalkerFactory: int BIT_CHILD> = 65536;

        <org.apache.xpath.axes.WalkerFactory: int BIT_ATTRIBUTE> = 32768;

        <org.apache.xpath.axes.WalkerFactory: int BIT_ANCESTOR_OR_SELF> = 16384;

        <org.apache.xpath.axes.WalkerFactory: int BIT_ANCESTOR> = 8192;

        <org.apache.xpath.axes.WalkerFactory: int BIT_PREDICATE> = 4096;

        <org.apache.xpath.axes.WalkerFactory: int BITS_RESERVED> = 3840;

        <org.apache.xpath.axes.WalkerFactory: int BITS_COUNT> = 255;

        <org.apache.xpath.axes.WalkerFactory: boolean DEBUG_ITERATOR_CREATION> = 0;

        <org.apache.xpath.axes.WalkerFactory: boolean DEBUG_WALKER_CREATION> = 0;

        <org.apache.xpath.axes.WalkerFactory: boolean DEBUG_PATTERN_CREATION> = 0;

        return;
    }
}
