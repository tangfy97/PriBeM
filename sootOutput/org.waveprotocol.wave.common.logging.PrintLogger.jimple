public class org.waveprotocol.wave.common.logging.PrintLogger extends org.waveprotocol.wave.common.logging.AbstractLogger
{
    private final org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink loggerSink;

    private void <init>(org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink)
    {
        org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink r1;
        org.waveprotocol.wave.common.logging.PrintLogger r0;

        r0 := @this: org.waveprotocol.wave.common.logging.PrintLogger;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink;

        specialinvoke r0.<org.waveprotocol.wave.common.logging.AbstractLogger: void <init>(org.waveprotocol.wave.common.logging.LogSink)>(r1);

        r0.<org.waveprotocol.wave.common.logging.PrintLogger: org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink loggerSink> = r1;

        return;
    }

    public void <init>()
    {
        java.io.PrintStream $r2;
        org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink $r1;
        org.waveprotocol.wave.common.logging.PrintLogger r0;
        org.waveprotocol.wave.common.logging.PrintLogger$NoOutputStream $r3;

        r0 := @this: org.waveprotocol.wave.common.logging.PrintLogger;

        $r1 = new org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink;

        $r2 = new java.io.PrintStream;

        $r3 = new org.waveprotocol.wave.common.logging.PrintLogger$NoOutputStream;

        specialinvoke $r3.<org.waveprotocol.wave.common.logging.PrintLogger$NoOutputStream: void <init>(org.waveprotocol.wave.common.logging.PrintLogger$1)>(null);

        specialinvoke $r2.<java.io.PrintStream: void <init>(java.io.OutputStream)>($r3);

        specialinvoke $r1.<org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink: void <init>(java.io.PrintStream)>($r2);

        specialinvoke r0.<org.waveprotocol.wave.common.logging.PrintLogger: void <init>(org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink)>($r1);

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r2;
        org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink $r1;
        org.waveprotocol.wave.common.logging.PrintLogger r0;

        r0 := @this: org.waveprotocol.wave.common.logging.PrintLogger;

        $r1 = r0.<org.waveprotocol.wave.common.logging.PrintLogger: org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink loggerSink>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink: java.lang.String toString()>();

        return $r2;
    }

    public boolean isModuleEnabled()
    {
        org.waveprotocol.wave.common.logging.PrintLogger r0;

        r0 := @this: org.waveprotocol.wave.common.logging.PrintLogger;

        return 1;
    }

    public boolean shouldLog(org.waveprotocol.wave.common.logging.AbstractLogger$Level)
    {
        org.waveprotocol.wave.common.logging.PrintLogger r0;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r1;

        r0 := @this: org.waveprotocol.wave.common.logging.PrintLogger;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        return 1;
    }

    public void setAllowedMinLogLevel(org.waveprotocol.wave.common.logging.AbstractLogger$Level)
    {
        org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink $r2;
        org.waveprotocol.wave.common.logging.PrintLogger r0;
        org.waveprotocol.wave.common.logging.AbstractLogger$Level r1;

        r0 := @this: org.waveprotocol.wave.common.logging.PrintLogger;

        r1 := @parameter0: org.waveprotocol.wave.common.logging.AbstractLogger$Level;

        $r2 = r0.<org.waveprotocol.wave.common.logging.PrintLogger: org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink loggerSink>;

        virtualinvoke $r2.<org.waveprotocol.wave.common.logging.PrintLogger$PrintLoggerSink: void setAllowedMinLogLevel(org.waveprotocol.wave.common.logging.AbstractLogger$Level)>(r1);

        return;
    }
}
