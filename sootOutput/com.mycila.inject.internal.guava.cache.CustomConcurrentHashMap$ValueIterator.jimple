final class com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueIterator extends com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$HashIterator implements java.util.Iterator
{
    final com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap this$0;

    void <init>(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap)
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap r1;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueIterator r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueIterator;

        r1 := @parameter0: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap;

        r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueIterator: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap this$0> = r1;

        specialinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$HashIterator: void <init>(com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap)>(r1);

        return;
    }

    public java.lang.Object next()
    {
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$WriteThroughEntry $r1;
        java.lang.Object $r2;
        com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueIterator r0;

        r0 := @this: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueIterator;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$ValueIterator: com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$WriteThroughEntry nextEntry()>();

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.cache.CustomConcurrentHashMap$WriteThroughEntry: java.lang.Object getValue()>();

        return $r2;
    }
}
