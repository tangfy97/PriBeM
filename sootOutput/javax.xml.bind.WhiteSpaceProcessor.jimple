abstract class javax.xml.bind.WhiteSpaceProcessor extends java.lang.Object
{

    void <init>()
    {
        javax.xml.bind.WhiteSpaceProcessor r0;

        r0 := @this: javax.xml.bind.WhiteSpaceProcessor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String replace(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.lang.CharSequence $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: java.lang.CharSequence replace(java.lang.CharSequence)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.CharSequence replace(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        char $c1, $c2;
        int $i0, i3, i4, $i6, $i8, $i10;
        java.lang.StringBuilder $r3;
        java.lang.String $r4;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i3 = $i0 - 1;

     label1:
        if i3 < 0 goto label2;

        $c2 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i3);

        $z1 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpaceExceptSpace(char)>($c2);

        if $z1 != 0 goto label2;

        $i6 = (int) -1;

        i3 = i3 + $i6;

        goto label1;

     label2:
        if i3 >= 0 goto label3;

        return r0;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>(r0);

        $i8 = (int) -1;

        i4 = i3 + $i8;

        virtualinvoke $r3.<java.lang.StringBuilder: void setCharAt(int,char)>(i3, 32);

     label4:
        if i4 < 0 goto label6;

        $c1 = virtualinvoke $r3.<java.lang.StringBuilder: char charAt(int)>(i4);

        $z0 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpaceExceptSpace(char)>($c1);

        if $z0 == 0 goto label5;

        virtualinvoke $r3.<java.lang.StringBuilder: void setCharAt(int,char)>(i4, 32);

     label5:
        $i10 = (int) -1;

        i4 = i4 + $i10;

        goto label4;

     label6:
        $r4 = new java.lang.String;

        specialinvoke $r4.<java.lang.String: void <init>(java.lang.StringBuilder)>($r3);

        return $r4;
    }

    public static java.lang.CharSequence trim(java.lang.CharSequence)
    {
        java.lang.CharSequence r0, $r1;
        char $c3, $c4;
        int $i0, $i1, $i2, i5, i6, $i8;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i5 = 0;

     label1:
        if i5 >= $i0 goto label2;

        $c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i5);

        $z1 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpace(char)>($c4);

        if $z1 == 0 goto label2;

        i5 = i5 + 1;

        goto label1;

     label2:
        i6 = $i0 - 1;

     label3:
        if i6 <= i5 goto label4;

        $c3 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i6);

        $z0 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpace(char)>($c3);

        if $z0 == 0 goto label4;

        $i8 = (int) -1;

        i6 = i6 + $i8;

        goto label3;

     label4:
        if i5 != 0 goto label5;

        $i2 = $i0 - 1;

        if i6 != $i2 goto label5;

        return r0;

     label5:
        $i1 = i6 + 1;

        $r1 = interfaceinvoke r0.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(i5, $i1);

        return $r1;
    }

    public static java.lang.String collapse(java.lang.String)
    {
        java.lang.String r0, $r2;
        java.lang.CharSequence $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: java.lang.CharSequence collapse(java.lang.CharSequence)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    public static java.lang.CharSequence collapse(java.lang.CharSequence)
    {
        int $i0, $i1, $i2, $i4, i8, i9, i10, $i11;
        boolean $z0, $z1, z2;
        java.lang.CharSequence r0;
        char $c3, $c5, $c6, $c7;
        java.lang.StringBuilder $r2;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i8 = 0;

     label01:
        if i8 >= $i0 goto label03;

        $c7 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i8);

        $z1 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpace(char)>($c7);

        if $z1 == 0 goto label02;

        goto label03;

     label02:
        i8 = i8 + 1;

        goto label01;

     label03:
        if i8 != $i0 goto label04;

        return r0;

     label04:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0);

        if i8 == 0 goto label07;

        i9 = 0;

     label05:
        if i9 >= i8 goto label06;

        $c6 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i9);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        i9 = i9 + 1;

        goto label05;

     label06:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label07:
        z2 = 1;

        i10 = i8 + 1;

     label08:
        if i10 >= $i0 goto label12;

        $c5 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i10);

        $z0 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpace(char)>($c5);

        if z2 == 0 goto label09;

        if $z0 == 0 goto label09;

        goto label11;

     label09:
        z2 = $z0;

        if $z0 == 0 goto label10;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        goto label11;

     label10:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5);

     label11:
        i10 = i10 + 1;

        goto label08;

     label12:
        $i1 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label13;

        $i2 = $i1 - 1;

        $c3 = virtualinvoke $r2.<java.lang.StringBuilder: char charAt(int)>($i2);

        $i11 = (int) $c3;

        if $i11 != 32 goto label13;

        $i4 = $i1 - 1;

        virtualinvoke $r2.<java.lang.StringBuilder: void setLength(int)>($i4);

     label13:
        return $r2;
    }

    public static final boolean isWhiteSpace(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0, i2, $i4;
        char $c1;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        i2 = $i0 - 1;

     label1:
        if i2 < 0 goto label3;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i2);

        $z0 = staticinvoke <javax.xml.bind.WhiteSpaceProcessor: boolean isWhiteSpace(char)>($c1);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $i4 = (int) -1;

        i2 = i2 + $i4;

        goto label1;

     label3:
        return 1;
    }

    public static final boolean isWhiteSpace(char)
    {
        int $i1, $i2, $i3, $i4, $i5;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 <= 32 goto label1;

        return 0;

     label1:
        $i2 = (int) c0;

        if $i2 == 9 goto label2;

        $i3 = (int) c0;

        if $i3 == 10 goto label2;

        $i4 = (int) c0;

        if $i4 == 13 goto label2;

        $i5 = (int) c0;

        if $i5 != 32 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }

    protected static final boolean isWhiteSpaceExceptSpace(char)
    {
        int $i1, $i2, $i3, $i4;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if $i1 < 32 goto label1;

        return 0;

     label1:
        $i2 = (int) c0;

        if $i2 == 9 goto label2;

        $i3 = (int) c0;

        if $i3 == 10 goto label2;

        $i4 = (int) c0;

        if $i4 != 13 goto label3;

     label2:
        $z0 = 1;

        goto label4;

     label3:
        $z0 = 0;

     label4:
        return $z0;
    }
}
