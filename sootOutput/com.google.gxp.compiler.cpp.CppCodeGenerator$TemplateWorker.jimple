class com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker extends com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker
{
    private static final int MAX_CPP_STRING_LENGTH;
    private final com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor statementVisitor;
    private final com.google.gxp.compiler.base.ExpressionVisitor toExpressionVisitor;
    private final com.google.gxp.compiler.base.ExpressionVisitor toEscapableExpressionVisitor;

    public void <init>(java.lang.Appendable, com.google.gxp.compiler.alerts.AlertSink, com.google.gxp.compiler.base.Template)
    {
        com.google.gxp.compiler.alerts.AlertSink r2;
        java.lang.Appendable r1;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor $r4;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor $r5;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor $r6;
        com.google.gxp.compiler.base.Template r3;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        r1 := @parameter0: java.lang.Appendable;

        r2 := @parameter1: com.google.gxp.compiler.alerts.AlertSink;

        r3 := @parameter2: com.google.gxp.compiler.base.Template;

        specialinvoke r0.<com.google.gxp.compiler.cpp.BaseCppCodeGenerator$TemplateWorker: void <init>(java.lang.Appendable,com.google.gxp.compiler.alerts.AlertSink,com.google.gxp.compiler.base.Template)>(r1, r2, r3);

        $r4 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor getStatementVisitor()>();

        r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor statementVisitor> = $r4;

        $r5 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor getToExpressionVisitor()>();

        r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.ExpressionVisitor toExpressionVisitor> = $r5;

        $r6 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor getToEscapableExpressionVisitor()>();

        r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.ExpressionVisitor toEscapableExpressionVisitor> = $r6;

        return;
    }

    protected void appendClass()
    {
        com.google.gxp.compiler.alerts.SourcePosition $r2;
        com.google.gxp.compiler.base.TemplateName$FullyQualified $r4;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.base.Template $r1, $r3;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r2 = virtualinvoke $r1.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.alerts.SourcePosition getSourcePosition()>();

        $r3 = r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r4 = virtualinvoke $r3.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.TemplateName$FullyQualified getName()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void appendInclude(com.google.gxp.compiler.alerts.SourcePosition,com.google.gxp.compiler.base.TemplateName)>($r2, $r4);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void appendWriteMethod()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void appendLine()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void appendGetGxpClosureMethod()>();

        return;
    }

    protected void appendInclude(com.google.gxp.compiler.alerts.SourcePosition, com.google.gxp.compiler.base.TemplateName)
    {
        com.google.gxp.compiler.alerts.SourcePosition r4;
        java.lang.Object[] $r5;
        com.google.gxp.compiler.base.TemplateName r0;
        java.lang.String $r1, $r2;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r3;

        r3 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        r4 := @parameter0: com.google.gxp.compiler.alerts.SourcePosition;

        r0 := @parameter1: com.google.gxp.compiler.base.TemplateName;

        $r1 = virtualinvoke r0.<com.google.gxp.compiler.base.TemplateName: java.lang.String toString()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = $r2;

        virtualinvoke r3.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void formatLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String,java.lang.Object[])>(r4, "#include \"%s.h\"", $r5);

        return;
    }

    protected void appendWriteMethod()
    {
        com.google.gxp.compiler.base.Expression $r7;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor $r8;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r0;
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        com.google.gxp.compiler.base.Template $r6;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: java.lang.String getWriteMethodSignature(boolean,boolean)>(1, 1);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r5);

        $r6 = r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.Template template>;

        $r7 = virtualinvoke $r6.<com.google.gxp.compiler.base.Template: com.google.gxp.compiler.base.Expression getContent()>();

        $r8 = r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor statementVisitor>;

        virtualinvoke $r7.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>($r8);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        return;
    }

    protected void appendGetGxpClosureMethod()
    {
        java.lang.StringBuilder $r1, $r3, $r4;
        java.lang.String $r2, $r5;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r0;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: java.lang.String getGetGxpClosureMethodSignature(boolean,boolean)>(1, 1);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" {");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>($r5);

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("return NULL;");

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>("}");

        return;
    }

    protected void writeExpression(com.google.gxp.compiler.alerts.SourcePosition, java.lang.String)
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String r4, $r7;

        r0 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        r1 := @parameter0: com.google.gxp.compiler.alerts.SourcePosition;

        r4 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("gxp_out->Append(");

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(");");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>(r1, $r7);

        return;
    }

    protected void writeString(com.google.gxp.compiler.alerts.SourcePosition, java.lang.String)
    {
        int $i0, $i1, $i2, i3, $i5, $i7, $i9;
        java.lang.String r0, $r4, $r5, $r7, $r8;
        com.google.gxp.compiler.alerts.SourcePosition r2;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r1;
        com.google.gxp.compiler.base.OutputLanguage $r3, $r6;

        r1 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        r2 := @parameter0: com.google.gxp.compiler.alerts.SourcePosition;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == 0 goto label3;

        i3 = 0;

     label1:
        $i1 = $i0 - i3;

        $i5 = (int) 65534;

        if $i1 <= $i5 goto label2;

        $r6 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage CPP>;

        $i7 = (int) 65534;

        $i2 = i3 + $i7;

        $r7 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, $i2);

        $r8 = virtualinvoke $r6.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r7);

        virtualinvoke r1.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void writeExpression(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String)>(r2, $r8);

        $i9 = (int) 65534;

        i3 = i3 + $i9;

        goto label1;

     label2:
        $r3 = <com.google.gxp.compiler.base.OutputLanguage: com.google.gxp.compiler.base.OutputLanguage CPP>;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i3, $i0);

        $r5 = virtualinvoke $r3.<com.google.gxp.compiler.base.OutputLanguage: java.lang.String toStringLiteral(java.lang.String)>($r4);

        virtualinvoke r1.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void writeExpression(com.google.gxp.compiler.alerts.SourcePosition,java.lang.String)>(r2, $r5);

     label3:
        return;
    }

    protected com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor getStatementVisitor()
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor $r0;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r1;

        r1 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        $r0 = new com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor;

        specialinvoke $r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$StatementVisitor: void <init>(com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker)>(r1);

        return $r0;
    }

    protected com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor getToExpressionVisitor()
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r1;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor $r0;

        r1 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        $r0 = new com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor;

        specialinvoke $r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToExpressionVisitor: void <init>(com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker)>(r1);

        return $r0;
    }

    protected com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor getToEscapableExpressionVisitor()
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r1;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor $r0;

        r1 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        $r0 = new com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor;

        specialinvoke $r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker$ToEscapableExpressionVisitor: void <init>(com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker)>(r1);

        return $r0;
    }

    protected java.lang.String getCppExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.Expression r0;
        com.google.gxp.compiler.base.ExpressionVisitor $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r1;

        r1 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        r0 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r2 = r1.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.ExpressionVisitor toExpressionVisitor>;

        $r3 = virtualinvoke r0.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>($r2);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    protected java.lang.String getEscapableExpression(com.google.gxp.compiler.base.Expression)
    {
        com.google.gxp.compiler.base.Expression r0;
        com.google.gxp.compiler.base.ExpressionVisitor $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r1;

        r1 := @this: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        r0 := @parameter0: com.google.gxp.compiler.base.Expression;

        $r2 = r1.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.base.ExpressionVisitor toEscapableExpressionVisitor>;

        $r3 = virtualinvoke r0.<com.google.gxp.compiler.base.Expression: java.lang.Object acceptVisitor(com.google.gxp.compiler.base.ExpressionVisitor)>($r2);

        $r4 = (java.lang.String) $r3;

        return $r4;
    }

    static void access$000(com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker, java.lang.CharSequence)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r0;
        java.lang.CharSequence r1;

        r0 := @parameter0: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        r1 := @parameter1: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>(r1);

        return;
    }

    static void access$100(com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker, java.lang.CharSequence)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r0;
        java.lang.CharSequence r1;

        r0 := @parameter0: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        r1 := @parameter1: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void appendLine(java.lang.CharSequence)>(r1);

        return;
    }

    static void access$200(com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker, com.google.gxp.compiler.alerts.SourcePosition, java.lang.CharSequence)
    {
        com.google.gxp.compiler.alerts.SourcePosition r1;
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r0;
        java.lang.CharSequence r2;

        r0 := @parameter0: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        r1 := @parameter1: com.google.gxp.compiler.alerts.SourcePosition;

        r2 := @parameter2: java.lang.CharSequence;

        virtualinvoke r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: void appendLine(com.google.gxp.compiler.alerts.SourcePosition,java.lang.CharSequence)>(r1, r2);

        return;
    }

    static com.google.gxp.compiler.alerts.AlertSink access$300(com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.alerts.AlertSink $r1;

        r0 := @parameter0: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        return $r1;
    }

    static com.google.gxp.compiler.alerts.AlertSink access$400(com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker)
    {
        com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker r0;
        com.google.gxp.compiler.alerts.AlertSink $r1;

        r0 := @parameter0: com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker;

        $r1 = r0.<com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: com.google.gxp.compiler.alerts.AlertSink alertSink>;

        return $r1;
    }

    public static void <clinit>()
    {
        <com.google.gxp.compiler.cpp.CppCodeGenerator$TemplateWorker: int MAX_CPP_STRING_LENGTH> = 65534;

        return;
    }
}
