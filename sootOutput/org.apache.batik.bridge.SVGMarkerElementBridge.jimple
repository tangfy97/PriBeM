public class org.apache.batik.bridge.SVGMarkerElementBridge extends org.apache.batik.bridge.AnimatableGenericSVGBridge implements org.apache.batik.bridge.MarkerBridge, org.apache.batik.bridge.ErrorConstants
{

    protected void <init>()
    {
        org.apache.batik.bridge.SVGMarkerElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGMarkerElementBridge;

        specialinvoke r0.<org.apache.batik.bridge.AnimatableGenericSVGBridge: void <init>()>();

        return;
    }

    public java.lang.String getLocalName()
    {
        org.apache.batik.bridge.SVGMarkerElementBridge r0;

        r0 := @this: org.apache.batik.bridge.SVGMarkerElementBridge;

        return "marker";
    }

    public org.apache.batik.gvt.Marker createMarker(org.apache.batik.bridge.BridgeContext, org.w3c.dom.Element, org.w3c.dom.Element)
    {
        java.awt.geom.Rectangle2D$Float $r19, $r24, r36;
        org.apache.batik.gvt.CompositeGraphicsNode $r2, $r20, r30;
        byte $b2, $b4;
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit $r23;
        org.apache.batik.gvt.GraphicsNode $r4;
        org.apache.batik.bridge.BridgeException $r27;
        org.apache.batik.bridge.BridgeContext r0;
        java.awt.geom.AffineTransform $r12, $r13, $r25, r35;
        org.apache.batik.gvt.Marker $r16;
        java.lang.Object[] $r28;
        float[] $r15, $r18;
        short $s0, s8;
        java.lang.String $r8, $r9, $r10, $r11, $r14, $r34, $r37;
        org.apache.batik.parser.UnitProcessor$Context $r7;
        java.lang.NumberFormatException $r26;
        org.apache.batik.css.engine.value.Value $r33;
        java.awt.geom.Point2D$Float $r17;
        boolean $z0, $z1, z2;
        org.apache.batik.bridge.SVGMarkerElementBridge r29;
        org.apache.batik.bridge.GVTBuilder $r1;
        org.apache.batik.ext.awt.image.renderable.Filter $r22;
        java.util.List $r5, $r21;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, f17, f18, $f19, f20, f21;
        org.w3c.dom.Node r31;
        int $i1, $i3, $i5, $i6, $i7, $i9;
        double $d0, $d1, d2;
        org.w3c.dom.Element r3, r6, r32;

        r29 := @this: org.apache.batik.bridge.SVGMarkerElementBridge;

        r0 := @parameter0: org.apache.batik.bridge.BridgeContext;

        r3 := @parameter1: org.w3c.dom.Element;

        r6 := @parameter2: org.w3c.dom.Element;

        $r1 = virtualinvoke r0.<org.apache.batik.bridge.BridgeContext: org.apache.batik.bridge.GVTBuilder getGVTBuilder()>();

        $r2 = new org.apache.batik.gvt.CompositeGraphicsNode;

        specialinvoke $r2.<org.apache.batik.gvt.CompositeGraphicsNode: void <init>()>();

        r30 = $r2;

        z2 = 0;

        r31 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label05;

     label01:
        $s0 = interfaceinvoke r31.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label02;

        goto label04;

     label02:
        r32 = (org.w3c.dom.Element) r31;

        $r4 = virtualinvoke $r1.<org.apache.batik.bridge.GVTBuilder: org.apache.batik.gvt.GraphicsNode build(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r0, r32);

        if $r4 != null goto label03;

        goto label04;

     label03:
        z2 = 1;

        $r5 = virtualinvoke $r2.<org.apache.batik.gvt.CompositeGraphicsNode: java.util.List getChildren()>();

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4);

     label04:
        r31 = interfaceinvoke r31.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label05:
        if r31 != null goto label01;

        if z2 != 0 goto label06;

        return null;

     label06:
        $r7 = staticinvoke <org.apache.batik.bridge.UnitProcessor: org.apache.batik.parser.UnitProcessor$Context createContext(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element)>(r0, r6);

        f17 = 3.0F;

        $r8 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "markerWidth");

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        if $i1 == 0 goto label07;

        f17 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalLengthToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>($r8, "markerWidth", $r7);

     label07:
        $b2 = f17 cmpl 0.0F;

        if $b2 != 0 goto label08;

        return null;

     label08:
        f18 = 3.0F;

        $r9 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "markerHeight");

        $i3 = virtualinvoke $r9.<java.lang.String: int length()>();

        if $i3 == 0 goto label09;

        f18 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalLengthToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>($r9, "markerHeight", $r7);

     label09:
        $b4 = f18 cmpl 0.0F;

        if $b4 != 0 goto label10;

        return null;

     label10:
        $r10 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "orient");

        $i5 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i5 != 0 goto label11;

        d2 = 0.0;

        goto label15;

     label11:
        $r11 = "auto";

        $z0 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label12;

        d2 = #NaN;

        goto label15;

     label12:
        $f0 = staticinvoke <org.apache.batik.bridge.SVGUtilities: float convertSVGNumber(java.lang.String)>($r10);

        d2 = (double) $f0;

     label13:
        goto label15;

     label14:
        $r26 := @caughtexception;

        $r27 = new org.apache.batik.bridge.BridgeException;

        $r28 = newarray (java.lang.Object)[2];

        $r28[0] = "orient";

        $r28[1] = $r10;

        specialinvoke $r27.<org.apache.batik.bridge.BridgeException: void <init>(org.apache.batik.bridge.BridgeContext,org.w3c.dom.Element,java.lang.Exception,java.lang.String,java.lang.Object[])>(r0, r3, $r26, "attribute.malformed", $r28);

        throw $r27;

     label15:
        $r33 = staticinvoke <org.apache.batik.bridge.CSSUtilities: org.apache.batik.css.engine.value.Value getComputedStyle(org.w3c.dom.Element,int)>(r6, 52);

        $f19 = interfaceinvoke $r33.<org.apache.batik.css.engine.value.Value: float getFloatValue()>();

        $r34 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "markerUnits");

        $i7 = virtualinvoke $r34.<java.lang.String: int length()>();

        if $i7 != 0 goto label16;

        s8 = 3;

        goto label17;

     label16:
        s8 = staticinvoke <org.apache.batik.bridge.SVGUtilities: short parseMarkerCoordinateSystem(org.w3c.dom.Element,java.lang.String,java.lang.String,org.apache.batik.bridge.BridgeContext)>(r3, "markerUnits", $r34, r0);

     label17:
        if s8 != 3 goto label18;

        $r25 = new java.awt.geom.AffineTransform;

        specialinvoke $r25.<java.awt.geom.AffineTransform: void <init>()>();

        r35 = $r25;

        $d1 = (double) $f19;

        $d0 = (double) $f19;

        virtualinvoke $r25.<java.awt.geom.AffineTransform: void scale(double,double)>($d1, $d0);

        goto label19;

     label18:
        $r12 = new java.awt.geom.AffineTransform;

        specialinvoke $r12.<java.awt.geom.AffineTransform: void <init>()>();

        r35 = $r12;

     label19:
        $r13 = staticinvoke <org.apache.batik.bridge.ViewBox: java.awt.geom.AffineTransform getPreserveAspectRatioTransform(org.w3c.dom.Element,float,float,org.apache.batik.bridge.BridgeContext)>(r3, f17, f18, r0);

        if $r13 != null goto label20;

        return null;

     label20:
        virtualinvoke r35.<java.awt.geom.AffineTransform: void concatenate(java.awt.geom.AffineTransform)>($r13);

        virtualinvoke $r2.<org.apache.batik.gvt.AbstractGraphicsNode: void setTransform(java.awt.geom.AffineTransform)>(r35);

        $z1 = staticinvoke <org.apache.batik.bridge.CSSUtilities: boolean convertOverflow(org.w3c.dom.Element)>(r3);

        if $z1 == 0 goto label23;

        $r18 = staticinvoke <org.apache.batik.bridge.CSSUtilities: float[] convertClip(org.w3c.dom.Element)>(r3);

        if $r18 != null goto label21;

        $r24 = new java.awt.geom.Rectangle2D$Float;

        $f16 = $f19 * f17;

        $f15 = $f19 * f18;

        specialinvoke $r24.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>(0.0F, 0.0F, $f16, $f15);

        r36 = $r24;

        goto label22;

     label21:
        $r19 = new java.awt.geom.Rectangle2D$Float;

        $f14 = $r18[3];

        $f13 = $r18[0];

        $f4 = $f19 * f17;

        $f3 = $r18[1];

        $f6 = $f4 - $f3;

        $f5 = $r18[3];

        $f12 = $f6 - $f5;

        $f8 = $f19 * f18;

        $f7 = $r18[2];

        $f10 = $f8 - $f7;

        $f9 = $r18[0];

        $f11 = $f10 - $f9;

        specialinvoke $r19.<java.awt.geom.Rectangle2D$Float: void <init>(float,float,float,float)>($f14, $f13, $f12, $f11);

        r36 = $r19;

     label22:
        $r20 = new org.apache.batik.gvt.CompositeGraphicsNode;

        specialinvoke $r20.<org.apache.batik.gvt.CompositeGraphicsNode: void <init>()>();

        $r21 = virtualinvoke $r20.<org.apache.batik.gvt.CompositeGraphicsNode: java.util.List getChildren()>();

        interfaceinvoke $r21.<java.util.List: boolean add(java.lang.Object)>($r2);

        $r22 = virtualinvoke $r20.<org.apache.batik.gvt.AbstractGraphicsNode: org.apache.batik.ext.awt.image.renderable.Filter getGraphicsNodeRable(boolean)>(1);

        $r23 = new org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        specialinvoke $r23.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.awt.Shape)>($r22, r36);

        virtualinvoke $r20.<org.apache.batik.gvt.AbstractGraphicsNode: void setClip(org.apache.batik.ext.awt.image.renderable.ClipRable)>($r23);

        r30 = $r20;

     label23:
        f20 = 0.0F;

        $r37 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "refX");

        $i9 = virtualinvoke $r37.<java.lang.String: int length()>();

        if $i9 == 0 goto label24;

        f20 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgHorizontalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>($r37, "refX", $r7);

     label24:
        f21 = 0.0F;

        $r14 = interfaceinvoke r3.<org.w3c.dom.Element: java.lang.String getAttributeNS(java.lang.String,java.lang.String)>(null, "refY");

        $i6 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i6 == 0 goto label25;

        f21 = staticinvoke <org.apache.batik.bridge.UnitProcessor: float svgVerticalCoordinateToUserSpace(java.lang.String,java.lang.String,org.apache.batik.parser.UnitProcessor$Context)>($r14, "refY", $r7);

     label25:
        $r15 = newarray (float)[2];

        $r15[0] = f20;

        $r15[1] = f21;

        virtualinvoke r35.<java.awt.geom.AffineTransform: void transform(float[],int,float[],int,int)>($r15, 0, $r15, 0, 1);

        $r16 = new org.apache.batik.gvt.Marker;

        $r17 = new java.awt.geom.Point2D$Float;

        $f2 = $r15[0];

        $f1 = $r15[1];

        specialinvoke $r17.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f2, $f1);

        specialinvoke $r16.<org.apache.batik.gvt.Marker: void <init>(org.apache.batik.gvt.GraphicsNode,java.awt.geom.Point2D,double)>(r30, $r17, d2);

        return $r16;

        catch java.lang.NumberFormatException from label12 to label13 with label14;
    }
}
