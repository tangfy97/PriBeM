public class org.apache.http.impl.auth.BasicScheme extends org.apache.http.impl.auth.RFC2617Scheme
{
    private boolean complete;

    public void <init>(org.apache.http.auth.ChallengeState)
    {
        org.apache.http.impl.auth.BasicScheme r0;
        org.apache.http.auth.ChallengeState r1;

        r0 := @this: org.apache.http.impl.auth.BasicScheme;

        r1 := @parameter0: org.apache.http.auth.ChallengeState;

        specialinvoke r0.<org.apache.http.impl.auth.RFC2617Scheme: void <init>(org.apache.http.auth.ChallengeState)>(r1);

        r0.<org.apache.http.impl.auth.BasicScheme: boolean complete> = 0;

        return;
    }

    public void <init>()
    {
        org.apache.http.impl.auth.BasicScheme r0;

        r0 := @this: org.apache.http.impl.auth.BasicScheme;

        specialinvoke r0.<org.apache.http.impl.auth.BasicScheme: void <init>(org.apache.http.auth.ChallengeState)>(null);

        return;
    }

    public java.lang.String getSchemeName()
    {
        org.apache.http.impl.auth.BasicScheme r0;

        r0 := @this: org.apache.http.impl.auth.BasicScheme;

        return "basic";
    }

    public void processChallenge(org.apache.http.Header) throws org.apache.http.auth.MalformedChallengeException
    {
        org.apache.http.impl.auth.BasicScheme r0;
        org.apache.http.Header r1;

        r0 := @this: org.apache.http.impl.auth.BasicScheme;

        r1 := @parameter0: org.apache.http.Header;

        specialinvoke r0.<org.apache.http.impl.auth.RFC2617Scheme: void processChallenge(org.apache.http.Header)>(r1);

        r0.<org.apache.http.impl.auth.BasicScheme: boolean complete> = 1;

        return;
    }

    public boolean isComplete()
    {
        org.apache.http.impl.auth.BasicScheme r0;
        boolean $z0;

        r0 := @this: org.apache.http.impl.auth.BasicScheme;

        $z0 = r0.<org.apache.http.impl.auth.BasicScheme: boolean complete>;

        return $z0;
    }

    public boolean isConnectionBased()
    {
        org.apache.http.impl.auth.BasicScheme r0;

        r0 := @this: org.apache.http.impl.auth.BasicScheme;

        return 0;
    }

    public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest) throws org.apache.http.auth.AuthenticationException
    {
        org.apache.http.impl.auth.BasicScheme r0;
        org.apache.http.protocol.BasicHttpContext $r3;
        org.apache.http.auth.Credentials r1;
        org.apache.http.HttpRequest r2;
        org.apache.http.Header $r4;

        r0 := @this: org.apache.http.impl.auth.BasicScheme;

        r1 := @parameter0: org.apache.http.auth.Credentials;

        r2 := @parameter1: org.apache.http.HttpRequest;

        $r3 = new org.apache.http.protocol.BasicHttpContext;

        specialinvoke $r3.<org.apache.http.protocol.BasicHttpContext: void <init>()>();

        $r4 = virtualinvoke r0.<org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>(r1, r2, $r3);

        return $r4;
    }

    public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext) throws org.apache.http.auth.AuthenticationException
    {
        org.apache.http.impl.auth.BasicScheme r4;
        java.lang.IllegalArgumentException $r6, $r7;
        org.apache.http.HttpRequest r1;
        org.apache.http.Header $r5;
        org.apache.http.auth.Credentials r0;
        org.apache.http.protocol.HttpContext r8;
        org.apache.http.params.HttpParams $r2;
        java.lang.String $r3;
        boolean $z0;

        r4 := @this: org.apache.http.impl.auth.BasicScheme;

        r0 := @parameter0: org.apache.http.auth.Credentials;

        r1 := @parameter1: org.apache.http.HttpRequest;

        r8 := @parameter2: org.apache.http.protocol.HttpContext;

        if r0 != null goto label1;

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Credentials may not be null");

        throw $r7;

     label1:
        if r1 != null goto label2;

        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("HTTP request may not be null");

        throw $r6;

     label2:
        $r2 = interfaceinvoke r1.<org.apache.http.HttpRequest: org.apache.http.params.HttpParams getParams()>();

        $r3 = staticinvoke <org.apache.http.auth.params.AuthParams: java.lang.String getCredentialCharset(org.apache.http.params.HttpParams)>($r2);

        $z0 = virtualinvoke r4.<org.apache.http.impl.auth.BasicScheme: boolean isProxy()>();

        $r5 = staticinvoke <org.apache.http.impl.auth.BasicScheme: org.apache.http.Header authenticate(org.apache.http.auth.Credentials,java.lang.String,boolean)>(r0, $r3, $z0);

        return $r5;
    }

    public static org.apache.http.Header authenticate(org.apache.http.auth.Credentials, java.lang.String, boolean)
    {
        byte[] $r7, $r8;
        org.apache.http.auth.Credentials r0;
        int $i0;
        java.lang.String r1, $r4, $r5, $r6, $r13;
        boolean z0;
        org.apache.http.message.BufferedHeader $r10;
        java.lang.IllegalArgumentException $r11, $r12;
        org.apache.http.util.CharArrayBuffer $r9;
        java.security.Principal $r3;
        java.lang.StringBuilder $r2;

        r0 := @parameter0: org.apache.http.auth.Credentials;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        if r0 != null goto label1;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Credentials may not be null");

        throw $r12;

     label1:
        if r1 != null goto label2;

        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("charset may not be null");

        throw $r11;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = interfaceinvoke r0.<org.apache.http.auth.Credentials: java.security.Principal getUserPrincipal()>();

        $r4 = interfaceinvoke $r3.<java.security.Principal: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r5 = interfaceinvoke r0.<org.apache.http.auth.Credentials: java.lang.String getPassword()>();

        if $r5 != null goto label3;

        $r13 = "null";

        goto label4;

     label3:
        $r13 = interfaceinvoke r0.<org.apache.http.auth.Credentials: java.lang.String getPassword()>();

     label4:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getBytes(java.lang.String,java.lang.String)>($r6, r1);

        $r8 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] encodeBase64(byte[])>($r7);

        $r9 = new org.apache.http.util.CharArrayBuffer;

        specialinvoke $r9.<org.apache.http.util.CharArrayBuffer: void <init>(int)>(32);

        if z0 == 0 goto label5;

        virtualinvoke $r9.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>("Proxy-Authorization");

        goto label6;

     label5:
        virtualinvoke $r9.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>("Authorization");

     label6:
        virtualinvoke $r9.<org.apache.http.util.CharArrayBuffer: void append(java.lang.String)>(": Basic ");

        $i0 = lengthof $r8;

        virtualinvoke $r9.<org.apache.http.util.CharArrayBuffer: void append(byte[],int,int)>($r8, 0, $i0);

        $r10 = new org.apache.http.message.BufferedHeader;

        specialinvoke $r10.<org.apache.http.message.BufferedHeader: void <init>(org.apache.http.util.CharArrayBuffer)>($r9);

        return $r10;
    }
}
