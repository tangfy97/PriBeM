public final class org.apache.lucene.util.CollectionUtil extends java.lang.Object
{

    private void <init>()
    {
        org.apache.lucene.util.CollectionUtil r0;

        r0 := @this: org.apache.lucene.util.CollectionUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static org.apache.lucene.util.SorterTemplate getSorter(java.util.List, java.util.Comparator)
    {
        org.apache.lucene.util.CollectionUtil$1 $r1;
        java.util.List r0;
        java.util.Comparator r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.Comparator;

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CollectionUtil can only sort random access lists in-place.");

        throw $r3;

     label1:
        $r1 = new org.apache.lucene.util.CollectionUtil$1;

        specialinvoke $r1.<org.apache.lucene.util.CollectionUtil$1: void <init>(java.util.List,java.util.Comparator)>(r0, r2);

        return $r1;
    }

    private static org.apache.lucene.util.SorterTemplate getSorter(java.util.List)
    {
        java.util.List r0;
        org.apache.lucene.util.CollectionUtil$2 $r1;
        java.lang.IllegalArgumentException $r2;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CollectionUtil can only sort random access lists in-place.");

        throw $r2;

     label1:
        $r1 = new org.apache.lucene.util.CollectionUtil$2;

        specialinvoke $r1.<org.apache.lucene.util.CollectionUtil$2: void <init>(java.util.List)>(r0);

        return $r1;
    }

    private static org.apache.lucene.util.SorterTemplate getMergeSorter(java.util.List, java.util.Comparator)
    {
        java.util.List r0;
        org.apache.lucene.util.CollectionUtil$3 $r1;
        int $i0;
        org.apache.lucene.util.SorterTemplate $r3;
        java.util.Comparator r2;
        java.lang.IllegalArgumentException $r4;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r2 := @parameter1: java.util.Comparator;

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 != 0 goto label1;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CollectionUtil can only sort random access lists in-place.");

        throw $r4;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 >= 1500 goto label2;

        $r3 = staticinvoke <org.apache.lucene.util.CollectionUtil: org.apache.lucene.util.SorterTemplate getSorter(java.util.List,java.util.Comparator)>(r0, r2);

        return $r3;

     label2:
        $r1 = new org.apache.lucene.util.CollectionUtil$3;

        specialinvoke $r1.<org.apache.lucene.util.CollectionUtil$3: void <init>(java.util.List,float,java.util.Comparator)>(r0, 0.01F, r2);

        return $r1;
    }

    private static org.apache.lucene.util.SorterTemplate getMergeSorter(java.util.List)
    {
        java.util.List r0;
        org.apache.lucene.util.CollectionUtil$4 $r1;
        int $i0;
        org.apache.lucene.util.SorterTemplate $r2;
        java.lang.IllegalArgumentException $r3;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        $z0 = r0 instanceof java.util.RandomAccess;

        if $z0 != 0 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("CollectionUtil can only sort random access lists in-place.");

        throw $r3;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 >= 1500 goto label2;

        $r2 = staticinvoke <org.apache.lucene.util.CollectionUtil: org.apache.lucene.util.SorterTemplate getSorter(java.util.List)>(r0);

        return $r2;

     label2:
        $r1 = new org.apache.lucene.util.CollectionUtil$4;

        specialinvoke $r1.<org.apache.lucene.util.CollectionUtil$4: void <init>(java.util.List,float)>(r0, 0.01F);

        return $r1;
    }

    public static void quickSort(java.util.List, java.util.Comparator)
    {
        java.util.List r0;
        int $i0, $i1;
        org.apache.lucene.util.SorterTemplate $r2;
        java.util.Comparator r1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Comparator;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        return;

     label1:
        $r2 = staticinvoke <org.apache.lucene.util.CollectionUtil: org.apache.lucene.util.SorterTemplate getSorter(java.util.List,java.util.Comparator)>(r0, r1);

        $i1 = $i0 - 1;

        virtualinvoke $r2.<org.apache.lucene.util.SorterTemplate: void quickSort(int,int)>(0, $i1);

        return;
    }

    public static void quickSort(java.util.List)
    {
        java.util.List r0;
        int $i0, $i1;
        org.apache.lucene.util.SorterTemplate $r1;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        return;

     label1:
        $r1 = staticinvoke <org.apache.lucene.util.CollectionUtil: org.apache.lucene.util.SorterTemplate getSorter(java.util.List)>(r0);

        $i1 = $i0 - 1;

        virtualinvoke $r1.<org.apache.lucene.util.SorterTemplate: void quickSort(int,int)>(0, $i1);

        return;
    }

    public static void mergeSort(java.util.List, java.util.Comparator)
    {
        java.util.List r0;
        int $i0, $i1;
        org.apache.lucene.util.SorterTemplate $r2;
        java.util.Comparator r1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Comparator;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        return;

     label1:
        $r2 = staticinvoke <org.apache.lucene.util.CollectionUtil: org.apache.lucene.util.SorterTemplate getMergeSorter(java.util.List,java.util.Comparator)>(r0, r1);

        $i1 = $i0 - 1;

        virtualinvoke $r2.<org.apache.lucene.util.SorterTemplate: void mergeSort(int,int)>(0, $i1);

        return;
    }

    public static void mergeSort(java.util.List)
    {
        java.util.List r0;
        int $i0, $i1;
        org.apache.lucene.util.SorterTemplate $r1;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        return;

     label1:
        $r1 = staticinvoke <org.apache.lucene.util.CollectionUtil: org.apache.lucene.util.SorterTemplate getMergeSorter(java.util.List)>(r0);

        $i1 = $i0 - 1;

        virtualinvoke $r1.<org.apache.lucene.util.SorterTemplate: void mergeSort(int,int)>(0, $i1);

        return;
    }

    public static void timSort(java.util.List, java.util.Comparator)
    {
        java.util.List r0;
        int $i0, $i1;
        org.apache.lucene.util.SorterTemplate $r2;
        java.util.Comparator r1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Comparator;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        return;

     label1:
        $r2 = staticinvoke <org.apache.lucene.util.CollectionUtil: org.apache.lucene.util.SorterTemplate getMergeSorter(java.util.List,java.util.Comparator)>(r0, r1);

        $i1 = $i0 - 1;

        virtualinvoke $r2.<org.apache.lucene.util.SorterTemplate: void timSort(int,int)>(0, $i1);

        return;
    }

    public static void timSort(java.util.List)
    {
        java.util.List r0;
        int $i0, $i1;
        org.apache.lucene.util.SorterTemplate $r1;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        return;

     label1:
        $r1 = staticinvoke <org.apache.lucene.util.CollectionUtil: org.apache.lucene.util.SorterTemplate getMergeSorter(java.util.List)>(r0);

        $i1 = $i0 - 1;

        virtualinvoke $r1.<org.apache.lucene.util.SorterTemplate: void timSort(int,int)>(0, $i1);

        return;
    }

    public static void insertionSort(java.util.List, java.util.Comparator)
    {
        java.util.List r0;
        int $i0, $i1;
        org.apache.lucene.util.SorterTemplate $r2;
        java.util.Comparator r1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Comparator;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        return;

     label1:
        $r2 = staticinvoke <org.apache.lucene.util.CollectionUtil: org.apache.lucene.util.SorterTemplate getSorter(java.util.List,java.util.Comparator)>(r0, r1);

        $i1 = $i0 - 1;

        virtualinvoke $r2.<org.apache.lucene.util.SorterTemplate: void insertionSort(int,int)>(0, $i1);

        return;
    }

    public static void insertionSort(java.util.List)
    {
        java.util.List r0;
        int $i0, $i1;
        org.apache.lucene.util.SorterTemplate $r1;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        return;

     label1:
        $r1 = staticinvoke <org.apache.lucene.util.CollectionUtil: org.apache.lucene.util.SorterTemplate getSorter(java.util.List)>(r0);

        $i1 = $i0 - 1;

        virtualinvoke $r1.<org.apache.lucene.util.SorterTemplate: void insertionSort(int,int)>(0, $i1);

        return;
    }

    public static void binarySort(java.util.List, java.util.Comparator)
    {
        java.util.List r0;
        int $i0, $i1;
        org.apache.lucene.util.SorterTemplate $r2;
        java.util.Comparator r1;

        r0 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.Comparator;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        return;

     label1:
        $r2 = staticinvoke <org.apache.lucene.util.CollectionUtil: org.apache.lucene.util.SorterTemplate getSorter(java.util.List,java.util.Comparator)>(r0, r1);

        $i1 = $i0 - 1;

        virtualinvoke $r2.<org.apache.lucene.util.SorterTemplate: void binarySort(int,int)>(0, $i1);

        return;
    }

    public static void binarySort(java.util.List)
    {
        java.util.List r0;
        int $i0, $i1;
        org.apache.lucene.util.SorterTemplate $r1;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if $i0 > 1 goto label1;

        return;

     label1:
        $r1 = staticinvoke <org.apache.lucene.util.CollectionUtil: org.apache.lucene.util.SorterTemplate getSorter(java.util.List)>(r0);

        $i1 = $i0 - 1;

        virtualinvoke $r1.<org.apache.lucene.util.SorterTemplate: void binarySort(int,int)>(0, $i1);

        return;
    }
}
