public class org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup extends java.lang.Object implements javax.servlet.descriptor.JspPropertyGroupDescriptor
{
    private java.util.List _urlPatterns;
    private java.lang.String _elIgnored;
    private java.lang.String _pageEncoding;
    private java.lang.String _scriptingInvalid;
    private java.lang.String _isXml;
    private java.util.List _includePreludes;
    private java.util.List _includeCodas;
    private java.lang.String _deferredSyntaxAllowedAsLiteral;
    private java.lang.String _trimDirectiveWhitespaces;
    private java.lang.String _defaultContentType;
    private java.lang.String _buffer;
    private java.lang.String _errorOnUndeclaredNamespace;

    public void <init>()
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.util.ArrayList $r1, $r2, $r3;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.util.List _urlPatterns> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.util.List _includePreludes> = $r2;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.util.List _includeCodas> = $r3;

        return;
    }

    public java.util.Collection getUrlPatterns()
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r1;
        java.util.List $r2;
        java.util.ArrayList $r0;

        r1 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.util.List _urlPatterns>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r0;
    }

    public void addUrlPattern(java.lang.String)
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.util.List $r2, $r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.util.List _urlPatterns>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.util.List _urlPatterns>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public java.lang.String getElIgnored()
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        $r1 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _elIgnored>;

        return $r1;
    }

    public void setElIgnored(java.lang.String)
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _elIgnored> = r1;

        return;
    }

    public java.lang.String getPageEncoding()
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        $r1 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _pageEncoding>;

        return $r1;
    }

    public void setPageEncoding(java.lang.String)
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _pageEncoding> = r1;

        return;
    }

    public void setScriptingInvalid(java.lang.String)
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _scriptingInvalid> = r1;

        return;
    }

    public void setIsXml(java.lang.String)
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _isXml> = r1;

        return;
    }

    public void setDeferredSyntaxAllowedAsLiteral(java.lang.String)
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _deferredSyntaxAllowedAsLiteral> = r1;

        return;
    }

    public void setTrimDirectiveWhitespaces(java.lang.String)
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _trimDirectiveWhitespaces> = r1;

        return;
    }

    public void setDefaultContentType(java.lang.String)
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _defaultContentType> = r1;

        return;
    }

    public void setBuffer(java.lang.String)
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _buffer> = r1;

        return;
    }

    public void setErrorOnUndeclaredNamespace(java.lang.String)
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        r1 := @parameter0: java.lang.String;

        r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _errorOnUndeclaredNamespace> = r1;

        return;
    }

    public java.lang.String getScriptingInvalid()
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        $r1 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _scriptingInvalid>;

        return $r1;
    }

    public java.lang.String getIsXml()
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        $r1 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _isXml>;

        return $r1;
    }

    public java.util.Collection getIncludePreludes()
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r1;
        java.util.List $r2;
        java.util.ArrayList $r0;

        r1 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.util.List _includePreludes>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r0;
    }

    public void addIncludePrelude(java.lang.String)
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.util.List $r2, $r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.util.List _includePreludes>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.util.List _includePreludes>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public java.util.Collection getIncludeCodas()
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r1;
        java.util.List $r2;
        java.util.ArrayList $r0;

        r1 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        $r0 = new java.util.ArrayList;

        $r2 = r1.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.util.List _includeCodas>;

        specialinvoke $r0.<java.util.ArrayList: void <init>(java.util.Collection)>($r2);

        return $r0;
    }

    public void addIncludeCoda(java.lang.String)
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.util.List $r2, $r3;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.util.List _includeCodas>;

        $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r3 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.util.List _includeCodas>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public java.lang.String getDeferredSyntaxAllowedAsLiteral()
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        $r1 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _deferredSyntaxAllowedAsLiteral>;

        return $r1;
    }

    public java.lang.String getTrimDirectiveWhitespaces()
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        $r1 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _trimDirectiveWhitespaces>;

        return $r1;
    }

    public java.lang.String getDefaultContentType()
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        $r1 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _defaultContentType>;

        return $r1;
    }

    public java.lang.String getBuffer()
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        $r1 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _buffer>;

        return $r1;
    }

    public java.lang.String getErrorOnUndeclaredNamespace()
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r0;
        java.lang.String $r1;

        r0 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        $r1 = r0.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _errorOnUndeclaredNamespace>;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup r3;
        java.lang.StringBuilder $r1, $r2, $r5, $r7, $r8, $r10, $r12, $r13, $r15, $r17, $r18, $r20, $r22, $r23, $r25, $r27, $r28, $r30, $r32, $r33, $r35, $r37, $r38, $r40, $r42, $r43, $r45, $r53, $r54, $r55, $r58, $r59, $r60;
        java.lang.StringBuffer $r0;
        java.lang.String $r4, $r6, $r9, $r11, $r14, $r16, $r19, $r21, $r24, $r26, $r29, $r31, $r34, $r36, $r39, $r41, $r44, $r46, $r51, $r56, $r61, r62, r63;
        boolean $z0, $z1;
        java.util.List $r47, $r49;
        java.util.Iterator $r48, $r50;
        java.lang.Object $r52, $r57;

        r3 := @this: org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("JspPropertyGroupDescriptor:");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" el-ignored=");

        $r4 = r3.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _elIgnored>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is-xml=");

        $r9 = r3.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _isXml>;

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" page-encoding=");

        $r14 = r3.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _pageEncoding>;

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r16);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" scripting-invalid=");

        $r19 = r3.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _scriptingInvalid>;

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" deferred-syntax-allowed-as-literal=");

        $r24 = r3.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _deferredSyntaxAllowedAsLiteral>;

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r26);

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" trim-directive-whitespaces");

        $r29 = r3.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _trimDirectiveWhitespaces>;

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r31);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" default-content-type=");

        $r34 = r3.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _defaultContentType>;

        $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r36);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" buffer=");

        $r39 = r3.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _buffer>;

        $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r41);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" error-on-undeclared-namespace=");

        $r44 = r3.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.lang.String _errorOnUndeclaredNamespace>;

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r46);

        $r47 = r3.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.util.List _includePreludes>;

        $r48 = interfaceinvoke $r47.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r48.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r57 = interfaceinvoke $r48.<java.util.Iterator: java.lang.Object next()>();

        r62 = (java.lang.String) $r57;

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" include-prelude=");

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r62);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r61);

        goto label1;

     label2:
        $r49 = r3.<org.eclipse.jetty.servlet.ServletContextHandler$JspPropertyGroup: java.util.List _includeCodas>;

        $r50 = interfaceinvoke $r49.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r50.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r52 = interfaceinvoke $r50.<java.util.Iterator: java.lang.Object next()>();

        r63 = (java.lang.String) $r52;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" include-coda=");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r63);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r56);

        goto label3;

     label4:
        $r51 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r51;
    }
}
