public final class com.google.common.net.InetAddresses extends java.lang.Object
{
    private static final int IPV4_PART_COUNT;
    private static final int IPV6_PART_COUNT;
    private static final java.net.Inet4Address LOOPBACK4;
    private static final java.net.Inet4Address ANY4;

    private void <init>()
    {
        com.google.common.net.InetAddresses r0;

        r0 := @this: com.google.common.net.InetAddresses;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.net.Inet4Address getInet4Address(byte[])
    {
        byte[] r0;
        java.lang.Object[] $r1, $r6, $r11;
        java.lang.Integer $r2;
        java.net.InetAddress $r3;
        int $i0, $i1;
        java.lang.String $r7, $r8, $r12, $r13;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r10;
        java.net.Inet4Address $r4;
        java.net.UnknownHostException $r5, $r9;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        if $i0 != 4 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        $r1 = newarray (java.lang.Object)[1];

        $i1 = lengthof r0;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[0] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z1, "Byte array has invalid length for an IPv4 address: %s != 4.", $r1);

     label3:
        $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r0);

        $z0 = $r3 instanceof java.net.Inet4Address;

        if $z0 != 0 goto label4;

        $r5 = new java.net.UnknownHostException;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = virtualinvoke $r3.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r6[0] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\'%s\' is not an IPv4 address.", $r6);

        specialinvoke $r5.<java.net.UnknownHostException: void <init>(java.lang.String)>($r8);

        throw $r5;

     label4:
        $r4 = (java.net.Inet4Address) $r3;

     label5:
        return $r4;

     label6:
        $r9 := @caughtexception;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = newarray (java.lang.Object)[1];

        $r12 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r0);

        $r11[0] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Host address \'%s\' is not a valid IPv4 address.", $r11);

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r9);

        throw $r10;

        catch java.net.UnknownHostException from label3 to label5 with label6;
    }

    public static java.net.InetAddress forString(java.lang.String)
    {
        byte[] $r1, r10;
        java.lang.Object[] $r4, $r8;
        java.lang.IllegalArgumentException $r3, $r7;
        java.net.UnknownHostException $r6;
        java.net.InetAddress $r2;
        java.lang.String r0, $r5, $r9;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: byte[] textToNumericFormatV4(java.lang.String)>(r0);

        r10 = $r1;

        if $r1 != null goto label1;

        r10 = staticinvoke <com.google.common.net.InetAddresses: byte[] textToNumericFormatV6(java.lang.String)>(r0);

     label1:
        if r10 != null goto label2;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r0;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\'%s\' is not an IP string literal.", $r4);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r3;

     label2:
        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r10);

     label3:
        return $r2;

     label4:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r0;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\'%s\' is extremely broken.", $r8);

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r9, $r6);

        throw $r7;

        catch java.net.UnknownHostException from label2 to label3 with label4;
    }

    public static boolean isInetAddress(java.lang.String)
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.String;

     label1:
        staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forString(java.lang.String)>(r0);

     label2:
        return 1;

     label3:
        $r1 := @caughtexception;

        return 0;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    private static byte[] textToNumericFormatV4(java.lang.String)
    {
        byte[] r2;
        java.lang.String[] $r1;
        java.lang.NumberFormatException $r6;
        byte $b3;
        int $i0, $i1, $i2, $i4, i5;
        java.lang.String r0, $r3, $r4, $r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");

        if $z0 == 0 goto label01;

        return null;

     label01:
        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $i0 = lengthof $r1;

        if $i0 == 4 goto label02;

        return null;

     label02:
        r2 = newarray (byte)[4];

     label03:
        i5 = 0;

     label04:
        $i1 = lengthof r2;

        if i5 >= $i1 goto label09;

        $r3 = $r1[i5];

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        if $i2 < 0 goto label05;

        if $i2 <= 255 goto label06;

     label05:
        return null;

     label06:
        $r4 = $r1[i5];

        $z1 = virtualinvoke $r4.<java.lang.String: boolean startsWith(java.lang.String)>("0");

        if $z1 == 0 goto label08;

        $r5 = $r1[i5];

        $i4 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i4 == 1 goto label08;

     label07:
        return null;

     label08:
        $b3 = (byte) $i2;

        r2[i5] = $b3;

        i5 = i5 + 1;

        goto label04;

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

        return null;

     label11:
        return r2;

        catch java.lang.NumberFormatException from label03 to label05 with label10;
        catch java.lang.NumberFormatException from label06 to label07 with label10;
        catch java.lang.NumberFormatException from label08 to label09 with label10;
    }

    private static byte[] textToNumericFormatV6(java.lang.String)
    {
        byte[] $r3;
        java.nio.ByteBuffer $r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String[] $r1, $r6, $r10;
        short $s9, $s12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i10, $i11, $i13, i14, i15, i16, i17, i18, $i19;
        java.lang.String $r2, $r4, $r5, $r7, $r8, $r9, $r11, $r12, $r13, r16;
        java.lang.NumberFormatException $r14, $r15;

        r16 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(":");

        if $z0 != 0 goto label01;

        return null;

     label01:
        $z1 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(":::");

        if $z1 == 0 goto label02;

        return null;

     label02:
        $z2 = virtualinvoke r16.<java.lang.String: boolean contains(java.lang.CharSequence)>(".");

        if $z2 == 0 goto label03;

        $r13 = staticinvoke <com.google.common.net.InetAddresses: java.lang.String convertDottedQuadToHex(java.lang.String)>(r16);

        r16 = $r13;

        if $r13 != null goto label03;

        return null;

     label03:
        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(16);

        i14 = 0;

        $r1 = virtualinvoke r16.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("::", 2);

        $r2 = $r1[0];

        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z3 != 0 goto label12;

        $r9 = $r1[0];

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(":", 8);

     label04:
        i15 = 0;

     label05:
        $i10 = lengthof $r10;

        if i15 >= $i10 goto label08;

        $r11 = $r10[i15];

        $z6 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z6 == 0 goto label07;

     label06:
        return null;

     label07:
        $r12 = $r10[i15];

        $i11 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r12, 16);

        $i13 = 2 * i15;

        $s12 = (short) $i11;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>($i13, $s12);

        i15 = i15 + 1;

        goto label05;

     label08:
        i16 = lengthof $r10;

     label09:
        goto label11;

     label10:
        $r15 := @caughtexception;

        return null;

     label11:
        goto label13;

     label12:
        i16 = 1;

     label13:
        $i0 = lengthof $r1;

        if $i0 <= 1 goto label23;

        $r4 = $r1[1];

        $z4 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z4 != 0 goto label22;

        $r5 = $r1[1];

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(":", 8);

     label14:
        i17 = 0;

     label15:
        $i2 = lengthof $r6;

        if i17 >= $i2 goto label18;

        $i3 = lengthof $r6;

        $i4 = $i3 - i17;

        i18 = $i4 - 1;

        $r7 = $r6[i18];

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z5 == 0 goto label17;

     label16:
        return null;

     label17:
        $r8 = $r6[i18];

        $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r8, 16);

        $i6 = 8 - i17;

        $i7 = $i6 - 1;

        i8 = 2 * $i7;

        $s9 = (short) $i5;

        virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(int,short)>(i8, $s9);

        i17 = i17 + 1;

        goto label15;

     label18:
        i14 = lengthof $r6;

     label19:
        goto label21;

     label20:
        $r14 := @caughtexception;

        return null;

     label21:
        goto label23;

     label22:
        i14 = 1;

     label23:
        $i19 = i16 + i14;

        if $i19 <= 8 goto label24;

        return null;

     label24:
        $i1 = lengthof $r1;

        if $i1 != 1 goto label25;

        if $i19 == 8 goto label25;

        return null;

     label25:
        $r3 = virtualinvoke $r0.<java.nio.ByteBuffer: byte[] array()>();

        return $r3;

        catch java.lang.NumberFormatException from label04 to label06 with label10;
        catch java.lang.NumberFormatException from label07 to label09 with label10;
        catch java.lang.NumberFormatException from label14 to label16 with label20;
        catch java.lang.NumberFormatException from label17 to label19 with label20;
    }

    private static java.lang.String convertDottedQuadToHex(java.lang.String)
    {
        byte[] $r3;
        byte $b3, $b5, $b9, $b11;
        java.lang.StringBuilder $r7, $r8, $r9, $r10, $r12;
        short $s4, $s6, $s10, $s12, $s15, $s17, $s19, $s21;
        int $i0, $i1, $i2, $i7, $i8, $i13, $i14, $i16, $i18, $i20, $i22;
        java.lang.String r0, $r1, $r2, $r4, $r5, $r11;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(58);

        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $i2 = $i0 + 1;

        $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i2);

        $r3 = staticinvoke <com.google.common.net.InetAddresses: byte[] textToNumericFormatV4(java.lang.String)>($r2);

        if $r3 != null goto label1;

        return null;

     label1:
        $b3 = $r3[0];

        $s15 = (short) $b3;

        $s4 = $s15 & 255;

        $i16 = (int) $s4;

        $i7 = $i16 << 8;

        $b5 = $r3[1];

        $s17 = (short) $b5;

        $s6 = $s17 & 255;

        $i18 = (int) $s6;

        $i8 = $i7 | $i18;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i8);

        $b9 = $r3[2];

        $s19 = (short) $b9;

        $s10 = $s19 & 255;

        $i20 = (int) $s10;

        $i13 = $i20 << 8;

        $b11 = $r3[3];

        $s21 = (short) $b11;

        $s12 = $s21 & 255;

        $i22 = (int) $s12;

        $i14 = $i13 | $i22;

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i14);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    public static java.lang.String toUriString(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6;
        java.lang.String $r1, $r4, $r7;
        boolean $z0;

        r0 := @parameter0: java.net.InetAddress;

        $z0 = r0 instanceof java.net.Inet6Address;

        if $z0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r4 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label1:
        $r1 = virtualinvoke r0.<java.net.InetAddress: java.lang.String getHostAddress()>();

        return $r1;
    }

    public static java.net.InetAddress forUriString(java.lang.String)
    {
        java.net.InetAddress $r1, $r9;
        int $i0, $i1, $i2;
        java.lang.String r0, $r7, $r8, $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r2, $r10, $r16;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r11, $r12, $r13, $r14;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label01;

        $z4 = 1;

        goto label02;

     label01:
        $z4 = 0;

     label02:
        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)>($z4, "host string is empty");

     label03:
        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forString(java.lang.String)>(r0);

        $z0 = $r1 instanceof java.net.Inet4Address;

        if $z0 == 0 goto label05;

     label04:
        return $r1;

     label05:
        goto label07;

     label06:
        $r16 := @caughtexception;

     label07:
        $z1 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("[");

        if $z1 == 0 goto label08;

        $z2 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>("]");

        if $z2 != 0 goto label09;

     label08:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid address: \"");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label09:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        $r8 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i2);

        $r9 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forString(java.lang.String)>($r8);

        $z3 = $r9 instanceof java.net.Inet6Address;

        if $z3 == 0 goto label10;

        return $r9;

     label10:
        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not a valid address: \"");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(34);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r10;

        catch java.lang.IllegalArgumentException from label03 to label04 with label06;
    }

    public static boolean isUriInetAddress(java.lang.String)
    {
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.String;

     label1:
        staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forUriString(java.lang.String)>(r0);

     label2:
        return 1;

     label3:
        $r1 := @caughtexception;

        return 0;

        catch java.lang.IllegalArgumentException from label1 to label2 with label3;
    }

    public static boolean isCompatIPv4Address(java.net.Inet6Address)
    {
        byte[] $r1;
        java.net.Inet6Address r0;
        byte $b0, $b1, $b2, $b3, $b4;
        boolean $z0;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = virtualinvoke r0.<java.net.Inet6Address: boolean isIPv4CompatibleAddress()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $b0 = $r1[12];

        if $b0 != 0 goto label3;

        $b1 = $r1[13];

        if $b1 != 0 goto label3;

        $b2 = $r1[14];

        if $b2 != 0 goto label3;

        $b3 = $r1[15];

        if $b3 == 0 goto label2;

        $b4 = $r1[15];

        if $b4 != 1 goto label3;

     label2:
        return 0;

     label3:
        return 1;
    }

    public static java.net.Inet4Address getCompatIPv4Address(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        byte[] $r3, $r4;
        java.lang.Object[] $r1;
        java.lang.String $r2;
        java.net.Inet4Address $r5;
        boolean $z0;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isCompatIPv4Address(java.net.Inet6Address)>(r0);

        $r1 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke r0.<java.net.Inet6Address: java.lang.String getHostAddress()>();

        $r1[0] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Address \'%s\' is not IPv4-compatible.", $r1);

        $r3 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $r4 = staticinvoke <com.google.common.net.InetAddresses: byte[] copyOfRange(byte[],int,int)>($r3, 12, 16);

        $r5 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r4);

        return $r5;
    }

    public static boolean is6to4Address(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        byte[] $r1;
        byte $b0, $b1;
        int $i2, $i3;
        boolean $z0;

        r0 := @parameter0: java.net.Inet6Address;

        $r1 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $b0 = $r1[0];

        $i2 = (int) $b0;

        if $i2 != 32 goto label1;

        $b1 = $r1[1];

        $i3 = (int) $b1;

        if $i3 != 2 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static java.net.Inet4Address get6to4IPv4Address(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        byte[] $r3, $r4;
        java.lang.Object[] $r1;
        java.lang.String $r2;
        java.net.Inet4Address $r5;
        boolean $z0;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean is6to4Address(java.net.Inet6Address)>(r0);

        $r1 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke r0.<java.net.Inet6Address: java.lang.String getHostAddress()>();

        $r1[0] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Address \'%s\' is not a 6to4 address.", $r1);

        $r3 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $r4 = staticinvoke <com.google.common.net.InetAddresses: byte[] copyOfRange(byte[],int,int)>($r3, 2, 6);

        $r5 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r4);

        return $r5;
    }

    public static boolean isTeredoAddress(java.net.Inet6Address)
    {
        byte[] $r1;
        java.net.Inet6Address r0;
        byte $b0, $b1, $b2, $b3;
        int $i4;
        boolean $z0;

        r0 := @parameter0: java.net.Inet6Address;

        $r1 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $b0 = $r1[0];

        $i4 = (int) $b0;

        if $i4 != 32 goto label1;

        $b1 = $r1[1];

        if $b1 != 1 goto label1;

        $b2 = $r1[2];

        if $b2 != 0 goto label1;

        $b3 = $r1[3];

        if $b3 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public static com.google.common.net.InetAddresses$TeredoInfo getTeredoInfo(java.net.Inet6Address)
    {
        byte[] $r3, $r4, $r8;
        java.lang.Object[] $r1;
        com.google.common.net.InetAddresses$TeredoInfo $r11;
        short $s0, $s2, $s3, $s14;
        byte $b6, $b7, $b8;
        com.google.common.io.ByteArrayDataInput $r6, $r7;
        int i1, i4, $i5, i9, $i10, $i12, $i15, $i17;
        java.lang.String $r2;
        boolean $z0;
        java.net.Inet4Address $r5, $r9;
        java.net.Inet6Address r0;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isTeredoAddress(java.net.Inet6Address)>(r0);

        $r1 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke r0.<java.net.Inet6Address: java.lang.String getHostAddress()>();

        $r1[0] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Address \'%s\' is not a Teredo address.", $r1);

        $r3 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $r4 = staticinvoke <com.google.common.net.InetAddresses: byte[] copyOfRange(byte[],int,int)>($r3, 4, 8);

        $r5 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r4);

        $r6 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.ByteArrayDataInput newDataInput(byte[],int)>($r3, 8);

        $s0 = interfaceinvoke $r6.<com.google.common.io.ByteArrayDataInput: short readShort()>();

        $i10 = (int) $s0;

        $i12 = (int) 65535;

        i1 = $i10 & $i12;

        $r7 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.ByteArrayDataInput newDataInput(byte[],int)>($r3, 10);

        $s2 = interfaceinvoke $r7.<com.google.common.io.ByteArrayDataInput: short readShort()>();

        $s14 = (short) -1;

        $s3 = $s2 ^ $s14;

        $i15 = (int) $s3;

        $i17 = (int) 65535;

        i4 = $i15 & $i17;

        $r8 = staticinvoke <com.google.common.net.InetAddresses: byte[] copyOfRange(byte[],int,int)>($r3, 12, 16);

        i9 = 0;

     label1:
        $i5 = lengthof $r8;

        if i9 >= $i5 goto label2;

        $b6 = $r8[i9];

        $b7 = $b6 ^ -1;

        $b8 = (byte) $b7;

        $r8[i9] = $b8;

        i9 = i9 + 1;

        goto label1;

     label2:
        $r9 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r8);

        $r11 = new com.google.common.net.InetAddresses$TeredoInfo;

        specialinvoke $r11.<com.google.common.net.InetAddresses$TeredoInfo: void <init>(java.net.Inet4Address,java.net.Inet4Address,int,int)>($r5, $r9, i4, i1);

        return $r11;
    }

    public static boolean isIsatapAddress(java.net.Inet6Address)
    {
        byte[] $r1;
        java.net.Inet6Address r0;
        byte $b0, $b1, $b2, $b3, $b4;
        int $i5, $i6, $i7, $i9;
        boolean $z0, $z1;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isTeredoAddress(java.net.Inet6Address)>(r0);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $b0 = $r1[8];

        $b1 = $b0 | 3;

        $i5 = (int) $b1;

        if $i5 == 3 goto label2;

        return 0;

     label2:
        $b2 = $r1[9];

        if $b2 != 0 goto label3;

        $b3 = $r1[10];

        $i6 = (int) $b3;

        if $i6 != 94 goto label3;

        $b4 = $r1[11];

        $i7 = (int) $b4;

        $i9 = (int) -2;

        if $i7 != $i9 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        return $z1;
    }

    public static java.net.Inet4Address getIsatapIPv4Address(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        byte[] $r3, $r4;
        java.lang.Object[] $r1;
        java.lang.String $r2;
        java.net.Inet4Address $r5;
        boolean $z0;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isIsatapAddress(java.net.Inet6Address)>(r0);

        $r1 = newarray (java.lang.Object)[1];

        $r2 = virtualinvoke r0.<java.net.Inet6Address: java.lang.String getHostAddress()>();

        $r1[0] = $r2;

        staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])>($z0, "Address \'%s\' is not an ISATAP address.", $r1);

        $r3 = virtualinvoke r0.<java.net.Inet6Address: byte[] getAddress()>();

        $r4 = staticinvoke <com.google.common.net.InetAddresses: byte[] copyOfRange(byte[],int,int)>($r3, 12, 16);

        $r5 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r4);

        return $r5;
    }

    public static boolean hasEmbeddedIPv4ClientAddress(java.net.Inet6Address)
    {
        java.net.Inet6Address r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isCompatIPv4Address(java.net.Inet6Address)>(r0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <com.google.common.net.InetAddresses: boolean is6to4Address(java.net.Inet6Address)>(r0);

        if $z1 != 0 goto label1;

        $z2 = staticinvoke <com.google.common.net.InetAddresses: boolean isTeredoAddress(java.net.Inet6Address)>(r0);

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static java.net.Inet4Address getEmbeddedIPv4ClientAddress(java.net.Inet6Address)
    {
        java.lang.Object[] $r2;
        com.google.common.net.InetAddresses$TeredoInfo $r5;
        java.lang.IllegalArgumentException $r1;
        java.net.Inet4Address $r6, $r7, $r8;
        java.net.Inet6Address r0;
        java.lang.String $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.net.Inet6Address;

        $z0 = staticinvoke <com.google.common.net.InetAddresses: boolean isCompatIPv4Address(java.net.Inet6Address)>(r0);

        if $z0 == 0 goto label1;

        $r8 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getCompatIPv4Address(java.net.Inet6Address)>(r0);

        return $r8;

     label1:
        $z1 = staticinvoke <com.google.common.net.InetAddresses: boolean is6to4Address(java.net.Inet6Address)>(r0);

        if $z1 == 0 goto label2;

        $r7 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address get6to4IPv4Address(java.net.Inet6Address)>(r0);

        return $r7;

     label2:
        $z2 = staticinvoke <com.google.common.net.InetAddresses: boolean isTeredoAddress(java.net.Inet6Address)>(r0);

        if $z2 == 0 goto label3;

        $r5 = staticinvoke <com.google.common.net.InetAddresses: com.google.common.net.InetAddresses$TeredoInfo getTeredoInfo(java.net.Inet6Address)>(r0);

        $r6 = virtualinvoke $r5.<com.google.common.net.InetAddresses$TeredoInfo: java.net.Inet4Address getClient()>();

        return $r6;

     label3:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r0.<java.net.Inet6Address: java.lang.String getHostAddress()>();

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\'%s\' has no embedded IPv4 address.", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r1;
    }

    public static java.net.Inet4Address getCoercedIPv4Address(java.net.InetAddress)
    {
        byte[] $r1, $r2, $r4;
        long l7;
        java.nio.ByteBuffer $r3;
        java.net.InetAddress r0;
        byte $b3, $b4, $b5;
        int $i0, $i1, $i2, i6, i8, $i10, $i12;
        boolean $z0, $z1, z2, z3, z4;
        java.net.Inet4Address $r5, $r6, $r8, $r9, $r10;
        java.net.Inet6Address $r7;

        r0 := @parameter0: java.net.InetAddress;

        $z0 = r0 instanceof java.net.Inet4Address;

        if $z0 == 0 goto label1;

        $r10 = (java.net.Inet4Address) r0;

        return $r10;

     label1:
        $r1 = virtualinvoke r0.<java.net.InetAddress: byte[] getAddress()>();

        z2 = 1;

        z4 = 1;

        z3 = 1;

        i6 = 0;

     label2:
        if i6 >= 15 goto label4;

        $b5 = $r1[i6];

        if $b5 == 0 goto label3;

        z2 = 0;

        z4 = 0;

        z3 = 0;

        goto label4;

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        if z3 == 0 goto label5;

        $b4 = $r1[15];

        if $b4 != 1 goto label5;

        $r9 = <com.google.common.net.InetAddresses: java.net.Inet4Address LOOPBACK4>;

        return $r9;

     label5:
        if z4 == 0 goto label6;

        $b3 = $r1[15];

        if $b3 != 0 goto label6;

        $r8 = <com.google.common.net.InetAddresses: java.net.Inet4Address ANY4>;

        return $r8;

     label6:
        $r7 = (java.net.Inet6Address) r0;

        $z1 = staticinvoke <com.google.common.net.InetAddresses: boolean hasEmbeddedIPv4ClientAddress(java.net.Inet6Address)>($r7);

        if $z1 == 0 goto label7;

        $r6 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getEmbeddedIPv4ClientAddress(java.net.Inet6Address)>($r7);

        $i1 = virtualinvoke $r6.<java.net.Inet4Address: int hashCode()>();

        l7 = (long) $i1;

        goto label8;

     label7:
        $r2 = virtualinvoke $r7.<java.net.Inet6Address: byte[] getAddress()>();

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>($r2, 0, 8);

        l7 = virtualinvoke $r3.<java.nio.ByteBuffer: long getLong()>();

     label8:
        $i0 = staticinvoke <com.google.common.net.InetAddresses: int hash64To32(long)>(l7);

        $i2 = $i0 | -536870912;

        i8 = $i2;

        $i10 = (int) -1;

        if $i2 != $i10 goto label9;

        $i12 = (int) -2;

        i8 = $i12;

     label9:
        $r4 = staticinvoke <com.google.common.primitives.Ints: byte[] toByteArray(int)>(i8);

        $r5 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r4);

        return $r5;
    }

    static int hash64To32(long)
    {
        long $l0, $l1, $l2, $l3, $l4, $l5, l7, l8, l9, l10, l11, l12, l13;
        int $i6;

        l7 := @parameter0: long;

        $l1 = l7 ^ -1L;

        $l0 = l7 << 18;

        l8 = $l1 + $l0;

        $l2 = l8 >>> 31;

        l9 = l8 ^ $l2;

        l10 = l9 * 21L;

        $l3 = l10 >>> 11;

        l11 = l10 ^ $l3;

        $l4 = l11 << 6;

        l12 = l11 + $l4;

        $l5 = l12 >>> 22;

        l13 = l12 ^ $l5;

        $i6 = (int) l13;

        return $i6;
    }

    public static int coerceToInteger(java.net.InetAddress)
    {
        java.net.InetAddress r0;
        byte[] $r2;
        com.google.common.io.ByteArrayDataInput $r3;
        int $i0;
        java.net.Inet4Address $r1;

        r0 := @parameter0: java.net.InetAddress;

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getCoercedIPv4Address(java.net.InetAddress)>(r0);

        $r2 = virtualinvoke $r1.<java.net.Inet4Address: byte[] getAddress()>();

        $r3 = staticinvoke <com.google.common.io.ByteStreams: com.google.common.io.ByteArrayDataInput newDataInput(byte[])>($r2);

        $i0 = interfaceinvoke $r3.<com.google.common.io.ByteArrayDataInput: int readInt()>();

        return $i0;
    }

    public static java.net.Inet4Address fromInteger(int)
    {
        int i0;
        byte[] $r0;
        java.net.Inet4Address $r1;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.google.common.primitives.Ints: byte[] toByteArray(int)>(i0);

        $r1 = staticinvoke <com.google.common.net.InetAddresses: java.net.Inet4Address getInet4Address(byte[])>($r0);

        return $r1;
    }

    public static java.net.InetAddress fromLittleEndianByteArray(byte[]) throws java.net.UnknownHostException
    {
        byte[] r0, r1;
        java.net.InetAddress $r2;
        byte $b5;
        int $i0, $i1, $i2, $i3, $i4, i6;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        r1 = newarray (byte)[$i0];

        i6 = 0;

     label1:
        $i1 = lengthof r0;

        if i6 >= $i1 goto label2;

        $i2 = lengthof r0;

        $i3 = $i2 - i6;

        $i4 = $i3 - 1;

        $b5 = r0[$i4];

        r1[i6] = $b5;

        i6 = i6 + 1;

        goto label1;

     label2:
        $r2 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r1);

        return $r2;
    }

    private static byte[] copyOfRange(byte[], int, int)
    {
        byte[] r0, r1;
        int i0, $i1, $i2, i3, $i4, $i5;

        r0 := @parameter0: byte[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $i1 = lengthof r0;

        $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i1);

        $i4 = i0 - i3;

        r1 = newarray (byte)[$i4];

        $i5 = $i2 - i3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i3, r1, 0, $i5);

        return r1;
    }

    static java.net.Inet4Address access$000()
    {
        java.net.Inet4Address $r0;

        $r0 = <com.google.common.net.InetAddresses: java.net.Inet4Address ANY4>;

        return $r0;
    }

    static void <clinit>()
    {
        java.net.InetAddress $r0, $r2;
        java.net.Inet4Address $r1, $r3;

        <com.google.common.net.InetAddresses: int IPV6_PART_COUNT> = 8;

        <com.google.common.net.InetAddresses: int IPV4_PART_COUNT> = 4;

        $r0 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forString(java.lang.String)>("127.0.0.1");

        $r1 = (java.net.Inet4Address) $r0;

        <com.google.common.net.InetAddresses: java.net.Inet4Address LOOPBACK4> = $r1;

        $r2 = staticinvoke <com.google.common.net.InetAddresses: java.net.InetAddress forString(java.lang.String)>("0.0.0.0");

        $r3 = (java.net.Inet4Address) $r2;

        <com.google.common.net.InetAddresses: java.net.Inet4Address ANY4> = $r3;

        return;
    }
}
