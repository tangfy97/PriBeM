final class org.apache.lucene.index.ByteBlockPool extends java.lang.Object
{
    public byte[][] buffers;
    int bufferUpto;
    public int byteUpto;
    public byte[] buffer;
    public int byteOffset;
    private final org.apache.lucene.index.ByteBlockPool$Allocator allocator;
    static final int[] nextLevelArray;
    static final int[] levelSizeArray;
    static final int FIRST_LEVEL_SIZE;

    public void <init>(org.apache.lucene.index.ByteBlockPool$Allocator)
    {
        byte[][] $r1;
        org.apache.lucene.index.ByteBlockPool$Allocator r2;
        int $i1, $i3, $i5;
        org.apache.lucene.index.ByteBlockPool r0;

        r0 := @this: org.apache.lucene.index.ByteBlockPool;

        r2 := @parameter0: org.apache.lucene.index.ByteBlockPool$Allocator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (byte[])[10];

        r0.<org.apache.lucene.index.ByteBlockPool: byte[][] buffers> = $r1;

        $i1 = (int) -1;

        r0.<org.apache.lucene.index.ByteBlockPool: int bufferUpto> = $i1;

        $i3 = (int) 32768;

        r0.<org.apache.lucene.index.ByteBlockPool: int byteUpto> = $i3;

        $i5 = (int) -32768;

        r0.<org.apache.lucene.index.ByteBlockPool: int byteOffset> = $i5;

        r0.<org.apache.lucene.index.ByteBlockPool: org.apache.lucene.index.ByteBlockPool$Allocator allocator> = r2;

        return;
    }

    public void reset()
    {
        byte[] $r2, $r4, $r8;
        org.apache.lucene.index.ByteBlockPool$Allocator $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i9;
        org.apache.lucene.index.ByteBlockPool r0;
        byte[][] $r1, $r3, $r5, $r7;

        r0 := @this: org.apache.lucene.index.ByteBlockPool;

        $i0 = r0.<org.apache.lucene.index.ByteBlockPool: int bufferUpto>;

        $i9 = (int) -1;

        if $i0 == $i9 goto label4;

        i7 = 0;

     label1:
        $i1 = r0.<org.apache.lucene.index.ByteBlockPool: int bufferUpto>;

        if i7 >= $i1 goto label2;

        $r7 = r0.<org.apache.lucene.index.ByteBlockPool: byte[][] buffers>;

        $r8 = $r7[i7];

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>($r8, 0);

        i7 = i7 + 1;

        goto label1;

     label2:
        $r1 = r0.<org.apache.lucene.index.ByteBlockPool: byte[][] buffers>;

        $i2 = r0.<org.apache.lucene.index.ByteBlockPool: int bufferUpto>;

        $r2 = $r1[$i2];

        $i3 = r0.<org.apache.lucene.index.ByteBlockPool: int byteUpto>;

        staticinvoke <java.util.Arrays: void fill(byte[],int,int,byte)>($r2, 0, $i3, 0);

        $i4 = r0.<org.apache.lucene.index.ByteBlockPool: int bufferUpto>;

        if $i4 <= 0 goto label3;

        $r6 = r0.<org.apache.lucene.index.ByteBlockPool: org.apache.lucene.index.ByteBlockPool$Allocator allocator>;

        $r5 = r0.<org.apache.lucene.index.ByteBlockPool: byte[][] buffers>;

        $i5 = r0.<org.apache.lucene.index.ByteBlockPool: int bufferUpto>;

        $i6 = 1 + $i5;

        virtualinvoke $r6.<org.apache.lucene.index.ByteBlockPool$Allocator: void recycleByteBlocks(byte[][],int,int)>($r5, 1, $i6);

     label3:
        r0.<org.apache.lucene.index.ByteBlockPool: int bufferUpto> = 0;

        r0.<org.apache.lucene.index.ByteBlockPool: int byteUpto> = 0;

        r0.<org.apache.lucene.index.ByteBlockPool: int byteOffset> = 0;

        $r3 = r0.<org.apache.lucene.index.ByteBlockPool: byte[][] buffers>;

        $r4 = $r3[0];

        r0.<org.apache.lucene.index.ByteBlockPool: byte[] buffer> = $r4;

     label4:
        return;
    }

    public void nextBuffer()
    {
        byte[] $r4;
        org.apache.lucene.index.ByteBlockPool$Allocator $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15;
        org.apache.lucene.index.ByteBlockPool r0;
        byte[][] $r1, $r3, $r5, r6, $r7, $r8;

        r0 := @this: org.apache.lucene.index.ByteBlockPool;

        $i0 = r0.<org.apache.lucene.index.ByteBlockPool: int bufferUpto>;

        $i2 = 1 + $i0;

        $r1 = r0.<org.apache.lucene.index.ByteBlockPool: byte[][] buffers>;

        $i1 = lengthof $r1;

        if $i2 != $i1 goto label1;

        $r5 = r0.<org.apache.lucene.index.ByteBlockPool: byte[][] buffers>;

        $i9 = lengthof $r5;

        $i11 = $i9 + 1;

        $i10 = <org.apache.lucene.util.RamUsageEstimator: int NUM_BYTES_OBJECT_REF>;

        $i12 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i11, $i10);

        r6 = newarray (byte[])[$i12];

        $r8 = r0.<org.apache.lucene.index.ByteBlockPool: byte[][] buffers>;

        $r7 = r0.<org.apache.lucene.index.ByteBlockPool: byte[][] buffers>;

        $i13 = lengthof $r7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 0, r6, 0, $i13);

        r0.<org.apache.lucene.index.ByteBlockPool: byte[][] buffers> = r6;

     label1:
        $r3 = r0.<org.apache.lucene.index.ByteBlockPool: byte[][] buffers>;

        $i3 = r0.<org.apache.lucene.index.ByteBlockPool: int bufferUpto>;

        $i4 = 1 + $i3;

        $r2 = r0.<org.apache.lucene.index.ByteBlockPool: org.apache.lucene.index.ByteBlockPool$Allocator allocator>;

        $r4 = virtualinvoke $r2.<org.apache.lucene.index.ByteBlockPool$Allocator: byte[] getByteBlock()>();

        $r3[$i4] = $r4;

        r0.<org.apache.lucene.index.ByteBlockPool: byte[] buffer> = $r4;

        $i5 = r0.<org.apache.lucene.index.ByteBlockPool: int bufferUpto>;

        $i6 = $i5 + 1;

        r0.<org.apache.lucene.index.ByteBlockPool: int bufferUpto> = $i6;

        r0.<org.apache.lucene.index.ByteBlockPool: int byteUpto> = 0;

        $i7 = r0.<org.apache.lucene.index.ByteBlockPool: int byteOffset>;

        $i15 = (int) 32768;

        $i8 = $i7 + $i15;

        r0.<org.apache.lucene.index.ByteBlockPool: int byteOffset> = $i8;

        return;
    }

    public int newSlice(int)
    {
        byte[] $r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9;
        org.apache.lucene.index.ByteBlockPool r0;

        r0 := @this: org.apache.lucene.index.ByteBlockPool;

        i0 := @parameter0: int;

        $i2 = r0.<org.apache.lucene.index.ByteBlockPool: int byteUpto>;

        $i9 = (int) 32768;

        $i1 = $i9 - i0;

        if $i2 <= $i1 goto label1;

        virtualinvoke r0.<org.apache.lucene.index.ByteBlockPool: void nextBuffer()>();

     label1:
        $i7 = r0.<org.apache.lucene.index.ByteBlockPool: int byteUpto>;

        $i3 = r0.<org.apache.lucene.index.ByteBlockPool: int byteUpto>;

        $i4 = $i3 + i0;

        r0.<org.apache.lucene.index.ByteBlockPool: int byteUpto> = $i4;

        $r1 = r0.<org.apache.lucene.index.ByteBlockPool: byte[] buffer>;

        $i5 = r0.<org.apache.lucene.index.ByteBlockPool: int byteUpto>;

        $i6 = $i5 - 1;

        $r1[$i6] = 16;

        return $i7;
    }

    public int allocSlice(byte[], int)
    {
        byte[] r0, $r4, $r5, $r6, $r7;
        byte $b1, b2, $b11, $b13, $b16, $b19, $b22, $b25, $b27, $b30;
        int[] $r1, $r2;
        int i0, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i14, $i15, $i17, $i18, $i20, $i21, $i23, $i24, $i26, $i28, $i29, $i31, $i32, $i33, $i34, $i35, $i37;
        org.apache.lucene.index.ByteBlockPool r3;

        r3 := @this: org.apache.lucene.index.ByteBlockPool;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b1 = r0[i0];

        b2 = $b1 & 15;

        $r1 = <org.apache.lucene.index.ByteBlockPool: int[] nextLevelArray>;

        $i35 = (int) b2;

        i3 = $r1[$i35];

        $r2 = <org.apache.lucene.index.ByteBlockPool: int[] levelSizeArray>;

        i4 = $r2[i3];

        $i6 = r3.<org.apache.lucene.index.ByteBlockPool: int byteUpto>;

        $i37 = (int) 32768;

        $i5 = $i37 - i4;

        if $i6 <= $i5 goto label1;

        virtualinvoke r3.<org.apache.lucene.index.ByteBlockPool: void nextBuffer()>();

     label1:
        $i33 = r3.<org.apache.lucene.index.ByteBlockPool: int byteUpto>;

        $i7 = r3.<org.apache.lucene.index.ByteBlockPool: int byteOffset>;

        $i34 = $i33 + $i7;

        $i8 = r3.<org.apache.lucene.index.ByteBlockPool: int byteUpto>;

        $i9 = $i8 + i4;

        r3.<org.apache.lucene.index.ByteBlockPool: int byteUpto> = $i9;

        $r4 = r3.<org.apache.lucene.index.ByteBlockPool: byte[] buffer>;

        $i10 = i0 - 3;

        $b11 = r0[$i10];

        $r4[$i33] = $b11;

        $r5 = r3.<org.apache.lucene.index.ByteBlockPool: byte[] buffer>;

        $i14 = $i33 + 1;

        $i12 = i0 - 2;

        $b13 = r0[$i12];

        $r5[$i14] = $b13;

        $r6 = r3.<org.apache.lucene.index.ByteBlockPool: byte[] buffer>;

        $i17 = $i33 + 2;

        $i15 = i0 - 1;

        $b16 = r0[$i15];

        $r6[$i17] = $b16;

        $i20 = i0 - 3;

        $i18 = $i34 >>> 24;

        $b19 = (byte) $i18;

        r0[$i20] = $b19;

        $i23 = i0 - 2;

        $i21 = $i34 >>> 16;

        $b22 = (byte) $i21;

        r0[$i23] = $b22;

        $i26 = i0 - 1;

        $i24 = $i34 >>> 8;

        $b25 = (byte) $i24;

        r0[$i26] = $b25;

        $b27 = (byte) $i34;

        r0[i0] = $b27;

        $r7 = r3.<org.apache.lucene.index.ByteBlockPool: byte[] buffer>;

        $i28 = r3.<org.apache.lucene.index.ByteBlockPool: int byteUpto>;

        $i31 = $i28 - 1;

        $i29 = 16 | i3;

        $b30 = (byte) $i29;

        $r7[$i31] = $b30;

        $i32 = $i33 + 3;

        return $i32;
    }

    static void <clinit>()
    {
        int[] $r0, $r1, $r2;
        int $i0;

        $r0 = newarray (int)[10];

        $r0[0] = 1;

        $r0[1] = 2;

        $r0[2] = 3;

        $r0[3] = 4;

        $r0[4] = 5;

        $r0[5] = 6;

        $r0[6] = 7;

        $r0[7] = 8;

        $r0[8] = 9;

        $r0[9] = 9;

        <org.apache.lucene.index.ByteBlockPool: int[] nextLevelArray> = $r0;

        $r1 = newarray (int)[10];

        $r1[0] = 5;

        $r1[1] = 14;

        $r1[2] = 20;

        $r1[3] = 30;

        $r1[4] = 40;

        $r1[5] = 40;

        $r1[6] = 80;

        $r1[7] = 80;

        $r1[8] = 120;

        $r1[9] = 200;

        <org.apache.lucene.index.ByteBlockPool: int[] levelSizeArray> = $r1;

        $r2 = <org.apache.lucene.index.ByteBlockPool: int[] levelSizeArray>;

        $i0 = $r2[0];

        <org.apache.lucene.index.ByteBlockPool: int FIRST_LEVEL_SIZE> = $i0;

        return;
    }
}
