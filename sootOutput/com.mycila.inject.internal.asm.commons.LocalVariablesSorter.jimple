public class com.mycila.inject.internal.asm.commons.LocalVariablesSorter extends com.mycila.inject.internal.asm.MethodAdapter
{
    private static final com.mycila.inject.internal.asm.Type OBJECT_TYPE;
    private int[] mapping;
    private java.lang.Object[] newLocals;
    protected final int firstLocal;
    protected int nextLocal;
    private boolean changed;

    public void <init>(int, java.lang.String, com.mycila.inject.internal.asm.MethodVisitor)
    {
        java.lang.Object[] $r3;
        com.mycila.inject.internal.asm.Type $r6;
        byte $b6;
        com.mycila.inject.internal.asm.MethodVisitor r1;
        int[] $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, i7, $i8;
        java.lang.String r4;
        com.mycila.inject.internal.asm.Type[] $r5;
        com.mycila.inject.internal.asm.commons.LocalVariablesSorter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.LocalVariablesSorter;

        i0 := @parameter0: int;

        r4 := @parameter1: java.lang.String;

        r1 := @parameter2: com.mycila.inject.internal.asm.MethodVisitor;

        specialinvoke r0.<com.mycila.inject.internal.asm.MethodAdapter: void <init>(com.mycila.inject.internal.asm.MethodVisitor)>(r1);

        $r2 = newarray (int)[40];

        r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int[] mapping> = $r2;

        $r3 = newarray (java.lang.Object)[20];

        r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: java.lang.Object[] newLocals> = $r3;

        $r5 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type[] getArgumentTypes(java.lang.String)>(r4);

        $i1 = 8 & i0;

        if $i1 != 0 goto label1;

        $b6 = 1;

        goto label2;

     label1:
        $b6 = 0;

     label2:
        r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int nextLocal> = $b6;

        i7 = 0;

     label3:
        $i8 = lengthof $r5;

        if i7 >= $i8 goto label4;

        $i3 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int nextLocal>;

        $r6 = $r5[i7];

        $i4 = virtualinvoke $r6.<com.mycila.inject.internal.asm.Type: int getSize()>();

        $i5 = $i3 + $i4;

        r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int nextLocal> = $i5;

        i7 = i7 + 1;

        goto label3;

     label4:
        $i2 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int nextLocal>;

        r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int firstLocal> = $i2;

        return;
    }

    public void visitVarInsn(int, int)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int i0, i1, $i2;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.LocalVariablesSorter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.LocalVariablesSorter;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        lookupswitch(i0)
        {
            case 21: goto label4;
            case 22: goto label1;
            case 23: goto label3;
            case 24: goto label2;
            case 54: goto label4;
            case 55: goto label1;
            case 56: goto label3;
            case 57: goto label2;
            default: goto label5;
        };

     label1:
        r1 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        goto label6;

     label2:
        r1 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        goto label6;

     label3:
        r1 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        goto label6;

     label4:
        r1 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        goto label6;

     label5:
        r1 = <com.mycila.inject.internal.asm.commons.LocalVariablesSorter: com.mycila.inject.internal.asm.Type OBJECT_TYPE>;

     label6:
        $r2 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i2 = specialinvoke r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int remap(int,com.mycila.inject.internal.asm.Type)>(i1, r1);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitVarInsn(int,int)>(i0, $i2);

        return;
    }

    public void visitIincInsn(int, int)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r2;
        int i0, $i1, i2;
        com.mycila.inject.internal.asm.Type $r1;
        com.mycila.inject.internal.asm.commons.LocalVariablesSorter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.LocalVariablesSorter;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r2 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r1 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        $i1 = specialinvoke r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int remap(int,com.mycila.inject.internal.asm.Type)>(i0, $r1);

        interfaceinvoke $r2.<com.mycila.inject.internal.asm.MethodVisitor: void visitIincInsn(int,int)>($i1, i2);

        return;
    }

    public void visitMaxs(int, int)
    {
        com.mycila.inject.internal.asm.MethodVisitor $r1;
        int i0, $i1, i2;
        com.mycila.inject.internal.asm.commons.LocalVariablesSorter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.LocalVariablesSorter;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $i1 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int nextLocal>;

        interfaceinvoke $r1.<com.mycila.inject.internal.asm.MethodVisitor: void visitMaxs(int,int)>(i0, $i1);

        return;
    }

    public void visitLocalVariable(java.lang.String, java.lang.String, java.lang.String, com.mycila.inject.internal.asm.Label, com.mycila.inject.internal.asm.Label, int)
    {
        com.mycila.inject.internal.asm.Type $r2;
        com.mycila.inject.internal.asm.MethodVisitor $r7;
        int i0, $i1;
        com.mycila.inject.internal.asm.Label r5, r6;
        java.lang.String r1, r3, r4;
        com.mycila.inject.internal.asm.commons.LocalVariablesSorter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.LocalVariablesSorter;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: com.mycila.inject.internal.asm.Label;

        r6 := @parameter4: com.mycila.inject.internal.asm.Label;

        i0 := @parameter5: int;

        $r2 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.String)>(r1);

        $i1 = specialinvoke r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int remap(int,com.mycila.inject.internal.asm.Type)>(i0, $r2);

        $r7 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r7.<com.mycila.inject.internal.asm.MethodVisitor: void visitLocalVariable(java.lang.String,java.lang.String,java.lang.String,com.mycila.inject.internal.asm.Label,com.mycila.inject.internal.asm.Label,int)>(r3, r1, r4, r5, r6, $i1);

        return;
    }

    public void visitFrame(int, int, java.lang.Object[], int, java.lang.Object[])
    {
        java.lang.IllegalStateException $r29;
        java.lang.Integer $r9, $r11, $r13, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r23;
        byte $b9, b10;
        com.mycila.inject.internal.asm.MethodVisitor $r7, $r24;
        boolean $z0, $z1;
        com.mycila.inject.internal.asm.commons.LocalVariablesSorter r0;
        java.lang.Object[] $r1, r2, $r3, $r4, r5, $r6, $r8, $r10, $r12, r15;
        com.mycila.inject.internal.asm.Type r27;
        int i0, $i1, $i2, i3, $i4, i5, $i6, i7, i8, $i11, i12, i13, i14, $i16;
        java.lang.String $r22;
        java.lang.Object r26, r28;

        r0 := @this: com.mycila.inject.internal.asm.commons.LocalVariablesSorter;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        r15 := @parameter2: java.lang.Object[];

        i5 := @parameter3: int;

        r5 := @parameter4: java.lang.Object[];

        $i16 = (int) -1;

        if i0 == $i16 goto label01;

        $r29 = new java.lang.IllegalStateException;

        specialinvoke $r29.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ClassReader.accept() should be called with EXPAND_FRAMES flag");

        throw $r29;

     label01:
        $z0 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: boolean changed>;

        if $z0 != 0 goto label02;

        $r24 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        interfaceinvoke $r24.<com.mycila.inject.internal.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>(i0, i3, r15, i5, r5);

        return;

     label02:
        $r1 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: java.lang.Object[] newLocals>;

        $i1 = lengthof $r1;

        r2 = newarray (java.lang.Object)[$i1];

        $r3 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: java.lang.Object[] newLocals>;

        $i2 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r2, 0, $i2);

        i7 = 0;

        i8 = 0;

     label03:
        if i8 >= i3 goto label13;

        r26 = r15[i8];

        $r16 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer LONG>;

        if r26 == $r16 goto label04;

        $r23 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer DOUBLE>;

        if r26 != $r23 goto label05;

     label04:
        $b9 = 2;

        goto label06;

     label05:
        $b9 = 1;

     label06:
        b10 = $b9;

        $r17 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer TOP>;

        if r26 == $r17 goto label12;

        r27 = <com.mycila.inject.internal.asm.commons.LocalVariablesSorter: com.mycila.inject.internal.asm.Type OBJECT_TYPE>;

        $r18 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer INTEGER>;

        if r26 != $r18 goto label07;

        r27 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type INT_TYPE>;

        goto label11;

     label07:
        $r19 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer FLOAT>;

        if r26 != $r19 goto label08;

        r27 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type FLOAT_TYPE>;

        goto label11;

     label08:
        $r20 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer LONG>;

        if r26 != $r20 goto label09;

        r27 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type LONG_TYPE>;

        goto label11;

     label09:
        $r21 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer DOUBLE>;

        if r26 != $r21 goto label10;

        r27 = <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type DOUBLE_TYPE>;

        goto label11;

     label10:
        $z1 = r26 instanceof java.lang.String;

        if $z1 == 0 goto label11;

        $r22 = (java.lang.String) r26;

        r27 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getObjectType(java.lang.String)>($r22);

     label11:
        $i11 = specialinvoke r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int remap(int,com.mycila.inject.internal.asm.Type)>(i7, r27);

        specialinvoke r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: void setFrameLocal(int,java.lang.Object)>($i11, r26);

     label12:
        i7 = i7 + b10;

        i8 = i8 + 1;

        goto label03;

     label13:
        i12 = 0;

        i13 = 0;

        i14 = 0;

     label14:
        $r4 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: java.lang.Object[] newLocals>;

        $i4 = lengthof $r4;

        if i12 >= $i4 goto label18;

        $r8 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: java.lang.Object[] newLocals>;

        $i6 = i12;

        i12 = i12 + 1;

        r28 = $r8[$i6];

        if r28 == null goto label16;

        $r11 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer TOP>;

        if r28 == $r11 goto label16;

        $r12 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: java.lang.Object[] newLocals>;

        $r12[i14] = r28;

        i13 = i14 + 1;

        $r13 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer LONG>;

        if r28 == $r13 goto label15;

        $r14 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer DOUBLE>;

        if r28 != $r14 goto label17;

     label15:
        i12 = i12 + 1;

        goto label17;

     label16:
        $r10 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: java.lang.Object[] newLocals>;

        $r9 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer TOP>;

        $r10[i14] = $r9;

     label17:
        i14 = i14 + 1;

        goto label14;

     label18:
        $r7 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: com.mycila.inject.internal.asm.MethodVisitor mv>;

        $r6 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: java.lang.Object[] newLocals>;

        interfaceinvoke $r7.<com.mycila.inject.internal.asm.MethodVisitor: void visitFrame(int,int,java.lang.Object[],int,java.lang.Object[])>(i0, i13, $r6, i5, r5);

        r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: java.lang.Object[] newLocals> = r2;

        return;
    }

    public int newLocal(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Comparable r2;
        com.mycila.inject.internal.asm.commons.LocalVariablesSorter r1;

        r1 := @this: com.mycila.inject.internal.asm.commons.LocalVariablesSorter;

        r0 := @parameter0: com.mycila.inject.internal.asm.Type;

        $i0 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSort()>();

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label1;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label4;
            case 9: goto label5;
            default: goto label6;
        };

     label1:
        r2 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer INTEGER>;

        goto label7;

     label2:
        r2 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer FLOAT>;

        goto label7;

     label3:
        r2 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer LONG>;

        goto label7;

     label4:
        r2 = <com.mycila.inject.internal.asm.Opcodes: java.lang.Integer DOUBLE>;

        goto label7;

     label5:
        r2 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: java.lang.String getDescriptor()>();

        goto label7;

     label6:
        r2 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: java.lang.String getInternalName()>();

     label7:
        $i1 = r1.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int nextLocal>;

        $i2 = r1.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int nextLocal>;

        $i3 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSize()>();

        $i4 = $i2 + $i3;

        r1.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int nextLocal> = $i4;

        virtualinvoke r1.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: void setLocalType(int,com.mycila.inject.internal.asm.Type)>($i1, r0);

        specialinvoke r1.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: void setFrameLocal(int,java.lang.Object)>($i1, r2);

        return $i1;
    }

    protected void setLocalType(int, com.mycila.inject.internal.asm.Type)
    {
        int i0;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.LocalVariablesSorter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.LocalVariablesSorter;

        i0 := @parameter0: int;

        r1 := @parameter1: com.mycila.inject.internal.asm.Type;

        return;
    }

    private void setFrameLocal(int, java.lang.Object)
    {
        java.lang.Object[] $r1, $r3, r4, $r5;
        int i0, i1, $i2, $i3, $i4;
        java.lang.Object r2;
        com.mycila.inject.internal.asm.commons.LocalVariablesSorter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.LocalVariablesSorter;

        i1 := @parameter0: int;

        r2 := @parameter1: java.lang.Object;

        $r1 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: java.lang.Object[] newLocals>;

        i0 = lengthof $r1;

        if i1 < i0 goto label1;

        $i3 = 2 * i0;

        $i2 = i1 + 1;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i2);

        r4 = newarray (java.lang.Object)[$i4];

        $r5 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: java.lang.Object[] newLocals>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r4, 0, i0);

        r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: java.lang.Object[] newLocals> = r4;

     label1:
        $r3 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: java.lang.Object[] newLocals>;

        $r3[i1] = r2;

        return;
    }

    private int remap(int, com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.asm.Type r0;
        int[] $r2, $r3, $r4, $r5, r6;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i17;
        com.mycila.inject.internal.asm.commons.LocalVariablesSorter r1;

        r1 := @this: com.mycila.inject.internal.asm.commons.LocalVariablesSorter;

        i0 := @parameter0: int;

        r0 := @parameter1: com.mycila.inject.internal.asm.Type;

        $i1 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSize()>();

        $i3 = i0 + $i1;

        $i2 = r1.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int firstLocal>;

        if $i3 > $i2 goto label1;

        return i0;

     label1:
        $i4 = 2 * i0;

        $i5 = virtualinvoke r0.<com.mycila.inject.internal.asm.Type: int getSize()>();

        $i6 = $i4 + $i5;

        i7 = $i6 - 1;

        $r2 = r1.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int[] mapping>;

        i8 = lengthof $r2;

        if i7 < i8 goto label2;

        $i12 = 2 * i8;

        $i11 = i7 + 1;

        $i13 = staticinvoke <java.lang.Math: int max(int,int)>($i12, $i11);

        r6 = newarray (int)[$i13];

        $r5 = r1.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int[] mapping>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r6, 0, i8);

        r1.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int[] mapping> = r6;

     label2:
        $r3 = r1.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int[] mapping>;

        $i14 = $r3[i7];

        if $i14 != 0 goto label3;

        $i9 = virtualinvoke r1.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int newLocalMapping(com.mycila.inject.internal.asm.Type)>(r0);

        i15 = $i9;

        virtualinvoke r1.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: void setLocalType(int,com.mycila.inject.internal.asm.Type)>($i9, r0);

        $r4 = r1.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int[] mapping>;

        $i10 = $i9 + 1;

        $r4[i7] = $i10;

        goto label4;

     label3:
        $i17 = (int) -1;

        i15 = $i14 + $i17;

     label4:
        if i15 == i0 goto label5;

        r1.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: boolean changed> = 1;

     label5:
        return i15;
    }

    protected int newLocalMapping(com.mycila.inject.internal.asm.Type)
    {
        int i0, $i1, $i2, $i3;
        com.mycila.inject.internal.asm.Type r1;
        com.mycila.inject.internal.asm.commons.LocalVariablesSorter r0;

        r0 := @this: com.mycila.inject.internal.asm.commons.LocalVariablesSorter;

        r1 := @parameter0: com.mycila.inject.internal.asm.Type;

        i0 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int nextLocal>;

        $i1 = r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int nextLocal>;

        $i2 = virtualinvoke r1.<com.mycila.inject.internal.asm.Type: int getSize()>();

        $i3 = $i1 + $i2;

        r0.<com.mycila.inject.internal.asm.commons.LocalVariablesSorter: int nextLocal> = $i3;

        return i0;
    }

    static void <clinit>()
    {
        com.mycila.inject.internal.asm.Type $r0;

        $r0 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getObjectType(java.lang.String)>("java/lang/Object");

        <com.mycila.inject.internal.asm.commons.LocalVariablesSorter: com.mycila.inject.internal.asm.Type OBJECT_TYPE> = $r0;

        return;
    }
}
