public class org.apache.batik.util.HaltingThread extends java.lang.Thread
{
    protected boolean beenHalted;

    public void <init>()
    {
        org.apache.batik.util.HaltingThread r0;

        r0 := @this: org.apache.batik.util.HaltingThread;

        specialinvoke r0.<java.lang.Thread: void <init>()>();

        r0.<org.apache.batik.util.HaltingThread: boolean beenHalted> = 0;

        return;
    }

    public void <init>(java.lang.Runnable)
    {
        java.lang.Runnable r1;
        org.apache.batik.util.HaltingThread r0;

        r0 := @this: org.apache.batik.util.HaltingThread;

        r1 := @parameter0: java.lang.Runnable;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.Runnable)>(r1);

        r0.<org.apache.batik.util.HaltingThread: boolean beenHalted> = 0;

        return;
    }

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.apache.batik.util.HaltingThread r0;

        r0 := @this: org.apache.batik.util.HaltingThread;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>(r1);

        r0.<org.apache.batik.util.HaltingThread: boolean beenHalted> = 0;

        return;
    }

    public void <init>(java.lang.Runnable, java.lang.String)
    {
        java.lang.String r2;
        java.lang.Runnable r1;
        org.apache.batik.util.HaltingThread r0;

        r0 := @this: org.apache.batik.util.HaltingThread;

        r1 := @parameter0: java.lang.Runnable;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r1, r2);

        r0.<org.apache.batik.util.HaltingThread: boolean beenHalted> = 0;

        return;
    }

    public boolean isHalted()
    {
        java.lang.Throwable $r1;
        org.apache.batik.util.HaltingThread r0;
        boolean z0;

        r0 := @this: org.apache.batik.util.HaltingThread;

        entermonitor r0;

     label1:
        z0 = r0.<org.apache.batik.util.HaltingThread: boolean beenHalted>;

        exitmonitor r0;

        return z0;

     label2:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void halt()
    {
        java.lang.Throwable $r1;
        org.apache.batik.util.HaltingThread r0;

        r0 := @this: org.apache.batik.util.HaltingThread;

        entermonitor r0;

     label1:
        r0.<org.apache.batik.util.HaltingThread: boolean beenHalted> = 1;

        exitmonitor r0;

        goto label3;

     label2:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

     label3:
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public void clearHalted()
    {
        java.lang.Throwable $r1;
        org.apache.batik.util.HaltingThread r0;

        r0 := @this: org.apache.batik.util.HaltingThread;

        entermonitor r0;

     label1:
        r0.<org.apache.batik.util.HaltingThread: boolean beenHalted> = 0;

        exitmonitor r0;

        goto label3;

     label2:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

     label3:
        return;

        catch java.lang.Throwable from label1 to label2 with label2;
    }

    public static void haltThread()
    {
        java.lang.Thread $r0;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        staticinvoke <org.apache.batik.util.HaltingThread: void haltThread(java.lang.Thread)>($r0);

        return;
    }

    public static void haltThread(java.lang.Thread)
    {
        java.lang.Thread r0;
        boolean $z0;
        org.apache.batik.util.HaltingThread $r1;

        r0 := @parameter0: java.lang.Thread;

        $z0 = r0 instanceof org.apache.batik.util.HaltingThread;

        if $z0 == 0 goto label1;

        $r1 = (org.apache.batik.util.HaltingThread) r0;

        virtualinvoke $r1.<org.apache.batik.util.HaltingThread: void halt()>();

     label1:
        return;
    }

    public static boolean hasBeenHalted()
    {
        java.lang.Thread $r0;
        boolean $z0;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = staticinvoke <org.apache.batik.util.HaltingThread: boolean hasBeenHalted(java.lang.Thread)>($r0);

        return $z0;
    }

    public static boolean hasBeenHalted(java.lang.Thread)
    {
        java.lang.Thread r0;
        boolean $z0, $z1;
        org.apache.batik.util.HaltingThread $r1;

        r0 := @parameter0: java.lang.Thread;

        $z0 = r0 instanceof org.apache.batik.util.HaltingThread;

        if $z0 == 0 goto label1;

        $r1 = (org.apache.batik.util.HaltingThread) r0;

        $z1 = virtualinvoke $r1.<org.apache.batik.util.HaltingThread: boolean isHalted()>();

        return $z1;

     label1:
        return 0;
    }
}
