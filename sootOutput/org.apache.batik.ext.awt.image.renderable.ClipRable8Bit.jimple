public class org.apache.batik.ext.awt.image.renderable.ClipRable8Bit extends org.apache.batik.ext.awt.image.renderable.AbstractRable implements org.apache.batik.ext.awt.image.renderable.ClipRable
{
    protected boolean useAA;
    protected java.awt.Shape clipPath;

    public void <init>(org.apache.batik.ext.awt.image.renderable.Filter, java.awt.Shape)
    {
        java.awt.Shape r2;
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        r2 := @parameter1: java.awt.Shape;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: void setClipPath(java.awt.Shape)>(r2);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: void setUseAntialiasedClip(boolean)>(0);

        return;
    }

    public void <init>(org.apache.batik.ext.awt.image.renderable.Filter, java.awt.Shape, boolean)
    {
        java.awt.Shape r2;
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        r2 := @parameter1: java.awt.Shape;

        z0 := @parameter2: boolean;

        specialinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void <init>(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: void setClipPath(java.awt.Shape)>(r2);

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: void setUseAntialiasedClip(boolean)>(z0);

        return;
    }

    public void setSource(org.apache.batik.ext.awt.image.renderable.Filter)
    {
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter r1;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        r1 := @parameter0: org.apache.batik.ext.awt.image.renderable.Filter;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void init(org.apache.batik.ext.awt.image.renderable.Filter,java.util.Map)>(r1, null);

        return;
    }

    public org.apache.batik.ext.awt.image.renderable.Filter getSource()
    {
        java.util.Vector $r1;
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit r0;
        java.lang.Object $r2;
        org.apache.batik.ext.awt.image.renderable.Filter $r3;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        $r3 = (org.apache.batik.ext.awt.image.renderable.Filter) $r2;

        return $r3;
    }

    public void setUseAntialiasedClip(boolean)
    {
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit r0;
        boolean z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: boolean useAA> = z0;

        return;
    }

    public boolean getUseAntialiasedClip()
    {
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit r0;
        boolean $z0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        $z0 = r0.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: boolean useAA>;

        return $z0;
    }

    public void setClipPath(java.awt.Shape)
    {
        java.awt.Shape r1;
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        r1 := @parameter0: java.awt.Shape;

        virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.AbstractRable: void touch()>();

        r0.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: java.awt.Shape clipPath> = r1;

        return;
    }

    public java.awt.Shape getClipPath()
    {
        java.awt.Shape $r1;
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit r0;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        $r1 = r0.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: java.awt.Shape clipPath>;

        return $r1;
    }

    public java.awt.geom.Rectangle2D getBounds2D()
    {
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit r0;
        org.apache.batik.ext.awt.image.renderable.Filter $r1;
        java.awt.geom.Rectangle2D $r2;

        r0 := @this: org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r2 = interfaceinvoke $r1.<org.apache.batik.ext.awt.image.renderable.Filter: java.awt.geom.Rectangle2D getBounds2D()>();

        return $r2;
    }

    public java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)
    {
        java.awt.Color $r18;
        org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed $r24;
        java.awt.geom.Rectangle2D $r5, $r7, $r8, $r9;
        java.awt.RenderingHints $r2, $r27, r28;
        org.apache.batik.ext.awt.image.renderable.ClipRable8Bit r4;
        boolean $z0, $z1;
        java.awt.Shape $r3, $r6, $r10, $r13, $r14, $r15, r29;
        java.awt.image.BufferedImage $r12;
        org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed $r23;
        java.awt.image.RenderedImage $r21;
        java.awt.geom.AffineTransform $r1;
        org.apache.batik.ext.awt.image.renderable.Filter $r19;
        java.awt.image.renderable.RenderContext r0, $r20;
        org.apache.batik.ext.awt.image.rendered.CachableRed $r22;
        java.awt.Rectangle $r11, $r16;
        org.apache.batik.ext.awt.image.rendered.PadRed $r25;
        org.apache.batik.ext.awt.image.PadMode $r26;
        java.awt.Graphics2D $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r4 := @this: org.apache.batik.ext.awt.image.renderable.ClipRable8Bit;

        r0 := @parameter0: java.awt.image.renderable.RenderContext;

        $r1 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.geom.AffineTransform getTransform()>();

        $r2 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.RenderingHints getRenderingHints()>();

        r28 = $r2;

        if $r2 != null goto label1;

        $r27 = new java.awt.RenderingHints;

        specialinvoke $r27.<java.awt.RenderingHints: void <init>(java.util.Map)>(null);

        r28 = $r27;

     label1:
        $r3 = virtualinvoke r0.<java.awt.image.renderable.RenderContext: java.awt.Shape getAreaOfInterest()>();

        r29 = $r3;

        if $r3 != null goto label2;

        r29 = virtualinvoke r4.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

     label2:
        $r5 = virtualinvoke r4.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: java.awt.geom.Rectangle2D getBounds2D()>();

        $r6 = r4.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: java.awt.Shape clipPath>;

        $r7 = interfaceinvoke $r6.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $r8 = interfaceinvoke r29.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        $z0 = virtualinvoke $r5.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r7);

        if $z0 != 0 goto label3;

        return null;

     label3:
        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r5, $r7, $r5);

        $z1 = virtualinvoke $r5.<java.awt.geom.RectangularShape: boolean intersects(java.awt.geom.Rectangle2D)>($r8);

        if $z1 != 0 goto label4;

        return null;

     label4:
        $r9 = interfaceinvoke r29.<java.awt.Shape: java.awt.geom.Rectangle2D getBounds2D()>();

        staticinvoke <java.awt.geom.Rectangle2D: void intersect(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>($r5, $r9, $r5);

        $r10 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r5);

        $r11 = interfaceinvoke $r10.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $i0 = $r11.<java.awt.Rectangle: int width>;

        if $i0 == 0 goto label5;

        $i1 = $r11.<java.awt.Rectangle: int height>;

        if $i1 != 0 goto label6;

     label5:
        return null;

     label6:
        $r12 = new java.awt.image.BufferedImage;

        $i3 = $r11.<java.awt.Rectangle: int width>;

        $i2 = $r11.<java.awt.Rectangle: int height>;

        specialinvoke $r12.<java.awt.image.BufferedImage: void <init>(int,int,int)>($i3, $i2, 10);

        $r13 = virtualinvoke r4.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: java.awt.Shape getClipPath()>();

        $r14 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>($r13);

        $r15 = virtualinvoke $r1.<java.awt.geom.AffineTransform: java.awt.Shape createTransformedShape(java.awt.Shape)>(r29);

        $r16 = interfaceinvoke $r15.<java.awt.Shape: java.awt.Rectangle getBounds()>();

        $r17 = staticinvoke <org.apache.batik.ext.awt.image.GraphicsUtil: java.awt.Graphics2D createGraphics(java.awt.image.BufferedImage,java.awt.RenderingHints)>($r12, r28);

        $i4 = $r11.<java.awt.Rectangle: int x>;

        $i7 = neg $i4;

        $i5 = $r11.<java.awt.Rectangle: int y>;

        $i6 = neg $i5;

        virtualinvoke $r17.<java.awt.Graphics2D: void translate(int,int)>($i7, $i6);

        $r18 = <java.awt.Color: java.awt.Color white>;

        virtualinvoke $r17.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r18);

        virtualinvoke $r17.<java.awt.Graphics2D: void fill(java.awt.Shape)>($r14);

        virtualinvoke $r17.<java.awt.Graphics: void dispose()>();

        $r19 = virtualinvoke r4.<org.apache.batik.ext.awt.image.renderable.ClipRable8Bit: org.apache.batik.ext.awt.image.renderable.Filter getSource()>();

        $r20 = new java.awt.image.renderable.RenderContext;

        specialinvoke $r20.<java.awt.image.renderable.RenderContext: void <init>(java.awt.geom.AffineTransform,java.awt.Shape,java.awt.RenderingHints)>($r1, $r5, r28);

        $r21 = interfaceinvoke $r19.<java.awt.image.renderable.RenderableImage: java.awt.image.RenderedImage createRendering(java.awt.image.renderable.RenderContext)>($r20);

        $r22 = staticinvoke <org.apache.batik.ext.awt.image.rendered.RenderedImageCachableRed: org.apache.batik.ext.awt.image.rendered.CachableRed wrap(java.awt.image.RenderedImage)>($r21);

        $r23 = new org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed;

        $i9 = $r11.<java.awt.Rectangle: int x>;

        $i8 = $r11.<java.awt.Rectangle: int y>;

        specialinvoke $r23.<org.apache.batik.ext.awt.image.rendered.BufferedImageCachableRed: void <init>(java.awt.image.BufferedImage,int,int)>($r12, $i9, $i8);

        $r24 = new org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed;

        specialinvoke $r24.<org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,org.apache.batik.ext.awt.image.rendered.CachableRed)>($r22, $r23);

        $r25 = new org.apache.batik.ext.awt.image.rendered.PadRed;

        $r26 = <org.apache.batik.ext.awt.image.PadMode: org.apache.batik.ext.awt.image.PadMode ZERO_PAD>;

        specialinvoke $r25.<org.apache.batik.ext.awt.image.rendered.PadRed: void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed,java.awt.Rectangle,org.apache.batik.ext.awt.image.PadMode,java.awt.RenderingHints)>($r24, $r16, $r26, r28);

        return $r25;
    }
}
