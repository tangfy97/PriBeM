public class org.springframework.beans.TypeMismatchException extends org.springframework.beans.PropertyAccessException
{
    public static final java.lang.String ERROR_CODE;
    private transient java.lang.Object value;
    private java.lang.Class requiredType;

    public void <init>(java.beans.PropertyChangeEvent, java.lang.Class)
    {
        java.lang.Class r2;
        org.springframework.beans.TypeMismatchException r0;
        java.beans.PropertyChangeEvent r1;

        r0 := @this: org.springframework.beans.TypeMismatchException;

        r1 := @parameter0: java.beans.PropertyChangeEvent;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<org.springframework.beans.TypeMismatchException: void <init>(java.beans.PropertyChangeEvent,java.lang.Class,java.lang.Throwable)>(r1, r2, null);

        return;
    }

    public void <init>(java.beans.PropertyChangeEvent, java.lang.Class, java.lang.Throwable)
    {
        java.lang.Throwable r12;
        java.lang.String $r4, $r9, $r11, $r15, $r19, $r22, $r23;
        java.beans.PropertyChangeEvent r1;
        org.springframework.beans.TypeMismatchException r0;
        java.lang.StringBuilder $r2, $r5, $r6, $r8, $r10, $r14, $r16, $r17, $r18, $r20, $r21;
        java.lang.Object $r3, $r13;
        java.lang.Class r7;

        r0 := @this: org.springframework.beans.TypeMismatchException;

        r1 := @parameter0: java.beans.PropertyChangeEvent;

        r7 := @parameter1: java.lang.Class;

        r12 := @parameter2: java.lang.Throwable;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to convert property value of type \'");

        $r3 = virtualinvoke r1.<java.beans.PropertyChangeEvent: java.lang.Object getNewValue()>();

        $r4 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getDescriptiveType(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        if r7 == null goto label1;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>(" to required type \'");

        $r19 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedName(java.lang.Class)>(r7);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r22 = "";

     label2:
        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r9 = virtualinvoke r1.<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()>();

        if $r9 == null goto label3;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>(" for property \'");

        $r15 = virtualinvoke r1.<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r23 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label4;

     label3:
        $r23 = "";

     label4:
        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.springframework.beans.PropertyAccessException: void <init>(java.beans.PropertyChangeEvent,java.lang.String,java.lang.Throwable)>(r1, $r11, r12);

        $r13 = virtualinvoke r1.<java.beans.PropertyChangeEvent: java.lang.Object getNewValue()>();

        r0.<org.springframework.beans.TypeMismatchException: java.lang.Object value> = $r13;

        r0.<org.springframework.beans.TypeMismatchException: java.lang.Class requiredType> = r7;

        return;
    }

    public void <init>(java.lang.Object, java.lang.Class)
    {
        java.lang.Object r1;
        java.lang.Class r2;
        org.springframework.beans.TypeMismatchException r0;

        r0 := @this: org.springframework.beans.TypeMismatchException;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Class;

        specialinvoke r0.<org.springframework.beans.TypeMismatchException: void <init>(java.lang.Object,java.lang.Class,java.lang.Throwable)>(r1, r2, null);

        return;
    }

    public void <init>(java.lang.Object, java.lang.Class, java.lang.Throwable)
    {
        java.lang.Throwable r9;
        org.springframework.beans.TypeMismatchException r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r10, $r12, $r13;
        java.lang.Object r2;
        java.lang.Class r6;
        java.lang.String $r3, $r8, $r11, $r14;

        r0 := @this: org.springframework.beans.TypeMismatchException;

        r2 := @parameter0: java.lang.Object;

        r6 := @parameter1: java.lang.Class;

        r9 := @parameter2: java.lang.Throwable;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("Failed to convert value of type \'");

        $r3 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getDescriptiveType(java.lang.Object)>(r2);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        if r6 == null goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>(" to required type \'");

        $r11 = staticinvoke <org.springframework.util.ClassUtils: java.lang.String getQualifiedName(java.lang.Class)>(r6);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label1:
        $r14 = "";

     label2:
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<org.springframework.beans.PropertyAccessException: void <init>(java.lang.String,java.lang.Throwable)>($r8, r9);

        r0.<org.springframework.beans.TypeMismatchException: java.lang.Object value> = r2;

        r0.<org.springframework.beans.TypeMismatchException: java.lang.Class requiredType> = r6;

        return;
    }

    public java.lang.Object getValue()
    {
        java.lang.Object $r1;
        org.springframework.beans.TypeMismatchException r0;

        r0 := @this: org.springframework.beans.TypeMismatchException;

        $r1 = r0.<org.springframework.beans.TypeMismatchException: java.lang.Object value>;

        return $r1;
    }

    public java.lang.Class getRequiredType()
    {
        java.lang.Class $r1;
        org.springframework.beans.TypeMismatchException r0;

        r0 := @this: org.springframework.beans.TypeMismatchException;

        $r1 = r0.<org.springframework.beans.TypeMismatchException: java.lang.Class requiredType>;

        return $r1;
    }

    public java.lang.String getErrorCode()
    {
        org.springframework.beans.TypeMismatchException r0;

        r0 := @this: org.springframework.beans.TypeMismatchException;

        return "typeMismatch";
    }

    public static void <clinit>()
    {
        <org.springframework.beans.TypeMismatchException: java.lang.String ERROR_CODE> = "typeMismatch";

        return;
    }
}
