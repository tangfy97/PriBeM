public abstract class com.mycila.inject.internal.guava.collect.ImmutableMultimap extends java.lang.Object implements com.mycila.inject.internal.guava.collect.Multimap, java.io.Serializable
{
    final transient com.mycila.inject.internal.guava.collect.ImmutableMap map;
    final transient int size;
    private transient com.mycila.inject.internal.guava.collect.ImmutableCollection entries;
    private transient com.mycila.inject.internal.guava.collect.ImmutableMultiset keys;
    private transient com.mycila.inject.internal.guava.collect.ImmutableCollection values;
    private static final long serialVersionUID;

    public static com.mycila.inject.internal.guava.collect.ImmutableMultimap of()
    {
        com.mycila.inject.internal.guava.collect.ImmutableListMultimap $r0;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableListMultimap: com.mycila.inject.internal.guava.collect.ImmutableListMultimap of()>();

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        com.mycila.inject.internal.guava.collect.ImmutableListMultimap $r2;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $r2 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableListMultimap: com.mycila.inject.internal.guava.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object)>(r0, r1);

        return $r2;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableListMultimap $r4;
        java.lang.Object r0, r1, r2, r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r4 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableListMultimap: com.mycila.inject.internal.guava.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r0, r1, r2, r3);

        return $r4;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableListMultimap $r6;
        java.lang.Object r0, r1, r2, r3, r4, r5;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        $r6 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableListMultimap: com.mycila.inject.internal.guava.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r0, r1, r2, r3, r4, r5);

        return $r6;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableListMultimap $r8;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6, r7;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        $r8 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableListMultimap: com.mycila.inject.internal.guava.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r0, r1, r2, r3, r4, r5, r6, r7);

        return $r8;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultimap of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableListMultimap $r10;
        java.lang.Object r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        r4 := @parameter4: java.lang.Object;

        r5 := @parameter5: java.lang.Object;

        r6 := @parameter6: java.lang.Object;

        r7 := @parameter7: java.lang.Object;

        r8 := @parameter8: java.lang.Object;

        r9 := @parameter9: java.lang.Object;

        $r10 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableListMultimap: com.mycila.inject.internal.guava.collect.ImmutableListMultimap of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(r0, r1, r2, r3, r4, r5, r6, r7, r8, r9);

        return $r10;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultimap$Builder builder()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultimap$Builder $r0;

        $r0 = new com.mycila.inject.internal.guava.collect.ImmutableMultimap$Builder;

        specialinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap$Builder: void <init>()>();

        return $r0;
    }

    public static com.mycila.inject.internal.guava.collect.ImmutableMultimap copyOf(com.mycila.inject.internal.guava.collect.Multimap)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r2;
        com.mycila.inject.internal.guava.collect.ImmutableListMultimap $r1;
        com.mycila.inject.internal.guava.collect.Multimap r0;
        boolean $z0, $z1;

        r0 := @parameter0: com.mycila.inject.internal.guava.collect.Multimap;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        if $z0 == 0 goto label1;

        r2 = (com.mycila.inject.internal.guava.collect.ImmutableMultimap) r0;

        $z1 = virtualinvoke r2.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: boolean isPartialView()>();

        if $z1 != 0 goto label1;

        return r2;

     label1:
        $r1 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableListMultimap: com.mycila.inject.internal.guava.collect.ImmutableListMultimap copyOf(com.mycila.inject.internal.guava.collect.Multimap)>(r0);

        return $r1;
    }

    void <init>(com.mycila.inject.internal.guava.collect.ImmutableMap, int)
    {
        int i0;
        com.mycila.inject.internal.guava.collect.ImmutableMap r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r1 := @parameter0: com.mycila.inject.internal.guava.collect.ImmutableMap;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMap map> = r1;

        r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: int size> = i0;

        return;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableCollection removeAll(java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        java.lang.Object r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r2 := @parameter0: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableCollection replaceValues(java.lang.Object, java.lang.Iterable)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r1;
        java.lang.Object r2;
        java.lang.Iterable r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Iterable;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public void clear()
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public abstract com.mycila.inject.internal.guava.collect.ImmutableCollection get(java.lang.Object);

    public boolean put(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r1;
        java.lang.Object r2, r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean putAll(java.lang.Object, java.lang.Iterable)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r1;
        java.lang.Object r2;
        java.lang.Iterable r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Iterable;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean putAll(com.mycila.inject.internal.guava.collect.Multimap)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.Multimap r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r1;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r2 := @parameter0: com.mycila.inject.internal.guava.collect.Multimap;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    public boolean remove(java.lang.Object, java.lang.Object)
    {
        java.lang.UnsupportedOperationException $r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r1;
        java.lang.Object r2, r3;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object;

        $r0 = new java.lang.UnsupportedOperationException;

        specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r0;
    }

    boolean isPartialView()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMap map>;

        $z0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMap: boolean isPartialView()>();

        return $z0;
    }

    public boolean containsEntry(java.lang.Object, java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;
        java.util.Collection r4;
        java.lang.Object r1, $r3, r5;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r1 := @parameter0: java.lang.Object;

        r5 := @parameter1: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMap map>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.Collection) $r3;

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<java.util.Collection: boolean contains(java.lang.Object)>(r5);

        if $z0 == 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public boolean containsKey(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMap map>;

        $z0 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableMap: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean containsValue(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r1;
        com.mycila.inject.internal.guava.collect.ImmutableCollection $r2, r5;
        java.util.Iterator $r3;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;
        java.lang.Object $r4, r6;
        boolean $z0, $z1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r6 := @parameter0: java.lang.Object;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMap map>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableCollection values()>();

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableCollection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.mycila.inject.internal.guava.collect.ImmutableCollection) $r4;

        $z1 = interfaceinvoke r5.<java.util.Collection: boolean contains(java.lang.Object)>(r6);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public boolean isEmpty()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: int size>;

        if $i0 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public int size()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        $i0 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: int size>;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r3;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r2;
        java.util.Map $r4;
        java.lang.Object r0;
        com.mycila.inject.internal.guava.collect.Multimap r1;
        boolean $z0, $z1;

        r2 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.mycila.inject.internal.guava.collect.Multimap;

        if $z0 == 0 goto label1;

        r1 = (com.mycila.inject.internal.guava.collect.Multimap) r0;

        $r3 = r2.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMap map>;

        $r4 = interfaceinvoke r1.<com.mycila.inject.internal.guava.collect.Multimap: java.util.Map asMap()>();

        $z1 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.ImmutableMap: boolean equals(java.lang.Object)>($r4);

        return $z1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        int $i0;
        com.mycila.inject.internal.guava.collect.ImmutableMap $r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMap map>;

        $i0 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMap: int hashCode()>();

        return $i0;
    }

    public java.lang.String toString()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r1;
        java.lang.String $r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMap map>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMap: java.lang.String toString()>();

        return $r2;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableSet keySet()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMap map>;

        $r2 = virtualinvoke $r1.<com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableSet keySet()>();

        return $r2;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableMap asMap()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        $r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMap map>;

        return $r1;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableCollection entries()
    {
        com.mycila.inject.internal.guava.collect.ImmutableCollection r1, $r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap$EntryCollection $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableCollection entries>;

        if r1 != null goto label1;

        $r3 = new com.mycila.inject.internal.guava.collect.ImmutableMultimap$EntryCollection;

        $r2 = $r3;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.ImmutableMultimap$EntryCollection: void <init>(com.mycila.inject.internal.guava.collect.ImmutableMultimap)>(r0);

        r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableCollection entries> = $r3;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableMultiset keys()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset r1, $r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMultiset keys>;

        if r1 != null goto label1;

        $r2 = specialinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMultiset createKeys()>();

        r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMultiset keys> = $r2;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    private com.mycila.inject.internal.guava.collect.ImmutableMultiset createKeys()
    {
        java.util.Map$Entry r7;
        com.mycila.inject.internal.guava.collect.ImmutableMap $r2;
        java.util.Iterator $r4;
        com.mycila.inject.internal.guava.collect.ImmutableCollection $r10;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r5;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder $r0;
        int $i0;
        java.lang.Object $r6, $r8, $r9;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r3;
        boolean $z0;

        r1 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        $r0 = staticinvoke <com.mycila.inject.internal.guava.collect.ImmutableMultiset: com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder builder()>();

        $r2 = r1.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMap map>;

        $r3 = virtualinvoke $r2.<com.mycila.inject.internal.guava.collect.ImmutableMap: com.mycila.inject.internal.guava.collect.ImmutableSet entrySet()>();

        $r4 = virtualinvoke $r3.<com.mycila.inject.internal.guava.collect.ImmutableSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (com.mycila.inject.internal.guava.collect.ImmutableCollection) $r9;

        $i0 = virtualinvoke $r10.<com.mycila.inject.internal.guava.collect.ImmutableCollection: int size()>();

        virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder addCopies(java.lang.Object,int)>($r8, $i0);

        goto label1;

     label2:
        $r5 = virtualinvoke $r0.<com.mycila.inject.internal.guava.collect.ImmutableMultiset$Builder: com.mycila.inject.internal.guava.collect.ImmutableMultiset build()>();

        return $r5;
    }

    public com.mycila.inject.internal.guava.collect.ImmutableCollection values()
    {
        com.mycila.inject.internal.guava.collect.ImmutableCollection r1, $r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap$Values $r3;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r1 = r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableCollection values>;

        if r1 != null goto label1;

        $r3 = new com.mycila.inject.internal.guava.collect.ImmutableMultimap$Values;

        $r2 = $r3;

        specialinvoke $r3.<com.mycila.inject.internal.guava.collect.ImmutableMultimap$Values: void <init>(com.mycila.inject.internal.guava.collect.ImmutableMultimap)>(r0);

        r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableCollection values> = $r3;

        goto label2;

     label1:
        $r2 = r1;

     label2:
        return $r2;
    }

    public volatile java.util.Map asMap()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMap $r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMap asMap()>();

        return $r1;
    }

    public volatile java.util.Collection entries()
    {
        com.mycila.inject.internal.guava.collect.ImmutableCollection $r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableCollection entries()>();

        return $r1;
    }

    public volatile java.util.Collection values()
    {
        com.mycila.inject.internal.guava.collect.ImmutableCollection $r1;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableCollection values()>();

        return $r1;
    }

    public volatile com.mycila.inject.internal.guava.collect.Multiset keys()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;
        com.mycila.inject.internal.guava.collect.ImmutableMultiset $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableMultiset keys()>();

        return $r1;
    }

    public volatile java.util.Set keySet()
    {
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;
        com.mycila.inject.internal.guava.collect.ImmutableSet $r1;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        $r1 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableSet keySet()>();

        return $r1;
    }

    public volatile java.util.Collection get(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableCollection $r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableCollection get(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.Collection removeAll(java.lang.Object)
    {
        java.lang.Object r1;
        com.mycila.inject.internal.guava.collect.ImmutableCollection $r2;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r1 := @parameter0: java.lang.Object;

        $r2 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableCollection removeAll(java.lang.Object)>(r1);

        return $r2;
    }

    public volatile java.util.Collection replaceValues(java.lang.Object, java.lang.Iterable)
    {
        com.mycila.inject.internal.guava.collect.ImmutableCollection $r3;
        com.mycila.inject.internal.guava.collect.ImmutableMultimap r0;
        java.lang.Object r1;
        java.lang.Iterable r2;

        r0 := @this: com.mycila.inject.internal.guava.collect.ImmutableMultimap;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Iterable;

        $r3 = virtualinvoke r0.<com.mycila.inject.internal.guava.collect.ImmutableMultimap: com.mycila.inject.internal.guava.collect.ImmutableCollection replaceValues(java.lang.Object,java.lang.Iterable)>(r1, r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <com.mycila.inject.internal.guava.collect.ImmutableMultimap: long serialVersionUID> = 0L;

        return;
    }
}
