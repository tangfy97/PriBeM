public abstract class org.mozilla.javascript.SecureCaller extends java.lang.Object
{
    private static final byte[] secureCallerImplBytecode;
    private static final java.util.Map callers;
    static java.lang.Class class$org$mozilla$javascript$SecureCaller;

    public void <init>()
    {
        org.mozilla.javascript.SecureCaller r0;

        r0 := @this: org.mozilla.javascript.SecureCaller;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.lang.Object call(org.mozilla.javascript.Callable, org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[]);

    static java.lang.Object callSecurely(java.security.CodeSource, org.mozilla.javascript.Callable, org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        java.lang.Throwable $r22, $r25, $r26;
        java.lang.Object[] r14;
        org.mozilla.javascript.Callable r10;
        org.mozilla.javascript.SecureCaller r29;
        java.lang.Thread $r0;
        java.util.Map $r4, $r6, $r21, r27, r28;
        java.lang.ref.SoftReference r9, $r18;
        java.util.WeakHashMap $r20;
        java.security.PrivilegedActionException $r23;
        org.mozilla.javascript.Context r11;
        java.lang.reflect.UndeclaredThrowableException $r24;
        org.mozilla.javascript.Scriptable r12, r13;
        org.mozilla.javascript.SecureCaller$2 $r16;
        org.mozilla.javascript.SecureCaller$1 $r1;
        java.lang.Object $r2, $r7, $r8, $r15, $r17, $r19;
        java.lang.ClassLoader r3;
        java.security.CodeSource r5;

        r5 := @parameter0: java.security.CodeSource;

        r10 := @parameter1: org.mozilla.javascript.Callable;

        r11 := @parameter2: org.mozilla.javascript.Context;

        r12 := @parameter3: org.mozilla.javascript.Scriptable;

        r13 := @parameter4: org.mozilla.javascript.Scriptable;

        r14 := @parameter5: java.lang.Object[];

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r1 = new org.mozilla.javascript.SecureCaller$1;

        specialinvoke $r1.<org.mozilla.javascript.SecureCaller$1: void <init>(java.lang.Thread)>($r0);

        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

        r3 = (java.lang.ClassLoader) $r2;

        $r4 = <org.mozilla.javascript.SecureCaller: java.util.Map callers>;

        entermonitor $r4;

     label01:
        $r6 = <org.mozilla.javascript.SecureCaller: java.util.Map callers>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r27 = (java.util.Map) $r7;

        if r27 != null goto label02;

        $r20 = new java.util.WeakHashMap;

        specialinvoke $r20.<java.util.WeakHashMap: void <init>()>();

        r27 = $r20;

        $r21 = <org.mozilla.javascript.SecureCaller: java.util.Map callers>;

        interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r20);

     label02:
        exitmonitor $r4;

     label03:
        goto label06;

     label04:
        $r26 := @caughtexception;

        exitmonitor $r4;

     label05:
        throw $r26;

     label06:
        r28 = r27;

        entermonitor r27;

     label07:
        $r8 = interfaceinvoke r27.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r9 = (java.lang.ref.SoftReference) $r8;

        if r9 == null goto label08;

        $r19 = virtualinvoke r9.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r29 = (org.mozilla.javascript.SecureCaller) $r19;

        goto label09;

     label08:
        r29 = null;

     label09:
        if r29 != null goto label13;

     label10:
        $r16 = new org.mozilla.javascript.SecureCaller$2;

        specialinvoke $r16.<org.mozilla.javascript.SecureCaller$2: void <init>(java.lang.ClassLoader,java.security.CodeSource)>(r3, r5);

        $r17 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>($r16);

        r29 = (org.mozilla.javascript.SecureCaller) $r17;

        $r18 = new java.lang.ref.SoftReference;

        specialinvoke $r18.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r29);

        interfaceinvoke r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r18);

     label11:
        goto label13;

     label12:
        $r23 := @caughtexception;

        $r24 = new java.lang.reflect.UndeclaredThrowableException;

        $r25 = virtualinvoke $r23.<java.security.PrivilegedActionException: java.lang.Throwable getCause()>();

        specialinvoke $r24.<java.lang.reflect.UndeclaredThrowableException: void <init>(java.lang.Throwable)>($r25);

        throw $r24;

     label13:
        exitmonitor r28;

     label14:
        goto label17;

     label15:
        $r22 := @caughtexception;

        exitmonitor r28;

     label16:
        throw $r22;

     label17:
        $r15 = virtualinvoke r29.<org.mozilla.javascript.SecureCaller: java.lang.Object call(org.mozilla.javascript.Callable,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r10, r11, r12, r13, r14);

        return $r15;

        catch java.lang.Throwable from label01 to label03 with label04;
        catch java.lang.Throwable from label04 to label05 with label04;
        catch java.security.PrivilegedActionException from label10 to label11 with label12;
        catch java.lang.Throwable from label07 to label14 with label15;
        catch java.lang.Throwable from label15 to label16 with label15;
    }

    private static byte[] loadBytecode()
    {
        byte[] $r2;
        java.lang.Object $r1;
        org.mozilla.javascript.SecureCaller$3 $r0;

        $r0 = new org.mozilla.javascript.SecureCaller$3;

        specialinvoke $r0.<org.mozilla.javascript.SecureCaller$3: void <init>()>();

        $r1 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r2 = (byte[]) $r1;

        return $r2;
    }

    private static byte[] loadBytecodePrivileged()
    {
        java.lang.Throwable $r7;
        byte[] $r4;
        java.io.ByteArrayOutputStream $r9;
        java.net.URL $r1;
        java.io.IOException $r5;
        java.lang.reflect.UndeclaredThrowableException $r10;
        int $i0, $i2;
        java.lang.Class $r0, $r8;
        java.io.InputStream $r2;

        $r0 = <org.mozilla.javascript.SecureCaller: java.lang.Class class$org$mozilla$javascript$SecureCaller>;

        if $r0 != null goto label01;

        $r8 = staticinvoke <org.mozilla.javascript.SecureCaller: java.lang.Class class$(java.lang.String)>("org.mozilla.javascript.SecureCaller");

        <org.mozilla.javascript.SecureCaller: java.lang.Class class$org$mozilla$javascript$SecureCaller> = $r8;

        goto label02;

     label01:
        $r8 = <org.mozilla.javascript.SecureCaller: java.lang.Class class$org$mozilla$javascript$SecureCaller>;

     label02:
        $r1 = virtualinvoke $r8.<java.lang.Class: java.net.URL getResource(java.lang.String)>("SecureCallerImpl.clazz");

     label03:
        $r2 = virtualinvoke $r1.<java.net.URL: java.io.InputStream openStream()>();

     label04:
        $r9 = new java.io.ByteArrayOutputStream;

        specialinvoke $r9.<java.io.ByteArrayOutputStream: void <init>()>();

     label05:
        $i0 = virtualinvoke $r2.<java.io.InputStream: int read()>();

        $i2 = (int) -1;

        if $i0 != $i2 goto label08;

        $r4 = virtualinvoke $r9.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

     label06:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

     label07:
        return $r4;

     label08:
        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void write(int)>($i0);

        goto label05;

     label09:
        $r7 := @caughtexception;

     label10:
        virtualinvoke $r2.<java.io.InputStream: void close()>();

        throw $r7;

     label11:
        $r5 := @caughtexception;

        $r10 = new java.lang.reflect.UndeclaredThrowableException;

        specialinvoke $r10.<java.lang.reflect.UndeclaredThrowableException: void <init>(java.lang.Throwable)>($r5);

        throw $r10;

        catch java.lang.Throwable from label04 to label06 with label09;
        catch java.lang.Throwable from label08 to label10 with label09;
        catch java.io.IOException from label03 to label07 with label11;
        catch java.io.IOException from label08 to label11 with label11;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static byte[] access$000()
    {
        byte[] $r0;

        $r0 = <org.mozilla.javascript.SecureCaller: byte[] secureCallerImplBytecode>;

        return $r0;
    }

    static byte[] access$100()
    {
        byte[] $r0;

        $r0 = staticinvoke <org.mozilla.javascript.SecureCaller: byte[] loadBytecodePrivileged()>();

        return $r0;
    }

    static void <clinit>()
    {
        byte[] $r0;
        java.util.WeakHashMap $r1;

        $r0 = staticinvoke <org.mozilla.javascript.SecureCaller: byte[] loadBytecode()>();

        <org.mozilla.javascript.SecureCaller: byte[] secureCallerImplBytecode> = $r0;

        $r1 = new java.util.WeakHashMap;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();

        <org.mozilla.javascript.SecureCaller: java.util.Map callers> = $r1;

        return;
    }
}
