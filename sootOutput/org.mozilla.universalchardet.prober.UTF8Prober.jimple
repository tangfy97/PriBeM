public class org.mozilla.universalchardet.prober.UTF8Prober extends org.mozilla.universalchardet.prober.CharsetProber
{
    public static final float ONE_CHAR_PROB;
    private org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM;
    private org.mozilla.universalchardet.prober.CharsetProber$ProbingState state;
    private int numOfMBChar;
    private static final org.mozilla.universalchardet.prober.statemachine.SMModel smModel;

    public void <init>()
    {
        org.mozilla.universalchardet.prober.statemachine.SMModel $r2;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r1;
        org.mozilla.universalchardet.prober.UTF8Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.UTF8Prober;

        specialinvoke r0.<org.mozilla.universalchardet.prober.CharsetProber: void <init>()>();

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: int numOfMBChar> = 0;

        $r1 = new org.mozilla.universalchardet.prober.statemachine.CodingStateMachine;

        $r2 = <org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.statemachine.SMModel smModel>;

        specialinvoke $r1.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void <init>(org.mozilla.universalchardet.prober.statemachine.SMModel)>($r2);

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM> = $r1;

        virtualinvoke r0.<org.mozilla.universalchardet.prober.UTF8Prober: void reset()>();

        return;
    }

    public java.lang.String getCharSetName()
    {
        java.lang.String $r0;
        org.mozilla.universalchardet.prober.UTF8Prober r1;

        r1 := @this: org.mozilla.universalchardet.prober.UTF8Prober;

        $r0 = <org.mozilla.universalchardet.Constants: java.lang.String CHARSET_UTF_8>;

        return $r0;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState handleData(byte[], int, int)
    {
        byte[] r2;
        org.mozilla.universalchardet.prober.UTF8Prober r0;
        byte $b3, $b4;
        int i0, i1, i2, $i5, $i6, $i7, $i8, i9, $i10;
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1, $r5, $r6, $r7, $r8, $r9;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r3, $r4;
        float $f0;

        r0 := @this: org.mozilla.universalchardet.prober.UTF8Prober;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = i0 + i1;

        i9 = i0;

     label1:
        if i9 >= i2 goto label5;

        $r3 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM>;

        $b4 = r2[i9];

        $i5 = virtualinvoke $r3.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int nextState(byte)>($b4);

        if $i5 != 1 goto label2;

        $r6 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState NOT_ME>;

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r6;

        goto label5;

     label2:
        if $i5 != 2 goto label3;

        $r5 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r5;

        goto label5;

     label3:
        if $i5 != 0 goto label4;

        $r4 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM>;

        $i6 = virtualinvoke $r4.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: int getCurrentCharLen()>();

        if $i6 < 2 goto label4;

        $i7 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: int numOfMBChar>;

        $i8 = $i7 + 1;

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: int numOfMBChar> = $i8;

     label4:
        i9 = i9 + 1;

        goto label1;

     label5:
        $r7 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        $r8 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        if $r7 != $r8 goto label6;

        $f0 = virtualinvoke r0.<org.mozilla.universalchardet.prober.UTF8Prober: float getConfidence()>();

        $b3 = $f0 cmpl 0.95F;

        $i10 = (int) $b3;

        if $i10 <= 0 goto label6;

        $r1 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState FOUND_IT>;

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r1;

     label6:
        $r9 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r9;
    }

    public org.mozilla.universalchardet.prober.CharsetProber$ProbingState getState()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r1;
        org.mozilla.universalchardet.prober.UTF8Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.UTF8Prober;

        $r1 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state>;

        return $r1;
    }

    public void reset()
    {
        org.mozilla.universalchardet.prober.CharsetProber$ProbingState $r2;
        org.mozilla.universalchardet.prober.statemachine.CodingStateMachine $r1;
        org.mozilla.universalchardet.prober.UTF8Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.UTF8Prober;

        $r1 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.statemachine.CodingStateMachine codingSM>;

        virtualinvoke $r1.<org.mozilla.universalchardet.prober.statemachine.CodingStateMachine: void reset()>();

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: int numOfMBChar> = 0;

        $r2 = <org.mozilla.universalchardet.prober.CharsetProber$ProbingState: org.mozilla.universalchardet.prober.CharsetProber$ProbingState DETECTING>;

        r0.<org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.CharsetProber$ProbingState state> = $r2;

        return;
    }

    public float getConfidence()
    {
        int $i0, $i1, i2;
        float $f0, f1;
        org.mozilla.universalchardet.prober.UTF8Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.UTF8Prober;

        f1 = 0.99F;

        $i0 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: int numOfMBChar>;

        if $i0 >= 6 goto label3;

        i2 = 0;

     label1:
        $i1 = r0.<org.mozilla.universalchardet.prober.UTF8Prober: int numOfMBChar>;

        if i2 >= $i1 goto label2;

        f1 = f1 * 0.5F;

        i2 = i2 + 1;

        goto label1;

     label2:
        $f0 = 1.0F - f1;

        return $f0;

     label3:
        return 0.99F;
    }

    public void setOption()
    {
        org.mozilla.universalchardet.prober.UTF8Prober r0;

        r0 := @this: org.mozilla.universalchardet.prober.UTF8Prober;

        return;
    }

    static void <clinit>()
    {
        org.mozilla.universalchardet.prober.statemachine.UTF8SMModel $r0;

        <org.mozilla.universalchardet.prober.UTF8Prober: float ONE_CHAR_PROB> = 0.5F;

        $r0 = new org.mozilla.universalchardet.prober.statemachine.UTF8SMModel;

        specialinvoke $r0.<org.mozilla.universalchardet.prober.statemachine.UTF8SMModel: void <init>()>();

        <org.mozilla.universalchardet.prober.UTF8Prober: org.mozilla.universalchardet.prober.statemachine.SMModel smModel> = $r0;

        return;
    }
}
