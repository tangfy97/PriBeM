public class org.apache.cxf.ws.policy.AssertionInfoMap extends java.util.HashMap
{
    private static final java.util.ResourceBundle BUNDLE;

    public void <init>(org.apache.neethi.Policy)
    {
        org.apache.cxf.ws.policy.AssertionInfoMap r0;
        org.apache.neethi.Policy r1;
        java.util.Collection $r2;

        r0 := @this: org.apache.cxf.ws.policy.AssertionInfoMap;

        r1 := @parameter0: org.apache.neethi.Policy;

        $r2 = staticinvoke <org.apache.cxf.ws.policy.AssertionInfoMap: java.util.Collection getAssertions(org.apache.neethi.PolicyOperator)>(r1);

        specialinvoke r0.<org.apache.cxf.ws.policy.AssertionInfoMap: void <init>(java.util.Collection)>($r2);

        return;
    }

    public void <init>(java.util.Collection)
    {
        java.util.Iterator $r2;
        java.util.Collection r1;
        org.apache.neethi.Assertion r4;
        org.apache.cxf.ws.policy.AssertionInfoMap r0;
        int $i0, $i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: org.apache.cxf.ws.policy.AssertionInfoMap;

        r1 := @parameter0: java.util.Collection;

        $i0 = interfaceinvoke r1.<java.util.Collection: int size()>();

        if $i0 >= 6 goto label1;

        $i1 = 6;

        goto label2;

     label1:
        $i1 = interfaceinvoke r1.<java.util.Collection: int size()>();

     label2:
        specialinvoke r0.<java.util.HashMap: void <init>(int)>($i1);

        $r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.neethi.Assertion) $r3;

        specialinvoke r0.<org.apache.cxf.ws.policy.AssertionInfoMap: void putAssertionInfo(org.apache.neethi.Assertion)>(r4);

        goto label3;

     label4:
        return;
    }

    private void putAssertionInfo(org.apache.neethi.Assertion)
    {
        java.util.ArrayList $r5, $r9;
        org.apache.cxf.ws.policy.AssertionInfoMap r1;
        boolean $z0, $z1, $z2;
        org.apache.cxf.ws.policy.AssertionInfo $r13, r18;
        java.util.Iterator $r2, $r10;
        java.util.Collection $r16, r17;
        org.apache.neethi.Assertion r0, $r4, r12;
        org.apache.neethi.Policy $r8;
        org.apache.neethi.PolicyContainingAssertion $r7;
        java.lang.Object $r3, $r11, $r15;
        javax.xml.namespace.QName $r6, $r14;

        r1 := @this: org.apache.cxf.ws.policy.AssertionInfoMap;

        r0 := @parameter0: org.apache.neethi.Assertion;

        $z0 = r0 instanceof org.apache.neethi.PolicyContainingAssertion;

        if $z0 == 0 goto label2;

        $r7 = (org.apache.neethi.PolicyContainingAssertion) r0;

        $r8 = interfaceinvoke $r7.<org.apache.neethi.PolicyContainingAssertion: org.apache.neethi.Policy getPolicy()>();

        if $r8 == null goto label2;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.apache.cxf.ws.policy.AssertionInfoMap: void getAssertions(org.apache.neethi.PolicyOperator,java.util.Collection)>($r8, $r9);

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r11 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        r12 = (org.apache.neethi.Assertion) $r11;

        specialinvoke r1.<org.apache.cxf.ws.policy.AssertionInfoMap: void putAssertionInfo(org.apache.neethi.Assertion)>(r12);

        goto label1;

     label2:
        $r13 = new org.apache.cxf.ws.policy.AssertionInfo;

        specialinvoke $r13.<org.apache.cxf.ws.policy.AssertionInfo: void <init>(org.apache.neethi.Assertion)>(r0);

        $r14 = interfaceinvoke r0.<org.apache.neethi.Assertion: javax.xml.namespace.QName getName()>();

        $r15 = virtualinvoke r1.<org.apache.cxf.ws.policy.AssertionInfoMap: java.lang.Object get(java.lang.Object)>($r14);

        $r16 = (java.util.Collection) $r15;

        r17 = $r16;

        if $r16 != null goto label3;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r17 = $r5;

        $r6 = interfaceinvoke r0.<org.apache.neethi.Assertion: javax.xml.namespace.QName getName()>();

        virtualinvoke r1.<org.apache.cxf.ws.policy.AssertionInfoMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5);

     label3:
        $r2 = interfaceinvoke r17.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r18 = (org.apache.cxf.ws.policy.AssertionInfo) $r3;

        $r4 = virtualinvoke r18.<org.apache.cxf.ws.policy.AssertionInfo: org.apache.neethi.Assertion getAssertion()>();

        if $r4 != r0 goto label5;

        return;

     label5:
        goto label4;

     label6:
        interfaceinvoke r17.<java.util.Collection: boolean add(java.lang.Object)>($r13);

        return;
    }

    public java.util.Collection getAssertionInfo(javax.xml.namespace.QName)
    {
        java.util.List $r4;
        org.apache.cxf.ws.policy.AssertionInfoMap r0;
        java.util.Collection r3, $r5;
        java.lang.Object $r2;
        javax.xml.namespace.QName r1;

        r0 := @this: org.apache.cxf.ws.policy.AssertionInfoMap;

        r1 := @parameter0: javax.xml.namespace.QName;

        $r2 = virtualinvoke r0.<org.apache.cxf.ws.policy.AssertionInfoMap: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.Collection) $r2;

        if r3 == null goto label1;

        $r5 = r3;

        goto label2;

     label1:
        $r4 = <java.util.Collections: java.util.List EMPTY_LIST>;

        $r5 = staticinvoke <org.apache.cxf.helpers.CastUtils: java.util.List cast(java.util.List,java.lang.Class)>($r4, class "Lorg/apache/cxf/ws/policy/AssertionInfo;");

     label2:
        return $r5;
    }

    public boolean supportsAlternative(org.apache.neethi.PolicyComponent, java.util.List)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, $z12;
        java.util.Collection $r11;
        org.apache.neethi.Assertion r7, $r14, r18;
        java.util.List r9, r20;
        org.apache.neethi.PolicyContainingAssertion $r1;
        javax.xml.namespace.QName $r10, $r15, $r16;
        org.apache.cxf.ws.policy.AssertionInfoMap r8;
        org.apache.cxf.ws.policy.AssertionInfo r19;
        java.util.Iterator $r3, $r5, $r12;
        org.apache.neethi.Policy $r2;
        org.apache.neethi.PolicyComponent r0;
        java.lang.Object $r4, $r6, $r13;
        org.apache.cxf.ws.policy.PolicyAssertion r17;

        r8 := @this: org.apache.cxf.ws.policy.AssertionInfoMap;

        r0 := @parameter0: org.apache.neethi.PolicyComponent;

        r9 := @parameter1: java.util.List;

        z11 = 1;

        $z0 = r0 instanceof org.apache.cxf.ws.policy.PolicyAssertion;

        if $z0 == 0 goto label2;

        r17 = (org.apache.cxf.ws.policy.PolicyAssertion) r0;

        $z9 = interfaceinvoke r17.<org.apache.cxf.ws.policy.PolicyAssertion: boolean isAsserted(org.apache.cxf.ws.policy.AssertionInfoMap)>(r8);

        if $z9 != 0 goto label1;

        $z10 = interfaceinvoke r17.<org.apache.cxf.ws.policy.PolicyAssertion: boolean isOptional()>();

        if $z10 != 0 goto label1;

        $r16 = interfaceinvoke r17.<org.apache.cxf.ws.policy.PolicyAssertion: javax.xml.namespace.QName getName()>();

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r16);

        z11 = 0;

     label1:
        goto label5;

     label2:
        $z1 = r0 instanceof org.apache.neethi.Assertion;

        if $z1 == 0 goto label5;

        r18 = (org.apache.neethi.Assertion) r0;

        $r10 = interfaceinvoke r18.<org.apache.neethi.Assertion: javax.xml.namespace.QName getName()>();

        $r11 = virtualinvoke r8.<org.apache.cxf.ws.policy.AssertionInfoMap: java.util.Collection getAssertionInfo(javax.xml.namespace.QName)>($r10);

        $r12 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label3:
        $z5 = interfaceinvoke $r12.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label5;

        $r13 = interfaceinvoke $r12.<java.util.Iterator: java.lang.Object next()>();

        r19 = (org.apache.cxf.ws.policy.AssertionInfo) $r13;

        $r14 = virtualinvoke r19.<org.apache.cxf.ws.policy.AssertionInfo: org.apache.neethi.Assertion getAssertion()>();

        $z6 = interfaceinvoke $r14.<org.apache.neethi.Assertion: boolean equal(org.apache.neethi.PolicyComponent)>(r18);

        if $z6 == 0 goto label4;

        $z7 = virtualinvoke r19.<org.apache.cxf.ws.policy.AssertionInfo: boolean isAsserted()>();

        if $z7 != 0 goto label4;

        $z8 = interfaceinvoke r18.<org.apache.neethi.Assertion: boolean isOptional()>();

        if $z8 != 0 goto label4;

        $r15 = interfaceinvoke r18.<org.apache.neethi.Assertion: javax.xml.namespace.QName getName()>();

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r15);

        z11 = 0;

     label4:
        goto label3;

     label5:
        $z12 = r0 instanceof org.apache.neethi.PolicyContainingAssertion;

        if $z12 == 0 goto label9;

        $r1 = (org.apache.neethi.PolicyContainingAssertion) r0;

        $r2 = interfaceinvoke $r1.<org.apache.neethi.PolicyContainingAssertion: org.apache.neethi.Policy getPolicy()>();

        if $r2 == null goto label9;

        $r3 = virtualinvoke $r2.<org.apache.neethi.Policy: java.util.Iterator getAlternatives()>();

     label6:
        $z2 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label9;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.util.List) $r4;

        $r5 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

     label7:
        $z3 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label8;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.neethi.Assertion) $r6;

        $z4 = virtualinvoke r8.<org.apache.cxf.ws.policy.AssertionInfoMap: boolean supportsAlternative(org.apache.neethi.PolicyComponent,java.util.List)>(r7, r9);

        z11 = z11 & $z4;

        goto label7;

     label8:
        goto label6;

     label9:
        return z11;
    }

    public boolean supportsAlternative(java.util.Collection, java.util.List)
    {
        java.util.Iterator $r1;
        java.util.Collection r0;
        java.util.List r5;
        org.apache.cxf.ws.policy.AssertionInfoMap r4;
        org.apache.neethi.PolicyComponent r3;
        java.lang.Object $r2;
        boolean $z0, $z1, z2;

        r4 := @this: org.apache.cxf.ws.policy.AssertionInfoMap;

        r0 := @parameter0: java.util.Collection;

        r5 := @parameter1: java.util.List;

        z2 = 1;

        $r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.neethi.PolicyComponent) $r2;

        $z1 = virtualinvoke r4.<org.apache.cxf.ws.policy.AssertionInfoMap: boolean supportsAlternative(org.apache.neethi.PolicyComponent,java.util.List)>(r3, r5);

        z2 = z2 & $z1;

        goto label1;

     label2:
        return z2;
    }

    public java.util.List checkEffectivePolicy(org.apache.neethi.Policy)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Collection $r17;
        java.util.List r29;
        java.lang.StringBuilder $r6, $r14, $r23, $r24, $r25, $r27;
        javax.xml.namespace.QName r30;
        org.apache.cxf.ws.policy.PolicyException $r8;
        java.lang.Object[] $r10;
        org.apache.cxf.common.i18n.Message $r9;
        java.util.ArrayList $r0, $r1;
        org.apache.cxf.ws.policy.AssertionInfoMap r16;
        java.util.ResourceBundle $r11;
        java.lang.String $r12, $r21, $r22, $r26, r31, r32;
        java.util.LinkedHashSet $r4;
        org.apache.cxf.ws.policy.AssertionInfo r20;
        java.util.Iterator $r3, $r5, $r7, $r18;
        org.apache.neethi.Policy r2;
        java.lang.Object $r13, $r15, $r19, $r28;

        r16 := @this: org.apache.cxf.ws.policy.AssertionInfoMap;

        r2 := @parameter0: org.apache.neethi.Policy;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(4);

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r2.<org.apache.neethi.Policy: java.util.Iterator getAlternatives()>();

     label01:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r28 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r29 = (java.util.List) $r28;

        $z6 = virtualinvoke r16.<org.apache.cxf.ws.policy.AssertionInfoMap: boolean supportsAlternative(java.util.Collection,java.util.List)>(r29, $r1);

        if $z6 == 0 goto label02;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r29);

     label02:
        goto label01;

     label03:
        $z1 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>();

        if $z1 != 0 goto label04;

        return $r0;

     label04:
        $r4 = new java.util.LinkedHashSet;

        specialinvoke $r4.<java.util.LinkedHashSet: void <init>()>();

        $r5 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label05:
        $z2 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label10;

        $r15 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r30 = (javax.xml.namespace.QName) $r15;

        $r17 = virtualinvoke r16.<org.apache.cxf.ws.policy.AssertionInfoMap: java.util.Collection getAssertionInfo(javax.xml.namespace.QName)>(r30);

        $r18 = interfaceinvoke $r17.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z4 = interfaceinvoke $r18.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label09;

        $r19 = interfaceinvoke $r18.<java.util.Iterator: java.lang.Object next()>();

        r20 = (org.apache.cxf.ws.policy.AssertionInfo) $r19;

        $z5 = virtualinvoke r20.<org.apache.cxf.ws.policy.AssertionInfo: boolean isAsserted()>();

        if $z5 != 0 goto label08;

        $r21 = virtualinvoke r30.<javax.xml.namespace.QName: java.lang.String toString()>();

        r31 = $r21;

        $r22 = virtualinvoke r20.<org.apache.cxf.ws.policy.AssertionInfo: java.lang.String getErrorMessage()>();

        if $r22 == null goto label07;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r26 = virtualinvoke r20.<org.apache.cxf.ws.policy.AssertionInfo: java.lang.String getErrorMessage()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

     label07:
        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r31);

     label08:
        goto label06;

     label09:
        goto label05;

     label10:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label11:
        $z3 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r13 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        r32 = (java.lang.String) $r13;

        $r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        goto label11;

     label12:
        $r8 = new org.apache.cxf.ws.policy.PolicyException;

        $r9 = new org.apache.cxf.common.i18n.Message;

        $r11 = <org.apache.cxf.ws.policy.AssertionInfoMap: java.util.ResourceBundle BUNDLE>;

        $r10 = newarray (java.lang.Object)[1];

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10[0] = $r12;

        specialinvoke $r9.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.ResourceBundle,java.lang.Object[])>("NO_ALTERNATIVE_EXC", $r11, $r10);

        specialinvoke $r8.<org.apache.cxf.ws.policy.PolicyException: void <init>(org.apache.cxf.common.i18n.Message)>($r9);

        throw $r8;
    }

    public void check()
    {
        org.apache.cxf.ws.policy.PolicyException $r8;
        java.lang.Object[] $r10;
        org.apache.cxf.common.i18n.Message $r9;
        org.apache.cxf.ws.policy.AssertionInfoMap r0;
        java.util.ResourceBundle $r11;
        boolean $z0, $z1, $z2;
        org.apache.cxf.ws.policy.AssertionInfo r7;
        java.util.Iterator $r2, $r5;
        java.util.Collection $r1, r4;
        org.apache.neethi.Assertion $r12;
        java.lang.Object $r3, $r6;
        javax.xml.namespace.QName $r13;

        r0 := @this: org.apache.cxf.ws.policy.AssertionInfoMap;

        $r1 = virtualinvoke r0.<org.apache.cxf.ws.policy.AssertionInfoMap: java.util.Collection values()>();

        $r2 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Collection) $r3;

        $r5 = interfaceinvoke r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (org.apache.cxf.ws.policy.AssertionInfo) $r6;

        $z2 = virtualinvoke r7.<org.apache.cxf.ws.policy.AssertionInfo: boolean isAsserted()>();

        if $z2 != 0 goto label3;

        $r8 = new org.apache.cxf.ws.policy.PolicyException;

        $r9 = new org.apache.cxf.common.i18n.Message;

        $r11 = <org.apache.cxf.ws.policy.AssertionInfoMap: java.util.ResourceBundle BUNDLE>;

        $r10 = newarray (java.lang.Object)[1];

        $r12 = virtualinvoke r7.<org.apache.cxf.ws.policy.AssertionInfo: org.apache.neethi.Assertion getAssertion()>();

        $r13 = interfaceinvoke $r12.<org.apache.neethi.Assertion: javax.xml.namespace.QName getName()>();

        $r10[0] = $r13;

        specialinvoke $r9.<org.apache.cxf.common.i18n.Message: void <init>(java.lang.String,java.util.ResourceBundle,java.lang.Object[])>("NOT_ASSERTED_EXC", $r11, $r10);

        specialinvoke $r8.<org.apache.cxf.ws.policy.PolicyException: void <init>(org.apache.cxf.common.i18n.Message)>($r9);

        throw $r8;

     label3:
        goto label2;

     label4:
        goto label1;

     label5:
        return;
    }

    private static java.util.Collection getAssertions(org.apache.neethi.PolicyOperator)
    {
        java.util.ArrayList $r0;
        org.apache.neethi.PolicyOperator r1;

        r1 := @parameter0: org.apache.neethi.PolicyOperator;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        staticinvoke <org.apache.cxf.ws.policy.AssertionInfoMap: void getAssertions(org.apache.neethi.PolicyOperator,java.util.Collection)>(r1, $r0);

        return $r0;
    }

    private static void getAssertions(org.apache.neethi.PolicyOperator, java.util.Collection)
    {
        java.util.Iterator $r2;
        org.apache.neethi.PolicyOperator r0, $r6;
        java.util.Collection r5;
        org.apache.neethi.Assertion $r7;
        java.util.List $r1;
        org.apache.neethi.PolicyComponent r4;
        java.lang.Object $r3;
        boolean $z0, $z1;

        r0 := @parameter0: org.apache.neethi.PolicyOperator;

        r5 := @parameter1: java.util.Collection;

        $r1 = interfaceinvoke r0.<org.apache.neethi.PolicyOperator: java.util.List getPolicyComponents()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.apache.neethi.PolicyComponent) $r3;

        $z1 = r4 instanceof org.apache.neethi.Assertion;

        if $z1 == 0 goto label2;

        $r7 = (org.apache.neethi.Assertion) r4;

        interfaceinvoke r5.<java.util.Collection: boolean add(java.lang.Object)>($r7);

        goto label3;

     label2:
        $r6 = (org.apache.neethi.PolicyOperator) r4;

        staticinvoke <org.apache.cxf.ws.policy.AssertionInfoMap: void getAssertions(org.apache.neethi.PolicyOperator,java.util.Collection)>($r6, r5);

     label3:
        goto label1;

     label4:
        return;
    }

    static void <clinit>()
    {
        java.util.ResourceBundle $r0;

        $r0 = staticinvoke <org.apache.cxf.common.i18n.BundleUtils: java.util.ResourceBundle getBundle(java.lang.Class,java.lang.String)>(class "Lorg/apache/cxf/ws/policy/AssertionInfoMap;", "APIMessages");

        <org.apache.cxf.ws.policy.AssertionInfoMap: java.util.ResourceBundle BUNDLE> = $r0;

        return;
    }
}
