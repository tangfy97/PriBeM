public class org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet extends java.lang.Object implements org.waveprotocol.wave.model.wave.ObservableWavelet
{
    private final org.waveprotocol.wave.model.id.WaveId waveId;
    private final org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet;
    private final org.waveprotocol.wave.model.operation.SilentOperationSink executor;
    private final org.waveprotocol.wave.model.operation.SilentOperationSink output;
    private final java.util.Map blips;
    private final org.waveprotocol.wave.model.operation.SilentOperationSink fromBlip;
    private final org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory contextFactory;
    private final org.waveprotocol.wave.model.wave.ParticipationHelper participationHelper;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;
    private final org.waveprotocol.wave.model.wave.data.WaveletDataListener eventForwarder;

    public static org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet createReadOnly(org.waveprotocol.wave.model.wave.data.ObservableWaveletData)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r4, $r5;
        org.waveprotocol.wave.model.id.WaveId $r2;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r1;
        org.waveprotocol.wave.model.operation.wave.BasicWaveletOperationContextFactory $r3;
        org.waveprotocol.wave.model.wave.ParticipationHelper $r6;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        $r0 = new org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r2 = interfaceinvoke r1.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveId getWaveId()>();

        $r3 = new org.waveprotocol.wave.model.operation.wave.BasicWaveletOperationContextFactory;

        specialinvoke $r3.<org.waveprotocol.wave.model.operation.wave.BasicWaveletOperationContextFactory: void <init>(org.waveprotocol.wave.model.wave.ParticipantId)>(null);

        $r6 = <org.waveprotocol.wave.model.wave.ParticipationHelper: org.waveprotocol.wave.model.wave.ParticipationHelper READONLY>;

        $r5 = <org.waveprotocol.wave.model.operation.SilentOperationSink: org.waveprotocol.wave.model.operation.SilentOperationSink BLOCKED>;

        $r4 = <org.waveprotocol.wave.model.operation.SilentOperationSink: org.waveprotocol.wave.model.operation.SilentOperationSink BLOCKED>;

        specialinvoke $r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void <init>(org.waveprotocol.wave.model.id.WaveId,org.waveprotocol.wave.model.wave.data.ObservableWaveletData,org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory,org.waveprotocol.wave.model.wave.ParticipationHelper,org.waveprotocol.wave.model.operation.SilentOperationSink,org.waveprotocol.wave.model.operation.SilentOperationSink)>($r2, r1, $r3, $r6, $r5, $r4);

        return $r0;
    }

    public void <init>(org.waveprotocol.wave.model.id.WaveId, org.waveprotocol.wave.model.wave.data.ObservableWaveletData, org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory, org.waveprotocol.wave.model.wave.ParticipationHelper, org.waveprotocol.wave.model.operation.SilentOperationSink, org.waveprotocol.wave.model.operation.SilentOperationSink)
    {
        org.waveprotocol.wave.model.id.WaveId r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2 $r4;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData r6;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1 $r2;
        org.waveprotocol.wave.model.wave.data.WaveletDataListener $r11;
        java.util.HashMap $r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.operation.SilentOperationSink r9, r10;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory r7;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r3;
        org.waveprotocol.wave.model.wave.ParticipationHelper r8;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r5 := @parameter0: org.waveprotocol.wave.model.id.WaveId;

        r6 := @parameter1: org.waveprotocol.wave.model.wave.data.ObservableWaveletData;

        r7 := @parameter2: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory;

        r8 := @parameter3: org.waveprotocol.wave.model.wave.ParticipationHelper;

        r9 := @parameter4: org.waveprotocol.wave.model.operation.SilentOperationSink;

        r10 := @parameter5: org.waveprotocol.wave.model.operation.SilentOperationSink;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: java.util.Map blips> = $r1;

        $r2 = new org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1;

        specialinvoke $r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$1: void <init>(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>(r0);

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.SilentOperationSink fromBlip> = $r2;

        $r3 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r3;

        $r4 = new org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2;

        specialinvoke $r4.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet$2: void <init>(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)>(r0);

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.WaveletDataListener eventForwarder> = $r4;

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.id.WaveId waveId> = r5;

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet> = r6;

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory contextFactory> = r7;

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.ParticipationHelper participationHelper> = r8;

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.SilentOperationSink executor> = r9;

        r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.SilentOperationSink output> = r10;

        $r11 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.WaveletDataListener eventForwarder>;

        interfaceinvoke r6.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: void addListener(java.lang.Object)>($r11);

        return;
    }

    private void applyAndSend(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r2, $r3;
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.SilentOperationSink executor>;

        interfaceinvoke $r2.<org.waveprotocol.wave.model.operation.SilentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>(r1);

        $r3 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.SilentOperationSink output>;

        interfaceinvoke $r3.<org.waveprotocol.wave.model.operation.SilentOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>(r1);

        return;
    }

    private void authoriseApplyAndSend(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r1 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.wave.AddParticipant authorise(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r1);

        specialinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void applyAndSend(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r1);

        return;
    }

    private org.waveprotocol.wave.model.operation.wave.AddParticipant authorise(org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r0;
        java.util.Set $r4;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1, $r9;
        org.waveprotocol.wave.model.wave.ParticipantId $r2, $r6;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r3;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory $r8;
        org.waveprotocol.wave.model.wave.ParticipationHelper $r5;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r7;
        boolean $z0, $z1;

        r3 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r0 := @parameter0: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.operation.wave.WaveletOperation: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext getContext()>();

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r4 = virtualinvoke r3.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: java.util.Set getParticipantIds()>();

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        goto label3;

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Set: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        $r5 = r3.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.ParticipationHelper participationHelper>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.wave.ParticipationHelper: org.waveprotocol.wave.model.wave.ParticipantId getAuthoriser(org.waveprotocol.wave.model.wave.ParticipantId,java.util.Set)>($r2, $r4);

        if $r6 == null goto label3;

        $r7 = new org.waveprotocol.wave.model.operation.wave.AddParticipant;

        $r8 = r3.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory contextFactory>;

        $r9 = interfaceinvoke $r8.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createContext(org.waveprotocol.wave.model.wave.ParticipantId)>($r6);

        specialinvoke $r7.<org.waveprotocol.wave.model.operation.wave.AddParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>($r9, $r2);

        specialinvoke r3.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void applyAndSend(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>($r7);

        return $r7;

     label3:
        return null;
    }

    void handleException(org.waveprotocol.wave.model.operation.OperationException)
    {
        org.waveprotocol.wave.model.operation.OperationException r3;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r6;
        org.waveprotocol.wave.model.operation.OperationRuntimeException $r0;

        r6 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r3 := @parameter0: org.waveprotocol.wave.model.operation.OperationException;

        $r0 = new org.waveprotocol.wave.model.operation.OperationRuntimeException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OpBasedWavelet caught exception: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<org.waveprotocol.wave.model.operation.OperationRuntimeException: void <init>(java.lang.String,org.waveprotocol.wave.model.operation.OperationException)>($r5, r3);

        throw $r0;
    }

    org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createContext()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory $r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory contextFactory>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext$Factory: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createContext()>();

        return $r2;
    }

    org.waveprotocol.wave.model.wave.opbased.OpBasedBlip adapt(org.waveprotocol.wave.model.wave.data.BlipData)
    {
        org.waveprotocol.wave.model.wave.data.BlipData r0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r1;
        org.waveprotocol.wave.model.operation.SilentOperationSink $r6;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r5, r9;
        java.util.Map $r2, $r7;
        java.lang.Object $r4;
        java.lang.String $r3, $r8;

        r1 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.data.BlipData;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: java.util.Map blips>;

        $r3 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.BlipData: java.lang.String getId()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r9 = (org.waveprotocol.wave.model.wave.opbased.OpBasedBlip) $r4;

        if r9 != null goto label2;

        $r5 = new org.waveprotocol.wave.model.wave.opbased.OpBasedBlip;

        $r6 = r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.SilentOperationSink fromBlip>;

        specialinvoke $r5.<org.waveprotocol.wave.model.wave.opbased.OpBasedBlip: void <init>(org.waveprotocol.wave.model.wave.data.BlipData,org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet,org.waveprotocol.wave.model.operation.SilentOperationSink)>(r0, r1, $r6);

        r9 = $r5;

        $r7 = r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: java.util.Map blips>;

        $r8 = interfaceinvoke r0.<org.waveprotocol.wave.model.wave.data.BlipData: java.lang.String getId()>();

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r5);

     label2:
        return r9;
    }

    public java.lang.Iterable getBlips()
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r8;
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r2, $r7;
        java.util.Set $r3;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r1;
        java.util.ArrayList $r0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r9;
        java.lang.Object $r5;
        java.lang.String r6;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: java.util.Set getDocumentIds()>();

        $r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.String) $r5;

        $r7 = r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r8 = interfaceinvoke $r7.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.wave.data.BlipData getDocument(java.lang.String)>(r6);

        $r9 = virtualinvoke r1.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip adapt(org.waveprotocol.wave.model.wave.data.BlipData)>($r8);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9);

        goto label1;

     label2:
        return $r0;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedBlip getBlip(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r3;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r4;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        java.lang.String r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.wave.data.BlipData getDocument(java.lang.String)>(r1);

        if $r3 == null goto label1;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip adapt(org.waveprotocol.wave.model.wave.data.BlipData)>($r3);

        return $r4;

     label1:
        return null;
    }

    public org.waveprotocol.wave.model.wave.opbased.OpBasedBlip createBlip(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.data.BlipData $r8;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r3;
        java.util.Set $r6;
        org.waveprotocol.wave.model.document.operation.DocInitialization $r7;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r4, $r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r9;
        java.lang.String r2;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r2 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createContext()>();

        $r3 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r4 = virtualinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r5 = virtualinvoke $r1.<org.waveprotocol.wave.model.operation.wave.WaveletOperationContext: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        $r6 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r5);

        $r7 = <org.waveprotocol.wave.model.document.util.EmptyDocument: org.waveprotocol.wave.model.document.operation.DocInitialization EMPTY_DOCUMENT>;

        $r8 = interfaceinvoke $r3.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.wave.data.BlipData createDocument(java.lang.String,org.waveprotocol.wave.model.wave.ParticipantId,java.util.Collection,org.waveprotocol.wave.model.document.operation.DocInitialization,long,long)>(r2, $r4, $r6, $r7, -1L, -1L);

        $r9 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip adapt(org.waveprotocol.wave.model.wave.data.BlipData)>($r8);

        return $r9;
    }

    public org.waveprotocol.wave.model.document.ObservableDocument getDocument(java.lang.String)
    {
        org.waveprotocol.wave.model.document.Document $r3;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r2, r10;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String r1, $r9;
        org.waveprotocol.wave.model.document.ObservableDocument $r4;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip getBlip(java.lang.String)>(r1);

        r10 = $r2;

        if $r2 != null goto label1;

        r10 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip createBlip(java.lang.String)>(r1);

     label1:
        $r3 = interfaceinvoke r10.<org.waveprotocol.wave.model.wave.Blip: org.waveprotocol.wave.model.document.Document getContent()>();

        $z0 = $r3 instanceof org.waveprotocol.wave.model.document.ObservableDocument;

        if $z0 != 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Document \"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is not observable");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: void illegalArgument(java.lang.Object)>($r9);

     label2:
        $r4 = (org.waveprotocol.wave.model.document.ObservableDocument) $r3;

        return $r4;
    }

    public java.util.Set getDocumentIds()
    {
        java.util.Set $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: java.util.Set getDocumentIds()>();

        return $r2;
    }

    public void addParticipant(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;
        java.util.Set $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r5;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r4, $r6;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: java.util.Set getParticipants()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z0 != 0 goto label1;

        $r4 = new org.waveprotocol.wave.model.operation.wave.AddParticipant;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createContext()>();

        specialinvoke $r4.<org.waveprotocol.wave.model.operation.wave.AddParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>($r5, r3);

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.wave.AddParticipant authorise(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>($r4);

        $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void applyAndSend(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>($r4);

     label1:
        return;
    }

    public void removeParticipant(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.operation.wave.RemoveParticipant $r4;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;
        java.util.Set $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.ParticipantId r3;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r5;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r3 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: java.util.Set getParticipants()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r3);

        if $z0 == 0 goto label1;

        $r4 = new org.waveprotocol.wave.model.operation.wave.RemoveParticipant;

        $r5 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createContext()>();

        specialinvoke $r4.<org.waveprotocol.wave.model.operation.wave.RemoveParticipant: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext,org.waveprotocol.wave.model.wave.ParticipantId)>($r5, r3);

        specialinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void authoriseApplyAndSend(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>($r4);

     label1:
        return;
    }

    public org.waveprotocol.wave.model.id.WaveId getWaveId()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.id.WaveId $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.id.WaveId waveId>;

        return $r1;
    }

    public org.waveprotocol.wave.model.id.WaveletId getId()
    {
        org.waveprotocol.wave.model.id.WaveletId $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        return $r2;
    }

    public long getCreationTime()
    {
        long $l0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $l0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: long getCreationTime()>();

        return $l0;
    }

    public org.waveprotocol.wave.model.wave.ParticipantId getCreatorId()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.ParticipantId $r2;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.wave.ParticipantId getCreator()>();

        return $r2;
    }

    public long getLastModifiedTime()
    {
        long $l0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $l0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: long getLastModifiedTime()>();

        return $l0;
    }

    public java.util.Set getParticipantIds()
    {
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;
        java.util.Set $r2, $r3;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: java.util.Set getParticipants()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public long getVersion()
    {
        long $l0;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $l0 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: long getVersion()>();

        return $l0;
    }

    public org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()
    {
        org.waveprotocol.wave.model.version.HashedVersion $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.version.HashedVersion getHashedVersion()>();

        return $r2;
    }

    public void addListener(org.waveprotocol.wave.model.wave.WaveletListener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.WaveletListener r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.WaveletListener;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.wave.WaveletListener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.WaveletListener r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.WaveletListener;

        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public int hashCode()
    {
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;
        int $i0, $i1;
        org.waveprotocol.wave.model.id.WaveletId $r2;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $i0 = virtualinvoke $r2.<org.waveprotocol.wave.model.id.WaveletId: int hashCode()>();

        $i1 = 37 + $i0;

        return $i1;
    }

    public boolean equals(java.lang.Object)
    {
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r2, $r5;
        org.waveprotocol.wave.model.id.WaveletId $r3, $r6;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0, $r4;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $r2 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r3 = interfaceinvoke $r2.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $r4 = (org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet) r1;

        $r5 = $r4.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r6 = interfaceinvoke $r5.<org.waveprotocol.wave.model.wave.data.ObservableWaveletData: org.waveprotocol.wave.model.id.WaveletId getWaveletId()>();

        $z1 = virtualinvoke $r3.<org.waveprotocol.wave.model.id.WaveletId: boolean equals(java.lang.Object)>($r6);

        return $z1;
    }

    public java.lang.String toString()
    {
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r3;
        java.lang.StringBuilder $r0, $r1, $r4, $r5;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r2;
        java.lang.String $r6;

        r2 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OpBasedWavelet { ");

        $r3 = r2.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" }");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public void touch()
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.operation.wave.WaveletOperationContext $r2;
        org.waveprotocol.wave.model.operation.wave.NoOp $r1;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = new org.waveprotocol.wave.model.operation.wave.NoOp;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.wave.WaveletOperationContext createContext()>();

        specialinvoke $r1.<org.waveprotocol.wave.model.operation.wave.NoOp: void <init>(org.waveprotocol.wave.model.operation.wave.WaveletOperationContext)>($r2);

        specialinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void authoriseApplyAndSend(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>($r1);

        return;
    }

    public volatile org.waveprotocol.wave.model.wave.Blip createBlip(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip createBlip(java.lang.String)>(r1);

        return $r2;
    }

    public volatile org.waveprotocol.wave.model.wave.Blip getBlip(java.lang.String)
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        java.lang.String r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedBlip $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.opbased.OpBasedBlip getBlip(java.lang.String)>(r1);

        return $r2;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.WaveletListener $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.WaveletListener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void removeListener(org.waveprotocol.wave.model.wave.WaveletListener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.WaveletListener $r2;

        r0 := @this: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.wave.WaveletListener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: void addListener(org.waveprotocol.wave.model.wave.WaveletListener)>($r2);

        return;
    }

    static org.waveprotocol.wave.model.operation.wave.AddParticipant access$000(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet, org.waveprotocol.wave.model.operation.wave.WaveletOperation)
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.operation.wave.AddParticipant $r2;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        r1 := @parameter1: org.waveprotocol.wave.model.operation.wave.WaveletOperation;

        $r2 = specialinvoke r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.wave.AddParticipant authorise(org.waveprotocol.wave.model.operation.wave.WaveletOperation)>(r1);

        return $r2;
    }

    static org.waveprotocol.wave.model.wave.data.ObservableWaveletData access$100(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)
    {
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;
        org.waveprotocol.wave.model.wave.data.ObservableWaveletData $r1;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.wave.data.ObservableWaveletData wavelet>;

        return $r1;
    }

    static org.waveprotocol.wave.model.operation.SilentOperationSink access$200(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)
    {
        org.waveprotocol.wave.model.operation.SilentOperationSink $r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.operation.SilentOperationSink output>;

        return $r1;
    }

    static org.waveprotocol.wave.model.util.CopyOnWriteSet access$300(org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet r0;

        r0 := @parameter0: org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet;

        $r1 = r0.<org.waveprotocol.wave.model.wave.opbased.OpBasedWavelet: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        return $r1;
    }
}
