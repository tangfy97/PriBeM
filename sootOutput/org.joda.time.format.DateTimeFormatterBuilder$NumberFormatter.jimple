abstract class org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter extends java.lang.Object implements org.joda.time.format.DateTimePrinter, org.joda.time.format.DateTimeParser
{
    protected final org.joda.time.DateTimeFieldType iFieldType;
    protected final int iMaxParsedDigits;
    protected final boolean iSigned;

    void <init>(org.joda.time.DateTimeFieldType, int, boolean)
    {
        org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter r0;
        int i0;
        org.joda.time.DateTimeFieldType r1;
        boolean z0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter;

        r1 := @parameter0: org.joda.time.DateTimeFieldType;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType> = r1;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits> = i0;

        r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: boolean iSigned> = z0;

        return;
    }

    public int estimateParsedLength()
    {
        int $i0;
        org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter r0;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>;

        return $i0;
    }

    public int parseInto(org.joda.time.format.DateTimeParserBucket, java.lang.String, int)
    {
        org.joda.time.DateTimeFieldType $r5;
        boolean $z0, z1, $z3, $z4;
        java.lang.StringIndexOutOfBoundsException $r4;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i18, $i19, $i20, $i21, i22, i23, i24, i25, i26, i27, i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i37, $i38, $i40, $i41;
        java.lang.String r1, $r3;
        org.joda.time.format.DateTimeParserBucket r2;
        org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter r0;
        char $c3, $c8, $c13, $c17;

        r0 := @this: org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter;

        r2 := @parameter0: org.joda.time.format.DateTimeParserBucket;

        r1 := @parameter1: java.lang.String;

        i22 := @parameter2: int;

        $i0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: int iMaxParsedDigits>;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i1 - i22;

        i23 = staticinvoke <java.lang.Math: int min(int,int)>($i0, $i2);

        z1 = 0;

        i24 = 0;

     label01:
        if i24 >= i23 goto label10;

        $i12 = i22 + i24;

        $c13 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i12);

        if i24 != 0 goto label08;

        $i29 = (int) $c13;

        if $i29 == 45 goto label02;

        $i30 = (int) $c13;

        if $i30 != 43 goto label08;

     label02:
        $z0 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: boolean iSigned>;

        if $z0 == 0 goto label08;

        $i31 = (int) $c13;

        if $i31 != 45 goto label03;

        $z4 = 1;

        $z3 = 1;

        goto label04;

     label03:
        $z4 = 0;

        $z3 = 0;

     label04:
        z1 = $z3;

        $i14 = i24 + 1;

        if $i14 >= i23 goto label10;

        $i15 = i22 + i24;

        $i16 = $i15 + 1;

        $c17 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i16);

        $i32 = (int) $c17;

        if $i32 < 48 goto label10;

        $i33 = (int) $c17;

        if $i33 <= 57 goto label05;

        goto label10;

     label05:
        if $z4 == 0 goto label06;

        i24 = i24 + 1;

        goto label07;

     label06:
        i22 = i22 + 1;

     label07:
        $i18 = i23 + 1;

        $i19 = virtualinvoke r1.<java.lang.String: int length()>();

        $i20 = $i19 - i22;

        i23 = staticinvoke <java.lang.Math: int min(int,int)>($i18, $i20);

        goto label01;

     label08:
        $i34 = (int) $c13;

        if $i34 < 48 goto label10;

        $i35 = (int) $c13;

        if $i35 <= 57 goto label09;

        goto label10;

     label09:
        i24 = i24 + 1;

        goto label01;

     label10:
        if i24 != 0 goto label11;

        $i37 = (int) -1;

        $i11 = i22 ^ $i37;

        return $i11;

     label11:
        if i24 < 9 goto label12;

        $i10 = i22 + i24;

        i25 = $i10;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i22, $i10);

        i26 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        goto label19;

     label12:
        i27 = i22;

        if z1 == 0 goto label13;

        i27 = i22 + 1;

     label13:
        i28 = i27 + 1;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i27);

        $i38 = (int) $c3;

        i26 = $i38 - 48;

     label14:
        goto label16;

     label15:
        $r4 := @caughtexception;

        $i40 = (int) -1;

        $i21 = i22 ^ $i40;

        return $i21;

     label16:
        i25 = i22 + i24;

     label17:
        if i28 >= i25 goto label18;

        $i5 = i26 << 3;

        $i4 = i26 << 1;

        $i7 = $i5 + $i4;

        $i6 = i28;

        i28 = i28 + 1;

        $c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i6);

        $i41 = (int) $c8;

        $i9 = $i7 + $i41;

        i26 = $i9 - 48;

        goto label17;

     label18:
        if z1 == 0 goto label19;

        i26 = neg i26;

     label19:
        $r5 = r0.<org.joda.time.format.DateTimeFormatterBuilder$NumberFormatter: org.joda.time.DateTimeFieldType iFieldType>;

        virtualinvoke r2.<org.joda.time.format.DateTimeParserBucket: void saveField(org.joda.time.DateTimeFieldType,int)>($r5, i26);

        return i25;

        catch java.lang.StringIndexOutOfBoundsException from label13 to label14 with label15;
    }
}
