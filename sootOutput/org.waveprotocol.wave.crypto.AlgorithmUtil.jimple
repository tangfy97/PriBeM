public class org.waveprotocol.wave.crypto.AlgorithmUtil extends java.lang.Object
{

    private void <init>()
    {
        org.waveprotocol.wave.crypto.AlgorithmUtil r0;

        r0 := @this: org.waveprotocol.wave.crypto.AlgorithmUtil;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getJceName(org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm)
    {
        java.lang.IllegalArgumentException $r2;
        org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm r0;
        int[] $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;

        r0 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm;

        $r1 = <org.waveprotocol.wave.crypto.AlgorithmUtil$1: int[] $SwitchMap$org$waveprotocol$wave$federation$Proto$ProtocolSignerInfo$HashAlgorithm>;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolSignerInfo$HashAlgorithm: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            case 2: goto label2;
            default: goto label3;
        };

     label1:
        return "SHA-256";

     label2:
        return "SHA-512";

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown hash alg: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }

    public static java.lang.String getJceName(org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm)
    {
        java.lang.IllegalArgumentException $r2;
        int[] $r1;
        int $i0, $i1;
        java.lang.StringBuilder $r3, $r4, $r5;
        java.lang.String $r6;
        org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm r0;

        r0 := @parameter0: org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm;

        $r1 = <org.waveprotocol.wave.crypto.AlgorithmUtil$1: int[] $SwitchMap$org$waveprotocol$wave$federation$Proto$ProtocolSignature$SignatureAlgorithm>;

        $i0 = virtualinvoke r0.<org.waveprotocol.wave.federation.Proto$ProtocolSignature$SignatureAlgorithm: int ordinal()>();

        $i1 = $r1[$i0];

        lookupswitch($i1)
        {
            case 1: goto label1;
            default: goto label2;
        };

     label1:
        return "SHA1withRSA";

     label2:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown signature alg: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r2;
    }
}
