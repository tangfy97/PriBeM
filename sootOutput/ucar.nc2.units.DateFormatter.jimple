public class ucar.nc2.units.DateFormatter extends java.lang.Object
{
    private java.text.SimpleDateFormat isoDateTimeFormat;
    private java.text.SimpleDateFormat isoDateNoSecsFormat;
    private java.text.SimpleDateFormat stdDateTimeFormat;
    private java.text.SimpleDateFormat stdDateNoSecsFormat;
    private java.text.SimpleDateFormat dateOnlyFormat;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private void isoDateTimeFormat()
    {
        java.util.TimeZone $r4;
        java.text.SimpleDateFormat $r1, $r2, $r3;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        $r1 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat isoDateTimeFormat>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm:ss");

        r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat isoDateTimeFormat> = $r2;

        $r3 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat isoDateTimeFormat>;

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke $r3.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r4);

        return;
    }

    private void isoDateNoSecsFormat()
    {
        java.util.TimeZone $r4;
        java.text.SimpleDateFormat $r1, $r2, $r3;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        $r1 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat isoDateNoSecsFormat>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd\'T\'HH:mm");

        r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat isoDateNoSecsFormat> = $r2;

        $r3 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat isoDateNoSecsFormat>;

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke $r3.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r4);

        return;
    }

    private void stdDateTimeFormat()
    {
        java.util.TimeZone $r4;
        java.text.SimpleDateFormat $r1, $r2, $r3;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        $r1 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat stdDateTimeFormat>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss");

        r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat stdDateTimeFormat> = $r2;

        $r3 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat stdDateTimeFormat>;

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke $r3.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r4);

        return;
    }

    private void stdDateNoSecsFormat()
    {
        java.util.TimeZone $r4;
        java.text.SimpleDateFormat $r1, $r2, $r3;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        $r1 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat stdDateNoSecsFormat>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm");

        r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat stdDateNoSecsFormat> = $r2;

        $r3 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat stdDateNoSecsFormat>;

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke $r3.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r4);

        return;
    }

    private void dateOnlyFormat()
    {
        java.util.TimeZone $r4;
        java.text.SimpleDateFormat $r1, $r2, $r3;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        $r1 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat dateOnlyFormat>;

        if $r1 == null goto label1;

        return;

     label1:
        $r2 = new java.text.SimpleDateFormat;

        specialinvoke $r2.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd");

        r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat dateOnlyFormat> = $r2;

        $r3 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat dateOnlyFormat>;

        $r4 = staticinvoke <java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>("GMT");

        virtualinvoke $r3.<java.text.SimpleDateFormat: void setTimeZone(java.util.TimeZone)>($r4);

        return;
    }

    public java.util.Date getISODate(java.lang.String)
    {
        java.util.Date $r2, $r5, $r7, $r9, $r11;
        java.lang.String r1;
        java.text.ParseException $r3, $r4, $r6, $r8, $r10;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        r1 := @parameter0: java.lang.String;

     label01:
        $r2 = virtualinvoke r0.<ucar.nc2.units.DateFormatter: java.util.Date stdDateTimeFormat(java.lang.String)>(r1);

     label02:
        return $r2;

     label03:
        $r10 := @caughtexception;

     label04:
        $r11 = virtualinvoke r0.<ucar.nc2.units.DateFormatter: java.util.Date isoDateTimeFormat(java.lang.String)>(r1);

     label05:
        return $r11;

     label06:
        $r8 := @caughtexception;

     label07:
        $r9 = virtualinvoke r0.<ucar.nc2.units.DateFormatter: java.util.Date isoDateNoSecsFormat(java.lang.String)>(r1);

     label08:
        return $r9;

     label09:
        $r6 := @caughtexception;

     label10:
        $r7 = virtualinvoke r0.<ucar.nc2.units.DateFormatter: java.util.Date stdDateNoSecsFormat(java.lang.String)>(r1);

     label11:
        return $r7;

     label12:
        $r4 := @caughtexception;

     label13:
        $r5 = virtualinvoke r0.<ucar.nc2.units.DateFormatter: java.util.Date dateOnlyFormat(java.lang.String)>(r1);

     label14:
        return $r5;

     label15:
        $r3 := @caughtexception;

        return null;

        catch java.text.ParseException from label01 to label02 with label03;
        catch java.text.ParseException from label04 to label05 with label06;
        catch java.text.ParseException from label07 to label08 with label09;
        catch java.text.ParseException from label10 to label11 with label12;
        catch java.text.ParseException from label13 to label14 with label15;
    }

    public java.util.Date stdDateTimeFormat(java.lang.String) throws java.text.ParseException
    {
        java.util.Date $r2;
        java.text.SimpleDateFormat $r1;
        java.lang.String r3, $r4;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        r3 := @parameter0: java.lang.String;

        if r3 != null goto label1;

        $r4 = "";

        goto label2;

     label1:
        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

     label2:
        specialinvoke r0.<ucar.nc2.units.DateFormatter: void stdDateTimeFormat()>();

        $r1 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat stdDateTimeFormat>;

        $r2 = virtualinvoke $r1.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r4);

        return $r2;
    }

    public java.util.Date stdDateNoSecsFormat(java.lang.String) throws java.text.ParseException
    {
        java.util.Date $r2;
        java.text.SimpleDateFormat $r1;
        java.lang.String r3, $r4;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        r3 := @parameter0: java.lang.String;

        if r3 != null goto label1;

        $r4 = "";

        goto label2;

     label1:
        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

     label2:
        specialinvoke r0.<ucar.nc2.units.DateFormatter: void stdDateNoSecsFormat()>();

        $r1 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat stdDateNoSecsFormat>;

        $r2 = virtualinvoke $r1.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r4);

        return $r2;
    }

    public java.util.Date isoDateTimeFormat(java.lang.String) throws java.text.ParseException
    {
        java.util.Date $r2;
        java.text.SimpleDateFormat $r1;
        java.lang.String r3, $r4;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        r3 := @parameter0: java.lang.String;

        if r3 != null goto label1;

        $r4 = "";

        goto label2;

     label1:
        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

     label2:
        specialinvoke r0.<ucar.nc2.units.DateFormatter: void isoDateTimeFormat()>();

        $r1 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat isoDateTimeFormat>;

        $r2 = virtualinvoke $r1.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r4);

        return $r2;
    }

    public java.util.Date isoDateNoSecsFormat(java.lang.String) throws java.text.ParseException
    {
        java.util.Date $r2;
        java.text.SimpleDateFormat $r1;
        java.lang.String r3, $r4;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        r3 := @parameter0: java.lang.String;

        if r3 != null goto label1;

        $r4 = "";

        goto label2;

     label1:
        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

     label2:
        specialinvoke r0.<ucar.nc2.units.DateFormatter: void isoDateNoSecsFormat()>();

        $r1 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat isoDateNoSecsFormat>;

        $r2 = virtualinvoke $r1.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r4);

        return $r2;
    }

    public java.util.Date dateOnlyFormat(java.lang.String) throws java.text.ParseException
    {
        java.util.Date $r2;
        java.text.SimpleDateFormat $r1;
        java.lang.String r3, $r4;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        r3 := @parameter0: java.lang.String;

        if r3 != null goto label1;

        $r4 = "";

        goto label2;

     label1:
        $r4 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>();

     label2:
        specialinvoke r0.<ucar.nc2.units.DateFormatter: void dateOnlyFormat()>();

        $r1 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat dateOnlyFormat>;

        $r2 = virtualinvoke $r1.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>($r4);

        return $r2;
    }

    public java.lang.String getStandardDateOnlyString(java.util.Date)
    {
        java.lang.String $r2;
        java.util.Date r1;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        r1 := @parameter0: java.util.Date;

        $r2 = virtualinvoke r0.<ucar.nc2.units.DateFormatter: java.lang.String toDateOnlyString(java.util.Date)>(r1);

        return $r2;
    }

    public java.lang.String toDateString(java.util.Date)
    {
        java.lang.String $r2;
        java.util.Date r1;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        r1 := @parameter0: java.util.Date;

        $r2 = virtualinvoke r0.<ucar.nc2.units.DateFormatter: java.lang.String toDateOnlyString(java.util.Date)>(r1);

        return $r2;
    }

    public java.lang.String toDateOnlyString(java.util.Date)
    {
        java.util.Date r1;
        java.text.SimpleDateFormat $r2;
        java.lang.String $r3;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        r1 := @parameter0: java.util.Date;

        specialinvoke r0.<ucar.nc2.units.DateFormatter: void dateOnlyFormat()>();

        $r2 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat dateOnlyFormat>;

        $r3 = virtualinvoke $r2.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r1);

        return $r3;
    }

    public java.lang.String getStandardDateString2(java.util.Date)
    {
        java.lang.String $r2;
        java.util.Date r1;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        r1 := @parameter0: java.util.Date;

        $r2 = virtualinvoke r0.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeString(java.util.Date)>(r1);

        return $r2;
    }

    public java.lang.String toDateTimeString(java.util.Date)
    {
        java.util.Date r0;
        java.text.SimpleDateFormat $r3;
        java.lang.StringBuilder $r2, $r5, $r6;
        java.lang.String $r4, $r7;
        ucar.nc2.units.DateFormatter r1;

        r1 := @this: ucar.nc2.units.DateFormatter;

        r0 := @parameter0: java.util.Date;

        if r0 != null goto label1;

        return "Unknown";

     label1:
        specialinvoke r1.<ucar.nc2.units.DateFormatter: void stdDateTimeFormat()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = r1.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat stdDateTimeFormat>;

        $r4 = virtualinvoke $r3.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Z");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public java.lang.String getStandardDateString(java.util.Date)
    {
        java.lang.String $r2;
        java.util.Date r1;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        r1 := @parameter0: java.util.Date;

        $r2 = virtualinvoke r0.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>(r1);

        return $r2;
    }

    public java.lang.String toDateTimeStringISO(java.util.Date)
    {
        java.util.Date r2;
        java.text.SimpleDateFormat $r3;
        java.lang.StringBuilder $r1, $r5, $r6;
        java.lang.String $r4, $r7;
        ucar.nc2.units.DateFormatter r0;

        r0 := @this: ucar.nc2.units.DateFormatter;

        r2 := @parameter0: java.util.Date;

        specialinvoke r0.<ucar.nc2.units.DateFormatter: void isoDateTimeFormat()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = r0.<ucar.nc2.units.DateFormatter: java.text.SimpleDateFormat isoDateTimeFormat>;

        $r4 = virtualinvoke $r3.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>(r2);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Z");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    private static void test(java.lang.String)
    {
        java.io.PrintStream $r6;
        java.util.Date $r2, $r4;
        java.lang.AssertionError $r11;
        java.lang.StringBuilder $r5, $r7, $r8, $r9;
        java.lang.String r1, $r3, $r10;
        ucar.nc2.units.DateFormatter $r0;
        boolean $z0, $z1;

        r1 := @parameter0: java.lang.String;

        $r0 = new ucar.nc2.units.DateFormatter;

        specialinvoke $r0.<ucar.nc2.units.DateFormatter: void <init>()>();

        $r2 = virtualinvoke $r0.<ucar.nc2.units.DateFormatter: java.util.Date getISODate(java.lang.String)>(r1);

        $r3 = virtualinvoke $r0.<ucar.nc2.units.DateFormatter: java.lang.String toDateTimeStringISO(java.util.Date)>($r2);

        $r4 = virtualinvoke $r0.<ucar.nc2.units.DateFormatter: java.util.Date getISODate(java.lang.String)>($r3);

        $z0 = <ucar.nc2.units.DateFormatter: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke $r2.<java.util.Date: boolean equals(java.lang.Object)>($r4);

        if $z1 != 0 goto label1;

        $r11 = new java.lang.AssertionError;

        specialinvoke $r11.<java.lang.AssertionError: void <init>()>();

        throw $r11;

     label1:
        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10);

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <ucar.nc2.units.DateFormatter: void test(java.lang.String)>("2001-09-11T12:09:20");

        staticinvoke <ucar.nc2.units.DateFormatter: void test(java.lang.String)>("2001-09-11 12:10:12");

        staticinvoke <ucar.nc2.units.DateFormatter: void test(java.lang.String)>("2001-09-11T12:10");

        staticinvoke <ucar.nc2.units.DateFormatter: void test(java.lang.String)>("2001-09-11 12:01");

        staticinvoke <ucar.nc2.units.DateFormatter: void test(java.lang.String)>("2001-09-11");

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lucar/nc2/units/DateFormatter;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <ucar.nc2.units.DateFormatter: boolean $assertionsDisabled> = $z1;

        return;
    }
}
