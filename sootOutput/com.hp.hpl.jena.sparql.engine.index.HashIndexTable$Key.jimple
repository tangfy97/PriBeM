class com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key extends java.lang.Object
{
    final com.hp.hpl.jena.graph.Node[] nodes;

    void <init>(com.hp.hpl.jena.graph.Node[])
    {
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key r0;
        com.hp.hpl.jena.graph.Node[] r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: com.hp.hpl.jena.graph.Node[] nodes> = r1;

        return;
    }

    public com.hp.hpl.jena.graph.Node[] getNodes()
    {
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key r0;
        com.hp.hpl.jena.graph.Node[] $r1;

        r0 := @this: com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: com.hp.hpl.jena.graph.Node[] nodes>;

        return $r1;
    }

    public java.lang.String toString()
    {
        com.hp.hpl.jena.graph.Node[] $r1;
        java.util.List $r2;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key r0;
        java.lang.String $r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key;

        $r1 = r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: com.hp.hpl.jena.graph.Node[] nodes>;

        $r2 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1);

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.String toString()>();

        return $r3;
    }

    public int hashCode()
    {
        com.hp.hpl.jena.graph.Node[] r1;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key r0;
        com.hp.hpl.jena.graph.Node r2;
        int i0, $i1, i2, i3, $i4;

        r0 := @this: com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key;

        i2 = 0;

        r1 = r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: com.hp.hpl.jena.graph.Node[] nodes>;

        i0 = lengthof r1;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        r2 = r1[i3];

        $i1 = i2;

        if r2 != null goto label2;

        $i4 = 0;

        goto label3;

     label2:
        $i4 = virtualinvoke r2.<com.hp.hpl.jena.graph.Node: int hashCode()>();

     label3:
        i2 = $i1 ^ $i4;

        i3 = i3 + 1;

        goto label1;

     label4:
        return i2;
    }

    public boolean equals(java.lang.Object)
    {
        com.hp.hpl.jena.graph.Node[] r2, $r4, $r5, $r7;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key $r1, r3;
        com.hp.hpl.jena.graph.Node $r6, $r8, $r9, $r10;
        int $i0, i1;
        java.lang.Object r0;
        boolean $z0, $z1;

        r3 := @this: com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = (com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key) r0;

        r2 = $r1.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: com.hp.hpl.jena.graph.Node[] nodes>;

        i1 = 0;

     label2:
        $r4 = r3.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: com.hp.hpl.jena.graph.Node[] nodes>;

        $i0 = lengthof $r4;

        if i1 >= $i0 goto label5;

        $r5 = r3.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: com.hp.hpl.jena.graph.Node[] nodes>;

        $r6 = $r5[i1];

        if $r6 != null goto label3;

        $r10 = r2[i1];

        if $r10 == null goto label4;

        return 0;

     label3:
        $r7 = r3.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: com.hp.hpl.jena.graph.Node[] nodes>;

        $r9 = $r7[i1];

        $r8 = r2[i1];

        $z1 = virtualinvoke $r9.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>($r8);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return 1;
    }

    public boolean compatibleAndSharedDomain(com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key)
    {
        com.hp.hpl.jena.graph.Node[] $r1, $r3, $r4;
        com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key r0, r2;
        com.hp.hpl.jena.graph.Node r5, r6;
        int $i0, i1;
        boolean $z0, z1;

        r2 := @this: com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key;

        r0 := @parameter0: com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key;

        $r1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: com.hp.hpl.jena.graph.Node[] getNodes()>();

        z1 = 0;

        i1 = 0;

     label1:
        $r3 = r2.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: com.hp.hpl.jena.graph.Node[] nodes>;

        $i0 = lengthof $r3;

        if i1 >= $i0 goto label4;

        $r4 = r2.<com.hp.hpl.jena.sparql.engine.index.HashIndexTable$Key: com.hp.hpl.jena.graph.Node[] nodes>;

        r5 = $r4[i1];

        r6 = $r1[i1];

        if r5 == null goto label3;

        if r6 == null goto label3;

        $z0 = virtualinvoke r5.<com.hp.hpl.jena.graph.Node: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        z1 = 1;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return z1;
    }
}
