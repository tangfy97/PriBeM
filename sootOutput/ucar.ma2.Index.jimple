public class ucar.ma2.Index extends java.lang.Object implements java.lang.Cloneable
{
    public static final ucar.ma2.Index0D scalarIndexImmutable;
    protected int[] shape;
    protected int[] stride;
    protected int rank;
    protected long size;
    protected int offset;
    private boolean fastIterator;
    protected int[] current;

    public static ucar.ma2.Index factory(int[])
    {
        ucar.ma2.Index0D $r8;
        ucar.ma2.Index1D $r7;
        ucar.ma2.Index2D $r6;
        ucar.ma2.Index3D $r5;
        ucar.ma2.Index4D $r4;
        ucar.ma2.Index5D $r3;
        ucar.ma2.Index6D $r2;
        ucar.ma2.Index7D $r1;
        int[] r0;
        ucar.ma2.Index $r9;
        int i0;

        r0 := @parameter0: int[];

        i0 = lengthof r0;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label7;
            case 7: goto label8;
            default: goto label9;
        };

     label1:
        $r8 = new ucar.ma2.Index0D;

        specialinvoke $r8.<ucar.ma2.Index0D: void <init>()>();

        return $r8;

     label2:
        $r7 = new ucar.ma2.Index1D;

        specialinvoke $r7.<ucar.ma2.Index1D: void <init>(int[])>(r0);

        return $r7;

     label3:
        $r6 = new ucar.ma2.Index2D;

        specialinvoke $r6.<ucar.ma2.Index2D: void <init>(int[])>(r0);

        return $r6;

     label4:
        $r5 = new ucar.ma2.Index3D;

        specialinvoke $r5.<ucar.ma2.Index3D: void <init>(int[])>(r0);

        return $r5;

     label5:
        $r4 = new ucar.ma2.Index4D;

        specialinvoke $r4.<ucar.ma2.Index4D: void <init>(int[])>(r0);

        return $r4;

     label6:
        $r3 = new ucar.ma2.Index5D;

        specialinvoke $r3.<ucar.ma2.Index5D: void <init>(int[])>(r0);

        return $r3;

     label7:
        $r2 = new ucar.ma2.Index6D;

        specialinvoke $r2.<ucar.ma2.Index6D: void <init>(int[])>(r0);

        return $r2;

     label8:
        $r1 = new ucar.ma2.Index7D;

        specialinvoke $r1.<ucar.ma2.Index7D: void <init>(int[])>(r0);

        return $r1;

     label9:
        $r9 = new ucar.ma2.Index;

        specialinvoke $r9.<ucar.ma2.Index: void <init>(int[])>(r0);

        return $r9;
    }

    private static ucar.ma2.Index factory(int)
    {
        ucar.ma2.Index0D $r7;
        ucar.ma2.Index1D $r6;
        ucar.ma2.Index2D $r5;
        ucar.ma2.Index3D $r4;
        ucar.ma2.Index4D $r3;
        ucar.ma2.Index5D $r2;
        ucar.ma2.Index6D $r1;
        ucar.ma2.Index7D $r0;
        ucar.ma2.Index $r8;
        int i0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label4;
            case 4: goto label5;
            case 5: goto label6;
            case 6: goto label7;
            case 7: goto label8;
            default: goto label9;
        };

     label1:
        $r7 = new ucar.ma2.Index0D;

        specialinvoke $r7.<ucar.ma2.Index0D: void <init>()>();

        return $r7;

     label2:
        $r6 = new ucar.ma2.Index1D;

        specialinvoke $r6.<ucar.ma2.Index1D: void <init>()>();

        return $r6;

     label3:
        $r5 = new ucar.ma2.Index2D;

        specialinvoke $r5.<ucar.ma2.Index2D: void <init>()>();

        return $r5;

     label4:
        $r4 = new ucar.ma2.Index3D;

        specialinvoke $r4.<ucar.ma2.Index3D: void <init>()>();

        return $r4;

     label5:
        $r3 = new ucar.ma2.Index4D;

        specialinvoke $r3.<ucar.ma2.Index4D: void <init>()>();

        return $r3;

     label6:
        $r2 = new ucar.ma2.Index5D;

        specialinvoke $r2.<ucar.ma2.Index5D: void <init>()>();

        return $r2;

     label7:
        $r1 = new ucar.ma2.Index6D;

        specialinvoke $r1.<ucar.ma2.Index6D: void <init>()>();

        return $r1;

     label8:
        $r0 = new ucar.ma2.Index7D;

        specialinvoke $r0.<ucar.ma2.Index7D: void <init>()>();

        return $r0;

     label9:
        $r8 = new ucar.ma2.Index;

        specialinvoke $r8.<ucar.ma2.Index: void <init>(int)>(i0);

        return $r8;
    }

    public static long computeSize(int[])
    {
        int[] r0;
        int $i0, $i1, i4, $i6;
        long $l2, l3;

        r0 := @parameter0: int[];

        l3 = 1L;

        $i0 = lengthof r0;

        i4 = $i0 - 1;

     label1:
        if i4 < 0 goto label2;

        $i1 = r0[i4];

        $l2 = (long) $i1;

        l3 = l3 * $l2;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label1;

     label2:
        return l3;
    }

    private static long computeStrides(int[], int[])
    {
        long $l3, l4;
        int[] r0, r1;
        int $i0, i1, $i2, i5, $i7;
        java.lang.NegativeArraySizeException $r3;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        l4 = 1L;

        $i0 = lengthof r0;

        i5 = $i0 - 1;

     label1:
        if i5 < 0 goto label3;

        i1 = r0[i5];

        if i1 >= 0 goto label2;

        $r3 = new java.lang.NegativeArraySizeException;

        specialinvoke $r3.<java.lang.NegativeArraySizeException: void <init>()>();

        throw $r3;

     label2:
        $i2 = (int) l4;

        r1[i5] = $i2;

        $l3 = (long) i1;

        l4 = l4 * $l3;

        $i7 = (int) -1;

        i5 = i5 + $i7;

        goto label1;

     label3:
        return l4;
    }

    protected void <init>(int)
    {
        ucar.ma2.Index r0;
        int[] $r1, $r2, $r3;
        int i0;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Index: boolean fastIterator> = 1;

        r0.<ucar.ma2.Index: int rank> = i0;

        $r1 = newarray (int)[i0];

        r0.<ucar.ma2.Index: int[] shape> = $r1;

        $r2 = newarray (int)[i0];

        r0.<ucar.ma2.Index: int[] current> = $r2;

        $r3 = newarray (int)[i0];

        r0.<ucar.ma2.Index: int[] stride> = $r3;

        return;
    }

    protected void <init>(int[])
    {
        long $l5;
        ucar.ma2.Index r0;
        int[] r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this: ucar.ma2.Index;

        r1 := @parameter0: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Index: boolean fastIterator> = 1;

        $i0 = lengthof r1;

        $r2 = newarray (int)[$i0];

        r0.<ucar.ma2.Index: int[] shape> = $r2;

        $r3 = r0.<ucar.ma2.Index: int[] shape>;

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, $i1);

        $r4 = r0.<ucar.ma2.Index: int[] shape>;

        $i2 = lengthof $r4;

        r0.<ucar.ma2.Index: int rank> = $i2;

        $i3 = r0.<ucar.ma2.Index: int rank>;

        $r5 = newarray (int)[$i3];

        r0.<ucar.ma2.Index: int[] current> = $r5;

        $i4 = r0.<ucar.ma2.Index: int rank>;

        $r6 = newarray (int)[$i4];

        r0.<ucar.ma2.Index: int[] stride> = $r6;

        $r8 = r0.<ucar.ma2.Index: int[] shape>;

        $r7 = r0.<ucar.ma2.Index: int[] stride>;

        $l5 = staticinvoke <ucar.ma2.Index: long computeStrides(int[],int[])>($r8, $r7);

        r0.<ucar.ma2.Index: long size> = $l5;

        r0.<ucar.ma2.Index: int offset> = 0;

        return;
    }

    public void <init>(int[], int[])
    {
        long $l6;
        int[] r1, $r2, $r3, r4, $r5, $r6, $r7, $r8, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        ucar.ma2.Index r0;

        r0 := @this: ucar.ma2.Index;

        r1 := @parameter0: int[];

        r4 := @parameter1: int[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<ucar.ma2.Index: boolean fastIterator> = 1;

        $i0 = lengthof r1;

        $r2 = newarray (int)[$i0];

        r0.<ucar.ma2.Index: int[] shape> = $r2;

        $r3 = r0.<ucar.ma2.Index: int[] shape>;

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r3, 0, $i1);

        $i2 = lengthof r4;

        $r5 = newarray (int)[$i2];

        r0.<ucar.ma2.Index: int[] stride> = $r5;

        $r6 = r0.<ucar.ma2.Index: int[] stride>;

        $i3 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, $r6, 0, $i3);

        $r7 = r0.<ucar.ma2.Index: int[] shape>;

        $i4 = lengthof $r7;

        r0.<ucar.ma2.Index: int rank> = $i4;

        $i5 = r0.<ucar.ma2.Index: int rank>;

        $r8 = newarray (int)[$i5];

        r0.<ucar.ma2.Index: int[] current> = $r8;

        $r9 = r0.<ucar.ma2.Index: int[] shape>;

        $l6 = staticinvoke <ucar.ma2.Index: long computeSize(int[])>($r9);

        r0.<ucar.ma2.Index: long size> = $l6;

        r0.<ucar.ma2.Index: int offset> = 0;

        return;
    }

    protected void precalc()
    {
        ucar.ma2.Index r0;

        r0 := @this: ucar.ma2.Index;

        return;
    }

    ucar.ma2.Index flip(int)
    {
        int[] $r4, $r5, $r6, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.IllegalArgumentException $r0;
        ucar.ma2.Index r1, r3;
        java.lang.Object $r2;

        r1 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r1.<ucar.ma2.Index: int rank>;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label2:
        $r2 = virtualinvoke r1.<ucar.ma2.Index: java.lang.Object clone()>();

        r3 = (ucar.ma2.Index) $r2;

        $i6 = r3.<ucar.ma2.Index: int offset>;

        $r4 = r1.<ucar.ma2.Index: int[] stride>;

        $i4 = $r4[i0];

        $r5 = r1.<ucar.ma2.Index: int[] shape>;

        $i2 = $r5[i0];

        $i3 = $i2 - 1;

        $i5 = $i4 * $i3;

        $i7 = $i6 + $i5;

        r3.<ucar.ma2.Index: int offset> = $i7;

        $r7 = r3.<ucar.ma2.Index: int[] stride>;

        $r6 = r1.<ucar.ma2.Index: int[] stride>;

        $i8 = $r6[i0];

        $i9 = neg $i8;

        $r7[i0] = $i9;

        r3.<ucar.ma2.Index: boolean fastIterator> = 0;

        virtualinvoke r3.<ucar.ma2.Index: void precalc()>();

        return r3;
    }

    ucar.ma2.Index section(java.util.List) throws ucar.ma2.InvalidRangeException
    {
        byte $b8;
        java.lang.StringBuilder $r20, $r21, $r22, $r23, $r28, $r29, $r30, $r31, $r38, $r40;
        long $l5, $l6, $l7;
        java.lang.String $r24, $r32;
        ucar.ma2.InvalidRangeException $r37, $r39, $r41;
        ucar.ma2.Index r1, $r3;
        int[] $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r25, $r33;
        boolean $z0, $z1, $z2;
        ucar.ma2.Range r6, r35, r36;
        java.util.List r0;
        int $i0, $i1, $i2, $i3, $i4, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, i35, i36, i37, i38, $i40;
        java.util.Iterator $r2;
        java.lang.Object $r5, $r16, $r17;

        r1 := @this: ucar.ma2.Index;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = r1.<ucar.ma2.Index: int rank>;

        if $i0 == $i1 goto label01;

        $r37 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r37.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>("Bad ranges [] length");

        throw $r37;

     label01:
        i35 = 0;

     label02:
        $i2 = r1.<ucar.ma2.Index: int rank>;

        if i35 >= $i2 goto label08;

        $r17 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i35);

        r35 = (ucar.ma2.Range) $r17;

        if r35 != null goto label03;

        goto label07;

     label03:
        $i27 = virtualinvoke r35.<ucar.ma2.Range: int first()>();

        if $i27 < 0 goto label04;

        $i29 = virtualinvoke r35.<ucar.ma2.Range: int first()>();

        $r25 = r1.<ucar.ma2.Index: int[] shape>;

        $i30 = $r25[i35];

        if $i29 < $i30 goto label05;

     label04:
        $r39 = new ucar.ma2.InvalidRangeException;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad range starting value at index ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i35);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        $i28 = virtualinvoke r35.<ucar.ma2.Range: int first()>();

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>($r24);

        throw $r39;

     label05:
        $i31 = virtualinvoke r35.<ucar.ma2.Range: int last()>();

        if $i31 < 0 goto label06;

        $i33 = virtualinvoke r35.<ucar.ma2.Range: int last()>();

        $r33 = r1.<ucar.ma2.Index: int[] shape>;

        $i34 = $r33[i35];

        if $i33 < $i34 goto label07;

     label06:
        $r41 = new ucar.ma2.InvalidRangeException;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad range ending value at index ");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i35);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        $i32 = virtualinvoke r35.<ucar.ma2.Range: int last()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r41.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>($r32);

        throw $r41;

     label07:
        i35 = i35 + 1;

        goto label02;

     label08:
        i36 = r1.<ucar.ma2.Index: int rank>;

        $r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label11;

        $r16 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r36 = (ucar.ma2.Range) $r16;

        if r36 == null goto label10;

        $i26 = virtualinvoke r36.<ucar.ma2.Range: int length()>();

        if $i26 != 1 goto label10;

        $i40 = (int) -1;

        i36 = i36 + $i40;

     label10:
        goto label09;

     label11:
        $r3 = staticinvoke <ucar.ma2.Index: ucar.ma2.Index factory(int)>(i36);

        $i3 = r1.<ucar.ma2.Index: int offset>;

        $r3.<ucar.ma2.Index: int offset> = $i3;

        i37 = 0;

        i38 = 0;

     label12:
        $i4 = r1.<ucar.ma2.Index: int rank>;

        if i38 >= $i4 goto label16;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i38);

        r6 = (ucar.ma2.Range) $r5;

        if r6 != null goto label13;

        $r13 = $r3.<ucar.ma2.Index: int[] shape>;

        $r12 = r1.<ucar.ma2.Index: int[] shape>;

        $i24 = $r12[i38];

        $r13[i37] = $i24;

        $r15 = $r3.<ucar.ma2.Index: int[] stride>;

        $r14 = r1.<ucar.ma2.Index: int[] stride>;

        $i25 = $r14[i38];

        $r15[i37] = $i25;

        i37 = i37 + 1;

        goto label15;

     label13:
        $i9 = virtualinvoke r6.<ucar.ma2.Range: int length()>();

        if $i9 == 1 goto label14;

        $r8 = $r3.<ucar.ma2.Index: int[] shape>;

        $i15 = virtualinvoke r6.<ucar.ma2.Range: int length()>();

        $r8[i37] = $i15;

        $r10 = $r3.<ucar.ma2.Index: int[] stride>;

        $r9 = r1.<ucar.ma2.Index: int[] stride>;

        $i16 = $r9[i38];

        $i17 = virtualinvoke r6.<ucar.ma2.Range: int stride()>();

        $i18 = $i16 * $i17;

        $r10[i37] = $i18;

        $i19 = $r3.<ucar.ma2.Index: int offset>;

        $r11 = r1.<ucar.ma2.Index: int[] stride>;

        $i20 = $r11[i38];

        $i21 = virtualinvoke r6.<ucar.ma2.Range: int first()>();

        $i22 = $i20 * $i21;

        $i23 = $i19 + $i22;

        $r3.<ucar.ma2.Index: int offset> = $i23;

        i37 = i37 + 1;

        goto label15;

     label14:
        $i10 = $r3.<ucar.ma2.Index: int offset>;

        $r7 = r1.<ucar.ma2.Index: int[] stride>;

        $i11 = $r7[i38];

        $i12 = virtualinvoke r6.<ucar.ma2.Range: int first()>();

        $i13 = $i11 * $i12;

        $i14 = $i10 + $i13;

        $r3.<ucar.ma2.Index: int offset> = $i14;

     label15:
        i38 = i38 + 1;

        goto label12;

     label16:
        $r4 = $r3.<ucar.ma2.Index: int[] shape>;

        $l5 = staticinvoke <ucar.ma2.Index: long computeSize(int[])>($r4);

        $r3.<ucar.ma2.Index: long size> = $l5;

        $z1 = r1.<ucar.ma2.Index: boolean fastIterator>;

        if $z1 == 0 goto label17;

        $l7 = $r3.<ucar.ma2.Index: long size>;

        $l6 = r1.<ucar.ma2.Index: long size>;

        $b8 = $l7 cmp $l6;

        if $b8 != 0 goto label17;

        $z2 = 1;

        goto label18;

     label17:
        $z2 = 0;

     label18:
        $r3.<ucar.ma2.Index: boolean fastIterator> = $z2;

        virtualinvoke $r3.<ucar.ma2.Index: void precalc()>();

        return $r3;
    }

    ucar.ma2.Index sectionNoReduce(java.util.List) throws ucar.ma2.InvalidRangeException
    {
        byte $b9;
        java.lang.StringBuilder $r16, $r17, $r18, $r19, $r20, $r24, $r25, $r26, $r27, $r28;
        long $l6, $l7, $l8;
        java.lang.String $r21, $r29;
        ucar.ma2.InvalidRangeException $r15, $r23, $r31;
        ucar.ma2.Index r1, $r2;
        int[] $r3, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r22, $r30;
        boolean $z0, $z1;
        ucar.ma2.Range r5, r32;
        java.util.List r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i29, i30;
        java.lang.Object $r4, $r14;

        r1 := @this: ucar.ma2.Index;

        r0 := @parameter0: java.util.List;

        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        $i1 = r1.<ucar.ma2.Index: int rank>;

        if $i0 == $i1 goto label01;

        $r31 = new ucar.ma2.InvalidRangeException;

        specialinvoke $r31.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>("Bad ranges [] length");

        throw $r31;

     label01:
        i29 = 0;

     label02:
        $i2 = r1.<ucar.ma2.Index: int rank>;

        if i29 >= $i2 goto label08;

        $r14 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i29);

        r32 = (ucar.ma2.Range) $r14;

        if r32 != null goto label03;

        goto label07;

     label03:
        $i21 = virtualinvoke r32.<ucar.ma2.Range: int first()>();

        if $i21 < 0 goto label04;

        $i23 = virtualinvoke r32.<ucar.ma2.Range: int first()>();

        $r22 = r1.<ucar.ma2.Index: int[] shape>;

        $i24 = $r22[i29];

        if $i23 < $i24 goto label05;

     label04:
        $r15 = new ucar.ma2.InvalidRangeException;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad range starting value at index ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i29);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        $i22 = virtualinvoke r32.<ucar.ma2.Range: int first()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>($r21);

        throw $r15;

     label05:
        $i25 = virtualinvoke r32.<ucar.ma2.Range: int last()>();

        if $i25 < 0 goto label06;

        $i27 = virtualinvoke r32.<ucar.ma2.Range: int last()>();

        $r30 = r1.<ucar.ma2.Index: int[] shape>;

        $i28 = $r30[i29];

        if $i27 < $i28 goto label07;

     label06:
        $r23 = new ucar.ma2.InvalidRangeException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad range ending value at index ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i29);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" == ");

        $i26 = virtualinvoke r32.<ucar.ma2.Range: int last()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<ucar.ma2.InvalidRangeException: void <init>(java.lang.String)>($r29);

        throw $r23;

     label07:
        i29 = i29 + 1;

        goto label02;

     label08:
        $i3 = r1.<ucar.ma2.Index: int rank>;

        $r2 = staticinvoke <ucar.ma2.Index: ucar.ma2.Index factory(int)>($i3);

        $i4 = r1.<ucar.ma2.Index: int offset>;

        $r2.<ucar.ma2.Index: int offset> = $i4;

        i30 = 0;

     label09:
        $i5 = r1.<ucar.ma2.Index: int rank>;

        if i30 >= $i5 goto label12;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i30);

        r5 = (ucar.ma2.Range) $r4;

        if r5 != null goto label10;

        $r11 = $r2.<ucar.ma2.Index: int[] shape>;

        $r10 = r1.<ucar.ma2.Index: int[] shape>;

        $i19 = $r10[i30];

        $r11[i30] = $i19;

        $r13 = $r2.<ucar.ma2.Index: int[] stride>;

        $r12 = r1.<ucar.ma2.Index: int[] stride>;

        $i20 = $r12[i30];

        $r13[i30] = $i20;

        goto label11;

     label10:
        $r6 = $r2.<ucar.ma2.Index: int[] shape>;

        $i10 = virtualinvoke r5.<ucar.ma2.Range: int length()>();

        $r6[i30] = $i10;

        $r8 = $r2.<ucar.ma2.Index: int[] stride>;

        $r7 = r1.<ucar.ma2.Index: int[] stride>;

        $i11 = $r7[i30];

        $i12 = virtualinvoke r5.<ucar.ma2.Range: int stride()>();

        $i13 = $i11 * $i12;

        $r8[i30] = $i13;

        $i14 = $r2.<ucar.ma2.Index: int offset>;

        $r9 = r1.<ucar.ma2.Index: int[] stride>;

        $i15 = $r9[i30];

        $i16 = virtualinvoke r5.<ucar.ma2.Range: int first()>();

        $i17 = $i15 * $i16;

        $i18 = $i14 + $i17;

        $r2.<ucar.ma2.Index: int offset> = $i18;

     label11:
        i30 = i30 + 1;

        goto label09;

     label12:
        $r3 = $r2.<ucar.ma2.Index: int[] shape>;

        $l6 = staticinvoke <ucar.ma2.Index: long computeSize(int[])>($r3);

        $r2.<ucar.ma2.Index: long size> = $l6;

        $z0 = r1.<ucar.ma2.Index: boolean fastIterator>;

        if $z0 == 0 goto label13;

        $l8 = $r2.<ucar.ma2.Index: long size>;

        $l7 = r1.<ucar.ma2.Index: long size>;

        $b9 = $l8 cmp $l7;

        if $b9 != 0 goto label13;

        $z1 = 1;

        goto label14;

     label13:
        $z1 = 0;

     label14:
        $r2.<ucar.ma2.Index: boolean fastIterator> = $z1;

        virtualinvoke $r2.<ucar.ma2.Index: void precalc()>();

        return $r2;
    }

    ucar.ma2.Index reduce()
    {
        ucar.ma2.Index r0, $r2, $r3;
        int[] $r1;
        int $i0, $i1, i2;

        r0 := @this: ucar.ma2.Index;

        i2 = 0;

     label1:
        $i0 = r0.<ucar.ma2.Index: int rank>;

        if i2 >= $i0 goto label3;

        $r1 = r0.<ucar.ma2.Index: int[] shape>;

        $i1 = $r1[i2];

        if $i1 != 1 goto label2;

        $r2 = virtualinvoke r0.<ucar.ma2.Index: ucar.ma2.Index reduce(int)>(i2);

        $r3 = virtualinvoke $r2.<ucar.ma2.Index: ucar.ma2.Index reduce()>();

        return $r3;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return r0;
    }

    ucar.ma2.Index reduce(int)
    {
        int[] $r6, $r8, $r9, $r10, $r11, $r12;
        boolean $z0;
        java.lang.StringBuilder $r1, $r2, $r3, $r14, $r15, $r16, $r17;
        long $l7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, i10, i11;
        java.lang.String $r4, $r18;
        java.lang.IllegalArgumentException $r0, $r13;
        ucar.ma2.Index r5, $r7;

        r5 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i1 = r5.<ucar.ma2.Index: int rank>;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal reduce dim ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        $r6 = r5.<ucar.ma2.Index: int[] shape>;

        $i2 = $r6[i0];

        if $i2 == 1 goto label3;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("illegal reduce dim ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : length != 1");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label3:
        $i3 = r5.<ucar.ma2.Index: int rank>;

        $i4 = $i3 - 1;

        $r7 = staticinvoke <ucar.ma2.Index: ucar.ma2.Index factory(int)>($i4);

        $i5 = r5.<ucar.ma2.Index: int offset>;

        $r7.<ucar.ma2.Index: int offset> = $i5;

        i10 = 0;

        i11 = 0;

     label4:
        $i6 = r5.<ucar.ma2.Index: int rank>;

        if i11 >= $i6 goto label6;

        if i11 == i0 goto label5;

        $r10 = $r7.<ucar.ma2.Index: int[] shape>;

        $r9 = r5.<ucar.ma2.Index: int[] shape>;

        $i8 = $r9[i11];

        $r10[i10] = $i8;

        $r12 = $r7.<ucar.ma2.Index: int[] stride>;

        $r11 = r5.<ucar.ma2.Index: int[] stride>;

        $i9 = $r11[i11];

        $r12[i10] = $i9;

        i10 = i10 + 1;

     label5:
        i11 = i11 + 1;

        goto label4;

     label6:
        $r8 = $r7.<ucar.ma2.Index: int[] shape>;

        $l7 = staticinvoke <ucar.ma2.Index: long computeSize(int[])>($r8);

        $r7.<ucar.ma2.Index: long size> = $l7;

        $z0 = r5.<ucar.ma2.Index: boolean fastIterator>;

        $r7.<ucar.ma2.Index: boolean fastIterator> = $z0;

        virtualinvoke $r7.<ucar.ma2.Index: void precalc()>();

        return $r7;
    }

    ucar.ma2.Index transpose(int, int)
    {
        int[] $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        int i0, $i1, i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.IllegalArgumentException $r0, $r2;
        ucar.ma2.Index r1, r4;
        java.lang.Object $r3;

        r1 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        i2 := @parameter1: int;

        if i0 < 0 goto label1;

        $i1 = r1.<ucar.ma2.Index: int rank>;

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;

     label2:
        if i2 < 0 goto label3;

        $i3 = r1.<ucar.ma2.Index: int rank>;

        if i2 < $i3 goto label4;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;

     label4:
        $r3 = virtualinvoke r1.<ucar.ma2.Index: java.lang.Object clone()>();

        r4 = (ucar.ma2.Index) $r3;

        $r6 = r4.<ucar.ma2.Index: int[] stride>;

        $r5 = r1.<ucar.ma2.Index: int[] stride>;

        $i4 = $r5[i2];

        $r6[i0] = $i4;

        $r8 = r4.<ucar.ma2.Index: int[] stride>;

        $r7 = r1.<ucar.ma2.Index: int[] stride>;

        $i5 = $r7[i0];

        $r8[i2] = $i5;

        $r10 = r4.<ucar.ma2.Index: int[] shape>;

        $r9 = r1.<ucar.ma2.Index: int[] shape>;

        $i6 = $r9[i2];

        $r10[i0] = $i6;

        $r12 = r4.<ucar.ma2.Index: int[] shape>;

        $r11 = r1.<ucar.ma2.Index: int[] shape>;

        $i7 = $r11[i0];

        $r12[i2] = $i7;

        r4.<ucar.ma2.Index: boolean fastIterator> = 0;

        virtualinvoke r4.<ucar.ma2.Index: void precalc()>();

        return r4;
    }

    ucar.ma2.Index permute(int[])
    {
        int[] r0, $r2, $r4, $r5, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, $i9, i10, i11, i12;
        boolean $z0, z1, $z2;
        java.lang.IllegalArgumentException $r8, $r9;
        ucar.ma2.Index r1, r10;
        java.lang.Object $r3;

        r1 := @this: ucar.ma2.Index;

        r0 := @parameter0: int[];

        $i1 = lengthof r0;

        $r2 = r1.<ucar.ma2.Index: int[] shape>;

        $i0 = lengthof $r2;

        if $i1 == $i0 goto label01;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r9;

     label01:
        i10 = lengthof r0;

        i11 = 0;

     label02:
        if i11 >= i10 goto label05;

        i8 = r0[i11];

        if i8 < 0 goto label03;

        $i9 = r1.<ucar.ma2.Index: int rank>;

        if i8 < $i9 goto label04;

     label03:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r8;

     label04:
        i11 = i11 + 1;

        goto label02;

     label05:
        z1 = 0;

        $r3 = virtualinvoke r1.<ucar.ma2.Index: java.lang.Object clone()>();

        r10 = (ucar.ma2.Index) $r3;

        i12 = 0;

     label06:
        $i2 = lengthof r0;

        if i12 >= $i2 goto label08;

        $r5 = r10.<ucar.ma2.Index: int[] stride>;

        $r4 = r1.<ucar.ma2.Index: int[] stride>;

        $i3 = r0[i12];

        $i4 = $r4[$i3];

        $r5[i12] = $i4;

        $r7 = r10.<ucar.ma2.Index: int[] shape>;

        $r6 = r1.<ucar.ma2.Index: int[] shape>;

        $i5 = r0[i12];

        $i6 = $r6[$i5];

        $r7[i12] = $i6;

        $i7 = r0[i12];

        if i12 == $i7 goto label07;

        z1 = 1;

     label07:
        i12 = i12 + 1;

        goto label06;

     label08:
        $z0 = r1.<ucar.ma2.Index: boolean fastIterator>;

        if $z0 == 0 goto label09;

        if z1 != 0 goto label09;

        $z2 = 1;

        goto label10;

     label09:
        $z2 = 0;

     label10:
        r10.<ucar.ma2.Index: boolean fastIterator> = $z2;

        virtualinvoke r10.<ucar.ma2.Index: void precalc()>();

        return r10;
    }

    public int getRank()
    {
        int $i0;
        ucar.ma2.Index r0;

        r0 := @this: ucar.ma2.Index;

        $i0 = r0.<ucar.ma2.Index: int rank>;

        return $i0;
    }

    public int[] getShape()
    {
        ucar.ma2.Index r0;
        int[] $r1, r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: ucar.ma2.Index;

        $r1 = r0.<ucar.ma2.Index: int[] shape>;

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

        $r4 = r0.<ucar.ma2.Index: int[] shape>;

        $r3 = r0.<ucar.ma2.Index: int[] shape>;

        $i1 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, 0, $i1);

        return r2;
    }

    public int getShape(int)
    {
        ucar.ma2.Index r0;
        int[] $r1;
        int i0, $i1;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        $r1 = r0.<ucar.ma2.Index: int[] shape>;

        $i1 = $r1[i0];

        return $i1;
    }

    ucar.ma2.IndexIterator getIndexIterator(ucar.ma2.Array)
    {
        ucar.ma2.Index r0;
        ucar.ma2.Index$IteratorImpl $r1;
        long $l0;
        ucar.ma2.Array r2;
        ucar.ma2.IteratorFast $r3;
        boolean $z0;

        r0 := @this: ucar.ma2.Index;

        r2 := @parameter0: ucar.ma2.Array;

        $z0 = r0.<ucar.ma2.Index: boolean fastIterator>;

        if $z0 == 0 goto label1;

        $r3 = new ucar.ma2.IteratorFast;

        $l0 = r0.<ucar.ma2.Index: long size>;

        specialinvoke $r3.<ucar.ma2.IteratorFast: void <init>(long,ucar.ma2.Array)>($l0, r2);

        return $r3;

     label1:
        $r1 = new ucar.ma2.Index$IteratorImpl;

        specialinvoke $r1.<ucar.ma2.Index$IteratorImpl: void <init>(ucar.ma2.Index,ucar.ma2.Array,ucar.ma2.Index$1)>(r0, r2, null);

        return $r1;
    }

    ucar.ma2.IteratorFast getIndexIteratorFast(ucar.ma2.Array)
    {
        ucar.ma2.Index r1;
        long $l0;
        ucar.ma2.Array r2;
        ucar.ma2.IteratorFast $r0;

        r1 := @this: ucar.ma2.Index;

        r2 := @parameter0: ucar.ma2.Array;

        $r0 = new ucar.ma2.IteratorFast;

        $l0 = r1.<ucar.ma2.Index: long size>;

        specialinvoke $r0.<ucar.ma2.IteratorFast: void <init>(long,ucar.ma2.Array)>($l0, r2);

        return $r0;
    }

    boolean isFastIterator()
    {
        ucar.ma2.Index r0;
        boolean $z0;

        r0 := @this: ucar.ma2.Index;

        $z0 = r0.<ucar.ma2.Index: boolean fastIterator>;

        return $z0;
    }

    public long getSize()
    {
        long $l0;
        ucar.ma2.Index r0;

        r0 := @this: ucar.ma2.Index;

        $l0 = r0.<ucar.ma2.Index: long size>;

        return $l0;
    }

    public int currentElement()
    {
        ucar.ma2.Index r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, $i3, i4, i5;

        r0 := @this: ucar.ma2.Index;

        i4 = r0.<ucar.ma2.Index: int offset>;

        i5 = 0;

     label1:
        $i0 = r0.<ucar.ma2.Index: int rank>;

        if i5 >= $i0 goto label2;

        $r1 = r0.<ucar.ma2.Index: int[] current>;

        $i2 = $r1[i5];

        $r2 = r0.<ucar.ma2.Index: int[] stride>;

        $i1 = $r2[i5];

        $i3 = $i2 * $i1;

        i4 = i4 + $i3;

        i5 = i5 + 1;

        goto label1;

     label2:
        return i4;
    }

    public int[] getCurrentCounter()
    {
        ucar.ma2.Index r0;
        int[] $r1, $r3;
        java.lang.Object $r2;

        r0 := @this: ucar.ma2.Index;

        $r1 = r0.<ucar.ma2.Index: int[] current>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.Object clone()>();

        $r3 = (int[]) $r2;

        return $r3;
    }

    public void setCurrentCounter(int)
    {
        int[] $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        ucar.ma2.Index r0;

        r0 := @this: ucar.ma2.Index;

        i7 := @parameter0: int;

        $i0 = r0.<ucar.ma2.Index: int offset>;

        i8 = i7 - $i0;

        i9 = 0;

     label1:
        $i1 = r0.<ucar.ma2.Index: int rank>;

        if i9 >= $i1 goto label2;

        $r3 = r0.<ucar.ma2.Index: int[] current>;

        $r2 = r0.<ucar.ma2.Index: int[] stride>;

        $i2 = $r2[i9];

        $i3 = i8 / $i2;

        $r3[i9] = $i3;

        $r4 = r0.<ucar.ma2.Index: int[] current>;

        $i5 = $r4[i9];

        $r5 = r0.<ucar.ma2.Index: int[] stride>;

        $i4 = $r5[i9];

        $i6 = $i5 * $i4;

        i8 = i8 - $i6;

        i9 = i9 + 1;

        goto label1;

     label2:
        $r1 = r0.<ucar.ma2.Index: int[] current>;

        virtualinvoke r0.<ucar.ma2.Index: ucar.ma2.Index set(int[])>($r1);

        return;
    }

    public int incr()
    {
        ucar.ma2.Index r0;
        int[] $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i8;

        r0 := @this: ucar.ma2.Index;

        $i0 = r0.<ucar.ma2.Index: int rank>;

        i6 = $i0 - 1;

     label1:
        if i6 < 0 goto label3;

        $r1 = r0.<ucar.ma2.Index: int[] current>;

        $i2 = $r1[i6];

        $i3 = $i2 + 1;

        $r1[i6] = $i3;

        $r2 = r0.<ucar.ma2.Index: int[] current>;

        $i5 = $r2[i6];

        $r3 = r0.<ucar.ma2.Index: int[] shape>;

        $i4 = $r3[i6];

        if $i5 >= $i4 goto label2;

        goto label3;

     label2:
        $r4 = r0.<ucar.ma2.Index: int[] current>;

        $r4[i6] = 0;

        $i8 = (int) -1;

        i6 = i6 + $i8;

        goto label1;

     label3:
        $i1 = virtualinvoke r0.<ucar.ma2.Index: int currentElement()>();

        return $i1;
    }

    public ucar.ma2.Index set(int[])
    {
        int[] r0, $r2;
        ucar.ma2.Index r1;
        int $i0, $i1, $i2;
        java.lang.ArrayIndexOutOfBoundsException $r3;

        r1 := @this: ucar.ma2.Index;

        r0 := @parameter0: int[];

        $i1 = lengthof r0;

        $i0 = r1.<ucar.ma2.Index: int rank>;

        if $i1 == $i0 goto label1;

        $r3 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r3.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r3;

     label1:
        $r2 = r1.<ucar.ma2.Index: int[] current>;

        $i2 = r1.<ucar.ma2.Index: int rank>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, $r2, 0, $i2);

        return r1;
    }

    public void setDim(int, int)
    {
        ucar.ma2.Index r1;
        int[] $r2, $r3;
        int i0, i1, $i2;
        java.lang.ArrayIndexOutOfBoundsException $r0;

        r1 := @this: ucar.ma2.Index;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        $r2 = r1.<ucar.ma2.Index: int[] shape>;

        $i2 = $r2[i1];

        if i0 < $i2 goto label2;

     label1:
        $r0 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r0;

     label2:
        $r3 = r1.<ucar.ma2.Index: int[] current>;

        $r3[i1] = i0;

        return;
    }

    public ucar.ma2.Index set0(int)
    {
        int i0;
        ucar.ma2.Index r0;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(0, i0);

        return r0;
    }

    public ucar.ma2.Index set1(int)
    {
        int i0;
        ucar.ma2.Index r0;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(1, i0);

        return r0;
    }

    public ucar.ma2.Index set2(int)
    {
        int i0;
        ucar.ma2.Index r0;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(2, i0);

        return r0;
    }

    public ucar.ma2.Index set3(int)
    {
        int i0;
        ucar.ma2.Index r0;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(3, i0);

        return r0;
    }

    public ucar.ma2.Index set4(int)
    {
        int i0;
        ucar.ma2.Index r0;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(4, i0);

        return r0;
    }

    public ucar.ma2.Index set5(int)
    {
        int i0;
        ucar.ma2.Index r0;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(5, i0);

        return r0;
    }

    public ucar.ma2.Index set6(int)
    {
        int i0;
        ucar.ma2.Index r0;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(6, i0);

        return r0;
    }

    public ucar.ma2.Index set(int)
    {
        int i0;
        ucar.ma2.Index r0;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(0, i0);

        return r0;
    }

    public ucar.ma2.Index set(int, int)
    {
        int i0, i1;
        ucar.ma2.Index r0;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(0, i0);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(1, i1);

        return r0;
    }

    public ucar.ma2.Index set(int, int, int)
    {
        ucar.ma2.Index r0;
        int i0, i1, i2;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(0, i0);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(1, i1);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(2, i2);

        return r0;
    }

    public ucar.ma2.Index set(int, int, int, int)
    {
        ucar.ma2.Index r0;
        int i0, i1, i2, i3;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(0, i0);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(1, i1);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(2, i2);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(3, i3);

        return r0;
    }

    public ucar.ma2.Index set(int, int, int, int, int)
    {
        ucar.ma2.Index r0;
        int i0, i1, i2, i3, i4;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(0, i0);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(1, i1);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(2, i2);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(3, i3);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(4, i4);

        return r0;
    }

    public ucar.ma2.Index set(int, int, int, int, int, int)
    {
        ucar.ma2.Index r0;
        int i0, i1, i2, i3, i4, i5;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(0, i0);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(1, i1);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(2, i2);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(3, i3);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(4, i4);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(5, i5);

        return r0;
    }

    public ucar.ma2.Index set(int, int, int, int, int, int, int)
    {
        ucar.ma2.Index r0;
        int i0, i1, i2, i3, i4, i5, i6;

        r0 := @this: ucar.ma2.Index;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        i6 := @parameter6: int;

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(0, i0);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(1, i1);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(2, i2);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(3, i3);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(4, i4);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(5, i5);

        virtualinvoke r0.<ucar.ma2.Index: void setDim(int,int)>(6, i6);

        return r0;
    }

    public java.lang.String toStringDebug()
    {
        long $l4;
        int[] $r6, $r7, $r8;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, i9, i10, i11;
        java.lang.String $r5;
        ucar.ma2.Index r1;
        java.lang.StringBuilder $r0, $r2, $r3, $r4;

        r1 := @this: ucar.ma2.Index;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(100);

        virtualinvoke $r0.<java.lang.StringBuilder: void setLength(int)>(0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" shape= ");

        i9 = 0;

     label1:
        $i0 = r1.<ucar.ma2.Index: int rank>;

        if i9 >= $i0 goto label2;

        $r8 = r1.<ucar.ma2.Index: int[] shape>;

        $i8 = $r8[i9];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i9 = i9 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stride= ");

        i10 = 0;

     label3:
        $i1 = r1.<ucar.ma2.Index: int rank>;

        if i10 >= $i1 goto label4;

        $r7 = r1.<ucar.ma2.Index: int[] stride>;

        $i7 = $r7[i10];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i10 = i10 + 1;

        goto label3;

     label4:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" offset= ");

        $i2 = r1.<ucar.ma2.Index: int offset>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rank= ");

        $i3 = r1.<ucar.ma2.Index: int rank>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" size= ");

        $l4 = r1.<ucar.ma2.Index: long size>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" current= ");

        i11 = 0;

     label5:
        $i5 = r1.<ucar.ma2.Index: int rank>;

        if i11 >= $i5 goto label6;

        $r6 = r1.<ucar.ma2.Index: int[] current>;

        $i6 = $r6[i11];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        i11 = i11 + 1;

        goto label5;

     label6:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String toString()
    {
        ucar.ma2.Index r1;
        int[] $r3;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r0;
        java.lang.String $r2;

        r1 := @this: ucar.ma2.Index;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(100);

        virtualinvoke $r0.<java.lang.StringBuilder: void setLength(int)>(0);

        i2 = 0;

     label1:
        $i0 = r1.<ucar.ma2.Index: int rank>;

        if i2 >= $i0 goto label3;

        if i2 <= 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label2:
        $r3 = r1.<ucar.ma2.Index: int[] current>;

        $i1 = $r3[i2];

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label3:
        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    public java.lang.Object clone()
    {
        java.lang.CloneNotSupportedException $r10;
        ucar.ma2.Index r0, r2;
        int[] $r3, $r5, $r6, $r8, $r9;
        int $i0;
        java.lang.Object $r1, $r4, $r7;

        r0 := @this: ucar.ma2.Index;

     label1:
        $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r2 = (ucar.ma2.Index) $r1;

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        return null;

     label4:
        $r3 = r0.<ucar.ma2.Index: int[] stride>;

        $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>();

        $r5 = (int[]) $r4;

        r2.<ucar.ma2.Index: int[] stride> = $r5;

        $r6 = r0.<ucar.ma2.Index: int[] shape>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (int[]) $r7;

        r2.<ucar.ma2.Index: int[] shape> = $r8;

        $i0 = r0.<ucar.ma2.Index: int rank>;

        $r9 = newarray (int)[$i0];

        r2.<ucar.ma2.Index: int[] current> = $r9;

        return r2;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        ucar.ma2.Index0D $r0;

        $r0 = new ucar.ma2.Index0D;

        specialinvoke $r0.<ucar.ma2.Index0D: void <init>()>();

        <ucar.ma2.Index: ucar.ma2.Index0D scalarIndexImmutable> = $r0;

        return;
    }
}
