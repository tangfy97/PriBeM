public abstract class kodkod.ast.visitor.AbstractReplacer extends java.lang.Object implements kodkod.ast.visitor.ReturnVisitor
{
    protected final java.util.Map cache;
    protected final java.util.Set cached;
    private static int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name;

    protected void <init>(java.util.Set)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        java.util.IdentityHashMap $r2;
        int $i0;
        java.util.Set r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: java.util.Set;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.ast.visitor.AbstractReplacer: java.util.Set cached> = r1;

        $r2 = new java.util.IdentityHashMap;

        $i0 = interfaceinvoke r1.<java.util.Set: int size()>();

        specialinvoke $r2.<java.util.IdentityHashMap: void <init>(int)>($i0);

        r0.<kodkod.ast.visitor.AbstractReplacer: java.util.Map cache> = $r2;

        return;
    }

    protected void <init>(java.util.Set, java.util.Map)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        java.util.Set r1;
        java.util.Map r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<kodkod.ast.visitor.AbstractReplacer: java.util.Set cached> = r1;

        r0.<kodkod.ast.visitor.AbstractReplacer: java.util.Map cache> = r2;

        return;
    }

    protected kodkod.ast.Node lookup(kodkod.ast.Node)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        java.util.Map $r2;
        java.lang.Object $r3;
        kodkod.ast.Node r1, $r4;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.Node;

        $r2 = r0.<kodkod.ast.visitor.AbstractReplacer: java.util.Map cache>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (kodkod.ast.Node) $r3;

        return $r4;
    }

    protected kodkod.ast.Node cache(kodkod.ast.Node, kodkod.ast.Node)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        java.util.Map $r4;
        java.util.Set $r2;
        kodkod.ast.Node r1, r3;
        boolean $z0;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.Node;

        r3 := @parameter1: kodkod.ast.Node;

        $r2 = r0.<kodkod.ast.visitor.AbstractReplacer: java.util.Set cached>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<kodkod.ast.visitor.AbstractReplacer: java.util.Map cache>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

     label1:
        return r3;
    }

    public kodkod.ast.Decls visit(kodkod.ast.Decls)
    {
        java.util.Iterator $r3;
        kodkod.ast.Decl r5, $r6;
        kodkod.ast.Decls r1, $r8, r9, r10, $r11, $r12;
        kodkod.ast.Node $r2, $r7;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r4;
        boolean z0, $z1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.Decls;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r9 = (kodkod.ast.Decls) $r2;

        if r9 == null goto label1;

        return r9;

     label1:
        r10 = null;

        z0 = 1;

        $r3 = virtualinvoke r1.<kodkod.ast.Decls: java.util.Iterator iterator()>();

        goto label6;

     label2:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kodkod.ast.Decl) $r4;

        $r6 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Decl visit(kodkod.ast.Decl)>(r5);

        if $r6 == r5 goto label3;

        z0 = 0;

     label3:
        if r10 != null goto label4;

        $r11 = $r6;

        goto label5;

     label4:
        $r11 = virtualinvoke r10.<kodkod.ast.Decls: kodkod.ast.Decls and(kodkod.ast.Decls)>($r6);

     label5:
        r10 = $r11;

     label6:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        if z0 == 0 goto label7;

        $r12 = r1;

        goto label8;

     label7:
        $r12 = r10;

     label8:
        $r7 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r12);

        $r8 = (kodkod.ast.Decls) $r7;

        return $r8;
    }

    public kodkod.ast.Decl visit(kodkod.ast.Decl)
    {
        kodkod.ast.operator.Multiplicity $r10;
        kodkod.ast.Decl r1, r12, $r13, $r15;
        kodkod.ast.Expression $r6, r8, $r11;
        kodkod.ast.Node $r2, $r14;
        kodkod.ast.Variable $r3, r5, $r9;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r4, $r7;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.Decl;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r12 = (kodkod.ast.Decl) $r2;

        if r12 == null goto label1;

        return r12;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Variable: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Variable) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.ast.Expression) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Variable variable()>();

        if r5 != $r9 goto label2;

        $r11 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.Expression expression()>();

        if r8 != $r11 goto label2;

        $r13 = r1;

        goto label3;

     label2:
        $r10 = virtualinvoke r1.<kodkod.ast.Decl: kodkod.ast.operator.Multiplicity multiplicity()>();

        $r13 = virtualinvoke r5.<kodkod.ast.Variable: kodkod.ast.Decl declare(kodkod.ast.operator.Multiplicity,kodkod.ast.Expression)>($r10, r8);

     label3:
        $r14 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r13);

        $r15 = (kodkod.ast.Decl) $r14;

        return $r15;
    }

    public kodkod.ast.Expression visit(kodkod.ast.Relation)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Expression r3, $r5;
        kodkod.ast.Relation r1;
        kodkod.ast.Node $r2, $r4;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.Relation;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.ast.Expression) $r2;

        if r3 != null goto label1;

        $r4 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, r1);

        $r5 = (kodkod.ast.Expression) $r4;

        goto label2;

     label1:
        $r5 = r3;

     label2:
        return $r5;
    }

    public kodkod.ast.Expression visit(kodkod.ast.Variable)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Expression r3;
        kodkod.ast.Node $r2, $r4;
        kodkod.ast.Variable r1, $r5;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.Variable;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.ast.Expression) $r2;

        if r3 != null goto label1;

        $r4 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, r1);

        $r5 = (kodkod.ast.Variable) $r4;

        goto label2;

     label1:
        $r5 = r1;

     label2:
        return $r5;
    }

    public kodkod.ast.Expression visit(kodkod.ast.ConstantExpression)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.ConstantExpression r1, $r5;
        kodkod.ast.Expression r3;
        kodkod.ast.Node $r2, $r4;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.ConstantExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.ast.Expression) $r2;

        if r3 != null goto label1;

        $r4 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, r1);

        $r5 = (kodkod.ast.ConstantExpression) $r4;

        goto label2;

     label1:
        $r5 = r1;

     label2:
        return $r5;
    }

    public kodkod.ast.Expression visit(kodkod.ast.NaryExpression)
    {
        int $i0, i1, $i2;
        boolean z0, $z1;
        kodkod.ast.Expression $r4, $r6, $r7, $r10, r11, $r12;
        kodkod.ast.Node $r2, $r9;
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.operator.ExprOperator $r8;
        kodkod.ast.NaryExpression r1;
        kodkod.ast.Expression[] r3;
        java.lang.Object $r5;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.NaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r11 = (kodkod.ast.Expression) $r2;

        if r11 == null goto label1;

        return r11;

     label1:
        $i0 = virtualinvoke r1.<kodkod.ast.NaryExpression: int size()>();

        r3 = newarray (kodkod.ast.Expression)[$i0];

        z0 = 1;

        i1 = 0;

        goto label5;

     label2:
        $r4 = virtualinvoke r1.<kodkod.ast.NaryExpression: kodkod.ast.Expression child(int)>(i1);

        $r5 = virtualinvoke $r4.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (kodkod.ast.Expression) $r5;

        r3[i1] = $r6;

        if z0 == 0 goto label3;

        $r7 = r3[i1];

        if $r7 != $r4 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

        i1 = i1 + 1;

     label5:
        $i2 = lengthof r3;

        if i1 < $i2 goto label2;

        if z0 == 0 goto label6;

        $r12 = r1;

        goto label7;

     label6:
        $r8 = virtualinvoke r1.<kodkod.ast.NaryExpression: kodkod.ast.operator.ExprOperator op()>();

        $r12 = staticinvoke <kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression[])>($r8, r3);

     label7:
        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r12);

        $r10 = (kodkod.ast.Expression) $r9;

        return $r10;
    }

    public kodkod.ast.Expression visit(kodkod.ast.BinaryExpression)
    {
        kodkod.ast.BinaryExpression r1;
        kodkod.ast.Expression $r3, r5, $r6, r8, $r9, $r11, r12, $r13, $r15;
        kodkod.ast.Node $r2, $r14;
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.operator.ExprOperator $r10;
        java.lang.Object $r4, $r7;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.BinaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r12 = (kodkod.ast.Expression) $r2;

        if r12 == null goto label1;

        return r12;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Expression) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.ast.Expression) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression left()>();

        if r5 != $r9 goto label2;

        $r11 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.Expression right()>();

        if r8 != $r11 goto label2;

        $r13 = r1;

        goto label3;

     label2:
        $r10 = virtualinvoke r1.<kodkod.ast.BinaryExpression: kodkod.ast.operator.ExprOperator op()>();

        $r13 = virtualinvoke r5.<kodkod.ast.Expression: kodkod.ast.Expression compose(kodkod.ast.operator.ExprOperator,kodkod.ast.Expression)>($r10, r8);

     label3:
        $r14 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r13);

        $r15 = (kodkod.ast.Expression) $r14;

        return $r15;
    }

    public kodkod.ast.Expression visit(kodkod.ast.UnaryExpression)
    {
        kodkod.ast.Expression $r3, r5, $r6, $r9, r10, $r11;
        kodkod.ast.Node $r2, $r8;
        kodkod.ast.UnaryExpression r1;
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.operator.ExprOperator $r7;
        java.lang.Object $r4;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.UnaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r10 = (kodkod.ast.Expression) $r2;

        if r10 == null goto label1;

        return r10;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.UnaryExpression: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Expression) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.UnaryExpression: kodkod.ast.Expression expression()>();

        if r5 != $r6 goto label2;

        $r11 = r1;

        goto label3;

     label2:
        $r7 = virtualinvoke r1.<kodkod.ast.UnaryExpression: kodkod.ast.operator.ExprOperator op()>();

        $r11 = virtualinvoke r5.<kodkod.ast.Expression: kodkod.ast.Expression apply(kodkod.ast.operator.ExprOperator)>($r7);

     label3:
        $r8 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r11);

        $r9 = (kodkod.ast.Expression) $r8;

        return $r9;
    }

    public kodkod.ast.Expression visit(kodkod.ast.Comprehension)
    {
        kodkod.ast.Formula $r6, r8, $r10;
        kodkod.ast.Expression r11, $r12, $r14;
        kodkod.ast.Decls $r3, r5, $r9;
        kodkod.ast.Node $r2, $r13;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r4, $r7;
        kodkod.ast.Comprehension r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r11 = (kodkod.ast.Expression) $r2;

        if r11 == null goto label1;

        return r11;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Decls decls()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Decls: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Decls) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Formula formula()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.ast.Formula) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Decls decls()>();

        if r5 != $r9 goto label2;

        $r10 = virtualinvoke r1.<kodkod.ast.Comprehension: kodkod.ast.Formula formula()>();

        if r8 != $r10 goto label2;

        $r12 = r1;

        goto label3;

     label2:
        $r12 = virtualinvoke r8.<kodkod.ast.Formula: kodkod.ast.Expression comprehension(kodkod.ast.Decls)>(r5);

     label3:
        $r13 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r12);

        $r14 = (kodkod.ast.Expression) $r13;

        return $r14;
    }

    public kodkod.ast.Expression visit(kodkod.ast.IfExpression)
    {
        kodkod.ast.Formula $r3, r5, $r12;
        kodkod.ast.Expression $r6, r8, $r9, r11, $r13, $r14, r15, $r16, $r18;
        kodkod.ast.Node $r2, $r17;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r4, $r7, $r10;
        kodkod.ast.IfExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.IfExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r15 = (kodkod.ast.Expression) $r2;

        if r15 == null goto label1;

        return r15;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Formula condition()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Formula) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression thenExpr()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.ast.Expression) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression elseExpr()>();

        $r10 = virtualinvoke $r9.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r11 = (kodkod.ast.Expression) $r10;

        $r12 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Formula condition()>();

        if r5 != $r12 goto label2;

        $r13 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression thenExpr()>();

        if r8 != $r13 goto label2;

        $r14 = virtualinvoke r1.<kodkod.ast.IfExpression: kodkod.ast.Expression elseExpr()>();

        if r11 != $r14 goto label2;

        $r16 = r1;

        goto label3;

     label2:
        $r16 = virtualinvoke r5.<kodkod.ast.Formula: kodkod.ast.Expression thenElse(kodkod.ast.Expression,kodkod.ast.Expression)>(r8, r11);

     label3:
        $r17 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r16);

        $r18 = (kodkod.ast.Expression) $r17;

        return $r18;
    }

    public kodkod.ast.Expression visit(kodkod.ast.ProjectExpression)
    {
        kodkod.ast.ProjectExpression r1;
        kodkod.ast.IntExpression[] r6;
        int $i0, $i1, i2;
        boolean $z0, z1, $z2;
        kodkod.ast.IntExpression $r8, $r10, $r11, $r12;
        kodkod.ast.Expression $r3, r5, $r7, $r14, r15, $r16;
        kodkod.ast.Node $r2, $r13;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r4, $r9;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.ProjectExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r15 = (kodkod.ast.Expression) $r2;

        if r15 == null goto label1;

        return r15;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.ProjectExpression: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Expression) $r4;

        $i0 = virtualinvoke r1.<kodkod.ast.ProjectExpression: int arity()>();

        r6 = newarray (kodkod.ast.IntExpression)[$i0];

        $r7 = virtualinvoke r1.<kodkod.ast.ProjectExpression: kodkod.ast.Expression expression()>();

        if r5 != $r7 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        z1 = $z0;

        i2 = 0;

        $i1 = virtualinvoke r1.<kodkod.ast.ProjectExpression: int arity()>();

        goto label7;

     label4:
        $r8 = virtualinvoke r1.<kodkod.ast.ProjectExpression: kodkod.ast.IntExpression column(int)>(i2);

        $r9 = virtualinvoke $r8.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r10 = (kodkod.ast.IntExpression) $r9;

        r6[i2] = $r10;

        if z1 == 0 goto label5;

        $r11 = r6[i2];

        $r12 = virtualinvoke r1.<kodkod.ast.ProjectExpression: kodkod.ast.IntExpression column(int)>(i2);

        if $r11 != $r12 goto label5;

        $z2 = 1;

        goto label6;

     label5:
        $z2 = 0;

     label6:
        z1 = $z2;

        i2 = i2 + 1;

     label7:
        if i2 < $i1 goto label4;

        if z1 == 0 goto label8;

        $r16 = r1;

        goto label9;

     label8:
        $r16 = virtualinvoke r5.<kodkod.ast.Expression: kodkod.ast.Expression project(kodkod.ast.IntExpression[])>(r6);

     label9:
        $r13 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r16);

        $r14 = (kodkod.ast.Expression) $r13;

        return $r14;
    }

    public kodkod.ast.Expression visit(kodkod.ast.IntToExprCast)
    {
        kodkod.ast.IntExpression $r3, r5, $r6;
        kodkod.ast.Expression $r9, r10, $r11;
        kodkod.ast.IntToExprCast r1;
        kodkod.ast.Node $r2, $r8;
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.operator.IntCastOperator $r7;
        java.lang.Object $r4;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.IntToExprCast;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r10 = (kodkod.ast.Expression) $r2;

        if r10 == null goto label1;

        return r10;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.IntToExprCast: kodkod.ast.IntExpression intExpr()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.IntExpression) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.IntToExprCast: kodkod.ast.IntExpression intExpr()>();

        if r5 != $r6 goto label2;

        $r11 = r1;

        goto label3;

     label2:
        $r7 = virtualinvoke r1.<kodkod.ast.IntToExprCast: kodkod.ast.operator.IntCastOperator op()>();

        $r11 = virtualinvoke r5.<kodkod.ast.IntExpression: kodkod.ast.Expression cast(kodkod.ast.operator.IntCastOperator)>($r7);

     label3:
        $r8 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r11);

        $r9 = (kodkod.ast.Expression) $r8;

        return $r9;
    }

    public kodkod.ast.IntExpression visit(kodkod.ast.IntConstant)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.IntExpression r3;
        kodkod.ast.IntConstant r1, $r5;
        kodkod.ast.Node $r2, $r4;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.IntConstant;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.ast.IntExpression) $r2;

        if r3 != null goto label1;

        $r4 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, r1);

        $r5 = (kodkod.ast.IntConstant) $r4;

        goto label2;

     label1:
        $r5 = r1;

     label2:
        return $r5;
    }

    public kodkod.ast.IntExpression visit(kodkod.ast.IfIntExpression)
    {
        kodkod.ast.IfIntExpression r1;
        kodkod.ast.IntExpression $r6, r8, $r9, r11, $r13, $r14, r15, $r16, $r18;
        kodkod.ast.Formula $r3, r5, $r12;
        kodkod.ast.Node $r2, $r17;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r4, $r7, $r10;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.IfIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r15 = (kodkod.ast.IntExpression) $r2;

        if r15 == null goto label1;

        return r15;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.Formula condition()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Formula) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression thenExpr()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.ast.IntExpression) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression elseExpr()>();

        $r10 = virtualinvoke $r9.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r11 = (kodkod.ast.IntExpression) $r10;

        $r12 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.Formula condition()>();

        if r5 != $r12 goto label2;

        $r13 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression thenExpr()>();

        if r8 != $r13 goto label2;

        $r14 = virtualinvoke r1.<kodkod.ast.IfIntExpression: kodkod.ast.IntExpression elseExpr()>();

        if r11 != $r14 goto label2;

        $r16 = r1;

        goto label3;

     label2:
        $r16 = virtualinvoke r5.<kodkod.ast.Formula: kodkod.ast.IntExpression thenElse(kodkod.ast.IntExpression,kodkod.ast.IntExpression)>(r8, r11);

     label3:
        $r17 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r16);

        $r18 = (kodkod.ast.IntExpression) $r17;

        return $r18;
    }

    public kodkod.ast.IntExpression visit(kodkod.ast.ExprToIntCast)
    {
        kodkod.ast.IntExpression $r9, r10, $r11;
        kodkod.ast.operator.ExprCastOperator $r7;
        kodkod.ast.Expression $r3, r5, $r6;
        kodkod.ast.Node $r2, $r8;
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.ExprToIntCast r1;
        java.lang.Object $r4;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.ExprToIntCast;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r10 = (kodkod.ast.IntExpression) $r2;

        if r10 == null goto label1;

        return r10;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.ExprToIntCast: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Expression) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.ExprToIntCast: kodkod.ast.Expression expression()>();

        if r5 != $r6 goto label2;

        $r11 = r1;

        goto label3;

     label2:
        $r7 = virtualinvoke r1.<kodkod.ast.ExprToIntCast: kodkod.ast.operator.ExprCastOperator op()>();

        $r11 = virtualinvoke r5.<kodkod.ast.Expression: kodkod.ast.IntExpression apply(kodkod.ast.operator.ExprCastOperator)>($r7);

     label3:
        $r8 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r11);

        $r9 = (kodkod.ast.IntExpression) $r8;

        return $r9;
    }

    public kodkod.ast.IntExpression visit(kodkod.ast.NaryIntExpression)
    {
        kodkod.ast.IntExpression[] r3;
        int $i0, i1, $i2;
        boolean z0, $z1;
        kodkod.ast.NaryIntExpression r1;
        kodkod.ast.IntExpression $r4, $r6, $r7, $r10, r11, $r12;
        kodkod.ast.operator.IntOperator $r8;
        kodkod.ast.Node $r2, $r9;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r5;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.NaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r11 = (kodkod.ast.IntExpression) $r2;

        if r11 == null goto label1;

        return r11;

     label1:
        $i0 = virtualinvoke r1.<kodkod.ast.NaryIntExpression: int size()>();

        r3 = newarray (kodkod.ast.IntExpression)[$i0];

        z0 = 1;

        i1 = 0;

        goto label5;

     label2:
        $r4 = virtualinvoke r1.<kodkod.ast.NaryIntExpression: kodkod.ast.IntExpression child(int)>(i1);

        $r5 = virtualinvoke $r4.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (kodkod.ast.IntExpression) $r5;

        r3[i1] = $r6;

        if z0 == 0 goto label3;

        $r7 = r3[i1];

        if $r7 != $r4 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

        i1 = i1 + 1;

     label5:
        $i2 = lengthof r3;

        if i1 < $i2 goto label2;

        if z0 == 0 goto label6;

        $r12 = r1;

        goto label7;

     label6:
        $r8 = virtualinvoke r1.<kodkod.ast.NaryIntExpression: kodkod.ast.operator.IntOperator op()>();

        $r12 = staticinvoke <kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression[])>($r8, r3);

     label7:
        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r12);

        $r10 = (kodkod.ast.IntExpression) $r9;

        return $r10;
    }

    public kodkod.ast.IntExpression visit(kodkod.ast.BinaryIntExpression)
    {
        kodkod.ast.BinaryIntExpression r1;
        kodkod.ast.IntExpression $r3, r5, $r6, r8, $r9, $r11, r12, $r13, $r15;
        kodkod.ast.operator.IntOperator $r10;
        kodkod.ast.Node $r2, $r14;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r4, $r7;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.BinaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r12 = (kodkod.ast.IntExpression) $r2;

        if r12 == null goto label1;

        return r12;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.IntExpression) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.ast.IntExpression) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression left()>();

        if r5 != $r9 goto label2;

        $r11 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.IntExpression right()>();

        if r8 != $r11 goto label2;

        $r13 = r1;

        goto label3;

     label2:
        $r10 = virtualinvoke r1.<kodkod.ast.BinaryIntExpression: kodkod.ast.operator.IntOperator op()>();

        $r13 = virtualinvoke r5.<kodkod.ast.IntExpression: kodkod.ast.IntExpression compose(kodkod.ast.operator.IntOperator,kodkod.ast.IntExpression)>($r10, r8);

     label3:
        $r14 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r13);

        $r15 = (kodkod.ast.IntExpression) $r14;

        return $r15;
    }

    public kodkod.ast.IntExpression visit(kodkod.ast.UnaryIntExpression)
    {
        kodkod.ast.IntExpression $r3, r5, $r6, $r9, r10, $r11;
        kodkod.ast.operator.IntOperator $r7;
        kodkod.ast.Node $r2, $r8;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r4;
        kodkod.ast.UnaryIntExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.UnaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r10 = (kodkod.ast.IntExpression) $r2;

        if r10 == null goto label1;

        return r10;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.UnaryIntExpression: kodkod.ast.IntExpression intExpr()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.IntExpression) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.UnaryIntExpression: kodkod.ast.IntExpression intExpr()>();

        if r5 != $r6 goto label2;

        $r11 = r1;

        goto label3;

     label2:
        $r7 = virtualinvoke r1.<kodkod.ast.UnaryIntExpression: kodkod.ast.operator.IntOperator op()>();

        $r11 = virtualinvoke r5.<kodkod.ast.IntExpression: kodkod.ast.IntExpression apply(kodkod.ast.operator.IntOperator)>($r7);

     label3:
        $r8 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r11);

        $r9 = (kodkod.ast.IntExpression) $r8;

        return $r9;
    }

    public kodkod.ast.IntExpression visit(kodkod.ast.SumExpression)
    {
        kodkod.ast.IntExpression $r6, r8, $r10, r11, $r12, $r14;
        kodkod.ast.Decls $r3, r5, $r9;
        kodkod.ast.SumExpression r1;
        kodkod.ast.Node $r2, $r13;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r4, $r7;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.SumExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r11 = (kodkod.ast.IntExpression) $r2;

        if r11 == null goto label1;

        return r11;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.Decls decls()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Decls: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Decls) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.ast.IntExpression) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.Decls decls()>();

        if r5 != $r9 goto label2;

        $r10 = virtualinvoke r1.<kodkod.ast.SumExpression: kodkod.ast.IntExpression intExpr()>();

        if r8 != $r10 goto label2;

        $r12 = r1;

        goto label3;

     label2:
        $r12 = virtualinvoke r8.<kodkod.ast.IntExpression: kodkod.ast.IntExpression sum(kodkod.ast.Decls)>(r5);

     label3:
        $r13 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r12);

        $r14 = (kodkod.ast.IntExpression) $r13;

        return $r14;
    }

    public kodkod.ast.Formula visit(kodkod.ast.IntComparisonFormula)
    {
        kodkod.ast.operator.IntCompOperator $r10;
        kodkod.ast.IntExpression $r3, r5, $r6, r8, $r9, $r11;
        kodkod.ast.Formula r12, $r13, $r15;
        kodkod.ast.Node $r2, $r14;
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.IntComparisonFormula r1;
        java.lang.Object $r4, $r7;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r12 = (kodkod.ast.Formula) $r2;

        if r12 == null goto label1;

        return r12;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.IntExpression) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.IntExpression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.ast.IntExpression) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression left()>();

        if r5 != $r9 goto label2;

        $r11 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.IntExpression right()>();

        if r8 != $r11 goto label2;

        $r13 = r1;

        goto label3;

     label2:
        $r10 = virtualinvoke r1.<kodkod.ast.IntComparisonFormula: kodkod.ast.operator.IntCompOperator op()>();

        $r13 = virtualinvoke r5.<kodkod.ast.IntExpression: kodkod.ast.Formula compare(kodkod.ast.operator.IntCompOperator,kodkod.ast.IntExpression)>($r10, r8);

     label3:
        $r14 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r13);

        $r15 = (kodkod.ast.Formula) $r14;

        return $r15;
    }

    public kodkod.ast.Formula visit(kodkod.ast.ConstantFormula)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Formula r3;
        kodkod.ast.ConstantFormula r1, $r5;
        kodkod.ast.Node $r2, $r4;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.ConstantFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r3 = (kodkod.ast.Formula) $r2;

        if r3 != null goto label1;

        $r4 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, r1);

        $r5 = (kodkod.ast.ConstantFormula) $r4;

        goto label2;

     label1:
        $r5 = r1;

     label2:
        return $r5;
    }

    public kodkod.ast.Formula visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.ast.QuantifiedFormula r1;
        kodkod.ast.Formula $r6, r8, $r11, r12, $r13, $r15;
        kodkod.ast.Decls $r3, r5, $r9;
        kodkod.ast.Node $r2, $r14;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r4, $r7;
        kodkod.ast.operator.Quantifier $r10;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r12 = (kodkod.ast.Formula) $r2;

        if r12 == null goto label1;

        return r12;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Decls: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Decls) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.ast.Formula) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Decls decls()>();

        if r5 != $r9 goto label2;

        $r11 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.Formula formula()>();

        if r8 != $r11 goto label2;

        $r13 = r1;

        goto label3;

     label2:
        $r10 = virtualinvoke r1.<kodkod.ast.QuantifiedFormula: kodkod.ast.operator.Quantifier quantifier()>();

        $r13 = virtualinvoke r8.<kodkod.ast.Formula: kodkod.ast.Formula quantify(kodkod.ast.operator.Quantifier,kodkod.ast.Decls)>($r10, r5);

     label3:
        $r14 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r13);

        $r15 = (kodkod.ast.Formula) $r14;

        return $r15;
    }

    public kodkod.ast.Formula visit(kodkod.ast.NaryFormula)
    {
        kodkod.ast.Formula[] r3;
        kodkod.ast.operator.FormulaOperator $r8;
        int $i0, i1, $i2;
        kodkod.ast.NaryFormula r1;
        boolean z0, $z1;
        kodkod.ast.Formula $r4, $r6, $r7, $r10, r11, $r12;
        kodkod.ast.Node $r2, $r9;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r5;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.NaryFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r11 = (kodkod.ast.Formula) $r2;

        if r11 == null goto label1;

        return r11;

     label1:
        $i0 = virtualinvoke r1.<kodkod.ast.NaryFormula: int size()>();

        r3 = newarray (kodkod.ast.Formula)[$i0];

        z0 = 1;

        i1 = 0;

        goto label5;

     label2:
        $r4 = virtualinvoke r1.<kodkod.ast.NaryFormula: kodkod.ast.Formula child(int)>(i1);

        $r5 = virtualinvoke $r4.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        $r6 = (kodkod.ast.Formula) $r5;

        r3[i1] = $r6;

        if z0 == 0 goto label3;

        $r7 = r3[i1];

        if $r7 != $r4 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        z0 = $z1;

        i1 = i1 + 1;

     label5:
        $i2 = lengthof r3;

        if i1 < $i2 goto label2;

        if z0 == 0 goto label6;

        $r12 = r1;

        goto label7;

     label6:
        $r8 = virtualinvoke r1.<kodkod.ast.NaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r12 = staticinvoke <kodkod.ast.Formula: kodkod.ast.Formula compose(kodkod.ast.operator.FormulaOperator,kodkod.ast.Formula[])>($r8, r3);

     label7:
        $r9 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r12);

        $r10 = (kodkod.ast.Formula) $r9;

        return $r10;
    }

    public kodkod.ast.Formula visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.BinaryFormula r1;
        kodkod.ast.operator.FormulaOperator $r10;
        kodkod.ast.Formula $r3, r5, $r6, r8, $r9, $r11, r12, $r13, $r15;
        kodkod.ast.Node $r2, $r14;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r4, $r7;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r12 = (kodkod.ast.Formula) $r2;

        if r12 == null goto label1;

        return r12;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Formula) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.ast.Formula) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula left()>();

        if r5 != $r9 goto label2;

        $r11 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.Formula right()>();

        if r8 != $r11 goto label2;

        $r13 = r1;

        goto label3;

     label2:
        $r10 = virtualinvoke r1.<kodkod.ast.BinaryFormula: kodkod.ast.operator.FormulaOperator op()>();

        $r13 = virtualinvoke r5.<kodkod.ast.Formula: kodkod.ast.Formula compose(kodkod.ast.operator.FormulaOperator,kodkod.ast.Formula)>($r10, r8);

     label3:
        $r14 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r13);

        $r15 = (kodkod.ast.Formula) $r14;

        return $r15;
    }

    public kodkod.ast.Formula visit(kodkod.ast.NotFormula)
    {
        kodkod.ast.Formula $r3, r5, $r6, $r8, r9, $r10;
        kodkod.ast.Node $r2, $r7;
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.NotFormula r1;
        java.lang.Object $r4;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.NotFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r9 = (kodkod.ast.Formula) $r2;

        if r9 == null goto label1;

        return r9;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Formula: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Formula) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.NotFormula: kodkod.ast.Formula formula()>();

        if r5 != $r6 goto label2;

        $r10 = r1;

        goto label3;

     label2:
        $r10 = virtualinvoke r5.<kodkod.ast.Formula: kodkod.ast.Formula not()>();

     label3:
        $r7 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r10);

        $r8 = (kodkod.ast.Formula) $r7;

        return $r8;
    }

    public kodkod.ast.Formula visit(kodkod.ast.ComparisonFormula)
    {
        kodkod.ast.ComparisonFormula r1;
        kodkod.ast.operator.ExprCompOperator $r10;
        kodkod.ast.Formula r12, $r13, $r15;
        kodkod.ast.Expression $r3, r5, $r6, r8, $r9, $r11;
        kodkod.ast.Node $r2, $r14;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r4, $r7;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r12 = (kodkod.ast.Formula) $r2;

        if r12 == null goto label1;

        return r12;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression left()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Expression) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression right()>();

        $r7 = virtualinvoke $r6.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r8 = (kodkod.ast.Expression) $r7;

        $r9 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression left()>();

        if r5 != $r9 goto label2;

        $r11 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.Expression right()>();

        if r8 != $r11 goto label2;

        $r13 = r1;

        goto label3;

     label2:
        $r10 = virtualinvoke r1.<kodkod.ast.ComparisonFormula: kodkod.ast.operator.ExprCompOperator op()>();

        $r13 = virtualinvoke r5.<kodkod.ast.Expression: kodkod.ast.Formula compare(kodkod.ast.operator.ExprCompOperator,kodkod.ast.Expression)>($r10, r8);

     label3:
        $r14 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r13);

        $r15 = (kodkod.ast.Formula) $r14;

        return $r15;
    }

    public kodkod.ast.Formula visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.MultiplicityFormula r1;
        kodkod.ast.operator.Multiplicity $r7;
        kodkod.ast.Formula $r9, r10, $r11;
        kodkod.ast.Expression $r3, r5, $r6;
        kodkod.ast.Node $r2, $r8;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r4;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r10 = (kodkod.ast.Formula) $r2;

        if r10 == null goto label1;

        return r10;

     label1:
        $r3 = virtualinvoke r1.<kodkod.ast.MultiplicityFormula: kodkod.ast.Expression expression()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Expression) $r4;

        $r6 = virtualinvoke r1.<kodkod.ast.MultiplicityFormula: kodkod.ast.Expression expression()>();

        if r5 != $r6 goto label2;

        $r11 = r1;

        goto label3;

     label2:
        $r7 = virtualinvoke r1.<kodkod.ast.MultiplicityFormula: kodkod.ast.operator.Multiplicity multiplicity()>();

        $r11 = virtualinvoke r5.<kodkod.ast.Expression: kodkod.ast.Formula apply(kodkod.ast.operator.Multiplicity)>($r7);

     label3:
        $r8 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, $r11);

        $r9 = (kodkod.ast.Formula) $r8;

        return $r9;
    }

    public kodkod.ast.Formula visit(kodkod.ast.RelationPredicate)
    {
        kodkod.ast.operator.Multiplicity $r42, $r43;
        int[] $r6;
        kodkod.ast.RelationPredicate$Name $r7, $r35;
        kodkod.ast.Expression $r24, r26, $r27, r29, $r31, $r32;
        kodkod.ast.RelationPredicate$TotalOrdering r8;
        java.lang.StringBuilder $r34, $r36;
        kodkod.ast.Relation $r3, r5, $r9, r11, $r12, r14, $r15, r17, $r18, $r19, $r20, $r21, $r22, $r30;
        int $i0, $i1;
        java.lang.String $r37;
        kodkod.ast.RelationPredicate$Function r23;
        kodkod.ast.Formula r38, $r39, r40, $r41, $r44, $r46;
        java.lang.IllegalArgumentException $r33;
        kodkod.ast.Node $r2, $r45;
        kodkod.ast.visitor.AbstractReplacer r0;
        java.lang.Object $r4, $r10, $r13, $r16, $r25, $r28;
        kodkod.ast.RelationPredicate r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node lookup(kodkod.ast.Node)>(r1);

        r38 = (kodkod.ast.Formula) $r2;

        if r38 == null goto label01;

        return r38;

     label01:
        $r3 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.Relation relation()>();

        $r4 = virtualinvoke $r3.<kodkod.ast.Relation: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r5 = (kodkod.ast.Relation) $r4;

        $r6 = staticinvoke <kodkod.ast.visitor.AbstractReplacer: int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name()>();

        $r7 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.RelationPredicate$Name name()>();

        $i0 = virtualinvoke $r7.<kodkod.ast.RelationPredicate$Name: int ordinal()>();

        $i1 = $r6[$i0];

        tableswitch($i1)
        {
            case 0: goto label05;
            case 1: goto label02;
            case 2: goto label09;
            default: goto label12;
        };

     label02:
        $r22 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.Relation relation()>();

        if r5 != $r22 goto label03;

        $r39 = r1;

        goto label04;

     label03:
        $r39 = virtualinvoke r5.<kodkod.ast.Relation: kodkod.ast.Formula acyclic()>();

     label04:
        r40 = $r39;

        goto label13;

     label05:
        r23 = (kodkod.ast.RelationPredicate$Function) r1;

        $r24 = virtualinvoke r23.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression domain()>();

        $r25 = virtualinvoke $r24.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r26 = (kodkod.ast.Expression) $r25;

        $r27 = virtualinvoke r23.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression range()>();

        $r28 = virtualinvoke $r27.<kodkod.ast.Expression: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r29 = (kodkod.ast.Expression) $r28;

        $r30 = virtualinvoke r23.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Relation relation()>();

        if r5 != $r30 goto label06;

        $r31 = virtualinvoke r23.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression domain()>();

        if r26 != $r31 goto label06;

        $r32 = virtualinvoke r23.<kodkod.ast.RelationPredicate$Function: kodkod.ast.Expression range()>();

        if r29 != $r32 goto label06;

        $r41 = r23;

        goto label08;

     label06:
        $r42 = virtualinvoke r23.<kodkod.ast.RelationPredicate$Function: kodkod.ast.operator.Multiplicity targetMult()>();

        $r43 = <kodkod.ast.operator.Multiplicity: kodkod.ast.operator.Multiplicity ONE>;

        if $r42 != $r43 goto label07;

        $r41 = virtualinvoke r5.<kodkod.ast.Relation: kodkod.ast.Formula function(kodkod.ast.Expression,kodkod.ast.Expression)>(r26, r29);

        goto label08;

     label07:
        $r41 = virtualinvoke r5.<kodkod.ast.Relation: kodkod.ast.Formula partialFunction(kodkod.ast.Expression,kodkod.ast.Expression)>(r26, r29);

     label08:
        r40 = $r41;

        goto label13;

     label09:
        r8 = (kodkod.ast.RelationPredicate$TotalOrdering) r1;

        $r9 = virtualinvoke r8.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation ordered()>();

        $r10 = virtualinvoke $r9.<kodkod.ast.Relation: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r11 = (kodkod.ast.Relation) $r10;

        $r12 = virtualinvoke r8.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation first()>();

        $r13 = virtualinvoke $r12.<kodkod.ast.Relation: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r14 = (kodkod.ast.Relation) $r13;

        $r15 = virtualinvoke r8.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation last()>();

        $r16 = virtualinvoke $r15.<kodkod.ast.Relation: java.lang.Object accept(kodkod.ast.visitor.ReturnVisitor)>(r0);

        r17 = (kodkod.ast.Relation) $r16;

        $r18 = virtualinvoke r8.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation relation()>();

        if r5 != $r18 goto label10;

        $r19 = virtualinvoke r8.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation ordered()>();

        if r11 != $r19 goto label10;

        $r20 = virtualinvoke r8.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation first()>();

        if r14 != $r20 goto label10;

        $r21 = virtualinvoke r8.<kodkod.ast.RelationPredicate$TotalOrdering: kodkod.ast.Relation last()>();

        if r17 != $r21 goto label10;

        $r44 = r8;

        goto label11;

     label10:
        $r44 = virtualinvoke r5.<kodkod.ast.Relation: kodkod.ast.Formula totalOrder(kodkod.ast.Relation,kodkod.ast.Relation,kodkod.ast.Relation)>(r11, r14, r17);

     label11:
        r40 = $r44;

        goto label13;

     label12:
        $r33 = new java.lang.IllegalArgumentException;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("unknown relation predicate: ");

        $r35 = virtualinvoke r1.<kodkod.ast.RelationPredicate: kodkod.ast.RelationPredicate$Name name()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r33.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r37);

        throw $r33;

     label13:
        $r45 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Node cache(kodkod.ast.Node,kodkod.ast.Node)>(r1, r40);

        $r46 = (kodkod.ast.Formula) $r45;

        return $r46;
    }

    public volatile java.lang.Object visit(kodkod.ast.RelationPredicate)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.RelationPredicate r1;
        kodkod.ast.Formula $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.RelationPredicate;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Formula visit(kodkod.ast.RelationPredicate)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.MultiplicityFormula)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.MultiplicityFormula r1;
        kodkod.ast.Formula $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.MultiplicityFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Formula visit(kodkod.ast.MultiplicityFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ComparisonFormula)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.ComparisonFormula r1;
        kodkod.ast.Formula $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.ComparisonFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Formula visit(kodkod.ast.ComparisonFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NotFormula)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.NotFormula r1;
        kodkod.ast.Formula $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.NotFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Formula visit(kodkod.ast.NotFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryFormula)
    {
        kodkod.ast.BinaryFormula r1;
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Formula $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.BinaryFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Formula visit(kodkod.ast.BinaryFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryFormula)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.NaryFormula r1;
        kodkod.ast.Formula $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.NaryFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Formula visit(kodkod.ast.NaryFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.QuantifiedFormula)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.QuantifiedFormula r1;
        kodkod.ast.Formula $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.QuantifiedFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Formula visit(kodkod.ast.QuantifiedFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ConstantFormula)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.ConstantFormula r1;
        kodkod.ast.Formula $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.ConstantFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Formula visit(kodkod.ast.ConstantFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntComparisonFormula)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.IntComparisonFormula r1;
        kodkod.ast.Formula $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.IntComparisonFormula;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Formula visit(kodkod.ast.IntComparisonFormula)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.SumExpression)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.IntExpression $r2;
        kodkod.ast.SumExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.SumExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.IntExpression visit(kodkod.ast.SumExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.UnaryIntExpression)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.IntExpression $r2;
        kodkod.ast.UnaryIntExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.UnaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.IntExpression visit(kodkod.ast.UnaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryIntExpression)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.IntExpression $r2;
        kodkod.ast.BinaryIntExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.BinaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.IntExpression visit(kodkod.ast.BinaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryIntExpression)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.NaryIntExpression r1;
        kodkod.ast.IntExpression $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.NaryIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.IntExpression visit(kodkod.ast.NaryIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ExprToIntCast)
    {
        kodkod.ast.ExprToIntCast r1;
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.IntExpression $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.ExprToIntCast;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.IntExpression visit(kodkod.ast.ExprToIntCast)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IfIntExpression)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.IntExpression $r2;
        kodkod.ast.IfIntExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.IfIntExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.IntExpression visit(kodkod.ast.IfIntExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntConstant)
    {
        kodkod.ast.IntConstant r1;
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.IntExpression $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.IntConstant;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.IntExpression visit(kodkod.ast.IntConstant)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IntToExprCast)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Expression $r2;
        kodkod.ast.IntToExprCast r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.IntToExprCast;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Expression visit(kodkod.ast.IntToExprCast)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ProjectExpression)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.ProjectExpression r1;
        kodkod.ast.Expression $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.ProjectExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Expression visit(kodkod.ast.ProjectExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.IfExpression)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Expression $r2;
        kodkod.ast.IfExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.IfExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Expression visit(kodkod.ast.IfExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Comprehension)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Expression $r2;
        kodkod.ast.Comprehension r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.Comprehension;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Expression visit(kodkod.ast.Comprehension)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.UnaryExpression)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Expression $r2;
        kodkod.ast.UnaryExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.UnaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Expression visit(kodkod.ast.UnaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.BinaryExpression)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Expression $r2;
        kodkod.ast.BinaryExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.BinaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Expression visit(kodkod.ast.BinaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.NaryExpression)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Expression $r2;
        kodkod.ast.NaryExpression r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.NaryExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Expression visit(kodkod.ast.NaryExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.ConstantExpression)
    {
        kodkod.ast.ConstantExpression r1;
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Expression $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.ConstantExpression;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Expression visit(kodkod.ast.ConstantExpression)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Variable)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Expression $r2;
        kodkod.ast.Variable r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.Variable;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Expression visit(kodkod.ast.Variable)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Relation)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Expression $r2;
        kodkod.ast.Relation r1;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.Relation;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Expression visit(kodkod.ast.Relation)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Decl)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Decl r1, $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.Decl;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Decl visit(kodkod.ast.Decl)>(r1);

        return $r2;
    }

    public volatile java.lang.Object visit(kodkod.ast.Decls)
    {
        kodkod.ast.visitor.AbstractReplacer r0;
        kodkod.ast.Decls r1, $r2;

        r0 := @this: kodkod.ast.visitor.AbstractReplacer;

        r1 := @parameter0: kodkod.ast.Decls;

        $r2 = virtualinvoke r0.<kodkod.ast.visitor.AbstractReplacer: kodkod.ast.Decls visit(kodkod.ast.Decls)>(r1);

        return $r2;
    }

    static int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name()
    {
        java.lang.NoSuchFieldError $r6, $r7, $r8;
        kodkod.ast.RelationPredicate$Name[] $r1;
        int[] $r0, r2;
        int $i0, $i1, $i2, $i3;
        kodkod.ast.RelationPredicate$Name $r3, $r4, $r5;

        $r0 = <kodkod.ast.visitor.AbstractReplacer: int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name>;

        if $r0 == null goto label01;

        return $r0;

     label01:
        $r1 = staticinvoke <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name[] values()>();

        $i0 = lengthof $r1;

        r2 = newarray (int)[$i0];

     label02:
        $r3 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name ACYCLIC>;

        $i1 = virtualinvoke $r3.<kodkod.ast.RelationPredicate$Name: int ordinal()>();

        r2[$i1] = 1;

     label03:
        goto label05;

     label04:
        $r8 := @caughtexception;

     label05:
        $r4 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name FUNCTION>;

        $i2 = virtualinvoke $r4.<kodkod.ast.RelationPredicate$Name: int ordinal()>();

        r2[$i2] = 0;

     label06:
        goto label08;

     label07:
        $r7 := @caughtexception;

     label08:
        $r5 = <kodkod.ast.RelationPredicate$Name: kodkod.ast.RelationPredicate$Name TOTAL_ORDERING>;

        $i3 = virtualinvoke $r5.<kodkod.ast.RelationPredicate$Name: int ordinal()>();

        r2[$i3] = 2;

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

     label11:
        <kodkod.ast.visitor.AbstractReplacer: int[] $SWITCH_TABLE$kodkod$ast$RelationPredicate$Name> = r2;

        return r2;

        catch java.lang.NoSuchFieldError from label02 to label03 with label04;
        catch java.lang.NoSuchFieldError from label05 to label06 with label07;
        catch java.lang.NoSuchFieldError from label08 to label09 with label10;
    }
}
