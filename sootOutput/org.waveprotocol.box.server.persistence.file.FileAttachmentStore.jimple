public class org.waveprotocol.box.server.persistence.file.FileAttachmentStore extends java.lang.Object implements org.waveprotocol.box.server.persistence.AttachmentStore
{
    private final java.lang.String basePath;

    public void <init>(java.lang.String)
    {
        java.lang.String r1;
        org.waveprotocol.box.server.persistence.file.FileAttachmentStore r0;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileAttachmentStore;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.box.server.persistence.file.FileAttachmentStore: java.lang.String basePath> = r1;

        return;
    }

    private static java.lang.String encodeId(java.lang.String)
    {
        byte[] $r1;
        java.lang.String r0, $r2;
        java.lang.RuntimeException $r4;
        java.io.UnsupportedEncodingException $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CharBase64: java.lang.String encode(byte[])>($r1);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    public java.lang.String getAttachmentPath(org.waveprotocol.wave.model.id.WaveletName, java.lang.String)
    {
        org.waveprotocol.wave.model.id.WaveletName r0;
        char $c0, $c1;
        java.lang.StringBuilder $r2, $r5, $r6, $r7, $r8, $r11;
        java.lang.String $r1, $r4, r9, $r10, $r12;
        org.waveprotocol.box.server.persistence.file.FileAttachmentStore r3;

        r3 := @this: org.waveprotocol.box.server.persistence.file.FileAttachmentStore;

        r0 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r9 := @parameter1: java.lang.String;

        $r1 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileUtils: java.lang.String waveletNameToPathSegment(org.waveprotocol.wave.model.id.WaveletName)>(r0);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = r3.<org.waveprotocol.box.server.persistence.file.FileAttachmentStore: java.lang.String basePath>;

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $c0 = <java.io.File: char separatorChar>;

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $c1 = <java.io.File: char separatorChar>;

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1);

        $r10 = staticinvoke <org.waveprotocol.box.server.persistence.file.FileAttachmentStore: java.lang.String encodeId(java.lang.String)>(r9);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    private java.io.File getAttachmentFile(org.waveprotocol.wave.model.id.WaveletName, java.lang.String, boolean)
    {
        org.waveprotocol.wave.model.id.WaveletName r2;
        java.io.File $r0, $r5;
        java.lang.String r3, $r4;
        org.waveprotocol.box.server.persistence.file.FileAttachmentStore r1;
        boolean $z0, z1;

        r1 := @this: org.waveprotocol.box.server.persistence.file.FileAttachmentStore;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r3 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        $r0 = new java.io.File;

        $r4 = virtualinvoke r1.<org.waveprotocol.box.server.persistence.file.FileAttachmentStore: java.lang.String getAttachmentPath(org.waveprotocol.wave.model.id.WaveletName,java.lang.String)>(r2, r3);

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r4);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        if z1 == 0 goto label1;

        $r5 = virtualinvoke $r0.<java.io.File: java.io.File getParentFile()>();

        virtualinvoke $r5.<java.io.File: boolean mkdirs()>();

     label1:
        return $r0;
    }

    public org.waveprotocol.box.server.persistence.AttachmentStore$AttachmentData getAttachment(org.waveprotocol.wave.model.id.WaveletName, java.lang.String)
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        java.lang.String r2;
        org.waveprotocol.box.server.persistence.file.FileAttachmentStore r0;
        org.waveprotocol.box.server.persistence.file.FileAttachmentStore$1 $r4;
        java.io.File $r3;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileAttachmentStore;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileAttachmentStore: java.io.File getAttachmentFile(org.waveprotocol.wave.model.id.WaveletName,java.lang.String,boolean)>(r1, r2, 0);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke $r3.<java.io.File: boolean canRead()>();

        if $z1 != 0 goto label2;

     label1:
        return null;

     label2:
        $r4 = new org.waveprotocol.box.server.persistence.file.FileAttachmentStore$1;

        specialinvoke $r4.<org.waveprotocol.box.server.persistence.file.FileAttachmentStore$1: void <init>(org.waveprotocol.box.server.persistence.file.FileAttachmentStore,java.io.File)>(r0, $r3);

        return $r4;
    }

    public boolean storeAttachment(org.waveprotocol.wave.model.id.WaveletName, java.lang.String, java.io.InputStream) throws java.io.IOException
    {
        org.waveprotocol.wave.model.id.WaveletName r1;
        java.io.FileOutputStream $r4;
        java.lang.String r2;
        org.waveprotocol.box.server.persistence.file.FileAttachmentStore r0;
        java.io.File $r3;
        boolean $z0;
        java.io.InputStream r5;

        r0 := @this: org.waveprotocol.box.server.persistence.file.FileAttachmentStore;

        r1 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r2 := @parameter1: java.lang.String;

        r5 := @parameter2: java.io.InputStream;

        $r3 = specialinvoke r0.<org.waveprotocol.box.server.persistence.file.FileAttachmentStore: java.io.File getAttachmentFile(org.waveprotocol.wave.model.id.WaveletName,java.lang.String,boolean)>(r1, r2, 1);

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r4 = new java.io.FileOutputStream;

        specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r3);

        staticinvoke <org.waveprotocol.box.server.persistence.AttachmentUtil: void writeTo(java.io.InputStream,java.io.OutputStream)>(r5, $r4);

        virtualinvoke $r4.<java.io.FileOutputStream: void close()>();

        return 1;
    }

    public void deleteAttachment(org.waveprotocol.wave.model.id.WaveletName, java.lang.String)
    {
        org.waveprotocol.wave.model.id.WaveletName r2;
        java.lang.String r3, $r4;
        org.waveprotocol.box.server.persistence.file.FileAttachmentStore r1;
        java.io.File $r0;
        boolean $z0;

        r1 := @this: org.waveprotocol.box.server.persistence.file.FileAttachmentStore;

        r2 := @parameter0: org.waveprotocol.wave.model.id.WaveletName;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.io.File;

        $r4 = virtualinvoke r1.<org.waveprotocol.box.server.persistence.file.FileAttachmentStore: java.lang.String getAttachmentPath(org.waveprotocol.wave.model.id.WaveletName,java.lang.String)>(r2, r3);

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>($r4);

        $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        virtualinvoke $r0.<java.io.File: boolean delete()>();

     label1:
        return;
    }
}
