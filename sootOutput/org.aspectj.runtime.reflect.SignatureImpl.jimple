abstract class org.aspectj.runtime.reflect.SignatureImpl extends java.lang.Object implements org.aspectj.lang.Signature
{
    private static boolean useCache;
    int modifiers;
    java.lang.String name;
    java.lang.String declaringTypeName;
    java.lang.Class declaringType;
    org.aspectj.runtime.reflect.SignatureImpl$Cache stringCache;
    private java.lang.String stringRep;
    java.lang.ClassLoader lookupClassLoader;
    static final char SEP;
    static java.lang.String[] EMPTY_STRING_ARRAY;
    static java.lang.Class[] EMPTY_CLASS_ARRAY;
    static final java.lang.String INNER_SEP;

    void <init>(int, java.lang.String, java.lang.Class)
    {
        org.aspectj.runtime.reflect.SignatureImpl r0;
        int i0, $i2;
        java.lang.Class r2;
        java.lang.String r1;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i2 = (int) -1;

        r0.<org.aspectj.runtime.reflect.SignatureImpl: int modifiers> = $i2;

        r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.ClassLoader lookupClassLoader> = null;

        r0.<org.aspectj.runtime.reflect.SignatureImpl: int modifiers> = i0;

        r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String name> = r1;

        r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class declaringType> = r2;

        return;
    }

    protected abstract java.lang.String createToString(org.aspectj.runtime.reflect.StringMaker);

    java.lang.String toString(org.aspectj.runtime.reflect.StringMaker)
    {
        java.lang.Throwable $r6;
        org.aspectj.runtime.reflect.StringMaker r1;
        org.aspectj.runtime.reflect.SignatureImpl$Cache $r2, $r3, $r4;
        org.aspectj.runtime.reflect.SignatureImpl r0;
        int $i0, $i1;
        org.aspectj.runtime.reflect.SignatureImpl$CacheImpl $r5;
        java.lang.String r7;
        boolean $z0, $z1;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        r1 := @parameter0: org.aspectj.runtime.reflect.StringMaker;

        r7 = null;

        $z0 = <org.aspectj.runtime.reflect.SignatureImpl: boolean useCache>;

        if $z0 == 0 goto label5;

        $r3 = r0.<org.aspectj.runtime.reflect.SignatureImpl: org.aspectj.runtime.reflect.SignatureImpl$Cache stringCache>;

        if $r3 != null goto label4;

     label1:
        $r5 = new org.aspectj.runtime.reflect.SignatureImpl$CacheImpl;

        specialinvoke $r5.<org.aspectj.runtime.reflect.SignatureImpl$CacheImpl: void <init>()>();

        r0.<org.aspectj.runtime.reflect.SignatureImpl: org.aspectj.runtime.reflect.SignatureImpl$Cache stringCache> = $r5;

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        <org.aspectj.runtime.reflect.SignatureImpl: boolean useCache> = 0;

        goto label5;

     label4:
        $r4 = r0.<org.aspectj.runtime.reflect.SignatureImpl: org.aspectj.runtime.reflect.SignatureImpl$Cache stringCache>;

        $i1 = r1.<org.aspectj.runtime.reflect.StringMaker: int cacheOffset>;

        r7 = interfaceinvoke $r4.<org.aspectj.runtime.reflect.SignatureImpl$Cache: java.lang.String get(int)>($i1);

     label5:
        if r7 != null goto label6;

        r7 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String createToString(org.aspectj.runtime.reflect.StringMaker)>(r1);

     label6:
        $z1 = <org.aspectj.runtime.reflect.SignatureImpl: boolean useCache>;

        if $z1 == 0 goto label7;

        $r2 = r0.<org.aspectj.runtime.reflect.SignatureImpl: org.aspectj.runtime.reflect.SignatureImpl$Cache stringCache>;

        $i0 = r1.<org.aspectj.runtime.reflect.StringMaker: int cacheOffset>;

        interfaceinvoke $r2.<org.aspectj.runtime.reflect.SignatureImpl$Cache: void set(int,java.lang.String)>($i0, r7);

     label7:
        return r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public final java.lang.String toString()
    {
        java.lang.String $r2;
        org.aspectj.runtime.reflect.StringMaker $r1;
        org.aspectj.runtime.reflect.SignatureImpl r0;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        $r1 = <org.aspectj.runtime.reflect.StringMaker: org.aspectj.runtime.reflect.StringMaker middleStringMaker>;

        $r2 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String toString(org.aspectj.runtime.reflect.StringMaker)>($r1);

        return $r2;
    }

    public final java.lang.String toShortString()
    {
        java.lang.String $r2;
        org.aspectj.runtime.reflect.StringMaker $r1;
        org.aspectj.runtime.reflect.SignatureImpl r0;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        $r1 = <org.aspectj.runtime.reflect.StringMaker: org.aspectj.runtime.reflect.StringMaker shortStringMaker>;

        $r2 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String toString(org.aspectj.runtime.reflect.StringMaker)>($r1);

        return $r2;
    }

    public final java.lang.String toLongString()
    {
        java.lang.String $r2;
        org.aspectj.runtime.reflect.StringMaker $r1;
        org.aspectj.runtime.reflect.SignatureImpl r0;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        $r1 = <org.aspectj.runtime.reflect.StringMaker: org.aspectj.runtime.reflect.StringMaker longStringMaker>;

        $r2 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String toString(org.aspectj.runtime.reflect.StringMaker)>($r1);

        return $r2;
    }

    public int getModifiers()
    {
        org.aspectj.runtime.reflect.SignatureImpl r0;
        int $i0, $i1, $i2, $i4;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        $i0 = r0.<org.aspectj.runtime.reflect.SignatureImpl: int modifiers>;

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $i2 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: int extractInt(int)>(0);

        r0.<org.aspectj.runtime.reflect.SignatureImpl: int modifiers> = $i2;

     label1:
        $i1 = r0.<org.aspectj.runtime.reflect.SignatureImpl: int modifiers>;

        return $i1;
    }

    public java.lang.String getName()
    {
        org.aspectj.runtime.reflect.SignatureImpl r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        $r1 = r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String name>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String extractString(int)>(1);

        r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String name> = $r3;

     label1:
        $r2 = r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String name>;

        return $r2;
    }

    public java.lang.Class getDeclaringType()
    {
        org.aspectj.runtime.reflect.SignatureImpl r0;
        java.lang.Class $r1, $r2, $r3;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        $r1 = r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class declaringType>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class extractType(int)>(2);

        r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class declaringType> = $r3;

     label1:
        $r2 = r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class declaringType>;

        return $r2;
    }

    public java.lang.String getDeclaringTypeName()
    {
        org.aspectj.runtime.reflect.SignatureImpl r0;
        java.lang.Class $r3;
        java.lang.String $r1, $r2, $r4;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        $r1 = r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String declaringTypeName>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class getDeclaringType()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String declaringTypeName> = $r4;

     label1:
        $r2 = r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String declaringTypeName>;

        return $r2;
    }

    java.lang.String fullTypeName(java.lang.Class)
    {
        java.lang.StringBuffer $r3, $r7, $r8;
        org.aspectj.runtime.reflect.SignatureImpl r4;
        java.lang.Class r0, $r5;
        java.lang.String $r1, $r2, $r6, $r9;
        boolean $z0;

        r4 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        return "ANONYMOUS";

     label1:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r6 = virtualinvoke r4.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String fullTypeName(java.lang.Class)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r9;

     label2:
        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(36, 46);

        return $r2;
    }

    java.lang.String stripPackageName(java.lang.String)
    {
        org.aspectj.runtime.reflect.SignatureImpl r2;
        int $i0, $i1, $i3;
        java.lang.String r0, $r1;

        r2 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(46);

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        return r0;

     label1:
        $i1 = $i0 + 1;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1);

        return $r1;
    }

    java.lang.String shortTypeName(java.lang.Class)
    {
        java.lang.StringBuffer $r5, $r8, $r9;
        org.aspectj.runtime.reflect.SignatureImpl r1;
        java.lang.Class r0, $r6;
        java.lang.String $r2, $r3, $r4, $r7, $r10;
        boolean $z0;

        r1 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        return "ANONYMOUS";

     label1:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label2;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        $r7 = virtualinvoke r1.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String shortTypeName(java.lang.Class)>($r6);

        $r8 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("[]");

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r10;

     label2:
        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r3 = virtualinvoke r1.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String stripPackageName(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replace(char,char)>(36, 46);

        return $r4;
    }

    void addFullTypeNames(java.lang.StringBuffer, java.lang.Class[])
    {
        java.lang.StringBuffer r1;
        org.aspectj.runtime.reflect.SignatureImpl r2;
        int $i0, i1;
        java.lang.Class[] r0;
        java.lang.Class $r3;
        java.lang.String $r4;

        r2 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        r1 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.lang.Class[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        $r3 = r0[i1];

        $r4 = virtualinvoke r2.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String fullTypeName(java.lang.Class)>($r3);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    void addShortTypeNames(java.lang.StringBuffer, java.lang.Class[])
    {
        java.lang.StringBuffer r1;
        org.aspectj.runtime.reflect.SignatureImpl r2;
        int $i0, i1;
        java.lang.Class[] r0;
        java.lang.Class $r3;
        java.lang.String $r4;

        r2 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        r1 := @parameter0: java.lang.StringBuffer;

        r0 := @parameter1: java.lang.Class[];

        i1 = 0;

     label1:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label3;

        if i1 <= 0 goto label2;

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(", ");

     label2:
        $r3 = r0[i1];

        $r4 = virtualinvoke r2.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String shortTypeName(java.lang.Class)>($r3);

        virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    void addTypeArray(java.lang.StringBuffer, java.lang.Class[])
    {
        java.lang.Class[] r2;
        java.lang.StringBuffer r1;
        org.aspectj.runtime.reflect.SignatureImpl r0;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        r1 := @parameter0: java.lang.StringBuffer;

        r2 := @parameter1: java.lang.Class[];

        virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: void addFullTypeNames(java.lang.StringBuffer,java.lang.Class[])>(r1, r2);

        return;
    }

    public void setLookupClassLoader(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r1;
        org.aspectj.runtime.reflect.SignatureImpl r0;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        r1 := @parameter0: java.lang.ClassLoader;

        r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.ClassLoader lookupClassLoader> = r1;

        return;
    }

    private java.lang.ClassLoader getLookupClassLoader()
    {
        org.aspectj.runtime.reflect.SignatureImpl r0;
        java.lang.Class $r3;
        java.lang.ClassLoader $r1, $r2, $r4;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        $r1 = r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.ClassLoader lookupClassLoader>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.ClassLoader lookupClassLoader> = $r4;

     label1:
        $r2 = r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.ClassLoader lookupClassLoader>;

        return $r2;
    }

    public void <init>(java.lang.String)
    {
        int $i1;
        java.lang.String r1;
        org.aspectj.runtime.reflect.SignatureImpl r0;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = (int) -1;

        r0.<org.aspectj.runtime.reflect.SignatureImpl: int modifiers> = $i1;

        r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.ClassLoader lookupClassLoader> = null;

        r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String stringRep> = r1;

        return;
    }

    java.lang.String extractString(int)
    {
        org.aspectj.runtime.reflect.SignatureImpl r0;
        int $i0, i1, i2, i3, $i5, $i7;
        java.lang.String $r1, $r2, $r3, $r4, $r5;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        i1 := @parameter0: int;

        i2 = 0;

        $r1 = r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String stringRep>;

        i3 = virtualinvoke $r1.<java.lang.String: int indexOf(int)>(45);

     label1:
        $i0 = i1;

        $i5 = (int) -1;

        i1 = i1 + $i5;

        if $i0 <= 0 goto label2;

        i2 = i3 + 1;

        $r5 = r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String stringRep>;

        i3 = virtualinvoke $r5.<java.lang.String: int indexOf(int,int)>(45, i2);

        goto label1;

     label2:
        $i7 = (int) -1;

        if i3 != $i7 goto label3;

        $r4 = r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String stringRep>;

        i3 = virtualinvoke $r4.<java.lang.String: int length()>();

     label3:
        $r2 = r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String stringRep>;

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int,int)>(i2, i3);

        return $r3;
    }

    int extractInt(int)
    {
        org.aspectj.runtime.reflect.SignatureImpl r0;
        int i0, $i1;
        java.lang.String $r1;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String extractString(int)>(i0);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r1, 16);

        return $i1;
    }

    java.lang.Class extractType(int)
    {
        org.aspectj.runtime.reflect.SignatureImpl r0;
        int i0;
        java.lang.Class $r3;
        java.lang.String $r1;
        java.lang.ClassLoader $r2;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String extractString(int)>(i0);

        $r2 = specialinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.ClassLoader getLookupClassLoader()>();

        $r3 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>($r1, $r2);

        return $r3;
    }

    java.lang.String[] extractStrings(int)
    {
        java.lang.String[] r3;
        java.util.StringTokenizer $r2;
        org.aspectj.runtime.reflect.SignatureImpl r0;
        int i0, $i1, i2;
        java.lang.String $r1, $r4;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String extractString(int)>(i0);

        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, ":");

        $i1 = virtualinvoke $r2.<java.util.StringTokenizer: int countTokens()>();

        r3 = newarray (java.lang.String)[$i1];

        i2 = 0;

     label1:
        if i2 >= $i1 goto label2;

        $r4 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        r3[i2] = $r4;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r3;
    }

    java.lang.Class[] extractTypes(int)
    {
        java.lang.Class[] r3;
        java.util.StringTokenizer $r2;
        org.aspectj.runtime.reflect.SignatureImpl r0;
        int i0, $i1, i2;
        java.lang.Class $r6;
        java.lang.String $r1, $r4;
        java.lang.ClassLoader $r5;

        r0 := @this: org.aspectj.runtime.reflect.SignatureImpl;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.String extractString(int)>(i0);

        $r2 = new java.util.StringTokenizer;

        specialinvoke $r2.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>($r1, ":");

        $i1 = virtualinvoke $r2.<java.util.StringTokenizer: int countTokens()>();

        r3 = newarray (java.lang.Class)[$i1];

        i2 = 0;

     label1:
        if i2 >= $i1 goto label2;

        $r4 = virtualinvoke $r2.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $r5 = specialinvoke r0.<org.aspectj.runtime.reflect.SignatureImpl: java.lang.ClassLoader getLookupClassLoader()>();

        $r6 = staticinvoke <org.aspectj.runtime.reflect.Factory: java.lang.Class makeClass(java.lang.String,java.lang.ClassLoader)>($r4, $r5);

        r3[i2] = $r6;

        i2 = i2 + 1;

        goto label1;

     label2:
        return r3;
    }

    static void setUseCache(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <org.aspectj.runtime.reflect.SignatureImpl: boolean useCache> = z0;

        return;
    }

    static boolean getUseCache()
    {
        boolean $z0;

        $z0 = <org.aspectj.runtime.reflect.SignatureImpl: boolean useCache>;

        return $z0;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r1;
        java.lang.String[] $r0;

        <org.aspectj.runtime.reflect.SignatureImpl: java.lang.String INNER_SEP> = ":";

        <org.aspectj.runtime.reflect.SignatureImpl: char SEP> = 45;

        <org.aspectj.runtime.reflect.SignatureImpl: boolean useCache> = 1;

        $r0 = newarray (java.lang.String)[0];

        <org.aspectj.runtime.reflect.SignatureImpl: java.lang.String[] EMPTY_STRING_ARRAY> = $r0;

        $r1 = newarray (java.lang.Class)[0];

        <org.aspectj.runtime.reflect.SignatureImpl: java.lang.Class[] EMPTY_CLASS_ARRAY> = $r1;

        return;
    }
}
