public abstract class org.codehaus.jackson.map.deser.BasicDeserializerFactory extends org.codehaus.jackson.map.DeserializerFactory
{
    static final java.util.HashMap _simpleDeserializers;
    static final java.util.HashMap _keyDeserializers;
    static final java.util.HashMap _mapFallbacks;
    static final java.util.HashMap _collectionFallbacks;
    protected static final java.util.HashMap _arrayDeserializers;
    protected org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers;

    protected void <init>()
    {
        org.codehaus.jackson.map.ext.OptionalHandlerFactory $r1;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        specialinvoke r0.<org.codehaus.jackson.map.DeserializerFactory: void <init>()>();

        $r1 = <org.codehaus.jackson.map.ext.OptionalHandlerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory instance>;

        r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers> = $r1;

        return;
    }

    public abstract org.codehaus.jackson.map.DeserializerFactory withConfig(org.codehaus.jackson.map.DeserializerFactory$Config);

    protected abstract org.codehaus.jackson.map.JsonDeserializer _findCustomArrayDeserializer(org.codehaus.jackson.map.type.ArrayType, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.TypeDeserializer, org.codehaus.jackson.map.JsonDeserializer) throws org.codehaus.jackson.map.JsonMappingException;

    protected abstract org.codehaus.jackson.map.JsonDeserializer _findCustomCollectionDeserializer(org.codehaus.jackson.map.type.CollectionType, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.TypeDeserializer, org.codehaus.jackson.map.JsonDeserializer) throws org.codehaus.jackson.map.JsonMappingException;

    protected abstract org.codehaus.jackson.map.JsonDeserializer _findCustomCollectionLikeDeserializer(org.codehaus.jackson.map.type.CollectionLikeType, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.TypeDeserializer, org.codehaus.jackson.map.JsonDeserializer) throws org.codehaus.jackson.map.JsonMappingException;

    protected abstract org.codehaus.jackson.map.JsonDeserializer _findCustomEnumDeserializer(java.lang.Class, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException;

    protected abstract org.codehaus.jackson.map.JsonDeserializer _findCustomMapDeserializer(org.codehaus.jackson.map.type.MapType, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.KeyDeserializer, org.codehaus.jackson.map.TypeDeserializer, org.codehaus.jackson.map.JsonDeserializer) throws org.codehaus.jackson.map.JsonMappingException;

    protected abstract org.codehaus.jackson.map.JsonDeserializer _findCustomMapLikeDeserializer(org.codehaus.jackson.map.type.MapLikeType, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.map.BeanProperty, org.codehaus.jackson.map.KeyDeserializer, org.codehaus.jackson.map.TypeDeserializer, org.codehaus.jackson.map.JsonDeserializer) throws org.codehaus.jackson.map.JsonMappingException;

    protected abstract org.codehaus.jackson.map.JsonDeserializer _findCustomTreeNodeDeserializer(java.lang.Class, org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException;

    public abstract org.codehaus.jackson.map.deser.ValueInstantiator findValueInstantiator(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription) throws org.codehaus.jackson.map.JsonMappingException;

    public abstract org.codehaus.jackson.type.JavaType mapAbstractType(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType) throws org.codehaus.jackson.map.JsonMappingException;

    public org.codehaus.jackson.map.JsonDeserializer createArrayDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.type.ArrayType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        java.util.HashMap $r10;
        org.codehaus.jackson.map.DeserializationConfig r5;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r4;
        org.codehaus.jackson.type.JavaType $r1;
        org.codehaus.jackson.map.JsonDeserializer $r8, $r19, r20, r21;
        java.lang.String $r18;
        boolean $z0;
        org.codehaus.jackson.map.DeserializerProvider r6;
        java.lang.IllegalArgumentException $r13;
        org.codehaus.jackson.map.BeanProperty r7;
        org.codehaus.jackson.map.TypeDeserializer $r12, r22;
        java.lang.Object $r2, $r3, $r11;
        java.lang.StringBuilder $r14, $r15, $r16, $r17;
        org.codehaus.jackson.map.type.ArrayType r0;
        org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer $r9;

        r4 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r5 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r6 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        r0 := @parameter2: org.codehaus.jackson.map.type.ArrayType;

        r7 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.type.ArrayType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r2 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        r20 = (org.codehaus.jackson.map.JsonDeserializer) $r2;

        if r20 != null goto label3;

        $r10 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _arrayDeserializers>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        r21 = (org.codehaus.jackson.map.JsonDeserializer) $r11;

        if r21 == null goto label2;

        $r19 = virtualinvoke r4.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _findCustomArrayDeserializer(org.codehaus.jackson.map.type.ArrayType,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.TypeDeserializer,org.codehaus.jackson.map.JsonDeserializer)>(r0, r5, r6, r7, null, null);

        if $r19 == null goto label1;

        return $r19;

     label1:
        return r21;

     label2:
        $z0 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: boolean isPrimitive()>();

        if $z0 == 0 goto label3;

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error: primitive type (");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") passed, no array deserializer found");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r13;

     label3:
        $r3 = virtualinvoke $r1.<org.codehaus.jackson.type.JavaType: java.lang.Object getTypeHandler()>();

        $r12 = (org.codehaus.jackson.map.TypeDeserializer) $r3;

        r22 = $r12;

        if $r12 != null goto label4;

        r22 = virtualinvoke r4.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r5, $r1, r7);

     label4:
        $r8 = virtualinvoke r4.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _findCustomArrayDeserializer(org.codehaus.jackson.map.type.ArrayType,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.TypeDeserializer,org.codehaus.jackson.map.JsonDeserializer)>(r0, r5, r6, r7, r22, r20);

        if $r8 == null goto label5;

        return $r8;

     label5:
        if r20 != null goto label6;

        r20 = virtualinvoke r6.<org.codehaus.jackson.map.DeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r5, $r1, r7);

     label6:
        $r9 = new org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer;

        specialinvoke $r9.<org.codehaus.jackson.map.deser.std.ObjectArrayDeserializer: void <init>(org.codehaus.jackson.map.type.ArrayType,org.codehaus.jackson.map.JsonDeserializer,org.codehaus.jackson.map.TypeDeserializer)>(r0, r20, r22);

        return $r9;
    }

    public org.codehaus.jackson.map.JsonDeserializer createCollectionDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.type.CollectionType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass $r5, $r8;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.map.DeserializerProvider r13;
        org.codehaus.jackson.map.deser.std.EnumSetDeserializer $r31;
        java.lang.StringBuilder $r25, $r26, $r27;
        org.codehaus.jackson.map.BeanDescription $r4, $r19;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r36;
        java.util.HashMap $r15;
        org.codehaus.jackson.map.DeserializationConfig r1;
        org.codehaus.jackson.map.deser.std.StringCollectionDeserializer $r23;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.type.JavaType $r2, $r9, $r10, $r18;
        org.codehaus.jackson.map.JsonDeserializer $r7, $r14, $r33, r38;
        java.lang.String $r16, $r28;
        org.codehaus.jackson.map.deser.std.CollectionDeserializer $r22;
        org.codehaus.jackson.map.type.CollectionType r34, r35, r37;
        org.codehaus.jackson.map.deser.ValueInstantiator $r20;
        java.lang.IllegalArgumentException $r24;
        org.codehaus.jackson.map.BeanProperty r6;
        org.codehaus.jackson.map.TypeDeserializer r39;
        java.lang.Class $r3, $r21, $r29, $r30, $r32;
        java.lang.Object $r11, $r12, $r17;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r13 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        r34 := @parameter2: org.codehaus.jackson.map.type.CollectionType;

        r6 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType mapAbstractType(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType)>(r1, r34);

        r35 = (org.codehaus.jackson.map.type.CollectionType) $r2;

        $r3 = virtualinvoke r35.<org.codehaus.jackson.map.type.CollectionType: java.lang.Class getRawClass()>();

        $r4 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.BeanDescription introspectForCreation(org.codehaus.jackson.type.JavaType)>(r35);

        r36 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r4;

        $r5 = virtualinvoke r36.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer findDeserializerFromAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>(r1, $r5, r6);

        if $r7 == null goto label1;

        return $r7;

     label1:
        $r8 = virtualinvoke r36.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r9 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType,java.lang.String)>(r1, $r8, r35, null);

        r37 = (org.codehaus.jackson.map.type.CollectionType) $r9;

        $r10 = virtualinvoke r37.<org.codehaus.jackson.map.type.CollectionType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        r38 = (org.codehaus.jackson.map.JsonDeserializer) $r11;

        $r12 = virtualinvoke $r10.<org.codehaus.jackson.type.JavaType: java.lang.Object getTypeHandler()>();

        r39 = (org.codehaus.jackson.map.TypeDeserializer) $r12;

        if r39 != null goto label2;

        r39 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, $r10, r6);

     label2:
        $r14 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _findCustomCollectionDeserializer(org.codehaus.jackson.map.type.CollectionType,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.TypeDeserializer,org.codehaus.jackson.map.JsonDeserializer)>(r37, r1, r13, r36, r6, r39, r38);

        if $r14 == null goto label3;

        return $r14;

     label3:
        if r38 != null goto label5;

        $r30 = class "Ljava/util/EnumSet;";

        $z2 = virtualinvoke $r30.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z2 == 0 goto label4;

        $r31 = new org.codehaus.jackson.map.deser.std.EnumSetDeserializer;

        $r32 = virtualinvoke $r10.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r33 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createEnumDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, r13, $r10, r6);

        specialinvoke $r31.<org.codehaus.jackson.map.deser.std.EnumSetDeserializer: void <init>(java.lang.Class,org.codehaus.jackson.map.JsonDeserializer)>($r32, $r33);

        return $r31;

     label4:
        r38 = virtualinvoke r13.<org.codehaus.jackson.map.DeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, $r10, r6);

     label5:
        $z0 = virtualinvoke r37.<org.codehaus.jackson.map.type.CollectionType: boolean isInterface()>();

        if $z0 != 0 goto label6;

        $z1 = virtualinvoke r37.<org.codehaus.jackson.map.type.CollectionType: boolean isAbstract()>();

        if $z1 == 0 goto label8;

     label6:
        $r15 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        $r16 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r17 = virtualinvoke $r15.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r16);

        $r29 = (java.lang.Class) $r17;

        if $r29 != null goto label7;

        $r24 = new java.lang.IllegalArgumentException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not find a deserializer for non-concrete Collection type ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r37);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r24;

     label7:
        $r18 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType,java.lang.Class)>(r37, $r29);

        r37 = (org.codehaus.jackson.map.type.CollectionType) $r18;

        $r19 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.BeanDescription introspectForCreation(org.codehaus.jackson.type.JavaType)>(r37);

        r36 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r19;

     label8:
        $r20 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.deser.ValueInstantiator findValueInstantiator(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription)>(r1, r36);

        $r21 = virtualinvoke $r10.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r21 != class "Ljava/lang/String;" goto label9;

        $r23 = new org.codehaus.jackson.map.deser.std.StringCollectionDeserializer;

        specialinvoke $r23.<org.codehaus.jackson.map.deser.std.StringCollectionDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.JsonDeserializer,org.codehaus.jackson.map.deser.ValueInstantiator)>(r37, r38, $r20);

        return $r23;

     label9:
        $r22 = new org.codehaus.jackson.map.deser.std.CollectionDeserializer;

        specialinvoke $r22.<org.codehaus.jackson.map.deser.std.CollectionDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.JsonDeserializer,org.codehaus.jackson.map.TypeDeserializer,org.codehaus.jackson.map.deser.ValueInstantiator)>(r37, r38, r39, $r20);

        return $r22;
    }

    public org.codehaus.jackson.map.JsonDeserializer createCollectionLikeDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.type.CollectionLikeType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r5;
        org.codehaus.jackson.map.DeserializationConfig r1;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r6, $r9;
        org.codehaus.jackson.type.JavaType $r2, $r10, $r11;
        org.codehaus.jackson.map.JsonDeserializer $r8, r13, $r16;
        org.codehaus.jackson.map.type.CollectionLikeType r17, r18, r19;
        org.codehaus.jackson.map.DeserializerProvider r15;
        org.codehaus.jackson.map.BeanProperty r7;
        org.codehaus.jackson.map.TypeDeserializer r20;
        java.lang.Class $r3;
        java.lang.Object $r12, $r14;
        org.codehaus.jackson.map.BeanDescription $r4;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r15 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        r17 := @parameter2: org.codehaus.jackson.map.type.CollectionLikeType;

        r7 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType mapAbstractType(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType)>(r1, r17);

        r18 = (org.codehaus.jackson.map.type.CollectionLikeType) $r2;

        $r3 = virtualinvoke r18.<org.codehaus.jackson.map.type.CollectionLikeType: java.lang.Class getRawClass()>();

        $r4 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)>($r3);

        r5 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r4;

        $r6 = virtualinvoke r5.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer findDeserializerFromAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>(r1, $r6, r7);

        if $r8 == null goto label1;

        return $r8;

     label1:
        $r9 = virtualinvoke r5.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r10 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType,java.lang.String)>(r1, $r9, r18, null);

        r19 = (org.codehaus.jackson.map.type.CollectionLikeType) $r10;

        $r11 = virtualinvoke r19.<org.codehaus.jackson.map.type.CollectionLikeType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r12 = virtualinvoke $r11.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        r13 = (org.codehaus.jackson.map.JsonDeserializer) $r12;

        $r14 = virtualinvoke $r11.<org.codehaus.jackson.type.JavaType: java.lang.Object getTypeHandler()>();

        r20 = (org.codehaus.jackson.map.TypeDeserializer) $r14;

        if r20 != null goto label2;

        r20 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, $r11, r7);

     label2:
        $r16 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _findCustomCollectionLikeDeserializer(org.codehaus.jackson.map.type.CollectionLikeType,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.TypeDeserializer,org.codehaus.jackson.map.JsonDeserializer)>(r19, r1, r15, r5, r7, r20, r13);

        return $r16;
    }

    public org.codehaus.jackson.map.JsonDeserializer createMapDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.type.MapType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.deser.std.MapDeserializer $r24;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r4, $r7, $r26;
        boolean $z0, $z1, $z2, $z3;
        org.codehaus.jackson.map.DeserializerProvider r14;
        org.codehaus.jackson.map.AnnotationIntrospector $r25;
        org.codehaus.jackson.map.KeyDeserializer r45;
        java.lang.StringBuilder $r29, $r30, $r31;
        org.codehaus.jackson.map.BeanDescription $r3, $r22;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r42;
        java.util.HashMap $r18;
        java.lang.String[] $r27;
        org.codehaus.jackson.map.DeserializationConfig r1;
        org.codehaus.jackson.map.deser.std.EnumMapDeserializer $r36;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.type.JavaType $r2, $r8, $r9, $r10, $r21;
        org.codehaus.jackson.map.JsonDeserializer $r6, $r15, $r38, r44;
        java.lang.String $r19, $r32;
        org.codehaus.jackson.map.deser.ValueInstantiator $r23;
        java.lang.IllegalArgumentException $r28, $r35;
        org.codehaus.jackson.map.BeanProperty r5;
        org.codehaus.jackson.map.TypeDeserializer $r39, r46;
        org.codehaus.jackson.map.type.MapType r40, r41, r43;
        java.lang.Object $r11, $r12, $r13, $r20;
        java.lang.Class $r16, $r17, $r33, $r34, $r37;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r14 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        r40 := @parameter2: org.codehaus.jackson.map.type.MapType;

        r5 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType mapAbstractType(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType)>(r1, r40);

        r41 = (org.codehaus.jackson.map.type.MapType) $r2;

        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.BeanDescription introspectForCreation(org.codehaus.jackson.type.JavaType)>(r41);

        r42 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r3;

        $r4 = virtualinvoke r42.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer findDeserializerFromAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>(r1, $r4, r5);

        if $r6 == null goto label01;

        return $r6;

     label01:
        $r7 = virtualinvoke r42.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r8 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType,java.lang.String)>(r1, $r7, r41, null);

        r43 = (org.codehaus.jackson.map.type.MapType) $r8;

        $r9 = virtualinvoke r43.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType getKeyType()>();

        $r10 = virtualinvoke r43.<org.codehaus.jackson.map.type.MapType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        r44 = (org.codehaus.jackson.map.JsonDeserializer) $r11;

        $r12 = virtualinvoke $r9.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        r45 = (org.codehaus.jackson.map.KeyDeserializer) $r12;

        if r45 != null goto label02;

        r45 = virtualinvoke r14.<org.codehaus.jackson.map.DeserializerProvider: org.codehaus.jackson.map.KeyDeserializer findKeyDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, $r9, r5);

     label02:
        $r13 = virtualinvoke $r10.<org.codehaus.jackson.type.JavaType: java.lang.Object getTypeHandler()>();

        $r39 = (org.codehaus.jackson.map.TypeDeserializer) $r13;

        r46 = $r39;

        if $r39 != null goto label03;

        r46 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, $r10, r5);

     label03:
        $r15 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _findCustomMapDeserializer(org.codehaus.jackson.map.type.MapType,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.KeyDeserializer,org.codehaus.jackson.map.TypeDeserializer,org.codehaus.jackson.map.JsonDeserializer)>(r43, r1, r14, r42, r5, r45, r46, r44);

        if $r15 == null goto label04;

        return $r15;

     label04:
        if r44 != null goto label05;

        r44 = virtualinvoke r14.<org.codehaus.jackson.map.DeserializerProvider: org.codehaus.jackson.map.JsonDeserializer findValueDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, $r10, r5);

     label05:
        $r16 = virtualinvoke r43.<org.codehaus.jackson.map.type.MapType: java.lang.Class getRawClass()>();

        $r17 = class "Ljava/util/EnumMap;";

        $z0 = virtualinvoke $r17.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r16);

        if $z0 == 0 goto label08;

        $r34 = virtualinvoke $r9.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r34 == null goto label06;

        $z3 = virtualinvoke $r34.<java.lang.Class: boolean isEnum()>();

        if $z3 != 0 goto label07;

     label06:
        $r35 = new java.lang.IllegalArgumentException;

        specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can not construct EnumMap; generic (key) type not available");

        throw $r35;

     label07:
        $r36 = new org.codehaus.jackson.map.deser.std.EnumMapDeserializer;

        $r37 = virtualinvoke $r9.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r38 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer createEnumDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, r14, $r9, r5);

        specialinvoke $r36.<org.codehaus.jackson.map.deser.std.EnumMapDeserializer: void <init>(java.lang.Class,org.codehaus.jackson.map.JsonDeserializer,org.codehaus.jackson.map.JsonDeserializer)>($r37, $r38, r44);

        return $r36;

     label08:
        $z1 = virtualinvoke r43.<org.codehaus.jackson.map.type.MapType: boolean isInterface()>();

        if $z1 != 0 goto label09;

        $z2 = virtualinvoke r43.<org.codehaus.jackson.map.type.MapType: boolean isAbstract()>();

        if $z2 == 0 goto label11;

     label09:
        $r18 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _mapFallbacks>;

        $r19 = virtualinvoke $r16.<java.lang.Class: java.lang.String getName()>();

        $r20 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r19);

        $r33 = (java.lang.Class) $r20;

        if $r33 != null goto label10;

        $r28 = new java.lang.IllegalArgumentException;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not find a deserializer for non-concrete Map type ");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r43);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r32);

        throw $r28;

     label10:
        $r21 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.type.JavaType constructSpecializedType(org.codehaus.jackson.type.JavaType,java.lang.Class)>(r43, $r33);

        r43 = (org.codehaus.jackson.map.type.MapType) $r21;

        $r22 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.BeanDescription introspectForCreation(org.codehaus.jackson.type.JavaType)>(r43);

        r42 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r22;

     label11:
        $r23 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.deser.ValueInstantiator findValueInstantiator(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription)>(r1, r42);

        $r24 = new org.codehaus.jackson.map.deser.std.MapDeserializer;

        specialinvoke $r24.<org.codehaus.jackson.map.deser.std.MapDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.deser.ValueInstantiator,org.codehaus.jackson.map.KeyDeserializer,org.codehaus.jackson.map.JsonDeserializer,org.codehaus.jackson.map.TypeDeserializer)>(r43, $r23, r45, r44, r46);

        $r25 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r26 = virtualinvoke r42.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r27 = virtualinvoke $r25.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.String[] findPropertiesToIgnore(org.codehaus.jackson.map.introspect.AnnotatedClass)>($r26);

        virtualinvoke $r24.<org.codehaus.jackson.map.deser.std.MapDeserializer: void setIgnorableProperties(java.lang.String[])>($r27);

        return $r24;
    }

    public org.codehaus.jackson.map.JsonDeserializer createMapLikeDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.map.type.MapLikeType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r4;
        org.codehaus.jackson.map.DeserializationConfig r1;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r0;
        org.codehaus.jackson.map.type.MapLikeType r19, r20, r21;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r5, $r8;
        org.codehaus.jackson.type.JavaType $r2, $r9, $r10, $r11;
        org.codehaus.jackson.map.JsonDeserializer $r7, r13, $r17;
        org.codehaus.jackson.map.DeserializerProvider r16;
        org.codehaus.jackson.map.BeanProperty r6;
        org.codehaus.jackson.map.TypeDeserializer $r18, r23;
        org.codehaus.jackson.map.KeyDeserializer r22;
        java.lang.Object $r12, $r14, $r15;
        org.codehaus.jackson.map.BeanDescription $r3;

        r0 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r1 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r16 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        r19 := @parameter2: org.codehaus.jackson.map.type.MapLikeType;

        r6 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType mapAbstractType(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType)>(r1, r19);

        r20 = (org.codehaus.jackson.map.type.MapLikeType) $r2;

        $r3 = virtualinvoke r1.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.BeanDescription introspectForCreation(org.codehaus.jackson.type.JavaType)>(r20);

        r4 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r3;

        $r5 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r7 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer findDeserializerFromAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>(r1, $r5, r6);

        if $r7 == null goto label1;

        return $r7;

     label1:
        $r8 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r9 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType,java.lang.String)>(r1, $r8, r20, null);

        r21 = (org.codehaus.jackson.map.type.MapLikeType) $r9;

        $r10 = virtualinvoke r21.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType getKeyType()>();

        $r11 = virtualinvoke r21.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r12 = virtualinvoke $r11.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        r13 = (org.codehaus.jackson.map.JsonDeserializer) $r12;

        $r14 = virtualinvoke $r10.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        r22 = (org.codehaus.jackson.map.KeyDeserializer) $r14;

        if r22 != null goto label2;

        r22 = virtualinvoke r16.<org.codehaus.jackson.map.DeserializerProvider: org.codehaus.jackson.map.KeyDeserializer findKeyDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, $r10, r6);

     label2:
        $r15 = virtualinvoke $r11.<org.codehaus.jackson.type.JavaType: java.lang.Object getTypeHandler()>();

        $r18 = (org.codehaus.jackson.map.TypeDeserializer) $r15;

        r23 = $r18;

        if $r18 != null goto label3;

        r23 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r1, $r11, r6);

     label3:
        $r17 = virtualinvoke r0.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _findCustomMapLikeDeserializer(org.codehaus.jackson.map.type.MapLikeType,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty,org.codehaus.jackson.map.KeyDeserializer,org.codehaus.jackson.map.TypeDeserializer,org.codehaus.jackson.map.JsonDeserializer)>(r21, r1, r16, r4, r6, r22, r23, r13);

        return $r17;
    }

    public org.codehaus.jackson.map.JsonDeserializer createEnumDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.introspect.AnnotatedClass $r5;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.map.DeserializerProvider r28;
        org.codehaus.jackson.map.introspect.AnnotatedMethod r15;
        org.codehaus.jackson.map.AnnotationIntrospector $r16;
        java.util.List $r10;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r23, $r24;
        org.codehaus.jackson.map.BeanDescription $r2;
        org.codehaus.jackson.map.deser.std.EnumDeserializer $r12;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r3;
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r4;
        int $i0;
        org.codehaus.jackson.type.JavaType r1;
        org.codehaus.jackson.map.JsonDeserializer $r7, $r9, $r27;
        java.lang.String $r22, $r25;
        org.codehaus.jackson.map.util.EnumResolver $r13;
        java.util.Iterator $r11;
        java.lang.IllegalArgumentException $r17;
        org.codehaus.jackson.map.BeanProperty r6;
        java.lang.Class $r8, $r26;
        java.lang.Object $r14;

        r4 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r0 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r28 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        r1 := @parameter2: org.codehaus.jackson.type.JavaType;

        r6 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r2 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.BeanDescription introspectForCreation(org.codehaus.jackson.type.JavaType)>(r1);

        r3 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r2;

        $r5 = virtualinvoke r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r7 = virtualinvoke r4.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer findDeserializerFromAnnotation(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty)>(r0, $r5, r6);

        if $r7 == null goto label1;

        return $r7;

     label1:
        $r8 = virtualinvoke r1.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r9 = virtualinvoke r4.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _findCustomEnumDeserializer(java.lang.Class,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.BasicBeanDescription,org.codehaus.jackson.map.BeanProperty)>($r8, r0, r3, r6);

        if $r9 == null goto label2;

        return $r9;

     label2:
        $r10 = virtualinvoke r3.<org.codehaus.jackson.map.introspect.BasicBeanDescription: java.util.List getFactoryMethods()>();

        $r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r14 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r15 = (org.codehaus.jackson.map.introspect.AnnotatedMethod) $r14;

        $r16 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $z1 = virtualinvoke $r16.<org.codehaus.jackson.map.AnnotationIntrospector: boolean hasCreatorAnnotation(org.codehaus.jackson.map.introspect.Annotated)>(r15);

        if $z1 == 0 goto label5;

        $i0 = virtualinvoke r15.<org.codehaus.jackson.map.introspect.AnnotatedMethod: int getParameterCount()>();

        if $i0 != 1 goto label4;

        $r26 = virtualinvoke r15.<org.codehaus.jackson.map.introspect.AnnotatedMethod: java.lang.Class getRawType()>();

        $z2 = virtualinvoke $r26.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r8);

        if $z2 == 0 goto label4;

        $r27 = staticinvoke <org.codehaus.jackson.map.deser.std.EnumDeserializer: org.codehaus.jackson.map.JsonDeserializer deserializerForCreator(org.codehaus.jackson.map.DeserializationConfig,java.lang.Class,org.codehaus.jackson.map.introspect.AnnotatedMethod)>(r0, $r8, r15);

        return $r27;

     label4:
        $r17 = new java.lang.IllegalArgumentException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsuitable method (");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") decorated with @JsonCreator (for Enum type ");

        $r22 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r17;

     label5:
        goto label3;

     label6:
        $r12 = new org.codehaus.jackson.map.deser.std.EnumDeserializer;

        $r13 = virtualinvoke r4.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.util.EnumResolver constructEnumResolver(java.lang.Class,org.codehaus.jackson.map.DeserializationConfig)>($r8, r0);

        specialinvoke $r12.<org.codehaus.jackson.map.deser.std.EnumDeserializer: void <init>(org.codehaus.jackson.map.util.EnumResolver)>($r13);

        return $r12;
    }

    public org.codehaus.jackson.map.JsonDeserializer createTreeDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.DeserializerProvider r7;
        org.codehaus.jackson.map.DeserializationConfig r3;
        org.codehaus.jackson.map.BeanProperty r4;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r2;
        org.codehaus.jackson.type.JavaType r0;
        java.lang.Class $r1;
        org.codehaus.jackson.map.JsonDeserializer $r5, $r6;

        r2 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r3 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r7 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        r0 := @parameter2: org.codehaus.jackson.type.JavaType;

        r4 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r5 = virtualinvoke r2.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _findCustomTreeNodeDeserializer(java.lang.Class,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.BeanProperty)>($r1, r3, r4);

        if $r5 == null goto label1;

        return $r5;

     label1:
        $r6 = staticinvoke <org.codehaus.jackson.map.deser.std.JsonNodeDeserializer: org.codehaus.jackson.map.JsonDeserializer getDeserializer(java.lang.Class)>($r1);

        return $r6;
    }

    protected org.codehaus.jackson.map.JsonDeserializer findStdBeanDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.DeserializerProvider, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        java.util.HashMap $r3;
        org.codehaus.jackson.map.DeserializationConfig r8;
        org.codehaus.jackson.map.type.TypeFactory $r12;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r7;
        int $i0;
        org.codehaus.jackson.type.JavaType r0, r16;
        org.codehaus.jackson.map.JsonDeserializer r5, $r11;
        org.codehaus.jackson.map.type.ClassKey $r2;
        boolean $z0;
        org.codehaus.jackson.map.DeserializerProvider r9;
        org.codehaus.jackson.type.JavaType[] $r13;
        org.codehaus.jackson.map.BeanProperty r15;
        org.codehaus.jackson.map.deser.std.AtomicReferenceDeserializer $r14;
        java.lang.Class $r1, $r6;
        java.lang.Object $r4;
        org.codehaus.jackson.map.ext.OptionalHandlerFactory $r10;

        r7 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r8 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r9 := @parameter1: org.codehaus.jackson.map.DeserializerProvider;

        r0 := @parameter2: org.codehaus.jackson.type.JavaType;

        r15 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r3 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _simpleDeserializers>;

        $r2 = new org.codehaus.jackson.map.type.ClassKey;

        specialinvoke $r2.<org.codehaus.jackson.map.type.ClassKey: void <init>(java.lang.Class)>($r1);

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (org.codehaus.jackson.map.JsonDeserializer) $r4;

        if r5 == null goto label1;

        return r5;

     label1:
        $r6 = class "Ljava/util/concurrent/atomic/AtomicReference;";

        $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r1);

        if $z0 == 0 goto label5;

        $r12 = virtualinvoke r8.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.type.TypeFactory getTypeFactory()>();

        $r13 = virtualinvoke $r12.<org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType[] findTypeParameters(org.codehaus.jackson.type.JavaType,java.lang.Class)>(r0, class "Ljava/util/concurrent/atomic/AtomicReference;");

        if $r13 == null goto label2;

        $i0 = lengthof $r13;

        if $i0 >= 1 goto label3;

     label2:
        r16 = staticinvoke <org.codehaus.jackson.map.type.TypeFactory: org.codehaus.jackson.type.JavaType unknownType()>();

        goto label4;

     label3:
        r16 = $r13[0];

     label4:
        $r14 = new org.codehaus.jackson.map.deser.std.AtomicReferenceDeserializer;

        specialinvoke $r14.<org.codehaus.jackson.map.deser.std.AtomicReferenceDeserializer: void <init>(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r16, r15);

        return $r14;

     label5:
        $r10 = r7.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.ext.OptionalHandlerFactory optionalHandlers>;

        $r11 = virtualinvoke $r10.<org.codehaus.jackson.map.ext.OptionalHandlerFactory: org.codehaus.jackson.map.JsonDeserializer findDeserializer(org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.DeserializerProvider)>(r0, r8, r9);

        if $r11 == null goto label6;

        return $r11;

     label6:
        return null;
    }

    public org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r8;
        org.codehaus.jackson.map.introspect.BasicBeanDescription r4;
        org.codehaus.jackson.map.DeserializationConfig r2;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r11;
        org.codehaus.jackson.map.introspect.AnnotatedClass $r5;
        org.codehaus.jackson.type.JavaType r0, $r12;
        boolean $z0;
        java.util.Collection r18;
        org.codehaus.jackson.map.AnnotationIntrospector $r6;
        org.codehaus.jackson.map.BeanProperty r10;
        org.codehaus.jackson.map.TypeDeserializer $r19;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r7, $r16, r17;
        java.lang.Class $r1, $r9, $r13, $r14, $r15;
        org.codehaus.jackson.map.BeanDescription $r3;

        r11 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r2 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r0 := @parameter1: org.codehaus.jackson.type.JavaType;

        r10 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r3 = virtualinvoke r2.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.BeanDescription introspectClassAnnotations(java.lang.Class)>($r1);

        r4 = (org.codehaus.jackson.map.introspect.BasicBeanDescription) $r3;

        $r5 = virtualinvoke r4.<org.codehaus.jackson.map.introspect.BasicBeanDescription: org.codehaus.jackson.map.introspect.AnnotatedClass getClassInfo()>();

        $r6 = virtualinvoke r2.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder findTypeResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.type.JavaType)>(r2, $r5, r0);

        r17 = $r7;

        r18 = null;

        if $r7 != null goto label1;

        $r16 = virtualinvoke r2.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.TypeResolverBuilder getDefaultTyper(org.codehaus.jackson.type.JavaType)>(r0);

        r17 = $r16;

        if $r16 != null goto label2;

        return null;

     label1:
        $r8 = virtualinvoke r2.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()>();

        r18 = virtualinvoke $r8.<org.codehaus.jackson.map.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedClass,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector)>($r5, r2, $r6);

     label2:
        $r9 = interfaceinvoke r17.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: java.lang.Class getDefaultImpl()>();

        if $r9 != null goto label3;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: boolean isAbstract()>();

        if $z0 == 0 goto label3;

        $r12 = virtualinvoke r11.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.type.JavaType mapAbstractType(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType)>(r2, r0);

        if $r12 == null goto label3;

        $r13 = virtualinvoke $r12.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        $r14 = virtualinvoke r0.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        if $r13 == $r14 goto label3;

        $r15 = virtualinvoke $r12.<org.codehaus.jackson.type.JavaType: java.lang.Class getRawClass()>();

        r17 = interfaceinvoke r17.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.jsontype.TypeResolverBuilder defaultImpl(java.lang.Class)>($r15);

     label3:
        $r19 = interfaceinvoke r17.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.TypeDeserializer buildTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>(r2, r0, r18, r10);

        return $r19;
    }

    public org.codehaus.jackson.map.TypeDeserializer findPropertyTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r5;
        java.util.Collection $r6;
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.BeanProperty r7;
        org.codehaus.jackson.map.TypeDeserializer $r8, $r10;
        org.codehaus.jackson.map.introspect.AnnotatedMember r2;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r9;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r4;
        org.codehaus.jackson.type.JavaType r3;

        r9 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r0 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r3 := @parameter1: org.codehaus.jackson.type.JavaType;

        r2 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedMember;

        r7 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder findPropertyTypeResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.type.JavaType)>(r0, r2, r3);

        if $r4 != null goto label1;

        $r10 = virtualinvoke r9.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r0, r3, r7);

        return $r10;

     label1:
        $r5 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()>();

        $r6 = virtualinvoke $r5.<org.codehaus.jackson.map.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector)>(r2, r0, $r1);

        $r8 = interfaceinvoke $r4.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.TypeDeserializer buildTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>(r0, r3, $r6, r7);

        return $r8;
    }

    public org.codehaus.jackson.map.TypeDeserializer findPropertyContentTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.jsontype.SubtypeResolver $r6;
        java.util.Collection $r7;
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.BeanProperty r8;
        org.codehaus.jackson.map.TypeDeserializer $r9, $r11;
        org.codehaus.jackson.map.introspect.AnnotatedMember r2;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r10;
        org.codehaus.jackson.map.jsontype.TypeResolverBuilder $r4;
        org.codehaus.jackson.type.JavaType r3, $r5;

        r10 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r0 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r3 := @parameter1: org.codehaus.jackson.type.JavaType;

        r2 := @parameter2: org.codehaus.jackson.map.introspect.AnnotatedMember;

        r8 := @parameter3: org.codehaus.jackson.map.BeanProperty;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: org.codehaus.jackson.map.jsontype.TypeResolverBuilder findPropertyContentTypeResolver(org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.type.JavaType)>(r0, r2, r3);

        $r5 = virtualinvoke r3.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        if $r4 != null goto label1;

        $r11 = virtualinvoke r10.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r0, $r5, r8);

        return $r11;

     label1:
        $r6 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.jsontype.SubtypeResolver getSubtypeResolver()>();

        $r7 = virtualinvoke $r6.<org.codehaus.jackson.map.jsontype.SubtypeResolver: java.util.Collection collectAndResolveSubtypes(org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.MapperConfig,org.codehaus.jackson.map.AnnotationIntrospector)>(r2, r0, $r1);

        $r9 = interfaceinvoke $r4.<org.codehaus.jackson.map.jsontype.TypeResolverBuilder: org.codehaus.jackson.map.TypeDeserializer buildTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,java.util.Collection,org.codehaus.jackson.map.BeanProperty)>(r0, $r5, $r7, r8);

        return $r9;
    }

    protected org.codehaus.jackson.map.JsonDeserializer findDeserializerFromAnnotation(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.introspect.Annotated r2;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r4;
        java.lang.Object $r3;
        org.codehaus.jackson.map.JsonDeserializer $r6;
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        org.codehaus.jackson.map.BeanProperty r5;

        r4 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r0 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        r5 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r3 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Object findDeserializer(org.codehaus.jackson.map.introspect.Annotated)>(r2);

        if $r3 == null goto label1;

        $r6 = virtualinvoke r4.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.JsonDeserializer _constructDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.map.BeanProperty,java.lang.Object)>(r0, r2, r5, $r3);

        return $r6;

     label1:
        return null;
    }

    org.codehaus.jackson.map.JsonDeserializer _constructDeserializer(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.map.BeanProperty, java.lang.Object) throws org.codehaus.jackson.map.JsonMappingException
    {
        java.lang.IllegalStateException $r7, $r14;
        org.codehaus.jackson.map.introspect.Annotated r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.codehaus.jackson.map.ContextualDeserializer $r6, $r22;
        java.lang.StringBuilder $r8, $r9, $r11, $r12, $r15, $r16, $r19, $r20;
        org.codehaus.jackson.map.DeserializationConfig r2;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r23;
        org.codehaus.jackson.map.JsonDeserializer $r4, r24, r26;
        java.lang.String $r10, $r13, $r18, $r21;
        org.codehaus.jackson.map.BeanProperty r5;
        java.lang.Object r0;
        java.lang.Class $r1, $r17, r25;

        r23 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r2 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r3 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        r5 := @parameter2: org.codehaus.jackson.map.BeanProperty;

        r0 := @parameter3: java.lang.Object;

        $z0 = r0 instanceof org.codehaus.jackson.map.JsonDeserializer;

        if $z0 == 0 goto label2;

        r24 = (org.codehaus.jackson.map.JsonDeserializer) r0;

        $z4 = r24 instanceof org.codehaus.jackson.map.ContextualDeserializer;

        if $z4 == 0 goto label1;

        $r22 = (org.codehaus.jackson.map.ContextualDeserializer) r24;

        r24 = interfaceinvoke $r22.<org.codehaus.jackson.map.ContextualDeserializer: org.codehaus.jackson.map.JsonDeserializer createContextual(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.BeanProperty)>(r2, r5);

     label1:
        return r24;

     label2:
        $z1 = r0 instanceof java.lang.Class;

        if $z1 != 0 goto label3;

        $r14 = new java.lang.IllegalStateException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AnnotationIntrospector returned deserializer definition of type ");

        $r17 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; expected type JsonDeserializer or Class<JsonDeserializer> instead");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw $r14;

     label3:
        r25 = (java.lang.Class) r0;

        $r1 = class "Lorg/codehaus/jackson/map/JsonDeserializer;";

        $z2 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r25);

        if $z2 != 0 goto label4;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AnnotationIntrospector returned Class ");

        $r10 = virtualinvoke r25.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; expected Class<JsonDeserializer>");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r7;

     label4:
        $r4 = virtualinvoke r2.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.JsonDeserializer deserializerInstance(org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>(r3, r25);

        r26 = $r4;

        $z3 = $r4 instanceof org.codehaus.jackson.map.ContextualDeserializer;

        if $z3 == 0 goto label5;

        $r6 = (org.codehaus.jackson.map.ContextualDeserializer) $r4;

        r26 = interfaceinvoke $r6.<org.codehaus.jackson.map.ContextualDeserializer: org.codehaus.jackson.map.JsonDeserializer createContextual(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.map.BeanProperty)>(r2, r5);

     label5:
        return r26;
    }

    protected org.codehaus.jackson.type.JavaType modifyTypeByAnnotation(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.introspect.Annotated, org.codehaus.jackson.type.JavaType, java.lang.String) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.introspect.Annotated r2;
        org.codehaus.jackson.map.AnnotationIntrospector $r1;
        java.lang.StringBuilder $r18, $r19, $r20, $r21, $r25, $r26, $r27, $r28, $r30, $r31, $r33, $r37, $r38, $r39, $r40, $r42, $r43, $r45, $r49, $r50, $r51, $r52, $r54, $r55, $r57, $r58, $r60;
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.type.MapLikeType $r16;
        org.codehaus.jackson.map.JsonDeserializer $r11;
        java.lang.String r3, $r22, $r29, $r32, $r34, $r41, $r44, $r46, $r53, $r56, $r59, $r61;
        boolean $z0, $z1;
        org.codehaus.jackson.map.KeyDeserializer $r15;
        org.codehaus.jackson.map.JsonMappingException $r17, $r24, $r36, $r48;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r62;
        org.codehaus.jackson.type.JavaType $r5, $r7, $r8, $r12, r63, $r64;
        java.lang.IllegalArgumentException $r23, $r35, $r47;
        java.lang.Class $r4, $r6, $r10, $r14, $r65;
        java.lang.Object $r9, $r13;

        r62 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r0 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r2 := @parameter1: org.codehaus.jackson.map.introspect.Annotated;

        r63 := @parameter2: org.codehaus.jackson.type.JavaType;

        r3 := @parameter3: java.lang.String;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r4 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findDeserializationType(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType,java.lang.String)>(r2, r63, r3);

        if $r4 == null goto label04;

     label01:
        r63 = virtualinvoke r63.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowBy(java.lang.Class)>($r4);

     label02:
        goto label04;

     label03:
        $r47 := @caughtexception;

        $r48 = new org.codehaus.jackson.map.JsonMappingException;

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to narrow type ");

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r63);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with concrete-type annotation (value ");

        $r53 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r54 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), method \'");

        $r56 = virtualinvoke r2.<org.codehaus.jackson.map.introspect.Annotated: java.lang.String getName()>();

        $r57 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\': ");

        $r59 = virtualinvoke $r47.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r60 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r59);

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r48.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation,java.lang.Throwable)>($r61, null, $r47);

        throw $r48;

     label04:
        $z0 = virtualinvoke r63.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z0 == 0 goto label14;

        $r5 = virtualinvoke r63.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getKeyType()>();

        $r6 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findDeserializationKeyType(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType,java.lang.String)>(r2, $r5, r3);

        if $r6 == null goto label08;

        $z1 = r63 instanceof org.codehaus.jackson.map.type.MapLikeType;

        if $z1 != 0 goto label05;

        $r17 = new org.codehaus.jackson.map.JsonMappingException;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal key-type annotation: type ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r63);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a Map(-like) type");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String)>($r22);

        throw $r17;

     label05:
        $r16 = (org.codehaus.jackson.map.type.MapLikeType) r63;

        r63 = virtualinvoke $r16.<org.codehaus.jackson.map.type.MapLikeType: org.codehaus.jackson.type.JavaType narrowKey(java.lang.Class)>($r6);

     label06:
        goto label08;

     label07:
        $r35 := @caughtexception;

        $r36 = new org.codehaus.jackson.map.JsonMappingException;

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to narrow key type ");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r63);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with key-type annotation (");

        $r41 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r44 = virtualinvoke $r35.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation,java.lang.Throwable)>($r46, null, $r35);

        throw $r36;

     label08:
        $r7 = virtualinvoke r63.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getKeyType()>();

        if $r7 == null goto label09;

        $r13 = virtualinvoke $r7.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        if $r13 != null goto label09;

        $r14 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findKeyDeserializer(org.codehaus.jackson.map.introspect.Annotated)>(r2);

        if $r14 == null goto label09;

        if $r14 == class "Lorg/codehaus/jackson/map/KeyDeserializer$None;" goto label09;

        $r15 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.KeyDeserializer keyDeserializerInstance(org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>(r2, $r14);

        virtualinvoke $r7.<org.codehaus.jackson.type.JavaType: void setValueHandler(java.lang.Object)>($r15);

     label09:
        $r64 = virtualinvoke r63.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r65 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findDeserializationContentType(org.codehaus.jackson.map.introspect.Annotated,org.codehaus.jackson.type.JavaType,java.lang.String)>(r2, $r64, r3);

        if $r65 == null goto label13;

     label10:
        r63 = virtualinvoke r63.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType narrowContentsBy(java.lang.Class)>($r65);

     label11:
        goto label13;

     label12:
        $r23 := @caughtexception;

        $r24 = new org.codehaus.jackson.map.JsonMappingException;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to narrow content type ");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r63);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with content-type annotation (");

        $r29 = virtualinvoke $r65.<java.lang.Class: java.lang.String getName()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r32 = virtualinvoke $r23.<java.lang.IllegalArgumentException: java.lang.String getMessage()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<org.codehaus.jackson.map.JsonMappingException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation,java.lang.Throwable)>($r34, null, $r23);

        throw $r24;

     label13:
        $r8 = virtualinvoke r63.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        $r9 = virtualinvoke $r8.<org.codehaus.jackson.type.JavaType: java.lang.Object getValueHandler()>();

        if $r9 != null goto label14;

        $r10 = virtualinvoke $r1.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findContentDeserializer(org.codehaus.jackson.map.introspect.Annotated)>(r2);

        if $r10 == null goto label14;

        if $r10 == class "Lorg/codehaus/jackson/map/JsonDeserializer$None;" goto label14;

        $r11 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.JsonDeserializer deserializerInstance(org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>(r2, $r10);

        $r12 = virtualinvoke r63.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        virtualinvoke $r12.<org.codehaus.jackson.type.JavaType: void setValueHandler(java.lang.Object)>($r11);

     label14:
        return r63;

        catch java.lang.IllegalArgumentException from label01 to label02 with label03;
        catch java.lang.IllegalArgumentException from label05 to label06 with label07;
        catch java.lang.IllegalArgumentException from label10 to label11 with label12;
    }

    protected org.codehaus.jackson.type.JavaType resolveType(org.codehaus.jackson.map.DeserializationConfig, org.codehaus.jackson.map.introspect.BasicBeanDescription, org.codehaus.jackson.type.JavaType, org.codehaus.jackson.map.introspect.AnnotatedMember, org.codehaus.jackson.map.BeanProperty) throws org.codehaus.jackson.map.JsonMappingException
    {
        org.codehaus.jackson.map.introspect.BasicBeanDescription r11;
        org.codehaus.jackson.map.DeserializationConfig r2;
        org.codehaus.jackson.map.introspect.AnnotatedMember r0;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r1;
        org.codehaus.jackson.type.JavaType $r5, $r8, r12;
        org.codehaus.jackson.map.JsonDeserializer $r7;
        boolean $z0, $z1, $z2;
        org.codehaus.jackson.map.BeanProperty r3;
        org.codehaus.jackson.map.AnnotationIntrospector $r4;
        org.codehaus.jackson.map.TypeDeserializer $r6, r14;
        org.codehaus.jackson.map.KeyDeserializer $r10;
        java.lang.Class $r9, $r13;

        r1 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r2 := @parameter0: org.codehaus.jackson.map.DeserializationConfig;

        r11 := @parameter1: org.codehaus.jackson.map.introspect.BasicBeanDescription;

        r12 := @parameter2: org.codehaus.jackson.type.JavaType;

        r0 := @parameter3: org.codehaus.jackson.map.introspect.AnnotatedMember;

        r3 := @parameter4: org.codehaus.jackson.map.BeanProperty;

        $z0 = virtualinvoke r12.<org.codehaus.jackson.type.JavaType: boolean isContainerType()>();

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r2.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r5 = virtualinvoke r12.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getKeyType()>();

        if $r5 == null goto label1;

        $r9 = virtualinvoke $r4.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findKeyDeserializer(org.codehaus.jackson.map.introspect.Annotated)>(r0);

        if $r9 == null goto label1;

        if $r9 == class "Lorg/codehaus/jackson/map/KeyDeserializer$None;" goto label1;

        $r10 = virtualinvoke r2.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.KeyDeserializer keyDeserializerInstance(org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>(r0, $r9);

        virtualinvoke $r5.<org.codehaus.jackson.type.JavaType: void setValueHandler(java.lang.Object)>($r10);

     label1:
        $r13 = virtualinvoke $r4.<org.codehaus.jackson.map.AnnotationIntrospector: java.lang.Class findContentDeserializer(org.codehaus.jackson.map.introspect.Annotated)>(r0);

        if $r13 == null goto label2;

        if $r13 == class "Lorg/codehaus/jackson/map/JsonDeserializer$None;" goto label2;

        $r7 = virtualinvoke r2.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.JsonDeserializer deserializerInstance(org.codehaus.jackson.map.introspect.Annotated,java.lang.Class)>(r0, $r13);

        $r8 = virtualinvoke r12.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType getContentType()>();

        virtualinvoke $r8.<org.codehaus.jackson.type.JavaType: void setValueHandler(java.lang.Object)>($r7);

     label2:
        $z1 = r0 instanceof org.codehaus.jackson.map.introspect.AnnotatedMember;

        if $z1 == 0 goto label3;

        $r6 = virtualinvoke r1.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findPropertyContentTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.BeanProperty)>(r2, r12, r0, r3);

        if $r6 == null goto label3;

        r12 = virtualinvoke r12.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withContentTypeHandler(java.lang.Object)>($r6);

     label3:
        $z2 = r0 instanceof org.codehaus.jackson.map.introspect.AnnotatedMember;

        if $z2 == 0 goto label4;

        r14 = virtualinvoke r1.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findPropertyTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.introspect.AnnotatedMember,org.codehaus.jackson.map.BeanProperty)>(r2, r12, r0, r3);

        goto label5;

     label4:
        r14 = virtualinvoke r1.<org.codehaus.jackson.map.deser.BasicDeserializerFactory: org.codehaus.jackson.map.TypeDeserializer findTypeDeserializer(org.codehaus.jackson.map.DeserializationConfig,org.codehaus.jackson.type.JavaType,org.codehaus.jackson.map.BeanProperty)>(r2, r12, null);

     label5:
        if r14 == null goto label6;

        r12 = virtualinvoke r12.<org.codehaus.jackson.type.JavaType: org.codehaus.jackson.type.JavaType withTypeHandler(java.lang.Object)>(r14);

     label6:
        return r12;
    }

    protected org.codehaus.jackson.map.util.EnumResolver constructEnumResolver(java.lang.Class, org.codehaus.jackson.map.DeserializationConfig)
    {
        org.codehaus.jackson.map.DeserializationConfig$Feature $r1;
        org.codehaus.jackson.map.DeserializationConfig r0;
        org.codehaus.jackson.map.AnnotationIntrospector $r3;
        org.codehaus.jackson.map.deser.BasicDeserializerFactory r6;
        java.lang.Class r2;
        org.codehaus.jackson.map.util.EnumResolver $r4, $r5;
        boolean $z0;

        r6 := @this: org.codehaus.jackson.map.deser.BasicDeserializerFactory;

        r2 := @parameter0: java.lang.Class;

        r0 := @parameter1: org.codehaus.jackson.map.DeserializationConfig;

        $r1 = <org.codehaus.jackson.map.DeserializationConfig$Feature: org.codehaus.jackson.map.DeserializationConfig$Feature READ_ENUMS_USING_TO_STRING>;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: boolean isEnabled(org.codehaus.jackson.map.DeserializationConfig$Feature)>($r1);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <org.codehaus.jackson.map.util.EnumResolver: org.codehaus.jackson.map.util.EnumResolver constructUnsafeUsingToString(java.lang.Class)>(r2);

        return $r5;

     label1:
        $r3 = virtualinvoke r0.<org.codehaus.jackson.map.DeserializationConfig: org.codehaus.jackson.map.AnnotationIntrospector getAnnotationIntrospector()>();

        $r4 = staticinvoke <org.codehaus.jackson.map.util.EnumResolver: org.codehaus.jackson.map.util.EnumResolver constructUnsafe(java.lang.Class,org.codehaus.jackson.map.AnnotationIntrospector)>(r2, $r3);

        return $r4;
    }

    static void <clinit>()
    {
        java.lang.SecurityException $r17;
        java.util.HashMap $r0, $r1, $r2, $r4, $r7, $r10, $r12, $r15, $r19, $r20, $r23, $r26, $r29, $r32, $r35, $r36, $r37;
        java.lang.String $r5, $r8, $r11, $r16, $r22, $r25, $r28, $r31, $r34;
        java.lang.Class $r3, $r6, $r9, $r13, $r14, $r21, $r24, $r27, $r30, $r33;
        java.lang.ClassNotFoundException $r18;

        $r0 = staticinvoke <org.codehaus.jackson.map.deser.StdDeserializers: java.util.HashMap constructAll()>();

        <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _simpleDeserializers> = $r0;

        $r1 = staticinvoke <org.codehaus.jackson.map.deser.std.StdKeyDeserializers: java.util.HashMap constructAll()>();

        <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _keyDeserializers> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _mapFallbacks> = $r2;

        $r4 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _mapFallbacks>;

        $r3 = class "Ljava/util/Map;";

        $r5 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, class "Ljava/util/LinkedHashMap;");

        $r7 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _mapFallbacks>;

        $r6 = class "Ljava/util/concurrent/ConcurrentMap;";

        $r8 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, class "Ljava/util/concurrent/ConcurrentHashMap;");

        $r10 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _mapFallbacks>;

        $r9 = class "Ljava/util/SortedMap;";

        $r11 = virtualinvoke $r9.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, class "Ljava/util/TreeMap;");

        $r12 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _mapFallbacks>;

        virtualinvoke $r12.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.NavigableMap", class "Ljava/util/TreeMap;");

     label1:
        $r13 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.util.concurrent.ConcurrentNavigableMap");

        $r14 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("java.util.concurrent.ConcurrentSkipListMap");

        $r15 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _mapFallbacks>;

        $r16 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r15.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, $r14);

     label2:
        goto label5;

     label3:
        $r18 := @caughtexception;

        goto label5;

     label4:
        $r17 := @caughtexception;

     label5:
        $r19 = new java.util.HashMap;

        specialinvoke $r19.<java.util.HashMap: void <init>()>();

        <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks> = $r19;

        $r20 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        $r21 = class "Ljava/util/Collection;";

        $r22 = virtualinvoke $r21.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r20.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, class "Ljava/util/ArrayList;");

        $r23 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        $r24 = class "Ljava/util/List;";

        $r25 = virtualinvoke $r24.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r23.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, class "Ljava/util/ArrayList;");

        $r26 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        $r27 = class "Ljava/util/Set;";

        $r28 = virtualinvoke $r27.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r26.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, class "Ljava/util/HashSet;");

        $r29 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        $r30 = class "Ljava/util/SortedSet;";

        $r31 = virtualinvoke $r30.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r29.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, class "Ljava/util/TreeSet;");

        $r32 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        $r33 = class "Ljava/util/Queue;";

        $r34 = virtualinvoke $r33.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r32.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, class "Ljava/util/LinkedList;");

        $r35 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        virtualinvoke $r35.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.Deque", class "Ljava/util/LinkedList;");

        $r36 = <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _collectionFallbacks>;

        virtualinvoke $r36.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("java.util.NavigableSet", class "Ljava/util/TreeSet;");

        $r37 = staticinvoke <org.codehaus.jackson.map.deser.std.PrimitiveArrayDeserializers: java.util.HashMap getAll()>();

        <org.codehaus.jackson.map.deser.BasicDeserializerFactory: java.util.HashMap _arrayDeserializers> = $r37;

        return;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
        catch java.lang.SecurityException from label1 to label2 with label4;
    }
}
