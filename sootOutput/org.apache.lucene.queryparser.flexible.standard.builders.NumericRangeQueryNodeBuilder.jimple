public class org.apache.lucene.queryparser.flexible.standard.builders.NumericRangeQueryNodeBuilder extends java.lang.Object implements org.apache.lucene.queryparser.flexible.standard.builders.StandardQueryBuilder
{

    public void <init>()
    {
        org.apache.lucene.queryparser.flexible.standard.builders.NumericRangeQueryNodeBuilder r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.NumericRangeQueryNodeBuilder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public org.apache.lucene.search.NumericRangeQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        java.lang.Float $r16, $r17;
        org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode r1;
        java.lang.Integer $r19, $r20;
        int[] $r12;
        java.lang.Long $r22, $r23;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r0;
        boolean $z0, $z1;
        org.apache.lucene.document.FieldType$NumericType $r9;
        java.lang.CharSequence $r10;
        org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode $r2, $r4;
        org.apache.lucene.queryparser.flexible.core.QueryNodeException $r25;
        org.apache.lucene.queryparser.flexible.messages.MessageImpl $r26;
        org.apache.lucene.search.NumericRangeQuery $r15, $r18, $r21, $r24;
        java.lang.Object[] $r27;
        java.lang.Double $r13, $r14;
        org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode r3, r5;
        int $i0, $i1, $i2;
        java.lang.String $r11, $r28;
        java.lang.Number $r6, $r7;
        org.apache.lucene.queryparser.flexible.standard.builders.NumericRangeQueryNodeBuilder r29;
        org.apache.lucene.queryparser.flexible.standard.config.NumericConfig $r8;

        r29 := @this: org.apache.lucene.queryparser.flexible.standard.builders.NumericRangeQueryNodeBuilder;

        r0 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        r1 = (org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode) r0;

        $r2 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getLowerBound()>();

        r3 = (org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode) $r2;

        $r4 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: org.apache.lucene.queryparser.flexible.core.nodes.FieldValuePairQueryNode getUpperBound()>();

        r5 = (org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode) $r4;

        $r6 = virtualinvoke r3.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode: java.lang.Number getValue()>();

        $r7 = virtualinvoke r5.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericQueryNode: java.lang.Number getValue()>();

        $r8 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: org.apache.lucene.queryparser.flexible.standard.config.NumericConfig getNumericConfig()>();

        $r9 = virtualinvoke $r8.<org.apache.lucene.queryparser.flexible.standard.config.NumericConfig: org.apache.lucene.document.FieldType$NumericType getType()>();

        $r10 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: java.lang.CharSequence getField()>();

        $r11 = staticinvoke <org.apache.lucene.queryparser.flexible.core.util.StringUtils: java.lang.String toString(java.lang.Object)>($r10);

        $z0 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: boolean isLowerInclusive()>();

        $z1 = virtualinvoke r1.<org.apache.lucene.queryparser.flexible.standard.nodes.NumericRangeQueryNode: boolean isUpperInclusive()>();

        $i0 = virtualinvoke $r8.<org.apache.lucene.queryparser.flexible.standard.config.NumericConfig: int getPrecisionStep()>();

        $r12 = <org.apache.lucene.queryparser.flexible.standard.builders.NumericRangeQueryNodeBuilder$1: int[] $SwitchMap$org$apache$lucene$document$FieldType$NumericType>;

        $i1 = virtualinvoke $r9.<org.apache.lucene.document.FieldType$NumericType: int ordinal()>();

        $i2 = $r12[$i1];

        tableswitch($i2)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            default: goto label5;
        };

     label1:
        $r23 = (java.lang.Long) $r6;

        $r22 = (java.lang.Long) $r7;

        $r24 = staticinvoke <org.apache.lucene.search.NumericRangeQuery: org.apache.lucene.search.NumericRangeQuery newLongRange(java.lang.String,int,java.lang.Long,java.lang.Long,boolean,boolean)>($r11, $i0, $r23, $r22, $z0, $z1);

        return $r24;

     label2:
        $r20 = (java.lang.Integer) $r6;

        $r19 = (java.lang.Integer) $r7;

        $r21 = staticinvoke <org.apache.lucene.search.NumericRangeQuery: org.apache.lucene.search.NumericRangeQuery newIntRange(java.lang.String,int,java.lang.Integer,java.lang.Integer,boolean,boolean)>($r11, $i0, $r20, $r19, $z0, $z1);

        return $r21;

     label3:
        $r17 = (java.lang.Float) $r6;

        $r16 = (java.lang.Float) $r7;

        $r18 = staticinvoke <org.apache.lucene.search.NumericRangeQuery: org.apache.lucene.search.NumericRangeQuery newFloatRange(java.lang.String,int,java.lang.Float,java.lang.Float,boolean,boolean)>($r11, $i0, $r17, $r16, $z0, $z1);

        return $r18;

     label4:
        $r14 = (java.lang.Double) $r6;

        $r13 = (java.lang.Double) $r7;

        $r15 = staticinvoke <org.apache.lucene.search.NumericRangeQuery: org.apache.lucene.search.NumericRangeQuery newDoubleRange(java.lang.String,int,java.lang.Double,java.lang.Double,boolean,boolean)>($r11, $i0, $r14, $r13, $z0, $z1);

        return $r15;

     label5:
        $r25 = new org.apache.lucene.queryparser.flexible.core.QueryNodeException;

        $r26 = new org.apache.lucene.queryparser.flexible.messages.MessageImpl;

        $r28 = <org.apache.lucene.queryparser.flexible.core.messages.QueryParserMessages: java.lang.String UNSUPPORTED_NUMERIC_DATA_TYPE>;

        $r27 = newarray (java.lang.Object)[1];

        $r27[0] = $r9;

        specialinvoke $r26.<org.apache.lucene.queryparser.flexible.messages.MessageImpl: void <init>(java.lang.String,java.lang.Object[])>($r28, $r27);

        specialinvoke $r25.<org.apache.lucene.queryparser.flexible.core.QueryNodeException: void <init>(org.apache.lucene.queryparser.flexible.messages.Message)>($r26);

        throw $r25;
    }

    public volatile org.apache.lucene.search.Query build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.search.NumericRangeQuery $r2;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1;
        org.apache.lucene.queryparser.flexible.standard.builders.NumericRangeQueryNodeBuilder r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.NumericRangeQueryNodeBuilder;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.builders.NumericRangeQueryNodeBuilder: org.apache.lucene.search.NumericRangeQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r1);

        return $r2;
    }

    public volatile java.lang.Object build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode) throws org.apache.lucene.queryparser.flexible.core.QueryNodeException
    {
        org.apache.lucene.search.NumericRangeQuery $r2;
        org.apache.lucene.queryparser.flexible.core.nodes.QueryNode r1;
        org.apache.lucene.queryparser.flexible.standard.builders.NumericRangeQueryNodeBuilder r0;

        r0 := @this: org.apache.lucene.queryparser.flexible.standard.builders.NumericRangeQueryNodeBuilder;

        r1 := @parameter0: org.apache.lucene.queryparser.flexible.core.nodes.QueryNode;

        $r2 = virtualinvoke r0.<org.apache.lucene.queryparser.flexible.standard.builders.NumericRangeQueryNodeBuilder: org.apache.lucene.search.NumericRangeQuery build(org.apache.lucene.queryparser.flexible.core.nodes.QueryNode)>(r1);

        return $r2;
    }
}
