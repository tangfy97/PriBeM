class org.apache.jena.riot.lang.LabelToNode$AllocByGraph extends java.lang.Object implements org.apache.jena.riot.system.MapWithScope$Allocator
{
    org.apache.jena.riot.lang.BlankNodeAllocator dft;
    java.util.Map graphs;

    private void <init>()
    {
        org.apache.jena.riot.lang.LabelToNode$AllocByGraph r0;
        java.util.HashMap $r2;
        org.apache.jena.riot.lang.BlankNodeAllocator $r1;

        r0 := @this: org.apache.jena.riot.lang.LabelToNode$AllocByGraph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = specialinvoke r0.<org.apache.jena.riot.lang.LabelToNode$AllocByGraph: org.apache.jena.riot.lang.BlankNodeAllocator make()>();

        r0.<org.apache.jena.riot.lang.LabelToNode$AllocByGraph: org.apache.jena.riot.lang.BlankNodeAllocator dft> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<org.apache.jena.riot.lang.LabelToNode$AllocByGraph: java.util.Map graphs> = $r2;

        return;
    }

    public com.hp.hpl.jena.graph.Node alloc(com.hp.hpl.jena.graph.Node, java.lang.String)
    {
        org.apache.jena.riot.lang.BlankNodeAllocator $r6, $r8, r10;
        com.hp.hpl.jena.graph.Node r0, $r5, $r9;
        java.util.Map $r2, $r7;
        org.apache.jena.riot.lang.LabelToNode$AllocByGraph r1;
        java.lang.Object $r3;
        java.lang.String r4;

        r1 := @this: org.apache.jena.riot.lang.LabelToNode$AllocByGraph;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r4 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r8 = r1.<org.apache.jena.riot.lang.LabelToNode$AllocByGraph: org.apache.jena.riot.lang.BlankNodeAllocator dft>;

        $r9 = interfaceinvoke $r8.<org.apache.jena.riot.lang.BlankNodeAllocator: com.hp.hpl.jena.graph.Node alloc(java.lang.String)>(r4);

        return $r9;

     label1:
        $r2 = r1.<org.apache.jena.riot.lang.LabelToNode$AllocByGraph: java.util.Map graphs>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r10 = (org.apache.jena.riot.lang.BlankNodeAllocator) $r3;

        if r10 != null goto label2;

        $r6 = specialinvoke r1.<org.apache.jena.riot.lang.LabelToNode$AllocByGraph: org.apache.jena.riot.lang.BlankNodeAllocator make()>();

        r10 = $r6;

        $r7 = r1.<org.apache.jena.riot.lang.LabelToNode$AllocByGraph: java.util.Map graphs>;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r6);

     label2:
        $r5 = interfaceinvoke r10.<org.apache.jena.riot.lang.BlankNodeAllocator: com.hp.hpl.jena.graph.Node alloc(java.lang.String)>(r4);

        return $r5;
    }

    public com.hp.hpl.jena.graph.Node create()
    {
        org.apache.jena.riot.lang.LabelToNode$AllocByGraph r0;
        com.hp.hpl.jena.graph.Node $r2;
        org.apache.jena.riot.lang.BlankNodeAllocator $r1;

        r0 := @this: org.apache.jena.riot.lang.LabelToNode$AllocByGraph;

        $r1 = r0.<org.apache.jena.riot.lang.LabelToNode$AllocByGraph: org.apache.jena.riot.lang.BlankNodeAllocator dft>;

        $r2 = interfaceinvoke $r1.<org.apache.jena.riot.lang.BlankNodeAllocator: com.hp.hpl.jena.graph.Node create()>();

        return $r2;
    }

    public void reset()
    {
        org.apache.jena.riot.lang.LabelToNode$AllocByGraph r0;
        org.apache.jena.riot.lang.BlankNodeAllocator $r2;
        java.util.Map $r1;

        r0 := @this: org.apache.jena.riot.lang.LabelToNode$AllocByGraph;

        $r1 = r0.<org.apache.jena.riot.lang.LabelToNode$AllocByGraph: java.util.Map graphs>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = r0.<org.apache.jena.riot.lang.LabelToNode$AllocByGraph: org.apache.jena.riot.lang.BlankNodeAllocator dft>;

        interfaceinvoke $r2.<org.apache.jena.riot.lang.BlankNodeAllocator: void reset()>();

        return;
    }

    private org.apache.jena.riot.lang.BlankNodeAllocator make()
    {
        org.apache.jena.riot.lang.LabelToNode$AllocByGraph r1;
        org.apache.jena.riot.lang.BlankNodeAllocatorHash $r0;

        r1 := @this: org.apache.jena.riot.lang.LabelToNode$AllocByGraph;

        $r0 = new org.apache.jena.riot.lang.BlankNodeAllocatorHash;

        specialinvoke $r0.<org.apache.jena.riot.lang.BlankNodeAllocatorHash: void <init>()>();

        return $r0;
    }

    public volatile java.lang.Object create()
    {
        org.apache.jena.riot.lang.LabelToNode$AllocByGraph r0;
        com.hp.hpl.jena.graph.Node $r1;

        r0 := @this: org.apache.jena.riot.lang.LabelToNode$AllocByGraph;

        $r1 = virtualinvoke r0.<org.apache.jena.riot.lang.LabelToNode$AllocByGraph: com.hp.hpl.jena.graph.Node create()>();

        return $r1;
    }

    public volatile java.lang.Object alloc(java.lang.Object, java.lang.Object)
    {
        org.apache.jena.riot.lang.LabelToNode$AllocByGraph r0;
        java.lang.Object r1, r2;
        java.lang.String $r3;
        com.hp.hpl.jena.graph.Node $r4, $r5;

        r0 := @this: org.apache.jena.riot.lang.LabelToNode$AllocByGraph;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (com.hp.hpl.jena.graph.Node) r1;

        $r3 = (java.lang.String) r2;

        $r5 = virtualinvoke r0.<org.apache.jena.riot.lang.LabelToNode$AllocByGraph: com.hp.hpl.jena.graph.Node alloc(com.hp.hpl.jena.graph.Node,java.lang.String)>($r4, $r3);

        return $r5;
    }

    void <init>(org.apache.jena.riot.lang.LabelToNode$1)
    {
        org.apache.jena.riot.lang.LabelToNode$AllocByGraph r0;
        org.apache.jena.riot.lang.LabelToNode$1 r1;

        r0 := @this: org.apache.jena.riot.lang.LabelToNode$AllocByGraph;

        r1 := @parameter0: org.apache.jena.riot.lang.LabelToNode$1;

        specialinvoke r0.<org.apache.jena.riot.lang.LabelToNode$AllocByGraph: void <init>()>();

        return;
    }
}
