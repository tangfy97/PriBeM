public class groovyjarjarantlr.MakeGrammar extends groovyjarjarantlr.DefineGrammarSymbols
{
    protected groovyjarjarantlr.collections.Stack blocks;
    protected groovyjarjarantlr.RuleRefElement lastRuleRef;
    protected groovyjarjarantlr.RuleEndElement ruleEnd;
    protected groovyjarjarantlr.RuleBlock ruleBlock;
    protected int nested;
    protected boolean grammarError;
    groovyjarjarantlr.ExceptionSpec currentExceptionSpec;

    public void <init>(groovyjarjarantlr.Tool, java.lang.String[], groovyjarjarantlr.LLkAnalyzer)
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.Tool r1;
        groovyjarjarantlr.LLkAnalyzer r3;
        java.lang.String[] r2;
        groovyjarjarantlr.collections.impl.LList $r4;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r1 := @parameter0: groovyjarjarantlr.Tool;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: groovyjarjarantlr.LLkAnalyzer;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void <init>(groovyjarjarantlr.Tool,java.lang.String[],groovyjarjarantlr.LLkAnalyzer)>(r1, r2, r3);

        $r4 = new groovyjarjarantlr.collections.impl.LList;

        specialinvoke $r4.<groovyjarjarantlr.collections.impl.LList: void <init>()>();

        r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks> = $r4;

        r0.<groovyjarjarantlr.MakeGrammar: int nested> = 0;

        r0.<groovyjarjarantlr.MakeGrammar: boolean grammarError> = 0;

        r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.ExceptionSpec currentExceptionSpec> = null;

        return;
    }

    public void abortGrammar()
    {
        groovyjarjarantlr.Grammar $r1, $r8;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.Tool $r3;
        java.lang.StringBuffer $r2, $r4, $r5, $r6;
        java.lang.String $r7, r9;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r9 = "unknown grammar";

        $r1 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        if $r1 == null goto label1;

        $r8 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        r9 = virtualinvoke $r8.<groovyjarjarantlr.Grammar: java.lang.String getClassName()>();

     label1:
        $r3 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("aborting grammar \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r9);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' due to errors");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r3.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r7);

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void abortGrammar()>();

        return;
    }

    protected void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)
    {
        groovyjarjarantlr.MakeGrammar r1;
        groovyjarjarantlr.RuleBlock $r2;
        groovyjarjarantlr.BlockContext $r4;
        java.lang.String $r3;
        groovyjarjarantlr.AlternativeElement r0;

        r1 := @this: groovyjarjarantlr.MakeGrammar;

        r0 := @parameter0: groovyjarjarantlr.AlternativeElement;

        $r2 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock ruleBlock>;

        $r3 = $r2.<groovyjarjarantlr.RuleBlock: java.lang.String ruleName>;

        r0.<groovyjarjarantlr.AlternativeElement: java.lang.String enclosingRuleName> = $r3;

        $r4 = virtualinvoke r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        virtualinvoke $r4.<groovyjarjarantlr.BlockContext: void addAlternativeElement(groovyjarjarantlr.AlternativeElement)>(r0);

        return;
    }

    public void beginAlt(boolean)
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.AlternativeBlock $r3;
        groovyjarjarantlr.BlockContext $r2;
        boolean z0;
        groovyjarjarantlr.Alternative $r1;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        z0 := @parameter0: boolean;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void beginAlt(boolean)>(z0);

        $r1 = new groovyjarjarantlr.Alternative;

        specialinvoke $r1.<groovyjarjarantlr.Alternative: void <init>()>();

        virtualinvoke $r1.<groovyjarjarantlr.Alternative: void setAutoGen(boolean)>(z0);

        $r2 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r3 = $r2.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        virtualinvoke $r3.<groovyjarjarantlr.AlternativeBlock: void addAlternative(groovyjarjarantlr.Alternative)>($r1);

        return;
    }

    public void beginChildList()
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.AlternativeBlock $r3;
        groovyjarjarantlr.BlockContext $r1;
        groovyjarjarantlr.Alternative $r2;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void beginChildList()>();

        $r1 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r3 = $r1.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $r2 = new groovyjarjarantlr.Alternative;

        specialinvoke $r2.<groovyjarjarantlr.Alternative: void <init>()>();

        virtualinvoke $r3.<groovyjarjarantlr.AlternativeBlock: void addAlternative(groovyjarjarantlr.Alternative)>($r2);

        return;
    }

    public void beginExceptionGroup()
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.Tool $r3;
        groovyjarjarantlr.AlternativeBlock $r2;
        groovyjarjarantlr.BlockContext $r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void beginExceptionGroup()>();

        $r1 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r2 = $r1.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $z0 = $r2 instanceof groovyjarjarantlr.RuleBlock;

        if $z0 != 0 goto label1;

        $r3 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        virtualinvoke $r3.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("beginExceptionGroup called outside of rule block");

     label1:
        return;
    }

    public void beginExceptionSpec(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.MakeGrammar r1;
        groovyjarjarantlr.ExceptionSpec $r2;
        java.lang.String $r3, $r4, $r5;
        groovyjarjarantlr.Token r0;

        r1 := @this: groovyjarjarantlr.MakeGrammar;

        r0 := @parameter0: groovyjarjarantlr.Token;

        if r0 == null goto label1;

        $r3 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r4 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripBack(java.lang.String,java.lang.String)>($r3, " \n\r\t");

        $r5 = staticinvoke <groovyjarjarantlr.StringUtils: java.lang.String stripFront(java.lang.String,java.lang.String)>($r4, " \n\r\t");

        virtualinvoke r0.<groovyjarjarantlr.Token: void setText(java.lang.String)>($r5);

     label1:
        specialinvoke r1.<groovyjarjarantlr.DefineGrammarSymbols: void beginExceptionSpec(groovyjarjarantlr.Token)>(r0);

        $r2 = new groovyjarjarantlr.ExceptionSpec;

        specialinvoke $r2.<groovyjarjarantlr.ExceptionSpec: void <init>(groovyjarjarantlr.Token)>(r0);

        r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.ExceptionSpec currentExceptionSpec> = $r2;

        return;
    }

    public void beginSubRule(groovyjarjarantlr.Token, groovyjarjarantlr.Token, boolean)
    {
        groovyjarjarantlr.AlternativeBlock $r6, $r15, $r17;
        groovyjarjarantlr.BlockEndElement $r10, $r13;
        groovyjarjarantlr.Grammar $r7, $r11;
        int $i0, $i1;
        groovyjarjarantlr.Token r1, r2;
        boolean z0;
        groovyjarjarantlr.BlockContext $r3, $r5, $r8, $r9, $r12, $r14, $r16;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.collections.Stack $r4;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        z0 := @parameter2: boolean;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void beginSubRule(groovyjarjarantlr.Token,groovyjarjarantlr.Token,boolean)>(r1, r2, z0);

        $r4 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks>;

        $r3 = new groovyjarjarantlr.BlockContext;

        specialinvoke $r3.<groovyjarjarantlr.BlockContext: void <init>()>();

        interfaceinvoke $r4.<groovyjarjarantlr.collections.Stack: void push(java.lang.Object)>($r3);

        $r5 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r6 = new groovyjarjarantlr.AlternativeBlock;

        $r7 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r6.<groovyjarjarantlr.AlternativeBlock: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token,boolean)>($r7, r2, z0);

        $r5.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block> = $r6;

        $r8 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r8.<groovyjarjarantlr.BlockContext: int altNum> = 0;

        $i0 = r0.<groovyjarjarantlr.MakeGrammar: int nested>;

        $i1 = $i0 + 1;

        r0.<groovyjarjarantlr.MakeGrammar: int nested> = $i1;

        $r9 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r10 = new groovyjarjarantlr.BlockEndElement;

        $r11 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r10.<groovyjarjarantlr.BlockEndElement: void <init>(groovyjarjarantlr.Grammar)>($r11);

        $r9.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.BlockEndElement blockEnd> = $r10;

        $r12 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r13 = $r12.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.BlockEndElement blockEnd>;

        $r14 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r15 = $r14.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $r13.<groovyjarjarantlr.BlockEndElement: groovyjarjarantlr.AlternativeBlock block> = $r15;

        $r16 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r17 = $r16.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        specialinvoke r0.<groovyjarjarantlr.MakeGrammar: void labelElement(groovyjarjarantlr.AlternativeElement,groovyjarjarantlr.Token)>($r17, r1);

        return;
    }

    public void beginTree(groovyjarjarantlr.Token) throws groovyjarjarantlr.SemanticException
    {
        groovyjarjarantlr.SemanticException $r12;
        groovyjarjarantlr.TreeBlockContext $r3;
        groovyjarjarantlr.Grammar $r1, $r7, $r9;
        groovyjarjarantlr.Tool $r10;
        int $i0, $i1;
        groovyjarjarantlr.TreeElement $r6;
        java.lang.String $r11;
        groovyjarjarantlr.Token r2;
        boolean $z0;
        groovyjarjarantlr.BlockContext $r5, $r8;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.collections.Stack $r4;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r2 := @parameter0: groovyjarjarantlr.Token;

        $r1 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z0 != 0 goto label1;

        $r10 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r9 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r11 = virtualinvoke $r9.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i1 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r10.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Trees only allowed in TreeParser", $r11, $i0, $i1);

        $r12 = new groovyjarjarantlr.SemanticException;

        specialinvoke $r12.<groovyjarjarantlr.SemanticException: void <init>(java.lang.String)>("Trees only allowed in TreeParser");

        throw $r12;

     label1:
        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void beginTree(groovyjarjarantlr.Token)>(r2);

        $r4 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks>;

        $r3 = new groovyjarjarantlr.TreeBlockContext;

        specialinvoke $r3.<groovyjarjarantlr.TreeBlockContext: void <init>()>();

        interfaceinvoke $r4.<groovyjarjarantlr.collections.Stack: void push(java.lang.Object)>($r3);

        $r5 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r6 = new groovyjarjarantlr.TreeElement;

        $r7 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r6.<groovyjarjarantlr.TreeElement: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token)>($r7, r2);

        $r5.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block> = $r6;

        $r8 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r8.<groovyjarjarantlr.BlockContext: int altNum> = 0;

        return;
    }

    public groovyjarjarantlr.BlockContext context()
    {
        groovyjarjarantlr.MakeGrammar r0;
        int $i0;
        java.lang.Object $r3;
        groovyjarjarantlr.BlockContext $r4;
        groovyjarjarantlr.collections.Stack $r1, $r2;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        $r1 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks>;

        $i0 = interfaceinvoke $r1.<groovyjarjarantlr.collections.Stack: int height()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks>;

        $r3 = interfaceinvoke $r2.<groovyjarjarantlr.collections.Stack: java.lang.Object top()>();

        $r4 = (groovyjarjarantlr.BlockContext) $r3;

        return $r4;
    }

    public static groovyjarjarantlr.RuleBlock createNextTokenRule(groovyjarjarantlr.Grammar, groovyjarjarantlr.collections.impl.Vector, java.lang.String)
    {
        groovyjarjarantlr.Grammar r1;
        groovyjarjarantlr.RuleRefElement $r23;
        groovyjarjarantlr.collections.impl.Vector r4, $r10;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.RuleBlock $r0, $r9;
        groovyjarjarantlr.CommonToken $r24;
        groovyjarjarantlr.Alternative $r8, r22;
        groovyjarjarantlr.Tool $r15;
        java.lang.StringBuffer $r14, $r16, $r19, $r20;
        int $i0, $i1, i2;
        java.lang.String r2, $r7, $r12, $r13, $r17, $r18, $r21, $r25;
        groovyjarjarantlr.RuleSymbol r6;
        groovyjarjarantlr.RuleEndElement $r3;
        java.lang.Object $r5, $r11;

        r1 := @parameter0: groovyjarjarantlr.Grammar;

        r4 := @parameter1: groovyjarjarantlr.collections.impl.Vector;

        r2 := @parameter2: java.lang.String;

        $r0 = new groovyjarjarantlr.RuleBlock;

        specialinvoke $r0.<groovyjarjarantlr.RuleBlock: void <init>(groovyjarjarantlr.Grammar,java.lang.String)>(r1, r2);

        $z0 = virtualinvoke r1.<groovyjarjarantlr.Grammar: boolean getDefaultErrorHandler()>();

        virtualinvoke $r0.<groovyjarjarantlr.RuleBlock: void setDefaultErrorHandler(boolean)>($z0);

        $r3 = new groovyjarjarantlr.RuleEndElement;

        specialinvoke $r3.<groovyjarjarantlr.RuleEndElement: void <init>(groovyjarjarantlr.Grammar)>(r1);

        virtualinvoke $r0.<groovyjarjarantlr.RuleBlock: void setEndElement(groovyjarjarantlr.RuleEndElement)>($r3);

        $r3.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.AlternativeBlock block> = $r0;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r4.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i2 >= $i0 goto label5;

        $r5 = virtualinvoke r4.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i2);

        r6 = (groovyjarjarantlr.RuleSymbol) $r5;

        $z1 = virtualinvoke r6.<groovyjarjarantlr.RuleSymbol: boolean isDefined()>();

        if $z1 != 0 goto label2;

        $r15 = r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Lexer rule ");

        $r17 = r6.<groovyjarjarantlr.RuleSymbol: java.lang.String id>;

        $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String substring(int)>(1);

        $r19 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not defined");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r15.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r21);

        goto label4;

     label2:
        $r7 = r6.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("public");

        if $z2 == 0 goto label4;

        $r8 = new groovyjarjarantlr.Alternative;

        specialinvoke $r8.<groovyjarjarantlr.Alternative: void <init>()>();

        $r9 = virtualinvoke r6.<groovyjarjarantlr.RuleSymbol: groovyjarjarantlr.RuleBlock getBlock()>();

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        if $r10 == null goto label3;

        $i1 = virtualinvoke $r10.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if $i1 != 1 goto label3;

        $r11 = virtualinvoke $r10.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(0);

        r22 = (groovyjarjarantlr.Alternative) $r11;

        $r12 = r22.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        if $r12 == null goto label3;

        $r13 = r22.<groovyjarjarantlr.Alternative: java.lang.String semPred>;

        $r8.<groovyjarjarantlr.Alternative: java.lang.String semPred> = $r13;

     label3:
        $r23 = new groovyjarjarantlr.RuleRefElement;

        $r24 = new groovyjarjarantlr.CommonToken;

        $r25 = virtualinvoke r6.<groovyjarjarantlr.RuleSymbol: java.lang.String getId()>();

        specialinvoke $r24.<groovyjarjarantlr.CommonToken: void <init>(int,java.lang.String)>(41, $r25);

        specialinvoke $r23.<groovyjarjarantlr.RuleRefElement: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token,int)>(r1, $r24, 1);

        virtualinvoke $r23.<groovyjarjarantlr.RuleRefElement: void setLabel(java.lang.String)>("theRetToken");

        $r23.<groovyjarjarantlr.RuleRefElement: java.lang.String enclosingRuleName> = "nextToken";

        $r23.<groovyjarjarantlr.RuleRefElement: groovyjarjarantlr.AlternativeElement next> = $r3;

        virtualinvoke $r8.<groovyjarjarantlr.Alternative: void addElement(groovyjarjarantlr.AlternativeElement)>($r23);

        virtualinvoke $r8.<groovyjarjarantlr.Alternative: void setAutoGen(boolean)>(1);

        virtualinvoke $r0.<groovyjarjarantlr.RuleBlock: void addAlternative(groovyjarjarantlr.Alternative)>($r8);

        virtualinvoke r6.<groovyjarjarantlr.RuleSymbol: void addReference(groovyjarjarantlr.RuleRefElement)>($r23);

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        virtualinvoke $r0.<groovyjarjarantlr.RuleBlock: void setAutoGen(boolean)>(1);

        virtualinvoke $r0.<groovyjarjarantlr.RuleBlock: void prepareForAnalysis()>();

        return $r0;
    }

    private groovyjarjarantlr.AlternativeBlock createOptionalRuleRef(java.lang.String, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.AlternativeBlock $r0;
        groovyjarjarantlr.BlockEndElement $r12;
        groovyjarjarantlr.Grammar $r3, $r6, $r9, $r13, $r17;
        int $i0, $i1;
        groovyjarjarantlr.RuleRefElement $r8;
        java.lang.String r4, $r5, $r11;
        groovyjarjarantlr.Token r2;
        boolean $z0;
        groovyjarjarantlr.RuleBlock $r10;
        groovyjarjarantlr.CommonToken $r7;
        groovyjarjarantlr.RuleSymbol $r16;
        groovyjarjarantlr.Alternative $r14, $r15;
        groovyjarjarantlr.MakeGrammar r1;

        r1 := @this: groovyjarjarantlr.MakeGrammar;

        r4 := @parameter0: java.lang.String;

        r2 := @parameter1: groovyjarjarantlr.Token;

        $r0 = new groovyjarjarantlr.AlternativeBlock;

        $r3 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r0.<groovyjarjarantlr.AlternativeBlock: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token,boolean)>($r3, r2, 0);

        $r5 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>(r4);

        $r6 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $z0 = virtualinvoke $r6.<groovyjarjarantlr.Grammar: boolean isDefined(java.lang.String)>($r5);

        if $z0 != 0 goto label1;

        $r17 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r16 = new groovyjarjarantlr.RuleSymbol;

        specialinvoke $r16.<groovyjarjarantlr.RuleSymbol: void <init>(java.lang.String)>($r5);

        virtualinvoke $r17.<groovyjarjarantlr.Grammar: void define(groovyjarjarantlr.RuleSymbol)>($r16);

     label1:
        $r7 = new groovyjarjarantlr.CommonToken;

        specialinvoke $r7.<groovyjarjarantlr.CommonToken: void <init>(int,java.lang.String)>(24, r4);

        $i0 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        virtualinvoke $r7.<groovyjarjarantlr.Token: void setLine(int)>($i0);

        $i1 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r7.<groovyjarjarantlr.Token: void setLine(int)>($i1);

        $r8 = new groovyjarjarantlr.RuleRefElement;

        $r9 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r8.<groovyjarjarantlr.RuleRefElement: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token,int)>($r9, $r7, 1);

        $r10 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock ruleBlock>;

        $r11 = $r10.<groovyjarjarantlr.RuleBlock: java.lang.String ruleName>;

        $r8.<groovyjarjarantlr.RuleRefElement: java.lang.String enclosingRuleName> = $r11;

        $r12 = new groovyjarjarantlr.BlockEndElement;

        $r13 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r12.<groovyjarjarantlr.BlockEndElement: void <init>(groovyjarjarantlr.Grammar)>($r13);

        $r12.<groovyjarjarantlr.BlockEndElement: groovyjarjarantlr.AlternativeBlock block> = $r0;

        $r14 = new groovyjarjarantlr.Alternative;

        specialinvoke $r14.<groovyjarjarantlr.Alternative: void <init>(groovyjarjarantlr.AlternativeElement)>($r8);

        virtualinvoke $r14.<groovyjarjarantlr.Alternative: void addElement(groovyjarjarantlr.AlternativeElement)>($r12);

        virtualinvoke $r0.<groovyjarjarantlr.AlternativeBlock: void addAlternative(groovyjarjarantlr.Alternative)>($r14);

        $r15 = new groovyjarjarantlr.Alternative;

        specialinvoke $r15.<groovyjarjarantlr.Alternative: void <init>()>();

        virtualinvoke $r15.<groovyjarjarantlr.Alternative: void addElement(groovyjarjarantlr.AlternativeElement)>($r12);

        virtualinvoke $r0.<groovyjarjarantlr.AlternativeBlock: void addAlternative(groovyjarjarantlr.Alternative)>($r15);

        virtualinvoke $r0.<groovyjarjarantlr.AlternativeBlock: void prepareForAnalysis()>();

        return $r0;
    }

    public void defineRuleName(groovyjarjarantlr.Token, java.lang.String, boolean, java.lang.String) throws groovyjarjarantlr.SemanticException
    {
        groovyjarjarantlr.Grammar $r2, $r5, $r8, $r10, $r15, $r25, $r29, $r37;
        groovyjarjarantlr.Token r0;
        boolean $z0, z1, $z2, $z3;
        groovyjarjarantlr.RuleBlock $r7;
        groovyjarjarantlr.MakeGrammar r1;
        groovyjarjarantlr.GrammarSymbol $r6;
        groovyjarjarantlr.collections.Stack $r12;
        groovyjarjarantlr.Tool $r19, $r31;
        java.lang.StringBuffer $r18, $r20, $r22, $r23, $r30, $r32, $r34, $r35;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r3, r4, $r9, $r21, $r24, $r26, $r27, $r28, $r33, $r36, $r38, $r39, $r40, $r41, r42;
        groovyjarjarantlr.BlockContext $r11, $r13;
        groovyjarjarantlr.RuleSymbol $r17;
        groovyjarjarantlr.RuleEndElement $r14, $r16;

        r1 := @this: groovyjarjarantlr.MakeGrammar;

        r0 := @parameter0: groovyjarjarantlr.Token;

        r3 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        r4 := @parameter3: java.lang.String;

        $i0 = r0.<groovyjarjarantlr.Token: int type>;

        if $i0 != 24 goto label1;

        $r29 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r29 instanceof groovyjarjarantlr.LexerGrammar;

        if $z3 != 0 goto label2;

        $r31 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Lexical rule ");

        $r33 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" defined outside of lexer");

        $r36 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.String toString()>();

        $r37 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r38 = virtualinvoke $r37.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i4 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i5 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r31.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r36, $r38, $i4, $i5);

        $r39 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r40 = virtualinvoke $r39.<java.lang.String: java.lang.String toLowerCase()>();

        virtualinvoke r0.<groovyjarjarantlr.Token: void setText(java.lang.String)>($r40);

        goto label2;

     label1:
        $r2 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r2 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label2;

        $r19 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Lexical rule names must be upper case, \'");

        $r21 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' is not");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        $r25 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r26 = virtualinvoke $r25.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i3 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r19.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r24, $r26, $i2, $i3);

        $r27 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r28 = virtualinvoke $r27.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke r0.<groovyjarjarantlr.Token: void setText(java.lang.String)>($r28);

     label2:
        specialinvoke r1.<groovyjarjarantlr.DefineGrammarSymbols: void defineRuleName(groovyjarjarantlr.Token,java.lang.String,boolean,java.lang.String)>(r0, r3, z1, r4);

        $r41 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        r42 = $r41;

        $i6 = r0.<groovyjarjarantlr.Token: int type>;

        if $i6 != 24 goto label3;

        r42 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>($r41);

     label3:
        $r5 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r6 = virtualinvoke $r5.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>(r42);

        $r17 = (groovyjarjarantlr.RuleSymbol) $r6;

        $r7 = new groovyjarjarantlr.RuleBlock;

        $r8 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r9 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $i1 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        specialinvoke $r7.<groovyjarjarantlr.RuleBlock: void <init>(groovyjarjarantlr.Grammar,java.lang.String,int,boolean)>($r8, $r9, $i1, z1);

        $r10 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $z2 = virtualinvoke $r10.<groovyjarjarantlr.Grammar: boolean getDefaultErrorHandler()>();

        virtualinvoke $r7.<groovyjarjarantlr.RuleBlock: void setDefaultErrorHandler(boolean)>($z2);

        r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock ruleBlock> = $r7;

        $r12 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks>;

        $r11 = new groovyjarjarantlr.BlockContext;

        specialinvoke $r11.<groovyjarjarantlr.BlockContext: void <init>()>();

        interfaceinvoke $r12.<groovyjarjarantlr.collections.Stack: void push(java.lang.Object)>($r11);

        $r13 = virtualinvoke r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r13.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block> = $r7;

        virtualinvoke $r17.<groovyjarjarantlr.RuleSymbol: void setBlock(groovyjarjarantlr.RuleBlock)>($r7);

        $r14 = new groovyjarjarantlr.RuleEndElement;

        $r15 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r14.<groovyjarjarantlr.RuleEndElement: void <init>(groovyjarjarantlr.Grammar)>($r15);

        r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleEndElement ruleEnd> = $r14;

        $r16 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleEndElement ruleEnd>;

        virtualinvoke $r7.<groovyjarjarantlr.RuleBlock: void setEndElement(groovyjarjarantlr.RuleEndElement)>($r16);

        r1.<groovyjarjarantlr.MakeGrammar: int nested> = 0;

        return;
    }

    public void endAlt()
    {
        groovyjarjarantlr.BlockEndElement $r2;
        groovyjarjarantlr.BlockContext $r1, $r3;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.RuleEndElement $r4;
        int $i0, $i1, $i2;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void endAlt()>();

        $i0 = r0.<groovyjarjarantlr.MakeGrammar: int nested>;

        if $i0 != 0 goto label1;

        $r4 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleEndElement ruleEnd>;

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r4);

        goto label2;

     label1:
        $r1 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r2 = $r1.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.BlockEndElement blockEnd>;

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r2);

     label2:
        $r3 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $i1 = $r3.<groovyjarjarantlr.BlockContext: int altNum>;

        $i2 = $i1 + 1;

        $r3.<groovyjarjarantlr.BlockContext: int altNum> = $i2;

        return;
    }

    public void endChildList()
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.BlockEndElement $r1;
        groovyjarjarantlr.AlternativeBlock $r4;
        groovyjarjarantlr.BlockContext $r3;
        groovyjarjarantlr.Grammar $r2;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void endChildList()>();

        $r1 = new groovyjarjarantlr.BlockEndElement;

        $r2 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r1.<groovyjarjarantlr.BlockEndElement: void <init>(groovyjarjarantlr.Grammar)>($r2);

        $r3 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r4 = $r3.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $r1.<groovyjarjarantlr.BlockEndElement: groovyjarjarantlr.AlternativeBlock block> = $r4;

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r1);

        return;
    }

    public void endExceptionGroup()
    {
        groovyjarjarantlr.MakeGrammar r0;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void endExceptionGroup()>();

        return;
    }

    public void endExceptionSpec()
    {
        groovyjarjarantlr.AlternativeBlock $r3, $r14, $r16, $r18;
        groovyjarjarantlr.ExceptionSpec $r1, $r6, $r9, $r19;
        groovyjarjarantlr.Grammar $r10;
        groovyjarjarantlr.Tool $r11, $r21;
        int $i0, $i1;
        java.lang.String $r12;
        boolean $z0;
        groovyjarjarantlr.RuleBlock $r20;
        groovyjarjarantlr.BlockContext $r2, $r4, $r7, $r13, $r15, $r17;
        groovyjarjarantlr.Alternative $r5, $r8;
        groovyjarjarantlr.MakeGrammar r0;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void endExceptionSpec()>();

        $r1 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.ExceptionSpec currentExceptionSpec>;

        if $r1 != null goto label1;

        $r21 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        virtualinvoke $r21.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("exception processing internal error -- no active exception spec");

     label1:
        $r2 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r3 = $r2.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $z0 = $r3 instanceof groovyjarjarantlr.RuleBlock;

        if $z0 == 0 goto label2;

        $r17 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r18 = $r17.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $r20 = (groovyjarjarantlr.RuleBlock) $r18;

        $r19 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.ExceptionSpec currentExceptionSpec>;

        virtualinvoke $r20.<groovyjarjarantlr.RuleBlock: void addExceptionSpec(groovyjarjarantlr.ExceptionSpec)>($r19);

        goto label4;

     label2:
        $r4 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r5 = virtualinvoke $r4.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.Alternative currentAlt()>();

        $r6 = $r5.<groovyjarjarantlr.Alternative: groovyjarjarantlr.ExceptionSpec exceptionSpec>;

        if $r6 == null goto label3;

        $r11 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r10 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r12 = virtualinvoke $r10.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r13 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r14 = $r13.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $i0 = virtualinvoke $r14.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        $r15 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r16 = $r15.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $i1 = virtualinvoke $r16.<groovyjarjarantlr.AlternativeBlock: int getColumn()>();

        virtualinvoke $r11.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Alternative already has an exception specification", $r12, $i0, $i1);

        goto label4;

     label3:
        $r7 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r8 = virtualinvoke $r7.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.Alternative currentAlt()>();

        $r9 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.ExceptionSpec currentExceptionSpec>;

        $r8.<groovyjarjarantlr.Alternative: groovyjarjarantlr.ExceptionSpec exceptionSpec> = $r9;

     label4:
        r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.ExceptionSpec currentExceptionSpec> = null;

        return;
    }

    public void endGrammar()
    {
        groovyjarjarantlr.MakeGrammar r0;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        $z0 = r0.<groovyjarjarantlr.MakeGrammar: boolean grammarError>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void abortGrammar()>();

        goto label2;

     label1:
        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void endGrammar()>();

     label2:
        return;
    }

    public void endRule(java.lang.String)
    {
        groovyjarjarantlr.AlternativeBlock $r5, $r8;
        groovyjarjarantlr.BlockContext r4;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.RuleEndElement $r6, $r7;
        java.lang.Object $r3;
        java.lang.String r1;
        groovyjarjarantlr.collections.Stack $r2;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void endRule(java.lang.String)>(r1);

        $r2 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks>;

        $r3 = interfaceinvoke $r2.<groovyjarjarantlr.collections.Stack: java.lang.Object pop()>();

        r4 = (groovyjarjarantlr.BlockContext) $r3;

        $r6 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleEndElement ruleEnd>;

        $r5 = r4.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $r6.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.AlternativeBlock block> = $r5;

        $r7 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleEndElement ruleEnd>;

        $r8 = $r7.<groovyjarjarantlr.RuleEndElement: groovyjarjarantlr.AlternativeBlock block>;

        virtualinvoke $r8.<groovyjarjarantlr.AlternativeBlock: void prepareForAnalysis()>();

        return;
    }

    public void endSubRule()
    {
        groovyjarjarantlr.BlockEndElement $r5;
        groovyjarjarantlr.Grammar $r11, $r12, $r13, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        groovyjarjarantlr.Alternative $r10;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.collections.Stack $r1;
        groovyjarjarantlr.SynPredBlock r28;
        groovyjarjarantlr.AlternativeBlock r4, $r6, $r8;
        groovyjarjarantlr.Tool $r17;
        java.lang.StringBuffer $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24;
        int $i0, $i1, $i2, $i3;
        groovyjarjarantlr.LLkAnalyzer $r14;
        java.lang.String $r15, $r25, $r27;
        groovyjarjarantlr.BlockContext r3, $r7, $r9;
        java.lang.Object $r2;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void endSubRule()>();

        $i0 = r0.<groovyjarjarantlr.MakeGrammar: int nested>;

        $i1 = $i0 - 1;

        r0.<groovyjarjarantlr.MakeGrammar: int nested> = $i1;

        $r1 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks>;

        $r2 = interfaceinvoke $r1.<groovyjarjarantlr.collections.Stack: java.lang.Object pop()>();

        r3 = (groovyjarjarantlr.BlockContext) $r2;

        r4 = r3.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $z0 = r4.<groovyjarjarantlr.AlternativeBlock: boolean not>;

        if $z0 == 0 goto label1;

        $z1 = r4 instanceof groovyjarjarantlr.SynPredBlock;

        if $z1 != 0 goto label1;

        $z2 = r4 instanceof groovyjarjarantlr.ZeroOrMoreBlock;

        if $z2 != 0 goto label1;

        $z3 = r4 instanceof groovyjarjarantlr.OneOrMoreBlock;

        if $z3 != 0 goto label1;

        $r14 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.LLkAnalyzer analyzer>;

        $r13 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $z4 = $r13 instanceof groovyjarjarantlr.LexerGrammar;

        $z5 = virtualinvoke $r14.<groovyjarjarantlr.LLkAnalyzer: boolean subruleCanBeInverted(groovyjarjarantlr.AlternativeBlock,boolean)>(r4, $z4);

        if $z5 != 0 goto label1;

        $r15 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator");

        $r17 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("This subrule cannot be inverted.  Only subrules of the form:");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    (T1|T2|T3...) or");

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("    (\'c1\'|\'c2\'|\'c3\'...)");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r15);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("may be inverted (ranges are also allowed).");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        $r26 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r27 = virtualinvoke $r26.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i2 = virtualinvoke r4.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        $i3 = virtualinvoke r4.<groovyjarjarantlr.AlternativeBlock: int getColumn()>();

        virtualinvoke $r17.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r25, $r27, $i2, $i3);

     label1:
        $z6 = r4 instanceof groovyjarjarantlr.SynPredBlock;

        if $z6 == 0 goto label2;

        r28 = (groovyjarjarantlr.SynPredBlock) r4;

        $r7 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r8 = $r7.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $r8.<groovyjarjarantlr.AlternativeBlock: boolean hasASynPred> = 1;

        $r9 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.Alternative currentAlt()>();

        $r10.<groovyjarjarantlr.Alternative: groovyjarjarantlr.SynPredBlock synPred> = r28;

        $r11 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r11.<groovyjarjarantlr.Grammar: boolean hasSyntacticPredicate> = 1;

        $r12 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        virtualinvoke r28.<groovyjarjarantlr.SynPredBlock: void removeTrackingOfRuleRefs(groovyjarjarantlr.Grammar)>($r12);

        goto label3;

     label2:
        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>(r4);

     label3:
        $r5 = r3.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.BlockEndElement blockEnd>;

        $r6 = $r5.<groovyjarjarantlr.BlockEndElement: groovyjarjarantlr.AlternativeBlock block>;

        virtualinvoke $r6.<groovyjarjarantlr.AlternativeBlock: void prepareForAnalysis()>();

        return;
    }

    public void endTree()
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.AlternativeBlock $r4;
        java.lang.Object $r2;
        groovyjarjarantlr.BlockContext r3;
        groovyjarjarantlr.collections.Stack $r1;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void endTree()>();

        $r1 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks>;

        $r2 = interfaceinvoke $r1.<groovyjarjarantlr.collections.Stack: java.lang.Object pop()>();

        r3 = (groovyjarjarantlr.BlockContext) $r2;

        $r4 = r3.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r4);

        return;
    }

    public void hasError()
    {
        groovyjarjarantlr.MakeGrammar r0;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r0.<groovyjarjarantlr.MakeGrammar: boolean grammarError> = 1;

        return;
    }

    private void labelElement(groovyjarjarantlr.AlternativeElement, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.Grammar $r21;
        groovyjarjarantlr.Tool $r15;
        java.lang.StringBuffer $r14, $r16, $r18, $r19;
        int $i0, $i1, $i2, i3;
        java.lang.String $r5, $r12, $r13, $r17, $r20, $r22;
        groovyjarjarantlr.Token r0;
        groovyjarjarantlr.collections.impl.Vector $r3, $r7, $r9;
        boolean $z0;
        groovyjarjarantlr.RuleBlock $r2, $r6, $r8;
        groovyjarjarantlr.MakeGrammar r1;
        java.lang.Object $r10;
        groovyjarjarantlr.AlternativeElement r4, r11;

        r1 := @this: groovyjarjarantlr.MakeGrammar;

        r4 := @parameter0: groovyjarjarantlr.AlternativeElement;

        r0 := @parameter1: groovyjarjarantlr.Token;

        if r0 == null goto label4;

        i3 = 0;

     label1:
        $r2 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock ruleBlock>;

        $r3 = $r2.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        $i0 = virtualinvoke $r3.<groovyjarjarantlr.collections.impl.Vector: int size()>();

        if i3 >= $i0 goto label3;

        $r8 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock ruleBlock>;

        $r9 = $r8.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.collections.impl.Vector: java.lang.Object elementAt(int)>(i3);

        r11 = (groovyjarjarantlr.AlternativeElement) $r10;

        $r12 = virtualinvoke r11.<groovyjarjarantlr.AlternativeElement: java.lang.String getLabel()>();

        if $r12 == null goto label2;

        $r13 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r13);

        if $z0 == 0 goto label2;

        $r15 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r14 = new java.lang.StringBuffer;

        specialinvoke $r14.<java.lang.StringBuffer: void <init>()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Label \'");

        $r17 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' has already been defined");

        $r20 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.String toString()>();

        $r21 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r22 = virtualinvoke $r21.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i1 = virtualinvoke r0.<groovyjarjarantlr.Token: int getLine()>();

        $i2 = virtualinvoke r0.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r15.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r20, $r22, $i1, $i2);

        return;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r5 = virtualinvoke r0.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke r4.<groovyjarjarantlr.AlternativeElement: void setLabel(java.lang.String)>($r5);

        $r6 = r1.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock ruleBlock>;

        $r7 = $r6.<groovyjarjarantlr.RuleBlock: groovyjarjarantlr.collections.impl.Vector labeledElements>;

        virtualinvoke $r7.<groovyjarjarantlr.collections.impl.Vector: void appendElement(java.lang.Object)>(r4);

     label4:
        return;
    }

    public void noAutoGenSubRule()
    {
        groovyjarjarantlr.BlockContext $r1;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.AlternativeBlock $r2;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r2 = $r1.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        virtualinvoke $r2.<groovyjarjarantlr.AlternativeBlock: void setAutoGen(boolean)>(0);

        return;
    }

    public void oneOrMoreSubRule()
    {
        groovyjarjarantlr.AlternativeBlock $r2, $r6, $r20, $r22;
        groovyjarjarantlr.BlockEndElement $r13, $r15;
        groovyjarjarantlr.Grammar $r4, $r16;
        groovyjarjarantlr.Tool $r17;
        int $i0, $i1;
        java.lang.String $r18;
        boolean $z0;
        groovyjarjarantlr.BlockContext $r1, $r5, $r9, $r11, $r12, $r14, $r19, $r21, $r23;
        groovyjarjarantlr.MakeGrammar r0;
        java.lang.Object $r8;
        groovyjarjarantlr.collections.Stack $r7, $r10;
        groovyjarjarantlr.OneOrMoreBlock $r3;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r2 = $r1.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $z0 = $r2.<groovyjarjarantlr.AlternativeBlock: boolean not>;

        if $z0 == 0 goto label1;

        $r17 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r16 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r18 = virtualinvoke $r16.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r19 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r20 = $r19.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $i0 = virtualinvoke $r20.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        $r21 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r22 = $r21.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $i1 = virtualinvoke $r22.<groovyjarjarantlr.AlternativeBlock: int getColumn()>();

        virtualinvoke $r17.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("\'~\' cannot be applied to (...)* subrule", $r18, $i0, $i1);

     label1:
        $r3 = new groovyjarjarantlr.OneOrMoreBlock;

        $r4 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r3.<groovyjarjarantlr.OneOrMoreBlock: void <init>(groovyjarjarantlr.Grammar)>($r4);

        $r5 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r6 = $r5.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        staticinvoke <groovyjarjarantlr.MakeGrammar: void setBlock(groovyjarjarantlr.AlternativeBlock,groovyjarjarantlr.AlternativeBlock)>($r3, $r6);

        $r7 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks>;

        $r8 = interfaceinvoke $r7.<groovyjarjarantlr.collections.Stack: java.lang.Object pop()>();

        $r23 = (groovyjarjarantlr.BlockContext) $r8;

        $r10 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks>;

        $r9 = new groovyjarjarantlr.BlockContext;

        specialinvoke $r9.<groovyjarjarantlr.BlockContext: void <init>()>();

        interfaceinvoke $r10.<groovyjarjarantlr.collections.Stack: void push(java.lang.Object)>($r9);

        $r11 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r11.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block> = $r3;

        $r12 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r13 = $r23.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.BlockEndElement blockEnd>;

        $r12.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.BlockEndElement blockEnd> = $r13;

        $r14 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r15 = $r14.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.BlockEndElement blockEnd>;

        $r15.<groovyjarjarantlr.BlockEndElement: groovyjarjarantlr.AlternativeBlock block> = $r3;

        return;
    }

    public void optionalSubRule()
    {
        groovyjarjarantlr.AlternativeBlock $r2, $r7, $r9;
        groovyjarjarantlr.BlockContext $r1, $r6, $r8;
        groovyjarjarantlr.Grammar $r3;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.Tool $r4;
        int $i0, $i1;
        java.lang.String $r5;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r2 = $r1.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $z0 = $r2.<groovyjarjarantlr.AlternativeBlock: boolean not>;

        if $z0 == 0 goto label1;

        $r4 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r3 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r5 = virtualinvoke $r3.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r6 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r7 = $r6.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $i0 = virtualinvoke $r7.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        $r8 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r9 = $r8.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $i1 = virtualinvoke $r9.<groovyjarjarantlr.AlternativeBlock: int getColumn()>();

        virtualinvoke $r4.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("\'~\' cannot be applied to (...)? subrule", $r5, $i0, $i1);

     label1:
        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void beginAlt(boolean)>(0);

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void endAlt()>();

        return;
    }

    public void refAction(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.AlternativeBlock $r3;
        groovyjarjarantlr.BlockContext $r2;
        groovyjarjarantlr.ActionElement $r4;
        groovyjarjarantlr.Token r1;
        groovyjarjarantlr.Grammar $r5;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r1 := @parameter0: groovyjarjarantlr.Token;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void refAction(groovyjarjarantlr.Token)>(r1);

        $r2 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r3 = $r2.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $r3.<groovyjarjarantlr.AlternativeBlock: boolean hasAnAction> = 1;

        $r4 = new groovyjarjarantlr.ActionElement;

        $r5 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r4.<groovyjarjarantlr.ActionElement: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token)>($r5, r1);

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r4);

        return;
    }

    public void setUserExceptions(java.lang.String)
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.AlternativeBlock $r2;
        groovyjarjarantlr.RuleBlock $r4;
        groovyjarjarantlr.BlockContext $r1;
        java.lang.String r3;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r3 := @parameter0: java.lang.String;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r2 = $r1.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $r4 = (groovyjarjarantlr.RuleBlock) $r2;

        $r4.<groovyjarjarantlr.RuleBlock: java.lang.String throwsSpec> = r3;

        return;
    }

    public void refArgAction(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.AlternativeBlock $r2;
        groovyjarjarantlr.RuleBlock $r4;
        groovyjarjarantlr.BlockContext $r1;
        java.lang.String $r5;
        groovyjarjarantlr.Token r3;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r3 := @parameter0: groovyjarjarantlr.Token;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r2 = $r1.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $r4 = (groovyjarjarantlr.RuleBlock) $r2;

        $r5 = virtualinvoke r3.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r4.<groovyjarjarantlr.RuleBlock: java.lang.String argAction> = $r5;

        return;
    }

    public void refCharLiteral(groovyjarjarantlr.Token, groovyjarjarantlr.Token, boolean, int, boolean)
    {
        groovyjarjarantlr.Grammar $r1, $r5, $r7, $r10, $r13;
        groovyjarjarantlr.Token r2, r3;
        boolean $z0, z1, z2, $z3;
        groovyjarjarantlr.RuleBlock $r16;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.LexerGrammar $r6, $r8;
        groovyjarjarantlr.AlternativeBlock $r9;
        groovyjarjarantlr.CharLiteralElement $r18;
        groovyjarjarantlr.Tool $r11, $r14;
        int i0, $i1, $i2, $i5, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r12, $r15, $r17;
        char $c3, $c4, $c6;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r2 := @parameter0: groovyjarjarantlr.Token;

        r3 := @parameter1: groovyjarjarantlr.Token;

        z1 := @parameter2: boolean;

        i0 := @parameter3: int;

        z2 := @parameter4: boolean;

        $r1 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 != 0 goto label1;

        $r14 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r13 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r15 = virtualinvoke $r13.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i9 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i10 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r14.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Character literal only valid in lexer", $r15, $i9, $i10);

        return;

     label1:
        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void refCharLiteral(groovyjarjarantlr.Token,groovyjarjarantlr.Token,boolean,int,boolean)>(r2, r3, z1, i0, z2);

        $r18 = new groovyjarjarantlr.CharLiteralElement;

        $r5 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r6 = (groovyjarjarantlr.LexerGrammar) $r5;

        specialinvoke $r18.<groovyjarjarantlr.CharLiteralElement: void <init>(groovyjarjarantlr.LexerGrammar,groovyjarjarantlr.Token,boolean,int)>($r6, r2, z1, i0);

        $r7 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r8 = (groovyjarjarantlr.LexerGrammar) $r7;

        $z3 = $r8.<groovyjarjarantlr.LexerGrammar: boolean caseSensitive>;

        if $z3 != 0 goto label2;

        $i1 = virtualinvoke $r18.<groovyjarjarantlr.CharLiteralElement: int getType()>();

        if $i1 >= 128 goto label2;

        $i2 = virtualinvoke $r18.<groovyjarjarantlr.CharLiteralElement: int getType()>();

        $c3 = (char) $i2;

        $c4 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c3);

        $i5 = virtualinvoke $r18.<groovyjarjarantlr.CharLiteralElement: int getType()>();

        $c6 = (char) $i5;

        $i11 = (int) $c4;

        $i12 = (int) $c6;

        if $i11 == $i12 goto label2;

        $r11 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r10 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r12 = virtualinvoke $r10.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i7 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i8 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r11.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Character literal must be lowercase when caseSensitive=false", $r12, $i7, $i8);

     label2:
        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r18);

        specialinvoke r0.<groovyjarjarantlr.MakeGrammar: void labelElement(groovyjarjarantlr.AlternativeElement,groovyjarjarantlr.Token)>($r18, r3);

        $r16 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock ruleBlock>;

        $r17 = virtualinvoke $r16.<groovyjarjarantlr.RuleBlock: java.lang.String getIgnoreRule()>();

        if z2 != 0 goto label3;

        if $r17 == null goto label3;

        $r9 = specialinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.AlternativeBlock createOptionalRuleRef(java.lang.String,groovyjarjarantlr.Token)>($r17, r2);

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r9);

     label3:
        return;
    }

    public void refCharRange(groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token, int, boolean)
    {
        groovyjarjarantlr.Grammar $r1, $r6, $r10, $r13, $r16, $r19, $r23;
        groovyjarjarantlr.Token r2, r4, r8;
        boolean $z0, $z1, z2;
        groovyjarjarantlr.RuleBlock $r25;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.LexerGrammar $r7, $r24;
        groovyjarjarantlr.AlternativeBlock $r9;
        groovyjarjarantlr.CharRangeElement $r27;
        groovyjarjarantlr.Tool $r11, $r14, $r17, $r20;
        int $i0, $i1, i2, $i6, $i7, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        java.lang.String $r3, $r5, $r12, $r15, $r18, $r21, $r26;
        char $c3, $c4, $c5, $c8, $c9, $c10;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r2 := @parameter0: groovyjarjarantlr.Token;

        r4 := @parameter1: groovyjarjarantlr.Token;

        r8 := @parameter2: groovyjarjarantlr.Token;

        i2 := @parameter3: int;

        z2 := @parameter4: boolean;

        $r1 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 != 0 goto label1;

        $r20 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r19 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r21 = virtualinvoke $r19.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i15 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i16 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r20.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Character range only valid in lexer", $r21, $i15, $i16);

        return;

     label1:
        $r3 = virtualinvoke r2.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $i0 = staticinvoke <groovyjarjarantlr.ANTLRLexer: int tokenTypeForCharLiteral(java.lang.String)>($r3);

        $r5 = virtualinvoke r4.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $i1 = staticinvoke <groovyjarjarantlr.ANTLRLexer: int tokenTypeForCharLiteral(java.lang.String)>($r5);

        if $i1 >= $i0 goto label2;

        $r17 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r16 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r18 = virtualinvoke $r16.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i13 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i14 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r17.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Malformed range.", $r18, $i13, $i14);

        return;

     label2:
        $r6 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r7 = (groovyjarjarantlr.LexerGrammar) $r6;

        $z1 = $r7.<groovyjarjarantlr.LexerGrammar: boolean caseSensitive>;

        if $z1 != 0 goto label4;

        if $i0 >= 128 goto label3;

        $c8 = (char) $i0;

        $c9 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c8);

        $c10 = (char) $i0;

        $i17 = (int) $c9;

        $i18 = (int) $c10;

        if $i17 == $i18 goto label3;

        $r14 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r13 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r15 = virtualinvoke $r13.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i11 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i12 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r14.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Character literal must be lowercase when caseSensitive=false", $r15, $i11, $i12);

     label3:
        if $i1 >= 128 goto label4;

        $c3 = (char) $i1;

        $c4 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c3);

        $c5 = (char) $i1;

        $i19 = (int) $c4;

        $i20 = (int) $c5;

        if $i19 == $i20 goto label4;

        $r11 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r10 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r12 = virtualinvoke $r10.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i6 = virtualinvoke r4.<groovyjarjarantlr.Token: int getLine()>();

        $i7 = virtualinvoke r4.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r11.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Character literal must be lowercase when caseSensitive=false", $r12, $i6, $i7);

     label4:
        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void refCharRange(groovyjarjarantlr.Token,groovyjarjarantlr.Token,groovyjarjarantlr.Token,int,boolean)>(r2, r4, r8, i2, z2);

        $r27 = new groovyjarjarantlr.CharRangeElement;

        $r23 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r24 = (groovyjarjarantlr.LexerGrammar) $r23;

        specialinvoke $r27.<groovyjarjarantlr.CharRangeElement: void <init>(groovyjarjarantlr.LexerGrammar,groovyjarjarantlr.Token,groovyjarjarantlr.Token,int)>($r24, r2, r4, i2);

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r27);

        specialinvoke r0.<groovyjarjarantlr.MakeGrammar: void labelElement(groovyjarjarantlr.AlternativeElement,groovyjarjarantlr.Token)>($r27, r8);

        $r25 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock ruleBlock>;

        $r26 = virtualinvoke $r25.<groovyjarjarantlr.RuleBlock: java.lang.String getIgnoreRule()>();

        if z2 != 0 goto label5;

        if $r26 == null goto label5;

        $r9 = specialinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.AlternativeBlock createOptionalRuleRef(java.lang.String,groovyjarjarantlr.Token)>($r26, r2);

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r9);

     label5:
        return;
    }

    public void refTokensSpecElementOption(groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.Grammar $r1, $r8, $r15;
        groovyjarjarantlr.Tool $r10, $r20;
        java.lang.StringBuffer $r9, $r11, $r13, $r19, $r21, $r23, $r24;
        int $i0, $i1;
        java.lang.String $r4, $r7, $r12, $r14, $r16, $r18, $r22, $r25;
        groovyjarjarantlr.TokenManager $r3;
        groovyjarjarantlr.Token r2, r6, r17;
        boolean $z0;
        groovyjarjarantlr.TokenSymbol $r5;
        groovyjarjarantlr.MakeGrammar r0;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r2 := @parameter0: groovyjarjarantlr.Token;

        r6 := @parameter1: groovyjarjarantlr.Token;

        r17 := @parameter2: groovyjarjarantlr.Token;

        $r1 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r3 = $r1.<groovyjarjarantlr.Grammar: groovyjarjarantlr.TokenManager tokenManager>;

        $r4 = virtualinvoke r2.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r5 = interfaceinvoke $r3.<groovyjarjarantlr.TokenManager: groovyjarjarantlr.TokenSymbol getTokenSymbol(java.lang.String)>($r4);

        if $r5 != null goto label1;

        $r20 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("cannot find ");

        $r22 = virtualinvoke r2.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("in tokens {...}");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r20.<groovyjarjarantlr.Tool: void panic(java.lang.String)>($r25);

     label1:
        $r7 = virtualinvoke r6.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("AST");

        if $z0 == 0 goto label2;

        $r18 = virtualinvoke r17.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke $r5.<groovyjarjarantlr.TokenSymbol: void setASTNodeType(java.lang.String)>($r18);

        goto label3;

     label2:
        $r8 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r10 = $r8.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Tool antlrTool>;

        $r9 = new java.lang.StringBuffer;

        specialinvoke $r9.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("invalid tokens {...} element option:");

        $r12 = virtualinvoke r6.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        $r15 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r16 = virtualinvoke $r15.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r6.<groovyjarjarantlr.Token: int getLine()>();

        $i1 = virtualinvoke r6.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r10.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r14, $r16, $i0, $i1);

     label3:
        return;
    }

    public void refElementOption(groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.Grammar $r12;
        groovyjarjarantlr.Tool $r6;
        java.lang.StringBuffer $r5, $r7, $r9, $r10;
        int $i0, $i1;
        java.lang.String $r8, $r11, $r13;
        groovyjarjarantlr.Token r3, r4;
        boolean $z0, $z1, $z2;
        groovyjarjarantlr.BlockContext $r1;
        groovyjarjarantlr.GrammarAtom $r14;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.AlternativeElement $r2;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r3 := @parameter0: groovyjarjarantlr.Token;

        r4 := @parameter1: groovyjarjarantlr.Token;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeElement currentElement()>();

        $z0 = $r2 instanceof groovyjarjarantlr.StringLiteralElement;

        if $z0 != 0 goto label1;

        $z1 = $r2 instanceof groovyjarjarantlr.TokenRefElement;

        if $z1 != 0 goto label1;

        $z2 = $r2 instanceof groovyjarjarantlr.WildcardElement;

        if $z2 == 0 goto label2;

     label1:
        $r14 = (groovyjarjarantlr.GrammarAtom) $r2;

        virtualinvoke $r14.<groovyjarjarantlr.GrammarAtom: void setOption(groovyjarjarantlr.Token,groovyjarjarantlr.Token)>(r3, r4);

        goto label3;

     label2:
        $r6 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("cannot use element option (");

        $r8 = virtualinvoke r3.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") for this kind of element");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        $r12 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r13 = virtualinvoke $r12.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r3.<groovyjarjarantlr.Token: int getLine()>();

        $i1 = virtualinvoke r3.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r6.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>($r11, $r13, $i0, $i1);

     label3:
        return;
    }

    public void refExceptionHandler(groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.ExceptionHandler $r4;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.Tool $r6;
        groovyjarjarantlr.ExceptionSpec $r3, $r5;
        groovyjarjarantlr.Token r1, r2;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void refExceptionHandler(groovyjarjarantlr.Token,groovyjarjarantlr.Token)>(r1, r2);

        $r3 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.ExceptionSpec currentExceptionSpec>;

        if $r3 != null goto label1;

        $r6 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        virtualinvoke $r6.<groovyjarjarantlr.Tool: void panic(java.lang.String)>("exception handler processing internal error");

     label1:
        $r5 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.ExceptionSpec currentExceptionSpec>;

        $r4 = new groovyjarjarantlr.ExceptionHandler;

        specialinvoke $r4.<groovyjarjarantlr.ExceptionHandler: void <init>(groovyjarjarantlr.Token,groovyjarjarantlr.Token)>(r1, r2);

        virtualinvoke $r5.<groovyjarjarantlr.ExceptionSpec: void addHandler(groovyjarjarantlr.ExceptionHandler)>($r4);

        return;
    }

    public void refInitAction(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.AlternativeBlock $r3;
        groovyjarjarantlr.BlockContext $r2;
        java.lang.String $r4;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r1 := @parameter0: groovyjarjarantlr.Token;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void refAction(groovyjarjarantlr.Token)>(r1);

        $r2 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r3 = $r2.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $r4 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke $r3.<groovyjarjarantlr.AlternativeBlock: void setInitAction(java.lang.String)>($r4);

        return;
    }

    public void refMemberAction(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.Token r1;
        groovyjarjarantlr.Grammar $r2;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r1 := @parameter0: groovyjarjarantlr.Token;

        $r2 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r2.<groovyjarjarantlr.Grammar: groovyjarjarantlr.Token classMemberAction> = r1;

        return;
    }

    public void refPreambleAction(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r1 := @parameter0: groovyjarjarantlr.Token;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void refPreambleAction(groovyjarjarantlr.Token)>(r1);

        return;
    }

    public void refReturnAction(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.AlternativeBlock $r3, $r8;
        groovyjarjarantlr.Grammar $r1, $r12, $r16;
        groovyjarjarantlr.Tool $r17;
        int $i0, $i1;
        java.lang.String $r6, $r10, $r11, $r15, $r18;
        groovyjarjarantlr.Token r4;
        boolean $z0, $z1;
        groovyjarjarantlr.RuleBlock $r5, $r9;
        groovyjarjarantlr.BlockContext $r2, $r7;
        groovyjarjarantlr.RuleSymbol r14;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.GrammarSymbol $r13;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r4 := @parameter0: groovyjarjarantlr.Token;

        $r1 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r8 = $r7.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $r9 = (groovyjarjarantlr.RuleBlock) $r8;

        $r10 = virtualinvoke $r9.<groovyjarjarantlr.RuleBlock: java.lang.String getRuleName()>();

        $r11 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>($r10);

        $r12 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r13 = virtualinvoke $r12.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>($r11);

        r14 = (groovyjarjarantlr.RuleSymbol) $r13;

        $r15 = r14.<groovyjarjarantlr.RuleSymbol: java.lang.String access>;

        $z1 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>("public");

        if $z1 == 0 goto label1;

        $r17 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r16 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r18 = virtualinvoke $r16.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i0 = virtualinvoke r4.<groovyjarjarantlr.Token: int getLine()>();

        $i1 = virtualinvoke r4.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r17.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("public Lexical rules cannot specify return type", $r18, $i0, $i1);

        return;

     label1:
        $r2 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r3 = $r2.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $r5 = (groovyjarjarantlr.RuleBlock) $r3;

        $r6 = virtualinvoke r4.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r5.<groovyjarjarantlr.RuleBlock: java.lang.String returnAction> = $r6;

        return;
    }

    public void refRule(groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token, int)
    {
        groovyjarjarantlr.Grammar $r1, $r8, $r17, $r28;
        groovyjarjarantlr.RuleRefElement $r6, $r10, $r11, $r13, $r15, $r27;
        groovyjarjarantlr.Token r2, r3, r4, r5;
        boolean $z0;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.GrammarSymbol $r9;
        groovyjarjarantlr.Tool $r18, $r21;
        java.lang.StringBuffer $r20, $r22, $r24, $r25;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.String $r7, $r14, $r16, $r19, $r23, $r26, r29;
        groovyjarjarantlr.RuleSymbol $r12;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r2 := @parameter0: groovyjarjarantlr.Token;

        r3 := @parameter1: groovyjarjarantlr.Token;

        r4 := @parameter2: groovyjarjarantlr.Token;

        r5 := @parameter3: groovyjarjarantlr.Token;

        i0 := @parameter4: int;

        $r1 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label2;

        $i2 = r3.<groovyjarjarantlr.Token: int type>;

        if $i2 == 24 goto label1;

        $r21 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Parser rule ");

        $r23 = virtualinvoke r3.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" referenced in lexer");

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r21.<groovyjarjarantlr.Tool: void error(java.lang.String)>($r26);

        return;

     label1:
        if i0 != 2 goto label2;

        $r18 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r17 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r19 = virtualinvoke $r17.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i3 = virtualinvoke r3.<groovyjarjarantlr.Token: int getLine()>();

        $i4 = virtualinvoke r3.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r18.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("AST specification ^ not allowed in lexer", $r19, $i3, $i4);

     label2:
        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void refRule(groovyjarjarantlr.Token,groovyjarjarantlr.Token,groovyjarjarantlr.Token,groovyjarjarantlr.Token,int)>(r2, r3, r4, r5, i0);

        $r27 = new groovyjarjarantlr.RuleRefElement;

        $r28 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r27.<groovyjarjarantlr.RuleRefElement: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token,int)>($r28, r3, i0);

        r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleRefElement lastRuleRef> = $r27;

        if r5 == null goto label3;

        $r15 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleRefElement lastRuleRef>;

        $r16 = virtualinvoke r5.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke $r15.<groovyjarjarantlr.RuleRefElement: void setArgs(java.lang.String)>($r16);

     label3:
        if r2 == null goto label4;

        $r13 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleRefElement lastRuleRef>;

        $r14 = virtualinvoke r2.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke $r13.<groovyjarjarantlr.RuleRefElement: void setIdAssign(java.lang.String)>($r14);

     label4:
        $r6 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleRefElement lastRuleRef>;

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r6);

        $r7 = virtualinvoke r3.<groovyjarjarantlr.Token: java.lang.String getText()>();

        r29 = $r7;

        $i1 = r3.<groovyjarjarantlr.Token: int type>;

        if $i1 != 24 goto label5;

        r29 = staticinvoke <groovyjarjarantlr.CodeGenerator: java.lang.String encodeLexerRuleName(java.lang.String)>($r7);

     label5:
        $r8 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r9 = virtualinvoke $r8.<groovyjarjarantlr.Grammar: groovyjarjarantlr.GrammarSymbol getSymbol(java.lang.String)>(r29);

        $r12 = (groovyjarjarantlr.RuleSymbol) $r9;

        $r10 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleRefElement lastRuleRef>;

        virtualinvoke $r12.<groovyjarjarantlr.RuleSymbol: void addReference(groovyjarjarantlr.RuleRefElement)>($r10);

        $r11 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleRefElement lastRuleRef>;

        specialinvoke r0.<groovyjarjarantlr.MakeGrammar: void labelElement(groovyjarjarantlr.AlternativeElement,groovyjarjarantlr.Token)>($r11, r4);

        return;
    }

    public void refSemPred(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.BlockContext $r2, $r6;
        groovyjarjarantlr.Grammar $r5;
        groovyjarjarantlr.Alternative $r3, $r7;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.ActionElement $r4;
        java.lang.String $r8;
        groovyjarjarantlr.Token r1;
        boolean $z0;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r1 := @parameter0: groovyjarjarantlr.Token;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void refSemPred(groovyjarjarantlr.Token)>(r1);

        $r2 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r3 = virtualinvoke $r2.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.Alternative currentAlt()>();

        $z0 = virtualinvoke $r3.<groovyjarjarantlr.Alternative: boolean atStart()>();

        if $z0 == 0 goto label1;

        $r6 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r7 = virtualinvoke $r6.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.Alternative currentAlt()>();

        $r8 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $r7.<groovyjarjarantlr.Alternative: java.lang.String semPred> = $r8;

        goto label2;

     label1:
        $r4 = new groovyjarjarantlr.ActionElement;

        $r5 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r4.<groovyjarjarantlr.ActionElement: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token)>($r5, r1);

        $r4.<groovyjarjarantlr.ActionElement: boolean isSemPred> = 1;

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r4);

     label2:
        return;
    }

    public void refStringLiteral(groovyjarjarantlr.Token, groovyjarjarantlr.Token, int, boolean)
    {
        groovyjarjarantlr.Grammar $r3, $r5, $r9, $r12, $r16, $r17;
        groovyjarjarantlr.Token r1, r2;
        boolean z0, $z1, $z2, $z3;
        groovyjarjarantlr.RuleBlock $r18;
        groovyjarjarantlr.StringLiteralElement $r20;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.LexerGrammar $r6;
        groovyjarjarantlr.AlternativeBlock $r4;
        groovyjarjarantlr.Tool $r10, $r13;
        int i0, $i1, $i2, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12;
        java.lang.String $r7, $r8, $r11, $r14, $r19;
        char $c3, $c4;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void refStringLiteral(groovyjarjarantlr.Token,groovyjarjarantlr.Token,int,boolean)>(r1, r2, i0, z0);

        $r3 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $z1 = $r3 instanceof groovyjarjarantlr.TreeWalkerGrammar;

        if $z1 == 0 goto label1;

        if i0 != 2 goto label1;

        $r13 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r12 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r14 = virtualinvoke $r12.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i7 = virtualinvoke r1.<groovyjarjarantlr.Token: int getLine()>();

        $i8 = virtualinvoke r1.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r13.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("^ not allowed in here for tree-walker", $r14, $i7, $i8);

     label1:
        $r20 = new groovyjarjarantlr.StringLiteralElement;

        $r16 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r20.<groovyjarjarantlr.StringLiteralElement: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token,int)>($r16, r1, i0);

        $r17 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $z3 = $r17 instanceof groovyjarjarantlr.LexerGrammar;

        if $z3 == 0 goto label4;

        $r5 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r6 = (groovyjarjarantlr.LexerGrammar) $r5;

        $z2 = $r6.<groovyjarjarantlr.LexerGrammar: boolean caseSensitive>;

        if $z2 != 0 goto label4;

        i9 = 1;

     label2:
        $r7 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i2 = $i1 - 1;

        if i9 >= $i2 goto label4;

        $r8 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        $c3 = virtualinvoke $r8.<java.lang.String: char charAt(int)>(i9);

        $i10 = (int) $c3;

        if $i10 >= 128 goto label3;

        $c4 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c3);

        $i11 = (int) $c4;

        $i12 = (int) $c3;

        if $i11 == $i12 goto label3;

        $r10 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r9 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r11 = virtualinvoke $r9.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i5 = virtualinvoke r1.<groovyjarjarantlr.Token: int getLine()>();

        $i6 = virtualinvoke r1.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r10.<groovyjarjarantlr.Tool: void warning(java.lang.String,java.lang.String,int,int)>("Characters of string literal must be lowercase when caseSensitive=false", $r11, $i5, $i6);

        goto label4;

     label3:
        i9 = i9 + 1;

        goto label2;

     label4:
        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r20);

        specialinvoke r0.<groovyjarjarantlr.MakeGrammar: void labelElement(groovyjarjarantlr.AlternativeElement,groovyjarjarantlr.Token)>($r20, r2);

        $r18 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock ruleBlock>;

        $r19 = virtualinvoke $r18.<groovyjarjarantlr.RuleBlock: java.lang.String getIgnoreRule()>();

        if z0 != 0 goto label5;

        if $r19 == null goto label5;

        $r4 = specialinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.AlternativeBlock createOptionalRuleRef(java.lang.String,groovyjarjarantlr.Token)>($r19, r1);

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r4);

     label5:
        return;
    }

    public void refToken(groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token, boolean, int, boolean)
    {
        groovyjarjarantlr.Grammar $r1, $r7, $r8, $r11, $r17, $r20;
        groovyjarjarantlr.Token r2, r3, r4, r5;
        boolean $z0, z1, z2;
        groovyjarjarantlr.RuleBlock $r14;
        groovyjarjarantlr.TokenRefElement $r6;
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.AlternativeBlock $r16;
        groovyjarjarantlr.Tool $r9, $r12, $r18, $r21;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r10, $r13, $r15, $r19, $r22;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r2 := @parameter0: groovyjarjarantlr.Token;

        r4 := @parameter1: groovyjarjarantlr.Token;

        r5 := @parameter2: groovyjarjarantlr.Token;

        r3 := @parameter3: groovyjarjarantlr.Token;

        z1 := @parameter4: boolean;

        i0 := @parameter5: int;

        z2 := @parameter6: boolean;

        $r1 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label3;

        if i0 != 2 goto label1;

        $r21 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r20 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r22 = virtualinvoke $r20.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i7 = virtualinvoke r4.<groovyjarjarantlr.Token: int getLine()>();

        $i8 = virtualinvoke r4.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r21.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("AST specification ^ not allowed in lexer", $r22, $i7, $i8);

     label1:
        if z1 == 0 goto label2;

        $r18 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r17 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r19 = virtualinvoke $r17.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i5 = virtualinvoke r4.<groovyjarjarantlr.Token: int getLine()>();

        $i6 = virtualinvoke r4.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r18.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("~TOKEN is not allowed in lexer", $r19, $i5, $i6);

     label2:
        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void refRule(groovyjarjarantlr.Token,groovyjarjarantlr.Token,groovyjarjarantlr.Token,groovyjarjarantlr.Token,int)>(r2, r4, r5, r3, i0);

        $r14 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock ruleBlock>;

        $r15 = virtualinvoke $r14.<groovyjarjarantlr.RuleBlock: java.lang.String getIgnoreRule()>();

        if z2 != 0 goto label6;

        if $r15 == null goto label6;

        $r16 = specialinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.AlternativeBlock createOptionalRuleRef(java.lang.String,groovyjarjarantlr.Token)>($r15, r4);

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r16);

        goto label6;

     label3:
        if r2 == null goto label4;

        $r12 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r11 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r13 = virtualinvoke $r11.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i3 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i4 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r12.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Assignment from token reference only allowed in lexer", $r13, $i3, $i4);

     label4:
        if r3 == null goto label5;

        $r9 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r8 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r10 = virtualinvoke $r8.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i1 = virtualinvoke r3.<groovyjarjarantlr.Token: int getLine()>();

        $i2 = virtualinvoke r3.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r9.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Token reference arguments only allowed in lexer", $r10, $i1, $i2);

     label5:
        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void refToken(groovyjarjarantlr.Token,groovyjarjarantlr.Token,groovyjarjarantlr.Token,groovyjarjarantlr.Token,boolean,int,boolean)>(r2, r4, r5, r3, z1, i0, z2);

        $r6 = new groovyjarjarantlr.TokenRefElement;

        $r7 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r6.<groovyjarjarantlr.TokenRefElement: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token,boolean,int)>($r7, r4, z1, i0);

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r6);

        specialinvoke r0.<groovyjarjarantlr.MakeGrammar: void labelElement(groovyjarjarantlr.AlternativeElement,groovyjarjarantlr.Token)>($r6, r5);

     label6:
        return;
    }

    public void refTokenRange(groovyjarjarantlr.Token, groovyjarjarantlr.Token, groovyjarjarantlr.Token, int, boolean)
    {
        groovyjarjarantlr.Grammar $r1, $r6, $r7, $r10;
        groovyjarjarantlr.TokenRangeElement $r5;
        groovyjarjarantlr.Tool $r8, $r11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r9, $r12;
        groovyjarjarantlr.Token r2, r3, r4;
        boolean $z0, z1;
        groovyjarjarantlr.MakeGrammar r0;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r2 := @parameter0: groovyjarjarantlr.Token;

        r3 := @parameter1: groovyjarjarantlr.Token;

        r4 := @parameter2: groovyjarjarantlr.Token;

        i0 := @parameter3: int;

        z1 := @parameter4: boolean;

        $r1 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $z0 = $r1 instanceof groovyjarjarantlr.LexerGrammar;

        if $z0 == 0 goto label1;

        $r11 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r10 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r12 = virtualinvoke $r10.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i5 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i6 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r11.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Token range not allowed in lexer", $r12, $i5, $i6);

        return;

     label1:
        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void refTokenRange(groovyjarjarantlr.Token,groovyjarjarantlr.Token,groovyjarjarantlr.Token,int,boolean)>(r2, r3, r4, i0, z1);

        $r5 = new groovyjarjarantlr.TokenRangeElement;

        $r6 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r5.<groovyjarjarantlr.TokenRangeElement: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token,groovyjarjarantlr.Token,int)>($r6, r2, r3, i0);

        $i2 = $r5.<groovyjarjarantlr.TokenRangeElement: int end>;

        $i1 = $r5.<groovyjarjarantlr.TokenRangeElement: int begin>;

        if $i2 >= $i1 goto label2;

        $r8 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r7 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r9 = virtualinvoke $r7.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $i3 = virtualinvoke r2.<groovyjarjarantlr.Token: int getLine()>();

        $i4 = virtualinvoke r2.<groovyjarjarantlr.Token: int getColumn()>();

        virtualinvoke $r8.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("Malformed range.", $r9, $i3, $i4);

        return;

     label2:
        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r5);

        specialinvoke r0.<groovyjarjarantlr.MakeGrammar: void labelElement(groovyjarjarantlr.AlternativeElement,groovyjarjarantlr.Token)>($r5, r4);

        return;
    }

    public void refTreeSpecifier(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.BlockContext $r1;
        groovyjarjarantlr.Token r3;
        groovyjarjarantlr.Alternative $r2;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r3 := @parameter0: groovyjarjarantlr.Token;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r2 = virtualinvoke $r1.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.Alternative currentAlt()>();

        $r2.<groovyjarjarantlr.Alternative: groovyjarjarantlr.Token treeSpecifier> = r3;

        return;
    }

    public void refWildcard(groovyjarjarantlr.Token, groovyjarjarantlr.Token, int)
    {
        groovyjarjarantlr.MakeGrammar r0;
        int i0;
        groovyjarjarantlr.Token r1, r2;
        groovyjarjarantlr.Grammar $r4;
        groovyjarjarantlr.WildcardElement $r3;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        i0 := @parameter2: int;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void refWildcard(groovyjarjarantlr.Token,groovyjarjarantlr.Token,int)>(r1, r2, i0);

        $r3 = new groovyjarjarantlr.WildcardElement;

        $r4 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r3.<groovyjarjarantlr.WildcardElement: void <init>(groovyjarjarantlr.Grammar,groovyjarjarantlr.Token,int)>($r4, r1, i0);

        virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: void addElementToCurrentAlt(groovyjarjarantlr.AlternativeElement)>($r3);

        specialinvoke r0.<groovyjarjarantlr.MakeGrammar: void labelElement(groovyjarjarantlr.AlternativeElement,groovyjarjarantlr.Token)>($r3, r2);

        return;
    }

    public void reset()
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.collections.impl.LList $r1;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void reset()>();

        $r1 = new groovyjarjarantlr.collections.impl.LList;

        specialinvoke $r1.<groovyjarjarantlr.collections.impl.LList: void <init>()>();

        r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks> = $r1;

        r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleRefElement lastRuleRef> = null;

        r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleEndElement ruleEnd> = null;

        r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock ruleBlock> = null;

        r0.<groovyjarjarantlr.MakeGrammar: int nested> = 0;

        r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.ExceptionSpec currentExceptionSpec> = null;

        r0.<groovyjarjarantlr.MakeGrammar: boolean grammarError> = 0;

        return;
    }

    public void setArgOfRuleRef(groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.RuleRefElement $r2;
        java.lang.String $r3;
        groovyjarjarantlr.Token r1;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r1 := @parameter0: groovyjarjarantlr.Token;

        specialinvoke r0.<groovyjarjarantlr.DefineGrammarSymbols: void setArgOfRuleRef(groovyjarjarantlr.Token)>(r1);

        $r2 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleRefElement lastRuleRef>;

        $r3 = virtualinvoke r1.<groovyjarjarantlr.Token: java.lang.String getText()>();

        virtualinvoke $r2.<groovyjarjarantlr.RuleRefElement: void setArgs(java.lang.String)>($r3);

        return;
    }

    public static void setBlock(groovyjarjarantlr.AlternativeBlock, groovyjarjarantlr.AlternativeBlock)
    {
        groovyjarjarantlr.AlternativeBlock r0, r1;
        int $i0;
        java.lang.String $r3, $r4;
        groovyjarjarantlr.collections.impl.Vector $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;

        r0 := @parameter0: groovyjarjarantlr.AlternativeBlock;

        r1 := @parameter1: groovyjarjarantlr.AlternativeBlock;

        $r2 = virtualinvoke r1.<groovyjarjarantlr.AlternativeBlock: groovyjarjarantlr.collections.impl.Vector getAlternatives()>();

        virtualinvoke r0.<groovyjarjarantlr.AlternativeBlock: void setAlternatives(groovyjarjarantlr.collections.impl.Vector)>($r2);

        $r3 = r1.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction>;

        r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String initAction> = $r3;

        $r4 = r1.<groovyjarjarantlr.AlternativeBlock: java.lang.String label>;

        r0.<groovyjarjarantlr.AlternativeBlock: java.lang.String label> = $r4;

        $z0 = r1.<groovyjarjarantlr.AlternativeBlock: boolean hasASynPred>;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean hasASynPred> = $z0;

        $z1 = r1.<groovyjarjarantlr.AlternativeBlock: boolean hasAnAction>;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean hasAnAction> = $z1;

        $z2 = r1.<groovyjarjarantlr.AlternativeBlock: boolean warnWhenFollowAmbig>;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean warnWhenFollowAmbig> = $z2;

        $z3 = r1.<groovyjarjarantlr.AlternativeBlock: boolean generateAmbigWarnings>;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean generateAmbigWarnings> = $z3;

        $i0 = r1.<groovyjarjarantlr.AlternativeBlock: int line>;

        r0.<groovyjarjarantlr.AlternativeBlock: int line> = $i0;

        $z4 = r1.<groovyjarjarantlr.AlternativeBlock: boolean greedy>;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean greedy> = $z4;

        $z5 = r1.<groovyjarjarantlr.AlternativeBlock: boolean greedySet>;

        r0.<groovyjarjarantlr.AlternativeBlock: boolean greedySet> = $z5;

        return;
    }

    public void setRuleOption(groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.RuleBlock $r3;
        groovyjarjarantlr.Token r1, r2;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r1 := @parameter0: groovyjarjarantlr.Token;

        r2 := @parameter1: groovyjarjarantlr.Token;

        $r3 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.RuleBlock ruleBlock>;

        virtualinvoke $r3.<groovyjarjarantlr.RuleBlock: void setOption(groovyjarjarantlr.Token,groovyjarjarantlr.Token)>(r1, r2);

        return;
    }

    public void setSubruleOption(groovyjarjarantlr.Token, groovyjarjarantlr.Token)
    {
        groovyjarjarantlr.MakeGrammar r0;
        groovyjarjarantlr.AlternativeBlock $r4;
        groovyjarjarantlr.BlockContext $r1;
        groovyjarjarantlr.Token r2, r3;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        r2 := @parameter0: groovyjarjarantlr.Token;

        r3 := @parameter1: groovyjarjarantlr.Token;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r4 = $r1.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        virtualinvoke $r4.<groovyjarjarantlr.AlternativeBlock: void setOption(groovyjarjarantlr.Token,groovyjarjarantlr.Token)>(r2, r3);

        return;
    }

    public void synPred()
    {
        groovyjarjarantlr.AlternativeBlock $r2, $r6, $r20, $r22;
        groovyjarjarantlr.BlockEndElement $r13, $r15;
        groovyjarjarantlr.Grammar $r4, $r16;
        groovyjarjarantlr.Tool $r17;
        int $i0, $i1;
        java.lang.String $r18;
        boolean $z0;
        groovyjarjarantlr.BlockContext $r1, $r5, $r9, $r11, $r12, $r14, $r19, $r21, $r23;
        groovyjarjarantlr.MakeGrammar r0;
        java.lang.Object $r8;
        groovyjarjarantlr.collections.Stack $r7, $r10;
        groovyjarjarantlr.SynPredBlock $r3;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r2 = $r1.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $z0 = $r2.<groovyjarjarantlr.AlternativeBlock: boolean not>;

        if $z0 == 0 goto label1;

        $r17 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r16 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r18 = virtualinvoke $r16.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r19 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r20 = $r19.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $i0 = virtualinvoke $r20.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        $r21 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r22 = $r21.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $i1 = virtualinvoke $r22.<groovyjarjarantlr.AlternativeBlock: int getColumn()>();

        virtualinvoke $r17.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("\'~\' cannot be applied to syntactic predicate", $r18, $i0, $i1);

     label1:
        $r3 = new groovyjarjarantlr.SynPredBlock;

        $r4 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r3.<groovyjarjarantlr.SynPredBlock: void <init>(groovyjarjarantlr.Grammar)>($r4);

        $r5 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r6 = $r5.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        staticinvoke <groovyjarjarantlr.MakeGrammar: void setBlock(groovyjarjarantlr.AlternativeBlock,groovyjarjarantlr.AlternativeBlock)>($r3, $r6);

        $r7 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks>;

        $r8 = interfaceinvoke $r7.<groovyjarjarantlr.collections.Stack: java.lang.Object pop()>();

        $r23 = (groovyjarjarantlr.BlockContext) $r8;

        $r10 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks>;

        $r9 = new groovyjarjarantlr.BlockContext;

        specialinvoke $r9.<groovyjarjarantlr.BlockContext: void <init>()>();

        interfaceinvoke $r10.<groovyjarjarantlr.collections.Stack: void push(java.lang.Object)>($r9);

        $r11 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r11.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block> = $r3;

        $r12 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r13 = $r23.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.BlockEndElement blockEnd>;

        $r12.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.BlockEndElement blockEnd> = $r13;

        $r14 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r15 = $r14.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.BlockEndElement blockEnd>;

        $r15.<groovyjarjarantlr.BlockEndElement: groovyjarjarantlr.AlternativeBlock block> = $r3;

        return;
    }

    public void zeroOrMoreSubRule()
    {
        groovyjarjarantlr.AlternativeBlock $r2, $r6, $r20, $r22;
        groovyjarjarantlr.BlockEndElement $r13, $r15;
        groovyjarjarantlr.ZeroOrMoreBlock $r3;
        groovyjarjarantlr.Grammar $r4, $r16;
        groovyjarjarantlr.Tool $r17;
        int $i0, $i1;
        java.lang.String $r18;
        boolean $z0;
        groovyjarjarantlr.BlockContext $r1, $r5, $r9, $r11, $r12, $r14, $r19, $r21, $r23;
        groovyjarjarantlr.MakeGrammar r0;
        java.lang.Object $r8;
        groovyjarjarantlr.collections.Stack $r7, $r10;

        r0 := @this: groovyjarjarantlr.MakeGrammar;

        $r1 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r2 = $r1.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $z0 = $r2.<groovyjarjarantlr.AlternativeBlock: boolean not>;

        if $z0 == 0 goto label1;

        $r17 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Tool tool>;

        $r16 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        $r18 = virtualinvoke $r16.<groovyjarjarantlr.Grammar: java.lang.String getFilename()>();

        $r19 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r20 = $r19.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $i0 = virtualinvoke $r20.<groovyjarjarantlr.AlternativeBlock: int getLine()>();

        $r21 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r22 = $r21.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        $i1 = virtualinvoke $r22.<groovyjarjarantlr.AlternativeBlock: int getColumn()>();

        virtualinvoke $r17.<groovyjarjarantlr.Tool: void error(java.lang.String,java.lang.String,int,int)>("\'~\' cannot be applied to (...)+ subrule", $r18, $i0, $i1);

     label1:
        $r3 = new groovyjarjarantlr.ZeroOrMoreBlock;

        $r4 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.Grammar grammar>;

        specialinvoke $r3.<groovyjarjarantlr.ZeroOrMoreBlock: void <init>(groovyjarjarantlr.Grammar)>($r4);

        $r5 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r6 = $r5.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block>;

        staticinvoke <groovyjarjarantlr.MakeGrammar: void setBlock(groovyjarjarantlr.AlternativeBlock,groovyjarjarantlr.AlternativeBlock)>($r3, $r6);

        $r7 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks>;

        $r8 = interfaceinvoke $r7.<groovyjarjarantlr.collections.Stack: java.lang.Object pop()>();

        $r23 = (groovyjarjarantlr.BlockContext) $r8;

        $r10 = r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.collections.Stack blocks>;

        $r9 = new groovyjarjarantlr.BlockContext;

        specialinvoke $r9.<groovyjarjarantlr.BlockContext: void <init>()>();

        interfaceinvoke $r10.<groovyjarjarantlr.collections.Stack: void push(java.lang.Object)>($r9);

        $r11 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r11.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.AlternativeBlock block> = $r3;

        $r12 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r13 = $r23.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.BlockEndElement blockEnd>;

        $r12.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.BlockEndElement blockEnd> = $r13;

        $r14 = virtualinvoke r0.<groovyjarjarantlr.MakeGrammar: groovyjarjarantlr.BlockContext context()>();

        $r15 = $r14.<groovyjarjarantlr.BlockContext: groovyjarjarantlr.BlockEndElement blockEnd>;

        $r15.<groovyjarjarantlr.BlockEndElement: groovyjarjarantlr.AlternativeBlock block> = $r3;

        return;
    }
}
