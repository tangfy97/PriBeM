public class org.apache.fontbox.cff.AFMFormatter extends java.lang.Object
{

    private void <init>()
    {
        org.apache.fontbox.cff.AFMFormatter r0;

        r0 := @this: org.apache.fontbox.cff.AFMFormatter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static byte[] format(org.apache.fontbox.cff.CFFFont) throws java.io.IOException
    {
        org.apache.fontbox.cff.CFFFont r1;
        byte[] $r2;
        org.apache.fontbox.cff.DataOutput $r0;

        r1 := @parameter0: org.apache.fontbox.cff.CFFFont;

        $r0 = new org.apache.fontbox.cff.DataOutput;

        specialinvoke $r0.<org.apache.fontbox.cff.DataOutput: void <init>()>();

        staticinvoke <org.apache.fontbox.cff.AFMFormatter: void printFont(org.apache.fontbox.cff.CFFFont,org.apache.fontbox.cff.DataOutput)>(r1, $r0);

        $r2 = virtualinvoke $r0.<org.apache.fontbox.cff.DataOutput: byte[] getBytes()>();

        return $r2;
    }

    private static void printFont(org.apache.fontbox.cff.CFFFont, org.apache.fontbox.cff.DataOutput) throws java.io.IOException
    {
        org.apache.fontbox.cff.CFFFont r0;
        org.apache.fontbox.cff.DataOutput r1;

        r0 := @parameter0: org.apache.fontbox.cff.CFFFont;

        r1 := @parameter1: org.apache.fontbox.cff.DataOutput;

        staticinvoke <org.apache.fontbox.cff.AFMFormatter: void printFontMetrics(org.apache.fontbox.cff.CFFFont,org.apache.fontbox.cff.DataOutput)>(r0, r1);

        return;
    }

    private static void printFontMetrics(org.apache.fontbox.cff.CFFFont, org.apache.fontbox.cff.DataOutput) throws java.io.IOException
    {
        java.awt.geom.Rectangle2D $r24;
        org.apache.fontbox.cff.CFFFont r0;
        boolean $z0;
        java.util.List $r1;
        java.lang.StringBuilder $r3, $r4, $r6, $r8, $r9, $r11, $r13, $r14, $r16, $r18, $r19, $r21, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r5, $r7, $r12, $r17, $r22, $r34;
        double $d0, $d1, $d2, $d3;
        org.apache.fontbox.cff.encoding.CFFEncoding $r23;
        java.lang.Object $r10, $r15, $r20;
        org.apache.fontbox.cff.DataOutput r2;

        r0 := @parameter0: org.apache.fontbox.cff.CFFFont;

        r2 := @parameter1: org.apache.fontbox.cff.DataOutput;

        $r1 = staticinvoke <org.apache.fontbox.cff.AFMFormatter: java.util.List renderFont(org.apache.fontbox.cff.CFFFont)>(r0);

        virtualinvoke r2.<org.apache.fontbox.cff.DataOutput: void println(java.lang.String)>("StartFontMetrics 2.0");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FontName ");

        $r5 = virtualinvoke r0.<org.apache.fontbox.cff.CFFFont: java.lang.String getName()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.fontbox.cff.DataOutput: void println(java.lang.String)>($r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FullName ");

        $r10 = virtualinvoke r0.<org.apache.fontbox.cff.CFFFont: java.lang.Object getProperty(java.lang.String)>("FullName");

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.fontbox.cff.DataOutput: void println(java.lang.String)>($r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FamilyName ");

        $r15 = virtualinvoke r0.<org.apache.fontbox.cff.CFFFont: java.lang.Object getProperty(java.lang.String)>("FamilyName");

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.fontbox.cff.DataOutput: void println(java.lang.String)>($r17);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Weight ");

        $r20 = virtualinvoke r0.<org.apache.fontbox.cff.CFFFont: java.lang.Object getProperty(java.lang.String)>("Weight");

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.fontbox.cff.DataOutput: void println(java.lang.String)>($r22);

        $r23 = virtualinvoke r0.<org.apache.fontbox.cff.CFFFont: org.apache.fontbox.cff.encoding.CFFEncoding getEncoding()>();

        $z0 = virtualinvoke $r23.<org.apache.fontbox.cff.encoding.CFFEncoding: boolean isFontSpecific()>();

        if $z0 == 0 goto label1;

        virtualinvoke r2.<org.apache.fontbox.cff.DataOutput: void println(java.lang.String)>("EncodingScheme FontSpecific");

     label1:
        $r24 = staticinvoke <org.apache.fontbox.cff.AFMFormatter: java.awt.geom.Rectangle2D getBounds(java.util.List)>($r1);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FontBBox ");

        $d0 = virtualinvoke $r24.<java.awt.geom.Rectangle2D: double getX()>();

        $i0 = (int) $d0;

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d1 = virtualinvoke $r24.<java.awt.geom.Rectangle2D: double getY()>();

        $i1 = (int) $d1;

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d2 = virtualinvoke $r24.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $i2 = (int) $d2;

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $d3 = virtualinvoke $r24.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $i3 = (int) $d3;

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<org.apache.fontbox.cff.DataOutput: void println(java.lang.String)>($r34);

        staticinvoke <org.apache.fontbox.cff.AFMFormatter: void printDirectionMetrics(org.apache.fontbox.cff.CFFFont,org.apache.fontbox.cff.DataOutput)>(r0, r2);

        staticinvoke <org.apache.fontbox.cff.AFMFormatter: void printCharMetrics(org.apache.fontbox.cff.CFFFont,java.util.List,org.apache.fontbox.cff.DataOutput)>(r0, $r1, r2);

        virtualinvoke r2.<org.apache.fontbox.cff.DataOutput: void println(java.lang.String)>("EndFontMetrics");

        return;
    }

    private static void printDirectionMetrics(org.apache.fontbox.cff.CFFFont, org.apache.fontbox.cff.DataOutput) throws java.io.IOException
    {
        org.apache.fontbox.cff.CFFFont r3;
        java.lang.String $r6, $r11, $r16, $r21;
        java.lang.StringBuilder $r1, $r2, $r5, $r7, $r8, $r10, $r12, $r13, $r15, $r17, $r18, $r20;
        java.lang.Object $r4, $r9, $r14, $r19;
        org.apache.fontbox.cff.DataOutput r0;

        r3 := @parameter0: org.apache.fontbox.cff.CFFFont;

        r0 := @parameter1: org.apache.fontbox.cff.DataOutput;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UnderlinePosition ");

        $r4 = virtualinvoke r3.<org.apache.fontbox.cff.CFFFont: java.lang.Object getProperty(java.lang.String)>("UnderlinePosition");

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.fontbox.cff.DataOutput: void println(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UnderlineThickness ");

        $r9 = virtualinvoke r3.<org.apache.fontbox.cff.CFFFont: java.lang.Object getProperty(java.lang.String)>("UnderlineThickness");

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.fontbox.cff.DataOutput: void println(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ItalicAngle ");

        $r14 = virtualinvoke r3.<org.apache.fontbox.cff.CFFFont: java.lang.Object getProperty(java.lang.String)>("ItalicAngle");

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.fontbox.cff.DataOutput: void println(java.lang.String)>($r16);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IsFixedPitch ");

        $r19 = virtualinvoke r3.<org.apache.fontbox.cff.CFFFont: java.lang.Object getProperty(java.lang.String)>("isFixedPitch");

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.fontbox.cff.DataOutput: void println(java.lang.String)>($r21);

        return;
    }

    private static void printCharMetrics(org.apache.fontbox.cff.CFFFont, java.util.List, org.apache.fontbox.cff.DataOutput) throws java.io.IOException
    {
        java.awt.geom.Rectangle2D $r27, $r30, $r33, $r36;
        org.apache.fontbox.cff.CFFFont r40;
        boolean $z0;
        java.util.List r3;
        java.lang.StringBuilder $r1, $r2, $r4, $r9, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r19, $r20, $r22, $r23, $r25, $r26, $r28, $r29, $r31, $r32, $r34, $r35, $r37, $r38;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r5, $r13, $r18, $r21, $r24, $r39;
        double $d0, $d1, $d2, $d3;
        java.util.Iterator $r6;
        org.apache.fontbox.cff.AFMFormatter$CharMetric r8;
        java.lang.Object $r7;
        org.apache.fontbox.cff.DataOutput r0;

        r40 := @parameter0: org.apache.fontbox.cff.CFFFont;

        r3 := @parameter1: java.util.List;

        r0 := @parameter2: org.apache.fontbox.cff.DataOutput;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("StartCharMetrics ");

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.fontbox.cff.DataOutput: void println(java.lang.String)>($r5);

        staticinvoke <java.util.Collections: void sort(java.util.List)>(r3);

        $r6 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        r8 = (org.apache.fontbox.cff.AFMFormatter$CharMetric) $r7;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("C ");

        $i1 = staticinvoke <org.apache.fontbox.cff.AFMFormatter$CharMetric: int access$000(org.apache.fontbox.cff.AFMFormatter$CharMetric)>(r8);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ;");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.fontbox.cff.DataOutput: void print(java.lang.String)>($r13);

        virtualinvoke r0.<org.apache.fontbox.cff.DataOutput: void print(java.lang.String)>(" ");

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WX ");

        $i2 = staticinvoke <org.apache.fontbox.cff.AFMFormatter$CharMetric: int access$100(org.apache.fontbox.cff.AFMFormatter$CharMetric)>(r8);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ;");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.fontbox.cff.DataOutput: void print(java.lang.String)>($r18);

        virtualinvoke r0.<org.apache.fontbox.cff.DataOutput: void print(java.lang.String)>(" ");

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("N ");

        $r21 = staticinvoke <org.apache.fontbox.cff.AFMFormatter$CharMetric: java.lang.String access$200(org.apache.fontbox.cff.AFMFormatter$CharMetric)>(r8);

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ;");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.fontbox.cff.DataOutput: void print(java.lang.String)>($r24);

        virtualinvoke r0.<org.apache.fontbox.cff.DataOutput: void print(java.lang.String)>(" ");

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("B ");

        $r27 = staticinvoke <org.apache.fontbox.cff.AFMFormatter$CharMetric: java.awt.geom.Rectangle2D access$300(org.apache.fontbox.cff.AFMFormatter$CharMetric)>(r8);

        $d0 = virtualinvoke $r27.<java.awt.geom.Rectangle2D: double getX()>();

        $i3 = (int) $d0;

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r30 = staticinvoke <org.apache.fontbox.cff.AFMFormatter$CharMetric: java.awt.geom.Rectangle2D access$300(org.apache.fontbox.cff.AFMFormatter$CharMetric)>(r8);

        $d1 = virtualinvoke $r30.<java.awt.geom.Rectangle2D: double getY()>();

        $i4 = (int) $d1;

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r33 = staticinvoke <org.apache.fontbox.cff.AFMFormatter$CharMetric: java.awt.geom.Rectangle2D access$300(org.apache.fontbox.cff.AFMFormatter$CharMetric)>(r8);

        $d2 = virtualinvoke $r33.<java.awt.geom.Rectangle2D: double getMaxX()>();

        $i5 = (int) $d2;

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r36 = staticinvoke <org.apache.fontbox.cff.AFMFormatter$CharMetric: java.awt.geom.Rectangle2D access$300(org.apache.fontbox.cff.AFMFormatter$CharMetric)>(r8);

        $d3 = virtualinvoke $r36.<java.awt.geom.Rectangle2D: double getMaxY()>();

        $i6 = (int) $d3;

        $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ;");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<org.apache.fontbox.cff.DataOutput: void print(java.lang.String)>($r39);

        virtualinvoke r0.<org.apache.fontbox.cff.DataOutput: void println()>();

        goto label1;

     label2:
        virtualinvoke r0.<org.apache.fontbox.cff.DataOutput: void println(java.lang.String)>("EndCharMetrics");

        return;
    }

    private static java.util.List renderFont(org.apache.fontbox.cff.CFFFont) throws java.io.IOException
    {
        org.apache.fontbox.cff.CFFFont$Mapping r6;
        java.util.Iterator $r4;
        java.util.Collection $r3;
        java.awt.geom.Rectangle2D $r10;
        org.apache.fontbox.cff.CFFFont r1;
        org.apache.fontbox.cff.AFMFormatter$CharMetric $r7;
        java.util.ArrayList $r0;
        java.util.List $r9;
        int $i0, $i1;
        java.lang.Object $r5;
        java.lang.String $r8;
        org.apache.fontbox.cff.CharStringRenderer $r2;
        boolean $z0;

        r1 := @parameter0: org.apache.fontbox.cff.CFFFont;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = virtualinvoke r1.<org.apache.fontbox.cff.CFFFont: org.apache.fontbox.cff.CharStringRenderer createRenderer()>();

        $r3 = virtualinvoke r1.<org.apache.fontbox.cff.CFFFont: java.util.Collection getMappings()>();

        $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.apache.fontbox.cff.CFFFont$Mapping) $r5;

        $r7 = new org.apache.fontbox.cff.AFMFormatter$CharMetric;

        specialinvoke $r7.<org.apache.fontbox.cff.AFMFormatter$CharMetric: void <init>(org.apache.fontbox.cff.AFMFormatter$1)>(null);

        $i0 = virtualinvoke r6.<org.apache.fontbox.cff.CFFFont$Mapping: int getCode()>();

        staticinvoke <org.apache.fontbox.cff.AFMFormatter$CharMetric: int access$002(org.apache.fontbox.cff.AFMFormatter$CharMetric,int)>($r7, $i0);

        $r8 = virtualinvoke r6.<org.apache.fontbox.cff.CFFFont$Mapping: java.lang.String getName()>();

        staticinvoke <org.apache.fontbox.cff.AFMFormatter$CharMetric: java.lang.String access$202(org.apache.fontbox.cff.AFMFormatter$CharMetric,java.lang.String)>($r7, $r8);

        $r9 = virtualinvoke r6.<org.apache.fontbox.cff.CFFFont$Mapping: java.util.List toType1Sequence()>();

        virtualinvoke $r2.<org.apache.fontbox.cff.CharStringRenderer: java.awt.geom.GeneralPath render(java.util.List)>($r9);

        $i1 = virtualinvoke $r2.<org.apache.fontbox.cff.CharStringRenderer: int getWidth()>();

        staticinvoke <org.apache.fontbox.cff.AFMFormatter$CharMetric: int access$102(org.apache.fontbox.cff.AFMFormatter$CharMetric,int)>($r7, $i1);

        $r10 = virtualinvoke $r2.<org.apache.fontbox.cff.CharStringRenderer: java.awt.geom.Rectangle2D getBounds()>();

        staticinvoke <org.apache.fontbox.cff.AFMFormatter$CharMetric: java.awt.geom.Rectangle2D access$302(org.apache.fontbox.cff.AFMFormatter$CharMetric,java.awt.geom.Rectangle2D)>($r7, $r10);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r0;
    }

    private static java.awt.geom.Rectangle2D getBounds(java.util.List)
    {
        java.util.Iterator $r1;
        java.awt.geom.Rectangle2D $r4, $r6;
        org.apache.fontbox.cff.AFMFormatter$CharMetric r3;
        java.util.List r0;
        java.lang.Object $r2;
        java.awt.geom.Rectangle2D$Double $r5, r7;
        boolean $z0;

        r0 := @parameter0: java.util.List;

        r7 = null;

        $r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (org.apache.fontbox.cff.AFMFormatter$CharMetric) $r2;

        if r7 != null goto label2;

        $r5 = new java.awt.geom.Rectangle2D$Double;

        specialinvoke $r5.<java.awt.geom.Rectangle2D$Double: void <init>()>();

        r7 = $r5;

        $r6 = staticinvoke <org.apache.fontbox.cff.AFMFormatter$CharMetric: java.awt.geom.Rectangle2D access$300(org.apache.fontbox.cff.AFMFormatter$CharMetric)>(r3);

        virtualinvoke $r5.<java.awt.geom.Rectangle2D: void setFrame(java.awt.geom.Rectangle2D)>($r6);

        goto label3;

     label2:
        $r4 = staticinvoke <org.apache.fontbox.cff.AFMFormatter$CharMetric: java.awt.geom.Rectangle2D access$300(org.apache.fontbox.cff.AFMFormatter$CharMetric)>(r3);

        staticinvoke <java.awt.geom.Rectangle2D: void union(java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D,java.awt.geom.Rectangle2D)>(r7, $r4, r7);

     label3:
        goto label1;

     label4:
        return r7;
    }
}
