final class org.mozilla.javascript.InterpretedFunction extends org.mozilla.javascript.NativeFunction implements org.mozilla.javascript.Script
{
    static final long serialVersionUID;
    org.mozilla.javascript.InterpreterData idata;
    org.mozilla.javascript.SecurityController securityController;
    java.lang.Object securityDomain;
    org.mozilla.javascript.Scriptable[] functionRegExps;

    private void <init>(org.mozilla.javascript.InterpreterData, java.lang.Object)
    {
        org.mozilla.javascript.Context $r2;
        org.mozilla.javascript.SecurityController $r3;
        java.lang.Object r4, r6;
        java.lang.IllegalArgumentException $r5;
        org.mozilla.javascript.InterpreterData r1;
        org.mozilla.javascript.InterpretedFunction r0;

        r0 := @this: org.mozilla.javascript.InterpretedFunction;

        r1 := @parameter0: org.mozilla.javascript.InterpreterData;

        r4 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.mozilla.javascript.NativeFunction: void <init>()>();

        r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata> = r1;

        $r2 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getContext()>();

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.Context: org.mozilla.javascript.SecurityController getSecurityController()>();

        if $r3 == null goto label1;

        r6 = virtualinvoke $r3.<org.mozilla.javascript.SecurityController: java.lang.Object getDynamicSecurityDomain(java.lang.Object)>(r4);

        goto label3;

     label1:
        if r4 == null goto label2;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r5;

     label2:
        r6 = null;

     label3:
        r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.SecurityController securityController> = $r3;

        r0.<org.mozilla.javascript.InterpretedFunction: java.lang.Object securityDomain> = r6;

        return;
    }

    private void <init>(org.mozilla.javascript.InterpretedFunction, int)
    {
        org.mozilla.javascript.SecurityController $r5;
        org.mozilla.javascript.InterpreterData[] $r3;
        int i0;
        java.lang.Object $r6;
        org.mozilla.javascript.InterpreterData $r2, $r4;
        org.mozilla.javascript.InterpretedFunction r0, r1;

        r0 := @this: org.mozilla.javascript.InterpretedFunction;

        r1 := @parameter0: org.mozilla.javascript.InterpretedFunction;

        i0 := @parameter1: int;

        specialinvoke r0.<org.mozilla.javascript.NativeFunction: void <init>()>();

        $r2 = r1.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata>;

        $r3 = $r2.<org.mozilla.javascript.InterpreterData: org.mozilla.javascript.InterpreterData[] itsNestedFunctions>;

        $r4 = $r3[i0];

        r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata> = $r4;

        $r5 = r1.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.SecurityController securityController>;

        r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.SecurityController securityController> = $r5;

        $r6 = r1.<org.mozilla.javascript.InterpretedFunction: java.lang.Object securityDomain>;

        r0.<org.mozilla.javascript.InterpretedFunction: java.lang.Object securityDomain> = $r6;

        return;
    }

    static org.mozilla.javascript.InterpretedFunction createScript(org.mozilla.javascript.InterpreterData, java.lang.Object)
    {
        java.lang.Object r2;
        org.mozilla.javascript.InterpreterData r1;
        org.mozilla.javascript.InterpretedFunction $r0;

        r1 := @parameter0: org.mozilla.javascript.InterpreterData;

        r2 := @parameter1: java.lang.Object;

        $r0 = new org.mozilla.javascript.InterpretedFunction;

        specialinvoke $r0.<org.mozilla.javascript.InterpretedFunction: void <init>(org.mozilla.javascript.InterpreterData,java.lang.Object)>(r1, r2);

        return $r0;
    }

    static org.mozilla.javascript.InterpretedFunction createFunction(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.InterpreterData, java.lang.Object)
    {
        org.mozilla.javascript.Scriptable r4;
        org.mozilla.javascript.Context r3;
        java.lang.Object r2;
        org.mozilla.javascript.InterpreterData r1;
        org.mozilla.javascript.InterpretedFunction $r0;

        r3 := @parameter0: org.mozilla.javascript.Context;

        r4 := @parameter1: org.mozilla.javascript.Scriptable;

        r1 := @parameter2: org.mozilla.javascript.InterpreterData;

        r2 := @parameter3: java.lang.Object;

        $r0 = new org.mozilla.javascript.InterpretedFunction;

        specialinvoke $r0.<org.mozilla.javascript.InterpretedFunction: void <init>(org.mozilla.javascript.InterpreterData,java.lang.Object)>(r1, r2);

        specialinvoke $r0.<org.mozilla.javascript.InterpretedFunction: void initInterpretedFunction(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable)>(r3, r4);

        return $r0;
    }

    static org.mozilla.javascript.InterpretedFunction createFunction(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.InterpretedFunction, int)
    {
        org.mozilla.javascript.Scriptable r3;
        org.mozilla.javascript.Context r2;
        int i0;
        org.mozilla.javascript.InterpretedFunction $r0, r1;

        r2 := @parameter0: org.mozilla.javascript.Context;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        r1 := @parameter2: org.mozilla.javascript.InterpretedFunction;

        i0 := @parameter3: int;

        $r0 = new org.mozilla.javascript.InterpretedFunction;

        specialinvoke $r0.<org.mozilla.javascript.InterpretedFunction: void <init>(org.mozilla.javascript.InterpretedFunction,int)>(r1, i0);

        specialinvoke $r0.<org.mozilla.javascript.InterpretedFunction: void initInterpretedFunction(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable)>(r2, r3);

        return $r0;
    }

    org.mozilla.javascript.Scriptable[] createRegExpWraps(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable)
    {
        java.lang.Object[] $r2, $r6, $r9;
        org.mozilla.javascript.Context r3;
        org.mozilla.javascript.Scriptable[] $r12;
        org.mozilla.javascript.RegExpProxy $r4;
        org.mozilla.javascript.Scriptable r7, $r11;
        int $i0, i1;
        java.lang.Object $r10;
        org.mozilla.javascript.InterpreterData $r1, $r5, $r8;
        org.mozilla.javascript.InterpretedFunction r0;

        r0 := @this: org.mozilla.javascript.InterpretedFunction;

        r3 := @parameter0: org.mozilla.javascript.Context;

        r7 := @parameter1: org.mozilla.javascript.Scriptable;

        $r1 = r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata>;

        $r2 = $r1.<org.mozilla.javascript.InterpreterData: java.lang.Object[] itsRegExpLiterals>;

        if $r2 != null goto label1;

        staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

     label1:
        $r4 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.RegExpProxy checkRegExpProxy(org.mozilla.javascript.Context)>(r3);

        $r5 = r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata>;

        $r6 = $r5.<org.mozilla.javascript.InterpreterData: java.lang.Object[] itsRegExpLiterals>;

        $i0 = lengthof $r6;

        $r12 = newarray (org.mozilla.javascript.Scriptable)[$i0];

        i1 = 0;

     label2:
        if i1 == $i0 goto label3;

        $r8 = r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata>;

        $r9 = $r8.<org.mozilla.javascript.InterpreterData: java.lang.Object[] itsRegExpLiterals>;

        $r10 = $r9[i1];

        $r11 = interfaceinvoke $r4.<org.mozilla.javascript.RegExpProxy: org.mozilla.javascript.Scriptable wrapRegExp(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object)>(r3, r7, $r10);

        $r12[i1] = $r11;

        i1 = i1 + 1;

        goto label2;

     label3:
        return $r12;
    }

    private void initInterpretedFunction(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.Scriptable r2;
        java.lang.Object[] $r4;
        org.mozilla.javascript.Context r1;
        org.mozilla.javascript.Scriptable[] $r5;
        org.mozilla.javascript.InterpreterData $r3;
        org.mozilla.javascript.InterpretedFunction r0;

        r0 := @this: org.mozilla.javascript.InterpretedFunction;

        r1 := @parameter0: org.mozilla.javascript.Context;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        virtualinvoke r0.<org.mozilla.javascript.InterpretedFunction: void initScriptFunction(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable)>(r1, r2);

        $r3 = r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata>;

        $r4 = $r3.<org.mozilla.javascript.InterpreterData: java.lang.Object[] itsRegExpLiterals>;

        if $r4 == null goto label1;

        $r5 = virtualinvoke r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.Scriptable[] createRegExpWraps(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable)>(r1, r2);

        r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.Scriptable[] functionRegExps> = $r5;

     label1:
        return;
    }

    public java.lang.String getFunctionName()
    {
        java.lang.String $r2, $r4;
        org.mozilla.javascript.InterpreterData $r1, $r3;
        org.mozilla.javascript.InterpretedFunction r0;

        r0 := @this: org.mozilla.javascript.InterpretedFunction;

        $r1 = r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata>;

        $r2 = $r1.<org.mozilla.javascript.InterpreterData: java.lang.String itsName>;

        if $r2 != null goto label1;

        $r4 = "";

        goto label2;

     label1:
        $r3 = r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata>;

        $r4 = $r3.<org.mozilla.javascript.InterpreterData: java.lang.String itsName>;

     label2:
        return $r4;
    }

    public java.lang.Object call(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        java.lang.Object[] r4;
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.Scriptable r2, r3;
        java.lang.Object $r5, $r6;
        org.mozilla.javascript.InterpretedFunction r1;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.InterpretedFunction;

        r0 := @parameter0: org.mozilla.javascript.Context;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        r3 := @parameter2: org.mozilla.javascript.Scriptable;

        r4 := @parameter3: java.lang.Object[];

        $z0 = staticinvoke <org.mozilla.javascript.ScriptRuntime: boolean hasTopCall(org.mozilla.javascript.Context)>(r0);

        if $z0 != 0 goto label1;

        $r6 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Object doTopCall(org.mozilla.javascript.Callable,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r1, r0, r2, r3, r4);

        return $r6;

     label1:
        $r5 = staticinvoke <org.mozilla.javascript.Interpreter: java.lang.Object interpret(org.mozilla.javascript.InterpretedFunction,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r1, r0, r2, r3, r4);

        return $r5;
    }

    public java.lang.Object exec(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable)
    {
        java.lang.IllegalStateException $r8;
        java.lang.Object[] $r4, $r6;
        org.mozilla.javascript.Context r2;
        org.mozilla.javascript.Scriptable r3;
        int $i0;
        java.lang.Object $r5, $r7;
        org.mozilla.javascript.InterpreterData $r1;
        org.mozilla.javascript.InterpretedFunction r0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.InterpretedFunction;

        r2 := @parameter0: org.mozilla.javascript.Context;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        $r1 = r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata>;

        $i0 = $r1.<org.mozilla.javascript.InterpreterData: int itsFunctionType>;

        if $i0 == 0 goto label1;

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>()>();

        throw $r8;

     label1:
        $z0 = staticinvoke <org.mozilla.javascript.ScriptRuntime: boolean hasTopCall(org.mozilla.javascript.Context)>(r2);

        if $z0 != 0 goto label2;

        $r6 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

        $r7 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Object doTopCall(org.mozilla.javascript.Callable,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r0, r2, r3, r3, $r6);

        return $r7;

     label2:
        $r4 = <org.mozilla.javascript.ScriptRuntime: java.lang.Object[] emptyArgs>;

        $r5 = staticinvoke <org.mozilla.javascript.Interpreter: java.lang.Object interpret(org.mozilla.javascript.InterpretedFunction,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r0, r2, r3, r3, $r4);

        return $r5;
    }

    public java.lang.String getEncodedSource()
    {
        java.lang.String $r2;
        org.mozilla.javascript.InterpreterData $r1;
        org.mozilla.javascript.InterpretedFunction r0;

        r0 := @this: org.mozilla.javascript.InterpretedFunction;

        $r1 = r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata>;

        $r2 = staticinvoke <org.mozilla.javascript.Interpreter: java.lang.String getEncodedSource(org.mozilla.javascript.InterpreterData)>($r1);

        return $r2;
    }

    public org.mozilla.javascript.debug.DebuggableScript getDebuggableView()
    {
        org.mozilla.javascript.InterpreterData $r1;
        org.mozilla.javascript.InterpretedFunction r0;

        r0 := @this: org.mozilla.javascript.InterpretedFunction;

        $r1 = r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata>;

        return $r1;
    }

    protected int getLanguageVersion()
    {
        int $i0;
        org.mozilla.javascript.InterpreterData $r1;
        org.mozilla.javascript.InterpretedFunction r0;

        r0 := @this: org.mozilla.javascript.InterpretedFunction;

        $r1 = r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata>;

        $i0 = $r1.<org.mozilla.javascript.InterpreterData: int languageVersion>;

        return $i0;
    }

    protected int getParamCount()
    {
        int $i0;
        org.mozilla.javascript.InterpreterData $r1;
        org.mozilla.javascript.InterpretedFunction r0;

        r0 := @this: org.mozilla.javascript.InterpretedFunction;

        $r1 = r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata>;

        $i0 = $r1.<org.mozilla.javascript.InterpreterData: int argCount>;

        return $i0;
    }

    protected int getParamAndVarCount()
    {
        int $i0;
        java.lang.String[] $r2;
        org.mozilla.javascript.InterpreterData $r1;
        org.mozilla.javascript.InterpretedFunction r0;

        r0 := @this: org.mozilla.javascript.InterpretedFunction;

        $r1 = r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata>;

        $r2 = $r1.<org.mozilla.javascript.InterpreterData: java.lang.String[] argNames>;

        $i0 = lengthof $r2;

        return $i0;
    }

    protected java.lang.String getParamOrVarName(int)
    {
        int i0;
        java.lang.String[] $r2;
        java.lang.String $r3;
        org.mozilla.javascript.InterpreterData $r1;
        org.mozilla.javascript.InterpretedFunction r0;

        r0 := @this: org.mozilla.javascript.InterpretedFunction;

        i0 := @parameter0: int;

        $r1 = r0.<org.mozilla.javascript.InterpretedFunction: org.mozilla.javascript.InterpreterData idata>;

        $r2 = $r1.<org.mozilla.javascript.InterpreterData: java.lang.String[] argNames>;

        $r3 = $r2[i0];

        return $r3;
    }

    public static void <clinit>()
    {
        <org.mozilla.javascript.InterpretedFunction: long serialVersionUID> = 541475680333911468L;

        return;
    }
}
