public class com.jmatio.io.MatFileWriter extends java.lang.Object
{

    public void <init>()
    {
        com.jmatio.io.MatFileWriter r0;

        r0 := @this: com.jmatio.io.MatFileWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void <init>(java.lang.String, java.util.Collection) throws java.io.IOException
    {
        com.jmatio.io.MatFileWriter r0;
        java.util.Collection r3;
        java.lang.String r2;
        java.io.File $r1;

        r0 := @this: com.jmatio.io.MatFileWriter;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Collection;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        specialinvoke r0.<com.jmatio.io.MatFileWriter: void <init>(java.io.File,java.util.Collection)>($r1, r3);

        return;
    }

    public void <init>(java.io.File, java.util.Collection) throws java.io.IOException
    {
        com.jmatio.io.MatFileWriter r0;
        java.util.Collection r4;
        java.io.FileOutputStream $r1;
        java.nio.channels.FileChannel $r3;
        java.io.File r2;

        r0 := @this: com.jmatio.io.MatFileWriter;

        r2 := @parameter0: java.io.File;

        r4 := @parameter1: java.util.Collection;

        $r1 = new java.io.FileOutputStream;

        specialinvoke $r1.<java.io.FileOutputStream: void <init>(java.io.File)>(r2);

        $r3 = virtualinvoke $r1.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        specialinvoke r0.<com.jmatio.io.MatFileWriter: void <init>(java.nio.channels.WritableByteChannel,java.util.Collection)>($r3, r4);

        return;
    }

    public void <init>(java.nio.channels.WritableByteChannel, java.util.Collection) throws java.io.IOException
    {
        com.jmatio.io.MatFileWriter r0;
        java.nio.channels.WritableByteChannel r1;
        java.util.Collection r2;

        r0 := @this: com.jmatio.io.MatFileWriter;

        r1 := @parameter0: java.nio.channels.WritableByteChannel;

        r2 := @parameter1: java.util.Collection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<com.jmatio.io.MatFileWriter: void write(java.nio.channels.WritableByteChannel,java.util.Collection)>(r1, r2);

        return;
    }

    public synchronized void write(java.lang.String, java.util.Collection) throws java.io.IOException
    {
        com.jmatio.io.MatFileWriter r0;
        java.util.Collection r3;
        java.lang.String r2;
        java.io.File $r1;

        r0 := @this: com.jmatio.io.MatFileWriter;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.util.Collection;

        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r2);

        virtualinvoke r0.<com.jmatio.io.MatFileWriter: void write(java.io.File,java.util.Collection)>($r1, r3);

        return;
    }

    public synchronized void write(java.io.File, java.util.Collection) throws java.io.IOException
    {
        java.lang.Throwable $r5;
        com.jmatio.io.MatFileWriter r2;
        java.util.Collection r4;
        java.io.FileOutputStream $r0;
        java.io.IOException $r6;
        java.nio.channels.FileChannel $r3;
        java.io.File r1;

        r2 := @this: com.jmatio.io.MatFileWriter;

        r1 := @parameter0: java.io.File;

        r4 := @parameter1: java.util.Collection;

        $r0 = new java.io.FileOutputStream;

        specialinvoke $r0.<java.io.FileOutputStream: void <init>(java.io.File)>(r1);

     label1:
        $r3 = virtualinvoke $r0.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>();

        specialinvoke r2.<com.jmatio.io.MatFileWriter: void write(java.nio.channels.WritableByteChannel,java.util.Collection)>($r3, r4);

     label2:
        goto label8;

     label3:
        goto label7;

     label4:
        $r6 := @caughtexception;

        throw $r6;

     label5:
        $r5 := @caughtexception;

        goto label9;

     label6:
        throw $r5;

     label7:
        return;

     label8:
        virtualinvoke $r0.<java.io.FileOutputStream: void close()>();

        goto label3;

     label9:
        virtualinvoke $r0.<java.io.FileOutputStream: void close()>();

        goto label6;

        catch java.io.IOException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label3 with label5;
        catch java.lang.Throwable from label4 to label6 with label5;
    }

    private synchronized void write(java.nio.channels.WritableByteChannel, java.util.Collection) throws java.io.IOException
    {
        java.lang.Throwable $r15;
        byte[] $r9, $r13;
        java.io.ByteArrayOutputStream $r6, $r10;
        java.util.zip.DeflaterOutputStream $r12;
        java.nio.ByteBuffer $r14;
        java.io.DataOutputStream $r7, $r11;
        int $i0, $i1, $i2;
        boolean $z0;
        com.jmatio.io.MatFileWriter r0;
        java.util.Iterator $r3;
        java.util.Collection r2;
        java.io.IOException $r16;
        java.util.zip.Deflater $r8;
        com.jmatio.types.MLArray r5;
        java.nio.channels.WritableByteChannel r1;
        java.lang.Object $r4;

        r0 := @this: com.jmatio.io.MatFileWriter;

        r1 := @parameter0: java.nio.channels.WritableByteChannel;

        r2 := @parameter1: java.util.Collection;

     label01:
        specialinvoke r0.<com.jmatio.io.MatFileWriter: void writeHeader(java.nio.channels.WritableByteChannel)>(r1);

        $r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>();

     label02:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.jmatio.types.MLArray) $r4;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = new java.io.DataOutputStream;

        specialinvoke $r7.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r6);

        specialinvoke r0.<com.jmatio.io.MatFileWriter: void writeMatrix(java.io.DataOutputStream,com.jmatio.types.MLArray)>($r7, r5);

        $r8 = new java.util.zip.Deflater;

        specialinvoke $r8.<java.util.zip.Deflater: void <init>()>();

        $r9 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $r10 = new java.io.ByteArrayOutputStream;

        specialinvoke $r10.<java.io.ByteArrayOutputStream: void <init>()>();

        $r11 = new java.io.DataOutputStream;

        $r12 = new java.util.zip.DeflaterOutputStream;

        specialinvoke $r12.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>($r10, $r8);

        specialinvoke $r11.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r12);

        virtualinvoke $r11.<java.io.DataOutputStream: void write(byte[])>($r9);

        virtualinvoke $r11.<java.io.DataOutputStream: void close()>();

        virtualinvoke $r10.<java.io.ByteArrayOutputStream: void close()>();

        $r13 = virtualinvoke $r10.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i0 = lengthof $r13;

        $i1 = 8 + $i0;

        $r14 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i1);

        virtualinvoke $r14.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(15);

        $i2 = lengthof $r13;

        virtualinvoke $r14.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>($i2);

        virtualinvoke $r14.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r13);

        virtualinvoke $r14.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        interfaceinvoke r1.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r14);

        goto label02;

     label03:
        goto label09;

     label04:
        goto label08;

     label05:
        $r16 := @caughtexception;

        throw $r16;

     label06:
        $r15 := @caughtexception;

        goto label10;

     label07:
        throw $r15;

     label08:
        return;

     label09:
        interfaceinvoke r1.<java.nio.channels.WritableByteChannel: void close()>();

        goto label04;

     label10:
        interfaceinvoke r1.<java.nio.channels.WritableByteChannel: void close()>();

        goto label07;

        catch java.io.IOException from label01 to label03 with label05;
        catch java.lang.Throwable from label01 to label04 with label06;
        catch java.lang.Throwable from label05 to label07 with label06;
    }

    private void writeHeader(java.nio.channels.WritableByteChannel) throws java.io.IOException
    {
        byte[] $r4;
        java.nio.ByteBuffer $r5;
        byte $b11, $b12, $b14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i15;
        java.lang.String $r2;
        com.jmatio.io.MatFileWriter r7;
        char $c13;
        char[] r1, $r3;
        java.nio.channels.WritableByteChannel r6;
        com.jmatio.io.MatFileHeader $r0;

        r7 := @this: com.jmatio.io.MatFileWriter;

        r6 := @parameter0: java.nio.channels.WritableByteChannel;

        $r0 = staticinvoke <com.jmatio.io.MatFileHeader: com.jmatio.io.MatFileHeader createHeader()>();

        r1 = newarray (char)[116];

        $r2 = virtualinvoke $r0.<com.jmatio.io.MatFileHeader: java.lang.String getDescription()>();

        $r3 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $i0 = lengthof $r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, 0, r1, 0, $i0);

        $r4 = virtualinvoke $r0.<com.jmatio.io.MatFileHeader: byte[] getEndianIndicator()>();

        $i1 = lengthof r1;

        $i2 = $i1 * 2;

        $i4 = $i2 + 2;

        $i3 = lengthof $r4;

        $i5 = $i4 + $i3;

        $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>($i5);

        i15 = 0;

     label1:
        $i6 = lengthof r1;

        if i15 >= $i6 goto label2;

        $c13 = r1[i15];

        $b14 = (byte) $c13;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b14);

        i15 = i15 + 1;

        goto label1;

     label2:
        $i7 = virtualinvoke $r5.<java.nio.ByteBuffer: int position()>();

        $i8 = $i7 + 8;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer position(int)>($i8);

        $i9 = virtualinvoke $r0.<com.jmatio.io.MatFileHeader: int getVersion()>();

        $i10 = $i9 >> 8;

        $b11 = (byte) $i10;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b11);

        $b12 = (byte) $i9;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>($b12);

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>($r4);

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.Buffer flip()>();

        interfaceinvoke r6.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>($r5);

        return;
    }

    private void writeMatrix(java.io.DataOutputStream, com.jmatio.types.MLArray) throws java.io.IOException
    {
        byte[] $r52, $r58, $r64, $r70, $r78, $r83, $r87, $r104;
        com.jmatio.io.OSArrayTag $r4, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, $r41, $r44, $r51, $r57, $r63, $r69, $r77, $r85;
        com.jmatio.types.MLChar $r75;
        java.lang.StringBuilder $r97, $r98, $r100;
        com.jmatio.types.MLCell $r92;
        java.io.ByteArrayOutputStream $r0, $r47, $r53, $r59, $r65, $r73;
        java.lang.StringBuffer $r79, $r81;
        com.jmatio.io.MatlabIOException $r96;
        int[] $r50, $r56;
        java.util.Collection $r89;
        com.jmatio.types.MLArray r3, r102, r103;
        int $i0, $i1, $i2, $i3, $i5, $i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, $i16;
        com.jmatio.types.MLSparse $r49, $r55, $r61, $r67;
        java.lang.Object $r91, $r95;
        java.io.DataOutputStream $r1, r7, $r48, $r54, $r60, $r66, $r74;
        java.lang.Character $r80;
        com.jmatio.types.MLStructure $r84, $r86, $r88;
        java.lang.Double $r71, $r72;
        java.util.ArrayList $r93;
        java.lang.String $r82, $r99, $r101;
        com.jmatio.io.MatFileWriter r2;
        java.nio.ByteBuffer $r6, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r43, $r46;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        double $d0, $d1;
        java.util.Iterator $r90, $r94;
        java.lang.Double[] $r62, $r68;
        char $c4;
        java.lang.Character[] $r76;
        com.jmatio.types.MLNumericArray $r5, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30, $r33, $r36, $r39, $r42, $r45;

        r2 := @this: com.jmatio.io.MatFileWriter;

        r7 := @parameter0: java.io.DataOutputStream;

        r3 := @parameter1: com.jmatio.types.MLArray;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        specialinvoke r2.<com.jmatio.io.MatFileWriter: void writeFlags(java.io.DataOutputStream,com.jmatio.types.MLArray)>($r1, r3);

        specialinvoke r2.<com.jmatio.io.MatFileWriter: void writeDimensions(java.io.DataOutputStream,com.jmatio.types.MLArray)>($r1, r3);

        specialinvoke r2.<com.jmatio.io.MatFileWriter: void writeName(java.io.DataOutputStream,com.jmatio.types.MLArray)>($r1, r3);

        $i0 = virtualinvoke r3.<com.jmatio.types.MLArray: int getType()>();

        tableswitch($i0)
        {
            case 1: goto label14;
            case 2: goto label11;
            case 3: goto label26;
            case 4: goto label01;
            case 5: goto label17;
            case 6: goto label04;
            case 7: goto label05;
            case 8: goto label07;
            case 9: goto label06;
            case 10: goto label08;
            case 11: goto label26;
            case 12: goto label26;
            case 13: goto label26;
            case 14: goto label09;
            case 15: goto label10;
            default: goto label26;
        };

     label01:
        $r73 = new java.io.ByteArrayOutputStream;

        specialinvoke $r73.<java.io.ByteArrayOutputStream: void <init>()>();

        $r74 = new java.io.DataOutputStream;

        specialinvoke $r74.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r73);

        $r75 = (com.jmatio.types.MLChar) r3;

        $r76 = virtualinvoke $r75.<com.jmatio.types.MLChar: java.lang.Character[] exportChar()>();

        i7 = 0;

     label02:
        $i3 = lengthof $r76;

        if i7 >= $i3 goto label03;

        $r79 = new java.lang.StringBuffer;

        specialinvoke $r79.<java.lang.StringBuffer: void <init>()>();

        $r80 = $r76[i7];

        $c4 = virtualinvoke $r80.<java.lang.Character: char charValue()>();

        $r81 = virtualinvoke $r79.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        $r82 = virtualinvoke $r81.<java.lang.StringBuffer: java.lang.String toString()>();

        $r83 = virtualinvoke $r82.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8");

        virtualinvoke $r74.<java.io.DataOutputStream: void write(byte[])>($r83);

        i7 = i7 + 1;

        goto label02;

     label03:
        $r77 = new com.jmatio.io.OSArrayTag;

        $r78 = virtualinvoke $r73.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r77.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(16, $r78);

        virtualinvoke $r77.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        goto label27;

     label04:
        $r41 = new com.jmatio.io.OSArrayTag;

        $r42 = (com.jmatio.types.MLNumericArray) r3;

        $r43 = virtualinvoke $r42.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        specialinvoke $r41.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(9, $r43);

        virtualinvoke $r41.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        $z6 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z6 == 0 goto label27;

        $r44 = new com.jmatio.io.OSArrayTag;

        $r45 = (com.jmatio.types.MLNumericArray) r3;

        $r46 = virtualinvoke $r45.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        specialinvoke $r44.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(9, $r46);

        virtualinvoke $r44.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        goto label27;

     label05:
        $r35 = new com.jmatio.io.OSArrayTag;

        $r36 = (com.jmatio.types.MLNumericArray) r3;

        $r37 = virtualinvoke $r36.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        specialinvoke $r35.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(7, $r37);

        virtualinvoke $r35.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        $z5 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z5 == 0 goto label27;

        $r38 = new com.jmatio.io.OSArrayTag;

        $r39 = (com.jmatio.types.MLNumericArray) r3;

        $r40 = virtualinvoke $r39.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        specialinvoke $r38.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(7, $r40);

        virtualinvoke $r38.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        goto label27;

     label06:
        $r23 = new com.jmatio.io.OSArrayTag;

        $r24 = (com.jmatio.types.MLNumericArray) r3;

        $r25 = virtualinvoke $r24.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        specialinvoke $r23.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(2, $r25);

        virtualinvoke $r23.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        $z3 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z3 == 0 goto label27;

        $r26 = new com.jmatio.io.OSArrayTag;

        $r27 = (com.jmatio.types.MLNumericArray) r3;

        $r28 = virtualinvoke $r27.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        specialinvoke $r26.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(2, $r28);

        virtualinvoke $r26.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        goto label27;

     label07:
        $r29 = new com.jmatio.io.OSArrayTag;

        $r30 = (com.jmatio.types.MLNumericArray) r3;

        $r31 = virtualinvoke $r30.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        specialinvoke $r29.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(1, $r31);

        virtualinvoke $r29.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        $z4 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z4 == 0 goto label27;

        $r32 = new com.jmatio.io.OSArrayTag;

        $r33 = (com.jmatio.types.MLNumericArray) r3;

        $r34 = virtualinvoke $r33.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        specialinvoke $r32.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(1, $r34);

        virtualinvoke $r32.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        goto label27;

     label08:
        $r17 = new com.jmatio.io.OSArrayTag;

        $r18 = (com.jmatio.types.MLNumericArray) r3;

        $r19 = virtualinvoke $r18.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        specialinvoke $r17.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(3, $r19);

        virtualinvoke $r17.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        $z2 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z2 == 0 goto label27;

        $r20 = new com.jmatio.io.OSArrayTag;

        $r21 = (com.jmatio.types.MLNumericArray) r3;

        $r22 = virtualinvoke $r21.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        specialinvoke $r20.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(3, $r22);

        virtualinvoke $r20.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        goto label27;

     label09:
        $r11 = new com.jmatio.io.OSArrayTag;

        $r12 = (com.jmatio.types.MLNumericArray) r3;

        $r13 = virtualinvoke $r12.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        specialinvoke $r11.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(12, $r13);

        virtualinvoke $r11.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        $z1 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z1 == 0 goto label27;

        $r14 = new com.jmatio.io.OSArrayTag;

        $r15 = (com.jmatio.types.MLNumericArray) r3;

        $r16 = virtualinvoke $r15.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        specialinvoke $r14.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(12, $r16);

        virtualinvoke $r14.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        goto label27;

     label10:
        $r4 = new com.jmatio.io.OSArrayTag;

        $r5 = (com.jmatio.types.MLNumericArray) r3;

        $r6 = virtualinvoke $r5.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getRealByteBuffer()>();

        specialinvoke $r4.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(13, $r6);

        virtualinvoke $r4.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        $z0 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z0 == 0 goto label27;

        $r8 = new com.jmatio.io.OSArrayTag;

        $r9 = (com.jmatio.types.MLNumericArray) r3;

        $r10 = virtualinvoke $r9.<com.jmatio.types.MLNumericArray: java.nio.ByteBuffer getImaginaryByteBuffer()>();

        specialinvoke $r8.<com.jmatio.io.OSArrayTag: void <init>(int,java.nio.ByteBuffer)>(13, $r10);

        virtualinvoke $r8.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        goto label27;

     label11:
        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>(262149);

        $r84 = (com.jmatio.types.MLStructure) r3;

        $i5 = virtualinvoke $r84.<com.jmatio.types.MLStructure: int getMaxFieldLenth()>();

        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>($i5);

        $r85 = new com.jmatio.io.OSArrayTag;

        $r86 = (com.jmatio.types.MLStructure) r3;

        $r87 = virtualinvoke $r86.<com.jmatio.types.MLStructure: byte[] getKeySetToByteArray()>();

        specialinvoke $r85.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(1, $r87);

        virtualinvoke $r85.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        $r88 = (com.jmatio.types.MLStructure) r3;

        $r89 = virtualinvoke $r88.<com.jmatio.types.MLStructure: java.util.Collection getAllFields()>();

        $r90 = interfaceinvoke $r89.<java.util.Collection: java.util.Iterator iterator()>();

     label12:
        $z8 = interfaceinvoke $r90.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label13;

        $r91 = interfaceinvoke $r90.<java.util.Iterator: java.lang.Object next()>();

        r102 = (com.jmatio.types.MLArray) $r91;

        specialinvoke r2.<com.jmatio.io.MatFileWriter: void writeMatrix(java.io.DataOutputStream,com.jmatio.types.MLArray)>($r1, r102);

        goto label12;

     label13:
        goto label27;

     label14:
        $r92 = (com.jmatio.types.MLCell) r3;

        $r93 = virtualinvoke $r92.<com.jmatio.types.MLCell: java.util.ArrayList cells()>();

        $r94 = virtualinvoke $r93.<java.util.ArrayList: java.util.Iterator iterator()>();

     label15:
        $z9 = interfaceinvoke $r94.<java.util.Iterator: boolean hasNext()>();

        if $z9 == 0 goto label16;

        $r95 = interfaceinvoke $r94.<java.util.Iterator: java.lang.Object next()>();

        r103 = (com.jmatio.types.MLArray) $r95;

        specialinvoke r2.<com.jmatio.io.MatFileWriter: void writeMatrix(java.io.DataOutputStream,com.jmatio.types.MLArray)>($r1, r103);

        goto label15;

     label16:
        goto label27;

     label17:
        $r47 = new java.io.ByteArrayOutputStream;

        specialinvoke $r47.<java.io.ByteArrayOutputStream: void <init>()>();

        $r48 = new java.io.DataOutputStream;

        specialinvoke $r48.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r47);

        $r49 = (com.jmatio.types.MLSparse) r3;

        $r50 = virtualinvoke $r49.<com.jmatio.types.MLSparse: int[] getIR()>();

        i8 = lengthof $r50;

        i9 = 0;

     label18:
        if i9 >= i8 goto label19;

        i10 = $r50[i9];

        virtualinvoke $r48.<java.io.DataOutputStream: void writeInt(int)>(i10);

        i9 = i9 + 1;

        goto label18;

     label19:
        $r51 = new com.jmatio.io.OSArrayTag;

        $r52 = virtualinvoke $r47.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r51.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(5, $r52);

        virtualinvoke $r51.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        $r53 = new java.io.ByteArrayOutputStream;

        specialinvoke $r53.<java.io.ByteArrayOutputStream: void <init>()>();

        $r54 = new java.io.DataOutputStream;

        specialinvoke $r54.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r53);

        $r55 = (com.jmatio.types.MLSparse) r3;

        $r56 = virtualinvoke $r55.<com.jmatio.types.MLSparse: int[] getJC()>();

        i11 = lengthof $r56;

        i12 = 0;

     label20:
        if i12 >= i11 goto label21;

        i13 = $r56[i12];

        virtualinvoke $r54.<java.io.DataOutputStream: void writeInt(int)>(i13);

        i12 = i12 + 1;

        goto label20;

     label21:
        $r57 = new com.jmatio.io.OSArrayTag;

        $r58 = virtualinvoke $r53.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r57.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(5, $r58);

        virtualinvoke $r57.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        $r59 = new java.io.ByteArrayOutputStream;

        specialinvoke $r59.<java.io.ByteArrayOutputStream: void <init>()>();

        $r60 = new java.io.DataOutputStream;

        specialinvoke $r60.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r59);

        $r61 = (com.jmatio.types.MLSparse) r3;

        $r62 = virtualinvoke $r61.<com.jmatio.types.MLSparse: java.lang.Double[] exportReal()>();

        i14 = 0;

     label22:
        $i1 = lengthof $r62;

        if i14 >= $i1 goto label23;

        $r72 = $r62[i14];

        $d1 = virtualinvoke $r72.<java.lang.Double: double doubleValue()>();

        virtualinvoke $r60.<java.io.DataOutputStream: void writeDouble(double)>($d1);

        i14 = i14 + 1;

        goto label22;

     label23:
        $r63 = new com.jmatio.io.OSArrayTag;

        $r64 = virtualinvoke $r59.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r63.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(9, $r64);

        virtualinvoke $r63.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        $z7 = virtualinvoke r3.<com.jmatio.types.MLArray: boolean isComplex()>();

        if $z7 == 0 goto label27;

        $r65 = new java.io.ByteArrayOutputStream;

        specialinvoke $r65.<java.io.ByteArrayOutputStream: void <init>()>();

        $r66 = new java.io.DataOutputStream;

        specialinvoke $r66.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r65);

        $r67 = (com.jmatio.types.MLSparse) r3;

        $r68 = virtualinvoke $r67.<com.jmatio.types.MLSparse: java.lang.Double[] exportImaginary()>();

        i15 = 0;

     label24:
        $i2 = lengthof $r68;

        if i15 >= $i2 goto label25;

        $r71 = $r68[i15];

        $d0 = virtualinvoke $r71.<java.lang.Double: double doubleValue()>();

        virtualinvoke $r66.<java.io.DataOutputStream: void writeDouble(double)>($d0);

        i15 = i15 + 1;

        goto label24;

     label25:
        $r69 = new com.jmatio.io.OSArrayTag;

        $r70 = virtualinvoke $r65.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r69.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(9, $r70);

        virtualinvoke $r69.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>($r1);

        goto label27;

     label26:
        $r96 = new com.jmatio.io.MatlabIOException;

        $r97 = new java.lang.StringBuilder;

        specialinvoke $r97.<java.lang.StringBuilder: void <init>()>();

        $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot write matrix of type: ");

        $i6 = virtualinvoke r3.<com.jmatio.types.MLArray: int getType()>();

        $r99 = staticinvoke <com.jmatio.types.MLArray: java.lang.String typeToString(int)>($i6);

        $r100 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r99);

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r96.<com.jmatio.io.MatlabIOException: void <init>(java.lang.String)>($r101);

        throw $r96;

     label27:
        virtualinvoke r7.<java.io.DataOutputStream: void writeInt(int)>(14);

        $i16 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: int size()>();

        virtualinvoke r7.<java.io.DataOutputStream: void writeInt(int)>($i16);

        $r104 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke r7.<java.io.DataOutputStream: void write(byte[])>($r104);

        return;
    }

    private void writeFlags(java.io.DataOutputStream, com.jmatio.types.MLArray) throws java.io.IOException
    {
        com.jmatio.io.OSArrayTag $r3;
        byte[] $r4;
        com.jmatio.types.MLSparse $r6;
        com.jmatio.io.MatFileWriter r7;
        java.io.ByteArrayOutputStream $r0;
        com.jmatio.types.MLArray r2;
        java.io.DataOutputStream $r1, r5;
        int $i0, $i1;
        boolean $z0;

        r7 := @this: com.jmatio.io.MatFileWriter;

        r5 := @parameter0: java.io.DataOutputStream;

        r2 := @parameter1: com.jmatio.types.MLArray;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        $i0 = virtualinvoke r2.<com.jmatio.types.MLArray: int getFlags()>();

        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $z0 = virtualinvoke r2.<com.jmatio.types.MLArray: boolean isSparse()>();

        if $z0 == 0 goto label1;

        $r6 = (com.jmatio.types.MLSparse) r2;

        $i1 = virtualinvoke $r6.<com.jmatio.types.MLSparse: int getMaxNZ()>();

        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>($i1);

        goto label2;

     label1:
        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>(0);

     label2:
        $r3 = new com.jmatio.io.OSArrayTag;

        $r4 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r3.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(6, $r4);

        virtualinvoke $r3.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>(r5);

        return;
    }

    private void writeDimensions(java.io.DataOutputStream, com.jmatio.types.MLArray) throws java.io.IOException
    {
        com.jmatio.io.OSArrayTag $r4;
        byte[] $r5;
        com.jmatio.io.MatFileWriter r7;
        java.io.ByteArrayOutputStream $r0;
        com.jmatio.types.MLArray r2;
        java.io.DataOutputStream $r1, r6;
        int[] $r3;
        int $i0, $i1, i2;

        r7 := @this: com.jmatio.io.MatFileWriter;

        r6 := @parameter0: java.io.DataOutputStream;

        r2 := @parameter1: com.jmatio.types.MLArray;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        $r3 = virtualinvoke r2.<com.jmatio.types.MLArray: int[] getDimensions()>();

        i2 = 0;

     label1:
        $i0 = lengthof $r3;

        if i2 >= $i0 goto label2;

        $i1 = $r3[i2];

        virtualinvoke $r1.<java.io.DataOutputStream: void writeInt(int)>($i1);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = new com.jmatio.io.OSArrayTag;

        $r5 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r4.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(5, $r5);

        virtualinvoke $r4.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>(r6);

        return;
    }

    private void writeName(java.io.DataOutputStream, com.jmatio.types.MLArray) throws java.io.IOException
    {
        com.jmatio.io.OSArrayTag $r6;
        byte[] $r3, $r7;
        com.jmatio.io.MatFileWriter r9;
        java.io.ByteArrayOutputStream $r0, $r4;
        com.jmatio.types.MLArray r2;
        java.io.DataOutputStream $r1, $r5, r8;

        r9 := @this: com.jmatio.io.MatFileWriter;

        r8 := @parameter0: java.io.DataOutputStream;

        r2 := @parameter1: com.jmatio.types.MLArray;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

        $r1 = new java.io.DataOutputStream;

        specialinvoke $r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r0);

        $r3 = virtualinvoke r2.<com.jmatio.types.MLArray: byte[] getNameToByteArray()>();

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new java.io.DataOutputStream;

        specialinvoke $r5.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r4);

        virtualinvoke $r5.<java.io.DataOutputStream: void write(byte[])>($r3);

        $r6 = new com.jmatio.io.OSArrayTag;

        $r7 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r6.<com.jmatio.io.OSArrayTag: void <init>(int,byte[])>(1, $r7);

        virtualinvoke $r6.<com.jmatio.io.OSArrayTag: void writeTo(java.io.DataOutputStream)>(r8);

        return;
    }
}
