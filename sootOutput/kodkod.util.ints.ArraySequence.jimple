public final class kodkod.util.ints.ArraySequence extends kodkod.util.ints.AbstractSparseSequence implements java.lang.Cloneable
{
    private final kodkod.util.ints.EntryView[] entries;
    private int size;

    public void <init>(kodkod.util.ints.IntSet)
    {
        kodkod.util.ints.EntryView[] $r2, $r5;
        kodkod.util.ints.IntSet r1;
        kodkod.util.ints.ArraySequence r0;
        kodkod.util.ints.IntIterator $r3;
        kodkod.util.ints.EntryView $r4;
        int $i0, $i1, $i2, i3;
        boolean $z0;

        r0 := @this: kodkod.util.ints.ArraySequence;

        r1 := @parameter0: kodkod.util.ints.IntSet;

        specialinvoke r0.<kodkod.util.ints.AbstractSparseSequence: void <init>()>();

        $i0 = interfaceinvoke r1.<kodkod.util.ints.IntSet: int size()>();

        $r2 = newarray (kodkod.util.ints.EntryView)[$i0];

        r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries> = $r2;

        $i1 = interfaceinvoke r1.<kodkod.util.ints.IntSet: int size()>();

        r0.<kodkod.util.ints.ArraySequence: int size> = $i1;

        $r3 = interfaceinvoke r1.<kodkod.util.ints.IntSet: kodkod.util.ints.IntIterator iterator()>();

        i3 = 0;

        goto label2;

     label1:
        $r5 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $r4 = new kodkod.util.ints.EntryView;

        $i2 = interfaceinvoke $r3.<kodkod.util.ints.IntIterator: int next()>();

        specialinvoke $r4.<kodkod.util.ints.EntryView: void <init>(int,java.lang.Object)>($i2, null);

        $r5[i3] = $r4;

        i3 = i3 + 1;

     label2:
        $z0 = interfaceinvoke $r3.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public void <init>(kodkod.util.ints.SparseSequence)
    {
        kodkod.util.ints.EntryView[] $r2, $r8;
        java.lang.NullPointerException $r10;
        kodkod.util.ints.IndexedEntry r5;
        kodkod.util.ints.EntryView $r7;
        int $i0, $i1, $i2, $i3, i4;
        boolean $z0;
        java.util.Iterator $r3;
        kodkod.util.ints.ArraySequence r0;
        kodkod.util.ints.SparseSequence r1;
        java.lang.Object $r4, $r6, $r9;

        r0 := @this: kodkod.util.ints.ArraySequence;

        r1 := @parameter0: kodkod.util.ints.SparseSequence;

        specialinvoke r0.<kodkod.util.ints.AbstractSparseSequence: void <init>()>();

        $i0 = interfaceinvoke r1.<kodkod.util.ints.SparseSequence: int size()>();

        $r2 = newarray (kodkod.util.ints.EntryView)[$i0];

        r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries> = $r2;

        $i1 = interfaceinvoke r1.<kodkod.util.ints.SparseSequence: int size()>();

        r0.<kodkod.util.ints.ArraySequence: int size> = $i1;

        i4 = 0;

        $r3 = interfaceinvoke r1.<kodkod.util.ints.SparseSequence: java.util.Iterator iterator()>();

        goto label3;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kodkod.util.ints.IndexedEntry) $r4;

        $r6 = interfaceinvoke r5.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        if $r6 != null goto label2;

        $r10 = new java.lang.NullPointerException;

        specialinvoke $r10.<java.lang.NullPointerException: void <init>()>();

        throw $r10;

     label2:
        $r8 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $i2 = i4;

        i4 = i4 + 1;

        $r7 = new kodkod.util.ints.EntryView;

        $i3 = interfaceinvoke r5.<kodkod.util.ints.IndexedEntry: int index()>();

        $r9 = interfaceinvoke r5.<kodkod.util.ints.IndexedEntry: java.lang.Object value()>();

        specialinvoke $r7.<kodkod.util.ints.EntryView: void <init>(int,java.lang.Object)>($i3, $r9);

        $r8[$i2] = $r7;

     label3:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private void <init>(kodkod.util.ints.ArraySequence)
    {
        kodkod.util.ints.EntryView[] $r2, $r3, r4, $r7;
        kodkod.util.ints.EntryView r5, $r6;
        int $i0, $i1, i2, $i3, $i4, i5, i6;
        kodkod.util.ints.ArraySequence r0, r1;
        java.lang.Object $r8;

        r0 := @this: kodkod.util.ints.ArraySequence;

        r1 := @parameter0: kodkod.util.ints.ArraySequence;

        specialinvoke r0.<kodkod.util.ints.AbstractSparseSequence: void <init>()>();

        $i0 = r1.<kodkod.util.ints.ArraySequence: int size>;

        r0.<kodkod.util.ints.ArraySequence: int size> = $i0;

        $r2 = r1.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $i1 = lengthof $r2;

        $r3 = newarray (kodkod.util.ints.EntryView)[$i1];

        r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries> = $r3;

        i5 = 0;

        r4 = r1.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        i6 = 0;

        i2 = lengthof r4;

        goto label2;

     label1:
        r5 = r4[i6];

        $r7 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $i3 = i5;

        i5 = i5 + 1;

        $r6 = new kodkod.util.ints.EntryView;

        $i4 = virtualinvoke r5.<kodkod.util.ints.EntryView: int index()>();

        $r8 = virtualinvoke r5.<kodkod.util.ints.EntryView: java.lang.Object value()>();

        specialinvoke $r6.<kodkod.util.ints.EntryView: void <init>(int,java.lang.Object)>($i4, $r8);

        $r7[$i3] = $r6;

        i6 = i6 + 1;

     label2:
        if i6 < i2 goto label1;

        return;
    }

    public int size()
    {
        int $i0;
        kodkod.util.ints.ArraySequence r0;

        r0 := @this: kodkod.util.ints.ArraySequence;

        $i0 = r0.<kodkod.util.ints.ArraySequence: int size>;

        return $i0;
    }

    public boolean isEmpty()
    {
        int $i0;
        kodkod.util.ints.ArraySequence r0;

        r0 := @this: kodkod.util.ints.ArraySequence;

        $i0 = r0.<kodkod.util.ints.ArraySequence: int size>;

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void clear()
    {
        kodkod.util.ints.EntryView[] r1;
        kodkod.util.ints.EntryView r2;
        int i0, i1;
        kodkod.util.ints.ArraySequence r0;

        r0 := @this: kodkod.util.ints.ArraySequence;

        r1 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        i1 = 0;

        i0 = lengthof r1;

        goto label2;

     label1:
        r2 = r1[i1];

        virtualinvoke r2.<kodkod.util.ints.EntryView: java.lang.Object setValue(java.lang.Object)>(null);

        i1 = i1 + 1;

     label2:
        if i1 < i0 goto label1;

        return;
    }

    private final int search(int)
    {
        kodkod.util.ints.EntryView[] $r1, $r2;
        kodkod.util.ints.ArraySequence r0;
        kodkod.util.ints.EntryView $r3;
        int $i0, $i1, i2, $i3, i4, $i5, $i6, i7, i8;

        r0 := @this: kodkod.util.ints.ArraySequence;

        i4 := @parameter0: int;

        i7 = 0;

        $r1 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $i0 = lengthof $r1;

        i8 = $i0 - 1;

        goto label4;

     label1:
        $i1 = i7 + i8;

        i2 = $i1 >>> 1;

        $r2 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $r3 = $r2[i2];

        $i3 = virtualinvoke $r3.<kodkod.util.ints.EntryView: int index()>();

        if $i3 >= i4 goto label2;

        i7 = i2 + 1;

        goto label4;

     label2:
        if $i3 <= i4 goto label3;

        i8 = i2 - 1;

        goto label4;

     label3:
        return i2;

     label4:
        if i7 <= i8 goto label1;

        $i5 = i7 + 1;

        $i6 = neg $i5;

        return $i6;
    }

    public java.lang.Object put(int, java.lang.Object)
    {
        java.lang.IndexOutOfBoundsException $r7;
        kodkod.util.ints.EntryView[] $r2, $r4;
        java.lang.NullPointerException $r11;
        kodkod.util.ints.EntryView $r3, $r5;
        int i0, $i1, $i2, $i3;
        java.lang.String $r10;
        kodkod.util.ints.ArraySequence r1;
        java.lang.Object r0, $r6;
        java.lang.StringBuilder $r8, $r9;

        r1 := @this: kodkod.util.ints.ArraySequence;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        if r0 != null goto label1;

        $r11 = new java.lang.NullPointerException;

        specialinvoke $r11.<java.lang.NullPointerException: void <init>()>();

        throw $r11;

     label1:
        $i1 = specialinvoke r1.<kodkod.util.ints.ArraySequence: int search(int)>(i0);

        if $i1 >= 0 goto label2;

        $r7 = new java.lang.IndexOutOfBoundsException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label2:
        $r2 = r1.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $r3 = $r2[$i1];

        if $r3 != null goto label3;

        $i2 = r1.<kodkod.util.ints.ArraySequence: int size>;

        $i3 = $i2 + 1;

        r1.<kodkod.util.ints.ArraySequence: int size> = $i3;

     label3:
        $r4 = r1.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $r5 = $r4[$i1];

        $r6 = virtualinvoke $r5.<kodkod.util.ints.EntryView: java.lang.Object setValue(java.lang.Object)>(r0);

        return $r6;
    }

    public java.lang.Object get(int)
    {
        kodkod.util.ints.EntryView[] $r1;
        kodkod.util.ints.EntryView $r2;
        int i0, $i1;
        java.lang.Object $r3;
        kodkod.util.ints.ArraySequence r0;

        r0 := @this: kodkod.util.ints.ArraySequence;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<kodkod.util.ints.ArraySequence: int search(int)>(i0);

        if $i1 >= 0 goto label1;

        $r3 = null;

        goto label2;

     label1:
        $r1 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $r2 = $r1[$i1];

        $r3 = virtualinvoke $r2.<kodkod.util.ints.EntryView: java.lang.Object value()>();

     label2:
        return $r3;
    }

    public java.lang.Object remove(int)
    {
        kodkod.util.ints.EntryView[] $r1, $r4;
        kodkod.util.ints.ArraySequence r0;
        kodkod.util.ints.EntryView $r2, $r5;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r3, $r6;

        r0 := @this: kodkod.util.ints.ArraySequence;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<kodkod.util.ints.ArraySequence: int search(int)>(i0);

        if $i1 >= 0 goto label1;

        return null;

     label1:
        $r1 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $r2 = $r1[$i1];

        $r3 = virtualinvoke $r2.<kodkod.util.ints.EntryView: java.lang.Object value()>();

        if $r3 == null goto label2;

        $i2 = r0.<kodkod.util.ints.ArraySequence: int size>;

        $i3 = $i2 - 1;

        r0.<kodkod.util.ints.ArraySequence: int size> = $i3;

     label2:
        $r4 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $r5 = $r4[$i1];

        $r6 = virtualinvoke $r5.<kodkod.util.ints.EntryView: java.lang.Object setValue(java.lang.Object)>(null);

        return $r6;
    }

    public boolean containsIndex(int)
    {
        kodkod.util.ints.EntryView[] $r1;
        kodkod.util.ints.EntryView $r2;
        int i0, $i1;
        java.lang.Object $r3;
        kodkod.util.ints.ArraySequence r0;

        r0 := @this: kodkod.util.ints.ArraySequence;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<kodkod.util.ints.ArraySequence: int search(int)>(i0);

        if $i1 < 0 goto label1;

        $r1 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $r2 = $r1[$i1];

        $r3 = virtualinvoke $r2.<kodkod.util.ints.EntryView: java.lang.Object value()>();

        if $r3 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator iterator(int, int)
    {
        java.util.Iterator $r1;
        kodkod.util.ints.ArraySequence$DescendingIterator $r3;
        int i0, i1;
        kodkod.util.ints.ArraySequence$AscendingIterator $r2;
        kodkod.util.ints.ArraySequence r0;

        r0 := @this: kodkod.util.ints.ArraySequence;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 > i1 goto label1;

        $r2 = new kodkod.util.ints.ArraySequence$AscendingIterator;

        $r1 = $r2;

        specialinvoke $r2.<kodkod.util.ints.ArraySequence$AscendingIterator: void <init>(kodkod.util.ints.ArraySequence,int,int)>(r0, i0, i1);

        goto label2;

     label1:
        $r3 = new kodkod.util.ints.ArraySequence$DescendingIterator;

        $r1 = $r3;

        specialinvoke $r3.<kodkod.util.ints.ArraySequence$DescendingIterator: void <init>(kodkod.util.ints.ArraySequence,int,int)>(r0, i0, i1);

     label2:
        return $r1;
    }

    public kodkod.util.ints.IndexedEntry first()
    {
        kodkod.util.ints.EntryView[] r1;
        kodkod.util.ints.ArraySequence r0;
        kodkod.util.ints.EntryView r2;
        int $i0, i1, i2;
        java.lang.InternalError $r4;
        java.lang.Object $r3;

        r0 := @this: kodkod.util.ints.ArraySequence;

        $i0 = r0.<kodkod.util.ints.ArraySequence: int size>;

        if $i0 != 0 goto label1;

        return null;

     label1:
        r1 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        i2 = 0;

        i1 = lengthof r1;

        goto label4;

     label2:
        r2 = r1[i2];

        $r3 = virtualinvoke r2.<kodkod.util.ints.EntryView: java.lang.Object value()>();

        if $r3 == null goto label3;

        return r2;

     label3:
        i2 = i2 + 1;

     label4:
        if i2 < i1 goto label2;

        $r4 = new java.lang.InternalError;

        specialinvoke $r4.<java.lang.InternalError: void <init>()>();

        throw $r4;
    }

    public kodkod.util.ints.IndexedEntry last()
    {
        kodkod.util.ints.EntryView[] $r1, $r2, $r5;
        kodkod.util.ints.ArraySequence r0;
        kodkod.util.ints.EntryView $r3, $r6;
        int $i0, $i1, i2, $i4;
        java.lang.InternalError $r8;
        java.lang.Object $r4;

        r0 := @this: kodkod.util.ints.ArraySequence;

        $i0 = r0.<kodkod.util.ints.ArraySequence: int size>;

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r1 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $i1 = lengthof $r1;

        i2 = $i1 - 1;

        goto label4;

     label2:
        $r2 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $r3 = $r2[i2];

        $r4 = virtualinvoke $r3.<kodkod.util.ints.EntryView: java.lang.Object value()>();

        if $r4 == null goto label3;

        $r5 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $r6 = $r5[i2];

        return $r6;

     label3:
        $i4 = (int) -1;

        i2 = i2 + $i4;

     label4:
        if i2 >= 0 goto label2;

        $r8 = new java.lang.InternalError;

        specialinvoke $r8.<java.lang.InternalError: void <init>()>();

        throw $r8;
    }

    public kodkod.util.ints.IndexedEntry ceil(int)
    {
        kodkod.util.ints.EntryView[] $r1, $r2, $r5;
        kodkod.util.ints.ArraySequence r0;
        kodkod.util.ints.EntryView $r3, $r6;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r4;

        r0 := @this: kodkod.util.ints.ArraySequence;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<kodkod.util.ints.ArraySequence: int search(int)>(i0);

        if $i1 >= 0 goto label1;

        $i3 = neg $i1;

        $i4 = $i3 - 1;

        goto label2;

     label1:
        $i4 = $i1;

     label2:
        i5 = $i4;

        goto label5;

     label3:
        $r2 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $r3 = $r2[i5];

        $r4 = virtualinvoke $r3.<kodkod.util.ints.EntryView: java.lang.Object value()>();

        if $r4 == null goto label4;

        $r5 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $r6 = $r5[i5];

        return $r6;

     label4:
        i5 = i5 + 1;

     label5:
        $r1 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $i2 = lengthof $r1;

        if i5 < $i2 goto label3;

        return null;
    }

    public kodkod.util.ints.IndexedEntry floor(int)
    {
        kodkod.util.ints.EntryView[] $r1, $r4;
        kodkod.util.ints.ArraySequence r0;
        kodkod.util.ints.EntryView $r2, $r5;
        int i0, $i1, $i2, $i3, i4, $i6, $i8;
        java.lang.Object $r3;

        r0 := @this: kodkod.util.ints.ArraySequence;

        i0 := @parameter0: int;

        $i1 = specialinvoke r0.<kodkod.util.ints.ArraySequence: int search(int)>(i0);

        $i6 = (int) -1;

        if $i1 >= $i6 goto label1;

        $i2 = neg $i1;

        $i3 = $i2 - 2;

        goto label2;

     label1:
        $i3 = $i1;

     label2:
        i4 = $i3;

        goto label5;

     label3:
        $r1 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $r2 = $r1[i4];

        $r3 = virtualinvoke $r2.<kodkod.util.ints.EntryView: java.lang.Object value()>();

        if $r3 == null goto label4;

        $r4 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        $r5 = $r4[i4];

        return $r5;

     label4:
        $i8 = (int) -1;

        i4 = i4 + $i8;

     label5:
        if i4 >= 0 goto label3;

        return null;
    }

    public kodkod.util.ints.ArraySequence clone()
    {
        kodkod.util.ints.ArraySequence $r0, r1;

        r1 := @this: kodkod.util.ints.ArraySequence;

        $r0 = new kodkod.util.ints.ArraySequence;

        specialinvoke $r0.<kodkod.util.ints.ArraySequence: void <init>(kodkod.util.ints.ArraySequence)>(r1);

        return $r0;
    }

    public volatile kodkod.util.ints.SparseSequence clone() throws java.lang.CloneNotSupportedException
    {
        kodkod.util.ints.ArraySequence r0, $r1;
        kodkod.util.ints.SparseSequence $r2;

        r0 := @this: kodkod.util.ints.ArraySequence;

        $r1 = virtualinvoke r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.ArraySequence clone()>();

        $r2 = (kodkod.util.ints.SparseSequence) $r1;

        return $r2;
    }

    static int access$1(kodkod.util.ints.ArraySequence, int)
    {
        int i0, $i1;
        kodkod.util.ints.ArraySequence r0;

        r0 := @parameter0: kodkod.util.ints.ArraySequence;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<kodkod.util.ints.ArraySequence: int search(int)>(i0);

        return $i1;
    }

    static kodkod.util.ints.EntryView[] access$2(kodkod.util.ints.ArraySequence)
    {
        kodkod.util.ints.ArraySequence r0;
        kodkod.util.ints.EntryView[] $r1;

        r0 := @parameter0: kodkod.util.ints.ArraySequence;

        $r1 = r0.<kodkod.util.ints.ArraySequence: kodkod.util.ints.EntryView[] entries>;

        return $r1;
    }
}
