public class com.hp.hpl.jena.tdb.base.file.PlainFileMem extends com.hp.hpl.jena.tdb.base.file.PlainFile
{

    public void <init>()
    {
        java.nio.ByteBuffer $r1;
        com.hp.hpl.jena.tdb.base.file.PlainFileMem r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.PlainFileMem;

        specialinvoke r0.<com.hp.hpl.jena.tdb.base.file.PlainFile: void <init>()>();

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0);

        r0.<com.hp.hpl.jena.tdb.base.file.PlainFileMem: java.nio.ByteBuffer byteBuffer> = $r1;

        virtualinvoke r0.<com.hp.hpl.jena.tdb.base.file.PlainFileMem: java.nio.ByteBuffer ensure(int)>(0);

        return;
    }

    protected java.nio.ByteBuffer allocateBuffer(long)
    {
        int $i1;
        long l0;
        java.nio.ByteBuffer $r1, $r2;
        com.hp.hpl.jena.tdb.base.file.PlainFileMem r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.PlainFileMem;

        l0 := @parameter0: long;

        r0.<com.hp.hpl.jena.tdb.base.file.PlainFileMem: long filesize> = l0;

        $i1 = (int) l0;

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i1);

        $r2 = r0.<com.hp.hpl.jena.tdb.base.file.PlainFileMem: java.nio.ByteBuffer byteBuffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(java.nio.ByteBuffer)>($r2);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(0);

        return $r1;
    }

    public void close()
    {
        com.hp.hpl.jena.tdb.base.file.PlainFileMem r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.PlainFileMem;

        return;
    }

    public void sync()
    {
        com.hp.hpl.jena.tdb.base.file.PlainFileMem r0;

        r0 := @this: com.hp.hpl.jena.tdb.base.file.PlainFileMem;

        return;
    }
}
