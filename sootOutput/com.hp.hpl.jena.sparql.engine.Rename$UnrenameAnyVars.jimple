class com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars extends java.lang.Object implements com.hp.hpl.jena.sparql.graph.NodeTransform
{
    private final java.lang.String varPrefix;
    private final boolean repeatedly;

    public void <init>(java.lang.String, boolean)
    {
        com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars: java.lang.String varPrefix> = r1;

        r0.<com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars: boolean repeatedly> = z0;

        return;
    }

    public com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0;
        int $i0, $i1;
        java.lang.String $r2, $r4, $r6, $r7, $r8, r9, $r10;
        boolean $z0, $z1, $z2, $z3;
        com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars r3;
        com.hp.hpl.jena.sparql.core.Var r1, $r5;

        r3 := @this: com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $z0 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: boolean isVar(com.hp.hpl.jena.graph.Node)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        r1 = (com.hp.hpl.jena.sparql.core.Var) r0;

        $r2 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getName()>();

        r9 = $r2;

        $z1 = r3.<com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars: boolean repeatedly>;

        if $z1 == 0 goto label3;

     label2:
        $r7 = r3.<com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars: java.lang.String varPrefix>;

        $z3 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>($r7);

        if $z3 == 0 goto label4;

        $r8 = r3.<com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars: java.lang.String varPrefix>;

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        r9 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int)>($i1);

        goto label2;

     label3:
        $r4 = r3.<com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars: java.lang.String varPrefix>;

        $z2 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>($r4);

        if $z2 == 0 goto label4;

        $r6 = r3.<com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars: java.lang.String varPrefix>;

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        r9 = virtualinvoke $r2.<java.lang.String: java.lang.String substring(int)>($i0);

     label4:
        $r10 = virtualinvoke r1.<com.hp.hpl.jena.sparql.core.Var: java.lang.String getName()>();

        if r9 != $r10 goto label5;

        return r0;

     label5:
        $r5 = staticinvoke <com.hp.hpl.jena.sparql.core.Var: com.hp.hpl.jena.sparql.core.Var alloc(java.lang.String)>(r9);

        return $r5;
    }

    public volatile java.lang.Object convert(java.lang.Object)
    {
        com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars r0;
        java.lang.Object r1;
        com.hp.hpl.jena.graph.Node $r2, $r3;

        r0 := @this: com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars;

        r1 := @parameter0: java.lang.Object;

        $r2 = (com.hp.hpl.jena.graph.Node) r1;

        $r3 = virtualinvoke r0.<com.hp.hpl.jena.sparql.engine.Rename$UnrenameAnyVars: com.hp.hpl.jena.graph.Node convert(com.hp.hpl.jena.graph.Node)>($r2);

        return $r3;
    }
}
