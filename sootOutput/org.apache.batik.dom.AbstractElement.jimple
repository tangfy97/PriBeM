public abstract class org.apache.batik.dom.AbstractElement extends org.apache.batik.dom.AbstractParentChildNode implements org.w3c.dom.Element, org.w3c.dom.ElementTraversal
{
    protected org.w3c.dom.NamedNodeMap attributes;
    protected org.w3c.dom.TypeInfo typeInfo;

    protected void <init>()
    {
        org.apache.batik.dom.AbstractElement r0;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentChildNode: void <init>()>();

        return;
    }

    protected void <init>(java.lang.String, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractElement r0;
        java.lang.Object[] $r3;
        org.w3c.dom.DOMException $r4;
        org.apache.batik.dom.AbstractDocument r1;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentChildNode: void <init>()>();

        r0.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument> = r1;

        $z0 = virtualinvoke r1.<org.apache.batik.dom.AbstractDocument: boolean getStrictErrorChecking()>();

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <org.apache.batik.dom.util.DOMUtilities: boolean isValidName(java.lang.String)>(r2);

        if $z1 != 0 goto label1;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r2;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(5, "xml.name", $r3);

        throw $r4;

     label1:
        return;
    }

    public short getNodeType()
    {
        org.apache.batik.dom.AbstractElement r0;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        return 1;
    }

    public boolean hasAttributes()
    {
        org.apache.batik.dom.AbstractElement r0;
        int $i0;
        org.w3c.dom.NamedNodeMap $r1, $r2;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        $r1 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r1 == null goto label1;

        $r2 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        $i0 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: int getLength()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public org.w3c.dom.NamedNodeMap getAttributes()
    {
        org.w3c.dom.NamedNodeMap $r1, $r2;
        org.apache.batik.dom.AbstractElement r0;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        $r1 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r1 != null goto label1;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap createAttributes()>();

        r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes> = $r2;

        goto label2;

     label1:
        $r2 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

     label2:
        return $r2;
    }

    public java.lang.String getTagName()
    {
        org.apache.batik.dom.AbstractElement r0;
        java.lang.String $r1;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        return $r1;
    }

    public boolean hasAttribute(java.lang.String)
    {
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Node $r4;
        org.w3c.dom.NamedNodeMap $r1, $r3;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r1 == null goto label1;

        $r3 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>(r2);

        if $r4 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String getAttribute(java.lang.String)
    {
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Node $r4;
        org.w3c.dom.NamedNodeMap $r1, $r3;
        java.lang.String r2, $r6;
        org.w3c.dom.Attr r5;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r1 != null goto label1;

        return "";

     label1:
        $r3 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>(r2);

        r5 = (org.w3c.dom.Attr) $r4;

        if r5 != null goto label2;

        $r6 = "";

        goto label3;

     label2:
        $r6 = interfaceinvoke r5.<org.w3c.dom.Attr: java.lang.String getValue()>();

     label3:
        return $r6;
    }

    public void setAttribute(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Attr $r3, $r6;
        org.w3c.dom.Document $r5;
        org.w3c.dom.NamedNodeMap $r1, $r7, $r8;
        java.lang.String r2, r4;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r2 := @parameter0: java.lang.String;

        r4 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r1 != null goto label1;

        $r8 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap createAttributes()>();

        r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes> = $r8;

     label1:
        $r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr getAttributeNode(java.lang.String)>(r2);

        if $r3 != null goto label2;

        $r5 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Document: org.w3c.dom.Attr createAttribute(java.lang.String)>(r2);

        interfaceinvoke $r6.<org.w3c.dom.Attr: void setValue(java.lang.String)>(r4);

        $r7 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        interfaceinvoke $r7.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node setNamedItem(org.w3c.dom.Node)>($r6);

        goto label3;

     label2:
        interfaceinvoke $r3.<org.w3c.dom.Attr: void setValue(java.lang.String)>(r4);

     label3:
        return;
    }

    public void removeAttribute(java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.NamedNodeMap $r2;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: boolean hasAttribute(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node removeNamedItem(java.lang.String)>(r1);

        return;
    }

    public org.w3c.dom.Attr getAttributeNode(java.lang.String)
    {
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Node $r4;
        org.w3c.dom.NamedNodeMap $r1, $r3;
        java.lang.String r2;
        org.w3c.dom.Attr $r5;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r2 := @parameter0: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r1 != null goto label1;

        return null;

     label1:
        $r3 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItem(java.lang.String)>(r2);

        $r5 = (org.w3c.dom.Attr) $r4;

        return $r5;
    }

    public org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractElement r1;
        org.w3c.dom.Node $r4;
        org.w3c.dom.NamedNodeMap $r2, $r3, $r6;
        org.w3c.dom.Attr r0, $r5;

        r1 := @this: org.apache.batik.dom.AbstractElement;

        r0 := @parameter0: org.w3c.dom.Attr;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = r1.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r2 != null goto label2;

        $r6 = virtualinvoke r1.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap createAttributes()>();

        r1.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes> = $r6;

     label2:
        $r3 = r1.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node setNamedItemNS(org.w3c.dom.Node)>(r0);

        $r5 = (org.w3c.dom.Attr) $r4;

        return $r5;
    }

    public org.w3c.dom.Attr removeAttributeNode(org.w3c.dom.Attr) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractElement r1;
        java.lang.Object[] $r7;
        org.w3c.dom.Attr r0, $r6;
        org.w3c.dom.Node $r5;
        org.w3c.dom.DOMException $r9;
        org.w3c.dom.NamedNodeMap $r2, $r4;
        java.lang.String $r3, $r8, $r10;

        r1 := @this: org.apache.batik.dom.AbstractElement;

        r0 := @parameter0: org.w3c.dom.Attr;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = r1.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r2 != null goto label2;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = interfaceinvoke r0.<org.w3c.dom.Attr: java.lang.String getName()>();

        $r7[0] = $r8;

        $r9 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(8, "attribute.missing", $r7);

        throw $r9;

     label2:
        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r4 = r1.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r3 != null goto label3;

        $r10 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        goto label4;

     label3:
        $r10 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

     label4:
        $r5 = interfaceinvoke $r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node removeNamedItemNS(java.lang.String,java.lang.String)>($r3, $r10);

        $r6 = (org.w3c.dom.Attr) $r5;

        return $r6;
    }

    public void normalize()
    {
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Node $r3;
        int $i0, i1, $i3;
        org.w3c.dom.NamedNodeMap $r1, $r2;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode: void normalize()>();

        $r1 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r1 == null goto label3;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i0 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: int getLength()>();

        i1 = $i0 - 1;

        goto label2;

     label1:
        $r3 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        interfaceinvoke $r3.<org.w3c.dom.Node: void normalize()>();

        $i3 = (int) -1;

        i1 = i1 + $i3;

     label2:
        if i1 >= 0 goto label1;

     label3:
        return;
    }

    public boolean hasAttributeNS(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Node $r3;
        int $i0;
        org.w3c.dom.NamedNodeMap $r2, $r5;
        java.lang.String r1, r4;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r4 == null goto label1;

        $i0 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r4 = null;

     label1:
        $r5 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r5 == null goto label2;

        $r2 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)>(r4, r1);

        if $r3 == null goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    public java.lang.String getAttributeNS(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Attr $r6;
        org.w3c.dom.Node $r5;
        int $i0;
        org.w3c.dom.NamedNodeMap $r1, $r4;
        java.lang.String r2, r3, $r7;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r3 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r1 != null goto label1;

        return "";

     label1:
        if r3 == null goto label2;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        r3 = null;

     label2:
        $r4 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        $r5 = interfaceinvoke $r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)>(r3, r2);

        $r6 = (org.w3c.dom.Attr) $r5;

        if $r6 != null goto label3;

        $r7 = "";

        goto label4;

     label3:
        $r7 = interfaceinvoke $r6.<org.w3c.dom.Attr: java.lang.String getValue()>();

     label4:
        return $r7;
    }

    public void setAttributeNS(java.lang.String, java.lang.String, java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Attr $r5, $r9;
        org.w3c.dom.Document $r4;
        int $i0;
        org.w3c.dom.NamedNodeMap $r1, $r6, $r7;
        java.lang.String r2, r3, r8;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r8 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r1 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r1 != null goto label1;

        $r7 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap createAttributes()>();

        r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes> = $r7;

     label1:
        if r8 == null goto label2;

        $i0 = virtualinvoke r8.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

        r8 = null;

     label2:
        $r9 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>(r8, r2);

        if $r9 != null goto label3;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Document getOwnerDocument()>();

        $r5 = interfaceinvoke $r4.<org.w3c.dom.Document: org.w3c.dom.Attr createAttributeNS(java.lang.String,java.lang.String)>(r8, r2);

        interfaceinvoke $r5.<org.w3c.dom.Attr: void setValue(java.lang.String)>(r3);

        $r6 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        interfaceinvoke $r6.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node setNamedItemNS(org.w3c.dom.Node)>($r5);

        goto label4;

     label3:
        interfaceinvoke $r9.<org.w3c.dom.Attr: void setValue(java.lang.String)>(r3);

     label4:
        return;
    }

    public void removeAttributeNS(java.lang.String, java.lang.String) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractElement r0;
        int $i0;
        org.w3c.dom.NamedNodeMap $r2;
        java.lang.String r1, r3;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r3 == null goto label1;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r3 = null;

     label1:
        $z0 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: boolean hasAttributeNS(java.lang.String,java.lang.String)>(r3, r1);

        if $z0 != 0 goto label2;

        return;

     label2:
        $r2 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node removeNamedItemNS(java.lang.String,java.lang.String)>(r3, r1);

        return;
    }

    public org.w3c.dom.Attr getAttributeNodeNS(java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Attr $r4;
        org.w3c.dom.Node $r3;
        int $i0;
        org.w3c.dom.NamedNodeMap $r2, $r6;
        java.lang.String r1, r5;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        if r5 == null goto label1;

        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r5 = null;

     label1:
        $r6 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r6 != null goto label2;

        return null;

     label2:
        $r2 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node getNamedItemNS(java.lang.String,java.lang.String)>(r5, r1);

        $r4 = (org.w3c.dom.Attr) $r3;

        return $r4;
    }

    public org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractElement r1;
        org.w3c.dom.Node $r4;
        org.w3c.dom.NamedNodeMap $r2, $r3, $r6;
        org.w3c.dom.Attr r0, $r5;

        r1 := @this: org.apache.batik.dom.AbstractElement;

        r0 := @parameter0: org.w3c.dom.Attr;

        if r0 != null goto label1;

        return null;

     label1:
        $r2 = r1.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r2 != null goto label2;

        $r6 = virtualinvoke r1.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap createAttributes()>();

        r1.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes> = $r6;

     label2:
        $r3 = r1.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        $r4 = interfaceinvoke $r3.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node setNamedItemNS(org.w3c.dom.Node)>(r0);

        $r5 = (org.w3c.dom.Attr) $r4;

        return $r5;
    }

    public org.w3c.dom.TypeInfo getSchemaTypeInfo()
    {
        org.apache.batik.dom.AbstractElement r0;
        org.apache.batik.dom.AbstractElement$ElementTypeInfo $r3;
        org.w3c.dom.TypeInfo $r1, $r2;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        $r1 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.TypeInfo typeInfo>;

        if $r1 != null goto label1;

        $r3 = new org.apache.batik.dom.AbstractElement$ElementTypeInfo;

        specialinvoke $r3.<org.apache.batik.dom.AbstractElement$ElementTypeInfo: void <init>(org.apache.batik.dom.AbstractElement)>(r0);

        r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.TypeInfo typeInfo> = $r3;

     label1:
        $r2 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.TypeInfo typeInfo>;

        return $r2;
    }

    public void setIdAttribute(java.lang.String, boolean) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractElement r0;
        java.lang.Object[] $r4, $r6;
        org.apache.batik.dom.AbstractAttr r3;
        org.w3c.dom.Attr $r2;
        org.w3c.dom.DOMException $r5, $r7;
        java.lang.String r1;
        boolean $z0, z1;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r1 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        $r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr getAttributeNode(java.lang.String)>(r1);

        r3 = (org.apache.batik.dom.AbstractAttr) $r2;

        if r3 != null goto label1;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r1;

        $r7 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(8, "attribute.missing", $r6);

        throw $r7;

     label1:
        $z0 = virtualinvoke r3.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label2;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        $r5 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r4);

        throw $r5;

     label2:
        r3.<org.apache.batik.dom.AbstractAttr: boolean isIdAttr> = z1;

        return;
    }

    public void setIdAttributeNS(java.lang.String, java.lang.String, boolean) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractElement r0;
        java.lang.Object[] $r2, $r5;
        org.apache.batik.dom.AbstractAttr $r9;
        org.w3c.dom.Attr $r8;
        org.w3c.dom.DOMException $r4, $r6;
        int $i0;
        java.lang.String r1, $r3, r7;
        boolean $z0, z1;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        if r7 == null goto label1;

        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        r7 = null;

     label1:
        $r8 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr getAttributeNodeNS(java.lang.String,java.lang.String)>(r7, r1);

        $r9 = (org.apache.batik.dom.AbstractAttr) $r8;

        if $r9 != null goto label2;

        $r5 = newarray (java.lang.Object)[2];

        $r5[0] = r7;

        $r5[1] = r1;

        $r6 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(8, "attribute.missing", $r5);

        throw $r6;

     label2:
        $z0 = virtualinvoke $r9.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label3;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke $r9.<org.apache.batik.dom.AbstractAttr: java.lang.String getNodeName()>();

        $r2[0] = $r3;

        $r4 = virtualinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r2);

        throw $r4;

     label3:
        $r9.<org.apache.batik.dom.AbstractAttr: boolean isIdAttr> = z1;

        return;
    }

    public void setIdAttributeNode(org.w3c.dom.Attr, boolean) throws org.w3c.dom.DOMException
    {
        org.apache.batik.dom.AbstractElement r2;
        java.lang.Object[] $r3;
        org.apache.batik.dom.AbstractAttr r1;
        org.w3c.dom.Attr r0;
        org.w3c.dom.DOMException $r5;
        java.lang.String $r4;
        boolean $z0, z1;

        r2 := @this: org.apache.batik.dom.AbstractElement;

        r0 := @parameter0: org.w3c.dom.Attr;

        z1 := @parameter1: boolean;

        r1 = (org.apache.batik.dom.AbstractAttr) r0;

        $z0 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: boolean isReadonly()>();

        if $z0 == 0 goto label1;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = virtualinvoke r1.<org.apache.batik.dom.AbstractAttr: java.lang.String getNodeName()>();

        $r3[0] = $r4;

        $r5 = virtualinvoke r2.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(7, "readonly.node", $r3);

        throw $r5;

     label1:
        r1.<org.apache.batik.dom.AbstractAttr: boolean isIdAttr> = z1;

        return;
    }

    protected org.w3c.dom.Attr getIdAttribute()
    {
        org.apache.batik.dom.AbstractElement r0;
        org.apache.batik.dom.AbstractAttr r3;
        org.w3c.dom.Node $r2;
        int $i0, i1;
        org.w3c.dom.NamedNodeMap $r1;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap getAttributes()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $i0 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: int getLength()>();

        i1 = 0;

        goto label4;

     label2:
        $r2 = interfaceinvoke $r1.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        r3 = (org.apache.batik.dom.AbstractAttr) $r2;

        $z0 = virtualinvoke r3.<org.apache.batik.dom.AbstractAttr: boolean isId()>();

        if $z0 == 0 goto label3;

        return r3;

     label3:
        i1 = i1 + 1;

     label4:
        if i1 < $i0 goto label2;

        return null;
    }

    protected java.lang.String getId()
    {
        org.apache.batik.dom.AbstractElement r0;
        int $i0;
        java.lang.String $r2;
        org.w3c.dom.Attr $r1;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        $r1 = virtualinvoke r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr getIdAttribute()>();

        if $r1 == null goto label1;

        $r2 = interfaceinvoke $r1.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        return $r2;

     label1:
        return null;
    }

    protected void nodeAdded(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Node r1;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: void invalidateElementsByTagName(org.w3c.dom.Node)>(r1);

        return;
    }

    protected void nodeToBeRemoved(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Node r1;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractElement: void invalidateElementsByTagName(org.w3c.dom.Node)>(r1);

        return;
    }

    private void invalidateElementsByTagName(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractElement r1;
        org.apache.batik.dom.AbstractParentNode$ElementsByTagName $r6, $r7;
        org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS $r8, $r9, $r10, $r11;
        short $s0, $s1;
        org.w3c.dom.Node r0, r13, r14;
        int $i2;
        java.lang.String $r3, $r4, r5, $r12;
        org.apache.batik.dom.AbstractDocument $r2;

        r1 := @this: org.apache.batik.dom.AbstractElement;

        r0 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 == 1 goto label01;

        return;

     label01:
        $r2 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $r3 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNamespaceURI()>();

        $r4 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        if $r3 != null goto label02;

        $r12 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        goto label03;

     label02:
        $r12 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getLocalName()>();

     label03:
        r5 = $r12;

        r13 = r1;

        goto label12;

     label04:
        $s1 = interfaceinvoke r13.<org.w3c.dom.Node: short getNodeType()>();

        $i2 = (int) $s1;

        lookupswitch($i2)
        {
            case 1: goto label05;
            case 9: goto label05;
            default: goto label11;
        };

     label05:
        $r6 = virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractParentNode$ElementsByTagName getElementsByTagName(org.w3c.dom.Node,java.lang.String)>(r13, $r4);

        if $r6 == null goto label06;

        virtualinvoke $r6.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: void invalidate()>();

     label06:
        $r7 = virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractParentNode$ElementsByTagName getElementsByTagName(org.w3c.dom.Node,java.lang.String)>(r13, "*");

        if $r7 == null goto label07;

        virtualinvoke $r7.<org.apache.batik.dom.AbstractParentNode$ElementsByTagName: void invalidate()>();

     label07:
        $r8 = virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS getElementsByTagNameNS(org.w3c.dom.Node,java.lang.String,java.lang.String)>(r13, $r3, r5);

        if $r8 == null goto label08;

        virtualinvoke $r8.<org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS: void invalidate()>();

     label08:
        $r9 = virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS getElementsByTagNameNS(org.w3c.dom.Node,java.lang.String,java.lang.String)>(r13, "*", r5);

        if $r9 == null goto label09;

        virtualinvoke $r9.<org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS: void invalidate()>();

     label09:
        $r10 = virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS getElementsByTagNameNS(org.w3c.dom.Node,java.lang.String,java.lang.String)>(r13, $r3, "*");

        if $r10 == null goto label10;

        virtualinvoke $r10.<org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS: void invalidate()>();

     label10:
        $r11 = virtualinvoke $r2.<org.apache.batik.dom.AbstractDocument: org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS getElementsByTagNameNS(org.w3c.dom.Node,java.lang.String,java.lang.String)>(r13, "*", "*");

        if $r11 == null goto label11;

        virtualinvoke $r11.<org.apache.batik.dom.AbstractParentNode$ElementsByTagNameNS: void invalidate()>();

     label11:
        r13 = interfaceinvoke r13.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

     label12:
        if r13 != null goto label04;

        r14 = interfaceinvoke r0.<org.w3c.dom.Node: org.w3c.dom.Node getFirstChild()>();

        goto label14;

     label13:
        specialinvoke r1.<org.apache.batik.dom.AbstractElement: void invalidateElementsByTagName(org.w3c.dom.Node)>(r14);

        r14 = interfaceinvoke r14.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label14:
        if r14 != null goto label13;

        return;
    }

    protected org.w3c.dom.NamedNodeMap createAttributes()
    {
        org.apache.batik.dom.AbstractElement r1;
        org.apache.batik.dom.AbstractElement$NamedNodeHashMap $r0;

        r1 := @this: org.apache.batik.dom.AbstractElement;

        $r0 = new org.apache.batik.dom.AbstractElement$NamedNodeHashMap;

        specialinvoke $r0.<org.apache.batik.dom.AbstractElement$NamedNodeHashMap: void <init>(org.apache.batik.dom.AbstractElement)>(r1);

        return $r0;
    }

    protected org.w3c.dom.Node export(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractElement r0, r3;
        org.apache.batik.dom.AbstractAttr r7;
        org.w3c.dom.Attr r10;
        org.w3c.dom.Node r1, $r6, $r8, $r9;
        int $i0, i1, $i3;
        org.w3c.dom.NamedNodeMap $r4, r5;
        boolean $z0, $z1;
        org.apache.batik.dom.AbstractDocument r2;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node export(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r3 = (org.apache.batik.dom.AbstractElement) r1;

        $r4 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r4 == null goto label5;

        r5 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        $i0 = interfaceinvoke r5.<org.w3c.dom.NamedNodeMap: int getLength()>();

        i1 = $i0 - 1;

        goto label4;

     label1:
        $r6 = interfaceinvoke r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        r7 = (org.apache.batik.dom.AbstractAttr) $r6;

        $z0 = virtualinvoke r7.<org.apache.batik.dom.AbstractAttr: boolean getSpecified()>();

        if $z0 == 0 goto label3;

        $r8 = virtualinvoke r7.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node cloneNode(boolean)>(0);

        $r9 = virtualinvoke r7.<org.apache.batik.dom.AbstractAttr: org.w3c.dom.Node deepExport(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>($r8, r2);

        r10 = (org.w3c.dom.Attr) $r9;

        $z1 = r7 instanceof org.apache.batik.dom.AbstractAttrNS;

        if $z1 == 0 goto label2;

        virtualinvoke r3.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>(r10);

        goto label3;

     label2:
        virtualinvoke r3.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)>(r10);

     label3:
        $i3 = (int) -1;

        i1 = i1 + $i3;

     label4:
        if i1 >= 0 goto label1;

     label5:
        return r1;
    }

    protected org.w3c.dom.Node deepExport(org.w3c.dom.Node, org.apache.batik.dom.AbstractDocument)
    {
        org.apache.batik.dom.AbstractElement r0, r3;
        org.apache.batik.dom.AbstractAttr r7;
        org.w3c.dom.Attr r10;
        org.w3c.dom.Node r1, $r6, $r8, $r9;
        int $i0, i1, $i3;
        org.w3c.dom.NamedNodeMap $r4, r5;
        boolean $z0, $z1;
        org.apache.batik.dom.AbstractDocument r2;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r1 := @parameter0: org.w3c.dom.Node;

        r2 := @parameter1: org.apache.batik.dom.AbstractDocument;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node deepExport(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>(r1, r2);

        r3 = (org.apache.batik.dom.AbstractElement) r1;

        $r4 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r4 == null goto label5;

        r5 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        $i0 = interfaceinvoke r5.<org.w3c.dom.NamedNodeMap: int getLength()>();

        i1 = $i0 - 1;

        goto label4;

     label1:
        $r6 = interfaceinvoke r5.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        r7 = (org.apache.batik.dom.AbstractAttr) $r6;

        $z0 = virtualinvoke r7.<org.apache.batik.dom.AbstractAttr: boolean getSpecified()>();

        if $z0 == 0 goto label3;

        $r8 = virtualinvoke r7.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node cloneNode(boolean)>(0);

        $r9 = virtualinvoke r7.<org.apache.batik.dom.AbstractAttr: org.w3c.dom.Node deepExport(org.w3c.dom.Node,org.apache.batik.dom.AbstractDocument)>($r8, r2);

        r10 = (org.w3c.dom.Attr) $r9;

        $z1 = r7 instanceof org.apache.batik.dom.AbstractAttrNS;

        if $z1 == 0 goto label2;

        virtualinvoke r3.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>(r10);

        goto label3;

     label2:
        virtualinvoke r3.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)>(r10);

     label3:
        $i3 = (int) -1;

        i1 = i1 + $i3;

     label4:
        if i1 >= 0 goto label1;

     label5:
        return r1;
    }

    protected org.w3c.dom.Node copyInto(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractElement r0, r2;
        org.apache.batik.dom.AbstractAttr r7;
        org.w3c.dom.Node r1, $r5, $r6;
        int $i0, i1, $i3;
        org.w3c.dom.NamedNodeMap $r3, r4;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractNode: org.w3c.dom.Node copyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.AbstractElement) r1;

        $r3 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r3 == null goto label5;

        r4 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        $i0 = interfaceinvoke r4.<org.w3c.dom.NamedNodeMap: int getLength()>();

        i1 = $i0 - 1;

        goto label4;

     label1:
        $r5 = interfaceinvoke r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Node cloneNode(boolean)>(1);

        r7 = (org.apache.batik.dom.AbstractAttr) $r6;

        $z0 = r7 instanceof org.apache.batik.dom.AbstractAttrNS;

        if $z0 == 0 goto label2;

        virtualinvoke r2.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>(r7);

        goto label3;

     label2:
        virtualinvoke r2.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)>(r7);

     label3:
        $i3 = (int) -1;

        i1 = i1 + $i3;

     label4:
        if i1 >= 0 goto label1;

     label5:
        return r1;
    }

    protected org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)
    {
        org.apache.batik.dom.AbstractElement r0, r2;
        org.apache.batik.dom.AbstractAttr r7;
        org.w3c.dom.Node r1, $r5, $r6;
        int $i0, i1, $i3;
        org.w3c.dom.NamedNodeMap $r3, r4;
        boolean $z0;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r1 := @parameter0: org.w3c.dom.Node;

        specialinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node deepCopyInto(org.w3c.dom.Node)>(r1);

        r2 = (org.apache.batik.dom.AbstractElement) r1;

        $r3 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        if $r3 == null goto label5;

        r4 = r0.<org.apache.batik.dom.AbstractElement: org.w3c.dom.NamedNodeMap attributes>;

        $i0 = interfaceinvoke r4.<org.w3c.dom.NamedNodeMap: int getLength()>();

        i1 = $i0 - 1;

        goto label4;

     label1:
        $r5 = interfaceinvoke r4.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>(i1);

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Node cloneNode(boolean)>(1);

        r7 = (org.apache.batik.dom.AbstractAttr) $r6;

        $z0 = r7 instanceof org.apache.batik.dom.AbstractAttrNS;

        if $z0 == 0 goto label2;

        virtualinvoke r2.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr setAttributeNodeNS(org.w3c.dom.Attr)>(r7);

        goto label3;

     label2:
        virtualinvoke r2.<org.apache.batik.dom.AbstractElement: org.w3c.dom.Attr setAttributeNode(org.w3c.dom.Attr)>(r7);

     label3:
        $i3 = (int) -1;

        i1 = i1 + $i3;

     label4:
        if i1 >= 0 goto label1;

     label5:
        return r1;
    }

    protected void checkChildType(org.w3c.dom.Node, boolean)
    {
        org.apache.batik.dom.AbstractElement r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r8, $r9;
        short $s0, $s1, $s2;
        org.w3c.dom.Node r0;
        org.w3c.dom.DOMException $r7;
        int $i3, $i4, $i5;
        java.lang.String $r4, $r6;
        boolean z0;

        r1 := @this: org.apache.batik.dom.AbstractElement;

        r0 := @parameter0: org.w3c.dom.Node;

        z0 := @parameter1: boolean;

        $s0 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i3 = (int) $s0;

        tableswitch($i3)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label2;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label2;
            case 10: goto label2;
            case 11: goto label1;
            default: goto label2;
        };

     label1:
        goto label3;

     label2:
        $r2 = newarray (java.lang.Object)[4];

        $r8 = new java.lang.Integer;

        $s1 = virtualinvoke r1.<org.apache.batik.dom.AbstractElement: short getNodeType()>();

        $i4 = (int) $s1;

        specialinvoke $r8.<java.lang.Integer: void <init>(int)>($i4);

        $r2[0] = $r8;

        $r4 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: java.lang.String getNodeName()>();

        $r2[1] = $r4;

        $r9 = new java.lang.Integer;

        $s2 = interfaceinvoke r0.<org.w3c.dom.Node: short getNodeType()>();

        $i5 = (int) $s2;

        specialinvoke $r9.<java.lang.Integer: void <init>(int)>($i5);

        $r2[2] = $r9;

        $r6 = interfaceinvoke r0.<org.w3c.dom.Node: java.lang.String getNodeName()>();

        $r2[3] = $r6;

        $r7 = virtualinvoke r1.<org.apache.batik.dom.AbstractNode: org.w3c.dom.DOMException createDOMException(short,java.lang.String,java.lang.Object[])>(3, "child.type", $r2);

        throw $r7;

     label3:
        return;
    }

    public void fireDOMAttrModifiedEvent(java.lang.String, org.w3c.dom.Attr, java.lang.String, java.lang.String, short)
    {
        org.apache.batik.dom.AbstractElement r2;
        org.apache.batik.dom.AbstractAttr $r1, $r9, $r11;
        org.apache.batik.dom.events.DOMMutationEvent r6;
        org.w3c.dom.Attr r0;
        short s0;
        int $i1;
        java.lang.String r3, r4, r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.apache.batik.dom.AbstractDocument $r8, $r10, $r12, $r13;
        org.w3c.dom.events.Event $r5;

        r2 := @this: org.apache.batik.dom.AbstractElement;

        r7 := @parameter0: java.lang.String;

        r0 := @parameter1: org.w3c.dom.Attr;

        r4 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        s0 := @parameter4: short;

        $i1 = (int) s0;

        lookupswitch($i1)
        {
            case 1: goto label3;
            case 2: goto label1;
            default: goto label5;
        };

     label1:
        $r1 = (org.apache.batik.dom.AbstractAttr) r0;

        $z0 = virtualinvoke $r1.<org.apache.batik.dom.AbstractAttr: boolean isId()>();

        if $z0 == 0 goto label2;

        $r8 = r2.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        virtualinvoke $r8.<org.apache.batik.dom.AbstractDocument: void addIdEntry(org.w3c.dom.Element,java.lang.String)>(r2, r3);

     label2:
        virtualinvoke r2.<org.apache.batik.dom.AbstractElement: void attrAdded(org.w3c.dom.Attr,java.lang.String)>(r0, r3);

        goto label7;

     label3:
        $r9 = (org.apache.batik.dom.AbstractAttr) r0;

        $z2 = virtualinvoke $r9.<org.apache.batik.dom.AbstractAttr: boolean isId()>();

        if $z2 == 0 goto label4;

        $r10 = r2.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        virtualinvoke $r10.<org.apache.batik.dom.AbstractDocument: void updateIdEntry(org.w3c.dom.Element,java.lang.String,java.lang.String)>(r2, r4, r3);

     label4:
        virtualinvoke r2.<org.apache.batik.dom.AbstractElement: void attrModified(org.w3c.dom.Attr,java.lang.String,java.lang.String)>(r0, r4, r3);

        goto label7;

     label5:
        $r11 = (org.apache.batik.dom.AbstractAttr) r0;

        $z3 = virtualinvoke $r11.<org.apache.batik.dom.AbstractAttr: boolean isId()>();

        if $z3 == 0 goto label6;

        $r12 = r2.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument ownerDocument>;

        virtualinvoke $r12.<org.apache.batik.dom.AbstractDocument: void removeIdEntry(org.w3c.dom.Element,java.lang.String)>(r2, r4);

     label6:
        virtualinvoke r2.<org.apache.batik.dom.AbstractElement: void attrRemoved(org.w3c.dom.Attr,java.lang.String)>(r0, r4);

     label7:
        $r13 = virtualinvoke r2.<org.apache.batik.dom.AbstractNode: org.apache.batik.dom.AbstractDocument getCurrentDocument()>();

        $z4 = virtualinvoke $r13.<org.apache.batik.dom.AbstractDocument: boolean getEventsEnabled()>();

        if $z4 == 0 goto label8;

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z1 != 0 goto label8;

        $r5 = virtualinvoke $r13.<org.apache.batik.dom.AbstractDocument: org.w3c.dom.events.Event createEvent(java.lang.String)>("MutationEvents");

        r6 = (org.apache.batik.dom.events.DOMMutationEvent) $r5;

        virtualinvoke r6.<org.apache.batik.dom.events.DOMMutationEvent: void initMutationEventNS(java.lang.String,java.lang.String,boolean,boolean,org.w3c.dom.Node,java.lang.String,java.lang.String,java.lang.String,short)>("http://www.w3.org/2001/xml-events", "DOMAttrModified", 1, 0, r0, r4, r3, r7, s0);

        virtualinvoke r2.<org.apache.batik.dom.AbstractNode: boolean dispatchEvent(org.w3c.dom.events.Event)>(r6);

     label8:
        return;
    }

    protected void attrAdded(org.w3c.dom.Attr, java.lang.String)
    {
        org.apache.batik.dom.AbstractElement r0;
        java.lang.String r2;
        org.w3c.dom.Attr r1;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r1 := @parameter0: org.w3c.dom.Attr;

        r2 := @parameter1: java.lang.String;

        return;
    }

    protected void attrModified(org.w3c.dom.Attr, java.lang.String, java.lang.String)
    {
        org.apache.batik.dom.AbstractElement r0;
        java.lang.String r2, r3;
        org.w3c.dom.Attr r1;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r1 := @parameter0: org.w3c.dom.Attr;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        return;
    }

    protected void attrRemoved(org.w3c.dom.Attr, java.lang.String)
    {
        org.apache.batik.dom.AbstractElement r0;
        java.lang.String r2;
        org.w3c.dom.Attr r1;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r1 := @parameter0: org.w3c.dom.Attr;

        r2 := @parameter1: java.lang.String;

        return;
    }

    public org.w3c.dom.Element getFirstElementChild()
    {
        short $s0;
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Element $r1;
        org.w3c.dom.Node r2;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getFirstChild()>();

        goto label3;

     label1:
        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label2;

        $r1 = (org.w3c.dom.Element) r2;

        return $r1;

     label2:
        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label3:
        if r2 != null goto label1;

        return null;
    }

    public org.w3c.dom.Element getLastElementChild()
    {
        short $s0;
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Element $r1;
        org.w3c.dom.Node r2;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.Node getLastChild()>();

        goto label3;

     label1:
        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label2;

        $r1 = (org.w3c.dom.Element) r2;

        return $r1;

     label2:
        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

     label3:
        if r2 != null goto label1;

        return null;
    }

    public org.w3c.dom.Element getNextElementSibling()
    {
        short $s0;
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Element $r1;
        org.w3c.dom.Node r2;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r2 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentChildNode: org.w3c.dom.Node getNextSibling()>();

        goto label3;

     label1:
        $s0 = interfaceinvoke r2.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label2;

        $r1 = (org.w3c.dom.Element) r2;

        return $r1;

     label2:
        r2 = interfaceinvoke r2.<org.w3c.dom.Node: org.w3c.dom.Node getNextSibling()>();

     label3:
        if r2 != null goto label1;

        return null;
    }

    public org.w3c.dom.Element getPreviousElementSibling()
    {
        short $s0;
        org.apache.batik.dom.AbstractElement r0;
        org.w3c.dom.Element $r1, $r2;
        org.w3c.dom.Node r3;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        r3 = virtualinvoke r0.<org.apache.batik.dom.AbstractParentChildNode: org.w3c.dom.Node getPreviousSibling()>();

        goto label3;

     label1:
        $s0 = interfaceinvoke r3.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label2;

        $r1 = (org.w3c.dom.Element) r3;

        return $r1;

     label2:
        r3 = interfaceinvoke r3.<org.w3c.dom.Node: org.w3c.dom.Node getPreviousSibling()>();

     label3:
        if r3 != null goto label1;

        $r2 = (org.w3c.dom.Element) r3;

        return $r2;
    }

    public int getChildElementCount()
    {
        int $i0;
        org.apache.batik.dom.AbstractElement r0;
        org.apache.batik.dom.AbstractParentNode$ChildNodes $r1;

        r0 := @this: org.apache.batik.dom.AbstractElement;

        virtualinvoke r0.<org.apache.batik.dom.AbstractParentNode: org.w3c.dom.NodeList getChildNodes()>();

        $r1 = r0.<org.apache.batik.dom.AbstractParentNode: org.apache.batik.dom.AbstractParentNode$ChildNodes childNodes>;

        $i0 = $r1.<org.apache.batik.dom.AbstractParentNode$ChildNodes: int elementChildren>;

        return $i0;
    }
}
