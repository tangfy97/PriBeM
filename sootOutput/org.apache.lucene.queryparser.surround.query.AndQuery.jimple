public class org.apache.lucene.queryparser.surround.query.AndQuery extends org.apache.lucene.queryparser.surround.query.ComposedQuery
{

    public void <init>(java.util.List, boolean, java.lang.String)
    {
        java.util.List r1;
        org.apache.lucene.queryparser.surround.query.AndQuery r0;
        java.lang.String r2;
        boolean z0;

        r0 := @this: org.apache.lucene.queryparser.surround.query.AndQuery;

        r1 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        specialinvoke r0.<org.apache.lucene.queryparser.surround.query.ComposedQuery: void <init>(java.util.List,boolean,java.lang.String)>(r1, z0, r2);

        return;
    }

    public org.apache.lucene.search.Query makeLuceneQueryFieldNoBoost(java.lang.String, org.apache.lucene.queryparser.surround.query.BasicQueryFactory)
    {
        org.apache.lucene.search.Query $r5;
        java.util.List $r3;
        org.apache.lucene.queryparser.surround.query.AndQuery r0;
        org.apache.lucene.queryparser.surround.query.BasicQueryFactory r2;
        java.lang.String r1;
        org.apache.lucene.search.BooleanClause$Occur $r4;

        r0 := @this: org.apache.lucene.queryparser.surround.query.AndQuery;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.apache.lucene.queryparser.surround.query.BasicQueryFactory;

        $r3 = virtualinvoke r0.<org.apache.lucene.queryparser.surround.query.AndQuery: java.util.List makeLuceneSubQueriesField(java.lang.String,org.apache.lucene.queryparser.surround.query.BasicQueryFactory)>(r1, r2);

        $r4 = <org.apache.lucene.search.BooleanClause$Occur: org.apache.lucene.search.BooleanClause$Occur MUST>;

        $r5 = staticinvoke <org.apache.lucene.queryparser.surround.query.SrndBooleanQuery: org.apache.lucene.search.Query makeBooleanQuery(java.util.List,org.apache.lucene.search.BooleanClause$Occur)>($r3, $r4);

        return $r5;
    }
}
