public abstract class com.ctc.wstx.sw.XmlWriter extends java.lang.Object
{
    protected static final int SURR1_FIRST;
    protected static final int SURR1_LAST;
    protected static final int SURR2_FIRST;
    protected static final int SURR2_LAST;
    protected static final char DEFAULT_QUOTE_CHAR;
    protected final com.ctc.wstx.api.WriterConfig mConfig;
    protected final java.lang.String mEncoding;
    protected final boolean mNsAware;
    protected final boolean mCheckStructure;
    protected final boolean mCheckContent;
    protected final boolean mCheckNames;
    protected final boolean mFixContent;
    final boolean mEscapeCR;
    protected final boolean mAutoCloseOutput;
    protected java.io.Writer mTextWriter;
    protected java.io.Writer mAttrValueWriter;
    protected boolean mXml11;
    protected com.ctc.wstx.sw.XmlWriterWrapper mRawWrapper;
    protected com.ctc.wstx.sw.XmlWriterWrapper mTextWrapper;
    protected int mLocPastChars;
    protected int mLocRowNr;
    protected int mLocRowStartOffset;

    protected void <init>(com.ctc.wstx.api.WriterConfig, java.lang.String, boolean) throws java.io.IOException
    {
        org.codehaus.stax2.io.EscapingWriterFactory $r4, $r15;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.io.Writer $r6, $r7, $r9, $r10;
        com.ctc.wstx.sw.XmlWriter r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.String r2, $r5, $r8, $r11, $r12, $r13, $r16;
        com.ctc.wstx.api.WriterConfig r1, $r3, $r14;

        r0 := @this: com.ctc.wstx.sw.XmlWriter;

        r1 := @parameter0: com.ctc.wstx.api.WriterConfig;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.ctc.wstx.sw.XmlWriter: boolean mXml11> = 0;

        r0.<com.ctc.wstx.sw.XmlWriter: com.ctc.wstx.sw.XmlWriterWrapper mRawWrapper> = null;

        r0.<com.ctc.wstx.sw.XmlWriter: com.ctc.wstx.sw.XmlWriterWrapper mTextWrapper> = null;

        r0.<com.ctc.wstx.sw.XmlWriter: int mLocPastChars> = 0;

        r0.<com.ctc.wstx.sw.XmlWriter: int mLocRowNr> = 1;

        r0.<com.ctc.wstx.sw.XmlWriter: int mLocRowStartOffset> = 0;

        r0.<com.ctc.wstx.sw.XmlWriter: com.ctc.wstx.api.WriterConfig mConfig> = r1;

        r0.<com.ctc.wstx.sw.XmlWriter: java.lang.String mEncoding> = r2;

        r0.<com.ctc.wstx.sw.XmlWriter: boolean mAutoCloseOutput> = z0;

        $i0 = virtualinvoke r1.<com.ctc.wstx.api.WriterConfig: int getConfigFlags()>();

        $i1 = $i0 & 1;

        if $i1 == 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        r0.<com.ctc.wstx.sw.XmlWriter: boolean mNsAware> = $z1;

        $i2 = $i0 & 256;

        if $i2 == 0 goto label03;

        $z2 = 1;

        goto label04;

     label03:
        $z2 = 0;

     label04:
        r0.<com.ctc.wstx.sw.XmlWriter: boolean mCheckStructure> = $z2;

        $i3 = $i0 & 512;

        if $i3 == 0 goto label05;

        $z3 = 1;

        goto label06;

     label05:
        $z3 = 0;

     label06:
        r0.<com.ctc.wstx.sw.XmlWriter: boolean mCheckContent> = $z3;

        $i4 = $i0 & 1024;

        if $i4 == 0 goto label07;

        $z4 = 1;

        goto label08;

     label07:
        $z4 = 0;

     label08:
        r0.<com.ctc.wstx.sw.XmlWriter: boolean mCheckNames> = $z4;

        $i5 = $i0 & 4096;

        if $i5 == 0 goto label09;

        $z5 = 1;

        goto label10;

     label09:
        $z5 = 0;

     label10:
        r0.<com.ctc.wstx.sw.XmlWriter: boolean mFixContent> = $z5;

        $i6 = $i0 & 32;

        if $i6 == 0 goto label11;

        $z6 = 1;

        goto label12;

     label11:
        $z6 = 0;

     label12:
        r0.<com.ctc.wstx.sw.XmlWriter: boolean mEscapeCR> = $z6;

        $r3 = r0.<com.ctc.wstx.sw.XmlWriter: com.ctc.wstx.api.WriterConfig mConfig>;

        $r4 = virtualinvoke $r3.<com.ctc.wstx.api.WriterConfig: org.codehaus.stax2.io.EscapingWriterFactory getTextEscaperFactory()>();

        if $r4 != null goto label13;

        r0.<com.ctc.wstx.sw.XmlWriter: java.io.Writer mTextWriter> = null;

        goto label17;

     label13:
        $r5 = r0.<com.ctc.wstx.sw.XmlWriter: java.lang.String mEncoding>;

        if $r5 == null goto label14;

        $r12 = r0.<com.ctc.wstx.sw.XmlWriter: java.lang.String mEncoding>;

        $i8 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i8 != 0 goto label15;

     label14:
        $r13 = "UTF-8";

        goto label16;

     label15:
        $r13 = r0.<com.ctc.wstx.sw.XmlWriter: java.lang.String mEncoding>;

     label16:
        $r6 = virtualinvoke r0.<com.ctc.wstx.sw.XmlWriter: java.io.Writer wrapAsRawWriter()>();

        $r7 = interfaceinvoke $r4.<org.codehaus.stax2.io.EscapingWriterFactory: java.io.Writer createEscapingWriterFor(java.io.Writer,java.lang.String)>($r6, $r13);

        r0.<com.ctc.wstx.sw.XmlWriter: java.io.Writer mTextWriter> = $r7;

     label17:
        $r14 = r0.<com.ctc.wstx.sw.XmlWriter: com.ctc.wstx.api.WriterConfig mConfig>;

        $r15 = virtualinvoke $r14.<com.ctc.wstx.api.WriterConfig: org.codehaus.stax2.io.EscapingWriterFactory getAttrValueEscaperFactory()>();

        if $r15 != null goto label18;

        r0.<com.ctc.wstx.sw.XmlWriter: java.io.Writer mAttrValueWriter> = null;

        goto label22;

     label18:
        $r8 = r0.<com.ctc.wstx.sw.XmlWriter: java.lang.String mEncoding>;

        if $r8 == null goto label19;

        $r11 = r0.<com.ctc.wstx.sw.XmlWriter: java.lang.String mEncoding>;

        $i7 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i7 != 0 goto label20;

     label19:
        $r16 = "UTF-8";

        goto label21;

     label20:
        $r16 = r0.<com.ctc.wstx.sw.XmlWriter: java.lang.String mEncoding>;

     label21:
        $r9 = virtualinvoke r0.<com.ctc.wstx.sw.XmlWriter: java.io.Writer wrapAsRawWriter()>();

        $r10 = interfaceinvoke $r15.<org.codehaus.stax2.io.EscapingWriterFactory: java.io.Writer createEscapingWriterFor(java.io.Writer,java.lang.String)>($r9, $r16);

        r0.<com.ctc.wstx.sw.XmlWriter: java.io.Writer mAttrValueWriter> = $r10;

     label22:
        return;
    }

    public void enableXml11()
    {
        com.ctc.wstx.sw.XmlWriter r0;

        r0 := @this: com.ctc.wstx.sw.XmlWriter;

        r0.<com.ctc.wstx.sw.XmlWriter: boolean mXml11> = 1;

        return;
    }

    protected abstract java.io.OutputStream getOutputStream();

    protected abstract java.io.Writer getWriter();

    public abstract void close() throws java.io.IOException;

    public abstract void flush() throws java.io.IOException;

    public abstract void writeRaw(java.lang.String, int, int) throws java.io.IOException;

    public void writeRaw(java.lang.String) throws java.io.IOException
    {
        com.ctc.wstx.sw.XmlWriter r0;
        int $i0;
        java.lang.String r1;

        r0 := @this: com.ctc.wstx.sw.XmlWriter;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        virtualinvoke r0.<com.ctc.wstx.sw.XmlWriter: void writeRaw(java.lang.String,int,int)>(r1, 0, $i0);

        return;
    }

    public abstract void writeRaw(char[], int, int) throws java.io.IOException;

    public abstract void writeCDataStart() throws java.io.IOException;

    public abstract void writeCDataEnd() throws java.io.IOException;

    public abstract void writeCommentStart() throws java.io.IOException;

    public abstract void writeCommentEnd() throws java.io.IOException;

    public abstract void writePIStart(java.lang.String, boolean) throws java.io.IOException;

    public abstract void writePIEnd() throws java.io.IOException;

    public abstract int writeCData(java.lang.String) throws java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract int writeCData(char[], int, int) throws java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract void writeCharacters(java.lang.String) throws java.io.IOException;

    public abstract void writeCharacters(char[], int, int) throws java.io.IOException;

    public abstract int writeComment(java.lang.String) throws java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract void writeDTD(java.lang.String) throws java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract void writeDTD(java.lang.String, java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract void writeEntityReference(java.lang.String) throws java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract int writePI(java.lang.String, java.lang.String) throws java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract void writeXmlDeclaration(java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException;

    public abstract void writeStartTagStart(java.lang.String) throws java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract void writeStartTagStart(java.lang.String, java.lang.String) throws java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract void writeStartTagEnd() throws java.io.IOException;

    public abstract void writeStartTagEmptyEnd() throws java.io.IOException;

    public abstract void writeEndTag(java.lang.String) throws java.io.IOException;

    public abstract void writeEndTag(java.lang.String, java.lang.String) throws java.io.IOException;

    public abstract void writeAttribute(java.lang.String, java.lang.String) throws java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract void writeAttribute(java.lang.String, char[], int, int) throws java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract void writeAttribute(java.lang.String, java.lang.String, java.lang.String) throws java.io.IOException, javax.xml.stream.XMLStreamException;

    public abstract void writeAttribute(java.lang.String, java.lang.String, char[], int, int) throws java.io.IOException, javax.xml.stream.XMLStreamException;

    protected abstract int getOutputPtr();

    public int getRow()
    {
        com.ctc.wstx.sw.XmlWriter r0;
        int $i0;

        r0 := @this: com.ctc.wstx.sw.XmlWriter;

        $i0 = r0.<com.ctc.wstx.sw.XmlWriter: int mLocRowNr>;

        return $i0;
    }

    public int getColumn()
    {
        com.ctc.wstx.sw.XmlWriter r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.ctc.wstx.sw.XmlWriter;

        $i0 = virtualinvoke r0.<com.ctc.wstx.sw.XmlWriter: int getOutputPtr()>();

        $i1 = r0.<com.ctc.wstx.sw.XmlWriter: int mLocRowStartOffset>;

        $i2 = $i0 - $i1;

        $i3 = $i2 + 1;

        return $i3;
    }

    public int getAbsOffset()
    {
        com.ctc.wstx.sw.XmlWriter r0;
        int $i0, $i1, $i2;

        r0 := @this: com.ctc.wstx.sw.XmlWriter;

        $i0 = r0.<com.ctc.wstx.sw.XmlWriter: int mLocPastChars>;

        $i1 = virtualinvoke r0.<com.ctc.wstx.sw.XmlWriter: int getOutputPtr()>();

        $i2 = $i0 + $i1;

        return $i2;
    }

    public final java.io.Writer wrapAsRawWriter()
    {
        com.ctc.wstx.sw.XmlWriter r0;
        com.ctc.wstx.sw.XmlWriterWrapper $r1, $r2, $r3;

        r0 := @this: com.ctc.wstx.sw.XmlWriter;

        $r1 = r0.<com.ctc.wstx.sw.XmlWriter: com.ctc.wstx.sw.XmlWriterWrapper mRawWrapper>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.ctc.wstx.sw.XmlWriterWrapper: com.ctc.wstx.sw.XmlWriterWrapper wrapWriteRaw(com.ctc.wstx.sw.XmlWriter)>(r0);

        r0.<com.ctc.wstx.sw.XmlWriter: com.ctc.wstx.sw.XmlWriterWrapper mRawWrapper> = $r3;

     label1:
        $r2 = r0.<com.ctc.wstx.sw.XmlWriter: com.ctc.wstx.sw.XmlWriterWrapper mRawWrapper>;

        return $r2;
    }

    public final java.io.Writer wrapAsTextWriter()
    {
        com.ctc.wstx.sw.XmlWriter r0;
        com.ctc.wstx.sw.XmlWriterWrapper $r1, $r2, $r3;

        r0 := @this: com.ctc.wstx.sw.XmlWriter;

        $r1 = r0.<com.ctc.wstx.sw.XmlWriter: com.ctc.wstx.sw.XmlWriterWrapper mTextWrapper>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <com.ctc.wstx.sw.XmlWriterWrapper: com.ctc.wstx.sw.XmlWriterWrapper wrapWriteCharacters(com.ctc.wstx.sw.XmlWriter)>(r0);

        r0.<com.ctc.wstx.sw.XmlWriter: com.ctc.wstx.sw.XmlWriterWrapper mTextWrapper> = $r3;

     label1:
        $r2 = r0.<com.ctc.wstx.sw.XmlWriter: com.ctc.wstx.sw.XmlWriterWrapper mTextWrapper>;

        return $r2;
    }

    public final void verifyNameValidity(java.lang.String, boolean) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter r1;
        char $c0, $c1;
        int $i2, $i3;
        java.lang.String r0, $r2, $r3, $r4, $r5, $r6;
        boolean z0, $z1;

        r1 := @this: com.ctc.wstx.sw.XmlWriter;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        if r0 == null goto label1;

        $i2 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i2 != 0 goto label2;

     label1:
        $r2 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_NAME_EMPTY>;

        virtualinvoke r1.<com.ctc.wstx.sw.XmlWriter: void reportNwfName(java.lang.String)>($r2);

     label2:
        $z1 = r1.<com.ctc.wstx.sw.XmlWriter: boolean mXml11>;

        $i3 = staticinvoke <com.ctc.wstx.io.WstxInputData: int findIllegalNameChar(java.lang.String,boolean,boolean)>(r0, z0, $z1);

        if $i3 < 0 goto label4;

        if $i3 != 0 goto label3;

        $r5 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_NAME_ILLEGAL_FIRST_CHAR>;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $r6 = staticinvoke <com.ctc.wstx.io.WstxInputData: java.lang.String getCharDesc(char)>($c1);

        virtualinvoke r1.<com.ctc.wstx.sw.XmlWriter: void reportNwfName(java.lang.String,java.lang.Object)>($r5, $r6);

     label3:
        $r3 = <com.ctc.wstx.cfg.ErrorConsts: java.lang.String WERR_NAME_ILLEGAL_CHAR>;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        $r4 = staticinvoke <com.ctc.wstx.io.WstxInputData: java.lang.String getCharDesc(char)>($c0);

        virtualinvoke r1.<com.ctc.wstx.sw.XmlWriter: void reportNwfName(java.lang.String,java.lang.Object)>($r3, $r4);

     label4:
        return;
    }

    protected void reportNwfName(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter r0;
        java.lang.String r1;

        r0 := @this: com.ctc.wstx.sw.XmlWriter;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.XmlWriter: void throwOutputError(java.lang.String)>(r1);

        return;
    }

    protected void reportNwfName(java.lang.String, java.lang.Object) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter r0;
        java.lang.Object r2;
        java.lang.String r1;

        r0 := @this: com.ctc.wstx.sw.XmlWriter;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        virtualinvoke r0.<com.ctc.wstx.sw.XmlWriter: void throwOutputError(java.lang.String,java.lang.Object)>(r1, r2);

        return;
    }

    protected void reportNwfContent(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter r0;
        java.lang.String r1;

        r0 := @this: com.ctc.wstx.sw.XmlWriter;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.ctc.wstx.sw.XmlWriter: void throwOutputError(java.lang.String)>(r1);

        return;
    }

    protected void throwOutputError(java.lang.String) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter r0;
        javax.xml.stream.XMLStreamException $r1;
        com.ctc.wstx.exc.WstxIOException $r4;
        java.io.IOException $r3;
        java.lang.String r2;

        r0 := @this: com.ctc.wstx.sw.XmlWriter;

        r2 := @parameter0: java.lang.String;

     label1:
        virtualinvoke r0.<com.ctc.wstx.sw.XmlWriter: void flush()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.ctc.wstx.exc.WstxIOException;

        specialinvoke $r4.<com.ctc.wstx.exc.WstxIOException: void <init>(java.io.IOException)>($r3);

        throw $r4;

     label4:
        $r1 = new javax.xml.stream.XMLStreamException;

        specialinvoke $r1.<javax.xml.stream.XMLStreamException: void <init>(java.lang.String)>(r2);

        throw $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    protected void throwOutputError(java.lang.String, java.lang.Object) throws javax.xml.stream.XMLStreamException
    {
        com.ctc.wstx.sw.XmlWriter r4;
        java.lang.Object[] $r1;
        java.lang.Object r2;
        java.lang.String r0, $r3;

        r4 := @this: com.ctc.wstx.sw.XmlWriter;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Object;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = r2;

        $r3 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, $r1);

        virtualinvoke r4.<com.ctc.wstx.sw.XmlWriter: void throwOutputError(java.lang.String)>($r3);

        return;
    }

    protected void throwInvalidChar(int) throws java.io.IOException
    {
        boolean $z0;
        com.ctc.wstx.sw.XmlWriter r0;
        java.lang.StringBuffer $r2, $r4, $r5, $r9, $r10, $r13, $r15, $r16, $r21, $r23, $r24, $r29, $r30, $r32, $r35;
        int i0, $i2, $i4;
        java.lang.String $r3, $r6, $r14, $r17, $r22, $r25, r27;
        java.io.IOException $r28, $r31, $r33, $r34, $r36;

        r0 := @this: com.ctc.wstx.sw.XmlWriter;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.ctc.wstx.sw.XmlWriter: void flush()>();

        if i0 != 0 goto label1;

        $r28 = new java.io.IOException;

        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>("Invalid null character in text to output");

        throw $r28;

     label1:
        if i0 < 32 goto label2;

        if i0 < 127 goto label4;

        if i0 > 159 goto label4;

     label2:
        $r29 = new java.lang.StringBuffer;

        specialinvoke $r29.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r29.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid white space character (0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") in text to output");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        r27 = $r6;

        $z0 = r0.<com.ctc.wstx.sw.XmlWriter: boolean mXml11>;

        if $z0 == 0 goto label3;

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r9 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" (can only be output using character entity)");

        r27 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        $r31 = new java.io.IOException;

        specialinvoke $r31.<java.io.IOException: void <init>(java.lang.String)>(r27);

        throw $r31;

     label4:
        if i0 <= 1114111 goto label5;

        $r33 = new java.io.IOException;

        $r32 = new java.lang.StringBuffer;

        specialinvoke $r32.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Illegal unicode character point (0x");

        $r22 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r23 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") to output; max is 0x10FFFF as per RFC 3629");

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r33.<java.io.IOException: void <init>(java.lang.String)>($r25);

        throw $r33;

     label5:
        $i2 = (int) 55296;

        if i0 < $i2 goto label6;

        $i4 = (int) 57343;

        if i0 > $i4 goto label6;

        $r34 = new java.io.IOException;

        specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String)>("Illegal surrogate pair -- can only be output via character entities, which are not allowed in this content");

        throw $r34;

     label6:
        $r36 = new java.io.IOException;

        $r35 = new java.lang.StringBuffer;

        specialinvoke $r35.<java.lang.StringBuffer: void <init>()>();

        $r13 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Invalid XML character (0x");

        $r14 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r15 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(") in text to output");

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r36.<java.io.IOException: void <init>(java.lang.String)>($r17);

        throw $r36;
    }

    public static void <clinit>()
    {
        <com.ctc.wstx.sw.XmlWriter: char DEFAULT_QUOTE_CHAR> = 34;

        <com.ctc.wstx.sw.XmlWriter: int SURR2_LAST> = 57343;

        <com.ctc.wstx.sw.XmlWriter: int SURR2_FIRST> = 56320;

        <com.ctc.wstx.sw.XmlWriter: int SURR1_LAST> = 56319;

        <com.ctc.wstx.sw.XmlWriter: int SURR1_FIRST> = 55296;

        return;
    }
}
