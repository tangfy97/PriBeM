public class org.eclipse.jdt.internal.compiler.ast.ArrayReference extends org.eclipse.jdt.internal.compiler.ast.Reference
{
    public org.eclipse.jdt.internal.compiler.ast.Expression receiver;
    public org.eclipse.jdt.internal.compiler.ast.Expression position;

    public void <init>(org.eclipse.jdt.internal.compiler.ast.Expression, org.eclipse.jdt.internal.compiler.ast.Expression)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression r1, r2;
        int $i0;
        org.eclipse.jdt.internal.compiler.ast.ArrayReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayReference;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.ast.Expression;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.ast.Expression;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.Reference: void <init>()>();

        r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver> = r1;

        r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression position> = r2;

        $i0 = r1.<org.eclipse.jdt.internal.compiler.ast.Expression: int sourceStart>;

        r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: int sourceStart> = $i0;

        return;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseAssignment(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo, org.eclipse.jdt.internal.compiler.ast.Assignment, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r5, $r7, $r9, $r10;
        org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo $r8;
        org.eclipse.jdt.internal.compiler.ast.Expression $r1, $r6;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r3;
        org.eclipse.jdt.internal.compiler.ast.ArrayReference r4;
        org.eclipse.jdt.internal.compiler.ast.Assignment r0;
        boolean z0;

        r4 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayReference;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r3 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r5 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        r0 := @parameter3: org.eclipse.jdt.internal.compiler.ast.Assignment;

        z0 := @parameter4: boolean;

        $r1 = r0.<org.eclipse.jdt.internal.compiler.ast.Assignment: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        if $r1 != null goto label1;

        $r10 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r2, r3, r5);

        return $r10;

     label1:
        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.Assignment: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r7 = virtualinvoke r4.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r2, r3, r5);

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.flow.FlowInfo: org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo unconditionalInits()>();

        $r9 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r2, r3, $r8);

        return $r9;
    }

    public org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.flow.FlowContext, org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.flow.FlowInfo $r5, $r7, r8;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r4, $r6;
        org.eclipse.jdt.internal.compiler.flow.FlowContext r2;
        org.eclipse.jdt.internal.compiler.ast.ArrayReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayReference;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.flow.FlowContext;

        r8 := @parameter2: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void checkNPE(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r1, r2, r8);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r1, r2, r8);

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression position>;

        $r7 = virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.flow.FlowInfo analyseCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.flow.FlowContext,org.eclipse.jdt.internal.compiler.flow.FlowInfo)>(r1, r2, $r5);

        return $r7;
    }

    public void generateAssignment(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.ast.Assignment, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r4, $r6, $r8, $r11, $r13, $r14;
        int i0, $i1, $i2, $i3;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r10, $r12, $r15;
        boolean $z0, z1;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r9;
        org.eclipse.jdt.internal.compiler.ast.ArrayReference r1;
        org.eclipse.jdt.internal.compiler.ast.Assignment r5;
        org.eclipse.jdt.internal.compiler.ast.CastExpression $r7;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayReference;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r5 := @parameter2: org.eclipse.jdt.internal.compiler.ast.Assignment;

        z1 := @parameter3: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r0, 1);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $z0 = $r4 instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression;

        if $z0 == 0 goto label1;

        $r6 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $r7 = (org.eclipse.jdt.internal.compiler.ast.CastExpression) $r6;

        $r8 = virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.CastExpression: org.eclipse.jdt.internal.compiler.ast.Expression innermostCastedExpression()>();

        $r10 = $r8.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $r9 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding NULL>;

        if $r10 != $r9 goto label1;

        $r11 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $r12 = $r11.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void checkcast(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r12);

     label1:
        $i2 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i2);

        $r13 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression position>;

        virtualinvoke $r13.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r0, 1);

        $r14 = r5.<org.eclipse.jdt.internal.compiler.ast.Assignment: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r0, 1);

        $r15 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $i3 = $r15.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void arrayAtPut(int,boolean)>($i3, z1);

        if z1 == 0 goto label2;

        $i1 = r5.<org.eclipse.jdt.internal.compiler.ast.Assignment: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i1);

     label2:
        return;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r4, $r7, $r9, $r12, $r14;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r5, $r6, $r11, $r13, $r15;
        boolean $z0, z1, z2, $z4, $z5;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r10;
        org.eclipse.jdt.internal.compiler.ast.ArrayReference r1;
        org.eclipse.jdt.internal.compiler.ast.CastExpression $r8;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayReference;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z1 := @parameter2: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r0, 1);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $z0 = $r4 instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression;

        if $z0 == 0 goto label01;

        $r7 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $r8 = (org.eclipse.jdt.internal.compiler.ast.CastExpression) $r7;

        $r9 = virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.ast.CastExpression: org.eclipse.jdt.internal.compiler.ast.Expression innermostCastedExpression()>();

        $r11 = $r9.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $r10 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding NULL>;

        if $r11 != $r10 goto label01;

        $r12 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $r13 = $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void checkcast(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r13);

     label01:
        $r14 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression position>;

        virtualinvoke $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r2, r0, 1);

        $r15 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $i5 = $r15.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void arrayAt(int)>($i5);

        if z1 == 0 goto label02;

        $i4 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i4);

        goto label10;

     label02:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: int implicitConversion>;

        $i2 = $i1 & 1024;

        if $i2 == 0 goto label03;

        $z5 = 1;

        $z4 = 1;

        goto label04;

     label03:
        $z5 = 0;

        $z4 = 0;

     label04:
        z2 = $z4;

        if $z5 == 0 goto label05;

        $i3 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i3);

     label05:
        if z2 == 0 goto label06;

        $r6 = virtualinvoke r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding postConversionType(org.eclipse.jdt.internal.compiler.lookup.Scope)>(r2);

        $i6 = $r6.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        goto label07;

     label06:
        $r5 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $i6 = $r5.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

     label07:
        tableswitch($i6)
        {
            case 7: goto label08;
            case 8: goto label08;
            default: goto label09;
        };

     label08:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void pop2()>();

        goto label10;

     label09:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void pop()>();

     label10:
        $i7 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i7);

        return;
    }

    public void generateCompoundAssignment(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.ast.Expression, int, int, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        org.eclipse.jdt.internal.compiler.ast.IntLiteral $r6;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r4, r5, $r8, $r10, $r13, $r15;
        int $i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r12, $r14, $r16, $r17;
        boolean $z0, z1;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r2;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r11;
        org.eclipse.jdt.internal.compiler.impl.Constant $r7;
        org.eclipse.jdt.internal.compiler.ast.ArrayReference r0;
        org.eclipse.jdt.internal.compiler.ast.CastExpression $r9;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayReference;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r5 := @parameter2: org.eclipse.jdt.internal.compiler.ast.Expression;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        z1 := @parameter5: boolean;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r1, r2, 1);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $z0 = $r4 instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression;

        if $z0 == 0 goto label1;

        $r8 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $r9 = (org.eclipse.jdt.internal.compiler.ast.CastExpression) $r8;

        $r10 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.ast.CastExpression: org.eclipse.jdt.internal.compiler.ast.Expression innermostCastedExpression()>();

        $r12 = $r10.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $r11 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding NULL>;

        if $r12 != $r11 goto label1;

        $r13 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $r14 = $r13.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void checkcast(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r14);

     label1:
        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression position>;

        virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r1, r2, 1);

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dup2()>();

        $r16 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $i4 = $r16.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void arrayAt(int)>($i4);

        $i5 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: int implicitConversion>;

        $i6 = $i5 & 255;

        $i7 = $i6 >> 4;

        lookupswitch($i7)
        {
            case 0: goto label2;
            case 1: goto label2;
            case 11: goto label2;
            default: goto label3;
        };

     label2:
        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateStringConcatenationAppend(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.ast.Expression,org.eclipse.jdt.internal.compiler.ast.Expression)>(r1, null, r5);

        goto label6;

     label3:
        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: int implicitConversion>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i0);

        $r6 = <org.eclipse.jdt.internal.compiler.ast.IntLiteral: org.eclipse.jdt.internal.compiler.ast.IntLiteral One>;

        if r5 != $r6 goto label4;

        $r7 = r5.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i3 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: int implicitConversion>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateConstant(org.eclipse.jdt.internal.compiler.impl.Constant,int)>($r7, $i3);

        goto label5;

     label4:
        virtualinvoke r5.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r1, r2, 1);

     label5:
        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void sendOperator(int,int)>(i1, $i7);

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>(i2);

     label6:
        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $i8 = $r17.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void arrayAtPut(int,boolean)>($i8, z1);

        return;
    }

    public void generatePostIncrement(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.ast.CompoundAssignment, boolean)
    {
        org.eclipse.jdt.internal.compiler.ast.CompoundAssignment r5;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r4, $r10, $r12, $r15, $r17, $r19;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r7, $r9, $r14, $r16, $r18, $r21;
        boolean $z0, z1;
        org.eclipse.jdt.internal.compiler.impl.Constant $r20;
        org.eclipse.jdt.internal.compiler.ast.ArrayReference r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r2;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r6, $r8, $r13;
        org.eclipse.jdt.internal.compiler.ast.CastExpression $r11;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayReference;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r5 := @parameter2: org.eclipse.jdt.internal.compiler.ast.CompoundAssignment;

        z1 := @parameter3: boolean;

        $r3 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r1, r2, 1);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $z0 = $r4 instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression;

        if $z0 == 0 goto label1;

        $r10 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $r11 = (org.eclipse.jdt.internal.compiler.ast.CastExpression) $r10;

        $r12 = virtualinvoke $r11.<org.eclipse.jdt.internal.compiler.ast.CastExpression: org.eclipse.jdt.internal.compiler.ast.Expression innermostCastedExpression()>();

        $r14 = $r12.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $r13 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding NULL>;

        if $r14 != $r13 goto label1;

        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $r16 = $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void checkcast(org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>($r16);

     label1:
        $r17 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression position>;

        virtualinvoke $r17.<org.eclipse.jdt.internal.compiler.ast.Expression: void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.codegen.CodeStream,boolean)>(r1, r2, 1);

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dup2()>();

        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $i0 = $r18.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void arrayAt(int)>($i0);

        if z1 == 0 goto label4;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $r6 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding LONG>;

        if $r7 == $r6 goto label2;

        $r9 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $r8 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding DOUBLE>;

        if $r9 != $r8 goto label3;

     label2:
        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dup2_x2()>();

        goto label4;

     label3:
        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void dup_x2()>();

     label4:
        $i1 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: int implicitConversion>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i1);

        $r19 = r5.<org.eclipse.jdt.internal.compiler.ast.CompoundAssignment: org.eclipse.jdt.internal.compiler.ast.Expression expression>;

        $r20 = $r19.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: int implicitConversion>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateConstant(org.eclipse.jdt.internal.compiler.impl.Constant,int)>($r20, $i2);

        $i3 = r5.<org.eclipse.jdt.internal.compiler.ast.CompoundAssignment: int operator>;

        $i4 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: int implicitConversion>;

        $i5 = $i4 & 15;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void sendOperator(int,int)>($i3, $i5);

        $i6 = r5.<org.eclipse.jdt.internal.compiler.ast.CompoundAssignment: int preAssignImplicitConversion>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateImplicitConversion(int)>($i6);

        $r21 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        $i7 = $r21.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: int id>;

        virtualinvoke r2.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void arrayAtPut(int,boolean)>($i7, 0);

        return;
    }

    public int nullStatus(org.eclipse.jdt.internal.compiler.flow.FlowInfo)
    {
        org.eclipse.jdt.internal.compiler.flow.FlowInfo r1;
        org.eclipse.jdt.internal.compiler.ast.ArrayReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayReference;

        r1 := @parameter0: org.eclipse.jdt.internal.compiler.flow.FlowInfo;

        return 0;
    }

    public java.lang.StringBuffer printExpression(int, java.lang.StringBuffer)
    {
        org.eclipse.jdt.internal.compiler.ast.Expression $r2, $r4;
        java.lang.StringBuffer r1, $r3, $r5, $r6;
        int i0;
        org.eclipse.jdt.internal.compiler.ast.ArrayReference r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayReference;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.StringBuffer;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $r3 = virtualinvoke $r2.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r1);

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91);

        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression position>;

        $r5 = virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: java.lang.StringBuffer printExpression(int,java.lang.StringBuffer)>(0, r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93);

        return $r6;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r3;
        org.eclipse.jdt.internal.compiler.problem.ProblemReporter $r8;
        org.eclipse.jdt.internal.compiler.ast.Expression $r2, $r6, $r7, $r11, $r13, $r14, $r15, $r18;
        org.eclipse.jdt.internal.compiler.lookup.TypeBinding $r4, $r10, $r16, $r17, $r20;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2;
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r5, $r19;
        org.eclipse.jdt.internal.compiler.lookup.ArrayBinding $r9;
        org.eclipse.jdt.internal.compiler.impl.Constant $r1;
        org.eclipse.jdt.internal.compiler.ast.ArrayReference r0;
        org.eclipse.jdt.internal.compiler.ast.CastExpression $r12;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayReference;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r1 = <org.eclipse.jdt.internal.compiler.impl.Constant: org.eclipse.jdt.internal.compiler.impl.Constant NotAConstant>;

        r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r1;

        $r2 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $z0 = $r2 instanceof org.eclipse.jdt.internal.compiler.ast.CastExpression;

        if $z0 == 0 goto label1;

        $r11 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $r12 = (org.eclipse.jdt.internal.compiler.ast.CastExpression) $r11;

        $r13 = virtualinvoke $r12.<org.eclipse.jdt.internal.compiler.ast.CastExpression: org.eclipse.jdt.internal.compiler.ast.Expression innermostCastedExpression()>();

        $z2 = $r13 instanceof org.eclipse.jdt.internal.compiler.ast.NullLiteral;

        if $z2 == 0 goto label1;

        $r14 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $i3 = $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits>;

        $i4 = $i3 | 32;

        $r14.<org.eclipse.jdt.internal.compiler.ast.Expression: int bits> = $i4;

     label1:
        $r15 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        $r16 = virtualinvoke $r15.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r3);

        if $r16 == null goto label5;

        $r7 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        virtualinvoke $r7.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r3, $r16, $r16);

        $z1 = virtualinvoke $r16.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: boolean isArrayType()>();

        if $z1 == 0 goto label4;

        $r9 = (org.eclipse.jdt.internal.compiler.lookup.ArrayBinding) $r16;

        $r10 = virtualinvoke $r9.<org.eclipse.jdt.internal.compiler.lookup.ArrayBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding elementsType()>();

        $i0 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: int bits>;

        $i1 = $i0 & 8192;

        if $i1 != 0 goto label2;

        $i2 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: int sourceEnd>;

        $r17 = virtualinvoke $r10.<org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.TypeBinding capture(org.eclipse.jdt.internal.compiler.lookup.Scope,int)>(r3, $i2);

        goto label3;

     label2:
        $r17 = $r10;

     label3:
        r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType> = $r17;

        goto label5;

     label4:
        $r8 = virtualinvoke r3.<org.eclipse.jdt.internal.compiler.lookup.BlockScope: org.eclipse.jdt.internal.compiler.problem.ProblemReporter problemReporter()>();

        virtualinvoke $r8.<org.eclipse.jdt.internal.compiler.problem.ProblemReporter: void referenceMustBeArrayTypeAt(org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.ast.ArrayReference)>($r16, r0);

     label5:
        $r18 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression position>;

        $r19 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding INT>;

        $r20 = virtualinvoke $r18.<org.eclipse.jdt.internal.compiler.ast.Expression: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolveTypeExpecting(org.eclipse.jdt.internal.compiler.lookup.BlockScope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r3, $r19);

        if $r20 == null goto label6;

        $r6 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression position>;

        $r5 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding INT>;

        virtualinvoke $r6.<org.eclipse.jdt.internal.compiler.ast.Expression: void computeConversion(org.eclipse.jdt.internal.compiler.lookup.Scope,org.eclipse.jdt.internal.compiler.lookup.TypeBinding,org.eclipse.jdt.internal.compiler.lookup.TypeBinding)>(r3, $r5, $r20);

     label6:
        $r4 = r0.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.lookup.TypeBinding resolvedType>;

        return $r4;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;
        org.eclipse.jdt.internal.compiler.ast.Expression $r3, $r4;
        org.eclipse.jdt.internal.compiler.ast.ArrayReference r1;
        boolean $z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.ArrayReference;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $z0 = virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.ArrayReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        if $z0 == 0 goto label1;

        $r3 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression receiver>;

        virtualinvoke $r3.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

        $r4 = r1.<org.eclipse.jdt.internal.compiler.ast.ArrayReference: org.eclipse.jdt.internal.compiler.ast.Expression position>;

        virtualinvoke $r4.<org.eclipse.jdt.internal.compiler.ast.Expression: void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r0, r2);

     label1:
        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.ArrayReference,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
