public final class org.apache.lucene.analysis.standard.StandardTokenizer extends org.apache.lucene.analysis.Tokenizer
{
    private org.apache.lucene.analysis.standard.StandardTokenizerInterface scanner;
    public static final int ALPHANUM;
    public static final int APOSTROPHE;
    public static final int ACRONYM;
    public static final int COMPANY;
    public static final int EMAIL;
    public static final int HOST;
    public static final int NUM;
    public static final int CJ;
    public static final int ACRONYM_DEP;
    public static final int SOUTHEAST_ASIAN;
    public static final int IDEOGRAPHIC;
    public static final int HIRAGANA;
    public static final int KATAKANA;
    public static final int HANGUL;
    public static final java.lang.String[] TOKEN_TYPES;
    private int maxTokenLength;
    private final org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt;
    private final org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt;
    private final org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt;
    private final org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAtt;

    public void setMaxTokenLength(int)
    {
        int i0;
        org.apache.lucene.analysis.standard.StandardTokenizer r0;

        r0 := @this: org.apache.lucene.analysis.standard.StandardTokenizer;

        i0 := @parameter0: int;

        r0.<org.apache.lucene.analysis.standard.StandardTokenizer: int maxTokenLength> = i0;

        return;
    }

    public int getMaxTokenLength()
    {
        int $i0;
        org.apache.lucene.analysis.standard.StandardTokenizer r0;

        r0 := @this: org.apache.lucene.analysis.standard.StandardTokenizer;

        $i0 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: int maxTokenLength>;

        return $i0;
    }

    public void <init>(org.apache.lucene.util.Version, java.io.Reader)
    {
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r3;
        org.apache.lucene.analysis.standard.StandardTokenizer r0;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r7;
        java.io.Reader r1;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r5;
        org.apache.lucene.util.Version r10;
        org.apache.lucene.util.Attribute $r2, $r4, $r6, $r8;
        org.apache.lucene.analysis.tokenattributes.TypeAttribute $r9;

        r0 := @this: org.apache.lucene.analysis.standard.StandardTokenizer;

        r10 := @parameter0: org.apache.lucene.util.Version;

        r1 := @parameter1: java.io.Reader;

        specialinvoke r0.<org.apache.lucene.analysis.Tokenizer: void <init>(java.io.Reader)>(r1);

        r0.<org.apache.lucene.analysis.standard.StandardTokenizer: int maxTokenLength> = 255;

        $r2 = virtualinvoke r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        $r3 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r2;

        r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt> = $r3;

        $r4 = virtualinvoke r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/OffsetAttribute;");

        $r5 = (org.apache.lucene.analysis.tokenattributes.OffsetAttribute) $r4;

        r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt> = $r5;

        $r6 = virtualinvoke r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;");

        $r7 = (org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute) $r6;

        r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt> = $r7;

        $r8 = virtualinvoke r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/TypeAttribute;");

        $r9 = (org.apache.lucene.analysis.tokenattributes.TypeAttribute) $r8;

        r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAtt> = $r9;

        specialinvoke r0.<org.apache.lucene.analysis.standard.StandardTokenizer: void init(org.apache.lucene.util.Version)>(r10);

        return;
    }

    public void <init>(org.apache.lucene.util.Version, org.apache.lucene.util.AttributeSource$AttributeFactory, java.io.Reader)
    {
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r4;
        org.apache.lucene.analysis.standard.StandardTokenizer r0;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r8;
        org.apache.lucene.util.AttributeSource$AttributeFactory r1;
        java.io.Reader r2;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r6;
        org.apache.lucene.util.Version r11;
        org.apache.lucene.util.Attribute $r3, $r5, $r7, $r9;
        org.apache.lucene.analysis.tokenattributes.TypeAttribute $r10;

        r0 := @this: org.apache.lucene.analysis.standard.StandardTokenizer;

        r11 := @parameter0: org.apache.lucene.util.Version;

        r1 := @parameter1: org.apache.lucene.util.AttributeSource$AttributeFactory;

        r2 := @parameter2: java.io.Reader;

        specialinvoke r0.<org.apache.lucene.analysis.Tokenizer: void <init>(org.apache.lucene.util.AttributeSource$AttributeFactory,java.io.Reader)>(r1, r2);

        r0.<org.apache.lucene.analysis.standard.StandardTokenizer: int maxTokenLength> = 255;

        $r3 = virtualinvoke r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/CharTermAttribute;");

        $r4 = (org.apache.lucene.analysis.tokenattributes.CharTermAttribute) $r3;

        r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt> = $r4;

        $r5 = virtualinvoke r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/OffsetAttribute;");

        $r6 = (org.apache.lucene.analysis.tokenattributes.OffsetAttribute) $r5;

        r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt> = $r6;

        $r7 = virtualinvoke r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/PositionIncrementAttribute;");

        $r8 = (org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute) $r7;

        r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt> = $r8;

        $r9 = virtualinvoke r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.util.Attribute addAttribute(java.lang.Class)>(class "Lorg/apache/lucene/analysis/tokenattributes/TypeAttribute;");

        $r10 = (org.apache.lucene.analysis.tokenattributes.TypeAttribute) $r9;

        r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAtt> = $r10;

        specialinvoke r0.<org.apache.lucene.analysis.standard.StandardTokenizer: void init(org.apache.lucene.util.Version)>(r11);

        return;
    }

    private final void init(org.apache.lucene.util.Version)
    {
        org.apache.lucene.analysis.standard.StandardTokenizer r4;
        org.apache.lucene.util.Version r0, $r1, $r2, $r3;
        org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31 $r6;
        org.apache.lucene.analysis.standard.ClassicTokenizerImpl $r5;
        org.apache.lucene.analysis.standard.std34.StandardTokenizerImpl34 $r7;
        org.apache.lucene.analysis.standard.StandardTokenizerImpl $r8;
        boolean $z0, $z1, $z2;

        r4 := @this: org.apache.lucene.analysis.standard.StandardTokenizer;

        r0 := @parameter0: org.apache.lucene.util.Version;

        $r1 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_40>;

        $z0 = virtualinvoke r0.<org.apache.lucene.util.Version: boolean onOrAfter(org.apache.lucene.util.Version)>($r1);

        if $z0 == 0 goto label1;

        $r8 = new org.apache.lucene.analysis.standard.StandardTokenizerImpl;

        specialinvoke $r8.<org.apache.lucene.analysis.standard.StandardTokenizerImpl: void <init>(java.io.Reader)>(null);

        r4.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.standard.StandardTokenizerInterface scanner> = $r8;

        goto label4;

     label1:
        $r2 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_34>;

        $z1 = virtualinvoke r0.<org.apache.lucene.util.Version: boolean onOrAfter(org.apache.lucene.util.Version)>($r2);

        if $z1 == 0 goto label2;

        $r7 = new org.apache.lucene.analysis.standard.std34.StandardTokenizerImpl34;

        specialinvoke $r7.<org.apache.lucene.analysis.standard.std34.StandardTokenizerImpl34: void <init>(java.io.Reader)>(null);

        r4.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.standard.StandardTokenizerInterface scanner> = $r7;

        goto label4;

     label2:
        $r3 = <org.apache.lucene.util.Version: org.apache.lucene.util.Version LUCENE_31>;

        $z2 = virtualinvoke r0.<org.apache.lucene.util.Version: boolean onOrAfter(org.apache.lucene.util.Version)>($r3);

        if $z2 == 0 goto label3;

        $r6 = new org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31;

        specialinvoke $r6.<org.apache.lucene.analysis.standard.std31.StandardTokenizerImpl31: void <init>(java.io.Reader)>(null);

        r4.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.standard.StandardTokenizerInterface scanner> = $r6;

        goto label4;

     label3:
        $r5 = new org.apache.lucene.analysis.standard.ClassicTokenizerImpl;

        specialinvoke $r5.<org.apache.lucene.analysis.standard.ClassicTokenizerImpl: void <init>(java.io.Reader)>(null);

        r4.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.standard.StandardTokenizerInterface scanner> = $r5;

     label4:
        return;
    }

    public final boolean incrementToken() throws java.io.IOException
    {
        org.apache.lucene.analysis.standard.StandardTokenizer r0;
        java.lang.String[] $r9, $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i12;
        java.lang.String $r10, $r13;
        org.apache.lucene.analysis.tokenattributes.CharTermAttribute $r4, $r8, $r15, $r16;
        org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute $r3;
        org.apache.lucene.analysis.standard.StandardTokenizerInterface $r1, $r2, $r5, $r6;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r7;
        org.apache.lucene.analysis.tokenattributes.TypeAttribute $r11, $r14;

        r0 := @this: org.apache.lucene.analysis.standard.StandardTokenizer;

        virtualinvoke r0.<org.apache.lucene.analysis.standard.StandardTokenizer: void clearAttributes()>();

        i10 = 1;

     label1:
        $r1 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.standard.StandardTokenizerInterface scanner>;

        $i0 = interfaceinvoke $r1.<org.apache.lucene.analysis.standard.StandardTokenizerInterface: int getNextToken()>();

        $i12 = (int) -1;

        if $i0 != $i12 goto label2;

        return 0;

     label2:
        $r2 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.standard.StandardTokenizerInterface scanner>;

        $i1 = interfaceinvoke $r2.<org.apache.lucene.analysis.standard.StandardTokenizerInterface: int yylength()>();

        $i2 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: int maxTokenLength>;

        if $i1 > $i2 goto label5;

        $r3 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute posIncrAtt>;

        interfaceinvoke $r3.<org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute: void setPositionIncrement(int)>(i10);

        $r5 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.standard.StandardTokenizerInterface scanner>;

        $r4 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        interfaceinvoke $r5.<org.apache.lucene.analysis.standard.StandardTokenizerInterface: void getText(org.apache.lucene.analysis.tokenattributes.CharTermAttribute)>($r4);

        $r6 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.standard.StandardTokenizerInterface scanner>;

        $i3 = interfaceinvoke $r6.<org.apache.lucene.analysis.standard.StandardTokenizerInterface: int yychar()>();

        $r7 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt>;

        $i4 = virtualinvoke r0.<org.apache.lucene.analysis.standard.StandardTokenizer: int correctOffset(int)>($i3);

        $r8 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $i5 = interfaceinvoke $r8.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: int length()>();

        $i6 = $i3 + $i5;

        $i7 = virtualinvoke r0.<org.apache.lucene.analysis.standard.StandardTokenizer: int correctOffset(int)>($i6);

        interfaceinvoke $r7.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>($i4, $i7);

        if $i0 != 8 goto label3;

        $r14 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAtt>;

        $r12 = <org.apache.lucene.analysis.standard.StandardTokenizer: java.lang.String[] TOKEN_TYPES>;

        $r13 = $r12[5];

        interfaceinvoke $r14.<org.apache.lucene.analysis.tokenattributes.TypeAttribute: void setType(java.lang.String)>($r13);

        $r16 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $r15 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.CharTermAttribute termAtt>;

        $i8 = interfaceinvoke $r15.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: int length()>();

        $i9 = $i8 - 1;

        interfaceinvoke $r16.<org.apache.lucene.analysis.tokenattributes.CharTermAttribute: org.apache.lucene.analysis.tokenattributes.CharTermAttribute setLength(int)>($i9);

        goto label4;

     label3:
        $r11 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.TypeAttribute typeAtt>;

        $r9 = <org.apache.lucene.analysis.standard.StandardTokenizer: java.lang.String[] TOKEN_TYPES>;

        $r10 = $r9[$i0];

        interfaceinvoke $r11.<org.apache.lucene.analysis.tokenattributes.TypeAttribute: void setType(java.lang.String)>($r10);

     label4:
        return 1;

     label5:
        i10 = i10 + 1;

        goto label1;
    }

    public final void end()
    {
        org.apache.lucene.analysis.standard.StandardTokenizer r0;
        org.apache.lucene.analysis.standard.StandardTokenizerInterface $r1, $r2;
        org.apache.lucene.analysis.tokenattributes.OffsetAttribute $r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.apache.lucene.analysis.standard.StandardTokenizer;

        $r1 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.standard.StandardTokenizerInterface scanner>;

        $i0 = interfaceinvoke $r1.<org.apache.lucene.analysis.standard.StandardTokenizerInterface: int yychar()>();

        $r2 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.standard.StandardTokenizerInterface scanner>;

        $i1 = interfaceinvoke $r2.<org.apache.lucene.analysis.standard.StandardTokenizerInterface: int yylength()>();

        $i2 = $i0 + $i1;

        $i3 = virtualinvoke r0.<org.apache.lucene.analysis.standard.StandardTokenizer: int correctOffset(int)>($i2);

        $r3 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.tokenattributes.OffsetAttribute offsetAtt>;

        interfaceinvoke $r3.<org.apache.lucene.analysis.tokenattributes.OffsetAttribute: void setOffset(int,int)>($i3, $i3);

        return;
    }

    public void reset() throws java.io.IOException
    {
        org.apache.lucene.analysis.standard.StandardTokenizerInterface $r2;
        java.io.Reader $r1;
        org.apache.lucene.analysis.standard.StandardTokenizer r0;

        r0 := @this: org.apache.lucene.analysis.standard.StandardTokenizer;

        $r2 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: org.apache.lucene.analysis.standard.StandardTokenizerInterface scanner>;

        $r1 = r0.<org.apache.lucene.analysis.standard.StandardTokenizer: java.io.Reader input>;

        interfaceinvoke $r2.<org.apache.lucene.analysis.standard.StandardTokenizerInterface: void yyreset(java.io.Reader)>($r1);

        return;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;

        <org.apache.lucene.analysis.standard.StandardTokenizer: int HANGUL> = 13;

        <org.apache.lucene.analysis.standard.StandardTokenizer: int KATAKANA> = 12;

        <org.apache.lucene.analysis.standard.StandardTokenizer: int HIRAGANA> = 11;

        <org.apache.lucene.analysis.standard.StandardTokenizer: int IDEOGRAPHIC> = 10;

        <org.apache.lucene.analysis.standard.StandardTokenizer: int SOUTHEAST_ASIAN> = 9;

        <org.apache.lucene.analysis.standard.StandardTokenizer: int ACRONYM_DEP> = 8;

        <org.apache.lucene.analysis.standard.StandardTokenizer: int CJ> = 7;

        <org.apache.lucene.analysis.standard.StandardTokenizer: int NUM> = 6;

        <org.apache.lucene.analysis.standard.StandardTokenizer: int HOST> = 5;

        <org.apache.lucene.analysis.standard.StandardTokenizer: int EMAIL> = 4;

        <org.apache.lucene.analysis.standard.StandardTokenizer: int COMPANY> = 3;

        <org.apache.lucene.analysis.standard.StandardTokenizer: int ACRONYM> = 2;

        <org.apache.lucene.analysis.standard.StandardTokenizer: int APOSTROPHE> = 1;

        <org.apache.lucene.analysis.standard.StandardTokenizer: int ALPHANUM> = 0;

        $r0 = newarray (java.lang.String)[14];

        $r0[0] = "<ALPHANUM>";

        $r0[1] = "<APOSTROPHE>";

        $r0[2] = "<ACRONYM>";

        $r0[3] = "<COMPANY>";

        $r0[4] = "<EMAIL>";

        $r0[5] = "<HOST>";

        $r0[6] = "<NUM>";

        $r0[7] = "<CJ>";

        $r0[8] = "<ACRONYM_DEP>";

        $r0[9] = "<SOUTHEAST_ASIAN>";

        $r0[10] = "<IDEOGRAPHIC>";

        $r0[11] = "<HIRAGANA>";

        $r0[12] = "<KATAKANA>";

        $r0[13] = "<HANGUL>";

        <org.apache.lucene.analysis.standard.StandardTokenizer: java.lang.String[] TOKEN_TYPES> = $r0;

        return;
    }
}
