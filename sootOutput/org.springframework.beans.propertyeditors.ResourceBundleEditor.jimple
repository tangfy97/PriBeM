public class org.springframework.beans.propertyeditors.ResourceBundleEditor extends java.beans.PropertyEditorSupport
{
    public static final java.lang.String BASE_NAME_SEPARATOR;

    public void <init>()
    {
        org.springframework.beans.propertyeditors.ResourceBundleEditor r0;

        r0 := @this: org.springframework.beans.propertyeditors.ResourceBundleEditor;

        specialinvoke r0.<java.beans.PropertyEditorSupport: void <init>()>();

        return;
    }

    public void setAsText(java.lang.String) throws java.lang.IllegalArgumentException
    {
        java.util.ResourceBundle r11, $r12;
        java.util.Locale $r4;
        int $i0, $i1, $i3;
        java.lang.String r0, $r1, $r2, $r3, $r10;
        boolean $z0, $z1;
        org.springframework.beans.propertyeditors.ResourceBundleEditor r5;
        java.lang.IllegalArgumentException $r14;
        java.lang.StringBuilder $r8, $r9, $r13;

        r5 := @this: org.springframework.beans.propertyeditors.ResourceBundleEditor;

        r0 := @parameter0: java.lang.String;

        staticinvoke <org.springframework.util.Assert: void hasText(java.lang.String,java.lang.String)>(r0, "\'text\' must not be empty");

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>();

        $i0 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String)>("_");

        $i3 = (int) -1;

        if $i0 != $i3 goto label1;

        r11 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>($r1);

        goto label5;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $z0 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r2);

        if $z0 != 0 goto label2;

        $r14 = new java.lang.IllegalArgumentException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Bad ResourceBundle name : received \'");

        $r8 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' as argument to \'setAsText(String value)\'.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r14;

     label2:
        $i1 = $i0 + 1;

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i1);

        $r4 = staticinvoke <org.springframework.util.StringUtils: java.util.Locale parseLocaleString(java.lang.String)>($r3);

        $z1 = staticinvoke <org.springframework.util.StringUtils: boolean hasText(java.lang.String)>($r3);

        if $z1 == 0 goto label3;

        $r12 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>($r2, $r4);

        goto label4;

     label3:
        $r12 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>($r2);

     label4:
        r11 = $r12;

     label5:
        virtualinvoke r5.<org.springframework.beans.propertyeditors.ResourceBundleEditor: void setValue(java.lang.Object)>(r11);

        return;
    }

    public static void <clinit>()
    {
        <org.springframework.beans.propertyeditors.ResourceBundleEditor: java.lang.String BASE_NAME_SEPARATOR> = "_";

        return;
    }
}
