public class org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker extends java.lang.Object implements org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener
{
    private final org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel opChannel;
    private final org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink listener;
    private boolean receptionIsPaused;
    private boolean isShutdown;
    private final java.lang.Runnable resumeCallback;

    public static void start(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel, org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink r2;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel r0;
        org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker $r1;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel;

        r2 := @parameter1: org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel,org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink)>(r0, r2);

        interfaceinvoke r0.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel: void setListener(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel$Listener)>($r1);

        return;
    }

    public void <init>(org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel, org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink r3;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel r2;
        org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker$1 $r1;
        org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker;

        r2 := @parameter0: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel;

        r3 := @parameter1: org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: boolean receptionIsPaused> = 0;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: boolean isShutdown> = 0;

        $r1 = new org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker$1;

        specialinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker$1: void <init>(org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker)>(r0);

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: java.lang.Runnable resumeCallback> = $r1;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel opChannel> = r2;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink listener> = r3;

        return;
    }

    public void onOperationReceived()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: boolean receptionIsPaused>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: void receiveLoop()>();

     label1:
        return;
    }

    public void shutdown()
    {
        org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker r0;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: boolean isShutdown> = 1;

        return;
    }

    private void receiveLoop()
    {
        org.waveprotocol.wave.model.operation.wave.WaveletOperation $r5, $r8, r10;
        org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink $r3, $r7;
        java.lang.Runnable $r2;
        org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel $r1, $r4, $r6, $r9;

        r0 := @this: org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: boolean isShutdown>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel opChannel>;

        r10 = interfaceinvoke $r1.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel: org.waveprotocol.wave.model.operation.wave.WaveletOperation peek()>();

     label2:
        if r10 == null goto label8;

        $z1 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: boolean isShutdown>;

        if $z1 != 0 goto label8;

        $r3 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink listener>;

        $r2 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: java.lang.Runnable resumeCallback>;

        $z2 = interfaceinvoke $r3.<org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink: boolean flush(org.waveprotocol.wave.model.operation.Operation,java.lang.Runnable)>(r10, $r2);

        if $z2 != 0 goto label3;

        $z5 = 1;

        goto label4;

     label3:
        $z5 = 0;

     label4:
        r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: boolean receptionIsPaused> = $z5;

        $z3 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: boolean receptionIsPaused>;

        if $z3 == 0 goto label5;

        return;

     label5:
        $r4 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel opChannel>;

        $r5 = interfaceinvoke $r4.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel: org.waveprotocol.wave.model.operation.wave.WaveletOperation peek()>();

        if r10 != $r5 goto label6;

        $r7 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink listener>;

        $r6 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel opChannel>;

        $r8 = interfaceinvoke $r6.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel: org.waveprotocol.wave.model.operation.wave.WaveletOperation receive()>();

        interfaceinvoke $r7.<org.waveprotocol.wave.concurrencycontrol.wave.FlushingOperationSink: void consume(org.waveprotocol.wave.model.operation.Operation)>($r8);

        $z4 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: boolean isShutdown>;

        if $z4 != 0 goto label7;

        $r9 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel opChannel>;

        r10 = interfaceinvoke $r9.<org.waveprotocol.wave.concurrencycontrol.channel.OperationChannel: org.waveprotocol.wave.model.operation.wave.WaveletOperation peek()>();

        goto label7;

     label6:
        r10 = $r5;

     label7:
        goto label2;

     label8:
        return;
    }

    static boolean access$000(org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker r0;
        boolean $z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker;

        $z0 = r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: boolean receptionIsPaused>;

        return $z0;
    }

    static boolean access$002(org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker, boolean)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker r0;
        boolean z0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker;

        z0 := @parameter1: boolean;

        r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: boolean receptionIsPaused> = z0;

        return z0;
    }

    static void access$100(org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker)
    {
        org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker r0;

        r0 := @parameter0: org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker;

        specialinvoke r0.<org.waveprotocol.wave.concurrencycontrol.wave.OperationSucker: void receiveLoop()>();

        return;
    }
}
