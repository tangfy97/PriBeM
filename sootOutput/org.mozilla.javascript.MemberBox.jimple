final class org.mozilla.javascript.MemberBox extends java.lang.Object implements java.io.Serializable
{
    static final long serialVersionUID;
    private static final java.lang.Class[] primitives;
    private transient java.lang.reflect.Member memberObject;
    transient java.lang.Class[] argTypes;

    void <init>(java.lang.reflect.Method)
    {
        org.mozilla.javascript.MemberBox r0;
        java.lang.reflect.Method r1;

        r0 := @this: org.mozilla.javascript.MemberBox;

        r1 := @parameter0: java.lang.reflect.Method;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<org.mozilla.javascript.MemberBox: void init(java.lang.reflect.Method)>(r1);

        return;
    }

    void <init>(java.lang.reflect.Constructor)
    {
        org.mozilla.javascript.MemberBox r0;
        java.lang.reflect.Constructor r1;

        r0 := @this: org.mozilla.javascript.MemberBox;

        r1 := @parameter0: java.lang.reflect.Constructor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        specialinvoke r0.<org.mozilla.javascript.MemberBox: void init(java.lang.reflect.Constructor)>(r1);

        return;
    }

    private void init(java.lang.reflect.Method)
    {
        java.lang.Class[] $r2;
        org.mozilla.javascript.MemberBox r0;
        java.lang.reflect.Method r1;

        r0 := @this: org.mozilla.javascript.MemberBox;

        r1 := @parameter0: java.lang.reflect.Method;

        r0.<org.mozilla.javascript.MemberBox: java.lang.reflect.Member memberObject> = r1;

        $r2 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        r0.<org.mozilla.javascript.MemberBox: java.lang.Class[] argTypes> = $r2;

        return;
    }

    private void init(java.lang.reflect.Constructor)
    {
        java.lang.Class[] $r2;
        org.mozilla.javascript.MemberBox r0;
        java.lang.reflect.Constructor r1;

        r0 := @this: org.mozilla.javascript.MemberBox;

        r1 := @parameter0: java.lang.reflect.Constructor;

        r0.<org.mozilla.javascript.MemberBox: java.lang.reflect.Member memberObject> = r1;

        $r2 = virtualinvoke r1.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        r0.<org.mozilla.javascript.MemberBox: java.lang.Class[] argTypes> = $r2;

        return;
    }

    java.lang.reflect.Method method()
    {
        org.mozilla.javascript.MemberBox r0;
        java.lang.reflect.Method $r2;
        java.lang.reflect.Member $r1;

        r0 := @this: org.mozilla.javascript.MemberBox;

        $r1 = r0.<org.mozilla.javascript.MemberBox: java.lang.reflect.Member memberObject>;

        $r2 = (java.lang.reflect.Method) $r1;

        return $r2;
    }

    java.lang.reflect.Constructor ctor()
    {
        org.mozilla.javascript.MemberBox r0;
        java.lang.reflect.Constructor $r2;
        java.lang.reflect.Member $r1;

        r0 := @this: org.mozilla.javascript.MemberBox;

        $r1 = r0.<org.mozilla.javascript.MemberBox: java.lang.reflect.Member memberObject>;

        $r2 = (java.lang.reflect.Constructor) $r1;

        return $r2;
    }

    boolean isMethod()
    {
        org.mozilla.javascript.MemberBox r0;
        java.lang.reflect.Member $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.MemberBox;

        $r1 = r0.<org.mozilla.javascript.MemberBox: java.lang.reflect.Member memberObject>;

        $z0 = $r1 instanceof java.lang.reflect.Method;

        return $z0;
    }

    boolean isCtor()
    {
        org.mozilla.javascript.MemberBox r0;
        java.lang.reflect.Member $r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.MemberBox;

        $r1 = r0.<org.mozilla.javascript.MemberBox: java.lang.reflect.Member memberObject>;

        $z0 = $r1 instanceof java.lang.reflect.Constructor;

        return $z0;
    }

    boolean isStatic()
    {
        org.mozilla.javascript.MemberBox r0;
        java.lang.reflect.Member $r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.MemberBox;

        $r1 = r0.<org.mozilla.javascript.MemberBox: java.lang.reflect.Member memberObject>;

        $i0 = interfaceinvoke $r1.<java.lang.reflect.Member: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        return $z0;
    }

    java.lang.String getName()
    {
        org.mozilla.javascript.MemberBox r0;
        java.lang.String $r2;
        java.lang.reflect.Member $r1;

        r0 := @this: org.mozilla.javascript.MemberBox;

        $r1 = r0.<org.mozilla.javascript.MemberBox: java.lang.reflect.Member memberObject>;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.Member: java.lang.String getName()>();

        return $r2;
    }

    java.lang.Class getDeclaringClass()
    {
        org.mozilla.javascript.MemberBox r0;
        java.lang.Class $r2;
        java.lang.reflect.Member $r1;

        r0 := @this: org.mozilla.javascript.MemberBox;

        $r1 = r0.<org.mozilla.javascript.MemberBox: java.lang.reflect.Member memberObject>;

        $r2 = interfaceinvoke $r1.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        return $r2;
    }

    java.lang.String toJavaDeclaration()
    {
        org.mozilla.javascript.MemberBox r1;
        java.lang.Class[] $r9;
        java.lang.reflect.Constructor $r2;
        java.lang.StringBuffer $r0;
        int $i0, $i1;
        java.lang.Class $r3, $r6;
        java.lang.String $r4, $r7, r8, $r10, $r11;
        java.lang.reflect.Method $r5;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.MemberBox;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $z0 = virtualinvoke r1.<org.mozilla.javascript.MemberBox: boolean isMethod()>();

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r1.<org.mozilla.javascript.MemberBox: java.lang.reflect.Method method()>();

        $r6 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r6);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(32);

        $r7 = virtualinvoke $r5.<java.lang.reflect.Method: java.lang.String getName()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        goto label3;

     label1:
        $r2 = virtualinvoke r1.<org.mozilla.javascript.MemberBox: java.lang.reflect.Constructor ctor()>();

        $r3 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        r8 = $r4;

        $i0 = virtualinvoke $r4.<java.lang.String: int lastIndexOf(int)>(46);

        if $i0 < 0 goto label2;

        $i1 = $i0 + 1;

        r8 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i1);

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r8);

     label3:
        $r9 = r1.<org.mozilla.javascript.MemberBox: java.lang.Class[] argTypes>;

        $r10 = staticinvoke <org.mozilla.javascript.JavaMembers: java.lang.String liveConnectSignature(java.lang.Class[])>($r9);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        $r11 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r11;
    }

    public java.lang.String toString()
    {
        org.mozilla.javascript.MemberBox r0;
        java.lang.String $r2;
        java.lang.reflect.Member $r1;

        r0 := @this: org.mozilla.javascript.MemberBox;

        $r1 = r0.<org.mozilla.javascript.MemberBox: java.lang.reflect.Member memberObject>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }

    java.lang.Object invoke(java.lang.Object, java.lang.Object[])
    {
        org.mozilla.javascript.MemberBox r0;
        java.lang.IllegalAccessException $r7;
        java.lang.Object[] r3;
        org.mozilla.javascript.VMBridge $r10;
        java.lang.Class[] $r8;
        java.lang.RuntimeException $r6, $r12;
        java.lang.Exception $r5;
        java.lang.Object r2, $r4, $r11;
        java.lang.reflect.Method $r1, $r9, r13;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.MemberBox;

        r2 := @parameter0: java.lang.Object;

        r3 := @parameter1: java.lang.Object[];

        $r1 = virtualinvoke r0.<org.mozilla.javascript.MemberBox: java.lang.reflect.Method method()>();

        r13 = $r1;

     label1:
        $r4 = virtualinvoke $r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, r3);

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        $r8 = r0.<org.mozilla.javascript.MemberBox: java.lang.Class[] argTypes>;

        $r9 = staticinvoke <org.mozilla.javascript.MemberBox: java.lang.reflect.Method searchAccessibleMethod(java.lang.reflect.Method,java.lang.Class[])>($r1, $r8);

        if $r9 == null goto label4;

        r0.<org.mozilla.javascript.MemberBox: java.lang.reflect.Member memberObject> = $r9;

        r13 = $r9;

        goto label5;

     label4:
        $r10 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        $z0 = virtualinvoke $r10.<org.mozilla.javascript.VMBridge: boolean tryToMakeAccessible(java.lang.Object)>($r1);

        if $z0 != 0 goto label5;

        $r12 = staticinvoke <org.mozilla.javascript.Context: java.lang.RuntimeException throwAsScriptRuntimeEx(java.lang.Throwable)>($r7);

        throw $r12;

     label5:
        $r11 = virtualinvoke r13.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, r3);

     label6:
        return $r11;

     label7:
        $r5 := @caughtexception;

        $r6 = staticinvoke <org.mozilla.javascript.Context: java.lang.RuntimeException throwAsScriptRuntimeEx(java.lang.Throwable)>($r5);

        throw $r6;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label7;
        catch java.lang.Exception from label3 to label6 with label7;
    }

    java.lang.Object newInstance(java.lang.Object[])
    {
        org.mozilla.javascript.MemberBox r0;
        java.lang.IllegalAccessException $r6;
        java.lang.Object[] r2;
        org.mozilla.javascript.VMBridge $r7;
        java.lang.RuntimeException $r5, $r9;
        java.lang.reflect.Constructor $r1;
        java.lang.Exception $r4;
        java.lang.Object $r3, $r8;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.MemberBox;

        r2 := @parameter0: java.lang.Object[];

        $r1 = virtualinvoke r0.<org.mozilla.javascript.MemberBox: java.lang.reflect.Constructor ctor()>();

     label1:
        $r3 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r2);

     label2:
        return $r3;

     label3:
        $r6 := @caughtexception;

        $r7 = <org.mozilla.javascript.VMBridge: org.mozilla.javascript.VMBridge instance>;

        $z0 = virtualinvoke $r7.<org.mozilla.javascript.VMBridge: boolean tryToMakeAccessible(java.lang.Object)>($r1);

        if $z0 != 0 goto label4;

        $r9 = staticinvoke <org.mozilla.javascript.Context: java.lang.RuntimeException throwAsScriptRuntimeEx(java.lang.Throwable)>($r6);

        throw $r9;

     label4:
        $r8 = virtualinvoke $r1.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r2);

     label5:
        return $r8;

     label6:
        $r4 := @caughtexception;

        $r5 = staticinvoke <org.mozilla.javascript.Context: java.lang.RuntimeException throwAsScriptRuntimeEx(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.lang.IllegalAccessException from label1 to label2 with label3;
        catch java.lang.Exception from label1 to label2 with label6;
        catch java.lang.Exception from label3 to label5 with label6;
    }

    private static java.lang.reflect.Method searchAccessibleMethod(java.lang.reflect.Method, java.lang.Class[])
    {
        java.lang.NoSuchMethodException $r9, $r11;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.SecurityException $r8, $r10;
        java.lang.String $r2;
        java.lang.reflect.Method r0, $r5, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.Class[] $r3, r4;
        java.lang.Class $r1, r6, r12, $r13;

        r0 := @parameter0: java.lang.reflect.Method;

        r4 := @parameter1: java.lang.Class[];

        $i0 = virtualinvoke r0.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z0 == 0 goto label14;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z1 != 0 goto label14;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        r12 = $r1;

        $i1 = virtualinvoke $r1.<java.lang.Class: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z2 != 0 goto label14;

        $r2 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.String getName()>();

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.Class[] getInterfaces()>();

        i5 = 0;

        i6 = lengthof $r3;

     label01:
        if i5 == i6 goto label07;

        r6 = $r3[i5];

        $i4 = virtualinvoke r6.<java.lang.Class: int getModifiers()>();

        $z6 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i4);

        if $z6 == 0 goto label06;

     label02:
        $r7 = virtualinvoke r6.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r2, r4);

     label03:
        return $r7;

     label04:
        $r11 := @caughtexception;

        goto label06;

     label05:
        $r10 := @caughtexception;

     label06:
        i5 = i5 + 1;

        goto label01;

     label07:
        $r13 = virtualinvoke r12.<java.lang.Class: java.lang.Class getSuperclass()>();

        r12 = $r13;

        if $r13 != null goto label08;

        goto label14;

     label08:
        $i2 = virtualinvoke $r13.<java.lang.Class: int getModifiers()>();

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2);

        if $z3 == 0 goto label07;

     label09:
        $r5 = virtualinvoke $r13.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>($r2, r4);

        $i3 = virtualinvoke $r5.<java.lang.reflect.Method: int getModifiers()>();

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i3);

        if $z4 == 0 goto label11;

        $z5 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i3);

        if $z5 != 0 goto label11;

     label10:
        return $r5;

     label11:
        goto label07;

     label12:
        $r9 := @caughtexception;

        goto label07;

     label13:
        $r8 := @caughtexception;

        goto label07;

     label14:
        return null;

        catch java.lang.NoSuchMethodException from label02 to label03 with label04;
        catch java.lang.SecurityException from label02 to label03 with label05;
        catch java.lang.NoSuchMethodException from label09 to label10 with label12;
        catch java.lang.SecurityException from label09 to label10 with label13;
    }

    private void readObject(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        org.mozilla.javascript.MemberBox r2;
        java.lang.reflect.Member $r1;
        java.io.ObjectInputStream r0;
        java.lang.reflect.Constructor $r3;
        java.lang.reflect.Method $r4;
        boolean $z0;

        r2 := @this: org.mozilla.javascript.MemberBox;

        r0 := @parameter0: java.io.ObjectInputStream;

        virtualinvoke r0.<java.io.ObjectInputStream: void defaultReadObject()>();

        $r1 = staticinvoke <org.mozilla.javascript.MemberBox: java.lang.reflect.Member readMember(java.io.ObjectInputStream)>(r0);

        $z0 = $r1 instanceof java.lang.reflect.Method;

        if $z0 == 0 goto label1;

        $r4 = (java.lang.reflect.Method) $r1;

        specialinvoke r2.<org.mozilla.javascript.MemberBox: void init(java.lang.reflect.Method)>($r4);

        goto label2;

     label1:
        $r3 = (java.lang.reflect.Constructor) $r1;

        specialinvoke r2.<org.mozilla.javascript.MemberBox: void init(java.lang.reflect.Constructor)>($r3);

     label2:
        return;
    }

    private void writeObject(java.io.ObjectOutputStream) throws java.io.IOException
    {
        java.io.ObjectOutputStream r0;
        org.mozilla.javascript.MemberBox r1;
        java.lang.reflect.Member $r2;

        r1 := @this: org.mozilla.javascript.MemberBox;

        r0 := @parameter0: java.io.ObjectOutputStream;

        virtualinvoke r0.<java.io.ObjectOutputStream: void defaultWriteObject()>();

        $r2 = r1.<org.mozilla.javascript.MemberBox: java.lang.reflect.Member memberObject>;

        staticinvoke <org.mozilla.javascript.MemberBox: void writeMember(java.io.ObjectOutputStream,java.lang.reflect.Member)>(r0, $r2);

        return;
    }

    private static void writeMember(java.io.ObjectOutputStream, java.lang.reflect.Member) throws java.io.IOException
    {
        java.lang.reflect.Member r0;
        java.lang.Class[] $r5, $r7;
        java.lang.IllegalArgumentException $r8;
        java.lang.reflect.Constructor $r4;
        java.io.ObjectOutputStream r1;
        java.lang.Class $r3;
        java.lang.String $r2;
        java.lang.reflect.Method $r6;
        boolean $z0, $z1, $z2, $z3;

        r1 := @parameter0: java.io.ObjectOutputStream;

        r0 := @parameter1: java.lang.reflect.Member;

        if r0 != null goto label1;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(0);

        return;

     label1:
        virtualinvoke r1.<java.io.ObjectOutputStream: void writeBoolean(boolean)>(1);

        $z0 = r0 instanceof java.lang.reflect.Method;

        if $z0 != 0 goto label2;

        $z3 = r0 instanceof java.lang.reflect.Constructor;

        if $z3 != 0 goto label2;

        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("not Method or Constructor");

        throw $r8;

     label2:
        $z1 = r0 instanceof java.lang.reflect.Method;

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeBoolean(boolean)>($z1);

        $r2 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.String getName()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r2);

        $r3 = interfaceinvoke r0.<java.lang.reflect.Member: java.lang.Class getDeclaringClass()>();

        virtualinvoke r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>($r3);

        $z2 = r0 instanceof java.lang.reflect.Method;

        if $z2 == 0 goto label3;

        $r6 = (java.lang.reflect.Method) r0;

        $r7 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        staticinvoke <org.mozilla.javascript.MemberBox: void writeParameters(java.io.ObjectOutputStream,java.lang.Class[])>(r1, $r7);

        goto label4;

     label3:
        $r4 = (java.lang.reflect.Constructor) r0;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        staticinvoke <org.mozilla.javascript.MemberBox: void writeParameters(java.io.ObjectOutputStream,java.lang.Class[])>(r1, $r5);

     label4:
        return;
    }

    private static java.lang.reflect.Member readMember(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.lang.NoSuchMethodException $r8;
        java.io.ObjectInputStream r0;
        java.lang.reflect.Constructor $r6;
        java.lang.StringBuffer $r10, $r11, $r12;
        java.lang.String r2, $r13;
        java.lang.reflect.Method $r7;
        boolean $z0, $z1;
        java.lang.Class[] $r5;
        java.io.IOException $r9;
        java.lang.Object $r1, $r3;
        java.lang.Class r4;

        r0 := @parameter0: java.io.ObjectInputStream;

        $z0 = virtualinvoke r0.<java.io.ObjectInputStream: boolean readBoolean()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $z1 = virtualinvoke r0.<java.io.ObjectInputStream: boolean readBoolean()>();

        $r1 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r2 = (java.lang.String) $r1;

        $r3 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        r4 = (java.lang.Class) $r3;

        $r5 = staticinvoke <org.mozilla.javascript.MemberBox: java.lang.Class[] readParameters(java.io.ObjectInputStream)>(r0);

     label2:
        if $z1 == 0 goto label4;

        $r7 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r2, $r5);

     label3:
        return $r7;

     label4:
        $r6 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r5);

     label5:
        return $r6;

     label6:
        $r8 := @caughtexception;

        $r9 = new java.io.IOException;

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot find member: ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r8);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r9;

        catch java.lang.NoSuchMethodException from label2 to label3 with label6;
        catch java.lang.NoSuchMethodException from label4 to label5 with label6;
    }

    private static void writeParameters(java.io.ObjectOutputStream, java.lang.Class[]) throws java.io.IOException
    {
        java.lang.StringBuffer $r5, $r6, $r7, $r8;
        int $i0, $i1, $i2, i3, i4;
        java.io.ObjectOutputStream r0;
        java.lang.String $r9;
        boolean $z0, $z1;
        java.lang.Class[] r1, $r3, $r10;
        java.lang.IllegalArgumentException $r4;
        java.lang.Class r2, $r11;

        r0 := @parameter0: java.io.ObjectOutputStream;

        r1 := @parameter1: java.lang.Class[];

        $i0 = lengthof r1;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeShort(int)>($i0);

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label7;

        r2 = r1[i3];

        $z0 = virtualinvoke r2.<java.lang.Class: boolean isPrimitive()>();

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeBoolean(boolean)>($z0);

        if $z0 != 0 goto label2;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r2);

        goto label6;

     label2:
        i4 = 0;

     label3:
        $r3 = <org.mozilla.javascript.MemberBox: java.lang.Class[] primitives>;

        $i2 = lengthof $r3;

        if i4 >= $i2 goto label5;

        $r10 = <org.mozilla.javascript.MemberBox: java.lang.Class[] primitives>;

        $r11 = $r10[i4];

        $z1 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>($r11);

        if $z1 == 0 goto label4;

        virtualinvoke r0.<java.io.ObjectOutputStream: void writeByte(int)>(i4);

        goto label6;

     label4:
        i4 = i4 + 1;

        goto label3;

     label5:
        $r4 = new java.lang.IllegalArgumentException;

        $r5 = new java.lang.StringBuffer;

        specialinvoke $r5.<java.lang.StringBuffer: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Primitive ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" not found");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r4;

     label6:
        i3 = i3 + 1;

        goto label1;

     label7:
        return;
    }

    private static java.lang.Class[] readParameters(java.io.ObjectInputStream) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        java.io.ObjectInputStream r0;
        java.lang.Class[] r1, $r2;
        short $s0;
        byte $b2;
        int $i1, i3, $i4, $i5;
        java.lang.Class $r3, $r5;
        java.lang.Object $r4;
        boolean $z0;

        r0 := @parameter0: java.io.ObjectInputStream;

        $s0 = virtualinvoke r0.<java.io.ObjectInputStream: short readShort()>();

        $i4 = (int) $s0;

        r1 = newarray (java.lang.Class)[$i4];

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label4;

        $z0 = virtualinvoke r0.<java.io.ObjectInputStream: boolean readBoolean()>();

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r0.<java.io.ObjectInputStream: java.lang.Object readObject()>();

        $r5 = (java.lang.Class) $r4;

        r1[i3] = $r5;

        goto label3;

     label2:
        $r2 = <org.mozilla.javascript.MemberBox: java.lang.Class[] primitives>;

        $b2 = virtualinvoke r0.<java.io.ObjectInputStream: byte readByte()>();

        $i5 = (int) $b2;

        $r3 = $r2[$i5];

        r1[i3] = $r3;

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return r1;
    }

    static void <clinit>()
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;

        <org.mozilla.javascript.MemberBox: long serialVersionUID> = 6358550398665688245L;

        $r0 = newarray (java.lang.Class)[9];

        $r1 = <java.lang.Boolean: java.lang.Class TYPE>;

        $r0[0] = $r1;

        $r2 = <java.lang.Byte: java.lang.Class TYPE>;

        $r0[1] = $r2;

        $r3 = <java.lang.Character: java.lang.Class TYPE>;

        $r0[2] = $r3;

        $r4 = <java.lang.Double: java.lang.Class TYPE>;

        $r0[3] = $r4;

        $r5 = <java.lang.Float: java.lang.Class TYPE>;

        $r0[4] = $r5;

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        $r0[5] = $r6;

        $r7 = <java.lang.Long: java.lang.Class TYPE>;

        $r0[6] = $r7;

        $r8 = <java.lang.Short: java.lang.Class TYPE>;

        $r0[7] = $r8;

        $r9 = <java.lang.Void: java.lang.Class TYPE>;

        $r0[8] = $r9;

        <org.mozilla.javascript.MemberBox: java.lang.Class[] primitives> = $r0;

        return;
    }
}
