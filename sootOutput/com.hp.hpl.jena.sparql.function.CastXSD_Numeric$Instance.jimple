public class com.hp.hpl.jena.sparql.function.CastXSD_Numeric$Instance extends com.hp.hpl.jena.sparql.function.CastXSD$Instance
{

    void <init>(com.hp.hpl.jena.datatypes.xsd.XSDDatatype)
    {
        com.hp.hpl.jena.sparql.function.CastXSD_Numeric$Instance r0;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype r1;

        r0 := @this: com.hp.hpl.jena.sparql.function.CastXSD_Numeric$Instance;

        r1 := @parameter0: com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        specialinvoke r0.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: void <init>(com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r1);

        return;
    }

    protected com.hp.hpl.jena.sparql.expr.NodeValue cast(java.lang.String, com.hp.hpl.jena.sparql.expr.NodeValue, com.hp.hpl.jena.datatypes.xsd.XSDDatatype)
    {
        com.hp.hpl.jena.sparql.expr.NodeValue r0, $r10;
        java.lang.String r6, $r7, $r8, $r9;
        com.hp.hpl.jena.sparql.function.CastXSD_Numeric$Instance r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        com.hp.hpl.jena.datatypes.xsd.XSDDatatype r2, $r3, $r4, $r5;

        r1 := @this: com.hp.hpl.jena.sparql.function.CastXSD_Numeric$Instance;

        r6 := @parameter0: java.lang.String;

        r0 := @parameter1: com.hp.hpl.jena.sparql.expr.NodeValue;

        r2 := @parameter2: com.hp.hpl.jena.datatypes.xsd.XSDDatatype;

        $z0 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean isBoolean()>();

        if $z0 == 0 goto label10;

        $z1 = virtualinvoke r0.<com.hp.hpl.jena.sparql.expr.NodeValue: boolean getBoolean()>();

        $r3 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDfloat>;

        $z2 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z2 != 0 goto label01;

        $r4 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdouble>;

        $z3 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z3 == 0 goto label04;

     label01:
        if $z1 == 0 goto label02;

        $r7 = "1.0E0";

        goto label03;

     label02:
        $r7 = "0.0E0";

     label03:
        r6 = $r7;

        goto label10;

     label04:
        $r5 = <com.hp.hpl.jena.datatypes.xsd.XSDDatatype: com.hp.hpl.jena.datatypes.xsd.XSDDatatype XSDdecimal>;

        $z4 = virtualinvoke $r5.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z4 == 0 goto label07;

        if $z1 == 0 goto label05;

        $r8 = "1.0";

        goto label06;

     label05:
        $r8 = "0.0";

     label06:
        r6 = $r8;

        goto label10;

     label07:
        $z5 = staticinvoke <com.hp.hpl.jena.sparql.expr.nodevalue.XSDFuncOp: boolean isIntegerType(com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r2);

        if $z5 == 0 goto label10;

        if $z1 == 0 goto label08;

        $r9 = "1";

        goto label09;

     label08:
        $r9 = "0";

     label09:
        r6 = $r9;

     label10:
        $r10 = specialinvoke r1.<com.hp.hpl.jena.sparql.function.CastXSD$Instance: com.hp.hpl.jena.sparql.expr.NodeValue cast(java.lang.String,com.hp.hpl.jena.sparql.expr.NodeValue,com.hp.hpl.jena.datatypes.xsd.XSDDatatype)>(r6, r0, r2);

        return $r10;
    }
}
