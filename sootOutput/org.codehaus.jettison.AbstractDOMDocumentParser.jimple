public class org.codehaus.jettison.AbstractDOMDocumentParser extends java.lang.Object
{
    private org.codehaus.jettison.AbstractXMLInputFactory inputFactory;

    protected void <init>(org.codehaus.jettison.AbstractXMLInputFactory)
    {
        org.codehaus.jettison.AbstractDOMDocumentParser r0;
        org.codehaus.jettison.AbstractXMLInputFactory r1;

        r0 := @this: org.codehaus.jettison.AbstractDOMDocumentParser;

        r1 := @parameter0: org.codehaus.jettison.AbstractXMLInputFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.codehaus.jettison.AbstractDOMDocumentParser: org.codehaus.jettison.AbstractXMLInputFactory inputFactory> = r1;

        return;
    }

    public org.w3c.dom.Document parse(java.io.InputStream) throws java.io.IOException
    {
        javax.xml.stream.XMLEventReader $r5;
        byte[] $r10;
        java.io.ByteArrayOutputStream $r6;
        javax.xml.stream.XMLInputFactory $r4;
        java.io.IOException $r14;
        java.lang.Exception $r13;
        javax.xml.stream.XMLOutputFactory $r7;
        javax.xml.stream.XMLEventWriter $r8;
        org.codehaus.jettison.AbstractXMLInputFactory $r2;
        java.io.ByteArrayInputStream $r9;
        javax.xml.stream.XMLStreamReader $r3;
        org.w3c.dom.Document $r12;
        javax.xml.parsers.DocumentBuilder $r11;
        org.codehaus.jettison.AbstractDOMDocumentParser r0;
        java.io.InputStream r1;

        r0 := @this: org.codehaus.jettison.AbstractDOMDocumentParser;

        r1 := @parameter0: java.io.InputStream;

     label1:
        $r2 = r0.<org.codehaus.jettison.AbstractDOMDocumentParser: org.codehaus.jettison.AbstractXMLInputFactory inputFactory>;

        $r3 = virtualinvoke $r2.<org.codehaus.jettison.AbstractXMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.InputStream)>(r1);

        $r4 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>();

        $r5 = virtualinvoke $r4.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLEventReader createXMLEventReader(javax.xml.stream.XMLStreamReader)>($r3);

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        $r7 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>();

        $r8 = virtualinvoke $r7.<javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLEventWriter createXMLEventWriter(java.io.OutputStream)>($r6);

        interfaceinvoke $r8.<javax.xml.stream.XMLEventWriter: void add(javax.xml.stream.XMLEventReader)>($r5);

        interfaceinvoke $r8.<javax.xml.stream.XMLEventWriter: void close()>();

        $r9 = new java.io.ByteArrayInputStream;

        $r10 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>($r10);

        $r11 = specialinvoke r0.<org.codehaus.jettison.AbstractDOMDocumentParser: javax.xml.parsers.DocumentBuilder getDocumentBuilder()>();

        $r12 = virtualinvoke $r11.<javax.xml.parsers.DocumentBuilder: org.w3c.dom.Document parse(java.io.InputStream)>($r9);

     label2:
        return $r12;

     label3:
        $r13 := @caughtexception;

        $r14 = new java.io.IOException;

        specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Cannot parse input stream");

        virtualinvoke $r14.<java.io.IOException: java.lang.Throwable initCause(java.lang.Throwable)>($r13);

        throw $r14;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private javax.xml.parsers.DocumentBuilder getDocumentBuilder()
    {
        javax.xml.parsers.ParserConfigurationException $r2;
        javax.xml.parsers.DocumentBuilder $r1;
        org.codehaus.jettison.AbstractDOMDocumentParser r4;
        javax.xml.parsers.DocumentBuilderFactory $r0;
        java.lang.RuntimeException $r3;

        r4 := @this: org.codehaus.jettison.AbstractDOMDocumentParser;

     label1:
        $r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>();

        virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: void setValidating(boolean)>(0);

        virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: void setNamespaceAware(boolean)>(1);

        $r1 = virtualinvoke $r0.<javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilder newDocumentBuilder()>();

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to create DocumentBuilder", $r2);

        throw $r3;

        catch javax.xml.parsers.ParserConfigurationException from label1 to label2 with label3;
    }
}
