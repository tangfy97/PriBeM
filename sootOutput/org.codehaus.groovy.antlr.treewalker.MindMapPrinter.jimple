public class org.codehaus.groovy.antlr.treewalker.MindMapPrinter extends org.codehaus.groovy.antlr.treewalker.VisitorAdapter
{
    private final java.lang.String[] tokenNames;
    private final java.io.PrintStream out;
    private int depth;
    private org.codehaus.groovy.antlr.SourceBuffer sourceBuffer;

    public void <init>(java.io.PrintStream, java.lang.String[])
    {
        org.codehaus.groovy.antlr.treewalker.MindMapPrinter r0;
        java.io.PrintStream r2;
        java.lang.String[] r1;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.MindMapPrinter;

        r2 := @parameter0: java.io.PrintStream;

        r1 := @parameter1: java.lang.String[];

        specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.VisitorAdapter: void <init>()>();

        r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.lang.String[] tokenNames> = r1;

        r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.io.PrintStream out> = r2;

        return;
    }

    public void <init>(java.io.PrintStream, java.lang.String[], org.codehaus.groovy.antlr.SourceBuffer)
    {
        java.io.PrintStream r2;
        org.codehaus.groovy.antlr.SourceBuffer r3;
        org.codehaus.groovy.antlr.treewalker.MindMapPrinter r0;
        java.lang.String[] r1;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.MindMapPrinter;

        r2 := @parameter0: java.io.PrintStream;

        r1 := @parameter1: java.lang.String[];

        r3 := @parameter2: org.codehaus.groovy.antlr.SourceBuffer;

        specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.VisitorAdapter: void <init>()>();

        r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.lang.String[] tokenNames> = r1;

        r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.io.PrintStream out> = r2;

        r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: org.codehaus.groovy.antlr.SourceBuffer sourceBuffer> = r3;

        return;
    }

    public void setUp()
    {
        org.codehaus.groovy.antlr.treewalker.MindMapPrinter r0;
        java.io.PrintStream $r1;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.MindMapPrinter;

        r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: int depth> = 0;

        $r1 = r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("<map version=\'0.7.1\'><node TEXT=\'AST\'>");

        return;
    }

    public void visitDefault(org.codehaus.groovy.antlr.GroovySourceAST, int)
    {
        java.lang.StringBuffer $r6, $r8, $r9, $r10, $r11, $r12, $r13;
        int i0, $i1, $i2, $i3, $i4;
        org.codehaus.groovy.antlr.treewalker.MindMapPrinter r0;
        java.lang.String $r3, $r4, $r5, $r14;
        java.io.PrintStream $r1, $r7;
        org.codehaus.groovy.antlr.GroovySourceAST r2;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.MindMapPrinter;

        r2 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        i0 := @parameter1: int;

        if i0 != 1 goto label1;

        $i3 = r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: int depth>;

        $i4 = $i3 + 1;

        r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: int depth> = $i4;

        $r3 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.lang.String getName(org.codehaus.groovy.antlr.GroovySourceAST)>(r2);

        $r4 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.lang.String getColour(org.codehaus.groovy.antlr.GroovySourceAST)>(r2);

        $r5 = specialinvoke r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.lang.String getFolded(org.codehaus.groovy.antlr.GroovySourceAST)>(r2);

        $r7 = r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("<node TEXT=\'");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\' POSITION=\'right\'");

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void print(java.lang.String)>($r14);

        goto label2;

     label1:
        if i0 != 4 goto label2;

        $r1 = r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("</node>");

        $i1 = r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: int depth>;

        $i2 = $i1 - 1;

        r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: int depth> = $i2;

     label2:
        return;
    }

    public void tearDown()
    {
        org.codehaus.groovy.antlr.treewalker.MindMapPrinter r0;
        java.io.PrintStream $r1;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.MindMapPrinter;

        $r1 = r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("</node></map>");

        return;
    }

    private java.lang.String getFolded(org.codehaus.groovy.antlr.GroovySourceAST)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r1;
        org.codehaus.groovy.antlr.treewalker.MindMapPrinter r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: org.codehaus.groovy.antlr.treewalker.MindMapPrinter;

        r1 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        $i0 = r0.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: int depth>;

        if $i0 <= 2 goto label2;

        $i1 = virtualinvoke r1.<org.codehaus.groovy.antlr.GroovySourceAST: int getNumberOfChildren()>();

        if $i1 <= 0 goto label2;

        $i2 = virtualinvoke r1.<org.codehaus.groovy.antlr.GroovySourceAST: int getType()>();

        lookupswitch($i2)
        {
            case 8: goto label1;
            case 9: goto label1;
            case 27: goto label1;
            default: goto label2;
        };

     label1:
        return " FOLDED=\'true\'";

     label2:
        $i3 = virtualinvoke r1.<org.codehaus.groovy.antlr.GroovySourceAST: int getType()>();

        if $i3 != 28 goto label3;

        return " FOLDED=\'true\'";

     label3:
        return "";
    }

    private java.lang.String getColour(org.codehaus.groovy.antlr.GroovySourceAST)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r0;
        int $i0, $i1;
        org.codehaus.groovy.antlr.treewalker.MindMapPrinter r1;
        java.lang.String r2, $r3, r4, r5;
        boolean $z0;

        r1 := @this: org.codehaus.groovy.antlr.treewalker.MindMapPrinter;

        r0 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        $i0 = virtualinvoke r0.<org.codehaus.groovy.antlr.GroovySourceAST: int getType()>();

        tableswitch($i0)
        {
            case 1: goto label1;
            case 2: goto label5;
            case 3: goto label1;
            case 4: goto label1;
            case 5: goto label1;
            case 6: goto label1;
            case 7: goto label1;
            case 8: goto label1;
            case 9: goto label1;
            case 10: goto label1;
            case 11: goto label1;
            case 12: goto label3;
            case 13: goto label3;
            case 14: goto label1;
            case 15: goto label3;
            case 16: goto label1;
            case 17: goto label3;
            case 18: goto label3;
            case 19: goto label1;
            case 20: goto label1;
            case 21: goto label1;
            case 22: goto label1;
            case 23: goto label1;
            case 24: goto label1;
            case 25: goto label1;
            case 26: goto label1;
            case 27: goto label1;
            case 28: goto label3;
            case 29: goto label1;
            case 30: goto label1;
            case 31: goto label1;
            case 32: goto label1;
            case 33: goto label1;
            case 34: goto label1;
            case 35: goto label1;
            case 36: goto label1;
            case 37: goto label1;
            case 38: goto label1;
            case 39: goto label1;
            case 40: goto label1;
            case 41: goto label1;
            case 42: goto label1;
            case 43: goto label1;
            case 44: goto label1;
            case 45: goto label1;
            case 46: goto label1;
            case 47: goto label1;
            case 48: goto label1;
            case 49: goto label1;
            case 50: goto label1;
            case 51: goto label1;
            case 52: goto label1;
            case 53: goto label1;
            case 54: goto label1;
            case 55: goto label1;
            case 56: goto label1;
            case 57: goto label1;
            case 58: goto label1;
            case 59: goto label1;
            case 60: goto label1;
            case 61: goto label1;
            case 62: goto label1;
            case 63: goto label1;
            case 64: goto label1;
            case 65: goto label1;
            case 66: goto label1;
            case 67: goto label1;
            case 68: goto label1;
            case 69: goto label1;
            case 70: goto label1;
            case 71: goto label1;
            case 72: goto label1;
            case 73: goto label1;
            case 74: goto label1;
            case 75: goto label1;
            case 76: goto label5;
            case 77: goto label1;
            case 78: goto label3;
            case 79: goto label3;
            case 80: goto label3;
            case 81: goto label3;
            case 82: goto label1;
            case 83: goto label1;
            case 84: goto label4;
            case 85: goto label2;
            case 86: goto label1;
            case 87: goto label1;
            case 88: goto label1;
            case 89: goto label3;
            case 90: goto label3;
            case 91: goto label3;
            case 92: goto label1;
            case 93: goto label1;
            case 94: goto label3;
            case 95: goto label3;
            case 96: goto label1;
            case 97: goto label1;
            case 98: goto label1;
            case 99: goto label1;
            case 100: goto label3;
            case 101: goto label3;
            case 102: goto label3;
            case 103: goto label3;
            case 104: goto label3;
            case 105: goto label3;
            case 106: goto label3;
            case 107: goto label3;
            case 108: goto label3;
            case 109: goto label1;
            case 110: goto label3;
            case 111: goto label3;
            case 112: goto label3;
            case 113: goto label3;
            case 114: goto label3;
            case 115: goto label3;
            case 116: goto label3;
            case 117: goto label3;
            case 118: goto label3;
            case 119: goto label1;
            case 120: goto label1;
            case 121: goto label1;
            case 122: goto label1;
            case 123: goto label1;
            case 124: goto label1;
            case 125: goto label1;
            case 126: goto label3;
            case 127: goto label3;
            case 128: goto label3;
            case 129: goto label3;
            case 130: goto label1;
            case 131: goto label1;
            case 132: goto label1;
            case 133: goto label3;
            case 134: goto label3;
            case 135: goto label3;
            case 136: goto label3;
            case 137: goto label3;
            case 138: goto label3;
            case 139: goto label3;
            case 140: goto label3;
            case 141: goto label3;
            case 142: goto label3;
            case 143: goto label3;
            case 144: goto label1;
            case 145: goto label1;
            case 146: goto label3;
            case 147: goto label3;
            case 148: goto label3;
            case 149: goto label3;
            case 150: goto label1;
            case 151: goto label1;
            case 152: goto label1;
            case 153: goto label1;
            case 154: goto label1;
            case 155: goto label1;
            case 156: goto label1;
            case 157: goto label1;
            case 158: goto label1;
            case 159: goto label1;
            case 160: goto label1;
            case 161: goto label1;
            case 162: goto label1;
            case 163: goto label1;
            case 164: goto label1;
            case 165: goto label5;
            case 166: goto label1;
            case 167: goto label1;
            case 168: goto label1;
            case 169: goto label1;
            case 170: goto label1;
            case 171: goto label1;
            case 172: goto label1;
            case 173: goto label1;
            case 174: goto label1;
            case 175: goto label1;
            case 176: goto label1;
            case 177: goto label3;
            case 178: goto label1;
            case 179: goto label1;
            case 180: goto label1;
            case 181: goto label1;
            case 182: goto label1;
            case 183: goto label1;
            case 184: goto label1;
            case 185: goto label1;
            case 186: goto label1;
            case 187: goto label1;
            case 188: goto label1;
            case 189: goto label1;
            case 190: goto label3;
            case 191: goto label3;
            case 192: goto label3;
            case 193: goto label3;
            case 194: goto label1;
            case 195: goto label1;
            case 196: goto label1;
            case 197: goto label1;
            case 198: goto label1;
            case 199: goto label1;
            case 200: goto label1;
            case 201: goto label1;
            case 202: goto label1;
            case 203: goto label1;
            case 204: goto label1;
            case 205: goto label1;
            case 206: goto label2;
            case 207: goto label1;
            case 208: goto label1;
            case 209: goto label1;
            case 210: goto label1;
            case 211: goto label1;
            case 212: goto label1;
            case 213: goto label1;
            case 214: goto label1;
            case 215: goto label1;
            case 216: goto label1;
            case 217: goto label1;
            default: goto label5;
        };

     label1:
        r2 = " COLOR=\"#000000\"";

        r5 = " COLOR=\"#000000\"";

        r4 = " COLOR=\"#000000\"";

        goto label6;

     label2:
        r2 = " COLOR=\"#008000\"";

        r5 = " COLOR=\"#008000\"";

        r4 = " COLOR=\"#008000\"";

        goto label6;

     label3:
        r2 = " COLOR=\"#17178B\"";

        r5 = " COLOR=\"#17178B\"";

        r4 = " COLOR=\"#17178B\"";

        goto label6;

     label4:
        r2 = " COLOR=\"#006699\"";

        r5 = " COLOR=\"#006699\"";

        r4 = " COLOR=\"#006699\"";

        goto label6;

     label5:
        r2 = " COLOR=\"#000000\"";

        r5 = " COLOR=\"#000000\"";

        r4 = " COLOR=\"#000000\"";

     label6:
        $r3 = " COLOR=\"#000000\"";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label7;

        $i1 = virtualinvoke r0.<org.codehaus.groovy.antlr.GroovySourceAST: int getNumberOfChildren()>();

        if $i1 != 0 goto label7;

        r2 = " COLOR=\"#006699\"";

        r5 = " COLOR=\"#006699\"";

     label7:
        return r5;
    }

    private java.lang.String getName(org.codehaus.groovy.antlr.GroovySourceAST)
    {
        org.codehaus.groovy.antlr.GroovySourceAST r2, $r15;
        org.codehaus.groovy.antlr.SourceBuffer $r37, $r56;
        java.lang.StringBuffer $r0, $r5, $r6, $r7, $r8, $r16, $r17, $r18, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r30, $r31, $r32, $r34, $r35, $r41, $r42, $r43, $r44, $r46, $r47, $r48, $r49, $r50, $r52;
        org.codehaus.groovy.antlr.treewalker.MindMapPrinter r1;
        java.lang.String $r4, $r9, $r11, $r12, $r13, $r14, $r19, $r29, $r33, $r39, $r40, $r45, $r51, r53, $r54, r55;
        org.codehaus.groovy.antlr.LineColumn $r36, $r38;
        boolean $z0;
        java.lang.String[] $r3, $r10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r1 := @this: org.codehaus.groovy.antlr.treewalker.MindMapPrinter;

        r2 := @parameter0: org.codehaus.groovy.antlr.GroovySourceAST;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        $r3 = r1.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.lang.String[] tokenNames>;

        $i0 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: int getType()>();

        $r4 = $r3[$i0];

        $r5 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" <");

        $i1 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: int getType()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(">");

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        r53 = $r9;

        $r10 = r1.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.lang.String[] tokenNames>;

        $i2 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: int getType()>();

        $r11 = $r10[$i2];

        $r12 = specialinvoke r1.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.lang.String escape(java.lang.String)>($r11);

        $r13 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: java.lang.String getText()>();

        $r14 = specialinvoke r1.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.lang.String escape(java.lang.String)>($r13);

        $z0 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>($r14);

        if $z0 != 0 goto label1;

        $r48 = new java.lang.StringBuffer;

        specialinvoke $r48.<java.lang.StringBuffer: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r50 = virtualinvoke $r49.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r51 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: java.lang.String getText()>();

        $r52 = virtualinvoke $r50.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r51);

        r53 = virtualinvoke $r52.<java.lang.StringBuffer: java.lang.String toString()>();

     label1:
        $i3 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: int getType()>();

        lookupswitch($i3)
        {
            case 8: goto label2;
            case 9: goto label2;
            default: goto label3;
        };

     label2:
        $r15 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: org.codehaus.groovy.antlr.GroovySourceAST childOfType(int)>(84);

        if $r15 == null goto label3;

        $r42 = new java.lang.StringBuffer;

        specialinvoke $r42.<java.lang.StringBuffer: void <init>()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r53);

        $r44 = virtualinvoke $r43.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" : ");

        $r45 = virtualinvoke $r15.<org.codehaus.groovy.antlr.GroovySourceAST: java.lang.String getText()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("");

        r53 = virtualinvoke $r47.<java.lang.StringBuffer: java.lang.String toString()>();

     label3:
        $r54 = specialinvoke r1.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.lang.String escape(java.lang.String)>(r53);

        r55 = $r54;

        $r56 = r1.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: org.codehaus.groovy.antlr.SourceBuffer sourceBuffer>;

        if $r56 == null goto label4;

        $r16 = new java.lang.StringBuffer;

        specialinvoke $r16.<java.lang.StringBuffer: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r54);

        $r18 = virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#xa;");

        $r19 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.String toString()>();

        $r20 = new java.lang.StringBuffer;

        specialinvoke $r20.<java.lang.StringBuffer: void <init>()>();

        $r21 = virtualinvoke $r20.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        $i4 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: int getLine()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i4);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $i5 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: int getColumn()>();

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" - ");

        $i6 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: int getLineLast()>();

        $r26 = virtualinvoke $r25.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i6);

        $r27 = virtualinvoke $r26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(",");

        $i7 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: int getColumnLast()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i7);

        $r29 = virtualinvoke $r28.<java.lang.StringBuffer: java.lang.String toString()>();

        $r30 = new java.lang.StringBuffer;

        specialinvoke $r30.<java.lang.StringBuffer: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r29);

        $r32 = virtualinvoke $r31.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("&#xa;");

        $r33 = virtualinvoke $r32.<java.lang.StringBuffer: java.lang.String toString()>();

        $r34 = new java.lang.StringBuffer;

        specialinvoke $r34.<java.lang.StringBuffer: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r33);

        $r37 = r1.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: org.codehaus.groovy.antlr.SourceBuffer sourceBuffer>;

        $r36 = new org.codehaus.groovy.antlr.LineColumn;

        $i8 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: int getLine()>();

        $i9 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: int getColumn()>();

        specialinvoke $r36.<org.codehaus.groovy.antlr.LineColumn: void <init>(int,int)>($i8, $i9);

        $r38 = new org.codehaus.groovy.antlr.LineColumn;

        $i10 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: int getLineLast()>();

        $i11 = virtualinvoke r2.<org.codehaus.groovy.antlr.GroovySourceAST: int getColumnLast()>();

        specialinvoke $r38.<org.codehaus.groovy.antlr.LineColumn: void <init>(int,int)>($i10, $i11);

        $r39 = virtualinvoke $r37.<org.codehaus.groovy.antlr.SourceBuffer: java.lang.String getSnippet(org.codehaus.groovy.antlr.LineColumn,org.codehaus.groovy.antlr.LineColumn)>($r36, $r38);

        $r40 = specialinvoke r1.<org.codehaus.groovy.antlr.treewalker.MindMapPrinter: java.lang.String escape(java.lang.String)>($r39);

        $r41 = virtualinvoke $r35.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r40);

        r55 = virtualinvoke $r41.<java.lang.StringBuffer: java.lang.String toString()>();

     label4:
        return r55;
    }

    private java.lang.String escape(java.lang.String)
    {
        java.lang.StringBuffer $r6, $r8, $r9, $r11;
        int $i0, $i1, $i2;
        org.codehaus.groovy.antlr.treewalker.MindMapPrinter r12;
        java.lang.String $r0, $r1, $r2, $r3, $r4, $r5, $r7, $r10, r13;

        r12 := @this: org.codehaus.groovy.antlr.treewalker.MindMapPrinter;

        r13 := @parameter0: java.lang.String;

        if r13 != null goto label1;

        return null;

     label1:
        $i0 = virtualinvoke r13.<java.lang.String: int length()>();

        if $i0 <= 200 goto label2;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, 100);

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" ..... ");

        $i1 = virtualinvoke r13.<java.lang.String: int length()>();

        $i2 = $i1 - 100;

        $r10 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int)>($i2);

        $r11 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r10);

        r13 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

     label2:
        $r0 = virtualinvoke r13.<java.lang.String: java.lang.String replace(char,char)>(34, 32);

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String replace(char,char)>(39, 32);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("&", "&amp;");

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("<", "&lt;");

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>(">", "&gt;");

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>();

        return $r5;
    }
}
