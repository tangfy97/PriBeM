class org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder extends org.apache.commons.compress.archivers.sevenz.CoderBase
{

    void <init>()
    {
        org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder r0;
        java.lang.Class[] $r1;

        r0 := @this: org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder;

        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "Ljava/lang/Number;";

        specialinvoke r0.<org.apache.commons.compress.archivers.sevenz.CoderBase: void <init>(java.lang.Class[])>($r1);

        return;
    }

    java.io.InputStream decode(java.io.InputStream, org.apache.commons.compress.archivers.sevenz.Coder, byte[]) throws java.io.IOException
    {
        byte[] r6;
        org.apache.commons.compress.archivers.sevenz.Coders$DummyByteAddingInputStream $r1;
        java.util.zip.Inflater $r3;
        java.util.zip.InflaterInputStream $r0;
        org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder r4;
        org.apache.commons.compress.archivers.sevenz.Coder r5;
        java.io.InputStream r2;

        r4 := @this: org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder;

        r2 := @parameter0: java.io.InputStream;

        r5 := @parameter1: org.apache.commons.compress.archivers.sevenz.Coder;

        r6 := @parameter2: byte[];

        $r0 = new java.util.zip.InflaterInputStream;

        $r1 = new org.apache.commons.compress.archivers.sevenz.Coders$DummyByteAddingInputStream;

        specialinvoke $r1.<org.apache.commons.compress.archivers.sevenz.Coders$DummyByteAddingInputStream: void <init>(java.io.InputStream,org.apache.commons.compress.archivers.sevenz.Coders$1)>(r2, null);

        $r3 = new java.util.zip.Inflater;

        specialinvoke $r3.<java.util.zip.Inflater: void <init>(boolean)>(1);

        specialinvoke $r0.<java.util.zip.InflaterInputStream: void <init>(java.io.InputStream,java.util.zip.Inflater)>($r1, $r3);

        return $r0;
    }

    java.io.OutputStream encode(java.io.OutputStream, java.lang.Object)
    {
        java.io.OutputStream r2;
        int $i0;
        org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder r4;
        java.lang.Object r0;
        java.util.zip.Deflater $r3;
        java.util.zip.DeflaterOutputStream $r1;

        r4 := @this: org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder;

        r2 := @parameter0: java.io.OutputStream;

        r0 := @parameter1: java.lang.Object;

        $i0 = staticinvoke <org.apache.commons.compress.archivers.sevenz.Coders$DeflateDecoder: int numberOptionOrDefault(java.lang.Object,int)>(r0, 9);

        $r1 = new java.util.zip.DeflaterOutputStream;

        $r3 = new java.util.zip.Deflater;

        specialinvoke $r3.<java.util.zip.Deflater: void <init>(int,boolean)>($i0, 1);

        specialinvoke $r1.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream,java.util.zip.Deflater)>(r2, $r3);

        return $r1;
    }
}
