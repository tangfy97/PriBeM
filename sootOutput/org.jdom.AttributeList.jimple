class org.jdom.AttributeList extends java.util.AbstractList implements java.util.List, java.io.Serializable
{
    private static final java.lang.String CVS_ID;
    private static final int INITIAL_ARRAY_SIZE;
    private org.jdom.Attribute[] elementData;
    private int size;
    private org.jdom.Element parent;

    private void <init>()
    {
        org.jdom.AttributeList r0;

        r0 := @this: org.jdom.AttributeList;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        return;
    }

    void <init>(org.jdom.Element)
    {
        org.jdom.Element r1;
        org.jdom.AttributeList r0;

        r0 := @this: org.jdom.AttributeList;

        r1 := @parameter0: org.jdom.Element;

        specialinvoke r0.<java.util.AbstractList: void <init>()>();

        r0.<org.jdom.AttributeList: org.jdom.Element parent> = r1;

        return;
    }

    public void add(int, java.lang.Object)
    {
        java.lang.StringBuffer $r2, $r5, $r6;
        int $i0, i1, $i2, $i3;
        java.lang.String $r4, $r7;
        boolean $z0;
        org.jdom.Attribute r9;
        org.jdom.AttributeList r10;
        java.lang.Object r0;
        org.jdom.IllegalAddException $r1, $r8, $r11;
        java.lang.Class $r3;

        r10 := @this: org.jdom.AttributeList;

        i1 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof org.jdom.Attribute;

        if $z0 == 0 goto label2;

        r9 = (org.jdom.Attribute) r0;

        $i0 = specialinvoke r10.<org.jdom.AttributeList: int indexOfDuplicate(org.jdom.Attribute)>(r9);

        if $i0 < 0 goto label1;

        $r11 = new org.jdom.IllegalAddException;

        specialinvoke $r11.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("Cannot add duplicate attribute");

        throw $r11;

     label1:
        virtualinvoke r10.<org.jdom.AttributeList: void add(int,org.jdom.Attribute)>(i1, r9);

        goto label4;

     label2:
        if r0 != null goto label3;

        $r8 = new org.jdom.IllegalAddException;

        specialinvoke $r8.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("Cannot add null attribute");

        throw $r8;

     label3:
        $r1 = new org.jdom.IllegalAddException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>("Class ");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an attribute");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.jdom.IllegalAddException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label4:
        $i2 = r10.<java.util.AbstractList: int modCount>;

        $i3 = $i2 + 1;

        r10.<java.util.AbstractList: int modCount> = $i3;

        return;
    }

    void add(int, org.jdom.Attribute)
    {
        java.lang.IndexOutOfBoundsException $r5;
        org.jdom.Attribute r0;
        org.jdom.Attribute[] $r12, $r13, $r14, $r15;
        java.lang.StringBuffer $r6, $r7, $r8, $r9, $r19, $r22, $r23;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        java.lang.String $r4, $r10, $r21, $r24;
        org.jdom.AttributeList r2;
        org.jdom.IllegalAddException $r16, $r18;
        org.jdom.Element $r1, $r3, $r11, $r17, $r20;

        r2 := @this: org.jdom.AttributeList;

        i0 := @parameter0: int;

        r0 := @parameter1: org.jdom.Attribute;

        $r1 = virtualinvoke r0.<org.jdom.Attribute: org.jdom.Element getParent()>();

        if $r1 == null goto label1;

        $r18 = new org.jdom.IllegalAddException;

        $r19 = new java.lang.StringBuffer;

        specialinvoke $r19.<java.lang.StringBuffer: void <init>(java.lang.String)>("The attribute already has an existing parent \"");

        $r20 = virtualinvoke r0.<org.jdom.Attribute: org.jdom.Element getParent()>();

        $r21 = virtualinvoke $r20.<org.jdom.Element: java.lang.String getQualifiedName()>();

        $r22 = virtualinvoke $r19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r24 = virtualinvoke $r23.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r18.<org.jdom.IllegalAddException: void <init>(java.lang.String)>($r24);

        throw $r18;

     label1:
        $r3 = r2.<org.jdom.AttributeList: org.jdom.Element parent>;

        $r4 = staticinvoke <org.jdom.Verifier: java.lang.String checkNamespaceCollision(org.jdom.Attribute,org.jdom.Element)>(r0, $r3);

        if $r4 == null goto label2;

        $r16 = new org.jdom.IllegalAddException;

        $r17 = r2.<org.jdom.AttributeList: org.jdom.Element parent>;

        specialinvoke $r16.<org.jdom.IllegalAddException: void <init>(org.jdom.Element,org.jdom.Attribute,java.lang.String)>($r17, r0, $r4);

        throw $r16;

     label2:
        if i0 < 0 goto label3;

        $i2 = r2.<org.jdom.AttributeList: int size>;

        if i0 <= $i2 goto label4;

     label3:
        $r5 = new java.lang.IndexOutOfBoundsException;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>(java.lang.String)>("Index: ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Size: ");

        $i1 = virtualinvoke r2.<org.jdom.AttributeList: int size()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r10);

        throw $r5;

     label4:
        $r11 = r2.<org.jdom.AttributeList: org.jdom.Element parent>;

        virtualinvoke r0.<org.jdom.Attribute: org.jdom.Attribute setParent(org.jdom.Element)>($r11);

        $i3 = r2.<org.jdom.AttributeList: int size>;

        $i4 = $i3 + 1;

        specialinvoke r2.<org.jdom.AttributeList: void ensureCapacity(int)>($i4);

        $i5 = r2.<org.jdom.AttributeList: int size>;

        if i0 != $i5 goto label5;

        $r15 = r2.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        $i13 = r2.<org.jdom.AttributeList: int size>;

        $i14 = $i13 + 1;

        r2.<org.jdom.AttributeList: int size> = $i14;

        $r15[$i13] = r0;

        goto label6;

     label5:
        $r13 = r2.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        $r12 = r2.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        $i8 = i0 + 1;

        $i6 = r2.<org.jdom.AttributeList: int size>;

        $i7 = $i6 - i0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, i0, $r12, $i8, $i7);

        $r14 = r2.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        $r14[i0] = r0;

        $i9 = r2.<org.jdom.AttributeList: int size>;

        $i10 = $i9 + 1;

        r2.<org.jdom.AttributeList: int size> = $i10;

     label6:
        $i11 = r2.<java.util.AbstractList: int modCount>;

        $i12 = $i11 + 1;

        r2.<java.util.AbstractList: int modCount> = $i12;

        return;
    }

    public boolean add(java.lang.Object)
    {
        org.jdom.Attribute r9;
        java.lang.StringBuffer $r2, $r5, $r6;
        org.jdom.AttributeList r10;
        int $i0, $i1;
        java.lang.Object r0;
        org.jdom.IllegalAddException $r1, $r8;
        java.lang.Class $r3;
        java.lang.String $r4, $r7;
        boolean $z0;

        r10 := @this: org.jdom.AttributeList;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof org.jdom.Attribute;

        if $z0 == 0 goto label2;

        r9 = (org.jdom.Attribute) r0;

        $i0 = specialinvoke r10.<org.jdom.AttributeList: int indexOfDuplicate(org.jdom.Attribute)>(r9);

        if $i0 >= 0 goto label1;

        $i1 = virtualinvoke r10.<org.jdom.AttributeList: int size()>();

        virtualinvoke r10.<org.jdom.AttributeList: void add(int,org.jdom.Attribute)>($i1, r9);

        goto label4;

     label1:
        virtualinvoke r10.<org.jdom.AttributeList: java.lang.Object set(int,org.jdom.Attribute)>($i0, r9);

        goto label4;

     label2:
        if r0 != null goto label3;

        $r8 = new org.jdom.IllegalAddException;

        specialinvoke $r8.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("Cannot add null attribute");

        throw $r8;

     label3:
        $r1 = new org.jdom.IllegalAddException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>("Class ");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an attribute");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.jdom.IllegalAddException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label4:
        return 1;
    }

    public boolean addAll(int, java.util.Collection)
    {
        java.lang.IndexOutOfBoundsException $r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        java.lang.String $r6;
        boolean $z0;
        java.util.Iterator $r8;
        java.util.Collection r7;
        java.lang.RuntimeException $r10;
        org.jdom.AttributeList r4;
        java.lang.Object $r9;

        r4 := @this: org.jdom.AttributeList;

        i0 := @parameter0: int;

        r7 := @parameter1: java.util.Collection;

        if i0 < 0 goto label01;

        $i2 = r4.<org.jdom.AttributeList: int size>;

        if i0 <= $i2 goto label02;

     label01:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("Index: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Size: ");

        $i1 = virtualinvoke r4.<org.jdom.AttributeList: int size()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label02:
        if r7 == null goto label03;

        $i3 = interfaceinvoke r7.<java.util.Collection: int size()>();

        if $i3 != 0 goto label04;

     label03:
        return 0;

     label04:
        $i4 = virtualinvoke r4.<org.jdom.AttributeList: int size()>();

        $i5 = interfaceinvoke r7.<java.util.Collection: int size()>();

        $i6 = $i4 + $i5;

        specialinvoke r4.<org.jdom.AttributeList: void ensureCapacity(int)>($i6);

        i8 = 0;

     label05:
        $r8 = interfaceinvoke r7.<java.util.Collection: java.util.Iterator iterator()>();

        goto label07;

     label06:
        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $i7 = i0 + i8;

        virtualinvoke r4.<org.jdom.AttributeList: void add(int,java.lang.Object)>($i7, $r9);

        i8 = i8 + 1;

     label07:
        $z0 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label06;

     label08:
        goto label12;

     label09:
        $r10 := @caughtexception;

        i9 = 0;

        goto label11;

     label10:
        virtualinvoke r4.<org.jdom.AttributeList: java.lang.Object remove(int)>(i0);

        i9 = i9 + 1;

     label11:
        if i9 < i8 goto label10;

        throw $r10;

     label12:
        return 1;

        catch java.lang.RuntimeException from label05 to label08 with label09;
    }

    public boolean addAll(java.util.Collection)
    {
        org.jdom.AttributeList r0;
        java.util.Collection r1;
        int $i0;
        boolean $z0;

        r0 := @this: org.jdom.AttributeList;

        r1 := @parameter0: java.util.Collection;

        $i0 = virtualinvoke r0.<org.jdom.AttributeList: int size()>();

        $z0 = virtualinvoke r0.<org.jdom.AttributeList: boolean addAll(int,java.util.Collection)>($i0, r1);

        return $z0;
    }

    public void clear()
    {
        org.jdom.Attribute r3;
        org.jdom.AttributeList r0;
        int $i0, $i1, $i2, i3;
        org.jdom.Attribute[] $r1, $r2;

        r0 := @this: org.jdom.AttributeList;

        $r1 = r0.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        if $r1 == null goto label3;

        i3 = 0;

        goto label2;

     label1:
        $r2 = r0.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        r3 = $r2[i3];

        virtualinvoke r3.<org.jdom.Attribute: org.jdom.Attribute setParent(org.jdom.Element)>(null);

        i3 = i3 + 1;

     label2:
        $i2 = r0.<org.jdom.AttributeList: int size>;

        if i3 < $i2 goto label1;

        r0.<org.jdom.AttributeList: org.jdom.Attribute[] elementData> = null;

        r0.<org.jdom.AttributeList: int size> = 0;

     label3:
        $i0 = r0.<java.util.AbstractList: int modCount>;

        $i1 = $i0 + 1;

        r0.<java.util.AbstractList: int modCount> = $i1;

        return;
    }

    void clearAndSet(java.util.Collection)
    {
        java.util.Collection r2;
        org.jdom.Attribute r3;
        java.lang.RuntimeException $r4;
        org.jdom.AttributeList r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        org.jdom.Attribute[] r1;

        r0 := @this: org.jdom.AttributeList;

        r2 := @parameter0: java.util.Collection;

        r1 = r0.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        i0 = r0.<org.jdom.AttributeList: int size>;

        r0.<org.jdom.AttributeList: org.jdom.Attribute[] elementData> = null;

        r0.<org.jdom.AttributeList: int size> = 0;

        if r2 == null goto label4;

        $i3 = interfaceinvoke r2.<java.util.Collection: int size()>();

        if $i3 == 0 goto label4;

        $i4 = interfaceinvoke r2.<java.util.Collection: int size()>();

        specialinvoke r0.<org.jdom.AttributeList: void ensureCapacity(int)>($i4);

     label1:
        virtualinvoke r0.<org.jdom.AttributeList: boolean addAll(int,java.util.Collection)>(0, r2);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        r0.<org.jdom.AttributeList: org.jdom.Attribute[] elementData> = r1;

        r0.<org.jdom.AttributeList: int size> = i0;

        throw $r4;

     label4:
        if r1 == null goto label7;

        i5 = 0;

        goto label6;

     label5:
        r3 = r1[i5];

        virtualinvoke r3.<org.jdom.Attribute: org.jdom.Attribute setParent(org.jdom.Element)>(null);

        i5 = i5 + 1;

     label6:
        if i5 < i0 goto label5;

     label7:
        $i1 = r0.<java.util.AbstractList: int modCount>;

        $i2 = $i1 + 1;

        r0.<java.util.AbstractList: int modCount> = $i2;

        return;

        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private void ensureCapacity(int)
    {
        org.jdom.AttributeList r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        org.jdom.Attribute[] $r1, $r2, r3, $r4, $r5, $r6;

        r0 := @this: org.jdom.AttributeList;

        i1 := @parameter0: int;

        $r1 = r0.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        if $r1 != null goto label1;

        $i5 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 5);

        $r6 = newarray (org.jdom.Attribute)[$i5];

        r0.<org.jdom.AttributeList: org.jdom.Attribute[] elementData> = $r6;

        goto label3;

     label1:
        $r2 = r0.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        i0 = lengthof $r2;

        if i1 <= i0 goto label3;

        r3 = r0.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        $i2 = i0 * 3;

        $i3 = $i2 / 2;

        i6 = $i3 + 1;

        if i6 >= i1 goto label2;

        i6 = i1;

     label2:
        $r4 = newarray (org.jdom.Attribute)[i6];

        r0.<org.jdom.AttributeList: org.jdom.Attribute[] elementData> = $r4;

        $r5 = r0.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        $i4 = r0.<org.jdom.AttributeList: int size>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, $r5, 0, $i4);

     label3:
        return;
    }

    public java.lang.Object get(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        org.jdom.Attribute $r8;
        java.lang.StringBuffer $r1, $r2, $r3, $r5;
        org.jdom.AttributeList r4;
        int i0, $i1, $i2;
        org.jdom.Attribute[] $r7;
        java.lang.String $r6;

        r4 := @this: org.jdom.AttributeList;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = r4.<org.jdom.AttributeList: int size>;

        if i0 < $i2 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("Index: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Size: ");

        $i1 = virtualinvoke r4.<org.jdom.AttributeList: int size()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label2:
        $r7 = r4.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        $r8 = $r7[i0];

        return $r8;
    }

    java.lang.Object get(java.lang.String, org.jdom.Namespace)
    {
        org.jdom.AttributeList r0;
        int $i0;
        org.jdom.Attribute[] $r3;
        org.jdom.Namespace r2;
        org.jdom.Attribute $r4;
        java.lang.String r1;

        r0 := @this: org.jdom.AttributeList;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.jdom.Namespace;

        $i0 = virtualinvoke r0.<org.jdom.AttributeList: int indexOf(java.lang.String,org.jdom.Namespace)>(r1, r2);

        if $i0 >= 0 goto label1;

        return null;

     label1:
        $r3 = r0.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        $r4 = $r3[$i0];

        return $r4;
    }

    int indexOf(java.lang.String, org.jdom.Namespace)
    {
        org.jdom.Attribute r5;
        org.jdom.AttributeList r2;
        int i0, $i1, $i3;
        org.jdom.Attribute[] $r3, $r4;
        org.jdom.Namespace r0;
        java.lang.String $r1, $r6, $r7, r8;
        boolean $z0, $z1;

        r2 := @this: org.jdom.AttributeList;

        r8 := @parameter0: java.lang.String;

        r0 := @parameter1: org.jdom.Namespace;

        $r1 = virtualinvoke r0.<org.jdom.Namespace: java.lang.String getURI()>();

        $r3 = r2.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        if $r3 == null goto label4;

        i0 = 0;

        goto label3;

     label1:
        $r4 = r2.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        r5 = $r4[i0];

        $r6 = virtualinvoke r5.<org.jdom.Attribute: java.lang.String getNamespaceURI()>();

        $r7 = virtualinvoke r5.<org.jdom.Attribute: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r8);

        if $z1 == 0 goto label2;

        return i0;

     label2:
        i0 = i0 + 1;

     label3:
        $i1 = r2.<org.jdom.AttributeList: int size>;

        if i0 < $i1 goto label1;

     label4:
        $i3 = (int) -1;

        return $i3;
    }

    private int indexOfDuplicate(org.jdom.Attribute)
    {
        org.jdom.AttributeList r3;
        int $i0;
        org.jdom.Attribute r0;
        org.jdom.Namespace $r2;
        java.lang.String $r1;

        r3 := @this: org.jdom.AttributeList;

        r0 := @parameter0: org.jdom.Attribute;

        $r1 = virtualinvoke r0.<org.jdom.Attribute: java.lang.String getName()>();

        $r2 = virtualinvoke r0.<org.jdom.Attribute: org.jdom.Namespace getNamespace()>();

        $i0 = virtualinvoke r3.<org.jdom.AttributeList: int indexOf(java.lang.String,org.jdom.Namespace)>($r1, $r2);

        return $i0;
    }

    public java.lang.Object remove(int)
    {
        java.lang.IndexOutOfBoundsException $r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r5;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r6;
        org.jdom.Attribute r8;
        org.jdom.AttributeList r4;
        org.jdom.Attribute[] $r7, $r9, $r10, $r11;

        r4 := @this: org.jdom.AttributeList;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $i2 = r4.<org.jdom.AttributeList: int size>;

        if i0 < $i2 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("Index: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Size: ");

        $i1 = virtualinvoke r4.<org.jdom.AttributeList: int size()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label2:
        $r7 = r4.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        r8 = $r7[i0];

        virtualinvoke r8.<org.jdom.Attribute: org.jdom.Attribute setParent(org.jdom.Element)>(null);

        $i3 = r4.<org.jdom.AttributeList: int size>;

        $i4 = $i3 - i0;

        i5 = $i4 - 1;

        if i5 <= 0 goto label3;

        $r11 = r4.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        $i10 = i0 + 1;

        $r10 = r4.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r11, $i10, $r10, i0, i5);

     label3:
        $r9 = r4.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        $i6 = r4.<org.jdom.AttributeList: int size>;

        $i7 = $i6 - 1;

        r4.<org.jdom.AttributeList: int size> = $i7;

        $r9[$i7] = null;

        $i8 = r4.<java.util.AbstractList: int modCount>;

        $i9 = $i8 + 1;

        r4.<java.util.AbstractList: int modCount> = $i9;

        return r8;
    }

    boolean remove(java.lang.String, org.jdom.Namespace)
    {
        org.jdom.AttributeList r0;
        int $i0;
        org.jdom.Namespace r2;
        java.lang.String r1;

        r0 := @this: org.jdom.AttributeList;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: org.jdom.Namespace;

        $i0 = virtualinvoke r0.<org.jdom.AttributeList: int indexOf(java.lang.String,org.jdom.Namespace)>(r1, r2);

        if $i0 >= 0 goto label1;

        return 0;

     label1:
        virtualinvoke r0.<org.jdom.AttributeList: java.lang.Object remove(int)>($i0);

        return 1;
    }

    public java.lang.Object set(int, java.lang.Object)
    {
        java.lang.StringBuffer $r2, $r5, $r6;
        int $i0, i1;
        java.lang.String $r4, $r7;
        boolean $z0;
        org.jdom.Attribute r9;
        org.jdom.AttributeList r10;
        java.lang.Object r0, $r11;
        org.jdom.IllegalAddException $r1, $r8, $r12;
        java.lang.Class $r3;

        r10 := @this: org.jdom.AttributeList;

        i1 := @parameter0: int;

        r0 := @parameter1: java.lang.Object;

        $z0 = r0 instanceof org.jdom.Attribute;

        if $z0 == 0 goto label2;

        r9 = (org.jdom.Attribute) r0;

        $i0 = specialinvoke r10.<org.jdom.AttributeList: int indexOfDuplicate(org.jdom.Attribute)>(r9);

        if $i0 < 0 goto label1;

        if $i0 == i1 goto label1;

        $r12 = new org.jdom.IllegalAddException;

        specialinvoke $r12.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("Cannot set duplicate attribute");

        throw $r12;

     label1:
        $r11 = virtualinvoke r10.<org.jdom.AttributeList: java.lang.Object set(int,org.jdom.Attribute)>(i1, r9);

        return $r11;

     label2:
        if r0 != null goto label3;

        $r8 = new org.jdom.IllegalAddException;

        specialinvoke $r8.<org.jdom.IllegalAddException: void <init>(java.lang.String)>("Cannot add null attribute");

        throw $r8;

     label3:
        $r1 = new org.jdom.IllegalAddException;

        $r2 = new java.lang.StringBuffer;

        specialinvoke $r2.<java.lang.StringBuffer: void <init>(java.lang.String)>("Class ");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" is not an attribute");

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r1.<org.jdom.IllegalAddException: void <init>(java.lang.String)>($r7);

        throw $r1;
    }

    java.lang.Object set(int, org.jdom.Attribute)
    {
        java.lang.IndexOutOfBoundsException $r0;
        java.lang.StringBuffer $r1, $r2, $r3, $r5, $r18, $r21, $r22;
        int i0, $i1, $i2;
        java.lang.String $r6, $r10, $r20, $r23;
        org.jdom.Attribute r7, r12;
        org.jdom.AttributeList r4;
        org.jdom.Attribute[] $r11, $r13;
        org.jdom.IllegalAddException $r15, $r17;
        org.jdom.Element $r8, $r9, $r14, $r16, $r19;

        r4 := @this: org.jdom.AttributeList;

        i0 := @parameter0: int;

        r7 := @parameter1: org.jdom.Attribute;

        if i0 < 0 goto label1;

        $i2 = r4.<org.jdom.AttributeList: int size>;

        if i0 < $i2 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>(java.lang.String)>("Index: ");

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" Size: ");

        $i1 = virtualinvoke r4.<org.jdom.AttributeList: int size()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        throw $r0;

     label2:
        $r8 = virtualinvoke r7.<org.jdom.Attribute: org.jdom.Element getParent()>();

        if $r8 == null goto label3;

        $r17 = new org.jdom.IllegalAddException;

        $r18 = new java.lang.StringBuffer;

        specialinvoke $r18.<java.lang.StringBuffer: void <init>(java.lang.String)>("The attribute already has an existing parent \"");

        $r19 = virtualinvoke r7.<org.jdom.Attribute: org.jdom.Element getParent()>();

        $r20 = virtualinvoke $r19.<org.jdom.Element: java.lang.String getQualifiedName()>();

        $r21 = virtualinvoke $r18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r23 = virtualinvoke $r22.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r17.<org.jdom.IllegalAddException: void <init>(java.lang.String)>($r23);

        throw $r17;

     label3:
        $r9 = r4.<org.jdom.AttributeList: org.jdom.Element parent>;

        $r10 = staticinvoke <org.jdom.Verifier: java.lang.String checkNamespaceCollision(org.jdom.Attribute,org.jdom.Element)>(r7, $r9);

        if $r10 == null goto label4;

        $r15 = new org.jdom.IllegalAddException;

        $r16 = r4.<org.jdom.AttributeList: org.jdom.Element parent>;

        specialinvoke $r15.<org.jdom.IllegalAddException: void <init>(org.jdom.Element,org.jdom.Attribute,java.lang.String)>($r16, r7, $r10);

        throw $r15;

     label4:
        $r11 = r4.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        r12 = $r11[i0];

        virtualinvoke r12.<org.jdom.Attribute: org.jdom.Attribute setParent(org.jdom.Element)>(null);

        $r13 = r4.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        $r13[i0] = r7;

        $r14 = r4.<org.jdom.AttributeList: org.jdom.Element parent>;

        virtualinvoke r7.<org.jdom.Attribute: org.jdom.Attribute setParent(org.jdom.Element)>($r14);

        return r12;
    }

    public int size()
    {
        int $i0;
        org.jdom.AttributeList r0;

        r0 := @this: org.jdom.AttributeList;

        $i0 = r0.<org.jdom.AttributeList: int size>;

        return $i0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r1;
        org.jdom.AttributeList r0;

        r0 := @this: org.jdom.AttributeList;

        $r1 = specialinvoke r0.<java.util.AbstractCollection: java.lang.String toString()>();

        return $r1;
    }

    final void uncheckedAddAttribute(org.jdom.Attribute)
    {
        org.jdom.Attribute r0;
        org.jdom.AttributeList r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.jdom.Attribute[] $r3;
        org.jdom.Element $r2;

        r1 := @this: org.jdom.AttributeList;

        r0 := @parameter0: org.jdom.Attribute;

        $r2 = r1.<org.jdom.AttributeList: org.jdom.Element parent>;

        r0.<org.jdom.Attribute: java.lang.Object parent> = $r2;

        $i0 = r1.<org.jdom.AttributeList: int size>;

        $i1 = $i0 + 1;

        specialinvoke r1.<org.jdom.AttributeList: void ensureCapacity(int)>($i1);

        $r3 = r1.<org.jdom.AttributeList: org.jdom.Attribute[] elementData>;

        $i2 = r1.<org.jdom.AttributeList: int size>;

        $i3 = $i2 + 1;

        r1.<org.jdom.AttributeList: int size> = $i3;

        $r3[$i2] = r0;

        $i4 = r1.<java.util.AbstractList: int modCount>;

        $i5 = $i4 + 1;

        r1.<java.util.AbstractList: int modCount> = $i5;

        return;
    }

    public static void <clinit>()
    {
        <org.jdom.AttributeList: int INITIAL_ARRAY_SIZE> = 5;

        <org.jdom.AttributeList: java.lang.String CVS_ID> = "@(#) $RCSfile: AttributeList.java,v $ $Revision: 1.23 $ $Date: 2004/02/28 03:30:27 $ $Name: jdom_1_0 $";

        return;
    }
}
