class org.apache.http.pool.AbstractConnPool$2 extends org.apache.http.pool.PoolEntryFuture
{
    final java.lang.Object val$route;
    final java.lang.Object val$state;
    final org.apache.http.pool.AbstractConnPool this$0;

    void <init>(org.apache.http.pool.AbstractConnPool, java.util.concurrent.locks.Lock, org.apache.http.concurrent.FutureCallback, java.lang.Object, java.lang.Object) throws java.util.concurrent.TimeoutException, java.lang.InterruptedException, java.io.IOException
    {
        org.apache.http.pool.AbstractConnPool r1;
        org.apache.http.pool.AbstractConnPool$2 r0;
        java.util.concurrent.locks.Lock r4;
        java.lang.Object r2, r3;
        org.apache.http.concurrent.FutureCallback r5;

        r0 := @this: org.apache.http.pool.AbstractConnPool$2;

        r1 := @parameter0: org.apache.http.pool.AbstractConnPool;

        r4 := @parameter1: java.util.concurrent.locks.Lock;

        r5 := @parameter2: org.apache.http.concurrent.FutureCallback;

        r2 := @parameter3: java.lang.Object;

        r3 := @parameter4: java.lang.Object;

        r0.<org.apache.http.pool.AbstractConnPool$2: org.apache.http.pool.AbstractConnPool this$0> = r1;

        r0.<org.apache.http.pool.AbstractConnPool$2: java.lang.Object val$route> = r2;

        r0.<org.apache.http.pool.AbstractConnPool$2: java.lang.Object val$state> = r3;

        specialinvoke r0.<org.apache.http.pool.PoolEntryFuture: void <init>(java.util.concurrent.locks.Lock,org.apache.http.concurrent.FutureCallback)>(r4, r5);

        return;
    }

    public org.apache.http.pool.PoolEntry getPoolEntry(long, java.util.concurrent.TimeUnit) throws java.lang.InterruptedException, java.util.concurrent.TimeoutException, java.io.IOException
    {
        java.util.concurrent.TimeUnit r1;
        org.apache.http.pool.AbstractConnPool $r4;
        org.apache.http.pool.AbstractConnPool$2 r0;
        org.apache.http.pool.PoolEntry $r5;
        long l0;
        java.lang.Object $r2, $r3;

        r0 := @this: org.apache.http.pool.AbstractConnPool$2;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r4 = r0.<org.apache.http.pool.AbstractConnPool$2: org.apache.http.pool.AbstractConnPool this$0>;

        $r3 = r0.<org.apache.http.pool.AbstractConnPool$2: java.lang.Object val$route>;

        $r2 = r0.<org.apache.http.pool.AbstractConnPool$2: java.lang.Object val$state>;

        $r5 = staticinvoke <org.apache.http.pool.AbstractConnPool: org.apache.http.pool.PoolEntry access$000(org.apache.http.pool.AbstractConnPool,java.lang.Object,java.lang.Object,long,java.util.concurrent.TimeUnit,org.apache.http.pool.PoolEntryFuture)>($r4, $r3, $r2, l0, r1, r0);

        return $r5;
    }

    public volatile java.lang.Object getPoolEntry(long, java.util.concurrent.TimeUnit) throws java.io.IOException, java.lang.InterruptedException, java.util.concurrent.TimeoutException
    {
        java.util.concurrent.TimeUnit r1;
        org.apache.http.pool.AbstractConnPool$2 r0;
        org.apache.http.pool.PoolEntry $r2;
        long l0;

        r0 := @this: org.apache.http.pool.AbstractConnPool$2;

        l0 := @parameter0: long;

        r1 := @parameter1: java.util.concurrent.TimeUnit;

        $r2 = virtualinvoke r0.<org.apache.http.pool.AbstractConnPool$2: org.apache.http.pool.PoolEntry getPoolEntry(long,java.util.concurrent.TimeUnit)>(l0, r1);

        return $r2;
    }
}
