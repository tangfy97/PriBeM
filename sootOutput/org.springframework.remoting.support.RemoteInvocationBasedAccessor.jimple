public abstract class org.springframework.remoting.support.RemoteInvocationBasedAccessor extends org.springframework.remoting.support.UrlBasedRemoteAccessor
{
    private org.springframework.remoting.support.RemoteInvocationFactory remoteInvocationFactory;

    public void <init>()
    {
        org.springframework.remoting.support.DefaultRemoteInvocationFactory $r1;
        org.springframework.remoting.support.RemoteInvocationBasedAccessor r0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationBasedAccessor;

        specialinvoke r0.<org.springframework.remoting.support.UrlBasedRemoteAccessor: void <init>()>();

        $r1 = new org.springframework.remoting.support.DefaultRemoteInvocationFactory;

        specialinvoke $r1.<org.springframework.remoting.support.DefaultRemoteInvocationFactory: void <init>()>();

        r0.<org.springframework.remoting.support.RemoteInvocationBasedAccessor: org.springframework.remoting.support.RemoteInvocationFactory remoteInvocationFactory> = $r1;

        return;
    }

    public void setRemoteInvocationFactory(org.springframework.remoting.support.RemoteInvocationFactory)
    {
        org.springframework.remoting.support.RemoteInvocationFactory r1, $r2;
        org.springframework.remoting.support.DefaultRemoteInvocationFactory $r3;
        org.springframework.remoting.support.RemoteInvocationBasedAccessor r0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationBasedAccessor;

        r1 := @parameter0: org.springframework.remoting.support.RemoteInvocationFactory;

        if r1 == null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r3 = new org.springframework.remoting.support.DefaultRemoteInvocationFactory;

        $r2 = $r3;

        specialinvoke $r3.<org.springframework.remoting.support.DefaultRemoteInvocationFactory: void <init>()>();

     label2:
        r0.<org.springframework.remoting.support.RemoteInvocationBasedAccessor: org.springframework.remoting.support.RemoteInvocationFactory remoteInvocationFactory> = $r2;

        return;
    }

    public org.springframework.remoting.support.RemoteInvocationFactory getRemoteInvocationFactory()
    {
        org.springframework.remoting.support.RemoteInvocationFactory $r1;
        org.springframework.remoting.support.RemoteInvocationBasedAccessor r0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationBasedAccessor;

        $r1 = r0.<org.springframework.remoting.support.RemoteInvocationBasedAccessor: org.springframework.remoting.support.RemoteInvocationFactory remoteInvocationFactory>;

        return $r1;
    }

    protected org.springframework.remoting.support.RemoteInvocation createRemoteInvocation(org.aopalliance.intercept.MethodInvocation)
    {
        org.springframework.remoting.support.RemoteInvocationFactory $r1;
        org.aopalliance.intercept.MethodInvocation r2;
        org.springframework.remoting.support.RemoteInvocation $r3;
        org.springframework.remoting.support.RemoteInvocationBasedAccessor r0;

        r0 := @this: org.springframework.remoting.support.RemoteInvocationBasedAccessor;

        r2 := @parameter0: org.aopalliance.intercept.MethodInvocation;

        $r1 = virtualinvoke r0.<org.springframework.remoting.support.RemoteInvocationBasedAccessor: org.springframework.remoting.support.RemoteInvocationFactory getRemoteInvocationFactory()>();

        $r3 = interfaceinvoke $r1.<org.springframework.remoting.support.RemoteInvocationFactory: org.springframework.remoting.support.RemoteInvocation createRemoteInvocation(org.aopalliance.intercept.MethodInvocation)>(r2);

        return $r3;
    }

    protected java.lang.Object recreateRemoteInvocationResult(org.springframework.remoting.support.RemoteInvocationResult) throws java.lang.Throwable
    {
        java.lang.Object $r1;
        org.springframework.remoting.support.RemoteInvocationResult r0;
        org.springframework.remoting.support.RemoteInvocationBasedAccessor r2;

        r2 := @this: org.springframework.remoting.support.RemoteInvocationBasedAccessor;

        r0 := @parameter0: org.springframework.remoting.support.RemoteInvocationResult;

        $r1 = virtualinvoke r0.<org.springframework.remoting.support.RemoteInvocationResult: java.lang.Object recreate()>();

        return $r1;
    }
}
