public class ucar.ma2.ArrayStructureBB extends ucar.ma2.ArrayStructure
{
    protected java.nio.ByteBuffer bbuffer;
    protected int bb_offset;
    private java.util.List heap;

    public static int setOffsets(ucar.ma2.StructureMembers)
    {
        java.util.Iterator $r2;
        ucar.ma2.StructureMembers$Member r4;
        java.util.List $r1;
        ucar.ma2.StructureMembers r0, $r5, $r6;
        int $i0, i1;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @parameter0: ucar.ma2.StructureMembers;

        i1 = 0;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers: java.util.List getMembers()>();

        $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (ucar.ma2.StructureMembers$Member) $r3;

        virtualinvoke r4.<ucar.ma2.StructureMembers$Member: void setDataParam(int)>(i1);

        $i0 = virtualinvoke r4.<ucar.ma2.StructureMembers$Member: int getSizeBytes()>();

        i1 = i1 + $i0;

        $r5 = virtualinvoke r4.<ucar.ma2.StructureMembers$Member: ucar.ma2.StructureMembers getStructureMembers()>();

        if $r5 == null goto label2;

        $r6 = virtualinvoke r4.<ucar.ma2.StructureMembers$Member: ucar.ma2.StructureMembers getStructureMembers()>();

        staticinvoke <ucar.ma2.ArrayStructureBB: int setOffsets(ucar.ma2.StructureMembers)>($r6);

     label2:
        goto label1;

     label3:
        virtualinvoke r0.<ucar.ma2.StructureMembers: void setStructureSize(int)>(i1);

        return i1;
    }

    public void <init>(ucar.ma2.StructureMembers, int[])
    {
        java.nio.ByteBuffer $r3, $r5;
        java.nio.ByteOrder $r4;
        ucar.ma2.StructureMembers r1;
        ucar.ma2.ArrayStructureBB r0;
        int[] r2;
        int $i0, $i1, $i2;

        r0 := @this: ucar.ma2.ArrayStructureBB;

        r1 := @parameter0: ucar.ma2.StructureMembers;

        r2 := @parameter1: int[];

        specialinvoke r0.<ucar.ma2.ArrayStructure: void <init>(ucar.ma2.StructureMembers,int[])>(r1, r2);

        r0.<ucar.ma2.ArrayStructureBB: int bb_offset> = 0;

        $i0 = r0.<ucar.ma2.ArrayStructureBB: int nelems>;

        $i1 = virtualinvoke r0.<ucar.ma2.ArrayStructureBB: int getStructureSize()>();

        $i2 = $i0 * $i1;

        $r3 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i2);

        r0.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer> = $r3;

        $r5 = r0.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $r4 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        virtualinvoke $r5.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r4);

        return;
    }

    public void <init>(ucar.ma2.StructureMembers, int[], java.nio.ByteBuffer, int)
    {
        ucar.ma2.StructureMembers r1;
        ucar.ma2.ArrayStructureBB r0;
        int[] r2;
        int i0;
        java.nio.ByteBuffer r3;

        r0 := @this: ucar.ma2.ArrayStructureBB;

        r1 := @parameter0: ucar.ma2.StructureMembers;

        r2 := @parameter1: int[];

        r3 := @parameter2: java.nio.ByteBuffer;

        i0 := @parameter3: int;

        specialinvoke r0.<ucar.ma2.ArrayStructure: void <init>(ucar.ma2.StructureMembers,int[])>(r1, r2);

        r0.<ucar.ma2.ArrayStructureBB: int bb_offset> = 0;

        r0.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer> = r3;

        r0.<ucar.ma2.ArrayStructureBB: int bb_offset> = i0;

        return;
    }

    protected ucar.ma2.StructureData makeStructureData(ucar.ma2.ArrayStructure, int)
    {
        ucar.ma2.StructureDataA $r0;
        ucar.ma2.ArrayStructure r1;
        ucar.ma2.ArrayStructureBB r2;
        int i0;

        r2 := @this: ucar.ma2.ArrayStructureBB;

        r1 := @parameter0: ucar.ma2.ArrayStructure;

        i0 := @parameter1: int;

        $r0 = new ucar.ma2.StructureDataA;

        specialinvoke $r0.<ucar.ma2.StructureDataA: void <init>(ucar.ma2.ArrayStructure,int)>(r1, i0);

        return $r0;
    }

    public java.nio.ByteBuffer getByteBuffer()
    {
        ucar.ma2.ArrayStructureBB r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: ucar.ma2.ArrayStructureBB;

        $r1 = r0.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        return $r1;
    }

    public double getScalarDouble(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r5;
        ucar.ma2.ArrayStructureBB r4;
        int i0, $i1;
        java.lang.String $r12;
        double $d0, $d1;
        ucar.ma2.DataType $r1, $r2, $r9;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r1 == $r2 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r9 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be double");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $d1 = specialinvoke r4.<ucar.ma2.ArrayStructure: double getScalarDouble(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $d1;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r5 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $d0 = virtualinvoke $r5.<java.nio.ByteBuffer: double getDouble(int)>($i1);

        return $d0;
    }

    public double[] getJavaArrayDouble(int, ucar.ma2.StructureMembers$Member)
    {
        double[] r5, $r7;
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r6;
        ucar.ma2.ArrayStructureBB r4;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r14;
        double $d0;
        ucar.ma2.DataType $r1, $r2, $r11;
        java.lang.IllegalArgumentException $r8;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r9, $r10, $r12, $r13;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType DOUBLE>;

        if $r1 == $r2 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r11 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be double");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $r7 = specialinvoke r4.<ucar.ma2.ArrayStructure: double[] getJavaArrayDouble(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r7;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $i2 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        r5 = newarray (double)[$i2];

        i5 = 0;

     label3:
        if i5 >= $i2 goto label4;

        $r6 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = i5 * 8;

        $i4 = $i1 + $i3;

        $d0 = virtualinvoke $r6.<java.nio.ByteBuffer: double getDouble(int)>($i4);

        r5[i5] = $d0;

        i5 = i5 + 1;

        goto label3;

     label4:
        return r5;
    }

    protected void copyDoubles(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.IndexIterator r2;
        ucar.ma2.StructureMembers$Member r1;
        java.nio.ByteBuffer $r3;
        ucar.ma2.ArrayStructureBB r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        double $d0;

        r0 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r2 := @parameter2: ucar.ma2.IndexIterator;

        $i1 = virtualinvoke r0.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $i2 = virtualinvoke r1.<ucar.ma2.StructureMembers$Member: int getSize()>();

        i5 = 0;

     label1:
        if i5 >= $i2 goto label2;

        $r3 = r0.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = i5 * 8;

        $i4 = $i1 + $i3;

        $d0 = virtualinvoke $r3.<java.nio.ByteBuffer: double getDouble(int)>($i4);

        interfaceinvoke r2.<ucar.ma2.IndexIterator: void setDoubleNext(double)>($d0);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public float getScalarFloat(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r5;
        ucar.ma2.ArrayStructureBB r4;
        int i0, $i1;
        java.lang.String $r12;
        ucar.ma2.DataType $r1, $r2, $r9;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array $r3;
        float $f0, $f1;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r1 == $r2 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r9 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be float");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $f1 = specialinvoke r4.<ucar.ma2.ArrayStructure: float getScalarFloat(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $f1;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r5 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $f0 = virtualinvoke $r5.<java.nio.ByteBuffer: float getFloat(int)>($i1);

        return $f0;
    }

    public float[] getJavaArrayFloat(int, ucar.ma2.StructureMembers$Member)
    {
        float[] r5, $r7;
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r6;
        ucar.ma2.ArrayStructureBB r4;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.lang.String $r14;
        ucar.ma2.DataType $r1, $r2, $r11;
        java.lang.IllegalArgumentException $r8;
        ucar.ma2.Array $r3;
        float $f0;
        java.lang.StringBuilder $r9, $r10, $r12, $r13;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType FLOAT>;

        if $r1 == $r2 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r11 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be float");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $r7 = specialinvoke r4.<ucar.ma2.ArrayStructure: float[] getJavaArrayFloat(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r7;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $i2 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        r5 = newarray (float)[$i2];

        i5 = 0;

     label3:
        if i5 >= $i2 goto label4;

        $r6 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = i5 * 4;

        $i4 = $i1 + $i3;

        $f0 = virtualinvoke $r6.<java.nio.ByteBuffer: float getFloat(int)>($i4);

        r5[i5] = $f0;

        i5 = i5 + 1;

        goto label3;

     label4:
        return r5;
    }

    protected void copyFloats(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.IndexIterator r2;
        ucar.ma2.StructureMembers$Member r1;
        java.nio.ByteBuffer $r3;
        ucar.ma2.ArrayStructureBB r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        float $f0;

        r0 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r2 := @parameter2: ucar.ma2.IndexIterator;

        $i1 = virtualinvoke r0.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $i2 = virtualinvoke r1.<ucar.ma2.StructureMembers$Member: int getSize()>();

        i5 = 0;

     label1:
        if i5 >= $i2 goto label2;

        $r3 = r0.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = i5 * 4;

        $i4 = $i1 + $i3;

        $f0 = virtualinvoke $r3.<java.nio.ByteBuffer: float getFloat(int)>($i4);

        interfaceinvoke r2.<ucar.ma2.IndexIterator: void setFloatNext(float)>($f0);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public byte getScalarByte(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r5;
        ucar.ma2.ArrayStructureBB r4;
        byte $b2, $b3;
        int i0, $i1;
        java.lang.String $r14;
        ucar.ma2.DataType $r1, $r2, $r6, $r7, $r11;
        java.lang.IllegalArgumentException $r8;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r9, $r10, $r12, $r13;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r1 == $r2 goto label1;

        $r6 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if $r6 == $r7 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r11 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be byte");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $b3 = specialinvoke r4.<ucar.ma2.ArrayStructure: byte getScalarByte(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $b3;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r5 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $b2 = virtualinvoke $r5.<java.nio.ByteBuffer: byte get(int)>($i1);

        return $b2;
    }

    public byte[] getJavaArrayByte(int, ucar.ma2.StructureMembers$Member)
    {
        byte[] r5, $r7;
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r6;
        ucar.ma2.ArrayStructureBB r4;
        byte $b4;
        int i0, $i1, $i2, $i3, i5;
        java.lang.String $r16;
        ucar.ma2.DataType $r1, $r2, $r8, $r9, $r13;
        java.lang.IllegalArgumentException $r10;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r11, $r12, $r14, $r15;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType BYTE>;

        if $r1 == $r2 goto label1;

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM1>;

        if $r8 == $r9 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r13 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be byte");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $r7 = specialinvoke r4.<ucar.ma2.ArrayStructure: byte[] getJavaArrayByte(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r7;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $i2 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        r5 = newarray (byte)[$i2];

        i5 = 0;

     label3:
        if i5 >= $i2 goto label4;

        $r6 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = $i1 + i5;

        $b4 = virtualinvoke $r6.<java.nio.ByteBuffer: byte get(int)>($i3);

        r5[i5] = $b4;

        i5 = i5 + 1;

        goto label3;

     label4:
        return r5;
    }

    protected void copyBytes(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.IndexIterator r2;
        ucar.ma2.StructureMembers$Member r1;
        java.nio.ByteBuffer $r3;
        ucar.ma2.ArrayStructureBB r0;
        byte $b4;
        int i0, $i1, $i2, $i3, i5;

        r0 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r2 := @parameter2: ucar.ma2.IndexIterator;

        $i1 = virtualinvoke r0.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $i2 = virtualinvoke r1.<ucar.ma2.StructureMembers$Member: int getSize()>();

        i5 = 0;

     label1:
        if i5 >= $i2 goto label2;

        $r3 = r0.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = $i1 + i5;

        $b4 = virtualinvoke $r3.<java.nio.ByteBuffer: byte get(int)>($i3);

        interfaceinvoke r2.<ucar.ma2.IndexIterator: void setByteNext(byte)>($b4);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    public short getScalarShort(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r5;
        short $s2, $s3;
        ucar.ma2.ArrayStructureBB r4;
        int i0, $i1;
        java.lang.String $r14;
        ucar.ma2.DataType $r1, $r2, $r6, $r7, $r11;
        java.lang.IllegalArgumentException $r8;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r9, $r10, $r12, $r13;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r1 == $r2 goto label1;

        $r6 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if $r6 == $r7 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r11 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be short");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $s3 = specialinvoke r4.<ucar.ma2.ArrayStructure: short getScalarShort(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $s3;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r5 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $s2 = virtualinvoke $r5.<java.nio.ByteBuffer: short getShort(int)>($i1);

        return $s2;
    }

    public short[] getJavaArrayShort(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r6;
        short $s5;
        ucar.ma2.ArrayStructureBB r4;
        int i0, $i1, $i2, $i3, $i4, i6;
        java.lang.String $r16;
        ucar.ma2.DataType $r1, $r2, $r8, $r9, $r13;
        java.lang.IllegalArgumentException $r10;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r11, $r12, $r14, $r15;
        short[] r5, $r7;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType SHORT>;

        if $r1 == $r2 goto label1;

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM2>;

        if $r8 == $r9 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r13 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be short");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $r7 = specialinvoke r4.<ucar.ma2.ArrayStructure: short[] getJavaArrayShort(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r7;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $i2 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        r5 = newarray (short)[$i2];

        i6 = 0;

     label3:
        if i6 >= $i2 goto label4;

        $r6 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = i6 * 2;

        $i4 = $i1 + $i3;

        $s5 = virtualinvoke $r6.<java.nio.ByteBuffer: short getShort(int)>($i4);

        r5[i6] = $s5;

        i6 = i6 + 1;

        goto label3;

     label4:
        return r5;
    }

    protected void copyShorts(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.IndexIterator r2;
        ucar.ma2.StructureMembers$Member r1;
        java.nio.ByteBuffer $r3;
        short $s5;
        ucar.ma2.ArrayStructureBB r0;
        int i0, $i1, $i2, $i3, $i4, i6;

        r0 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r2 := @parameter2: ucar.ma2.IndexIterator;

        $i1 = virtualinvoke r0.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $i2 = virtualinvoke r1.<ucar.ma2.StructureMembers$Member: int getSize()>();

        i6 = 0;

     label1:
        if i6 >= $i2 goto label2;

        $r3 = r0.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = i6 * 2;

        $i4 = $i1 + $i3;

        $s5 = virtualinvoke $r3.<java.nio.ByteBuffer: short getShort(int)>($i4);

        interfaceinvoke r2.<ucar.ma2.IndexIterator: void setShortNext(short)>($s5);

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }

    public int getScalarInt(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r5;
        ucar.ma2.ArrayStructureBB r4;
        int i0, $i1, $i2, $i3;
        java.lang.String $r14;
        ucar.ma2.DataType $r1, $r2, $r6, $r7, $r11;
        java.lang.IllegalArgumentException $r8;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r9, $r10, $r12, $r13;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r1 == $r2 goto label1;

        $r6 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r7 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if $r6 == $r7 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r11 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be int");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $i3 = specialinvoke r4.<ucar.ma2.ArrayStructure: int getScalarInt(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $i3;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r5 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i2 = virtualinvoke $r5.<java.nio.ByteBuffer: int getInt(int)>($i1);

        return $i2;
    }

    public int[] getJavaArrayInt(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r6;
        ucar.ma2.ArrayStructureBB r4;
        int[] r5, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.String $r16;
        ucar.ma2.DataType $r1, $r2, $r8, $r9, $r13;
        java.lang.IllegalArgumentException $r10;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r11, $r12, $r14, $r15;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType INT>;

        if $r1 == $r2 goto label1;

        $r8 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r9 = <ucar.ma2.DataType: ucar.ma2.DataType ENUM4>;

        if $r8 == $r9 goto label1;

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r13 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be int");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r10;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $r7 = specialinvoke r4.<ucar.ma2.ArrayStructure: int[] getJavaArrayInt(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r7;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $i2 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        r5 = newarray (int)[$i2];

        i6 = 0;

     label3:
        if i6 >= $i2 goto label4;

        $r6 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = i6 * 4;

        $i4 = $i1 + $i3;

        $i5 = virtualinvoke $r6.<java.nio.ByteBuffer: int getInt(int)>($i4);

        r5[i6] = $i5;

        i6 = i6 + 1;

        goto label3;

     label4:
        return r5;
    }

    protected void copyInts(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.IndexIterator r2;
        ucar.ma2.StructureMembers$Member r1;
        java.nio.ByteBuffer $r3;
        ucar.ma2.ArrayStructureBB r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;

        r0 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r2 := @parameter2: ucar.ma2.IndexIterator;

        $i1 = virtualinvoke r0.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $i2 = virtualinvoke r1.<ucar.ma2.StructureMembers$Member: int getSize()>();

        i6 = 0;

     label1:
        if i6 >= $i2 goto label2;

        $r3 = r0.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = i6 * 4;

        $i4 = $i1 + $i3;

        $i5 = virtualinvoke $r3.<java.nio.ByteBuffer: int getInt(int)>($i4);

        interfaceinvoke r2.<ucar.ma2.IndexIterator: void setIntNext(int)>($i5);

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }

    public long getScalarLong(int, ucar.ma2.StructureMembers$Member)
    {
        long $l2, $l3;
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r5;
        ucar.ma2.ArrayStructureBB r4;
        int i0, $i1;
        java.lang.String $r12;
        ucar.ma2.DataType $r1, $r2, $r9;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if $r1 == $r2 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r9 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be long");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $l3 = specialinvoke r4.<ucar.ma2.ArrayStructure: long getScalarLong(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $l3;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r5 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $l2 = virtualinvoke $r5.<java.nio.ByteBuffer: long getLong(int)>($i1);

        return $l2;
    }

    public long[] getJavaArrayLong(int, ucar.ma2.StructureMembers$Member)
    {
        long $l5;
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r6;
        long[] r5, $r7;
        ucar.ma2.ArrayStructureBB r4;
        int i0, $i1, $i2, $i3, $i4, i6;
        java.lang.String $r14;
        ucar.ma2.DataType $r1, $r2, $r11;
        java.lang.IllegalArgumentException $r8;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r9, $r10, $r12, $r13;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType LONG>;

        if $r1 == $r2 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r11 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be long");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $r7 = specialinvoke r4.<ucar.ma2.ArrayStructure: long[] getJavaArrayLong(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r7;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $i2 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        r5 = newarray (long)[$i2];

        i6 = 0;

     label3:
        if i6 >= $i2 goto label4;

        $r6 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = i6 * 8;

        $i4 = $i1 + $i3;

        $l5 = virtualinvoke $r6.<java.nio.ByteBuffer: long getLong(int)>($i4);

        r5[i6] = $l5;

        i6 = i6 + 1;

        goto label3;

     label4:
        return r5;
    }

    protected void copyLongs(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.IndexIterator r2;
        long $l5;
        ucar.ma2.StructureMembers$Member r1;
        java.nio.ByteBuffer $r3;
        ucar.ma2.ArrayStructureBB r0;
        int i0, $i1, $i2, $i3, $i4, i6;

        r0 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r2 := @parameter2: ucar.ma2.IndexIterator;

        $i1 = virtualinvoke r0.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $i2 = virtualinvoke r1.<ucar.ma2.StructureMembers$Member: int getSize()>();

        i6 = 0;

     label1:
        if i6 >= $i2 goto label2;

        $r3 = r0.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = i6 * 8;

        $i4 = $i1 + $i3;

        $l5 = virtualinvoke $r3.<java.nio.ByteBuffer: long getLong(int)>($i4);

        interfaceinvoke r2.<ucar.ma2.IndexIterator: void setLongNext(long)>($l5);

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }

    public char getScalarChar(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r5;
        ucar.ma2.ArrayStructureBB r4;
        byte $b2;
        int i0, $i1;
        java.lang.String $r12;
        ucar.ma2.DataType $r1, $r2, $r9;
        char $c3, $c4;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array $r3;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r1 == $r2 goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r9 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be char");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $c4 = specialinvoke r4.<ucar.ma2.ArrayStructure: char getScalarChar(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $c4;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r5 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $b2 = virtualinvoke $r5.<java.nio.ByteBuffer: byte get(int)>($i1);

        $c3 = (char) $b2;

        return $c3;
    }

    public char[] getJavaArrayChar(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r6;
        ucar.ma2.ArrayStructureBB r4;
        byte $b4;
        int i0, $i1, $i2, $i3, i6;
        java.lang.String $r14;
        ucar.ma2.DataType $r1, $r2, $r11;
        char $c5;
        java.lang.IllegalArgumentException $r8;
        ucar.ma2.Array $r3;
        char[] r5, $r7;
        java.lang.StringBuilder $r9, $r10, $r12, $r13;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r1 == $r2 goto label1;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r11 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be char");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $r7 = specialinvoke r4.<ucar.ma2.ArrayStructure: char[] getJavaArrayChar(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r7;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $i2 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        r5 = newarray (char)[$i2];

        i6 = 0;

     label3:
        if i6 >= $i2 goto label4;

        $r6 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = $i1 + i6;

        $b4 = virtualinvoke $r6.<java.nio.ByteBuffer: byte get(int)>($i3);

        $c5 = (char) $b4;

        r5[i6] = $c5;

        i6 = i6 + 1;

        goto label3;

     label4:
        return r5;
    }

    protected void copyChars(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.IndexIterator r2;
        char $c5;
        ucar.ma2.StructureMembers$Member r1;
        java.nio.ByteBuffer $r3;
        ucar.ma2.ArrayStructureBB r0;
        byte $b4;
        int i0, $i1, $i2, $i3, i6;

        r0 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r2 := @parameter2: ucar.ma2.IndexIterator;

        $i1 = virtualinvoke r0.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $i2 = virtualinvoke r1.<ucar.ma2.StructureMembers$Member: int getSize()>();

        i6 = 0;

     label1:
        if i6 >= $i2 goto label2;

        $r3 = r0.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = $i1 + i6;

        $b4 = virtualinvoke $r3.<java.nio.ByteBuffer: byte get(int)>($i3);

        $c5 = (char) $b4;

        interfaceinvoke r2.<ucar.ma2.IndexIterator: void setCharNext(char)>($c5);

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String getScalarString(int, ucar.ma2.StructureMembers$Member)
    {
        byte[] r24;
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r15, $r16;
        ucar.ma2.ArrayStructureBB r13;
        byte $b4, $b5;
        boolean $z0;
        ucar.ma2.DataType $r2, $r3, $r4, $r5, $r9;
        java.util.List $r17;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;
        java.lang.String[] $r19, $r20;
        int i0, $i1, $i2, $i3, $i6, $i7, i8;
        java.lang.String $r12, $r14, $r21, $r22, $r23;
        java.lang.IllegalArgumentException $r6;
        ucar.ma2.Array $r1;
        java.lang.Object $r18;

        r13 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r1 == null goto label1;

        $r23 = specialinvoke r13.<ucar.ma2.ArrayStructure: java.lang.String getScalarString(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r23;

     label1:
        $r2 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r2 != $r3 goto label3;

        $i6 = virtualinvoke r13.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r16 = r13.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i7 = virtualinvoke $r16.<java.nio.ByteBuffer: int getInt(int)>($i6);

        $r17 = r13.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>($i7);

        $z0 = $r18 instanceof java.lang.String;

        if $z0 == 0 goto label2;

        $r22 = (java.lang.String) $r18;

        return $r22;

     label2:
        $r19 = (java.lang.String[]) $r18;

        $r20 = (java.lang.String[]) $r19;

        $r21 = $r20[0];

        return $r21;

     label3:
        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r4 != $r5 goto label7;

        $i1 = virtualinvoke r13.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $i2 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        r24 = newarray (byte)[$i2];

        i8 = 0;

     label4:
        if i8 >= $i2 goto label6;

        $r15 = r13.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = $i1 + i8;

        $b4 = virtualinvoke $r15.<java.nio.ByteBuffer: byte get(int)>($i3);

        r24[i8] = $b4;

        $b5 = r24[i8];

        if 0 != $b5 goto label5;

        goto label6;

     label5:
        i8 = i8 + 1;

        goto label4;

     label6:
        $r14 = new java.lang.String;

        specialinvoke $r14.<java.lang.String: void <init>(byte[],int,int)>(r24, 0, i8);

        return $r14;

     label7:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r9 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be String or char");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;
    }

    public java.lang.String[] getJavaArrayString(int, ucar.ma2.StructureMembers$Member)
    {
        byte[] r16;
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r18, $r20;
        ucar.ma2.ArrayStructureBB r14;
        byte $b8;
        int[] $r13;
        boolean $z0, $z1;
        ucar.ma2.DataType $r2, $r3, $r4, $r5, $r9;
        java.util.List $r21;
        java.lang.StringBuilder $r7, $r8, $r10, $r11, $r24, $r25, $r26, $r27;
        java.lang.String[] r15, $r30, $r31, $r32, r33, r34;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, i11, i12, i13, i14, i15;
        java.lang.String $r12, $r17, $r19, $r28, $r29;
        java.lang.IllegalArgumentException $r6, $r23;
        ucar.ma2.Array $r1;
        java.lang.Object $r22;

        r14 := @this: ucar.ma2.ArrayStructureBB;

        i2 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r1 == null goto label01;

        $r32 = specialinvoke r14.<ucar.ma2.ArrayStructure: java.lang.String[] getJavaArrayString(int,ucar.ma2.StructureMembers$Member)>(i2, r0);

        return $r32;

     label01:
        $r2 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r3 = <ucar.ma2.DataType: ucar.ma2.DataType STRING>;

        if $r2 != $r3 goto label04;

        virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $i9 = virtualinvoke r14.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i2, r0);

        $r20 = r14.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i10 = virtualinvoke $r20.<java.nio.ByteBuffer: int getInt(int)>($i9);

        $r21 = r14.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        $r22 = interfaceinvoke $r21.<java.util.List: java.lang.Object get(int)>($i10);

        $z0 = $r22 instanceof java.lang.String[];

        if $z0 == 0 goto label02;

        $r30 = (java.lang.String[]) $r22;

        $r31 = (java.lang.String[]) $r30;

        return $r31;

     label02:
        $z1 = $r22 instanceof java.lang.String;

        if $z1 == 0 goto label03;

        r33 = newarray (java.lang.String)[1];

        $r29 = (java.lang.String) $r22;

        r33[0] = $r29;

        return r33;

     label03:
        $r23 = new java.lang.IllegalArgumentException;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String Type has ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", on heap");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r23;

     label04:
        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r5 = <ucar.ma2.DataType: ucar.ma2.DataType CHAR>;

        if $r4 != $r5 goto label10;

        $r13 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        i11 = lengthof $r13;

        if i11 >= 2 goto label05;

        r34 = newarray (java.lang.String)[1];

        $r19 = virtualinvoke r14.<ucar.ma2.ArrayStructureBB: java.lang.String getScalarString(int,ucar.ma2.StructureMembers$Member)>(i2, r0);

        r34[0] = $r19;

        return r34;

     label05:
        $i0 = i11 - 1;

        i12 = $r13[$i0];

        $i1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getSize()>();

        i13 = $i1 / i12;

        $i3 = virtualinvoke r14.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i2, r0);

        r15 = newarray (java.lang.String)[i13];

        i14 = 0;

     label06:
        if i14 >= i13 goto label09;

        r16 = newarray (byte)[i12];

        i15 = 0;

     label07:
        $i4 = lengthof r16;

        if i15 >= $i4 goto label08;

        $r18 = r14.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i5 = i14 * i12;

        $i6 = $i3 + $i5;

        $i7 = $i6 + i15;

        $b8 = virtualinvoke $r18.<java.nio.ByteBuffer: byte get(int)>($i7);

        r16[i15] = $b8;

        i15 = i15 + 1;

        goto label07;

     label08:
        $r17 = new java.lang.String;

        specialinvoke $r17.<java.lang.String: void <init>(byte[])>(r16);

        r15[i14] = $r17;

        i14 = i14 + 1;

        goto label06;

     label09:
        return r15;

     label10:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r9 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be char");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r6;
    }

    protected void copyObjects(int, ucar.ma2.StructureMembers$Member, ucar.ma2.IndexIterator)
    {
        ucar.ma2.IndexIterator r7;
        java.lang.String[] $r5, r6;
        ucar.ma2.StructureMembers$Member r1;
        java.nio.ByteBuffer $r2;
        java.util.List $r3;
        ucar.ma2.ArrayStructureBB r0;
        int i0, $i1, $i2, $i3, i4;
        java.lang.Object $r4;
        java.lang.String $r8;

        r0 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r1 := @parameter1: ucar.ma2.StructureMembers$Member;

        r7 := @parameter2: ucar.ma2.IndexIterator;

        $i1 = virtualinvoke r0.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r1);

        $i2 = virtualinvoke r1.<ucar.ma2.StructureMembers$Member: int getSize()>();

        $r2 = r0.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i3 = virtualinvoke $r2.<java.nio.ByteBuffer: int getInt(int)>($i1);

        $r3 = r0.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i3);

        $r5 = (java.lang.String[]) $r4;

        r6 = (java.lang.String[]) $r5;

        i4 = 0;

     label1:
        if i4 >= $i2 goto label2;

        $r8 = r6[i4];

        interfaceinvoke r7.<ucar.ma2.IndexIterator: void setObjectNext(java.lang.Object)>($r8);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public ucar.ma2.StructureData getScalarStructure(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r8;
        ucar.ma2.StructureData $r10;
        ucar.ma2.StructureDataA $r9;
        ucar.ma2.ArrayStructureBB r4, $r5;
        int[] $r7;
        int i0, $i1;
        java.lang.String $r17;
        ucar.ma2.DataType $r1, $r2, $r14;
        java.lang.IllegalArgumentException $r11;
        ucar.ma2.Array $r3;
        ucar.ma2.StructureMembers $r6;
        java.lang.StringBuilder $r12, $r13, $r15, $r16;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r1 == $r2 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r14 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be Structure");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $r10 = specialinvoke r4.<ucar.ma2.ArrayStructure: ucar.ma2.StructureData getScalarStructure(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r10;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r5 = new ucar.ma2.ArrayStructureBB;

        $r6 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.StructureMembers getStructureMembers()>();

        $r7 = newarray (int)[1];

        $r7[0] = 1;

        $r8 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        specialinvoke $r5.<ucar.ma2.ArrayStructureBB: void <init>(ucar.ma2.StructureMembers,int[],java.nio.ByteBuffer,int)>($r6, $r7, $r8, $i1);

        $r9 = new ucar.ma2.StructureDataA;

        specialinvoke $r9.<ucar.ma2.StructureDataA: void <init>(ucar.ma2.ArrayStructure,int)>($r5, 0);

        return $r9;
    }

    public ucar.ma2.ArrayStructure getArrayStructure(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.ArrayStructure $r10;
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r8;
        ucar.ma2.ArrayStructureBB r4, $r5;
        int[] $r7;
        int i0, $i1;
        java.lang.String $r17;
        ucar.ma2.DataType $r1, $r2, $r14;
        java.lang.IllegalArgumentException $r11;
        ucar.ma2.Array $r3;
        java.util.List $r9;
        ucar.ma2.StructureMembers $r6;
        java.lang.StringBuilder $r12, $r13, $r15, $r16;

        r4 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType STRUCTURE>;

        if $r1 == $r2 goto label1;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r14 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be Structure");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r11;

     label1:
        $r3 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.Array getDataArray()>();

        if $r3 == null goto label2;

        $r10 = specialinvoke r4.<ucar.ma2.ArrayStructure: ucar.ma2.ArrayStructure getArrayStructure(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        return $r10;

     label2:
        $i1 = virtualinvoke r4.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r5 = new ucar.ma2.ArrayStructureBB;

        $r6 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.StructureMembers getStructureMembers()>();

        $r7 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int[] getShape()>();

        $r8 = r4.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        specialinvoke $r5.<ucar.ma2.ArrayStructureBB: void <init>(ucar.ma2.StructureMembers,int[],java.nio.ByteBuffer,int)>($r6, $r7, $r8, $i1);

        $r9 = r4.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        $r5.<ucar.ma2.ArrayStructureBB: java.util.List heap> = $r9;

        return $r5;
    }

    public ucar.ma2.ArraySequence getArraySequence(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r4;
        ucar.ma2.ArrayStructureBB r3;
        int i0, $i1, $i2, $i3;
        java.lang.String $r16, $r24;
        boolean $z0;
        java.io.PrintStream $r13, $r17;
        ucar.ma2.DataType $r1, $r2, $r21;
        java.lang.IllegalArgumentException $r18;
        ucar.ma2.ArraySequence $r11;
        java.util.List $r5, $r6, $r7, $r9;
        java.lang.Object $r8, $r10;
        java.lang.StringBuilder $r12, $r14, $r15, $r19, $r20, $r22, $r23;

        r3 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r2 = <ucar.ma2.DataType: ucar.ma2.DataType SEQUENCE>;

        if $r1 == $r2 goto label1;

        $r18 = new java.lang.IllegalArgumentException;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Type is ");

        $r21 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: ucar.ma2.DataType getDataType()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", must be Sequence");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r18;

     label1:
        $i1 = virtualinvoke r3.<ucar.ma2.ArrayStructureBB: int calcOffsetSetOrder(int,ucar.ma2.StructureMembers$Member)>(i0, r0);

        $r4 = r3.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i2 = virtualinvoke $r4.<java.nio.ByteBuffer: int getInt(int)>($i1);

        $r5 = r3.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        if $r5 != null goto label2;

        $r17 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>("ArrayStructureBB null heap");

        return null;

     label2:
        $r6 = r3.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        $i3 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i2 <= $i3 goto label3;

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HEY index ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>($r16);

     label3:
        $r7 = r3.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i2);

        $z0 = $r8 instanceof ucar.ma2.ArraySequence;

        if $z0 == 0 goto label4;

        $r9 = r3.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>($i2);

        $r11 = (ucar.ma2.ArraySequence) $r10;

        return $r11;

     label4:
        return null;
    }

    protected int calcOffsetSetOrder(int, ucar.ma2.StructureMembers$Member)
    {
        ucar.ma2.StructureMembers$Member r0;
        java.nio.ByteBuffer $r3;
        java.nio.ByteOrder $r5;
        ucar.ma2.ArrayStructureBB r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object $r1, $r4;

        r2 := @this: ucar.ma2.ArrayStructureBB;

        i0 := @parameter0: int;

        r0 := @parameter1: ucar.ma2.StructureMembers$Member;

        $r1 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: java.lang.Object getDataObject()>();

        if null == $r1 goto label1;

        $r3 = r2.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $r4 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: java.lang.Object getDataObject()>();

        $r5 = (java.nio.ByteOrder) $r4;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r5);

     label1:
        $i1 = r2.<ucar.ma2.ArrayStructureBB: int bb_offset>;

        $i2 = virtualinvoke r2.<ucar.ma2.ArrayStructureBB: int getStructureSize()>();

        $i3 = i0 * $i2;

        $i4 = $i1 + $i3;

        $i5 = virtualinvoke r0.<ucar.ma2.StructureMembers$Member: int getDataParam()>();

        $i6 = $i4 + $i5;

        return $i6;
    }

    public int addObjectToHeap(java.lang.Object)
    {
        java.util.ArrayList $r5;
        java.util.List $r1, $r3, $r4;
        ucar.ma2.ArrayStructureBB r0;
        int $i0, $i1;
        java.lang.Object r2;

        r0 := @this: ucar.ma2.ArrayStructureBB;

        r2 := @parameter0: java.lang.Object;

        $r1 = r0.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        if null != $r1 goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<ucar.ma2.ArrayStructureBB: java.util.List heap> = $r5;

     label1:
        $r3 = r0.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

        $r4 = r0.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        $i0 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i1 = $i0 - 1;

        return $i1;
    }

    public java.util.List getHeap()
    {
        java.util.List $r1;
        ucar.ma2.ArrayStructureBB r0;

        r0 := @this: ucar.ma2.ArrayStructureBB;

        $r1 = r0.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        return $r1;
    }

    public void showInternal(java.util.Formatter, java.lang.String)
    {
        java.lang.Object[] $r3, $r8, $r10, $r13;
        ucar.ma2.ArrayStructure $r19;
        java.lang.Integer $r6, $r14, $r17;
        java.nio.ByteBuffer $r4, $r5;
        java.util.Formatter r1;
        ucar.ma2.ArrayStructureBB r0;
        int $i0, $i1, $i2, i3;
        java.lang.String r2, $r16, $r22;
        boolean $z0;
        java.util.List $r7, $r9, $r11;
        java.lang.Object $r12;
        java.lang.Class $r15;
        java.lang.StringBuilder $r18, $r20, $r21;

        r0 := @this: ucar.ma2.ArrayStructureBB;

        r1 := @parameter0: java.util.Formatter;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<ucar.ma2.ArrayStructure: void showInternal(java.util.Formatter,java.lang.String)>(r1, r2);

        $r3 = newarray (java.lang.Object)[3];

        $r3[0] = r2;

        $r4 = r0.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $r3[1] = $r4;

        $r5 = r0.<ucar.ma2.ArrayStructureBB: java.nio.ByteBuffer bbuffer>;

        $i0 = virtualinvoke $r5.<java.nio.ByteBuffer: int hashCode()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[2] = $r6;

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%sByteBuffer = %s (hash=0x%x)%n", $r3);

        $r7 = r0.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        if null == $r7 goto label4;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r2;

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s  Heap Objects%n", $r8);

        i3 = 0;

     label1:
        $r9 = r0.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        $i1 = interfaceinvoke $r9.<java.util.List: int size()>();

        if i3 >= $i1 goto label3;

        $r11 = r0.<ucar.ma2.ArrayStructureBB: java.util.List heap>;

        $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i3);

        $r13 = newarray (java.lang.Object)[5];

        $r13[0] = r2;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r13[1] = $r14;

        $r15 = virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getName()>();

        $r13[2] = $r16;

        $i2 = virtualinvoke $r12.<java.lang.Object: int hashCode()>();

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r13[3] = $r17;

        $r13[4] = $r12;

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%s   %d class=%s hash=0x%x = %s%n", $r13);

        $z0 = $r12 instanceof ucar.ma2.ArrayStructure;

        if $z0 == 0 goto label2;

        $r19 = (ucar.ma2.ArrayStructure) $r12;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r19.<ucar.ma2.ArrayStructure: void showInternal(java.util.Formatter,java.lang.String)>(r1, $r22);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r10 = newarray (java.lang.Object)[0];

        virtualinvoke r1.<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>("%n", $r10);

     label4:
        return;
    }

    public static void main(java.lang.String[])
    {
        byte[] r0;
        java.lang.String[] r14;
        java.nio.ByteBuffer $r1;
        byte $b1, $b2, $b3;
        int $i0, i4, $i5, $i6;
        java.lang.String $r7, $r13;
        java.io.PrintStream $r3, $r9;
        java.lang.StringBuilder $r4, $r5, $r6, $r10, $r11, $r12, $r15, $r16;

        r14 := @parameter0: java.lang.String[];

        r0 = newarray (byte)[20];

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label2;

        $b3 = (byte) i4;

        r0[i4] = $b3;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>(r0, 5, 15);

        virtualinvoke $r1.<java.nio.ByteBuffer: byte get(int)>(0);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bbw(0)=");

        $b1 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get(int)>(0);

        $i5 = (int) $b1;

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" i would expect = 5");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r7);

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(5);

        $r9 = <java.lang.System: java.io.PrintStream out>;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bbw(0)=");

        $b2 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get(int)>(0);

        $i6 = (int) $b2;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" i would expect = 4");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13);

        return;
    }
}
