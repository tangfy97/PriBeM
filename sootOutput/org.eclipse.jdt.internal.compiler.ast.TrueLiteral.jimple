public class org.eclipse.jdt.internal.compiler.ast.TrueLiteral extends org.eclipse.jdt.internal.compiler.ast.MagicLiteral
{
    static final char[] source;

    static void <clinit>()
    {
        char[] $r0;

        $r0 = newarray (char)[4];

        $r0[0] = 116;

        $r0[1] = 114;

        $r0[2] = 117;

        $r0[3] = 101;

        <org.eclipse.jdt.internal.compiler.ast.TrueLiteral: char[] source> = $r0;

        return;
    }

    public void <init>(int, int)
    {
        int i0, i1;
        org.eclipse.jdt.internal.compiler.ast.TrueLiteral r0;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.TrueLiteral;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<org.eclipse.jdt.internal.compiler.ast.MagicLiteral: void <init>(int,int)>(i0, i1);

        return;
    }

    public void computeConstant()
    {
        org.eclipse.jdt.internal.compiler.ast.TrueLiteral r0;
        org.eclipse.jdt.internal.compiler.impl.BooleanConstant $r1;

        r0 := @this: org.eclipse.jdt.internal.compiler.ast.TrueLiteral;

        $r1 = staticinvoke <org.eclipse.jdt.internal.compiler.impl.BooleanConstant: org.eclipse.jdt.internal.compiler.impl.BooleanConstant fromValue(boolean)>(1);

        r0.<org.eclipse.jdt.internal.compiler.ast.TrueLiteral: org.eclipse.jdt.internal.compiler.impl.Constant constant> = $r1;

        return;
    }

    public void generateCode(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r3;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;
        org.eclipse.jdt.internal.compiler.impl.Constant $r2;
        int i0, $i1, $i2;
        org.eclipse.jdt.internal.compiler.ast.TrueLiteral r1;
        boolean z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.TrueLiteral;

        r3 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        z0 := @parameter2: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        if z0 == 0 goto label1;

        $r2 = r1.<org.eclipse.jdt.internal.compiler.ast.TrueLiteral: org.eclipse.jdt.internal.compiler.impl.Constant constant>;

        $i2 = r1.<org.eclipse.jdt.internal.compiler.ast.TrueLiteral: int implicitConversion>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void generateConstant(org.eclipse.jdt.internal.compiler.impl.Constant,int)>($r2, $i2);

     label1:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.TrueLiteral: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i1);

        return;
    }

    public void generateOptimizedBoolean(org.eclipse.jdt.internal.compiler.lookup.BlockScope, org.eclipse.jdt.internal.compiler.codegen.CodeStream, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, org.eclipse.jdt.internal.compiler.codegen.BranchLabel, boolean)
    {
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r4;
        org.eclipse.jdt.internal.compiler.codegen.CodeStream r0;
        org.eclipse.jdt.internal.compiler.codegen.BranchLabel r2, r3;
        int i0, $i1;
        org.eclipse.jdt.internal.compiler.ast.TrueLiteral r1;
        boolean z0;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.TrueLiteral;

        r4 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        r0 := @parameter1: org.eclipse.jdt.internal.compiler.codegen.CodeStream;

        r3 := @parameter2: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        r2 := @parameter3: org.eclipse.jdt.internal.compiler.codegen.BranchLabel;

        z0 := @parameter4: boolean;

        i0 = r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: int position>;

        if z0 == 0 goto label1;

        if r2 != null goto label1;

        if r3 == null goto label1;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void goto_(org.eclipse.jdt.internal.compiler.codegen.BranchLabel)>(r3);

     label1:
        $i1 = r1.<org.eclipse.jdt.internal.compiler.ast.TrueLiteral: int sourceStart>;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.codegen.CodeStream: void recordPositionsFrom(int,int)>(i0, $i1);

        return;
    }

    public org.eclipse.jdt.internal.compiler.lookup.TypeBinding literalType(org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding $r0;
        org.eclipse.jdt.internal.compiler.ast.TrueLiteral r1;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.TrueLiteral;

        r2 := @parameter0: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        $r0 = <org.eclipse.jdt.internal.compiler.lookup.TypeBinding: org.eclipse.jdt.internal.compiler.lookup.BaseTypeBinding BOOLEAN>;

        return $r0;
    }

    public char[] source()
    {
        char[] $r0;
        org.eclipse.jdt.internal.compiler.ast.TrueLiteral r1;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.TrueLiteral;

        $r0 = <org.eclipse.jdt.internal.compiler.ast.TrueLiteral: char[] source>;

        return $r0;
    }

    public void traverse(org.eclipse.jdt.internal.compiler.ASTVisitor, org.eclipse.jdt.internal.compiler.lookup.BlockScope)
    {
        org.eclipse.jdt.internal.compiler.ast.TrueLiteral r1;
        org.eclipse.jdt.internal.compiler.ASTVisitor r0;
        org.eclipse.jdt.internal.compiler.lookup.BlockScope r2;

        r1 := @this: org.eclipse.jdt.internal.compiler.ast.TrueLiteral;

        r0 := @parameter0: org.eclipse.jdt.internal.compiler.ASTVisitor;

        r2 := @parameter1: org.eclipse.jdt.internal.compiler.lookup.BlockScope;

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: boolean visit(org.eclipse.jdt.internal.compiler.ast.TrueLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        virtualinvoke r0.<org.eclipse.jdt.internal.compiler.ASTVisitor: void endVisit(org.eclipse.jdt.internal.compiler.ast.TrueLiteral,org.eclipse.jdt.internal.compiler.lookup.BlockScope)>(r1, r2);

        return;
    }
}
