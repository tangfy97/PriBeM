public abstract class org.codehaus.jackson.JsonParser extends java.lang.Object implements java.io.Closeable
{
    private static final int MIN_BYTE_I;
    private static final int MAX_BYTE_I;
    private static final int MIN_SHORT_I;
    private static final int MAX_SHORT_I;
    protected int _features;
    protected org.codehaus.jackson.JsonToken _currToken;
    protected org.codehaus.jackson.JsonToken _lastClearedToken;

    protected void <init>()
    {
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract org.codehaus.jackson.ObjectCodec getCodec();

    public abstract void setCodec(org.codehaus.jackson.ObjectCodec);

    public abstract void close() throws java.io.IOException;

    public org.codehaus.jackson.JsonParser enable(org.codehaus.jackson.JsonParser$Feature)
    {
        int $i0, $i1, $i2;
        org.codehaus.jackson.JsonParser$Feature r1;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        $i0 = r0.<org.codehaus.jackson.JsonParser: int _features>;

        $i1 = virtualinvoke r1.<org.codehaus.jackson.JsonParser$Feature: int getMask()>();

        $i2 = $i0 | $i1;

        r0.<org.codehaus.jackson.JsonParser: int _features> = $i2;

        return r0;
    }

    public org.codehaus.jackson.JsonParser disable(org.codehaus.jackson.JsonParser$Feature)
    {
        int $i0, $i1, $i2, $i3, $i5;
        org.codehaus.jackson.JsonParser$Feature r1;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        $i0 = r0.<org.codehaus.jackson.JsonParser: int _features>;

        $i1 = virtualinvoke r1.<org.codehaus.jackson.JsonParser$Feature: int getMask()>();

        $i5 = (int) -1;

        $i2 = $i1 ^ $i5;

        $i3 = $i0 & $i2;

        r0.<org.codehaus.jackson.JsonParser: int _features> = $i3;

        return r0;
    }

    public org.codehaus.jackson.JsonParser configure(org.codehaus.jackson.JsonParser$Feature, boolean)
    {
        org.codehaus.jackson.JsonParser$Feature r1;
        org.codehaus.jackson.JsonParser r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        virtualinvoke r0.<org.codehaus.jackson.JsonParser: void enableFeature(org.codehaus.jackson.JsonParser$Feature)>(r1);

        goto label2;

     label1:
        virtualinvoke r0.<org.codehaus.jackson.JsonParser: void disableFeature(org.codehaus.jackson.JsonParser$Feature)>(r1);

     label2:
        return r0;
    }

    public boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)
    {
        int $i0, $i1, $i2;
        org.codehaus.jackson.JsonParser$Feature r1;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        $i0 = r0.<org.codehaus.jackson.JsonParser: int _features>;

        $i1 = virtualinvoke r1.<org.codehaus.jackson.JsonParser$Feature: int getMask()>();

        $i2 = $i0 & $i1;

        if $i2 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void setFeature(org.codehaus.jackson.JsonParser$Feature, boolean)
    {
        org.codehaus.jackson.JsonParser$Feature r1;
        org.codehaus.jackson.JsonParser r0;
        boolean z0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser configure(org.codehaus.jackson.JsonParser$Feature,boolean)>(r1, z0);

        return;
    }

    public void enableFeature(org.codehaus.jackson.JsonParser$Feature)
    {
        org.codehaus.jackson.JsonParser$Feature r1;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser enable(org.codehaus.jackson.JsonParser$Feature)>(r1);

        return;
    }

    public void disableFeature(org.codehaus.jackson.JsonParser$Feature)
    {
        org.codehaus.jackson.JsonParser$Feature r1;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParser disable(org.codehaus.jackson.JsonParser$Feature)>(r1);

        return;
    }

    public final boolean isFeatureEnabled(org.codehaus.jackson.JsonParser$Feature)
    {
        org.codehaus.jackson.JsonParser$Feature r1;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        r1 := @parameter0: org.codehaus.jackson.JsonParser$Feature;

        $z0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: boolean isEnabled(org.codehaus.jackson.JsonParser$Feature)>(r1);

        return $z0;
    }

    public abstract org.codehaus.jackson.JsonToken nextToken() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public org.codehaus.jackson.JsonToken nextValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, r3;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

        r3 = $r1;

        $r2 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken FIELD_NAME>;

        if $r1 != $r2 goto label1;

        r3 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken nextToken()>();

     label1:
        return r3;
    }

    public abstract org.codehaus.jackson.JsonParser skipChildren() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract boolean isClosed();

    public org.codehaus.jackson.JsonToken getCurrentToken()
    {
        org.codehaus.jackson.JsonToken $r1;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        $r1 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        return $r1;
    }

    public boolean hasCurrentToken()
    {
        org.codehaus.jackson.JsonToken $r1;
        org.codehaus.jackson.JsonParser r0;
        boolean $z0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        $r1 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void clearCurrentToken()
    {
        org.codehaus.jackson.JsonToken $r1, $r2;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        $r1 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        if $r1 == null goto label1;

        $r2 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _lastClearedToken> = $r2;

        r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken> = null;

     label1:
        return;
    }

    public abstract java.lang.String getCurrentName() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract org.codehaus.jackson.JsonStreamContext getParsingContext();

    public abstract org.codehaus.jackson.JsonLocation getTokenLocation();

    public abstract org.codehaus.jackson.JsonLocation getCurrentLocation();

    public org.codehaus.jackson.JsonToken getLastClearedToken()
    {
        org.codehaus.jackson.JsonToken $r1;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        $r1 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _lastClearedToken>;

        return $r1;
    }

    public abstract java.lang.String getText() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract char[] getTextCharacters() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract int getTextLength() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract int getTextOffset() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract java.lang.Number getNumberValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract org.codehaus.jackson.JsonParser$NumberType getNumberType() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public byte getByteValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonParseException $r7;
        byte $b1;
        int $i0, $i3;
        java.lang.StringBuilder $r2, $r4, $r5, $r8;
        java.lang.String $r3, $r6;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        $i3 = (int) -128;

        if $i0 < $i3 goto label1;

        if $i0 <= 127 goto label2;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Numeric value (");

        $r3 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range of Java byte");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>($r6);

        throw $r7;

     label2:
        $b1 = (byte) $i0;

        return $b1;
    }

    public short getShortValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        short $s1;
        org.codehaus.jackson.JsonParseException $r7;
        int $i0, $i3;
        java.lang.StringBuilder $r2, $r4, $r5, $r8;
        java.lang.String $r3, $r6;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        $i0 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: int getIntValue()>();

        $i3 = (int) -32768;

        if $i0 < $i3 goto label1;

        if $i0 <= 32767 goto label2;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Numeric value (");

        $r3 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: java.lang.String getText()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") out of range of Java short");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonParseException _constructError(java.lang.String)>($r6);

        throw $r7;

     label2:
        $s1 = (short) $i0;

        return $s1;
    }

    public abstract int getIntValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract long getLongValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract java.math.BigInteger getBigIntegerValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract float getFloatValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract double getDoubleValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public abstract java.math.BigDecimal getDecimalValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public boolean getBooleanValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonToken $r1, $r2, $r3, $r4, $r8;
        org.codehaus.jackson.JsonLocation $r12;
        org.codehaus.jackson.JsonParseException $r5;
        java.lang.StringBuilder $r6, $r7, $r9, $r10;
        java.lang.String $r11;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        $r2 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        $r1 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_TRUE>;

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        $r4 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        $r3 = <org.codehaus.jackson.JsonToken: org.codehaus.jackson.JsonToken VALUE_FALSE>;

        if $r4 != $r3 goto label2;

        return 0;

     label2:
        $r5 = new org.codehaus.jackson.JsonParseException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Current token (");

        $r8 = r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonToken _currToken>;

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") not of boolean type");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonLocation getCurrentLocation()>();

        specialinvoke $r5.<org.codehaus.jackson.JsonParseException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation)>($r11, $r12);

        throw $r5;
    }

    public java.lang.Object getEmbeddedObject() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        return null;
    }

    public abstract byte[] getBinaryValue(org.codehaus.jackson.Base64Variant) throws java.io.IOException, org.codehaus.jackson.JsonParseException;

    public byte[] getBinaryValue() throws java.io.IOException, org.codehaus.jackson.JsonParseException
    {
        org.codehaus.jackson.Base64Variant $r1;
        byte[] $r2;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        $r1 = staticinvoke <org.codehaus.jackson.Base64Variants: org.codehaus.jackson.Base64Variant getDefaultVariant()>();

        $r2 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: byte[] getBinaryValue(org.codehaus.jackson.Base64Variant)>($r1);

        return $r2;
    }

    public java.lang.Object readValueAs(java.lang.Class) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        java.lang.IllegalStateException $r4;
        org.codehaus.jackson.ObjectCodec $r1;
        java.lang.Class r2;
        java.lang.Object $r3;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        r2 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.ObjectCodec getCodec()>();

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No ObjectCodec defined for the parser, can not deserialize JSON into Java objects");

        throw $r4;

     label1:
        $r3 = virtualinvoke $r1.<org.codehaus.jackson.ObjectCodec: java.lang.Object readValue(org.codehaus.jackson.JsonParser,java.lang.Class)>(r0, r2);

        return $r3;
    }

    public java.lang.Object readValueAs(org.codehaus.jackson.type.TypeReference) throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        java.lang.IllegalStateException $r4;
        org.codehaus.jackson.ObjectCodec $r1;
        org.codehaus.jackson.type.TypeReference r2;
        java.lang.Object $r3;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        r2 := @parameter0: org.codehaus.jackson.type.TypeReference;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.ObjectCodec getCodec()>();

        if $r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No ObjectCodec defined for the parser, can not deserialize JSON into Java objects");

        throw $r4;

     label1:
        $r3 = virtualinvoke $r1.<org.codehaus.jackson.ObjectCodec: java.lang.Object readValue(org.codehaus.jackson.JsonParser,org.codehaus.jackson.type.TypeReference)>(r0, r2);

        return $r3;
    }

    public org.codehaus.jackson.JsonNode readValueAsTree() throws java.io.IOException, org.codehaus.jackson.JsonProcessingException
    {
        java.lang.IllegalStateException $r3;
        org.codehaus.jackson.ObjectCodec $r1;
        org.codehaus.jackson.JsonNode $r2;
        org.codehaus.jackson.JsonParser r0;

        r0 := @this: org.codehaus.jackson.JsonParser;

        $r1 = virtualinvoke r0.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.ObjectCodec getCodec()>();

        if $r1 != null goto label1;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No ObjectCodec defined for the parser, can not deserialize JSON into JsonNode tree");

        throw $r3;

     label1:
        $r2 = virtualinvoke $r1.<org.codehaus.jackson.ObjectCodec: org.codehaus.jackson.JsonNode readTree(org.codehaus.jackson.JsonParser)>(r0);

        return $r2;
    }

    protected org.codehaus.jackson.JsonParseException _constructError(java.lang.String)
    {
        org.codehaus.jackson.JsonParseException $r0;
        java.lang.String r1;
        org.codehaus.jackson.JsonLocation $r3;
        org.codehaus.jackson.JsonParser r2;

        r2 := @this: org.codehaus.jackson.JsonParser;

        r1 := @parameter0: java.lang.String;

        $r0 = new org.codehaus.jackson.JsonParseException;

        $r3 = virtualinvoke r2.<org.codehaus.jackson.JsonParser: org.codehaus.jackson.JsonLocation getCurrentLocation()>();

        specialinvoke $r0.<org.codehaus.jackson.JsonParseException: void <init>(java.lang.String,org.codehaus.jackson.JsonLocation)>(r1, $r3);

        return $r0;
    }

    public static void <clinit>()
    {
        <org.codehaus.jackson.JsonParser: int MAX_SHORT_I> = 32767;

        <org.codehaus.jackson.JsonParser: int MIN_SHORT_I> = -32768;

        <org.codehaus.jackson.JsonParser: int MAX_BYTE_I> = 127;

        <org.codehaus.jackson.JsonParser: int MIN_BYTE_I> = -128;

        return;
    }
}
