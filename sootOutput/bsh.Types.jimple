class bsh.Types extends java.lang.Object
{
    static final int CAST;
    static final int ASSIGNMENT;
    static final int JAVA_BASE_ASSIGNABLE;
    static final int JAVA_BOX_TYPES_ASSIGABLE;
    static final int JAVA_VARARGS_ASSIGNABLE;
    static final int BSH_ASSIGNABLE;
    static final int FIRST_ROUND_ASSIGNABLE;
    static final int LAST_ROUND_ASSIGNABLE;
    static bsh.Primitive VALID_CAST;
    static bsh.Primitive INVALID_CAST;
    static java.lang.Class class$java$lang$Object;
    static java.lang.Class class$java$lang$Number;
    static java.lang.Class class$bsh$Primitive;
    static java.lang.Class class$bsh$This;

    void <init>()
    {
        bsh.Types r0;

        r0 := @this: bsh.Types;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Class[] getTypes(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.Class[] r1, $r9;
        bsh.Primitive $r7;
        int $i0, i1, $i2;
        java.lang.Object $r2, $r3, $r4, $r6;
        java.lang.Class $r5, $r8;
        boolean $z0;

        r0 := @parameter0: java.lang.Object[];

        if r0 != null goto label1;

        $r9 = newarray (java.lang.Class)[0];

        return $r9;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (java.lang.Class)[$i0];

        i1 = 0;

        goto label6;

     label2:
        $r2 = r0[i1];

        if $r2 != null goto label3;

        r1[i1] = null;

        goto label5;

     label3:
        $r3 = r0[i1];

        $z0 = $r3 instanceof bsh.Primitive;

        if $z0 == 0 goto label4;

        $r6 = r0[i1];

        $r7 = (bsh.Primitive) $r6;

        $r8 = virtualinvoke $r7.<bsh.Primitive: java.lang.Class getType()>();

        r1[i1] = $r8;

        goto label5;

     label4:
        $r4 = r0[i1];

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        r1[i1] = $r5;

     label5:
        i1 = i1 + 1;

     label6:
        $i2 = lengthof r0;

        if i1 < $i2 goto label2;

        return r1;
    }

    static boolean isSignatureAssignable(java.lang.Class[], java.lang.Class[], int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Class[] r0, r1;
        java.lang.Class $r2, $r3, $r4, $r5, $r6, $r7;
        bsh.InterpreterError $r8;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.Class[];

        i0 := @parameter2: int;

        if i0 == 3 goto label01;

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        if $i5 == $i4 goto label01;

        return 0;

     label01:
        tableswitch(i0)
        {
            case 1: goto label02;
            case 2: goto label06;
            case 3: goto label10;
            case 4: goto label11;
            default: goto label15;
        };

     label02:
        i6 = 0;

        goto label05;

     label03:
        $r7 = r1[i6];

        $r6 = r0[i6];

        $z3 = staticinvoke <bsh.Types: boolean isJavaBaseAssignable(java.lang.Class,java.lang.Class)>($r7, $r6);

        if $z3 != 0 goto label04;

        return 0;

     label04:
        i6 = i6 + 1;

     label05:
        $i3 = lengthof r0;

        if i6 < $i3 goto label03;

        return 1;

     label06:
        i7 = 0;

        goto label09;

     label07:
        $r5 = r1[i7];

        $r4 = r0[i7];

        $z2 = staticinvoke <bsh.Types: boolean isJavaBoxTypesAssignable(java.lang.Class,java.lang.Class)>($r5, $r4);

        if $z2 != 0 goto label08;

        return 0;

     label08:
        i7 = i7 + 1;

     label09:
        $i2 = lengthof r0;

        if i7 < $i2 goto label07;

        return 1;

     label10:
        $z1 = staticinvoke <bsh.Types: boolean isSignatureVarargsAssignable(java.lang.Class[],java.lang.Class[])>(r0, r1);

        return $z1;

     label11:
        i8 = 0;

        goto label14;

     label12:
        $r3 = r1[i8];

        $r2 = r0[i8];

        $z0 = staticinvoke <bsh.Types: boolean isBshAssignable(java.lang.Class,java.lang.Class)>($r3, $r2);

        if $z0 != 0 goto label13;

        return 0;

     label13:
        i8 = i8 + 1;

     label14:
        $i1 = lengthof r0;

        if i8 < $i1 goto label12;

        return 1;

     label15:
        $r8 = new bsh.InterpreterError;

        specialinvoke $r8.<bsh.InterpreterError: void <init>(java.lang.String)>("bad case");

        throw $r8;
    }

    private static boolean isSignatureVarargsAssignable(java.lang.Class[], java.lang.Class[])
    {
        java.lang.Class[] r0, r1;

        r0 := @parameter0: java.lang.Class[];

        r1 := @parameter1: java.lang.Class[];

        return 0;
    }

    static boolean isJavaAssignable(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        $z0 = staticinvoke <bsh.Types: boolean isJavaBaseAssignable(java.lang.Class,java.lang.Class)>(r0, r1);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <bsh.Types: boolean isJavaBoxTypesAssignable(java.lang.Class,java.lang.Class)>(r0, r1);

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    static boolean isJavaBaseAssignable(java.lang.Class, java.lang.Class)
    {
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Class r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        if r0 != null goto label01;

        return 0;

     label01:
        if r1 != null goto label04;

        $z3 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z3 != 0 goto label02;

        $z4 = 1;

        goto label03;

     label02:
        $z4 = 0;

     label03:
        return $z4;

     label04:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label16;

        $z2 = virtualinvoke r1.<java.lang.Class: boolean isPrimitive()>();

        if $z2 == 0 goto label16;

        if r0 != r1 goto label05;

        return 1;

     label05:
        $r2 = <java.lang.Byte: java.lang.Class TYPE>;

        if r1 != $r2 goto label07;

        $r22 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 == $r22 goto label06;

        $r23 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 == $r23 goto label06;

        $r24 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 == $r24 goto label06;

        $r25 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 == $r25 goto label06;

        $r26 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r26 goto label07;

     label06:
        return 1;

     label07:
        $r3 = <java.lang.Short: java.lang.Class TYPE>;

        if r1 != $r3 goto label09;

        $r18 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 == $r18 goto label08;

        $r19 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 == $r19 goto label08;

        $r20 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 == $r20 goto label08;

        $r21 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r21 goto label09;

     label08:
        return 1;

     label09:
        $r4 = <java.lang.Character: java.lang.Class TYPE>;

        if r1 != $r4 goto label11;

        $r14 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 == $r14 goto label10;

        $r15 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 == $r15 goto label10;

        $r16 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 == $r16 goto label10;

        $r17 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r17 goto label11;

     label10:
        return 1;

     label11:
        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        if r1 != $r5 goto label13;

        $r11 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 == $r11 goto label12;

        $r12 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 == $r12 goto label12;

        $r13 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r13 goto label13;

     label12:
        return 1;

     label13:
        $r6 = <java.lang.Long: java.lang.Class TYPE>;

        if r1 != $r6 goto label15;

        $r9 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 == $r9 goto label14;

        $r10 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r10 goto label15;

     label14:
        return 1;

     label15:
        $r7 = <java.lang.Float: java.lang.Class TYPE>;

        if r1 != $r7 goto label17;

        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r8 goto label17;

        return 1;

     label16:
        $z1 = virtualinvoke r0.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1);

        if $z1 == 0 goto label17;

        return 1;

     label17:
        return 0;
    }

    static boolean isJavaBoxTypesAssignable(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, $r1, $r2, r3, $r4, $r5, $r6, $r7;
        java.lang.Object $r9;
        java.util.Hashtable $r8;

        r0 := @parameter0: java.lang.Class;

        r3 := @parameter1: java.lang.Class;

        if r0 != null goto label1;

        return 0;

     label1:
        $r1 = <bsh.Types: java.lang.Class class$java$lang$Object>;

        if $r1 != null goto label2;

        $r6 = staticinvoke <bsh.Types: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <bsh.Types: java.lang.Class class$java$lang$Object> = $r6;

        goto label3;

     label2:
        $r6 = <bsh.Types: java.lang.Class class$java$lang$Object>;

     label3:
        if r0 != $r6 goto label4;

        return 1;

     label4:
        $r2 = <bsh.Types: java.lang.Class class$java$lang$Number>;

        if $r2 != null goto label5;

        $r7 = staticinvoke <bsh.Types: java.lang.Class class$(java.lang.String)>("java.lang.Number");

        <bsh.Types: java.lang.Class class$java$lang$Number> = $r7;

        goto label6;

     label5:
        $r7 = <bsh.Types: java.lang.Class class$java$lang$Number>;

     label6:
        if r0 != $r7 goto label7;

        $r4 = <java.lang.Character: java.lang.Class TYPE>;

        if r3 == $r4 goto label7;

        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r3 == $r5 goto label7;

        return 1;

     label7:
        $r8 = <bsh.Primitive: java.util.Hashtable wrapperMap>;

        $r9 = virtualinvoke $r8.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r0);

        if $r9 != r3 goto label8;

        return 1;

     label8:
        return 0;
    }

    static boolean isBshAssignable(java.lang.Class, java.lang.Class)
    {
        bsh.UtilEvalError $r4;
        bsh.Primitive $r3;
        java.lang.StringBuffer $r6, $r7, $r8;
        java.lang.Class r0, r1;
        java.lang.Object $r2;
        bsh.InterpreterError $r5;
        java.lang.String $r9;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

     label1:
        $r2 = staticinvoke <bsh.Types: java.lang.Object castObject(java.lang.Class,java.lang.Class,java.lang.Object,int,boolean)>(r0, r1, null, 1, 1);

        $r3 = <bsh.Types: bsh.Primitive VALID_CAST>;

        if $r2 != $r3 goto label2;

        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;

     label4:
        $r4 := @caughtexception;

        $r5 = new bsh.InterpreterError;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("err in cast check: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>($r4);

        $r9 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r5.<bsh.InterpreterError: void <init>(java.lang.String)>($r9);

        throw $r5;

        catch bsh.UtilEvalError from label1 to label3 with label4;
    }

    public static java.lang.Object castObject(java.lang.Object, java.lang.Class, int) throws bsh.UtilEvalError
    {
        bsh.Primitive $r3;
        int i0;
        java.lang.Object r0, $r2;
        java.lang.Class r1, $r5;
        bsh.InterpreterError $r4;
        boolean $z0;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        if r0 != null goto label1;

        $r4 = new bsh.InterpreterError;

        specialinvoke $r4.<bsh.InterpreterError: void <init>(java.lang.String)>("null fromValue");

        throw $r4;

     label1:
        $z0 = r0 instanceof bsh.Primitive;

        if $z0 == 0 goto label2;

        $r3 = (bsh.Primitive) r0;

        $r5 = virtualinvoke $r3.<bsh.Primitive: java.lang.Class getType()>();

        goto label3;

     label2:
        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label3:
        $r2 = staticinvoke <bsh.Types: java.lang.Object castObject(java.lang.Class,java.lang.Class,java.lang.Object,int,boolean)>(r1, $r5, r0, i0, 0);

        return $r2;
    }

    private static java.lang.Object castObject(java.lang.Class, java.lang.Class, java.lang.Object, int, boolean) throws bsh.UtilEvalError
    {
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        bsh.InterpreterError $r24, $r26, $r27, $r28, $r29, $r30;
        bsh.UtilEvalError $r14, $r19;
        bsh.This $r17;
        int i0;
        bsh.Primitive $r3, $r4, $r9, $r12, $r15, $r20, $r23, $r33, $r34, r35, $r40, $r41;
        java.lang.Class r0, $r1, r5, $r6, $r7, $r8, $r10, $r11, $r16, $r18, $r21, $r25, $r31, $r37, $r38, $r43;
        java.lang.Object r2, $r13, $r22, $r32, $r36, $r39, $r42, $r44, $r45;

        r5 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Object;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        if z0 == 0 goto label01;

        if r2 == null goto label01;

        $r30 = new bsh.InterpreterError;

        specialinvoke $r30.<bsh.InterpreterError: void <init>(java.lang.String)>("bad cast params 1");

        throw $r30;

     label01:
        if z0 != 0 goto label02;

        if r2 != null goto label02;

        $r29 = new bsh.InterpreterError;

        specialinvoke $r29.<bsh.InterpreterError: void <init>(java.lang.String)>("bad cast params 2");

        throw $r29;

     label02:
        $r1 = <bsh.Types: java.lang.Class class$bsh$Primitive>;

        if $r1 != null goto label03;

        $r31 = staticinvoke <bsh.Types: java.lang.Class class$(java.lang.String)>("bsh.Primitive");

        <bsh.Types: java.lang.Class class$bsh$Primitive> = $r31;

        goto label04;

     label03:
        $r31 = <bsh.Types: java.lang.Class class$bsh$Primitive>;

     label04:
        if r0 != $r31 goto label05;

        $r28 = new bsh.InterpreterError;

        specialinvoke $r28.<bsh.InterpreterError: void <init>(java.lang.String)>("bad from Type, need to unwrap");

        throw $r28;

     label05:
        $r3 = <bsh.Primitive: bsh.Primitive NULL>;

        if r2 != $r3 goto label06;

        if r0 == null goto label06;

        $r27 = new bsh.InterpreterError;

        specialinvoke $r27.<bsh.InterpreterError: void <init>(java.lang.String)>("inconsistent args 1");

        throw $r27;

     label06:
        $r4 = <bsh.Primitive: bsh.Primitive VOID>;

        if r2 != $r4 goto label07;

        $r25 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 == $r25 goto label07;

        $r26 = new bsh.InterpreterError;

        specialinvoke $r26.<bsh.InterpreterError: void <init>(java.lang.String)>("inconsistent args 2");

        throw $r26;

     label07:
        $r6 = <java.lang.Void: java.lang.Class TYPE>;

        if r5 != $r6 goto label08;

        $r24 = new bsh.InterpreterError;

        specialinvoke $r24.<bsh.InterpreterError: void <init>(java.lang.String)>("loose toType should be null");

        throw $r24;

     label08:
        if r5 == null goto label09;

        if r5 != r0 goto label12;

     label09:
        if z0 == 0 goto label10;

        $r32 = <bsh.Types: bsh.Primitive VALID_CAST>;

        goto label11;

     label10:
        $r32 = r2;

     label11:
        return $r32;

     label12:
        $z1 = virtualinvoke r5.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label19;

        $r18 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 == $r18 goto label13;

        if r0 == null goto label13;

        $z8 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z8 == 0 goto label14;

     label13:
        $r33 = (bsh.Primitive) r2;

        $r34 = staticinvoke <bsh.Primitive: bsh.Primitive castPrimitive(java.lang.Class,java.lang.Class,bsh.Primitive,boolean,int)>(r5, r0, $r33, z0, i0);

        return $r34;

     label14:
        $z9 = staticinvoke <bsh.Primitive: boolean isWrapperType(java.lang.Class)>(r0);

        if $z9 == 0 goto label17;

        $r21 = staticinvoke <bsh.Primitive: java.lang.Class unboxType(java.lang.Class)>(r0);

        if z0 == 0 goto label15;

        r35 = null;

        goto label16;

     label15:
        $r22 = staticinvoke <bsh.Primitive: java.lang.Object wrap(java.lang.Object,java.lang.Class)>(r2, $r21);

        r35 = (bsh.Primitive) $r22;

     label16:
        $r23 = staticinvoke <bsh.Primitive: bsh.Primitive castPrimitive(java.lang.Class,java.lang.Class,bsh.Primitive,boolean,int)>(r5, $r21, r35, z0, i0);

        return $r23;

     label17:
        if z0 == 0 goto label18;

        $r20 = <bsh.Types: bsh.Primitive INVALID_CAST>;

        return $r20;

     label18:
        $r19 = staticinvoke <bsh.Types: bsh.UtilEvalError castError(java.lang.Class,java.lang.Class,int)>(r5, r0, i0);

        throw $r19;

     label19:
        $r7 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 == $r7 goto label20;

        if r0 == null goto label20;

        $z2 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z2 == 0 goto label29;

     label20:
        $z10 = staticinvoke <bsh.Primitive: boolean isWrapperType(java.lang.Class)>(r5);

        if $z10 == 0 goto label23;

        $r10 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 == $r10 goto label23;

        if r0 == null goto label23;

        if z0 == 0 goto label21;

        $r36 = <bsh.Types: bsh.Primitive VALID_CAST>;

        goto label22;

     label21:
        $r11 = staticinvoke <bsh.Primitive: java.lang.Class unboxType(java.lang.Class)>(r5);

        $r12 = (bsh.Primitive) r2;

        $r13 = virtualinvoke $r12.<bsh.Primitive: java.lang.Object getValue()>();

        $r36 = staticinvoke <bsh.Primitive: java.lang.Object castWrapper(java.lang.Class,java.lang.Object)>($r11, $r13);

     label22:
        return $r36;

     label23:
        $r37 = <bsh.Types: java.lang.Class class$java$lang$Object>;

        if $r37 != null goto label24;

        $r38 = staticinvoke <bsh.Types: java.lang.Class class$(java.lang.String)>("java.lang.Object");

        <bsh.Types: java.lang.Class class$java$lang$Object> = $r38;

        goto label25;

     label24:
        $r38 = <bsh.Types: java.lang.Class class$java$lang$Object>;

     label25:
        if r5 != $r38 goto label28;

        $r8 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 == $r8 goto label28;

        if r0 == null goto label28;

        if z0 == 0 goto label26;

        $r39 = <bsh.Types: bsh.Primitive VALID_CAST>;

        goto label27;

     label26:
        $r9 = (bsh.Primitive) r2;

        $r39 = virtualinvoke $r9.<bsh.Primitive: java.lang.Object getValue()>();

     label27:
        return $r39;

     label28:
        $r40 = (bsh.Primitive) r2;

        $r41 = staticinvoke <bsh.Primitive: bsh.Primitive castPrimitive(java.lang.Class,java.lang.Class,bsh.Primitive,boolean,int)>(r5, r0, $r40, z0, i0);

        return $r41;

     label29:
        $z3 = virtualinvoke r5.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z3 == 0 goto label32;

        if z0 == 0 goto label30;

        $r42 = <bsh.Types: bsh.Primitive VALID_CAST>;

        goto label31;

     label30:
        $r42 = r2;

     label31:
        return $r42;

     label32:
        $z4 = virtualinvoke r5.<java.lang.Class: boolean isInterface()>();

        if $z4 == 0 goto label37;

        $r16 = <bsh.Types: java.lang.Class class$bsh$This>;

        if $r16 != null goto label33;

        $r43 = staticinvoke <bsh.Types: java.lang.Class class$(java.lang.String)>("bsh.This");

        <bsh.Types: java.lang.Class class$bsh$This> = $r43;

        goto label34;

     label33:
        $r43 = <bsh.Types: java.lang.Class class$bsh$This>;

     label34:
        $z6 = virtualinvoke $r43.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r0);

        if $z6 == 0 goto label37;

        $z7 = staticinvoke <bsh.Capabilities: boolean canGenerateInterfaces()>();

        if $z7 == 0 goto label37;

        if z0 == 0 goto label35;

        $r44 = <bsh.Types: bsh.Primitive VALID_CAST>;

        goto label36;

     label35:
        $r17 = (bsh.This) r2;

        $r44 = virtualinvoke $r17.<bsh.This: java.lang.Object getInterface(java.lang.Class)>(r5);

     label36:
        return $r44;

     label37:
        $z11 = staticinvoke <bsh.Primitive: boolean isWrapperType(java.lang.Class)>(r5);

        if $z11 == 0 goto label40;

        $z5 = staticinvoke <bsh.Primitive: boolean isWrapperType(java.lang.Class)>(r0);

        if $z5 == 0 goto label40;

        if z0 == 0 goto label38;

        $r45 = <bsh.Types: bsh.Primitive VALID_CAST>;

        goto label39;

     label38:
        $r45 = staticinvoke <bsh.Primitive: java.lang.Object castWrapper(java.lang.Class,java.lang.Object)>(r5, r2);

     label39:
        return $r45;

     label40:
        if z0 == 0 goto label41;

        $r15 = <bsh.Types: bsh.Primitive INVALID_CAST>;

        return $r15;

     label41:
        $r14 = staticinvoke <bsh.Types: bsh.UtilEvalError castError(java.lang.Class,java.lang.Class,int)>(r5, r0, i0);

        throw $r14;
    }

    static bsh.UtilEvalError castError(java.lang.Class, java.lang.Class, int)
    {
        int i0;
        bsh.UtilEvalError $r4;
        java.lang.Class r0, r2;
        java.lang.String $r1, $r3;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        i0 := @parameter2: int;

        $r1 = staticinvoke <bsh.Reflect: java.lang.String normalizeClassName(java.lang.Class)>(r0);

        $r3 = staticinvoke <bsh.Reflect: java.lang.String normalizeClassName(java.lang.Class)>(r2);

        $r4 = staticinvoke <bsh.Types: bsh.UtilEvalError castError(java.lang.String,java.lang.String,int)>($r1, $r3, i0);

        return $r4;
    }

    static bsh.UtilEvalError castError(java.lang.String, java.lang.String, int)
    {
        bsh.UtilTargetError $r9;
        bsh.UtilEvalError $r10;
        java.lang.ClassCastException $r0;
        java.lang.StringBuffer $r1, $r2, $r4, $r5, $r7, $r11, $r12, $r13, $r14, $r15;
        int i0;
        java.lang.String r3, r6, $r8, $r16;

        r6 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        if i0 != 1 goto label1;

        $r10 = new bsh.UtilEvalError;

        $r11 = new java.lang.StringBuffer;

        specialinvoke $r11.<java.lang.StringBuffer: void <init>()>();

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Can\'t assign ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r14 = virtualinvoke $r13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r10.<bsh.UtilEvalError: void <init>(java.lang.String)>($r16);

        return $r10;

     label1:
        $r0 = new java.lang.ClassCastException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("Cannot cast ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(" to ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.ClassCastException: void <init>(java.lang.String)>($r8);

        $r9 = new bsh.UtilTargetError;

        specialinvoke $r9.<bsh.UtilTargetError: void <init>(java.lang.Throwable)>($r0);

        return $r9;
    }

    static java.lang.Class class$(java.lang.String)
    {
        java.lang.Class $r1;
        java.lang.ClassNotFoundException $r2;
        java.lang.String r0, $r4;
        java.lang.NoClassDefFoundError $r3;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r0);

     label2:
        return $r1;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.NoClassDefFoundError;

        $r4 = virtualinvoke $r2.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();

        specialinvoke $r3.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>($r4);

        throw $r3;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        int $i1;
        bsh.Primitive $r2, $r3;

        <bsh.Types: int LAST_ROUND_ASSIGNABLE> = 4;

        <bsh.Types: int FIRST_ROUND_ASSIGNABLE> = 1;

        <bsh.Types: int BSH_ASSIGNABLE> = 4;

        <bsh.Types: int JAVA_VARARGS_ASSIGNABLE> = 3;

        <bsh.Types: int JAVA_BOX_TYPES_ASSIGABLE> = 2;

        <bsh.Types: int JAVA_BASE_ASSIGNABLE> = 1;

        <bsh.Types: int ASSIGNMENT> = 1;

        <bsh.Types: int CAST> = 0;

        $r2 = new bsh.Primitive;

        specialinvoke $r2.<bsh.Primitive: void <init>(int)>(1);

        <bsh.Types: bsh.Primitive VALID_CAST> = $r2;

        $r3 = new bsh.Primitive;

        $i1 = (int) -1;

        specialinvoke $r3.<bsh.Primitive: void <init>(int)>($i1);

        <bsh.Types: bsh.Primitive INVALID_CAST> = $r3;

        return;
    }
}
