public class org.waveprotocol.wave.model.account.BasicObservableRoles extends java.lang.Object implements org.waveprotocol.wave.model.account.ObservableRoles
{
    private final java.util.Map assignments;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;

    void <init>(java.lang.Iterable)
    {
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.account.BasicAssignment $r10;
        java.util.HashMap $r1;
        org.waveprotocol.wave.model.wave.ParticipantId $r8;
        java.lang.Iterable r3;
        org.waveprotocol.wave.model.account.Assignment r6;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        java.util.Map $r7;
        java.lang.Object $r5;
        java.lang.String $r9;
        org.waveprotocol.wave.model.account.BasicObservableRoles r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableRoles;

        r3 := @parameter0: java.lang.Iterable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.account.BasicObservableRoles: java.util.Map assignments> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.account.BasicObservableRoles: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r2;

        $r4 = interfaceinvoke r3.<java.lang.Iterable: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.account.Assignment) $r5;

        $r7 = r0.<org.waveprotocol.wave.model.account.BasicObservableRoles: java.util.Map assignments>;

        $r8 = interfaceinvoke r6.<org.waveprotocol.wave.model.account.Assignment: org.waveprotocol.wave.model.wave.ParticipantId getParticipant()>();

        $r9 = virtualinvoke $r8.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r10 = new org.waveprotocol.wave.model.account.BasicAssignment;

        specialinvoke $r10.<org.waveprotocol.wave.model.account.BasicAssignment: void <init>(org.waveprotocol.wave.model.account.Assignment)>(r6);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

        goto label1;

     label2:
        return;
    }

    public void <init>()
    {
        java.util.HashMap $r1;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.account.BasicObservableRoles r0;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableRoles;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CollectionUtils: java.util.HashMap newHashMap()>();

        r0.<org.waveprotocol.wave.model.account.BasicObservableRoles: java.util.Map assignments> = $r1;

        $r2 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.account.BasicObservableRoles: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r2;

        return;
    }

    public java.lang.Iterable getAssignments()
    {
        org.waveprotocol.wave.model.account.BasicObservableRoles r0;
        java.util.Map $r1;
        java.util.Collection $r2;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableRoles;

        $r1 = r0.<org.waveprotocol.wave.model.account.BasicObservableRoles: java.util.Map assignments>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>();

        return $r2;
    }

    public org.waveprotocol.wave.model.account.Role getRole(org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.account.Role $r6, $r7, $r8;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.account.Assignment r5;
        java.util.Map $r2;
        java.lang.Object $r4;
        java.lang.String $r3;
        org.waveprotocol.wave.model.account.BasicObservableRoles r0;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableRoles;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r0.<org.waveprotocol.wave.model.account.BasicObservableRoles: java.util.Map assignments>;

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r5 = (org.waveprotocol.wave.model.account.Assignment) $r4;

        if r5 == null goto label1;

        $r7 = interfaceinvoke r5.<org.waveprotocol.wave.model.account.Assignment: org.waveprotocol.wave.model.account.Role getRole()>();

        if $r7 == null goto label1;

        $r8 = interfaceinvoke r5.<org.waveprotocol.wave.model.account.Assignment: org.waveprotocol.wave.model.account.Role getRole()>();

        return $r8;

     label1:
        $r6 = <org.waveprotocol.wave.model.account.Policies: org.waveprotocol.wave.model.account.Role DEFAULT_ROLE>;

        return $r6;
    }

    public boolean isPermitted(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.account.Capability)
    {
        org.waveprotocol.wave.model.account.Capability r3;
        org.waveprotocol.wave.model.account.Role $r2;
        org.waveprotocol.wave.model.wave.ParticipantId r1;
        org.waveprotocol.wave.model.account.BasicObservableRoles r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableRoles;

        r1 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r3 := @parameter1: org.waveprotocol.wave.model.account.Capability;

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.account.BasicObservableRoles: org.waveprotocol.wave.model.account.Role getRole(org.waveprotocol.wave.model.wave.ParticipantId)>(r1);

        $z0 = virtualinvoke $r2.<org.waveprotocol.wave.model.account.Role: boolean isPermitted(org.waveprotocol.wave.model.account.Capability)>(r3);

        return $z0;
    }

    public void addListener(org.waveprotocol.wave.model.account.ObservableRoles$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.account.BasicObservableRoles r0;
        org.waveprotocol.wave.model.account.ObservableRoles$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableRoles;

        r1 := @parameter0: org.waveprotocol.wave.model.account.ObservableRoles$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.account.BasicObservableRoles: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.account.ObservableRoles$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.account.BasicObservableRoles r0;
        org.waveprotocol.wave.model.account.ObservableRoles$Listener r1;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableRoles;

        r1 := @parameter0: org.waveprotocol.wave.model.account.ObservableRoles$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.account.BasicObservableRoles: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    private void fireOnChanged()
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        java.util.Iterator $r2;
        org.waveprotocol.wave.model.account.ObservableRoles$Listener r4;
        java.lang.Object $r3;
        org.waveprotocol.wave.model.account.BasicObservableRoles r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableRoles;

        $r1 = r0.<org.waveprotocol.wave.model.account.BasicObservableRoles: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r2 = virtualinvoke $r1.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (org.waveprotocol.wave.model.account.ObservableRoles$Listener) $r3;

        interfaceinvoke r4.<org.waveprotocol.wave.model.account.ObservableRoles$Listener: void onChanged()>();

        goto label1;

     label2:
        return;
    }

    public void assign(org.waveprotocol.wave.model.wave.ParticipantId, org.waveprotocol.wave.model.account.Role)
    {
        org.waveprotocol.wave.model.account.BasicAssignment $r7, r10;
        org.waveprotocol.wave.model.account.Role r0, $r3;
        org.waveprotocol.wave.model.wave.ParticipantId r2;
        java.util.Map $r4, $r8;
        java.lang.Object $r6;
        java.lang.String $r5, $r9;
        org.waveprotocol.wave.model.account.BasicObservableRoles r1;
        boolean $z0;

        r1 := @this: org.waveprotocol.wave.model.account.BasicObservableRoles;

        r2 := @parameter0: org.waveprotocol.wave.model.wave.ParticipantId;

        r0 := @parameter1: org.waveprotocol.wave.model.account.Role;

        staticinvoke <org.waveprotocol.wave.model.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, "Can\'t assign null");

        $r3 = virtualinvoke r1.<org.waveprotocol.wave.model.account.BasicObservableRoles: org.waveprotocol.wave.model.account.Role getRole(org.waveprotocol.wave.model.wave.ParticipantId)>(r2);

        $z0 = virtualinvoke $r3.<org.waveprotocol.wave.model.account.Role: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label3;

        $r4 = r1.<org.waveprotocol.wave.model.account.BasicObservableRoles: java.util.Map assignments>;

        $r5 = virtualinvoke r2.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r10 = (org.waveprotocol.wave.model.account.BasicAssignment) $r6;

        if r10 != null goto label1;

        $r7 = new org.waveprotocol.wave.model.account.BasicAssignment;

        specialinvoke $r7.<org.waveprotocol.wave.model.account.BasicAssignment: void <init>(org.waveprotocol.wave.model.wave.ParticipantId,org.waveprotocol.wave.model.account.Role)>(r2, r0);

        $r8 = r1.<org.waveprotocol.wave.model.account.BasicObservableRoles: java.util.Map assignments>;

        $r9 = virtualinvoke r2.<org.waveprotocol.wave.model.wave.ParticipantId: java.lang.String getAddress()>();

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r7);

        goto label2;

     label1:
        virtualinvoke r10.<org.waveprotocol.wave.model.account.BasicAssignment: void setRole(org.waveprotocol.wave.model.account.Role)>(r0);

     label2:
        specialinvoke r1.<org.waveprotocol.wave.model.account.BasicObservableRoles: void fireOnChanged()>();

     label3:
        return;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.account.BasicObservableRoles r0;
        org.waveprotocol.wave.model.account.ObservableRoles$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableRoles;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.account.ObservableRoles$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.account.BasicObservableRoles: void removeListener(org.waveprotocol.wave.model.account.ObservableRoles$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.account.BasicObservableRoles r0;
        org.waveprotocol.wave.model.account.ObservableRoles$Listener $r2;

        r0 := @this: org.waveprotocol.wave.model.account.BasicObservableRoles;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.account.ObservableRoles$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.account.BasicObservableRoles: void addListener(org.waveprotocol.wave.model.account.ObservableRoles$Listener)>($r2);

        return;
    }
}
