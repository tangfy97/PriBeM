abstract class org.mozilla.javascript.xmlimpl.XMLObjectImpl extends org.mozilla.javascript.xml.XMLObject
{
    private static final java.lang.Object XMLOBJECT_TAG;
    protected final org.mozilla.javascript.xmlimpl.XMLLibImpl lib;
    protected boolean prototypeFlag;
    private static final int Id_constructor;
    private static final int Id_addNamespace;
    private static final int Id_appendChild;
    private static final int Id_attribute;
    private static final int Id_attributes;
    private static final int Id_child;
    private static final int Id_childIndex;
    private static final int Id_children;
    private static final int Id_comments;
    private static final int Id_contains;
    private static final int Id_copy;
    private static final int Id_descendants;
    private static final int Id_inScopeNamespaces;
    private static final int Id_insertChildAfter;
    private static final int Id_insertChildBefore;
    private static final int Id_hasOwnProperty;
    private static final int Id_hasComplexContent;
    private static final int Id_hasSimpleContent;
    private static final int Id_length;
    private static final int Id_localName;
    private static final int Id_name;
    private static final int Id_namespace;
    private static final int Id_namespaceDeclarations;
    private static final int Id_nodeKind;
    private static final int Id_normalize;
    private static final int Id_parent;
    private static final int Id_prependChild;
    private static final int Id_processingInstructions;
    private static final int Id_propertyIsEnumerable;
    private static final int Id_removeNamespace;
    private static final int Id_replace;
    private static final int Id_setChildren;
    private static final int Id_setLocalName;
    private static final int Id_setName;
    private static final int Id_setNamespace;
    private static final int Id_text;
    private static final int Id_toString;
    private static final int Id_toSource;
    private static final int Id_toXMLString;
    private static final int Id_valueOf;
    private static final int Id_getXmlObject;
    private static final int MAX_PROTOTYPE_ID;

    protected void <init>(org.mozilla.javascript.xmlimpl.XMLLibImpl, org.mozilla.javascript.xml.XMLObject)
    {
        org.mozilla.javascript.xmlimpl.XMLLibImpl r1;
        org.mozilla.javascript.Scriptable $r2;
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r0;
        org.mozilla.javascript.xml.XMLObject r3;

        r0 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r1 := @parameter0: org.mozilla.javascript.xmlimpl.XMLLibImpl;

        r3 := @parameter1: org.mozilla.javascript.xml.XMLObject;

        $r2 = virtualinvoke r1.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.Scriptable globalScope()>();

        specialinvoke r0.<org.mozilla.javascript.xml.XMLObject: void <init>(org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable)>($r2, r3);

        r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib> = r1;

        return;
    }

    abstract boolean hasXMLProperty(org.mozilla.javascript.xmlimpl.XMLName);

    abstract java.lang.Object getXMLProperty(org.mozilla.javascript.xmlimpl.XMLName);

    abstract void putXMLProperty(org.mozilla.javascript.xmlimpl.XMLName, java.lang.Object);

    abstract void deleteXMLProperty(org.mozilla.javascript.xmlimpl.XMLName);

    abstract boolean equivalentXml(java.lang.Object);

    abstract org.mozilla.javascript.xmlimpl.XML addNamespace(org.mozilla.javascript.xmlimpl.Namespace);

    abstract org.mozilla.javascript.xmlimpl.XML appendChild(java.lang.Object);

    abstract org.mozilla.javascript.xmlimpl.XMLList attribute(org.mozilla.javascript.xmlimpl.XMLName);

    abstract org.mozilla.javascript.xmlimpl.XMLList attributes();

    abstract org.mozilla.javascript.xmlimpl.XMLList child(long);

    abstract org.mozilla.javascript.xmlimpl.XMLList child(org.mozilla.javascript.xmlimpl.XMLName);

    abstract int childIndex();

    abstract org.mozilla.javascript.xmlimpl.XMLList children();

    abstract org.mozilla.javascript.xmlimpl.XMLList comments();

    abstract boolean contains(java.lang.Object);

    abstract java.lang.Object copy();

    abstract org.mozilla.javascript.xmlimpl.XMLList descendants(org.mozilla.javascript.xmlimpl.XMLName);

    abstract java.lang.Object[] inScopeNamespaces();

    abstract org.mozilla.javascript.xmlimpl.XML insertChildAfter(java.lang.Object, java.lang.Object);

    abstract org.mozilla.javascript.xmlimpl.XML insertChildBefore(java.lang.Object, java.lang.Object);

    abstract boolean hasOwnProperty(org.mozilla.javascript.xmlimpl.XMLName);

    abstract boolean hasComplexContent();

    abstract boolean hasSimpleContent();

    abstract int length();

    abstract java.lang.String localName();

    abstract org.mozilla.javascript.xmlimpl.QName name();

    abstract java.lang.Object namespace(java.lang.String);

    abstract java.lang.Object[] namespaceDeclarations();

    abstract java.lang.Object nodeKind();

    abstract void normalize();

    abstract java.lang.Object parent();

    abstract org.mozilla.javascript.xmlimpl.XML prependChild(java.lang.Object);

    abstract java.lang.Object processingInstructions(org.mozilla.javascript.xmlimpl.XMLName);

    abstract boolean propertyIsEnumerable(java.lang.Object);

    abstract org.mozilla.javascript.xmlimpl.XML removeNamespace(org.mozilla.javascript.xmlimpl.Namespace);

    abstract org.mozilla.javascript.xmlimpl.XML replace(long, java.lang.Object);

    abstract org.mozilla.javascript.xmlimpl.XML replace(org.mozilla.javascript.xmlimpl.XMLName, java.lang.Object);

    abstract org.mozilla.javascript.xmlimpl.XML setChildren(java.lang.Object);

    abstract void setLocalName(java.lang.String);

    abstract void setName(org.mozilla.javascript.xmlimpl.QName);

    abstract void setNamespace(org.mozilla.javascript.xmlimpl.Namespace);

    abstract org.mozilla.javascript.xmlimpl.XMLList text();

    public abstract java.lang.String toString();

    abstract java.lang.String toSource(int);

    abstract java.lang.String toXMLString(int);

    abstract java.lang.Object valueOf();

    abstract org.apache.xmlbeans.XmlObject getXmlObject();

    protected abstract java.lang.Object jsConstructor(org.mozilla.javascript.Context, boolean, java.lang.Object[]);

    final java.lang.Object getMethod(java.lang.String)
    {
        java.lang.Object $r2;
        java.lang.String r1;
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r0;

        r0 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<org.mozilla.javascript.xml.XMLObject: java.lang.Object get(java.lang.String,org.mozilla.javascript.Scriptable)>(r1, r0);

        return $r2;
    }

    public final java.lang.Object getDefaultValue(java.lang.Class)
    {
        java.lang.Class r2;
        java.lang.String $r1;
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r0;

        r0 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r2 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.String toString()>();

        return $r1;
    }

    public void delete(java.lang.String)
    {
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r7;
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuffer $r1, $r2, $r4, $r5;
        java.lang.String r3, $r6;

        r7 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r3 := @parameter0: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuffer;

        specialinvoke $r1.<java.lang.StringBuffer: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("String: [");

        $r4 = virtualinvoke $r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("]");

        $r6 = virtualinvoke $r5.<java.lang.StringBuffer: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    protected final java.lang.Object equivalentValues(java.lang.Object)
    {
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r0;
        java.lang.Boolean $r2;
        java.lang.Object r1;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r1 := @parameter0: java.lang.Object;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: boolean equivalentXml(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label2;

     label1:
        $r2 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label2:
        return $r2;
    }

    public final org.mozilla.javascript.xml.XMLLib lib()
    {
        org.mozilla.javascript.xmlimpl.XMLLibImpl $r1;
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r0;

        r0 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        $r1 = r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        return $r1;
    }

    public final boolean ecmaHas(org.mozilla.javascript.Context, java.lang.Object)
    {
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r0;
        org.mozilla.javascript.Context r4;
        long $l0;
        org.mozilla.javascript.xmlimpl.XMLLibImpl $r2;
        org.mozilla.javascript.xmlimpl.XMLName $r3;
        int $i1;
        java.lang.Object r1;
        boolean $z0, $z1;

        r0 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r4 := @parameter0: org.mozilla.javascript.Context;

        r1 := @parameter1: java.lang.Object;

        if r4 != null goto label1;

        r4 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getCurrentContext()>();

     label1:
        $r2 = r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.XMLName toXMLNameOrIndex(org.mozilla.javascript.Context,java.lang.Object)>(r4, r1);

        if $r3 != null goto label2;

        $l0 = staticinvoke <org.mozilla.javascript.ScriptRuntime: long lastUint32Result(org.mozilla.javascript.Context)>(r4);

        $i1 = (int) $l0;

        $z1 = virtualinvoke r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: boolean has(int,org.mozilla.javascript.Scriptable)>($i1, r0);

        return $z1;

     label2:
        $z0 = virtualinvoke r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: boolean hasXMLProperty(org.mozilla.javascript.xmlimpl.XMLName)>($r3);

        return $z0;
    }

    public final java.lang.Object ecmaGet(org.mozilla.javascript.Context, java.lang.Object)
    {
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r0;
        org.mozilla.javascript.Context r7;
        long $l0;
        org.mozilla.javascript.xmlimpl.XMLLibImpl $r2;
        org.mozilla.javascript.xmlimpl.XMLName $r3;
        int $i1;
        java.lang.Object r1, $r4, $r5, $r6, r8;

        r0 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r7 := @parameter0: org.mozilla.javascript.Context;

        r1 := @parameter1: java.lang.Object;

        if r7 != null goto label1;

        r7 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getCurrentContext()>();

     label1:
        $r2 = r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.XMLName toXMLNameOrIndex(org.mozilla.javascript.Context,java.lang.Object)>(r7, r1);

        if $r3 != null goto label3;

        $l0 = staticinvoke <org.mozilla.javascript.ScriptRuntime: long lastUint32Result(org.mozilla.javascript.Context)>(r7);

        $i1 = (int) $l0;

        $r5 = virtualinvoke r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object get(int,org.mozilla.javascript.Scriptable)>($i1, r0);

        r8 = $r5;

        $r6 = <org.mozilla.javascript.Scriptable: java.lang.Object NOT_FOUND>;

        if $r5 != $r6 goto label2;

        r8 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

     label2:
        return r8;

     label3:
        $r4 = virtualinvoke r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object getXMLProperty(org.mozilla.javascript.xmlimpl.XMLName)>($r3);

        return $r4;
    }

    public final void ecmaPut(org.mozilla.javascript.Context, java.lang.Object, java.lang.Object)
    {
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r0;
        org.mozilla.javascript.Context r5;
        long $l0;
        org.mozilla.javascript.xmlimpl.XMLLibImpl $r2;
        org.mozilla.javascript.xmlimpl.XMLName $r3;
        int $i1;
        java.lang.Object r1, r4;

        r0 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r5 := @parameter0: org.mozilla.javascript.Context;

        r1 := @parameter1: java.lang.Object;

        r4 := @parameter2: java.lang.Object;

        if r5 != null goto label1;

        r5 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getCurrentContext()>();

     label1:
        $r2 = r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.XMLName toXMLNameOrIndex(org.mozilla.javascript.Context,java.lang.Object)>(r5, r1);

        if $r3 != null goto label2;

        $l0 = staticinvoke <org.mozilla.javascript.ScriptRuntime: long lastUint32Result(org.mozilla.javascript.Context)>(r5);

        $i1 = (int) $l0;

        virtualinvoke r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: void put(int,org.mozilla.javascript.Scriptable,java.lang.Object)>($i1, r0, r4);

        return;

     label2:
        virtualinvoke r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: void putXMLProperty(org.mozilla.javascript.xmlimpl.XMLName,java.lang.Object)>($r3, r4);

        return;
    }

    public final boolean ecmaDelete(org.mozilla.javascript.Context, java.lang.Object)
    {
        org.mozilla.javascript.xmlimpl.XMLLibImpl $r2;
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r0;
        org.mozilla.javascript.xmlimpl.XMLName $r3;
        org.mozilla.javascript.Context r4;
        int $i1;
        java.lang.Object r1;
        long $l0;

        r0 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r4 := @parameter0: org.mozilla.javascript.Context;

        r1 := @parameter1: java.lang.Object;

        if r4 != null goto label1;

        r4 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.Context getCurrentContext()>();

     label1:
        $r2 = r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r3 = virtualinvoke $r2.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.XMLName toXMLNameOrIndex(org.mozilla.javascript.Context,java.lang.Object)>(r4, r1);

        if $r3 != null goto label2;

        $l0 = staticinvoke <org.mozilla.javascript.ScriptRuntime: long lastUint32Result(org.mozilla.javascript.Context)>(r4);

        $i1 = (int) $l0;

        virtualinvoke r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: void delete(int)>($i1);

        return 1;

     label2:
        virtualinvoke r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: void deleteXMLProperty(org.mozilla.javascript.xmlimpl.XMLName)>($r3);

        return 1;
    }

    public org.mozilla.javascript.Ref memberRef(org.mozilla.javascript.Context, java.lang.Object, int)
    {
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r0;
        org.mozilla.javascript.Context r1;
        java.lang.RuntimeException $r4;
        org.mozilla.javascript.xmlimpl.XMLLibImpl $r3, $r5;
        org.mozilla.javascript.xmlimpl.XMLName r6;
        int i0, $i1, $i2, $i3;
        java.lang.Object r2;

        r0 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r1 := @parameter0: org.mozilla.javascript.Context;

        r2 := @parameter1: java.lang.Object;

        i0 := @parameter2: int;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        $r5 = r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        r6 = virtualinvoke $r5.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.XMLName toAttributeName(org.mozilla.javascript.Context,java.lang.Object)>(r1, r2);

        goto label3;

     label1:
        $i2 = i0 & 4;

        if $i2 != 0 goto label2;

        $r4 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r4;

     label2:
        $r3 = r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        r6 = virtualinvoke $r3.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.XMLName toXMLName(org.mozilla.javascript.Context,java.lang.Object)>(r1, r2);

     label3:
        $i3 = i0 & 4;

        if $i3 == 0 goto label4;

        virtualinvoke r6.<org.mozilla.javascript.xmlimpl.XMLName: void setIsDescendants()>();

     label4:
        virtualinvoke r6.<org.mozilla.javascript.xmlimpl.XMLName: void initXMLObject(org.mozilla.javascript.xmlimpl.XMLObjectImpl)>(r0);

        return r6;
    }

    public org.mozilla.javascript.Ref memberRef(org.mozilla.javascript.Context, java.lang.Object, java.lang.Object, int)
    {
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r0;
        org.mozilla.javascript.Context r1;
        org.mozilla.javascript.xmlimpl.XMLLibImpl $r4;
        org.mozilla.javascript.xmlimpl.XMLName $r5;
        int i0, $i1, $i2;
        java.lang.Object r2, r3;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r1 := @parameter0: org.mozilla.javascript.Context;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Object;

        i0 := @parameter3: int;

        $r4 = r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r5 = virtualinvoke $r4.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.XMLName toQualifiedName(org.mozilla.javascript.Context,java.lang.Object,java.lang.Object)>(r1, r2, r3);

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = virtualinvoke $r5.<org.mozilla.javascript.xmlimpl.XMLName: boolean isAttributeName()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r5.<org.mozilla.javascript.xmlimpl.XMLName: void setAttributeName()>();

     label1:
        $i2 = i0 & 4;

        if $i2 == 0 goto label2;

        virtualinvoke $r5.<org.mozilla.javascript.xmlimpl.XMLName: void setIsDescendants()>();

     label2:
        virtualinvoke $r5.<org.mozilla.javascript.xmlimpl.XMLName: void initXMLObject(org.mozilla.javascript.xmlimpl.XMLObjectImpl)>(r0);

        return $r5;
    }

    public org.mozilla.javascript.NativeWith enterWith(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.xmlimpl.XMLLibImpl $r3;
        org.mozilla.javascript.Scriptable r2;
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r1;
        org.mozilla.javascript.xmlimpl.XMLWithScope $r0;

        r1 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r2 := @parameter0: org.mozilla.javascript.Scriptable;

        $r0 = new org.mozilla.javascript.xmlimpl.XMLWithScope;

        $r3 = r1.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        specialinvoke $r0.<org.mozilla.javascript.xmlimpl.XMLWithScope: void <init>(org.mozilla.javascript.xmlimpl.XMLLibImpl,org.mozilla.javascript.Scriptable,org.mozilla.javascript.xml.XMLObject)>($r3, r2, r1);

        return $r0;
    }

    public org.mozilla.javascript.NativeWith enterDotQuery(org.mozilla.javascript.Scriptable)
    {
        org.mozilla.javascript.xmlimpl.XMLLibImpl $r3;
        org.mozilla.javascript.Scriptable r2;
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r1;
        org.mozilla.javascript.xmlimpl.XMLWithScope $r0;

        r1 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r2 := @parameter0: org.mozilla.javascript.Scriptable;

        $r0 = new org.mozilla.javascript.xmlimpl.XMLWithScope;

        $r3 = r1.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        specialinvoke $r0.<org.mozilla.javascript.xmlimpl.XMLWithScope: void <init>(org.mozilla.javascript.xmlimpl.XMLLibImpl,org.mozilla.javascript.Scriptable,org.mozilla.javascript.xml.XMLObject)>($r3, r2, r1);

        virtualinvoke $r0.<org.mozilla.javascript.xmlimpl.XMLWithScope: void initAsDotQuery()>();

        return $r0;
    }

    public final java.lang.Object addValues(org.mozilla.javascript.Context, boolean, java.lang.Object)
    {
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r2;
        org.mozilla.javascript.Context r3;
        org.mozilla.javascript.xml.XMLObject r8, r9;
        org.mozilla.javascript.xmlimpl.XMLLibImpl $r6;
        java.lang.Object r0, $r1, $r4, $r7;
        java.lang.String $r5;
        boolean $z0, z1;

        r2 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r3 := @parameter0: org.mozilla.javascript.Context;

        z1 := @parameter1: boolean;

        r0 := @parameter2: java.lang.Object;

        $z0 = r0 instanceof org.mozilla.javascript.xml.XMLObject;

        if $z0 == 0 goto label3;

        if z1 == 0 goto label1;

        r8 = r2;

        r9 = (org.mozilla.javascript.xml.XMLObject) r0;

        goto label2;

     label1:
        r8 = (org.mozilla.javascript.xml.XMLObject) r0;

        r9 = r2;

     label2:
        $r6 = r2.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r7 = virtualinvoke $r6.<org.mozilla.javascript.xmlimpl.XMLLibImpl: java.lang.Object addXMLObjects(org.mozilla.javascript.Context,org.mozilla.javascript.xml.XMLObject,org.mozilla.javascript.xml.XMLObject)>(r3, r8, r9);

        return $r7;

     label3:
        $r1 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        if r0 != $r1 goto label4;

        $r5 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>(r2);

        return $r5;

     label4:
        $r4 = specialinvoke r2.<org.mozilla.javascript.xml.XMLObject: java.lang.Object addValues(org.mozilla.javascript.Context,boolean,java.lang.Object)>(r3, z1, r0);

        return $r4;
    }

    final void exportAsJSClass(boolean)
    {
        org.mozilla.javascript.xmlimpl.XMLLibImpl $r1;
        org.mozilla.javascript.Scriptable $r2;
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r0;
        boolean z0;

        r0 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        z0 := @parameter0: boolean;

        r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: boolean prototypeFlag> = 1;

        $r1 = r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r2 = virtualinvoke $r1.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.Scriptable globalScope()>();

        virtualinvoke r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.IdFunctionObject exportAsJSClass(int,org.mozilla.javascript.Scriptable,boolean)>(41, $r2, z0);

        return;
    }

    protected int findPrototypeId(java.lang.String)
    {
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r1;
        byte b12;
        boolean $z0;
        int $i0, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33;
        java.lang.String r0, r2, r3, r4, r5;
        char $c1, $c2, $c3, $c4, $c5, $c6, $c7, $c8, $c9, $c10, $c11;

        r1 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r0 := @parameter0: java.lang.String;

        b12 = 0;

        r2 = null;

        r5 = null;

        r4 = null;

        r3 = null;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        tableswitch($i0)
        {
            case 4: goto label01;
            case 5: goto label04;
            case 6: goto label05;
            case 7: goto label07;
            case 8: goto label10;
            case 9: goto label18;
            case 10: goto label24;
            case 11: goto label26;
            case 12: goto label33;
            case 13: goto label50;
            case 14: goto label40;
            case 15: goto label41;
            case 16: goto label42;
            case 17: goto label44;
            case 18: goto label50;
            case 19: goto label50;
            case 20: goto label47;
            case 21: goto label48;
            case 22: goto label49;
            default: goto label50;
        };

     label01:
        $c11 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i13 = (int) $c11;

        if $i13 != 99 goto label02;

        r2 = "copy";

        r5 = "copy";

        r4 = "copy";

        r3 = "copy";

        b12 = 11;

        goto label50;

     label02:
        $i14 = (int) $c11;

        if $i14 != 110 goto label03;

        r2 = "name";

        r5 = "name";

        r4 = "name";

        r3 = "name";

        b12 = 21;

        goto label50;

     label03:
        $i15 = (int) $c11;

        if $i15 != 116 goto label50;

        r2 = "text";

        r5 = "text";

        r4 = "text";

        r3 = "text";

        b12 = 36;

        goto label50;

     label04:
        r2 = "child";

        r5 = "child";

        r4 = "child";

        r3 = "child";

        b12 = 6;

        goto label50;

     label05:
        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i16 = (int) $c10;

        if $i16 != 108 goto label06;

        r2 = "length";

        r5 = "length";

        r4 = "length";

        r3 = "length";

        b12 = 19;

        goto label50;

     label06:
        $i17 = (int) $c10;

        if $i17 != 112 goto label50;

        r2 = "parent";

        r5 = "parent";

        r4 = "parent";

        r3 = "parent";

        b12 = 26;

        goto label50;

     label07:
        $c9 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i18 = (int) $c9;

        if $i18 != 114 goto label08;

        r2 = "replace";

        r5 = "replace";

        r4 = "replace";

        r3 = "replace";

        b12 = 31;

        goto label50;

     label08:
        $i19 = (int) $c9;

        if $i19 != 115 goto label09;

        r2 = "setName";

        r5 = "setName";

        r4 = "setName";

        r3 = "setName";

        b12 = 34;

        goto label50;

     label09:
        $i20 = (int) $c9;

        if $i20 != 118 goto label50;

        r2 = "valueOf";

        r5 = "valueOf";

        r4 = "valueOf";

        r3 = "valueOf";

        b12 = 40;

        goto label50;

     label10:
        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(4);

        $i21 = (int) $c8;

        lookupswitch($i21)
        {
            case 75: goto label11;
            case 97: goto label12;
            case 100: goto label13;
            case 101: goto label14;
            case 114: goto label15;
            case 117: goto label16;
            default: goto label17;
        };

     label11:
        r2 = "nodeKind";

        r5 = "nodeKind";

        r4 = "nodeKind";

        r3 = "nodeKind";

        b12 = 24;

        goto label50;

     label12:
        r2 = "contains";

        r5 = "contains";

        r4 = "contains";

        r3 = "contains";

        b12 = 10;

        goto label50;

     label13:
        r2 = "children";

        r5 = "children";

        r4 = "children";

        r3 = "children";

        b12 = 8;

        goto label50;

     label14:
        r2 = "comments";

        r5 = "comments";

        r4 = "comments";

        r3 = "comments";

        b12 = 9;

        goto label50;

     label15:
        r2 = "toString";

        r5 = "toString";

        r4 = "toString";

        r3 = "toString";

        b12 = 37;

        goto label50;

     label16:
        r2 = "toSource";

        r5 = "toSource";

        r4 = "toSource";

        r3 = "toSource";

        b12 = 38;

        goto label50;

     label17:
        goto label50;

     label18:
        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(2);

        $i22 = (int) $c7;

        lookupswitch($i22)
        {
            case 99: goto label19;
            case 109: goto label20;
            case 114: goto label21;
            case 116: goto label22;
            default: goto label23;
        };

     label19:
        r2 = "localName";

        r5 = "localName";

        r4 = "localName";

        r3 = "localName";

        b12 = 20;

        goto label50;

     label20:
        r2 = "namespace";

        r5 = "namespace";

        r4 = "namespace";

        r3 = "namespace";

        b12 = 22;

        goto label50;

     label21:
        r2 = "normalize";

        r5 = "normalize";

        r4 = "normalize";

        r3 = "normalize";

        b12 = 25;

        goto label50;

     label22:
        r2 = "attribute";

        r5 = "attribute";

        r4 = "attribute";

        r3 = "attribute";

        b12 = 4;

        goto label50;

     label23:
        goto label50;

     label24:
        $c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i23 = (int) $c6;

        if $i23 != 97 goto label25;

        r2 = "attributes";

        r5 = "attributes";

        r4 = "attributes";

        r3 = "attributes";

        b12 = 5;

        goto label50;

     label25:
        $i24 = (int) $c6;

        if $i24 != 99 goto label50;

        r2 = "childIndex";

        r5 = "childIndex";

        r4 = "childIndex";

        r3 = "childIndex";

        b12 = 7;

        goto label50;

     label26:
        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i25 = (int) $c5;

        lookupswitch($i25)
        {
            case 97: goto label27;
            case 99: goto label28;
            case 100: goto label29;
            case 115: goto label30;
            case 116: goto label31;
            default: goto label32;
        };

     label27:
        r2 = "appendChild";

        r5 = "appendChild";

        r4 = "appendChild";

        r3 = "appendChild";

        b12 = 3;

        goto label50;

     label28:
        r2 = "constructor";

        r5 = "constructor";

        r4 = "constructor";

        r3 = "constructor";

        b12 = 1;

        goto label50;

     label29:
        r2 = "descendants";

        r5 = "descendants";

        r4 = "descendants";

        r3 = "descendants";

        b12 = 12;

        goto label50;

     label30:
        r2 = "setChildren";

        r5 = "setChildren";

        r4 = "setChildren";

        r3 = "setChildren";

        b12 = 32;

        goto label50;

     label31:
        r2 = "toXMLString";

        r5 = "toXMLString";

        r4 = "toXMLString";

        r3 = "toXMLString";

        b12 = 39;

        goto label50;

     label32:
        goto label50;

     label33:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i26 = (int) $c3;

        lookupswitch($i26)
        {
            case 97: goto label34;
            case 103: goto label35;
            case 112: goto label36;
            case 115: goto label37;
            default: goto label39;
        };

     label34:
        r2 = "addNamespace";

        r5 = "addNamespace";

        r4 = "addNamespace";

        r3 = "addNamespace";

        b12 = 2;

        goto label50;

     label35:
        r2 = "getXmlObject";

        r5 = "getXmlObject";

        r4 = "getXmlObject";

        r3 = "getXmlObject";

        b12 = 41;

        goto label50;

     label36:
        r2 = "prependChild";

        r5 = "prependChild";

        r4 = "prependChild";

        r3 = "prependChild";

        b12 = 27;

        goto label50;

     label37:
        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(3);

        $i27 = (int) $c4;

        if $i27 != 76 goto label38;

        r2 = "setLocalName";

        r5 = "setLocalName";

        r4 = "setLocalName";

        r3 = "setLocalName";

        b12 = 33;

        goto label50;

     label38:
        $i28 = (int) $c4;

        if $i28 != 78 goto label50;

        r2 = "setNamespace";

        r5 = "setNamespace";

        r4 = "setNamespace";

        r3 = "setNamespace";

        b12 = 35;

        goto label50;

     label39:
        goto label50;

     label40:
        r2 = "hasOwnProperty";

        r5 = "hasOwnProperty";

        r4 = "hasOwnProperty";

        r3 = "hasOwnProperty";

        b12 = 16;

        goto label50;

     label41:
        r2 = "removeNamespace";

        r5 = "removeNamespace";

        r4 = "removeNamespace";

        r3 = "removeNamespace";

        b12 = 30;

        goto label50;

     label42:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i29 = (int) $c2;

        if $i29 != 104 goto label43;

        r2 = "hasSimpleContent";

        r5 = "hasSimpleContent";

        r4 = "hasSimpleContent";

        r3 = "hasSimpleContent";

        b12 = 18;

        goto label50;

     label43:
        $i30 = (int) $c2;

        if $i30 != 105 goto label50;

        r2 = "insertChildAfter";

        r5 = "insertChildAfter";

        r4 = "insertChildAfter";

        r3 = "insertChildAfter";

        b12 = 14;

        goto label50;

     label44:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(3);

        $i31 = (int) $c1;

        if $i31 != 67 goto label45;

        r2 = "hasComplexContent";

        r5 = "hasComplexContent";

        r4 = "hasComplexContent";

        r3 = "hasComplexContent";

        b12 = 17;

        goto label50;

     label45:
        $i32 = (int) $c1;

        if $i32 != 99 goto label46;

        r2 = "inScopeNamespaces";

        r5 = "inScopeNamespaces";

        r4 = "inScopeNamespaces";

        r3 = "inScopeNamespaces";

        b12 = 13;

        goto label50;

     label46:
        $i33 = (int) $c1;

        if $i33 != 101 goto label50;

        r2 = "insertChildBefore";

        r5 = "insertChildBefore";

        r4 = "insertChildBefore";

        r3 = "insertChildBefore";

        b12 = 15;

        goto label50;

     label47:
        r2 = "propertyIsEnumerable";

        r5 = "propertyIsEnumerable";

        r4 = "propertyIsEnumerable";

        r3 = "propertyIsEnumerable";

        b12 = 29;

        goto label50;

     label48:
        r2 = "namespaceDeclarations";

        r5 = "namespaceDeclarations";

        r4 = "namespaceDeclarations";

        r3 = "namespaceDeclarations";

        b12 = 23;

        goto label50;

     label49:
        r2 = "processingInstructions";

        r5 = "processingInstructions";

        r4 = "processingInstructions";

        r3 = "processingInstructions";

        b12 = 28;

        goto label50;

     label50:
        if r5 == null goto label51;

        if r3 == r0 goto label51;

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label51;

        b12 = 0;

     label51:
        return b12;
    }

    protected void initPrototypeId(int)
    {
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r0;
        java.lang.IllegalArgumentException $r6;
        org.mozilla.javascript.xmlimpl.XML $r5;
        org.mozilla.javascript.IdFunctionObject $r1, r8;
        byte b1;
        int i0;
        org.mozilla.javascript.xmlimpl.XMLCtor $r3;
        java.lang.Object $r2, $r4, $r10;
        java.lang.String $r7, r9;
        boolean $z0;

        r0 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label04;
            case 3: goto label05;
            case 4: goto label06;
            case 5: goto label07;
            case 6: goto label08;
            case 7: goto label09;
            case 8: goto label10;
            case 9: goto label11;
            case 10: goto label12;
            case 11: goto label13;
            case 12: goto label14;
            case 13: goto label18;
            case 14: goto label19;
            case 15: goto label20;
            case 16: goto label16;
            case 17: goto label15;
            case 18: goto label17;
            case 19: goto label21;
            case 20: goto label22;
            case 21: goto label23;
            case 22: goto label24;
            case 23: goto label25;
            case 24: goto label26;
            case 25: goto label27;
            case 26: goto label28;
            case 27: goto label29;
            case 28: goto label30;
            case 29: goto label31;
            case 30: goto label32;
            case 31: goto label33;
            case 32: goto label34;
            case 33: goto label35;
            case 34: goto label36;
            case 35: goto label37;
            case 36: goto label38;
            case 37: goto label39;
            case 38: goto label40;
            case 39: goto label41;
            case 40: goto label42;
            case 41: goto label43;
            default: goto label44;
        };

     label01:
        $z0 = r0 instanceof org.mozilla.javascript.xmlimpl.XML;

        if $z0 == 0 goto label02;

        $r3 = new org.mozilla.javascript.xmlimpl.XMLCtor;

        $r5 = (org.mozilla.javascript.xmlimpl.XML) r0;

        $r4 = <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object XMLOBJECT_TAG>;

        specialinvoke $r3.<org.mozilla.javascript.xmlimpl.XMLCtor: void <init>(org.mozilla.javascript.xmlimpl.XML,java.lang.Object,int,int)>($r5, $r4, i0, 1);

        r8 = $r3;

        goto label03;

     label02:
        $r1 = new org.mozilla.javascript.IdFunctionObject;

        $r2 = <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object XMLOBJECT_TAG>;

        specialinvoke $r1.<org.mozilla.javascript.IdFunctionObject: void <init>(org.mozilla.javascript.IdFunctionCall,java.lang.Object,int,int)>(r0, $r2, i0, 1);

        r8 = $r1;

     label03:
        virtualinvoke r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: void initPrototypeConstructor(org.mozilla.javascript.IdFunctionObject)>(r8);

        return;

     label04:
        b1 = 1;

        r9 = "addNamespace";

        goto label45;

     label05:
        b1 = 1;

        r9 = "appendChild";

        goto label45;

     label06:
        b1 = 1;

        r9 = "attribute";

        goto label45;

     label07:
        b1 = 0;

        r9 = "attributes";

        goto label45;

     label08:
        b1 = 1;

        r9 = "child";

        goto label45;

     label09:
        b1 = 0;

        r9 = "childIndex";

        goto label45;

     label10:
        b1 = 0;

        r9 = "children";

        goto label45;

     label11:
        b1 = 0;

        r9 = "comments";

        goto label45;

     label12:
        b1 = 1;

        r9 = "contains";

        goto label45;

     label13:
        b1 = 0;

        r9 = "copy";

        goto label45;

     label14:
        b1 = 1;

        r9 = "descendants";

        goto label45;

     label15:
        b1 = 0;

        r9 = "hasComplexContent";

        goto label45;

     label16:
        b1 = 1;

        r9 = "hasOwnProperty";

        goto label45;

     label17:
        b1 = 0;

        r9 = "hasSimpleContent";

        goto label45;

     label18:
        b1 = 0;

        r9 = "inScopeNamespaces";

        goto label45;

     label19:
        b1 = 2;

        r9 = "insertChildAfter";

        goto label45;

     label20:
        b1 = 2;

        r9 = "insertChildBefore";

        goto label45;

     label21:
        b1 = 0;

        r9 = "length";

        goto label45;

     label22:
        b1 = 0;

        r9 = "localName";

        goto label45;

     label23:
        b1 = 0;

        r9 = "name";

        goto label45;

     label24:
        b1 = 1;

        r9 = "namespace";

        goto label45;

     label25:
        b1 = 0;

        r9 = "namespaceDeclarations";

        goto label45;

     label26:
        b1 = 0;

        r9 = "nodeKind";

        goto label45;

     label27:
        b1 = 0;

        r9 = "normalize";

        goto label45;

     label28:
        b1 = 0;

        r9 = "parent";

        goto label45;

     label29:
        b1 = 1;

        r9 = "prependChild";

        goto label45;

     label30:
        b1 = 1;

        r9 = "processingInstructions";

        goto label45;

     label31:
        b1 = 1;

        r9 = "propertyIsEnumerable";

        goto label45;

     label32:
        b1 = 1;

        r9 = "removeNamespace";

        goto label45;

     label33:
        b1 = 2;

        r9 = "replace";

        goto label45;

     label34:
        b1 = 1;

        r9 = "setChildren";

        goto label45;

     label35:
        b1 = 1;

        r9 = "setLocalName";

        goto label45;

     label36:
        b1 = 1;

        r9 = "setName";

        goto label45;

     label37:
        b1 = 1;

        r9 = "setNamespace";

        goto label45;

     label38:
        b1 = 0;

        r9 = "text";

        goto label45;

     label39:
        b1 = 0;

        r9 = "toString";

        goto label45;

     label40:
        b1 = 1;

        r9 = "toSource";

        goto label45;

     label41:
        b1 = 1;

        r9 = "toXMLString";

        goto label45;

     label42:
        b1 = 0;

        r9 = "valueOf";

        goto label45;

     label43:
        b1 = 0;

        r9 = "getXmlObject";

        goto label45;

     label44:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label45:
        $r10 = <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object XMLOBJECT_TAG>;

        virtualinvoke r0.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: void initPrototypeMethod(java.lang.Object,int,java.lang.String,int)>($r10, i0, r9, b1);

        return;
    }

    public java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject, org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        java.lang.Integer $r55, $r78;
        org.mozilla.javascript.EcmaError $r97;
        java.lang.Object[] r8, $r49, $r68;
        long $l4, $l10;
        org.mozilla.javascript.xmlimpl.XMLLibImpl $r15, $r19, $r21, $r22, $r29, $r35, $r43, $r58, $r71, $r79, $r85, $r91;
        org.mozilla.javascript.xmlimpl.XMLList $r12, $r72, $r76, $r77, $r82, $r83, $r84, $r88;
        org.mozilla.javascript.xmlimpl.XMLObjectImpl r3, r13;
        org.mozilla.javascript.xmlimpl.XMLName $r31, $r60, $r81, $r87, $r100, $r102;
        org.mozilla.javascript.xmlimpl.QName $r26, $r53, r105, r106;
        org.mozilla.javascript.Scriptable r2, r5, $r50, $r69;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i8, $i9;
        java.lang.Boolean $r40, $r56, $r57, $r61, $r75;
        org.apache.xmlbeans.XmlObject $r4;
        java.lang.Object $r1, $r6, $r7, $r16, $r18, $r24, $r25, $r27, $r30, $r32, $r36, $r39, $r41, $r42, $r44, $r46, $r47, $r48, $r51, $r52, $r59, $r62, $r63, $r65, $r66, $r70, $r73, $r74, $r80, $r86, $r89, $r92, $r98, $r99, $r104, $r107;
        org.mozilla.javascript.IdFunctionObject r0;
        java.lang.String $r9, $r10, $r11, $r20, $r23, $r54, $r96, $r101, r103;
        org.mozilla.javascript.Context r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        org.mozilla.javascript.xmlimpl.XML $r28, $r33, $r34, $r38, $r45, $r64, $r67, $r90, $r94;
        org.mozilla.javascript.xmlimpl.Namespace $r17, $r37, $r93;
        java.lang.IllegalArgumentException $r95;

        r13 := @this: org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        r0 := @parameter0: org.mozilla.javascript.IdFunctionObject;

        r14 := @parameter1: org.mozilla.javascript.Context;

        r5 := @parameter2: org.mozilla.javascript.Scriptable;

        r2 := @parameter3: org.mozilla.javascript.Scriptable;

        r8 := @parameter4: java.lang.Object[];

        $r1 = <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object XMLOBJECT_TAG>;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: boolean hasTag(java.lang.Object)>($r1);

        if $z0 != 0 goto label01;

        $r99 = specialinvoke r13.<org.mozilla.javascript.xml.XMLObject: java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r0, r14, r5, r2, r8);

        return $r99;

     label01:
        $i0 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: int methodId()>();

        if $i0 != 1 goto label04;

        if r2 != null goto label02;

        $z9 = 1;

        goto label03;

     label02:
        $z9 = 0;

     label03:
        $r98 = virtualinvoke r13.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object jsConstructor(org.mozilla.javascript.Context,boolean,java.lang.Object[])>(r14, $z9, r8);

        return $r98;

     label04:
        $z1 = r2 instanceof org.mozilla.javascript.xmlimpl.XMLObjectImpl;

        if $z1 != 0 goto label05;

        $r97 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.EcmaError incompatibleCallError(org.mozilla.javascript.IdFunctionObject)>(r0);

        throw $r97;

     label05:
        r3 = (org.mozilla.javascript.xmlimpl.XMLObjectImpl) r2;

        tableswitch($i0)
        {
            case 2: goto label06;
            case 3: goto label07;
            case 4: goto label08;
            case 5: goto label09;
            case 6: goto label10;
            case 7: goto label12;
            case 8: goto label13;
            case 9: goto label14;
            case 10: goto label15;
            case 11: goto label16;
            case 12: goto label17;
            case 13: goto label20;
            case 14: goto label21;
            case 15: goto label22;
            case 16: goto label23;
            case 17: goto label24;
            case 18: goto label25;
            case 19: goto label26;
            case 20: goto label27;
            case 21: goto label28;
            case 22: goto label29;
            case 23: goto label32;
            case 24: goto label33;
            case 25: goto label34;
            case 26: goto label35;
            case 27: goto label36;
            case 28: goto label37;
            case 29: goto label40;
            case 30: goto label41;
            case 31: goto label42;
            case 32: goto label44;
            case 33: goto label45;
            case 34: goto label48;
            case 35: goto label54;
            case 36: goto label55;
            case 37: goto label56;
            case 38: goto label57;
            case 39: goto label58;
            case 40: goto label59;
            case 41: goto label60;
            default: goto label61;
        };

     label06:
        $r91 = r13.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r92 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $r93 = virtualinvoke $r91.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.Namespace castToNamespace(org.mozilla.javascript.Context,java.lang.Object)>(r14, $r92);

        $r94 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XML addNamespace(org.mozilla.javascript.xmlimpl.Namespace)>($r93);

        return $r94;

     label07:
        $r89 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $r90 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XML appendChild(java.lang.Object)>($r89);

        return $r90;

     label08:
        $r85 = r13.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r86 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $r87 = virtualinvoke $r85.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.XMLName toAttributeName(org.mozilla.javascript.Context,java.lang.Object)>(r14, $r86);

        $r88 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLList attribute(org.mozilla.javascript.xmlimpl.XMLName)>($r87);

        return $r88;

     label09:
        $r84 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLList attributes()>();

        return $r84;

     label10:
        $r79 = r13.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r80 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $r81 = virtualinvoke $r79.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.XMLName toXMLNameOrIndex(org.mozilla.javascript.Context,java.lang.Object)>(r14, $r80);

        if $r81 != null goto label11;

        $l10 = staticinvoke <org.mozilla.javascript.ScriptRuntime: long lastUint32Result(org.mozilla.javascript.Context)>(r14);

        $r83 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLList child(long)>($l10);

        return $r83;

     label11:
        $r82 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLList child(org.mozilla.javascript.xmlimpl.XMLName)>($r81);

        return $r82;

     label12:
        $i9 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: int childIndex()>();

        $r78 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Integer wrapInt(int)>($i9);

        return $r78;

     label13:
        $r77 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLList children()>();

        return $r77;

     label14:
        $r76 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLList comments()>();

        return $r76;

     label15:
        $r74 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $z8 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: boolean contains(java.lang.Object)>($r74);

        $r75 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Boolean wrapBoolean(boolean)>($z8);

        return $r75;

     label16:
        $r73 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object copy()>();

        return $r73;

     label17:
        $i8 = lengthof r8;

        if $i8 != 0 goto label18;

        $r100 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLName: org.mozilla.javascript.xmlimpl.XMLName formStar()>();

        goto label19;

     label18:
        $r71 = r13.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r70 = r8[0];

        $r100 = virtualinvoke $r71.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.XMLName toXMLName(org.mozilla.javascript.Context,java.lang.Object)>(r14, $r70);

     label19:
        $r72 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLList descendants(org.mozilla.javascript.xmlimpl.XMLName)>($r100);

        return $r72;

     label20:
        $r68 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object[] inScopeNamespaces()>();

        $r69 = virtualinvoke r14.<org.mozilla.javascript.Context: org.mozilla.javascript.Scriptable newArray(org.mozilla.javascript.Scriptable,java.lang.Object[])>(r5, $r68);

        return $r69;

     label21:
        $r65 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $r66 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 1);

        $r67 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XML insertChildAfter(java.lang.Object,java.lang.Object)>($r65, $r66);

        return $r67;

     label22:
        $r62 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $r63 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 1);

        $r64 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XML insertChildBefore(java.lang.Object,java.lang.Object)>($r62, $r63);

        return $r64;

     label23:
        $r58 = r13.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r59 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $r60 = virtualinvoke $r58.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.XMLName toXMLName(org.mozilla.javascript.Context,java.lang.Object)>(r14, $r59);

        $z7 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: boolean hasOwnProperty(org.mozilla.javascript.xmlimpl.XMLName)>($r60);

        $r61 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Boolean wrapBoolean(boolean)>($z7);

        return $r61;

     label24:
        $z6 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: boolean hasComplexContent()>();

        $r57 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Boolean wrapBoolean(boolean)>($z6);

        return $r57;

     label25:
        $z5 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: boolean hasSimpleContent()>();

        $r56 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Boolean wrapBoolean(boolean)>($z5);

        return $r56;

     label26:
        $i7 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: int length()>();

        $r55 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Integer wrapInt(int)>($i7);

        return $r55;

     label27:
        $r54 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.String localName()>();

        return $r54;

     label28:
        $r53 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.QName name()>();

        return $r53;

     label29:
        $i6 = lengthof r8;

        if $i6 <= 0 goto label30;

        $r52 = r8[0];

        $r101 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r52);

        goto label31;

     label30:
        $r101 = null;

     label31:
        $r51 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object namespace(java.lang.String)>($r101);

        return $r51;

     label32:
        $r49 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object[] namespaceDeclarations()>();

        $r50 = virtualinvoke r14.<org.mozilla.javascript.Context: org.mozilla.javascript.Scriptable newArray(org.mozilla.javascript.Scriptable,java.lang.Object[])>(r5, $r49);

        return $r50;

     label33:
        $r48 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object nodeKind()>();

        return $r48;

     label34:
        virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: void normalize()>();

        $r47 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        return $r47;

     label35:
        $r46 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object parent()>();

        return $r46;

     label36:
        $r44 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $r45 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XML prependChild(java.lang.Object)>($r44);

        return $r45;

     label37:
        $i5 = lengthof r8;

        if $i5 <= 0 goto label38;

        $r43 = r13.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r42 = r8[0];

        $r102 = virtualinvoke $r43.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.XMLName toXMLName(org.mozilla.javascript.Context,java.lang.Object)>(r14, $r42);

        goto label39;

     label38:
        $r102 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLName: org.mozilla.javascript.xmlimpl.XMLName formStar()>();

     label39:
        $r41 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object processingInstructions(org.mozilla.javascript.xmlimpl.XMLName)>($r102);

        return $r41;

     label40:
        $r39 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $z4 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: boolean propertyIsEnumerable(java.lang.Object)>($r39);

        $r40 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Boolean wrapBoolean(boolean)>($z4);

        return $r40;

     label41:
        $r35 = r13.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r36 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $r37 = virtualinvoke $r35.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.Namespace castToNamespace(org.mozilla.javascript.Context,java.lang.Object)>(r14, $r36);

        $r38 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XML removeNamespace(org.mozilla.javascript.xmlimpl.Namespace)>($r37);

        return $r38;

     label42:
        $r29 = r13.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r30 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $r31 = virtualinvoke $r29.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.XMLName toXMLNameOrIndex(org.mozilla.javascript.Context,java.lang.Object)>(r14, $r30);

        $r32 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 1);

        if $r31 != null goto label43;

        $l4 = staticinvoke <org.mozilla.javascript.ScriptRuntime: long lastUint32Result(org.mozilla.javascript.Context)>(r14);

        $r34 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XML replace(long,java.lang.Object)>($l4, $r32);

        return $r34;

     label43:
        $r33 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XML replace(org.mozilla.javascript.xmlimpl.XMLName,java.lang.Object)>($r31, $r32);

        return $r33;

     label44:
        $r27 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $r28 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XML setChildren(java.lang.Object)>($r27);

        return $r28;

     label45:
        $r24 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $z3 = $r24 instanceof org.mozilla.javascript.xmlimpl.QName;

        if $z3 == 0 goto label46;

        $r26 = (org.mozilla.javascript.xmlimpl.QName) $r24;

        r103 = virtualinvoke $r26.<org.mozilla.javascript.xmlimpl.QName: java.lang.String localName()>();

        goto label47;

     label46:
        r103 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r24);

     label47:
        virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: void setLocalName(java.lang.String)>(r103);

        $r25 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        return $r25;

     label48:
        $i3 = lengthof r8;

        if $i3 == 0 goto label49;

        $r104 = r8[0];

        goto label50;

     label49:
        $r104 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

     label50:
        $z2 = $r104 instanceof org.mozilla.javascript.xmlimpl.QName;

        if $z2 == 0 goto label52;

        r105 = (org.mozilla.javascript.xmlimpl.QName) $r104;

        $r20 = virtualinvoke r105.<org.mozilla.javascript.xmlimpl.QName: java.lang.String uri()>();

        if $r20 != null goto label51;

        $r22 = r13.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r23 = virtualinvoke r105.<org.mozilla.javascript.xmlimpl.QName: java.lang.String localName()>();

        r106 = virtualinvoke $r22.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.QName constructQNameFromString(org.mozilla.javascript.Context,java.lang.String)>(r14, $r23);

        goto label53;

     label51:
        $r21 = r13.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        r106 = virtualinvoke $r21.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.QName constructQName(org.mozilla.javascript.Context,java.lang.Object)>(r14, r105);

        goto label53;

     label52:
        $r19 = r13.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        r106 = virtualinvoke $r19.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.QName constructQName(org.mozilla.javascript.Context,java.lang.Object)>(r14, $r104);

     label53:
        virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: void setName(org.mozilla.javascript.xmlimpl.QName)>(r106);

        $r107 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        return $r107;

     label54:
        $r15 = r13.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLLibImpl lib>;

        $r16 = staticinvoke <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object arg(java.lang.Object[],int)>(r8, 0);

        $r17 = virtualinvoke $r15.<org.mozilla.javascript.xmlimpl.XMLLibImpl: org.mozilla.javascript.xmlimpl.Namespace castToNamespace(org.mozilla.javascript.Context,java.lang.Object)>(r14, $r16);

        virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: void setNamespace(org.mozilla.javascript.xmlimpl.Namespace)>($r17);

        $r18 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        return $r18;

     label55:
        $r12 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.mozilla.javascript.xmlimpl.XMLList text()>();

        return $r12;

     label56:
        $r11 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.String toString()>();

        return $r11;

     label57:
        $i2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: int toInt32(java.lang.Object[],int)>(r8, 0);

        $r10 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.String toSource(int)>($i2);

        return $r10;

     label58:
        $i1 = staticinvoke <org.mozilla.javascript.ScriptRuntime: int toInt32(java.lang.Object[],int)>(r8, 0);

        $r9 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.String toXMLString(int)>($i1);

        return $r9;

     label59:
        $r7 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object valueOf()>();

        return $r7;

     label60:
        $r4 = virtualinvoke r3.<org.mozilla.javascript.xmlimpl.XMLObjectImpl: org.apache.xmlbeans.XmlObject getXmlObject()>();

        $r6 = staticinvoke <org.mozilla.javascript.Context: java.lang.Object javaToJS(java.lang.Object,org.mozilla.javascript.Scriptable)>($r4, r5);

        return $r6;

     label61:
        $r95 = new java.lang.IllegalArgumentException;

        $r96 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        specialinvoke $r95.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r96);

        throw $r95;
    }

    private static java.lang.Object arg(java.lang.Object[], int)
    {
        java.lang.Object[] r0;
        int i0, $i1;
        java.lang.Object $r1;

        r0 := @parameter0: java.lang.Object[];

        i0 := @parameter1: int;

        $i1 = lengthof r0;

        if i0 >= $i1 goto label1;

        $r1 = r0[i0];

        goto label2;

     label1:
        $r1 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

     label2:
        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int MAX_PROTOTYPE_ID> = 41;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_getXmlObject> = 41;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_valueOf> = 40;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_toXMLString> = 39;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_toSource> = 38;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_toString> = 37;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_text> = 36;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_setNamespace> = 35;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_setName> = 34;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_setLocalName> = 33;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_setChildren> = 32;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_replace> = 31;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_removeNamespace> = 30;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_propertyIsEnumerable> = 29;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_processingInstructions> = 28;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_prependChild> = 27;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_parent> = 26;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_normalize> = 25;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_nodeKind> = 24;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_namespaceDeclarations> = 23;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_namespace> = 22;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_name> = 21;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_localName> = 20;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_length> = 19;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_hasSimpleContent> = 18;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_hasComplexContent> = 17;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_hasOwnProperty> = 16;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_insertChildBefore> = 15;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_insertChildAfter> = 14;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_inScopeNamespaces> = 13;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_descendants> = 12;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_copy> = 11;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_contains> = 10;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_comments> = 9;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_children> = 8;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_childIndex> = 7;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_child> = 6;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_attributes> = 5;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_attribute> = 4;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_appendChild> = 3;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_addNamespace> = 2;

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: int Id_constructor> = 1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.mozilla.javascript.xmlimpl.XMLObjectImpl: java.lang.Object XMLOBJECT_TAG> = $r0;

        return;
    }
}
