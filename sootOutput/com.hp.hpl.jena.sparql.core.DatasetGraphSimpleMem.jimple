public class com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem extends com.hp.hpl.jena.sparql.core.DatasetGraphCaching
{
    private com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet triples;
    private com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet quads;

    public void <init>()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r1, $r2;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphCaching: void <init>()>();

        $r1 = new com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet triples> = $r1;

        $r2 = new com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet;

        specialinvoke $r2.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: void <init>()>();

        r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet quads> = $r2;

        return;
    }

    public java.util.Iterator findInDftGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.util.Iterator $r3, $r4;
        com.hp.hpl.jena.graph.Node r7, r8, r9, $r11;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.graph.Triple r6;
        com.hp.hpl.jena.sparql.core.Quad $r10;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r2;
        java.lang.Object $r5;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r1;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        r7 := @parameter0: com.hp.hpl.jena.graph.Node;

        r8 := @parameter1: com.hp.hpl.jena.graph.Node;

        r9 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet triples>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.graph.Triple) $r5;

        $z1 = specialinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: boolean matches(com.hp.hpl.jena.graph.Triple,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r6, r7, r8, r9);

        if $z1 == 0 goto label2;

        $r10 = new com.hp.hpl.jena.sparql.core.Quad;

        $r11 = <com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node defaultGraphIRI>;

        specialinvoke $r10.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Triple)>($r11, r6);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r10);

     label2:
        goto label1;

     label3:
        $r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        return $r4;
    }

    public java.util.Iterator findInSpecificNamedGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.util.Iterator $r3, $r4;
        com.hp.hpl.jena.graph.Node r7, r8, r9, r10;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.core.Quad r6;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r2;
        java.lang.Object $r5;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r1;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        r7 := @parameter0: com.hp.hpl.jena.graph.Node;

        r8 := @parameter1: com.hp.hpl.jena.graph.Node;

        r9 := @parameter2: com.hp.hpl.jena.graph.Node;

        r10 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet quads>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.core.Quad) $r5;

        $z1 = specialinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: boolean matches(com.hp.hpl.jena.sparql.core.Quad,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r6, r7, r8, r9, r10);

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r6);

     label2:
        goto label1;

     label3:
        $r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        return $r4;
    }

    public java.util.Iterator findInAnyNamedGraphs(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        java.util.Iterator $r3, $r4;
        com.hp.hpl.jena.graph.Node r7, r8, r9, $r10;
        java.util.ArrayList $r0;
        com.hp.hpl.jena.sparql.core.Quad r6;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r2;
        java.lang.Object $r5;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r1;
        boolean $z0, $z1;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        r7 := @parameter0: com.hp.hpl.jena.graph.Node;

        r8 := @parameter1: com.hp.hpl.jena.graph.Node;

        r9 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet quads>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r6 = (com.hp.hpl.jena.sparql.core.Quad) $r5;

        $r10 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $z1 = specialinvoke r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: boolean matches(com.hp.hpl.jena.sparql.core.Quad,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r6, $r10, r7, r8, r9);

        if $z1 == 0 goto label2;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r6);

     label2:
        goto label1;

     label3:
        $r4 = interfaceinvoke $r0.<java.util.List: java.util.Iterator iterator()>();

        return $r4;
    }

    public static com.hp.hpl.jena.graph.Node nullAsAny(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, $r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = <com.hp.hpl.jena.graph.Node: com.hp.hpl.jena.graph.Node ANY>;

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.graph.Node nullAsDft(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r0, $r1);

        return $r2;
    }

    public static com.hp.hpl.jena.graph.Node nullAsDft(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node r0, r1, $r2;

        r0 := @parameter0: com.hp.hpl.jena.graph.Node;

        r1 := @parameter1: com.hp.hpl.jena.graph.Node;

        if r0 != null goto label1;

        $r2 = r1;

        goto label2;

     label1:
        $r2 = r0;

     label2:
        return $r2;
    }

    private boolean matches(com.hp.hpl.jena.graph.Triple, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node $r0, $r1, $r2, r5, r6, r7;
        com.hp.hpl.jena.graph.Triple r3;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r4;
        boolean $z0;

        r4 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        r3 := @parameter0: com.hp.hpl.jena.graph.Triple;

        r5 := @parameter1: com.hp.hpl.jena.graph.Node;

        r6 := @parameter2: com.hp.hpl.jena.graph.Node;

        r7 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.graph.Node nullAsAny(com.hp.hpl.jena.graph.Node)>(r5);

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.graph.Node nullAsAny(com.hp.hpl.jena.graph.Node)>(r6);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.graph.Node nullAsAny(com.hp.hpl.jena.graph.Node)>(r7);

        $z0 = virtualinvoke r3.<com.hp.hpl.jena.graph.Triple: boolean matches(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r0, $r1, $r2);

        return $z0;
    }

    private boolean matches(com.hp.hpl.jena.sparql.core.Quad, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.graph.Node $r0, $r1, $r2, $r3, r6, r7, r8, r9;
        com.hp.hpl.jena.sparql.core.Quad r4;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r5;
        boolean $z0;

        r5 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        r4 := @parameter0: com.hp.hpl.jena.sparql.core.Quad;

        r6 := @parameter1: com.hp.hpl.jena.graph.Node;

        r7 := @parameter2: com.hp.hpl.jena.graph.Node;

        r8 := @parameter3: com.hp.hpl.jena.graph.Node;

        r9 := @parameter4: com.hp.hpl.jena.graph.Node;

        $r0 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.graph.Node nullAsAny(com.hp.hpl.jena.graph.Node)>(r6);

        $r1 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.graph.Node nullAsAny(com.hp.hpl.jena.graph.Node)>(r7);

        $r2 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.graph.Node nullAsAny(com.hp.hpl.jena.graph.Node)>(r8);

        $r3 = staticinvoke <com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.graph.Node nullAsAny(com.hp.hpl.jena.graph.Node)>(r9);

        $z0 = virtualinvoke r4.<com.hp.hpl.jena.sparql.core.Quad: boolean matches(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>($r0, $r1, $r2, $r3);

        return $z0;
    }

    protected void addToDftGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r5;
        com.hp.hpl.jena.graph.Node r1, r2, r3;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r4;
        com.hp.hpl.jena.graph.Triple $r0;

        r4 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r0.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3);

        $r5 = r4.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet triples>;

        virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: void add(java.lang.Object)>($r0);

        return;
    }

    protected void addToNamedGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r6;
        com.hp.hpl.jena.graph.Node r1, r2, r3, r4;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r5;
        com.hp.hpl.jena.sparql.core.Quad $r0;

        r5 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        r1 := @parameter0: com.hp.hpl.jena.graph.Node;

        r2 := @parameter1: com.hp.hpl.jena.graph.Node;

        r3 := @parameter2: com.hp.hpl.jena.graph.Node;

        r4 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r1, r2, r3, r4);

        $r6 = r5.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet quads>;

        virtualinvoke $r6.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: void add(java.lang.Object)>($r0);

        return;
    }

    protected void deleteFromDftGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r5;
        com.hp.hpl.jena.graph.Node r2, r3, r4;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r0;
        com.hp.hpl.jena.graph.Triple $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        $r5 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet triples>;

        $r1 = new com.hp.hpl.jena.graph.Triple;

        specialinvoke $r1.<com.hp.hpl.jena.graph.Triple: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4);

        virtualinvoke $r5.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: void remove(java.lang.Object)>($r1);

        return;
    }

    protected void deleteFromNamedGraph(com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node, com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r6;
        com.hp.hpl.jena.graph.Node r2, r3, r4, r5;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r0;
        com.hp.hpl.jena.sparql.core.Quad $r1;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        r3 := @parameter1: com.hp.hpl.jena.graph.Node;

        r4 := @parameter2: com.hp.hpl.jena.graph.Node;

        r5 := @parameter3: com.hp.hpl.jena.graph.Node;

        $r6 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet quads>;

        $r1 = new com.hp.hpl.jena.sparql.core.Quad;

        specialinvoke $r1.<com.hp.hpl.jena.sparql.core.Quad: void <init>(com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node,com.hp.hpl.jena.graph.Node)>(r2, r3, r4, r5);

        virtualinvoke $r6.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: void remove(java.lang.Object)>($r1);

        return;
    }

    protected com.hp.hpl.jena.graph.Graph _createDefaultGraph()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft $r0;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r1;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        $r0 = new com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphDft: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem)>(r1);

        return $r0;
    }

    protected com.hp.hpl.jena.graph.Graph _createNamedGraph(com.hp.hpl.jena.graph.Node)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed $r0;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r1;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r0 = new com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed;

        specialinvoke $r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$GraphNamed: void <init>(com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem,com.hp.hpl.jena.graph.Node)>(r1, r2);

        return $r0;
    }

    protected boolean _containsGraph(com.hp.hpl.jena.graph.Node)
    {
        java.util.Set $r1;
        com.hp.hpl.jena.graph.Node r2;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r0;
        boolean $z0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        r2 := @parameter0: com.hp.hpl.jena.graph.Node;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: java.util.Set graphNodes()>();

        $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        return $z0;
    }

    public java.util.Iterator listGraphNodes()
    {
        java.util.Set $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r0;
        java.util.Iterator $r2;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        $r1 = specialinvoke r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: java.util.Set graphNodes()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        return $r2;
    }

    private java.util.Set graphNodes()
    {
        java.util.Iterator $r3;
        com.hp.hpl.jena.graph.Node $r6;
        com.hp.hpl.jena.sparql.core.Quad r5;
        java.util.HashSet $r0;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r2;
        java.lang.Object $r4;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r1;
        boolean $z0;

        r1 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        $r2 = r1.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet quads>;

        $r3 = virtualinvoke $r2.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (com.hp.hpl.jena.sparql.core.Quad) $r4;

        $r6 = virtualinvoke r5.<com.hp.hpl.jena.sparql.core.Quad: com.hp.hpl.jena.graph.Node getGraph()>();

        interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>($r6);

        goto label1;

     label2:
        return $r0;
    }

    protected void _close()
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r0;

        r0 := @this: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        return;
    }

    static com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet access$000(com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet triples>;

        return $r1;
    }

    static com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet access$100(com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem)
    {
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet $r1;
        com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem r0;

        r0 := @parameter0: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem;

        $r1 = r0.<com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem: com.hp.hpl.jena.sparql.core.DatasetGraphSimpleMem$MiniSet quads>;

        return $r1;
    }
}
