public class org.mozilla.javascript.regexp.NativeRegExp extends org.mozilla.javascript.IdScriptableObject implements org.mozilla.javascript.Function
{
    static final long serialVersionUID;
    private static final java.lang.Object REGEXP_TAG;
    public static final int JSREG_GLOB;
    public static final int JSREG_FOLD;
    public static final int JSREG_MULTILINE;
    public static final int TEST;
    public static final int MATCH;
    public static final int PREFIX;
    private static final boolean debug;
    private static final byte REOP_EMPTY;
    private static final byte REOP_ALT;
    private static final byte REOP_BOL;
    private static final byte REOP_EOL;
    private static final byte REOP_WBDRY;
    private static final byte REOP_WNONBDRY;
    private static final byte REOP_QUANT;
    private static final byte REOP_STAR;
    private static final byte REOP_PLUS;
    private static final byte REOP_OPT;
    private static final byte REOP_LPAREN;
    private static final byte REOP_RPAREN;
    private static final byte REOP_DOT;
    private static final byte REOP_CCLASS;
    private static final byte REOP_DIGIT;
    private static final byte REOP_NONDIGIT;
    private static final byte REOP_ALNUM;
    private static final byte REOP_NONALNUM;
    private static final byte REOP_SPACE;
    private static final byte REOP_NONSPACE;
    private static final byte REOP_BACKREF;
    private static final byte REOP_FLAT;
    private static final byte REOP_FLAT1;
    private static final byte REOP_JUMP;
    private static final byte REOP_DOTSTAR;
    private static final byte REOP_ANCHOR;
    private static final byte REOP_EOLONLY;
    private static final byte REOP_UCFLAT;
    private static final byte REOP_UCFLAT1;
    private static final byte REOP_UCCLASS;
    private static final byte REOP_NUCCLASS;
    private static final byte REOP_BACKREFi;
    private static final byte REOP_FLATi;
    private static final byte REOP_FLAT1i;
    private static final byte REOP_UCFLATi;
    private static final byte REOP_UCFLAT1i;
    private static final byte REOP_ANCHOR1;
    private static final byte REOP_NCCLASS;
    private static final byte REOP_DOTSTARMIN;
    private static final byte REOP_LPARENNON;
    private static final byte REOP_RPARENNON;
    private static final byte REOP_ASSERT;
    private static final byte REOP_ASSERT_NOT;
    private static final byte REOP_ASSERTTEST;
    private static final byte REOP_ASSERTNOTTEST;
    private static final byte REOP_MINIMALSTAR;
    private static final byte REOP_MINIMALPLUS;
    private static final byte REOP_MINIMALOPT;
    private static final byte REOP_MINIMALQUANT;
    private static final byte REOP_ENDCHILD;
    private static final byte REOP_CLASS;
    private static final byte REOP_REPEAT;
    private static final byte REOP_MINIMALREPEAT;
    private static final byte REOP_END;
    private static final int OFFSET_LEN;
    private static final int INDEX_LEN;
    private static final int Id_lastIndex;
    private static final int Id_source;
    private static final int Id_global;
    private static final int Id_ignoreCase;
    private static final int Id_multiline;
    private static final int MAX_INSTANCE_ID;
    private static final int Id_compile;
    private static final int Id_toString;
    private static final int Id_toSource;
    private static final int Id_exec;
    private static final int Id_test;
    private static final int Id_prefix;
    private static final int MAX_PROTOTYPE_ID;
    private org.mozilla.javascript.regexp.RECompiled re;
    double lastIndex;

    public static void init(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, boolean)
    {
        org.mozilla.javascript.regexp.NativeRegExp $r0;
        org.mozilla.javascript.Context r6;
        org.mozilla.javascript.regexp.RECompiled $r2;
        org.mozilla.javascript.regexp.NativeRegExpCtor $r5;
        org.mozilla.javascript.Scriptable r3, $r4;
        java.lang.Object $r1;
        boolean z0;

        r6 := @parameter0: org.mozilla.javascript.Context;

        r3 := @parameter1: org.mozilla.javascript.Scriptable;

        z0 := @parameter2: boolean;

        $r0 = new org.mozilla.javascript.regexp.NativeRegExp;

        specialinvoke $r0.<org.mozilla.javascript.regexp.NativeRegExp: void <init>()>();

        $r1 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object compileRE(java.lang.String,java.lang.String,boolean)>("", null, 0);

        $r2 = (org.mozilla.javascript.regexp.RECompiled) $r1;

        $r0.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re> = $r2;

        virtualinvoke $r0.<org.mozilla.javascript.regexp.NativeRegExp: void activatePrototypeMap(int)>(6);

        virtualinvoke $r0.<org.mozilla.javascript.regexp.NativeRegExp: void setParentScope(org.mozilla.javascript.Scriptable)>(r3);

        $r4 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.Scriptable getObjectPrototype(org.mozilla.javascript.Scriptable)>(r3);

        virtualinvoke $r0.<org.mozilla.javascript.regexp.NativeRegExp: void setPrototype(org.mozilla.javascript.Scriptable)>($r4);

        $r5 = new org.mozilla.javascript.regexp.NativeRegExpCtor;

        specialinvoke $r5.<org.mozilla.javascript.regexp.NativeRegExpCtor: void <init>()>();

        virtualinvoke $r0.<org.mozilla.javascript.regexp.NativeRegExp: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>("constructor", $r0, $r5);

        staticinvoke <org.mozilla.javascript.ScriptRuntime: void setFunctionProtoAndParent(org.mozilla.javascript.BaseFunction,org.mozilla.javascript.Scriptable)>($r5, r3);

        virtualinvoke $r5.<org.mozilla.javascript.regexp.NativeRegExpCtor: void setImmunePrototypeProperty(java.lang.Object)>($r0);

        if z0 == 0 goto label1;

        virtualinvoke $r0.<org.mozilla.javascript.regexp.NativeRegExp: void sealObject()>();

        virtualinvoke $r5.<org.mozilla.javascript.regexp.NativeRegExpCtor: void sealObject()>();

     label1:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void defineProperty(org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object,int)>(r3, "RegExp", $r5, 2);

        return;
    }

    void <init>(org.mozilla.javascript.Scriptable, java.lang.Object)
    {
        org.mozilla.javascript.regexp.NativeRegExp r0;
        org.mozilla.javascript.Scriptable r3;
        org.mozilla.javascript.regexp.RECompiled $r2;
        java.lang.Object r1;

        r0 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        r3 := @parameter0: org.mozilla.javascript.Scriptable;

        r1 := @parameter1: java.lang.Object;

        specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: void <init>()>();

        $r2 = (org.mozilla.javascript.regexp.RECompiled) r1;

        r0.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re> = $r2;

        r0.<org.mozilla.javascript.regexp.NativeRegExp: double lastIndex> = 0.0;

        staticinvoke <org.mozilla.javascript.ScriptRuntime: void setObjectProtoAndParent(org.mozilla.javascript.ScriptableObject,org.mozilla.javascript.Scriptable)>(r0, r3);

        return;
    }

    public java.lang.String getClassName()
    {
        org.mozilla.javascript.regexp.NativeRegExp r0;

        r0 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        return "RegExp";
    }

    public java.lang.Object call(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        org.mozilla.javascript.regexp.NativeRegExp r0;
        org.mozilla.javascript.Scriptable r2, r5;
        java.lang.Object[] r3;
        org.mozilla.javascript.Context r1;
        java.lang.Object $r4;

        r0 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        r1 := @parameter0: org.mozilla.javascript.Context;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        r5 := @parameter2: org.mozilla.javascript.Scriptable;

        r3 := @parameter3: java.lang.Object[];

        $r4 = specialinvoke r0.<org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object execSub(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[],int)>(r1, r2, r3, 1);

        return $r4;
    }

    public org.mozilla.javascript.Scriptable construct(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        org.mozilla.javascript.regexp.NativeRegExp r0;
        org.mozilla.javascript.Scriptable r2, $r5;
        java.lang.Object[] r3;
        org.mozilla.javascript.Context r1;
        java.lang.Object $r4;

        r0 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        r1 := @parameter0: org.mozilla.javascript.Context;

        r2 := @parameter1: org.mozilla.javascript.Scriptable;

        r3 := @parameter2: java.lang.Object[];

        $r4 = specialinvoke r0.<org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object execSub(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[],int)>(r1, r2, r3, 1);

        $r5 = (org.mozilla.javascript.Scriptable) $r4;

        return $r5;
    }

    org.mozilla.javascript.Scriptable compile(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        org.mozilla.javascript.EcmaError $r12;
        java.lang.Object[] r0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r15, r16, $r17;
        boolean $z0;
        double $d0;
        org.mozilla.javascript.regexp.NativeRegExp r2, $r11;
        org.mozilla.javascript.Context r13;
        org.mozilla.javascript.regexp.RECompiled $r8, $r19;
        org.mozilla.javascript.Scriptable r14;
        java.lang.Object $r1, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r18;

        r2 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        r13 := @parameter0: org.mozilla.javascript.Context;

        r14 := @parameter1: org.mozilla.javascript.Scriptable;

        r0 := @parameter2: java.lang.Object[];

        $i0 = lengthof r0;

        if $i0 <= 0 goto label2;

        $r6 = r0[0];

        $z0 = $r6 instanceof org.mozilla.javascript.regexp.NativeRegExp;

        if $z0 == 0 goto label2;

        $i3 = lengthof r0;

        if $i3 <= 1 goto label1;

        $r10 = r0[1];

        $r9 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        if $r10 == $r9 goto label1;

        $r12 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.EcmaError typeError0(java.lang.String)>("msg.bad.regexp.compile");

        throw $r12;

     label1:
        $r7 = r0[0];

        $r11 = (org.mozilla.javascript.regexp.NativeRegExp) $r7;

        $r8 = $r11.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        r2.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re> = $r8;

        $d0 = $r11.<org.mozilla.javascript.regexp.NativeRegExp: double lastIndex>;

        r2.<org.mozilla.javascript.regexp.NativeRegExp: double lastIndex> = $d0;

        return r2;

     label2:
        $i1 = lengthof r0;

        if $i1 != 0 goto label3;

        $r15 = "";

        goto label4;

     label3:
        $r1 = r0[0];

        $r15 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r1);

     label4:
        r16 = $r15;

        $i2 = lengthof r0;

        if $i2 <= 1 goto label5;

        $r4 = r0[1];

        $r3 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        if $r4 == $r3 goto label5;

        $r5 = r0[1];

        $r17 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r5);

        goto label6;

     label5:
        $r17 = null;

     label6:
        $r18 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object compileRE(java.lang.String,java.lang.String,boolean)>(r16, $r17, 0);

        $r19 = (org.mozilla.javascript.regexp.RECompiled) $r18;

        r2.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re> = $r19;

        r2.<org.mozilla.javascript.regexp.NativeRegExp: double lastIndex> = 0.0;

        return r2;
    }

    public java.lang.String toString()
    {
        java.lang.StringBuffer $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r7;
        org.mozilla.javascript.regexp.NativeRegExp r1;
        org.mozilla.javascript.regexp.RECompiled $r2, $r4, $r5, $r6, $r8;
        char[] $r3, $r9;

        r1 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        $r2 = r1.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $r3 = $r2.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        $i0 = lengthof $r3;

        if $i0 == 0 goto label1;

        $r8 = r1.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $r9 = $r8.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char[])>($r9);

        goto label2;

     label1:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("(?:)");

     label2:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(47);

        $r4 = r1.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $i1 = $r4.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label3;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(103);

     label3:
        $r5 = r1.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $i3 = $r5.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(105);

     label4:
        $r6 = r1.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $i5 = $r6.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        $i6 = $i5 & 4;

        if $i6 == 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(109);

     label5:
        $r7 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r7;
    }

    void <init>()
    {
        org.mozilla.javascript.regexp.NativeRegExp r0;

        r0 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: void <init>()>();

        return;
    }

    private static org.mozilla.javascript.regexp.RegExpImpl getImpl(org.mozilla.javascript.Context)
    {
        org.mozilla.javascript.RegExpProxy $r1;
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.regexp.RegExpImpl $r2;

        r0 := @parameter0: org.mozilla.javascript.Context;

        $r1 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.RegExpProxy getRegExpProxy(org.mozilla.javascript.Context)>(r0);

        $r2 = (org.mozilla.javascript.regexp.RegExpImpl) $r1;

        return $r2;
    }

    private java.lang.Object execSub(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, java.lang.Object[], int)
    {
        java.lang.Object[] r2;
        byte $b1, $b3;
        int[] $r5;
        org.mozilla.javascript.regexp.RegExpImpl $r1;
        int $i0, $i2, $i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r10, r11;
        double $d0, $d1, $d2;
        org.mozilla.javascript.regexp.NativeRegExp r4;
        org.mozilla.javascript.Context r0;
        org.mozilla.javascript.regexp.RECompiled $r8, $r12;
        org.mozilla.javascript.Scriptable r6;
        java.lang.Object $r3, $r7, $r9, r13;

        r4 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        r0 := @parameter0: org.mozilla.javascript.Context;

        r6 := @parameter1: org.mozilla.javascript.Scriptable;

        r2 := @parameter2: java.lang.Object[];

        i5 := @parameter3: int;

        $r1 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RegExpImpl getImpl(org.mozilla.javascript.Context)>(r0);

        $i0 = lengthof r2;

        if $i0 != 0 goto label01;

        r11 = $r1.<org.mozilla.javascript.regexp.RegExpImpl: java.lang.String input>;

        if r11 != null goto label02;

        $r10 = virtualinvoke r4.<org.mozilla.javascript.regexp.NativeRegExp: java.lang.String toString()>();

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void reportError(java.lang.String,java.lang.String)>("msg.no.re.input.for", $r10);

        goto label02;

     label01:
        $r3 = r2[0];

        r11 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String toString(java.lang.Object)>($r3);

     label02:
        $r12 = r4.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $i9 = $r12.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        $i10 = $i9 & 1;

        if $i10 == 0 goto label03;

        $d1 = r4.<org.mozilla.javascript.regexp.NativeRegExp: double lastIndex>;

        goto label04;

     label03:
        $d1 = 0.0;

     label04:
        $b1 = $d1 cmpg 0.0;

        $i11 = (int) $b1;

        if $i11 < 0 goto label05;

        $i2 = virtualinvoke r11.<java.lang.String: int length()>();

        $d0 = (double) $i2;

        $b3 = $d0 cmpg $d1;

        $i12 = (int) $b3;

        if $i12 >= 0 goto label06;

     label05:
        r4.<org.mozilla.javascript.regexp.NativeRegExp: double lastIndex> = 0.0;

        r13 = null;

        goto label10;

     label06:
        $r5 = newarray (int)[1];

        $i4 = (int) $d1;

        $r5[0] = $i4;

        $r7 = virtualinvoke r4.<org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object executeRegExp(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.regexp.RegExpImpl,java.lang.String,int[],int)>(r0, r6, $r1, r11, $r5, i5);

        r13 = $r7;

        $r8 = r4.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $i6 = $r8.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        $i7 = $i6 & 1;

        if $i7 == 0 goto label10;

        if $r7 == null goto label07;

        $r9 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        if $r7 != $r9 goto label08;

     label07:
        $d2 = 0.0;

        goto label09;

     label08:
        $i8 = $r5[0];

        $d2 = (double) $i8;

     label09:
        r4.<org.mozilla.javascript.regexp.NativeRegExp: double lastIndex> = $d2;

     label10:
        return r13;
    }

    static java.lang.Object compileRE(java.lang.String, java.lang.String, boolean)
    {
        byte[] $r6, $r8, $r9, $r10, $r11, $r12;
        byte $b6, $b9, b21;
        boolean z0, $z1;
        org.mozilla.javascript.regexp.RENode $r7, $r17, $r18, $r19, $r23;
        org.mozilla.javascript.regexp.RECompiled $r21;
        short $s10, $s28;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i7, $i12, $i14, $i15, $i17, $i18, $i19, i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30;
        java.lang.String r1, r3, $r20;
        org.mozilla.javascript.regexp.CompilerState $r22;
        char $c8, $c11, $c13, $c16, $c20;
        org.mozilla.javascript.regexp.RECharSet[] $r14;
        char[] $r2, $r5, $r13, $r16;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r21 = new org.mozilla.javascript.regexp.RECompiled;

        specialinvoke $r21.<org.mozilla.javascript.regexp.RECompiled: void <init>()>();

        $r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>();

        $r21.<org.mozilla.javascript.regexp.RECompiled: char[] source> = $r2;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        b21 = 0;

        if r3 == null goto label06;

        i22 = 0;

     label01:
        $i19 = virtualinvoke r3.<java.lang.String: int length()>();

        if i22 >= $i19 goto label06;

        $c20 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i22);

        $i23 = (int) $c20;

        if $i23 != 103 goto label02;

        b21 = b21 | 1;

        goto label05;

     label02:
        $i24 = (int) $c20;

        if $i24 != 105 goto label03;

        b21 = b21 | 2;

        goto label05;

     label03:
        $i25 = (int) $c20;

        if $i25 != 109 goto label04;

        b21 = b21 | 4;

        goto label05;

     label04:
        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c20);

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void reportError(java.lang.String,java.lang.String)>("msg.invalid.re.flag", $r20);

     label05:
        i22 = i22 + 1;

        goto label01;

     label06:
        $r21.<org.mozilla.javascript.regexp.RECompiled: int flags> = b21;

        $r22 = new org.mozilla.javascript.regexp.CompilerState;

        $r5 = $r21.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        specialinvoke $r22.<org.mozilla.javascript.regexp.CompilerState: void <init>(char[],int,int)>($r5, $i0, b21);

        if z0 == 0 goto label07;

        if $i0 <= 0 goto label07;

        $r23 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r23.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(21);

        $r22.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r23;

        $r17 = $r22.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r16 = $r22.<org.mozilla.javascript.regexp.CompilerState: char[] cpbegin>;

        $c16 = $r16[0];

        $r17.<org.mozilla.javascript.regexp.RENode: char chr> = $c16;

        $r18 = $r22.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r18.<org.mozilla.javascript.regexp.RENode: int length> = $i0;

        $r19 = $r22.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r19.<org.mozilla.javascript.regexp.RENode: int flatIndex> = 0;

        $i17 = $r22.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i18 = $i17 + 5;

        $r22.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i18;

        goto label08;

     label07:
        $z1 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean parseDisjunction(org.mozilla.javascript.regexp.CompilerState)>($r22);

        if $z1 != 0 goto label08;

        return null;

     label08:
        $i1 = $r22.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i2 = $i1 + 1;

        $r6 = newarray (byte)[$i2];

        $r21.<org.mozilla.javascript.regexp.RECompiled: byte[] program> = $r6;

        $i3 = $r22.<org.mozilla.javascript.regexp.CompilerState: int classCount>;

        if $i3 == 0 goto label09;

        $i14 = $r22.<org.mozilla.javascript.regexp.CompilerState: int classCount>;

        $r14 = newarray (org.mozilla.javascript.regexp.RECharSet)[$i14];

        $r21.<org.mozilla.javascript.regexp.RECompiled: org.mozilla.javascript.regexp.RECharSet[] classList> = $r14;

        $i15 = $r22.<org.mozilla.javascript.regexp.CompilerState: int classCount>;

        $r21.<org.mozilla.javascript.regexp.RECompiled: int classCount> = $i15;

     label09:
        $r7 = $r22.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $i4 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int emitREBytecode(org.mozilla.javascript.regexp.CompilerState,org.mozilla.javascript.regexp.RECompiled,int,org.mozilla.javascript.regexp.RENode)>($r22, $r21, 0, $r7);

        $r8 = $r21.<org.mozilla.javascript.regexp.RECompiled: byte[] program>;

        $r8[$i4] = 53;

        $i5 = $r22.<org.mozilla.javascript.regexp.CompilerState: int parenCount>;

        $r21.<org.mozilla.javascript.regexp.RECompiled: int parenCount> = $i5;

        $r9 = $r21.<org.mozilla.javascript.regexp.RECompiled: byte[] program>;

        $b6 = $r9[0];

        $i26 = (int) $b6;

        tableswitch($i26)
        {
            case 21: goto label12;
            case 22: goto label11;
            case 23: goto label13;
            case 24: goto label13;
            case 25: goto label13;
            case 26: goto label13;
            case 27: goto label13;
            case 28: goto label10;
            case 29: goto label13;
            case 30: goto label13;
            case 31: goto label13;
            case 32: goto label12;
            case 33: goto label11;
            case 34: goto label13;
            case 35: goto label10;
            default: goto label13;
        };

     label10:
        $r10 = $r21.<org.mozilla.javascript.regexp.RECompiled: byte[] program>;

        $i7 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>($r10, 1);

        $c8 = (char) $i7;

        $i27 = (int) $c8;

        $r21.<org.mozilla.javascript.regexp.RECompiled: int anchorCh> = $i27;

        goto label13;

     label11:
        $r11 = $r21.<org.mozilla.javascript.regexp.RECompiled: byte[] program>;

        $b9 = $r11[1];

        $s28 = (short) $b9;

        $s10 = $s28 & 255;

        $c11 = (char) $s10;

        $i29 = (int) $c11;

        $r21.<org.mozilla.javascript.regexp.RECompiled: int anchorCh> = $i29;

        goto label13;

     label12:
        $r12 = $r21.<org.mozilla.javascript.regexp.RECompiled: byte[] program>;

        $i12 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>($r12, 1);

        $r13 = $r21.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        $c13 = $r13[$i12];

        $i30 = (int) $c13;

        $r21.<org.mozilla.javascript.regexp.RECompiled: int anchorCh> = $i30;

     label13:
        return $r21;
    }

    static boolean isDigit(char)
    {
        int $i1, $i2;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        if 48 > $i1 goto label1;

        $i2 = (int) c0;

        if $i2 > 57 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static boolean isWord(char)
    {
        int $i1;
        char c0;
        boolean $z0, $z1, $z2;

        c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isDigit(char)>(c0);

        if $z1 != 0 goto label1;

        $i1 = (int) c0;

        if $i1 != 95 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    private static boolean isLineTerm(char)
    {
        int $i1;
        char c0;
        boolean $z0;

        c0 := @parameter0: char;

        $i1 = (int) c0;

        $z0 = staticinvoke <org.mozilla.javascript.ScriptRuntime: boolean isJSLineTerminator(int)>($i1);

        return $z0;
    }

    private static boolean isREWhiteSpace(int)
    {
        int i0, $i2;
        char $c1;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 32 goto label1;

        if i0 == 9 goto label1;

        if i0 == 10 goto label1;

        if i0 == 13 goto label1;

        if i0 == 8232 goto label1;

        if i0 == 8233 goto label1;

        if i0 == 12 goto label1;

        if i0 == 11 goto label1;

        if i0 == 160 goto label1;

        $c1 = (char) i0;

        $i2 = staticinvoke <java.lang.Character: int getType(char)>($c1);

        if $i2 != 12 goto label2;

     label1:
        $z0 = 1;

        goto label3;

     label2:
        $z0 = 0;

     label3:
        return $z0;
    }

    private static char upcase(char)
    {
        char c0, $c1, $c3;
        int $i2, $i4, $i5, $i6, $i7, $i9, $i10, $i11;

        c0 := @parameter0: char;

        $i4 = (int) c0;

        if $i4 >= 128 goto label2;

        $i5 = (int) c0;

        if 97 > $i5 goto label1;

        $i6 = (int) c0;

        if $i6 > 122 goto label1;

        $i7 = (int) c0;

        $i9 = (int) -32;

        $i2 = $i7 + $i9;

        $c3 = (char) $i2;

        return $c3;

     label1:
        return c0;

     label2:
        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c0);

        $i10 = (int) c0;

        if $i10 < 128 goto label3;

        $i11 = (int) $c1;

        if $i11 >= 128 goto label3;

        return c0;

     label3:
        return $c1;
    }

    private static char downcase(char)
    {
        char c0, $c1, $c3;
        int $i2, $i4, $i5, $i6, $i7, $i8, $i9;

        c0 := @parameter0: char;

        $i4 = (int) c0;

        if $i4 >= 128 goto label2;

        $i5 = (int) c0;

        if 65 > $i5 goto label1;

        $i6 = (int) c0;

        if $i6 > 90 goto label1;

        $i7 = (int) c0;

        $i2 = $i7 + 32;

        $c3 = (char) $i2;

        return $c3;

     label1:
        return c0;

     label2:
        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c0);

        $i8 = (int) c0;

        if $i8 < 128 goto label3;

        $i9 = (int) $c1;

        if $i9 >= 128 goto label3;

        return c0;

     label3:
        return $c1;
    }

    private static int toASCIIHexDigit(int)
    {
        int $i0, $i1, $i2, i3, i4, $i6, $i8;

        i3 := @parameter0: int;

        if i3 >= 48 goto label1;

        $i6 = (int) -1;

        return $i6;

     label1:
        if i3 > 57 goto label2;

        $i2 = i3 - 48;

        return $i2;

     label2:
        i4 = i3 | 32;

        if 97 > i4 goto label3;

        if i4 > 102 goto label3;

        $i0 = i4 - 97;

        $i1 = $i0 + 10;

        return $i1;

     label3:
        $i8 = (int) -1;

        return $i8;
    }

    private static boolean parseDisjunction(org.mozilla.javascript.regexp.CompilerState)
    {
        org.mozilla.javascript.regexp.CompilerState r0;
        org.mozilla.javascript.regexp.RENode $r3, $r4, $r5;
        char $c2;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7;
        char[] r1;
        boolean $z0, $z1;

        r0 := @parameter0: org.mozilla.javascript.regexp.CompilerState;

        $z0 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean parseAlternative(org.mozilla.javascript.regexp.CompilerState)>(r0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r1 = r0.<org.mozilla.javascript.regexp.CompilerState: char[] cpbegin>;

        i0 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i1 = lengthof r1;

        if i0 == $i1 goto label3;

        $c2 = r1[i0];

        $i7 = (int) $c2;

        if $i7 != 124 goto label3;

        $i3 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i4 = $i3 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i4;

        $r5 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r5.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(1);

        $r3 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r5.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode kid> = $r3;

        $z1 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean parseDisjunction(org.mozilla.javascript.regexp.CompilerState)>(r0);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r4 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r5.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode kid2> = $r4;

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r5;

        $i5 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i6 = $i5 + 9;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i6;

     label3:
        return 1;
    }

    private static boolean parseAlternative(org.mozilla.javascript.regexp.CompilerState)
    {
        int $i0, $i2, $i3, $i5, $i6, $i7, $i8;
        boolean $z0;
        org.mozilla.javascript.regexp.CompilerState r0;
        org.mozilla.javascript.regexp.RENode $r3, $r4, $r5, $r6, r7, r8, $r9;
        char $c1, $c4;
        char[] r1;

        r0 := @parameter0: org.mozilla.javascript.regexp.CompilerState;

        r7 = null;

        r8 = null;

        r1 = r0.<org.mozilla.javascript.regexp.CompilerState: char[] cpbegin>;

     label01:
        $i5 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i6 = r0.<org.mozilla.javascript.regexp.CompilerState: int cpend>;

        if $i5 == $i6 goto label02;

        $i0 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $c1 = r1[$i0];

        $i7 = (int) $c1;

        if $i7 == 124 goto label02;

        $i2 = r0.<org.mozilla.javascript.regexp.CompilerState: int parenNesting>;

        if $i2 == 0 goto label05;

        $i3 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $c4 = r1[$i3];

        $i8 = (int) $c4;

        if $i8 != 41 goto label05;

     label02:
        if r7 != null goto label03;

        $r9 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r9.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(0);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r9;

        goto label04;

     label03:
        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = r7;

     label04:
        return 1;

     label05:
        $z0 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean parseTerm(org.mozilla.javascript.regexp.CompilerState)>(r0);

        if $z0 != 0 goto label06;

        return 0;

     label06:
        if r7 != null goto label07;

        r7 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        goto label01;

     label07:
        if r8 != null goto label09;

        $r5 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        r7.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next> = $r5;

        r8 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

     label08:
        $r6 = r8.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next>;

        if $r6 == null goto label01;

        r8 = r8.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next>;

        goto label08;

     label09:
        $r3 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        r8.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next> = $r3;

        r8 = r8.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next>;

     label10:
        $r4 = r8.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next>;

        if $r4 == null goto label01;

        r8 = r8.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next>;

        goto label10;
    }

    private static boolean calculateBitmapSize(org.mozilla.javascript.regexp.CompilerState, org.mozilla.javascript.regexp.RENode, char[], int, int)
    {
        byte b26;
        char[] r1;
        boolean $z0, z1, z2, z3, z4;
        org.mozilla.javascript.regexp.RENode r0;
        int i0, $i3, $i9, $i10, $i11, $i12, $i13, $i15, $i18, $i19, $i20, $i21, $i22, i23, i24, i25, i27, i29, i30, i31, i33, i36, $i37, $i38, $i40, $i41, $i42, $i44, $i45, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i56, $i57, $i58, $i59, $i60, $i61;
        org.mozilla.javascript.regexp.CompilerState r2;
        char $c1, $c2, $c4, $c5, $c6, $c7, $c8, $c14, $c16, $c17, c28, c32, c34, c35, $c39, $c43;

        r2 := @parameter0: org.mozilla.javascript.regexp.CompilerState;

        r0 := @parameter1: org.mozilla.javascript.regexp.RENode;

        r1 := @parameter2: char[];

        i23 := @parameter3: int;

        i0 := @parameter4: int;

        i24 = 0;

        i25 = 0;

        z1 = 0;

        z4 = 0;

        z3 = 0;

        z2 = 0;

        r0.<org.mozilla.javascript.regexp.RENode: int bmsize> = 0;

        if i23 != i0 goto label01;

        return 1;

     label01:
        $c1 = r1[i23];

        $i40 = (int) $c1;

        if $i40 != 94 goto label02;

        i23 = i23 + 1;

     label02:
        if i23 == i0 goto label33;

        b26 = 2;

        $c2 = r1[i23];

        $i41 = (int) $c2;

        lookupswitch($i41)
        {
            case 92: goto label03;
            default: goto label25;
        };

     label03:
        i27 = i23 + 1;

        i23 = i27 + 1;

        c28 = r1[i27];

        $i42 = (int) c28;

        tableswitch($i42)
        {
            case 48: goto label21;
            case 49: goto label21;
            case 50: goto label21;
            case 51: goto label21;
            case 52: goto label21;
            case 53: goto label21;
            case 54: goto label21;
            case 55: goto label21;
            case 56: goto label24;
            case 57: goto label24;
            case 58: goto label24;
            case 59: goto label24;
            case 60: goto label24;
            case 61: goto label24;
            case 62: goto label24;
            case 63: goto label24;
            case 64: goto label24;
            case 65: goto label24;
            case 66: goto label24;
            case 67: goto label24;
            case 68: goto label19;
            case 69: goto label24;
            case 70: goto label24;
            case 71: goto label24;
            case 72: goto label24;
            case 73: goto label24;
            case 74: goto label24;
            case 75: goto label24;
            case 76: goto label24;
            case 77: goto label24;
            case 78: goto label24;
            case 79: goto label24;
            case 80: goto label24;
            case 81: goto label24;
            case 82: goto label24;
            case 83: goto label19;
            case 84: goto label24;
            case 85: goto label24;
            case 86: goto label24;
            case 87: goto label19;
            case 88: goto label24;
            case 89: goto label24;
            case 90: goto label24;
            case 91: goto label24;
            case 92: goto label24;
            case 93: goto label24;
            case 94: goto label24;
            case 95: goto label24;
            case 96: goto label24;
            case 97: goto label24;
            case 98: goto label04;
            case 99: goto label10;
            case 100: goto label17;
            case 101: goto label24;
            case 102: goto label05;
            case 103: goto label24;
            case 104: goto label24;
            case 105: goto label24;
            case 106: goto label24;
            case 107: goto label24;
            case 108: goto label24;
            case 109: goto label24;
            case 110: goto label06;
            case 111: goto label24;
            case 112: goto label24;
            case 113: goto label24;
            case 114: goto label07;
            case 115: goto label19;
            case 116: goto label08;
            case 117: goto label12;
            case 118: goto label09;
            case 119: goto label19;
            case 120: goto label13;
            default: goto label24;
        };

     label04:
        i29 = 8;

        goto label26;

     label05:
        i29 = 12;

        goto label26;

     label06:
        i29 = 10;

        goto label26;

     label07:
        i29 = 13;

        goto label26;

     label08:
        i29 = 9;

        goto label26;

     label09:
        i29 = 11;

        goto label26;

     label10:
        $i12 = i23 + 1;

        if $i12 >= i0 goto label11;

        $i13 = i23 + 1;

        $c14 = r1[$i13];

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c14);

        if $z0 == 0 goto label11;

        $i15 = i23;

        i23 = i23 + 1;

        $c16 = r1[$i15];

        $c17 = $c16 & 31;

        $c43 = (char) $c17;

        $i44 = (int) $c43;

        i29 = $i44;

        goto label26;

     label11:
        i29 = 92;

        goto label26;

     label12:
        b26 = 4;

     label13:
        i30 = 0;

        i31 = 0;

     label14:
        if i31 >= b26 goto label16;

        if i23 >= i0 goto label16;

        $i9 = i23;

        i23 = i23 + 1;

        c32 = r1[$i9];

        $i45 = (int) c32;

        $i10 = staticinvoke <org.mozilla.javascript.Kit: int xDigitToInt(int,int)>($i45, i30);

        i30 = $i10;

        if $i10 >= 0 goto label15;

        $i11 = i31 + 1;

        i23 = i23 - $i11;

        i30 = 92;

        goto label16;

     label15:
        i31 = i31 + 1;

        goto label14;

     label16:
        i29 = i30;

        goto label26;

     label17:
        if z2 == 0 goto label18;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void reportError(java.lang.String,java.lang.String)>("msg.bad.range", "");

        return 0;

     label18:
        i29 = 57;

        goto label26;

     label19:
        if z3 == 0 goto label20;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void reportError(java.lang.String,java.lang.String)>("msg.bad.range", "");

        return 0;

     label20:
        $i47 = (int) 65535;

        r0.<org.mozilla.javascript.regexp.RENode: int bmsize> = $i47;

        return 1;

     label21:
        $i48 = (int) c28;

        i33 = $i48 - 48;

        c34 = r1[i23];

        $i49 = (int) c34;

        if 48 > $i49 goto label23;

        $i50 = (int) c34;

        if $i50 > 55 goto label23;

        i23 = i23 + 1;

        $i19 = 8 * i33;

        $i51 = (int) c34;

        $i18 = $i51 - 48;

        i33 = $i19 + $i18;

        c35 = r1[i23];

        $i52 = (int) c35;

        if 48 > $i52 goto label23;

        $i53 = (int) c35;

        if $i53 > 55 goto label23;

        i23 = i23 + 1;

        $i21 = 8 * i33;

        $i54 = (int) c35;

        $i20 = $i54 - 48;

        i36 = $i21 + $i20;

        if i36 > 255 goto label22;

        i33 = i36;

        goto label23;

     label22:
        $i56 = (int) -1;

        i23 = i23 + $i56;

     label23:
        i29 = i33;

        goto label26;

     label24:
        $i57 = (int) c28;

        i29 = $i57;

        goto label26;

     label25:
        $i22 = i23;

        i23 = i23 + 1;

        i29 = r1[$i22];

     label26:
        if z4 == 0 goto label28;

        if i24 <= i29 goto label27;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void reportError(java.lang.String,java.lang.String)>("msg.bad.range", "");

        return 0;

     label27:
        z1 = 0;

        z4 = 0;

        z3 = 0;

        z2 = 0;

        goto label29;

     label28:
        $i3 = i0 - 1;

        if i23 >= $i3 goto label29;

        $c8 = r1[i23];

        $i58 = (int) $c8;

        if $i58 != 45 goto label29;

        i23 = i23 + 1;

        z1 = 1;

        z4 = 1;

        z3 = 1;

        z2 = 1;

        i24 = (char) i29;

        goto label02;

     label29:
        $i37 = r2.<org.mozilla.javascript.regexp.CompilerState: int flags>;

        $i38 = $i37 & 2;

        if $i38 == 0 goto label32;

        $c4 = (char) i29;

        $c5 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char upcase(char)>($c4);

        $c6 = (char) i29;

        $c7 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char downcase(char)>($c6);

        $i59 = (int) $c5;

        $i60 = (int) $c7;

        if $i59 < $i60 goto label30;

        $c39 = $c5;

        goto label31;

     label30:
        $c39 = $c7;

     label31:
        $i61 = (int) $c39;

        i29 = $i61;

     label32:
        if i29 <= i25 goto label02;

        i25 = i29;

        goto label02;

     label33:
        r0.<org.mozilla.javascript.regexp.RENode: int bmsize> = i25;

        return 1;
    }

    private static void doFlat(org.mozilla.javascript.regexp.CompilerState, char)
    {
        org.mozilla.javascript.regexp.CompilerState r0;
        org.mozilla.javascript.regexp.RENode $r2, $r3, $r4, $r5;
        char c0;
        int $i1, $i2, $i4;

        r0 := @parameter0: org.mozilla.javascript.regexp.CompilerState;

        c0 := @parameter1: char;

        $r5 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r5.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(21);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r5;

        $r2 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r2.<org.mozilla.javascript.regexp.RENode: char chr> = c0;

        $r3 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r3.<org.mozilla.javascript.regexp.RENode: int length> = 1;

        $r4 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $i4 = (int) -1;

        $r4.<org.mozilla.javascript.regexp.RENode: int flatIndex> = $i4;

        $i1 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i2 = $i1 + 3;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i2;

        return;
    }

    private static int getDecimalValue(char, org.mozilla.javascript.regexp.CompilerState, int, java.lang.String)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8, $i9, $i10, i12, $i14, $i15, $i16, $i17;
        java.lang.String r2, $r3;
        boolean $z0, z1, z2, z3;
        org.mozilla.javascript.regexp.CompilerState r0;
        char c11, c13;
        char[] r1;

        c11 := @parameter0: char;

        r0 := @parameter1: org.mozilla.javascript.regexp.CompilerState;

        i7 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        z1 = 0;

        z3 = 0;

        z2 = 0;

        i0 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        r1 = r0.<org.mozilla.javascript.regexp.CompilerState: char[] cpbegin>;

        $i16 = (int) c11;

        i12 = $i16 - 48;

     label1:
        $i2 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i1 = r0.<org.mozilla.javascript.regexp.CompilerState: int cpend>;

        if $i2 == $i1 goto label5;

        $i5 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        c13 = r1[$i5];

        $z0 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isDigit(char)>(c13);

        if $z0 != 0 goto label2;

        goto label5;

     label2:
        if z3 != 0 goto label4;

        $i17 = (int) c13;

        i6 = $i17 - 48;

        $i8 = i7 - i6;

        $i9 = $i8 / 10;

        if i12 >= $i9 goto label3;

        $i10 = i12 * 10;

        i12 = $i10 + i6;

        goto label4;

     label3:
        z1 = 1;

        z3 = 1;

        z2 = 1;

        i12 = i7;

     label4:
        $i14 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i15 = $i14 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i15;

        goto label1;

     label5:
        if z2 == 0 goto label6;

        $i3 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i4 = $i3 - i0;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(char[],int,int)>(r1, i0, $i4);

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void reportError(java.lang.String,java.lang.String)>(r2, $r3);

     label6:
        return i12;
    }

    private static boolean parseTerm(org.mozilla.javascript.regexp.CompilerState)
    {
        int $i0, $i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i69, $i70, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i109, $i111, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i130, $i131, $i132, $i133, $i134, $i135, $i137, $i138, $i139, $i140, $i141, $i143, $i144, $i146, $i147, $i148, $i149, $i150, $i151, $i152, $i153, $i154, $i155, i159, i161, i163, i164, i166, i169, i170, i173, $i174, $i175, $i176, $i177, $i178, $i179, $i180, $i181, i182, $i183, $i184, i185, $i188, $i189, $i190, $i191, $i192, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i210, $i212, $i214, $i216, $i217, $i219, $i220, $i221;
        java.lang.String $r11, $r41;
        char[] r1;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6, z7;
        org.mozilla.javascript.regexp.RENode $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r13, $r14, $r16, $r17, $r19, $r20, $r30, $r32, $r33, $r34, $r36, $r37, $r38, $r39, $r42, $r47, $r48, $r49, r50, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74;
        byte b157;
        org.mozilla.javascript.regexp.CompilerState r0;
        char $c11, $c22, $c38, $c68, $c71, $c72, $c110, $c112, $c129, $c136, $c142, $c145, c156, c158, c160, $c162, c165, $c167, c168, c171, $c172, c186, c187;

        r0 := @parameter0: org.mozilla.javascript.regexp.CompilerState;

        r1 = r0.<org.mozilla.javascript.regexp.CompilerState: char[] cpbegin>;

        $i0 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i1 = $i0 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i1;

        c156 = r1[$i0];

        b157 = 2;

        i2 = r0.<org.mozilla.javascript.regexp.CompilerState: int parenCount>;

        i3 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i188 = (int) c156;

        lookupswitch($i188)
        {
            case 36: goto label02;
            case 40: goto label36;
            case 41: goto label44;
            case 42: goto label53;
            case 43: goto label53;
            case 46: goto label52;
            case 63: goto label53;
            case 91: goto label45;
            case 92: goto label03;
            case 94: goto label01;
            default: goto label54;
        };

     label01:
        $r53 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r53.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(2);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r53;

        $i4 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i5 = $i4 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i5;

        return 1;

     label02:
        $r54 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r54.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(3);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r54;

        $i150 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i151 = $i150 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i151;

        return 1;

     label03:
        $i7 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i6 = r0.<org.mozilla.javascript.regexp.CompilerState: int cpend>;

        if $i7 >= $i6 goto label35;

        $i8 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i9 = $i8 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i9;

        c158 = r1[$i8];

        $i189 = (int) c158;

        tableswitch($i189)
        {
            case 48: goto label06;
            case 49: goto label10;
            case 50: goto label10;
            case 51: goto label10;
            case 52: goto label10;
            case 53: goto label10;
            case 54: goto label10;
            case 55: goto label10;
            case 56: goto label10;
            case 57: goto label10;
            case 58: goto label34;
            case 59: goto label34;
            case 60: goto label34;
            case 61: goto label34;
            case 62: goto label34;
            case 63: goto label34;
            case 64: goto label34;
            case 65: goto label34;
            case 66: goto label05;
            case 67: goto label34;
            case 68: goto label29;
            case 69: goto label34;
            case 70: goto label34;
            case 71: goto label34;
            case 72: goto label34;
            case 73: goto label34;
            case 74: goto label34;
            case 75: goto label34;
            case 76: goto label34;
            case 77: goto label34;
            case 78: goto label34;
            case 79: goto label34;
            case 80: goto label34;
            case 81: goto label34;
            case 82: goto label34;
            case 83: goto label31;
            case 84: goto label34;
            case 85: goto label34;
            case 86: goto label34;
            case 87: goto label33;
            case 88: goto label34;
            case 89: goto label34;
            case 90: goto label34;
            case 91: goto label34;
            case 92: goto label34;
            case 93: goto label34;
            case 94: goto label34;
            case 95: goto label34;
            case 96: goto label34;
            case 97: goto label34;
            case 98: goto label04;
            case 99: goto label20;
            case 100: goto label28;
            case 101: goto label34;
            case 102: goto label15;
            case 103: goto label34;
            case 104: goto label34;
            case 105: goto label34;
            case 106: goto label34;
            case 107: goto label34;
            case 108: goto label34;
            case 109: goto label34;
            case 110: goto label16;
            case 111: goto label34;
            case 112: goto label34;
            case 113: goto label34;
            case 114: goto label17;
            case 115: goto label30;
            case 116: goto label18;
            case 117: goto label23;
            case 118: goto label19;
            case 119: goto label32;
            case 120: goto label24;
            default: goto label34;
        };

     label04:
        $r55 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r55.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(4);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r55;

        $i73 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i74 = $i73 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i74;

        return 1;

     label05:
        $r56 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r56.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(5);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r56;

        $i81 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i82 = $i81 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i82;

        return 1;

     label06:
        i159 = 0;

     label07:
        $i97 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i96 = r0.<org.mozilla.javascript.regexp.CompilerState: int cpend>;

        if $i97 >= $i96 goto label09;

        $i98 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        c160 = r1[$i98];

        $i190 = (int) c160;

        if $i190 < 48 goto label09;

        $i191 = (int) c160;

        if $i191 > 55 goto label09;

        $i99 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i100 = $i99 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i100;

        $i102 = 8 * i159;

        $i192 = (int) c160;

        $i101 = $i192 - 48;

        i161 = $i102 + $i101;

        if i161 <= 255 goto label08;

        goto label09;

     label08:
        i159 = i161;

        goto label07;

     label09:
        $c162 = (char) i159;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void doFlat(org.mozilla.javascript.regexp.CompilerState,char)>(r0, $c162);

        goto label55;

     label10:
        $i83 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        i163 = $i83 - 1;

        $i194 = (int) 65535;

        $i84 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getDecimalValue(char,org.mozilla.javascript.regexp.CompilerState,int,java.lang.String)>(c158, r0, $i194, "msg.overlarge.backref");

        if $i84 <= 9 goto label14;

        $i88 = r0.<org.mozilla.javascript.regexp.CompilerState: int parenCount>;

        if $i84 <= $i88 goto label14;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = i163;

        i164 = 0;

     label11:
        $i90 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i89 = r0.<org.mozilla.javascript.regexp.CompilerState: int cpend>;

        if $i90 >= $i89 goto label13;

        $i91 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        c165 = r1[$i91];

        $i195 = (int) c165;

        if $i195 < 48 goto label13;

        $i196 = (int) c165;

        if $i196 > 55 goto label13;

        $i92 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i93 = $i92 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i93;

        $i95 = 8 * i164;

        $i197 = (int) c165;

        $i94 = $i197 - 48;

        i166 = $i95 + $i94;

        if i166 <= 255 goto label12;

        goto label13;

     label12:
        i164 = i166;

        goto label11;

     label13:
        $c167 = (char) i164;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void doFlat(org.mozilla.javascript.regexp.CompilerState,char)>(r0, $c167);

        goto label55;

     label14:
        $r57 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r57.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(20);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r57;

        $r30 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $i85 = $i84 - 1;

        $r30.<org.mozilla.javascript.regexp.RENode: int parenIndex> = $i85;

        $i86 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i87 = $i86 + 3;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i87;

        goto label55;

     label15:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void doFlat(org.mozilla.javascript.regexp.CompilerState,char)>(r0, 12);

        goto label55;

     label16:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void doFlat(org.mozilla.javascript.regexp.CompilerState,char)>(r0, 10);

        goto label55;

     label17:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void doFlat(org.mozilla.javascript.regexp.CompilerState,char)>(r0, 13);

        goto label55;

     label18:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void doFlat(org.mozilla.javascript.regexp.CompilerState,char)>(r0, 9);

        goto label55;

     label19:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void doFlat(org.mozilla.javascript.regexp.CompilerState,char)>(r0, 11);

        goto label55;

     label20:
        $i61 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i63 = $i61 + 1;

        $i62 = r0.<org.mozilla.javascript.regexp.CompilerState: int cpend>;

        if $i63 >= $i62 goto label21;

        $i66 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i67 = $i66 + 1;

        $c68 = r1[$i67];

        $z2 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c68);

        if $z2 == 0 goto label21;

        $i69 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i70 = $i69 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i70;

        $c71 = r1[$i69];

        $c72 = $c71 & 31;

        c168 = (char) $c72;

        goto label22;

     label21:
        $i64 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i65 = $i64 - 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i65;

        c168 = 92;

     label22:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void doFlat(org.mozilla.javascript.regexp.CompilerState,char)>(r0, c168);

        goto label55;

     label23:
        b157 = 4;

     label24:
        i169 = 0;

        i170 = 0;

     label25:
        if i170 >= b157 goto label27;

        $i46 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i45 = r0.<org.mozilla.javascript.regexp.CompilerState: int cpend>;

        if $i46 >= $i45 goto label27;

        $i47 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i48 = $i47 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i48;

        c171 = r1[$i47];

        $i198 = (int) c171;

        $i49 = staticinvoke <org.mozilla.javascript.Kit: int xDigitToInt(int,int)>($i198, i169);

        i169 = $i49;

        if $i49 >= 0 goto label26;

        $i51 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i50 = i170 + 2;

        $i52 = $i51 - $i50;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i52;

        $i53 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i54 = $i53 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i54;

        i169 = r1[$i53];

        goto label27;

     label26:
        i170 = i170 + 1;

        goto label25;

     label27:
        $c172 = (char) i169;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void doFlat(org.mozilla.javascript.regexp.CompilerState,char)>(r0, $c172);

        goto label55;

     label28:
        $r58 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r58.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(14);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r58;

        $i59 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i60 = $i59 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i60;

        goto label55;

     label29:
        $r59 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r59.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(15);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r59;

        $i79 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i80 = $i79 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i80;

        goto label55;

     label30:
        $r60 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r60.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(18);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r60;

        $i57 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i58 = $i57 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i58;

        goto label55;

     label31:
        $r61 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r61.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(19);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r61;

        $i77 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i78 = $i77 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i78;

        goto label55;

     label32:
        $r62 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r62.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(16);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r62;

        $i55 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i56 = $i55 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i56;

        goto label55;

     label33:
        $r63 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r63.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(17);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r63;

        $i75 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i76 = $i75 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i76;

        goto label55;

     label34:
        $r64 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r64.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(21);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r64;

        $r32 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r32.<org.mozilla.javascript.regexp.RENode: char chr> = c158;

        $r33 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r33.<org.mozilla.javascript.regexp.RENode: int length> = 1;

        $r34 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $i103 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i104 = $i103 - 1;

        $r34.<org.mozilla.javascript.regexp.RENode: int flatIndex> = $i104;

        $i105 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i106 = $i105 + 3;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i106;

        goto label55;

     label35:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void reportError(java.lang.String,java.lang.String)>("msg.trail.backslash", "");

        return 0;

     label36:
        r50 = null;

        i173 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i130 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i132 = $i130 + 1;

        $i131 = r0.<org.mozilla.javascript.regexp.CompilerState: int cpend>;

        if $i132 >= $i131 goto label39;

        $i141 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $c142 = r1[$i141];

        $i199 = (int) $c142;

        if $i199 != 63 goto label39;

        $i143 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i144 = $i143 + 1;

        $c145 = r1[$i144];

        $i200 = (int) $c145;

        if $i200 == 61 goto label37;

        $i201 = (int) $c145;

        if $i201 == 33 goto label37;

        $i202 = (int) $c145;

        if $i202 != 58 goto label39;

     label37:
        $i174 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i175 = $i174 + 2;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i175;

        $i203 = (int) $c145;

        if $i203 != 61 goto label38;

        $r65 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r65.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(41);

        r50 = $r65;

        $i148 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i149 = $i148 + 4;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i149;

        goto label40;

     label38:
        $i204 = (int) $c145;

        if $i204 != 33 goto label40;

        $r66 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r66.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(42);

        r50 = $r66;

        $i146 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i147 = $i146 + 4;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i147;

        goto label40;

     label39:
        $r67 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r67.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(10);

        r50 = $r67;

        $i176 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i177 = $i176 + 6;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i177;

        $i178 = r0.<org.mozilla.javascript.regexp.CompilerState: int parenCount>;

        $i179 = $i178 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int parenCount> = $i179;

        $r67.<org.mozilla.javascript.regexp.RENode: int parenIndex> = $i178;

     label40:
        $i180 = r0.<org.mozilla.javascript.regexp.CompilerState: int parenNesting>;

        $i181 = $i180 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int parenNesting> = $i181;

        $z4 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean parseDisjunction(org.mozilla.javascript.regexp.CompilerState)>(r0);

        if $z4 != 0 goto label41;

        return 0;

     label41:
        $i134 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i133 = r0.<org.mozilla.javascript.regexp.CompilerState: int cpend>;

        if $i134 == $i133 goto label42;

        $i135 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $c136 = r1[$i135];

        $i205 = (int) $c136;

        if $i205 == 41 goto label43;

     label42:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void reportError(java.lang.String,java.lang.String)>("msg.unterm.paren", "");

        return 0;

     label43:
        $i137 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i138 = $i137 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i138;

        $i139 = r0.<org.mozilla.javascript.regexp.CompilerState: int parenNesting>;

        $i140 = $i139 - 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int parenNesting> = $i140;

        if r50 == null goto label55;

        $r42 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        r50.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode kid> = $r42;

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = r50;

        goto label55;

     label44:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void reportError(java.lang.String,java.lang.String)>("msg.re.unmatched.right.paren", "");

        return 0;

     label45:
        $r68 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r68.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(50);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r68;

        i182 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $r36 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r36.<org.mozilla.javascript.regexp.RENode: int startIndex> = i182;

     label46:
        $i108 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i107 = r0.<org.mozilla.javascript.regexp.CompilerState: int cpend>;

        if $i108 != $i107 goto label47;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void reportError(java.lang.String,java.lang.String)>("msg.unterm.class", "");

        return 0;

     label47:
        $i109 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $c110 = r1[$i109];

        $i206 = (int) $c110;

        if $i206 != 92 goto label48;

        $i123 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i124 = $i123 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i124;

        goto label49;

     label48:
        $i111 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $c112 = r1[$i111];

        $i207 = (int) $c112;

        if $i207 != 93 goto label49;

        $r37 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $i115 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i116 = $i115 - i182;

        $r37.<org.mozilla.javascript.regexp.RENode: int kidlen> = $i116;

        goto label50;

     label49:
        $i113 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i114 = $i113 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i114;

        goto label46;

     label50:
        $r38 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $i117 = r0.<org.mozilla.javascript.regexp.CompilerState: int classCount>;

        $i118 = $i117 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int classCount> = $i118;

        $r38.<org.mozilla.javascript.regexp.RENode: int index> = $i117;

        $r39 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $i119 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i120 = $i119 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i120;

        $z3 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean calculateBitmapSize(org.mozilla.javascript.regexp.CompilerState,org.mozilla.javascript.regexp.RENode,char[],int,int)>(r0, $r39, r1, i182, $i119);

        if $z3 != 0 goto label51;

        return 0;

     label51:
        $i121 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i122 = $i121 + 3;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i122;

        goto label55;

     label52:
        $r69 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r69.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(12);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r69;

        $i125 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i126 = $i125 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i126;

        goto label55;

     label53:
        $i127 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i128 = $i127 - 1;

        $c129 = r1[$i128];

        $r41 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c129);

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void reportError(java.lang.String,java.lang.String)>("msg.bad.quant", $r41);

        return 0;

     label54:
        $r70 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r70.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(21);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r70;

        $r47 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r47.<org.mozilla.javascript.regexp.RENode: char chr> = c156;

        $r48 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r48.<org.mozilla.javascript.regexp.RENode: int length> = 1;

        $r49 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $i152 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i153 = $i152 - 1;

        $r49.<org.mozilla.javascript.regexp.RENode: int flatIndex> = $i153;

        $i154 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i155 = $i154 + 3;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i155;

     label55:
        $r52 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $i183 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i184 = r0.<org.mozilla.javascript.regexp.CompilerState: int cpend>;

        if $i183 != $i184 goto label56;

        return 1;

     label56:
        z5 = 0;

        z7 = 0;

        z6 = 0;

        $i10 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $c11 = r1[$i10];

        $i208 = (int) $c11;

        lookupswitch($i208)
        {
            case 42: goto label58;
            case 43: goto label57;
            case 63: goto label59;
            case 123: goto label60;
            default: goto label64;
        };

     label57:
        $r71 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r71.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(6);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r71;

        $r16 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r16.<org.mozilla.javascript.regexp.RENode: int min> = 1;

        $r17 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $i210 = (int) -1;

        $r17.<org.mozilla.javascript.regexp.RENode: int max> = $i210;

        $i41 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i42 = $i41 + 8;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i42;

        z5 = 1;

        z7 = 1;

        goto label64;

     label58:
        $r72 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r72.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(6);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r72;

        $r19 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r19.<org.mozilla.javascript.regexp.RENode: int min> = 0;

        $r20 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $i212 = (int) -1;

        $r20.<org.mozilla.javascript.regexp.RENode: int max> = $i212;

        $i43 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i44 = $i43 + 8;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i44;

        z5 = 1;

        z7 = 1;

        goto label64;

     label59:
        $r73 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r73.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(6);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r73;

        $r13 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r13.<org.mozilla.javascript.regexp.RENode: int min> = 0;

        $r14 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r14.<org.mozilla.javascript.regexp.RENode: int max> = 1;

        $i39 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i40 = $i39 + 8;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i40;

        z5 = 1;

        z7 = 1;

        goto label64;

     label60:
        $i214 = (int) -1;

        i185 = $i214;

        i12 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i13 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i14 = $i13 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i14;

        c186 = r1[$i14];

        $z0 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isDigit(char)>(c186);

        if $z0 == 0 goto label63;

        $i25 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i26 = $i25 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i26;

        $i216 = (int) 65535;

        $i27 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getDecimalValue(char,org.mozilla.javascript.regexp.CompilerState,int,java.lang.String)>(c186, r0, $i216, "msg.overlarge.min");

        $i28 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        c187 = r1[$i28];

        $i217 = (int) c187;

        if $i217 != 44 goto label61;

        $i31 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i32 = $i31 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i32;

        c187 = r1[$i32];

        $z1 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isDigit(char)>(c187);

        if $z1 == 0 goto label62;

        $i33 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i34 = $i33 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i34;

        $i219 = (int) 65535;

        $i35 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getDecimalValue(char,org.mozilla.javascript.regexp.CompilerState,int,java.lang.String)>(c187, r0, $i219, "msg.overlarge.max");

        i185 = $i35;

        $i36 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        c187 = r1[$i36];

        if $i27 <= $i35 goto label62;

        $i37 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $c38 = r1[$i37];

        $r11 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c38);

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void reportError(java.lang.String,java.lang.String)>("msg.max.lt.min", $r11);

        return 0;

     label61:
        i185 = $i27;

     label62:
        $i220 = (int) c187;

        if $i220 != 125 goto label63;

        $r74 = new org.mozilla.javascript.regexp.RENode;

        specialinvoke $r74.<org.mozilla.javascript.regexp.RENode: void <init>(byte)>(6);

        r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result> = $r74;

        $r9 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r9.<org.mozilla.javascript.regexp.RENode: int min> = $i27;

        $r10 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r10.<org.mozilla.javascript.regexp.RENode: int max> = i185;

        $i29 = r0.<org.mozilla.javascript.regexp.CompilerState: int progLength>;

        $i30 = $i29 + 12;

        r0.<org.mozilla.javascript.regexp.CompilerState: int progLength> = $i30;

        z5 = 1;

        z7 = 1;

        z6 = 1;

     label63:
        if z6 != 0 goto label64;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = i12;

     label64:
        if z7 != 0 goto label65;

        return 1;

     label65:
        $i15 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i16 = $i15 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i16;

        $r3 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r3.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode kid> = $r52;

        $r4 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r4.<org.mozilla.javascript.regexp.RENode: int parenIndex> = i2;

        $r5 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $i17 = r0.<org.mozilla.javascript.regexp.CompilerState: int parenCount>;

        $i18 = $i17 - i2;

        $r5.<org.mozilla.javascript.regexp.RENode: int parenCount> = $i18;

        $i20 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i19 = r0.<org.mozilla.javascript.regexp.CompilerState: int cpend>;

        if $i20 >= $i19 goto label66;

        $i21 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $c22 = r1[$i21];

        $i221 = (int) $c22;

        if $i221 != 63 goto label66;

        $i23 = r0.<org.mozilla.javascript.regexp.CompilerState: int cp>;

        $i24 = $i23 + 1;

        r0.<org.mozilla.javascript.regexp.CompilerState: int cp> = $i24;

        $r7 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r7.<org.mozilla.javascript.regexp.RENode: boolean greedy> = 0;

        goto label67;

     label66:
        $r6 = r0.<org.mozilla.javascript.regexp.CompilerState: org.mozilla.javascript.regexp.RENode result>;

        $r6.<org.mozilla.javascript.regexp.RENode: boolean greedy> = 1;

     label67:
        return 1;
    }

    private static void resolveForwardJump(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, $i2;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 <= i1 goto label1;

        $r1 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r1;

     label1:
        $i2 = i1 - i0;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int addIndex(byte[],int,int)>(r0, i0, $i2);

        return;
    }

    private static int getOffset(byte[], int)
    {
        int i0, $i1;
        byte[] r0;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $i1 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r0, i0);

        return $i1;
    }

    private static int addIndex(byte[], int, int)
    {
        byte[] r0;
        org.mozilla.javascript.EvaluatorException $r1;
        java.lang.RuntimeException $r2;
        byte $b3, $b4;
        int i0, i1, $i2, $i5, $i6, $i8;

        r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if i0 >= 0 goto label1;

        $r2 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r2;

     label1:
        $i8 = (int) 65535;

        if i0 <= $i8 goto label2;

        $r1 = staticinvoke <org.mozilla.javascript.Context: org.mozilla.javascript.EvaluatorException reportRuntimeError(java.lang.String)>("Too complex regexp");

        throw $r1;

     label2:
        $i2 = i0 >> 8;

        $b3 = (byte) $i2;

        r0[i1] = $b3;

        $i5 = i1 + 1;

        $b4 = (byte) i0;

        r0[$i5] = $b4;

        $i6 = i1 + 2;

        return $i6;
    }

    private static int getIndex(byte[], int)
    {
        byte[] r0;
        short $s2, $s5, $s8, $s10;
        byte $b1, $b4;
        int i0, $i3, $i6, $i7, $i9, $i11;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        $b1 = r0[i0];

        $s8 = (short) $b1;

        $s2 = $s8 & 255;

        $i9 = (int) $s2;

        $i6 = $i9 << 8;

        $i3 = i0 + 1;

        $b4 = r0[$i3];

        $s10 = (short) $b4;

        $s5 = $s10 & 255;

        $i11 = (int) $s5;

        $i7 = $i6 | $i11;

        return $i7;
    }

    private static int emitREBytecode(org.mozilla.javascript.regexp.CompilerState, org.mozilla.javascript.regexp.RECompiled, int, org.mozilla.javascript.regexp.RENode)
    {
        byte[] r1;
        byte $b1, $b2, $b22, $b32, $b72, $b73, $b74;
        org.mozilla.javascript.regexp.RECharSet[] $r3;
        boolean $z0, $z1, $z2, $z3;
        org.mozilla.javascript.regexp.RENode $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, r14, $r15, r16, $r17;
        org.mozilla.javascript.regexp.RECompiled r0;
        org.mozilla.javascript.regexp.RECharSet $r18;
        int $i0, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i16, $i17, $i18, $i19, $i20, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, i61, i62, i63, i64, i65, $i66, i67, i68, i69, i70, i71, $i75, $i76, $i77, $i78, i79, $i80, $i81, $i83, $i85, $i86, $i88, $i89, $i90, $i92, $i94;
        org.mozilla.javascript.regexp.CompilerState r4;
        char $c11, $c15, $c21;

        r4 := @parameter0: org.mozilla.javascript.regexp.CompilerState;

        r0 := @parameter1: org.mozilla.javascript.regexp.RECompiled;

        i61 := @parameter2: int;

        r16 := @parameter3: org.mozilla.javascript.regexp.RENode;

        r1 = r0.<org.mozilla.javascript.regexp.RECompiled: byte[] program>;

     label01:
        if r16 == null goto label33;

        $i0 = i61;

        i61 = i61 + 1;

        $b1 = r16.<org.mozilla.javascript.regexp.RENode: byte op>;

        r1[$i0] = $b1;

        $b2 = r16.<org.mozilla.javascript.regexp.RENode: byte op>;

        $i81 = (int) $b2;

        lookupswitch($i81)
        {
            case 0: goto label02;
            case 1: goto label03;
            case 6: goto label19;
            case 10: goto label15;
            case 20: goto label16;
            case 21: goto label04;
            case 41: goto label17;
            case 42: goto label18;
            case 50: goto label31;
            default: goto label32;
        };

     label02:
        $i83 = (int) -1;

        i61 = i61 + $i83;

        goto label32;

     label03:
        r14 = r16.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode kid2>;

        i62 = i61 + 2;

        $r15 = r16.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode kid>;

        $i59 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int emitREBytecode(org.mozilla.javascript.regexp.CompilerState,org.mozilla.javascript.regexp.RECompiled,int,org.mozilla.javascript.regexp.RENode)>(r4, r0, i62, $r15);

        i63 = $i59 + 1;

        r1[$i59] = 23;

        i64 = i63 + 2;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void resolveForwardJump(byte[],int,int)>(r1, i61, i64);

        $i60 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int emitREBytecode(org.mozilla.javascript.regexp.CompilerState,org.mozilla.javascript.regexp.RECompiled,int,org.mozilla.javascript.regexp.RENode)>(r4, r0, i64, r14);

        i65 = $i60 + 1;

        r1[$i60] = 23;

        i61 = i65 + 2;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void resolveForwardJump(byte[],int,int)>(r1, i63, i61);

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void resolveForwardJump(byte[],int,int)>(r1, i65, i61);

        goto label32;

     label04:
        $i10 = r16.<org.mozilla.javascript.regexp.RENode: int flatIndex>;

        $i85 = (int) -1;

        if $i10 == $i85 goto label06;

     label05:
        $r7 = r16.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next>;

        if $r7 == null goto label06;

        $r8 = r16.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next>;

        $b32 = $r8.<org.mozilla.javascript.regexp.RENode: byte op>;

        $i86 = (int) $b32;

        if $i86 != 21 goto label06;

        $i34 = r16.<org.mozilla.javascript.regexp.RENode: int flatIndex>;

        $i33 = r16.<org.mozilla.javascript.regexp.RENode: int length>;

        $i36 = $i34 + $i33;

        $r9 = r16.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next>;

        $i35 = $r9.<org.mozilla.javascript.regexp.RENode: int flatIndex>;

        if $i36 != $i35 goto label06;

        $i38 = r16.<org.mozilla.javascript.regexp.RENode: int length>;

        $r10 = r16.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next>;

        $i37 = $r10.<org.mozilla.javascript.regexp.RENode: int length>;

        $i39 = $i38 + $i37;

        r16.<org.mozilla.javascript.regexp.RENode: int length> = $i39;

        $r11 = r16.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next>;

        $r12 = $r11.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next>;

        r16.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next> = $r12;

        goto label05;

     label06:
        $i66 = r16.<org.mozilla.javascript.regexp.RENode: int flatIndex>;

        $i88 = (int) -1;

        if $i66 == $i88 goto label09;

        $i24 = r16.<org.mozilla.javascript.regexp.RENode: int length>;

        if $i24 <= 1 goto label09;

        $i25 = r4.<org.mozilla.javascript.regexp.CompilerState: int flags>;

        $i26 = $i25 & 2;

        if $i26 == 0 goto label07;

        $i31 = i61 - 1;

        r1[$i31] = 32;

        goto label08;

     label07:
        $i27 = i61 - 1;

        r1[$i27] = 21;

     label08:
        $i28 = r16.<org.mozilla.javascript.regexp.RENode: int flatIndex>;

        $i29 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int addIndex(byte[],int,int)>(r1, i61, $i28);

        $i30 = r16.<org.mozilla.javascript.regexp.RENode: int length>;

        i61 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int addIndex(byte[],int,int)>(r1, $i29, $i30);

        goto label32;

     label09:
        $c11 = r16.<org.mozilla.javascript.regexp.RENode: char chr>;

        $i89 = (int) $c11;

        if $i89 >= 256 goto label12;

        $i17 = r4.<org.mozilla.javascript.regexp.CompilerState: int flags>;

        $i18 = $i17 & 2;

        if $i18 == 0 goto label10;

        $i23 = i61 - 1;

        r1[$i23] = 33;

        goto label11;

     label10:
        $i19 = i61 - 1;

        r1[$i19] = 22;

     label11:
        $i20 = i61;

        i61 = i61 + 1;

        $c21 = r16.<org.mozilla.javascript.regexp.RENode: char chr>;

        $b22 = (byte) $c21;

        r1[$i20] = $b22;

        goto label32;

     label12:
        $i12 = r4.<org.mozilla.javascript.regexp.CompilerState: int flags>;

        $i13 = $i12 & 2;

        if $i13 == 0 goto label13;

        $i16 = i61 - 1;

        r1[$i16] = 35;

        goto label14;

     label13:
        $i14 = i61 - 1;

        r1[$i14] = 28;

     label14:
        $c15 = r16.<org.mozilla.javascript.regexp.RENode: char chr>;

        $i90 = (int) $c15;

        i61 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int addIndex(byte[],int,int)>(r1, i61, $i90);

        goto label32;

     label15:
        $i41 = r16.<org.mozilla.javascript.regexp.RENode: int parenIndex>;

        $i42 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int addIndex(byte[],int,int)>(r1, i61, $i41);

        $r13 = r16.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode kid>;

        $i43 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int emitREBytecode(org.mozilla.javascript.regexp.CompilerState,org.mozilla.javascript.regexp.RECompiled,int,org.mozilla.javascript.regexp.RENode)>(r4, r0, $i42, $r13);

        i67 = $i43 + 1;

        r1[$i43] = 11;

        $i44 = r16.<org.mozilla.javascript.regexp.RENode: int parenIndex>;

        i61 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int addIndex(byte[],int,int)>(r1, i67, $i44);

        goto label32;

     label16:
        $i40 = r16.<org.mozilla.javascript.regexp.RENode: int parenIndex>;

        i61 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int addIndex(byte[],int,int)>(r1, i61, $i40);

        goto label32;

     label17:
        i68 = i61;

        i69 = i61 + 2;

        $r6 = r16.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode kid>;

        $i9 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int emitREBytecode(org.mozilla.javascript.regexp.CompilerState,org.mozilla.javascript.regexp.RECompiled,int,org.mozilla.javascript.regexp.RENode)>(r4, r0, i69, $r6);

        i61 = $i9 + 1;

        r1[$i9] = 43;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void resolveForwardJump(byte[],int,int)>(r1, i68, i61);

        goto label32;

     label18:
        i70 = i61;

        i71 = i61 + 2;

        $r5 = r16.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode kid>;

        $i8 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int emitREBytecode(org.mozilla.javascript.regexp.CompilerState,org.mozilla.javascript.regexp.RECompiled,int,org.mozilla.javascript.regexp.RENode)>(r4, r0, i71, $r5);

        i61 = $i8 + 1;

        r1[$i8] = 44;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void resolveForwardJump(byte[],int,int)>(r1, i70, i61);

        goto label32;

     label19:
        $i45 = r16.<org.mozilla.javascript.regexp.RENode: int min>;

        if $i45 != 0 goto label22;

        $i57 = r16.<org.mozilla.javascript.regexp.RENode: int max>;

        $i92 = (int) -1;

        if $i57 != $i92 goto label22;

        $i58 = i61 - 1;

        $z3 = r16.<org.mozilla.javascript.regexp.RENode: boolean greedy>;

        if $z3 == 0 goto label20;

        $b72 = 7;

        goto label21;

     label20:
        $b72 = 45;

     label21:
        r1[$i58] = $b72;

        goto label30;

     label22:
        $i46 = r16.<org.mozilla.javascript.regexp.RENode: int min>;

        if $i46 != 0 goto label25;

        $i55 = r16.<org.mozilla.javascript.regexp.RENode: int max>;

        if $i55 != 1 goto label25;

        $i56 = i61 - 1;

        $z2 = r16.<org.mozilla.javascript.regexp.RENode: boolean greedy>;

        if $z2 == 0 goto label23;

        $b73 = 9;

        goto label24;

     label23:
        $b73 = 47;

     label24:
        r1[$i56] = $b73;

        goto label30;

     label25:
        $i47 = r16.<org.mozilla.javascript.regexp.RENode: int min>;

        if $i47 != 1 goto label28;

        $i53 = r16.<org.mozilla.javascript.regexp.RENode: int max>;

        $i94 = (int) -1;

        if $i53 != $i94 goto label28;

        $i54 = i61 - 1;

        $z1 = r16.<org.mozilla.javascript.regexp.RENode: boolean greedy>;

        if $z1 == 0 goto label26;

        $b74 = 8;

        goto label27;

     label26:
        $b74 = 46;

     label27:
        r1[$i54] = $b74;

        goto label30;

     label28:
        $z0 = r16.<org.mozilla.javascript.regexp.RENode: boolean greedy>;

        if $z0 != 0 goto label29;

        $i52 = i61 - 1;

        r1[$i52] = 48;

     label29:
        $i48 = r16.<org.mozilla.javascript.regexp.RENode: int min>;

        $i49 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int addIndex(byte[],int,int)>(r1, i61, $i48);

        $i50 = r16.<org.mozilla.javascript.regexp.RENode: int max>;

        $i51 = $i50 + 1;

        i61 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int addIndex(byte[],int,int)>(r1, $i49, $i51);

     label30:
        $i75 = r16.<org.mozilla.javascript.regexp.RENode: int parenCount>;

        $i76 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int addIndex(byte[],int,int)>(r1, i61, $i75);

        $i77 = r16.<org.mozilla.javascript.regexp.RENode: int parenIndex>;

        $i78 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int addIndex(byte[],int,int)>(r1, $i76, $i77);

        i79 = $i78 + 2;

        $r17 = r16.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode kid>;

        $i80 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int emitREBytecode(org.mozilla.javascript.regexp.CompilerState,org.mozilla.javascript.regexp.RECompiled,int,org.mozilla.javascript.regexp.RENode)>(r4, r0, i79, $r17);

        i61 = $i80 + 1;

        r1[$i80] = 49;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void resolveForwardJump(byte[],int,int)>(r1, $i78, i61);

        goto label32;

     label31:
        $i3 = r16.<org.mozilla.javascript.regexp.RENode: int index>;

        i61 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int addIndex(byte[],int,int)>(r1, i61, $i3);

        $r3 = r0.<org.mozilla.javascript.regexp.RECompiled: org.mozilla.javascript.regexp.RECharSet[] classList>;

        $i7 = r16.<org.mozilla.javascript.regexp.RENode: int index>;

        $r18 = new org.mozilla.javascript.regexp.RECharSet;

        $i6 = r16.<org.mozilla.javascript.regexp.RENode: int bmsize>;

        $i5 = r16.<org.mozilla.javascript.regexp.RENode: int startIndex>;

        $i4 = r16.<org.mozilla.javascript.regexp.RENode: int kidlen>;

        specialinvoke $r18.<org.mozilla.javascript.regexp.RECharSet: void <init>(int,int,int)>($i6, $i5, $i4);

        $r3[$i7] = $r18;

        goto label32;

     label32:
        r16 = r16.<org.mozilla.javascript.regexp.RENode: org.mozilla.javascript.regexp.RENode next>;

        goto label01;

     label33:
        return i61;
    }

    private static void pushProgState(org.mozilla.javascript.regexp.REGlobalData, int, int, org.mozilla.javascript.regexp.REBackTrackData, int, int)
    {
        org.mozilla.javascript.regexp.REGlobalData r0;
        org.mozilla.javascript.regexp.REProgState $r1, $r3;
        org.mozilla.javascript.regexp.REBackTrackData r2;
        int i0, i1, i2, i3, $i4;

        r0 := @parameter0: org.mozilla.javascript.regexp.REGlobalData;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: org.mozilla.javascript.regexp.REBackTrackData;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $r1 = new org.mozilla.javascript.regexp.REProgState;

        $r3 = r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REProgState stateStackTop>;

        $i4 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        specialinvoke $r1.<org.mozilla.javascript.regexp.REProgState: void <init>(org.mozilla.javascript.regexp.REProgState,int,int,int,org.mozilla.javascript.regexp.REBackTrackData,int,int)>($r3, i0, i1, $i4, r2, i2, i3);

        r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REProgState stateStackTop> = $r1;

        return;
    }

    private static org.mozilla.javascript.regexp.REProgState popProgState(org.mozilla.javascript.regexp.REGlobalData)
    {
        org.mozilla.javascript.regexp.REGlobalData r0;
        org.mozilla.javascript.regexp.REProgState r1, $r2;

        r0 := @parameter0: org.mozilla.javascript.regexp.REGlobalData;

        r1 = r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REProgState stateStackTop>;

        $r2 = r1.<org.mozilla.javascript.regexp.REProgState: org.mozilla.javascript.regexp.REProgState previous>;

        r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REProgState stateStackTop> = $r2;

        return r1;
    }

    private static void pushBackTrackState(org.mozilla.javascript.regexp.REGlobalData, byte, int)
    {
        byte b0;
        org.mozilla.javascript.regexp.REBackTrackData $r2;
        org.mozilla.javascript.regexp.REGlobalData r0;
        int i1, $i2;

        r0 := @parameter0: org.mozilla.javascript.regexp.REGlobalData;

        b0 := @parameter1: byte;

        i1 := @parameter2: int;

        $r2 = new org.mozilla.javascript.regexp.REBackTrackData;

        $i2 = (int) b0;

        specialinvoke $r2.<org.mozilla.javascript.regexp.REBackTrackData: void <init>(org.mozilla.javascript.regexp.REGlobalData,int,int)>(r0, $i2, i1);

        r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REBackTrackData backTrackStackTop> = $r2;

        return;
    }

    private static boolean flatNMatcher(org.mozilla.javascript.regexp.REGlobalData, int, int, char[], int)
    {
        int i0, $i1, i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, i12, $i13, $i14;
        org.mozilla.javascript.regexp.REGlobalData r0;
        org.mozilla.javascript.regexp.RECompiled $r1;
        char $c10, $c11;
        char[] $r2, r3;

        r0 := @parameter0: org.mozilla.javascript.regexp.REGlobalData;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        r3 := @parameter3: char[];

        i2 := @parameter4: int;

        $i1 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i3 = $i1 + i0;

        if $i3 <= i2 goto label1;

        return 0;

     label1:
        i12 = 0;

     label2:
        if i12 >= i0 goto label4;

        $r1 = r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $r2 = $r1.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        $i7 = i6 + i12;

        $c11 = $r2[$i7];

        $i8 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i9 = $i8 + i12;

        $c10 = r3[$i9];

        $i13 = (int) $c11;

        $i14 = (int) $c10;

        if $i13 == $i14 goto label3;

        return 0;

     label3:
        i12 = i12 + 1;

        goto label2;

     label4:
        $i4 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i5 = $i4 + i0;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i5;

        return 1;
    }

    private static boolean flatNIMatcher(org.mozilla.javascript.regexp.REGlobalData, int, int, char[], int)
    {
        int i0, $i1, i2, $i3, $i4, $i5, i6, $i7, $i10, $i11, i14, $i15, $i16;
        org.mozilla.javascript.regexp.REGlobalData r0;
        org.mozilla.javascript.regexp.RECompiled $r1;
        char $c8, $c9, $c12, $c13;
        char[] $r2, r3;

        r0 := @parameter0: org.mozilla.javascript.regexp.REGlobalData;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        r3 := @parameter3: char[];

        i2 := @parameter4: int;

        $i1 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i3 = $i1 + i0;

        if $i3 <= i2 goto label1;

        return 0;

     label1:
        i14 = 0;

     label2:
        if i14 >= i0 goto label4;

        $r1 = r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $r2 = $r1.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        $i7 = i6 + i14;

        $c8 = $r2[$i7];

        $c9 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char upcase(char)>($c8);

        $i10 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i11 = $i10 + i14;

        $c12 = r3[$i11];

        $c13 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char upcase(char)>($c12);

        $i15 = (int) $c9;

        $i16 = (int) $c13;

        if $i15 == $i16 goto label3;

        return 0;

     label3:
        i14 = i14 + 1;

        goto label2;

     label4:
        $i4 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i5 = $i4 + i0;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i5;

        return 1;
    }

    private static boolean backrefMatcher(org.mozilla.javascript.regexp.REGlobalData, int, char[], int)
    {
        org.mozilla.javascript.regexp.REGlobalData r0;
        org.mozilla.javascript.regexp.RECompiled $r1;
        int i0, $i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i15, $i18, $i19, i22, i23, $i25, $i26, $i27, $i28, $i29;
        char $c13, $c14, $c16, $c17, $c20, $c21;
        char[] r2;

        r0 := @parameter0: org.mozilla.javascript.regexp.REGlobalData;

        i0 := @parameter1: int;

        r2 := @parameter2: char[];

        i4 := @parameter3: int;

        $i1 = virtualinvoke r0.<org.mozilla.javascript.regexp.REGlobalData: int parens_index(int)>(i0);

        $i25 = (int) -1;

        if $i1 != $i25 goto label1;

        return 1;

     label1:
        $i2 = virtualinvoke r0.<org.mozilla.javascript.regexp.REGlobalData: int parens_length(int)>(i0);

        $i3 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i5 = $i3 + $i2;

        if $i5 <= i4 goto label2;

        return 0;

     label2:
        $r1 = r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $i6 = $r1.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        $i7 = $i6 & 2;

        if $i7 == 0 goto label5;

        i22 = 0;

     label3:
        if i22 >= $i2 goto label8;

        $i15 = $i1 + i22;

        $c16 = r2[$i15];

        $c17 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char upcase(char)>($c16);

        $i18 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i19 = $i18 + i22;

        $c20 = r2[$i19];

        $c21 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char upcase(char)>($c20);

        $i26 = (int) $c17;

        $i27 = (int) $c21;

        if $i26 == $i27 goto label4;

        return 0;

     label4:
        i22 = i22 + 1;

        goto label3;

     label5:
        i23 = 0;

     label6:
        if i23 >= $i2 goto label8;

        $i10 = $i1 + i23;

        $c14 = r2[$i10];

        $i11 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i12 = $i11 + i23;

        $c13 = r2[$i12];

        $i28 = (int) $c14;

        $i29 = (int) $c13;

        if $i28 == $i29 goto label7;

        return 0;

     label7:
        i23 = i23 + 1;

        goto label6;

     label8:
        $i8 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i9 = $i8 + $i2;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i9;

        return 1;
    }

    private static void addCharacterToCharSet(org.mozilla.javascript.regexp.RECharSet, char)
    {
        byte[] $r1;
        org.mozilla.javascript.regexp.RECharSet r0;
        char c0, $c3;
        java.lang.RuntimeException $r3;
        byte $b5, $b7;
        int i1, $i2, $i4, $i6, $i8, $i9, $i10, $i11;

        r0 := @parameter0: org.mozilla.javascript.regexp.RECharSet;

        c0 := @parameter1: char;

        $i8 = (int) c0;

        i1 = $i8 / 8;

        $i2 = r0.<org.mozilla.javascript.regexp.RECharSet: int length>;

        $i9 = (int) c0;

        if $i9 <= $i2 goto label1;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>()>();

        throw $r3;

     label1:
        $r1 = r0.<org.mozilla.javascript.regexp.RECharSet: byte[] bits>;

        $b5 = $r1[i1];

        $c3 = c0 & 7;

        $i10 = (int) $c3;

        $i4 = 1 << $i10;

        $i11 = (int) $b5;

        $i6 = $i11 | $i4;

        $b7 = (byte) $i6;

        $r1[i1] = $b7;

        return;
    }

    private static void addCharacterRangeToCharSet(org.mozilla.javascript.regexp.RECharSet, char, char)
    {
        byte[] $r2, $r3, $r4, $r5;
        byte $b6, $b8, $b11, $b13, $b18, $b20;
        org.mozilla.javascript.regexp.RECharSet r0;
        int i0, i1, $i2, $i5, $i7, $i9, $i10, $i12, $i14, $i15, $i16, $i17, $i19, i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38;
        char $c3, $c4, c21, c22, c23, c24;
        java.lang.RuntimeException $r6;

        r0 := @parameter0: org.mozilla.javascript.regexp.RECharSet;

        c21 := @parameter1: char;

        c22 := @parameter2: char;

        $i26 = (int) c21;

        i0 = $i26 / 8;

        $i27 = (int) c22;

        i1 = $i27 / 8;

        $i2 = r0.<org.mozilla.javascript.regexp.RECharSet: int length>;

        $i28 = (int) c22;

        if $i28 > $i2 goto label1;

        $i29 = (int) c21;

        $i30 = (int) c22;

        if $i29 <= $i30 goto label2;

     label1:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>()>();

        throw $r6;

     label2:
        $c3 = c21 & 7;

        c23 = (char) $c3;

        $c4 = c22 & 7;

        c24 = (char) $c4;

        if i0 != i1 goto label3;

        $r5 = r0.<org.mozilla.javascript.regexp.RECharSet: byte[] bits>;

        $b18 = $r5[i0];

        $i31 = (int) c24;

        $i32 = (int) c23;

        $i14 = $i31 - $i32;

        $i15 = 7 - $i14;

        $i16 = 255 >> $i15;

        $i33 = (int) c23;

        $i17 = $i16 << $i33;

        $i34 = (int) $b18;

        $i19 = $i34 | $i17;

        $b20 = (byte) $i19;

        $r5[i0] = $b20;

        goto label6;

     label3:
        $r2 = r0.<org.mozilla.javascript.regexp.RECharSet: byte[] bits>;

        $b6 = $r2[i0];

        $i35 = (int) c23;

        $i5 = 255 << $i35;

        $i36 = (int) $b6;

        $i7 = $i36 | $i5;

        $b8 = (byte) $i7;

        $r2[i0] = $b8;

        i25 = i0 + 1;

     label4:
        if i25 >= i1 goto label5;

        $r4 = r0.<org.mozilla.javascript.regexp.RECharSet: byte[] bits>;

        $r4[i25] = -1;

        i25 = i25 + 1;

        goto label4;

     label5:
        $r3 = r0.<org.mozilla.javascript.regexp.RECharSet: byte[] bits>;

        $b11 = $r3[i1];

        $i37 = (int) c24;

        $i9 = 7 - $i37;

        $i10 = 255 >> $i9;

        $i38 = (int) $b11;

        $i12 = $i38 | $i10;

        $b13 = (byte) $i12;

        $r3[i1] = $b13;

     label6:
        return;
    }

    private static void processCharSet(org.mozilla.javascript.regexp.REGlobalData, org.mozilla.javascript.regexp.RECharSet)
    {
        java.lang.Throwable $r2;
        org.mozilla.javascript.regexp.RECharSet r0;
        org.mozilla.javascript.regexp.REGlobalData r1;
        boolean $z0;

        r1 := @parameter0: org.mozilla.javascript.regexp.REGlobalData;

        r0 := @parameter1: org.mozilla.javascript.regexp.RECharSet;

        entermonitor r0;

     label1:
        $z0 = r0.<org.mozilla.javascript.regexp.RECharSet: boolean converted>;

        if $z0 != 0 goto label2;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void processCharSetImpl(org.mozilla.javascript.regexp.REGlobalData,org.mozilla.javascript.regexp.RECharSet)>(r1, r0);

        r0.<org.mozilla.javascript.regexp.RECharSet: boolean converted> = 1;

     label2:
        exitmonitor r0;

     label3:
        goto label6;

     label4:
        $r2 := @caughtexception;

        exitmonitor r0;

     label5:
        throw $r2;

     label6:
        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    private static void processCharSetImpl(org.mozilla.javascript.regexp.REGlobalData, org.mozilla.javascript.regexp.RECharSet)
    {
        byte[] $r1;
        byte b44;
        char[] $r4, $r6, $r8, $r11, $r14, $r16, $r18, $r20, $r22, $r24;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        org.mozilla.javascript.regexp.REGlobalData r2;
        org.mozilla.javascript.regexp.RECompiled $r3, $r5, $r7, $r9, $r10, $r12, $r13, $r15, $r17, $r19, $r21, $r23;
        org.mozilla.javascript.regexp.RECharSet r0;
        int $i0, i1, $i2, $i3, i4, $i7, $i8, $i9, $i13, $i14, $i19, $i20, $i21, $i22, $i26, $i27, $i29, $i35, $i37, $i38, $i39, $i40, $i41, i42, i45, i48, i49, i51, i54, i55, i56, i57, i58, $i59, $i60, $i61, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i73, $i75, $i77, $i79, $i81, $i82;
        char $c5, $c6, $c10, $c11, $c12, $c15, $c16, $c17, $c18, $c23, $c24, $c25, $c28, $c30, $c31, $c32, $c33, $c34, $c36, c43, c46, c47, c50, c52, c53;

        r2 := @parameter0: org.mozilla.javascript.regexp.REGlobalData;

        r0 := @parameter1: org.mozilla.javascript.regexp.RECharSet;

        i42 = r0.<org.mozilla.javascript.regexp.RECharSet: int startIndex>;

        $i0 = r0.<org.mozilla.javascript.regexp.RECharSet: int strlength>;

        i1 = i42 + $i0;

        c43 = 0;

        z5 = 0;

        r0.<org.mozilla.javascript.regexp.RECharSet: boolean sense> = 1;

        $i2 = r0.<org.mozilla.javascript.regexp.RECharSet: int length>;

        $i3 = $i2 / 8;

        i4 = $i3 + 1;

        $r1 = newarray (byte)[i4];

        r0.<org.mozilla.javascript.regexp.RECharSet: byte[] bits> = $r1;

        if i42 != i1 goto label01;

        return;

     label01:
        $r3 = r2.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $r4 = $r3.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        $c5 = $r4[i42];

        $i59 = (int) $c5;

        if $i59 != 94 goto label02;

        r0.<org.mozilla.javascript.regexp.RECharSet: boolean sense> = 0;

        i42 = i42 + 1;

     label02:
        if i42 == i1 goto label42;

        b44 = 2;

        $r5 = r2.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $r6 = $r5.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        $c6 = $r6[i42];

        $i60 = (int) $c6;

        lookupswitch($i60)
        {
            case 92: goto label03;
            default: goto label35;
        };

     label03:
        i45 = i42 + 1;

        $r7 = r2.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $r8 = $r7.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        i42 = i45 + 1;

        c46 = $r8[i45];

        $i61 = (int) c46;

        tableswitch($i61)
        {
            case 48: goto label17;
            case 49: goto label17;
            case 50: goto label17;
            case 51: goto label17;
            case 52: goto label17;
            case 53: goto label17;
            case 54: goto label17;
            case 55: goto label17;
            case 56: goto label34;
            case 57: goto label34;
            case 58: goto label34;
            case 59: goto label34;
            case 60: goto label34;
            case 61: goto label34;
            case 62: goto label34;
            case 63: goto label34;
            case 64: goto label34;
            case 65: goto label34;
            case 66: goto label34;
            case 67: goto label34;
            case 68: goto label21;
            case 69: goto label34;
            case 70: goto label34;
            case 71: goto label34;
            case 72: goto label34;
            case 73: goto label34;
            case 74: goto label34;
            case 75: goto label34;
            case 76: goto label34;
            case 77: goto label34;
            case 78: goto label34;
            case 79: goto label34;
            case 80: goto label34;
            case 81: goto label34;
            case 82: goto label34;
            case 83: goto label25;
            case 84: goto label34;
            case 85: goto label34;
            case 86: goto label34;
            case 87: goto label31;
            case 88: goto label34;
            case 89: goto label34;
            case 90: goto label34;
            case 91: goto label34;
            case 92: goto label34;
            case 93: goto label34;
            case 94: goto label34;
            case 95: goto label34;
            case 96: goto label34;
            case 97: goto label34;
            case 98: goto label04;
            case 99: goto label10;
            case 100: goto label20;
            case 101: goto label34;
            case 102: goto label05;
            case 103: goto label34;
            case 104: goto label34;
            case 105: goto label34;
            case 106: goto label34;
            case 107: goto label34;
            case 108: goto label34;
            case 109: goto label34;
            case 110: goto label06;
            case 111: goto label34;
            case 112: goto label34;
            case 113: goto label34;
            case 114: goto label07;
            case 115: goto label22;
            case 116: goto label08;
            case 117: goto label12;
            case 118: goto label09;
            case 119: goto label28;
            case 120: goto label13;
            default: goto label34;
        };

     label04:
        c47 = 8;

        goto label36;

     label05:
        c47 = 12;

        goto label36;

     label06:
        c47 = 10;

        goto label36;

     label07:
        c47 = 13;

        goto label36;

     label08:
        c47 = 9;

        goto label36;

     label09:
        c47 = 11;

        goto label36;

     label10:
        $i26 = i42 + 1;

        if $i26 >= i1 goto label11;

        $r15 = r2.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $r16 = $r15.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        $i27 = i42 + 1;

        $c28 = $r16[$i27];

        $z2 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isWord(char)>($c28);

        if $z2 == 0 goto label11;

        $r17 = r2.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $r18 = $r17.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        $i29 = i42;

        i42 = i42 + 1;

        $c30 = $r18[$i29];

        $c31 = $c30 & 31;

        c47 = (char) $c31;

        goto label36;

     label11:
        $i63 = (int) -1;

        i42 = i42 + $i63;

        c47 = 92;

        goto label36;

     label12:
        b44 = 4;

     label13:
        i48 = 0;

        i49 = 0;

     label14:
        if i49 >= b44 goto label16;

        if i42 >= i1 goto label16;

        $r13 = r2.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $r14 = $r13.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        $i19 = i42;

        i42 = i42 + 1;

        c50 = $r14[$i19];

        $i64 = (int) c50;

        $i20 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int toASCIIHexDigit(int)>($i64);

        if $i20 >= 0 goto label15;

        $i22 = i49 + 1;

        i42 = i42 - $i22;

        i48 = 92;

        goto label16;

     label15:
        $i21 = i48 << 4;

        i48 = $i21 | $i20;

        i49 = i49 + 1;

        goto label14;

     label16:
        c47 = (char) i48;

        goto label36;

     label17:
        $i65 = (int) c46;

        i51 = $i65 - 48;

        $r19 = r2.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $r20 = $r19.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        c52 = $r20[i42];

        $i66 = (int) c52;

        if 48 > $i66 goto label19;

        $i67 = (int) c52;

        if $i67 > 55 goto label19;

        i42 = i42 + 1;

        $i38 = 8 * i51;

        $i68 = (int) c52;

        $i37 = $i68 - 48;

        i51 = $i38 + $i37;

        $r21 = r2.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $r22 = $r21.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        c53 = $r22[i42];

        $i69 = (int) c53;

        if 48 > $i69 goto label19;

        $i70 = (int) c53;

        if $i70 > 55 goto label19;

        i42 = i42 + 1;

        $i40 = 8 * i51;

        $i71 = (int) c53;

        $i39 = $i71 - 48;

        i54 = $i40 + $i39;

        if i54 > 255 goto label18;

        i51 = i54;

        goto label19;

     label18:
        $i73 = (int) -1;

        i42 = i42 + $i73;

     label19:
        c47 = (char) i51;

        goto label36;

     label20:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void addCharacterRangeToCharSet(org.mozilla.javascript.regexp.RECharSet,char,char)>(r0, 48, 57);

        goto label02;

     label21:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void addCharacterRangeToCharSet(org.mozilla.javascript.regexp.RECharSet,char,char)>(r0, 0, 47);

        $i35 = r0.<org.mozilla.javascript.regexp.RECharSet: int length>;

        $c36 = (char) $i35;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void addCharacterRangeToCharSet(org.mozilla.javascript.regexp.RECharSet,char,char)>(r0, 58, $c36);

        goto label02;

     label22:
        i55 = r0.<org.mozilla.javascript.regexp.RECharSet: int length>;

     label23:
        if i55 < 0 goto label02;

        $z1 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isREWhiteSpace(int)>(i55);

        if $z1 == 0 goto label24;

        $c25 = (char) i55;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void addCharacterToCharSet(org.mozilla.javascript.regexp.RECharSet,char)>(r0, $c25);

     label24:
        $i75 = (int) -1;

        i55 = i55 + $i75;

        goto label23;

     label25:
        i56 = r0.<org.mozilla.javascript.regexp.RECharSet: int length>;

     label26:
        if i56 < 0 goto label02;

        $z4 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isREWhiteSpace(int)>(i56);

        if $z4 != 0 goto label27;

        $c34 = (char) i56;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void addCharacterToCharSet(org.mozilla.javascript.regexp.RECharSet,char)>(r0, $c34);

     label27:
        $i77 = (int) -1;

        i56 = i56 + $i77;

        goto label26;

     label28:
        i57 = r0.<org.mozilla.javascript.regexp.RECharSet: int length>;

     label29:
        if i57 < 0 goto label02;

        $c23 = (char) i57;

        $z0 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isWord(char)>($c23);

        if $z0 == 0 goto label30;

        $c24 = (char) i57;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void addCharacterToCharSet(org.mozilla.javascript.regexp.RECharSet,char)>(r0, $c24);

     label30:
        $i79 = (int) -1;

        i57 = i57 + $i79;

        goto label29;

     label31:
        i58 = r0.<org.mozilla.javascript.regexp.RECharSet: int length>;

     label32:
        if i58 < 0 goto label02;

        $c32 = (char) i58;

        $z3 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isWord(char)>($c32);

        if $z3 != 0 goto label33;

        $c33 = (char) i58;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void addCharacterToCharSet(org.mozilla.javascript.regexp.RECharSet,char)>(r0, $c33);

     label33:
        $i81 = (int) -1;

        i58 = i58 + $i81;

        goto label32;

     label34:
        c47 = c46;

        goto label36;

     label35:
        $r23 = r2.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $r24 = $r23.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        $i41 = i42;

        i42 = i42 + 1;

        c47 = $r24[$i41];

     label36:
        if z5 == 0 goto label39;

        $r12 = r2.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $i13 = $r12.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        $i14 = $i13 & 2;

        if $i14 == 0 goto label37;

        $c15 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char upcase(char)>(c43);

        $c16 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char upcase(char)>(c47);

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void addCharacterRangeToCharSet(org.mozilla.javascript.regexp.RECharSet,char,char)>(r0, $c15, $c16);

        $c17 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char downcase(char)>(c43);

        $c18 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char downcase(char)>(c47);

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void addCharacterRangeToCharSet(org.mozilla.javascript.regexp.RECharSet,char,char)>(r0, $c17, $c18);

        goto label38;

     label37:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void addCharacterRangeToCharSet(org.mozilla.javascript.regexp.RECharSet,char,char)>(r0, c43, c47);

     label38:
        z5 = 0;

        goto label02;

     label39:
        $r9 = r2.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $i7 = $r9.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        $i8 = $i7 & 2;

        if $i8 == 0 goto label40;

        $c11 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char upcase(char)>(c47);

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void addCharacterToCharSet(org.mozilla.javascript.regexp.RECharSet,char)>(r0, $c11);

        $c12 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char downcase(char)>(c47);

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void addCharacterToCharSet(org.mozilla.javascript.regexp.RECharSet,char)>(r0, $c12);

        goto label41;

     label40:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void addCharacterToCharSet(org.mozilla.javascript.regexp.RECharSet,char)>(r0, c47);

     label41:
        $i9 = i1 - 1;

        if i42 >= $i9 goto label02;

        $r10 = r2.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $r11 = $r10.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        $c10 = $r11[i42];

        $i82 = (int) $c10;

        if $i82 != 45 goto label02;

        i42 = i42 + 1;

        z5 = 1;

        c43 = c47;

        goto label02;

     label42:
        return;
    }

    private static boolean classMatcher(org.mozilla.javascript.regexp.REGlobalData, org.mozilla.javascript.regexp.RECharSet, char)
    {
        byte[] $r1, $r2;
        org.mozilla.javascript.regexp.RECharSet r0;
        byte $b5, $b11;
        int $i1, $i2, $i4, $i6, $i7, $i8, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20;
        boolean $z0, $z1;
        org.mozilla.javascript.regexp.REGlobalData r3;
        char c0, $c3, $c9;

        r3 := @parameter0: org.mozilla.javascript.regexp.REGlobalData;

        r0 := @parameter1: org.mozilla.javascript.regexp.RECharSet;

        c0 := @parameter2: char;

        $z0 = r0.<org.mozilla.javascript.regexp.RECharSet: boolean converted>;

        if $z0 != 0 goto label1;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void processCharSet(org.mozilla.javascript.regexp.REGlobalData,org.mozilla.javascript.regexp.RECharSet)>(r3, r0);

     label1:
        $i14 = (int) c0;

        $i13 = $i14 / 8;

        $z1 = r0.<org.mozilla.javascript.regexp.RECharSet: boolean sense>;

        if $z1 == 0 goto label3;

        $i7 = r0.<org.mozilla.javascript.regexp.RECharSet: int length>;

        if $i7 == 0 goto label2;

        $i8 = r0.<org.mozilla.javascript.regexp.RECharSet: int length>;

        $i15 = (int) c0;

        if $i15 > $i8 goto label2;

        $r2 = r0.<org.mozilla.javascript.regexp.RECharSet: byte[] bits>;

        $b11 = $r2[$i13];

        $c9 = c0 & 7;

        $i16 = (int) $c9;

        $i10 = 1 << $i16;

        $i17 = (int) $b11;

        $i12 = $i17 & $i10;

        if $i12 != 0 goto label4;

     label2:
        return 0;

     label3:
        $i1 = r0.<org.mozilla.javascript.regexp.RECharSet: int length>;

        if $i1 == 0 goto label4;

        $i2 = r0.<org.mozilla.javascript.regexp.RECharSet: int length>;

        $i18 = (int) c0;

        if $i18 > $i2 goto label4;

        $r1 = r0.<org.mozilla.javascript.regexp.RECharSet: byte[] bits>;

        $b5 = $r1[$i13];

        $c3 = c0 & 7;

        $i19 = (int) $c3;

        $i4 = 1 << $i19;

        $i20 = (int) $b5;

        $i6 = $i20 & $i4;

        if $i6 == 0 goto label4;

        return 0;

     label4:
        return 1;
    }

    private static boolean executeREBytecode(org.mozilla.javascript.regexp.REGlobalData, char[], int)
    {
        org.mozilla.javascript.regexp.RECompiled $r1, $r13, $r22, $r23;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, i38, $i39, $i40, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i55, $i58, $i59, $i60, $i61, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i73, $i74, $i77, $i78, $i79, $i80, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i90, $i91, $i92, $i93, $i95, $i96, $i97, $i98, $i100, $i101, $i102, $i103, $i105, $i106, $i107, $i108, $i110, $i111, $i112, $i113, $i115, $i116, $i117, $i118, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i133, $i134, $i136, $i137, $i138, $i140, $i141, $i143, $i144, $i146, $i147, $i148, $i149, $i150, $i152, $i153, $i154, i155, i156, i157, i158, i159, i160, i165, i166, i168, i169, i170, i171, i173, i174, i175, i176, i177, i178, i179, i180, i181, i182, i183, i184, i185, i186, i187, i188, i189, i190, i191, i192, i193, i194, i195, i196, i197, i198, $i199, $i200, $i202, $i203, $i205, $i206, $i207, $i208, $i209, $i210, $i212, $i214, $i216, $i218, $i220, $i222, $i224, $i226, $i228, $i230, $i232, $i234;
        org.mozilla.javascript.regexp.REBackTrackData $r4, $r18, $r19, r25;
        java.lang.RuntimeException $r21, $r24;
        char[] r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, z16, $z17, $z18, $z19, $z20, z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54;
        byte[] r2;
        byte $b56, $b75, b167, b172;
        short $s57, $s76, $s201, $s204;
        org.mozilla.javascript.regexp.REProgState $r3, $r6, $r7, $r8, $r12, $r17, $r20;
        org.mozilla.javascript.regexp.REGlobalData r0;
        org.mozilla.javascript.regexp.RECharSet $r16;
        long[] $r5, $r9, $r11;
        java.lang.Object $r10;
        org.mozilla.javascript.regexp.RECharSet[] $r14;
        char $c41, $c52, $c53, $c54, $c62, $c63, $c64, $c72, $c81, $c89, $c94, $c99, $c104, $c109, $c114, $c119, $c132, $c135, $c139, $c142, $c145, $c151, c161, c162, c163, c164;

        r0 := @parameter0: org.mozilla.javascript.regexp.REGlobalData;

        r15 := @parameter1: char[];

        i38 := @parameter2: int;

        $r1 = r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        r2 = $r1.<org.mozilla.javascript.regexp.RECompiled: byte[] program>;

        z16 = 0;

        i155 = 0;

        i156 = 53;

        i157 = 1;

        i158 = r2[0];

     label001:
        tableswitch(i158)
        {
            case 0: goto label002;
            case 1: goto label059;
            case 2: goto label003;
            case 3: goto label007;
            case 4: goto label011;
            case 5: goto label018;
            case 6: goto label074;
            case 7: goto label074;
            case 8: goto label074;
            case 9: goto label074;
            case 10: goto label061;
            case 11: goto label062;
            case 12: goto label024;
            case 13: goto label109;
            case 14: goto label027;
            case 15: goto label030;
            case 16: goto label039;
            case 17: goto label042;
            case 18: goto label033;
            case 19: goto label036;
            case 20: goto label064;
            case 21: goto label045;
            case 22: goto label047;
            case 23: goto label060;
            case 24: goto label109;
            case 25: goto label109;
            case 26: goto label109;
            case 27: goto label109;
            case 28: goto label053;
            case 29: goto label109;
            case 30: goto label109;
            case 31: goto label109;
            case 32: goto label046;
            case 33: goto label050;
            case 34: goto label109;
            case 35: goto label056;
            case 36: goto label109;
            case 37: goto label109;
            case 38: goto label109;
            case 39: goto label109;
            case 40: goto label109;
            case 41: goto label067;
            case 42: goto label067;
            case 43: goto label070;
            case 44: goto label070;
            case 45: goto label074;
            case 46: goto label074;
            case 47: goto label074;
            case 48: goto label074;
            case 49: goto label087;
            case 50: goto label065;
            case 51: goto label088;
            case 52: goto label096;
            case 53: goto label108;
            default: goto label109;
        };

     label002:
        z16 = 1;

        goto label110;

     label003:
        $i148 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i148 == 0 goto label006;

        $z14 = r0.<org.mozilla.javascript.regexp.REGlobalData: boolean multiline>;

        if $z14 != 0 goto label004;

        $r23 = r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $i152 = $r23.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        $i153 = $i152 & 4;

        if $i153 == 0 goto label005;

     label004:
        $i149 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i150 = $i149 - 1;

        $c151 = r15[$i150];

        $z15 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isLineTerm(char)>($c151);

        if $z15 != 0 goto label006;

        z16 = 0;

        goto label110;

     label005:
        z16 = 0;

        goto label110;

     label006:
        z16 = 1;

        goto label110;

     label007:
        $i143 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i143 == i38 goto label010;

        $z12 = r0.<org.mozilla.javascript.regexp.REGlobalData: boolean multiline>;

        if $z12 != 0 goto label008;

        $r22 = r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $i146 = $r22.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        $i147 = $i146 & 4;

        if $i147 == 0 goto label009;

     label008:
        $i144 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c145 = r15[$i144];

        $z13 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isLineTerm(char)>($c145);

        if $z13 != 0 goto label010;

        z16 = 0;

        goto label110;

     label009:
        z16 = 0;

        goto label110;

     label010:
        z16 = 1;

        goto label110;

     label011:
        $i136 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i136 == 0 goto label012;

        $i140 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i141 = $i140 - 1;

        $c142 = r15[$i141];

        $z11 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isWord(char)>($c142);

        if $z11 != 0 goto label013;

     label012:
        $z17 = 1;

        goto label014;

     label013:
        $z17 = 0;

     label014:
        $i137 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i137 >= i38 goto label015;

        $i138 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c139 = r15[$i138];

        $z10 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isWord(char)>($c139);

        if $z10 != 0 goto label016;

     label015:
        $z18 = 1;

        goto label017;

     label016:
        $z18 = 0;

     label017:
        z16 = $z17 ^ $z18;

        goto label110;

     label018:
        $i129 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i129 == 0 goto label019;

        $i133 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i134 = $i133 - 1;

        $c135 = r15[$i134];

        $z9 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isWord(char)>($c135);

        if $z9 != 0 goto label020;

     label019:
        $z19 = 1;

        goto label021;

     label020:
        $z19 = 0;

     label021:
        $i130 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i130 >= i38 goto label022;

        $i131 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c132 = r15[$i131];

        $z8 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isWord(char)>($c132);

        if $z8 == 0 goto label022;

        $z20 = 1;

        goto label023;

     label022:
        $z20 = 0;

     label023:
        z16 = $z19 ^ $z20;

        goto label110;

     label024:
        $i115 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i115 == i38 goto label025;

        $i118 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c119 = r15[$i118];

        $z7 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isLineTerm(char)>($c119);

        if $z7 != 0 goto label025;

        $z38 = 1;

        $z37 = 1;

        goto label026;

     label025:
        $z38 = 0;

        $z37 = 0;

     label026:
        z16 = $z38;

        if $z37 == 0 goto label110;

        $i116 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i117 = $i116 + 1;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i117;

        goto label110;

     label027:
        $i110 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i110 == i38 goto label028;

        $i113 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c114 = r15[$i113];

        $z6 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isDigit(char)>($c114);

        if $z6 == 0 goto label028;

        $z44 = 1;

        $z43 = 1;

        goto label029;

     label028:
        $z44 = 0;

        $z43 = 0;

     label029:
        z16 = $z43;

        if $z44 == 0 goto label110;

        $i111 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i112 = $i111 + 1;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i112;

        goto label110;

     label030:
        $i105 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i105 == i38 goto label031;

        $i108 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c109 = r15[$i108];

        $z5 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isDigit(char)>($c109);

        if $z5 != 0 goto label031;

        $z48 = 1;

        $z47 = 1;

        goto label032;

     label031:
        $z48 = 0;

        $z47 = 0;

     label032:
        z16 = $z47;

        if $z48 == 0 goto label110;

        $i106 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i107 = $i106 + 1;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i107;

        goto label110;

     label033:
        $i90 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i90 == i38 goto label034;

        $i93 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c94 = r15[$i93];

        $i199 = (int) $c94;

        $z2 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isREWhiteSpace(int)>($i199);

        if $z2 == 0 goto label034;

        $z46 = 1;

        $z45 = 1;

        goto label035;

     label034:
        $z46 = 0;

        $z45 = 0;

     label035:
        z16 = $z45;

        if $z46 == 0 goto label110;

        $i91 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i92 = $i91 + 1;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i92;

        goto label110;

     label036:
        $i85 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i85 == i38 goto label037;

        $i88 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c89 = r15[$i88];

        $i200 = (int) $c89;

        $z1 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isREWhiteSpace(int)>($i200);

        if $z1 != 0 goto label037;

        $z40 = 1;

        $z39 = 1;

        goto label038;

     label037:
        $z40 = 0;

        $z39 = 0;

     label038:
        z16 = $z40;

        if $z39 == 0 goto label110;

        $i86 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i87 = $i86 + 1;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i87;

        goto label110;

     label039:
        $i100 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i100 == i38 goto label040;

        $i103 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c104 = r15[$i103];

        $z4 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isWord(char)>($c104);

        if $z4 == 0 goto label040;

        $z50 = 1;

        $z49 = 1;

        goto label041;

     label040:
        $z50 = 0;

        $z49 = 0;

     label041:
        z16 = $z49;

        if $z50 == 0 goto label110;

        $i101 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i102 = $i101 + 1;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i102;

        goto label110;

     label042:
        $i95 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i95 == i38 goto label043;

        $i98 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c99 = r15[$i98];

        $z3 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean isWord(char)>($c99);

        if $z3 != 0 goto label043;

        $z34 = 1;

        $z33 = 1;

        goto label044;

     label043:
        $z34 = 0;

        $z33 = 0;

     label044:
        z16 = $z33;

        if $z34 == 0 goto label110;

        $i96 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i97 = $i96 + 1;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i97;

        goto label110;

     label045:
        $i82 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i157);

        i159 = i157 + 2;

        $i83 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i159);

        i157 = i159 + 2;

        z16 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean flatNMatcher(org.mozilla.javascript.regexp.REGlobalData,int,int,char[],int)>(r0, $i82, $i83, r15, i38);

        goto label110;

     label046:
        $i65 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i157);

        i160 = i157 + 2;

        $i66 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i160);

        i157 = i160 + 2;

        z16 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean flatNIMatcher(org.mozilla.javascript.regexp.REGlobalData,int,int,char[],int)>(r0, $i65, $i66, r15, i38);

        goto label110;

     label047:
        $i74 = i157;

        i157 = i157 + 1;

        $b75 = r2[$i74];

        $s201 = (short) $b75;

        $s76 = $s201 & 255;

        c161 = (char) $s76;

        $i77 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i77 == i38 goto label048;

        $i80 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c81 = r15[$i80];

        $i202 = (int) $c81;

        $i203 = (int) c161;

        if $i202 != $i203 goto label048;

        $z36 = 1;

        $z35 = 1;

        goto label049;

     label048:
        $z36 = 0;

        $z35 = 0;

     label049:
        z16 = $z36;

        if $z35 == 0 goto label110;

        $i78 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i79 = $i78 + 1;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i79;

        goto label110;

     label050:
        $i55 = i157;

        i157 = i157 + 1;

        $b56 = r2[$i55];

        $s204 = (short) $b56;

        $s57 = $s204 & 255;

        c162 = (char) $s57;

        $i58 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i58 == i38 goto label051;

        $i61 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c62 = r15[$i61];

        $c63 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char upcase(char)>($c62);

        $c64 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char upcase(char)>(c162);

        $i205 = (int) $c63;

        $i206 = (int) $c64;

        if $i205 != $i206 goto label051;

        $z52 = 1;

        $z51 = 1;

        goto label052;

     label051:
        $z52 = 0;

        $z51 = 0;

     label052:
        z16 = $z51;

        if $z52 == 0 goto label110;

        $i59 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i60 = $i59 + 1;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i60;

        goto label110;

     label053:
        $i67 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i157);

        c163 = (char) $i67;

        i157 = i157 + 2;

        $i68 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i68 == i38 goto label054;

        $i71 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c72 = r15[$i71];

        $i207 = (int) $c72;

        $i208 = (int) c163;

        if $i207 != $i208 goto label054;

        $z42 = 1;

        $z41 = 1;

        goto label055;

     label054:
        $z42 = 0;

        $z41 = 0;

     label055:
        z16 = $z41;

        if $z42 == 0 goto label110;

        $i69 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i70 = $i69 + 1;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i70;

        goto label110;

     label056:
        $i47 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i157);

        c164 = (char) $i47;

        i157 = i157 + 2;

        $i48 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i48 == i38 goto label057;

        $i51 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c52 = r15[$i51];

        $c53 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char upcase(char)>($c52);

        $c54 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char upcase(char)>(c164);

        $i209 = (int) $c53;

        $i210 = (int) $c54;

        if $i209 != $i210 goto label057;

        $z54 = 1;

        $z53 = 1;

        goto label058;

     label057:
        $z54 = 0;

        $z53 = 0;

     label058:
        z16 = $z53;

        if $z54 == 0 goto label110;

        $i49 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i50 = $i49 + 1;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i50;

        goto label110;

     label059:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void pushProgState(org.mozilla.javascript.regexp.REGlobalData,int,int,org.mozilla.javascript.regexp.REBackTrackData,int,int)>(r0, 0, 0, null, i155, i156);

        $i154 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getOffset(byte[],int)>(r2, i157);

        i165 = i157 + $i154;

        i166 = i165 + 1;

        b167 = r2[i165];

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void pushBackTrackState(org.mozilla.javascript.regexp.REGlobalData,byte,int)>(r0, b167, i166);

        i168 = i157 + 2;

        i157 = i168 + 1;

        i158 = r2[i168];

        goto label001;

     label060:
        $r20 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.REProgState popProgState(org.mozilla.javascript.regexp.REGlobalData)>(r0);

        i155 = $r20.<org.mozilla.javascript.regexp.REProgState: int continuation_pc>;

        i156 = $r20.<org.mozilla.javascript.regexp.REProgState: int continuation_op>;

        $i73 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getOffset(byte[],int)>(r2, i157);

        i169 = i157 + $i73;

        i157 = i169 + 1;

        i158 = r2[i169];

        goto label001;

     label061:
        $i125 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i157);

        i170 = i157 + 2;

        $i126 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        virtualinvoke r0.<org.mozilla.javascript.regexp.REGlobalData: void set_parens(int,int,int)>($i125, $i126, 0);

        i157 = i170 + 1;

        i158 = r2[i170];

        goto label001;

     label062:
        $i120 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i157);

        i171 = i157 + 2;

        $i121 = virtualinvoke r0.<org.mozilla.javascript.regexp.REGlobalData: int parens_index(int)>($i120);

        $i122 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i123 = $i122 - $i121;

        virtualinvoke r0.<org.mozilla.javascript.regexp.REGlobalData: void set_parens(int,int,int)>($i120, $i121, $i123);

        $i124 = r0.<org.mozilla.javascript.regexp.REGlobalData: int lastParen>;

        if $i120 <= $i124 goto label063;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int lastParen> = $i120;

     label063:
        i157 = i171 + 1;

        i158 = r2[i171];

        goto label001;

     label064:
        $i84 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i157);

        i157 = i157 + 2;

        z16 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean backrefMatcher(org.mozilla.javascript.regexp.REGlobalData,int,char[],int)>(r0, $i84, r15, i38);

        goto label110;

     label065:
        $i37 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i157);

        i157 = i157 + 2;

        $i39 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        if $i39 == i38 goto label066;

        $r13 = r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $r14 = $r13.<org.mozilla.javascript.regexp.RECompiled: org.mozilla.javascript.regexp.RECharSet[] classList>;

        $r16 = $r14[$i37];

        $i40 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $c41 = r15[$i40];

        $z0 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean classMatcher(org.mozilla.javascript.regexp.REGlobalData,org.mozilla.javascript.regexp.RECharSet,char)>(r0, $r16, $c41);

        if $z0 == 0 goto label066;

        $i42 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i43 = $i42 + 1;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i43;

        z16 = 1;

        goto label110;

     label066:
        z16 = 0;

        goto label110;

     label067:
        $r19 = r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REBackTrackData backTrackStackTop>;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void pushProgState(org.mozilla.javascript.regexp.REGlobalData,int,int,org.mozilla.javascript.regexp.REBackTrackData,int,int)>(r0, 0, 0, $r19, i155, i156);

        if i158 != 41 goto label068;

        b172 = 43;

        goto label069;

     label068:
        b172 = 44;

     label069:
        $i45 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getOffset(byte[],int)>(r2, i157);

        $i46 = i157 + $i45;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void pushBackTrackState(org.mozilla.javascript.regexp.REGlobalData,byte,int)>(r0, b172, $i46);

        i173 = i157 + 2;

        i157 = i173 + 1;

        i158 = r2[i173];

        goto label001;

     label070:
        $r17 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.REProgState popProgState(org.mozilla.javascript.regexp.REGlobalData)>(r0);

        $i44 = $r17.<org.mozilla.javascript.regexp.REProgState: int index>;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i44;

        $r18 = $r17.<org.mozilla.javascript.regexp.REProgState: org.mozilla.javascript.regexp.REBackTrackData backTrack>;

        r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REBackTrackData backTrackStackTop> = $r18;

        i155 = $r17.<org.mozilla.javascript.regexp.REProgState: int continuation_pc>;

        i156 = $r17.<org.mozilla.javascript.regexp.REProgState: int continuation_op>;

        if z16 == 0 goto label072;

        if i158 != 43 goto label071;

        z16 = 1;

        goto label110;

     label071:
        z16 = 0;

        goto label110;

     label072:
        if i158 != 43 goto label073;

        goto label110;

     label073:
        z16 = 1;

        goto label110;

     label074:
        z32 = 0;

        lookupswitch(i158)
        {
            case 6: goto label081;
            case 7: goto label075;
            case 8: goto label077;
            case 9: goto label079;
            case 45: goto label076;
            case 46: goto label078;
            case 47: goto label080;
            case 48: goto label082;
            default: goto label083;
        };

     label075:
        z32 = 1;

     label076:
        i174 = 0;

        $i212 = (int) -1;

        i175 = $i212;

        goto label084;

     label077:
        z32 = 1;

     label078:
        i174 = 1;

        $i214 = (int) -1;

        i175 = $i214;

        goto label084;

     label079:
        z32 = 1;

     label080:
        i174 = 0;

        i175 = 1;

        goto label084;

     label081:
        z32 = 1;

     label082:
        i174 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getOffset(byte[],int)>(r2, i157);

        i176 = i157 + 2;

        $i127 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getOffset(byte[],int)>(r2, i176);

        i175 = $i127 - 1;

        i157 = i176 + 2;

        goto label084;

     label083:
        $r21 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r21;

     label084:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void pushProgState(org.mozilla.javascript.regexp.REGlobalData,int,int,org.mozilla.javascript.regexp.REBackTrackData,int,int)>(r0, i174, i175, null, i155, i156);

        if z32 == 0 goto label085;

        i156 = 51;

        i155 = i157;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void pushBackTrackState(org.mozilla.javascript.regexp.REGlobalData,byte,int)>(r0, 51, i157);

        i177 = i157 + 6;

        i157 = i177 + 1;

        i158 = r2[i177];

        goto label001;

     label085:
        if i174 == 0 goto label086;

        i156 = 52;

        i155 = i157;

        i178 = i157 + 6;

        i157 = i178 + 1;

        i158 = r2[i178];

        goto label001;

     label086:
        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void pushBackTrackState(org.mozilla.javascript.regexp.REGlobalData,byte,int)>(r0, 52, i157);

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.REProgState popProgState(org.mozilla.javascript.regexp.REGlobalData)>(r0);

        i179 = i157 + 4;

        $i128 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getOffset(byte[],int)>(r2, i179);

        i180 = i179 + $i128;

        i157 = i180 + 1;

        i158 = r2[i180];

        goto label001;

     label087:
        i157 = i155;

        i158 = i156;

        goto label001;

     label088:
        $r12 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.REProgState popProgState(org.mozilla.javascript.regexp.REGlobalData)>(r0);

        if z16 != 0 goto label090;

        $i35 = $r12.<org.mozilla.javascript.regexp.REProgState: int min>;

        if $i35 != 0 goto label089;

        z16 = 1;

     label089:
        i155 = $r12.<org.mozilla.javascript.regexp.REProgState: int continuation_pc>;

        i156 = $r12.<org.mozilla.javascript.regexp.REProgState: int continuation_op>;

        i181 = i157 + 4;

        $i36 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getOffset(byte[],int)>(r2, i181);

        i157 = i181 + $i36;

        goto label110;

     label090:
        $i23 = $r12.<org.mozilla.javascript.regexp.REProgState: int min>;

        if $i23 != 0 goto label091;

        $i31 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i30 = $r12.<org.mozilla.javascript.regexp.REProgState: int index>;

        if $i31 != $i30 goto label091;

        z16 = 0;

        i155 = $r12.<org.mozilla.javascript.regexp.REProgState: int continuation_pc>;

        i156 = $r12.<org.mozilla.javascript.regexp.REProgState: int continuation_op>;

        i182 = i157 + 4;

        $i34 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getOffset(byte[],int)>(r2, i182);

        i157 = i182 + $i34;

        goto label110;

     label091:
        $i32 = $r12.<org.mozilla.javascript.regexp.REProgState: int min>;

        i183 = $i32;

        $i33 = $r12.<org.mozilla.javascript.regexp.REProgState: int max>;

        i184 = $i33;

        if $i32 == 0 goto label092;

        $i216 = (int) -1;

        i183 = $i32 + $i216;

     label092:
        $i218 = (int) -1;

        if $i33 == $i218 goto label093;

        $i220 = (int) -1;

        i184 = $i33 + $i220;

     label093:
        if i184 != 0 goto label094;

        z16 = 1;

        i155 = $r12.<org.mozilla.javascript.regexp.REProgState: int continuation_pc>;

        i156 = $r12.<org.mozilla.javascript.regexp.REProgState: int continuation_op>;

        i185 = i157 + 4;

        $i29 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getOffset(byte[],int)>(r2, i185);

        i157 = i185 + $i29;

        goto label110;

     label094:
        $i25 = $r12.<org.mozilla.javascript.regexp.REProgState: int continuation_pc>;

        $i24 = $r12.<org.mozilla.javascript.regexp.REProgState: int continuation_op>;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void pushProgState(org.mozilla.javascript.regexp.REGlobalData,int,int,org.mozilla.javascript.regexp.REBackTrackData,int,int)>(r0, i183, i184, null, $i25, $i24);

        i156 = 51;

        i155 = i157;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void pushBackTrackState(org.mozilla.javascript.regexp.REGlobalData,byte,int)>(r0, 51, i157);

        $i26 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i157);

        i186 = i157 + 2;

        $i27 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i186);

        i187 = i186 + 4;

        i157 = i187 + 1;

        i158 = r2[i187];

        i188 = 0;

     label095:
        if i188 >= $i26 goto label001;

        $i28 = $i27 + i188;

        $i222 = (int) -1;

        virtualinvoke r0.<org.mozilla.javascript.regexp.REGlobalData: void set_parens(int,int,int)>($i28, $i222, 0);

        i188 = i188 + 1;

        goto label095;

     label096:
        $r3 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.REProgState popProgState(org.mozilla.javascript.regexp.REGlobalData)>(r0);

        if z16 != 0 goto label101;

        $i14 = $r3.<org.mozilla.javascript.regexp.REProgState: int max>;

        $i224 = (int) -1;

        if $i14 == $i224 goto label097;

        $i22 = $r3.<org.mozilla.javascript.regexp.REProgState: int max>;

        if $i22 <= 0 goto label100;

     label097:
        $i18 = $r3.<org.mozilla.javascript.regexp.REProgState: int min>;

        $i17 = $r3.<org.mozilla.javascript.regexp.REProgState: int max>;

        $i16 = $r3.<org.mozilla.javascript.regexp.REProgState: int continuation_pc>;

        $i15 = $r3.<org.mozilla.javascript.regexp.REProgState: int continuation_op>;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void pushProgState(org.mozilla.javascript.regexp.REGlobalData,int,int,org.mozilla.javascript.regexp.REBackTrackData,int,int)>(r0, $i18, $i17, null, $i16, $i15);

        i156 = 52;

        i155 = i157;

        $i19 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i157);

        i189 = i157 + 2;

        $i20 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i189);

        i190 = i189 + 4;

        i191 = 0;

     label098:
        if i191 >= $i19 goto label099;

        $i21 = $i20 + i191;

        $i226 = (int) -1;

        virtualinvoke r0.<org.mozilla.javascript.regexp.REGlobalData: void set_parens(int,int,int)>($i21, $i226, 0);

        i191 = i191 + 1;

        goto label098;

     label099:
        i157 = i190 + 1;

        i158 = r2[i190];

        goto label001;

     label100:
        i155 = $r3.<org.mozilla.javascript.regexp.REProgState: int continuation_pc>;

        i156 = $r3.<org.mozilla.javascript.regexp.REProgState: int continuation_op>;

        goto label110;

     label101:
        $i0 = $r3.<org.mozilla.javascript.regexp.REProgState: int min>;

        if $i0 != 0 goto label102;

        $i8 = r0.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        $i7 = $r3.<org.mozilla.javascript.regexp.REProgState: int index>;

        if $i8 != $i7 goto label102;

        z16 = 0;

        i155 = $r3.<org.mozilla.javascript.regexp.REProgState: int continuation_pc>;

        i156 = $r3.<org.mozilla.javascript.regexp.REProgState: int continuation_op>;

        goto label110;

     label102:
        $i9 = $r3.<org.mozilla.javascript.regexp.REProgState: int min>;

        i192 = $i9;

        $i10 = $r3.<org.mozilla.javascript.regexp.REProgState: int max>;

        i193 = $i10;

        if $i9 == 0 goto label103;

        $i228 = (int) -1;

        i192 = $i9 + $i228;

     label103:
        $i230 = (int) -1;

        if $i10 == $i230 goto label104;

        $i232 = (int) -1;

        i193 = $i10 + $i232;

     label104:
        $i2 = $r3.<org.mozilla.javascript.regexp.REProgState: int continuation_pc>;

        $i1 = $r3.<org.mozilla.javascript.regexp.REProgState: int continuation_op>;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void pushProgState(org.mozilla.javascript.regexp.REGlobalData,int,int,org.mozilla.javascript.regexp.REBackTrackData,int,int)>(r0, i192, i193, null, $i2, $i1);

        if i192 == 0 goto label107;

        i156 = 52;

        i155 = i157;

        $i4 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i157);

        i194 = i157 + 2;

        $i5 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getIndex(byte[],int)>(r2, i194);

        i195 = i194 + 4;

        i196 = 0;

     label105:
        if i196 >= $i4 goto label106;

        $i6 = $i5 + i196;

        $i234 = (int) -1;

        virtualinvoke r0.<org.mozilla.javascript.regexp.REGlobalData: void set_parens(int,int,int)>($i6, $i234, 0);

        i196 = i196 + 1;

        goto label105;

     label106:
        i157 = i195 + 1;

        i158 = r2[i195];

        goto label001;

     label107:
        i155 = $r3.<org.mozilla.javascript.regexp.REProgState: int continuation_pc>;

        i156 = $r3.<org.mozilla.javascript.regexp.REProgState: int continuation_op>;

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: void pushBackTrackState(org.mozilla.javascript.regexp.REGlobalData,byte,int)>(r0, 52, i157);

        staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.REProgState popProgState(org.mozilla.javascript.regexp.REGlobalData)>(r0);

        i197 = i157 + 4;

        $i3 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int getOffset(byte[],int)>(r2, i197);

        i198 = i197 + $i3;

        i157 = i198 + 1;

        i158 = r2[i198];

        goto label001;

     label108:
        return 1;

     label109:
        $r24 = staticinvoke <org.mozilla.javascript.Kit: java.lang.RuntimeException codeBug()>();

        throw $r24;

     label110:
        if z16 != 0 goto label113;

        r25 = r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REBackTrackData backTrackStackTop>;

        if r25 == null goto label112;

        $r4 = r25.<org.mozilla.javascript.regexp.REBackTrackData: org.mozilla.javascript.regexp.REBackTrackData previous>;

        r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REBackTrackData backTrackStackTop> = $r4;

        $i12 = r25.<org.mozilla.javascript.regexp.REBackTrackData: int lastParen>;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int lastParen> = $i12;

        $r5 = r25.<org.mozilla.javascript.regexp.REBackTrackData: long[] parens>;

        if $r5 == null goto label111;

        $r9 = r25.<org.mozilla.javascript.regexp.REBackTrackData: long[] parens>;

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.Object clone()>();

        $r11 = (long[]) $r10;

        r0.<org.mozilla.javascript.regexp.REGlobalData: long[] parens> = $r11;

     label111:
        $i13 = r25.<org.mozilla.javascript.regexp.REBackTrackData: int cp>;

        r0.<org.mozilla.javascript.regexp.REGlobalData: int cp> = $i13;

        $r6 = r25.<org.mozilla.javascript.regexp.REBackTrackData: org.mozilla.javascript.regexp.REProgState stateStackTop>;

        r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REProgState stateStackTop> = $r6;

        $r7 = r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REProgState stateStackTop>;

        i156 = $r7.<org.mozilla.javascript.regexp.REProgState: int continuation_op>;

        $r8 = r0.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REProgState stateStackTop>;

        i155 = $r8.<org.mozilla.javascript.regexp.REProgState: int continuation_pc>;

        i157 = r25.<org.mozilla.javascript.regexp.REBackTrackData: int continuation_pc>;

        i158 = r25.<org.mozilla.javascript.regexp.REBackTrackData: int continuation_op>;

        goto label001;

     label112:
        return 0;

     label113:
        $i11 = i157;

        i157 = i157 + 1;

        i158 = r2[$i11];

        goto label001;
    }

    private static boolean matchRegExp(org.mozilla.javascript.regexp.REGlobalData, org.mozilla.javascript.regexp.RECompiled, char[], int, int, boolean)
    {
        long[] $r5;
        int $i0, i1, i2, $i3, $i4, $i5, $i9, $i10, i11, i13, $i14, $i15, $i16, $i17, $i19;
        boolean z0, $z1;
        org.mozilla.javascript.regexp.REGlobalData r1;
        org.mozilla.javascript.regexp.RECompiled r0, $r2, $r4;
        char $c6, $c7, $c8, c12;
        char[] r3;

        r1 := @parameter0: org.mozilla.javascript.regexp.REGlobalData;

        r0 := @parameter1: org.mozilla.javascript.regexp.RECompiled;

        r3 := @parameter2: char[];

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        z0 := @parameter5: boolean;

        $i0 = r0.<org.mozilla.javascript.regexp.RECompiled: int parenCount>;

        if $i0 == 0 goto label01;

        $i9 = r0.<org.mozilla.javascript.regexp.RECompiled: int parenCount>;

        $r5 = newarray (long)[$i9];

        r1.<org.mozilla.javascript.regexp.REGlobalData: long[] parens> = $r5;

        goto label02;

     label01:
        r1.<org.mozilla.javascript.regexp.REGlobalData: long[] parens> = null;

     label02:
        r1.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REBackTrackData backTrackStackTop> = null;

        r1.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REProgState stateStackTop> = null;

        r1.<org.mozilla.javascript.regexp.REGlobalData: boolean multiline> = z0;

        r1.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp> = r0;

        r1.<org.mozilla.javascript.regexp.REGlobalData: int lastParen> = 0;

        $r2 = r1.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $i10 = $r2.<org.mozilla.javascript.regexp.RECompiled: int anchorCh>;

        i11 = i1;

     label03:
        if i11 > i2 goto label11;

        if $i10 < 0 goto label07;

     label04:
        if i11 != i2 goto label05;

        return 0;

     label05:
        c12 = r3[i11];

        $i15 = (int) c12;

        if $i15 == $i10 goto label07;

        $r4 = r1.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.RECompiled regexp>;

        $i4 = $r4.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label06;

        $c6 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char upcase(char)>(c12);

        $c7 = (char) $i10;

        $c8 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: char upcase(char)>($c7);

        $i16 = (int) $c6;

        $i17 = (int) $c8;

        if $i16 != $i17 goto label06;

        goto label07;

     label06:
        i11 = i11 + 1;

        goto label04;

     label07:
        r1.<org.mozilla.javascript.regexp.REGlobalData: int cp> = i11;

        i13 = 0;

     label08:
        $i14 = r0.<org.mozilla.javascript.regexp.RECompiled: int parenCount>;

        if i13 >= $i14 goto label09;

        $i19 = (int) -1;

        virtualinvoke r1.<org.mozilla.javascript.regexp.REGlobalData: void set_parens(int,int,int)>(i13, $i19, 0);

        i13 = i13 + 1;

        goto label08;

     label09:
        $z1 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean executeREBytecode(org.mozilla.javascript.regexp.REGlobalData,char[],int)>(r1, r3, i2);

        r1.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REBackTrackData backTrackStackTop> = null;

        r1.<org.mozilla.javascript.regexp.REGlobalData: org.mozilla.javascript.regexp.REProgState stateStackTop> = null;

        if $z1 == 0 goto label10;

        $i3 = i11 - i1;

        r1.<org.mozilla.javascript.regexp.REGlobalData: int skipped> = $i3;

        return 1;

     label10:
        i11 = i11 + 1;

        goto label03;

     label11:
        return 0;
    }

    java.lang.Object executeRegExp(org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.regexp.RegExpImpl, java.lang.String, int[], int)
    {
        java.lang.Integer $r44;
        java.lang.String r2, $r35, $r42;
        org.mozilla.javascript.Context r9;
        char[] $r3;
        org.mozilla.javascript.regexp.SubString $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r36, r40, $r43, $r45, $r46, $r47;
        int[] r1;
        boolean $z0, $z1;
        org.mozilla.javascript.regexp.REGlobalData $r41;
        org.mozilla.javascript.regexp.RECompiled $r6, $r12, $r13, $r15;
        org.mozilla.javascript.Scriptable r7, $r8, $r10, r39;
        org.mozilla.javascript.regexp.RegExpImpl r5;
        int i0, $i1, $i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, i22, $i24;
        org.mozilla.javascript.regexp.NativeRegExp r4;
        org.mozilla.javascript.regexp.SubString[] $r14, $r34;
        java.lang.Object $r32, $r37, r38;

        r4 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        r9 := @parameter0: org.mozilla.javascript.Context;

        r7 := @parameter1: org.mozilla.javascript.Scriptable;

        r5 := @parameter2: org.mozilla.javascript.regexp.RegExpImpl;

        r2 := @parameter3: java.lang.String;

        r1 := @parameter4: int[];

        i4 := @parameter5: int;

        $r41 = new org.mozilla.javascript.regexp.REGlobalData;

        specialinvoke $r41.<org.mozilla.javascript.regexp.REGlobalData: void <init>()>();

        i19 = r1[0];

        $r3 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        i0 = lengthof $r3;

        if i19 <= i0 goto label01;

        i19 = i0;

     label01:
        $r6 = r4.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $z0 = r5.<org.mozilla.javascript.regexp.RegExpImpl: boolean multiline>;

        $z1 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: boolean matchRegExp(org.mozilla.javascript.regexp.REGlobalData,org.mozilla.javascript.regexp.RECompiled,char[],int,int,boolean)>($r41, $r6, $r3, i19, i0, $z0);

        if $z1 != 0 goto label03;

        if i4 == 2 goto label02;

        return null;

     label02:
        $r37 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        return $r37;

     label03:
        i20 = $r41.<org.mozilla.javascript.regexp.REGlobalData: int cp>;

        r1[0] = i20;

        $i1 = $r41.<org.mozilla.javascript.regexp.REGlobalData: int skipped>;

        $i2 = i19 + $i1;

        i3 = i20 - $i2;

        i21 = i20 - i3;

        if i4 != 0 goto label04;

        r38 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        r39 = null;

        goto label05;

     label04:
        $r8 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.Scriptable getTopLevelScope(org.mozilla.javascript.Scriptable)>(r7);

        $r10 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.Scriptable newObject(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String,java.lang.Object[])>(r9, $r8, "Array", null);

        r38 = $r10;

        r39 = (org.mozilla.javascript.Scriptable) $r10;

        $r42 = new java.lang.String;

        specialinvoke $r42.<java.lang.String: void <init>(char[],int,int)>($r3, i21, i3);

        interfaceinvoke r39.<org.mozilla.javascript.Scriptable: void put(int,org.mozilla.javascript.Scriptable,java.lang.Object)>(0, r39, $r42);

     label05:
        $r12 = r4.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $i5 = $r12.<org.mozilla.javascript.regexp.RECompiled: int parenCount>;

        if $i5 != 0 goto label06;

        r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString[] parens> = null;

        $r36 = <org.mozilla.javascript.regexp.SubString: org.mozilla.javascript.regexp.SubString emptySubString>;

        r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastParen> = $r36;

        goto label12;

     label06:
        r40 = null;

        $r13 = r4.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $i6 = $r13.<org.mozilla.javascript.regexp.RECompiled: int parenCount>;

        $r14 = newarray (org.mozilla.javascript.regexp.SubString)[$i6];

        r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString[] parens> = $r14;

        i22 = 0;

     label07:
        $r15 = r4.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $i7 = $r15.<org.mozilla.javascript.regexp.RECompiled: int parenCount>;

        if i22 >= $i7 goto label11;

        $i15 = virtualinvoke $r41.<org.mozilla.javascript.regexp.REGlobalData: int parens_index(int)>(i22);

        $i24 = (int) -1;

        if $i15 == $i24 goto label09;

        $i17 = virtualinvoke $r41.<org.mozilla.javascript.regexp.REGlobalData: int parens_length(int)>(i22);

        $r43 = new org.mozilla.javascript.regexp.SubString;

        specialinvoke $r43.<org.mozilla.javascript.regexp.SubString: void <init>(char[],int,int)>($r3, $i15, $i17);

        r40 = $r43;

        $r34 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString[] parens>;

        $r34[i22] = $r43;

        if i4 != 0 goto label08;

        goto label10;

     label08:
        $r35 = virtualinvoke $r43.<org.mozilla.javascript.regexp.SubString: java.lang.String toString()>();

        $i18 = i22 + 1;

        interfaceinvoke r39.<org.mozilla.javascript.Scriptable: void put(int,org.mozilla.javascript.Scriptable,java.lang.Object)>($i18, r39, $r35);

        goto label10;

     label09:
        if i4 == 0 goto label10;

        $i16 = i22 + 1;

        $r32 = <org.mozilla.javascript.Undefined: java.lang.Object instance>;

        interfaceinvoke r39.<org.mozilla.javascript.Scriptable: void put(int,org.mozilla.javascript.Scriptable,java.lang.Object)>($i16, r39, $r32);

     label10:
        i22 = i22 + 1;

        goto label07;

     label11:
        r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastParen> = r40;

     label12:
        if i4 == 0 goto label13;

        $r44 = new java.lang.Integer;

        $i13 = $r41.<org.mozilla.javascript.regexp.REGlobalData: int skipped>;

        $i14 = i19 + $i13;

        specialinvoke $r44.<java.lang.Integer: void <init>(int)>($i14);

        interfaceinvoke r39.<org.mozilla.javascript.Scriptable: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>("index", r39, $r44);

        interfaceinvoke r39.<org.mozilla.javascript.Scriptable: void put(java.lang.String,org.mozilla.javascript.Scriptable,java.lang.Object)>("input", r39, r2);

     label13:
        $r16 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastMatch>;

        if $r16 != null goto label14;

        $r45 = new org.mozilla.javascript.regexp.SubString;

        specialinvoke $r45.<org.mozilla.javascript.regexp.SubString: void <init>()>();

        r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastMatch> = $r45;

        $r46 = new org.mozilla.javascript.regexp.SubString;

        specialinvoke $r46.<org.mozilla.javascript.regexp.SubString: void <init>()>();

        r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString leftContext> = $r46;

        $r47 = new org.mozilla.javascript.regexp.SubString;

        specialinvoke $r47.<org.mozilla.javascript.regexp.SubString: void <init>()>();

        r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString rightContext> = $r47;

     label14:
        $r17 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastMatch>;

        $r17.<org.mozilla.javascript.regexp.SubString: char[] charArray> = $r3;

        $r18 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastMatch>;

        $r18.<org.mozilla.javascript.regexp.SubString: int index> = i21;

        $r19 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString lastMatch>;

        $r19.<org.mozilla.javascript.regexp.SubString: int length> = i3;

        $r20 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString leftContext>;

        $r20.<org.mozilla.javascript.regexp.SubString: char[] charArray> = $r3;

        $i8 = virtualinvoke r9.<org.mozilla.javascript.Context: int getLanguageVersion()>();

        if $i8 != 120 goto label15;

        $r26 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString leftContext>;

        $r26.<org.mozilla.javascript.regexp.SubString: int index> = i19;

        $r27 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString leftContext>;

        $i12 = $r41.<org.mozilla.javascript.regexp.REGlobalData: int skipped>;

        $r27.<org.mozilla.javascript.regexp.SubString: int length> = $i12;

        goto label16;

     label15:
        $r21 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString leftContext>;

        $r21.<org.mozilla.javascript.regexp.SubString: int index> = 0;

        $r22 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString leftContext>;

        $i9 = $r41.<org.mozilla.javascript.regexp.REGlobalData: int skipped>;

        $i10 = i19 + $i9;

        $r22.<org.mozilla.javascript.regexp.SubString: int length> = $i10;

     label16:
        $r23 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString rightContext>;

        $r23.<org.mozilla.javascript.regexp.SubString: char[] charArray> = $r3;

        $r24 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString rightContext>;

        $r24.<org.mozilla.javascript.regexp.SubString: int index> = i20;

        $r25 = r5.<org.mozilla.javascript.regexp.RegExpImpl: org.mozilla.javascript.regexp.SubString rightContext>;

        $i11 = i0 - i20;

        $r25.<org.mozilla.javascript.regexp.SubString: int length> = $i11;

        return r38;
    }

    int getFlags()
    {
        org.mozilla.javascript.regexp.NativeRegExp r0;
        int $i0;
        org.mozilla.javascript.regexp.RECompiled $r1;

        r0 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        $r1 = r0.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $i0 = $r1.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        return $i0;
    }

    private static void reportError(java.lang.String, java.lang.String)
    {
        org.mozilla.javascript.EcmaError $r3;
        java.lang.String r0, r1, $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.String getMessage1(java.lang.String,java.lang.Object)>(r0, r1);

        $r3 = staticinvoke <org.mozilla.javascript.ScriptRuntime: org.mozilla.javascript.EcmaError constructError(java.lang.String,java.lang.String)>("SyntaxError", $r2);

        throw $r3;
    }

    protected int getMaxInstanceId()
    {
        org.mozilla.javascript.regexp.NativeRegExp r0;

        r0 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        return 5;
    }

    protected int findInstanceIdInfo(java.lang.String)
    {
        java.lang.IllegalStateException $r7;
        byte b5, b6, b7, b8, b9;
        int $i0, $i1, $i2, $i10, $i11, $i12, $i13;
        java.lang.String r0, r3, r4, r5, r6;
        boolean $z0;
        org.mozilla.javascript.regexp.NativeRegExp r2;
        char $c3, $c4;

        r2 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        r0 := @parameter0: java.lang.String;

        b5 = 0;

        b9 = 0;

        b8 = 0;

        b7 = 0;

        r3 = null;

        r6 = null;

        r5 = null;

        r4 = null;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 != 6 goto label02;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i10 = (int) $c4;

        if $i10 != 103 goto label01;

        r3 = "global";

        r6 = "global";

        r5 = "global";

        r4 = "global";

        b5 = 3;

        b9 = 3;

        b8 = 3;

        b7 = 3;

        goto label05;

     label01:
        $i11 = (int) $c4;

        if $i11 != 115 goto label05;

        r3 = "source";

        r6 = "source";

        r5 = "source";

        r4 = "source";

        b5 = 2;

        b9 = 2;

        b8 = 2;

        b7 = 2;

        goto label05;

     label02:
        if $i0 != 9 goto label04;

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i12 = (int) $c3;

        if $i12 != 108 goto label03;

        r3 = "lastIndex";

        r6 = "lastIndex";

        r5 = "lastIndex";

        r4 = "lastIndex";

        b5 = 1;

        b9 = 1;

        b8 = 1;

        b7 = 1;

        goto label05;

     label03:
        $i13 = (int) $c3;

        if $i13 != 109 goto label05;

        r3 = "multiline";

        r6 = "multiline";

        r5 = "multiline";

        r4 = "multiline";

        b5 = 5;

        b9 = 5;

        b8 = 5;

        b7 = 5;

        goto label05;

     label04:
        if $i0 != 10 goto label05;

        r3 = "ignoreCase";

        r6 = "ignoreCase";

        r5 = "ignoreCase";

        r4 = "ignoreCase";

        b5 = 4;

        b9 = 4;

        b8 = 4;

        b7 = 4;

     label05:
        if r4 == null goto label06;

        if r6 == r0 goto label06;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label06;

        b5 = 0;

        b9 = 0;

        b8 = 0;

        b7 = 0;

     label06:
        if b8 != 0 goto label07;

        $i2 = specialinvoke r2.<org.mozilla.javascript.IdScriptableObject: int findInstanceIdInfo(java.lang.String)>(r0);

        return $i2;

     label07:
        tableswitch(b7)
        {
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label09;
            case 4: goto label09;
            case 5: goto label09;
            default: goto label10;
        };

     label08:
        b6 = 6;

        goto label11;

     label09:
        b6 = 7;

        goto label11;

     label10:
        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>()>();

        throw $r7;

     label11:
        $i1 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: int instanceIdInfo(int,int)>(b6, b9);

        return $i1;
    }

    protected java.lang.String getInstanceIdName(int)
    {
        int i0;
        org.mozilla.javascript.regexp.NativeRegExp r0;
        java.lang.String $r1;

        r0 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            default: goto label6;
        };

     label1:
        return "lastIndex";

     label2:
        return "source";

     label3:
        return "global";

     label4:
        return "ignoreCase";

     label5:
        return "multiline";

     label6:
        $r1 = specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: java.lang.String getInstanceIdName(int)>(i0);

        return $r1;
    }

    protected java.lang.Object getInstanceIdValue(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Boolean $r2, $r4, $r6;
        java.lang.String $r7;
        java.lang.Number $r10;
        double $d0;
        boolean $z0, $z1, $z2;
        org.mozilla.javascript.regexp.NativeRegExp r0;
        org.mozilla.javascript.regexp.RECompiled $r1, $r3, $r5, $r8;
        char[] $r9;
        java.lang.Object $r11;

        r0 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label01;
            case 2: goto label02;
            case 3: goto label03;
            case 4: goto label06;
            case 5: goto label09;
            default: goto label12;
        };

     label01:
        $d0 = r0.<org.mozilla.javascript.regexp.NativeRegExp: double lastIndex>;

        $r10 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Number wrapNumber(double)>($d0);

        return $r10;

     label02:
        $r7 = new java.lang.String;

        $r8 = r0.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $r9 = $r8.<org.mozilla.javascript.regexp.RECompiled: char[] source>;

        specialinvoke $r7.<java.lang.String: void <init>(char[])>($r9);

        return $r7;

     label03:
        $r5 = r0.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $i5 = $r5.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        $i6 = $i5 & 1;

        if $i6 == 0 goto label04;

        $z0 = 1;

        goto label05;

     label04:
        $z0 = 0;

     label05:
        $r6 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Boolean wrapBoolean(boolean)>($z0);

        return $r6;

     label06:
        $r3 = r0.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $i3 = $r3.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        $i4 = $i3 & 2;

        if $i4 == 0 goto label07;

        $z1 = 1;

        goto label08;

     label07:
        $z1 = 0;

     label08:
        $r4 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Boolean wrapBoolean(boolean)>($z1);

        return $r4;

     label09:
        $r1 = r0.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.RECompiled re>;

        $i1 = $r1.<org.mozilla.javascript.regexp.RECompiled: int flags>;

        $i2 = $i1 & 4;

        if $i2 == 0 goto label10;

        $z2 = 1;

        goto label11;

     label10:
        $z2 = 0;

     label11:
        $r2 = staticinvoke <org.mozilla.javascript.ScriptRuntime: java.lang.Boolean wrapBoolean(boolean)>($z2);

        return $r2;

     label12:
        $r11 = specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: java.lang.Object getInstanceIdValue(int)>(i0);

        return $r11;
    }

    protected void setInstanceIdValue(int, java.lang.Object)
    {
        org.mozilla.javascript.regexp.NativeRegExp r0;
        int i0;
        java.lang.Object r1;
        double $d0;

        r0 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        if i0 != 1 goto label1;

        $d0 = staticinvoke <org.mozilla.javascript.ScriptRuntime: double toNumber(java.lang.Object)>(r1);

        r0.<org.mozilla.javascript.regexp.NativeRegExp: double lastIndex> = $d0;

        return;

     label1:
        specialinvoke r0.<org.mozilla.javascript.IdScriptableObject: void setInstanceIdValue(int,java.lang.Object)>(i0, r1);

        return;
    }

    protected void initPrototypeId(int)
    {
        org.mozilla.javascript.regexp.NativeRegExp r0;
        byte b1;
        int i0;
        java.lang.Object $r4;
        java.lang.String $r2, r3;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label1;
            case 2: goto label2;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label6;
            default: goto label7;
        };

     label1:
        b1 = 1;

        r3 = "compile";

        goto label8;

     label2:
        b1 = 0;

        r3 = "toString";

        goto label8;

     label3:
        b1 = 0;

        r3 = "toSource";

        goto label8;

     label4:
        b1 = 1;

        r3 = "exec";

        goto label8;

     label5:
        b1 = 1;

        r3 = "test";

        goto label8;

     label6:
        b1 = 1;

        r3 = "prefix";

        goto label8;

     label7:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label8:
        $r4 = <org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object REGEXP_TAG>;

        virtualinvoke r0.<org.mozilla.javascript.regexp.NativeRegExp: void initPrototypeMethod(java.lang.Object,int,java.lang.String,int)>($r4, i0, r3, b1);

        return;
    }

    public java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject, org.mozilla.javascript.Context, org.mozilla.javascript.Scriptable, org.mozilla.javascript.Scriptable, java.lang.Object[])
    {
        java.lang.Object[] r6;
        org.mozilla.javascript.IdFunctionObject r0;
        int $i0;
        java.lang.Boolean $r10, $r21;
        java.lang.String $r14, $r18;
        boolean $z0, $z1;
        org.mozilla.javascript.regexp.NativeRegExp $r3, $r8, $r11, $r13, $r15, r19;
        org.mozilla.javascript.Context r4;
        java.lang.IllegalArgumentException $r17;
        org.mozilla.javascript.Scriptable r2, r5, $r16;
        java.lang.Object $r1, $r7, $r9, $r12, $r20;

        r19 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        r0 := @parameter0: org.mozilla.javascript.IdFunctionObject;

        r4 := @parameter1: org.mozilla.javascript.Context;

        r5 := @parameter2: org.mozilla.javascript.Scriptable;

        r2 := @parameter3: org.mozilla.javascript.Scriptable;

        r6 := @parameter4: java.lang.Object[];

        $r1 = <org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object REGEXP_TAG>;

        $z0 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: boolean hasTag(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        $r20 = specialinvoke r19.<org.mozilla.javascript.IdScriptableObject: java.lang.Object execIdCall(org.mozilla.javascript.IdFunctionObject,org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r0, r4, r5, r2, r6);

        return $r20;

     label1:
        $i0 = virtualinvoke r0.<org.mozilla.javascript.IdFunctionObject: int methodId()>();

        tableswitch($i0)
        {
            case 1: goto label2;
            case 2: goto label3;
            case 3: goto label3;
            case 4: goto label4;
            case 5: goto label5;
            case 6: goto label8;
            default: goto label9;
        };

     label2:
        $r15 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.NativeRegExp realThis(org.mozilla.javascript.Scriptable,org.mozilla.javascript.IdFunctionObject)>(r2, r0);

        $r16 = virtualinvoke $r15.<org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.Scriptable compile(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[])>(r4, r5, r6);

        return $r16;

     label3:
        $r13 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.NativeRegExp realThis(org.mozilla.javascript.Scriptable,org.mozilla.javascript.IdFunctionObject)>(r2, r0);

        $r14 = virtualinvoke $r13.<org.mozilla.javascript.regexp.NativeRegExp: java.lang.String toString()>();

        return $r14;

     label4:
        $r11 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.NativeRegExp realThis(org.mozilla.javascript.Scriptable,org.mozilla.javascript.IdFunctionObject)>(r2, r0);

        $r12 = specialinvoke $r11.<org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object execSub(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[],int)>(r4, r5, r6, 1);

        return $r12;

     label5:
        $r8 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.NativeRegExp realThis(org.mozilla.javascript.Scriptable,org.mozilla.javascript.IdFunctionObject)>(r2, r0);

        $r9 = specialinvoke $r8.<org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object execSub(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[],int)>(r4, r5, r6, 0);

        $r10 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $z1 = virtualinvoke $r10.<java.lang.Boolean: boolean equals(java.lang.Object)>($r9);

        if $z1 == 0 goto label6;

        $r21 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        goto label7;

     label6:
        $r21 = <java.lang.Boolean: java.lang.Boolean FALSE>;

     label7:
        return $r21;

     label8:
        $r3 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.regexp.NativeRegExp realThis(org.mozilla.javascript.Scriptable,org.mozilla.javascript.IdFunctionObject)>(r2, r0);

        $r7 = specialinvoke $r3.<org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object execSub(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[],int)>(r4, r5, r6, 2);

        return $r7;

     label9:
        $r17 = new java.lang.IllegalArgumentException;

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r17;
    }

    private static org.mozilla.javascript.regexp.NativeRegExp realThis(org.mozilla.javascript.Scriptable, org.mozilla.javascript.IdFunctionObject)
    {
        org.mozilla.javascript.regexp.NativeRegExp $r1;
        org.mozilla.javascript.EcmaError $r3;
        org.mozilla.javascript.Scriptable r0;
        org.mozilla.javascript.IdFunctionObject r2;
        boolean $z0;

        r0 := @parameter0: org.mozilla.javascript.Scriptable;

        r2 := @parameter1: org.mozilla.javascript.IdFunctionObject;

        $z0 = r0 instanceof org.mozilla.javascript.regexp.NativeRegExp;

        if $z0 != 0 goto label1;

        $r3 = staticinvoke <org.mozilla.javascript.regexp.NativeRegExp: org.mozilla.javascript.EcmaError incompatibleCallError(org.mozilla.javascript.IdFunctionObject)>(r2);

        throw $r3;

     label1:
        $r1 = (org.mozilla.javascript.regexp.NativeRegExp) r0;

        return $r1;
    }

    protected int findPrototypeId(java.lang.String)
    {
        org.mozilla.javascript.regexp.NativeRegExp r1;
        char $c1, $c2;
        byte b3;
        int $i0, $i4, $i5, $i6, $i7;
        java.lang.String r0, r2, r3, r4, r5;
        boolean $z0;

        r1 := @this: org.mozilla.javascript.regexp.NativeRegExp;

        r0 := @parameter0: java.lang.String;

        b3 = 0;

        r2 = null;

        r5 = null;

        r4 = null;

        r3 = null;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        tableswitch($i0)
        {
            case 4: goto label1;
            case 5: goto label7;
            case 6: goto label3;
            case 7: goto label4;
            case 8: goto label5;
            default: goto label7;
        };

     label1:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        $i4 = (int) $c2;

        if $i4 != 101 goto label2;

        r2 = "exec";

        r5 = "exec";

        r4 = "exec";

        r3 = "exec";

        b3 = 4;

        goto label7;

     label2:
        $i5 = (int) $c2;

        if $i5 != 116 goto label7;

        r2 = "test";

        r5 = "test";

        r4 = "test";

        r3 = "test";

        b3 = 5;

        goto label7;

     label3:
        r2 = "prefix";

        r5 = "prefix";

        r4 = "prefix";

        r3 = "prefix";

        b3 = 6;

        goto label7;

     label4:
        r2 = "compile";

        r5 = "compile";

        r4 = "compile";

        r3 = "compile";

        b3 = 1;

        goto label7;

     label5:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(3);

        $i6 = (int) $c1;

        if $i6 != 111 goto label6;

        r2 = "toSource";

        r5 = "toSource";

        r4 = "toSource";

        r3 = "toSource";

        b3 = 3;

        goto label7;

     label6:
        $i7 = (int) $c1;

        if $i7 != 116 goto label7;

        r2 = "toString";

        r5 = "toString";

        r4 = "toString";

        r3 = "toString";

        b3 = 2;

        goto label7;

     label7:
        if r4 == null goto label8;

        if r3 == r0 goto label8;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 != 0 goto label8;

        b3 = 0;

     label8:
        return b3;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;

        <org.mozilla.javascript.regexp.NativeRegExp: int MAX_PROTOTYPE_ID> = 6;

        <org.mozilla.javascript.regexp.NativeRegExp: int Id_prefix> = 6;

        <org.mozilla.javascript.regexp.NativeRegExp: int Id_test> = 5;

        <org.mozilla.javascript.regexp.NativeRegExp: int Id_exec> = 4;

        <org.mozilla.javascript.regexp.NativeRegExp: int Id_toSource> = 3;

        <org.mozilla.javascript.regexp.NativeRegExp: int Id_toString> = 2;

        <org.mozilla.javascript.regexp.NativeRegExp: int Id_compile> = 1;

        <org.mozilla.javascript.regexp.NativeRegExp: int MAX_INSTANCE_ID> = 5;

        <org.mozilla.javascript.regexp.NativeRegExp: int Id_multiline> = 5;

        <org.mozilla.javascript.regexp.NativeRegExp: int Id_ignoreCase> = 4;

        <org.mozilla.javascript.regexp.NativeRegExp: int Id_global> = 3;

        <org.mozilla.javascript.regexp.NativeRegExp: int Id_source> = 2;

        <org.mozilla.javascript.regexp.NativeRegExp: int Id_lastIndex> = 1;

        <org.mozilla.javascript.regexp.NativeRegExp: int INDEX_LEN> = 2;

        <org.mozilla.javascript.regexp.NativeRegExp: int OFFSET_LEN> = 2;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_END> = 53;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_MINIMALREPEAT> = 52;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_REPEAT> = 51;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_CLASS> = 50;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_ENDCHILD> = 49;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_MINIMALQUANT> = 48;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_MINIMALOPT> = 47;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_MINIMALPLUS> = 46;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_MINIMALSTAR> = 45;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_ASSERTNOTTEST> = 44;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_ASSERTTEST> = 43;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_ASSERT_NOT> = 42;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_ASSERT> = 41;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_RPARENNON> = 40;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_LPARENNON> = 39;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_DOTSTARMIN> = 38;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_NCCLASS> = 37;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_ANCHOR1> = 36;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_UCFLAT1i> = 35;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_UCFLATi> = 34;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_FLAT1i> = 33;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_FLATi> = 32;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_BACKREFi> = 31;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_NUCCLASS> = 30;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_UCCLASS> = 29;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_UCFLAT1> = 28;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_UCFLAT> = 27;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_EOLONLY> = 26;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_ANCHOR> = 25;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_DOTSTAR> = 24;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_JUMP> = 23;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_FLAT1> = 22;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_FLAT> = 21;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_BACKREF> = 20;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_NONSPACE> = 19;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_SPACE> = 18;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_NONALNUM> = 17;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_ALNUM> = 16;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_NONDIGIT> = 15;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_DIGIT> = 14;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_CCLASS> = 13;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_DOT> = 12;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_RPAREN> = 11;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_LPAREN> = 10;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_OPT> = 9;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_PLUS> = 8;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_STAR> = 7;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_QUANT> = 6;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_WNONBDRY> = 5;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_WBDRY> = 4;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_EOL> = 3;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_BOL> = 2;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_ALT> = 1;

        <org.mozilla.javascript.regexp.NativeRegExp: byte REOP_EMPTY> = 0;

        <org.mozilla.javascript.regexp.NativeRegExp: boolean debug> = 0;

        <org.mozilla.javascript.regexp.NativeRegExp: int PREFIX> = 2;

        <org.mozilla.javascript.regexp.NativeRegExp: int MATCH> = 1;

        <org.mozilla.javascript.regexp.NativeRegExp: int TEST> = 0;

        <org.mozilla.javascript.regexp.NativeRegExp: int JSREG_MULTILINE> = 4;

        <org.mozilla.javascript.regexp.NativeRegExp: int JSREG_FOLD> = 2;

        <org.mozilla.javascript.regexp.NativeRegExp: int JSREG_GLOB> = 1;

        <org.mozilla.javascript.regexp.NativeRegExp: long serialVersionUID> = 4965263491464903264L;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <org.mozilla.javascript.regexp.NativeRegExp: java.lang.Object REGEXP_TAG> = $r0;

        return;
    }
}
