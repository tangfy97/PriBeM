public class com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput extends com.sun.xml.bind.v2.runtime.output.XmlOutputAbstractImpl
{
    protected final java.io.OutputStream out;
    private com.sun.xml.bind.v2.runtime.output.Encoded[] prefixes;
    private int prefixCount;
    private final com.sun.xml.bind.v2.runtime.output.Encoded[] localNames;
    private final com.sun.xml.bind.v2.runtime.output.Encoded textBuffer;
    protected final byte[] octetBuffer;
    protected int octetBufferIndex;
    protected boolean closeStartTagPending;
    private java.lang.String header;
    private com.sun.xml.bind.marshaller.CharacterEscapeHandler escapeHandler;
    private final byte[] XMLNS_EQUALS;
    private final byte[] XMLNS_COLON;
    private final byte[] EQUALS;
    private final byte[] CLOSE_TAG;
    private final byte[] EMPTY_TAG;
    private final byte[] XML_DECL;
    private static final byte[] _XMLNS_EQUALS;
    private static final byte[] _XMLNS_COLON;
    private static final byte[] _EQUALS;
    private static final byte[] _CLOSE_TAG;
    private static final byte[] _EMPTY_TAG;
    private static final byte[] _XML_DECL;
    private static final byte[] EMPTY_BYTE_ARRAY;

    public void <init>(java.io.OutputStream, com.sun.xml.bind.v2.runtime.output.Encoded[], com.sun.xml.bind.marshaller.CharacterEscapeHandler)
    {
        byte[] $r3, $r4, $r6, $r7, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r19, $r21;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        int $i0, i1;
        com.sun.xml.bind.v2.runtime.output.Encoded $r2, $r26;
        java.io.OutputStream r22;
        com.sun.xml.bind.marshaller.CharacterEscapeHandler r25;
        com.sun.xml.bind.v2.runtime.output.Encoded[] $r1, r23, $r24, $r27;
        java.lang.Object $r5, $r8, $r11, $r14, $r17, $r20;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        r22 := @parameter0: java.io.OutputStream;

        r23 := @parameter1: com.sun.xml.bind.v2.runtime.output.Encoded[];

        r25 := @parameter2: com.sun.xml.bind.marshaller.CharacterEscapeHandler;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.XmlOutputAbstractImpl: void <init>()>();

        $r1 = newarray (com.sun.xml.bind.v2.runtime.output.Encoded)[8];

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] prefixes> = $r1;

        $r2 = new com.sun.xml.bind.v2.runtime.output.Encoded;

        specialinvoke $r2.<com.sun.xml.bind.v2.runtime.output.Encoded: void <init>()>();

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded textBuffer> = $r2;

        $r3 = newarray (byte)[1024];

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] octetBuffer> = $r3;

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: boolean closeStartTagPending> = 0;

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.marshaller.CharacterEscapeHandler escapeHandler> = null;

        $r4 = <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] _XMLNS_EQUALS>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Object clone()>();

        $r6 = (byte[]) $r5;

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] XMLNS_EQUALS> = $r6;

        $r7 = <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] _XMLNS_COLON>;

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>();

        $r9 = (byte[]) $r8;

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] XMLNS_COLON> = $r9;

        $r10 = <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] _EQUALS>;

        $r11 = virtualinvoke $r10.<java.lang.Object: java.lang.Object clone()>();

        $r12 = (byte[]) $r11;

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] EQUALS> = $r12;

        $r13 = <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] _CLOSE_TAG>;

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.Object clone()>();

        $r15 = (byte[]) $r14;

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] CLOSE_TAG> = $r15;

        $r16 = <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] _EMPTY_TAG>;

        $r17 = virtualinvoke $r16.<java.lang.Object: java.lang.Object clone()>();

        $r18 = (byte[]) $r17;

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] EMPTY_TAG> = $r18;

        $r19 = <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] _XML_DECL>;

        $r20 = virtualinvoke $r19.<java.lang.Object: java.lang.Object clone()>();

        $r21 = (byte[]) $r20;

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] XML_DECL> = $r21;

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: java.io.OutputStream out> = r22;

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] localNames> = r23;

        i1 = 0;

     label1:
        $r24 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] prefixes>;

        $i0 = lengthof $r24;

        if i1 >= $i0 goto label2;

        $r27 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] prefixes>;

        $r26 = new com.sun.xml.bind.v2.runtime.output.Encoded;

        specialinvoke $r26.<com.sun.xml.bind.v2.runtime.output.Encoded: void <init>()>();

        $r27[i1] = $r26;

        i1 = i1 + 1;

        goto label1;

     label2:
        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.marshaller.CharacterEscapeHandler escapeHandler> = r25;

        return;
    }

    public void setHeader(java.lang.String)
    {
        java.lang.String r1;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        r1 := @parameter0: java.lang.String;

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: java.lang.String header> = r1;

        return;
    }

    public void startDocument(com.sun.xml.bind.v2.runtime.XMLSerializer, boolean, int[], com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl) throws java.io.IOException, org.xml.sax.SAXException, javax.xml.stream.XMLStreamException
    {
        byte[] $r8;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        com.sun.xml.bind.v2.runtime.XMLSerializer r1;
        int[] r2;
        com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl r3;
        java.lang.String $r4, $r5;
        com.sun.xml.bind.v2.runtime.output.Encoded $r6, $r7;
        boolean z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.XMLSerializer;

        z0 := @parameter1: boolean;

        r2 := @parameter2: int[];

        r3 := @parameter3: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.XmlOutputAbstractImpl: void startDocument(com.sun.xml.bind.v2.runtime.XMLSerializer,boolean,int[],com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl)>(r1, z0, r2, r3);

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex> = 0;

        if z0 != 0 goto label1;

        $r8 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] XML_DECL>;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(byte[])>($r8);

     label1:
        $r4 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: java.lang.String header>;

        if $r4 == null goto label2;

        $r6 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded textBuffer>;

        $r5 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: java.lang.String header>;

        virtualinvoke $r6.<com.sun.xml.bind.v2.runtime.output.Encoded: void set(java.lang.String)>($r5);

        $r7 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded textBuffer>;

        virtualinvoke $r7.<com.sun.xml.bind.v2.runtime.output.Encoded: void write(com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput)>(r0);

     label2:
        return;
    }

    public void endDocument(boolean) throws java.io.IOException, org.xml.sax.SAXException, javax.xml.stream.XMLStreamException
    {
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        boolean z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void flushBuffer()>();

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.XmlOutputAbstractImpl: void endDocument(boolean)>(z0);

        return;
    }

    protected final void closeStartTag() throws java.io.IOException
    {
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        $z0 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: boolean closeStartTagPending>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(int)>(62);

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: boolean closeStartTagPending> = 0;

     label1:
        return;
    }

    public void beginStartTag(int, java.lang.String) throws java.io.IOException
    {
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        int $i0, i1;
        java.lang.String r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        i1 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void closeStartTag()>();

        $i0 = specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int pushNsDecls()>();

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(int)>(60);

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void writeName(int,java.lang.String)>(i1, r1);

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void writeNsDecls(int)>($i0);

        return;
    }

    public void beginStartTag(com.sun.xml.bind.v2.runtime.Name) throws java.io.IOException
    {
        int $i0;
        com.sun.xml.bind.v2.runtime.Name r1;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.Name;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void closeStartTag()>();

        $i0 = specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int pushNsDecls()>();

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(int)>(60);

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void writeName(com.sun.xml.bind.v2.runtime.Name)>(r1);

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void writeNsDecls(int)>($i0);

        return;
    }

    private int pushNsDecls()
    {
        byte[] $r10;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl $r1, $r2, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        java.lang.String $r7;
        com.sun.xml.bind.v2.runtime.output.Encoded r9, $r15;
        com.sun.xml.bind.v2.runtime.output.Encoded[] $r4, $r8, $r11, $r12, $r13, $r14, r16;
        com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element $r3;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $i0 = virtualinvoke $r1.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: int count()>();

        $r2 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $r3 = virtualinvoke $r2.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element getCurrent()>();

        $r4 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] prefixes>;

        $i1 = lengthof $r4;

        if $i0 <= $i1 goto label3;

        $r11 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] prefixes>;

        $i7 = lengthof $r11;

        $i8 = $i7 * 2;

        $i9 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i8);

        r16 = newarray (com.sun.xml.bind.v2.runtime.output.Encoded)[$i9];

        $r13 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] prefixes>;

        $r12 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] prefixes>;

        $i10 = lengthof $r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r13, 0, r16, 0, $i10);

        $r14 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] prefixes>;

        i12 = lengthof $r14;

     label1:
        $i11 = lengthof r16;

        if i12 >= $i11 goto label2;

        $r15 = new com.sun.xml.bind.v2.runtime.output.Encoded;

        specialinvoke $r15.<com.sun.xml.bind.v2.runtime.output.Encoded: void <init>()>();

        r16[i12] = $r15;

        i12 = i12 + 1;

        goto label1;

     label2:
        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] prefixes> = r16;

     label3:
        $i2 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int prefixCount>;

        $i3 = virtualinvoke $r3.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element: int getBase()>();

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3);

        $r5 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $i5 = virtualinvoke $r5.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: int count()>();

        i13 = $i4;

     label4:
        if i13 >= $i5 goto label7;

        $r6 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $r7 = virtualinvoke $r6.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: java.lang.String getPrefix(int)>(i13);

        $r8 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] prefixes>;

        r9 = $r8[i13];

        $i6 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i6 != 0 goto label5;

        $r10 = <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] EMPTY_BYTE_ARRAY>;

        r9.<com.sun.xml.bind.v2.runtime.output.Encoded: byte[] buf> = $r10;

        r9.<com.sun.xml.bind.v2.runtime.output.Encoded: int len> = 0;

        goto label6;

     label5:
        virtualinvoke r9.<com.sun.xml.bind.v2.runtime.output.Encoded: void set(java.lang.String)>($r7);

        virtualinvoke r9.<com.sun.xml.bind.v2.runtime.output.Encoded: void append(char)>(58);

     label6:
        i13 = i13 + 1;

        goto label4;

     label7:
        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int prefixCount> = $i5;

        return $i4;
    }

    protected void writeNsDecls(int) throws java.io.IOException
    {
        com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element $r2;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl $r1, $r3;
        int $i0, i1, i2;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        i1 := @parameter0: int;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $r2 = virtualinvoke $r1.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element getCurrent()>();

        $r3 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $i0 = virtualinvoke $r3.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: int count()>();

        i2 = virtualinvoke $r2.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element: int getBase()>();

     label1:
        if i2 >= $i0 goto label2;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void writeNsDecl(int)>(i2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    protected final void writeNsDecl(int) throws java.io.IOException
    {
        byte[] $r5, $r6, $r7, $r12;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        int i0, $i1, $i2, $i3, $i4;
        com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl $r1, $r8, $r10, $r13;
        java.lang.String $r2, $r9, $r14;
        com.sun.xml.bind.v2.runtime.output.Encoded r4;
        boolean $z0;
        com.sun.xml.bind.v2.runtime.output.Encoded[] $r3;
        com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element $r11;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        i0 := @parameter0: int;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $r2 = virtualinvoke $r1.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: java.lang.String getPrefix(int)>(i0);

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i1 != 0 goto label2;

        $r10 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $r11 = virtualinvoke $r10.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element getCurrent()>();

        $z0 = virtualinvoke $r11.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl$Element: boolean isRootElement()>();

        if $z0 == 0 goto label1;

        $r13 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $r14 = virtualinvoke $r13.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: java.lang.String getNamespaceURI(int)>(i0);

        $i4 = virtualinvoke $r14.<java.lang.String: int length()>();

        if $i4 != 0 goto label1;

        return;

     label1:
        $r12 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] XMLNS_EQUALS>;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(byte[])>($r12);

        goto label3;

     label2:
        $r3 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] prefixes>;

        r4 = $r3[i0];

        $r5 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] XMLNS_COLON>;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(byte[])>($r5);

        $r6 = r4.<com.sun.xml.bind.v2.runtime.output.Encoded: byte[] buf>;

        $i2 = r4.<com.sun.xml.bind.v2.runtime.output.Encoded: int len>;

        $i3 = $i2 - 1;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(byte[],int,int)>($r6, 0, $i3);

        $r7 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] EQUALS>;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(byte[])>($r7);

     label3:
        $r8 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl nsContext>;

        $r9 = virtualinvoke $r8.<com.sun.xml.bind.v2.runtime.output.NamespaceContextImpl: java.lang.String getNamespaceURI(int)>(i0);

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void doText(java.lang.String,boolean)>($r9, 1);

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(int)>(34);

        return;
    }

    private void writePrefix(int) throws java.io.IOException
    {
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        int i0;
        com.sun.xml.bind.v2.runtime.output.Encoded $r2;
        com.sun.xml.bind.v2.runtime.output.Encoded[] $r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        i0 := @parameter0: int;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] prefixes>;

        $r2 = $r1[i0];

        virtualinvoke $r2.<com.sun.xml.bind.v2.runtime.output.Encoded: void write(com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput)>(r0);

        return;
    }

    private void writeName(com.sun.xml.bind.v2.runtime.Name) throws java.io.IOException
    {
        com.sun.xml.bind.v2.runtime.Name r1;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        com.sun.xml.bind.v2.runtime.output.Encoded[] $r3;
        short $s0, $s2;
        int[] $r2;
        int $i1, $i3, $i4;
        com.sun.xml.bind.v2.runtime.output.Encoded $r4;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.Name;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int[] nsUriIndex2prefixIndex>;

        $s0 = r1.<com.sun.xml.bind.v2.runtime.Name: short nsUriIndex>;

        $i3 = (int) $s0;

        $i1 = $r2[$i3];

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void writePrefix(int)>($i1);

        $r3 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] localNames>;

        $s2 = r1.<com.sun.xml.bind.v2.runtime.Name: short localNameIndex>;

        $i4 = (int) $s2;

        $r4 = $r3[$i4];

        virtualinvoke $r4.<com.sun.xml.bind.v2.runtime.output.Encoded: void write(com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput)>(r0);

        return;
    }

    private void writeName(int, java.lang.String) throws java.io.IOException
    {
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        int i0;
        java.lang.String r1;
        com.sun.xml.bind.v2.runtime.output.Encoded $r2, $r3;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void writePrefix(int)>(i0);

        $r2 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded textBuffer>;

        virtualinvoke $r2.<com.sun.xml.bind.v2.runtime.output.Encoded: void set(java.lang.String)>(r1);

        $r3 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded textBuffer>;

        virtualinvoke $r3.<com.sun.xml.bind.v2.runtime.output.Encoded: void write(com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput)>(r0);

        return;
    }

    public void attribute(com.sun.xml.bind.v2.runtime.Name, java.lang.String) throws java.io.IOException
    {
        byte[] $r2;
        com.sun.xml.bind.v2.runtime.Name r1;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        com.sun.xml.bind.v2.runtime.output.Encoded[] $r4;
        short $s0, $s1;
        int $i2, $i4, $i5;
        java.lang.String r3;
        com.sun.xml.bind.v2.runtime.output.Encoded $r5;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.Name;

        r3 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(int)>(32);

        $s0 = r1.<com.sun.xml.bind.v2.runtime.Name: short nsUriIndex>;

        $i2 = (int) $s0;

        $i4 = (int) -1;

        if $i2 != $i4 goto label1;

        $r4 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded[] localNames>;

        $s1 = r1.<com.sun.xml.bind.v2.runtime.Name: short localNameIndex>;

        $i5 = (int) $s1;

        $r5 = $r4[$i5];

        virtualinvoke $r5.<com.sun.xml.bind.v2.runtime.output.Encoded: void write(com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput)>(r0);

        goto label2;

     label1:
        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void writeName(com.sun.xml.bind.v2.runtime.Name)>(r1);

     label2:
        $r2 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] EQUALS>;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(byte[])>($r2);

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void doText(java.lang.String,boolean)>(r3, 1);

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(int)>(34);

        return;
    }

    public void attribute(int, java.lang.String, java.lang.String) throws java.io.IOException
    {
        byte[] $r2;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        int i0, $i2;
        java.lang.String r1, r3;
        com.sun.xml.bind.v2.runtime.output.Encoded $r4, $r5;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(int)>(32);

        $i2 = (int) -1;

        if i0 != $i2 goto label1;

        $r4 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded textBuffer>;

        virtualinvoke $r4.<com.sun.xml.bind.v2.runtime.output.Encoded: void set(java.lang.String)>(r1);

        $r5 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded textBuffer>;

        virtualinvoke $r5.<com.sun.xml.bind.v2.runtime.output.Encoded: void write(com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput)>(r0);

        goto label2;

     label1:
        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void writeName(int,java.lang.String)>(i0, r1);

     label2:
        $r2 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] EQUALS>;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(byte[])>($r2);

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void doText(java.lang.String,boolean)>(r3, 1);

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(int)>(34);

        return;
    }

    public void endStartTag() throws java.io.IOException
    {
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: boolean closeStartTagPending> = 1;

        return;
    }

    public void endTag(com.sun.xml.bind.v2.runtime.Name) throws java.io.IOException
    {
        byte[] $r1, $r3;
        com.sun.xml.bind.v2.runtime.Name r2;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        r2 := @parameter0: com.sun.xml.bind.v2.runtime.Name;

        $z0 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: boolean closeStartTagPending>;

        if $z0 == 0 goto label1;

        $r3 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] EMPTY_TAG>;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(byte[])>($r3);

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: boolean closeStartTagPending> = 0;

        goto label2;

     label1:
        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] CLOSE_TAG>;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(byte[])>($r1);

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void writeName(com.sun.xml.bind.v2.runtime.Name)>(r2);

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(int)>(62);

     label2:
        return;
    }

    public void endTag(int, java.lang.String) throws java.io.IOException
    {
        byte[] $r1, $r3;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        int i0;
        java.lang.String r2;
        boolean $z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $z0 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: boolean closeStartTagPending>;

        if $z0 == 0 goto label1;

        $r3 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] EMPTY_TAG>;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(byte[])>($r3);

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: boolean closeStartTagPending> = 0;

        goto label2;

     label1:
        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] CLOSE_TAG>;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(byte[])>($r1);

        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void writeName(int,java.lang.String)>(i0, r2);

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(int)>(62);

     label2:
        return;
    }

    public void text(java.lang.String, boolean) throws java.io.IOException
    {
        java.lang.String r1;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        boolean z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void closeStartTag()>();

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(int)>(32);

     label1:
        specialinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void doText(java.lang.String,boolean)>(r1, 0);

        return;
    }

    public void text(com.sun.xml.bind.v2.runtime.output.Pcdata, boolean) throws java.io.IOException
    {
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        boolean z0;
        com.sun.xml.bind.v2.runtime.output.Pcdata r1;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        r1 := @parameter0: com.sun.xml.bind.v2.runtime.output.Pcdata;

        z0 := @parameter1: boolean;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void closeStartTag()>();

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(int)>(32);

     label1:
        virtualinvoke r1.<com.sun.xml.bind.v2.runtime.output.Pcdata: void writeTo(com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput)>(r0);

        return;
    }

    private void doText(java.lang.String, boolean) throws java.io.IOException
    {
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        com.sun.xml.bind.marshaller.CharacterEscapeHandler $r1, $r6;
        java.io.StringWriter $r5;
        int $i0;
        char[] $r7;
        java.lang.String r2, $r9;
        com.sun.xml.bind.v2.runtime.output.Encoded $r3, $r4, $r8;
        boolean z0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.marshaller.CharacterEscapeHandler escapeHandler>;

        if $r1 == null goto label1;

        $r5 = new java.io.StringWriter;

        specialinvoke $r5.<java.io.StringWriter: void <init>()>();

        $r6 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.marshaller.CharacterEscapeHandler escapeHandler>;

        $r7 = virtualinvoke r2.<java.lang.String: char[] toCharArray()>();

        $i0 = virtualinvoke r2.<java.lang.String: int length()>();

        interfaceinvoke $r6.<com.sun.xml.bind.marshaller.CharacterEscapeHandler: void escape(char[],int,int,boolean,java.io.Writer)>($r7, 0, $i0, z0, $r5);

        $r8 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded textBuffer>;

        $r9 = virtualinvoke $r5.<java.io.StringWriter: java.lang.String toString()>();

        virtualinvoke $r8.<com.sun.xml.bind.v2.runtime.output.Encoded: void set(java.lang.String)>($r9);

        goto label2;

     label1:
        $r3 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded textBuffer>;

        virtualinvoke $r3.<com.sun.xml.bind.v2.runtime.output.Encoded: void setEscape(java.lang.String,boolean)>(r2, z0);

     label2:
        $r4 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded textBuffer>;

        virtualinvoke $r4.<com.sun.xml.bind.v2.runtime.output.Encoded: void write(com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput)>(r0);

        return;
    }

    public final void text(int) throws java.io.IOException
    {
        byte[] $r3;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        byte $b1;
        int $i0, $i2, $i3, i4, i5, $i6, i7, $i9, $i11;
        com.sun.xml.bind.v2.runtime.output.Encoded $r1, $r2;
        boolean z0, $z1;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        i4 := @parameter0: int;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void closeStartTag()>();

        if i4 >= 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        z0 = $z1;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded textBuffer>;

        virtualinvoke $r1.<com.sun.xml.bind.v2.runtime.output.Encoded: void ensureSize(int)>(11);

        $r2 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: com.sun.xml.bind.v2.runtime.output.Encoded textBuffer>;

        $r3 = $r2.<com.sun.xml.bind.v2.runtime.output.Encoded: byte[] buf>;

        i5 = 11;

     label3:
        $i6 = i4 % 10;

        i7 = $i6;

        if $i6 >= 0 goto label4;

        i7 = neg $i6;

     label4:
        $i9 = (int) -1;

        i5 = i5 + $i9;

        $i0 = 48 | i7;

        $b1 = (byte) $i0;

        $r3[i5] = $b1;

        $i3 = i4 / 10;

        i4 = $i3;

        if $i3 != 0 goto label3;

        if z0 == 0 goto label5;

        $i11 = (int) -1;

        i5 = i5 + $i11;

        $r3[i5] = 45;

     label5:
        $i2 = 11 - i5;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(byte[],int,int)>($r3, i5, $i2);

        return;
    }

    public void text(byte[], int) throws java.io.IOException
    {
        byte[] $r1, r2, $r3;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        r2 := @parameter0: byte[];

        i8 := @parameter1: int;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void closeStartTag()>();

        i9 = 0;

     label1:
        if i8 <= 0 goto label3;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] octetBuffer>;

        $i1 = lengthof $r1;

        $i0 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex>;

        $i2 = $i1 - $i0;

        $i3 = $i2 / 4;

        $i4 = $i3 * 3;

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i8);

        $r3 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] octetBuffer>;

        $i6 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex>;

        $i7 = staticinvoke <com.sun.xml.bind.DatatypeConverterImpl: int _printBase64Binary(byte[],int,int,byte[],int)>(r2, i9, $i5, $r3, $i6);

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex> = $i7;

        if $i5 >= i8 goto label2;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void flushBuffer()>();

     label2:
        i9 = i9 + $i5;

        i8 = i8 - $i5;

        goto label1;

     label3:
        return;
    }

    public final void write(int) throws java.io.IOException
    {
        java.io.OutputStream $r3;
        byte[] $r1, $r2, $r4, $r5;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        byte $b3, $b6;
        int $i0, $i1, i2, $i4, $i5;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        i2 := @parameter0: int;

        $i1 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex>;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] octetBuffer>;

        $i0 = lengthof $r1;

        if $i1 >= $i0 goto label1;

        $r5 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] octetBuffer>;

        $i4 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex>;

        $i5 = $i4 + 1;

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex> = $i5;

        $b6 = (byte) i2;

        $r5[$i4] = $b6;

        goto label2;

     label1:
        $r3 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: java.io.OutputStream out>;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] octetBuffer>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r2);

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex> = 1;

        $r4 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] octetBuffer>;

        $b3 = (byte) i2;

        $r4[0] = $b3;

     label2:
        return;
    }

    protected final void write(byte[]) throws java.io.IOException
    {
        int $i0;
        byte[] r1;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        r1 := @parameter0: byte[];

        $i0 = lengthof r1;

        virtualinvoke r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: void write(byte[],int,int)>(r1, 0, $i0);

        return;
    }

    protected final void write(byte[], int, int) throws java.io.IOException
    {
        byte[] $r1, $r2, r4, $r6;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        int i0, $i1, $i2, $i3, $i4, i5, $i6, $i7, $i8;
        java.io.OutputStream $r3, $r5;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        r4 := @parameter0: byte[];

        i5 := @parameter1: int;

        i0 := @parameter2: int;

        $i1 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex>;

        $i3 = $i1 + i0;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] octetBuffer>;

        $i2 = lengthof $r1;

        if $i3 >= $i2 goto label1;

        $r6 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] octetBuffer>;

        $i6 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, i5, $r6, $i6, i0);

        $i7 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex>;

        $i8 = $i7 + i0;

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex> = $i8;

        goto label2;

     label1:
        $r3 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: java.io.OutputStream out>;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] octetBuffer>;

        $i4 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex>;

        virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>($r2, 0, $i4);

        $r5 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: java.io.OutputStream out>;

        virtualinvoke $r5.<java.io.OutputStream: void write(byte[],int,int)>(r4, i5, i0);

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex> = 0;

     label2:
        return;
    }

    protected final void flushBuffer() throws java.io.IOException
    {
        java.io.OutputStream $r2;
        byte[] $r1;
        com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput r0;
        int $i0;

        r0 := @this: com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput;

        $r2 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: java.io.OutputStream out>;

        $r1 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] octetBuffer>;

        $i0 = r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex>;

        virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r1, 0, $i0);

        r0.<com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: int octetBufferIndex> = 0;

        return;
    }

    static byte[] toBytes(java.lang.String)
    {
        byte[] r1;
        char $c2;
        byte $b3;
        int $i0, $i1, i4, $i6;
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = newarray (byte)[$i0];

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i4 = $i1 - 1;

     label1:
        if i4 < 0 goto label2;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4);

        $b3 = (byte) $c2;

        r1[i4] = $b3;

        $i6 = (int) -1;

        i4 = i4 + $i6;

        goto label1;

     label2:
        return r1;
    }

    static void <clinit>()
    {
        byte[] $r0, $r1, $r2, $r3, $r4, $r5, $r6;

        $r0 = staticinvoke <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] toBytes(java.lang.String)>(" xmlns=\"");

        <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] _XMLNS_EQUALS> = $r0;

        $r1 = staticinvoke <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] toBytes(java.lang.String)>(" xmlns:");

        <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] _XMLNS_COLON> = $r1;

        $r2 = staticinvoke <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] toBytes(java.lang.String)>("=\"");

        <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] _EQUALS> = $r2;

        $r3 = staticinvoke <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] toBytes(java.lang.String)>("</");

        <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] _CLOSE_TAG> = $r3;

        $r4 = staticinvoke <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] toBytes(java.lang.String)>("/>");

        <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] _EMPTY_TAG> = $r4;

        $r5 = staticinvoke <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] toBytes(java.lang.String)>("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>");

        <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] _XML_DECL> = $r5;

        $r6 = newarray (byte)[0];

        <com.sun.xml.bind.v2.runtime.output.UTF8XmlOutput: byte[] EMPTY_BYTE_ARRAY> = $r6;

        return;
    }
}
