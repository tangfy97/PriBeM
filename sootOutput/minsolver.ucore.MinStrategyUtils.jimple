public final class minsolver.ucore.MinStrategyUtils extends java.lang.Object
{
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lminsolver/ucore/MinStrategyUtils;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <minsolver.ucore.MinStrategyUtils: boolean $assertionsDisabled> = $z1;

        return;
    }

    private void <init>()
    {
        minsolver.ucore.MinStrategyUtils r0;

        r0 := @this: minsolver.ucore.MinStrategyUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static kodkod.util.ints.IntSet rootVars(minsolver.fol2sat.MinTranslationLog)
    {
        java.util.LinkedHashMap $r3;
        int[] r14, r15;
        int $i0, $i1, $i2, $i3, i4;
        minsolver.fol2sat.MinTranslationLog r1;
        boolean $z0, $z1;
        kodkod.util.ints.IntTreeSet $r0;
        minsolver.fol2sat.MinTranslationRecord r13;
        java.util.Iterator $r5, $r11;
        kodkod.ast.Formula $r7, $r9;
        java.util.Collection $r10;
        java.util.Set $r2;
        minsolver.ucore.MinStrategyUtils$1 $r4;
        java.lang.Object $r6, $r8, $r12;

        r1 := @parameter0: minsolver.fol2sat.MinTranslationLog;

        $r0 = new kodkod.util.ints.IntTreeSet;

        specialinvoke $r0.<kodkod.util.ints.IntTreeSet: void <init>()>();

        $r2 = virtualinvoke r1.<minsolver.fol2sat.MinTranslationLog: java.util.Set roots()>();

        $r3 = new java.util.LinkedHashMap;

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        specialinvoke $r3.<java.util.LinkedHashMap: void <init>(int)>($i0);

        $r4 = new minsolver.ucore.MinStrategyUtils$1;

        specialinvoke $r4.<minsolver.ucore.MinStrategyUtils$1: void <init>(java.util.Set)>($r2);

        $r5 = virtualinvoke r1.<minsolver.fol2sat.MinTranslationLog: java.util.Iterator replay(minsolver.fol2sat.MinRecordFilter)>($r4);

        goto label3;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r13 = (minsolver.fol2sat.MinTranslationRecord) $r6;

        $r7 = virtualinvoke r13.<minsolver.fol2sat.MinTranslationRecord: kodkod.ast.Formula translated()>();

        $r8 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r14 = (int[]) $r8;

        if r14 != null goto label2;

        r14 = newarray (int)[1];

        $r9 = virtualinvoke r13.<minsolver.fol2sat.MinTranslationRecord: kodkod.ast.Formula translated()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r14);

     label2:
        $i1 = virtualinvoke r13.<minsolver.fol2sat.MinTranslationRecord: int literal()>();

        $i2 = staticinvoke <java.lang.StrictMath: int abs(int)>($i1);

        r14[0] = $i2;

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r10 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>();

        $r11 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r15 = (int[]) $r12;

        i4 = r15[0];

        if i4 == 2147483647 goto label5;

        $i3 = r15[0];

        interfaceinvoke $r0.<kodkod.util.ints.IntSet: boolean add(int)>($i3);

     label5:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

        return $r0;
    }

    static kodkod.util.ints.SparseSequence roots(minsolver.fol2sat.MinTranslationLog)
    {
        int[] $r14, r18;
        kodkod.util.ints.TreeSequence $r0;
        int $i0, $i1, $i2, i3;
        minsolver.fol2sat.MinTranslationLog r1;
        boolean $z0, $z1;
        minsolver.fol2sat.MinTranslationRecord r17;
        java.util.Map$Entry r19;
        java.util.IdentityHashMap $r3;
        java.util.Iterator $r5, $r11;
        kodkod.ast.Formula $r7, $r9, $r16;
        java.util.Set $r2, $r10;
        minsolver.ucore.MinStrategyUtils$2 $r4;
        java.lang.Object $r6, $r8, $r12, $r13, $r15;

        r1 := @parameter0: minsolver.fol2sat.MinTranslationLog;

        $r0 = new kodkod.util.ints.TreeSequence;

        specialinvoke $r0.<kodkod.util.ints.TreeSequence: void <init>()>();

        $r2 = virtualinvoke r1.<minsolver.fol2sat.MinTranslationLog: java.util.Set roots()>();

        $r3 = new java.util.IdentityHashMap;

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        specialinvoke $r3.<java.util.IdentityHashMap: void <init>(int)>($i0);

        $r4 = new minsolver.ucore.MinStrategyUtils$2;

        specialinvoke $r4.<minsolver.ucore.MinStrategyUtils$2: void <init>(java.util.Set)>($r2);

        $r5 = virtualinvoke r1.<minsolver.fol2sat.MinTranslationLog: java.util.Iterator replay(minsolver.fol2sat.MinRecordFilter)>($r4);

        goto label3;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r17 = (minsolver.fol2sat.MinTranslationRecord) $r6;

        $r7 = virtualinvoke r17.<minsolver.fol2sat.MinTranslationRecord: kodkod.ast.Formula translated()>();

        $r8 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r18 = (int[]) $r8;

        if r18 != null goto label2;

        r18 = newarray (int)[1];

        $r9 = virtualinvoke r17.<minsolver.fol2sat.MinTranslationRecord: kodkod.ast.Formula translated()>();

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r18);

     label2:
        $i1 = virtualinvoke r17.<minsolver.fol2sat.MinTranslationRecord: int literal()>();

        $i2 = staticinvoke <java.lang.StrictMath: int abs(int)>($i1);

        r18[0] = $i2;

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r10 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        $r11 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r12 = interfaceinvoke $r11.<java.util.Iterator: java.lang.Object next()>();

        r19 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = (int[]) $r13;

        i3 = $r14[0];

        if i3 == 2147483647 goto label5;

        $r15 = interfaceinvoke r19.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r16 = (kodkod.ast.Formula) $r15;

        interfaceinvoke $r0.<kodkod.util.ints.SparseSequence: java.lang.Object put(int,java.lang.Object)>(i3, $r16);

     label5:
        $z1 = interfaceinvoke $r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

        return $r0;
    }

    public static kodkod.util.ints.IntSet coreVars(kodkod.engine.satlab.ResolutionTrace)
    {
        kodkod.util.ints.IntBitSet $r8;
        java.lang.AssertionError $r9;
        kodkod.util.ints.IntIterator $r7;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3;
        kodkod.engine.satlab.ResolutionTrace r2;
        kodkod.util.ints.IntTreeSet $r0, $r1;
        java.util.Iterator $r4;
        kodkod.util.ints.IntSet $r3;
        kodkod.engine.satlab.Clause r6;
        java.lang.Object $r5;

        r2 := @parameter0: kodkod.engine.satlab.ResolutionTrace;

        $r0 = new kodkod.util.ints.IntTreeSet;

        specialinvoke $r0.<kodkod.util.ints.IntTreeSet: void <init>()>();

        $r1 = new kodkod.util.ints.IntTreeSet;

        specialinvoke $r1.<kodkod.util.ints.IntTreeSet: void <init>()>();

        $r3 = interfaceinvoke r2.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet core()>();

        $r4 = interfaceinvoke r2.<kodkod.engine.satlab.ResolutionTrace: java.util.Iterator iterator(kodkod.util.ints.IntSet)>($r3);

        goto label5;

     label1:
        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (kodkod.engine.satlab.Clause) $r5;

        $r7 = virtualinvoke r6.<kodkod.engine.satlab.Clause: kodkod.util.ints.IntIterator literals()>();

        goto label4;

     label2:
        $i0 = interfaceinvoke $r7.<kodkod.util.ints.IntIterator: int next()>();

        if $i0 <= 0 goto label3;

        interfaceinvoke $r0.<kodkod.util.ints.IntSet: boolean add(int)>($i0);

        goto label4;

     label3:
        $i1 = neg $i0;

        interfaceinvoke $r1.<kodkod.util.ints.IntSet: boolean add(int)>($i1);

     label4:
        $z3 = interfaceinvoke $r7.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z3 != 0 goto label2;

     label5:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        interfaceinvoke $r0.<kodkod.util.ints.IntSet: boolean retainAll(kodkod.util.ints.IntCollection)>($r1);

        $z1 = <minsolver.ucore.MinStrategyUtils: boolean $assertionsDisabled>;

        if $z1 != 0 goto label6;

        $z2 = interfaceinvoke $r0.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z2 == 0 goto label6;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>()>();

        throw $r9;

     label6:
        $r8 = new kodkod.util.ints.IntBitSet;

        $i2 = interfaceinvoke $r0.<kodkod.util.ints.IntSet: int max()>();

        $i3 = $i2 + 1;

        specialinvoke $r8.<kodkod.util.ints.IntBitSet: void <init>(int)>($i3);

        interfaceinvoke $r8.<kodkod.util.ints.IntSet: boolean addAll(kodkod.util.ints.IntCollection)>($r0);

        return $r8;
    }

    public static kodkod.util.ints.IntSet coreUnits(kodkod.engine.satlab.ResolutionTrace)
    {
        kodkod.engine.satlab.ResolutionTrace r1;
        kodkod.util.ints.IntTreeSet $r0;
        java.util.Iterator $r3;
        kodkod.util.ints.IntSet $r2, $r7, $r8;
        kodkod.engine.satlab.Clause r5;
        int[] $r6;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0, $z1;

        r1 := @parameter0: kodkod.engine.satlab.ResolutionTrace;

        $r0 = new kodkod.util.ints.IntTreeSet;

        specialinvoke $r0.<kodkod.util.ints.IntTreeSet: void <init>()>();

        $r2 = interfaceinvoke r1.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet core()>();

        $r3 = interfaceinvoke r1.<kodkod.engine.satlab.ResolutionTrace: java.util.Iterator reverseIterator(kodkod.util.ints.IntSet)>($r2);

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kodkod.engine.satlab.Clause) $r4;

        $i0 = virtualinvoke r5.<kodkod.engine.satlab.Clause: int size()>();

        if $i0 != 1 goto label2;

        $i1 = virtualinvoke r5.<kodkod.engine.satlab.Clause: int maxVariable()>();

        interfaceinvoke $r0.<kodkod.util.ints.IntSet: boolean add(int)>($i1);

     label2:
        $z1 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        $z0 = interfaceinvoke $r0.<kodkod.util.ints.IntSet: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        $r8 = <kodkod.util.ints.Ints: kodkod.util.ints.IntSet EMPTY_SET>;

        return $r8;

     label3:
        $r6 = interfaceinvoke $r0.<kodkod.util.ints.IntSet: int[] toArray()>();

        $r7 = staticinvoke <kodkod.util.ints.Ints: kodkod.util.ints.IntSet asSet(int[])>($r6);

        return $r7;
    }

    static kodkod.util.ints.IntSet coreTailUnits(kodkod.engine.satlab.ResolutionTrace)
    {
        kodkod.engine.satlab.ResolutionTrace r1;
        kodkod.util.ints.IntTreeSet $r0;
        java.util.Iterator $r3;
        kodkod.util.ints.IntSet $r2;
        kodkod.engine.satlab.Clause r5;
        int $i0, $i1;
        java.lang.Object $r4;
        boolean $z0;

        r1 := @parameter0: kodkod.engine.satlab.ResolutionTrace;

        $r0 = new kodkod.util.ints.IntTreeSet;

        specialinvoke $r0.<kodkod.util.ints.IntTreeSet: void <init>()>();

        $r2 = interfaceinvoke r1.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet core()>();

        $r3 = interfaceinvoke r1.<kodkod.engine.satlab.ResolutionTrace: java.util.Iterator reverseIterator(kodkod.util.ints.IntSet)>($r2);

        goto label2;

     label1:
        $r4 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (kodkod.engine.satlab.Clause) $r4;

        $i0 = virtualinvoke r5.<kodkod.engine.satlab.Clause: int size()>();

        if $i0 != 1 goto label3;

        $i1 = virtualinvoke r5.<kodkod.engine.satlab.Clause: int maxVariable()>();

        interfaceinvoke $r0.<kodkod.util.ints.IntSet: boolean add(int)>($i1);

     label2:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

     label3:
        return $r0;
    }

    static kodkod.util.ints.IntSet clausesFor(kodkod.engine.satlab.ResolutionTrace, kodkod.util.ints.IntSet)
    {
        kodkod.util.ints.IntBitSet $r9, $r10;
        kodkod.util.ints.IntIterator $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i8;
        boolean $z0, $z1;
        kodkod.engine.satlab.ResolutionTrace r0;
        java.util.Iterator $r5;
        kodkod.util.ints.IntSet $r1, r3;
        kodkod.engine.satlab.Clause r7;
        java.lang.Object $r6;

        r0 := @parameter0: kodkod.engine.satlab.ResolutionTrace;

        r3 := @parameter1: kodkod.util.ints.IntSet;

        $r1 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: kodkod.util.ints.IntSet axioms()>();

        $r9 = new kodkod.util.ints.IntBitSet;

        $i0 = interfaceinvoke r3.<kodkod.util.ints.IntSet: int max()>();

        $i1 = $i0 + 1;

        specialinvoke $r9.<kodkod.util.ints.IntBitSet: void <init>(int)>($i1);

        interfaceinvoke $r9.<kodkod.util.ints.IntSet: boolean addAll(kodkod.util.ints.IntCollection)>(r3);

        $r10 = new kodkod.util.ints.IntBitSet;

        $i2 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: int size()>();

        specialinvoke $r10.<kodkod.util.ints.IntBitSet: void <init>(int)>($i2);

        $r5 = interfaceinvoke r0.<kodkod.engine.satlab.ResolutionTrace: java.util.Iterator reverseIterator(kodkod.util.ints.IntSet)>($r1);

        i6 = interfaceinvoke $r1.<kodkod.util.ints.IntSet: int max()>();

        goto label5;

     label1:
        $r6 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (kodkod.engine.satlab.Clause) $r6;

        $i3 = virtualinvoke r7.<kodkod.engine.satlab.Clause: int maxVariable()>();

        $z0 = interfaceinvoke $r9.<kodkod.util.ints.IntSet: boolean contains(int)>($i3);

        if $z0 == 0 goto label4;

        $r8 = virtualinvoke r7.<kodkod.engine.satlab.Clause: kodkod.util.ints.IntIterator literals()>();

        goto label3;

     label2:
        $i4 = interfaceinvoke $r8.<kodkod.util.ints.IntIterator: int next()>();

        $i5 = staticinvoke <java.lang.StrictMath: int abs(int)>($i4);

        interfaceinvoke $r9.<kodkod.util.ints.IntSet: boolean add(int)>($i5);

     label3:
        $z1 = interfaceinvoke $r8.<kodkod.util.ints.IntIterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

        interfaceinvoke $r10.<kodkod.util.ints.IntSet: boolean add(int)>(i6);

     label4:
        $i8 = (int) -1;

        i6 = i6 + $i8;

     label5:
        if i6 >= 0 goto label1;

        return $r10;
    }
}
