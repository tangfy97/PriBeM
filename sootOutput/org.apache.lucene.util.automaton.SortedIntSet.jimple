final class org.apache.lucene.util.automaton.SortedIntSet extends java.lang.Object
{
    int[] values;
    int[] counts;
    int upto;
    private int hashCode;
    private static final int TREE_MAP_CUTOVER;
    private final java.util.Map map;
    private boolean useTreeMap;
    org.apache.lucene.util.automaton.State state;
    static final boolean $assertionsDisabled;

    public void <init>(int)
    {
        java.util.TreeMap $r1;
        int[] $r2, $r3;
        org.apache.lucene.util.automaton.SortedIntSet r0;
        int i0;

        r0 := @this: org.apache.lucene.util.automaton.SortedIntSet;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<org.apache.lucene.util.automaton.SortedIntSet: java.util.Map map> = $r1;

        $r2 = newarray (int)[i0];

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values> = $r2;

        $r3 = newarray (int)[i0];

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts> = $r3;

        return;
    }

    public void incr(int)
    {
        java.lang.Integer $r6, $r8, $r22, $r26, $r28, r29;
        java.util.Map $r5, $r23, $r25, $r27;
        org.apache.lucene.util.automaton.SortedIntSet r0;
        int[] $r1, $r2, $r3, $r4, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        boolean $z0;
        int $i0, $i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, $i29, i30, i31, $i33;
        java.lang.Object $r24;

        r0 := @this: org.apache.lucene.util.automaton.SortedIntSet;

        i2 := @parameter0: int;

        $z0 = r0.<org.apache.lucene.util.automaton.SortedIntSet: boolean useTreeMap>;

        if $z0 == 0 goto label03;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r23 = r0.<org.apache.lucene.util.automaton.SortedIntSet: java.util.Map map>;

        $r24 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>($r22);

        r29 = (java.lang.Integer) $r24;

        if r29 != null goto label01;

        $r27 = r0.<org.apache.lucene.util.automaton.SortedIntSet: java.util.Map map>;

        $r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r28);

        goto label02;

     label01:
        $r25 = r0.<org.apache.lucene.util.automaton.SortedIntSet: java.util.Map map>;

        $i26 = virtualinvoke r29.<java.lang.Integer: int intValue()>();

        $i27 = 1 + $i26;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i27);

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r26);

     label02:
        return;

     label03:
        $i1 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        $r1 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i0 = lengthof $r1;

        if $i1 != $i0 goto label04;

        $r18 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i22 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        $i23 = 1 + $i22;

        $r19 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[],int)>($r18, $i23);

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values> = $r19;

        $r20 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts>;

        $i24 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        $i25 = 1 + $i24;

        $r21 = staticinvoke <org.apache.lucene.util.ArrayUtil: int[] grow(int[],int)>($r20, $i25);

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts> = $r21;

     label04:
        i28 = 0;

     label05:
        $i29 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        if i28 >= $i29 goto label10;

        $r9 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i11 = $r9[i28];

        if $i11 != i2 goto label06;

        $r17 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts>;

        $i20 = $r17[i28];

        $i21 = $i20 + 1;

        $r17[i28] = $i21;

        return;

     label06:
        $r10 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i12 = $r10[i28];

        if i2 >= $i12 goto label09;

        $i13 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        i30 = $i13 - 1;

     label07:
        if i30 < i28 goto label08;

        $r14 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i17 = 1 + i30;

        $r13 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i16 = $r13[i30];

        $r14[$i17] = $i16;

        $r16 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts>;

        $i19 = 1 + i30;

        $r15 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts>;

        $i18 = $r15[i30];

        $r16[$i19] = $i18;

        $i33 = (int) -1;

        i30 = i30 + $i33;

        goto label07;

     label08:
        $r11 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $r11[i28] = i2;

        $r12 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts>;

        $r12[i28] = 1;

        $i14 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        $i15 = $i14 + 1;

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto> = $i15;

        return;

     label09:
        i28 = i28 + 1;

        goto label05;

     label10:
        $r2 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i3 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        $r2[$i3] = i2;

        $r3 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts>;

        $i4 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        $r3[$i4] = 1;

        $i5 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        $i6 = $i5 + 1;

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto> = $i6;

        $i7 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        if $i7 != 30 goto label12;

        r0.<org.apache.lucene.util.automaton.SortedIntSet: boolean useTreeMap> = 1;

        i31 = 0;

     label11:
        $i8 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        if i31 >= $i8 goto label12;

        $r5 = r0.<org.apache.lucene.util.automaton.SortedIntSet: java.util.Map map>;

        $r4 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i9 = $r4[i31];

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9);

        $r7 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts>;

        $i10 = $r7[i31];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r8);

        i31 = i31 + 1;

        goto label11;

     label12:
        return;
    }

    public void decr(int)
    {
        java.lang.Integer $r10, $r12, $r14, $r15, $r18;
        int[] $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.util.Map $r9, $r13, $r16, $r17;
        boolean $z0, $z1;
        java.lang.AssertionError $r1;
        int $i0, i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15;
        org.apache.lucene.util.automaton.SortedIntSet r0;
        java.lang.Object $r11;

        r0 := @this: org.apache.lucene.util.automaton.SortedIntSet;

        i1 := @parameter0: int;

        $z0 = r0.<org.apache.lucene.util.automaton.SortedIntSet: boolean useTreeMap>;

        if $z0 == 0 goto label04;

        $r9 = r0.<org.apache.lucene.util.automaton.SortedIntSet: java.util.Map map>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (java.lang.Integer) $r11;

        $i12 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        if $i12 != 1 goto label01;

        $r17 = r0.<org.apache.lucene.util.automaton.SortedIntSet: java.util.Map map>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r18);

        goto label02;

     label01:
        $r13 = r0.<org.apache.lucene.util.automaton.SortedIntSet: java.util.Map map>;

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $i13 = $i12 - 1;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i13);

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

     label02:
        $r16 = r0.<org.apache.lucene.util.automaton.SortedIntSet: java.util.Map map>;

        $i14 = interfaceinvoke $r16.<java.util.Map: int size()>();

        if $i14 != 0 goto label03;

        r0.<org.apache.lucene.util.automaton.SortedIntSet: boolean useTreeMap> = 0;

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto> = 0;

     label03:
        return;

     label04:
        i15 = 0;

     label05:
        $i0 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        if i15 >= $i0 goto label10;

        $r2 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i2 = $r2[i15];

        if $i2 != i1 goto label09;

        $r3 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts>;

        $i3 = $r3[i15];

        $i4 = $i3 - 1;

        $r3[i15] = $i4;

        $r4 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts>;

        $i5 = $r4[i15];

        if $i5 != 0 goto label08;

        $i6 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        i7 = $i6 - 1;

     label06:
        if i15 >= i7 goto label07;

        $r6 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $r5 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i8 = i15 + 1;

        $i9 = $r5[$i8];

        $r6[i15] = $i9;

        $r8 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts>;

        $r7 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts>;

        $i10 = i15 + 1;

        $i11 = $r7[$i10];

        $r8[i15] = $i11;

        i15 = i15 + 1;

        goto label06;

     label07:
        r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto> = i7;

     label08:
        return;

     label09:
        i15 = i15 + 1;

        goto label05;

     label10:
        $z1 = <org.apache.lucene.util.automaton.SortedIntSet: boolean $assertionsDisabled>;

        if $z1 != 0 goto label11;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label11:
        return;
    }

    public void computeHash()
    {
        java.lang.Integer $r9;
        int[] $r1, $r3, $r10, $r12, $r13;
        java.util.Map $r2, $r4, $r5, $r11;
        boolean $z0, $z1;
        java.util.Set $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17;
        java.util.Iterator $r7;
        org.apache.lucene.util.automaton.SortedIntSet r0;
        java.lang.Object $r8;

        r0 := @this: org.apache.lucene.util.automaton.SortedIntSet;

        $z0 = r0.<org.apache.lucene.util.automaton.SortedIntSet: boolean useTreeMap>;

        if $z0 == 0 goto label4;

        $r2 = r0.<org.apache.lucene.util.automaton.SortedIntSet: java.util.Map map>;

        $i6 = interfaceinvoke $r2.<java.util.Map: int size()>();

        $r3 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i7 = lengthof $r3;

        if $i6 <= $i7 goto label1;

        $r11 = r0.<org.apache.lucene.util.automaton.SortedIntSet: java.util.Map map>;

        $i15 = interfaceinvoke $r11.<java.util.Map: int size()>();

        $i16 = staticinvoke <org.apache.lucene.util.ArrayUtil: int oversize(int,int)>($i15, 4);

        $r12 = newarray (int)[$i16];

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values> = $r12;

        $r13 = newarray (int)[$i16];

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts> = $r13;

     label1:
        $r4 = r0.<org.apache.lucene.util.automaton.SortedIntSet: java.util.Map map>;

        $i8 = interfaceinvoke $r4.<java.util.Map: int size()>();

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int hashCode> = $i8;

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto> = 0;

        $r5 = r0.<org.apache.lucene.util.automaton.SortedIntSet: java.util.Map map>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r8 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r9 = (java.lang.Integer) $r8;

        $i9 = virtualinvoke $r9.<java.lang.Integer: int intValue()>();

        $i10 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int hashCode>;

        $i11 = 683 * $i10;

        $i12 = $i11 + $i9;

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int hashCode> = $i12;

        $r10 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i13 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        $i14 = $i13 + 1;

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto> = $i14;

        $r10[$i13] = $i9;

        goto label2;

     label3:
        goto label6;

     label4:
        $i0 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int hashCode> = $i0;

        i17 = 0;

     label5:
        $i1 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        if i17 >= $i1 goto label6;

        $i2 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int hashCode>;

        $i4 = 683 * $i2;

        $r1 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i3 = $r1[i17];

        $i5 = $i4 + $i3;

        r0.<org.apache.lucene.util.automaton.SortedIntSet: int hashCode> = $i5;

        i17 = i17 + 1;

        goto label5;

     label6:
        return;
    }

    public org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet freeze(org.apache.lucene.util.automaton.State)
    {
        org.apache.lucene.util.automaton.SortedIntSet r0;
        org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet $r3;
        org.apache.lucene.util.automaton.State r4;
        int[] r1, $r2;
        int $i0, $i1, $i2;

        r0 := @this: org.apache.lucene.util.automaton.SortedIntSet;

        r4 := @parameter0: org.apache.lucene.util.automaton.State;

        $i0 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        r1 = newarray (int)[$i0];

        $r2 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i1 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i1);

        $r3 = new org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet;

        $i2 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int hashCode>;

        specialinvoke $r3.<org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet: void <init>(int[],int,org.apache.lucene.util.automaton.State)>(r1, $i2, r4);

        return $r3;
    }

    public int hashCode()
    {
        int $i0;
        org.apache.lucene.util.automaton.SortedIntSet r0;

        r0 := @this: org.apache.lucene.util.automaton.SortedIntSet;

        $i0 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int hashCode>;

        return $i0;
    }

    public boolean equals(java.lang.Object)
    {
        org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet r1;
        org.apache.lucene.util.automaton.SortedIntSet r2;
        int[] $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7;
        java.lang.Object r0;
        boolean $z0;

        r2 := @this: org.apache.lucene.util.automaton.SortedIntSet;

        r0 := @parameter0: java.lang.Object;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet;

        if $z0 != 0 goto label2;

        return 0;

     label2:
        r1 = (org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet) r0;

        $i1 = r2.<org.apache.lucene.util.automaton.SortedIntSet: int hashCode>;

        $i0 = r1.<org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet: int hashCode>;

        if $i1 == $i0 goto label3;

        return 0;

     label3:
        $r3 = r1.<org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet: int[] values>;

        $i3 = lengthof $r3;

        $i2 = r2.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        if $i3 == $i2 goto label4;

        return 0;

     label4:
        i7 = 0;

     label5:
        $i4 = r2.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        if i7 >= $i4 goto label7;

        $r4 = r1.<org.apache.lucene.util.automaton.SortedIntSet$FrozenIntSet: int[] values>;

        $i6 = $r4[i7];

        $r5 = r2.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i5 = $r5[i7];

        if $i6 == $i5 goto label6;

        return 0;

     label6:
        i7 = i7 + 1;

        goto label5;

     label7:
        return 1;
    }

    public java.lang.String toString()
    {
        org.apache.lucene.util.automaton.SortedIntSet r2;
        int[] $r4, $r7;
        int $i0, $i1, $i2, i3;
        java.lang.StringBuilder $r0, $r1, $r5, $r6;
        java.lang.String $r3;

        r2 := @this: org.apache.lucene.util.automaton.SortedIntSet;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i3 = 0;

     label1:
        $i0 = r2.<org.apache.lucene.util.automaton.SortedIntSet: int upto>;

        if i3 >= $i0 goto label3;

        if i3 <= 0 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label2:
        $r4 = r2.<org.apache.lucene.util.automaton.SortedIntSet: int[] values>;

        $i1 = $r4[i3];

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

        $r7 = r2.<org.apache.lucene.util.automaton.SortedIntSet: int[] counts>;

        $i2 = $r7[i3];

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        i3 = i3 + 1;

        goto label1;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    static int access$000(org.apache.lucene.util.automaton.SortedIntSet)
    {
        int $i0;
        org.apache.lucene.util.automaton.SortedIntSet r0;

        r0 := @parameter0: org.apache.lucene.util.automaton.SortedIntSet;

        $i0 = r0.<org.apache.lucene.util.automaton.SortedIntSet: int hashCode>;

        return $i0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.lucene.util.automaton.SortedIntSet: int TREE_MAP_CUTOVER> = 30;

        $r0 = class "Lorg/apache/lucene/util/automaton/SortedIntSet;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.lucene.util.automaton.SortedIntSet: boolean $assertionsDisabled> = $z1;

        return;
    }
}
