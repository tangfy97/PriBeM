class org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1 extends org.waveprotocol.wave.model.wave.opbased.WaveletListenerImpl
{
    final org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip this$0;

    void <init>(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)
    {
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1 r0;

        r0 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1;

        r1 := @parameter0: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip;

        r0.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip this$0> = r1;

        specialinvoke r0.<org.waveprotocol.wave.model.wave.opbased.WaveletListenerImpl: void <init>()>();

        return;
    }

    public void onBlipContributorAdded(org.waveprotocol.wave.model.wave.ObservableWavelet, org.waveprotocol.wave.model.wave.Blip, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.Blip r0, $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r2, $r5;
        org.waveprotocol.wave.model.wave.ObservableWavelet r6;
        org.waveprotocol.wave.model.wave.ParticipantId r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1 r1;

        r1 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1;

        r6 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        r0 := @parameter1: org.waveprotocol.wave.model.wave.Blip;

        r4 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip access$000(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)>($r2);

        if r0 != $r3 goto label1;

        $r5 = r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip this$0>;

        staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void access$100(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip,org.waveprotocol.wave.model.wave.ParticipantId)>($r5, r4);

     label1:
        return;
    }

    public void onBlipContributorRemoved(org.waveprotocol.wave.model.wave.ObservableWavelet, org.waveprotocol.wave.model.wave.Blip, org.waveprotocol.wave.model.wave.ParticipantId)
    {
        org.waveprotocol.wave.model.wave.Blip r0, $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r2, $r5;
        org.waveprotocol.wave.model.wave.ObservableWavelet r6;
        org.waveprotocol.wave.model.wave.ParticipantId r4;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1 r1;

        r1 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1;

        r6 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        r0 := @parameter1: org.waveprotocol.wave.model.wave.Blip;

        r4 := @parameter2: org.waveprotocol.wave.model.wave.ParticipantId;

        $r2 = r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip access$000(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)>($r2);

        if r0 != $r3 goto label1;

        $r5 = r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip this$0>;

        staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void access$200(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip,org.waveprotocol.wave.model.wave.ParticipantId)>($r5, r4);

     label1:
        return;
    }

    public void onBlipSubmitted(org.waveprotocol.wave.model.wave.ObservableWavelet, org.waveprotocol.wave.model.wave.Blip)
    {
        org.waveprotocol.wave.model.wave.Blip r0, $r3;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r2, $r4;
        org.waveprotocol.wave.model.wave.ObservableWavelet r5;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1 r1;

        r1 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        r0 := @parameter1: org.waveprotocol.wave.model.wave.Blip;

        $r2 = r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip access$000(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)>($r2);

        if r0 != $r3 goto label1;

        $r4 = r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip this$0>;

        staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void access$300(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)>($r4);

     label1:
        return;
    }

    public void onBlipTimestampModified(org.waveprotocol.wave.model.wave.ObservableWavelet, org.waveprotocol.wave.model.wave.Blip, long, long)
    {
        org.waveprotocol.wave.model.wave.Blip r0, $r3;
        long l0, l1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1 r1;
        org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip $r2, $r4;
        org.waveprotocol.wave.model.wave.ObservableWavelet r5;

        r1 := @this: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1;

        r5 := @parameter0: org.waveprotocol.wave.model.wave.ObservableWavelet;

        r0 := @parameter1: org.waveprotocol.wave.model.wave.Blip;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        $r2 = r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip this$0>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: org.waveprotocol.wave.model.wave.Blip access$000(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip)>($r2);

        if r0 != $r3 goto label1;

        $r4 = r1.<org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip$1: org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip this$0>;

        staticinvoke <org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip: void access$400(org.waveprotocol.wave.model.conversation.WaveletBasedConversationBlip,long,long)>($r4, l0, l1);

     label1:
        return;
    }
}
