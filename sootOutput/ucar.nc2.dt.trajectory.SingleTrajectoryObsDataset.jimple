public class ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset extends ucar.nc2.dt.TypedDatasetImpl implements ucar.nc2.dt.TrajectoryObsDataset
{
    protected java.lang.String trajectoryId;
    protected int trajectoryNumPoint;
    protected java.util.HashMap trajectoryVarsMap;
    protected ucar.nc2.Dimension timeDim;
    protected ucar.nc2.Variable timeVar;
    protected ucar.nc2.Structure recordVar;
    protected ucar.nc2.Variable latVar;
    protected ucar.nc2.Variable lonVar;
    protected ucar.nc2.Variable elevVar;
    protected java.lang.String timeVarUnitsString;
    protected double elevVarUnitsConversionFactor;
    protected ucar.nc2.dt.TrajectoryObsDatatype trajectory;

    public void <init>()
    {
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset r0;

        r0 := @this: ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset;

        specialinvoke r0.<ucar.nc2.dt.TypedDatasetImpl: void <init>()>();

        return;
    }

    public void <init>(ucar.nc2.dataset.NetcdfDataset)
    {
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset r0;
        ucar.nc2.dataset.NetcdfDataset r1;

        r0 := @this: ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset;

        r1 := @parameter0: ucar.nc2.dataset.NetcdfDataset;

        specialinvoke r0.<ucar.nc2.dt.TypedDatasetImpl: void <init>(ucar.nc2.dataset.NetcdfDataset)>(r1);

        return;
    }

    public void setTrajectoryInfo(ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config) throws java.io.IOException
    {
        ucar.nc2.Attribute $r11, $r16, $r19, $r22, $r65, $r116;
        java.lang.StringBuilder $r80, $r81, $r82, $r83, $r86, $r87, $r88, $r89, $r92, $r93, $r94, $r95, $r98, $r99, $r101, $r102, $r107, $r108, $r109, $r110;
        java.util.Date $r14, $r43, $r45, $r47, $r50;
        ucar.nc2.dataset.VariableDS $r61;
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$SingleTrajectory $r33, $r48, $r51;
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$MyTypedDataVariable $r60;
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset r0;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.Boolean $r74;
        ucar.nc2.Variable $r5, $r6, $r7, $r8, $r10, $r15, $r18, $r21, $r36, $r37, $r38, $r40, r53, $r54, $r55, $r56, $r57, $r77, $r113, $r115;
        java.lang.Object $r52, $r70;
        ucar.nc2.Group $r30, $r76;
        java.lang.Exception $r105;
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config r2;
        ucar.nc2.Structure $r58, $r59, $r78, $r112;
        java.lang.String $r3, $r12, $r13, $r17, $r20, $r23, $r39, $r41, $r64, $r84, $r90, $r96, $r100, $r103, $r111, $r114, $r117;
        ucar.nc2.dt.TrajectoryObsDatatype $r42, $r44, $r46, $r49;
        ucar.nc2.Dimension $r1, $r4, $r9, $r26, $r67, $r68, $r72;
        ucar.nc2.dataset.NetcdfDataset $r24, $r27, $r29, $r66, $r69, $r73, $r75;
        java.lang.IllegalStateException $r104;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.util.List $r31, $r35, $r62;
        java.util.HashMap $r28, $r34, $r63;
        double $d0;
        java.util.Iterator $r32;
        ucar.nc2.StructurePseudo $r25, $r71;
        java.lang.IllegalArgumentException $r79, $r85, $r91, $r97, $r106;

        r0 := @this: ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset;

        r2 := @parameter0: ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config;

        $r1 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Dimension timeDim>;

        if $r1 == null goto label01;

        $r104 = new java.lang.IllegalStateException;

        specialinvoke $r104.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The setTrajectoryInfo() method can only be called once.");

        throw $r104;

     label01:
        $r3 = virtualinvoke r2.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config: java.lang.String getTrajectoryId()>();

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.lang.String trajectoryId> = $r3;

        $r4 = virtualinvoke r2.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config: ucar.nc2.Dimension getTimeDim()>();

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Dimension timeDim> = $r4;

        $r5 = virtualinvoke r2.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config: ucar.nc2.Variable getTimeVar()>();

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable timeVar> = $r5;

        $r6 = virtualinvoke r2.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config: ucar.nc2.Variable getLatVar()>();

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable latVar> = $r6;

        $r7 = virtualinvoke r2.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config: ucar.nc2.Variable getLonVar()>();

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable lonVar> = $r7;

        $r8 = virtualinvoke r2.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$Config: ucar.nc2.Variable getElevVar()>();

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable elevVar> = $r8;

        $r9 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Dimension timeDim>;

        $i0 = virtualinvoke $r9.<ucar.nc2.Dimension: int getLength()>();

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: int trajectoryNumPoint> = $i0;

        $r10 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable timeVar>;

        $r11 = virtualinvoke $r10.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("units");

        $r12 = virtualinvoke $r11.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.lang.String timeVarUnitsString> = $r12;

        $r13 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.lang.String timeVarUnitsString>;

        $r14 = staticinvoke <ucar.nc2.units.DateUnit: java.util.Date getStandardDate(java.lang.String)>($r13);

        if $r14 != null goto label02;

        $r97 = new java.lang.IllegalArgumentException;

        $r98 = new java.lang.StringBuilder;

        specialinvoke $r98.<java.lang.StringBuilder: void <init>()>();

        $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Units of time variable <");

        $r100 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.lang.String timeVarUnitsString>;

        $r101 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r100);

        $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not a date unit.");

        $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r97.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r103);

        throw $r97;

     label02:
        $r15 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable latVar>;

        $r16 = virtualinvoke $r15.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("units");

        $r17 = virtualinvoke $r16.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z0 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isCompatible(java.lang.String,java.lang.String)>($r17, "degrees_north");

        if $z0 != 0 goto label03;

        $r91 = new java.lang.IllegalArgumentException;

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Units of lat var <");

        $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not compatible with \"degrees_north\".");

        $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r91.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r96);

        throw $r91;

     label03:
        $r18 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable lonVar>;

        $r19 = virtualinvoke $r18.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("units");

        $r20 = virtualinvoke $r19.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z1 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isCompatible(java.lang.String,java.lang.String)>($r20, "degrees_east");

        if $z1 != 0 goto label04;

        $r85 = new java.lang.IllegalArgumentException;

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Units of lon var <");

        $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not compatible with \"degrees_east\".");

        $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r85.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r90);

        throw $r85;

     label04:
        $r21 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable elevVar>;

        $r22 = virtualinvoke $r21.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("units");

        $r23 = virtualinvoke $r22.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z2 = staticinvoke <ucar.nc2.units.SimpleUnit: boolean isCompatible(java.lang.String,java.lang.String)>($r23, "meters");

        if $z2 != 0 goto label05;

        $r79 = new java.lang.IllegalArgumentException;

        $r80 = new java.lang.StringBuilder;

        specialinvoke $r80.<java.lang.StringBuilder: void <init>()>();

        $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Units of elev var <");

        $r82 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r83 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("> not compatible with \"meters\".");

        $r84 = virtualinvoke $r83.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r79.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r84);

        throw $r79;

     label05:
        $d0 = staticinvoke <ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: double getMetersConversionFactor(java.lang.String)>($r23);

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: double elevVarUnitsConversionFactor> = $d0;

     label06:
        goto label08;

     label07:
        $r105 := @caughtexception;

        $r106 = new java.lang.IllegalArgumentException;

        $r107 = new java.lang.StringBuilder;

        specialinvoke $r107.<java.lang.StringBuilder: void <init>()>();

        $r108 = virtualinvoke $r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception on getMetersConversionFactor() for the units of elev var <");

        $r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r110 = virtualinvoke $r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(">.");

        $r111 = virtualinvoke $r110.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r106.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r111);

        throw $r106;

     label08:
        $r24 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $z3 = virtualinvoke $r24.<ucar.nc2.dataset.NetcdfDataset: boolean hasUnlimitedDimension()>();

        if $z3 == 0 goto label11;

        $r66 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r67 = virtualinvoke $r66.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Dimension getUnlimitedDimension()>();

        $r68 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Dimension timeDim>;

        $z9 = virtualinvoke $r67.<ucar.nc2.Dimension: boolean equals(java.lang.Object)>($r68);

        if $z9 == 0 goto label11;

        $r69 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r70 = virtualinvoke $r69.<ucar.nc2.dataset.NetcdfDataset: java.lang.Object sendIospMessage(java.lang.Object)>("AddRecordStructure");

        if $r70 == null goto label09;

        $r74 = (java.lang.Boolean) $r70;

        $z10 = virtualinvoke $r74.<java.lang.Boolean: boolean booleanValue()>();

        if $z10 == 0 goto label09;

        $r75 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r76 = virtualinvoke $r75.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r77 = virtualinvoke $r76.<ucar.nc2.Group: ucar.nc2.Variable findVariable(java.lang.String)>("record");

        $r78 = (ucar.nc2.Structure) $r77;

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Structure recordVar> = $r78;

        goto label10;

     label09:
        $r71 = new ucar.nc2.StructurePseudo;

        $r73 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r72 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Dimension timeDim>;

        specialinvoke $r71.<ucar.nc2.StructurePseudo: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,java.lang.String,ucar.nc2.Dimension)>($r73, null, "record", $r72);

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Structure recordVar> = $r71;

     label10:
        goto label12;

     label11:
        $r25 = new ucar.nc2.StructurePseudo;

        $r27 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r26 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Dimension timeDim>;

        specialinvoke $r25.<ucar.nc2.StructurePseudo: void <init>(ucar.nc2.NetcdfFile,ucar.nc2.Group,java.lang.String,ucar.nc2.Dimension)>($r27, null, "record", $r26);

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Structure recordVar> = $r25;

     label12:
        $r112 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Structure recordVar>;

        $r113 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable elevVar>;

        $r114 = virtualinvoke $r113.<ucar.nc2.Variable: java.lang.String getName()>();

        $r115 = virtualinvoke $r112.<ucar.nc2.Structure: ucar.nc2.Variable findVariable(java.lang.String)>($r114);

        $r116 = virtualinvoke $r115.<ucar.nc2.Variable: ucar.nc2.Attribute findAttribute(java.lang.String)>("units");

        $r117 = virtualinvoke $r116.<ucar.nc2.Attribute: java.lang.String getStringValue()>();

        $z11 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>($r117);

        if $z11 != 0 goto label13;

        $r65 = new ucar.nc2.Attribute;

        specialinvoke $r65.<ucar.nc2.Attribute: void <init>(java.lang.String,java.lang.String)>("units", $r23);

        virtualinvoke $r115.<ucar.nc2.Variable: ucar.nc2.Attribute addAttribute(ucar.nc2.Attribute)>($r65);

     label13:
        $r28 = new java.util.HashMap;

        specialinvoke $r28.<java.util.HashMap: void <init>()>();

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.util.HashMap trajectoryVarsMap> = $r28;

        $r29 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $r30 = virtualinvoke $r29.<ucar.nc2.dataset.NetcdfDataset: ucar.nc2.Group getRootGroup()>();

        $r31 = virtualinvoke $r30.<ucar.nc2.Group: java.util.List getVariables()>();

        $r32 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>();

     label14:
        $z12 = interfaceinvoke $r32.<java.util.Iterator: boolean hasNext()>();

        if $z12 == 0 goto label18;

        $r52 = interfaceinvoke $r32.<java.util.Iterator: java.lang.Object next()>();

        r53 = (ucar.nc2.Variable) $r52;

        $i4 = virtualinvoke r53.<ucar.nc2.Variable: int getRank()>();

        if $i4 <= 0 goto label17;

        $r54 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable timeVar>;

        $z4 = virtualinvoke r53.<ucar.nc2.Variable: boolean equals(java.lang.Object)>($r54);

        if $z4 != 0 goto label17;

        $r55 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable latVar>;

        $z5 = virtualinvoke r53.<ucar.nc2.Variable: boolean equals(java.lang.Object)>($r55);

        if $z5 != 0 goto label17;

        $r56 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable lonVar>;

        $z6 = virtualinvoke r53.<ucar.nc2.Variable: boolean equals(java.lang.Object)>($r56);

        if $z6 != 0 goto label17;

        $r57 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable elevVar>;

        $z7 = virtualinvoke r53.<ucar.nc2.Variable: boolean equals(java.lang.Object)>($r57);

        if $z7 != 0 goto label17;

        $r58 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Structure recordVar>;

        if $r58 != null goto label15;

        goto label16;

     label15:
        $r59 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Structure recordVar>;

        $z8 = virtualinvoke r53.<ucar.nc2.Variable: boolean equals(java.lang.Object)>($r59);

        if $z8 != 0 goto label17;

     label16:
        $r60 = new ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$MyTypedDataVariable;

        $r61 = new ucar.nc2.dataset.VariableDS;

        specialinvoke $r61.<ucar.nc2.dataset.VariableDS: void <init>(ucar.nc2.Group,ucar.nc2.Variable,boolean)>(null, r53, 1);

        specialinvoke $r60.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$MyTypedDataVariable: void <init>(ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset,ucar.nc2.dataset.VariableDS,ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$1)>(r0, $r61, null);

        $r62 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.util.List dataVariables>;

        interfaceinvoke $r62.<java.util.List: boolean add(java.lang.Object)>($r60);

        $r63 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.util.HashMap trajectoryVarsMap>;

        $r64 = virtualinvoke $r60.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$MyTypedDataVariable: java.lang.String getName()>();

        virtualinvoke $r63.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r64, $r60);

     label17:
        goto label14;

     label18:
        $r33 = new ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$SingleTrajectory;

        $r41 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.lang.String trajectoryId>;

        $i1 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: int trajectoryNumPoint>;

        $r40 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable timeVar>;

        $r39 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.lang.String timeVarUnitsString>;

        $r38 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable latVar>;

        $r37 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable lonVar>;

        $r36 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Variable elevVar>;

        $r35 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.util.List dataVariables>;

        $r34 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.util.HashMap trajectoryVarsMap>;

        specialinvoke $r33.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$SingleTrajectory: void <init>(ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset,java.lang.String,int,ucar.nc2.Variable,java.lang.String,ucar.nc2.Variable,ucar.nc2.Variable,ucar.nc2.Variable,java.util.List,java.util.HashMap,ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$1)>(r0, $r41, $i1, $r40, $r39, $r38, $r37, $r36, $r35, $r34, null);

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dt.TrajectoryObsDatatype trajectory> = $r33;

        $r42 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dt.TrajectoryObsDatatype trajectory>;

        $r43 = interfaceinvoke $r42.<ucar.nc2.dt.TrajectoryObsDatatype: java.util.Date getTime(int)>(0);

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.util.Date startDate> = $r43;

        $r44 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dt.TrajectoryObsDatatype trajectory>;

        $i2 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: int trajectoryNumPoint>;

        $i3 = $i2 - 1;

        $r45 = interfaceinvoke $r44.<ucar.nc2.dt.TrajectoryObsDatatype: java.util.Date getTime(int)>($i3);

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.util.Date endDate> = $r45;

        $r46 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dt.TrajectoryObsDatatype trajectory>;

        $r48 = (ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$SingleTrajectory) $r46;

        $r47 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.util.Date startDate>;

        virtualinvoke $r48.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$SingleTrajectory: void setStartDate(java.util.Date)>($r47);

        $r49 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dt.TrajectoryObsDatatype trajectory>;

        $r51 = (ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$SingleTrajectory) $r49;

        $r50 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.util.Date endDate>;

        virtualinvoke $r51.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$SingleTrajectory: void setEndDate(java.util.Date)>($r50);

        return;

        catch java.lang.Exception from label05 to label06 with label07;
    }

    protected static double getMetersConversionFactor(java.lang.String) throws java.lang.Exception
    {
        ucar.nc2.units.SimpleUnit $r1, $r2;
        java.lang.String r0;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <ucar.nc2.units.SimpleUnit: ucar.nc2.units.SimpleUnit factoryWithExceptions(java.lang.String)>(r0);

        $r2 = <ucar.nc2.units.SimpleUnit: ucar.nc2.units.SimpleUnit meterUnit>;

        $d0 = virtualinvoke $r1.<ucar.nc2.units.SimpleUnit: double convertTo(double,ucar.nc2.units.SimpleUnit)>(1.0, $r2);

        return $d0;
    }

    protected void setStartDate()
    {
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset r0;

        r0 := @this: ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset;

        return;
    }

    protected void setEndDate()
    {
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset r0;

        r0 := @this: ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset;

        return;
    }

    protected void setBoundingBox()
    {
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset r0;

        r0 := @this: ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset;

        return;
    }

    public java.util.List getTrajectoryIds()
    {
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset r1;
        java.lang.String $r2;
        java.util.ArrayList $r0;

        r1 := @this: ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.lang.String trajectoryId>;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        return $r0;
    }

    public java.util.List getTrajectories()
    {
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset r1;
        ucar.nc2.dt.TrajectoryObsDatatype $r2;
        java.util.ArrayList $r0;

        r1 := @this: ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r2 = r1.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dt.TrajectoryObsDatatype trajectory>;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r2);

        return $r0;
    }

    public ucar.nc2.dt.TrajectoryObsDatatype getTrajectory(java.lang.String)
    {
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset r1;
        java.lang.String r0, $r2;
        ucar.nc2.dt.TrajectoryObsDatatype $r3;
        boolean $z0;

        r1 := @this: ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset;

        r0 := @parameter0: java.lang.String;

        $r2 = r1.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.lang.String trajectoryId>;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r1.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dt.TrajectoryObsDatatype trajectory>;

        return $r3;
    }

    public java.lang.String getDetailInfo()
    {
        java.lang.StringBuffer $r0;
        java.lang.String $r5, $r8, $r11, $r12, $r16, $r19;
        boolean $z0;
        java.util.Iterator $r10;
        java.util.List $r9;
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset r3;
        java.lang.StringBuilder $r1, $r2, $r6, $r7, $r13, $r14, $r17, $r18;
        java.lang.Class $r4;
        java.lang.Object $r15;

        r3 := @this: ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset;

        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("TrajectoryObsDataset\n");

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  adapter   = ");

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r8);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("  trajectories:\n");

        $r9 = virtualinvoke r3.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.util.List getTrajectoryIds()>();

        $r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r10.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      ");

        $r15 = interfaceinvoke $r10.<java.util.Iterator: java.lang.Object next()>();

        $r16 = (java.lang.String) $r15;

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r19);

        goto label1;

     label2:
        $r11 = specialinvoke r3.<ucar.nc2.dt.TypedDatasetImpl: java.lang.String getDetailInfo()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r11);

        $r12 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;
    }

    public boolean syncExtend()
    {
        java.util.Date $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4;
        ucar.nc2.dt.TrajectoryObsDatatype $r4, $r6, $r8;
        boolean $z0, $z1;
        java.io.IOException $r11, $r12;
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$SingleTrajectory $r5, $r10;
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset r0;
        ucar.nc2.Dimension $r3;
        ucar.nc2.dataset.NetcdfDataset $r1, $r2;

        r0 := @this: ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset;

        $r1 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $z0 = virtualinvoke $r1.<ucar.nc2.dataset.NetcdfDataset: boolean hasUnlimitedDimension()>();

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $r2 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        $z1 = virtualinvoke $r2.<ucar.nc2.dataset.NetcdfDataset: boolean syncExtend()>();

        if $z1 != 0 goto label03;

     label02:
        return 0;

     label03:
        goto label05;

     label04:
        $r12 := @caughtexception;

        return 0;

     label05:
        $r3 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.Dimension timeDim>;

        $i0 = virtualinvoke $r3.<ucar.nc2.Dimension: int getLength()>();

        $i1 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: int trajectoryNumPoint>;

        if $i1 < $i0 goto label06;

        return 0;

     label06:
        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: int trajectoryNumPoint> = $i0;

        $r4 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dt.TrajectoryObsDatatype trajectory>;

        $r5 = (ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$SingleTrajectory) $r4;

        $i2 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: int trajectoryNumPoint>;

        virtualinvoke $r5.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$SingleTrajectory: void setNumPoints(int)>($i2);

     label07:
        $r6 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dt.TrajectoryObsDatatype trajectory>;

        $i3 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: int trajectoryNumPoint>;

        $i4 = $i3 - 1;

        $r7 = interfaceinvoke $r6.<ucar.nc2.dt.TrajectoryObsDatatype: java.util.Date getTime(int)>($i4);

        r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.util.Date endDate> = $r7;

     label08:
        goto label10;

     label09:
        $r11 := @caughtexception;

        return 0;

     label10:
        $r8 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dt.TrajectoryObsDatatype trajectory>;

        $r10 = (ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$SingleTrajectory) $r8;

        $r9 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: java.util.Date endDate>;

        virtualinvoke $r10.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset$SingleTrajectory: void setEndDate(java.util.Date)>($r9);

        return 1;

        catch java.io.IOException from label01 to label02 with label04;
        catch java.io.IOException from label07 to label08 with label09;
    }

    static ucar.nc2.dataset.NetcdfDataset access$400(ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset)
    {
        ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset r0;
        ucar.nc2.dataset.NetcdfDataset $r1;

        r0 := @parameter0: ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset;

        $r1 = r0.<ucar.nc2.dt.trajectory.SingleTrajectoryObsDataset: ucar.nc2.dataset.NetcdfDataset ncfile>;

        return $r1;
    }
}
