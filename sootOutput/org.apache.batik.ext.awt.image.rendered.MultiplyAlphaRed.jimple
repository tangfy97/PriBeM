public class org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed extends org.apache.batik.ext.awt.image.rendered.AbstractRed
{

    public void <init>(org.apache.batik.ext.awt.image.rendered.CachableRed, org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.Rectangle $r4;
        org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed r0;
        java.awt.image.SampleModel $r6;
        java.util.List $r3;
        org.apache.batik.ext.awt.image.rendered.CachableRed r1, r2;
        java.awt.image.ColorModel $r5;
        int $i0, $i1;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r2 := @parameter1: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r3 = staticinvoke <org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed: java.util.List makeList(org.apache.batik.ext.awt.image.rendered.CachableRed,org.apache.batik.ext.awt.image.rendered.CachableRed)>(r1, r2);

        $r4 = staticinvoke <org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed: java.awt.Rectangle makeBounds(org.apache.batik.ext.awt.image.rendered.CachableRed,org.apache.batik.ext.awt.image.rendered.CachableRed)>(r1, r2);

        $r5 = staticinvoke <org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed: java.awt.image.ColorModel fixColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r1);

        $r6 = staticinvoke <org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed: java.awt.image.SampleModel fixSampleModel(org.apache.batik.ext.awt.image.rendered.CachableRed)>(r1);

        $i0 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridXOffset()>();

        $i1 = interfaceinvoke r1.<java.awt.image.RenderedImage: int getTileGridYOffset()>();

        specialinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: void <init>(java.util.List,java.awt.Rectangle,java.awt.image.ColorModel,java.awt.image.SampleModel,int,int,java.util.Map)>($r3, $r4, $r5, $r6, $i0, $i1, null);

        return;
    }

    public boolean is_INT_PACK_BYTE_COMP(java.awt.image.SampleModel, java.awt.image.SampleModel)
    {
        java.awt.image.ComponentSampleModel r4;
        org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed r5;
        java.awt.image.SampleModel r0, r1;
        int[] $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i10;
        java.awt.image.SinglePixelPackedSampleModel r2;
        boolean $z0, $z1;

        r5 := @this: org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed;

        r0 := @parameter0: java.awt.image.SampleModel;

        r1 := @parameter1: java.awt.image.SampleModel;

        $z0 = r0 instanceof java.awt.image.SinglePixelPackedSampleModel;

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $z1 = r1 instanceof java.awt.image.ComponentSampleModel;

        if $z1 != 0 goto label02;

        return 0;

     label02:
        $i0 = virtualinvoke r0.<java.awt.image.SampleModel: int getDataType()>();

        if $i0 == 3 goto label03;

        return 0;

     label03:
        $i1 = virtualinvoke r1.<java.awt.image.SampleModel: int getDataType()>();

        if $i1 == 0 goto label04;

        return 0;

     label04:
        r2 = (java.awt.image.SinglePixelPackedSampleModel) r0;

        $r3 = virtualinvoke r2.<java.awt.image.SinglePixelPackedSampleModel: int[] getBitMasks()>();

        $i2 = lengthof $r3;

        if $i2 == 4 goto label05;

        return 0;

     label05:
        $i3 = $r3[0];

        if $i3 == 16711680 goto label06;

        return 0;

     label06:
        $i4 = $r3[1];

        $i10 = (int) 65280;

        if $i4 == $i10 goto label07;

        return 0;

     label07:
        $i5 = $r3[2];

        if $i5 == 255 goto label08;

        return 0;

     label08:
        $i6 = $r3[3];

        if $i6 == -16777216 goto label09;

        return 0;

     label09:
        r4 = (java.awt.image.ComponentSampleModel) r1;

        $i7 = virtualinvoke r4.<java.awt.image.SampleModel: int getNumBands()>();

        if $i7 == 1 goto label10;

        return 0;

     label10:
        $i8 = virtualinvoke r4.<java.awt.image.ComponentSampleModel: int getPixelStride()>();

        if $i8 == 1 goto label11;

        return 0;

     label11:
        return 1;
    }

    public java.awt.image.WritableRaster INT_PACK_BYTE_COMP_Impl(java.awt.image.WritableRaster)
    {
        byte[] r17;
        java.awt.image.DataBufferByte r15;
        java.awt.image.SampleModel $r12, $r18;
        java.util.Vector $r1, $r4;
        byte $b25, $b38;
        byte[][] $r16;
        org.apache.batik.ext.awt.image.rendered.CachableRed r3, r6;
        java.awt.image.DataBufferInt r21;
        short s63, s69, $s71, $s84;
        java.awt.image.Raster $r11;
        java.awt.image.SinglePixelPackedSampleModel r19;
        int[][] $r22;
        org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed r0;
        int[] r23;
        boolean $z0;
        java.awt.image.DataBuffer $r14, $r20;
        java.awt.Rectangle $r8, $r9, $r10;
        java.awt.image.ComponentSampleModel r13;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, $i20, $i21, $i22, $i23, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, i59, i60, i61, i62, i64, i65, i66, i67, i68, i70, $i72, $i74, $i75, $i77, $i78, $i80, $i81, $i83, $i85, $i87;
        java.awt.image.ColorModel $r24;
        java.lang.Object $r2, $r5;
        java.awt.image.WritableRaster r7;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed;

        r7 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        r3 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r2;

        $r4 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object get(int)>(1);

        r6 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r5;

        interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(r7);

        $r8 = virtualinvoke r7.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r9 = interfaceinvoke r6.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r10 = virtualinvoke $r8.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r9);

        $r11 = interfaceinvoke r6.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r10);

        $r12 = virtualinvoke $r11.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r13 = (java.awt.image.ComponentSampleModel) $r12;

        $i0 = virtualinvoke r13.<java.awt.image.ComponentSampleModel: int getScanlineStride()>();

        $r14 = virtualinvoke $r11.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r15 = (java.awt.image.DataBufferByte) $r14;

        $i1 = virtualinvoke r15.<java.awt.image.DataBuffer: int getOffset()>();

        $i2 = $r10.<java.awt.Rectangle: int x>;

        $i3 = virtualinvoke $r11.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i4 = $i2 - $i3;

        $i5 = $r10.<java.awt.Rectangle: int y>;

        $i6 = virtualinvoke $r11.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i7 = $i5 - $i6;

        $i8 = virtualinvoke r13.<java.awt.image.ComponentSampleModel: int getOffset(int,int)>($i4, $i7);

        i9 = $i1 + $i8;

        $r16 = virtualinvoke r15.<java.awt.image.DataBufferByte: byte[][] getBankData()>();

        r17 = $r16[0];

        $r18 = virtualinvoke r7.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        r19 = (java.awt.image.SinglePixelPackedSampleModel) $r18;

        $i10 = virtualinvoke r19.<java.awt.image.SinglePixelPackedSampleModel: int getScanlineStride()>();

        $r20 = virtualinvoke r7.<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>();

        r21 = (java.awt.image.DataBufferInt) $r20;

        $i11 = virtualinvoke r21.<java.awt.image.DataBuffer: int getOffset()>();

        $i12 = $r10.<java.awt.Rectangle: int x>;

        $i13 = virtualinvoke r7.<java.awt.image.Raster: int getSampleModelTranslateX()>();

        $i14 = $i12 - $i13;

        $i15 = $r10.<java.awt.Rectangle: int y>;

        $i16 = virtualinvoke r7.<java.awt.image.Raster: int getSampleModelTranslateY()>();

        $i17 = $i15 - $i16;

        $i18 = virtualinvoke r19.<java.awt.image.SinglePixelPackedSampleModel: int getOffset(int,int)>($i14, $i17);

        i19 = $i11 + $i18;

        $r22 = virtualinvoke r21.<java.awt.image.DataBufferInt: int[][] getBankData()>();

        r23 = $r22[0];

        $r24 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $z0 = virtualinvoke $r24.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z0 == 0 goto label05;

        i59 = 0;

        goto label04;

     label01:
        $i34 = i59 * $i10;

        i60 = i19 + $i34;

        $i35 = i59 * $i0;

        i61 = i9 + $i35;

        $i36 = $r10.<java.awt.Rectangle: int width>;

        i62 = i60 + $i36;

        goto label03;

     label02:
        $i37 = i61;

        i61 = i61 + 1;

        $b38 = r17[$i37];

        $s71 = (short) $b38;

        s63 = $s71 & 255;

        i64 = r23[i60];

        $i39 = i64 >>> 24;

        $i72 = (int) s63;

        $i40 = $i39 * $i72;

        $i74 = (int) 65280;

        $i41 = $i40 & $i74;

        $i47 = $i41 << 16;

        $i42 = i64 >>> 16;

        $i43 = $i42 & 255;

        $i75 = (int) s63;

        $i44 = $i43 * $i75;

        $i77 = (int) 65280;

        $i45 = $i44 & $i77;

        $i46 = $i45 << 8;

        $i52 = $i47 | $i46;

        $i48 = i64 >>> 8;

        $i49 = $i48 & 255;

        $i78 = (int) s63;

        $i50 = $i49 * $i78;

        $i80 = (int) 65280;

        $i51 = $i50 & $i80;

        $i57 = $i52 | $i51;

        $i53 = i64 & 255;

        $i81 = (int) s63;

        $i54 = $i53 * $i81;

        $i83 = (int) 65280;

        $i55 = $i54 & $i83;

        $i56 = $i55 >> 8;

        $i58 = $i57 | $i56;

        r23[i60] = $i58;

        i60 = i60 + 1;

     label03:
        if i60 < i62 goto label02;

        i59 = i59 + 1;

     label04:
        $i33 = $r10.<java.awt.Rectangle: int height>;

        if i59 < $i33 goto label01;

        goto label10;

     label05:
        i65 = 0;

        goto label09;

     label06:
        $i21 = i65 * $i10;

        i66 = i19 + $i21;

        $i22 = i65 * $i0;

        i67 = i9 + $i22;

        $i23 = $r10.<java.awt.Rectangle: int width>;

        i68 = i66 + $i23;

        goto label08;

     label07:
        $i24 = i67;

        i67 = i67 + 1;

        $b25 = r17[$i24];

        $s84 = (short) $b25;

        s69 = $s84 & 255;

        $i26 = r23[i66];

        i70 = $i26 >>> 24;

        $i85 = (int) s69;

        $i27 = i70 * $i85;

        $i87 = (int) 65280;

        $i28 = $i27 & $i87;

        $i31 = $i28 << 16;

        $i29 = r23[i66];

        $i30 = $i29 & 16777215;

        $i32 = $i31 | $i30;

        r23[i66] = $i32;

        i66 = i66 + 1;

     label08:
        if i66 < i68 goto label07;

        i65 = i65 + 1;

     label09:
        $i20 = $r10.<java.awt.Rectangle: int height>;

        if i65 < $i20 goto label06;

     label10:
        return r7;
    }

    public java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)
    {
        java.awt.image.SampleModel $r7, $r8, $r22, $r23;
        java.util.Vector $r1, $r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r3, r6;
        java.awt.image.Raster $r21;
        org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed r0;
        int[] $r15, $r24, $r25, $r26, $r27, r29, r30, r31;
        boolean $z0, $z1, $z2, $z3;
        java.awt.Rectangle $r12, $r13, $r14, $r17, $r18, $r19, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, i69, i70, i71, i72, i73, i74, i75, i76, i77, i78, i79, i80, i81, $i82, $i83, $i84, $i85, i86, i87, i88, i89;
        java.awt.image.ColorModel $r9;
        java.lang.Object $r2, $r5;
        java.awt.image.WritableRaster r10, $r11, $r16, $r28;

        r0 := @this: org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed;

        r10 := @parameter0: java.awt.image.WritableRaster;

        $r1 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(0);

        r3 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r2;

        $r4 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.AbstractRed: java.util.Vector getSources()>();

        $r5 = virtualinvoke $r4.<java.util.Vector: java.lang.Object get(int)>(1);

        r6 = (org.apache.batik.ext.awt.image.rendered.CachableRed) $r5;

        $r7 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $r8 = interfaceinvoke r6.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $z0 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed: boolean is_INT_PACK_BYTE_COMP(java.awt.image.SampleModel,java.awt.image.SampleModel)>($r7, $r8);

        if $z0 == 0 goto label01;

        $r28 = virtualinvoke r0.<org.apache.batik.ext.awt.image.rendered.MultiplyAlphaRed: java.awt.image.WritableRaster INT_PACK_BYTE_COMP_Impl(java.awt.image.WritableRaster)>(r10);

        return $r28;

     label01:
        $r9 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $z1 = virtualinvoke $r9.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z1 == 0 goto label24;

        interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>(r10);

        $r17 = virtualinvoke r10.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r18 = interfaceinvoke r6.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $z2 = virtualinvoke $r17.<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>($r18);

        if $z2 == 0 goto label02;

        $r19 = interfaceinvoke r6.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r20 = virtualinvoke $r17.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r19);

        goto label03;

     label02:
        return r10;

     label03:
        r29 = null;

        r30 = null;

        $r21 = interfaceinvoke r6.<java.awt.image.RenderedImage: java.awt.image.Raster getData(java.awt.Rectangle)>($r20);

        i17 = $r20.<java.awt.Rectangle: int width>;

        $r22 = virtualinvoke r10.<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>();

        $i18 = virtualinvoke $r22.<java.awt.image.SampleModel: int getNumBands()>();

        $z3 = virtualinvoke $r9.<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>();

        if $z3 == 0 goto label18;

        i69 = $r20.<java.awt.Rectangle: int y>;

        goto label17;

     label04:
        $i33 = $r20.<java.awt.Rectangle: int x>;

        $r26 = virtualinvoke r10.<java.awt.image.Raster: int[] getPixels(int,int,int,int,int[])>($i33, i69, i17, 1, r29);

        r29 = $r26;

        $i34 = $r20.<java.awt.Rectangle: int x>;

        $r27 = virtualinvoke $r21.<java.awt.image.Raster: int[] getSamples(int,int,int,int,int,int[])>($i34, i69, i17, 1, 0, r30);

        r30 = $r27;

        i70 = 0;

        lookupswitch($i18)
        {
            case 2: goto label05;
            case 4: goto label08;
            default: goto label11;
        };

     label05:
        i71 = 0;

        goto label07;

     label06:
        $i54 = $r27[i71];

        i72 = $i54 & 255;

        $i55 = $r26[i70];

        $i56 = $i55 & 255;

        $i57 = $i56 * i72;

        $i58 = $i57 >> 8;

        $r26[i70] = $i58;

        i73 = i70 + 1;

        $i59 = $r26[i73];

        $i60 = $i59 & 255;

        $i61 = $i60 * i72;

        $i62 = $i61 >> 8;

        $r26[i73] = $i62;

        i70 = i73 + 1;

        i71 = i71 + 1;

     label07:
        $i53 = lengthof $r27;

        if i71 < $i53 goto label06;

        goto label16;

     label08:
        i74 = 0;

        goto label10;

     label09:
        $i36 = $r27[i74];

        i75 = $i36 & 255;

        $i37 = $r26[i70];

        $i38 = $i37 & 255;

        $i39 = $i38 * i75;

        $i40 = $i39 >> 8;

        $r26[i70] = $i40;

        i76 = i70 + 1;

        $i41 = $r26[i76];

        $i42 = $i41 & 255;

        $i43 = $i42 * i75;

        $i44 = $i43 >> 8;

        $r26[i76] = $i44;

        i77 = i76 + 1;

        $i45 = $r26[i77];

        $i46 = $i45 & 255;

        $i47 = $i46 * i75;

        $i48 = $i47 >> 8;

        $r26[i77] = $i48;

        i78 = i77 + 1;

        $i49 = $r26[i78];

        $i50 = $i49 & 255;

        $i51 = $i50 * i75;

        $i52 = $i51 >> 8;

        $r26[i78] = $i52;

        i70 = i78 + 1;

        i74 = i74 + 1;

     label10:
        $i35 = lengthof $r27;

        if i74 < $i35 goto label09;

        goto label16;

     label11:
        i79 = 0;

        goto label15;

     label12:
        $i64 = $r27[i79];

        i80 = $i64 & 255;

        i81 = 0;

        goto label14;

     label13:
        $i65 = $r26[i70];

        $i66 = $i65 & 255;

        $i67 = $i66 * i80;

        $i68 = $i67 >> 8;

        $r26[i70] = $i68;

        i70 = i70 + 1;

        i81 = i81 + 1;

     label14:
        if i81 < $i18 goto label13;

        i79 = i79 + 1;

     label15:
        $i63 = lengthof $r27;

        if i79 < $i63 goto label12;

     label16:
        $i82 = $r20.<java.awt.Rectangle: int x>;

        virtualinvoke r10.<java.awt.image.WritableRaster: void setPixels(int,int,int,int,int[])>($i82, i69, i17, 1, $r26);

        i69 = i69 + 1;

     label17:
        $i83 = $r20.<java.awt.Rectangle: int y>;

        $i84 = $r20.<java.awt.Rectangle: int height>;

        $i85 = $i83 + $i84;

        if i69 < $i85 goto label04;

        goto label23;

     label18:
        $r23 = interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i19 = virtualinvoke $r23.<java.awt.image.SampleModel: int getNumBands()>();

        i86 = $i19 - 1;

        i87 = $r20.<java.awt.Rectangle: int y>;

        goto label22;

     label19:
        $i23 = $r20.<java.awt.Rectangle: int x>;

        $r24 = virtualinvoke r10.<java.awt.image.Raster: int[] getSamples(int,int,int,int,int,int[])>($i23, i87, i17, 1, i86, r29);

        r29 = $r24;

        $i24 = $r20.<java.awt.Rectangle: int x>;

        $r25 = virtualinvoke $r21.<java.awt.image.Raster: int[] getSamples(int,int,int,int,int,int[])>($i24, i87, i17, 1, 0, r30);

        r30 = $r25;

        i88 = 0;

        goto label21;

     label20:
        $i26 = $r24[i88];

        $i29 = $i26 & 255;

        $i27 = $r25[i88];

        $i28 = $i27 & 255;

        $i30 = $i29 * $i28;

        $i31 = $i30 >> 8;

        $r24[i88] = $i31;

        i88 = i88 + 1;

     label21:
        $i25 = lengthof $r24;

        if i88 < $i25 goto label20;

        $i32 = $r20.<java.awt.Rectangle: int x>;

        virtualinvoke r10.<java.awt.image.WritableRaster: void setSamples(int,int,int,int,int,int[])>($i32, i87, i17, 1, i86, $r24);

        i87 = i87 + 1;

     label22:
        $i21 = $r20.<java.awt.Rectangle: int y>;

        $i20 = $r20.<java.awt.Rectangle: int height>;

        $i22 = $i21 + $i20;

        if i87 < $i22 goto label19;

     label23:
        return r10;

     label24:
        $i0 = virtualinvoke r10.<java.awt.image.Raster: int getNumBands()>();

        $i1 = $i0 - 1;

        r31 = newarray (int)[$i1];

        i89 = 0;

        goto label26;

     label25:
        r31[i89] = i89;

        i89 = i89 + 1;

     label26:
        $i2 = lengthof r31;

        if i89 < $i2 goto label25;

        $i3 = virtualinvoke r10.<java.awt.image.Raster: int getMinX()>();

        $i4 = virtualinvoke r10.<java.awt.image.Raster: int getMinY()>();

        $i5 = virtualinvoke r10.<java.awt.image.Raster: int getWidth()>();

        $i6 = virtualinvoke r10.<java.awt.image.Raster: int getHeight()>();

        $i7 = virtualinvoke r10.<java.awt.image.Raster: int getMinX()>();

        $i8 = virtualinvoke r10.<java.awt.image.Raster: int getMinY()>();

        $r11 = virtualinvoke r10.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>($i3, $i4, $i5, $i6, $i7, $i8, r31);

        interfaceinvoke r3.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>($r11);

        $r12 = virtualinvoke r10.<java.awt.image.Raster: java.awt.Rectangle getBounds()>();

        $r13 = interfaceinvoke r6.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r14 = virtualinvoke $r12.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r13);

        $r15 = newarray (int)[1];

        $i9 = virtualinvoke r10.<java.awt.image.Raster: int getNumBands()>();

        $i10 = $i9 - 1;

        $r15[0] = $i10;

        $i16 = $r14.<java.awt.Rectangle: int x>;

        $i15 = $r14.<java.awt.Rectangle: int y>;

        $i14 = $r14.<java.awt.Rectangle: int width>;

        $i13 = $r14.<java.awt.Rectangle: int height>;

        $i12 = $r14.<java.awt.Rectangle: int x>;

        $i11 = $r14.<java.awt.Rectangle: int y>;

        $r16 = virtualinvoke r10.<java.awt.image.WritableRaster: java.awt.image.WritableRaster createWritableChild(int,int,int,int,int,int,int[])>($i16, $i15, $i14, $i13, $i12, $i11, $r15);

        interfaceinvoke r6.<java.awt.image.RenderedImage: java.awt.image.WritableRaster copyData(java.awt.image.WritableRaster)>($r16);

        return r10;
    }

    public static java.util.List makeList(org.apache.batik.ext.awt.image.rendered.CachableRed, org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        org.apache.batik.ext.awt.image.rendered.CachableRed r1, r2;
        java.util.ArrayList $r0;

        r1 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r2 := @parameter1: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(2);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r2);

        return $r0;
    }

    public static java.awt.Rectangle makeBounds(org.apache.batik.ext.awt.image.rendered.CachableRed, org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.Rectangle $r1, $r3, $r4;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0, r2;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        r2 := @parameter1: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = interfaceinvoke r0.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r3 = interfaceinvoke r2.<org.apache.batik.ext.awt.image.rendered.CachableRed: java.awt.Rectangle getBounds()>();

        $r4 = virtualinvoke $r1.<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>($r3);

        return $r4;
    }

    public static java.awt.image.SampleModel fixSampleModel(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.image.PixelInterleavedSampleModel $r4;
        java.awt.image.SampleModel $r2;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel $r1;
        int[] r3;
        int $i0, $i1, $i2, i3, $i4, i5;
        boolean $z0;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $r2 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $z0 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 == 0 goto label1;

        return $r2;

     label1:
        $i0 = virtualinvoke $r2.<java.awt.image.SampleModel: int getWidth()>();

        $i1 = virtualinvoke $r2.<java.awt.image.SampleModel: int getHeight()>();

        $i2 = virtualinvoke $r2.<java.awt.image.SampleModel: int getNumBands()>();

        i3 = $i2 + 1;

        r3 = newarray (int)[i3];

        i5 = 0;

        goto label3;

     label2:
        r3[i5] = i5;

        i5 = i5 + 1;

     label3:
        if i5 < i3 goto label2;

        $r4 = new java.awt.image.PixelInterleavedSampleModel;

        $i4 = $i0 * i3;

        specialinvoke $r4.<java.awt.image.PixelInterleavedSampleModel: void <init>(int,int,int,int,int,int[])>(0, $i0, $i1, i3, $i4, r3);

        return $r4;
    }

    public static java.awt.image.ColorModel fixColorModel(org.apache.batik.ext.awt.image.rendered.CachableRed)
    {
        java.awt.color.ColorSpace $r4;
        java.awt.image.SampleModel $r2;
        java.awt.image.ComponentColorModel $r5;
        org.apache.batik.ext.awt.image.rendered.CachableRed r0;
        java.awt.image.ColorModel $r1;
        int[] r3;
        int $i0, i1, i2;
        boolean $z0;

        r0 := @parameter0: org.apache.batik.ext.awt.image.rendered.CachableRed;

        $r1 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.ColorModel getColorModel()>();

        $z0 = virtualinvoke $r1.<java.awt.image.ColorModel: boolean hasAlpha()>();

        if $z0 == 0 goto label1;

        return $r1;

     label1:
        $r2 = interfaceinvoke r0.<java.awt.image.RenderedImage: java.awt.image.SampleModel getSampleModel()>();

        $i0 = virtualinvoke $r2.<java.awt.image.SampleModel: int getNumBands()>();

        i1 = $i0 + 1;

        r3 = newarray (int)[i1];

        i2 = 0;

        goto label3;

     label2:
        r3[i2] = 8;

        i2 = i2 + 1;

     label3:
        if i2 < i1 goto label2;

        $r4 = virtualinvoke $r1.<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>();

        $r5 = new java.awt.image.ComponentColorModel;

        specialinvoke $r5.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,int[],boolean,boolean,int,int)>($r4, r3, 1, 0, 3, 0);

        return $r5;
    }
}
