public final class org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton extends java.lang.Object implements org.waveprotocol.wave.model.adt.ObservableSingleton, org.waveprotocol.wave.model.util.ElementListener
{
    private final org.waveprotocol.wave.model.document.util.DocEventRouter router;
    private final org.waveprotocol.wave.model.document.Doc$E container;
    private final java.lang.String valueTagName;
    private final org.waveprotocol.wave.model.adt.docbased.Factory valueFactory;
    private final org.waveprotocol.wave.model.util.CopyOnWriteSet listeners;
    private org.waveprotocol.wave.model.document.Doc$E currentElement;
    private java.lang.Object currentValue;
    static final boolean $assertionsDisabled;

    public static org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton create(org.waveprotocol.wave.model.document.util.DocEventRouter, org.waveprotocol.wave.model.document.Doc$E, java.lang.String, org.waveprotocol.wave.model.adt.docbased.Factory)
    {
        org.waveprotocol.wave.model.document.util.DocEventRouter r1;
        org.waveprotocol.wave.model.adt.docbased.Factory r4;
        java.lang.String r3;
        org.waveprotocol.wave.model.document.Doc$E r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton $r0;

        r1 := @parameter0: org.waveprotocol.wave.model.document.util.DocEventRouter;

        r2 := @parameter1: org.waveprotocol.wave.model.document.Doc$E;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: org.waveprotocol.wave.model.adt.docbased.Factory;

        $r0 = new org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        specialinvoke $r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: void <init>(org.waveprotocol.wave.model.document.util.DocEventRouter,org.waveprotocol.wave.model.document.Doc$E,java.lang.String,org.waveprotocol.wave.model.adt.docbased.Factory)>(r1, r2, r3, r4);

        interfaceinvoke r1.<org.waveprotocol.wave.model.document.util.DocEventRouter: org.waveprotocol.wave.model.document.util.ListenerRegistration addChildListener(java.lang.Object,org.waveprotocol.wave.model.util.ElementListener)>(r2, $r0);

        return $r0;
    }

    private void <init>(org.waveprotocol.wave.model.document.util.DocEventRouter, org.waveprotocol.wave.model.document.Doc$E, java.lang.String, org.waveprotocol.wave.model.adt.docbased.Factory)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r1;
        org.waveprotocol.wave.model.document.util.DocEventRouter r2;
        org.waveprotocol.wave.model.adt.docbased.Factory r5;
        java.lang.String r4;
        org.waveprotocol.wave.model.document.Doc$E r3, $r6;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        r2 := @parameter0: org.waveprotocol.wave.model.document.util.DocEventRouter;

        r3 := @parameter1: org.waveprotocol.wave.model.document.Doc$E;

        r4 := @parameter2: java.lang.String;

        r5 := @parameter3: org.waveprotocol.wave.model.adt.docbased.Factory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <org.waveprotocol.wave.model.util.CopyOnWriteSet: org.waveprotocol.wave.model.util.CopyOnWriteSet create()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners> = $r1;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.Object currentValue> = null;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.util.DocEventRouter router> = r2;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E container> = r3;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.String valueTagName> = r4;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.adt.docbased.Factory valueFactory> = r5;

        $r6 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E findCanonicalElement()>();

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E currentElement> = $r6;

        return;
    }

    public boolean hasValue()
    {
        org.waveprotocol.wave.model.document.Doc$E $r1;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;
        boolean $z0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E currentElement>;

        if $r1 == null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Object get()
    {
        java.lang.Object $r1;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: void maybeInitCurrentValue()>();

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.Object currentValue>;

        return $r1;
    }

    public java.lang.Object set(java.lang.Object)
    {
        java.lang.AssertionError $r15, $r17;
        java.util.Map $r3;
        java.lang.String $r10;
        org.waveprotocol.wave.model.document.ObservableDocument $r5, $r9;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r1;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.document.util.Point$El $r8;
        org.waveprotocol.wave.model.adt.docbased.Factory $r2;
        java.lang.Object r0, $r7, $r11, $r13, $r14;
        org.waveprotocol.wave.model.document.Doc$E $r4, $r6, r12, $r16;

        r1 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        r0 := @parameter0: java.lang.Object;

        $r2 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.adt.docbased.Factory valueFactory>;

        $r3 = staticinvoke <org.waveprotocol.wave.model.adt.docbased.Initializer$Helper: java.util.Map buildAttributes(java.lang.Object,org.waveprotocol.wave.model.adt.docbased.Factory)>(r0, $r2);

        $r4 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E container>;

        $r5 = virtualinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.ObservableDocument getDocument()>();

        $r6 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E container>;

        $r7 = interfaceinvoke $r5.<org.waveprotocol.wave.model.document.ObservableDocument: java.lang.Object getFirstChild(java.lang.Object)>($r6);

        $r8 = staticinvoke <org.waveprotocol.wave.model.document.util.Point: org.waveprotocol.wave.model.document.util.Point$El inElement(java.lang.Object,java.lang.Object)>($r4, $r7);

        $r9 = virtualinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.ObservableDocument getDocument()>();

        $r10 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.String valueTagName>;

        $r11 = interfaceinvoke $r9.<org.waveprotocol.wave.model.document.ObservableDocument: java.lang.Object createElement(org.waveprotocol.wave.model.document.util.Point,java.lang.String,java.util.Map)>($r8, $r10, $r3);

        r12 = (org.waveprotocol.wave.model.document.Doc$E) $r11;

        $z0 = <org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r16 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E currentElement>;

        if $r16 != null goto label1;

        $r17 = new java.lang.AssertionError;

        specialinvoke $r17.<java.lang.AssertionError: void <init>()>();

        throw $r17;

     label1:
        $z1 = <org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: boolean $assertionsDisabled>;

        if $z1 != 0 goto label2;

        $r14 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.Object currentValue>;

        if $r14 != null goto label2;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label2:
        specialinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: void cleanup()>();

        $r13 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.Object currentValue>;

        return $r13;
    }

    public void clear()
    {
        java.lang.AssertionError $r3, $r5;
        java.lang.Object $r2;
        org.waveprotocol.wave.model.document.Doc$E $r1, $r4;
        org.waveprotocol.wave.model.document.ObservableDocument $r6;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;
        boolean $z0, $z1;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: void cleanup()>();

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E findCanonicalElement()>();

        if $r1 == null goto label1;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.ObservableDocument getDocument()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.model.document.ObservableDocument: void deleteNode(java.lang.Object)>($r1);

     label1:
        $z0 = <org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label2;

        $r4 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E currentElement>;

        if $r4 == null goto label2;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label2:
        $z1 = <org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: boolean $assertionsDisabled>;

        if $z1 != 0 goto label3;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.Object currentValue>;

        if $r2 == null goto label3;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>()>();

        throw $r3;

     label3:
        return;
    }

    public void addListener(org.waveprotocol.wave.model.adt.ObservableSingleton$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.adt.ObservableSingleton$Listener r1;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        r1 := @parameter0: org.waveprotocol.wave.model.adt.ObservableSingleton$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void removeListener(org.waveprotocol.wave.model.adt.ObservableSingleton$Listener)
    {
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r2;
        org.waveprotocol.wave.model.adt.ObservableSingleton$Listener r1;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        r1 := @parameter0: org.waveprotocol.wave.model.adt.ObservableSingleton$Listener;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        virtualinvoke $r2.<org.waveprotocol.wave.model.util.CopyOnWriteSet: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void onElementAdded(org.waveprotocol.wave.model.document.Doc$E)
    {
        org.waveprotocol.wave.model.document.Doc$E r0, $r2, $r3;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r1;

        r1 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        r0 := @parameter0: org.waveprotocol.wave.model.document.Doc$E;

        $r2 = specialinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E findCanonicalElement()>();

        if r0 != $r2 goto label1;

        $r3 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E currentElement>;

        if r0 == $r3 goto label1;

        specialinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: void changeCurrentValue(org.waveprotocol.wave.model.document.Doc$E)>(r0);

     label1:
        return;
    }

    public void onElementRemoved(org.waveprotocol.wave.model.document.Doc$E)
    {
        org.waveprotocol.wave.model.document.Doc$E r0, $r2, $r3;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r1;

        r1 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        r0 := @parameter0: org.waveprotocol.wave.model.document.Doc$E;

        $r2 = r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E currentElement>;

        if r0 != $r2 goto label1;

        $r3 = specialinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E findCanonicalElement()>();

        specialinvoke r1.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: void changeCurrentValue(org.waveprotocol.wave.model.document.Doc$E)>($r3);

     label1:
        return;
    }

    org.waveprotocol.wave.model.document.util.DocEventRouter getEventRouter()
    {
        org.waveprotocol.wave.model.document.util.DocEventRouter $r1;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.util.DocEventRouter router>;

        return $r1;
    }

    org.waveprotocol.wave.model.document.ObservableDocument getDocument()
    {
        org.waveprotocol.wave.model.document.util.DocEventRouter $r1;
        org.waveprotocol.wave.model.document.ObservableDocument $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.util.DocEventRouter router>;

        $r2 = interfaceinvoke $r1.<org.waveprotocol.wave.model.document.util.DocEventRouter: org.waveprotocol.wave.model.document.ObservableDocument getDocument()>();

        return $r2;
    }

    private org.waveprotocol.wave.model.document.Doc$E findCanonicalElement()
    {
        java.lang.Object $r4;
        java.lang.String $r3;
        org.waveprotocol.wave.model.document.ObservableDocument $r1;
        org.waveprotocol.wave.model.document.Doc$E $r2, $r5;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        $r1 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.ObservableDocument getDocument()>();

        $r3 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.String valueTagName>;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E container>;

        $r4 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getElementWithTagName(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.String,java.lang.Object)>($r1, $r3, $r2);

        $r5 = (org.waveprotocol.wave.model.document.Doc$E) $r4;

        return $r5;
    }

    private void maybeInitCurrentValue()
    {
        org.waveprotocol.wave.model.document.util.DocEventRouter $r4;
        org.waveprotocol.wave.model.adt.docbased.Factory $r3;
        java.lang.Object $r1, $r6;
        org.waveprotocol.wave.model.document.Doc$E $r2, $r5;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        $r1 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.Object currentValue>;

        if $r1 != null goto label3;

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E currentElement>;

        if $r2 == null goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.adt.docbased.Factory valueFactory>;

        $r4 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.util.DocEventRouter getEventRouter()>();

        $r5 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E currentElement>;

        $r6 = interfaceinvoke $r3.<org.waveprotocol.wave.model.adt.docbased.Factory: java.lang.Object adapt(org.waveprotocol.wave.model.document.util.DocumentEventRouter,java.lang.Object)>($r4, $r5);

        goto label2;

     label1:
        $r6 = null;

     label2:
        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.Object currentValue> = $r6;

     label3:
        return;
    }

    private void changeCurrentValue(org.waveprotocol.wave.model.document.Doc$E)
    {
        java.lang.Object $r2, $r4;
        java.lang.AssertionError $r5;
        org.waveprotocol.wave.model.document.Doc$E r1, $r3;
        boolean $z0;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        r1 := @parameter0: org.waveprotocol.wave.model.document.Doc$E;

        $z0 = <org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r3 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E currentElement>;

        if $r3 != r1 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>()>();

        throw $r5;

     label1:
        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: void maybeInitCurrentValue()>();

        $r4 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.Object currentValue>;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E currentElement> = r1;

        r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.Object currentValue> = null;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: void maybeInitCurrentValue()>();

        $r2 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.Object currentValue>;

        specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: void maybeTriggerOnValueChanged(java.lang.Object,java.lang.Object)>($r4, $r2);

        return;
    }

    private void cleanup()
    {
        java.lang.Object $r5, $r10;
        java.lang.String $r4, $r9;
        org.waveprotocol.wave.model.document.Doc$E $r1, $r3, $r8, r11;
        org.waveprotocol.wave.model.document.ObservableDocument $r2, $r6, $r7;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        $r1 = specialinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E findCanonicalElement()>();

        $r2 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.ObservableDocument getDocument()>();

        $r4 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.String valueTagName>;

        $r3 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E container>;

        $r5 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getLastElementWithTagName(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.String,java.lang.Object)>($r2, $r4, $r3);

        r11 = (org.waveprotocol.wave.model.document.Doc$E) $r5;

     label1:
        if r11 == $r1 goto label2;

        $r6 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.ObservableDocument getDocument()>();

        interfaceinvoke $r6.<org.waveprotocol.wave.model.document.ObservableDocument: void deleteNode(java.lang.Object)>(r11);

        $r7 = virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.ObservableDocument getDocument()>();

        $r9 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: java.lang.String valueTagName>;

        $r8 = r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.document.Doc$E container>;

        $r10 = staticinvoke <org.waveprotocol.wave.model.document.util.DocHelper: java.lang.Object getLastElementWithTagName(org.waveprotocol.wave.model.document.ReadableDocument,java.lang.String,java.lang.Object)>($r7, $r9, $r8);

        r11 = (org.waveprotocol.wave.model.document.Doc$E) $r10;

        goto label1;

     label2:
        return;
    }

    private void maybeTriggerOnValueChanged(java.lang.Object, java.lang.Object)
    {
        java.util.Iterator $r4;
        org.waveprotocol.wave.model.util.CopyOnWriteSet $r3;
        java.lang.Object r0, r1, $r5;
        org.waveprotocol.wave.model.adt.ObservableSingleton$Listener r6;
        boolean $z0, $z1;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r2;

        r2 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <org.waveprotocol.wave.model.util.ValueUtils: boolean notEqual(java.lang.Object,java.lang.Object)>(r0, r1);

        if $z0 == 0 goto label2;

        $r3 = r2.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: org.waveprotocol.wave.model.util.CopyOnWriteSet listeners>;

        $r4 = virtualinvoke $r3.<org.waveprotocol.wave.model.util.CopyOnWriteSet: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (org.waveprotocol.wave.model.adt.ObservableSingleton$Listener) $r5;

        interfaceinvoke r6.<org.waveprotocol.wave.model.adt.ObservableSingleton$Listener: void onValueChanged(java.lang.Object,java.lang.Object)>(r0, r1);

        goto label1;

     label2:
        return;
    }

    public volatile void removeListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.adt.ObservableSingleton$Listener $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.adt.ObservableSingleton$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: void removeListener(org.waveprotocol.wave.model.adt.ObservableSingleton$Listener)>($r2);

        return;
    }

    public volatile void addListener(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.adt.ObservableSingleton$Listener $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.adt.ObservableSingleton$Listener) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: void addListener(org.waveprotocol.wave.model.adt.ObservableSingleton$Listener)>($r2);

        return;
    }

    public volatile void onElementRemoved(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.Doc$E $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.Doc$E) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: void onElementRemoved(org.waveprotocol.wave.model.document.Doc$E)>($r2);

        return;
    }

    public volatile void onElementAdded(java.lang.Object)
    {
        java.lang.Object r1;
        org.waveprotocol.wave.model.document.Doc$E $r2;
        org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton r0;

        r0 := @this: org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton;

        r1 := @parameter0: java.lang.Object;

        $r2 = (org.waveprotocol.wave.model.document.Doc$E) r1;

        virtualinvoke r0.<org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: void onElementAdded(org.waveprotocol.wave.model.document.Doc$E)>($r2);

        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Lorg/waveprotocol/wave/model/adt/docbased/DocumentBasedSingleton;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.waveprotocol.wave.model.adt.docbased.DocumentBasedSingleton: boolean $assertionsDisabled> = $z1;

        return;
    }
}
