public class org.springframework.expression.spel.support.ReflectiveMethodResolver extends java.lang.Object implements org.springframework.expression.MethodResolver
{
    private static java.lang.reflect.Method[] NO_METHODS;
    private java.util.Map filters;

    static void <clinit>()
    {
        java.lang.reflect.Method[] $r0;

        $r0 = newarray (java.lang.reflect.Method)[0];

        <org.springframework.expression.spel.support.ReflectiveMethodResolver: java.lang.reflect.Method[] NO_METHODS> = $r0;

        return;
    }

    public void <init>()
    {
        org.springframework.expression.spel.support.ReflectiveMethodResolver r0;

        r0 := @this: org.springframework.expression.spel.support.ReflectiveMethodResolver;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<org.springframework.expression.spel.support.ReflectiveMethodResolver: java.util.Map filters> = null;

        return;
    }

    public org.springframework.expression.MethodExecutor resolve(org.springframework.expression.EvaluationContext, java.lang.Object, java.lang.String, java.util.List) throws org.springframework.expression.AccessException
    {
        org.springframework.expression.spel.support.ReflectiveMethodExecutor $r21, $r22, $r26;
        java.util.Map $r5, $r31;
        org.springframework.expression.spel.SpelEvaluationException $r23;
        java.lang.Object[] $r24, $r30;
        java.util.ArrayList $r11, $r27;
        java.lang.String $r8, r9;
        org.springframework.expression.spel.support.ReflectiveMethodResolver r4;
        org.springframework.expression.spel.SpelMessage $r25;
        java.lang.Class[] $r10;
        org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind $r15, $r16, $r17, $r18, $r19, $r20;
        org.springframework.expression.spel.support.ReflectiveMethodResolver$1 $r39;
        org.springframework.expression.MethodFilter r6, $r37;
        java.lang.reflect.Method[] $r3, r7, $r29, r36;
        int[] r41;
        org.springframework.core.MethodParameter $r13;
        java.lang.reflect.Method r38, r40, r42, r43;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        org.springframework.expression.TypeConverter $r1;
        org.springframework.expression.AccessException $r34;
        org.springframework.expression.EvaluationContext r0;
        java.util.List r14, $r28;
        org.springframework.expression.EvaluationException $r33;
        org.springframework.core.convert.TypeDescriptor $r12;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, $i10, i11, i12;
        org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo r44;
        java.lang.Object r2, $r32;
        java.lang.Class $r35;

        r4 := @this: org.springframework.expression.spel.support.ReflectiveMethodResolver;

        r0 := @parameter0: org.springframework.expression.EvaluationContext;

        r2 := @parameter1: java.lang.Object;

        r9 := @parameter2: java.lang.String;

        r14 := @parameter3: java.util.List;

     label01:
        $r1 = interfaceinvoke r0.<org.springframework.expression.EvaluationContext: org.springframework.expression.TypeConverter getTypeConverter()>();

        $z0 = r2 instanceof java.lang.Class;

        if $z0 == 0 goto label02;

        $r35 = (java.lang.Class) r2;

        goto label03;

     label02:
        $r35 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

     label03:
        $r3 = virtualinvoke $r35.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        r36 = $r3;

        $r5 = r4.<org.springframework.expression.spel.support.ReflectiveMethodResolver: java.util.Map filters>;

        if $r5 == null goto label04;

        $r31 = r4.<org.springframework.expression.spel.support.ReflectiveMethodResolver: java.util.Map filters>;

        $r32 = interfaceinvoke $r31.<java.util.Map: java.lang.Object get(java.lang.Object)>($r35);

        $r37 = (org.springframework.expression.MethodFilter) $r32;

        goto label05;

     label04:
        $r37 = null;

     label05:
        r6 = $r37;

        if $r37 == null goto label09;

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>()>();

        i8 = lengthof $r3;

        i9 = 0;

        goto label07;

     label06:
        r38 = $r3[i9];

        interfaceinvoke $r27.<java.util.List: boolean add(java.lang.Object)>(r38);

        i9 = i9 + 1;

     label07:
        if i9 < i8 goto label06;

        $r28 = interfaceinvoke r6.<org.springframework.expression.MethodFilter: java.util.List filter(java.util.List)>($r27);

        $z4 = staticinvoke <org.springframework.util.CollectionUtils: boolean isEmpty(java.util.Collection)>($r28);

        if $z4 == 0 goto label08;

        r36 = <org.springframework.expression.spel.support.ReflectiveMethodResolver: java.lang.reflect.Method[] NO_METHODS>;

        goto label09;

     label08:
        $i7 = interfaceinvoke $r28.<java.util.List: int size()>();

        $r29 = newarray (java.lang.reflect.Method)[$i7];

        $r30 = interfaceinvoke $r28.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r29);

        r36 = (java.lang.reflect.Method[]) $r30;

     label09:
        $r39 = new org.springframework.expression.spel.support.ReflectiveMethodResolver$1;

        specialinvoke $r39.<org.springframework.expression.spel.support.ReflectiveMethodResolver$1: void <init>(org.springframework.expression.spel.support.ReflectiveMethodResolver)>(r4);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r36, $r39);

        r40 = null;

        r41 = (int[]) null;

        r42 = null;

        z5 = 0;

        r7 = r36;

        $i10 = lengthof r36;

        i11 = 0;

        goto label21;

     label10:
        r43 = r7[i11];

        $z1 = virtualinvoke r43.<java.lang.reflect.Method: boolean isBridge()>();

        if $z1 == 0 goto label11;

        goto label20;

     label11:
        $r8 = virtualinvoke r43.<java.lang.reflect.Method: java.lang.String getName()>();

        $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z2 == 0 goto label20;

        $r10 = virtualinvoke r43.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r11 = new java.util.ArrayList;

        $i0 = lengthof $r10;

        specialinvoke $r11.<java.util.ArrayList: void <init>(int)>($i0);

        i12 = 0;

        goto label13;

     label12:
        $r12 = new org.springframework.core.convert.TypeDescriptor;

        $r13 = new org.springframework.core.MethodParameter;

        specialinvoke $r13.<org.springframework.core.MethodParameter: void <init>(java.lang.reflect.Method,int)>(r43, i12);

        specialinvoke $r12.<org.springframework.core.convert.TypeDescriptor: void <init>(org.springframework.core.MethodParameter)>($r13);

        interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r12);

        i12 = i12 + 1;

     label13:
        $i1 = lengthof $r10;

        if i12 < $i1 goto label12;

        r44 = null;

        $z3 = virtualinvoke r43.<java.lang.reflect.Method: boolean isVarArgs()>();

        if $z3 == 0 goto label14;

        $i4 = interfaceinvoke r14.<java.util.List: int size()>();

        $i5 = lengthof $r10;

        $i6 = $i5 - 1;

        if $i4 < $i6 goto label14;

        r44 = staticinvoke <org.springframework.expression.spel.support.ReflectionHelper: org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo compareArgumentsVarargs(java.util.List,java.util.List,org.springframework.expression.TypeConverter)>($r11, r14, $r1);

        goto label15;

     label14:
        $i2 = lengthof $r10;

        $i3 = interfaceinvoke r14.<java.util.List: int size()>();

        if $i2 != $i3 goto label15;

        r44 = staticinvoke <org.springframework.expression.spel.support.ReflectionHelper: org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo compareArguments(java.util.List,java.util.List,org.springframework.expression.TypeConverter)>($r11, r14, $r1);

     label15:
        if r44 == null goto label20;

        $r16 = r44.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind kind>;

        $r15 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind EXACT>;

        if $r16 != $r15 goto label17;

        $r21 = new org.springframework.expression.spel.support.ReflectiveMethodExecutor;

        specialinvoke $r21.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: void <init>(java.lang.reflect.Method,int[])>(r43, null);

     label16:
        return $r21;

     label17:
        $r18 = r44.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind kind>;

        $r17 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind CLOSE>;

        if $r18 != $r17 goto label18;

        r40 = r43;

        goto label20;

     label18:
        $r20 = r44.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind kind>;

        $r19 = <org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind: org.springframework.expression.spel.support.ReflectionHelper$ArgsMatchKind REQUIRES_CONVERSION>;

        if $r20 != $r19 goto label20;

        if r42 == null goto label19;

        z5 = 1;

     label19:
        r41 = r44.<org.springframework.expression.spel.support.ReflectionHelper$ArgumentsMatchInfo: int[] argsRequiringConversion>;

        r42 = r43;

     label20:
        i11 = i11 + 1;

     label21:
        if i11 < $i10 goto label10;

        if r40 == null goto label23;

        $r26 = new org.springframework.expression.spel.support.ReflectiveMethodExecutor;

        specialinvoke $r26.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: void <init>(java.lang.reflect.Method,int[])>(r40, null);

     label22:
        return $r26;

     label23:
        if r42 == null goto label26;

        if z5 == 0 goto label24;

        $r23 = new org.springframework.expression.spel.SpelEvaluationException;

        $r25 = <org.springframework.expression.spel.SpelMessage: org.springframework.expression.spel.SpelMessage MULTIPLE_POSSIBLE_METHODS>;

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = r9;

        specialinvoke $r23.<org.springframework.expression.spel.SpelEvaluationException: void <init>(org.springframework.expression.spel.SpelMessage,java.lang.Object[])>($r25, $r24);

        throw $r23;

     label24:
        $r22 = new org.springframework.expression.spel.support.ReflectiveMethodExecutor;

        specialinvoke $r22.<org.springframework.expression.spel.support.ReflectiveMethodExecutor: void <init>(java.lang.reflect.Method,int[])>(r42, r41);

     label25:
        return $r22;

     label26:
        return null;

     label27:
        $r33 := @caughtexception;

        $r34 = new org.springframework.expression.AccessException;

        specialinvoke $r34.<org.springframework.expression.AccessException: void <init>(java.lang.String,java.lang.Exception)>("Failed to resolve method", $r33);

        throw $r34;

        catch org.springframework.expression.EvaluationException from label01 to label16 with label27;
        catch org.springframework.expression.EvaluationException from label17 to label22 with label27;
        catch org.springframework.expression.EvaluationException from label23 to label25 with label27;
    }

    public void registerMethodFilter(java.lang.Class, org.springframework.expression.MethodFilter)
    {
        java.util.Map $r1, $r4, $r5;
        java.lang.Class r3;
        java.util.HashMap $r6;
        org.springframework.expression.MethodFilter r2;
        org.springframework.expression.spel.support.ReflectiveMethodResolver r0;

        r0 := @this: org.springframework.expression.spel.support.ReflectiveMethodResolver;

        r3 := @parameter0: java.lang.Class;

        r2 := @parameter1: org.springframework.expression.MethodFilter;

        $r1 = r0.<org.springframework.expression.spel.support.ReflectiveMethodResolver: java.util.Map filters>;

        if $r1 != null goto label1;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<org.springframework.expression.spel.support.ReflectiveMethodResolver: java.util.Map filters> = $r6;

     label1:
        if r2 != null goto label2;

        $r5 = r0.<org.springframework.expression.spel.support.ReflectiveMethodResolver: java.util.Map filters>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        goto label3;

     label2:
        $r4 = r0.<org.springframework.expression.spel.support.ReflectiveMethodResolver: java.util.Map filters>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2);

     label3:
        return;
    }
}
