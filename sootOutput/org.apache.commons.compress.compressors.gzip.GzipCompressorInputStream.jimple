public class org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream extends org.apache.commons.compress.compressors.CompressorInputStream
{
    private static final int FHCRC;
    private static final int FEXTRA;
    private static final int FNAME;
    private static final int FCOMMENT;
    private static final int FRESERVED;
    private final java.io.InputStream in;
    private final boolean decompressConcatenated;
    private final byte[] buf;
    private int bufUsed;
    private java.util.zip.Inflater inf;
    private final java.util.zip.CRC32 crc;
    private int memberSize;
    private boolean endReached;
    private final byte[] oneByte;
    private final org.apache.commons.compress.compressors.gzip.GzipParameters parameters;
    static final boolean $assertionsDisabled;

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream r0;
        java.io.InputStream r1;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: void <init>(java.io.InputStream,boolean)>(r1, 0);

        return;
    }

    public void <init>(java.io.InputStream, boolean) throws java.io.IOException
    {
        byte[] $r1, $r4;
        java.io.BufferedInputStream $r7;
        java.util.zip.Inflater $r2;
        org.apache.commons.compress.compressors.gzip.GzipParameters $r5;
        java.util.zip.CRC32 $r3;
        org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream r0;
        java.io.InputStream r6;
        boolean $z0, z1;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;

        r6 := @parameter0: java.io.InputStream;

        z1 := @parameter1: boolean;

        specialinvoke r0.<org.apache.commons.compress.compressors.CompressorInputStream: void <init>()>();

        $r1 = newarray (byte)[8192];

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: byte[] buf> = $r1;

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int bufUsed> = 0;

        $r2 = new java.util.zip.Inflater;

        specialinvoke $r2.<java.util.zip.Inflater: void <init>(boolean)>(1);

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.Inflater inf> = $r2;

        $r3 = new java.util.zip.CRC32;

        specialinvoke $r3.<java.util.zip.CRC32: void <init>()>();

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.CRC32 crc> = $r3;

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: boolean endReached> = 0;

        $r4 = newarray (byte)[1];

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: byte[] oneByte> = $r4;

        $r5 = new org.apache.commons.compress.compressors.gzip.GzipParameters;

        specialinvoke $r5.<org.apache.commons.compress.compressors.gzip.GzipParameters: void <init>()>();

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: org.apache.commons.compress.compressors.gzip.GzipParameters parameters> = $r5;

        $z0 = virtualinvoke r6.<java.io.InputStream: boolean markSupported()>();

        if $z0 == 0 goto label1;

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.io.InputStream in> = r6;

        goto label2;

     label1:
        $r7 = new java.io.BufferedInputStream;

        specialinvoke $r7.<java.io.BufferedInputStream: void <init>(java.io.InputStream)>(r6);

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.io.InputStream in> = $r7;

     label2:
        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: boolean decompressConcatenated> = z1;

        specialinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: boolean init(boolean)>(1);

        return;
    }

    public org.apache.commons.compress.compressors.gzip.GzipParameters getMetaData()
    {
        org.apache.commons.compress.compressors.gzip.GzipParameters $r1;
        org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: org.apache.commons.compress.compressors.gzip.GzipParameters parameters>;

        return $r1;
    }

    private boolean init(boolean) throws java.io.IOException
    {
        byte[] $r10, $r13;
        java.util.zip.Inflater $r6;
        boolean $z0, z1, $z2;
        java.lang.StringBuilder $r18, $r19, $r20, $r30;
        java.io.DataInputStream $r29;
        long $l5;
        org.apache.commons.compress.compressors.gzip.GzipParameters $r4, $r5, $r9, $r12, $r14, $r26;
        java.lang.AssertionError $r27;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, $i20, $i22;
        java.lang.String $r21, $r25, $r33, $r34;
        org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream r0;
        java.io.IOException $r28, $r31, $r32;
        java.util.zip.CRC32 $r7;
        java.io.InputStream $r3, $r23, $r24;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;

        z1 := @parameter0: boolean;

        $z0 = <org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if z1 != 0 goto label01;

        $z2 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: boolean decompressConcatenated>;

        if $z2 != 0 goto label01;

        $r27 = new java.lang.AssertionError;

        specialinvoke $r27.<java.lang.AssertionError: void <init>()>();

        throw $r27;

     label01:
        $r23 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.io.InputStream in>;

        $i14 = virtualinvoke $r23.<java.io.InputStream: int read()>();

        $r24 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.io.InputStream in>;

        $i15 = virtualinvoke $r24.<java.io.InputStream: int read()>();

        $i20 = (int) -1;

        if $i14 != $i20 goto label02;

        if z1 != 0 goto label02;

        return 0;

     label02:
        if $i14 != 31 goto label03;

        if $i15 == 139 goto label06;

     label03:
        $r28 = new java.io.IOException;

        if z1 == 0 goto label04;

        $r25 = "Input is not in the .gz format";

        goto label05;

     label04:
        $r25 = "Garbage after a valid .gz stream";

     label05:
        specialinvoke $r28.<java.io.IOException: void <init>(java.lang.String)>($r25);

        throw $r28;

     label06:
        $r29 = new java.io.DataInputStream;

        $r3 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.io.InputStream in>;

        specialinvoke $r29.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r3);

        $i0 = virtualinvoke $r29.<java.io.DataInputStream: int readUnsignedByte()>();

        if $i0 == 8 goto label07;

        $r31 = new java.io.IOException;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported compression method ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in the .gz header");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r31.<java.io.IOException: void <init>(java.lang.String)>($r21);

        throw $r31;

     label07:
        $i1 = virtualinvoke $r29.<java.io.DataInputStream: int readUnsignedByte()>();

        $i2 = $i1 & 224;

        if $i2 == 0 goto label08;

        $r32 = new java.io.IOException;

        specialinvoke $r32.<java.io.IOException: void <init>(java.lang.String)>("Reserved flags are set in the .gz header");

        throw $r32;

     label08:
        $r4 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: org.apache.commons.compress.compressors.gzip.GzipParameters parameters>;

        $i3 = specialinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int readLittleEndianInt(java.io.DataInputStream)>($r29);

        $i4 = $i3 * 1000;

        $l5 = (long) $i4;

        virtualinvoke $r4.<org.apache.commons.compress.compressors.gzip.GzipParameters: void setModificationTime(long)>($l5);

        $i6 = virtualinvoke $r29.<java.io.DataInputStream: int readUnsignedByte()>();

        lookupswitch($i6)
        {
            case 2: goto label09;
            case 4: goto label10;
            default: goto label11;
        };

     label09:
        $r14 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: org.apache.commons.compress.compressors.gzip.GzipParameters parameters>;

        virtualinvoke $r14.<org.apache.commons.compress.compressors.gzip.GzipParameters: void setCompressionLevel(int)>(9);

        goto label11;

     label10:
        $r5 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: org.apache.commons.compress.compressors.gzip.GzipParameters parameters>;

        virtualinvoke $r5.<org.apache.commons.compress.compressors.gzip.GzipParameters: void setCompressionLevel(int)>(1);

        goto label11;

     label11:
        $r26 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: org.apache.commons.compress.compressors.gzip.GzipParameters parameters>;

        $i16 = virtualinvoke $r29.<java.io.DataInputStream: int readUnsignedByte()>();

        virtualinvoke $r26.<org.apache.commons.compress.compressors.gzip.GzipParameters: void setOperatingSystem(int)>($i16);

        $i17 = $i1 & 4;

        if $i17 == 0 goto label13;

        $i10 = virtualinvoke $r29.<java.io.DataInputStream: int readUnsignedByte()>();

        $i11 = virtualinvoke $r29.<java.io.DataInputStream: int readUnsignedByte()>();

        $i12 = $i11 << 8;

        i18 = $i10 | $i12;

     label12:
        $i13 = i18;

        $i22 = (int) -1;

        i18 = i18 + $i22;

        if $i13 <= 0 goto label13;

        virtualinvoke $r29.<java.io.DataInputStream: int readUnsignedByte()>();

        goto label12;

     label13:
        $i7 = $i1 & 8;

        if $i7 == 0 goto label14;

        $r12 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: org.apache.commons.compress.compressors.gzip.GzipParameters parameters>;

        $r33 = new java.lang.String;

        $r13 = specialinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: byte[] readToNull(java.io.DataInputStream)>($r29);

        specialinvoke $r33.<java.lang.String: void <init>(byte[],java.lang.String)>($r13, "ISO-8859-1");

        virtualinvoke $r12.<org.apache.commons.compress.compressors.gzip.GzipParameters: void setFilename(java.lang.String)>($r33);

     label14:
        $i8 = $i1 & 16;

        if $i8 == 0 goto label15;

        $r9 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: org.apache.commons.compress.compressors.gzip.GzipParameters parameters>;

        $r34 = new java.lang.String;

        $r10 = specialinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: byte[] readToNull(java.io.DataInputStream)>($r29);

        specialinvoke $r34.<java.lang.String: void <init>(byte[],java.lang.String)>($r10, "ISO-8859-1");

        virtualinvoke $r9.<org.apache.commons.compress.compressors.gzip.GzipParameters: void setComment(java.lang.String)>($r34);

     label15:
        $i9 = $i1 & 2;

        if $i9 == 0 goto label16;

        virtualinvoke $r29.<java.io.DataInputStream: short readShort()>();

     label16:
        $r6 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.Inflater inf>;

        virtualinvoke $r6.<java.util.zip.Inflater: void reset()>();

        $r7 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r7.<java.util.zip.CRC32: void reset()>();

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int memberSize> = 0;

        return 1;
    }

    private byte[] readToNull(java.io.DataInputStream) throws java.io.IOException
    {
        java.io.DataInputStream r1;
        byte[] $r2;
        java.io.ByteArrayOutputStream $r0;
        int $i0;
        org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream r3;

        r3 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;

        r1 := @parameter0: java.io.DataInputStream;

        $r0 = new java.io.ByteArrayOutputStream;

        specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>();

     label1:
        $i0 = virtualinvoke r1.<java.io.DataInputStream: int readUnsignedByte()>();

        if $i0 == 0 goto label2;

        virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(int)>($i0);

        goto label1;

     label2:
        $r2 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r2;
    }

    private int readLittleEndianInt(java.io.DataInputStream) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream r1;

        r1 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;

        r0 := @parameter0: java.io.DataInputStream;

        $i0 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedByte()>();

        $i1 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedByte()>();

        $i2 = $i1 << 8;

        $i3 = $i0 | $i2;

        $i4 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedByte()>();

        $i5 = $i4 << 16;

        $i6 = $i3 | $i5;

        $i7 = virtualinvoke r0.<java.io.DataInputStream: int readUnsignedByte()>();

        $i8 = $i7 << 24;

        $i9 = $i6 | $i8;

        return $i9;
    }

    public int read() throws java.io.IOException
    {
        byte[] $r1, $r2;
        short $s2;
        byte $b1;
        int $i0, $i4;
        org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream r0;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: byte[] oneByte>;

        $i0 = virtualinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int read(byte[],int,int)>($r1, 0, 1);

        $i4 = (int) -1;

        if $i0 != $i4 goto label1;

        $s2 = -1;

        goto label2;

     label1:
        $r2 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: byte[] oneByte>;

        $b1 = $r2[0];

        $s2 = $b1 & 255;

     label2:
        return $s2;
    }

    public int read(byte[], int, int) throws java.io.IOException
    {
        byte[] r2, $r16, $r18, $r20;
        byte $b8, $b10;
        long $l5, $l6, $l7, $l9, $l17, $l18, l27;
        org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream r0;
        java.io.IOException $r26, $r27, $r29, $r30;
        java.util.zip.CRC32 $r4, $r11;
        java.util.zip.Inflater $r1, $r3, $r5, $r7, $r12, $r21;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.io.EOFException $r25;
        java.io.DataInputStream $r28;
        int $i0, $i1, $i2, $i3, $i4, $i11, $i12, $i13, $i14, $i15, $i16, $i19, $i20, $i21, $i22, i23, i24, i25, i26, i28, i29, i30, $i31, $i33, $i35, $i37;
        java.util.zip.DataFormatException $r23;
        java.io.InputStream $r6, $r8, $r10, $r17, $r19;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;

        r2 := @parameter0: byte[];

        i23 := @parameter1: int;

        i24 := @parameter2: int;

        $z0 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: boolean endReached>;

        if $z0 == 0 goto label01;

        $i33 = (int) -1;

        return $i33;

     label01:
        i25 = 0;

     label02:
        if i24 <= 0 goto label19;

        $r1 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.Inflater inf>;

        $z1 = virtualinvoke $r1.<java.util.zip.Inflater: boolean needsInput()>();

        if $z1 == 0 goto label04;

        $r17 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.io.InputStream in>;

        $r16 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: byte[] buf>;

        $i19 = lengthof $r16;

        virtualinvoke $r17.<java.io.InputStream: void mark(int)>($i19);

        $r19 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.io.InputStream in>;

        $r18 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: byte[] buf>;

        $i20 = virtualinvoke $r19.<java.io.InputStream: int read(byte[])>($r18);

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int bufUsed> = $i20;

        $i21 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int bufUsed>;

        $i35 = (int) -1;

        if $i21 != $i35 goto label03;

        $r25 = new java.io.EOFException;

        specialinvoke $r25.<java.io.EOFException: void <init>()>();

        throw $r25;

     label03:
        $r21 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.Inflater inf>;

        $r20 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: byte[] buf>;

        $i22 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int bufUsed>;

        virtualinvoke $r21.<java.util.zip.Inflater: void setInput(byte[],int,int)>($r20, 0, $i22);

     label04:
        $r3 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.Inflater inf>;

        $i0 = virtualinvoke $r3.<java.util.zip.Inflater: int inflate(byte[],int,int)>(r2, i23, i24);

     label05:
        goto label07;

     label06:
        $r23 := @caughtexception;

        $r26 = new java.io.IOException;

        specialinvoke $r26.<java.io.IOException: void <init>(java.lang.String)>("Gzip-compressed data is corrupt");

        throw $r26;

     label07:
        $r4 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.CRC32 crc>;

        virtualinvoke $r4.<java.util.zip.CRC32: void update(byte[],int,int)>(r2, i23, $i0);

        $i1 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int memberSize>;

        $i2 = $i1 + $i0;

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int memberSize> = $i2;

        i23 = i23 + $i0;

        i24 = i24 - $i0;

        i25 = i25 + $i0;

        virtualinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: void count(int)>($i0);

        $r5 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.Inflater inf>;

        $z2 = virtualinvoke $r5.<java.util.zip.Inflater: boolean finished()>();

        if $z2 == 0 goto label18;

        $r6 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.io.InputStream in>;

        virtualinvoke $r6.<java.io.InputStream: void reset()>();

        $i3 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int bufUsed>;

        $r7 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.Inflater inf>;

        $i4 = virtualinvoke $r7.<java.util.zip.Inflater: int getRemaining()>();

        i26 = $i3 - $i4;

        $r8 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.io.InputStream in>;

        $l5 = (long) i26;

        $l6 = virtualinvoke $r8.<java.io.InputStream: long skip(long)>($l5);

        $l7 = (long) i26;

        $b8 = $l6 cmp $l7;

        if $b8 == 0 goto label08;

        $r27 = new java.io.IOException;

        specialinvoke $r27.<java.io.IOException: void <init>()>();

        throw $r27;

     label08:
        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int bufUsed> = 0;

        $r28 = new java.io.DataInputStream;

        $r10 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.io.InputStream in>;

        specialinvoke $r28.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r10);

        l27 = 0L;

        i28 = 0;

     label09:
        if i28 >= 4 goto label10;

        $i15 = virtualinvoke $r28.<java.io.DataInputStream: int readUnsignedByte()>();

        $l17 = (long) $i15;

        $i16 = i28 * 8;

        $l18 = $l17 << $i16;

        l27 = l27 | $l18;

        i28 = i28 + 1;

        goto label09;

     label10:
        $r11 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.CRC32 crc>;

        $l9 = virtualinvoke $r11.<java.util.zip.CRC32: long getValue()>();

        $b10 = l27 cmp $l9;

        if $b10 == 0 goto label11;

        $r29 = new java.io.IOException;

        specialinvoke $r29.<java.io.IOException: void <init>(java.lang.String)>("Gzip-compressed data is corrupt (CRC32 error)");

        throw $r29;

     label11:
        i29 = 0;

        i30 = 0;

     label12:
        if i30 >= 4 goto label13;

        $i12 = virtualinvoke $r28.<java.io.DataInputStream: int readUnsignedByte()>();

        $i13 = i30 * 8;

        $i14 = $i12 << $i13;

        i29 = i29 | $i14;

        i30 = i30 + 1;

        goto label12;

     label13:
        $i11 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int memberSize>;

        if i29 == $i11 goto label14;

        $r30 = new java.io.IOException;

        specialinvoke $r30.<java.io.IOException: void <init>(java.lang.String)>("Gzip-compressed data is corrupt(uncompressed size mismatch)");

        throw $r30;

     label14:
        $z3 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: boolean decompressConcatenated>;

        if $z3 == 0 goto label15;

        $z4 = specialinvoke r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: boolean init(boolean)>(0);

        if $z4 != 0 goto label18;

     label15:
        $r12 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.Inflater inf>;

        virtualinvoke $r12.<java.util.zip.Inflater: void end()>();

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.Inflater inf> = null;

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: boolean endReached> = 1;

        if i25 != 0 goto label16;

        $i37 = (int) -1;

        $i31 = $i37;

        goto label17;

     label16:
        $i31 = i25;

     label17:
        return $i31;

     label18:
        goto label02;

     label19:
        return i25;

        catch java.util.zip.DataFormatException from label04 to label05 with label06;
    }

    public static boolean matches(byte[], int)
    {
        byte[] r0;
        byte $b1, $b2;
        int i0, $i3, $i4, $i6;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        if i0 >= 2 goto label1;

        return 0;

     label1:
        $b1 = r0[0];

        $i3 = (int) $b1;

        if $i3 == 31 goto label2;

        return 0;

     label2:
        $b2 = r0[1];

        $i4 = (int) $b2;

        $i6 = (int) -117;

        if $i4 == $i6 goto label3;

        return 0;

     label3:
        return 1;
    }

    public void close() throws java.io.IOException
    {
        java.util.zip.Inflater $r1, $r5;
        org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream r0;
        java.io.InputStream $r2, $r3, $r4;

        r0 := @this: org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;

        $r1 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.Inflater inf>;

        if $r1 == null goto label1;

        $r5 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.Inflater inf>;

        virtualinvoke $r5.<java.util.zip.Inflater: void end()>();

        r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.util.zip.Inflater inf> = null;

     label1:
        $r3 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.io.InputStream in>;

        $r2 = <java.lang.System: java.io.InputStream in>;

        if $r3 == $r2 goto label2;

        $r4 = r0.<org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: java.io.InputStream in>;

        virtualinvoke $r4.<java.io.InputStream: void close()>();

     label2:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        <org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int FRESERVED> = 224;

        <org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int FCOMMENT> = 16;

        <org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int FNAME> = 8;

        <org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int FEXTRA> = 4;

        <org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: int FHCRC> = 2;

        $r0 = class "Lorg/apache/commons/compress/compressors/gzip/GzipCompressorInputStream;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream: boolean $assertionsDisabled> = $z1;

        return;
    }
}
