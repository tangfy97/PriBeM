public class org.eclipse.jetty.util.preventers.AppContextLeakPreventer extends org.eclipse.jetty.util.preventers.AbstractLeakPreventer
{

    public void <init>()
    {
        org.eclipse.jetty.util.preventers.AppContextLeakPreventer r0;

        r0 := @this: org.eclipse.jetty.util.preventers.AppContextLeakPreventer;

        specialinvoke r0.<org.eclipse.jetty.util.preventers.AbstractLeakPreventer: void <init>()>();

        return;
    }

    public void prevent(java.lang.ClassLoader)
    {
        java.lang.Object[] $r6;
        org.eclipse.jetty.util.preventers.AppContextLeakPreventer r7;
        java.lang.StringBuilder $r0, $r2, $r4;
        org.eclipse.jetty.util.log.Logger $r1;
        java.lang.ClassLoader r3;
        java.lang.String $r5;

        r7 := @this: org.eclipse.jetty.util.preventers.AppContextLeakPreventer;

        r3 := @parameter0: java.lang.ClassLoader;

        $r1 = <org.eclipse.jetty.util.preventers.AppContextLeakPreventer: org.eclipse.jetty.util.log.Logger LOG>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pinning classloader for AppContext.getContext() with ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = newarray (java.lang.Object)[0];

        interfaceinvoke $r1.<org.eclipse.jetty.util.log.Logger: void debug(java.lang.String,java.lang.Object[])>($r5, $r6);

        staticinvoke <javax.imageio.ImageIO: boolean getUseCache()>();

        return;
    }
}
