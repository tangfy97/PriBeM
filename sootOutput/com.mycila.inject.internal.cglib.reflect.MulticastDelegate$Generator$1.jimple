class com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1 extends java.lang.Object implements com.mycila.inject.internal.cglib.core.ProcessArrayCallback
{
    private final com.mycila.inject.internal.cglib.core.CodeEmitter val$e;
    private final com.mycila.inject.internal.cglib.core.MethodInfo val$method;
    private final boolean val$returns;
    private final com.mycila.inject.internal.cglib.core.Local val$result2;
    private final com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator this$0;

    void <init>(com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator, com.mycila.inject.internal.cglib.core.CodeEmitter, com.mycila.inject.internal.cglib.core.MethodInfo, boolean, com.mycila.inject.internal.cglib.core.Local)
    {
        com.mycila.inject.internal.cglib.core.Local r4;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator r1;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1 r0;
        com.mycila.inject.internal.cglib.core.CodeEmitter r2;
        com.mycila.inject.internal.cglib.core.MethodInfo r3;
        boolean z0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1;

        r1 := @parameter0: com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator;

        r2 := @parameter1: com.mycila.inject.internal.cglib.core.CodeEmitter;

        r3 := @parameter2: com.mycila.inject.internal.cglib.core.MethodInfo;

        z0 := @parameter3: boolean;

        r4 := @parameter4: com.mycila.inject.internal.cglib.core.Local;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1: com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator this$0> = r1;

        r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e> = r2;

        r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1: com.mycila.inject.internal.cglib.core.MethodInfo val$method> = r3;

        r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1: boolean val$returns> = z0;

        r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1: com.mycila.inject.internal.cglib.core.Local val$result2> = r4;

        return;
    }

    public void processElement(com.mycila.inject.internal.asm.Type)
    {
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1 r0;
        com.mycila.inject.internal.asm.Type $r4, r10;
        com.mycila.inject.internal.cglib.core.CodeEmitter $r2, $r5, $r7, $r9;
        com.mycila.inject.internal.cglib.core.MethodInfo $r6;
        com.mycila.inject.internal.cglib.core.Local $r8;
        com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator $r1;
        java.lang.Class $r3;
        boolean $z0;

        r0 := @this: com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1;

        r10 := @parameter0: com.mycila.inject.internal.asm.Type;

        $r2 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $r1 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1: com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator this$0>;

        $r3 = staticinvoke <com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator: java.lang.Class access$000(com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator)>($r1);

        $r4 = staticinvoke <com.mycila.inject.internal.asm.Type: com.mycila.inject.internal.asm.Type getType(java.lang.Class)>($r3);

        virtualinvoke $r2.<com.mycila.inject.internal.cglib.core.CodeEmitter: void checkcast(com.mycila.inject.internal.asm.Type)>($r4);

        $r5 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        virtualinvoke $r5.<com.mycila.inject.internal.cglib.core.CodeEmitter: void load_args()>();

        $r7 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $r6 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1: com.mycila.inject.internal.cglib.core.MethodInfo val$method>;

        virtualinvoke $r7.<com.mycila.inject.internal.cglib.core.CodeEmitter: void invoke(com.mycila.inject.internal.cglib.core.MethodInfo)>($r6);

        $z0 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1: boolean val$returns>;

        if $z0 == 0 goto label1;

        $r9 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1: com.mycila.inject.internal.cglib.core.CodeEmitter val$e>;

        $r8 = r0.<com.mycila.inject.internal.cglib.reflect.MulticastDelegate$Generator$1: com.mycila.inject.internal.cglib.core.Local val$result2>;

        virtualinvoke $r9.<com.mycila.inject.internal.cglib.core.CodeEmitter: void store_local(com.mycila.inject.internal.cglib.core.Local)>($r8);

     label1:
        return;
    }
}
